
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce0 	.word	0x20002ce0

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001cb5 	.word	0x00001cb5
       8:	00001d09 	.word	0x00001d09
       c:	00001b25 	.word	0x00001b25
      10:	00001b25 	.word	0x00001b25
      14:	00001b25 	.word	0x00001b25
      18:	00001b25 	.word	0x00001b25
      1c:	00001b25 	.word	0x00001b25
      20:	00001b25 	.word	0x00001b25
      24:	00001b25 	.word	0x00001b25
      28:	00001b25 	.word	0x00001b25
      2c:	000016b5 	.word	0x000016b5
      30:	00001b25 	.word	0x00001b25
      34:	00001b25 	.word	0x00001b25
      38:	00001671 	.word	0x00001671
      3c:	00001b25 	.word	0x00001b25

00000040 <_irq_vector_table>:
      40:	00001c79 0001201b 00001c79 00001c79     y.... ..y...y...
      50:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      60:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      70:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      80:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      90:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      a0:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      b0:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      c0:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      d0:	00001c79 00001c79 00001c79              y...y...y...

000000dc <_sw_isr_table>:
      dc:	00000000 00001229 00000000 00001a51     ....).......Q...
      ec:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
      fc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     10c:	00000000 000141d9 00000000 00001a51     .....A......Q...
     11c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     12c:	00000000 00001a51 00000000 00011fe1     ....Q...........
     13c:	00000000 00001a51 20003eb0 00014425     ....Q....>. %D..
     14c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     15c:	00000000 00001a51 00000000 000014d5     ....Q...........
     16c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     17c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     18c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     19c:	00000000 00012015 00000000 00001a51     ..... ......Q...
     1ac:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1bc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1cc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1dc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1ec:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1fc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     20c:	00000000 00001a51                       ....Q...

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fc4e 	bl	1e08 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00015ffd 	.word	0x00015ffd
     5b0:	00016026 	.word	0x00016026
     5b4:	00016004 	.word	0x00016004
     5b8:	0001600b 	.word	0x0001600b
     5bc:	00016015 	.word	0x00016015
     5c0:	0001601f 	.word	0x0001601f

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 fe0c 	bl	51e8 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fea5 	bl	5348 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00016049 	.word	0x00016049
     604:	20000000 	.word	0x20000000
     608:	00016067 	.word	0x00016067

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 fde5 	bl	51e8 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f004 fbfc 	bl	4e2c <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 ff7e 	bl	4548 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00016092 	.word	0x00016092
     664:	00015fa0 	.word	0x00015fa0
     668:	00000671 	.word	0x00000671
     66c:	000160b0 	.word	0x000160b0

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 ffa9 	bl	45ec <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 fd9f 	bl	51ec <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	00016076 	.word	0x00016076
     6bc:	00015fa6 	.word	0x00015fa6

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 fecc 	bl	4460 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f004 f85c 	bl	479c <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 ff28 	bl	4548 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	000160d3 	.word	0x000160d3
     70c:	000160f3 	.word	0x000160f3
     710:	20003a20 	.word	0x20003a20
     714:	00015fae 	.word	0x00015fae
     718:	00000671 	.word	0x00000671
     71c:	000160b0 	.word	0x000160b0
     720:	0001610a 	.word	0x0001610a

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a54 	.word	0x20003a54
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f014 fc7e 	bl	151a4 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f9ac 	bl	1c04 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a58 	.word	0x20003a58

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a58 	.word	0x20003a58

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr

00000fe2 <syslog_hook_default>:
 */

#include <logging/sys_log.h>

void syslog_hook_default(const char *fmt, ...)
{
     fe2:	b40f      	push	{r0, r1, r2, r3}
	(void)(fmt);  /* Prevent warning about unused argument */
}
     fe4:	b004      	add	sp, #16
     fe6:	4770      	bx	lr

00000fe8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fea:	4c1c      	ldr	r4, [pc, #112]	; (105c <sys_rand32_get+0x74>)
     fec:	f3bf 8f5b 	dmb	ish
     ff0:	6820      	ldr	r0, [r4, #0]
     ff2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff6:	b9c0      	cbnz	r0, 102a <sys_rand32_get+0x42>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff8:	4819      	ldr	r0, [pc, #100]	; (1060 <sys_rand32_get+0x78>)
     ffa:	f013 fb17 	bl	1462c <device_get_binding>
		__ASSERT((dev != NULL),
     ffe:	b950      	cbnz	r0, 1016 <sys_rand32_get+0x2e>
    1000:	4918      	ldr	r1, [pc, #96]	; (1064 <sys_rand32_get+0x7c>)
    1002:	4a19      	ldr	r2, [pc, #100]	; (1068 <sys_rand32_get+0x80>)
    1004:	4819      	ldr	r0, [pc, #100]	; (106c <sys_rand32_get+0x84>)
    1006:	231b      	movs	r3, #27
    1008:	f7ff ffc0 	bl	f8c <printk>
    100c:	4914      	ldr	r1, [pc, #80]	; (1060 <sys_rand32_get+0x78>)
    100e:	4818      	ldr	r0, [pc, #96]	; (1070 <sys_rand32_get+0x88>)
    1010:	f7ff ffbc 	bl	f8c <printk>
    1014:	e7fe      	b.n	1014 <sys_rand32_get+0x2c>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1016:	f3bf 8f5b 	dmb	ish
    101a:	e854 3f00 	ldrex	r3, [r4]
    101e:	e844 0200 	strex	r2, r0, [r4]
    1022:	2a00      	cmp	r2, #0
    1024:	d1f9      	bne.n	101a <sys_rand32_get+0x32>
    1026:	f3bf 8f5b 	dmb	ish
					    u8_t *buffer,
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
    102a:	6843      	ldr	r3, [r0, #4]
    102c:	681b      	ldr	r3, [r3, #0]
    102e:	b94b      	cbnz	r3, 1044 <sys_rand32_get+0x5c>
    1030:	234a      	movs	r3, #74	; 0x4a
    1032:	4a10      	ldr	r2, [pc, #64]	; (1074 <sys_rand32_get+0x8c>)
    1034:	4910      	ldr	r1, [pc, #64]	; (1078 <sys_rand32_get+0x90>)
    1036:	480d      	ldr	r0, [pc, #52]	; (106c <sys_rand32_get+0x84>)
    1038:	f7ff ffa8 	bl	f8c <printk>
    103c:	480f      	ldr	r0, [pc, #60]	; (107c <sys_rand32_get+0x94>)
    103e:	f7ff ffa5 	bl	f8c <printk>
    1042:	e7fe      	b.n	1042 <sys_rand32_get+0x5a>
	return api->get_entropy(dev, buffer, length);
    1044:	2204      	movs	r2, #4
    1046:	eb0d 0102 	add.w	r1, sp, r2
    104a:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    104c:	2800      	cmp	r0, #0
    104e:	da02      	bge.n	1056 <sys_rand32_get+0x6e>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1050:	f000 faba 	bl	15c8 <_timer_cycle_get_32>
    1054:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1056:	9801      	ldr	r0, [sp, #4]
    1058:	b002      	add	sp, #8
    105a:	bd10      	pop	{r4, pc}
    105c:	20000004 	.word	0x20000004
    1060:	00016138 	.word	0x00016138
    1064:	00016187 	.word	0x00016187
    1068:	00016142 	.word	0x00016142
    106c:	0001619c 	.word	0x0001619c
    1070:	000161bb 	.word	0x000161bb
    1074:	00016211 	.word	0x00016211
    1078:	00016242 	.word	0x00016242
    107c:	00016253 	.word	0x00016253

00001080 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1080:	280a      	cmp	r0, #10
{
    1082:	b538      	push	{r3, r4, r5, lr}
    1084:	4604      	mov	r4, r0
    1086:	4d07      	ldr	r5, [pc, #28]	; (10a4 <console_out+0x24>)
	if ('\n' == c) {
    1088:	d104      	bne.n	1094 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    108a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    108c:	6843      	ldr	r3, [r0, #4]
    108e:	210d      	movs	r1, #13
    1090:	685b      	ldr	r3, [r3, #4]
    1092:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1094:	6828      	ldr	r0, [r5, #0]
    1096:	6843      	ldr	r3, [r0, #4]
    1098:	b2e1      	uxtb	r1, r4
    109a:	685b      	ldr	r3, [r3, #4]
    109c:	4798      	blx	r3

	return c;
}
    109e:	4620      	mov	r0, r4
    10a0:	bd38      	pop	{r3, r4, r5, pc}
    10a2:	bf00      	nop
    10a4:	20000008 	.word	0x20000008

000010a8 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    10a8:	4801      	ldr	r0, [pc, #4]	; (10b0 <uart_console_hook_install+0x8>)
    10aa:	f7ff be29 	b.w	d00 <__printk_hook_install>
    10ae:	bf00      	nop
    10b0:	00001081 	.word	0x00001081

000010b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    10b4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    10b6:	4804      	ldr	r0, [pc, #16]	; (10c8 <uart_console_init+0x14>)
    10b8:	f013 fab8 	bl	1462c <device_get_binding>
    10bc:	4b03      	ldr	r3, [pc, #12]	; (10cc <uart_console_init+0x18>)
    10be:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    10c0:	f7ff fff2 	bl	10a8 <uart_console_hook_install>

	return 0;
}
    10c4:	2000      	movs	r0, #0
    10c6:	bd08      	pop	{r3, pc}
    10c8:	00016277 	.word	0x00016277
    10cc:	20000008 	.word	0x20000008

000010d0 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    10d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    10d2:	f04f 0320 	mov.w	r3, #32
    10d6:	f3ef 8211 	mrs	r2, BASEPRI
    10da:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    10de:	4c11      	ldr	r4, [pc, #68]	; (1124 <_m16src_stop+0x54>)
    10e0:	7823      	ldrb	r3, [r4, #0]
    10e2:	b923      	cbnz	r3, 10ee <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10e4:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10e8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10ec:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10ee:	3b01      	subs	r3, #1
    10f0:	b2db      	uxtb	r3, r3
    10f2:	7023      	strb	r3, [r4, #0]
    10f4:	b123      	cbz	r3, 1100 <_m16src_stop+0x30>
    10f6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10fa:	f06f 000f 	mvn.w	r0, #15
    10fe:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    1100:	4b09      	ldr	r3, [pc, #36]	; (1128 <_m16src_stop+0x58>)
    1102:	7818      	ldrb	r0, [r3, #0]
    1104:	2101      	movs	r1, #1
    1106:	b128      	cbz	r0, 1114 <_m16src_stop+0x44>
		m16src_ref++;
    1108:	7021      	strb	r1, [r4, #0]
    110a:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    110e:	f06f 000a 	mvn.w	r0, #10
    1112:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    1114:	7019      	strb	r1, [r3, #0]
    1116:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    111e:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    1120:	7018      	strb	r0, [r3, #0]

	return 0;
}
    1122:	bd10      	pop	{r4, pc}
    1124:	2000000e 	.word	0x2000000e
    1128:	2000000d 	.word	0x2000000d

0000112c <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    112c:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    112e:	2200      	movs	r2, #0
    1130:	4610      	mov	r0, r2
    1132:	2101      	movs	r1, #1
    1134:	f000 fc5e 	bl	19f4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1138:	2000      	movs	r0, #0
    113a:	f000 fc29 	bl	1990 <_arch_irq_enable>

	return 0;
}
    113e:	2000      	movs	r0, #0
    1140:	bd08      	pop	{r3, pc}
	...

00001144 <_m16src_start>:
{
    1144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__asm__ volatile(
    1148:	f04f 0320 	mov.w	r3, #32
    114c:	f3ef 8211 	mrs	r2, BASEPRI
    1150:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    1154:	4b2d      	ldr	r3, [pc, #180]	; (120c <_m16src_start+0xc8>)
    1156:	7818      	ldrb	r0, [r3, #0]
    1158:	1c44      	adds	r4, r0, #1
    115a:	701c      	strb	r4, [r3, #0]
    115c:	4698      	mov	r8, r3
    115e:	b178      	cbz	r0, 1180 <_m16src_start+0x3c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1160:	f382 8811 	msr	BASEPRI, r2
	__ASSERT_NO_MSG(m16src_ref);
    1164:	f898 3000 	ldrb.w	r3, [r8]
    1168:	2b00      	cmp	r3, #0
    116a:	d142      	bne.n	11f2 <_m16src_start+0xae>
    116c:	235e      	movs	r3, #94	; 0x5e
    116e:	4a28      	ldr	r2, [pc, #160]	; (1210 <_m16src_start+0xcc>)
    1170:	4928      	ldr	r1, [pc, #160]	; (1214 <_m16src_start+0xd0>)
    1172:	4829      	ldr	r0, [pc, #164]	; (1218 <_m16src_start+0xd4>)
    1174:	f7ff ff0a 	bl	f8c <printk>
    1178:	4828      	ldr	r0, [pc, #160]	; (121c <_m16src_start+0xd8>)
    117a:	f7ff ff07 	bl	f8c <printk>
    117e:	e7fe      	b.n	117e <_m16src_start+0x3a>
	if (m16src_grd) {
    1180:	4d27      	ldr	r5, [pc, #156]	; (1220 <_m16src_start+0xdc>)
    1182:	782f      	ldrb	r7, [r5, #0]
    1184:	b137      	cbz	r7, 1194 <_m16src_start+0x50>
		m16src_ref--;
    1186:	7018      	strb	r0, [r3, #0]
    1188:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    118c:	f06f 000a 	mvn.w	r0, #10
    1190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	m16src_grd = 1;
    1194:	2601      	movs	r6, #1
    1196:	702e      	strb	r6, [r5, #0]
    1198:	f382 8811 	msr	BASEPRI, r2
    119c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    11a0:	b319      	cbz	r1, 11ea <_m16src_start+0xa6>
		irq_disable(POWER_CLOCK_IRQn);
    11a2:	4638      	mov	r0, r7
    11a4:	f000 fc04 	bl	19b0 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11a8:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    11ac:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    11b0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    11b4:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    11b6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    11ba:	b192      	cbz	r2, 11e2 <_m16src_start+0x9e>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11bc:	2200      	movs	r2, #0
    11be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11c2:	4a18      	ldr	r2, [pc, #96]	; (1224 <_m16src_start+0xe0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    11c4:	f013 0f01 	tst.w	r3, #1
    11c8:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    11cc:	bf08      	it	eq
    11ce:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    11d2:	2000      	movs	r0, #0
    11d4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    11d8:	f000 fbda 	bl	1990 <_arch_irq_enable>
	m16src_grd = 0;
    11dc:	2300      	movs	r3, #0
    11de:	702b      	strb	r3, [r5, #0]
    11e0:	e7c0      	b.n	1164 <_m16src_start+0x20>
			__WFE();
    11e2:	bf20      	wfe
			__SEV();
    11e4:	bf40      	sev
			__WFE();
    11e6:	bf20      	wfe
    11e8:	e7e5      	b.n	11b6 <_m16src_start+0x72>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    11ee:	6026      	str	r6, [r4, #0]
    11f0:	e7f4      	b.n	11dc <_m16src_start+0x98>
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    11f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    11fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    11fe:	bf14      	ite	ne
    1200:	2000      	movne	r0, #0
    1202:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    120a:	bf00      	nop
    120c:	2000000e 	.word	0x2000000e
    1210:	00016298 	.word	0x00016298
    1214:	000162e0 	.word	0x000162e0
    1218:	0001619c 	.word	0x0001619c
    121c:	000161ba 	.word	0x000161ba
    1220:	2000000d 	.word	0x2000000d
    1224:	e000e100 	.word	0xe000e100

00001228 <_power_clock_isr>:
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    122a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    122e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1230:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1234:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1238:	f8d3 740c 	ldr.w	r7, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    123c:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1240:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1244:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1248:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    124c:	f002 0201 	and.w	r2, r2, #1
	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);
    1250:	f1be 0f00 	cmp.w	lr, #0
    1254:	d130      	bne.n	12b8 <_power_clock_isr+0x90>
    1256:	b1f6      	cbz	r6, 1296 <_power_clock_isr+0x6e>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    125c:	2600      	movs	r6, #0
    125e:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    1262:	b13a      	cbz	r2, 1274 <_power_clock_isr+0x4c>
    1264:	03fb      	lsls	r3, r7, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1266:	bf41      	itttt	mi
    1268:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    126c:	2201      	movmi	r2, #1
    126e:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    1272:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    1274:	b339      	cbz	r1, 12c6 <_power_clock_isr+0x9e>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    127a:	2200      	movs	r2, #0
    127c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		__ASSERT_NO_MSG(0);
    1280:	492c      	ldr	r1, [pc, #176]	; (1334 <_power_clock_isr+0x10c>)
    1282:	4a2d      	ldr	r2, [pc, #180]	; (1338 <_power_clock_isr+0x110>)
    1284:	482d      	ldr	r0, [pc, #180]	; (133c <_power_clock_isr+0x114>)
    1286:	f240 132f 	movw	r3, #303	; 0x12f
    128a:	f7ff fe7f 	bl	f8c <printk>
    128e:	482c      	ldr	r0, [pc, #176]	; (1340 <_power_clock_isr+0x118>)
    1290:	f7ff fe7c 	bl	f8c <printk>
    1294:	e7fe      	b.n	1294 <_power_clock_isr+0x6c>
	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);
    1296:	2a00      	cmp	r2, #0
    1298:	d1e4      	bne.n	1264 <_power_clock_isr+0x3c>
    129a:	2900      	cmp	r1, #0
    129c:	d1eb      	bne.n	1276 <_power_clock_isr+0x4e>
    129e:	b990      	cbnz	r0, 12c6 <_power_clock_isr+0x9e>
    12a0:	bb44      	cbnz	r4, 12f4 <_power_clock_isr+0xcc>
    12a2:	f240 1317 	movw	r3, #279	; 0x117
    12a6:	4a24      	ldr	r2, [pc, #144]	; (1338 <_power_clock_isr+0x110>)
    12a8:	4926      	ldr	r1, [pc, #152]	; (1344 <_power_clock_isr+0x11c>)
    12aa:	4824      	ldr	r0, [pc, #144]	; (133c <_power_clock_isr+0x114>)
    12ac:	f7ff fe6e 	bl	f8c <printk>
    12b0:	4823      	ldr	r0, [pc, #140]	; (1340 <_power_clock_isr+0x118>)
    12b2:	f7ff fe6b 	bl	f8c <printk>
    12b6:	e7fe      	b.n	12b6 <_power_clock_isr+0x8e>
		NRF_POWER->EVENTS_POFWARN = 0;
    12b8:	f04f 0e00 	mov.w	lr, #0
    12bc:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12c0:	2e00      	cmp	r6, #0
    12c2:	d0ce      	beq.n	1262 <_power_clock_isr+0x3a>
    12c4:	e7c8      	b.n	1258 <_power_clock_isr+0x30>
	if (done) {
    12c6:	b1a8      	cbz	r0, 12f4 <_power_clock_isr+0xcc>
		NRF_CLOCK->EVENTS_DONE = 0;
    12c8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		err = _m16src_stop(dev, NULL);
    12cc:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    12ce:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12d2:	2100      	movs	r1, #0
    12d4:	f7ff fefc 	bl	10d0 <_m16src_stop>
		__ASSERT_NO_MSG(!err);
    12d8:	b150      	cbz	r0, 12f0 <_power_clock_isr+0xc8>
    12da:	f240 1339 	movw	r3, #313	; 0x139
    12de:	4a16      	ldr	r2, [pc, #88]	; (1338 <_power_clock_isr+0x110>)
    12e0:	4919      	ldr	r1, [pc, #100]	; (1348 <_power_clock_isr+0x120>)
    12e2:	4816      	ldr	r0, [pc, #88]	; (133c <_power_clock_isr+0x114>)
    12e4:	f7ff fe52 	bl	f8c <printk>
    12e8:	4815      	ldr	r0, [pc, #84]	; (1340 <_power_clock_isr+0x118>)
    12ea:	f7ff fe4f 	bl	f8c <printk>
    12ee:	e7fe      	b.n	12ee <_power_clock_isr+0xc6>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12f0:	2301      	movs	r3, #1
    12f2:	6173      	str	r3, [r6, #20]
	if (ctto) {
    12f4:	b1e4      	cbz	r4, 1330 <_power_clock_isr+0x108>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12fa:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fc:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12fe:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1302:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1304:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1308:	f7ff ff1c 	bl	1144 <_m16src_start>
		if (!err) {
    130c:	b918      	cbnz	r0, 1316 <_power_clock_isr+0xee>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    130e:	4b0f      	ldr	r3, [pc, #60]	; (134c <_power_clock_isr+0x124>)
    1310:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			__ASSERT_NO_MSG(err == -EINPROGRESS);
    1316:	3044      	adds	r0, #68	; 0x44
    1318:	d00a      	beq.n	1330 <_power_clock_isr+0x108>
    131a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    131e:	4a06      	ldr	r2, [pc, #24]	; (1338 <_power_clock_isr+0x110>)
    1320:	490b      	ldr	r1, [pc, #44]	; (1350 <_power_clock_isr+0x128>)
    1322:	4806      	ldr	r0, [pc, #24]	; (133c <_power_clock_isr+0x114>)
    1324:	f7ff fe32 	bl	f8c <printk>
    1328:	4805      	ldr	r0, [pc, #20]	; (1340 <_power_clock_isr+0x118>)
    132a:	f7ff fe2f 	bl	f8c <printk>
    132e:	e7fe      	b.n	132e <_power_clock_isr+0x106>
    1330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1332:	bf00      	nop
    1334:	0001af5d 	.word	0x0001af5d
    1338:	00016298 	.word	0x00016298
    133c:	0001619c 	.word	0x0001619c
    1340:	000161ba 	.word	0x000161ba
    1344:	000162eb 	.word	0x000162eb
    1348:	0001631a 	.word	0x0001631a
    134c:	e000e100 	.word	0xe000e100
    1350:	0001631f 	.word	0x0001631f

00001354 <_k32src_start>:
{
    1354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1356:	4606      	mov	r6, r0
    1358:	460c      	mov	r4, r1
	__asm__ volatile(
    135a:	f04f 0220 	mov.w	r2, #32
    135e:	f3ef 8311 	mrs	r3, BASEPRI
    1362:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    1366:	4a32      	ldr	r2, [pc, #200]	; (1430 <_k32src_start+0xdc>)
    1368:	7815      	ldrb	r5, [r2, #0]
    136a:	b165      	cbz	r5, 1386 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    136c:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    1370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1374:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    1378:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    137c:	bf0c      	ite	eq
    137e:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    1382:	2000      	movne	r0, #0
    1384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1386:	2701      	movs	r7, #1
    1388:	7017      	strb	r7, [r2, #0]
    138a:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    138e:	4628      	mov	r0, r5
    1390:	f000 fb0e 	bl	19b0 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1398:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    139a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    139e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    13a2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    13a6:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    13aa:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    13ac:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    13b0:	b369      	cbz	r1, 140e <_k32src_start+0xba>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    13b2:	0792      	lsls	r2, r2, #30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13b4:	4f1f      	ldr	r7, [pc, #124]	; (1434 <_k32src_start+0xe0>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    13b6:	bf58      	it	pl
    13b8:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    13ba:	f04f 0100 	mov.w	r1, #0
    13be:	f04f 0501 	mov.w	r5, #1
    13c2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    13c6:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    13ca:	bf58      	it	pl
    13cc:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    13d0:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    13d4:	f000 fadc 	bl	1990 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    13d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    13dc:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    13de:	2218      	movs	r2, #24
    13e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    13e4:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    13e8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    13ec:	f014 0103 	ands.w	r1, r4, #3
    13f0:	d1be      	bne.n	1370 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    13f2:	2010      	movs	r0, #16
    13f4:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    13f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    13fc:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    13fe:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1402:	f7ff fe9f 	bl	1144 <_m16src_start>
		if (!err) {
    1406:	b930      	cbnz	r0, 1416 <_k32src_start+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1408:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    140c:	e7b0      	b.n	1370 <_k32src_start+0x1c>
		__WFE();
    140e:	bf20      	wfe
		__SEV();
    1410:	bf40      	sev
		__WFE();
    1412:	bf20      	wfe
    1414:	e7ca      	b.n	13ac <_k32src_start+0x58>
			__ASSERT_NO_MSG(err == -EINPROGRESS);
    1416:	f110 0f44 	cmn.w	r0, #68	; 0x44
    141a:	d0a9      	beq.n	1370 <_k32src_start+0x1c>
    141c:	23e6      	movs	r3, #230	; 0xe6
    141e:	4a06      	ldr	r2, [pc, #24]	; (1438 <_k32src_start+0xe4>)
    1420:	4906      	ldr	r1, [pc, #24]	; (143c <_k32src_start+0xe8>)
    1422:	4807      	ldr	r0, [pc, #28]	; (1440 <_k32src_start+0xec>)
    1424:	f7ff fdb2 	bl	f8c <printk>
    1428:	4806      	ldr	r0, [pc, #24]	; (1444 <_k32src_start+0xf0>)
    142a:	f7ff fdaf 	bl	f8c <printk>
    142e:	e7fe      	b.n	142e <_k32src_start+0xda>
    1430:	2000000c 	.word	0x2000000c
    1434:	e000e100 	.word	0xe000e100
    1438:	00016298 	.word	0x00016298
    143c:	0001631f 	.word	0x0001631f
    1440:	0001619c 	.word	0x0001619c
    1444:	000161ba 	.word	0x000161ba

00001448 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <rtc_compare_set+0x24>)
    144a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    144e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1452:	1ac0      	subs	r0, r0, r3
    1454:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1458:	4b05      	ldr	r3, [pc, #20]	; (1470 <rtc_compare_set+0x28>)
    145a:	3802      	subs	r0, #2
    145c:	4298      	cmp	r0, r3
    145e:	bf82      	ittt	hi
    1460:	4b04      	ldrhi	r3, [pc, #16]	; (1474 <rtc_compare_set+0x2c>)
    1462:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1466:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    146a:	4770      	bx	lr
    146c:	40011000 	.word	0x40011000
    1470:	007ffffd 	.word	0x007ffffd
    1474:	e000e100 	.word	0xe000e100

00001478 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1478:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    147a:	4b11      	ldr	r3, [pc, #68]	; (14c0 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    147c:	4c11      	ldr	r4, [pc, #68]	; (14c4 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    147e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1482:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1484:	4d10      	ldr	r5, [pc, #64]	; (14c8 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1486:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1488:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    148a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    148e:	4298      	cmp	r0, r3
    1490:	d30f      	bcc.n	14b2 <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    1492:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1496:	490d      	ldr	r1, [pc, #52]	; (14cc <rtc_announce_set_next+0x54>)
    1498:	6809      	ldr	r1, [r1, #0]
    149a:	4288      	cmp	r0, r1
    149c:	bf28      	it	cs
    149e:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    14a0:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    14a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    14a8:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    14aa:	4b09      	ldr	r3, [pc, #36]	; (14d0 <rtc_announce_set_next+0x58>)
    14ac:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    14ae:	f013 ff35 	bl	1531c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    14b2:	6820      	ldr	r0, [r4, #0]
    14b4:	682b      	ldr	r3, [r5, #0]
    14b6:	4418      	add	r0, r3
}
    14b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    14bc:	f7ff bfc4 	b.w	1448 <rtc_compare_set>
    14c0:	40011000 	.word	0x40011000
    14c4:	20000014 	.word	0x20000014
    14c8:	20003e70 	.word	0x20003e70
    14cc:	20000010 	.word	0x20000010
    14d0:	20003e6c 	.word	0x20003e6c

000014d4 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    14d4:	4b02      	ldr	r3, [pc, #8]	; (14e0 <rtc1_nrf5_isr+0xc>)
    14d6:	2200      	movs	r2, #0
    14d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    14dc:	f7ff bfcc 	b.w	1478 <rtc_announce_set_next>
    14e0:	40011000 	.word	0x40011000

000014e4 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    14e4:	1e03      	subs	r3, r0, #0
    14e6:	4a0a      	ldr	r2, [pc, #40]	; (1510 <_timer_idle_enter+0x2c>)
    14e8:	480a      	ldr	r0, [pc, #40]	; (1514 <_timer_idle_enter+0x30>)
    14ea:	db04      	blt.n	14f6 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    14ec:	6811      	ldr	r1, [r2, #0]
    14ee:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    14f2:	428b      	cmp	r3, r1
    14f4:	dd02      	ble.n	14fc <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    14f6:	6813      	ldr	r3, [r2, #0]
    14f8:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    14fc:	6810      	ldr	r0, [r2, #0]
    14fe:	4a06      	ldr	r2, [pc, #24]	; (1518 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    1500:	4906      	ldr	r1, [pc, #24]	; (151c <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    1502:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    1504:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    1506:	fb00 2003 	mla	r0, r0, r3, r2
    150a:	f7ff bf9d 	b.w	1448 <rtc_compare_set>
    150e:	bf00      	nop
    1510:	20003e70 	.word	0x20003e70
    1514:	007fffff 	.word	0x007fffff
    1518:	20000014 	.word	0x20000014
    151c:	20000010 	.word	0x20000010

00001520 <_timer_idle_exit>:
{
    1520:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1522:	4b07      	ldr	r3, [pc, #28]	; (1540 <_timer_idle_exit+0x20>)
    1524:	2200      	movs	r2, #0
    1526:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    152a:	4b06      	ldr	r3, [pc, #24]	; (1544 <_timer_idle_exit+0x24>)
    152c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1530:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1534:	f7ff ffa0 	bl	1478 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1538:	4b03      	ldr	r3, [pc, #12]	; (1548 <_timer_idle_exit+0x28>)
    153a:	2201      	movs	r2, #1
    153c:	601a      	str	r2, [r3, #0]
    153e:	bd08      	pop	{r3, pc}
    1540:	40011000 	.word	0x40011000
    1544:	e000e100 	.word	0xe000e100
    1548:	20000010 	.word	0x20000010

0000154c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    154c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    154e:	4818      	ldr	r0, [pc, #96]	; (15b0 <_sys_clock_driver_init+0x64>)
    1550:	f013 f86c 	bl	1462c <device_get_binding>
	if (!clock) {
    1554:	b348      	cbz	r0, 15aa <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1556:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1558:	4d16      	ldr	r5, [pc, #88]	; (15b4 <_sys_clock_driver_init+0x68>)
    155a:	681b      	ldr	r3, [r3, #0]
    155c:	2101      	movs	r1, #1
    155e:	4798      	blx	r3
	rtc_past = 0;
    1560:	4b15      	ldr	r3, [pc, #84]	; (15b8 <_sys_clock_driver_init+0x6c>)
    1562:	2400      	movs	r4, #0
    1564:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1566:	4b15      	ldr	r3, [pc, #84]	; (15bc <_sys_clock_driver_init+0x70>)
    1568:	2601      	movs	r6, #1
    156a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    156c:	4b14      	ldr	r3, [pc, #80]	; (15c0 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    156e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    157c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1580:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1584:	4b0f      	ldr	r3, [pc, #60]	; (15c4 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1586:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    158a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    158e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1592:	4631      	mov	r1, r6
    1594:	4622      	mov	r2, r4
    1596:	2011      	movs	r0, #17
    1598:	f000 fa2c 	bl	19f4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    159c:	2011      	movs	r0, #17
    159e:	f000 f9f7 	bl	1990 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    15a2:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    15a4:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    15a6:	602e      	str	r6, [r5, #0]
	return 0;
    15a8:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    15aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    15ae:	bd70      	pop	{r4, r5, r6, pc}
    15b0:	0001632a 	.word	0x0001632a
    15b4:	40011000 	.word	0x40011000
    15b8:	20000014 	.word	0x20000014
    15bc:	20000010 	.word	0x20000010
    15c0:	20003e70 	.word	0x20003e70
    15c4:	e000e100 	.word	0xe000e100

000015c8 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    15c8:	4a0a      	ldr	r2, [pc, #40]	; (15f4 <_timer_cycle_get_32+0x2c>)
{
    15ca:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    15cc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    15d0:	4d09      	ldr	r5, [pc, #36]	; (15f8 <_timer_cycle_get_32+0x30>)
    15d2:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    15d6:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    15da:	42a3      	cmp	r3, r4
    15dc:	d107      	bne.n	15ee <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    15de:	4a07      	ldr	r2, [pc, #28]	; (15fc <_timer_cycle_get_32+0x34>)
    15e0:	6812      	ldr	r2, [r2, #0]
    15e2:	4350      	muls	r0, r2
    15e4:	1a1b      	subs	r3, r3, r0
    15e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    15ea:	4418      	add	r0, r3
    15ec:	bd30      	pop	{r4, r5, pc}
    15ee:	4623      	mov	r3, r4
    15f0:	e7ef      	b.n	15d2 <_timer_cycle_get_32+0xa>
    15f2:	bf00      	nop
    15f4:	40011000 	.word	0x40011000
    15f8:	20001980 	.word	0x20001980
    15fc:	20003e70 	.word	0x20003e70

00001600 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1600:	4807      	ldr	r0, [pc, #28]	; (1620 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1602:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    1604:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    1606:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1608:	d008      	beq.n	161c <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    160a:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    160c:	f013 fd5c 	bl	150c8 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    1610:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1614:	4903      	ldr	r1, [pc, #12]	; (1624 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    1616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    161a:	600a      	str	r2, [r1, #0]

0000161c <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    161c:	4770      	bx	lr
    161e:	0000      	.short	0x0000
    ldr r0, =_kernel
    1620:	20001948 	.word	0x20001948
    ldr r1, =_SCS_ICSR
    1624:	e000ed04 	.word	0xe000ed04

00001628 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1628:	4804      	ldr	r0, [pc, #16]	; (163c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    162a:	2300      	movs	r3, #0
    162c:	2120      	movs	r1, #32
    162e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1630:	3301      	adds	r3, #1
    1632:	2b27      	cmp	r3, #39	; 0x27
    1634:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1638:	d1f9      	bne.n	162e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    163a:	4770      	bx	lr
    163c:	e000e100 	.word	0xe000e100

00001640 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1640:	4a08      	ldr	r2, [pc, #32]	; (1664 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1642:	4909      	ldr	r1, [pc, #36]	; (1668 <__swap+0x28>)
	_current->arch.basepri = key;
    1644:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1646:	6809      	ldr	r1, [r1, #0]
    1648:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    164a:	4908      	ldr	r1, [pc, #32]	; (166c <__swap+0x2c>)
	_current->arch.basepri = key;
    164c:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    164e:	684b      	ldr	r3, [r1, #4]
    1650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1654:	604b      	str	r3, [r1, #4]
    1656:	2300      	movs	r3, #0
    1658:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    165c:	6893      	ldr	r3, [r2, #8]
}
    165e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1660:	4770      	bx	lr
    1662:	bf00      	nop
    1664:	20001948 	.word	0x20001948
    1668:	0001ad48 	.word	0x0001ad48
    166c:	e000ed00 	.word	0xe000ed00

00001670 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1670:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1672:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1676:	490d      	ldr	r1, [pc, #52]	; (16ac <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1678:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    167a:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    167c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    167e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1682:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1686:	4f0a      	ldr	r7, [pc, #40]	; (16b0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1688:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    168c:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    168e:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1690:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    1692:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1694:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1696:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1698:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    169c:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    16a0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    16a4:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    16a8:	4770      	bx	lr
    16aa:	0000      	.short	0x0000
    ldr r1, =_kernel
    16ac:	20001948 	.word	0x20001948
    ldr v4, =_SCS_ICSR
    16b0:	e000ed04 	.word	0xe000ed04

000016b4 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    16b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    16b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    16ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    16be:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    16c2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    16c4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    16c8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    16cc:	2902      	cmp	r1, #2
    beq _oops
    16ce:	d0ff      	beq.n	16d0 <_oops>

000016d0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    16d0:	b500      	push	{lr}
    blx _do_kernel_oops
    16d2:	f000 fa67 	bl	1ba4 <_do_kernel_oops>
    pop {pc}
    16d6:	bd00      	pop	{pc}

000016d8 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    16d8:	b510      	push	{r4, lr}
    16da:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    16dc:	f013 fd62 	bl	151a4 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    16e0:	6822      	ldr	r2, [r4, #0]
    16e2:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    16e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    16e8:	4801      	ldr	r0, [pc, #4]	; (16f0 <_FaultThreadShow.isra.2+0x18>)
    16ea:	f7ff bc4f 	b.w	f8c <printk>
    16ee:	bf00      	nop
    16f0:	00016483 	.word	0x00016483

000016f4 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    16f4:	b538      	push	{r3, r4, r5, lr}
    16f6:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    16f8:	481a      	ldr	r0, [pc, #104]	; (1764 <_MpuFault+0x70>)
{
    16fa:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    16fc:	f7ff fc46 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1700:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1704:	4c18      	ldr	r4, [pc, #96]	; (1768 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    1706:	f7ff ffe7 	bl	16d8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    170a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170c:	06d9      	lsls	r1, r3, #27
    170e:	d502      	bpl.n	1716 <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    1710:	4816      	ldr	r0, [pc, #88]	; (176c <_MpuFault+0x78>)
    1712:	f7ff fc3b 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    1716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1718:	071a      	lsls	r2, r3, #28
    171a:	d502      	bpl.n	1722 <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    171c:	4814      	ldr	r0, [pc, #80]	; (1770 <_MpuFault+0x7c>)
    171e:	f7ff fc35 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    1722:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1724:	079b      	lsls	r3, r3, #30
    1726:	d50e      	bpl.n	1746 <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    1728:	4812      	ldr	r0, [pc, #72]	; (1774 <_MpuFault+0x80>)
    172a:	f7ff fc2f 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    172e:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1730:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1732:	0618      	lsls	r0, r3, #24
    1734:	d507      	bpl.n	1746 <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    1736:	4810      	ldr	r0, [pc, #64]	; (1778 <_MpuFault+0x84>)
    1738:	f7ff fc28 	bl	f8c <printk>
			if (fromHardFault) {
    173c:	b11d      	cbz	r5, 1746 <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    173e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1744:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1746:	4c08      	ldr	r4, [pc, #32]	; (1768 <_MpuFault+0x74>)
    1748:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    174a:	07d2      	lsls	r2, r2, #31
    174c:	d502      	bpl.n	1754 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    174e:	480b      	ldr	r0, [pc, #44]	; (177c <_MpuFault+0x88>)
    1750:	f7ff fc1c 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1756:	069b      	lsls	r3, r3, #26
    1758:	d502      	bpl.n	1760 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    175a:	4809      	ldr	r0, [pc, #36]	; (1780 <_MpuFault+0x8c>)
    175c:	f7ff fc16 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1760:	2000      	movs	r0, #0
    1762:	bd38      	pop	{r3, r4, r5, pc}
    1764:	000164cd 	.word	0x000164cd
    1768:	e000ed00 	.word	0xe000ed00
    176c:	000164e4 	.word	0x000164e4
    1770:	000164f6 	.word	0x000164f6
    1774:	0001650a 	.word	0x0001650a
    1778:	00016523 	.word	0x00016523
    177c:	00016534 	.word	0x00016534
    1780:	00016554 	.word	0x00016554

00001784 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1784:	b510      	push	{r4, lr}
    1786:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1788:	481a      	ldr	r0, [pc, #104]	; (17f4 <_UsageFault+0x70>)
    178a:	f7ff fbff 	bl	f8c <printk>

	_FaultThreadShow(esf);
    178e:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1792:	4c19      	ldr	r4, [pc, #100]	; (17f8 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1794:	f7ff ffa0 	bl	16d8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    179a:	019a      	lsls	r2, r3, #6
    179c:	d502      	bpl.n	17a4 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    179e:	4817      	ldr	r0, [pc, #92]	; (17fc <_UsageFault+0x78>)
    17a0:	f7ff fbf4 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    17a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17a6:	01db      	lsls	r3, r3, #7
    17a8:	d502      	bpl.n	17b0 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    17aa:	4815      	ldr	r0, [pc, #84]	; (1800 <_UsageFault+0x7c>)
    17ac:	f7ff fbee 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    17b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17b2:	0318      	lsls	r0, r3, #12
    17b4:	d502      	bpl.n	17bc <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    17b6:	4813      	ldr	r0, [pc, #76]	; (1804 <_UsageFault+0x80>)
    17b8:	f7ff fbe8 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    17bc:	4c0e      	ldr	r4, [pc, #56]	; (17f8 <_UsageFault+0x74>)
    17be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17c0:	0359      	lsls	r1, r3, #13
    17c2:	d502      	bpl.n	17ca <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    17c4:	4810      	ldr	r0, [pc, #64]	; (1808 <_UsageFault+0x84>)
    17c6:	f7ff fbe1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    17ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17cc:	039a      	lsls	r2, r3, #14
    17ce:	d502      	bpl.n	17d6 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    17d0:	480e      	ldr	r0, [pc, #56]	; (180c <_UsageFault+0x88>)
    17d2:	f7ff fbdb 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    17d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17d8:	03db      	lsls	r3, r3, #15
    17da:	d502      	bpl.n	17e2 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    17dc:	480c      	ldr	r0, [pc, #48]	; (1810 <_UsageFault+0x8c>)
    17de:	f7ff fbd5 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    17e2:	4a05      	ldr	r2, [pc, #20]	; (17f8 <_UsageFault+0x74>)
    17e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17e6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    17ea:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    17ee:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    17f0:	2000      	movs	r0, #0
    17f2:	bd10      	pop	{r4, pc}
    17f4:	00016584 	.word	0x00016584
    17f8:	e000ed00 	.word	0xe000ed00
    17fc:	0001659d 	.word	0x0001659d
    1800:	000165b1 	.word	0x000165b1
    1804:	000165cc 	.word	0x000165cc
    1808:	000165eb 	.word	0x000165eb
    180c:	00016611 	.word	0x00016611
    1810:	0001662c 	.word	0x0001662c

00001814 <_BusFault>:
{
    1814:	b538      	push	{r3, r4, r5, lr}
    1816:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    1818:	481d      	ldr	r0, [pc, #116]	; (1890 <_BusFault+0x7c>)
{
    181a:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    181c:	f7ff fbb6 	bl	f8c <printk>
	_FaultThreadShow(esf);
    1820:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1824:	4c1b      	ldr	r4, [pc, #108]	; (1894 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    1826:	f7ff ff57 	bl	16d8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    182a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    182c:	04d8      	lsls	r0, r3, #19
    182e:	d504      	bpl.n	183a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1830:	4819      	ldr	r0, [pc, #100]	; (1898 <_BusFault+0x84>)
}
    1832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    1836:	f7ff bba9 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    183a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    183c:	0519      	lsls	r1, r3, #20
    183e:	d501      	bpl.n	1844 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1840:	4816      	ldr	r0, [pc, #88]	; (189c <_BusFault+0x88>)
    1842:	e7f6      	b.n	1832 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1846:	059a      	lsls	r2, r3, #22
    1848:	d514      	bpl.n	1874 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    184a:	4815      	ldr	r0, [pc, #84]	; (18a0 <_BusFault+0x8c>)
    184c:	f7ff fb9e 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1850:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1852:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1854:	041b      	lsls	r3, r3, #16
    1856:	d507      	bpl.n	1868 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1858:	4812      	ldr	r0, [pc, #72]	; (18a4 <_BusFault+0x90>)
    185a:	f7ff fb97 	bl	f8c <printk>
			if (fromHardFault) {
    185e:	b11d      	cbz	r5, 1868 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1860:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1862:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1866:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1868:	4b0a      	ldr	r3, [pc, #40]	; (1894 <_BusFault+0x80>)
    186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    186c:	0558      	lsls	r0, r3, #21
    186e:	d50e      	bpl.n	188e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1870:	480d      	ldr	r0, [pc, #52]	; (18a8 <_BusFault+0x94>)
    1872:	e7de      	b.n	1832 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1874:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1876:	0559      	lsls	r1, r3, #21
    1878:	d4fa      	bmi.n	1870 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    187a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    187c:	05da      	lsls	r2, r3, #23
    187e:	d501      	bpl.n	1884 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1880:	480a      	ldr	r0, [pc, #40]	; (18ac <_BusFault+0x98>)
    1882:	e7d6      	b.n	1832 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1884:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1886:	049b      	lsls	r3, r3, #18
    1888:	d501      	bpl.n	188e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    188a:	4809      	ldr	r0, [pc, #36]	; (18b0 <_BusFault+0x9c>)
    188c:	e7d1      	b.n	1832 <_BusFault+0x1e>
    188e:	bd38      	pop	{r3, r4, r5, pc}
    1890:	0001634a 	.word	0x0001634a
    1894:	e000ed00 	.word	0xe000ed00
    1898:	000164e4 	.word	0x000164e4
    189c:	000164f6 	.word	0x000164f6
    18a0:	00016361 	.word	0x00016361
    18a4:	00016523 	.word	0x00016523
    18a8:	0001637b 	.word	0x0001637b
    18ac:	00016397 	.word	0x00016397
    18b0:	00016554 	.word	0x00016554

000018b4 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    18b4:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18b6:	4c27      	ldr	r4, [pc, #156]	; (1954 <_Fault+0xa0>)
    18b8:	6863      	ldr	r3, [r4, #4]
    18ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    18be:	1eda      	subs	r2, r3, #3
{
    18c0:	4605      	mov	r5, r0
	switch (fault) {
    18c2:	2a09      	cmp	r2, #9
    18c4:	d83b      	bhi.n	193e <_Fault+0x8a>
    18c6:	e8df f002 	tbb	[pc, r2]
    18ca:	3405      	.short	0x3405
    18cc:	3a3a3036 	.word	0x3a3a3036
    18d0:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    18d4:	4820      	ldr	r0, [pc, #128]	; (1958 <_Fault+0xa4>)
    18d6:	f7ff fb59 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    18da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    18dc:	079a      	lsls	r2, r3, #30
    18de:	d503      	bpl.n	18e8 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    18e0:	481e      	ldr	r0, [pc, #120]	; (195c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    18e2:	f7ff fb53 	bl	f8c <printk>
    18e6:	e002      	b.n	18ee <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    18e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    18ea:	005b      	lsls	r3, r3, #1
    18ec:	d401      	bmi.n	18f2 <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    18ee:	2000      	movs	r0, #0
    18f0:	e009      	b.n	1906 <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    18f2:	481b      	ldr	r0, [pc, #108]	; (1960 <_Fault+0xac>)
    18f4:	f7ff fb4a 	bl	f8c <printk>
		if (SCB_MMFSR) {
    18f8:	4b1a      	ldr	r3, [pc, #104]	; (1964 <_Fault+0xb0>)
    18fa:	781b      	ldrb	r3, [r3, #0]
    18fc:	b143      	cbz	r3, 1910 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    18fe:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    1900:	4628      	mov	r0, r5
    1902:	f7ff fef7 	bl	16f4 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    1906:	4629      	mov	r1, r5
}
    1908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    190c:	f000 b94e 	b.w	1bac <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    1910:	4b15      	ldr	r3, [pc, #84]	; (1968 <_Fault+0xb4>)
    1912:	781b      	ldrb	r3, [r3, #0]
    1914:	b123      	cbz	r3, 1920 <_Fault+0x6c>
			_BusFault(esf, 1);
    1916:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    1918:	4628      	mov	r0, r5
    191a:	f7ff ff7b 	bl	1814 <_BusFault>
    191e:	e7e6      	b.n	18ee <_Fault+0x3a>
		} else if (SCB_UFSR) {
    1920:	4b12      	ldr	r3, [pc, #72]	; (196c <_Fault+0xb8>)
    1922:	881b      	ldrh	r3, [r3, #0]
    1924:	b29b      	uxth	r3, r3
    1926:	2b00      	cmp	r3, #0
    1928:	d0e1      	beq.n	18ee <_Fault+0x3a>
		reason = _UsageFault(esf);
    192a:	4628      	mov	r0, r5
    192c:	f7ff ff2a 	bl	1784 <_UsageFault>
    1930:	e7e9      	b.n	1906 <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    1932:	2100      	movs	r1, #0
    1934:	e7e4      	b.n	1900 <_Fault+0x4c>
		_BusFault(esf, 0);
    1936:	2100      	movs	r1, #0
    1938:	e7ee      	b.n	1918 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    193a:	480d      	ldr	r0, [pc, #52]	; (1970 <_Fault+0xbc>)
    193c:	e7d1      	b.n	18e2 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    193e:	480d      	ldr	r0, [pc, #52]	; (1974 <_Fault+0xc0>)
    1940:	490d      	ldr	r1, [pc, #52]	; (1978 <_Fault+0xc4>)
    1942:	f1a3 0210 	sub.w	r2, r3, #16
    1946:	2b0f      	cmp	r3, #15
    1948:	bfd8      	it	le
    194a:	4601      	movle	r1, r0
    194c:	480b      	ldr	r0, [pc, #44]	; (197c <_Fault+0xc8>)
    194e:	f7ff fb1d 	bl	f8c <printk>
    1952:	e7cc      	b.n	18ee <_Fault+0x3a>
    1954:	e000ed00 	.word	0xe000ed00
    1958:	000163de 	.word	0x000163de
    195c:	000163f6 	.word	0x000163f6
    1960:	00016418 	.word	0x00016418
    1964:	e000ed28 	.word	0xe000ed28
    1968:	e000ed29 	.word	0xe000ed29
    196c:	e000ed2a 	.word	0xe000ed2a
    1970:	00016438 	.word	0x00016438
    1974:	000163b0 	.word	0x000163b0
    1978:	000163c5 	.word	0x000163c5
    197c:	0001646f 	.word	0x0001646f

00001980 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1980:	4a02      	ldr	r2, [pc, #8]	; (198c <_FaultInit+0xc>)
    1982:	6953      	ldr	r3, [r2, #20]
    1984:	f043 0310 	orr.w	r3, r3, #16
    1988:	6153      	str	r3, [r2, #20]
    198a:	4770      	bx	lr
    198c:	e000ed00 	.word	0xe000ed00

00001990 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1990:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1992:	2b00      	cmp	r3, #0
    1994:	db08      	blt.n	19a8 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1996:	2201      	movs	r2, #1
    1998:	f000 001f 	and.w	r0, r0, #31
    199c:	fa02 f000 	lsl.w	r0, r2, r0
    19a0:	095b      	lsrs	r3, r3, #5
    19a2:	4a02      	ldr	r2, [pc, #8]	; (19ac <_arch_irq_enable+0x1c>)
    19a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    19a8:	4770      	bx	lr
    19aa:	bf00      	nop
    19ac:	e000e100 	.word	0xe000e100

000019b0 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    19b0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    19b2:	2b00      	cmp	r3, #0
    19b4:	db0d      	blt.n	19d2 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19b6:	2201      	movs	r2, #1
    19b8:	095b      	lsrs	r3, r3, #5
    19ba:	f000 001f 	and.w	r0, r0, #31
    19be:	fa02 f000 	lsl.w	r0, r2, r0
    19c2:	3320      	adds	r3, #32
    19c4:	4a03      	ldr	r2, [pc, #12]	; (19d4 <_arch_irq_disable+0x24>)
    19c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    19ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ce:	f3bf 8f6f 	isb	sy
    19d2:	4770      	bx	lr
    19d4:	e000e100 	.word	0xe000e100

000019d8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    19d8:	0942      	lsrs	r2, r0, #5
    19da:	4b05      	ldr	r3, [pc, #20]	; (19f0 <_arch_irq_is_enabled+0x18>)
    19dc:	f000 001f 	and.w	r0, r0, #31
    19e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    19e4:	2301      	movs	r3, #1
    19e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    19ea:	4010      	ands	r0, r2
    19ec:	4770      	bx	lr
    19ee:	bf00      	nop
    19f0:	e000e100 	.word	0xe000e100

000019f4 <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    19f4:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
    19f6:	2b07      	cmp	r3, #7
{
    19f8:	b510      	push	{r4, lr}
    19fa:	460c      	mov	r4, r1
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
    19fc:	d90b      	bls.n	1a16 <_irq_priority_set+0x22>
    19fe:	4a0f      	ldr	r2, [pc, #60]	; (1a3c <_irq_priority_set+0x48>)
    1a00:	490f      	ldr	r1, [pc, #60]	; (1a40 <_irq_priority_set+0x4c>)
    1a02:	4810      	ldr	r0, [pc, #64]	; (1a44 <_irq_priority_set+0x50>)
    1a04:	2372      	movs	r3, #114	; 0x72
    1a06:	f7ff fac1 	bl	f8c <printk>
    1a0a:	2207      	movs	r2, #7
    1a0c:	4621      	mov	r1, r4
    1a0e:	480e      	ldr	r0, [pc, #56]	; (1a48 <_irq_priority_set+0x54>)
    1a10:	f7ff fabc 	bl	f8c <printk>
    1a14:	e7fe      	b.n	1a14 <_irq_priority_set+0x20>
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1a16:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    1a18:	2a00      	cmp	r2, #0
    1a1a:	ea4f 1343 	mov.w	r3, r3, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a1e:	bfad      	iteet	ge
    1a20:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a24:	f000 000f 	andlt.w	r0, r0, #15
    1a28:	4a08      	ldrlt	r2, [pc, #32]	; (1a4c <_irq_priority_set+0x58>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a2a:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a2e:	bfb5      	itete	lt
    1a30:	b2db      	uxtblt	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a32:	b2db      	uxtbge	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a34:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a36:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
    1a3a:	bd10      	pop	{r4, pc}
    1a3c:	00016658 	.word	0x00016658
    1a40:	00016692 	.word	0x00016692
    1a44:	0001619c 	.word	0x0001619c
    1a48:	000166a9 	.word	0x000166a9
    1a4c:	e000ed14 	.word	0xe000ed14

00001a50 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1a50:	f000 b868 	b.w	1b24 <__bus_fault>

00001a54 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1a54:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    1a56:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <_arch_isr_direct_pm+0x18>)
    1a5a:	69d8      	ldr	r0, [r3, #28]
    1a5c:	b118      	cbz	r0, 1a66 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1a5e:	2200      	movs	r2, #0
    1a60:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    1a62:	f012 fe09 	bl	14678 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1a66:	b662      	cpsie	i
    1a68:	bd08      	pop	{r3, pc}
    1a6a:	bf00      	nop
    1a6c:	20001948 	.word	0x20001948

00001a70 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a74:	9f09      	ldr	r7, [sp, #36]	; 0x24
	char *pStackMem = K_THREAD_STACK_BUFFER(stack);

	_ASSERT_VALID_PRIO(priority, pEntry);
    1a76:	2f0f      	cmp	r7, #15
{
    1a78:	4605      	mov	r5, r0
    1a7a:	460c      	mov	r4, r1
    1a7c:	4616      	mov	r6, r2
    1a7e:	4698      	mov	r8, r3
	_ASSERT_VALID_PRIO(priority, pEntry);
    1a80:	d125      	bne.n	1ace <_new_thread+0x5e>
    1a82:	4b1c      	ldr	r3, [pc, #112]	; (1af4 <_new_thread+0x84>)
    1a84:	4598      	cmp	r8, r3
    1a86:	d126      	bne.n	1ad6 <_new_thread+0x66>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a8a:	2204      	movs	r2, #4
    1a8c:	4639      	mov	r1, r7
    1a8e:	4628      	mov	r0, r5
    1a90:	f013 feaa 	bl	157e8 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1a94:	f1a6 0120 	sub.w	r1, r6, #32
    1a98:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1a9a:	4a17      	ldr	r2, [pc, #92]	; (1af8 <_new_thread+0x88>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1a9c:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1a9e:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1aa2:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1aa4:	f022 0201 	bic.w	r2, r2, #1
    1aa8:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1aaa:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1aac:	662e      	str	r6, [r5, #96]	; 0x60
    1aae:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1ab0:	9a06      	ldr	r2, [sp, #24]
    1ab2:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1ab4:	9a07      	ldr	r2, [sp, #28]
    1ab6:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1ab8:	9a08      	ldr	r2, [sp, #32]
    1aba:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1abc:	f8c1 8000 	str.w	r8, [r1]
	pInitCtx->xpsr =
    1ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1ac4:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1ac6:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1ac8:	66ab      	str	r3, [r5, #104]	; 0x68
    1aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_ASSERT_VALID_PRIO(priority, pEntry);
    1ace:	f107 0310 	add.w	r3, r7, #16
    1ad2:	2b1e      	cmp	r3, #30
    1ad4:	d9d8      	bls.n	1a88 <_new_thread+0x18>

    1ad6:	233f      	movs	r3, #63	; 0x3f
    1ad8:	4a08      	ldr	r2, [pc, #32]	; (1afc <_new_thread+0x8c>)
    1ada:	4909      	ldr	r1, [pc, #36]	; (1b00 <_new_thread+0x90>)
    1adc:	4809      	ldr	r0, [pc, #36]	; (1b04 <_new_thread+0x94>)
    1ade:	f7ff fa55 	bl	f8c <printk>
	char *stackEnd = pStackMem + stackSize - MPU_GUARD_ALIGN_AND_SIZE;
    1ae2:	f06f 030f 	mvn.w	r3, #15
    1ae6:	220e      	movs	r2, #14
    1ae8:	4639      	mov	r1, r7
    1aea:	4807      	ldr	r0, [pc, #28]	; (1b08 <_new_thread+0x98>)
    1aec:	f7ff fa4e 	bl	f8c <printk>
    1af0:	e7fe      	b.n	1af0 <_new_thread+0x80>
    1af2:	bf00      	nop
    1af4:	00014691 	.word	0x00014691
    1af8:	00000899 	.word	0x00000899
    1afc:	000166db 	.word	0x000166db
    1b00:	00016711 	.word	0x00016711
    1b04:	0001619c 	.word	0x0001619c
    1b08:	000167ad 	.word	0x000167ad

00001b0c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1b0c:	4901      	ldr	r1, [pc, #4]	; (1b14 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1b0e:	2210      	movs	r2, #16
	str r2, [r1]
    1b10:	600a      	str	r2, [r1, #0]
	bx lr
    1b12:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1b14:	e000ed10 	.word	0xe000ed10

00001b18 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1b18:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1b1a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1b1e:	bf30      	wfi

	bx lr
    1b20:	4770      	bx	lr
    1b22:	bf00      	nop

00001b24 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1b24:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1b26:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1b2a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1b48 <__bus_fault+0x24>
	ldr ip, [ip]
    1b2e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1b32:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1b36:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1b38:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1b3c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1b40:	b500      	push	{lr}
	bl _Fault
    1b42:	f7ff feb7 	bl	18b4 <_Fault>

	pop {pc}
    1b46:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1b48:	e000ed04 	.word	0xe000ed04

00001b4c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    1b4c:	2804      	cmp	r0, #4
{
    1b4e:	b538      	push	{r3, r4, r5, lr}
    1b50:	4604      	mov	r4, r0
    1b52:	460d      	mov	r5, r1
	switch (reason) {
    1b54:	d013      	beq.n	1b7e <_NanoFatalErrorHandler+0x32>
    1b56:	2805      	cmp	r0, #5
    1b58:	d013      	beq.n	1b82 <_NanoFatalErrorHandler+0x36>
    1b5a:	2803      	cmp	r0, #3
    1b5c:	d113      	bne.n	1b86 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1b5e:	480c      	ldr	r0, [pc, #48]	; (1b90 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    1b60:	f7ff fa14 	bl	f8c <printk>
    1b64:	f013 fb1e 	bl	151a4 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1b68:	69aa      	ldr	r2, [r5, #24]
    1b6a:	4601      	mov	r1, r0
    1b6c:	4809      	ldr	r0, [pc, #36]	; (1b94 <_NanoFatalErrorHandler+0x48>)
    1b6e:	f7ff fa0d 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1b72:	4629      	mov	r1, r5
    1b74:	4620      	mov	r0, r4
}
    1b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1b7a:	f000 b817 	b.w	1bac <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    1b7e:	4806      	ldr	r0, [pc, #24]	; (1b98 <_NanoFatalErrorHandler+0x4c>)
    1b80:	e7ee      	b.n	1b60 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    1b82:	4806      	ldr	r0, [pc, #24]	; (1b9c <_NanoFatalErrorHandler+0x50>)
    1b84:	e7ec      	b.n	1b60 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1b86:	4601      	mov	r1, r0
    1b88:	4805      	ldr	r0, [pc, #20]	; (1ba0 <_NanoFatalErrorHandler+0x54>)
    1b8a:	f7ff f9ff 	bl	f8c <printk>
		break;
    1b8e:	e7e9      	b.n	1b64 <_NanoFatalErrorHandler+0x18>
    1b90:	000167dc 	.word	0x000167dc
    1b94:	0001685a 	.word	0x0001685a
    1b98:	00016802 	.word	0x00016802
    1b9c:	0001681c 	.word	0x0001681c
    1ba0:	00016837 	.word	0x00016837

00001ba4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1ba4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1ba6:	6800      	ldr	r0, [r0, #0]
    1ba8:	f7ff bfd0 	b.w	1b4c <_NanoFatalErrorHandler>

00001bac <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1bac:	2805      	cmp	r0, #5
{
    1bae:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1bb0:	d00c      	beq.n	1bcc <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1bb2:	f013 fcfd 	bl	155b0 <k_is_in_isr>
    1bb6:	b160      	cbz	r0, 1bd2 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1bb8:	f013 fcfa 	bl	155b0 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1bbc:	4b0c      	ldr	r3, [pc, #48]	; (1bf0 <_SysFatalErrorHandler+0x44>)
    1bbe:	490d      	ldr	r1, [pc, #52]	; (1bf4 <_SysFatalErrorHandler+0x48>)
    1bc0:	2800      	cmp	r0, #0
    1bc2:	bf08      	it	eq
    1bc4:	4619      	moveq	r1, r3
    1bc6:	480c      	ldr	r0, [pc, #48]	; (1bf8 <_SysFatalErrorHandler+0x4c>)
    1bc8:	f7ff f9e0 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1bcc:	f7ff ffa4 	bl	1b18 <k_cpu_idle>
    1bd0:	e7fc      	b.n	1bcc <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1bd2:	f013 fcfd 	bl	155d0 <_is_thread_essential>
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d1ee      	bne.n	1bb8 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1bda:	4c08      	ldr	r4, [pc, #32]	; (1bfc <_SysFatalErrorHandler+0x50>)
    1bdc:	4808      	ldr	r0, [pc, #32]	; (1c00 <_SysFatalErrorHandler+0x54>)
    1bde:	68a1      	ldr	r1, [r4, #8]
    1be0:	f7ff f9d4 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1be4:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1bea:	f000 b80b 	b.w	1c04 <_impl_k_thread_abort>
    1bee:	bf00      	nop
    1bf0:	0001689a 	.word	0x0001689a
    1bf4:	00016896 	.word	0x00016896
    1bf8:	000168ab 	.word	0x000168ab
    1bfc:	20001948 	.word	0x20001948
    1c00:	000168cb 	.word	0x000168cb

00001c04 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1c04:	b538      	push	{r3, r4, r5, lr}
    1c06:	4605      	mov	r5, r0
	__asm__ volatile(
    1c08:	f04f 0320 	mov.w	r3, #32
    1c0c:	f3ef 8411 	mrs	r4, BASEPRI
    1c10:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    1c14:	7a03      	ldrb	r3, [r0, #8]
    1c16:	07db      	lsls	r3, r3, #31
    1c18:	d509      	bpl.n	1c2e <_impl_k_thread_abort+0x2a>
    1c1a:	2325      	movs	r3, #37	; 0x25
    1c1c:	4a10      	ldr	r2, [pc, #64]	; (1c60 <_impl_k_thread_abort+0x5c>)
    1c1e:	4911      	ldr	r1, [pc, #68]	; (1c64 <_impl_k_thread_abort+0x60>)
    1c20:	4811      	ldr	r0, [pc, #68]	; (1c68 <_impl_k_thread_abort+0x64>)
    1c22:	f7ff f9b3 	bl	f8c <printk>
    1c26:	4811      	ldr	r0, [pc, #68]	; (1c6c <_impl_k_thread_abort+0x68>)
    1c28:	f7ff f9b0 	bl	f8c <printk>
    1c2c:	e7fe      	b.n	1c2c <_impl_k_thread_abort+0x28>
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1c2e:	f013 fd47 	bl	156c0 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1c32:	4b0f      	ldr	r3, [pc, #60]	; (1c70 <_impl_k_thread_abort+0x6c>)
    1c34:	689b      	ldr	r3, [r3, #8]
    1c36:	429d      	cmp	r5, r3
    1c38:	d10d      	bne.n	1c56 <_impl_k_thread_abort+0x52>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1c3a:	4b0e      	ldr	r3, [pc, #56]	; (1c74 <_impl_k_thread_abort+0x70>)
    1c3c:	685a      	ldr	r2, [r3, #4]
    1c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1c42:	b922      	cbnz	r2, 1c4e <_impl_k_thread_abort+0x4a>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1c44:	f013 fa40 	bl	150c8 <_update_time_slice_before_swap>

	return __swap(key);
    1c48:	4620      	mov	r0, r4
    1c4a:	f7ff fcf9 	bl	1640 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1c4e:	685a      	ldr	r2, [r3, #4]
    1c50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1c54:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1c56:	4620      	mov	r0, r4
}
    1c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1c5c:	f013 b816 	b.w	14c8c <_reschedule>
    1c60:	000168f0 	.word	0x000168f0
    1c64:	0001692c 	.word	0x0001692c
    1c68:	0001619c 	.word	0x0001619c
    1c6c:	00016954 	.word	0x00016954
    1c70:	20001948 	.word	0x20001948
    1c74:	e000ed00 	.word	0xe000ed00

00001c78 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1c78:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1c7a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1c7c:	4a0b      	ldr	r2, [pc, #44]	; (1cac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1c7e:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1c80:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1c82:	bf1e      	ittt	ne
	movne	r1, #0
    1c84:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1c86:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1c88:	f012 fcf6 	blne	14678 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1c8c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1c8e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1c92:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1c96:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1c9a:	4905      	ldr	r1, [pc, #20]	; (1cb0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1c9c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1c9e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ca0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1ca2:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ca6:	f7ff bcab 	b.w	1600 <_ExcExit>
    1caa:	0000      	.short	0x0000
	ldr r2, =_kernel
    1cac:	20001948 	.word	0x20001948
	ldr r1, =_sw_isr_table
    1cb0:	000000dc 	.word	0x000000dc

00001cb4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1cb4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1cb6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1cba:	4806      	ldr	r0, [pc, #24]	; (1cd4 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1cc0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1cc2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1cc6:	2002      	movs	r0, #2
    msr CONTROL, r0
    1cc8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1ccc:	f3bf 8f6f 	isb	sy

    b _PrepC
    1cd0:	f000 b806 	b.w	1ce0 <_PrepC>
    ldr r0, =_interrupt_stack
    1cd4:	20002e20 	.word	0x20002e20

00001cd8 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1cd8:	bf30      	wfi
    b _SysNmiOnReset
    1cda:	f7ff bffd 	b.w	1cd8 <_SysNmiOnReset>
    1cde:	bf00      	nop

00001ce0 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1ce0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1ce2:	4b07      	ldr	r3, [pc, #28]	; (1d00 <_PrepC+0x20>)
    1ce4:	4a07      	ldr	r2, [pc, #28]	; (1d04 <_PrepC+0x24>)
    1ce6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1cea:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cf0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1cf4:	f012 fcf0 	bl	146d8 <_bss_zero>
	_data_copy();
    1cf8:	f012 fcf8 	bl	146ec <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1cfc:	f012 fd1a 	bl	14734 <_Cstart>
    1d00:	00000000 	.word	0x00000000
    1d04:	e000ed00 	.word	0xe000ed00

00001d08 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1d08:	b508      	push	{r3, lr}
	handler();
    1d0a:	f7ff ffe5 	bl	1cd8 <_SysNmiOnReset>
	_ExcExit();
}
    1d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1d12:	f7ff bc75 	b.w	1600 <_ExcExit>
	...

00001d18 <_region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
    1d18:	b510      	push	{r4, lr}
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1d1a:	f021 031f 	bic.w	r3, r1, #31
	ARM_MPU_DEV->rnr = index;
    1d1e:	4c0c      	ldr	r4, [pc, #48]	; (1d50 <_region_init+0x38>)
				| REGION_VALID | index;
    1d20:	4303      	orrs	r3, r0
    1d22:	f043 0310 	orr.w	r3, r3, #16
	ARM_MPU_DEV->rnr = index;
    1d26:	60a0      	str	r0, [r4, #8]
{
    1d28:	b086      	sub	sp, #24
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1d2a:	60e3      	str	r3, [r4, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1d2c:	f042 0301 	orr.w	r3, r2, #1
    1d30:	6123      	str	r3, [r4, #16]
	SYS_LOG_DBG("[%d] 0x%08x 0x%08x", index, region_addr, region_attr);
    1d32:	4b08      	ldr	r3, [pc, #32]	; (1d54 <_region_init+0x3c>)
    1d34:	9304      	str	r3, [sp, #16]
    1d36:	9300      	str	r3, [sp, #0]
    1d38:	4b07      	ldr	r3, [pc, #28]	; (1d58 <_region_init+0x40>)
    1d3a:	9203      	str	r2, [sp, #12]
    1d3c:	9102      	str	r1, [sp, #8]
    1d3e:	9001      	str	r0, [sp, #4]
    1d40:	681c      	ldr	r4, [r3, #0]
    1d42:	4a06      	ldr	r2, [pc, #24]	; (1d5c <_region_init+0x44>)
    1d44:	4b06      	ldr	r3, [pc, #24]	; (1d60 <_region_init+0x48>)
    1d46:	4907      	ldr	r1, [pc, #28]	; (1d64 <_region_init+0x4c>)
    1d48:	4807      	ldr	r0, [pc, #28]	; (1d68 <_region_init+0x50>)
    1d4a:	47a0      	blx	r4
}
    1d4c:	b006      	add	sp, #24
    1d4e:	bd10      	pop	{r4, pc}
    1d50:	e000ed90 	.word	0xe000ed90
    1d54:	000161ba 	.word	0x000161ba
    1d58:	20003a5c 	.word	0x20003a5c
    1d5c:	0001697a 	.word	0x0001697a
    1d60:	0001696d 	.word	0x0001696d
    1d64:	00016981 	.word	0x00016981
    1d68:	00016989 	.word	0x00016989

00001d6c <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1d6e:	4c1e      	ldr	r4, [pc, #120]	; (1de8 <arm_mpu_init+0x7c>)
    1d70:	6823      	ldr	r3, [r4, #0]
    1d72:	2b08      	cmp	r3, #8
    1d74:	4626      	mov	r6, r4
    1d76:	d90c      	bls.n	1d92 <arm_mpu_init+0x26>
		__ASSERT(0,
    1d78:	4a1c      	ldr	r2, [pc, #112]	; (1dec <arm_mpu_init+0x80>)
    1d7a:	491d      	ldr	r1, [pc, #116]	; (1df0 <arm_mpu_init+0x84>)
    1d7c:	481d      	ldr	r0, [pc, #116]	; (1df4 <arm_mpu_init+0x88>)
    1d7e:	f240 13cd 	movw	r3, #461	; 0x1cd
    1d82:	f7ff f903 	bl	f8c <printk>
    1d86:	2208      	movs	r2, #8
    1d88:	6821      	ldr	r1, [r4, #0]
    1d8a:	481b      	ldr	r0, [pc, #108]	; (1df8 <arm_mpu_init+0x8c>)
    1d8c:	f7ff f8fe 	bl	f8c <printk>
    1d90:	e7fe      	b.n	1d90 <arm_mpu_init+0x24>
	ARM_MPU_DEV->ctrl = 0;
    1d92:	4d1a      	ldr	r5, [pc, #104]	; (1dfc <arm_mpu_init+0x90>)
    1d94:	2400      	movs	r4, #0
    1d96:	606c      	str	r4, [r5, #4]
			     mpu_config.mpu_regions[r_index].base,
    1d98:	270c      	movs	r7, #12
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1d9a:	6833      	ldr	r3, [r6, #0]
    1d9c:	429c      	cmp	r4, r3
    1d9e:	d315      	bcc.n	1dcc <arm_mpu_init+0x60>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1da0:	2305      	movs	r3, #5
    1da2:	606b      	str	r3, [r5, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1da4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1da8:	f3bf 8f6f 	isb	sy

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
    1dac:	682b      	ldr	r3, [r5, #0]
    1dae:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1db2:	2b08      	cmp	r3, #8
    1db4:	d015      	beq.n	1de2 <arm_mpu_init+0x76>
    1db6:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1dba:	4a0c      	ldr	r2, [pc, #48]	; (1dec <arm_mpu_init+0x80>)
    1dbc:	4910      	ldr	r1, [pc, #64]	; (1e00 <arm_mpu_init+0x94>)
    1dbe:	480d      	ldr	r0, [pc, #52]	; (1df4 <arm_mpu_init+0x88>)
    1dc0:	f7ff f8e4 	bl	f8c <printk>
    1dc4:	480f      	ldr	r0, [pc, #60]	; (1e04 <arm_mpu_init+0x98>)
    1dc6:	f7ff f8e1 	bl	f8c <printk>
    1dca:	e7fe      	b.n	1dca <arm_mpu_init+0x5e>
			     mpu_config.mpu_regions[r_index].base,
    1dcc:	6871      	ldr	r1, [r6, #4]
    1dce:	fb07 f304 	mul.w	r3, r7, r4
    1dd2:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
    1dd4:	4620      	mov	r0, r4
    1dd6:	6892      	ldr	r2, [r2, #8]
    1dd8:	58c9      	ldr	r1, [r1, r3]
    1dda:	f7ff ff9d 	bl	1d18 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1dde:	3401      	adds	r4, #1
    1de0:	e7db      	b.n	1d9a <arm_mpu_init+0x2e>
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1de2:	2000      	movs	r0, #0
    1de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1de6:	bf00      	nop
    1de8:	20003a34 	.word	0x20003a34
    1dec:	000169ac 	.word	0x000169ac
    1df0:	0001af5d 	.word	0x0001af5d
    1df4:	0001619c 	.word	0x0001619c
    1df8:	000169f0 	.word	0x000169f0
    1dfc:	e000ed90 	.word	0xe000ed90
    1e00:	00016a22 	.word	0x00016a22
    1e04:	00016a66 	.word	0x00016a66

00001e08 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1e08:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1e0a:	4603      	mov	r3, r0
    1e0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1e10:	b90a      	cbnz	r2, 1e16 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1e12:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1e14:	4770      	bx	lr
		*d = *s;
    1e16:	f803 2b01 	strb.w	r2, [r3], #1
    1e1a:	e7f7      	b.n	1e0c <strcpy+0x4>

00001e1c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1e1c:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1e1e:	4603      	mov	r3, r0
    1e20:	1a98      	subs	r0, r3, r2
    1e22:	f813 1b01 	ldrb.w	r1, [r3], #1
    1e26:	2900      	cmp	r1, #0
    1e28:	d1fa      	bne.n	1e20 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1e2a:	4770      	bx	lr

00001e2c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1e2c:	3801      	subs	r0, #1
    1e2e:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1e30:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1e34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1e38:	4293      	cmp	r3, r2
    1e3a:	d102      	bne.n	1e42 <strcmp+0x16>
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d1f7      	bne.n	1e30 <strcmp+0x4>
    1e40:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1e42:	1a98      	subs	r0, r3, r2
    1e44:	4770      	bx	lr

00001e46 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1e46:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1e48:	b182      	cbz	r2, 1e6c <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1e4a:	3a01      	subs	r2, #1
    1e4c:	460c      	mov	r4, r1
    1e4e:	4603      	mov	r3, r0
    1e50:	d103      	bne.n	1e5a <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1e52:	781a      	ldrb	r2, [r3, #0]
    1e54:	7820      	ldrb	r0, [r4, #0]
    1e56:	1a10      	subs	r0, r2, r0
    1e58:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1e5a:	781e      	ldrb	r6, [r3, #0]
    1e5c:	7825      	ldrb	r5, [r4, #0]
    1e5e:	42ae      	cmp	r6, r5
    1e60:	f100 0001 	add.w	r0, r0, #1
    1e64:	f101 0101 	add.w	r1, r1, #1
    1e68:	d0ef      	beq.n	1e4a <memcmp+0x4>
    1e6a:	e7f2      	b.n	1e52 <memcmp+0xc>
		return 0;
    1e6c:	4610      	mov	r0, r2
}
    1e6e:	bd70      	pop	{r4, r5, r6, pc}

00001e70 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1e70:	ea81 0300 	eor.w	r3, r1, r0
    1e74:	f013 0f03 	tst.w	r3, #3
{
    1e78:	b570      	push	{r4, r5, r6, lr}
    1e7a:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1e7c:	d00b      	beq.n	1e96 <memcpy+0x26>
    1e7e:	3b01      	subs	r3, #1
    1e80:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1e82:	4291      	cmp	r1, r2
    1e84:	d11b      	bne.n	1ebe <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1e86:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1e88:	2a00      	cmp	r2, #0
    1e8a:	d0fc      	beq.n	1e86 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
    1e90:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1e94:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1e96:	079c      	lsls	r4, r3, #30
    1e98:	d1f6      	bne.n	1e88 <memcpy+0x18>
    1e9a:	1f1e      	subs	r6, r3, #4
    1e9c:	460d      	mov	r5, r1
    1e9e:	1b54      	subs	r4, r2, r5
    1ea0:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1ea2:	2c03      	cmp	r4, #3
    1ea4:	d806      	bhi.n	1eb4 <memcpy+0x44>
    1ea6:	f022 0403 	bic.w	r4, r2, #3
    1eaa:	4421      	add	r1, r4
    1eac:	4423      	add	r3, r4
    1eae:	f002 0203 	and.w	r2, r2, #3
    1eb2:	e7e4      	b.n	1e7e <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1eb4:	f855 4b04 	ldr.w	r4, [r5], #4
    1eb8:	f846 4f04 	str.w	r4, [r6, #4]!
    1ebc:	e7ef      	b.n	1e9e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
    1ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
    1ec6:	e7dc      	b.n	1e82 <memcpy+0x12>

00001ec8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1ec8:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1eca:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1ecc:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1ece:	079c      	lsls	r4, r3, #30
    1ed0:	d111      	bne.n	1ef6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1ed2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1ed6:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1eda:	461e      	mov	r6, r3
    1edc:	1b95      	subs	r5, r2, r6
    1ede:	441d      	add	r5, r3
    1ee0:	2d03      	cmp	r5, #3
    1ee2:	d80e      	bhi.n	1f02 <memset+0x3a>
    1ee4:	f022 0403 	bic.w	r4, r2, #3
    1ee8:	4423      	add	r3, r4
    1eea:	f002 0203 	and.w	r2, r2, #3
    1eee:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1ef0:	4293      	cmp	r3, r2
    1ef2:	d109      	bne.n	1f08 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1ef4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1ef6:	2a00      	cmp	r2, #0
    1ef8:	d0fc      	beq.n	1ef4 <memset+0x2c>
		*(d_byte++) = c_byte;
    1efa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1efe:	3a01      	subs	r2, #1
    1f00:	e7e5      	b.n	1ece <memset+0x6>
		*(d_word++) = c_word;
    1f02:	f846 4b04 	str.w	r4, [r6], #4
    1f06:	e7e9      	b.n	1edc <memset+0x14>
		*(d_byte++) = c_byte;
    1f08:	f803 1b01 	strb.w	r1, [r3], #1
    1f0c:	e7f0      	b.n	1ef0 <memset+0x28>
	...

00001f10 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1f10:	b570      	push	{r4, r5, r6, lr}
    1f12:	f04f 0320 	mov.w	r3, #32
    1f16:	f3ef 8511 	mrs	r5, BASEPRI
    1f1a:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1f1e:	4c14      	ldr	r4, [pc, #80]	; (1f70 <bt_hex+0x60>)
    1f20:	4e14      	ldr	r6, [pc, #80]	; (1f74 <bt_hex+0x64>)
    1f22:	7823      	ldrb	r3, [r4, #0]
    1f24:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1f28:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1f2a:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1f2e:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1f30:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1f32:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1f36:	2940      	cmp	r1, #64	; 0x40
    1f38:	bf28      	it	cs
    1f3a:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1f3c:	4d0e      	ldr	r5, [pc, #56]	; (1f78 <bt_hex+0x68>)
    1f3e:	3801      	subs	r0, #1
    1f40:	4613      	mov	r3, r2
    1f42:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1f46:	42b3      	cmp	r3, r6
    1f48:	d104      	bne.n	1f54 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1f4a:	2300      	movs	r3, #0
    1f4c:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1f50:	4610      	mov	r0, r2
    1f52:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1f54:	7844      	ldrb	r4, [r0, #1]
    1f56:	0924      	lsrs	r4, r4, #4
    1f58:	3302      	adds	r3, #2
    1f5a:	5d2c      	ldrb	r4, [r5, r4]
    1f5c:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1f60:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1f64:	f004 040f 	and.w	r4, r4, #15
    1f68:	5d2c      	ldrb	r4, [r5, r4]
    1f6a:	f803 4c01 	strb.w	r4, [r3, #-1]
    1f6e:	e7ea      	b.n	1f46 <bt_hex+0x36>
    1f70:	20000074 	.word	0x20000074
    1f74:	20000075 	.word	0x20000075
    1f78:	00016aa3 	.word	0x00016aa3

00001f7c <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1f7c:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1f7e:	4a0f      	ldr	r2, [pc, #60]	; (1fbc <bt_addr_str+0x40>)
    1f80:	4c0f      	ldr	r4, [pc, #60]	; (1fc0 <bt_addr_str+0x44>)
    1f82:	7813      	ldrb	r3, [r2, #0]
    1f84:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1f88:	3301      	adds	r3, #1
{
    1f8a:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1f8c:	f003 0301 	and.w	r3, r3, #1
    1f90:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1f92:	7802      	ldrb	r2, [r0, #0]
    1f94:	7943      	ldrb	r3, [r0, #5]
    1f96:	9204      	str	r2, [sp, #16]
    1f98:	7842      	ldrb	r2, [r0, #1]
    1f9a:	9203      	str	r2, [sp, #12]
    1f9c:	7882      	ldrb	r2, [r0, #2]
    1f9e:	9202      	str	r2, [sp, #8]
    1fa0:	78c2      	ldrb	r2, [r0, #3]
    1fa2:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1fa4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1fa8:	7902      	ldrb	r2, [r0, #4]
    1faa:	9200      	str	r2, [sp, #0]
    1fac:	2112      	movs	r1, #18
    1fae:	4a05      	ldr	r2, [pc, #20]	; (1fc4 <bt_addr_str+0x48>)
    1fb0:	4620      	mov	r0, r4
    1fb2:	f7fe fff9 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1fb6:	4620      	mov	r0, r4
    1fb8:	b006      	add	sp, #24
    1fba:	bd10      	pop	{r4, pc}
    1fbc:	20000072 	.word	0x20000072
    1fc0:	20000018 	.word	0x20000018
    1fc4:	00016a85 	.word	0x00016a85

00001fc8 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1fc8:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1fca:	4a1d      	ldr	r2, [pc, #116]	; (2040 <bt_addr_le_str+0x78>)
    1fcc:	491d      	ldr	r1, [pc, #116]	; (2044 <bt_addr_le_str+0x7c>)
    1fce:	7813      	ldrb	r3, [r2, #0]
    1fd0:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1fd4:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1fd6:	f003 0301 	and.w	r3, r3, #1
    1fda:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1fdc:	7803      	ldrb	r3, [r0, #0]
{
    1fde:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1fe0:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1fe4:	4604      	mov	r4, r0
	str = bufs[cur++];
    1fe6:	440e      	add	r6, r1
    1fe8:	ad07      	add	r5, sp, #28
    1fea:	2b03      	cmp	r3, #3
    1fec:	d821      	bhi.n	2032 <bt_addr_le_str+0x6a>
    1fee:	e8df f003 	tbb	[pc, r3]
    1ff2:	1a02      	.short	0x1a02
    1ff4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1ff6:	4914      	ldr	r1, [pc, #80]	; (2048 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1ff8:	4628      	mov	r0, r5
    1ffa:	f7ff ff05 	bl	1e08 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1ffe:	7862      	ldrb	r2, [r4, #1]
    2000:	9204      	str	r2, [sp, #16]
    2002:	78a2      	ldrb	r2, [r4, #2]
    2004:	9203      	str	r2, [sp, #12]
    2006:	78e2      	ldrb	r2, [r4, #3]
    2008:	9202      	str	r2, [sp, #8]
    200a:	7922      	ldrb	r2, [r4, #4]
    200c:	9201      	str	r2, [sp, #4]
    200e:	7962      	ldrb	r2, [r4, #5]
    2010:	9200      	str	r2, [sp, #0]
    2012:	79a3      	ldrb	r3, [r4, #6]
    2014:	9505      	str	r5, [sp, #20]
    2016:	4a0d      	ldr	r2, [pc, #52]	; (204c <bt_addr_le_str+0x84>)
    2018:	211b      	movs	r1, #27
    201a:	4630      	mov	r0, r6
    201c:	f7fe ffc4 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    2020:	4630      	mov	r0, r6
    2022:	b00a      	add	sp, #40	; 0x28
    2024:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    2026:	490a      	ldr	r1, [pc, #40]	; (2050 <bt_addr_le_str+0x88>)
    2028:	e7e6      	b.n	1ff8 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    202a:	490a      	ldr	r1, [pc, #40]	; (2054 <bt_addr_le_str+0x8c>)
    202c:	e7e4      	b.n	1ff8 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    202e:	490a      	ldr	r1, [pc, #40]	; (2058 <bt_addr_le_str+0x90>)
    2030:	e7e2      	b.n	1ff8 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2032:	4a0a      	ldr	r2, [pc, #40]	; (205c <bt_addr_le_str+0x94>)
    2034:	210a      	movs	r1, #10
    2036:	4628      	mov	r0, r5
    2038:	f7fe ffb6 	bl	fa8 <snprintk>
    203c:	e7df      	b.n	1ffe <bt_addr_le_str+0x36>
    203e:	bf00      	nop
    2040:	20000073 	.word	0x20000073
    2044:	2000003c 	.word	0x2000003c
    2048:	00015ffd 	.word	0x00015ffd
    204c:	00016026 	.word	0x00016026
    2050:	00016004 	.word	0x00016004
    2054:	0001600b 	.word	0x0001600b
    2058:	00016015 	.word	0x00016015
    205c:	0001601f 	.word	0x0001601f

00002060 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    2060:	b530      	push	{r4, r5, lr}
    2062:	b085      	sub	sp, #20
    2064:	4604      	mov	r4, r0
    2066:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    2068:	4668      	mov	r0, sp
    206a:	2203      	movs	r2, #3
    206c:	f7ff ff00 	bl	1e70 <memcpy>
	memset(res + 3, 0, 13);
    2070:	220d      	movs	r2, #13
    2072:	2100      	movs	r1, #0
    2074:	f10d 0003 	add.w	r0, sp, #3
    2078:	f7ff ff26 	bl	1ec8 <memset>

	err = bt_encrypt_le(irk, res, res);
    207c:	4620      	mov	r0, r4
    207e:	466a      	mov	r2, sp
    2080:	4669      	mov	r1, sp
    2082:	f006 fd21 	bl	8ac8 <bt_encrypt_le>
	if (err) {
    2086:	4604      	mov	r4, r0
    2088:	b920      	cbnz	r0, 2094 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    208a:	2203      	movs	r2, #3
    208c:	4669      	mov	r1, sp
    208e:	4628      	mov	r0, r5
    2090:	f7ff feee 	bl	1e70 <memcpy>

	return 0;
}
    2094:	4620      	mov	r0, r4
    2096:	b005      	add	sp, #20
    2098:	bd30      	pop	{r4, r5, pc}

0000209a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    209a:	b513      	push	{r0, r1, r4, lr}
    209c:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    209e:	aa01      	add	r2, sp, #4
    20a0:	3103      	adds	r1, #3
    20a2:	f7ff ffdd 	bl	2060 <ah>
	if (err) {
    20a6:	b948      	cbnz	r0, 20bc <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    20a8:	2203      	movs	r2, #3
    20aa:	a901      	add	r1, sp, #4
    20ac:	4620      	mov	r0, r4
    20ae:	f7ff feca 	bl	1e46 <memcmp>
    20b2:	fab0 f080 	clz	r0, r0
    20b6:	0940      	lsrs	r0, r0, #5
}
    20b8:	b002      	add	sp, #8
    20ba:	bd10      	pop	{r4, pc}
		return false;
    20bc:	2000      	movs	r0, #0
    20be:	e7fb      	b.n	20b8 <bt_rpa_irk_matches+0x1e>

000020c0 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    20c0:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    20c2:	1ccd      	adds	r5, r1, #3
{
    20c4:	4606      	mov	r6, r0
    20c6:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    20c8:	4628      	mov	r0, r5
    20ca:	2103      	movs	r1, #3
    20cc:	f006 fce0 	bl	8a90 <bt_rand>
	if (err) {
    20d0:	b960      	cbnz	r0, 20ec <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    20d2:	7963      	ldrb	r3, [r4, #5]
    20d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    20d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    20dc:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    20de:	4622      	mov	r2, r4
    20e0:	4629      	mov	r1, r5
    20e2:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    20e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    20e8:	f7ff bfba 	b.w	2060 <ah>
}
    20ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000020f0 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    20f0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    20f2:	7802      	ldrb	r2, [r0, #0]
    20f4:	2a01      	cmp	r2, #1
{
    20f6:	4604      	mov	r4, r0
    20f8:	460b      	mov	r3, r1
	switch (src->type) {
    20fa:	d017      	beq.n	212c <uuid_to_uuid128+0x3c>
    20fc:	d303      	bcc.n	2106 <uuid_to_uuid128+0x16>
    20fe:	2a02      	cmp	r2, #2
    2100:	d02c      	beq.n	215c <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    2102:	bcf0      	pop	{r4, r5, r6, r7}
    2104:	4770      	bx	lr
		*dst = uuid128_base;
    2106:	4a18      	ldr	r2, [pc, #96]	; (2168 <uuid_to_uuid128+0x78>)
    2108:	460d      	mov	r5, r1
    210a:	f102 0710 	add.w	r7, r2, #16
    210e:	6810      	ldr	r0, [r2, #0]
    2110:	6851      	ldr	r1, [r2, #4]
    2112:	462e      	mov	r6, r5
    2114:	c603      	stmia	r6!, {r0, r1}
    2116:	3208      	adds	r2, #8
    2118:	42ba      	cmp	r2, r7
    211a:	4635      	mov	r5, r6
    211c:	d1f7      	bne.n	210e <uuid_to_uuid128+0x1e>
    211e:	7812      	ldrb	r2, [r2, #0]
    2120:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    2122:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2124:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    2126:	0a12      	lsrs	r2, r2, #8
    2128:	739a      	strb	r2, [r3, #14]
    212a:	e7ea      	b.n	2102 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    212c:	4a0e      	ldr	r2, [pc, #56]	; (2168 <uuid_to_uuid128+0x78>)
    212e:	460d      	mov	r5, r1
    2130:	f102 0710 	add.w	r7, r2, #16
    2134:	6810      	ldr	r0, [r2, #0]
    2136:	6851      	ldr	r1, [r2, #4]
    2138:	462e      	mov	r6, r5
    213a:	c603      	stmia	r6!, {r0, r1}
    213c:	3208      	adds	r2, #8
    213e:	42ba      	cmp	r2, r7
    2140:	4635      	mov	r5, r6
    2142:	d1f7      	bne.n	2134 <uuid_to_uuid128+0x44>
    2144:	7812      	ldrb	r2, [r2, #0]
    2146:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    2148:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    214a:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    214c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2150:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    2152:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    2154:	0a12      	lsrs	r2, r2, #8
    2156:	7399      	strb	r1, [r3, #14]
    2158:	741a      	strb	r2, [r3, #16]
    215a:	e7d2      	b.n	2102 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    215c:	4601      	mov	r1, r0
    215e:	2211      	movs	r2, #17
    2160:	4618      	mov	r0, r3
}
    2162:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    2164:	f7ff be84 	b.w	1e70 <memcpy>
    2168:	00016ab4 	.word	0x00016ab4

0000216c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    216c:	b510      	push	{r4, lr}
    216e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    2170:	7801      	ldrb	r1, [r0, #0]
    2172:	7822      	ldrb	r2, [r4, #0]
    2174:	428a      	cmp	r2, r1
{
    2176:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    2178:	d00e      	beq.n	2198 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    217a:	4669      	mov	r1, sp
    217c:	f7ff ffb8 	bl	20f0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    2180:	a905      	add	r1, sp, #20
    2182:	4620      	mov	r0, r4
    2184:	f7ff ffb4 	bl	20f0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    2188:	2210      	movs	r2, #16
    218a:	f10d 0115 	add.w	r1, sp, #21
    218e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    2192:	f7ff fe58 	bl	1e46 <memcmp>
    2196:	e00a      	b.n	21ae <bt_uuid_cmp+0x42>
	switch (u1->type) {
    2198:	2a01      	cmp	r2, #1
    219a:	d00a      	beq.n	21b2 <bt_uuid_cmp+0x46>
    219c:	d304      	bcc.n	21a8 <bt_uuid_cmp+0x3c>
    219e:	2a02      	cmp	r2, #2
    21a0:	d00a      	beq.n	21b8 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    21a2:	f06f 0015 	mvn.w	r0, #21
    21a6:	e002      	b.n	21ae <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    21a8:	8840      	ldrh	r0, [r0, #2]
    21aa:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    21ac:	1ac0      	subs	r0, r0, r3
}
    21ae:	b00a      	add	sp, #40	; 0x28
    21b0:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    21b2:	6840      	ldr	r0, [r0, #4]
    21b4:	6863      	ldr	r3, [r4, #4]
    21b6:	e7f9      	b.n	21ac <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    21b8:	2210      	movs	r2, #16
    21ba:	1c61      	adds	r1, r4, #1
    21bc:	3001      	adds	r0, #1
    21be:	e7e8      	b.n	2192 <bt_uuid_cmp+0x26>

000021c0 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    21c0:	4770      	bx	lr
	...

000021c4 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    21c4:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    21c6:	4d0b      	ldr	r5, [pc, #44]	; (21f4 <ver_str+0x30>)
{
    21c8:	4606      	mov	r6, r0
	const char * const str[] = {
    21ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    21cc:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    21ce:	466c      	mov	r4, sp
    21d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    21d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    21d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    21d6:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    21da:	2e09      	cmp	r6, #9
	const char * const str[] = {
    21dc:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    21e0:	bf9b      	ittet	ls
    21e2:	ab0a      	addls	r3, sp, #40	; 0x28
    21e4:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    21e8:	4803      	ldrhi	r0, [pc, #12]	; (21f8 <ver_str+0x34>)
		return str[ver];
    21ea:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    21ee:	b00a      	add	sp, #40	; 0x28
    21f0:	bd70      	pop	{r4, r5, r6, pc}
    21f2:	bf00      	nop
    21f4:	00015fb4 	.word	0x00015fb4
    21f8:	00017e60 	.word	0x00017e60

000021fc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    21fc:	2207      	movs	r2, #7
    21fe:	f7ff be37 	b.w	1e70 <memcpy>

00002202 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    2202:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    2204:	f3bf 8f5b 	dmb	ish
    2208:	e850 3f00 	ldrex	r3, [r0]
    220c:	ea43 0201 	orr.w	r2, r3, r1
    2210:	e840 2e00 	strex	lr, r2, [r0]
    2214:	f1be 0f00 	cmp.w	lr, #0
    2218:	d1f6      	bne.n	2208 <atomic_or+0x6>
    221a:	f3bf 8f5b 	dmb	ish
    221e:	4618      	mov	r0, r3
    2220:	f85d fb04 	ldr.w	pc, [sp], #4

00002224 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    2224:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    2226:	f3bf 8f5b 	dmb	ish
    222a:	e850 3f00 	ldrex	r3, [r0]
    222e:	ea03 0201 	and.w	r2, r3, r1
    2232:	e840 2e00 	strex	lr, r2, [r0]
    2236:	f1be 0f00 	cmp.w	lr, #0
    223a:	d1f6      	bne.n	222a <atomic_and+0x6>
    223c:	f3bf 8f5b 	dmb	ish
    2240:	4618      	mov	r0, r3
    2242:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00002248 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    2248:	78c3      	ldrb	r3, [r0, #3]
    224a:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    224c:	f241 3288 	movw	r2, #5000	; 0x1388
    2250:	f100 0170 	add.w	r1, r0, #112	; 0x70
    2254:	bf08      	it	eq
    2256:	2200      	moveq	r2, #0
    2258:	4801      	ldr	r0, [pc, #4]	; (2260 <update_conn_param+0x18>)
    225a:	f013 bb9b 	b.w	15994 <k_delayed_work_submit_to_queue>
    225e:	bf00      	nop
    2260:	20001988 	.word	0x20001988

00002264 <hci_cmd_done>:
{
    2264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    2268:	4d30      	ldr	r5, [pc, #192]	; (232c <hci_cmd_done+0xc8>)
    226a:	4f31      	ldr	r7, [pc, #196]	; (2330 <hci_cmd_done+0xcc>)
    226c:	682c      	ldr	r4, [r5, #0]
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    226e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2354 <hci_cmd_done+0xf0>
{
    2272:	b086      	sub	sp, #24
    2274:	4616      	mov	r6, r2
    2276:	4689      	mov	r9, r1
    2278:	4680      	mov	r8, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    227a:	f012 ff93 	bl	151a4 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    227e:	4b2d      	ldr	r3, [pc, #180]	; (2334 <hci_cmd_done+0xd0>)
    2280:	9001      	str	r0, [sp, #4]
    2282:	4a2d      	ldr	r2, [pc, #180]	; (2338 <hci_cmd_done+0xd4>)
    2284:	492d      	ldr	r1, [pc, #180]	; (233c <hci_cmd_done+0xd8>)
    2286:	482e      	ldr	r0, [pc, #184]	; (2340 <hci_cmd_done+0xdc>)
    2288:	9705      	str	r7, [sp, #20]
    228a:	9604      	str	r6, [sp, #16]
    228c:	f8cd 900c 	str.w	r9, [sp, #12]
    2290:	f8cd 8008 	str.w	r8, [sp, #8]
    2294:	9700      	str	r7, [sp, #0]
    2296:	47a0      	blx	r4
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2298:	79b0      	ldrb	r0, [r6, #6]
    229a:	f011 fce1 	bl	13c60 <net_buf_pool_get>
    229e:	4582      	cmp	sl, r0
    22a0:	d013      	beq.n	22ca <hci_cmd_done+0x66>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    22a2:	79b4      	ldrb	r4, [r6, #6]
    22a4:	682d      	ldr	r5, [r5, #0]
    22a6:	4620      	mov	r0, r4
    22a8:	f011 fcda 	bl	13c60 <net_buf_pool_get>
    22ac:	9705      	str	r7, [sp, #20]
    22ae:	9003      	str	r0, [sp, #12]
    22b0:	f8cd a010 	str.w	sl, [sp, #16]
    22b4:	9402      	str	r4, [sp, #8]
    22b6:	e88d 0180 	stmia.w	sp, {r7, r8}
    22ba:	4b1e      	ldr	r3, [pc, #120]	; (2334 <hci_cmd_done+0xd0>)
    22bc:	4a21      	ldr	r2, [pc, #132]	; (2344 <hci_cmd_done+0xe0>)
    22be:	491f      	ldr	r1, [pc, #124]	; (233c <hci_cmd_done+0xd8>)
    22c0:	4821      	ldr	r0, [pc, #132]	; (2348 <hci_cmd_done+0xe4>)
    22c2:	47a8      	blx	r5
}
    22c4:	b006      	add	sp, #24
    22c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (cmd(buf)->opcode != opcode) {
    22ca:	4630      	mov	r0, r6
    22cc:	f011 fcce 	bl	13c6c <net_buf_id>
    22d0:	4c1e      	ldr	r4, [pc, #120]	; (234c <hci_cmd_done+0xe8>)
    22d2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    22d6:	8843      	ldrh	r3, [r0, #2]
    22d8:	4543      	cmp	r3, r8
    22da:	d00f      	beq.n	22fc <hci_cmd_done+0x98>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    22dc:	4630      	mov	r0, r6
    22de:	682d      	ldr	r5, [r5, #0]
    22e0:	f011 fcc4 	bl	13c6c <net_buf_id>
    22e4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    22e8:	9703      	str	r7, [sp, #12]
    22ea:	8843      	ldrh	r3, [r0, #2]
    22ec:	9302      	str	r3, [sp, #8]
    22ee:	e88d 0180 	stmia.w	sp, {r7, r8}
    22f2:	4b10      	ldr	r3, [pc, #64]	; (2334 <hci_cmd_done+0xd0>)
    22f4:	4a13      	ldr	r2, [pc, #76]	; (2344 <hci_cmd_done+0xe0>)
    22f6:	4911      	ldr	r1, [pc, #68]	; (233c <hci_cmd_done+0xd8>)
    22f8:	4815      	ldr	r0, [pc, #84]	; (2350 <hci_cmd_done+0xec>)
    22fa:	47a8      	blx	r5
	if (cmd(buf)->sync) {
    22fc:	4630      	mov	r0, r6
    22fe:	f011 fcb5 	bl	13c6c <net_buf_id>
    2302:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2306:	6843      	ldr	r3, [r0, #4]
    2308:	2b00      	cmp	r3, #0
    230a:	d0db      	beq.n	22c4 <hci_cmd_done+0x60>
		cmd(buf)->status = status;
    230c:	4630      	mov	r0, r6
    230e:	f011 fcad 	bl	13c6c <net_buf_id>
    2312:	f804 9030 	strb.w	r9, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    2316:	4630      	mov	r0, r6
    2318:	f011 fca8 	bl	13c6c <net_buf_id>
    231c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2320:	6840      	ldr	r0, [r0, #4]
}
    2322:	b006      	add	sp, #24
    2324:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2328:	f012 bf70 	b.w	1520c <_impl_k_sem_give>
    232c:	20003a5c 	.word	0x20003a5c
    2330:	000161ba 	.word	0x000161ba
    2334:	00016c15 	.word	0x00016c15
    2338:	0001697a 	.word	0x0001697a
    233c:	00017a29 	.word	0x00017a29
    2340:	00017a2c 	.word	0x00017a2c
    2344:	00017a64 	.word	0x00017a64
    2348:	00017a6b 	.word	0x00017a6b
    234c:	2000027c 	.word	0x2000027c
    2350:	00017ab0 	.word	0x00017ab0
    2354:	20003f6c 	.word	0x20003f6c

00002358 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2358:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    235a:	f3bf 8f5b 	dmb	ish
    235e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    2362:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    2366:	f001 011f 	and.w	r1, r1, #31
    236a:	4108      	asrs	r0, r1
}
    236c:	f000 0001 	and.w	r0, r0, #1
    2370:	4770      	bx	lr
	...

00002374 <bt_hci_cmd_create>:
{
    2374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    2378:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 244c <bt_hci_cmd_create+0xd8>
    237c:	4d28      	ldr	r5, [pc, #160]	; (2420 <bt_hci_cmd_create+0xac>)
    237e:	f8d8 4000 	ldr.w	r4, [r8]
{
    2382:	b086      	sub	sp, #24
    2384:	460f      	mov	r7, r1
    2386:	4606      	mov	r6, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2388:	f012 ff0c 	bl	151a4 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    238c:	4b25      	ldr	r3, [pc, #148]	; (2424 <bt_hci_cmd_create+0xb0>)
    238e:	9001      	str	r0, [sp, #4]
    2390:	4a25      	ldr	r2, [pc, #148]	; (2428 <bt_hci_cmd_create+0xb4>)
    2392:	4926      	ldr	r1, [pc, #152]	; (242c <bt_hci_cmd_create+0xb8>)
    2394:	4826      	ldr	r0, [pc, #152]	; (2430 <bt_hci_cmd_create+0xbc>)
    2396:	9504      	str	r5, [sp, #16]
    2398:	9703      	str	r7, [sp, #12]
    239a:	9602      	str	r6, [sp, #8]
    239c:	9500      	str	r5, [sp, #0]
    239e:	47a0      	blx	r4
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    23a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    23a4:	4823      	ldr	r0, [pc, #140]	; (2434 <bt_hci_cmd_create+0xc0>)
    23a6:	f011 fcef 	bl	13d88 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    23aa:	4604      	mov	r4, r0
    23ac:	b948      	cbnz	r0, 23c2 <bt_hci_cmd_create+0x4e>
    23ae:	23c2      	movs	r3, #194	; 0xc2
    23b0:	4a21      	ldr	r2, [pc, #132]	; (2438 <bt_hci_cmd_create+0xc4>)
    23b2:	4922      	ldr	r1, [pc, #136]	; (243c <bt_hci_cmd_create+0xc8>)
    23b4:	4822      	ldr	r0, [pc, #136]	; (2440 <bt_hci_cmd_create+0xcc>)
    23b6:	f7fe fde9 	bl	f8c <printk>
    23ba:	4628      	mov	r0, r5
    23bc:	f7fe fde6 	bl	f8c <printk>
    23c0:	e7fe      	b.n	23c0 <bt_hci_cmd_create+0x4c>
	BT_DBG("buf %p", buf);
    23c2:	f8d8 8000 	ldr.w	r8, [r8]
    23c6:	f012 feed 	bl	151a4 <_impl_k_current_get>
    23ca:	4b16      	ldr	r3, [pc, #88]	; (2424 <bt_hci_cmd_create+0xb0>)
    23cc:	4a16      	ldr	r2, [pc, #88]	; (2428 <bt_hci_cmd_create+0xb4>)
    23ce:	9503      	str	r5, [sp, #12]
    23d0:	9001      	str	r0, [sp, #4]
    23d2:	9500      	str	r5, [sp, #0]
    23d4:	9402      	str	r4, [sp, #8]
    23d6:	4915      	ldr	r1, [pc, #84]	; (242c <bt_hci_cmd_create+0xb8>)
    23d8:	481a      	ldr	r0, [pc, #104]	; (2444 <bt_hci_cmd_create+0xd0>)
	cmd(buf)->opcode = opcode;
    23da:	4d1b      	ldr	r5, [pc, #108]	; (2448 <bt_hci_cmd_create+0xd4>)
	BT_DBG("buf %p", buf);
    23dc:	47c0      	blx	r8
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    23de:	f104 0808 	add.w	r8, r4, #8
    23e2:	2100      	movs	r1, #0
    23e4:	4640      	mov	r0, r8
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    23e6:	f04f 0900 	mov.w	r9, #0
    23ea:	f011 fcec 	bl	13dc6 <net_buf_simple_reserve>
    23ee:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    23f2:	4620      	mov	r0, r4
    23f4:	f011 fc3a 	bl	13c6c <net_buf_id>
    23f8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    23fc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    23fe:	4620      	mov	r0, r4
    2400:	f011 fc34 	bl	13c6c <net_buf_id>
    2404:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2408:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    240a:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    240e:	4640      	mov	r0, r8
    2410:	f011 fd1c 	bl	13e4c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    2414:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    2416:	7087      	strb	r7, [r0, #2]
}
    2418:	4620      	mov	r0, r4
    241a:	b006      	add	sp, #24
    241c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2420:	000161ba 	.word	0x000161ba
    2424:	00016ac5 	.word	0x00016ac5
    2428:	0001697a 	.word	0x0001697a
    242c:	00017a29 	.word	0x00017a29
    2430:	00016f79 	.word	0x00016f79
    2434:	20003f6c 	.word	0x20003f6c
    2438:	00016fa9 	.word	0x00016fa9
    243c:	00016fe9 	.word	0x00016fe9
    2440:	0001619c 	.word	0x0001619c
    2444:	00016fed 	.word	0x00016fed
    2448:	2000027c 	.word	0x2000027c
    244c:	20003a5c 	.word	0x20003a5c

00002450 <bt_hci_cmd_send_sync>:
{
    2450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2454:	4681      	mov	r9, r0
    2456:	b08d      	sub	sp, #52	; 0x34
    2458:	4690      	mov	r8, r2
	if (!buf) {
    245a:	460c      	mov	r4, r1
    245c:	b921      	cbnz	r1, 2468 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    245e:	f7ff ff89 	bl	2374 <bt_hci_cmd_create>
		if (!buf) {
    2462:	4604      	mov	r4, r0
    2464:	2800      	cmp	r0, #0
    2466:	d068      	beq.n	253a <bt_hci_cmd_send_sync+0xea>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2468:	f8df a104 	ldr.w	sl, [pc, #260]	; 2570 <bt_hci_cmd_send_sync+0x120>
    246c:	4e34      	ldr	r6, [pc, #208]	; (2540 <bt_hci_cmd_send_sync+0xf0>)
    246e:	f8da 5000 	ldr.w	r5, [sl]
	cmd(buf)->sync = &sync_sem;
    2472:	4f34      	ldr	r7, [pc, #208]	; (2544 <bt_hci_cmd_send_sync+0xf4>)
    2474:	f012 fe96 	bl	151a4 <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2478:	9605      	str	r6, [sp, #20]
    247a:	89a3      	ldrh	r3, [r4, #12]
    247c:	9304      	str	r3, [sp, #16]
    247e:	9001      	str	r0, [sp, #4]
    2480:	4b31      	ldr	r3, [pc, #196]	; (2548 <bt_hci_cmd_send_sync+0xf8>)
    2482:	4a32      	ldr	r2, [pc, #200]	; (254c <bt_hci_cmd_send_sync+0xfc>)
    2484:	4932      	ldr	r1, [pc, #200]	; (2550 <bt_hci_cmd_send_sync+0x100>)
    2486:	4833      	ldr	r0, [pc, #204]	; (2554 <bt_hci_cmd_send_sync+0x104>)
    2488:	f8cd 900c 	str.w	r9, [sp, #12]
    248c:	9402      	str	r4, [sp, #8]
    248e:	9600      	str	r6, [sp, #0]
    2490:	47a8      	blx	r5
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2492:	ad06      	add	r5, sp, #24
    2494:	2201      	movs	r2, #1
    2496:	2100      	movs	r1, #0
    2498:	4628      	mov	r0, r5
    249a:	f012 fe89 	bl	151b0 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    249e:	4620      	mov	r0, r4
    24a0:	f011 fbe4 	bl	13c6c <net_buf_id>
    24a4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    24a8:	6045      	str	r5, [r0, #4]
	net_buf_ref(buf);
    24aa:	4620      	mov	r0, r4
    24ac:	f011 fcca 	bl	13e44 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    24b0:	4621      	mov	r1, r4
    24b2:	4829      	ldr	r0, [pc, #164]	; (2558 <bt_hci_cmd_send_sync+0x108>)
    24b4:	f011 fc8b 	bl	13dce <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    24b8:	4628      	mov	r0, r5
    24ba:	f242 7110 	movw	r1, #10000	; 0x2710
    24be:	f012 fecd 	bl	1525c <_impl_k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);
    24c2:	4605      	mov	r5, r0
    24c4:	b158      	cbz	r0, 24de <bt_hci_cmd_send_sync+0x8e>
    24c6:	4925      	ldr	r1, [pc, #148]	; (255c <bt_hci_cmd_send_sync+0x10c>)
    24c8:	4a25      	ldr	r2, [pc, #148]	; (2560 <bt_hci_cmd_send_sync+0x110>)
    24ca:	4826      	ldr	r0, [pc, #152]	; (2564 <bt_hci_cmd_send_sync+0x114>)
    24cc:	f240 130b 	movw	r3, #267	; 0x10b
    24d0:	f7fe fd5c 	bl	f8c <printk>
    24d4:	4629      	mov	r1, r5
    24d6:	4824      	ldr	r0, [pc, #144]	; (2568 <bt_hci_cmd_send_sync+0x118>)
    24d8:	f7fe fd58 	bl	f8c <printk>
    24dc:	e7fe      	b.n	24dc <bt_hci_cmd_send_sync+0x8c>
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    24de:	f8da a000 	ldr.w	sl, [sl]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    24e2:	f012 fe5f 	bl	151a4 <_impl_k_current_get>
    24e6:	4683      	mov	fp, r0
    24e8:	4620      	mov	r0, r4
    24ea:	f011 fbbf 	bl	13c6c <net_buf_id>
    24ee:	9604      	str	r6, [sp, #16]
    24f0:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    24f4:	9303      	str	r3, [sp, #12]
    24f6:	4a15      	ldr	r2, [pc, #84]	; (254c <bt_hci_cmd_send_sync+0xfc>)
    24f8:	4b13      	ldr	r3, [pc, #76]	; (2548 <bt_hci_cmd_send_sync+0xf8>)
    24fa:	4915      	ldr	r1, [pc, #84]	; (2550 <bt_hci_cmd_send_sync+0x100>)
    24fc:	481b      	ldr	r0, [pc, #108]	; (256c <bt_hci_cmd_send_sync+0x11c>)
    24fe:	f8cd 9008 	str.w	r9, [sp, #8]
    2502:	e88d 0840 	stmia.w	sp, {r6, fp}
    2506:	47d0      	blx	sl
	if (cmd(buf)->status) {
    2508:	4620      	mov	r0, r4
    250a:	f011 fbaf 	bl	13c6c <net_buf_id>
    250e:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    2512:	b143      	cbz	r3, 2526 <bt_hci_cmd_send_sync+0xd6>
		net_buf_unref(buf);
    2514:	4620      	mov	r0, r4
    2516:	f011 fc67 	bl	13de8 <net_buf_unref>
		err = -EIO;
    251a:	f06f 0504 	mvn.w	r5, #4
}
    251e:	4628      	mov	r0, r5
    2520:	b00d      	add	sp, #52	; 0x34
    2522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rsp) {
    2526:	f1b8 0f00 	cmp.w	r8, #0
    252a:	d002      	beq.n	2532 <bt_hci_cmd_send_sync+0xe2>
			*rsp = buf;
    252c:	f8c8 4000 	str.w	r4, [r8]
    2530:	e7f5      	b.n	251e <bt_hci_cmd_send_sync+0xce>
			net_buf_unref(buf);
    2532:	4620      	mov	r0, r4
    2534:	f011 fc58 	bl	13de8 <net_buf_unref>
    2538:	e7f1      	b.n	251e <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
    253a:	f06f 0536 	mvn.w	r5, #54	; 0x36
    253e:	e7ee      	b.n	251e <bt_hci_cmd_send_sync+0xce>
    2540:	000161ba 	.word	0x000161ba
    2544:	2000027c 	.word	0x2000027c
    2548:	00016ae7 	.word	0x00016ae7
    254c:	0001697a 	.word	0x0001697a
    2550:	00017a29 	.word	0x00017a29
    2554:	00017065 	.word	0x00017065
    2558:	20003b24 	.word	0x20003b24
    255c:	00017096 	.word	0x00017096
    2560:	00016fa9 	.word	0x00016fa9
    2564:	0001619c 	.word	0x0001619c
    2568:	0001709f 	.word	0x0001709f
    256c:	000170bd 	.word	0x000170bd
    2570:	20003a5c 	.word	0x20003a5c

00002574 <set_le_scan_enable>:
{
    2574:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2576:	2102      	movs	r1, #2
{
    2578:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    257a:	f242 000c 	movw	r0, #8204	; 0x200c
    257e:	f7ff fef9 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    2582:	4604      	mov	r4, r0
    2584:	b330      	cbz	r0, 25d4 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    2586:	2102      	movs	r1, #2
    2588:	3008      	adds	r0, #8
    258a:	f011 fc5f 	bl	13e4c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    258e:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2590:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2592:	d116      	bne.n	25c2 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    2594:	210b      	movs	r1, #11
    2596:	4811      	ldr	r0, [pc, #68]	; (25dc <set_le_scan_enable+0x68>)
    2598:	f7ff fede 	bl	2358 <atomic_test_bit>
    259c:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    259e:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    25a0:	4621      	mov	r1, r4
    25a2:	2200      	movs	r2, #0
    25a4:	f242 000c 	movw	r0, #8204	; 0x200c
    25a8:	f7ff ff52 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    25ac:	4604      	mov	r4, r0
    25ae:	b930      	cbnz	r0, 25be <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    25b0:	2d01      	cmp	r5, #1
    25b2:	d109      	bne.n	25c8 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    25b4:	f44f 7180 	mov.w	r1, #256	; 0x100
    25b8:	4808      	ldr	r0, [pc, #32]	; (25dc <set_le_scan_enable+0x68>)
    25ba:	f7ff fe22 	bl	2202 <atomic_or>
}
    25be:	4620      	mov	r0, r4
    25c0:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    25c2:	2300      	movs	r3, #0
    25c4:	7043      	strb	r3, [r0, #1]
    25c6:	e7ea      	b.n	259e <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    25c8:	f46f 7180 	mvn.w	r1, #256	; 0x100
    25cc:	4803      	ldr	r0, [pc, #12]	; (25dc <set_le_scan_enable+0x68>)
    25ce:	f7ff fe29 	bl	2224 <atomic_and>
    25d2:	e7f4      	b.n	25be <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    25d4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    25d8:	e7f1      	b.n	25be <set_le_scan_enable+0x4a>
    25da:	bf00      	nop
    25dc:	20003ad0 	.word	0x20003ad0

000025e0 <set_random_address>:
{
    25e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("%s", bt_addr_str(addr));
    25e2:	4b1f      	ldr	r3, [pc, #124]	; (2660 <set_random_address+0x80>)
{
    25e4:	4605      	mov	r5, r0
	BT_DBG("%s", bt_addr_str(addr));
    25e6:	681c      	ldr	r4, [r3, #0]
    25e8:	f012 fddc 	bl	151a4 <_impl_k_current_get>
    25ec:	4606      	mov	r6, r0
    25ee:	4628      	mov	r0, r5
    25f0:	f7ff fcc4 	bl	1f7c <bt_addr_str>
    25f4:	4b1b      	ldr	r3, [pc, #108]	; (2664 <set_random_address+0x84>)
    25f6:	9303      	str	r3, [sp, #12]
    25f8:	e88d 0048 	stmia.w	sp, {r3, r6}
	return memcmp(a, b, sizeof(*a));
    25fc:	4e1a      	ldr	r6, [pc, #104]	; (2668 <set_random_address+0x88>)
    25fe:	9002      	str	r0, [sp, #8]
    2600:	4b1a      	ldr	r3, [pc, #104]	; (266c <set_random_address+0x8c>)
    2602:	4a1b      	ldr	r2, [pc, #108]	; (2670 <set_random_address+0x90>)
    2604:	491b      	ldr	r1, [pc, #108]	; (2674 <set_random_address+0x94>)
    2606:	481c      	ldr	r0, [pc, #112]	; (2678 <set_random_address+0x98>)
    2608:	47a0      	blx	r4
    260a:	2206      	movs	r2, #6
    260c:	f106 0108 	add.w	r1, r6, #8
    2610:	4628      	mov	r0, r5
    2612:	f7ff fc18 	bl	1e46 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2616:	4604      	mov	r4, r0
    2618:	b1d8      	cbz	r0, 2652 <set_random_address+0x72>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    261a:	2106      	movs	r1, #6
    261c:	f242 0005 	movw	r0, #8197	; 0x2005
    2620:	f7ff fea8 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    2624:	4604      	mov	r4, r0
    2626:	b1b8      	cbz	r0, 2658 <set_random_address+0x78>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2628:	2206      	movs	r2, #6
    262a:	4629      	mov	r1, r5
    262c:	3008      	adds	r0, #8
    262e:	f011 fc13 	bl	13e58 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2632:	4621      	mov	r1, r4
    2634:	2200      	movs	r2, #0
    2636:	f242 0005 	movw	r0, #8197	; 0x2005
    263a:	f7ff ff09 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    263e:	4604      	mov	r4, r0
    2640:	b938      	cbnz	r0, 2652 <set_random_address+0x72>
	memcpy(dst, src, sizeof(*dst));
    2642:	2206      	movs	r2, #6
    2644:	4629      	mov	r1, r5
    2646:	f106 0008 	add.w	r0, r6, #8
    264a:	f7ff fc11 	bl	1e70 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    264e:	2301      	movs	r3, #1
    2650:	71f3      	strb	r3, [r6, #7]
}
    2652:	4620      	mov	r0, r4
    2654:	b004      	add	sp, #16
    2656:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2658:	f06f 0436 	mvn.w	r4, #54	; 0x36
    265c:	e7f9      	b.n	2652 <set_random_address+0x72>
    265e:	bf00      	nop
    2660:	20003a5c 	.word	0x20003a5c
    2664:	000161ba 	.word	0x000161ba
    2668:	20003a60 	.word	0x20003a60
    266c:	00016afc 	.word	0x00016afc
    2670:	0001697a 	.word	0x0001697a
    2674:	00017a29 	.word	0x00017a29
    2678:	00017d68 	.word	0x00017d68

0000267c <le_set_private_addr>:
{
    267c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    267e:	2106      	movs	r1, #6
    2680:	4668      	mov	r0, sp
    2682:	f006 fa05 	bl	8a90 <bt_rand>
	if (err) {
    2686:	b940      	cbnz	r0, 269a <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2688:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    268c:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    268e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2692:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2696:	f7ff ffa3 	bl	25e0 <set_random_address>
}
    269a:	b003      	add	sp, #12
    269c:	f85d fb04 	ldr.w	pc, [sp], #4

000026a0 <set_advertise_enable>:
{
    26a0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    26a2:	2101      	movs	r1, #1
{
    26a4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    26a6:	f242 000a 	movw	r0, #8202	; 0x200a
    26aa:	f7ff fe63 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    26ae:	4604      	mov	r4, r0
    26b0:	b1d8      	cbz	r0, 26ea <set_advertise_enable+0x4a>
    26b2:	3008      	adds	r0, #8
	if (enable) {
    26b4:	b18d      	cbz	r5, 26da <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    26b6:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    26b8:	f011 fbd7 	bl	13e6a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    26bc:	4621      	mov	r1, r4
    26be:	2200      	movs	r2, #0
    26c0:	f242 000a 	movw	r0, #8202	; 0x200a
    26c4:	f7ff fec4 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    26c8:	4604      	mov	r4, r0
    26ca:	b920      	cbnz	r0, 26d6 <set_advertise_enable+0x36>
	if (enable) {
    26cc:	b13d      	cbz	r5, 26de <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    26ce:	2140      	movs	r1, #64	; 0x40
    26d0:	4807      	ldr	r0, [pc, #28]	; (26f0 <set_advertise_enable+0x50>)
    26d2:	f7ff fd96 	bl	2202 <atomic_or>
}
    26d6:	4620      	mov	r0, r4
    26d8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    26da:	4629      	mov	r1, r5
    26dc:	e7ec      	b.n	26b8 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    26de:	f06f 0140 	mvn.w	r1, #64	; 0x40
    26e2:	4803      	ldr	r0, [pc, #12]	; (26f0 <set_advertise_enable+0x50>)
    26e4:	f7ff fd9e 	bl	2224 <atomic_and>
    26e8:	e7f5      	b.n	26d6 <set_advertise_enable+0x36>
		return -ENOBUFS;
    26ea:	f06f 0436 	mvn.w	r4, #54	; 0x36
    26ee:	e7f2      	b.n	26d6 <set_advertise_enable+0x36>
    26f0:	20003ad0 	.word	0x20003ad0

000026f4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    26f4:	8802      	ldrh	r2, [r0, #0]
    26f6:	8843      	ldrh	r3, [r0, #2]
    26f8:	429a      	cmp	r2, r3
{
    26fa:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    26fc:	d818      	bhi.n	2730 <bt_le_conn_params_valid+0x3c>
    26fe:	2a05      	cmp	r2, #5
    2700:	d916      	bls.n	2730 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    2702:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    2706:	d813      	bhi.n	2730 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2708:	8884      	ldrh	r4, [r0, #4]
    270a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    270e:	d20f      	bcs.n	2730 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2710:	88c1      	ldrh	r1, [r0, #6]
    2712:	f1a1 020a 	sub.w	r2, r1, #10
    2716:	b292      	uxth	r2, r2
    2718:	f640 4076 	movw	r0, #3190	; 0xc76
    271c:	4282      	cmp	r2, r0
    271e:	d807      	bhi.n	2730 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2720:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    2724:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2728:	bfb4      	ite	lt
    272a:	2001      	movlt	r0, #1
    272c:	2000      	movge	r0, #0
    272e:	bd10      	pop	{r4, pc}
		return false;
    2730:	2000      	movs	r0, #0
}
    2732:	bd10      	pop	{r4, pc}

00002734 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2734:	2301      	movs	r3, #1
{
    2736:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2738:	2106      	movs	r1, #6
{
    273a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    273c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2740:	f006 f9a6 	bl	8a90 <bt_rand>
	if (err) {
    2744:	b918      	cbnz	r0, 274e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    2746:	79a3      	ldrb	r3, [r4, #6]
    2748:	f063 033f 	orn	r3, r3, #63	; 0x3f
    274c:	71a3      	strb	r3, [r4, #6]
}
    274e:	bd10      	pop	{r4, pc}

00002750 <bt_set_static_addr>:
{
    2750:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2752:	4c12      	ldr	r4, [pc, #72]	; (279c <bt_set_static_addr+0x4c>)
    2754:	7823      	ldrb	r3, [r4, #0]
    2756:	2b01      	cmp	r3, #1
    2758:	d104      	bne.n	2764 <bt_set_static_addr+0x14>
    275a:	79a3      	ldrb	r3, [r4, #6]
    275c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2760:	2bc0      	cmp	r3, #192	; 0xc0
    2762:	d00e      	beq.n	2782 <bt_set_static_addr+0x32>
		BT_ERR("Only static random address supported as identity");
    2764:	4b0e      	ldr	r3, [pc, #56]	; (27a0 <bt_set_static_addr+0x50>)
    2766:	9301      	str	r3, [sp, #4]
    2768:	9300      	str	r3, [sp, #0]
    276a:	4b0e      	ldr	r3, [pc, #56]	; (27a4 <bt_set_static_addr+0x54>)
    276c:	4a0e      	ldr	r2, [pc, #56]	; (27a8 <bt_set_static_addr+0x58>)
    276e:	681c      	ldr	r4, [r3, #0]
    2770:	490e      	ldr	r1, [pc, #56]	; (27ac <bt_set_static_addr+0x5c>)
    2772:	4b0f      	ldr	r3, [pc, #60]	; (27b0 <bt_set_static_addr+0x60>)
    2774:	480f      	ldr	r0, [pc, #60]	; (27b4 <bt_set_static_addr+0x64>)
    2776:	47a0      	blx	r4
    2778:	f06f 0515 	mvn.w	r5, #21
}
    277c:	4628      	mov	r0, r5
    277e:	b003      	add	sp, #12
    2780:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    2782:	1c60      	adds	r0, r4, #1
    2784:	f7ff ff2c 	bl	25e0 <set_random_address>
	if (err) {
    2788:	4605      	mov	r5, r0
    278a:	2800      	cmp	r0, #0
    278c:	d1f6      	bne.n	277c <bt_set_static_addr+0x2c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    278e:	2104      	movs	r1, #4
    2790:	f104 0070 	add.w	r0, r4, #112	; 0x70
    2794:	f7ff fd35 	bl	2202 <atomic_or>
	return 0;
    2798:	e7f0      	b.n	277c <bt_set_static_addr+0x2c>
    279a:	bf00      	nop
    279c:	20003a60 	.word	0x20003a60
    27a0:	000161ba 	.word	0x000161ba
    27a4:	20003a5c 	.word	0x20003a5c
    27a8:	000179e1 	.word	0x000179e1
    27ac:	00017a29 	.word	0x00017a29
    27b0:	00016d73 	.word	0x00016d73
    27b4:	000179e8 	.word	0x000179e8

000027b8 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    27b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    27bc:	4d20      	ldr	r5, [pc, #128]	; (2840 <bt_dev_show_info+0x88>)
    27be:	f8df 909c 	ldr.w	r9, [pc, #156]	; 285c <bt_dev_show_info+0xa4>
    27c2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2860 <bt_dev_show_info+0xa8>
    27c6:	f8d9 a000 	ldr.w	sl, [r9]
    27ca:	4f1e      	ldr	r7, [pc, #120]	; (2844 <bt_dev_show_info+0x8c>)
    27cc:	4e1e      	ldr	r6, [pc, #120]	; (2848 <bt_dev_show_info+0x90>)
    27ce:	4c1f      	ldr	r4, [pc, #124]	; (284c <bt_dev_show_info+0x94>)
{
    27d0:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    27d2:	4628      	mov	r0, r5
    27d4:	f7ff fbf8 	bl	1fc8 <bt_addr_le_str>
    27d8:	4643      	mov	r3, r8
    27da:	463a      	mov	r2, r7
    27dc:	4631      	mov	r1, r6
    27de:	9001      	str	r0, [sp, #4]
    27e0:	9402      	str	r4, [sp, #8]
    27e2:	9400      	str	r4, [sp, #0]
    27e4:	481a      	ldr	r0, [pc, #104]	; (2850 <bt_dev_show_info+0x98>)
    27e6:	47d0      	blx	sl
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    27e8:	f895 a00e 	ldrb.w	sl, [r5, #14]
    27ec:	f8d9 b000 	ldr.w	fp, [r9]
    27f0:	4650      	mov	r0, sl
    27f2:	f7ff fce7 	bl	21c4 <ver_str>
    27f6:	8aab      	ldrh	r3, [r5, #20]
    27f8:	9304      	str	r3, [sp, #16]
    27fa:	8a2b      	ldrh	r3, [r5, #16]
    27fc:	9303      	str	r3, [sp, #12]
    27fe:	463a      	mov	r2, r7
    2800:	4643      	mov	r3, r8
    2802:	4631      	mov	r1, r6
    2804:	f8cd a008 	str.w	sl, [sp, #8]
    2808:	9001      	str	r0, [sp, #4]
    280a:	9405      	str	r4, [sp, #20]
    280c:	9400      	str	r4, [sp, #0]
    280e:	4811      	ldr	r0, [pc, #68]	; (2854 <bt_dev_show_info+0x9c>)
    2810:	47d8      	blx	fp
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2812:	f8d9 a000 	ldr.w	sl, [r9]
    2816:	f895 900f 	ldrb.w	r9, [r5, #15]
    281a:	4648      	mov	r0, r9
    281c:	f7ff fcd2 	bl	21c4 <ver_str>
    2820:	8a6b      	ldrh	r3, [r5, #18]
    2822:	9303      	str	r3, [sp, #12]
    2824:	9001      	str	r0, [sp, #4]
    2826:	9404      	str	r4, [sp, #16]
    2828:	f8cd 9008 	str.w	r9, [sp, #8]
    282c:	9400      	str	r4, [sp, #0]
    282e:	4643      	mov	r3, r8
    2830:	463a      	mov	r2, r7
    2832:	4631      	mov	r1, r6
    2834:	4808      	ldr	r0, [pc, #32]	; (2858 <bt_dev_show_info+0xa0>)
    2836:	47d0      	blx	sl
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    2838:	b007      	add	sp, #28
    283a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    283e:	bf00      	nop
    2840:	20003a60 	.word	0x20003a60
    2844:	00016e7b 	.word	0x00016e7b
    2848:	00017a29 	.word	0x00017a29
    284c:	000161ba 	.word	0x000161ba
    2850:	00016e82 	.word	0x00016e82
    2854:	00016e9f 	.word	0x00016e9f
    2858:	00016eed 	.word	0x00016eed
    285c:	20003a5c 	.word	0x20003a5c
    2860:	00016d94 	.word	0x00016d94

00002864 <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2864:	b530      	push	{r4, r5, lr}
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2866:	4b0e      	ldr	r3, [pc, #56]	; (28a0 <bt_send+0x3c>)
{
    2868:	b087      	sub	sp, #28
    286a:	4604      	mov	r4, r0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    286c:	681d      	ldr	r5, [r3, #0]
    286e:	f012 fc99 	bl	151a4 <_impl_k_current_get>
    2872:	7d22      	ldrb	r2, [r4, #20]
    2874:	4b0b      	ldr	r3, [pc, #44]	; (28a4 <bt_send+0x40>)
    2876:	9204      	str	r2, [sp, #16]
    2878:	89a2      	ldrh	r2, [r4, #12]
    287a:	9305      	str	r3, [sp, #20]
    287c:	9203      	str	r2, [sp, #12]
    287e:	9001      	str	r0, [sp, #4]
    2880:	9300      	str	r3, [sp, #0]
    2882:	9402      	str	r4, [sp, #8]
    2884:	4b08      	ldr	r3, [pc, #32]	; (28a8 <bt_send+0x44>)
    2886:	4a09      	ldr	r2, [pc, #36]	; (28ac <bt_send+0x48>)
    2888:	4909      	ldr	r1, [pc, #36]	; (28b0 <bt_send+0x4c>)
    288a:	480a      	ldr	r0, [pc, #40]	; (28b4 <bt_send+0x50>)
    288c:	47a8      	blx	r5

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    288e:	4b0a      	ldr	r3, [pc, #40]	; (28b8 <bt_send+0x54>)
    2890:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2894:	691b      	ldr	r3, [r3, #16]
    2896:	4620      	mov	r0, r4
}
    2898:	b007      	add	sp, #28
    289a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_dev.drv->send(buf);
    289e:	4718      	bx	r3
    28a0:	20003a5c 	.word	0x20003a5c
    28a4:	000161ba 	.word	0x000161ba
    28a8:	00016dba 	.word	0x00016dba
    28ac:	0001697a 	.word	0x0001697a
    28b0:	00017a29 	.word	0x00017a29
    28b4:	000179b6 	.word	0x000179b6
    28b8:	20003a60 	.word	0x20003a60

000028bc <bt_hci_cmd_send>:
{
    28bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28c0:	4605      	mov	r5, r0
    28c2:	b086      	sub	sp, #24
	if (!buf) {
    28c4:	460c      	mov	r4, r1
    28c6:	b921      	cbnz	r1, 28d2 <bt_hci_cmd_send+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    28c8:	f7ff fd54 	bl	2374 <bt_hci_cmd_create>
		if (!buf) {
    28cc:	4604      	mov	r4, r0
    28ce:	2800      	cmp	r0, #0
    28d0:	d02f      	beq.n	2932 <bt_hci_cmd_send+0x76>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);
    28d2:	4f19      	ldr	r7, [pc, #100]	; (2938 <bt_hci_cmd_send+0x7c>)
    28d4:	4e19      	ldr	r6, [pc, #100]	; (293c <bt_hci_cmd_send+0x80>)
    28d6:	f8d7 8000 	ldr.w	r8, [r7]
    28da:	f012 fc63 	bl	151a4 <_impl_k_current_get>
    28de:	9604      	str	r6, [sp, #16]
    28e0:	89a3      	ldrh	r3, [r4, #12]
    28e2:	9303      	str	r3, [sp, #12]
    28e4:	9001      	str	r0, [sp, #4]
    28e6:	4b16      	ldr	r3, [pc, #88]	; (2940 <bt_hci_cmd_send+0x84>)
    28e8:	9502      	str	r5, [sp, #8]
    28ea:	9600      	str	r6, [sp, #0]
    28ec:	4a15      	ldr	r2, [pc, #84]	; (2944 <bt_hci_cmd_send+0x88>)
    28ee:	4916      	ldr	r1, [pc, #88]	; (2948 <bt_hci_cmd_send+0x8c>)
    28f0:	4816      	ldr	r0, [pc, #88]	; (294c <bt_hci_cmd_send+0x90>)
    28f2:	47c0      	blx	r8
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    28f4:	f640 4335 	movw	r3, #3125	; 0xc35
    28f8:	429d      	cmp	r5, r3
    28fa:	d114      	bne.n	2926 <bt_hci_cmd_send+0x6a>
		err = bt_send(buf);
    28fc:	4620      	mov	r0, r4
    28fe:	f7ff ffb1 	bl	2864 <bt_send>
		if (err) {
    2902:	4605      	mov	r5, r0
    2904:	b158      	cbz	r0, 291e <bt_hci_cmd_send+0x62>
			BT_ERR("Unable to send to driver (err %d)", err);
    2906:	9001      	str	r0, [sp, #4]
    2908:	9602      	str	r6, [sp, #8]
    290a:	9600      	str	r6, [sp, #0]
    290c:	4810      	ldr	r0, [pc, #64]	; (2950 <bt_hci_cmd_send+0x94>)
    290e:	683e      	ldr	r6, [r7, #0]
    2910:	4b0b      	ldr	r3, [pc, #44]	; (2940 <bt_hci_cmd_send+0x84>)
    2912:	4a10      	ldr	r2, [pc, #64]	; (2954 <bt_hci_cmd_send+0x98>)
    2914:	490c      	ldr	r1, [pc, #48]	; (2948 <bt_hci_cmd_send+0x8c>)
    2916:	47b0      	blx	r6
			net_buf_unref(buf);
    2918:	4620      	mov	r0, r4
    291a:	f011 fa65 	bl	13de8 <net_buf_unref>
}
    291e:	4628      	mov	r0, r5
    2920:	b006      	add	sp, #24
    2922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2926:	4621      	mov	r1, r4
    2928:	480b      	ldr	r0, [pc, #44]	; (2958 <bt_hci_cmd_send+0x9c>)
    292a:	f011 fa50 	bl	13dce <net_buf_put>
	return 0;
    292e:	2500      	movs	r5, #0
    2930:	e7f5      	b.n	291e <bt_hci_cmd_send+0x62>
			return -ENOBUFS;
    2932:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2936:	e7f2      	b.n	291e <bt_hci_cmd_send+0x62>
    2938:	20003a5c 	.word	0x20003a5c
    293c:	000161ba 	.word	0x000161ba
    2940:	00016ad7 	.word	0x00016ad7
    2944:	0001697a 	.word	0x0001697a
    2948:	00017a29 	.word	0x00017a29
    294c:	00017009 	.word	0x00017009
    2950:	00017033 	.word	0x00017033
    2954:	000179e1 	.word	0x000179e1
    2958:	20003b24 	.word	0x20003b24

0000295c <start_le_scan>:
{
    295c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    295e:	4605      	mov	r5, r0
    2960:	460e      	mov	r6, r1
    2962:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    2964:	2100      	movs	r1, #0
    2966:	2207      	movs	r2, #7
    2968:	4668      	mov	r0, sp
    296a:	f7ff faad 	bl	1ec8 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    296e:	4821      	ldr	r0, [pc, #132]	; (29f4 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    2970:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    2974:	2300      	movs	r3, #0
    2976:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    297a:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    297c:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    297e:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    2982:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    2986:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    298a:	d10a      	bne.n	29a2 <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    298c:	2106      	movs	r1, #6
    298e:	3070      	adds	r0, #112	; 0x70
    2990:	f7ff fce2 	bl	2358 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2994:	b928      	cbnz	r0, 29a2 <start_le_scan+0x46>
			err = le_set_private_addr();
    2996:	f7ff fe71 	bl	267c <le_set_private_addr>
			if (err) {
    299a:	4604      	mov	r4, r0
    299c:	b9f0      	cbnz	r0, 29dc <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    299e:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    29a2:	2107      	movs	r1, #7
    29a4:	f242 000b 	movw	r0, #8203	; 0x200b
    29a8:	f7ff fce4 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    29ac:	4604      	mov	r4, r0
    29ae:	b1f0      	cbz	r0, 29ee <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    29b0:	2207      	movs	r2, #7
    29b2:	4669      	mov	r1, sp
    29b4:	3008      	adds	r0, #8
    29b6:	f011 fa4f 	bl	13e58 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    29ba:	4621      	mov	r1, r4
    29bc:	f242 000b 	movw	r0, #8203	; 0x200b
    29c0:	f7ff ff7c 	bl	28bc <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    29c4:	2001      	movs	r0, #1
    29c6:	f7ff fdd5 	bl	2574 <set_le_scan_enable>
	if (err) {
    29ca:	4604      	mov	r4, r0
    29cc:	b930      	cbnz	r0, 29dc <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    29ce:	2d01      	cmp	r5, #1
    29d0:	d107      	bne.n	29e2 <start_le_scan+0x86>
    29d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    29d6:	4808      	ldr	r0, [pc, #32]	; (29f8 <start_le_scan+0x9c>)
    29d8:	f7ff fc13 	bl	2202 <atomic_or>
}
    29dc:	4620      	mov	r0, r4
    29de:	b002      	add	sp, #8
    29e0:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    29e2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    29e6:	4804      	ldr	r0, [pc, #16]	; (29f8 <start_le_scan+0x9c>)
    29e8:	f7ff fc1c 	bl	2224 <atomic_and>
    29ec:	e7f6      	b.n	29dc <start_le_scan+0x80>
		return -ENOBUFS;
    29ee:	f06f 0436 	mvn.w	r4, #54	; 0x36
    29f2:	e7f3      	b.n	29dc <start_le_scan+0x80>
    29f4:	20003a60 	.word	0x20003a60
    29f8:	20003ad0 	.word	0x20003ad0

000029fc <bt_le_scan_update>:
{
    29fc:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    29fe:	2109      	movs	r1, #9
{
    2a00:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2a02:	4816      	ldr	r0, [pc, #88]	; (2a5c <bt_le_scan_update+0x60>)
    2a04:	f7ff fca8 	bl	2358 <atomic_test_bit>
    2a08:	4602      	mov	r2, r0
    2a0a:	b108      	cbz	r0, 2a10 <bt_le_scan_update+0x14>
		return 0;
    2a0c:	2000      	movs	r0, #0
    2a0e:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2a10:	2108      	movs	r1, #8
    2a12:	4812      	ldr	r0, [pc, #72]	; (2a5c <bt_le_scan_update+0x60>)
    2a14:	f7ff fca0 	bl	2358 <atomic_test_bit>
    2a18:	b9d0      	cbnz	r0, 2a50 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    2a1a:	2101      	movs	r1, #1
    2a1c:	2000      	movs	r0, #0
    2a1e:	f002 f9e7 	bl	4df0 <bt_conn_lookup_state_le>
		if (!conn) {
    2a22:	4604      	mov	r4, r0
    2a24:	2800      	cmp	r0, #0
    2a26:	d0f1      	beq.n	2a0c <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2a2c:	480b      	ldr	r0, [pc, #44]	; (2a5c <bt_le_scan_update+0x60>)
    2a2e:	f7ff fbe8 	bl	2202 <atomic_or>
		bt_conn_unref(conn);
    2a32:	4620      	mov	r0, r4
    2a34:	f002 f9fa 	bl	4e2c <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    2a38:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2a3a:	bf15      	itete	ne
    2a3c:	2230      	movne	r2, #48	; 0x30
    2a3e:	2212      	moveq	r2, #18
    2a40:	2160      	movne	r1, #96	; 0x60
    2a42:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    2a46:	2000      	movs	r0, #0
}
    2a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2a4c:	f7ff bf86 	b.w	295c <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2a50:	4610      	mov	r0, r2
    2a52:	f7ff fd8f 	bl	2574 <set_le_scan_enable>
		if (err) {
    2a56:	2800      	cmp	r0, #0
    2a58:	d0df      	beq.n	2a1a <bt_le_scan_update+0x1e>
    2a5a:	bd38      	pop	{r3, r4, r5, pc}
    2a5c:	20003ad0 	.word	0x20003ad0

00002a60 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    2a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2a64:	4d75      	ldr	r5, [pc, #468]	; (2c3c <bt_init+0x1dc>)
    2a66:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    2a6a:	6899      	ldr	r1, [r3, #8]
    2a6c:	f011 0101 	ands.w	r1, r1, #1
{
    2a70:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2a72:	d132      	bne.n	2ada <bt_init+0x7a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2a74:	aa0c      	add	r2, sp, #48	; 0x30
    2a76:	f640 4003 	movw	r0, #3075	; 0xc03
    2a7a:	f7ff fce9 	bl	2450 <bt_hci_cmd_send_sync>
		if (err) {
    2a7e:	4604      	mov	r4, r0
    2a80:	2800      	cmp	r0, #0
    2a82:	f040 80d7 	bne.w	2c34 <bt_init+0x1d4>
	u8_t status = buf->data[0];
    2a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a88:	689b      	ldr	r3, [r3, #8]
    2a8a:	781c      	ldrb	r4, [r3, #0]
	BT_DBG("status %u", status);
    2a8c:	4b6c      	ldr	r3, [pc, #432]	; (2c40 <bt_init+0x1e0>)
    2a8e:	681e      	ldr	r6, [r3, #0]
    2a90:	f012 fb88 	bl	151a4 <_impl_k_current_get>
    2a94:	4b6b      	ldr	r3, [pc, #428]	; (2c44 <bt_init+0x1e4>)
    2a96:	9303      	str	r3, [sp, #12]
    2a98:	9001      	str	r0, [sp, #4]
    2a9a:	9300      	str	r3, [sp, #0]
    2a9c:	9402      	str	r4, [sp, #8]
    2a9e:	4b6a      	ldr	r3, [pc, #424]	; (2c48 <bt_init+0x1e8>)
    2aa0:	4a6a      	ldr	r2, [pc, #424]	; (2c4c <bt_init+0x1ec>)
    2aa2:	496b      	ldr	r1, [pc, #428]	; (2c50 <bt_init+0x1f0>)
    2aa4:	486b      	ldr	r0, [pc, #428]	; (2c54 <bt_init+0x1f4>)
    2aa6:	47b0      	blx	r6
	if (status) {
    2aa8:	b9a4      	cbnz	r4, 2ad4 <bt_init+0x74>
	scan_dev_found_cb = NULL;
    2aaa:	4b6b      	ldr	r3, [pc, #428]	; (2c58 <bt_init+0x1f8>)
    2aac:	601c      	str	r4, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2aae:	462b      	mov	r3, r5
    2ab0:	f3bf 8f5b 	dmb	ish
    2ab4:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2ab8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2abc:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2ac0:	f3bf 8f5b 	dmb	ish
    2ac4:	e853 1f00 	ldrex	r1, [r3]
    2ac8:	e843 2000 	strex	r0, r2, [r3]
    2acc:	2800      	cmp	r0, #0
    2ace:	d1f9      	bne.n	2ac4 <bt_init+0x64>
    2ad0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    2ad4:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ad6:	f011 f987 	bl	13de8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2ada:	aa0c      	add	r2, sp, #48	; 0x30
    2adc:	2100      	movs	r1, #0
    2ade:	f241 0003 	movw	r0, #4099	; 0x1003
    2ae2:	f7ff fcb5 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    2ae6:	4604      	mov	r4, r0
    2ae8:	2800      	cmp	r0, #0
    2aea:	f040 80a3 	bne.w	2c34 <bt_init+0x1d4>
    2aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2af0:	4e53      	ldr	r6, [pc, #332]	; (2c40 <bt_init+0x1e0>)
    2af2:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2af6:	f8d6 9000 	ldr.w	r9, [r6]
    2afa:	4f52      	ldr	r7, [pc, #328]	; (2c44 <bt_init+0x1e4>)
    2afc:	f012 fb52 	bl	151a4 <_impl_k_current_get>
    2b00:	9703      	str	r7, [sp, #12]
    2b02:	f818 3b01 	ldrb.w	r3, [r8], #1
    2b06:	9302      	str	r3, [sp, #8]
    2b08:	9001      	str	r0, [sp, #4]
    2b0a:	4b54      	ldr	r3, [pc, #336]	; (2c5c <bt_init+0x1fc>)
    2b0c:	4a4f      	ldr	r2, [pc, #316]	; (2c4c <bt_init+0x1ec>)
    2b0e:	4950      	ldr	r1, [pc, #320]	; (2c50 <bt_init+0x1f0>)
    2b10:	4850      	ldr	r0, [pc, #320]	; (2c54 <bt_init+0x1f4>)
    2b12:	9700      	str	r7, [sp, #0]
    2b14:	47c8      	blx	r9
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2b16:	2208      	movs	r2, #8
    2b18:	4641      	mov	r1, r8
    2b1a:	4851      	ldr	r0, [pc, #324]	; (2c60 <bt_init+0x200>)
    2b1c:	f7ff f9a8 	bl	1e70 <memcpy>
	net_buf_unref(rsp);
    2b20:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b22:	f011 f961 	bl	13de8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2b26:	4621      	mov	r1, r4
    2b28:	aa0c      	add	r2, sp, #48	; 0x30
    2b2a:	f241 0001 	movw	r0, #4097	; 0x1001
    2b2e:	f7ff fc8f 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    2b32:	4604      	mov	r4, r0
    2b34:	2800      	cmp	r0, #0
    2b36:	d17d      	bne.n	2c34 <bt_init+0x1d4>
    2b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2b3a:	f8d6 8000 	ldr.w	r8, [r6]
    2b3e:	689c      	ldr	r4, [r3, #8]
    2b40:	f012 fb30 	bl	151a4 <_impl_k_current_get>
    2b44:	9703      	str	r7, [sp, #12]
    2b46:	7823      	ldrb	r3, [r4, #0]
    2b48:	4941      	ldr	r1, [pc, #260]	; (2c50 <bt_init+0x1f0>)
    2b4a:	9302      	str	r3, [sp, #8]
    2b4c:	9001      	str	r0, [sp, #4]
    2b4e:	4b45      	ldr	r3, [pc, #276]	; (2c64 <bt_init+0x204>)
    2b50:	4a3e      	ldr	r2, [pc, #248]	; (2c4c <bt_init+0x1ec>)
    2b52:	4840      	ldr	r0, [pc, #256]	; (2c54 <bt_init+0x1f4>)
    2b54:	9700      	str	r7, [sp, #0]
    2b56:	47c0      	blx	r8
	bt_dev.hci_version = rp->hci_version;
    2b58:	7863      	ldrb	r3, [r4, #1]
    2b5a:	73ab      	strb	r3, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2b5c:	78e2      	ldrb	r2, [r4, #3]
    2b5e:	78a3      	ldrb	r3, [r4, #2]
	net_buf_unref(rsp);
    2b60:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2b62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2b66:	822b      	strh	r3, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2b68:	7923      	ldrb	r3, [r4, #4]
    2b6a:	73eb      	strb	r3, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2b6c:	7a22      	ldrb	r2, [r4, #8]
    2b6e:	79e3      	ldrb	r3, [r4, #7]
    2b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2b74:	826b      	strh	r3, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2b76:	79a2      	ldrb	r2, [r4, #6]
    2b78:	7963      	ldrb	r3, [r4, #5]
    2b7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2b7e:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2b80:	f011 f932 	bl	13de8 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2b84:	2103      	movs	r1, #3
    2b86:	4838      	ldr	r0, [pc, #224]	; (2c68 <bt_init+0x208>)
    2b88:	f7ff fbe6 	bl	2358 <atomic_test_bit>
    2b8c:	4601      	mov	r1, r0
    2b8e:	bb10      	cbnz	r0, 2bd6 <bt_init+0x176>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2b90:	aa0c      	add	r2, sp, #48	; 0x30
    2b92:	f241 0009 	movw	r0, #4105	; 0x1009
    2b96:	f7ff fc5b 	bl	2450 <bt_hci_cmd_send_sync>
		if (err) {
    2b9a:	4604      	mov	r4, r0
    2b9c:	2800      	cmp	r0, #0
    2b9e:	d149      	bne.n	2c34 <bt_init+0x1d4>
    2ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2ba2:	f8d6 9000 	ldr.w	r9, [r6]
    2ba6:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2baa:	f012 fafb 	bl	151a4 <_impl_k_current_get>
    2bae:	9703      	str	r7, [sp, #12]
    2bb0:	f818 3b01 	ldrb.w	r3, [r8], #1
    2bb4:	9302      	str	r3, [sp, #8]
    2bb6:	9001      	str	r0, [sp, #4]
    2bb8:	4b2c      	ldr	r3, [pc, #176]	; (2c6c <bt_init+0x20c>)
    2bba:	4a24      	ldr	r2, [pc, #144]	; (2c4c <bt_init+0x1ec>)
    2bbc:	4924      	ldr	r1, [pc, #144]	; (2c50 <bt_init+0x1f0>)
    2bbe:	4825      	ldr	r0, [pc, #148]	; (2c54 <bt_init+0x1f4>)
    2bc0:	9700      	str	r7, [sp, #0]
    2bc2:	47c8      	blx	r9
    2bc4:	2206      	movs	r2, #6
    2bc6:	4641      	mov	r1, r8
    2bc8:	4829      	ldr	r0, [pc, #164]	; (2c70 <bt_init+0x210>)
    2bca:	f7ff f951 	bl	1e70 <memcpy>
		net_buf_unref(rsp);
    2bce:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2bd0:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    2bd2:	f011 f909 	bl	13de8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2bd6:	aa0c      	add	r2, sp, #48	; 0x30
    2bd8:	2100      	movs	r1, #0
    2bda:	f241 0002 	movw	r0, #4098	; 0x1002
    2bde:	f7ff fc37 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    2be2:	4604      	mov	r4, r0
    2be4:	bb30      	cbnz	r0, 2c34 <bt_init+0x1d4>
    2be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2be8:	f8d6 9000 	ldr.w	r9, [r6]
    2bec:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2bf0:	f012 fad8 	bl	151a4 <_impl_k_current_get>
    2bf4:	9703      	str	r7, [sp, #12]
    2bf6:	f818 3b01 	ldrb.w	r3, [r8], #1
    2bfa:	9302      	str	r3, [sp, #8]
    2bfc:	9001      	str	r0, [sp, #4]
    2bfe:	4b1d      	ldr	r3, [pc, #116]	; (2c74 <bt_init+0x214>)
    2c00:	4a12      	ldr	r2, [pc, #72]	; (2c4c <bt_init+0x1ec>)
    2c02:	4913      	ldr	r1, [pc, #76]	; (2c50 <bt_init+0x1f0>)
    2c04:	4813      	ldr	r0, [pc, #76]	; (2c54 <bt_init+0x1f4>)
    2c06:	9700      	str	r7, [sp, #0]
    2c08:	47c8      	blx	r9
	memcpy(bt_dev.supported_commands, rp->commands,
    2c0a:	2240      	movs	r2, #64	; 0x40
    2c0c:	4641      	mov	r1, r8
    2c0e:	481a      	ldr	r0, [pc, #104]	; (2c78 <bt_init+0x218>)
    2c10:	f7ff f92e 	bl	1e70 <memcpy>
	net_buf_unref(rsp);
    2c14:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c16:	f011 f8e7 	bl	13de8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2c1a:	7eab      	ldrb	r3, [r5, #26]
    2c1c:	0658      	lsls	r0, r3, #25
    2c1e:	d433      	bmi.n	2c88 <bt_init+0x228>
		BT_ERR("Non-LE capable controller detected!");
    2c20:	9701      	str	r7, [sp, #4]
    2c22:	9700      	str	r7, [sp, #0]
    2c24:	6834      	ldr	r4, [r6, #0]
    2c26:	4b15      	ldr	r3, [pc, #84]	; (2c7c <bt_init+0x21c>)
    2c28:	4a15      	ldr	r2, [pc, #84]	; (2c80 <bt_init+0x220>)
    2c2a:	4909      	ldr	r1, [pc, #36]	; (2c50 <bt_init+0x1f0>)
    2c2c:	4815      	ldr	r0, [pc, #84]	; (2c84 <bt_init+0x224>)
    2c2e:	47a0      	blx	r4
		return -ENODEV;
    2c30:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    2c34:	4620      	mov	r0, r4
    2c36:	b00e      	add	sp, #56	; 0x38
    2c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c3c:	20003a60 	.word	0x20003a60
    2c40:	20003a5c 	.word	0x20003a5c
    2c44:	000161ba 	.word	0x000161ba
    2c48:	00016c02 	.word	0x00016c02
    2c4c:	0001697a 	.word	0x0001697a
    2c50:	00017a29 	.word	0x00017a29
    2c54:	00017111 	.word	0x00017111
    2c58:	200002d8 	.word	0x200002d8
    2c5c:	00016d31 	.word	0x00016d31
    2c60:	20003a76 	.word	0x20003a76
    2c64:	00016c92 	.word	0x00016c92
    2c68:	20003ad0 	.word	0x20003ad0
    2c6c:	00016caa 	.word	0x00016caa
    2c70:	20003a61 	.word	0x20003a61
    2c74:	00016d10 	.word	0x00016d10
    2c78:	20003a7e 	.word	0x20003a7e
    2c7c:	00016d6b 	.word	0x00016d6b
    2c80:	000179e1 	.word	0x000179e1
    2c84:	00017130 	.word	0x00017130
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2c88:	4621      	mov	r1, r4
    2c8a:	aa0c      	add	r2, sp, #48	; 0x30
    2c8c:	f242 0003 	movw	r0, #8195	; 0x2003
    2c90:	f7ff fbde 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    2c94:	4604      	mov	r4, r0
    2c96:	2800      	cmp	r0, #0
    2c98:	d1cc      	bne.n	2c34 <bt_init+0x1d4>
    2c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2c9c:	f8d6 9000 	ldr.w	r9, [r6]
    2ca0:	f8d3 8008 	ldr.w	r8, [r3, #8]
    2ca4:	f012 fa7e 	bl	151a4 <_impl_k_current_get>
    2ca8:	9703      	str	r7, [sp, #12]
    2caa:	f818 3b01 	ldrb.w	r3, [r8], #1
    2cae:	9302      	str	r3, [sp, #8]
    2cb0:	9001      	str	r0, [sp, #4]
    2cb2:	4bb5      	ldr	r3, [pc, #724]	; (2f88 <bt_init+0x528>)
    2cb4:	4ab5      	ldr	r2, [pc, #724]	; (2f8c <bt_init+0x52c>)
    2cb6:	49b6      	ldr	r1, [pc, #728]	; (2f90 <bt_init+0x530>)
    2cb8:	48b6      	ldr	r0, [pc, #728]	; (2f94 <bt_init+0x534>)
    2cba:	9700      	str	r7, [sp, #0]
    2cbc:	47c8      	blx	r9
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2cbe:	2208      	movs	r2, #8
    2cc0:	4641      	mov	r1, r8
    2cc2:	48b5      	ldr	r0, [pc, #724]	; (2f98 <bt_init+0x538>)
    2cc4:	f7ff f8d4 	bl	1e70 <memcpy>
	net_buf_unref(rsp);
    2cc8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2cca:	f011 f88d 	bl	13de8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2cce:	4621      	mov	r1, r4
    2cd0:	aa0c      	add	r2, sp, #48	; 0x30
    2cd2:	f242 0002 	movw	r0, #8194	; 0x2002
    2cd6:	f7ff fbbb 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    2cda:	4604      	mov	r4, r0
    2cdc:	2800      	cmp	r0, #0
    2cde:	d1a9      	bne.n	2c34 <bt_init+0x1d4>
    2ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2ce2:	f8d6 8000 	ldr.w	r8, [r6]
    2ce6:	689c      	ldr	r4, [r3, #8]
    2ce8:	f012 fa5c 	bl	151a4 <_impl_k_current_get>
    2cec:	9703      	str	r7, [sp, #12]
    2cee:	7823      	ldrb	r3, [r4, #0]
    2cf0:	9302      	str	r3, [sp, #8]
    2cf2:	9001      	str	r0, [sp, #4]
    2cf4:	4ba9      	ldr	r3, [pc, #676]	; (2f9c <bt_init+0x53c>)
    2cf6:	9700      	str	r7, [sp, #0]
    2cf8:	4aa4      	ldr	r2, [pc, #656]	; (2f8c <bt_init+0x52c>)
    2cfa:	49a5      	ldr	r1, [pc, #660]	; (2f90 <bt_init+0x530>)
    2cfc:	48a5      	ldr	r0, [pc, #660]	; (2f94 <bt_init+0x534>)
    2cfe:	47c0      	blx	r8
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2d00:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2d04:	f8a5 3088 	strh.w	r3, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2d08:	b1c3      	cbz	r3, 2d3c <bt_init+0x2dc>
	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);
    2d0a:	f8d6 8000 	ldr.w	r8, [r6]
    2d0e:	f012 fa49 	bl	151a4 <_impl_k_current_get>
    2d12:	9704      	str	r7, [sp, #16]
    2d14:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2d18:	9303      	str	r3, [sp, #12]
    2d1a:	78e3      	ldrb	r3, [r4, #3]
    2d1c:	9302      	str	r3, [sp, #8]
    2d1e:	9001      	str	r0, [sp, #4]
    2d20:	4a9a      	ldr	r2, [pc, #616]	; (2f8c <bt_init+0x52c>)
    2d22:	499b      	ldr	r1, [pc, #620]	; (2f90 <bt_init+0x530>)
    2d24:	489e      	ldr	r0, [pc, #632]	; (2fa0 <bt_init+0x540>)
    2d26:	9700      	str	r7, [sp, #0]
    2d28:	4b9c      	ldr	r3, [pc, #624]	; (2f9c <bt_init+0x53c>)
    2d2a:	47c0      	blx	r8
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2d2c:	78e2      	ldrb	r2, [r4, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2d2e:	489d      	ldr	r0, [pc, #628]	; (2fa4 <bt_init+0x544>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2d30:	2a02      	cmp	r2, #2
    2d32:	bf28      	it	cs
    2d34:	2202      	movcs	r2, #2
    2d36:	4611      	mov	r1, r2
    2d38:	f012 fa3a 	bl	151b0 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2d3c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d3e:	f011 f853 	bl	13de8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2d42:	7eac      	ldrb	r4, [r5, #26]
    2d44:	f014 0420 	ands.w	r4, r4, #32
    2d48:	f000 8113 	beq.w	2f72 <bt_init+0x512>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2d4c:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2d50:	0719      	lsls	r1, r3, #28
    2d52:	d525      	bpl.n	2da0 <bt_init+0x340>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2d54:	aa0c      	add	r2, sp, #48	; 0x30
    2d56:	2100      	movs	r1, #0
    2d58:	f242 001c 	movw	r0, #8220	; 0x201c
    2d5c:	f7ff fb78 	bl	2450 <bt_hci_cmd_send_sync>
		if (err) {
    2d60:	4604      	mov	r4, r0
    2d62:	2800      	cmp	r0, #0
    2d64:	f47f af66 	bne.w	2c34 <bt_init+0x1d4>
    2d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2d6a:	f8d6 8000 	ldr.w	r8, [r6]
    2d6e:	689c      	ldr	r4, [r3, #8]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2d70:	f012 fa18 	bl	151a4 <_impl_k_current_get>
    2d74:	4b8c      	ldr	r3, [pc, #560]	; (2fa8 <bt_init+0x548>)
    2d76:	9303      	str	r3, [sp, #12]
    2d78:	7822      	ldrb	r2, [r4, #0]
    2d7a:	9202      	str	r2, [sp, #8]
    2d7c:	9001      	str	r0, [sp, #4]
    2d7e:	9300      	str	r3, [sp, #0]
    2d80:	4a82      	ldr	r2, [pc, #520]	; (2f8c <bt_init+0x52c>)
    2d82:	4b8a      	ldr	r3, [pc, #552]	; (2fac <bt_init+0x54c>)
    2d84:	4883      	ldr	r0, [pc, #524]	; (2f94 <bt_init+0x534>)
    2d86:	4982      	ldr	r1, [pc, #520]	; (2f90 <bt_init+0x530>)
    2d88:	47c0      	blx	r8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2d8a:	4623      	mov	r3, r4
		net_buf_unref(rsp);
    2d8c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d8e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2d92:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2d94:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2d98:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2d9c:	f011 f824 	bl	13de8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2da0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2da4:	069a      	lsls	r2, r3, #26
    2da6:	f100 8129 	bmi.w	2ffc <bt_init+0x59c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2daa:	2108      	movs	r1, #8
    2dac:	f242 0001 	movw	r0, #8193	; 0x2001
    2db0:	f7ff fae0 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    2db4:	4604      	mov	r4, r0
    2db6:	2800      	cmp	r0, #0
    2db8:	f000 80e2 	beq.w	2f80 <bt_init+0x520>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2dbc:	2108      	movs	r1, #8
    2dbe:	4408      	add	r0, r1
    2dc0:	f011 f844 	bl	13e4c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2dc4:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    2dc8:	078b      	lsls	r3, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2dca:	bf4c      	ite	mi
    2dcc:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2dce:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2dd0:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2dd2:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2dd6:	bf48      	it	mi
    2dd8:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2ddc:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2de0:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    2de4:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2de8:	bf18      	it	ne
    2dea:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2dee:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2df0:	bf08      	it	eq
    2df2:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2df6:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2df8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2dfc:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2dfe:	2200      	movs	r2, #0
    2e00:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2e02:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2e04:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2e06:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2e08:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2e0a:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2e0c:	4621      	mov	r1, r4
    2e0e:	f242 0001 	movw	r0, #8193	; 0x2001
    2e12:	f7ff fb1d 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    2e16:	4604      	mov	r4, r0
    2e18:	2800      	cmp	r0, #0
    2e1a:	f47f af0b 	bne.w	2c34 <bt_init+0x1d4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2e1e:	7eab      	ldrb	r3, [r5, #26]
    2e20:	069a      	lsls	r2, r3, #26
    2e22:	d447      	bmi.n	2eb4 <bt_init+0x454>
	if (bt_dev.le.mtu) {
    2e24:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    2e28:	2900      	cmp	r1, #0
    2e2a:	d143      	bne.n	2eb4 <bt_init+0x454>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2e2c:	aa0c      	add	r2, sp, #48	; 0x30
    2e2e:	f241 0005 	movw	r0, #4101	; 0x1005
    2e32:	f7ff fb0d 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    2e36:	4604      	mov	r4, r0
    2e38:	2800      	cmp	r0, #0
    2e3a:	f47f aefb 	bne.w	2c34 <bt_init+0x1d4>
    2e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    2e40:	f8d6 9000 	ldr.w	r9, [r6]
    2e44:	689c      	ldr	r4, [r3, #8]
    2e46:	f8df 8160 	ldr.w	r8, [pc, #352]	; 2fa8 <bt_init+0x548>
    2e4a:	f012 f9ab 	bl	151a4 <_impl_k_current_get>
    2e4e:	f8cd 800c 	str.w	r8, [sp, #12]
    2e52:	7823      	ldrb	r3, [r4, #0]
    2e54:	9302      	str	r3, [sp, #8]
    2e56:	9001      	str	r0, [sp, #4]
    2e58:	4b55      	ldr	r3, [pc, #340]	; (2fb0 <bt_init+0x550>)
    2e5a:	f8cd 8000 	str.w	r8, [sp]
    2e5e:	4a4b      	ldr	r2, [pc, #300]	; (2f8c <bt_init+0x52c>)
    2e60:	494b      	ldr	r1, [pc, #300]	; (2f90 <bt_init+0x530>)
    2e62:	484c      	ldr	r0, [pc, #304]	; (2f94 <bt_init+0x534>)
    2e64:	47c8      	blx	r9
	if (bt_dev.le.mtu) {
    2e66:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2e6a:	bb03      	cbnz	r3, 2eae <bt_init+0x44e>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2e6c:	78a2      	ldrb	r2, [r4, #2]
    2e6e:	7863      	ldrb	r3, [r4, #1]
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2e70:	f8d6 9000 	ldr.w	r9, [r6]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2e78:	f8a5 3088 	strh.w	r3, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2e7c:	88a4      	ldrh	r4, [r4, #4]
    2e7e:	f012 f991 	bl	151a4 <_impl_k_current_get>
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2e82:	f8cd 8010 	str.w	r8, [sp, #16]
    2e86:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2e8a:	9303      	str	r3, [sp, #12]
    2e8c:	9001      	str	r0, [sp, #4]
    2e8e:	4a3f      	ldr	r2, [pc, #252]	; (2f8c <bt_init+0x52c>)
    2e90:	493f      	ldr	r1, [pc, #252]	; (2f90 <bt_init+0x530>)
    2e92:	4848      	ldr	r0, [pc, #288]	; (2fb4 <bt_init+0x554>)
    2e94:	9402      	str	r4, [sp, #8]
    2e96:	f8cd 8000 	str.w	r8, [sp]
    2e9a:	4b45      	ldr	r3, [pc, #276]	; (2fb0 <bt_init+0x550>)
    2e9c:	47c8      	blx	r9
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2e9e:	2c02      	cmp	r4, #2
    2ea0:	4622      	mov	r2, r4
    2ea2:	bf28      	it	cs
    2ea4:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2ea6:	4611      	mov	r1, r2
    2ea8:	483e      	ldr	r0, [pc, #248]	; (2fa4 <bt_init+0x544>)
    2eaa:	f012 f981 	bl	151b0 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2eae:	980c      	ldr	r0, [sp, #48]	; 0x30
    2eb0:	f010 ff9a 	bl	13de8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2eb4:	2108      	movs	r1, #8
    2eb6:	f640 4001 	movw	r0, #3073	; 0xc01
    2eba:	f7ff fa5b 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    2ebe:	4604      	mov	r4, r0
    2ec0:	2800      	cmp	r0, #0
    2ec2:	d05d      	beq.n	2f80 <bt_init+0x520>
	ev = net_buf_add(buf, sizeof(*ev));
    2ec4:	2108      	movs	r1, #8
    2ec6:	4408      	add	r0, r1
    2ec8:	f010 ffc0 	bl	13e4c <net_buf_simple_add>
	dst[0] = val;
    2ecc:	2310      	movs	r3, #16
    2ece:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2ed0:	2388      	movs	r3, #136	; 0x88
    2ed2:	7043      	strb	r3, [r0, #1]
    2ed4:	2302      	movs	r3, #2
	dst[0] = val;
    2ed6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2ed8:	70c3      	strb	r3, [r0, #3]
    2eda:	2320      	movs	r3, #32
	dst[0] = val;
    2edc:	7082      	strb	r2, [r0, #2]
    2ede:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2ee0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2ee2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2ee4:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2ee6:	4621      	mov	r1, r4
    2ee8:	f640 4001 	movw	r0, #3073	; 0xc01
    2eec:	f7ff fab0 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    2ef0:	4604      	mov	r4, r0
    2ef2:	2800      	cmp	r0, #0
    2ef4:	f47f ae9e 	bne.w	2c34 <bt_init+0x1d4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2ef8:	4601      	mov	r1, r0
    2efa:	aa0c      	add	r2, sp, #48	; 0x30
    2efc:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2f00:	f7ff faa6 	bl	2450 <bt_hci_cmd_send_sync>
    2f04:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2fa8 <bt_init+0x548>
	if (err) {
    2f08:	2800      	cmp	r0, #0
    2f0a:	f000 80a4 	beq.w	3056 <bt_init+0x5f6>
		BT_WARN("Vendor HCI extensions not available");
    2f0e:	f8cd 8004 	str.w	r8, [sp, #4]
    2f12:	f8cd 8000 	str.w	r8, [sp]
    2f16:	6834      	ldr	r4, [r6, #0]
    2f18:	4b27      	ldr	r3, [pc, #156]	; (2fb8 <bt_init+0x558>)
    2f1a:	4a28      	ldr	r2, [pc, #160]	; (2fbc <bt_init+0x55c>)
    2f1c:	491c      	ldr	r1, [pc, #112]	; (2f90 <bt_init+0x530>)
    2f1e:	4828      	ldr	r0, [pc, #160]	; (2fc0 <bt_init+0x560>)
		BT_WARN("Failed to read supported vendor commands");
    2f20:	47a0      	blx	r4
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2f22:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2f24:	2207      	movs	r2, #7
    2f26:	a90c      	add	r1, sp, #48	; 0x30
    2f28:	4826      	ldr	r0, [pc, #152]	; (2fc4 <bt_init+0x564>)
    2f2a:	930c      	str	r3, [sp, #48]	; 0x30
    2f2c:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2f30:	f7fe ff89 	bl	1e46 <memcmp>
    2f34:	2800      	cmp	r0, #0
    2f36:	f040 8111 	bne.w	315c <bt_init+0x6fc>
		BT_DBG("No public address. Trying to set static random.");
    2f3a:	6834      	ldr	r4, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2f3c:	f012 f932 	bl	151a4 <_impl_k_current_get>
    2f40:	4b21      	ldr	r3, [pc, #132]	; (2fc8 <bt_init+0x568>)
    2f42:	9001      	str	r0, [sp, #4]
    2f44:	f8cd 8008 	str.w	r8, [sp, #8]
    2f48:	f8cd 8000 	str.w	r8, [sp]
    2f4c:	4a0f      	ldr	r2, [pc, #60]	; (2f8c <bt_init+0x52c>)
    2f4e:	4910      	ldr	r1, [pc, #64]	; (2f90 <bt_init+0x530>)
    2f50:	481e      	ldr	r0, [pc, #120]	; (2fcc <bt_init+0x56c>)
    2f52:	47a0      	blx	r4
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2f54:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2f58:	07db      	lsls	r3, r3, #31
    2f5a:	f100 8120 	bmi.w	319e <bt_init+0x73e>
		BT_WARN("Read Static Addresses command not available");
    2f5e:	f8cd 8004 	str.w	r8, [sp, #4]
    2f62:	f8cd 8000 	str.w	r8, [sp]
    2f66:	6834      	ldr	r4, [r6, #0]
    2f68:	4b19      	ldr	r3, [pc, #100]	; (2fd0 <bt_init+0x570>)
    2f6a:	4a14      	ldr	r2, [pc, #80]	; (2fbc <bt_init+0x55c>)
    2f6c:	4908      	ldr	r1, [pc, #32]	; (2f90 <bt_init+0x530>)
    2f6e:	4819      	ldr	r0, [pc, #100]	; (2fd4 <bt_init+0x574>)
    2f70:	e125      	b.n	31be <bt_init+0x75e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2f72:	2102      	movs	r1, #2
    2f74:	f640 406d 	movw	r0, #3181	; 0xc6d
    2f78:	f7ff f9fc 	bl	2374 <bt_hci_cmd_create>
		if (!buf) {
    2f7c:	4680      	mov	r8, r0
    2f7e:	bb58      	cbnz	r0, 2fd8 <bt_init+0x578>
		return -ENOBUFS;
    2f80:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2f84:	e656      	b.n	2c34 <bt_init+0x1d4>
    2f86:	bf00      	nop
    2f88:	00016cbf 	.word	0x00016cbf
    2f8c:	0001697a 	.word	0x0001697a
    2f90:	00017a29 	.word	0x00017a29
    2f94:	00017111 	.word	0x00017111
    2f98:	20003ad8 	.word	0x20003ad8
    2f9c:	00016cf3 	.word	0x00016cf3
    2fa0:	00017164 	.word	0x00017164
    2fa4:	20003aec 	.word	0x20003aec
    2fa8:	000161ba 	.word	0x000161ba
    2fac:	00016d4e 	.word	0x00016d4e
    2fb0:	00016cd9 	.word	0x00016cd9
    2fb4:	00017198 	.word	0x00017198
    2fb8:	00016da5 	.word	0x00016da5
    2fbc:	00017a64 	.word	0x00017a64
    2fc0:	000171d0 	.word	0x000171d0
    2fc4:	20003a60 	.word	0x20003a60
    2fc8:	00016db1 	.word	0x00016db1
    2fcc:	00017304 	.word	0x00017304
    2fd0:	00016d86 	.word	0x00016d86
    2fd4:	000173b2 	.word	0x000173b2
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2fd8:	2102      	movs	r1, #2
    2fda:	3008      	adds	r0, #8
    2fdc:	f010 ff36 	bl	13e4c <net_buf_simple_add>
		cp_le->le = 0x01;
    2fe0:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2fe2:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2fe4:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2fe6:	4622      	mov	r2, r4
    2fe8:	4641      	mov	r1, r8
    2fea:	f640 406d 	movw	r0, #3181	; 0xc6d
    2fee:	f7ff fa2f 	bl	2450 <bt_hci_cmd_send_sync>
		if (err) {
    2ff2:	4604      	mov	r4, r0
    2ff4:	2800      	cmp	r0, #0
    2ff6:	f43f aea9 	beq.w	2d4c <bt_init+0x2ec>
    2ffa:	e61b      	b.n	2c34 <bt_init+0x1d4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2ffc:	aa0c      	add	r2, sp, #48	; 0x30
    2ffe:	2100      	movs	r1, #0
    3000:	f242 002f 	movw	r0, #8239	; 0x202f
    3004:	f7ff fa24 	bl	2450 <bt_hci_cmd_send_sync>
		if (err) {
    3008:	4604      	mov	r4, r0
    300a:	2800      	cmp	r0, #0
    300c:	f47f ae12 	bne.w	2c34 <bt_init+0x1d4>
		rp = (void *)rsp->data;
    3010:	980c      	ldr	r0, [sp, #48]	; 0x30
    3012:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    3014:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    3018:	f8b3 9003 	ldrh.w	r9, [r3, #3]
		net_buf_unref(rsp);
    301c:	f010 fee4 	bl	13de8 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    3020:	2104      	movs	r1, #4
    3022:	f242 0024 	movw	r0, #8228	; 0x2024
    3026:	f7ff f9a5 	bl	2374 <bt_hci_cmd_create>
		if (!buf) {
    302a:	4680      	mov	r8, r0
    302c:	2800      	cmp	r0, #0
    302e:	d0a7      	beq.n	2f80 <bt_init+0x520>
		cp = net_buf_add(buf, sizeof(*cp));
    3030:	2104      	movs	r1, #4
    3032:	3008      	adds	r0, #8
    3034:	f010 ff0a 	bl	13e4c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    3038:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    303a:	f8a0 a000 	strh.w	sl, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    303e:	f8a0 9002 	strh.w	r9, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    3042:	4641      	mov	r1, r8
    3044:	f242 0024 	movw	r0, #8228	; 0x2024
    3048:	f7ff fa02 	bl	2450 <bt_hci_cmd_send_sync>
		if (err) {
    304c:	4604      	mov	r4, r0
    304e:	2800      	cmp	r0, #0
    3050:	f43f aeab 	beq.w	2daa <bt_init+0x34a>
    3054:	e5ee      	b.n	2c34 <bt_init+0x1d4>
	rp.info = (void *)rsp->data;
    3056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    3058:	f8d6 9000 	ldr.w	r9, [r6]
	rp.info = (void *)rsp->data;
    305c:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    305e:	4979      	ldr	r1, [pc, #484]	; (3244 <bt_init+0x7e4>)
    3060:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    3064:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    3066:	2b03      	cmp	r3, #3
		return plat_str[platform];
    3068:	bf96      	itet	ls
    306a:	4a77      	ldrls	r2, [pc, #476]	; (3248 <bt_init+0x7e8>)
	return "unknown";
    306c:	4a77      	ldrhi	r2, [pc, #476]	; (324c <bt_init+0x7ec>)
		return plat_str[platform];
    306e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    3072:	9201      	str	r2, [sp, #4]
    3074:	4b76      	ldr	r3, [pc, #472]	; (3250 <bt_init+0x7f0>)
    3076:	4a77      	ldr	r2, [pc, #476]	; (3254 <bt_init+0x7f4>)
    3078:	f8cd 800c 	str.w	r8, [sp, #12]
    307c:	f8cd 8000 	str.w	r8, [sp]
    3080:	4875      	ldr	r0, [pc, #468]	; (3258 <bt_init+0x7f8>)
    3082:	47c8      	blx	r9
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    3084:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    3088:	f8d6 9000 	ldr.w	r9, [r6]
    308c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    3090:	2b02      	cmp	r3, #2
    3092:	d13d      	bne.n	3110 <bt_init+0x6b0>
	if (variant < ARRAY_SIZE(nordic_str)) {
    3094:	2a02      	cmp	r2, #2
    3096:	d83b      	bhi.n	3110 <bt_init+0x6b0>
		return nordic_str[variant];
    3098:	4b70      	ldr	r3, [pc, #448]	; (325c <bt_init+0x7fc>)
    309a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    309e:	9202      	str	r2, [sp, #8]
    30a0:	9301      	str	r3, [sp, #4]
    30a2:	4a6c      	ldr	r2, [pc, #432]	; (3254 <bt_init+0x7f4>)
    30a4:	4b6a      	ldr	r3, [pc, #424]	; (3250 <bt_init+0x7f0>)
    30a6:	4967      	ldr	r1, [pc, #412]	; (3244 <bt_init+0x7e4>)
    30a8:	486d      	ldr	r0, [pc, #436]	; (3260 <bt_init+0x800>)
    30aa:	f8cd 800c 	str.w	r8, [sp, #12]
    30ae:	f8cd 8000 	str.w	r8, [sp]
    30b2:	47c8      	blx	r9
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    30b4:	7963      	ldrb	r3, [r4, #5]
    30b6:	f8d6 9000 	ldr.w	r9, [r6]
    30ba:	9706      	str	r7, [sp, #24]
    30bc:	f8d4 1009 	ldr.w	r1, [r4, #9]
    30c0:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    30c2:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    30c4:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    30c8:	bf98      	it	ls
    30ca:	4a66      	ldrls	r2, [pc, #408]	; (3264 <bt_init+0x804>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    30cc:	9104      	str	r1, [sp, #16]
    30ce:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    30d0:	bf94      	ite	ls
    30d2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    30d6:	4a5d      	ldrhi	r2, [pc, #372]	; (324c <bt_init+0x7ec>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    30d8:	9103      	str	r1, [sp, #12]
    30da:	9302      	str	r3, [sp, #8]
    30dc:	4959      	ldr	r1, [pc, #356]	; (3244 <bt_init+0x7e4>)
    30de:	4b5c      	ldr	r3, [pc, #368]	; (3250 <bt_init+0x7f0>)
    30e0:	9201      	str	r2, [sp, #4]
    30e2:	4861      	ldr	r0, [pc, #388]	; (3268 <bt_init+0x808>)
    30e4:	4a5b      	ldr	r2, [pc, #364]	; (3254 <bt_init+0x7f4>)
    30e6:	9700      	str	r7, [sp, #0]
    30e8:	47c8      	blx	r9
	net_buf_unref(rsp);
    30ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    30ec:	f010 fe7c 	bl	13de8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    30f0:	aa0c      	add	r2, sp, #48	; 0x30
    30f2:	2100      	movs	r1, #0
    30f4:	f64f 4002 	movw	r0, #64514	; 0xfc02
    30f8:	f7ff f9aa 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    30fc:	4604      	mov	r4, r0
    30fe:	b148      	cbz	r0, 3114 <bt_init+0x6b4>
		BT_WARN("Failed to read supported vendor features");
    3100:	9701      	str	r7, [sp, #4]
    3102:	9700      	str	r7, [sp, #0]
    3104:	6834      	ldr	r4, [r6, #0]
    3106:	4b52      	ldr	r3, [pc, #328]	; (3250 <bt_init+0x7f0>)
    3108:	4a58      	ldr	r2, [pc, #352]	; (326c <bt_init+0x80c>)
    310a:	494e      	ldr	r1, [pc, #312]	; (3244 <bt_init+0x7e4>)
    310c:	4858      	ldr	r0, [pc, #352]	; (3270 <bt_init+0x810>)
    310e:	e707      	b.n	2f20 <bt_init+0x4c0>
		return "unknown";
    3110:	4b4e      	ldr	r3, [pc, #312]	; (324c <bt_init+0x7ec>)
    3112:	e7c4      	b.n	309e <bt_init+0x63e>
	rp.cmds = (void *)rsp->data;
    3114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    3116:	4857      	ldr	r0, [pc, #348]	; (3274 <bt_init+0x814>)
    3118:	6899      	ldr	r1, [r3, #8]
    311a:	2202      	movs	r2, #2
    311c:	3101      	adds	r1, #1
    311e:	f7fe fea7 	bl	1e70 <memcpy>
	net_buf_unref(rsp);
    3122:	980c      	ldr	r0, [sp, #48]	; 0x30
    3124:	f010 fe60 	bl	13de8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    3128:	aa0c      	add	r2, sp, #48	; 0x30
    312a:	4621      	mov	r1, r4
    312c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    3130:	f7ff f98e 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    3134:	b138      	cbz	r0, 3146 <bt_init+0x6e6>
		BT_WARN("Failed to read supported vendor commands");
    3136:	9701      	str	r7, [sp, #4]
    3138:	9700      	str	r7, [sp, #0]
    313a:	6834      	ldr	r4, [r6, #0]
    313c:	4b44      	ldr	r3, [pc, #272]	; (3250 <bt_init+0x7f0>)
    313e:	4a4b      	ldr	r2, [pc, #300]	; (326c <bt_init+0x80c>)
    3140:	4940      	ldr	r1, [pc, #256]	; (3244 <bt_init+0x7e4>)
    3142:	484d      	ldr	r0, [pc, #308]	; (3278 <bt_init+0x818>)
    3144:	e6ec      	b.n	2f20 <bt_init+0x4c0>
	rp.feat = (void *)rsp->data;
    3146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    3148:	484c      	ldr	r0, [pc, #304]	; (327c <bt_init+0x81c>)
    314a:	6899      	ldr	r1, [r3, #8]
    314c:	2201      	movs	r2, #1
    314e:	4411      	add	r1, r2
    3150:	f7fe fe8e 	bl	1e70 <memcpy>
	net_buf_unref(rsp);
    3154:	980c      	ldr	r0, [sp, #48]	; 0x30
    3156:	f010 fe47 	bl	13de8 <net_buf_unref>
    315a:	e6e2      	b.n	2f22 <bt_init+0x4c2>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    315c:	4b48      	ldr	r3, [pc, #288]	; (3280 <bt_init+0x820>)
    315e:	6818      	ldr	r0, [r3, #0]
    3160:	889a      	ldrh	r2, [r3, #4]
    3162:	900a      	str	r0, [sp, #40]	; 0x28
    3164:	799b      	ldrb	r3, [r3, #6]
    3166:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    316a:	a90a      	add	r1, sp, #40	; 0x28
    316c:	2207      	movs	r2, #7
    316e:	4845      	ldr	r0, [pc, #276]	; (3284 <bt_init+0x824>)
    3170:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    3174:	f7fe fe67 	bl	1e46 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    3178:	2800      	cmp	r0, #0
    317a:	f43f aede 	beq.w	2f3a <bt_init+0x4da>
		bt_dev_show_info();
    317e:	f7ff fb1b 	bl	27b8 <bt_dev_show_info>
		err = bt_conn_init();
    3182:	f002 fae7 	bl	5754 <bt_conn_init>
		if (err) {
    3186:	4604      	mov	r4, r0
    3188:	2800      	cmp	r0, #0
    318a:	f47f ad53 	bne.w	2c34 <bt_init+0x1d4>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    318e:	2102      	movs	r1, #2
    3190:	483d      	ldr	r0, [pc, #244]	; (3288 <bt_init+0x828>)
    3192:	f7ff f836 	bl	2202 <atomic_or>
	bt_le_scan_update(false);
    3196:	4620      	mov	r0, r4
    3198:	f7ff fc30 	bl	29fc <bt_le_scan_update>
    319c:	e54a      	b.n	2c34 <bt_init+0x1d4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    319e:	aa09      	add	r2, sp, #36	; 0x24
    31a0:	2100      	movs	r1, #0
    31a2:	f64f 4009 	movw	r0, #64521	; 0xfc09
    31a6:	f7ff f953 	bl	2450 <bt_hci_cmd_send_sync>
		if (err) {
    31aa:	b150      	cbz	r0, 31c2 <bt_init+0x762>
			BT_WARN("Failed to read static addresses");
    31ac:	f8cd 8004 	str.w	r8, [sp, #4]
    31b0:	f8cd 8000 	str.w	r8, [sp]
    31b4:	6834      	ldr	r4, [r6, #0]
    31b6:	4b35      	ldr	r3, [pc, #212]	; (328c <bt_init+0x82c>)
    31b8:	4a2c      	ldr	r2, [pc, #176]	; (326c <bt_init+0x80c>)
    31ba:	4922      	ldr	r1, [pc, #136]	; (3244 <bt_init+0x7e4>)
    31bc:	4834      	ldr	r0, [pc, #208]	; (3290 <bt_init+0x830>)
		BT_WARN("Read Static Addresses command not available");
    31be:	47a0      	blx	r4
    31c0:	e02a      	b.n	3218 <bt_init+0x7b8>
		rp = (void *)rsp->data;
    31c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31c4:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    31c6:	784b      	ldrb	r3, [r1, #1]
    31c8:	b1cb      	cbz	r3, 31fe <bt_init+0x79e>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    31ca:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    31cc:	2206      	movs	r2, #6
    31ce:	3102      	adds	r1, #2
    31d0:	4830      	ldr	r0, [pc, #192]	; (3294 <bt_init+0x834>)
    31d2:	702b      	strb	r3, [r5, #0]
    31d4:	f7fe fe4c 	bl	1e70 <memcpy>
			net_buf_unref(rsp);
    31d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    31da:	f010 fe05 	bl	13de8 <net_buf_unref>
		return bt_set_static_addr();
    31de:	f7ff fab7 	bl	2750 <bt_set_static_addr>
    31e2:	4604      	mov	r4, r0
		if (err) {
    31e4:	2800      	cmp	r0, #0
    31e6:	d0ca      	beq.n	317e <bt_init+0x71e>
			BT_ERR("Unable to set identity address");
    31e8:	f8cd 8004 	str.w	r8, [sp, #4]
    31ec:	f8cd 8000 	str.w	r8, [sp]
    31f0:	6835      	ldr	r5, [r6, #0]
    31f2:	4b29      	ldr	r3, [pc, #164]	; (3298 <bt_init+0x838>)
    31f4:	4a29      	ldr	r2, [pc, #164]	; (329c <bt_init+0x83c>)
    31f6:	4913      	ldr	r1, [pc, #76]	; (3244 <bt_init+0x7e4>)
    31f8:	4829      	ldr	r0, [pc, #164]	; (32a0 <bt_init+0x840>)
    31fa:	47a8      	blx	r5
    31fc:	e51a      	b.n	2c34 <bt_init+0x1d4>
		BT_WARN("No static addresses stored in controller");
    31fe:	f8cd 8004 	str.w	r8, [sp, #4]
    3202:	f8cd 8000 	str.w	r8, [sp]
    3206:	4827      	ldr	r0, [pc, #156]	; (32a4 <bt_init+0x844>)
    3208:	6834      	ldr	r4, [r6, #0]
    320a:	4b20      	ldr	r3, [pc, #128]	; (328c <bt_init+0x82c>)
    320c:	4a17      	ldr	r2, [pc, #92]	; (326c <bt_init+0x80c>)
    320e:	490d      	ldr	r1, [pc, #52]	; (3244 <bt_init+0x7e4>)
    3210:	47a0      	blx	r4
		net_buf_unref(rsp);
    3212:	9809      	ldr	r0, [sp, #36]	; 0x24
    3214:	f010 fde8 	bl	13de8 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    3218:	481a      	ldr	r0, [pc, #104]	; (3284 <bt_init+0x824>)
    321a:	f7ff fa8b 	bl	2734 <bt_addr_le_create_static>
		if (err) {
    321e:	4604      	mov	r4, r0
    3220:	2800      	cmp	r0, #0
    3222:	d1e1      	bne.n	31e8 <bt_init+0x788>
		BT_WARN("Using temporary static random address %s",
    3224:	481b      	ldr	r0, [pc, #108]	; (3294 <bt_init+0x834>)
    3226:	6834      	ldr	r4, [r6, #0]
    3228:	f7fe fea8 	bl	1f7c <bt_addr_str>
    322c:	f8cd 8008 	str.w	r8, [sp, #8]
    3230:	9001      	str	r0, [sp, #4]
    3232:	f8cd 8000 	str.w	r8, [sp]
    3236:	4b15      	ldr	r3, [pc, #84]	; (328c <bt_init+0x82c>)
    3238:	4a0c      	ldr	r2, [pc, #48]	; (326c <bt_init+0x80c>)
    323a:	4902      	ldr	r1, [pc, #8]	; (3244 <bt_init+0x7e4>)
    323c:	481a      	ldr	r0, [pc, #104]	; (32a8 <bt_init+0x848>)
    323e:	47a0      	blx	r4
    3240:	e7cd      	b.n	31de <bt_init+0x77e>
    3242:	bf00      	nop
    3244:	00017a29 	.word	0x00017a29
    3248:	00017d58 	.word	0x00017d58
    324c:	00017e60 	.word	0x00017e60
    3250:	00016da5 	.word	0x00016da5
    3254:	00016e7b 	.word	0x00016e7b
    3258:	00017204 	.word	0x00017204
    325c:	00017d4c 	.word	0x00017d4c
    3260:	0001722d 	.word	0x0001722d
    3264:	00017e50 	.word	0x00017e50
    3268:	00017255 	.word	0x00017255
    326c:	00017a64 	.word	0x00017a64
    3270:	00017292 	.word	0x00017292
    3274:	20003abf 	.word	0x20003abf
    3278:	000172cb 	.word	0x000172cb
    327c:	20003abe 	.word	0x20003abe
    3280:	00015fdc 	.word	0x00015fdc
    3284:	20003a60 	.word	0x20003a60
    3288:	20003ad0 	.word	0x20003ad0
    328c:	00016d86 	.word	0x00016d86
    3290:	00017349 	.word	0x00017349
    3294:	20003a61 	.word	0x20003a61
    3298:	00016db1 	.word	0x00016db1
    329c:	000179e1 	.word	0x000179e1
    32a0:	00017427 	.word	0x00017427
    32a4:	00017379 	.word	0x00017379
    32a8:	000173ee 	.word	0x000173ee

000032ac <init_work>:

static void init_work(struct k_work *work)
{
    32ac:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    32ae:	f7ff fbd7 	bl	2a60 <bt_init>
	if (ready_cb) {
    32b2:	4b03      	ldr	r3, [pc, #12]	; (32c0 <init_work+0x14>)
    32b4:	681b      	ldr	r3, [r3, #0]
    32b6:	b113      	cbz	r3, 32be <init_work+0x12>
		ready_cb(err);
	}
}
    32b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    32bc:	4718      	bx	r3
    32be:	bd10      	pop	{r4, pc}
    32c0:	200002d4 	.word	0x200002d4

000032c4 <hci_le_set_phy.isra.27>:
static int hci_le_set_phy(struct bt_conn *conn)
    32c4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    32c6:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    32c8:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    32ca:	f242 0032 	movw	r0, #8242	; 0x2032
    32ce:	f7ff f851 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    32d2:	4605      	mov	r5, r0
    32d4:	b198      	cbz	r0, 32fe <hci_le_set_phy.isra.27+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    32d6:	2107      	movs	r1, #7
    32d8:	3008      	adds	r0, #8
    32da:	f010 fdb7 	bl	13e4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    32de:	8823      	ldrh	r3, [r4, #0]
    32e0:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    32e2:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    32e4:	2302      	movs	r3, #2
	cp->all_phys = 0;
    32e6:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    32e8:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    32ea:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    32ec:	7144      	strb	r4, [r0, #5]
    32ee:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    32f0:	4629      	mov	r1, r5
    32f2:	f242 0032 	movw	r0, #8242	; 0x2032
    32f6:	f7ff fae1 	bl	28bc <bt_hci_cmd_send>
	return 0;
    32fa:	4620      	mov	r0, r4
    32fc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    32fe:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3302:	bd38      	pop	{r3, r4, r5, pc}

00003304 <hci_le_set_data_len.isra.28>:
static int hci_le_set_data_len(struct bt_conn *conn)
    3304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3306:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    3308:	aa01      	add	r2, sp, #4
    330a:	2100      	movs	r1, #0
    330c:	f242 002f 	movw	r0, #8239	; 0x202f
    3310:	f7ff f89e 	bl	2450 <bt_hci_cmd_send_sync>
	if (err) {
    3314:	b9d8      	cbnz	r0, 334e <hci_le_set_data_len.isra.28+0x4a>
	rp = (void *)rsp->data;
    3316:	9801      	ldr	r0, [sp, #4]
    3318:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    331a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    331e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    3322:	f010 fd61 	bl	13de8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    3326:	2106      	movs	r1, #6
    3328:	f242 0022 	movw	r0, #8226	; 0x2022
    332c:	f7ff f822 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    3330:	4604      	mov	r4, r0
    3332:	b170      	cbz	r0, 3352 <hci_le_set_data_len.isra.28+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    3334:	2106      	movs	r1, #6
    3336:	3008      	adds	r0, #8
    3338:	f010 fd88 	bl	13e4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    333c:	883b      	ldrh	r3, [r7, #0]
    333e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    3340:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    3342:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    3344:	4621      	mov	r1, r4
    3346:	f242 0022 	movw	r0, #8226	; 0x2022
    334a:	f7ff fab7 	bl	28bc <bt_hci_cmd_send>
}
    334e:	b003      	add	sp, #12
    3350:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    3352:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3356:	e7fa      	b.n	334e <hci_le_set_data_len.isra.28+0x4a>

00003358 <le_enh_conn_complete>:
{
    3358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    335c:	4f74      	ldr	r7, [pc, #464]	; (3530 <le_enh_conn_complete+0x1d8>)
	u16_t handle = sys_le16_to_cpu(evt->handle);
    335e:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3362:	f8d7 a000 	ldr.w	sl, [r7]
    3366:	4e73      	ldr	r6, [pc, #460]	; (3534 <le_enh_conn_complete+0x1dc>)
{
    3368:	b08f      	sub	sp, #60	; 0x3c
    336a:	4605      	mov	r5, r0
    336c:	f011 ff1a 	bl	151a4 <_impl_k_current_get>
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3370:	1d2c      	adds	r4, r5, #4
    3372:	782b      	ldrb	r3, [r5, #0]
    3374:	78ea      	ldrb	r2, [r5, #3]
    3376:	9309      	str	r3, [sp, #36]	; 0x24
    3378:	4683      	mov	fp, r0
    337a:	4620      	mov	r0, r4
    337c:	9208      	str	r2, [sp, #32]
    337e:	f7fe fe23 	bl	1fc8 <bt_addr_le_str>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3382:	fa1f f988 	uxth.w	r9, r8
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3386:	9a08      	ldr	r2, [sp, #32]
    3388:	9b09      	ldr	r3, [sp, #36]	; 0x24
    338a:	9005      	str	r0, [sp, #20]
    338c:	9204      	str	r2, [sp, #16]
    338e:	9302      	str	r3, [sp, #8]
    3390:	9606      	str	r6, [sp, #24]
    3392:	4b69      	ldr	r3, [pc, #420]	; (3538 <le_enh_conn_complete+0x1e0>)
    3394:	f8cd 900c 	str.w	r9, [sp, #12]
    3398:	e88d 0840 	stmia.w	sp, {r6, fp}
    339c:	4a67      	ldr	r2, [pc, #412]	; (353c <le_enh_conn_complete+0x1e4>)
    339e:	4968      	ldr	r1, [pc, #416]	; (3540 <le_enh_conn_complete+0x1e8>)
    33a0:	4868      	ldr	r0, [pc, #416]	; (3544 <le_enh_conn_complete+0x1ec>)
    33a2:	47d0      	blx	sl
	if (evt->status) {
    33a4:	782b      	ldrb	r3, [r5, #0]
    33a6:	b183      	cbz	r3, 33ca <le_enh_conn_complete+0x72>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    33a8:	2102      	movs	r1, #2
    33aa:	2000      	movs	r0, #0
    33ac:	f001 fd20 	bl	4df0 <bt_conn_lookup_state_le>
		if (!conn) {
    33b0:	4604      	mov	r4, r0
    33b2:	b138      	cbz	r0, 33c4 <le_enh_conn_complete+0x6c>
		conn->err = evt->status;
    33b4:	782b      	ldrb	r3, [r5, #0]
    33b6:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    33b8:	2100      	movs	r1, #0
    33ba:	f001 fe0b 	bl	4fd4 <bt_conn_set_state>
		bt_conn_unref(conn);
    33be:	4620      	mov	r0, r4
    33c0:	f001 fd34 	bl	4e2c <bt_conn_unref>
}
    33c4:	b00f      	add	sp, #60	; 0x3c
    33c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    33ca:	4621      	mov	r1, r4
    33cc:	a80c      	add	r0, sp, #48	; 0x30
    33ce:	f7fe ff15 	bl	21fc <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    33d2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    33d6:	3b02      	subs	r3, #2
    33d8:	b2db      	uxtb	r3, r3
    33da:	2b01      	cmp	r3, #1
    33dc:	d828      	bhi.n	3430 <le_enh_conn_complete+0xd8>
    33de:	2206      	movs	r2, #6
    33e0:	f105 0111 	add.w	r1, r5, #17
    33e4:	f10d 0029 	add.w	r0, sp, #41	; 0x29
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    33e8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    33ec:	f7fe fd40 	bl	1e70 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    33f0:	2301      	movs	r3, #1
    33f2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    33f6:	2102      	movs	r1, #2
    33f8:	a80c      	add	r0, sp, #48	; 0x30
    33fa:	f001 fcf9 	bl	4df0 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    33fe:	78eb      	ldrb	r3, [r5, #3]
    3400:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    3402:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3404:	d109      	bne.n	341a <le_enh_conn_complete+0xc2>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3406:	f06f 0140 	mvn.w	r1, #64	; 0x40
    340a:	484f      	ldr	r0, [pc, #316]	; (3548 <le_enh_conn_complete+0x1f0>)
    340c:	f7fe ff0a 	bl	2224 <atomic_and>
		if (!conn) {
    3410:	b99c      	cbnz	r4, 343a <le_enh_conn_complete+0xe2>
			conn = bt_conn_add_le(&id_addr);
    3412:	a80c      	add	r0, sp, #48	; 0x30
    3414:	f001 fc3c 	bl	4c90 <bt_conn_add_le>
    3418:	4604      	mov	r4, r0
	if (!conn) {
    341a:	b974      	cbnz	r4, 343a <le_enh_conn_complete+0xe2>
		BT_ERR("Unable to add new conn for handle %u", handle);
    341c:	e88d 0240 	stmia.w	sp, {r6, r9}
    3420:	9602      	str	r6, [sp, #8]
    3422:	683c      	ldr	r4, [r7, #0]
    3424:	4b44      	ldr	r3, [pc, #272]	; (3538 <le_enh_conn_complete+0x1e0>)
    3426:	4a49      	ldr	r2, [pc, #292]	; (354c <le_enh_conn_complete+0x1f4>)
    3428:	4945      	ldr	r1, [pc, #276]	; (3540 <le_enh_conn_complete+0x1e8>)
    342a:	4849      	ldr	r0, [pc, #292]	; (3550 <le_enh_conn_complete+0x1f8>)
    342c:	47a0      	blx	r4
		return;
    342e:	e7c9      	b.n	33c4 <le_enh_conn_complete+0x6c>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    3430:	4621      	mov	r1, r4
    3432:	a80a      	add	r0, sp, #40	; 0x28
    3434:	f7fe fee2 	bl	21fc <bt_addr_le_copy>
    3438:	e7dd      	b.n	33f6 <le_enh_conn_complete+0x9e>
	conn->handle   = handle;
    343a:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    343c:	a90c      	add	r1, sp, #48	; 0x30
	conn->handle   = handle;
    343e:	f820 8b44 	strh.w	r8, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3442:	f7fe fedb 	bl	21fc <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    3446:	7e2a      	ldrb	r2, [r5, #24]
    3448:	7deb      	ldrb	r3, [r5, #23]
    344a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    344e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3452:	7eaa      	ldrb	r2, [r5, #26]
    3454:	7e6b      	ldrb	r3, [r5, #25]
    3456:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    345a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    345e:	7eeb      	ldrb	r3, [r5, #27]
    3460:	7f2a      	ldrb	r2, [r5, #28]
    3462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3466:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    346a:	78ee      	ldrb	r6, [r5, #3]
    346c:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    346e:	2e01      	cmp	r6, #1
    3470:	d11a      	bne.n	34a8 <le_enh_conn_complete+0x150>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3472:	4f38      	ldr	r7, [pc, #224]	; (3554 <le_enh_conn_complete+0x1fc>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    3474:	a90a      	add	r1, sp, #40	; 0x28
    3476:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    347a:	f7fe febf 	bl	21fc <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    347e:	4639      	mov	r1, r7
    3480:	f104 0052 	add.w	r0, r4, #82	; 0x52
    3484:	f7fe feba 	bl	21fc <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3488:	2107      	movs	r1, #7
    348a:	f107 0070 	add.w	r0, r7, #112	; 0x70
    348e:	f7fe ff63 	bl	2358 <atomic_test_bit>
    3492:	b148      	cbz	r0, 34a8 <le_enh_conn_complete+0x150>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    3494:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    3498:	2200      	movs	r2, #0
    349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    349e:	4313      	orrs	r3, r2
    34a0:	d002      	beq.n	34a8 <le_enh_conn_complete+0x150>
			set_advertise_enable(true);
    34a2:	4630      	mov	r0, r6
    34a4:	f7ff f8fc 	bl	26a0 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    34a8:	2103      	movs	r1, #3
    34aa:	4620      	mov	r0, r4
    34ac:	f001 fd92 	bl	4fd4 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    34b0:	7a63      	ldrb	r3, [r4, #9]
    34b2:	2b03      	cmp	r3, #3
    34b4:	d118      	bne.n	34e8 <le_enh_conn_complete+0x190>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    34b6:	78eb      	ldrb	r3, [r5, #3]
    34b8:	b123      	cbz	r3, 34c4 <le_enh_conn_complete+0x16c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    34ba:	4b26      	ldr	r3, [pc, #152]	; (3554 <le_enh_conn_complete+0x1fc>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    34bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    34c0:	0719      	lsls	r1, r3, #28
    34c2:	d518      	bpl.n	34f6 <le_enh_conn_complete+0x19e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    34c4:	2102      	movs	r1, #2
    34c6:	f242 0016 	movw	r0, #8214	; 0x2016
    34ca:	f7fe ff53 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    34ce:	4605      	mov	r5, r0
    34d0:	b188      	cbz	r0, 34f6 <le_enh_conn_complete+0x19e>
	cp = net_buf_add(buf, sizeof(*cp));
    34d2:	2102      	movs	r1, #2
    34d4:	3008      	adds	r0, #8
    34d6:	f010 fcb9 	bl	13e4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    34da:	8823      	ldrh	r3, [r4, #0]
    34dc:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    34de:	4629      	mov	r1, r5
    34e0:	f242 0016 	movw	r0, #8214	; 0x2016
    34e4:	f7ff f9ea 	bl	28bc <bt_hci_cmd_send>
	bt_conn_unref(conn);
    34e8:	4620      	mov	r0, r4
    34ea:	f001 fc9f 	bl	4e2c <bt_conn_unref>
	bt_le_scan_update(false);
    34ee:	2000      	movs	r0, #0
    34f0:	f7ff fa84 	bl	29fc <bt_le_scan_update>
    34f4:	e766      	b.n	33c4 <le_enh_conn_complete+0x6c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    34f6:	4d17      	ldr	r5, [pc, #92]	; (3554 <le_enh_conn_complete+0x1fc>)
    34f8:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    34fc:	07d2      	lsls	r2, r2, #31
    34fe:	d508      	bpl.n	3512 <le_enh_conn_complete+0x1ba>
		err = hci_le_set_phy(conn);
    3500:	4620      	mov	r0, r4
    3502:	f7ff fedf 	bl	32c4 <hci_le_set_phy.isra.27>
		if (!err) {
    3506:	b920      	cbnz	r0, 3512 <le_enh_conn_complete+0x1ba>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3508:	2180      	movs	r1, #128	; 0x80
    350a:	1d20      	adds	r0, r4, #4
    350c:	f7fe fe79 	bl	2202 <atomic_or>
    3510:	e7ea      	b.n	34e8 <le_enh_conn_complete+0x190>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    3512:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3516:	069b      	lsls	r3, r3, #26
    3518:	d506      	bpl.n	3528 <le_enh_conn_complete+0x1d0>
		err = hci_le_set_data_len(conn);
    351a:	4620      	mov	r0, r4
    351c:	f7ff fef2 	bl	3304 <hci_le_set_data_len.isra.28>
		if (!err) {
    3520:	b910      	cbnz	r0, 3528 <le_enh_conn_complete+0x1d0>
    3522:	f44f 7180 	mov.w	r1, #256	; 0x100
    3526:	e7f0      	b.n	350a <le_enh_conn_complete+0x1b2>
	update_conn_param(conn);
    3528:	4620      	mov	r0, r4
    352a:	f7fe fe8d 	bl	2248 <update_conn_param>
    352e:	e7db      	b.n	34e8 <le_enh_conn_complete+0x190>
    3530:	20003a5c 	.word	0x20003a5c
    3534:	000161ba 	.word	0x000161ba
    3538:	00016b46 	.word	0x00016b46
    353c:	0001697a 	.word	0x0001697a
    3540:	00017a29 	.word	0x00017a29
    3544:	00017cc1 	.word	0x00017cc1
    3548:	20003ad0 	.word	0x20003ad0
    354c:	000179e1 	.word	0x000179e1
    3550:	00017cf5 	.word	0x00017cf5
    3554:	20003a60 	.word	0x20003a60

00003558 <le_conn_param_neg_reply>:
{
    3558:	b570      	push	{r4, r5, r6, lr}
    355a:	4606      	mov	r6, r0
    355c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    355e:	f242 0021 	movw	r0, #8225	; 0x2021
    3562:	2103      	movs	r1, #3
    3564:	f7fe ff06 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    3568:	4604      	mov	r4, r0
    356a:	b160      	cbz	r0, 3586 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    356c:	2103      	movs	r1, #3
    356e:	3008      	adds	r0, #8
    3570:	f010 fc6c 	bl	13e4c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    3574:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    3576:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3578:	4621      	mov	r1, r4
    357a:	f242 0021 	movw	r0, #8225	; 0x2021
}
    357e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3582:	f7ff b99b 	b.w	28bc <bt_hci_cmd_send>
}
    3586:	f06f 0036 	mvn.w	r0, #54	; 0x36
    358a:	bd70      	pop	{r4, r5, r6, pc}

0000358c <hci_tx_thread>:
{
    358c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("Started");
    3590:	4d82      	ldr	r5, [pc, #520]	; (379c <hci_tx_thread+0x210>)
    3592:	4c83      	ldr	r4, [pc, #524]	; (37a0 <hci_tx_thread+0x214>)
    3594:	682e      	ldr	r6, [r5, #0]
{
    3596:	b089      	sub	sp, #36	; 0x24
    3598:	f011 fe04 	bl	151a4 <_impl_k_current_get>
	BT_DBG("Started");
    359c:	9402      	str	r4, [sp, #8]
    359e:	9001      	str	r0, [sp, #4]
    35a0:	9400      	str	r4, [sp, #0]
    35a2:	4b80      	ldr	r3, [pc, #512]	; (37a4 <hci_tx_thread+0x218>)
    35a4:	4a80      	ldr	r2, [pc, #512]	; (37a8 <hci_tx_thread+0x21c>)
    35a6:	4981      	ldr	r1, [pc, #516]	; (37ac <hci_tx_thread+0x220>)
    35a8:	4881      	ldr	r0, [pc, #516]	; (37b0 <hci_tx_thread+0x224>)
    35aa:	47b0      	blx	r6
		events[0].state = K_POLL_STATE_NOT_READY;
    35ac:	4b81      	ldr	r3, [pc, #516]	; (37b4 <hci_tx_thread+0x228>)
    35ae:	4a81      	ldr	r2, [pc, #516]	; (37b4 <hci_tx_thread+0x228>)
    35b0:	7b5b      	ldrb	r3, [r3, #13]
    35b2:	f36f 1307 	bfc	r3, #4, #4
    35b6:	7353      	strb	r3, [r2, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    35b8:	f102 0014 	add.w	r0, r2, #20
    35bc:	f001 fc94 	bl	4ee8 <bt_conn_prepare_events>
		BT_DBG("Calling k_poll with %d events", ev_count);
    35c0:	682e      	ldr	r6, [r5, #0]
			ev_count += bt_conn_prepare_events(&events[1]);
    35c2:	f100 0901 	add.w	r9, r0, #1
    35c6:	f011 fded 	bl	151a4 <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    35ca:	4a77      	ldr	r2, [pc, #476]	; (37a8 <hci_tx_thread+0x21c>)
    35cc:	9001      	str	r0, [sp, #4]
    35ce:	4977      	ldr	r1, [pc, #476]	; (37ac <hci_tx_thread+0x220>)
    35d0:	4879      	ldr	r0, [pc, #484]	; (37b8 <hci_tx_thread+0x22c>)
    35d2:	9403      	str	r4, [sp, #12]
    35d4:	f8cd 9008 	str.w	r9, [sp, #8]
    35d8:	9400      	str	r4, [sp, #0]
    35da:	4b72      	ldr	r3, [pc, #456]	; (37a4 <hci_tx_thread+0x218>)
    35dc:	47b0      	blx	r6

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    35de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    35e2:	4649      	mov	r1, r9
    35e4:	4873      	ldr	r0, [pc, #460]	; (37b4 <hci_tx_thread+0x228>)
    35e6:	f012 fb47 	bl	15c78 <_impl_k_poll>
		BT_ASSERT(err == 0);
    35ea:	b168      	cbz	r0, 3608 <hci_tx_thread+0x7c>
    35ec:	9401      	str	r4, [sp, #4]
    35ee:	9400      	str	r4, [sp, #0]
    35f0:	4b6c      	ldr	r3, [pc, #432]	; (37a4 <hci_tx_thread+0x218>)
    35f2:	682c      	ldr	r4, [r5, #0]
    35f4:	4a71      	ldr	r2, [pc, #452]	; (37bc <hci_tx_thread+0x230>)
    35f6:	496d      	ldr	r1, [pc, #436]	; (37ac <hci_tx_thread+0x220>)
    35f8:	4871      	ldr	r0, [pc, #452]	; (37c0 <hci_tx_thread+0x234>)
	BT_ASSERT(buf);
    35fa:	47a0      	blx	r4
    35fc:	4040      	eors	r0, r0
    35fe:	f380 8811 	msr	BASEPRI, r0
    3602:	f04f 0004 	mov.w	r0, #4
    3606:	df02      	svc	2
	BT_DBG("count %d", count);
    3608:	682e      	ldr	r6, [r5, #0]
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    360a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 37fc <hci_tx_thread+0x270>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    360e:	f011 fdc9 	bl	151a4 <_impl_k_current_get>
	BT_DBG("count %d", count);
    3612:	9403      	str	r4, [sp, #12]
    3614:	9001      	str	r0, [sp, #4]
    3616:	f8cd 9008 	str.w	r9, [sp, #8]
    361a:	9400      	str	r4, [sp, #0]
    361c:	4b69      	ldr	r3, [pc, #420]	; (37c4 <hci_tx_thread+0x238>)
    361e:	4a62      	ldr	r2, [pc, #392]	; (37a8 <hci_tx_thread+0x21c>)
    3620:	4962      	ldr	r1, [pc, #392]	; (37ac <hci_tx_thread+0x220>)
    3622:	4869      	ldr	r0, [pc, #420]	; (37c8 <hci_tx_thread+0x23c>)
    3624:	47b0      	blx	r6
    3626:	4e63      	ldr	r6, [pc, #396]	; (37b4 <hci_tx_thread+0x228>)
	for (; count; ev++, count--) {
    3628:	f1b9 0f00 	cmp.w	r9, #0
    362c:	d102      	bne.n	3634 <hci_tx_thread+0xa8>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    362e:	f011 fd69 	bl	15104 <_impl_k_yield>
    3632:	e7bb      	b.n	35ac <hci_tx_thread+0x20>
		BT_DBG("ev->state %u", ev->state);
    3634:	682f      	ldr	r7, [r5, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3636:	f011 fdb5 	bl	151a4 <_impl_k_current_get>
    363a:	9403      	str	r4, [sp, #12]
    363c:	7b73      	ldrb	r3, [r6, #13]
    363e:	4a5a      	ldr	r2, [pc, #360]	; (37a8 <hci_tx_thread+0x21c>)
    3640:	9001      	str	r0, [sp, #4]
    3642:	091b      	lsrs	r3, r3, #4
    3644:	9302      	str	r3, [sp, #8]
    3646:	9400      	str	r4, [sp, #0]
    3648:	4b5e      	ldr	r3, [pc, #376]	; (37c4 <hci_tx_thread+0x238>)
    364a:	4958      	ldr	r1, [pc, #352]	; (37ac <hci_tx_thread+0x220>)
    364c:	485f      	ldr	r0, [pc, #380]	; (37cc <hci_tx_thread+0x240>)
    364e:	47b8      	blx	r7
		switch (ev->state) {
    3650:	7b73      	ldrb	r3, [r6, #13]
    3652:	091b      	lsrs	r3, r3, #4
    3654:	2b01      	cmp	r3, #1
    3656:	f240 8083 	bls.w	3760 <hci_tx_thread+0x1d4>
    365a:	2b04      	cmp	r3, #4
    365c:	f040 8094 	bne.w	3788 <hci_tx_thread+0x1fc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3660:	f896 b00c 	ldrb.w	fp, [r6, #12]
    3664:	f1bb 0f00 	cmp.w	fp, #0
    3668:	d17e      	bne.n	3768 <hci_tx_thread+0x1dc>
	BT_DBG("calling net_buf_get");
    366a:	682f      	ldr	r7, [r5, #0]
    366c:	f011 fd9a 	bl	151a4 <_impl_k_current_get>
    3670:	4b57      	ldr	r3, [pc, #348]	; (37d0 <hci_tx_thread+0x244>)
    3672:	9001      	str	r0, [sp, #4]
    3674:	4a4c      	ldr	r2, [pc, #304]	; (37a8 <hci_tx_thread+0x21c>)
    3676:	494d      	ldr	r1, [pc, #308]	; (37ac <hci_tx_thread+0x220>)
    3678:	4856      	ldr	r0, [pc, #344]	; (37d4 <hci_tx_thread+0x248>)
    367a:	9402      	str	r4, [sp, #8]
    367c:	9400      	str	r4, [sp, #0]
    367e:	47b8      	blx	r7
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3680:	4659      	mov	r1, fp
    3682:	4855      	ldr	r0, [pc, #340]	; (37d8 <hci_tx_thread+0x24c>)
    3684:	f010 fb86 	bl	13d94 <net_buf_get>
	BT_ASSERT(buf);
    3688:	4682      	mov	sl, r0
    368a:	b938      	cbnz	r0, 369c <hci_tx_thread+0x110>
    368c:	9401      	str	r4, [sp, #4]
    368e:	9400      	str	r4, [sp, #0]
    3690:	4b4f      	ldr	r3, [pc, #316]	; (37d0 <hci_tx_thread+0x244>)
    3692:	682c      	ldr	r4, [r5, #0]
    3694:	4a49      	ldr	r2, [pc, #292]	; (37bc <hci_tx_thread+0x230>)
    3696:	4945      	ldr	r1, [pc, #276]	; (37ac <hci_tx_thread+0x220>)
    3698:	4850      	ldr	r0, [pc, #320]	; (37dc <hci_tx_thread+0x250>)
    369a:	e7ae      	b.n	35fa <hci_tx_thread+0x6e>
	BT_DBG("calling sem_take_wait");
    369c:	682f      	ldr	r7, [r5, #0]
    369e:	f011 fd81 	bl	151a4 <_impl_k_current_get>
    36a2:	4b4b      	ldr	r3, [pc, #300]	; (37d0 <hci_tx_thread+0x244>)
    36a4:	9001      	str	r0, [sp, #4]
    36a6:	4a40      	ldr	r2, [pc, #256]	; (37a8 <hci_tx_thread+0x21c>)
    36a8:	4940      	ldr	r1, [pc, #256]	; (37ac <hci_tx_thread+0x220>)
    36aa:	484d      	ldr	r0, [pc, #308]	; (37e0 <hci_tx_thread+0x254>)
    36ac:	9402      	str	r4, [sp, #8]
    36ae:	9400      	str	r4, [sp, #0]
    36b0:	47b8      	blx	r7
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    36b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    36b6:	484b      	ldr	r0, [pc, #300]	; (37e4 <hci_tx_thread+0x258>)
    36b8:	f011 fdd0 	bl	1525c <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    36bc:	f8d8 30c0 	ldr.w	r3, [r8, #192]	; 0xc0
    36c0:	b16b      	cbz	r3, 36de <hci_tx_thread+0x152>
		BT_ERR("Uncleared pending sent_cmd");
    36c2:	4b43      	ldr	r3, [pc, #268]	; (37d0 <hci_tx_thread+0x244>)
    36c4:	4a3d      	ldr	r2, [pc, #244]	; (37bc <hci_tx_thread+0x230>)
    36c6:	4939      	ldr	r1, [pc, #228]	; (37ac <hci_tx_thread+0x220>)
    36c8:	4847      	ldr	r0, [pc, #284]	; (37e8 <hci_tx_thread+0x25c>)
    36ca:	9401      	str	r4, [sp, #4]
    36cc:	9400      	str	r4, [sp, #0]
    36ce:	682f      	ldr	r7, [r5, #0]
    36d0:	47b8      	blx	r7
		net_buf_unref(bt_dev.sent_cmd);
    36d2:	f8d8 00c0 	ldr.w	r0, [r8, #192]	; 0xc0
    36d6:	f010 fb87 	bl	13de8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    36da:	f8c8 b0c0 	str.w	fp, [r8, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    36de:	4650      	mov	r0, sl
    36e0:	f010 fbb0 	bl	13e44 <net_buf_ref>
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    36e4:	682f      	ldr	r7, [r5, #0]
	bt_dev.sent_cmd = net_buf_ref(buf);
    36e6:	f8c8 00c0 	str.w	r0, [r8, #192]	; 0xc0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    36ea:	f011 fd5b 	bl	151a4 <_impl_k_current_get>
    36ee:	9007      	str	r0, [sp, #28]
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    36f0:	4650      	mov	r0, sl
    36f2:	f010 fabb 	bl	13c6c <net_buf_id>
    36f6:	f8df b108 	ldr.w	fp, [pc, #264]	; 3800 <hci_tx_thread+0x274>
    36fa:	9404      	str	r4, [sp, #16]
    36fc:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3700:	f8cd a00c 	str.w	sl, [sp, #12]
    3704:	8842      	ldrh	r2, [r0, #2]
    3706:	9b07      	ldr	r3, [sp, #28]
    3708:	9202      	str	r2, [sp, #8]
    370a:	9301      	str	r3, [sp, #4]
    370c:	4837      	ldr	r0, [pc, #220]	; (37ec <hci_tx_thread+0x260>)
    370e:	9400      	str	r4, [sp, #0]
    3710:	4b2f      	ldr	r3, [pc, #188]	; (37d0 <hci_tx_thread+0x244>)
    3712:	4a25      	ldr	r2, [pc, #148]	; (37a8 <hci_tx_thread+0x21c>)
    3714:	4925      	ldr	r1, [pc, #148]	; (37ac <hci_tx_thread+0x220>)
    3716:	47b8      	blx	r7
	err = bt_send(buf);
    3718:	4650      	mov	r0, sl
    371a:	f7ff f8a3 	bl	2864 <bt_send>
	if (err) {
    371e:	b1f8      	cbz	r0, 3760 <hci_tx_thread+0x1d4>
		BT_ERR("Unable to send to driver (err %d)", err);
    3720:	4b2b      	ldr	r3, [pc, #172]	; (37d0 <hci_tx_thread+0x244>)
    3722:	4a26      	ldr	r2, [pc, #152]	; (37bc <hci_tx_thread+0x230>)
    3724:	4921      	ldr	r1, [pc, #132]	; (37ac <hci_tx_thread+0x220>)
    3726:	9001      	str	r0, [sp, #4]
    3728:	9402      	str	r4, [sp, #8]
    372a:	4831      	ldr	r0, [pc, #196]	; (37f0 <hci_tx_thread+0x264>)
    372c:	9400      	str	r4, [sp, #0]
    372e:	682f      	ldr	r7, [r5, #0]
    3730:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3732:	482c      	ldr	r0, [pc, #176]	; (37e4 <hci_tx_thread+0x258>)
    3734:	f011 fd6a 	bl	1520c <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    3738:	4650      	mov	r0, sl
    373a:	f010 fa97 	bl	13c6c <net_buf_id>
    373e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3742:	2200      	movs	r2, #0
    3744:	211f      	movs	r1, #31
    3746:	8840      	ldrh	r0, [r0, #2]
    3748:	f7fe fd8c 	bl	2264 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    374c:	f8d8 00c0 	ldr.w	r0, [r8, #192]	; 0xc0
    3750:	f010 fb4a 	bl	13de8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3754:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3756:	4650      	mov	r0, sl
		bt_dev.sent_cmd = NULL;
    3758:	f8c8 30c0 	str.w	r3, [r8, #192]	; 0xc0
		net_buf_unref(buf);
    375c:	f010 fb44 	bl	13de8 <net_buf_unref>
	for (; count; ev++, count--) {
    3760:	3614      	adds	r6, #20
    3762:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    3766:	e75f      	b.n	3628 <hci_tx_thread+0x9c>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3768:	f1bb 0f01 	cmp.w	fp, #1
    376c:	d104      	bne.n	3778 <hci_tx_thread+0x1ec>
					conn = CONTAINER_OF(ev->fifo,
    376e:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    3770:	3818      	subs	r0, #24
    3772:	f001 f96b 	bl	4a4c <bt_conn_notify_tx>
    3776:	e7f3      	b.n	3760 <hci_tx_thread+0x1d4>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3778:	f1bb 0f02 	cmp.w	fp, #2
    377c:	d1f0      	bne.n	3760 <hci_tx_thread+0x1d4>
					conn = CONTAINER_OF(ev->fifo,
    377e:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    3780:	3828      	subs	r0, #40	; 0x28
    3782:	f001 ff2d 	bl	55e0 <bt_conn_process_tx>
    3786:	e7eb      	b.n	3760 <hci_tx_thread+0x1d4>
		switch (ev->state) {
    3788:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    378a:	9402      	str	r4, [sp, #8]
    378c:	9400      	str	r4, [sp, #0]
    378e:	682f      	ldr	r7, [r5, #0]
    3790:	4b0c      	ldr	r3, [pc, #48]	; (37c4 <hci_tx_thread+0x238>)
    3792:	4a18      	ldr	r2, [pc, #96]	; (37f4 <hci_tx_thread+0x268>)
    3794:	4905      	ldr	r1, [pc, #20]	; (37ac <hci_tx_thread+0x220>)
    3796:	4818      	ldr	r0, [pc, #96]	; (37f8 <hci_tx_thread+0x26c>)
    3798:	47b8      	blx	r7
    379a:	e7e1      	b.n	3760 <hci_tx_thread+0x1d4>
    379c:	20003a5c 	.word	0x20003a5c
    37a0:	000161ba 	.word	0x000161ba
    37a4:	00016c84 	.word	0x00016c84
    37a8:	0001697a 	.word	0x0001697a
    37ac:	00017a29 	.word	0x00017a29
    37b0:	00017af3 	.word	0x00017af3
    37b4:	20003b38 	.word	0x20003b38
    37b8:	00017b10 	.word	0x00017b10
    37bc:	000179e1 	.word	0x000179e1
    37c0:	00017b43 	.word	0x00017b43
    37c4:	00016c75 	.word	0x00016c75
    37c8:	00017b6d 	.word	0x00017b6d
    37cc:	00017b8b 	.word	0x00017b8b
    37d0:	00016c6c 	.word	0x00016c6c
    37d4:	00017bad 	.word	0x00017bad
    37d8:	20003b24 	.word	0x20003b24
    37dc:	00017bd6 	.word	0x00017bd6
    37e0:	00017bfb 	.word	0x00017bfb
    37e4:	20003b08 	.word	0x20003b08
    37e8:	00017c26 	.word	0x00017c26
    37ec:	00017c51 	.word	0x00017c51
    37f0:	00017033 	.word	0x00017033
    37f4:	00017a64 	.word	0x00017a64
    37f8:	00017c90 	.word	0x00017c90
    37fc:	20003a60 	.word	0x20003a60
    3800:	2000027c 	.word	0x2000027c

00003804 <bt_recv>:
{
    3804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("buf %p len %u", buf, buf->len);
    3808:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 3ab4 <bt_recv+0x2b0>
    380c:	4f93      	ldr	r7, [pc, #588]	; (3a5c <bt_recv+0x258>)
    380e:	f8d8 5000 	ldr.w	r5, [r8]
{
    3812:	b099      	sub	sp, #100	; 0x64
    3814:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3816:	f011 fcc5 	bl	151a4 <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    381a:	9704      	str	r7, [sp, #16]
    381c:	89a3      	ldrh	r3, [r4, #12]
    381e:	9303      	str	r3, [sp, #12]
    3820:	9001      	str	r0, [sp, #4]
    3822:	9402      	str	r4, [sp, #8]
    3824:	9700      	str	r7, [sp, #0]
    3826:	4b8e      	ldr	r3, [pc, #568]	; (3a60 <bt_recv+0x25c>)
    3828:	4a8e      	ldr	r2, [pc, #568]	; (3a64 <bt_recv+0x260>)
    382a:	498f      	ldr	r1, [pc, #572]	; (3a68 <bt_recv+0x264>)
    382c:	488f      	ldr	r0, [pc, #572]	; (3a6c <bt_recv+0x268>)
    382e:	47a8      	blx	r5
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    3830:	f894 9014 	ldrb.w	r9, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    3834:	f1b9 0f01 	cmp.w	r9, #1
    3838:	4646      	mov	r6, r8
    383a:	463d      	mov	r5, r7
    383c:	d060      	beq.n	3900 <bt_recv+0xfc>
    383e:	f1b9 0f03 	cmp.w	r9, #3
    3842:	f040 845c 	bne.w	40fe <bt_recv+0x8fa>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3846:	68a6      	ldr	r6, [r4, #8]
	BT_DBG("buf %p", buf);
    3848:	f8d8 9000 	ldr.w	r9, [r8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    384c:	8875      	ldrh	r5, [r6, #2]
    384e:	f011 fca9 	bl	151a4 <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    3852:	4a84      	ldr	r2, [pc, #528]	; (3a64 <bt_recv+0x260>)
    3854:	9001      	str	r0, [sp, #4]
    3856:	4b86      	ldr	r3, [pc, #536]	; (3a70 <bt_recv+0x26c>)
    3858:	4983      	ldr	r1, [pc, #524]	; (3a68 <bt_recv+0x264>)
    385a:	4886      	ldr	r0, [pc, #536]	; (3a74 <bt_recv+0x270>)
    385c:	9703      	str	r7, [sp, #12]
    385e:	9402      	str	r4, [sp, #8]
    3860:	9700      	str	r7, [sp, #0]
    3862:	47c8      	blx	r9
	handle = sys_le16_to_cpu(hdr->handle);
    3864:	8833      	ldrh	r3, [r6, #0]
	flags = bt_acl_flags(handle);
    3866:	0b1e      	lsrs	r6, r3, #12
	acl(buf)->handle = bt_acl_handle(handle);
    3868:	f3c3 030b 	ubfx	r3, r3, #0, #12
    386c:	82e3      	strh	r3, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    386e:	23ff      	movs	r3, #255	; 0xff
    3870:	7563      	strb	r3, [r4, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3872:	2104      	movs	r1, #4
    3874:	f104 0008 	add.w	r0, r4, #8
    3878:	f010 fb07 	bl	13e8a <net_buf_simple_pull>
	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);
    387c:	f8d8 9000 	ldr.w	r9, [r8]
    3880:	f011 fc90 	bl	151a4 <_impl_k_current_get>
    3884:	9705      	str	r7, [sp, #20]
    3886:	9604      	str	r6, [sp, #16]
    3888:	9503      	str	r5, [sp, #12]
    388a:	8ae3      	ldrh	r3, [r4, #22]
    388c:	9302      	str	r3, [sp, #8]
    388e:	9001      	str	r0, [sp, #4]
    3890:	4b77      	ldr	r3, [pc, #476]	; (3a70 <bt_recv+0x26c>)
    3892:	9700      	str	r7, [sp, #0]
    3894:	4a73      	ldr	r2, [pc, #460]	; (3a64 <bt_recv+0x260>)
    3896:	4974      	ldr	r1, [pc, #464]	; (3a68 <bt_recv+0x264>)
    3898:	4877      	ldr	r0, [pc, #476]	; (3a78 <bt_recv+0x274>)
    389a:	47c8      	blx	r9
	if (buf->len != len) {
    389c:	89a3      	ldrh	r3, [r4, #12]
    389e:	429d      	cmp	r5, r3
    38a0:	d00e      	beq.n	38c0 <bt_recv+0xbc>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    38a2:	9301      	str	r3, [sp, #4]
    38a4:	9703      	str	r7, [sp, #12]
    38a6:	9502      	str	r5, [sp, #8]
    38a8:	9700      	str	r7, [sp, #0]
    38aa:	f8d8 5000 	ldr.w	r5, [r8]
    38ae:	4b70      	ldr	r3, [pc, #448]	; (3a70 <bt_recv+0x26c>)
    38b0:	4a72      	ldr	r2, [pc, #456]	; (3a7c <bt_recv+0x278>)
    38b2:	496d      	ldr	r1, [pc, #436]	; (3a68 <bt_recv+0x264>)
    38b4:	4872      	ldr	r0, [pc, #456]	; (3a80 <bt_recv+0x27c>)
    38b6:	47a8      	blx	r5
	net_buf_unref(buf);
    38b8:	4620      	mov	r0, r4
    38ba:	f010 fa95 	bl	13de8 <net_buf_unref>
    38be:	e01b      	b.n	38f8 <bt_recv+0xf4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    38c0:	8ae0      	ldrh	r0, [r4, #22]
    38c2:	f001 fa65 	bl	4d90 <bt_conn_lookup_handle>
	if (!conn) {
    38c6:	4605      	mov	r5, r0
    38c8:	b958      	cbnz	r0, 38e2 <bt_recv+0xde>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    38ca:	9702      	str	r7, [sp, #8]
    38cc:	8ae3      	ldrh	r3, [r4, #22]
    38ce:	9301      	str	r3, [sp, #4]
    38d0:	9700      	str	r7, [sp, #0]
    38d2:	f8d8 6000 	ldr.w	r6, [r8]
    38d6:	4b66      	ldr	r3, [pc, #408]	; (3a70 <bt_recv+0x26c>)
    38d8:	4a68      	ldr	r2, [pc, #416]	; (3a7c <bt_recv+0x278>)
    38da:	4963      	ldr	r1, [pc, #396]	; (3a68 <bt_recv+0x264>)
    38dc:	4869      	ldr	r0, [pc, #420]	; (3a84 <bt_recv+0x280>)
    38de:	47b0      	blx	r6
    38e0:	e7ea      	b.n	38b8 <bt_recv+0xb4>
	acl(buf)->id = bt_conn_get_id(conn);
    38e2:	f001 ff2b 	bl	573c <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    38e6:	4632      	mov	r2, r6
	acl(buf)->id = bt_conn_get_id(conn);
    38e8:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    38ea:	4621      	mov	r1, r4
    38ec:	4628      	mov	r0, r5
    38ee:	f000 ff5d 	bl	47ac <bt_conn_recv>
	bt_conn_unref(conn);
    38f2:	4628      	mov	r0, r5
    38f4:	f001 fa9a 	bl	4e2c <bt_conn_unref>
		return 0;
    38f8:	2000      	movs	r0, #0
}
    38fa:	b019      	add	sp, #100	; 0x64
    38fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3900:	f8d4 a008 	ldr.w	sl, [r4, #8]
	BT_DBG("event 0x%02x", hdr->evt);
    3904:	f8d8 b000 	ldr.w	fp, [r8]
    3908:	f011 fc4c 	bl	151a4 <_impl_k_current_get>
    390c:	9703      	str	r7, [sp, #12]
    390e:	f89a 3000 	ldrb.w	r3, [sl]
    3912:	9302      	str	r3, [sp, #8]
    3914:	9001      	str	r0, [sp, #4]
    3916:	4b5c      	ldr	r3, [pc, #368]	; (3a88 <bt_recv+0x284>)
    3918:	9700      	str	r7, [sp, #0]
    391a:	4a52      	ldr	r2, [pc, #328]	; (3a64 <bt_recv+0x260>)
    391c:	4952      	ldr	r1, [pc, #328]	; (3a68 <bt_recv+0x264>)
    391e:	485b      	ldr	r0, [pc, #364]	; (3a8c <bt_recv+0x288>)
    3920:	47d8      	blx	fp
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    3922:	f89a 3000 	ldrb.w	r3, [sl]
    3926:	2b13      	cmp	r3, #19
    3928:	f200 83fa 	bhi.w	4120 <bt_recv+0x91c>
    392c:	fa09 f903 	lsl.w	r9, r9, r3
    3930:	f419 2f0c 	tst.w	r9, #573440	; 0x8c000
    3934:	f000 83f4 	beq.w	4120 <bt_recv+0x91c>
    3938:	9701      	str	r7, [sp, #4]
    393a:	9700      	str	r7, [sp, #0]
    393c:	f8d8 4000 	ldr.w	r4, [r8]
    3940:	4b51      	ldr	r3, [pc, #324]	; (3a88 <bt_recv+0x284>)
    3942:	4a4e      	ldr	r2, [pc, #312]	; (3a7c <bt_recv+0x278>)
    3944:	4948      	ldr	r1, [pc, #288]	; (3a68 <bt_recv+0x264>)
    3946:	4852      	ldr	r0, [pc, #328]	; (3a90 <bt_recv+0x28c>)
    3948:	47a0      	blx	r4
    394a:	4040      	eors	r0, r0
    394c:	f380 8811 	msr	BASEPRI, r0
    3950:	f04f 0004 	mov.w	r0, #4
    3954:	df02      	svc	2
    3956:	f8d4 8008 	ldr.w	r8, [r4, #8]
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    395a:	6837      	ldr	r7, [r6, #0]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    395c:	f8b8 a001 	ldrh.w	sl, [r8, #1]
    3960:	f011 fc20 	bl	151a4 <_impl_k_current_get>
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    3964:	9505      	str	r5, [sp, #20]
    3966:	f898 3003 	ldrb.w	r3, [r8, #3]
    396a:	9304      	str	r3, [sp, #16]
    396c:	f8cd a00c 	str.w	sl, [sp, #12]
    3970:	f898 3000 	ldrb.w	r3, [r8]
    3974:	9302      	str	r3, [sp, #8]
    3976:	9001      	str	r0, [sp, #4]
    3978:	9500      	str	r5, [sp, #0]
    397a:	4b46      	ldr	r3, [pc, #280]	; (3a94 <bt_recv+0x290>)
    397c:	4a39      	ldr	r2, [pc, #228]	; (3a64 <bt_recv+0x260>)
    397e:	493a      	ldr	r1, [pc, #232]	; (3a68 <bt_recv+0x264>)
    3980:	4845      	ldr	r0, [pc, #276]	; (3a98 <bt_recv+0x294>)
    3982:	47b8      	blx	r7
	if (evt->status) {
    3984:	f898 9000 	ldrb.w	r9, [r8]
    3988:	f1b9 0f00 	cmp.w	r9, #0
    398c:	d194      	bne.n	38b8 <bt_recv+0xb4>
	conn = bt_conn_lookup_handle(handle);
    398e:	4650      	mov	r0, sl
    3990:	f001 f9fe 	bl	4d90 <bt_conn_lookup_handle>
	if (!conn) {
    3994:	4607      	mov	r7, r0
    3996:	b9c8      	cbnz	r0, 39cc <bt_recv+0x1c8>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3998:	e88d 0420 	stmia.w	sp, {r5, sl}
    399c:	9502      	str	r5, [sp, #8]
    399e:	6835      	ldr	r5, [r6, #0]
    39a0:	4b3c      	ldr	r3, [pc, #240]	; (3a94 <bt_recv+0x290>)
    39a2:	4a36      	ldr	r2, [pc, #216]	; (3a7c <bt_recv+0x278>)
    39a4:	4930      	ldr	r1, [pc, #192]	; (3a68 <bt_recv+0x264>)
    39a6:	483d      	ldr	r0, [pc, #244]	; (3a9c <bt_recv+0x298>)
    39a8:	47a8      	blx	r5
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    39aa:	2107      	movs	r1, #7
    39ac:	483c      	ldr	r0, [pc, #240]	; (3aa0 <bt_recv+0x29c>)
    39ae:	f7fe fcd3 	bl	2358 <atomic_test_bit>
    39b2:	2800      	cmp	r0, #0
    39b4:	d080      	beq.n	38b8 <bt_recv+0xb4>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    39b6:	2106      	movs	r1, #6
    39b8:	4839      	ldr	r0, [pc, #228]	; (3aa0 <bt_recv+0x29c>)
    39ba:	f7fe fccd 	bl	2358 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    39be:	2800      	cmp	r0, #0
    39c0:	f47f af7a 	bne.w	38b8 <bt_recv+0xb4>
		set_advertise_enable(true);
    39c4:	2001      	movs	r0, #1
    39c6:	f7fe fe6b 	bl	26a0 <set_advertise_enable>
    39ca:	e775      	b.n	38b8 <bt_recv+0xb4>
	conn->err = evt->reason;
    39cc:	f898 3003 	ldrb.w	r3, [r8, #3]
    39d0:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    39d2:	4934      	ldr	r1, [pc, #208]	; (3aa4 <bt_recv+0x2a0>)
    39d4:	4834      	ldr	r0, [pc, #208]	; (3aa8 <bt_recv+0x2a4>)
    39d6:	f011 fde9 	bl	155ac <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    39da:	4649      	mov	r1, r9
    39dc:	4638      	mov	r0, r7
    39de:	f001 faf9 	bl	4fd4 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    39e2:	78bd      	ldrb	r5, [r7, #2]
	conn->handle = 0;
    39e4:	f8a7 9000 	strh.w	r9, [r7]
	if (conn->type != BT_CONN_TYPE_LE) {
    39e8:	b10d      	cbz	r5, 39ee <bt_recv+0x1ea>
	bt_conn_unref(conn);
    39ea:	4638      	mov	r0, r7
    39ec:	e0ea      	b.n	3bc4 <bt_recv+0x3c0>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    39ee:	4629      	mov	r1, r5
    39f0:	1d38      	adds	r0, r7, #4
    39f2:	f7fe fcb1 	bl	2358 <atomic_test_bit>
    39f6:	b130      	cbz	r0, 3a06 <bt_recv+0x202>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    39f8:	4638      	mov	r0, r7
    39fa:	2101      	movs	r1, #1
    39fc:	f001 faea 	bl	4fd4 <bt_conn_set_state>
		bt_le_scan_update(false);
    3a00:	4628      	mov	r0, r5
    3a02:	f7fe fffb 	bl	29fc <bt_le_scan_update>
	bt_conn_unref(conn);
    3a06:	4638      	mov	r0, r7
    3a08:	f001 fa10 	bl	4e2c <bt_conn_unref>
    3a0c:	e7cd      	b.n	39aa <bt_recv+0x1a6>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3a0e:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("subevent 0x%02x", evt->subevent);
    3a10:	f8d6 8000 	ldr.w	r8, [r6]
    3a14:	f011 fbc6 	bl	151a4 <_impl_k_current_get>
    3a18:	9503      	str	r5, [sp, #12]
    3a1a:	783b      	ldrb	r3, [r7, #0]
    3a1c:	9302      	str	r3, [sp, #8]
    3a1e:	9001      	str	r0, [sp, #4]
    3a20:	4b22      	ldr	r3, [pc, #136]	; (3aac <bt_recv+0x2a8>)
    3a22:	4a10      	ldr	r2, [pc, #64]	; (3a64 <bt_recv+0x260>)
    3a24:	4910      	ldr	r1, [pc, #64]	; (3a68 <bt_recv+0x264>)
    3a26:	4822      	ldr	r0, [pc, #136]	; (3ab0 <bt_recv+0x2ac>)
    3a28:	9500      	str	r5, [sp, #0]
    3a2a:	47c0      	blx	r8
	net_buf_pull(buf, sizeof(*evt));
    3a2c:	2101      	movs	r1, #1
    3a2e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a30:	f010 fa2b 	bl	13e8a <net_buf_simple_pull>
	switch (evt->subevent) {
    3a34:	783f      	ldrb	r7, [r7, #0]
    3a36:	1e7b      	subs	r3, r7, #1
    3a38:	2b0b      	cmp	r3, #11
    3a3a:	f200 834d 	bhi.w	40d8 <bt_recv+0x8d4>
    3a3e:	e8df f013 	tbh	[pc, r3, lsl #1]
    3a42:	003b      	.short	0x003b
    3a44:	0088023c 	.word	0x0088023c
    3a48:	034b00c4 	.word	0x034b00c4
    3a4c:	01600101 	.word	0x01600101
    3a50:	022001f3 	.word	0x022001f3
    3a54:	034b0086 	.word	0x034b0086
    3a58:	0195      	.short	0x0195
    3a5a:	bf00      	nop
    3a5c:	000161ba 	.word	0x000161ba
    3a60:	00016dc2 	.word	0x00016dc2
    3a64:	0001697a 	.word	0x0001697a
    3a68:	00017a29 	.word	0x00017a29
    3a6c:	00017456 	.word	0x00017456
    3a70:	00016b0f 	.word	0x00016b0f
    3a74:	00016fed 	.word	0x00016fed
    3a78:	00017479 	.word	0x00017479
    3a7c:	000179e1 	.word	0x000179e1
    3a80:	000174a8 	.word	0x000174a8
    3a84:	000174dc 	.word	0x000174dc
    3a88:	00016c62 	.word	0x00016c62
    3a8c:	0001750e 	.word	0x0001750e
    3a90:	000177d6 	.word	0x000177d6
    3a94:	00016b31 	.word	0x00016b31
    3a98:	00017530 	.word	0x00017530
    3a9c:	00017563 	.word	0x00017563
    3aa0:	20003ad0 	.word	0x20003ad0
    3aa4:	00017599 	.word	0x00017599
    3aa8:	000021c1 	.word	0x000021c1
    3aac:	00016c50 	.word	0x00016c50
    3ab0:	0001759d 	.word	0x0001759d
    3ab4:	20003a5c 	.word	0x20003a5c
    3ab8:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("status %u role %u %s", evt->status, evt->role,
    3aba:	f8d6 8000 	ldr.w	r8, [r6]
    3abe:	f011 fb71 	bl	151a4 <_impl_k_current_get>
    3ac2:	1d3e      	adds	r6, r7, #4
    3ac4:	4681      	mov	r9, r0
    3ac6:	4630      	mov	r0, r6
    3ac8:	f897 a000 	ldrb.w	sl, [r7]
    3acc:	f897 b003 	ldrb.w	fp, [r7, #3]
    3ad0:	f7fe fa7a 	bl	1fc8 <bt_addr_le_str>
    3ad4:	4aad      	ldr	r2, [pc, #692]	; (3d8c <bt_recv+0x588>)
    3ad6:	9505      	str	r5, [sp, #20]
    3ad8:	9004      	str	r0, [sp, #16]
    3ada:	e88d 0e20 	stmia.w	sp, {r5, r9, sl, fp}
    3ade:	4bac      	ldr	r3, [pc, #688]	; (3d90 <bt_recv+0x58c>)
    3ae0:	49ac      	ldr	r1, [pc, #688]	; (3d94 <bt_recv+0x590>)
    3ae2:	48ad      	ldr	r0, [pc, #692]	; (3d98 <bt_recv+0x594>)
    3ae4:	47c0      	blx	r8
	enh.status         = evt->status;
    3ae6:	783b      	ldrb	r3, [r7, #0]
    3ae8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	enh.handle         = evt->handle;
    3aec:	f8b7 3001 	ldrh.w	r3, [r7, #1]
    3af0:	f8ad 3041 	strh.w	r3, [sp, #65]	; 0x41
	enh.role           = evt->role;
    3af4:	78fb      	ldrb	r3, [r7, #3]
    3af6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	enh.interval       = evt->interval;
    3afa:	f8b7 300b 	ldrh.w	r3, [r7, #11]
    3afe:	f8ad 3057 	strh.w	r3, [sp, #87]	; 0x57
	enh.latency        = evt->latency;
    3b02:	f8b7 300d 	ldrh.w	r3, [r7, #13]
    3b06:	f8ad 3059 	strh.w	r3, [sp, #89]	; 0x59
	enh.supv_timeout   = evt->supv_timeout;
    3b0a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    3b0e:	f8ad 305b 	strh.w	r3, [sp, #91]	; 0x5b
	enh.clock_accuracy = evt->clock_accuracy;
    3b12:	7c7b      	ldrb	r3, [r7, #17]
    3b14:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    3b18:	4631      	mov	r1, r6
    3b1a:	a811      	add	r0, sp, #68	; 0x44
    3b1c:	f7fe fb6e 	bl	21fc <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    3b20:	2500      	movs	r5, #0
    3b22:	2206      	movs	r2, #6
    3b24:	a90c      	add	r1, sp, #48	; 0x30
    3b26:	f10d 004b 	add.w	r0, sp, #75	; 0x4b
    3b2a:	950c      	str	r5, [sp, #48]	; 0x30
    3b2c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    3b30:	f7fe f99e 	bl	1e70 <memcpy>
    3b34:	2206      	movs	r2, #6
    3b36:	a90e      	add	r1, sp, #56	; 0x38
    3b38:	f10d 0051 	add.w	r0, sp, #81	; 0x51
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    3b3c:	950e      	str	r5, [sp, #56]	; 0x38
    3b3e:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
    3b42:	f7fe f995 	bl	1e70 <memcpy>
	le_enh_conn_complete(&enh);
    3b46:	a810      	add	r0, sp, #64	; 0x40
		le_enh_conn_complete((void *)buf->data);
    3b48:	f7ff fc06 	bl	3358 <le_enh_conn_complete>
    3b4c:	e6b4      	b.n	38b8 <bt_recv+0xb4>
    3b4e:	68a0      	ldr	r0, [r4, #8]
    3b50:	e7fa      	b.n	3b48 <bt_recv+0x344>
    3b52:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("status %u, handle %u", evt->status, handle);
    3b54:	f8d6 8000 	ldr.w	r8, [r6]
	handle = sys_le16_to_cpu(evt->handle);
    3b58:	f8b7 9001 	ldrh.w	r9, [r7, #1]
    3b5c:	f011 fb22 	bl	151a4 <_impl_k_current_get>
	BT_DBG("status %u, handle %u", evt->status, handle);
    3b60:	9504      	str	r5, [sp, #16]
    3b62:	f8cd 900c 	str.w	r9, [sp, #12]
    3b66:	783b      	ldrb	r3, [r7, #0]
    3b68:	9302      	str	r3, [sp, #8]
    3b6a:	9001      	str	r0, [sp, #4]
    3b6c:	4b8b      	ldr	r3, [pc, #556]	; (3d9c <bt_recv+0x598>)
    3b6e:	4a87      	ldr	r2, [pc, #540]	; (3d8c <bt_recv+0x588>)
    3b70:	4988      	ldr	r1, [pc, #544]	; (3d94 <bt_recv+0x590>)
    3b72:	488b      	ldr	r0, [pc, #556]	; (3da0 <bt_recv+0x59c>)
    3b74:	9500      	str	r5, [sp, #0]
    3b76:	47c0      	blx	r8
	conn = bt_conn_lookup_handle(handle);
    3b78:	4648      	mov	r0, r9
    3b7a:	f001 f909 	bl	4d90 <bt_conn_lookup_handle>
	if (!conn) {
    3b7e:	4680      	mov	r8, r0
    3b80:	b948      	cbnz	r0, 3b96 <bt_recv+0x392>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3b82:	e88d 0220 	stmia.w	sp, {r5, r9}
    3b86:	9502      	str	r5, [sp, #8]
    3b88:	6835      	ldr	r5, [r6, #0]
    3b8a:	4b84      	ldr	r3, [pc, #528]	; (3d9c <bt_recv+0x598>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3b8c:	4a85      	ldr	r2, [pc, #532]	; (3da4 <bt_recv+0x5a0>)
    3b8e:	4981      	ldr	r1, [pc, #516]	; (3d94 <bt_recv+0x590>)
    3b90:	4885      	ldr	r0, [pc, #532]	; (3da8 <bt_recv+0x5a4>)
    3b92:	47a8      	blx	r5
    3b94:	e690      	b.n	38b8 <bt_recv+0xb4>
	if (!evt->status) {
    3b96:	783b      	ldrb	r3, [r7, #0]
    3b98:	b99b      	cbnz	r3, 3bc2 <bt_recv+0x3be>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3b9a:	793a      	ldrb	r2, [r7, #4]
    3b9c:	78fb      	ldrb	r3, [r7, #3]
    3b9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3ba2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3ba6:	79ba      	ldrb	r2, [r7, #6]
    3ba8:	797b      	ldrb	r3, [r7, #5]
    3baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3bae:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3bb2:	79fb      	ldrb	r3, [r7, #7]
    3bb4:	7a3a      	ldrb	r2, [r7, #8]
    3bb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3bba:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    3bbe:	f000 fdb9 	bl	4734 <notify_le_param_updated>
	bt_conn_unref(conn);
    3bc2:	4640      	mov	r0, r8
	bt_conn_unref(conn);
    3bc4:	f001 f932 	bl	4e2c <bt_conn_unref>
    3bc8:	e676      	b.n	38b8 <bt_recv+0xb4>
    3bca:	f8d4 8008 	ldr.w	r8, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3bce:	f8b8 9001 	ldrh.w	r9, [r8, #1]
	conn = bt_conn_lookup_handle(handle);
    3bd2:	4648      	mov	r0, r9
    3bd4:	f001 f8dc 	bl	4d90 <bt_conn_lookup_handle>
	if (!conn) {
    3bd8:	4607      	mov	r7, r0
    3bda:	b928      	cbnz	r0, 3be8 <bt_recv+0x3e4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3bdc:	e88d 0220 	stmia.w	sp, {r5, r9}
    3be0:	9502      	str	r5, [sp, #8]
    3be2:	6835      	ldr	r5, [r6, #0]
    3be4:	4b71      	ldr	r3, [pc, #452]	; (3dac <bt_recv+0x5a8>)
    3be6:	e7d1      	b.n	3b8c <bt_recv+0x388>
	if (!evt->status) {
    3be8:	f898 3000 	ldrb.w	r3, [r8]
    3bec:	b92b      	cbnz	r3, 3bfa <bt_recv+0x3f6>
		memcpy(conn->le.features, evt->features,
    3bee:	2208      	movs	r2, #8
    3bf0:	f108 0103 	add.w	r1, r8, #3
    3bf4:	3064      	adds	r0, #100	; 0x64
    3bf6:	f7fe f93b 	bl	1e70 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    3bfa:	4d6d      	ldr	r5, [pc, #436]	; (3db0 <bt_recv+0x5ac>)
    3bfc:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3c00:	07d2      	lsls	r2, r2, #31
    3c02:	d50c      	bpl.n	3c1e <bt_recv+0x41a>
    3c04:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
    3c08:	07db      	lsls	r3, r3, #31
    3c0a:	d508      	bpl.n	3c1e <bt_recv+0x41a>
		err = hci_le_set_phy(conn);
    3c0c:	4638      	mov	r0, r7
    3c0e:	f7ff fb59 	bl	32c4 <hci_le_set_phy.isra.27>
		if (!err) {
    3c12:	b920      	cbnz	r0, 3c1e <bt_recv+0x41a>
    3c14:	2180      	movs	r1, #128	; 0x80
    3c16:	1d38      	adds	r0, r7, #4
    3c18:	f7fe faf3 	bl	2202 <atomic_or>
    3c1c:	e6e5      	b.n	39ea <bt_recv+0x1e6>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3c1e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3c22:	069e      	lsls	r6, r3, #26
    3c24:	f140 80fc 	bpl.w	3e20 <bt_recv+0x61c>
    3c28:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    3c2c:	069d      	lsls	r5, r3, #26
    3c2e:	f140 80f7 	bpl.w	3e20 <bt_recv+0x61c>
		err = hci_le_set_data_len(conn);
    3c32:	4638      	mov	r0, r7
    3c34:	f7ff fb66 	bl	3304 <hci_le_set_data_len.isra.28>
		if (!err) {
    3c38:	2800      	cmp	r0, #0
    3c3a:	f040 80f1 	bne.w	3e20 <bt_recv+0x61c>
    3c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
    3c42:	e7e8      	b.n	3c16 <bt_recv+0x412>
    3c44:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3c46:	78d9      	ldrb	r1, [r3, #3]
    3c48:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    3c4a:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3c4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3c52:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3c56:	7959      	ldrb	r1, [r3, #5]
    3c58:	791a      	ldrb	r2, [r3, #4]
    3c5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3c5e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
	param.latency = sys_le16_to_cpu(evt->latency);
    3c62:	799a      	ldrb	r2, [r3, #6]
    3c64:	79d9      	ldrb	r1, [r3, #7]
    3c66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3c6a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3c6e:	7a1a      	ldrb	r2, [r3, #8]
    3c70:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3c72:	fa1f f788 	uxth.w	r7, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3c76:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    3c7a:	4638      	mov	r0, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3c7c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
	conn = bt_conn_lookup_handle(handle);
    3c80:	f001 f886 	bl	4d90 <bt_conn_lookup_handle>
	if (!conn) {
    3c84:	4681      	mov	r9, r0
    3c86:	b968      	cbnz	r0, 3ca4 <bt_recv+0x4a0>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3c88:	e88d 00a0 	stmia.w	sp, {r5, r7}
    3c8c:	9502      	str	r5, [sp, #8]
    3c8e:	6835      	ldr	r5, [r6, #0]
    3c90:	4b48      	ldr	r3, [pc, #288]	; (3db4 <bt_recv+0x5b0>)
    3c92:	4a44      	ldr	r2, [pc, #272]	; (3da4 <bt_recv+0x5a0>)
    3c94:	493f      	ldr	r1, [pc, #252]	; (3d94 <bt_recv+0x590>)
    3c96:	4844      	ldr	r0, [pc, #272]	; (3da8 <bt_recv+0x5a4>)
    3c98:	47a8      	blx	r5
		return le_conn_param_neg_reply(handle,
    3c9a:	2102      	movs	r1, #2
    3c9c:	4638      	mov	r0, r7
    3c9e:	f7ff fc5b 	bl	3558 <le_conn_param_neg_reply>
    3ca2:	e609      	b.n	38b8 <bt_recv+0xb4>
	if (!le_param_req(conn, &param)) {
    3ca4:	a910      	add	r1, sp, #64	; 0x40
    3ca6:	f000 fd59 	bl	475c <le_param_req>
    3caa:	b928      	cbnz	r0, 3cb8 <bt_recv+0x4b4>
		err = le_conn_param_neg_reply(handle,
    3cac:	211e      	movs	r1, #30
    3cae:	4638      	mov	r0, r7
    3cb0:	f7ff fc52 	bl	3558 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3cb4:	4648      	mov	r0, r9
    3cb6:	e785      	b.n	3bc4 <bt_recv+0x3c0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3cb8:	210e      	movs	r1, #14
    3cba:	f242 0020 	movw	r0, #8224	; 0x2020
    3cbe:	f7fe fb59 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    3cc2:	4606      	mov	r6, r0
    3cc4:	2800      	cmp	r0, #0
    3cc6:	d0f5      	beq.n	3cb4 <bt_recv+0x4b0>
	cp = net_buf_add(buf, sizeof(*cp));
    3cc8:	210e      	movs	r1, #14
    3cca:	3008      	adds	r0, #8
    3ccc:	f010 f8be 	bl	13e4c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3cd0:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    3cd2:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    3cd4:	2100      	movs	r1, #0
    3cd6:	f7fe f8f7 	bl	1ec8 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3cda:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    3cde:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    3ce0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    3ce4:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3ce6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    3cea:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3cec:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
	cp->handle = sys_cpu_to_le16(handle);
    3cf0:	f8a5 8000 	strh.w	r8, [r5]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3cf4:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    3cf6:	4631      	mov	r1, r6
    3cf8:	f242 0020 	movw	r0, #8224	; 0x2020
    3cfc:	f7fe fdde 	bl	28bc <bt_hci_cmd_send>
    3d00:	e7d8      	b.n	3cb4 <bt_recv+0x4b0>
    3d02:	68a3      	ldr	r3, [r4, #8]
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    3d04:	885f      	ldrh	r7, [r3, #2]
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    3d06:	f8b3 9006 	ldrh.w	r9, [r3, #6]
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    3d0a:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    3d0e:	f8b3 a008 	ldrh.w	sl, [r3, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3d12:	881b      	ldrh	r3, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    3d14:	9309      	str	r3, [sp, #36]	; 0x24
    3d16:	4618      	mov	r0, r3
    3d18:	f001 f83a 	bl	4d90 <bt_conn_lookup_handle>
	if (!conn) {
    3d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d1e:	4683      	mov	fp, r0
    3d20:	b928      	cbnz	r0, 3d2e <bt_recv+0x52a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3d22:	9301      	str	r3, [sp, #4]
    3d24:	9502      	str	r5, [sp, #8]
    3d26:	9500      	str	r5, [sp, #0]
    3d28:	6835      	ldr	r5, [r6, #0]
    3d2a:	4b23      	ldr	r3, [pc, #140]	; (3db8 <bt_recv+0x5b4>)
    3d2c:	e72e      	b.n	3b8c <bt_recv+0x388>
	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
    3d2e:	6836      	ldr	r6, [r6, #0]
    3d30:	f011 fa38 	bl	151a4 <_impl_k_current_get>
    3d34:	4b20      	ldr	r3, [pc, #128]	; (3db8 <bt_recv+0x5b4>)
    3d36:	9001      	str	r0, [sp, #4]
    3d38:	4a14      	ldr	r2, [pc, #80]	; (3d8c <bt_recv+0x588>)
    3d3a:	4916      	ldr	r1, [pc, #88]	; (3d94 <bt_recv+0x590>)
    3d3c:	481f      	ldr	r0, [pc, #124]	; (3dbc <bt_recv+0x5b8>)
    3d3e:	9506      	str	r5, [sp, #24]
    3d40:	f8cd a014 	str.w	sl, [sp, #20]
    3d44:	f8cd 9010 	str.w	r9, [sp, #16]
    3d48:	f8cd 800c 	str.w	r8, [sp, #12]
    3d4c:	9702      	str	r7, [sp, #8]
    3d4e:	9500      	str	r5, [sp, #0]
    3d50:	47b0      	blx	r6
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d52:	f46f 7180 	mvn.w	r1, #256	; 0x100
    3d56:	f10b 0004 	add.w	r0, fp, #4
    3d5a:	f7fe fa63 	bl	2224 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3d5e:	05c0      	lsls	r0, r0, #23
    3d60:	d502      	bpl.n	3d68 <bt_recv+0x564>
	update_conn_param(conn);
    3d62:	4658      	mov	r0, fp
    3d64:	f7fe fa70 	bl	2248 <update_conn_param>
	bt_conn_unref(conn);
    3d68:	4658      	mov	r0, fp
    3d6a:	e72b      	b.n	3bc4 <bt_recv+0x3c0>
    3d6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3d70:	f8b8 9001 	ldrh.w	r9, [r8, #1]
	conn = bt_conn_lookup_handle(handle);
    3d74:	4648      	mov	r0, r9
    3d76:	f001 f80b 	bl	4d90 <bt_conn_lookup_handle>
	if (!conn) {
    3d7a:	4607      	mov	r7, r0
    3d7c:	bb10      	cbnz	r0, 3dc4 <bt_recv+0x5c0>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3d7e:	e88d 0220 	stmia.w	sp, {r5, r9}
    3d82:	9502      	str	r5, [sp, #8]
    3d84:	6835      	ldr	r5, [r6, #0]
    3d86:	4b0e      	ldr	r3, [pc, #56]	; (3dc0 <bt_recv+0x5bc>)
    3d88:	e700      	b.n	3b8c <bt_recv+0x388>
    3d8a:	bf00      	nop
    3d8c:	0001697a 	.word	0x0001697a
    3d90:	00016b5b 	.word	0x00016b5b
    3d94:	00017a29 	.word	0x00017a29
    3d98:	000175c2 	.word	0x000175c2
    3d9c:	00016bc7 	.word	0x00016bc7
    3da0:	000175ec 	.word	0x000175ec
    3da4:	000179e1 	.word	0x000179e1
    3da8:	00017616 	.word	0x00017616
    3dac:	00016b73 	.word	0x00016b73
    3db0:	20003a60 	.word	0x20003a60
    3db4:	00016bb5 	.word	0x00016bb5
    3db8:	00016b8b 	.word	0x00016b8b
    3dbc:	0001764a 	.word	0x0001764a
    3dc0:	00016b9e 	.word	0x00016b9e
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3dc4:	6836      	ldr	r6, [r6, #0]
    3dc6:	f011 f9ed 	bl	151a4 <_impl_k_current_get>
    3dca:	9505      	str	r5, [sp, #20]
    3dcc:	f898 3004 	ldrb.w	r3, [r8, #4]
    3dd0:	9304      	str	r3, [sp, #16]
    3dd2:	f898 3003 	ldrb.w	r3, [r8, #3]
    3dd6:	9303      	str	r3, [sp, #12]
    3dd8:	f898 3000 	ldrb.w	r3, [r8]
    3ddc:	9302      	str	r3, [sp, #8]
    3dde:	9001      	str	r0, [sp, #4]
    3de0:	9500      	str	r5, [sp, #0]
    3de2:	4bac      	ldr	r3, [pc, #688]	; (4094 <bt_recv+0x890>)
    3de4:	4aac      	ldr	r2, [pc, #688]	; (4098 <bt_recv+0x894>)
    3de6:	49ad      	ldr	r1, [pc, #692]	; (409c <bt_recv+0x898>)
    3de8:	48ad      	ldr	r0, [pc, #692]	; (40a0 <bt_recv+0x89c>)
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3dea:	1d3d      	adds	r5, r7, #4
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    3dec:	47b0      	blx	r6
    3dee:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3df2:	4628      	mov	r0, r5
    3df4:	f7fe fa16 	bl	2224 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3df8:	0601      	lsls	r1, r0, #24
    3dfa:	f57f adf6 	bpl.w	39ea <bt_recv+0x1e6>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3dfe:	4ba9      	ldr	r3, [pc, #676]	; (40a4 <bt_recv+0x8a0>)
    3e00:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3e04:	069a      	lsls	r2, r3, #26
    3e06:	d50b      	bpl.n	3e20 <bt_recv+0x61c>
    3e08:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    3e0c:	069b      	lsls	r3, r3, #26
    3e0e:	d507      	bpl.n	3e20 <bt_recv+0x61c>
		err = hci_le_set_data_len(conn);
    3e10:	4638      	mov	r0, r7
    3e12:	f7ff fa77 	bl	3304 <hci_le_set_data_len.isra.28>
		if (!err) {
    3e16:	b918      	cbnz	r0, 3e20 <bt_recv+0x61c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3e18:	f44f 7180 	mov.w	r1, #256	; 0x100
    3e1c:	4628      	mov	r0, r5
    3e1e:	e6fb      	b.n	3c18 <bt_recv+0x414>
	update_conn_param(conn);
    3e20:	4638      	mov	r0, r7
    3e22:	f7fe fa11 	bl	2248 <update_conn_param>
    3e26:	e5e0      	b.n	39ea <bt_recv+0x1e6>
    3e28:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("status: 0x%x", evt->status);
    3e2a:	6836      	ldr	r6, [r6, #0]
    3e2c:	f011 f9ba 	bl	151a4 <_impl_k_current_get>
    3e30:	9503      	str	r5, [sp, #12]
    3e32:	783b      	ldrb	r3, [r7, #0]
    3e34:	9302      	str	r3, [sp, #8]
    3e36:	9001      	str	r0, [sp, #4]
    3e38:	4b9b      	ldr	r3, [pc, #620]	; (40a8 <bt_recv+0x8a4>)
    3e3a:	4a97      	ldr	r2, [pc, #604]	; (4098 <bt_recv+0x894>)
    3e3c:	4997      	ldr	r1, [pc, #604]	; (409c <bt_recv+0x898>)
    3e3e:	489b      	ldr	r0, [pc, #620]	; (40ac <bt_recv+0x8a8>)
    3e40:	9500      	str	r5, [sp, #0]
    3e42:	47b0      	blx	r6
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3e44:	f06f 0120 	mvn.w	r1, #32
    3e48:	4899      	ldr	r0, [pc, #612]	; (40b0 <bt_recv+0x8ac>)
    3e4a:	f7fe f9eb 	bl	2224 <atomic_and>
	if (!evt->status) {
    3e4e:	783b      	ldrb	r3, [r7, #0]
    3e50:	b943      	cbnz	r3, 3e64 <bt_recv+0x660>
		memcpy(pub_key, evt->key, 64);
    3e52:	1c79      	adds	r1, r7, #1
    3e54:	2240      	movs	r2, #64	; 0x40
    3e56:	4897      	ldr	r0, [pc, #604]	; (40b4 <bt_recv+0x8b0>)
    3e58:	f7fe f80a 	bl	1e70 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3e5c:	2110      	movs	r1, #16
    3e5e:	4894      	ldr	r0, [pc, #592]	; (40b0 <bt_recv+0x8ac>)
    3e60:	f7fe f9cf 	bl	2202 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3e64:	4b94      	ldr	r3, [pc, #592]	; (40b8 <bt_recv+0x8b4>)
    3e66:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3e68:	1c7e      	adds	r6, r7, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3e6a:	2d00      	cmp	r5, #0
    3e6c:	f43f ad24 	beq.w	38b8 <bt_recv+0xb4>
		cb->func(evt->status ? NULL : evt->key);
    3e70:	783a      	ldrb	r2, [r7, #0]
    3e72:	682b      	ldr	r3, [r5, #0]
    3e74:	2a00      	cmp	r2, #0
    3e76:	bf0c      	ite	eq
    3e78:	4630      	moveq	r0, r6
    3e7a:	2000      	movne	r0, #0
    3e7c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3e7e:	686d      	ldr	r5, [r5, #4]
    3e80:	e7f3      	b.n	3e6a <bt_recv+0x666>
    3e82:	68a7      	ldr	r7, [r4, #8]
	BT_DBG("status: 0x%x", evt->status);
    3e84:	6836      	ldr	r6, [r6, #0]
    3e86:	f011 f98d 	bl	151a4 <_impl_k_current_get>
    3e8a:	9503      	str	r5, [sp, #12]
    3e8c:	783b      	ldrb	r3, [r7, #0]
    3e8e:	9500      	str	r5, [sp, #0]
	if (dh_key_cb) {
    3e90:	4d8a      	ldr	r5, [pc, #552]	; (40bc <bt_recv+0x8b8>)
	BT_DBG("status: 0x%x", evt->status);
    3e92:	9302      	str	r3, [sp, #8]
    3e94:	9001      	str	r0, [sp, #4]
    3e96:	4a80      	ldr	r2, [pc, #512]	; (4098 <bt_recv+0x894>)
    3e98:	4b89      	ldr	r3, [pc, #548]	; (40c0 <bt_recv+0x8bc>)
    3e9a:	4980      	ldr	r1, [pc, #512]	; (409c <bt_recv+0x898>)
    3e9c:	4883      	ldr	r0, [pc, #524]	; (40ac <bt_recv+0x8a8>)
    3e9e:	47b0      	blx	r6
	if (dh_key_cb) {
    3ea0:	682a      	ldr	r2, [r5, #0]
    3ea2:	2a00      	cmp	r2, #0
    3ea4:	f43f ad08 	beq.w	38b8 <bt_recv+0xb4>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3ea8:	783b      	ldrb	r3, [r7, #0]
    3eaa:	b923      	cbnz	r3, 3eb6 <bt_recv+0x6b2>
    3eac:	1c78      	adds	r0, r7, #1
    3eae:	4790      	blx	r2
		dh_key_cb = NULL;
    3eb0:	2300      	movs	r3, #0
    3eb2:	602b      	str	r3, [r5, #0]
    3eb4:	e500      	b.n	38b8 <bt_recv+0xb4>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3eb6:	2000      	movs	r0, #0
    3eb8:	e7f9      	b.n	3eae <bt_recv+0x6aa>
	u8_t num_reports = net_buf_pull_u8(buf);
    3eba:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ebc:	f00f ffed 	bl	13e9a <net_buf_simple_pull_u8>
	BT_DBG("Adv number of reports %u",  num_reports);
    3ec0:	6837      	ldr	r7, [r6, #0]
	u8_t num_reports = net_buf_pull_u8(buf);
    3ec2:	900a      	str	r0, [sp, #40]	; 0x28
    3ec4:	f011 f96e 	bl	151a4 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3eca:	9302      	str	r3, [sp, #8]
    3ecc:	9001      	str	r0, [sp, #4]
    3ece:	9503      	str	r5, [sp, #12]
    3ed0:	9500      	str	r5, [sp, #0]
    3ed2:	4b7c      	ldr	r3, [pc, #496]	; (40c4 <bt_recv+0x8c0>)
    3ed4:	4a70      	ldr	r2, [pc, #448]	; (4098 <bt_recv+0x894>)
    3ed6:	4971      	ldr	r1, [pc, #452]	; (409c <bt_recv+0x898>)
    3ed8:	487b      	ldr	r0, [pc, #492]	; (40c8 <bt_recv+0x8c4>)
    3eda:	47b8      	blx	r7
	while (num_reports--) {
    3edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ede:	2b00      	cmp	r3, #0
    3ee0:	f43f acea 	beq.w	38b8 <bt_recv+0xb4>
		info = (void *)buf->data;
    3ee4:	68a7      	ldr	r7, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ee8:	2109      	movs	r1, #9
    3eea:	f00f ffce 	bl	13e8a <net_buf_simple_pull>
		rssi = info->data[info->length];
    3eee:	7a3b      	ldrb	r3, [r7, #8]
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3ef0:	f8d6 9000 	ldr.w	r9, [r6]
		rssi = info->data[info->length];
    3ef4:	443b      	add	r3, r7
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3ef6:	f107 0801 	add.w	r8, r7, #1
		rssi = info->data[info->length];
    3efa:	f993 3009 	ldrsb.w	r3, [r3, #9]
    3efe:	930b      	str	r3, [sp, #44]	; 0x2c
    3f00:	f011 f950 	bl	151a4 <_impl_k_current_get>
    3f04:	4682      	mov	sl, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3f06:	4640      	mov	r0, r8
    3f08:	f7fe f85e 	bl	1fc8 <bt_addr_le_str>
    3f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f0e:	9506      	str	r5, [sp, #24]
    3f10:	9305      	str	r3, [sp, #20]
    3f12:	7a3b      	ldrb	r3, [r7, #8]
    3f14:	9304      	str	r3, [sp, #16]
    3f16:	783b      	ldrb	r3, [r7, #0]
    3f18:	9303      	str	r3, [sp, #12]
    3f1a:	9002      	str	r0, [sp, #8]
    3f1c:	4b69      	ldr	r3, [pc, #420]	; (40c4 <bt_recv+0x8c0>)
    3f1e:	495f      	ldr	r1, [pc, #380]	; (409c <bt_recv+0x898>)
    3f20:	486a      	ldr	r0, [pc, #424]	; (40cc <bt_recv+0x8c8>)
    3f22:	4a5d      	ldr	r2, [pc, #372]	; (4098 <bt_recv+0x894>)
    3f24:	e88d 0420 	stmia.w	sp, {r5, sl}
    3f28:	47c8      	blx	r9
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3f2a:	787b      	ldrb	r3, [r7, #1]
    3f2c:	3b02      	subs	r3, #2
    3f2e:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3f30:	4641      	mov	r1, r8
    3f32:	a810      	add	r0, sp, #64	; 0x40
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3f34:	f200 8098 	bhi.w	4068 <bt_recv+0x864>
			bt_addr_le_copy(&id_addr, &info->addr);
    3f38:	f7fe f960 	bl	21fc <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3f3c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    3f40:	3b02      	subs	r3, #2
    3f42:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		if (scan_dev_found_cb) {
    3f46:	f8df b18c 	ldr.w	fp, [pc, #396]	; 40d4 <bt_recv+0x8d0>
    3f4a:	f8db 3000 	ldr.w	r3, [fp]
    3f4e:	b1a3      	cbz	r3, 3f7a <bt_recv+0x776>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3f50:	9809      	ldr	r0, [sp, #36]	; 0x24
    3f52:	f00f ffb2 	bl	13eba <net_buf_simple_headroom>
			buf->len = info->length;
    3f56:	7a3b      	ldrb	r3, [r7, #8]
	state->len = buf->len;
    3f58:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    3f5c:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3f5e:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f62:	f8db b000 	ldr.w	fp, [fp]
    3f66:	783a      	ldrb	r2, [r7, #0]
    3f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3f6a:	a810      	add	r0, sp, #64	; 0x40
    3f6c:	47d8      	blx	fp
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3f6e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    3f70:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
    3f74:	fa13 f389 	uxtah	r3, r3, r9
    3f78:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3f7a:	2109      	movs	r1, #9
    3f7c:	484c      	ldr	r0, [pc, #304]	; (40b0 <bt_recv+0x8ac>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3f7e:	783a      	ldrb	r2, [r7, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3f80:	f7fe f9ea 	bl	2358 <atomic_test_bit>
    3f84:	4682      	mov	sl, r0
    3f86:	2800      	cmp	r0, #0
    3f88:	d164      	bne.n	4054 <bt_recv+0x850>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3f8a:	2a01      	cmp	r2, #1
    3f8c:	d862      	bhi.n	4054 <bt_recv+0x850>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3f8e:	2101      	movs	r1, #1
    3f90:	a810      	add	r0, sp, #64	; 0x40
    3f92:	f000 ff2d 	bl	4df0 <bt_conn_lookup_state_le>
	if (!conn) {
    3f96:	4681      	mov	r9, r0
    3f98:	2800      	cmp	r0, #0
    3f9a:	d05b      	beq.n	4054 <bt_recv+0x850>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3f9c:	2108      	movs	r1, #8
    3f9e:	4844      	ldr	r0, [pc, #272]	; (40b0 <bt_recv+0x8ac>)
    3fa0:	f7fe f9da 	bl	2358 <atomic_test_bit>
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d162      	bne.n	406e <bt_recv+0x86a>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3fa8:	2102      	movs	r1, #2
    3faa:	4841      	ldr	r0, [pc, #260]	; (40b0 <bt_recv+0x8ac>)
    3fac:	f7fe f9d4 	bl	2358 <atomic_test_bit>
    3fb0:	b110      	cbz	r0, 3fb8 <bt_recv+0x7b4>
			set_random_address(&bt_dev.id_addr.a);
    3fb2:	4847      	ldr	r0, [pc, #284]	; (40d0 <bt_recv+0x8cc>)
    3fb4:	f7fe fb14 	bl	25e0 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3fb8:	493a      	ldr	r1, [pc, #232]	; (40a4 <bt_recv+0x8a0>)
    3fba:	f109 004b 	add.w	r0, r9, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3fbe:	f109 0a52 	add.w	sl, r9, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3fc2:	f7fe f91b 	bl	21fc <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3fc6:	4641      	mov	r1, r8
    3fc8:	4650      	mov	r0, sl
    3fca:	f7fe f917 	bl	21fc <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3fce:	2119      	movs	r1, #25
    3fd0:	f242 000d 	movw	r0, #8205	; 0x200d
    3fd4:	f7fe f9ce 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    3fd8:	4683      	mov	fp, r0
    3fda:	2800      	cmp	r0, #0
    3fdc:	d04c      	beq.n	4078 <bt_recv+0x874>
	cp = net_buf_add(buf, sizeof(*cp));
    3fde:	2119      	movs	r1, #25
    3fe0:	3008      	adds	r0, #8
    3fe2:	f00f ff33 	bl	13e4c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3fe6:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3fe8:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    3fea:	2100      	movs	r1, #0
    3fec:	f7fd ff6c 	bl	1ec8 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3ff0:	2200      	movs	r2, #0
    3ff2:	2360      	movs	r3, #96	; 0x60
    3ff4:	f888 3000 	strb.w	r3, [r8]
    3ff8:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    3ffc:	f888 3002 	strb.w	r3, [r8, #2]
    4000:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    4004:	4651      	mov	r1, sl
    4006:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    400a:	920b      	str	r2, [sp, #44]	; 0x2c
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    400c:	f7fe f8f6 	bl	21fc <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    4010:	f899 304b 	ldrb.w	r3, [r9, #75]	; 0x4b
    4014:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    4018:	f8b9 305c 	ldrh.w	r3, [r9, #92]	; 0x5c
    401c:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    4020:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    4024:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    4028:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
    402c:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    4030:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
    4034:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    4038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    403a:	4659      	mov	r1, fp
    403c:	f242 000d 	movw	r0, #8205	; 0x200d
    4040:	f7fe fa06 	bl	2450 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    4044:	b9c0      	cbnz	r0, 4078 <bt_recv+0x874>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    4046:	4648      	mov	r0, r9
    4048:	2102      	movs	r1, #2
    404a:	f000 ffc3 	bl	4fd4 <bt_conn_set_state>
	bt_conn_unref(conn);
    404e:	4648      	mov	r0, r9
    4050:	f000 feec 	bl	4e2c <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    4054:	7a39      	ldrb	r1, [r7, #8]
    4056:	9809      	ldr	r0, [sp, #36]	; 0x24
    4058:	3101      	adds	r1, #1
    405a:	f00f ff16 	bl	13e8a <net_buf_simple_pull>
    405e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4060:	3b01      	subs	r3, #1
    4062:	b2db      	uxtb	r3, r3
    4064:	930a      	str	r3, [sp, #40]	; 0x28
    4066:	e739      	b.n	3edc <bt_recv+0x6d8>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    4068:	f7fe f8c8 	bl	21fc <bt_addr_le_copy>
    406c:	e76b      	b.n	3f46 <bt_recv+0x742>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    406e:	4650      	mov	r0, sl
    4070:	f7fe fa80 	bl	2574 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4074:	2800      	cmp	r0, #0
    4076:	d097      	beq.n	3fa8 <bt_recv+0x7a4>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    4078:	231f      	movs	r3, #31
    407a:	f889 3008 	strb.w	r3, [r9, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    407e:	2100      	movs	r1, #0
    4080:	4648      	mov	r0, r9
    4082:	f000 ffa7 	bl	4fd4 <bt_conn_set_state>
	bt_conn_unref(conn);
    4086:	4648      	mov	r0, r9
    4088:	f000 fed0 	bl	4e2c <bt_conn_unref>
	bt_le_scan_update(false);
    408c:	2000      	movs	r0, #0
    408e:	f7fe fcb5 	bl	29fc <bt_le_scan_update>
    4092:	e7df      	b.n	4054 <bt_recv+0x850>
    4094:	00016b9e 	.word	0x00016b9e
    4098:	0001697a 	.word	0x0001697a
    409c:	00017a29 	.word	0x00017a29
    40a0:	00017686 	.word	0x00017686
    40a4:	20003a60 	.word	0x20003a60
    40a8:	00016bdf 	.word	0x00016bdf
    40ac:	000176c5 	.word	0x000176c5
    40b0:	20003ad0 	.word	0x20003ad0
    40b4:	20000290 	.word	0x20000290
    40b8:	200002d0 	.word	0x200002d0
    40bc:	2000028c 	.word	0x2000028c
    40c0:	00016bf0 	.word	0x00016bf0
    40c4:	00016c42 	.word	0x00016c42
    40c8:	000176e7 	.word	0x000176e7
    40cc:	00017715 	.word	0x00017715
    40d0:	20003a61 	.word	0x20003a61
    40d4:	200002d8 	.word	0x200002d8
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    40d8:	f8d6 8000 	ldr.w	r8, [r6]
    40dc:	89a6      	ldrh	r6, [r4, #12]
    40de:	68a0      	ldr	r0, [r4, #8]
    40e0:	4631      	mov	r1, r6
    40e2:	f7fd ff15 	bl	1f10 <bt_hex>
    40e6:	e88d 00a0 	stmia.w	sp, {r5, r7}
    40ea:	9003      	str	r0, [sp, #12]
    40ec:	4b1c      	ldr	r3, [pc, #112]	; (4160 <bt_recv+0x95c>)
    40ee:	4a1d      	ldr	r2, [pc, #116]	; (4164 <bt_recv+0x960>)
    40f0:	491d      	ldr	r1, [pc, #116]	; (4168 <bt_recv+0x964>)
    40f2:	481e      	ldr	r0, [pc, #120]	; (416c <bt_recv+0x968>)
    40f4:	9504      	str	r5, [sp, #16]
    40f6:	9602      	str	r6, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    40f8:	47c0      	blx	r8
    40fa:	f7ff bbdd 	b.w	38b8 <bt_recv+0xb4>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    40fe:	e88d 0280 	stmia.w	sp, {r7, r9}
    4102:	9702      	str	r7, [sp, #8]
    4104:	4b1a      	ldr	r3, [pc, #104]	; (4170 <bt_recv+0x96c>)
    4106:	4a1b      	ldr	r2, [pc, #108]	; (4174 <bt_recv+0x970>)
    4108:	4917      	ldr	r1, [pc, #92]	; (4168 <bt_recv+0x964>)
    410a:	481b      	ldr	r0, [pc, #108]	; (4178 <bt_recv+0x974>)
    410c:	f8d8 5000 	ldr.w	r5, [r8]
    4110:	47a8      	blx	r5
		net_buf_unref(buf);
    4112:	4620      	mov	r0, r4
    4114:	f00f fe68 	bl	13de8 <net_buf_unref>
		return -EINVAL;
    4118:	f06f 0015 	mvn.w	r0, #21
    411c:	f7ff bbed 	b.w	38fa <bt_recv+0xf6>
	net_buf_pull(buf, sizeof(*hdr));
    4120:	f104 0308 	add.w	r3, r4, #8
    4124:	2102      	movs	r1, #2
    4126:	4618      	mov	r0, r3
    4128:	9309      	str	r3, [sp, #36]	; 0x24
    412a:	f00f feae 	bl	13e8a <net_buf_simple_pull>
	switch (hdr->evt) {
    412e:	f89a 7000 	ldrb.w	r7, [sl]
    4132:	2f05      	cmp	r7, #5
    4134:	f43f ac0f 	beq.w	3956 <bt_recv+0x152>
    4138:	2f3e      	cmp	r7, #62	; 0x3e
    413a:	f43f ac68 	beq.w	3a0e <bt_recv+0x20a>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    413e:	f8d6 8000 	ldr.w	r8, [r6]
    4142:	89a6      	ldrh	r6, [r4, #12]
    4144:	68a0      	ldr	r0, [r4, #8]
    4146:	4631      	mov	r1, r6
    4148:	f7fd fee2 	bl	1f10 <bt_hex>
    414c:	9504      	str	r5, [sp, #16]
    414e:	9003      	str	r0, [sp, #12]
    4150:	9602      	str	r6, [sp, #8]
    4152:	e88d 00a0 	stmia.w	sp, {r5, r7}
    4156:	4b09      	ldr	r3, [pc, #36]	; (417c <bt_recv+0x978>)
    4158:	4a02      	ldr	r2, [pc, #8]	; (4164 <bt_recv+0x960>)
    415a:	4903      	ldr	r1, [pc, #12]	; (4168 <bt_recv+0x964>)
    415c:	4808      	ldr	r0, [pc, #32]	; (4180 <bt_recv+0x97c>)
    415e:	e7cb      	b.n	40f8 <bt_recv+0x8f4>
    4160:	00016c50 	.word	0x00016c50
    4164:	00017a64 	.word	0x00017a64
    4168:	00017a29 	.word	0x00017a29
    416c:	0001774b 	.word	0x0001774b
    4170:	00016dc2 	.word	0x00016dc2
    4174:	000179e1 	.word	0x000179e1
    4178:	000177b2 	.word	0x000177b2
    417c:	00016c62 	.word	0x00016c62
    4180:	00017780 	.word	0x00017780

00004184 <bt_recv_prio>:
{
    4184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4188:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    418a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    418e:	4e86      	ldr	r6, [pc, #536]	; (43a8 <bt_recv_prio+0x224>)
    4190:	4c86      	ldr	r4, [pc, #536]	; (43ac <bt_recv_prio+0x228>)
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4192:	2b01      	cmp	r3, #1
{
    4194:	b089      	sub	sp, #36	; 0x24
    4196:	4605      	mov	r5, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4198:	d00d      	beq.n	41b6 <bt_recv_prio+0x32>
    419a:	9401      	str	r4, [sp, #4]
    419c:	9400      	str	r4, [sp, #0]
    419e:	6834      	ldr	r4, [r6, #0]
    41a0:	4b83      	ldr	r3, [pc, #524]	; (43b0 <bt_recv_prio+0x22c>)
    41a2:	4a84      	ldr	r2, [pc, #528]	; (43b4 <bt_recv_prio+0x230>)
    41a4:	4984      	ldr	r1, [pc, #528]	; (43b8 <bt_recv_prio+0x234>)
    41a6:	4885      	ldr	r0, [pc, #532]	; (43bc <bt_recv_prio+0x238>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    41a8:	47a0      	blx	r4
    41aa:	4040      	eors	r0, r0
    41ac:	f380 8811 	msr	BASEPRI, r0
    41b0:	f04f 0004 	mov.w	r0, #4
    41b4:	df02      	svc	2
    41b6:	8982      	ldrh	r2, [r0, #12]
    41b8:	2a01      	cmp	r2, #1
    41ba:	d807      	bhi.n	41cc <bt_recv_prio+0x48>
    41bc:	9401      	str	r4, [sp, #4]
    41be:	9400      	str	r4, [sp, #0]
    41c0:	6834      	ldr	r4, [r6, #0]
    41c2:	4b7b      	ldr	r3, [pc, #492]	; (43b0 <bt_recv_prio+0x22c>)
    41c4:	4a7b      	ldr	r2, [pc, #492]	; (43b4 <bt_recv_prio+0x230>)
    41c6:	497c      	ldr	r1, [pc, #496]	; (43b8 <bt_recv_prio+0x234>)
    41c8:	487d      	ldr	r0, [pc, #500]	; (43c0 <bt_recv_prio+0x23c>)
    41ca:	e7ed      	b.n	41a8 <bt_recv_prio+0x24>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    41cc:	f898 2000 	ldrb.w	r2, [r8]
    41d0:	2a13      	cmp	r2, #19
    41d2:	f200 80e1 	bhi.w	4398 <bt_recv_prio+0x214>
    41d6:	4093      	lsls	r3, r2
    41d8:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    41dc:	f000 80dc 	beq.w	4398 <bt_recv_prio+0x214>
	net_buf_pull(buf, sizeof(*hdr));
    41e0:	f100 0708 	add.w	r7, r0, #8
    41e4:	2102      	movs	r1, #2
    41e6:	4638      	mov	r0, r7
    41e8:	f00f fe4f 	bl	13e8a <net_buf_simple_pull>
	switch (hdr->evt) {
    41ec:	f898 3000 	ldrb.w	r3, [r8]
    41f0:	2b0f      	cmp	r3, #15
    41f2:	d02d      	beq.n	4250 <bt_recv_prio+0xcc>
    41f4:	2b13      	cmp	r3, #19
    41f6:	d04c      	beq.n	4292 <bt_recv_prio+0x10e>
    41f8:	2b0e      	cmp	r3, #14
    41fa:	f040 80c2 	bne.w	4382 <bt_recv_prio+0x1fe>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    41fe:	68ab      	ldr	r3, [r5, #8]
	BT_DBG("opcode 0x%04x", opcode);
    4200:	6836      	ldr	r6, [r6, #0]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4202:	f8b3 8001 	ldrh.w	r8, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4206:	f893 9000 	ldrb.w	r9, [r3]
    420a:	f010 ffcb 	bl	151a4 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    420e:	4b6d      	ldr	r3, [pc, #436]	; (43c4 <bt_recv_prio+0x240>)
    4210:	4a6d      	ldr	r2, [pc, #436]	; (43c8 <bt_recv_prio+0x244>)
    4212:	9001      	str	r0, [sp, #4]
    4214:	4968      	ldr	r1, [pc, #416]	; (43b8 <bt_recv_prio+0x234>)
    4216:	486d      	ldr	r0, [pc, #436]	; (43cc <bt_recv_prio+0x248>)
    4218:	9403      	str	r4, [sp, #12]
    421a:	f8cd 8008 	str.w	r8, [sp, #8]
    421e:	9400      	str	r4, [sp, #0]
    4220:	47b0      	blx	r6
	net_buf_pull(buf, sizeof(*evt));
    4222:	2103      	movs	r1, #3
    4224:	4638      	mov	r0, r7
    4226:	f00f fe30 	bl	13e8a <net_buf_simple_pull>
	status = buf->data[0];
    422a:	68ab      	ldr	r3, [r5, #8]
	hci_cmd_done(opcode, status, buf);
    422c:	462a      	mov	r2, r5
    422e:	7819      	ldrb	r1, [r3, #0]
    4230:	4640      	mov	r0, r8
    4232:	f7fe f817 	bl	2264 <hci_cmd_done>
	if (ncmd) {
    4236:	f1b9 0f00 	cmp.w	r9, #0
    423a:	d002      	beq.n	4242 <bt_recv_prio+0xbe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    423c:	4864      	ldr	r0, [pc, #400]	; (43d0 <bt_recv_prio+0x24c>)
    423e:	f010 ffe5 	bl	1520c <_impl_k_sem_give>
	net_buf_unref(buf);
    4242:	4628      	mov	r0, r5
    4244:	f00f fdd0 	bl	13de8 <net_buf_unref>
}
    4248:	2000      	movs	r0, #0
    424a:	b009      	add	sp, #36	; 0x24
    424c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4250:	f8d5 8008 	ldr.w	r8, [r5, #8]
	BT_DBG("opcode 0x%04x", opcode);
    4254:	6836      	ldr	r6, [r6, #0]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4256:	f8b8 9002 	ldrh.w	r9, [r8, #2]
	u8_t ncmd = evt->ncmd;
    425a:	f898 a001 	ldrb.w	sl, [r8, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    425e:	f010 ffa1 	bl	151a4 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    4262:	4a59      	ldr	r2, [pc, #356]	; (43c8 <bt_recv_prio+0x244>)
    4264:	9001      	str	r0, [sp, #4]
    4266:	4b5b      	ldr	r3, [pc, #364]	; (43d4 <bt_recv_prio+0x250>)
    4268:	4953      	ldr	r1, [pc, #332]	; (43b8 <bt_recv_prio+0x234>)
    426a:	4858      	ldr	r0, [pc, #352]	; (43cc <bt_recv_prio+0x248>)
    426c:	9403      	str	r4, [sp, #12]
    426e:	f8cd 9008 	str.w	r9, [sp, #8]
    4272:	9400      	str	r4, [sp, #0]
    4274:	47b0      	blx	r6
	net_buf_pull(buf, sizeof(*evt));
    4276:	2104      	movs	r1, #4
    4278:	4638      	mov	r0, r7
    427a:	f00f fe06 	bl	13e8a <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    427e:	462a      	mov	r2, r5
    4280:	f898 1000 	ldrb.w	r1, [r8]
    4284:	4648      	mov	r0, r9
    4286:	f7fd ffed 	bl	2264 <hci_cmd_done>
	if (ncmd) {
    428a:	f1ba 0f00 	cmp.w	sl, #0
    428e:	d0d8      	beq.n	4242 <bt_recv_prio+0xbe>
    4290:	e7d4      	b.n	423c <bt_recv_prio+0xb8>
    4292:	f8d5 b008 	ldr.w	fp, [r5, #8]
	BT_DBG("num_handles %u", evt->num_handles);
    4296:	6837      	ldr	r7, [r6, #0]
    4298:	f010 ff84 	bl	151a4 <_impl_k_current_get>
    429c:	9403      	str	r4, [sp, #12]
    429e:	f89b 3000 	ldrb.w	r3, [fp]
    42a2:	9302      	str	r3, [sp, #8]
    42a4:	9001      	str	r0, [sp, #4]
    42a6:	9400      	str	r4, [sp, #0]
    42a8:	4b4b      	ldr	r3, [pc, #300]	; (43d8 <bt_recv_prio+0x254>)
    42aa:	4a47      	ldr	r2, [pc, #284]	; (43c8 <bt_recv_prio+0x244>)
    42ac:	4942      	ldr	r1, [pc, #264]	; (43b8 <bt_recv_prio+0x234>)
    42ae:	484b      	ldr	r0, [pc, #300]	; (43dc <bt_recv_prio+0x258>)
    42b0:	47b8      	blx	r7
	for (i = 0; i < evt->num_handles; i++) {
    42b2:	f04f 0900 	mov.w	r9, #0
    42b6:	f89b 3000 	ldrb.w	r3, [fp]
    42ba:	4599      	cmp	r9, r3
    42bc:	dac1      	bge.n	4242 <bt_recv_prio+0xbe>
    42be:	eb0b 0389 	add.w	r3, fp, r9, lsl #2
		BT_DBG("handle %u count %u", handle, count);
    42c2:	f8d6 8000 	ldr.w	r8, [r6]
		handle = sys_le16_to_cpu(evt->h[i].handle);
    42c6:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    42ca:	f8b3 7003 	ldrh.w	r7, [r3, #3]
    42ce:	f010 ff69 	bl	151a4 <_impl_k_current_get>
		BT_DBG("handle %u count %u", handle, count);
    42d2:	9404      	str	r4, [sp, #16]
    42d4:	9001      	str	r0, [sp, #4]
    42d6:	9703      	str	r7, [sp, #12]
    42d8:	f8cd a008 	str.w	sl, [sp, #8]
    42dc:	9400      	str	r4, [sp, #0]
    42de:	4b3e      	ldr	r3, [pc, #248]	; (43d8 <bt_recv_prio+0x254>)
    42e0:	4a39      	ldr	r2, [pc, #228]	; (43c8 <bt_recv_prio+0x244>)
    42e2:	4935      	ldr	r1, [pc, #212]	; (43b8 <bt_recv_prio+0x234>)
    42e4:	483e      	ldr	r0, [pc, #248]	; (43e0 <bt_recv_prio+0x25c>)
    42e6:	47c0      	blx	r8
	__asm__ volatile(
    42e8:	f04f 0320 	mov.w	r3, #32
    42ec:	f3ef 8211 	mrs	r2, BASEPRI
    42f0:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    42f4:	4650      	mov	r0, sl
    42f6:	9207      	str	r2, [sp, #28]
    42f8:	f000 fd4a 	bl	4d90 <bt_conn_lookup_handle>
		if (!conn) {
    42fc:	4680      	mov	r8, r0
    42fe:	b970      	cbnz	r0, 431e <bt_recv_prio+0x19a>
			BT_ERR("No connection for handle %u", handle);
    4300:	e88d 0410 	stmia.w	sp, {r4, sl}
    4304:	9402      	str	r4, [sp, #8]
    4306:	6837      	ldr	r7, [r6, #0]
    4308:	4b33      	ldr	r3, [pc, #204]	; (43d8 <bt_recv_prio+0x254>)
    430a:	4a2a      	ldr	r2, [pc, #168]	; (43b4 <bt_recv_prio+0x230>)
    430c:	492a      	ldr	r1, [pc, #168]	; (43b8 <bt_recv_prio+0x234>)
    430e:	4835      	ldr	r0, [pc, #212]	; (43e4 <bt_recv_prio+0x260>)
    4310:	47b8      	blx	r7
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4312:	9b07      	ldr	r3, [sp, #28]
    4314:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < evt->num_handles; i++) {
    4318:	f109 0901 	add.w	r9, r9, #1
    431c:	e7cb      	b.n	42b6 <bt_recv_prio+0x132>
    431e:	9b07      	ldr	r3, [sp, #28]
    4320:	f383 8811 	msr	BASEPRI, r3
			k_fifo_put(&conn->tx_notify, node);
    4324:	f100 0a18 	add.w	sl, r0, #24
		while (count--) {
    4328:	b1f7      	cbz	r7, 4368 <bt_recv_prio+0x1e4>
	__asm__ volatile(
    432a:	f04f 0320 	mov.w	r3, #32
    432e:	f3ef 8011 	mrs	r0, BASEPRI
    4332:	f383 8811 	msr	BASEPRI, r3
    4336:	f8d8 1010 	ldr.w	r1, [r8, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    433a:	b141      	cbz	r1, 434e <bt_recv_prio+0x1ca>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    433c:	f8d8 2014 	ldr.w	r2, [r8, #20]
	return node->next;
    4340:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    4342:	f8c8 3010 	str.w	r3, [r8, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4346:	4291      	cmp	r1, r2
	list->tail = node;
    4348:	bf08      	it	eq
    434a:	f8c8 3014 	streq.w	r3, [r8, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    434e:	f380 8811 	msr	BASEPRI, r0
    4352:	3f01      	subs	r7, #1
    4354:	b2bf      	uxth	r7, r7
			if (!node) {
    4356:	b959      	cbnz	r1, 4370 <bt_recv_prio+0x1ec>
				BT_ERR("packets count mismatch");
    4358:	9401      	str	r4, [sp, #4]
    435a:	9400      	str	r4, [sp, #0]
    435c:	6837      	ldr	r7, [r6, #0]
    435e:	4b1e      	ldr	r3, [pc, #120]	; (43d8 <bt_recv_prio+0x254>)
    4360:	4a14      	ldr	r2, [pc, #80]	; (43b4 <bt_recv_prio+0x230>)
    4362:	4915      	ldr	r1, [pc, #84]	; (43b8 <bt_recv_prio+0x234>)
    4364:	4820      	ldr	r0, [pc, #128]	; (43e8 <bt_recv_prio+0x264>)
    4366:	47b8      	blx	r7
		bt_conn_unref(conn);
    4368:	4640      	mov	r0, r8
    436a:	f000 fd5f 	bl	4e2c <bt_conn_unref>
    436e:	e7d3      	b.n	4318 <bt_recv_prio+0x194>
			k_fifo_put(&conn->tx_notify, node);
    4370:	4650      	mov	r0, sl
    4372:	f010 fb9d 	bl	14ab0 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4376:	4640      	mov	r0, r8
    4378:	f000 f9d8 	bl	472c <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    437c:	f010 ff46 	bl	1520c <_impl_k_sem_give>
    4380:	e7d2      	b.n	4328 <bt_recv_prio+0x1a4>
		net_buf_unref(buf);
    4382:	4628      	mov	r0, r5
    4384:	f00f fd30 	bl	13de8 <net_buf_unref>
		BT_ASSERT(0);
    4388:	9401      	str	r4, [sp, #4]
    438a:	9400      	str	r4, [sp, #0]
    438c:	6834      	ldr	r4, [r6, #0]
    438e:	4b08      	ldr	r3, [pc, #32]	; (43b0 <bt_recv_prio+0x22c>)
    4390:	4a08      	ldr	r2, [pc, #32]	; (43b4 <bt_recv_prio+0x230>)
    4392:	4909      	ldr	r1, [pc, #36]	; (43b8 <bt_recv_prio+0x234>)
    4394:	4815      	ldr	r0, [pc, #84]	; (43ec <bt_recv_prio+0x268>)
    4396:	e707      	b.n	41a8 <bt_recv_prio+0x24>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    4398:	9401      	str	r4, [sp, #4]
    439a:	9400      	str	r4, [sp, #0]
    439c:	6834      	ldr	r4, [r6, #0]
    439e:	4b04      	ldr	r3, [pc, #16]	; (43b0 <bt_recv_prio+0x22c>)
    43a0:	4a04      	ldr	r2, [pc, #16]	; (43b4 <bt_recv_prio+0x230>)
    43a2:	4905      	ldr	r1, [pc, #20]	; (43b8 <bt_recv_prio+0x234>)
    43a4:	4812      	ldr	r0, [pc, #72]	; (43f0 <bt_recv_prio+0x26c>)
    43a6:	e6ff      	b.n	41a8 <bt_recv_prio+0x24>
    43a8:	20003a5c 	.word	0x20003a5c
    43ac:	000161ba 	.word	0x000161ba
    43b0:	00016dca 	.word	0x00016dca
    43b4:	000179e1 	.word	0x000179e1
    43b8:	00017a29 	.word	0x00017a29
    43bc:	00017815 	.word	0x00017815
    43c0:	00017859 	.word	0x00017859
    43c4:	00016c22 	.word	0x00016c22
    43c8:	0001697a 	.word	0x0001697a
    43cc:	00017893 	.word	0x00017893
    43d0:	20003b08 	.word	0x20003b08
    43d4:	00016c33 	.word	0x00016c33
    43d8:	00016b17 	.word	0x00016b17
    43dc:	000178b6 	.word	0x000178b6
    43e0:	000178da 	.word	0x000178da
    43e4:	00017902 	.word	0x00017902
    43e8:	0001792e 	.word	0x0001792e
    43ec:	00017955 	.word	0x00017955
    43f0:	00017978 	.word	0x00017978

000043f4 <bt_hci_driver_register>:
{
    43f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (bt_dev.drv) {
    43f6:	4b13      	ldr	r3, [pc, #76]	; (4444 <bt_hci_driver_register+0x50>)
    43f8:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
    43fc:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    43fe:	b9d4      	cbnz	r4, 4436 <bt_hci_driver_register+0x42>
	if (!drv->open || !drv->send) {
    4400:	68c2      	ldr	r2, [r0, #12]
    4402:	b1da      	cbz	r2, 443c <bt_hci_driver_register+0x48>
    4404:	6902      	ldr	r2, [r0, #16]
    4406:	b1ca      	cbz	r2, 443c <bt_hci_driver_register+0x48>
	bt_dev.drv = drv;
    4408:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    440c:	4b0e      	ldr	r3, [pc, #56]	; (4448 <bt_hci_driver_register+0x54>)
    440e:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4410:	f010 fec8 	bl	151a4 <_impl_k_current_get>
    4414:	4a0d      	ldr	r2, [pc, #52]	; (444c <bt_hci_driver_register+0x58>)
    4416:	682b      	ldr	r3, [r5, #0]
    4418:	9203      	str	r2, [sp, #12]
    441a:	2b00      	cmp	r3, #0
    441c:	bf08      	it	eq
    441e:	4613      	moveq	r3, r2
    4420:	9302      	str	r3, [sp, #8]
    4422:	9001      	str	r0, [sp, #4]
    4424:	9200      	str	r2, [sp, #0]
    4426:	480a      	ldr	r0, [pc, #40]	; (4450 <bt_hci_driver_register+0x5c>)
    4428:	4b0a      	ldr	r3, [pc, #40]	; (4454 <bt_hci_driver_register+0x60>)
    442a:	4a0b      	ldr	r2, [pc, #44]	; (4458 <bt_hci_driver_register+0x64>)
    442c:	490b      	ldr	r1, [pc, #44]	; (445c <bt_hci_driver_register+0x68>)
    442e:	47b0      	blx	r6
	return 0;
    4430:	4620      	mov	r0, r4
}
    4432:	b004      	add	sp, #16
    4434:	bd70      	pop	{r4, r5, r6, pc}
		return -EALREADY;
    4436:	f06f 0044 	mvn.w	r0, #68	; 0x44
    443a:	e7fa      	b.n	4432 <bt_hci_driver_register+0x3e>
		return -EINVAL;
    443c:	f06f 0015 	mvn.w	r0, #21
    4440:	e7f7      	b.n	4432 <bt_hci_driver_register+0x3e>
    4442:	bf00      	nop
    4444:	20003a60 	.word	0x20003a60
    4448:	20003a5c 	.word	0x20003a5c
    444c:	000161ba 	.word	0x000161ba
    4450:	000170ee 	.word	0x000170ee
    4454:	00016dd7 	.word	0x00016dd7
    4458:	0001697a 	.word	0x0001697a
    445c:	00017a29 	.word	0x00017a29

00004460 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    4460:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    4462:	4d2b      	ldr	r5, [pc, #172]	; (4510 <bt_enable+0xb0>)
    4464:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    4468:	b086      	sub	sp, #24
    446a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    446c:	b973      	cbnz	r3, 448c <bt_enable+0x2c>
		BT_ERR("No HCI driver registered");
    446e:	4b29      	ldr	r3, [pc, #164]	; (4514 <bt_enable+0xb4>)
    4470:	9301      	str	r3, [sp, #4]
    4472:	9300      	str	r3, [sp, #0]
    4474:	4b28      	ldr	r3, [pc, #160]	; (4518 <bt_enable+0xb8>)
    4476:	4a29      	ldr	r2, [pc, #164]	; (451c <bt_enable+0xbc>)
    4478:	681c      	ldr	r4, [r3, #0]
    447a:	4929      	ldr	r1, [pc, #164]	; (4520 <bt_enable+0xc0>)
    447c:	4b29      	ldr	r3, [pc, #164]	; (4524 <bt_enable+0xc4>)
    447e:	482a      	ldr	r0, [pc, #168]	; (4528 <bt_enable+0xc8>)
    4480:	47a0      	blx	r4
		return -ENODEV;
    4482:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    4486:	4620      	mov	r0, r4
    4488:	b006      	add	sp, #24
    448a:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    448c:	2101      	movs	r1, #1
    448e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    4492:	f7fd feb6 	bl	2202 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4496:	f010 0001 	ands.w	r0, r0, #1
    449a:	d135      	bne.n	4508 <bt_enable+0xa8>
	ready_cb = cb;
    449c:	4b23      	ldr	r3, [pc, #140]	; (452c <bt_enable+0xcc>)

    449e:	4924      	ldr	r1, [pc, #144]	; (4530 <bt_enable+0xd0>)
    44a0:	601e      	str	r6, [r3, #0]
    44a2:	f06f 0308 	mvn.w	r3, #8
    44a6:	9005      	str	r0, [sp, #20]
    44a8:	9004      	str	r0, [sp, #16]
    44aa:	9303      	str	r3, [sp, #12]
    44ac:	9002      	str	r0, [sp, #8]
    44ae:	9001      	str	r0, [sp, #4]
    44b0:	9000      	str	r0, [sp, #0]
    44b2:	4b20      	ldr	r3, [pc, #128]	; (4534 <bt_enable+0xd4>)
    44b4:	4820      	ldr	r0, [pc, #128]	; (4538 <bt_enable+0xd8>)
    44b6:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    44ba:	f011 f8c3 	bl	15644 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    44be:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    44c2:	68db      	ldr	r3, [r3, #12]
    44c4:	4798      	blx	r3
	if (err) {
    44c6:	4604      	mov	r4, r0
    44c8:	b158      	cbz	r0, 44e2 <bt_enable+0x82>
		BT_ERR("HCI driver open failed (%d)", err);
    44ca:	4b12      	ldr	r3, [pc, #72]	; (4514 <bt_enable+0xb4>)
    44cc:	9302      	str	r3, [sp, #8]
    44ce:	e88d 0018 	stmia.w	sp, {r3, r4}
    44d2:	4b11      	ldr	r3, [pc, #68]	; (4518 <bt_enable+0xb8>)
    44d4:	4a11      	ldr	r2, [pc, #68]	; (451c <bt_enable+0xbc>)
    44d6:	681d      	ldr	r5, [r3, #0]
    44d8:	4911      	ldr	r1, [pc, #68]	; (4520 <bt_enable+0xc0>)
    44da:	4b12      	ldr	r3, [pc, #72]	; (4524 <bt_enable+0xc4>)
    44dc:	4817      	ldr	r0, [pc, #92]	; (453c <bt_enable+0xdc>)
    44de:	47a8      	blx	r5
		return err;
    44e0:	e7d1      	b.n	4486 <bt_enable+0x26>
	if (!cb) {
    44e2:	b926      	cbnz	r6, 44ee <bt_enable+0x8e>
}
    44e4:	b006      	add	sp, #24
    44e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    44ea:	f7fe bab9 	b.w	2a60 <bt_init>
    44ee:	2101      	movs	r1, #1
    44f0:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    44f4:	f7fd fe85 	bl	2202 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    44f8:	07c3      	lsls	r3, r0, #31
    44fa:	d4c4      	bmi.n	4486 <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    44fc:	f105 0164 	add.w	r1, r5, #100	; 0x64
    4500:	480f      	ldr	r0, [pc, #60]	; (4540 <bt_enable+0xe0>)
    4502:	f010 fad5 	bl	14ab0 <k_queue_append>
    4506:	e7be      	b.n	4486 <bt_enable+0x26>
		return -EALREADY;
    4508:	f06f 0444 	mvn.w	r4, #68	; 0x44
    450c:	e7bb      	b.n	4486 <bt_enable+0x26>
    450e:	bf00      	nop
    4510:	20003a60 	.word	0x20003a60
    4514:	000161ba 	.word	0x000161ba
    4518:	20003a5c 	.word	0x20003a5c
    451c:	000179e1 	.word	0x000179e1
    4520:	00017a29 	.word	0x00017a29
    4524:	00016dee 	.word	0x00016dee
    4528:	00016f24 	.word	0x00016f24
    452c:	200002d4 	.word	0x200002d4
    4530:	20001a08 	.word	0x20001a08
    4534:	0000358d 	.word	0x0000358d
    4538:	200002dc 	.word	0x200002dc
    453c:	00016f4d 	.word	0x00016f4d
    4540:	20001988 	.word	0x20001988

00004544 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    4544:	2000      	movs	r0, #0
    4546:	4770      	bx	lr

00004548 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    4548:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    454a:	7803      	ldrb	r3, [r0, #0]
    454c:	2b01      	cmp	r3, #1
{
    454e:	4605      	mov	r5, r0
    4550:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4552:	d810      	bhi.n	4576 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    4554:	7843      	ldrb	r3, [r0, #1]
    4556:	2b01      	cmp	r3, #1
    4558:	d80d      	bhi.n	4576 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    455a:	8841      	ldrh	r1, [r0, #2]
    455c:	1f0b      	subs	r3, r1, #4
    455e:	b29b      	uxth	r3, r3
    4560:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    4564:	4283      	cmp	r3, r0
    4566:	d806      	bhi.n	4576 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    4568:	88aa      	ldrh	r2, [r5, #4]
    456a:	1f13      	subs	r3, r2, #4
    456c:	b29b      	uxth	r3, r3
    456e:	4283      	cmp	r3, r0
    4570:	d801      	bhi.n	4576 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    4572:	4291      	cmp	r1, r2
    4574:	d22b      	bcs.n	45ce <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    4576:	f06f 0415 	mvn.w	r4, #21
    457a:	e00e      	b.n	459a <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    457c:	2108      	movs	r1, #8
    457e:	4819      	ldr	r0, [pc, #100]	; (45e4 <bt_le_scan_start+0x9c>)
    4580:	f7fd feea 	bl	2358 <atomic_test_bit>
    4584:	b158      	cbz	r0, 459e <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    4586:	4610      	mov	r0, r2
    4588:	f7fd fff4 	bl	2574 <set_le_scan_enable>
		if (err) {
    458c:	4604      	mov	r4, r0
    458e:	b130      	cbz	r0, 459e <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4590:	f46f 7100 	mvn.w	r1, #512	; 0x200
    4594:	4813      	ldr	r0, [pc, #76]	; (45e4 <bt_le_scan_start+0x9c>)
    4596:	f7fd fe45 	bl	2224 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    459a:	4620      	mov	r0, r4
    459c:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    459e:	786b      	ldrb	r3, [r5, #1]
    45a0:	b17b      	cbz	r3, 45c2 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    45a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    45a6:	480f      	ldr	r0, [pc, #60]	; (45e4 <bt_le_scan_start+0x9c>)
    45a8:	f7fd fe2b 	bl	2202 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    45ac:	88aa      	ldrh	r2, [r5, #4]
    45ae:	8869      	ldrh	r1, [r5, #2]
    45b0:	7828      	ldrb	r0, [r5, #0]
    45b2:	f7fe f9d3 	bl	295c <start_le_scan>
	if (err) {
    45b6:	4604      	mov	r4, r0
    45b8:	2800      	cmp	r0, #0
    45ba:	d1e9      	bne.n	4590 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    45bc:	4b0a      	ldr	r3, [pc, #40]	; (45e8 <bt_le_scan_start+0xa0>)
    45be:	601e      	str	r6, [r3, #0]
	return 0;
    45c0:	e7eb      	b.n	459a <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    45c2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    45c6:	4807      	ldr	r0, [pc, #28]	; (45e4 <bt_le_scan_start+0x9c>)
    45c8:	f7fd fe2c 	bl	2224 <atomic_and>
    45cc:	e7ee      	b.n	45ac <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    45ce:	f44f 7100 	mov.w	r1, #512	; 0x200
    45d2:	4804      	ldr	r0, [pc, #16]	; (45e4 <bt_le_scan_start+0x9c>)
    45d4:	f7fd fe15 	bl	2202 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    45d8:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    45dc:	d0ce      	beq.n	457c <bt_le_scan_start+0x34>
		return -EALREADY;
    45de:	f06f 0444 	mvn.w	r4, #68	; 0x44
    45e2:	e7da      	b.n	459a <bt_le_scan_start+0x52>
    45e4:	20003ad0 	.word	0x20003ad0
    45e8:	200002d8 	.word	0x200002d8

000045ec <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    45ec:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    45ee:	f46f 7100 	mvn.w	r1, #512	; 0x200
    45f2:	4807      	ldr	r0, [pc, #28]	; (4610 <bt_le_scan_stop+0x24>)
    45f4:	f7fd fe16 	bl	2224 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    45f8:	0583      	lsls	r3, r0, #22
    45fa:	d506      	bpl.n	460a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    45fc:	4b05      	ldr	r3, [pc, #20]	; (4614 <bt_le_scan_stop+0x28>)
    45fe:	2000      	movs	r0, #0
    4600:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    4602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    4606:	f7fe b9f9 	b.w	29fc <bt_le_scan_update>
}
    460a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    460e:	bd08      	pop	{r3, pc}
    4610:	20003ad0 	.word	0x20003ad0
    4614:	200002d8 	.word	0x200002d8

00004618 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    4618:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    461a:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    461e:	2b01      	cmp	r3, #1
{
    4620:	4605      	mov	r5, r0
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    4622:	d00a      	beq.n	463a <bt_buf_get_rx+0x22>
    4624:	f241 335a 	movw	r3, #4954	; 0x135a
    4628:	4a0a      	ldr	r2, [pc, #40]	; (4654 <bt_buf_get_rx+0x3c>)
    462a:	490b      	ldr	r1, [pc, #44]	; (4658 <bt_buf_get_rx+0x40>)
    462c:	480b      	ldr	r0, [pc, #44]	; (465c <bt_buf_get_rx+0x44>)
    462e:	f7fc fcad 	bl	f8c <printk>
    4632:	480b      	ldr	r0, [pc, #44]	; (4660 <bt_buf_get_rx+0x48>)
    4634:	f7fc fcaa 	bl	f8c <printk>
    4638:	e7fe      	b.n	4638 <bt_buf_get_rx+0x20>
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    463a:	480a      	ldr	r0, [pc, #40]	; (4664 <bt_buf_get_rx+0x4c>)
    463c:	f00f fba4 	bl	13d88 <net_buf_alloc_fixed>
#endif

	if (buf) {
    4640:	4604      	mov	r4, r0
    4642:	b120      	cbz	r0, 464e <bt_buf_get_rx+0x36>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4644:	2100      	movs	r1, #0
    4646:	3008      	adds	r0, #8
    4648:	f00f fbbd 	bl	13dc6 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    464c:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    464e:	4620      	mov	r0, r4
    4650:	bd38      	pop	{r3, r4, r5, pc}
    4652:	bf00      	nop
    4654:	00016fa9 	.word	0x00016fa9
    4658:	00016e31 	.word	0x00016e31
    465c:	0001619c 	.word	0x0001619c
    4660:	00016e5d 	.word	0x00016e5d
    4664:	20003f8c 	.word	0x20003f8c

00004668 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    4668:	b5f0      	push	{r4, r5, r6, r7, lr}
    466a:	4606      	mov	r6, r0
    466c:	b085      	sub	sp, #20
	__asm__ volatile(
    466e:	f04f 0320 	mov.w	r3, #32
    4672:	f3ef 8211 	mrs	r2, BASEPRI
    4676:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    467a:	4b14      	ldr	r3, [pc, #80]	; (46cc <bt_buf_get_cmd_complete+0x64>)
	bt_dev.sent_cmd = NULL;
    467c:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    467e:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    4682:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4686:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    468a:	4b11      	ldr	r3, [pc, #68]	; (46d0 <bt_buf_get_cmd_complete+0x68>)
    468c:	681f      	ldr	r7, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    468e:	f010 fd89 	bl	151a4 <_impl_k_current_get>
    4692:	4b10      	ldr	r3, [pc, #64]	; (46d4 <bt_buf_get_cmd_complete+0x6c>)
    4694:	9303      	str	r3, [sp, #12]
    4696:	9001      	str	r0, [sp, #4]
    4698:	9300      	str	r3, [sp, #0]
    469a:	9402      	str	r4, [sp, #8]
    469c:	4b0e      	ldr	r3, [pc, #56]	; (46d8 <bt_buf_get_cmd_complete+0x70>)
    469e:	4a0f      	ldr	r2, [pc, #60]	; (46dc <bt_buf_get_cmd_complete+0x74>)
    46a0:	490f      	ldr	r1, [pc, #60]	; (46e0 <bt_buf_get_cmd_complete+0x78>)
    46a2:	4810      	ldr	r0, [pc, #64]	; (46e4 <bt_buf_get_cmd_complete+0x7c>)
    46a4:	47b8      	blx	r7

	if (buf) {
    46a6:	b934      	cbnz	r4, 46b6 <bt_buf_get_cmd_complete+0x4e>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    46a8:	4631      	mov	r1, r6
    46aa:	2001      	movs	r0, #1
}
    46ac:	b005      	add	sp, #20
    46ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    46b2:	f7ff bfb1 	b.w	4618 <bt_buf_get_rx>
    46b6:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    46b8:	f104 0008 	add.w	r0, r4, #8
    46bc:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    46be:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    46c0:	4629      	mov	r1, r5
    46c2:	f00f fb80 	bl	13dc6 <net_buf_simple_reserve>
}
    46c6:	4620      	mov	r0, r4
    46c8:	b005      	add	sp, #20
    46ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46cc:	20003a60 	.word	0x20003a60
    46d0:	20003a5c 	.word	0x20003a5c
    46d4:	000161ba 	.word	0x000161ba
    46d8:	00016df8 	.word	0x00016df8
    46dc:	0001697a 	.word	0x0001697a
    46e0:	00017a29 	.word	0x00017a29
    46e4:	00016e10 	.word	0x00016e10

000046e8 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    46e8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    46ea:	4b06      	ldr	r3, [pc, #24]	; (4704 <notify_connected+0x1c>)
    46ec:	681c      	ldr	r4, [r3, #0]
{
    46ee:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    46f0:	b904      	cbnz	r4, 46f4 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    46f2:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    46f4:	6823      	ldr	r3, [r4, #0]
    46f6:	b113      	cbz	r3, 46fe <notify_connected+0x16>
			cb->connected(conn, conn->err);
    46f8:	7a29      	ldrb	r1, [r5, #8]
    46fa:	4628      	mov	r0, r5
    46fc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    46fe:	6924      	ldr	r4, [r4, #16]
    4700:	e7f6      	b.n	46f0 <notify_connected+0x8>
    4702:	bf00      	nop
    4704:	2000034c 	.word	0x2000034c

00004708 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4708:	f3bf 8f5b 	dmb	ish
    470c:	6800      	ldr	r0, [r0, #0]
    470e:	f3bf 8f5b 	dmb	ish
}
    4712:	4770      	bx	lr

00004714 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    4714:	8943      	ldrh	r3, [r0, #10]
{
    4716:	b510      	push	{r4, lr}
    4718:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    471a:	b12b      	cbz	r3, 4728 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    471c:	68c0      	ldr	r0, [r0, #12]
    471e:	f00f fb63 	bl	13de8 <net_buf_unref>
	conn->rx = NULL;
    4722:	2300      	movs	r3, #0
    4724:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    4726:	8163      	strh	r3, [r4, #10]
    4728:	bd10      	pop	{r4, pc}
	...

0000472c <bt_conn_get_pkts>:
}
    472c:	4800      	ldr	r0, [pc, #0]	; (4730 <bt_conn_get_pkts+0x4>)
    472e:	4770      	bx	lr
    4730:	20003aec 	.word	0x20003aec

00004734 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    4734:	4b08      	ldr	r3, [pc, #32]	; (4758 <notify_le_param_updated+0x24>)
{
    4736:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    4738:	681c      	ldr	r4, [r3, #0]
{
    473a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    473c:	b904      	cbnz	r4, 4740 <notify_le_param_updated+0xc>
}
    473e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    4740:	68e6      	ldr	r6, [r4, #12]
    4742:	b13e      	cbz	r6, 4754 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    4744:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    4748:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    474c:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    4750:	4628      	mov	r0, r5
    4752:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    4754:	6924      	ldr	r4, [r4, #16]
    4756:	e7f1      	b.n	473c <notify_le_param_updated+0x8>
    4758:	2000034c 	.word	0x2000034c

0000475c <le_param_req>:
{
    475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    475e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    4760:	4608      	mov	r0, r1
{
    4762:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    4764:	f7fd ffc6 	bl	26f4 <bt_le_conn_params_valid>
    4768:	4605      	mov	r5, r0
    476a:	b910      	cbnz	r0, 4772 <le_param_req+0x16>
		return false;
    476c:	2500      	movs	r5, #0
}
    476e:	4628      	mov	r0, r5
    4770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    4772:	4b09      	ldr	r3, [pc, #36]	; (4798 <le_param_req+0x3c>)
    4774:	681c      	ldr	r4, [r3, #0]
    4776:	2c00      	cmp	r4, #0
    4778:	d0f9      	beq.n	476e <le_param_req+0x12>
		if (!cb->le_param_req) {
    477a:	68a3      	ldr	r3, [r4, #8]
    477c:	b90b      	cbnz	r3, 4782 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    477e:	6924      	ldr	r4, [r4, #16]
    4780:	e7f9      	b.n	4776 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    4782:	4631      	mov	r1, r6
    4784:	4638      	mov	r0, r7
    4786:	4798      	blx	r3
    4788:	2800      	cmp	r0, #0
    478a:	d0ef      	beq.n	476c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    478c:	4630      	mov	r0, r6
    478e:	f7fd ffb1 	bl	26f4 <bt_le_conn_params_valid>
    4792:	2800      	cmp	r0, #0
    4794:	d1f3      	bne.n	477e <le_param_req+0x22>
    4796:	e7e9      	b.n	476c <le_param_req+0x10>
    4798:	2000034c 	.word	0x2000034c

0000479c <bt_conn_cb_register>:
	cb->_next = callback_list;
    479c:	4b02      	ldr	r3, [pc, #8]	; (47a8 <bt_conn_cb_register+0xc>)
    479e:	681a      	ldr	r2, [r3, #0]
    47a0:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    47a2:	6018      	str	r0, [r3, #0]
    47a4:	4770      	bx	lr
    47a6:	bf00      	nop
    47a8:	2000034c 	.word	0x2000034c

000047ac <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    47ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    47b0:	f8df 8208 	ldr.w	r8, [pc, #520]	; 49bc <bt_conn_recv+0x210>
    47b4:	4e71      	ldr	r6, [pc, #452]	; (497c <bt_conn_recv+0x1d0>)
    47b6:	f8d8 7000 	ldr.w	r7, [r8]
{
    47ba:	b086      	sub	sp, #24
    47bc:	4692      	mov	sl, r2
    47be:	460d      	mov	r5, r1
    47c0:	4604      	mov	r4, r0
    47c2:	f010 fcef 	bl	151a4 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    47c6:	9605      	str	r6, [sp, #20]
    47c8:	f8cd a010 	str.w	sl, [sp, #16]
    47cc:	89ab      	ldrh	r3, [r5, #12]
    47ce:	9303      	str	r3, [sp, #12]
    47d0:	8823      	ldrh	r3, [r4, #0]
    47d2:	9302      	str	r3, [sp, #8]
    47d4:	9001      	str	r0, [sp, #4]
    47d6:	9600      	str	r6, [sp, #0]
    47d8:	4b69      	ldr	r3, [pc, #420]	; (4980 <bt_conn_recv+0x1d4>)
    47da:	4a6a      	ldr	r2, [pc, #424]	; (4984 <bt_conn_recv+0x1d8>)
    47dc:	496a      	ldr	r1, [pc, #424]	; (4988 <bt_conn_recv+0x1dc>)
    47de:	486b      	ldr	r0, [pc, #428]	; (498c <bt_conn_recv+0x1e0>)
    47e0:	47b8      	blx	r7

	/* Check packet boundary flags */
	switch (flags) {
    47e2:	f1ba 0f01 	cmp.w	sl, #1
    47e6:	46c1      	mov	r9, r8
    47e8:	4637      	mov	r7, r6
    47ea:	d040      	beq.n	486e <bt_conn_recv+0xc2>
    47ec:	f1ba 0f02 	cmp.w	sl, #2
    47f0:	f040 80a3 	bne.w	493a <bt_conn_recv+0x18e>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    47f4:	68ab      	ldr	r3, [r5, #8]

		BT_DBG("First, len %u final %u", buf->len, len);
    47f6:	f8d9 6000 	ldr.w	r6, [r9]
		len = sys_le16_to_cpu(hdr->len);
    47fa:	f8b3 8000 	ldrh.w	r8, [r3]
    47fe:	f010 fcd1 	bl	151a4 <_impl_k_current_get>
		BT_DBG("First, len %u final %u", buf->len, len);
    4802:	9704      	str	r7, [sp, #16]
    4804:	f8cd 800c 	str.w	r8, [sp, #12]
    4808:	89ab      	ldrh	r3, [r5, #12]
    480a:	9302      	str	r3, [sp, #8]
    480c:	9001      	str	r0, [sp, #4]
    480e:	4b5c      	ldr	r3, [pc, #368]	; (4980 <bt_conn_recv+0x1d4>)
    4810:	9700      	str	r7, [sp, #0]
    4812:	4a5c      	ldr	r2, [pc, #368]	; (4984 <bt_conn_recv+0x1d8>)
    4814:	495c      	ldr	r1, [pc, #368]	; (4988 <bt_conn_recv+0x1dc>)
    4816:	485e      	ldr	r0, [pc, #376]	; (4990 <bt_conn_recv+0x1e4>)
    4818:	47b0      	blx	r6

		if (conn->rx_len) {
    481a:	8963      	ldrh	r3, [r4, #10]
    481c:	b15b      	cbz	r3, 4836 <bt_conn_recv+0x8a>
			BT_ERR("Unexpected first L2CAP frame");
    481e:	9701      	str	r7, [sp, #4]
    4820:	9700      	str	r7, [sp, #0]
    4822:	485c      	ldr	r0, [pc, #368]	; (4994 <bt_conn_recv+0x1e8>)
    4824:	f8d9 6000 	ldr.w	r6, [r9]
    4828:	4b55      	ldr	r3, [pc, #340]	; (4980 <bt_conn_recv+0x1d4>)
    482a:	4a5b      	ldr	r2, [pc, #364]	; (4998 <bt_conn_recv+0x1ec>)
    482c:	4956      	ldr	r1, [pc, #344]	; (4988 <bt_conn_recv+0x1dc>)
    482e:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    4830:	4620      	mov	r0, r4
    4832:	f7ff ff6f 	bl	4714 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    4836:	89ab      	ldrh	r3, [r5, #12]
		BT_DBG("rx_len %u", conn->rx_len);
    4838:	f8d9 6000 	ldr.w	r6, [r9]
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    483c:	eba8 0803 	sub.w	r8, r8, r3
    4840:	f108 0804 	add.w	r8, r8, #4
    4844:	f8a4 800a 	strh.w	r8, [r4, #10]
    4848:	f010 fcac 	bl	151a4 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    484c:	9703      	str	r7, [sp, #12]
    484e:	8963      	ldrh	r3, [r4, #10]
    4850:	9302      	str	r3, [sp, #8]
    4852:	9001      	str	r0, [sp, #4]
    4854:	4b4a      	ldr	r3, [pc, #296]	; (4980 <bt_conn_recv+0x1d4>)
    4856:	9700      	str	r7, [sp, #0]
    4858:	4a4a      	ldr	r2, [pc, #296]	; (4984 <bt_conn_recv+0x1d8>)
    485a:	494b      	ldr	r1, [pc, #300]	; (4988 <bt_conn_recv+0x1dc>)
    485c:	484f      	ldr	r0, [pc, #316]	; (499c <bt_conn_recv+0x1f0>)
    485e:	47b0      	blx	r6
		if (conn->rx_len) {
    4860:	8963      	ldrh	r3, [r4, #10]
    4862:	2b00      	cmp	r3, #0
    4864:	d057      	beq.n	4916 <bt_conn_recv+0x16a>
			conn->rx = buf;
    4866:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    4868:	b006      	add	sp, #24
    486a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->rx_len) {
    486e:	8963      	ldrh	r3, [r4, #10]
    4870:	b98b      	cbnz	r3, 4896 <bt_conn_recv+0xea>
			BT_ERR("Unexpected L2CAP continuation");
    4872:	9601      	str	r6, [sp, #4]
    4874:	9600      	str	r6, [sp, #0]
    4876:	f8d8 6000 	ldr.w	r6, [r8]
    487a:	4b41      	ldr	r3, [pc, #260]	; (4980 <bt_conn_recv+0x1d4>)
    487c:	4a46      	ldr	r2, [pc, #280]	; (4998 <bt_conn_recv+0x1ec>)
    487e:	4942      	ldr	r1, [pc, #264]	; (4988 <bt_conn_recv+0x1dc>)
    4880:	4847      	ldr	r0, [pc, #284]	; (49a0 <bt_conn_recv+0x1f4>)
			BT_ERR("L2CAP data overflow");
    4882:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    4884:	4620      	mov	r0, r4
    4886:	f7ff ff45 	bl	4714 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    488a:	4628      	mov	r0, r5
}
    488c:	b006      	add	sp, #24
    488e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			net_buf_unref(buf);
    4892:	f00f baa9 	b.w	13de8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    4896:	89aa      	ldrh	r2, [r5, #12]
    4898:	429a      	cmp	r2, r3
    489a:	d908      	bls.n	48ae <bt_conn_recv+0x102>
			BT_ERR("L2CAP data overflow");
    489c:	9601      	str	r6, [sp, #4]
    489e:	9600      	str	r6, [sp, #0]
    48a0:	f8d8 6000 	ldr.w	r6, [r8]
    48a4:	4b36      	ldr	r3, [pc, #216]	; (4980 <bt_conn_recv+0x1d4>)
    48a6:	4a3c      	ldr	r2, [pc, #240]	; (4998 <bt_conn_recv+0x1ec>)
    48a8:	4937      	ldr	r1, [pc, #220]	; (4988 <bt_conn_recv+0x1dc>)
    48aa:	483e      	ldr	r0, [pc, #248]	; (49a4 <bt_conn_recv+0x1f8>)
    48ac:	e7e9      	b.n	4882 <bt_conn_recv+0xd6>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    48ae:	f8d8 a000 	ldr.w	sl, [r8]
    48b2:	f010 fc77 	bl	151a4 <_impl_k_current_get>
    48b6:	9604      	str	r6, [sp, #16]
    48b8:	8963      	ldrh	r3, [r4, #10]
    48ba:	9303      	str	r3, [sp, #12]
    48bc:	89ab      	ldrh	r3, [r5, #12]
    48be:	9302      	str	r3, [sp, #8]
    48c0:	9001      	str	r0, [sp, #4]
    48c2:	4b2f      	ldr	r3, [pc, #188]	; (4980 <bt_conn_recv+0x1d4>)
    48c4:	4a2f      	ldr	r2, [pc, #188]	; (4984 <bt_conn_recv+0x1d8>)
    48c6:	4930      	ldr	r1, [pc, #192]	; (4988 <bt_conn_recv+0x1dc>)
    48c8:	4837      	ldr	r0, [pc, #220]	; (49a8 <bt_conn_recv+0x1fc>)
    48ca:	9600      	str	r6, [sp, #0]
    48cc:	47d0      	blx	sl
		if (buf->len > net_buf_tailroom(conn->rx)) {
    48ce:	68e0      	ldr	r0, [r4, #12]
    48d0:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
    48d4:	3008      	adds	r0, #8
    48d6:	f00f faf4 	bl	13ec2 <net_buf_simple_tailroom>
    48da:	4582      	cmp	sl, r0
    48dc:	d908      	bls.n	48f0 <bt_conn_recv+0x144>
			BT_ERR("Not enough buffer space for L2CAP data");
    48de:	9601      	str	r6, [sp, #4]
    48e0:	9600      	str	r6, [sp, #0]
    48e2:	f8d8 6000 	ldr.w	r6, [r8]
    48e6:	4b26      	ldr	r3, [pc, #152]	; (4980 <bt_conn_recv+0x1d4>)
    48e8:	4a2b      	ldr	r2, [pc, #172]	; (4998 <bt_conn_recv+0x1ec>)
    48ea:	4927      	ldr	r1, [pc, #156]	; (4988 <bt_conn_recv+0x1dc>)
    48ec:	482f      	ldr	r0, [pc, #188]	; (49ac <bt_conn_recv+0x200>)
    48ee:	e7c8      	b.n	4882 <bt_conn_recv+0xd6>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    48f0:	68e0      	ldr	r0, [r4, #12]
    48f2:	89aa      	ldrh	r2, [r5, #12]
    48f4:	68a9      	ldr	r1, [r5, #8]
    48f6:	3008      	adds	r0, #8
    48f8:	f00f faae 	bl	13e58 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    48fc:	8963      	ldrh	r3, [r4, #10]
    48fe:	89aa      	ldrh	r2, [r5, #12]
    4900:	1a9b      	subs	r3, r3, r2
    4902:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    4904:	4628      	mov	r0, r5
    4906:	f00f fa6f 	bl	13de8 <net_buf_unref>
		if (conn->rx_len) {
    490a:	8963      	ldrh	r3, [r4, #10]
    490c:	2b00      	cmp	r3, #0
    490e:	d1ab      	bne.n	4868 <bt_conn_recv+0xbc>
		buf = conn->rx;
    4910:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    4912:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    4914:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    4916:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    4918:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    491a:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    491c:	1d19      	adds	r1, r3, #4
    491e:	4291      	cmp	r1, r2
    4920:	d016      	beq.n	4950 <bt_conn_recv+0x1a4>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    4922:	9202      	str	r2, [sp, #8]
    4924:	9301      	str	r3, [sp, #4]
    4926:	9703      	str	r7, [sp, #12]
    4928:	9700      	str	r7, [sp, #0]
    492a:	f8d9 4000 	ldr.w	r4, [r9]
    492e:	4b14      	ldr	r3, [pc, #80]	; (4980 <bt_conn_recv+0x1d4>)
    4930:	4a19      	ldr	r2, [pc, #100]	; (4998 <bt_conn_recv+0x1ec>)
    4932:	4915      	ldr	r1, [pc, #84]	; (4988 <bt_conn_recv+0x1dc>)
    4934:	481e      	ldr	r0, [pc, #120]	; (49b0 <bt_conn_recv+0x204>)
    4936:	47a0      	blx	r4
    4938:	e7a7      	b.n	488a <bt_conn_recv+0xde>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    493a:	e88d 0440 	stmia.w	sp, {r6, sl}
    493e:	9602      	str	r6, [sp, #8]
    4940:	f8d8 6000 	ldr.w	r6, [r8]
    4944:	4b0e      	ldr	r3, [pc, #56]	; (4980 <bt_conn_recv+0x1d4>)
    4946:	4a14      	ldr	r2, [pc, #80]	; (4998 <bt_conn_recv+0x1ec>)
    4948:	490f      	ldr	r1, [pc, #60]	; (4988 <bt_conn_recv+0x1dc>)
    494a:	481a      	ldr	r0, [pc, #104]	; (49b4 <bt_conn_recv+0x208>)
    494c:	47b0      	blx	r6
    494e:	e799      	b.n	4884 <bt_conn_recv+0xd8>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    4950:	f8d9 6000 	ldr.w	r6, [r9]
    4954:	f010 fc26 	bl	151a4 <_impl_k_current_get>
    4958:	9703      	str	r7, [sp, #12]
    495a:	89ab      	ldrh	r3, [r5, #12]
    495c:	9302      	str	r3, [sp, #8]
    495e:	9001      	str	r0, [sp, #4]
    4960:	9700      	str	r7, [sp, #0]
    4962:	4b07      	ldr	r3, [pc, #28]	; (4980 <bt_conn_recv+0x1d4>)
    4964:	4a07      	ldr	r2, [pc, #28]	; (4984 <bt_conn_recv+0x1d8>)
    4966:	4908      	ldr	r1, [pc, #32]	; (4988 <bt_conn_recv+0x1dc>)
    4968:	4813      	ldr	r0, [pc, #76]	; (49b8 <bt_conn_recv+0x20c>)
    496a:	47b0      	blx	r6
	bt_l2cap_recv(conn, buf);
    496c:	4629      	mov	r1, r5
    496e:	4620      	mov	r0, r4
}
    4970:	b006      	add	sp, #24
    4972:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_l2cap_recv(conn, buf);
    4976:	f001 b933 	b.w	5be0 <bt_l2cap_recv>
    497a:	bf00      	nop
    497c:	000161ba 	.word	0x000161ba
    4980:	00017e7c 	.word	0x00017e7c
    4984:	0001697a 	.word	0x0001697a
    4988:	00017a29 	.word	0x00017a29
    498c:	00018046 	.word	0x00018046
    4990:	00018077 	.word	0x00018077
    4994:	000180a3 	.word	0x000180a3
    4998:	000179e1 	.word	0x000179e1
    499c:	000180d0 	.word	0x000180d0
    49a0:	000180ef 	.word	0x000180ef
    49a4:	0001811d 	.word	0x0001811d
    49a8:	00018141 	.word	0x00018141
    49ac:	0001816d 	.word	0x0001816d
    49b0:	000181d2 	.word	0x000181d2
    49b4:	000181a4 	.word	0x000181a4
    49b8:	000181fe 	.word	0x000181fe
    49bc:	20003a5c 	.word	0x20003a5c

000049c0 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    49c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    49c4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4a48 <bt_conn_send_cb+0x88>
    49c8:	4d18      	ldr	r5, [pc, #96]	; (4a2c <bt_conn_send_cb+0x6c>)
    49ca:	f8d8 9000 	ldr.w	r9, [r8]
{
    49ce:	b087      	sub	sp, #28
    49d0:	460c      	mov	r4, r1
    49d2:	4606      	mov	r6, r0
    49d4:	4617      	mov	r7, r2
    49d6:	f010 fbe5 	bl	151a4 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    49da:	89a3      	ldrh	r3, [r4, #12]
    49dc:	9303      	str	r3, [sp, #12]
    49de:	8833      	ldrh	r3, [r6, #0]
    49e0:	9302      	str	r3, [sp, #8]
    49e2:	9001      	str	r0, [sp, #4]
    49e4:	4b12      	ldr	r3, [pc, #72]	; (4a30 <bt_conn_send_cb+0x70>)
    49e6:	9505      	str	r5, [sp, #20]
    49e8:	9704      	str	r7, [sp, #16]
    49ea:	9500      	str	r5, [sp, #0]
    49ec:	4a11      	ldr	r2, [pc, #68]	; (4a34 <bt_conn_send_cb+0x74>)
    49ee:	4912      	ldr	r1, [pc, #72]	; (4a38 <bt_conn_send_cb+0x78>)
    49f0:	4812      	ldr	r0, [pc, #72]	; (4a3c <bt_conn_send_cb+0x7c>)
    49f2:	47c8      	blx	r9

	if (conn->state != BT_CONN_CONNECTED) {
    49f4:	7a73      	ldrb	r3, [r6, #9]
    49f6:	2b03      	cmp	r3, #3
    49f8:	d010      	beq.n	4a1c <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    49fa:	9501      	str	r5, [sp, #4]
    49fc:	9500      	str	r5, [sp, #0]
    49fe:	4b0c      	ldr	r3, [pc, #48]	; (4a30 <bt_conn_send_cb+0x70>)
    4a00:	4a0f      	ldr	r2, [pc, #60]	; (4a40 <bt_conn_send_cb+0x80>)
    4a02:	490d      	ldr	r1, [pc, #52]	; (4a38 <bt_conn_send_cb+0x78>)
    4a04:	480f      	ldr	r0, [pc, #60]	; (4a44 <bt_conn_send_cb+0x84>)
    4a06:	f8d8 5000 	ldr.w	r5, [r8]
    4a0a:	47a8      	blx	r5
		net_buf_unref(buf);
    4a0c:	4620      	mov	r0, r4
    4a0e:	f00f f9eb 	bl	13de8 <net_buf_unref>
		return -ENOTCONN;
    4a12:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    4a16:	b007      	add	sp, #28
    4a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_put(&conn->tx_queue, buf);
    4a1c:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    4a20:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    4a22:	4621      	mov	r1, r4
    4a24:	f00f f9d3 	bl	13dce <net_buf_put>
	return 0;
    4a28:	2000      	movs	r0, #0
    4a2a:	e7f4      	b.n	4a16 <bt_conn_send_cb+0x56>
    4a2c:	000161ba 	.word	0x000161ba
    4a30:	00017e89 	.word	0x00017e89
    4a34:	0001697a 	.word	0x0001697a
    4a38:	00017a29 	.word	0x00017a29
    4a3c:	00018262 	.word	0x00018262
    4a40:	000179e1 	.word	0x000179e1
    4a44:	00018297 	.word	0x00018297
    4a48:	20003a5c 	.word	0x20003a5c

00004a4c <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    4a4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    4a50:	4b15      	ldr	r3, [pc, #84]	; (4aa8 <bt_conn_notify_tx+0x5c>)
    4a52:	4d16      	ldr	r5, [pc, #88]	; (4aac <bt_conn_notify_tx+0x60>)
    4a54:	681c      	ldr	r4, [r3, #0]
{
    4a56:	4606      	mov	r6, r0
    4a58:	f010 fba4 	bl	151a4 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    4a5c:	4b14      	ldr	r3, [pc, #80]	; (4ab0 <bt_conn_notify_tx+0x64>)
    4a5e:	9303      	str	r3, [sp, #12]
    4a60:	9001      	str	r0, [sp, #4]
    4a62:	9300      	str	r3, [sp, #0]
    4a64:	9602      	str	r6, [sp, #8]
    4a66:	4b13      	ldr	r3, [pc, #76]	; (4ab4 <bt_conn_notify_tx+0x68>)
    4a68:	4a13      	ldr	r2, [pc, #76]	; (4ab8 <bt_conn_notify_tx+0x6c>)
    4a6a:	4914      	ldr	r1, [pc, #80]	; (4abc <bt_conn_notify_tx+0x70>)
    4a6c:	4814      	ldr	r0, [pc, #80]	; (4ac0 <bt_conn_notify_tx+0x74>)
    4a6e:	47a0      	blx	r4

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    4a70:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    4a74:	f04f 0800 	mov.w	r8, #0
    4a78:	2100      	movs	r1, #0
    4a7a:	4638      	mov	r0, r7
    4a7c:	f010 f850 	bl	14b20 <_impl_k_queue_get>
    4a80:	4604      	mov	r4, r0
    4a82:	b910      	cbnz	r0, 4a8a <bt_conn_notify_tx+0x3e>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    4a84:	b004      	add	sp, #16
    4a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    4a8a:	6863      	ldr	r3, [r4, #4]
    4a8c:	b10b      	cbz	r3, 4a92 <bt_conn_notify_tx+0x46>
			tx->cb(conn);
    4a8e:	4630      	mov	r0, r6
    4a90:	4798      	blx	r3
    4a92:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    4a94:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4a96:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    4a98:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    4a9c:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d1ea      	bne.n	4a78 <bt_conn_notify_tx+0x2c>
	list->tail = node;
    4aa2:	606c      	str	r4, [r5, #4]
    4aa4:	e7e6      	b.n	4a74 <bt_conn_notify_tx+0x28>
    4aa6:	bf00      	nop
    4aa8:	20003a5c 	.word	0x20003a5c
    4aac:	200003f8 	.word	0x200003f8
    4ab0:	000161ba 	.word	0x000161ba
    4ab4:	00017e99 	.word	0x00017e99
    4ab8:	0001697a 	.word	0x0001697a
    4abc:	00017a29 	.word	0x00017a29
    4ac0:	00017f7d 	.word	0x00017f7d

00004ac4 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4ac8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 4c8c <send_frag+0x1c8>
    4acc:	4e5f      	ldr	r6, [pc, #380]	; (4c4c <send_frag+0x188>)
    4ace:	f8d9 8000 	ldr.w	r8, [r9]
{
    4ad2:	b089      	sub	sp, #36	; 0x24
    4ad4:	460f      	mov	r7, r1
    4ad6:	4614      	mov	r4, r2
    4ad8:	4605      	mov	r5, r0
    4ada:	469a      	mov	sl, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4adc:	f010 fb62 	bl	151a4 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4ae0:	9606      	str	r6, [sp, #24]
    4ae2:	9405      	str	r4, [sp, #20]
    4ae4:	89bb      	ldrh	r3, [r7, #12]
    4ae6:	4a5a      	ldr	r2, [pc, #360]	; (4c50 <send_frag+0x18c>)
    4ae8:	9304      	str	r3, [sp, #16]
    4aea:	9001      	str	r0, [sp, #4]
    4aec:	4b59      	ldr	r3, [pc, #356]	; (4c54 <send_frag+0x190>)
    4aee:	495a      	ldr	r1, [pc, #360]	; (4c58 <send_frag+0x194>)
    4af0:	485a      	ldr	r0, [pc, #360]	; (4c5c <send_frag+0x198>)
    4af2:	9703      	str	r7, [sp, #12]
    4af4:	9502      	str	r5, [sp, #8]
    4af6:	9600      	str	r6, [sp, #0]
    4af8:	47c0      	blx	r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4afa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4afe:	4858      	ldr	r0, [pc, #352]	; (4c60 <send_frag+0x19c>)
    4b00:	f010 fbac 	bl	1525c <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    4b04:	4b57      	ldr	r3, [pc, #348]	; (4c64 <send_frag+0x1a0>)
    4b06:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4b0a:	f7ff fdfd 	bl	4708 <atomic_get>
    4b0e:	46b0      	mov	r8, r6
    4b10:	b130      	cbz	r0, 4b20 <send_frag+0x5c>
		if (conns[i].state == BT_CONN_CONNECTED ||
    4b12:	7a5a      	ldrb	r2, [r3, #9]
    4b14:	3a03      	subs	r2, #3
    4b16:	2a01      	cmp	r2, #1
    4b18:	d802      	bhi.n	4b20 <send_frag+0x5c>
			bt_conn_notify_tx(&conns[i]);
    4b1a:	4618      	mov	r0, r3
    4b1c:	f7ff ff96 	bl	4a4c <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    4b20:	7a6b      	ldrb	r3, [r5, #9]
    4b22:	2b03      	cmp	r3, #3
    4b24:	d174      	bne.n	4c10 <send_frag+0x14c>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    4b26:	2104      	movs	r1, #4
    4b28:	f107 0008 	add.w	r0, r7, #8
    4b2c:	f00f f9a5 	bl	13e7a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4b30:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    4b32:	f8d7 b014 	ldr.w	fp, [r7, #20]
    4b36:	4e4c      	ldr	r6, [pc, #304]	; (4c68 <send_frag+0x1a4>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4b38:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    4b3c:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4b3e:	89bb      	ldrh	r3, [r7, #12]
	BT_DBG("conn %p cb %p", conn, cb);
    4b40:	f8d9 4000 	ldr.w	r4, [r9]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4b44:	3b04      	subs	r3, #4
    4b46:	8043      	strh	r3, [r0, #2]
    4b48:	2302      	movs	r3, #2
    4b4a:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4b4c:	f010 fb2a 	bl	151a4 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    4b50:	f8cd 8010 	str.w	r8, [sp, #16]
    4b54:	9001      	str	r0, [sp, #4]
    4b56:	f8cd b00c 	str.w	fp, [sp, #12]
    4b5a:	9502      	str	r5, [sp, #8]
    4b5c:	f8cd 8000 	str.w	r8, [sp]
    4b60:	4b42      	ldr	r3, [pc, #264]	; (4c6c <send_frag+0x1a8>)
    4b62:	4a3b      	ldr	r2, [pc, #236]	; (4c50 <send_frag+0x18c>)
    4b64:	493c      	ldr	r1, [pc, #240]	; (4c58 <send_frag+0x194>)
    4b66:	4842      	ldr	r0, [pc, #264]	; (4c70 <send_frag+0x1ac>)
    4b68:	47a0      	blx	r4
    4b6a:	6834      	ldr	r4, [r6, #0]
	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");
    4b6c:	b954      	cbnz	r4, 4b84 <send_frag+0xc0>
    4b6e:	f240 436b 	movw	r3, #1131	; 0x46b
    4b72:	4a40      	ldr	r2, [pc, #256]	; (4c74 <send_frag+0x1b0>)
    4b74:	4940      	ldr	r1, [pc, #256]	; (4c78 <send_frag+0x1b4>)
    4b76:	4841      	ldr	r0, [pc, #260]	; (4c7c <send_frag+0x1b8>)
    4b78:	f7fc fa08 	bl	f8c <printk>
    4b7c:	4840      	ldr	r0, [pc, #256]	; (4c80 <send_frag+0x1bc>)
    4b7e:	f7fc fa05 	bl	f8c <printk>
    4b82:	e7fe      	b.n	4b82 <send_frag+0xbe>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4b84:	6872      	ldr	r2, [r6, #4]
	return node->next;
    4b86:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4b88:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4b8a:	4294      	cmp	r4, r2
	list->tail = node;
    4b8c:	bf08      	it	eq
    4b8e:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    4b90:	f8c4 b004 	str.w	fp, [r4, #4]
	__asm__ volatile(
    4b94:	f04f 0320 	mov.w	r3, #32
    4b98:	f3ef 8211 	mrs	r2, BASEPRI
    4b9c:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    4ba0:	2300      	movs	r3, #0
    4ba2:	6023      	str	r3, [r4, #0]
    4ba4:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d141      	bne.n	4c2e <send_frag+0x16a>
	list->tail = node;
    4baa:	616c      	str	r4, [r5, #20]
	list->head = node;
    4bac:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4bae:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    4bb2:	4638      	mov	r0, r7
    4bb4:	f7fd fe56 	bl	2864 <bt_send>
	if (err) {
    4bb8:	2800      	cmp	r0, #0
    4bba:	d044      	beq.n	4c46 <send_frag+0x182>
		BT_ERR("Unable to send to driver (err %d)", err);
    4bbc:	f8cd 8008 	str.w	r8, [sp, #8]
    4bc0:	9001      	str	r0, [sp, #4]
    4bc2:	f8cd 8000 	str.w	r8, [sp]
    4bc6:	4b23      	ldr	r3, [pc, #140]	; (4c54 <send_frag+0x190>)
    4bc8:	f8d9 8000 	ldr.w	r8, [r9]
    4bcc:	4a2d      	ldr	r2, [pc, #180]	; (4c84 <send_frag+0x1c0>)
    4bce:	4922      	ldr	r1, [pc, #136]	; (4c58 <send_frag+0x194>)
    4bd0:	482d      	ldr	r0, [pc, #180]	; (4c88 <send_frag+0x1c4>)
    4bd2:	47c0      	blx	r8
	__asm__ volatile(
    4bd4:	f04f 0320 	mov.w	r3, #32
    4bd8:	f3ef 8111 	mrs	r1, BASEPRI
    4bdc:	f383 8811 	msr	BASEPRI, r3
    4be0:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4be2:	2200      	movs	r2, #0
    4be4:	b153      	cbz	r3, 4bfc <send_frag+0x138>
    4be6:	429c      	cmp	r4, r3
    4be8:	d12a      	bne.n	4c40 <send_frag+0x17c>
    4bea:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    4bec:	bb12      	cbnz	r2, 4c34 <send_frag+0x170>
    4bee:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    4bf0:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4bf2:	4294      	cmp	r4, r2
    4bf4:	d100      	bne.n	4bf8 <send_frag+0x134>
	list->tail = node;
    4bf6:	616b      	str	r3, [r5, #20]
	parent->next = child;
    4bf8:	2300      	movs	r3, #0
    4bfa:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4bfc:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    4c00:	2300      	movs	r3, #0
    4c02:	6063      	str	r3, [r4, #4]
    4c04:	6833      	ldr	r3, [r6, #0]
    4c06:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4c08:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    4c0a:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4c0c:	b903      	cbnz	r3, 4c10 <send_frag+0x14c>
	list->tail = node;
    4c0e:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4c10:	4813      	ldr	r0, [pc, #76]	; (4c60 <send_frag+0x19c>)
    4c12:	f010 fafb 	bl	1520c <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    4c16:	f1ba 0f00 	cmp.w	sl, #0
    4c1a:	d004      	beq.n	4c26 <send_frag+0x162>
		net_buf_unref(buf);
    4c1c:	4638      	mov	r0, r7
    4c1e:	f00f f8e3 	bl	13de8 <net_buf_unref>
	}
	return false;
    4c22:	f04f 0a00 	mov.w	sl, #0
}
    4c26:	4650      	mov	r0, sl
    4c28:	b009      	add	sp, #36	; 0x24
    4c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
    4c2e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4c30:	616c      	str	r4, [r5, #20]
    4c32:	e7bc      	b.n	4bae <send_frag+0xea>
	parent->next = child;
    4c34:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4c36:	696b      	ldr	r3, [r5, #20]
    4c38:	429c      	cmp	r4, r3
	list->tail = node;
    4c3a:	bf08      	it	eq
    4c3c:	616a      	streq	r2, [r5, #20]
    4c3e:	e7db      	b.n	4bf8 <send_frag+0x134>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4c40:	461a      	mov	r2, r3
    4c42:	681b      	ldr	r3, [r3, #0]
    4c44:	e7ce      	b.n	4be4 <send_frag+0x120>
	return true;
    4c46:	f04f 0a01 	mov.w	sl, #1
    4c4a:	e7ec      	b.n	4c26 <send_frag+0x162>
    4c4c:	000161ba 	.word	0x000161ba
    4c50:	0001697a 	.word	0x0001697a
    4c54:	00017eba 	.word	0x00017eba
    4c58:	00017a29 	.word	0x00017a29
    4c5c:	00018384 	.word	0x00018384
    4c60:	20003aec 	.word	0x20003aec
    4c64:	20000360 	.word	0x20000360
    4c68:	200003f8 	.word	0x200003f8
    4c6c:	00017eab 	.word	0x00017eab
    4c70:	000183bc 	.word	0x000183bc
    4c74:	000183df 	.word	0x000183df
    4c78:	0001841b 	.word	0x0001841b
    4c7c:	0001619c 	.word	0x0001619c
    4c80:	00018439 	.word	0x00018439
    4c84:	000179e1 	.word	0x000179e1
    4c88:	00017033 	.word	0x00017033
    4c8c:	20003a5c 	.word	0x20003a5c

00004c90 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4c92:	4c17      	ldr	r4, [pc, #92]	; (4cf0 <bt_conn_add_le+0x60>)
    4c94:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    4c98:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    4c9a:	4630      	mov	r0, r6
    4c9c:	f7ff fd34 	bl	4708 <atomic_get>
    4ca0:	4605      	mov	r5, r0
    4ca2:	b108      	cbz	r0, 4ca8 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    4ca4:	2000      	movs	r0, #0
    4ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    4ca8:	4601      	mov	r1, r0
    4caa:	2298      	movs	r2, #152	; 0x98
    4cac:	4620      	mov	r0, r4
    4cae:	f7fd f90b 	bl	1ec8 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4cb2:	f3bf 8f5b 	dmb	ish
    4cb6:	2301      	movs	r3, #1
    4cb8:	e856 2f00 	ldrex	r2, [r6]
    4cbc:	e846 3100 	strex	r1, r3, [r6]
    4cc0:	2900      	cmp	r1, #0
    4cc2:	d1f9      	bne.n	4cb8 <bt_conn_add_le+0x28>
    4cc4:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    4cc8:	2207      	movs	r2, #7
    4cca:	4639      	mov	r1, r7
    4ccc:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4cd0:	f7fd f8ce 	bl	1e70 <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4cd4:	2318      	movs	r3, #24
    4cd6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4cda:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4cdc:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    4ce0:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4ce2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4ce6:	4903      	ldr	r1, [pc, #12]	; (4cf4 <bt_conn_add_le+0x64>)
    4ce8:	f010 fde0 	bl	158ac <k_delayed_work_init>
			conn = &conns[i];
    4cec:	4620      	mov	r0, r4

	return conn;
}
    4cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cf0:	20000360 	.word	0x20000360
    4cf4:	000054e1 	.word	0x000054e1

00004cf8 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4cf8:	b538      	push	{r3, r4, r5, lr}
    4cfa:	460d      	mov	r5, r1
    4cfc:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    4cfe:	f100 0144 	add.w	r1, r0, #68	; 0x44
    4d02:	2207      	movs	r2, #7
    4d04:	4628      	mov	r0, r5
    4d06:	f7fd f89e 	bl	1e46 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4d0a:	b160      	cbz	r0, 4d26 <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4d0c:	78e3      	ldrb	r3, [r4, #3]
    4d0e:	2207      	movs	r2, #7
    4d10:	b933      	cbnz	r3, 4d20 <bt_conn_addr_le_cmp+0x28>
    4d12:	f104 0152 	add.w	r1, r4, #82	; 0x52
    4d16:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    4d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4d1c:	f7fd b893 	b.w	1e46 <memcmp>
    4d20:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    4d24:	e7f7      	b.n	4d16 <bt_conn_addr_le_cmp+0x1e>
    4d26:	bd38      	pop	{r3, r4, r5, pc}

00004d28 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    4d28:	b570      	push	{r4, r5, r6, lr}
    4d2a:	4604      	mov	r4, r0
    4d2c:	b086      	sub	sp, #24
	atomic_inc(&conn->ref);
    4d2e:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4d32:	f3bf 8f5b 	dmb	ish
    4d36:	e855 3f00 	ldrex	r3, [r5]
    4d3a:	3301      	adds	r3, #1
    4d3c:	e845 3200 	strex	r2, r3, [r5]
    4d40:	2a00      	cmp	r2, #0
    4d42:	d1f8      	bne.n	4d36 <bt_conn_ref+0xe>
    4d44:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4d48:	4b0b      	ldr	r3, [pc, #44]	; (4d78 <bt_conn_ref+0x50>)
    4d4a:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4d4c:	f010 fa2a 	bl	151a4 <_impl_k_current_get>
    4d50:	4602      	mov	r2, r0
    4d52:	4628      	mov	r0, r5
    4d54:	8821      	ldrh	r1, [r4, #0]
    4d56:	f7ff fcd7 	bl	4708 <atomic_get>
    4d5a:	4b08      	ldr	r3, [pc, #32]	; (4d7c <bt_conn_ref+0x54>)
    4d5c:	9304      	str	r3, [sp, #16]
    4d5e:	9003      	str	r0, [sp, #12]
    4d60:	9102      	str	r1, [sp, #8]
    4d62:	9201      	str	r2, [sp, #4]
    4d64:	9300      	str	r3, [sp, #0]
    4d66:	4a06      	ldr	r2, [pc, #24]	; (4d80 <bt_conn_ref+0x58>)
    4d68:	4b06      	ldr	r3, [pc, #24]	; (4d84 <bt_conn_ref+0x5c>)
    4d6a:	4907      	ldr	r1, [pc, #28]	; (4d88 <bt_conn_ref+0x60>)
    4d6c:	4807      	ldr	r0, [pc, #28]	; (4d8c <bt_conn_ref+0x64>)
    4d6e:	47b0      	blx	r6

	return conn;
}
    4d70:	4620      	mov	r0, r4
    4d72:	b006      	add	sp, #24
    4d74:	bd70      	pop	{r4, r5, r6, pc}
    4d76:	bf00      	nop
    4d78:	20003a5c 	.word	0x20003a5c
    4d7c:	000161ba 	.word	0x000161ba
    4d80:	0001697a 	.word	0x0001697a
    4d84:	00017f09 	.word	0x00017f09
    4d88:	00017a29 	.word	0x00017a29
    4d8c:	0001823c 	.word	0x0001823c

00004d90 <bt_conn_lookup_handle>:
{
    4d90:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    4d92:	4b0a      	ldr	r3, [pc, #40]	; (4dbc <bt_conn_lookup_handle+0x2c>)
{
    4d94:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4d96:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4d9a:	f7ff fcb5 	bl	4708 <atomic_get>
    4d9e:	b158      	cbz	r0, 4db8 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4da0:	7a5a      	ldrb	r2, [r3, #9]
    4da2:	3a03      	subs	r2, #3
    4da4:	2a01      	cmp	r2, #1
    4da6:	d807      	bhi.n	4db8 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    4da8:	881a      	ldrh	r2, [r3, #0]
    4daa:	428a      	cmp	r2, r1
    4dac:	d104      	bne.n	4db8 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    4dae:	4618      	mov	r0, r3
}
    4db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    4db4:	f7ff bfb8 	b.w	4d28 <bt_conn_ref>
}
    4db8:	2000      	movs	r0, #0
    4dba:	bd08      	pop	{r3, pc}
    4dbc:	20000360 	.word	0x20000360

00004dc0 <bt_conn_lookup_addr_le>:
{
    4dc0:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4dc2:	4c0a      	ldr	r4, [pc, #40]	; (4dec <bt_conn_lookup_addr_le+0x2c>)
{
    4dc4:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4dc6:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4dca:	f7ff fc9d 	bl	4708 <atomic_get>
    4dce:	b150      	cbz	r0, 4de6 <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4dd0:	78a3      	ldrb	r3, [r4, #2]
    4dd2:	b943      	cbnz	r3, 4de6 <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4dd4:	4620      	mov	r0, r4
    4dd6:	f7ff ff8f 	bl	4cf8 <bt_conn_addr_le_cmp>
    4dda:	b920      	cbnz	r0, 4de6 <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    4ddc:	4620      	mov	r0, r4
}
    4dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    4de2:	f7ff bfa1 	b.w	4d28 <bt_conn_ref>
}
    4de6:	2000      	movs	r0, #0
    4de8:	bd10      	pop	{r4, pc}
    4dea:	bf00      	nop
    4dec:	20000360 	.word	0x20000360

00004df0 <bt_conn_lookup_state_le>:
{
    4df0:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    4df2:	4c0d      	ldr	r4, [pc, #52]	; (4e28 <bt_conn_lookup_state_le+0x38>)
{
    4df4:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    4df6:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    4dfa:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    4dfc:	f7ff fc84 	bl	4708 <atomic_get>
    4e00:	b180      	cbz	r0, 4e24 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4e02:	78a2      	ldrb	r2, [r4, #2]
    4e04:	b972      	cbnz	r2, 4e24 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4e06:	b93b      	cbnz	r3, 4e18 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4e08:	7a63      	ldrb	r3, [r4, #9]
    4e0a:	42ab      	cmp	r3, r5
    4e0c:	d10a      	bne.n	4e24 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    4e0e:	4806      	ldr	r0, [pc, #24]	; (4e28 <bt_conn_lookup_state_le+0x38>)
}
    4e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    4e14:	f7ff bf88 	b.w	4d28 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4e18:	4619      	mov	r1, r3
    4e1a:	4620      	mov	r0, r4
    4e1c:	f7ff ff6c 	bl	4cf8 <bt_conn_addr_le_cmp>
    4e20:	2800      	cmp	r0, #0
    4e22:	d0f1      	beq.n	4e08 <bt_conn_lookup_state_le+0x18>
}
    4e24:	2000      	movs	r0, #0
    4e26:	bd38      	pop	{r3, r4, r5, pc}
    4e28:	20000360 	.word	0x20000360

00004e2c <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    4e2c:	b570      	push	{r4, r5, r6, lr}
    4e2e:	4605      	mov	r5, r0
    4e30:	b086      	sub	sp, #24
	atomic_dec(&conn->ref);
    4e32:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4e36:	f3bf 8f5b 	dmb	ish
    4e3a:	e854 3f00 	ldrex	r3, [r4]
    4e3e:	3b01      	subs	r3, #1
    4e40:	e844 3200 	strex	r2, r3, [r4]
    4e44:	2a00      	cmp	r2, #0
    4e46:	d1f8      	bne.n	4e3a <bt_conn_unref+0xe>
    4e48:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4e4c:	4b0a      	ldr	r3, [pc, #40]	; (4e78 <bt_conn_unref+0x4c>)
    4e4e:	681e      	ldr	r6, [r3, #0]
    4e50:	f010 f9a8 	bl	151a4 <_impl_k_current_get>
    4e54:	4602      	mov	r2, r0
    4e56:	4620      	mov	r0, r4
    4e58:	8829      	ldrh	r1, [r5, #0]
    4e5a:	f7ff fc55 	bl	4708 <atomic_get>
    4e5e:	4b07      	ldr	r3, [pc, #28]	; (4e7c <bt_conn_unref+0x50>)
    4e60:	9304      	str	r3, [sp, #16]
    4e62:	9003      	str	r0, [sp, #12]
    4e64:	9102      	str	r1, [sp, #8]
    4e66:	9201      	str	r2, [sp, #4]
    4e68:	9300      	str	r3, [sp, #0]
    4e6a:	4a05      	ldr	r2, [pc, #20]	; (4e80 <bt_conn_unref+0x54>)
    4e6c:	4b05      	ldr	r3, [pc, #20]	; (4e84 <bt_conn_unref+0x58>)
    4e6e:	4906      	ldr	r1, [pc, #24]	; (4e88 <bt_conn_unref+0x5c>)
    4e70:	4806      	ldr	r0, [pc, #24]	; (4e8c <bt_conn_unref+0x60>)
    4e72:	47b0      	blx	r6
}
    4e74:	b006      	add	sp, #24
    4e76:	bd70      	pop	{r4, r5, r6, pc}
    4e78:	20003a5c 	.word	0x20003a5c
    4e7c:	000161ba 	.word	0x000161ba
    4e80:	0001697a 	.word	0x0001697a
    4e84:	00017f15 	.word	0x00017f15
    4e88:	00017a29 	.word	0x00017a29
    4e8c:	0001823c 	.word	0x0001823c

00004e90 <conn_cleanup>:
{
    4e90:	b538      	push	{r3, r4, r5, lr}
    4e92:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4e94:	f100 0528 	add.w	r5, r0, #40	; 0x28
    4e98:	2100      	movs	r1, #0
    4e9a:	4628      	mov	r0, r5
    4e9c:	f00e ff7a 	bl	13d94 <net_buf_get>
    4ea0:	b960      	cbnz	r0, 4ebc <conn_cleanup+0x2c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    4ea2:	6923      	ldr	r3, [r4, #16]
    4ea4:	b16b      	cbz	r3, 4ec2 <conn_cleanup+0x32>
    4ea6:	f240 530b 	movw	r3, #1291	; 0x50b
    4eaa:	4a0b      	ldr	r2, [pc, #44]	; (4ed8 <conn_cleanup+0x48>)
    4eac:	490b      	ldr	r1, [pc, #44]	; (4edc <conn_cleanup+0x4c>)
    4eae:	480c      	ldr	r0, [pc, #48]	; (4ee0 <conn_cleanup+0x50>)
    4eb0:	f7fc f86c 	bl	f8c <printk>
    4eb4:	480b      	ldr	r0, [pc, #44]	; (4ee4 <conn_cleanup+0x54>)
    4eb6:	f7fc f869 	bl	f8c <printk>
    4eba:	e7fe      	b.n	4eba <conn_cleanup+0x2a>
		net_buf_unref(buf);
    4ebc:	f00e ff94 	bl	13de8 <net_buf_unref>
    4ec0:	e7ea      	b.n	4e98 <conn_cleanup+0x8>
	bt_conn_notify_tx(conn);
    4ec2:	4620      	mov	r0, r4
    4ec4:	f7ff fdc2 	bl	4a4c <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    4ec8:	4620      	mov	r0, r4
    4eca:	f7ff fc23 	bl	4714 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    4ece:	4620      	mov	r0, r4
}
    4ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4ed4:	f7ff bfaa 	b.w	4e2c <bt_conn_unref>
    4ed8:	000183df 	.word	0x000183df
    4edc:	00018328 	.word	0x00018328
    4ee0:	0001619c 	.word	0x0001619c
    4ee4:	0001834e 	.word	0x0001834e

00004ee8 <bt_conn_prepare_events>:
{
    4ee8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	BT_DBG("");
    4eec:	4d2e      	ldr	r5, [pc, #184]	; (4fa8 <bt_conn_prepare_events+0xc0>)
    4eee:	4c2f      	ldr	r4, [pc, #188]	; (4fac <bt_conn_prepare_events+0xc4>)
    4ef0:	682f      	ldr	r7, [r5, #0]
{
    4ef2:	4606      	mov	r6, r0
    4ef4:	f010 f956 	bl	151a4 <_impl_k_current_get>
	BT_DBG("");
    4ef8:	4b2d      	ldr	r3, [pc, #180]	; (4fb0 <bt_conn_prepare_events+0xc8>)
    4efa:	9001      	str	r0, [sp, #4]
    4efc:	4a2d      	ldr	r2, [pc, #180]	; (4fb4 <bt_conn_prepare_events+0xcc>)
    4efe:	492e      	ldr	r1, [pc, #184]	; (4fb8 <bt_conn_prepare_events+0xd0>)
    4f00:	482e      	ldr	r0, [pc, #184]	; (4fbc <bt_conn_prepare_events+0xd4>)
    4f02:	9402      	str	r4, [sp, #8]
    4f04:	9400      	str	r4, [sp, #0]
    4f06:	47b8      	blx	r7
	conn_change.signaled = 0;
    4f08:	4b2d      	ldr	r3, [pc, #180]	; (4fc0 <bt_conn_prepare_events+0xd8>)
    4f0a:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4f0c:	2101      	movs	r1, #1
    4f0e:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    4f10:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4f12:	f010 fe6b 	bl	15bec <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    4f16:	4b2b      	ldr	r3, [pc, #172]	; (4fc4 <bt_conn_prepare_events+0xdc>)
    4f18:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4f1c:	f7ff fbf4 	bl	4708 <atomic_get>
    4f20:	462a      	mov	r2, r5
    4f22:	461f      	mov	r7, r3
    4f24:	4625      	mov	r5, r4
    4f26:	b918      	cbnz	r0, 4f30 <bt_conn_prepare_events+0x48>
			continue;
    4f28:	2001      	movs	r0, #1
}
    4f2a:	b004      	add	sp, #16
    4f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4f30:	7a59      	ldrb	r1, [r3, #9]
    4f32:	b999      	cbnz	r1, 4f5c <bt_conn_prepare_events+0x74>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4f34:	f3bf 8f5b 	dmb	ish
    4f38:	1d19      	adds	r1, r3, #4
    4f3a:	e851 0f00 	ldrex	r0, [r1]
    4f3e:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    4f42:	e841 4e00 	strex	lr, r4, [r1]
    4f46:	f1be 0f00 	cmp.w	lr, #0
    4f4a:	d1f6      	bne.n	4f3a <bt_conn_prepare_events+0x52>
    4f4c:	f3bf 8f5b 	dmb	ish
    4f50:	0641      	lsls	r1, r0, #25
    4f52:	d503      	bpl.n	4f5c <bt_conn_prepare_events+0x74>
			conn_cleanup(conn);
    4f54:	4618      	mov	r0, r3
    4f56:	f7ff ff9b 	bl	4e90 <conn_cleanup>
    4f5a:	e7e5      	b.n	4f28 <bt_conn_prepare_events+0x40>
		if (conn->state != BT_CONN_CONNECTED) {
    4f5c:	7a7c      	ldrb	r4, [r7, #9]
    4f5e:	2c03      	cmp	r4, #3
    4f60:	d1e2      	bne.n	4f28 <bt_conn_prepare_events+0x40>
		BT_DBG("Adding conn %p to poll list", conn);
    4f62:	f8d2 8000 	ldr.w	r8, [r2]
    4f66:	f010 f91d 	bl	151a4 <_impl_k_current_get>
    4f6a:	4b11      	ldr	r3, [pc, #68]	; (4fb0 <bt_conn_prepare_events+0xc8>)
    4f6c:	9001      	str	r0, [sp, #4]
    4f6e:	4a11      	ldr	r2, [pc, #68]	; (4fb4 <bt_conn_prepare_events+0xcc>)
    4f70:	4911      	ldr	r1, [pc, #68]	; (4fb8 <bt_conn_prepare_events+0xd0>)
    4f72:	4815      	ldr	r0, [pc, #84]	; (4fc8 <bt_conn_prepare_events+0xe0>)
    4f74:	9503      	str	r5, [sp, #12]
    4f76:	9702      	str	r7, [sp, #8]
    4f78:	9500      	str	r5, [sp, #0]
    4f7a:	47c0      	blx	r8
		k_poll_event_init(&events[ev_count],
    4f7c:	4b13      	ldr	r3, [pc, #76]	; (4fcc <bt_conn_prepare_events+0xe4>)
    4f7e:	2200      	movs	r2, #0
    4f80:	2104      	movs	r1, #4
    4f82:	f106 0014 	add.w	r0, r6, #20
    4f86:	f010 fe31 	bl	15bec <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4f8a:	2301      	movs	r3, #1
    4f8c:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4f90:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4f94:	4b0e      	ldr	r3, [pc, #56]	; (4fd0 <bt_conn_prepare_events+0xe8>)
    4f96:	2200      	movs	r2, #0
    4f98:	2104      	movs	r1, #4
    4f9a:	f010 fe27 	bl	15bec <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4f9e:	2302      	movs	r3, #2
    4fa0:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4fa4:	4620      	mov	r0, r4
	return ev_count;
    4fa6:	e7c0      	b.n	4f2a <bt_conn_prepare_events+0x42>
    4fa8:	20003a5c 	.word	0x20003a5c
    4fac:	000161ba 	.word	0x000161ba
    4fb0:	00017ecd 	.word	0x00017ecd
    4fb4:	0001697a 	.word	0x0001697a
    4fb8:	00017a29 	.word	0x00017a29
    4fbc:	00017f9a 	.word	0x00017f9a
    4fc0:	20003b88 	.word	0x20003b88
    4fc4:	20000360 	.word	0x20000360
    4fc8:	00017fb0 	.word	0x00017fb0
    4fcc:	20000378 	.word	0x20000378
    4fd0:	20000388 	.word	0x20000388

00004fd4 <bt_conn_set_state>:
{
    4fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4fd8:	4604      	mov	r4, r0
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4fda:	4e73      	ldr	r6, [pc, #460]	; (51a8 <bt_conn_set_state+0x1d4>)
    4fdc:	f8df 8204 	ldr.w	r8, [pc, #516]	; 51e4 <bt_conn_set_state+0x210>
    4fe0:	6835      	ldr	r5, [r6, #0]
{
    4fe2:	b087      	sub	sp, #28
    4fe4:	460f      	mov	r7, r1
    4fe6:	f010 f8dd 	bl	151a4 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    4fea:	7a63      	ldrb	r3, [r4, #9]
    4fec:	496f      	ldr	r1, [pc, #444]	; (51ac <bt_conn_set_state+0x1d8>)
    4fee:	9001      	str	r0, [sp, #4]
    4ff0:	2b04      	cmp	r3, #4
    4ff2:	bf96      	itet	ls
    4ff4:	4a6e      	ldrls	r2, [pc, #440]	; (51b0 <bt_conn_set_state+0x1dc>)
    4ff6:	4b6f      	ldrhi	r3, [pc, #444]	; (51b4 <bt_conn_set_state+0x1e0>)
    4ff8:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    4ffc:	9302      	str	r3, [sp, #8]
    4ffe:	2f04      	cmp	r7, #4
    5000:	bf96      	itet	ls
    5002:	4a6b      	ldrls	r2, [pc, #428]	; (51b0 <bt_conn_set_state+0x1dc>)
    5004:	4a6b      	ldrhi	r2, [pc, #428]	; (51b4 <bt_conn_set_state+0x1e0>)
    5006:	f852 2027 	ldrls.w	r2, [r2, r7, lsl #2]
    500a:	9203      	str	r2, [sp, #12]
    500c:	f8cd 8010 	str.w	r8, [sp, #16]
    5010:	f8cd 8000 	str.w	r8, [sp]
    5014:	4b68      	ldr	r3, [pc, #416]	; (51b8 <bt_conn_set_state+0x1e4>)
    5016:	4a69      	ldr	r2, [pc, #420]	; (51bc <bt_conn_set_state+0x1e8>)
    5018:	4869      	ldr	r0, [pc, #420]	; (51c0 <bt_conn_set_state+0x1ec>)
    501a:	47a8      	blx	r5
	if (conn->state == state) {
    501c:	7a65      	ldrb	r5, [r4, #9]
    501e:	42af      	cmp	r7, r5
    5020:	46c1      	mov	r9, r8
    5022:	d10c      	bne.n	503e <bt_conn_set_state+0x6a>
		BT_WARN("no transition");
    5024:	f8cd 8004 	str.w	r8, [sp, #4]
    5028:	f8cd 8000 	str.w	r8, [sp]
    502c:	6834      	ldr	r4, [r6, #0]
    502e:	4b62      	ldr	r3, [pc, #392]	; (51b8 <bt_conn_set_state+0x1e4>)
    5030:	4a64      	ldr	r2, [pc, #400]	; (51c4 <bt_conn_set_state+0x1f0>)
    5032:	495e      	ldr	r1, [pc, #376]	; (51ac <bt_conn_set_state+0x1d8>)
    5034:	4864      	ldr	r0, [pc, #400]	; (51c8 <bt_conn_set_state+0x1f4>)
    5036:	47a0      	blx	r4
}
    5038:	b007      	add	sp, #28
    503a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->state = state;
    503e:	7267      	strb	r7, [r4, #9]
	switch (old_state) {
    5040:	b195      	cbz	r5, 5068 <bt_conn_set_state+0x94>
    5042:	2d02      	cmp	r5, #2
    5044:	d014      	beq.n	5070 <bt_conn_set_state+0x9c>
	switch (conn->state) {
    5046:	7a63      	ldrb	r3, [r4, #9]
    5048:	2b04      	cmp	r3, #4
    504a:	f200 80a0 	bhi.w	518e <bt_conn_set_state+0x1ba>
    504e:	a201      	add	r2, pc, #4	; (adr r2, 5054 <bt_conn_set_state+0x80>)
    5050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5054:	000050b7 	.word	0x000050b7
    5058:	00005039 	.word	0x00005039
    505c:	00005173 	.word	0x00005173
    5060:	00005081 	.word	0x00005081
    5064:	00005039 	.word	0x00005039
		bt_conn_ref(conn);
    5068:	4620      	mov	r0, r4
    506a:	f7ff fe5d 	bl	4d28 <bt_conn_ref>
		break;
    506e:	e7ea      	b.n	5046 <bt_conn_set_state+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5070:	78a3      	ldrb	r3, [r4, #2]
    5072:	2b00      	cmp	r3, #0
    5074:	d1e7      	bne.n	5046 <bt_conn_set_state+0x72>
			k_delayed_work_cancel(&conn->le.update_work);
    5076:	f104 0070 	add.w	r0, r4, #112	; 0x70
    507a:	f010 fc27 	bl	158cc <k_delayed_work_cancel>
    507e:	e7e2      	b.n	5046 <bt_conn_set_state+0x72>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5080:	78a3      	ldrb	r3, [r4, #2]
    5082:	2b02      	cmp	r3, #2
    5084:	d0d8      	beq.n	5038 <bt_conn_set_state+0x64>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    5086:	f104 0028 	add.w	r0, r4, #40	; 0x28
    508a:	f00f fd09 	bl	14aa0 <_impl_k_queue_init>
    508e:	f104 0018 	add.w	r0, r4, #24
    5092:	f00f fd05 	bl	14aa0 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    5096:	2100      	movs	r1, #0
    5098:	484c      	ldr	r0, [pc, #304]	; (51cc <bt_conn_set_state+0x1f8>)
    509a:	f010 ff13 	bl	15ec4 <_impl_k_poll_signal>
	list->head = NULL;
    509e:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    50a0:	4620      	mov	r0, r4
    50a2:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    50a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    50a6:	f000 fc2f 	bl	5908 <bt_l2cap_connected>
		notify_connected(conn);
    50aa:	4620      	mov	r0, r4
}
    50ac:	b007      	add	sp, #28
    50ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		notify_connected(conn);
    50b2:	f7ff bb19 	b.w	46e8 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    50b6:	78a3      	ldrb	r3, [r4, #2]
    50b8:	2b02      	cmp	r3, #2
    50ba:	d105      	bne.n	50c8 <bt_conn_set_state+0xf4>
			bt_conn_unref(conn);
    50bc:	4620      	mov	r0, r4
}
    50be:	b007      	add	sp, #28
    50c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			bt_conn_unref(conn);
    50c4:	f7ff beb2 	b.w	4e2c <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    50c8:	1eeb      	subs	r3, r5, #3
    50ca:	2b01      	cmp	r3, #1
    50cc:	d844      	bhi.n	5158 <bt_conn_set_state+0x184>
			bt_l2cap_disconnected(conn);
    50ce:	4620      	mov	r0, r4
    50d0:	f000 fc54 	bl	597c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    50d4:	4b3e      	ldr	r3, [pc, #248]	; (51d0 <bt_conn_set_state+0x1fc>)
    50d6:	681d      	ldr	r5, [r3, #0]
    50d8:	b9ed      	cbnz	r5, 5116 <bt_conn_set_state+0x142>
    50da:	4e3e      	ldr	r6, [pc, #248]	; (51d4 <bt_conn_set_state+0x200>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    50dc:	4f3e      	ldr	r7, [pc, #248]	; (51d8 <bt_conn_set_state+0x204>)
	__asm__ volatile(
    50de:	f04f 0320 	mov.w	r3, #32
    50e2:	f3ef 8111 	mrs	r1, BASEPRI
    50e6:	f383 8811 	msr	BASEPRI, r3
    50ea:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    50ec:	b12b      	cbz	r3, 50fa <bt_conn_set_state+0x126>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    50ee:	6960      	ldr	r0, [r4, #20]
	return node->next;
    50f0:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    50f2:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    50f4:	4283      	cmp	r3, r0
	list->tail = node;
    50f6:	bf08      	it	eq
    50f8:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    50fa:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    50fe:	b18b      	cbz	r3, 5124 <bt_conn_set_state+0x150>
    5100:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    5102:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    5104:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    5106:	605d      	str	r5, [r3, #4]
	list->head = node;
    5108:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    510a:	b902      	cbnz	r2, 510e <bt_conn_set_state+0x13a>
	list->tail = node;
    510c:	6073      	str	r3, [r6, #4]
    510e:	4638      	mov	r0, r7
    5110:	f010 f87c 	bl	1520c <_impl_k_sem_give>
    5114:	e7e3      	b.n	50de <bt_conn_set_state+0x10a>
		if (cb->disconnected) {
    5116:	686b      	ldr	r3, [r5, #4]
    5118:	b113      	cbz	r3, 5120 <bt_conn_set_state+0x14c>
			cb->disconnected(conn, conn->err);
    511a:	7a21      	ldrb	r1, [r4, #8]
    511c:	4620      	mov	r0, r4
    511e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5120:	692d      	ldr	r5, [r5, #16]
    5122:	e7d9      	b.n	50d8 <bt_conn_set_state+0x104>
			if (conn->type == BT_CONN_TYPE_LE) {
    5124:	78a3      	ldrb	r3, [r4, #2]
    5126:	b91b      	cbnz	r3, 5130 <bt_conn_set_state+0x15c>
				k_delayed_work_cancel(&conn->le.update_work);
    5128:	f104 0070 	add.w	r0, r4, #112	; 0x70
    512c:	f010 fbce 	bl	158cc <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5130:	f3bf 8f5b 	dmb	ish
    5134:	3404      	adds	r4, #4
    5136:	e854 3f00 	ldrex	r3, [r4]
    513a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    513e:	e844 3200 	strex	r2, r3, [r4]
    5142:	2a00      	cmp	r2, #0
    5144:	d1f7      	bne.n	5136 <bt_conn_set_state+0x162>
    5146:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    514a:	4820      	ldr	r0, [pc, #128]	; (51cc <bt_conn_set_state+0x1f8>)
    514c:	2100      	movs	r1, #0
}
    514e:	b007      	add	sp, #28
    5150:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5154:	f010 beb6 	b.w	15ec4 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    5158:	2d02      	cmp	r5, #2
    515a:	d103      	bne.n	5164 <bt_conn_set_state+0x190>
			notify_connected(conn);
    515c:	4620      	mov	r0, r4
    515e:	f7ff fac3 	bl	46e8 <notify_connected>
    5162:	e7ab      	b.n	50bc <bt_conn_set_state+0xe8>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    5164:	2d01      	cmp	r5, #1
    5166:	f47f af67 	bne.w	5038 <bt_conn_set_state+0x64>
			if (conn->err) {
    516a:	7a23      	ldrb	r3, [r4, #8]
    516c:	2b00      	cmp	r3, #0
    516e:	d0a5      	beq.n	50bc <bt_conn_set_state+0xe8>
    5170:	e7f4      	b.n	515c <bt_conn_set_state+0x188>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5172:	78a3      	ldrb	r3, [r4, #2]
    5174:	2b00      	cmp	r3, #0
    5176:	f47f af5f 	bne.w	5038 <bt_conn_set_state+0x64>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    517a:	4818      	ldr	r0, [pc, #96]	; (51dc <bt_conn_set_state+0x208>)
    517c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    5180:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    5184:	b007      	add	sp, #28
    5186:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    518a:	f010 bc03 	b.w	15994 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    518e:	f8cd 9008 	str.w	r9, [sp, #8]
    5192:	9701      	str	r7, [sp, #4]
    5194:	f8cd 9000 	str.w	r9, [sp]
    5198:	6834      	ldr	r4, [r6, #0]
    519a:	4b07      	ldr	r3, [pc, #28]	; (51b8 <bt_conn_set_state+0x1e4>)
    519c:	4a09      	ldr	r2, [pc, #36]	; (51c4 <bt_conn_set_state+0x1f0>)
    519e:	4903      	ldr	r1, [pc, #12]	; (51ac <bt_conn_set_state+0x1d8>)
    51a0:	480f      	ldr	r0, [pc, #60]	; (51e0 <bt_conn_set_state+0x20c>)
    51a2:	47a0      	blx	r4
		break;
    51a4:	e748      	b.n	5038 <bt_conn_set_state+0x64>
    51a6:	bf00      	nop
    51a8:	20003a5c 	.word	0x20003a5c
    51ac:	00017a29 	.word	0x00017a29
    51b0:	00017e68 	.word	0x00017e68
    51b4:	000182b6 	.word	0x000182b6
    51b8:	00017ef7 	.word	0x00017ef7
    51bc:	0001697a 	.word	0x0001697a
    51c0:	000182c0 	.word	0x000182c0
    51c4:	00017a64 	.word	0x00017a64
    51c8:	000182de 	.word	0x000182de
    51cc:	20003b88 	.word	0x20003b88
    51d0:	2000034c 	.word	0x2000034c
    51d4:	200003f8 	.word	0x200003f8
    51d8:	20003aec 	.word	0x20003aec
    51dc:	20001988 	.word	0x20001988
    51e0:	000182fc 	.word	0x000182fc
    51e4:	000161ba 	.word	0x000161ba

000051e8 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    51e8:	3044      	adds	r0, #68	; 0x44
    51ea:	4770      	bx	lr

000051ec <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    51ec:	b570      	push	{r4, r5, r6, lr}
    51ee:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    51f0:	4608      	mov	r0, r1
{
    51f2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    51f4:	f7fd fa7e 	bl	26f4 <bt_le_conn_params_valid>
    51f8:	b908      	cbnz	r0, 51fe <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    51fa:	2400      	movs	r4, #0
    51fc:	e01c      	b.n	5238 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    51fe:	481d      	ldr	r0, [pc, #116]	; (5274 <bt_conn_create_le+0x88>)
    5200:	f7ff fa82 	bl	4708 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5204:	0583      	lsls	r3, r0, #22
    5206:	d4f8      	bmi.n	51fa <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    5208:	4630      	mov	r0, r6
    520a:	f7ff fdd9 	bl	4dc0 <bt_conn_lookup_addr_le>
	if (conn) {
    520e:	4604      	mov	r4, r0
    5210:	b1a0      	cbz	r0, 523c <bt_conn_create_le+0x50>
		switch (conn->state) {
    5212:	7a43      	ldrb	r3, [r0, #9]
    5214:	2b01      	cmp	r3, #1
    5216:	d006      	beq.n	5226 <bt_conn_create_le+0x3a>
    5218:	d301      	bcc.n	521e <bt_conn_create_le+0x32>
    521a:	2b03      	cmp	r3, #3
    521c:	d90c      	bls.n	5238 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    521e:	4620      	mov	r0, r4
    5220:	f7ff fe04 	bl	4e2c <bt_conn_unref>
    5224:	e7e9      	b.n	51fa <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    5226:	886b      	ldrh	r3, [r5, #2]
    5228:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    522c:	88ab      	ldrh	r3, [r5, #4]
    522e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    5232:	88eb      	ldrh	r3, [r5, #6]
    5234:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    5238:	4620      	mov	r0, r4
    523a:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    523c:	4630      	mov	r0, r6
    523e:	f7ff fd27 	bl	4c90 <bt_conn_add_le>
	if (!conn) {
    5242:	4604      	mov	r4, r0
    5244:	2800      	cmp	r0, #0
    5246:	d0f7      	beq.n	5238 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    5248:	2207      	movs	r2, #7
    524a:	4631      	mov	r1, r6
    524c:	3052      	adds	r0, #82	; 0x52
    524e:	f7fc fe0f 	bl	1e70 <memcpy>
	conn->le.interval_max = param->interval_max;
    5252:	886b      	ldrh	r3, [r5, #2]
    5254:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    5258:	88ab      	ldrh	r3, [r5, #4]
    525a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    525e:	88eb      	ldrh	r3, [r5, #6]
    5260:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5264:	4620      	mov	r0, r4
    5266:	2101      	movs	r1, #1
    5268:	f7ff feb4 	bl	4fd4 <bt_conn_set_state>
	bt_le_scan_update(true);
    526c:	2001      	movs	r0, #1
    526e:	f7fd fbc5 	bl	29fc <bt_le_scan_update>
	return conn;
    5272:	e7e1      	b.n	5238 <bt_conn_create_le+0x4c>
    5274:	20003ad0 	.word	0x20003ad0

00005278 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    5278:	b570      	push	{r4, r5, r6, lr}
    527a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    527c:	460d      	mov	r5, r1
    527e:	2900      	cmp	r1, #0
    5280:	d13b      	bne.n	52fa <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    5282:	4630      	mov	r0, r6
    5284:	f7ff fd9c 	bl	4dc0 <bt_conn_lookup_addr_le>
	if (!conn) {
    5288:	4604      	mov	r4, r0
    528a:	b928      	cbnz	r0, 5298 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    528c:	4630      	mov	r0, r6
    528e:	f7ff fcff 	bl	4c90 <bt_conn_add_le>
		if (!conn) {
    5292:	4604      	mov	r4, r0
    5294:	2800      	cmp	r0, #0
    5296:	d051      	beq.n	533c <bt_le_set_auto_conn+0xc4>
    5298:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    529a:	2d00      	cmp	r5, #0
    529c:	d035      	beq.n	530a <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    529e:	886a      	ldrh	r2, [r5, #2]
    52a0:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    52a4:	88aa      	ldrh	r2, [r5, #4]
    52a6:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    52aa:	88ea      	ldrh	r2, [r5, #6]
    52ac:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    52b0:	f3bf 8f5b 	dmb	ish
    52b4:	e853 2f00 	ldrex	r2, [r3]
    52b8:	f042 0101 	orr.w	r1, r2, #1
    52bc:	e843 1000 	strex	r0, r1, [r3]
    52c0:	2800      	cmp	r0, #0
    52c2:	d1f7      	bne.n	52b4 <bt_le_set_auto_conn+0x3c>
    52c4:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    52c8:	07d1      	lsls	r1, r2, #31
    52ca:	d402      	bmi.n	52d2 <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    52cc:	4620      	mov	r0, r4
    52ce:	f7ff fd2b 	bl	4d28 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    52d2:	7a63      	ldrb	r3, [r4, #9]
    52d4:	b963      	cbnz	r3, 52f0 <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    52d6:	481b      	ldr	r0, [pc, #108]	; (5344 <bt_le_set_auto_conn+0xcc>)
    52d8:	f7ff fa16 	bl	4708 <atomic_get>
    52dc:	0783      	lsls	r3, r0, #30
    52de:	d507      	bpl.n	52f0 <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    52e0:	b11d      	cbz	r5, 52ea <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    52e2:	2101      	movs	r1, #1
    52e4:	4620      	mov	r0, r4
    52e6:	f7ff fe75 	bl	4fd4 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    52ea:	2000      	movs	r0, #0
    52ec:	f7fd fb86 	bl	29fc <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    52f0:	4620      	mov	r0, r4
    52f2:	f7ff fd9b 	bl	4e2c <bt_conn_unref>

	return 0;
    52f6:	2000      	movs	r0, #0
    52f8:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    52fa:	4608      	mov	r0, r1
    52fc:	f7fd f9fa 	bl	26f4 <bt_le_conn_params_valid>
    5300:	2800      	cmp	r0, #0
    5302:	d1be      	bne.n	5282 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    5304:	f06f 0015 	mvn.w	r0, #21
    5308:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    530a:	f3bf 8f5b 	dmb	ish
    530e:	e853 2f00 	ldrex	r2, [r3]
    5312:	f022 0101 	bic.w	r1, r2, #1
    5316:	e843 1000 	strex	r0, r1, [r3]
    531a:	2800      	cmp	r0, #0
    531c:	d1f7      	bne.n	530e <bt_le_set_auto_conn+0x96>
    531e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    5322:	07d2      	lsls	r2, r2, #31
    5324:	d5d5      	bpl.n	52d2 <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    5326:	4620      	mov	r0, r4
    5328:	f7ff fd80 	bl	4e2c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    532c:	7a63      	ldrb	r3, [r4, #9]
    532e:	2b01      	cmp	r3, #1
    5330:	d1cf      	bne.n	52d2 <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5332:	4629      	mov	r1, r5
    5334:	4620      	mov	r0, r4
    5336:	f7ff fe4d 	bl	4fd4 <bt_conn_set_state>
    533a:	e7ca      	b.n	52d2 <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    533c:	f06f 000b 	mvn.w	r0, #11
}
    5340:	bd70      	pop	{r4, r5, r6, pc}
    5342:	bf00      	nop
    5344:	20003ad0 	.word	0x20003ad0

00005348 <bt_conn_disconnect>:
{
    5348:	b570      	push	{r4, r5, r6, lr}
    534a:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    534c:	7881      	ldrb	r1, [r0, #2]
{
    534e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5350:	b911      	cbnz	r1, 5358 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    5352:	3044      	adds	r0, #68	; 0x44
    5354:	f7ff ff90 	bl	5278 <bt_le_set_auto_conn>
	switch (conn->state) {
    5358:	7a63      	ldrb	r3, [r4, #9]
    535a:	3b01      	subs	r3, #1
    535c:	2b03      	cmp	r3, #3
    535e:	d803      	bhi.n	5368 <bt_conn_disconnect+0x20>
    5360:	e8df f003 	tbb	[pc, r3]
    5364:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    5368:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    536c:	4628      	mov	r0, r5
    536e:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5370:	4620      	mov	r0, r4
		conn->err = reason;
    5372:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5374:	2100      	movs	r1, #0
    5376:	f7ff fe2d 	bl	4fd4 <bt_conn_set_state>
		bt_le_scan_update(false);
    537a:	2000      	movs	r0, #0
    537c:	f7fd fb3e 	bl	29fc <bt_le_scan_update>
		return 0;
    5380:	2500      	movs	r5, #0
    5382:	e7f3      	b.n	536c <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    5384:	f104 0070 	add.w	r0, r4, #112	; 0x70
    5388:	f010 faa0 	bl	158cc <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    538c:	2100      	movs	r1, #0
    538e:	f242 000e 	movw	r0, #8206	; 0x200e
}
    5392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    5396:	f7fd ba91 	b.w	28bc <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    539a:	2103      	movs	r1, #3
    539c:	f240 4006 	movw	r0, #1030	; 0x406
    53a0:	f7fc ffe8 	bl	2374 <bt_hci_cmd_create>
	if (!buf) {
    53a4:	4605      	mov	r5, r0
    53a6:	b198      	cbz	r0, 53d0 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    53a8:	2103      	movs	r1, #3
    53aa:	3008      	adds	r0, #8
    53ac:	f00e fd4e 	bl	13e4c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    53b0:	8823      	ldrh	r3, [r4, #0]
    53b2:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    53b4:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    53b6:	4629      	mov	r1, r5
    53b8:	f240 4006 	movw	r0, #1030	; 0x406
    53bc:	f7fd fa7e 	bl	28bc <bt_hci_cmd_send>
	if (err) {
    53c0:	4605      	mov	r5, r0
    53c2:	2800      	cmp	r0, #0
    53c4:	d1d2      	bne.n	536c <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    53c6:	2104      	movs	r1, #4
    53c8:	4620      	mov	r0, r4
    53ca:	f7ff fe03 	bl	4fd4 <bt_conn_set_state>
    53ce:	e7cd      	b.n	536c <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    53d0:	f06f 0536 	mvn.w	r5, #54	; 0x36
    53d4:	e7ca      	b.n	536c <bt_conn_disconnect+0x24>

000053d6 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    53d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53d8:	4607      	mov	r7, r0
    53da:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    53dc:	f242 0013 	movw	r0, #8211	; 0x2013
    53e0:	210e      	movs	r1, #14
    53e2:	f7fc ffc7 	bl	2374 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    53e6:	4606      	mov	r6, r0
    53e8:	b1c8      	cbz	r0, 541e <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    53ea:	210e      	movs	r1, #14
    53ec:	3008      	adds	r0, #8
    53ee:	f00e fd2d 	bl	13e4c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    53f2:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    53f4:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    53f6:	220e      	movs	r2, #14
    53f8:	f7fc fd66 	bl	1ec8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    53fc:	883b      	ldrh	r3, [r7, #0]
    53fe:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    5400:	882b      	ldrh	r3, [r5, #0]
    5402:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    5404:	886b      	ldrh	r3, [r5, #2]
    5406:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    5408:	88ab      	ldrh	r3, [r5, #4]
    540a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    540c:	88eb      	ldrh	r3, [r5, #6]
    540e:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    5410:	4631      	mov	r1, r6
    5412:	f242 0013 	movw	r0, #8211	; 0x2013
}
    5416:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    541a:	f7fd ba4f 	b.w	28bc <bt_hci_cmd_send>
}
    541e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005424 <bt_conn_le_param_update>:
{
    5424:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    5426:	4b27      	ldr	r3, [pc, #156]	; (54c4 <bt_conn_le_param_update+0xa0>)
{
    5428:	460d      	mov	r5, r1
    542a:	b08a      	sub	sp, #40	; 0x28
    542c:	4604      	mov	r4, r0
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    542e:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    5430:	f00f feb8 	bl	151a4 <_impl_k_current_get>
    5434:	88ea      	ldrh	r2, [r5, #6]
    5436:	9207      	str	r2, [sp, #28]
    5438:	88aa      	ldrh	r2, [r5, #4]
    543a:	9206      	str	r2, [sp, #24]
    543c:	886a      	ldrh	r2, [r5, #2]
    543e:	9205      	str	r2, [sp, #20]
    5440:	882a      	ldrh	r2, [r5, #0]
    5442:	4b21      	ldr	r3, [pc, #132]	; (54c8 <bt_conn_le_param_update+0xa4>)
    5444:	9204      	str	r2, [sp, #16]
    5446:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    544a:	9308      	str	r3, [sp, #32]
    544c:	9203      	str	r2, [sp, #12]
    544e:	9001      	str	r0, [sp, #4]
    5450:	9300      	str	r3, [sp, #0]
    5452:	4a1e      	ldr	r2, [pc, #120]	; (54cc <bt_conn_le_param_update+0xa8>)
    5454:	4b1e      	ldr	r3, [pc, #120]	; (54d0 <bt_conn_le_param_update+0xac>)
    5456:	9402      	str	r4, [sp, #8]
    5458:	491e      	ldr	r1, [pc, #120]	; (54d4 <bt_conn_le_param_update+0xb0>)
    545a:	481f      	ldr	r0, [pc, #124]	; (54d8 <bt_conn_le_param_update+0xb4>)
    545c:	47b0      	blx	r6
	if (conn->le.interval >= param->interval_min &&
    545e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    5462:	882a      	ldrh	r2, [r5, #0]
    5464:	429a      	cmp	r2, r3
    5466:	d80c      	bhi.n	5482 <bt_conn_le_param_update+0x5e>
    5468:	886a      	ldrh	r2, [r5, #2]
    546a:	429a      	cmp	r2, r3
    546c:	d309      	bcc.n	5482 <bt_conn_le_param_update+0x5e>
	    conn->le.interval <= param->interval_max &&
    546e:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    5472:	88ab      	ldrh	r3, [r5, #4]
    5474:	429a      	cmp	r2, r3
    5476:	d104      	bne.n	5482 <bt_conn_le_param_update+0x5e>
	    conn->le.latency == param->latency &&
    5478:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    547c:	88eb      	ldrh	r3, [r5, #6]
    547e:	429a      	cmp	r2, r3
    5480:	d01c      	beq.n	54bc <bt_conn_le_param_update+0x98>
	k_delayed_work_cancel(&conn->le.update_work);
    5482:	f104 0070 	add.w	r0, r4, #112	; 0x70
    5486:	f010 fa21 	bl	158cc <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    548a:	4b14      	ldr	r3, [pc, #80]	; (54dc <bt_conn_le_param_update+0xb8>)
    548c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5490:	079a      	lsls	r2, r3, #30
    5492:	d503      	bpl.n	549c <bt_conn_le_param_update+0x78>
    5494:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    5498:	079b      	lsls	r3, r3, #30
    549a:	d401      	bmi.n	54a0 <bt_conn_le_param_update+0x7c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    549c:	78e3      	ldrb	r3, [r4, #3]
    549e:	b933      	cbnz	r3, 54ae <bt_conn_le_param_update+0x8a>
		return bt_conn_le_conn_update(conn, param);
    54a0:	4629      	mov	r1, r5
    54a2:	4620      	mov	r0, r4
}
    54a4:	b00a      	add	sp, #40	; 0x28
    54a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_conn_le_conn_update(conn, param);
    54aa:	f7ff bf94 	b.w	53d6 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    54ae:	4629      	mov	r1, r5
    54b0:	4620      	mov	r0, r4
}
    54b2:	b00a      	add	sp, #40	; 0x28
    54b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_l2cap_update_conn_param(conn, param);
    54b8:	f000 bbd6 	b.w	5c68 <bt_l2cap_update_conn_param>
}
    54bc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    54c0:	b00a      	add	sp, #40	; 0x28
    54c2:	bd70      	pop	{r4, r5, r6, pc}
    54c4:	20003a5c 	.word	0x20003a5c
    54c8:	000161ba 	.word	0x000161ba
    54cc:	0001697a 	.word	0x0001697a
    54d0:	00017f23 	.word	0x00017f23
    54d4:	00017a29 	.word	0x00017a29
    54d8:	00017f3b 	.word	0x00017f3b
    54dc:	20003a60 	.word	0x20003a60

000054e0 <le_conn_update>:
{
    54e0:	4603      	mov	r3, r0
    54e2:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    54e4:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    54e8:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    54ea:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    54ee:	d105      	bne.n	54fc <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    54f0:	2113      	movs	r1, #19
    54f2:	f7ff ff29 	bl	5348 <bt_conn_disconnect>
}
    54f6:	b003      	add	sp, #12
    54f8:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    54fc:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    5500:	f8ad 2000 	strh.w	r2, [sp]
    5504:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    5508:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    550c:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    550e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    5512:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    5516:	f8ad 2004 	strh.w	r2, [sp, #4]
    551a:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    551e:	f7ff ff81 	bl	5424 <bt_conn_le_param_update>
    5522:	e7e8      	b.n	54f6 <le_conn_update+0x16>

00005524 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    5524:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    5526:	4b0e      	ldr	r3, [pc, #56]	; (5560 <bt_conn_create_pdu+0x3c>)
{
    5528:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    552a:	2800      	cmp	r0, #0
    552c:	bf08      	it	eq
    552e:	4618      	moveq	r0, r3
    5530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5534:	f00e fc28 	bl	13d88 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    5538:	4604      	mov	r4, r0
    553a:	b950      	cbnz	r0, 5552 <bt_conn_create_pdu+0x2e>
    553c:	f44f 63f2 	mov.w	r3, #1936	; 0x790
    5540:	4a08      	ldr	r2, [pc, #32]	; (5564 <bt_conn_create_pdu+0x40>)
    5542:	4909      	ldr	r1, [pc, #36]	; (5568 <bt_conn_create_pdu+0x44>)
    5544:	4809      	ldr	r0, [pc, #36]	; (556c <bt_conn_create_pdu+0x48>)
    5546:	f7fb fd21 	bl	f8c <printk>
    554a:	4809      	ldr	r0, [pc, #36]	; (5570 <bt_conn_create_pdu+0x4c>)
    554c:	f7fb fd1e 	bl	f8c <printk>
    5550:	e7fe      	b.n	5550 <bt_conn_create_pdu+0x2c>

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    5552:	1d29      	adds	r1, r5, #4
    5554:	3008      	adds	r0, #8
    5556:	f00e fc36 	bl	13dc6 <net_buf_simple_reserve>

	return buf;
}
    555a:	4620      	mov	r0, r4
    555c:	bd38      	pop	{r3, r4, r5, pc}
    555e:	bf00      	nop
    5560:	20003f2c 	.word	0x20003f2c
    5564:	000183df 	.word	0x000183df
    5568:	00016fe9 	.word	0x00016fe9
    556c:	0001619c 	.word	0x0001619c
    5570:	000161ba 	.word	0x000161ba

00005574 <create_frag.isra.9>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    5574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5578:	4606      	mov	r6, r0
    557a:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    557c:	4816      	ldr	r0, [pc, #88]	; (55d8 <create_frag.isra.9+0x64>)
    557e:	2100      	movs	r1, #0
    5580:	f7ff ffd0 	bl	5524 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    5584:	7833      	ldrb	r3, [r6, #0]
    5586:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    5588:	4605      	mov	r5, r0
    558a:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    558e:	d005      	beq.n	559c <create_frag.isra.9+0x28>
		net_buf_unref(frag);
    5590:	f00e fc2a 	bl	13de8 <net_buf_unref>
		return NULL;
    5594:	4635      	mov	r5, r6
}
    5596:	4628      	mov	r0, r5
    5598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    559c:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    559e:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    55a2:	4e0e      	ldr	r6, [pc, #56]	; (55dc <create_frag.isra.9+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    55a4:	4638      	mov	r0, r7
    55a6:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    55aa:	f00e fc8a 	bl	13ec2 <net_buf_simple_tailroom>
    55ae:	4580      	cmp	r8, r0
    55b0:	d20c      	bcs.n	55cc <create_frag.isra.9+0x58>
	return bt_dev.le.mtu;
    55b2:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    55b6:	f854 1f08 	ldr.w	r1, [r4, #8]!
    55ba:	4632      	mov	r2, r6
    55bc:	4638      	mov	r0, r7
    55be:	f00e fc4b 	bl	13e58 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    55c2:	4631      	mov	r1, r6
    55c4:	4620      	mov	r0, r4
    55c6:	f00e fc60 	bl	13e8a <net_buf_simple_pull>
    55ca:	e7e4      	b.n	5596 <create_frag.isra.9+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    55cc:	4638      	mov	r0, r7
    55ce:	f00e fc78 	bl	13ec2 <net_buf_simple_tailroom>
    55d2:	b286      	uxth	r6, r0
    55d4:	e7ef      	b.n	55b6 <create_frag.isra.9+0x42>
    55d6:	bf00      	nop
    55d8:	20003f4c 	.word	0x20003f4c
    55dc:	20003a60 	.word	0x20003a60

000055e0 <bt_conn_process_tx>:
{
    55e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("conn %p", conn);
    55e4:	4f49      	ldr	r7, [pc, #292]	; (570c <bt_conn_process_tx+0x12c>)
    55e6:	4d4a      	ldr	r5, [pc, #296]	; (5710 <bt_conn_process_tx+0x130>)
    55e8:	683e      	ldr	r6, [r7, #0]
{
    55ea:	b086      	sub	sp, #24
    55ec:	4604      	mov	r4, r0
    55ee:	f00f fdd9 	bl	151a4 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    55f2:	4b48      	ldr	r3, [pc, #288]	; (5714 <bt_conn_process_tx+0x134>)
    55f4:	9001      	str	r0, [sp, #4]
    55f6:	9503      	str	r5, [sp, #12]
    55f8:	9402      	str	r4, [sp, #8]
    55fa:	9500      	str	r5, [sp, #0]
    55fc:	4a46      	ldr	r2, [pc, #280]	; (5718 <bt_conn_process_tx+0x138>)
    55fe:	4947      	ldr	r1, [pc, #284]	; (571c <bt_conn_process_tx+0x13c>)
    5600:	4847      	ldr	r0, [pc, #284]	; (5720 <bt_conn_process_tx+0x140>)
    5602:	47b0      	blx	r6
	if (conn->state == BT_CONN_DISCONNECTED &&
    5604:	7a63      	ldrb	r3, [r4, #9]
    5606:	46b8      	mov	r8, r7
    5608:	462e      	mov	r6, r5
    560a:	bb0b      	cbnz	r3, 5650 <bt_conn_process_tx+0x70>
    560c:	f3bf 8f5b 	dmb	ish
    5610:	1d23      	adds	r3, r4, #4
    5612:	e853 2f00 	ldrex	r2, [r3]
    5616:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    561a:	e843 1000 	strex	r0, r1, [r3]
    561e:	2800      	cmp	r0, #0
    5620:	d1f7      	bne.n	5612 <bt_conn_process_tx+0x32>
    5622:	f3bf 8f5b 	dmb	ish
    5626:	0653      	lsls	r3, r2, #25
    5628:	d512      	bpl.n	5650 <bt_conn_process_tx+0x70>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    562a:	683e      	ldr	r6, [r7, #0]
    562c:	f00f fdba 	bl	151a4 <_impl_k_current_get>
    5630:	9503      	str	r5, [sp, #12]
    5632:	8823      	ldrh	r3, [r4, #0]
    5634:	9302      	str	r3, [sp, #8]
    5636:	9001      	str	r0, [sp, #4]
    5638:	9500      	str	r5, [sp, #0]
    563a:	4b36      	ldr	r3, [pc, #216]	; (5714 <bt_conn_process_tx+0x134>)
    563c:	4a36      	ldr	r2, [pc, #216]	; (5718 <bt_conn_process_tx+0x138>)
    563e:	4937      	ldr	r1, [pc, #220]	; (571c <bt_conn_process_tx+0x13c>)
    5640:	4838      	ldr	r0, [pc, #224]	; (5724 <bt_conn_process_tx+0x144>)
    5642:	47b0      	blx	r6
		conn_cleanup(conn);
    5644:	4620      	mov	r0, r4
}
    5646:	b006      	add	sp, #24
    5648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn);
    564c:	f7ff bc20 	b.w	4e90 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    5650:	2100      	movs	r1, #0
    5652:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5656:	f00e fb9d 	bl	13d94 <net_buf_get>
	BT_ASSERT(buf);
    565a:	4605      	mov	r5, r0
    565c:	b970      	cbnz	r0, 567c <bt_conn_process_tx+0x9c>
    565e:	9601      	str	r6, [sp, #4]
    5660:	9600      	str	r6, [sp, #0]
    5662:	f8d8 4000 	ldr.w	r4, [r8]
    5666:	4b2b      	ldr	r3, [pc, #172]	; (5714 <bt_conn_process_tx+0x134>)
    5668:	4a2f      	ldr	r2, [pc, #188]	; (5728 <bt_conn_process_tx+0x148>)
    566a:	492c      	ldr	r1, [pc, #176]	; (571c <bt_conn_process_tx+0x13c>)
    566c:	482f      	ldr	r0, [pc, #188]	; (572c <bt_conn_process_tx+0x14c>)
    566e:	47a0      	blx	r4
    5670:	4040      	eors	r0, r0
    5672:	f380 8811 	msr	BASEPRI, r0
    5676:	f04f 0004 	mov.w	r0, #4
    567a:	df02      	svc	2
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    567c:	f8d8 7000 	ldr.w	r7, [r8]
    5680:	f00f fd90 	bl	151a4 <_impl_k_current_get>
    5684:	9605      	str	r6, [sp, #20]
    5686:	89ab      	ldrh	r3, [r5, #12]
    5688:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    568a:	4e29      	ldr	r6, [pc, #164]	; (5730 <bt_conn_process_tx+0x150>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    568c:	9304      	str	r3, [sp, #16]
    568e:	9001      	str	r0, [sp, #4]
    5690:	4a21      	ldr	r2, [pc, #132]	; (5718 <bt_conn_process_tx+0x138>)
    5692:	4922      	ldr	r1, [pc, #136]	; (571c <bt_conn_process_tx+0x13c>)
    5694:	9503      	str	r5, [sp, #12]
    5696:	9402      	str	r4, [sp, #8]
    5698:	4b26      	ldr	r3, [pc, #152]	; (5734 <bt_conn_process_tx+0x154>)
    569a:	4827      	ldr	r0, [pc, #156]	; (5738 <bt_conn_process_tx+0x158>)
    569c:	47b8      	blx	r7
	if (buf->len <= conn_mtu(conn)) {
    569e:	89a9      	ldrh	r1, [r5, #12]
    56a0:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    56a4:	4291      	cmp	r1, r2
    56a6:	d809      	bhi.n	56bc <bt_conn_process_tx+0xdc>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    56a8:	2300      	movs	r3, #0
    56aa:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    56ac:	4629      	mov	r1, r5
    56ae:	4620      	mov	r0, r4
    56b0:	f7ff fa08 	bl	4ac4 <send_frag>
	if (!send_buf(conn, buf)) {
    56b4:	b150      	cbz	r0, 56cc <bt_conn_process_tx+0xec>
}
    56b6:	b006      	add	sp, #24
    56b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56bc:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    56c0:	4629      	mov	r1, r5
    56c2:	4638      	mov	r0, r7
    56c4:	f7ff ff56 	bl	5574 <create_frag.isra.9>
	if (!frag) {
    56c8:	4601      	mov	r1, r0
    56ca:	b928      	cbnz	r0, 56d8 <bt_conn_process_tx+0xf8>
		net_buf_unref(buf);
    56cc:	4628      	mov	r0, r5
}
    56ce:	b006      	add	sp, #24
    56d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    56d4:	f00e bb88 	b.w	13de8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    56d8:	2301      	movs	r3, #1
    56da:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    56dc:	4620      	mov	r0, r4
    56de:	f7ff f9f1 	bl	4ac4 <send_frag>
    56e2:	2800      	cmp	r0, #0
    56e4:	d0f2      	beq.n	56cc <bt_conn_process_tx+0xec>
	while (buf->len > conn_mtu(conn)) {
    56e6:	89aa      	ldrh	r2, [r5, #12]
    56e8:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    56ec:	429a      	cmp	r2, r3
    56ee:	d802      	bhi.n	56f6 <bt_conn_process_tx+0x116>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    56f0:	2300      	movs	r3, #0
    56f2:	2201      	movs	r2, #1
    56f4:	e7da      	b.n	56ac <bt_conn_process_tx+0xcc>
		frag = create_frag(conn, buf);
    56f6:	4629      	mov	r1, r5
    56f8:	4638      	mov	r0, r7
    56fa:	f7ff ff3b 	bl	5574 <create_frag.isra.9>
		if (!frag) {
    56fe:	4601      	mov	r1, r0
    5700:	2800      	cmp	r0, #0
    5702:	d0e3      	beq.n	56cc <bt_conn_process_tx+0xec>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5704:	2301      	movs	r3, #1
    5706:	461a      	mov	r2, r3
    5708:	e7e8      	b.n	56dc <bt_conn_process_tx+0xfc>
    570a:	bf00      	nop
    570c:	20003a5c 	.word	0x20003a5c
    5710:	000161ba 	.word	0x000161ba
    5714:	00017ee4 	.word	0x00017ee4
    5718:	0001697a 	.word	0x0001697a
    571c:	00017a29 	.word	0x00017a29
    5720:	00017f7d 	.word	0x00017f7d
    5724:	00017fe1 	.word	0x00017fe1
    5728:	000179e1 	.word	0x000179e1
    572c:	00017bd6 	.word	0x00017bd6
    5730:	20003a60 	.word	0x20003a60
    5734:	00017ec4 	.word	0x00017ec4
    5738:	0001801b 	.word	0x0001801b

0000573c <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    573c:	4b03      	ldr	r3, [pc, #12]	; (574c <bt_conn_get_id+0x10>)
    573e:	1ac0      	subs	r0, r0, r3
    5740:	4b03      	ldr	r3, [pc, #12]	; (5750 <bt_conn_get_id+0x14>)
    5742:	10c0      	asrs	r0, r0, #3
    5744:	4358      	muls	r0, r3
}
    5746:	b2c0      	uxtb	r0, r0
    5748:	4770      	bx	lr
    574a:	bf00      	nop
    574c:	20000360 	.word	0x20000360
    5750:	286bca1b 	.word	0x286bca1b

00005754 <bt_conn_init>:
	parent->next = child;
    5754:	4b12      	ldr	r3, [pc, #72]	; (57a0 <bt_conn_init+0x4c>)
    5756:	4a13      	ldr	r2, [pc, #76]	; (57a4 <bt_conn_init+0x50>)
    5758:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    575a:	b510      	push	{r4, lr}
    575c:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    575e:	6859      	ldr	r1, [r3, #4]
    5760:	b901      	cbnz	r1, 5764 <bt_conn_init+0x10>
	list->tail = node;
    5762:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    5764:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    5766:	6092      	str	r2, [r2, #8]
	list->head = node;
    5768:	4a0f      	ldr	r2, [pc, #60]	; (57a8 <bt_conn_init+0x54>)
    576a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    576c:	b901      	cbnz	r1, 5770 <bt_conn_init+0x1c>
	list->tail = node;
    576e:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    5770:	f001 fb9e 	bl	6eb0 <bt_att_init>

	err = bt_smp_init();
    5774:	f002 f924 	bl	79c0 <bt_smp_init>
	if (err) {
    5778:	4604      	mov	r4, r0
    577a:	b970      	cbnz	r0, 579a <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    577c:	f000 fa9c 	bl	5cb8 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    5780:	480a      	ldr	r0, [pc, #40]	; (57ac <bt_conn_init+0x58>)
    5782:	f7fe ffc1 	bl	4708 <atomic_get>
    5786:	b140      	cbz	r0, 579a <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5788:	4809      	ldr	r0, [pc, #36]	; (57b0 <bt_conn_init+0x5c>)
    578a:	f7fe ffbd 	bl	4708 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    578e:	07c3      	lsls	r3, r0, #31
    5790:	d503      	bpl.n	579a <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5792:	2101      	movs	r1, #1
    5794:	4807      	ldr	r0, [pc, #28]	; (57b4 <bt_conn_init+0x60>)
    5796:	f7ff fc1d 	bl	4fd4 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    579a:	4620      	mov	r0, r4
    579c:	bd10      	pop	{r4, pc}
    579e:	bf00      	nop
    57a0:	200003f8 	.word	0x200003f8
    57a4:	20000350 	.word	0x20000350
    57a8:	20000358 	.word	0x20000358
    57ac:	200003a0 	.word	0x200003a0
    57b0:	20000364 	.word	0x20000364
    57b4:	20000360 	.word	0x20000360

000057b8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    57b8:	4770      	bx	lr
	...

000057bc <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    57bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    57be:	4a0b      	ldr	r2, [pc, #44]	; (57ec <l2cap_accept+0x30>)
    57c0:	6813      	ldr	r3, [r2, #0]
    57c2:	b92b      	cbnz	r3, 57d0 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    57c4:	480a      	ldr	r0, [pc, #40]	; (57f0 <l2cap_accept+0x34>)
    57c6:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    57c8:	600a      	str	r2, [r1, #0]

		return 0;
    57ca:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    57cc:	b004      	add	sp, #16
    57ce:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    57d0:	4b08      	ldr	r3, [pc, #32]	; (57f4 <l2cap_accept+0x38>)
    57d2:	9302      	str	r3, [sp, #8]
    57d4:	9300      	str	r3, [sp, #0]
    57d6:	4b08      	ldr	r3, [pc, #32]	; (57f8 <l2cap_accept+0x3c>)
    57d8:	9001      	str	r0, [sp, #4]
    57da:	681c      	ldr	r4, [r3, #0]
    57dc:	4807      	ldr	r0, [pc, #28]	; (57fc <l2cap_accept+0x40>)
    57de:	4b08      	ldr	r3, [pc, #32]	; (5800 <l2cap_accept+0x44>)
    57e0:	4a08      	ldr	r2, [pc, #32]	; (5804 <l2cap_accept+0x48>)
    57e2:	4909      	ldr	r1, [pc, #36]	; (5808 <l2cap_accept+0x4c>)
    57e4:	47a0      	blx	r4
	return -ENOMEM;
    57e6:	f06f 000b 	mvn.w	r0, #11
    57ea:	e7ef      	b.n	57cc <l2cap_accept+0x10>
    57ec:	20000400 	.word	0x20000400
    57f0:	20003ba4 	.word	0x20003ba4
    57f4:	000161ba 	.word	0x000161ba
    57f8:	20003a5c 	.word	0x20003a5c
    57fc:	0001853c 	.word	0x0001853c
    5800:	000184cd 	.word	0x000184cd
    5804:	000179e1 	.word	0x000179e1
    5808:	00017a29 	.word	0x00017a29

0000580c <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    580e:	4607      	mov	r7, r0
    5810:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5812:	2000      	movs	r0, #0
    5814:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5816:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5818:	f7ff fe84 	bl	5524 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    581c:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    581e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5820:	3008      	adds	r0, #8
    5822:	f00e fb13 	bl	13e4c <net_buf_simple_add>
	hdr->code = code;
    5826:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    5828:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    582a:	8045      	strh	r5, [r0, #2]
}
    582c:	4620      	mov	r0, r4
    582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005830 <l2cap_connected>:
    5830:	4770      	bx	lr
	...

00005834 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    5834:	2300      	movs	r3, #0
    5836:	6083      	str	r3, [r0, #8]
    5838:	4b05      	ldr	r3, [pc, #20]	; (5850 <bt_l2cap_le_fixed_chan_register+0x1c>)
    583a:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    583c:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    5840:	b911      	cbnz	r1, 5848 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    5842:	605a      	str	r2, [r3, #4]
	list->head = node;
    5844:	601a      	str	r2, [r3, #0]
    5846:	4770      	bx	lr
	parent->next = child;
    5848:	600a      	str	r2, [r1, #0]
	list->tail = node;
    584a:	605a      	str	r2, [r3, #4]
    584c:	4770      	bx	lr
    584e:	bf00      	nop
    5850:	20000498 	.word	0x20000498

00005854 <bt_l2cap_chan_remove>:
{
    5854:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5856:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5858:	b113      	cbz	r3, 5860 <bt_l2cap_chan_remove+0xc>
    585a:	3b08      	subs	r3, #8
    585c:	2200      	movs	r2, #0
    585e:	b903      	cbnz	r3, 5862 <bt_l2cap_chan_remove+0xe>
    5860:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    5862:	428b      	cmp	r3, r1
    5864:	f103 0408 	add.w	r4, r3, #8
    5868:	d10f      	bne.n	588a <bt_l2cap_chan_remove+0x36>
    586a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    586c:	b93a      	cbnz	r2, 587e <bt_l2cap_chan_remove+0x2a>
    586e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    5870:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    5872:	4294      	cmp	r4, r2
    5874:	d100      	bne.n	5878 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    5876:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    5878:	2200      	movs	r2, #0
    587a:	609a      	str	r2, [r3, #8]
    587c:	bd10      	pop	{r4, pc}
    587e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    5880:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    5882:	428c      	cmp	r4, r1
	list->tail = node;
    5884:	bf08      	it	eq
    5886:	63c2      	streq	r2, [r0, #60]	; 0x3c
    5888:	e7f6      	b.n	5878 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    588a:	4622      	mov	r2, r4
    588c:	2c00      	cmp	r4, #0
    588e:	d0e7      	beq.n	5860 <bt_l2cap_chan_remove+0xc>
	return node->next;
    5890:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5892:	2b00      	cmp	r3, #0
    5894:	d0e4      	beq.n	5860 <bt_l2cap_chan_remove+0xc>
    5896:	3b08      	subs	r3, #8
    5898:	e7e1      	b.n	585e <bt_l2cap_chan_remove+0xa>

0000589a <bt_l2cap_chan_del>:
	if (!chan->conn) {
    589a:	6803      	ldr	r3, [r0, #0]
{
    589c:	b510      	push	{r4, lr}
    589e:	4604      	mov	r4, r0
	if (!chan->conn) {
    58a0:	b12b      	cbz	r3, 58ae <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    58a2:	6843      	ldr	r3, [r0, #4]
    58a4:	685b      	ldr	r3, [r3, #4]
    58a6:	b103      	cbz	r3, 58aa <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    58a8:	4798      	blx	r3
	chan->conn = NULL;
    58aa:	2300      	movs	r3, #0
    58ac:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    58ae:	68e3      	ldr	r3, [r4, #12]
    58b0:	b11b      	cbz	r3, 58ba <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    58b2:	4620      	mov	r0, r4
}
    58b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    58b8:	4718      	bx	r3
    58ba:	bd10      	pop	{r4, pc}

000058bc <l2cap_rtx_timeout>:
{
    58bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_ERR("chan %p timeout", chan);
    58be:	4b0c      	ldr	r3, [pc, #48]	; (58f0 <l2cap_rtx_timeout+0x34>)
    58c0:	9302      	str	r3, [sp, #8]
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    58c2:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    58c6:	e88d 0018 	stmia.w	sp, {r3, r4}
    58ca:	4b0a      	ldr	r3, [pc, #40]	; (58f4 <l2cap_rtx_timeout+0x38>)
    58cc:	4a0a      	ldr	r2, [pc, #40]	; (58f8 <l2cap_rtx_timeout+0x3c>)
    58ce:	681e      	ldr	r6, [r3, #0]
    58d0:	490a      	ldr	r1, [pc, #40]	; (58fc <l2cap_rtx_timeout+0x40>)
    58d2:	4b0b      	ldr	r3, [pc, #44]	; (5900 <l2cap_rtx_timeout+0x44>)
{
    58d4:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    58d6:	480b      	ldr	r0, [pc, #44]	; (5904 <l2cap_rtx_timeout+0x48>)
    58d8:	47b0      	blx	r6
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    58da:	f855 0c10 	ldr.w	r0, [r5, #-16]
    58de:	4621      	mov	r1, r4
    58e0:	f7ff ffb8 	bl	5854 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    58e4:	4620      	mov	r0, r4
}
    58e6:	b004      	add	sp, #16
    58e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_chan_del(&chan->chan);
    58ec:	f7ff bfd5 	b.w	589a <bt_l2cap_chan_del>
    58f0:	000161ba 	.word	0x000161ba
    58f4:	20003a5c 	.word	0x20003a5c
    58f8:	000179e1 	.word	0x000179e1
    58fc:	00017a29 	.word	0x00017a29
    5900:	00018477 	.word	0x00018477
    5904:	00018690 	.word	0x00018690

00005908 <bt_l2cap_connected>:
{
    5908:	4b1a      	ldr	r3, [pc, #104]	; (5974 <bt_l2cap_connected+0x6c>)
    590a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    590e:	681c      	ldr	r4, [r3, #0]
    5910:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5912:	b12c      	cbz	r4, 5920 <bt_l2cap_connected+0x18>
	parent->next = child;
    5914:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5916:	f8df 8060 	ldr.w	r8, [pc, #96]	; 5978 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    591a:	3c08      	subs	r4, #8
    591c:	46b9      	mov	r9, r7
    591e:	b914      	cbnz	r4, 5926 <bt_l2cap_connected+0x1e>
}
    5920:	b003      	add	sp, #12
    5922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    5926:	6863      	ldr	r3, [r4, #4]
    5928:	a901      	add	r1, sp, #4
    592a:	4630      	mov	r0, r6
    592c:	4798      	blx	r3
    592e:	2800      	cmp	r0, #0
    5930:	db18      	blt.n	5964 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    5932:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    5934:	8823      	ldrh	r3, [r4, #0]
    5936:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    5938:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    593c:	4641      	mov	r1, r8
    593e:	f105 0010 	add.w	r0, r5, #16
    5942:	f00f ffb3 	bl	158ac <k_delayed_work_init>
    5946:	60af      	str	r7, [r5, #8]
    5948:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    594a:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    594e:	b972      	cbnz	r2, 596e <bt_l2cap_connected+0x66>
	list->tail = node;
    5950:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    5952:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    5954:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    5956:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    5958:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    595a:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	b103      	cbz	r3, 5964 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    5962:	4798      	blx	r3
	return node->next;
    5964:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5966:	2c00      	cmp	r4, #0
    5968:	d0da      	beq.n	5920 <bt_l2cap_connected+0x18>
    596a:	3c08      	subs	r4, #8
    596c:	e7d7      	b.n	591e <bt_l2cap_connected+0x16>
	parent->next = child;
    596e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5970:	63f3      	str	r3, [r6, #60]	; 0x3c
    5972:	e7ef      	b.n	5954 <bt_l2cap_connected+0x4c>
    5974:	20000498 	.word	0x20000498
    5978:	000058bd 	.word	0x000058bd

0000597c <bt_l2cap_disconnected>:
{
    597c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    597e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5980:	b1a3      	cbz	r3, 59ac <bt_l2cap_disconnected+0x30>
    5982:	f1b3 0008 	subs.w	r0, r3, #8
    5986:	d10a      	bne.n	599e <bt_l2cap_disconnected+0x22>
    5988:	bd10      	pop	{r4, pc}
    598a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    598c:	f7ff ff85 	bl	589a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5990:	b164      	cbz	r4, 59ac <bt_l2cap_disconnected+0x30>
	return node->next;
    5992:	68a3      	ldr	r3, [r4, #8]
    5994:	b103      	cbz	r3, 5998 <bt_l2cap_disconnected+0x1c>
    5996:	3b08      	subs	r3, #8
{
    5998:	4620      	mov	r0, r4
    599a:	461c      	mov	r4, r3
    599c:	e7f6      	b.n	598c <bt_l2cap_disconnected+0x10>
    599e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    59a0:	2c00      	cmp	r4, #0
    59a2:	d1f2      	bne.n	598a <bt_l2cap_disconnected+0xe>
}
    59a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    59a8:	f7ff bf77 	b.w	589a <bt_l2cap_chan_del>
    59ac:	bd10      	pop	{r4, pc}

000059ae <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    59ae:	3104      	adds	r1, #4
    59b0:	f7ff bdb8 	b.w	5524 <bt_conn_create_pdu>

000059b4 <bt_l2cap_send_cb>:
{
    59b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59b6:	4614      	mov	r4, r2
    59b8:	4605      	mov	r5, r0
    59ba:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    59bc:	f102 0008 	add.w	r0, r2, #8
    59c0:	2104      	movs	r1, #4
{
    59c2:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    59c4:	f00e fa59 	bl	13e7a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    59c8:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    59ca:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    59cc:	3904      	subs	r1, #4
    59ce:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    59d0:	4632      	mov	r2, r6
    59d2:	4621      	mov	r1, r4
    59d4:	4628      	mov	r0, r5
}
    59d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    59da:	f7fe bff1 	b.w	49c0 <bt_conn_send_cb>
	...

000059e0 <l2cap_recv>:
{
    59e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    59e2:	898b      	ldrh	r3, [r1, #12]
    59e4:	2b03      	cmp	r3, #3
{
    59e6:	b087      	sub	sp, #28
    59e8:	4607      	mov	r7, r0
    59ea:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    59ec:	d80a      	bhi.n	5a04 <l2cap_recv+0x24>
		BT_ERR("Too small L2CAP signaling PDU");
    59ee:	4b5e      	ldr	r3, [pc, #376]	; (5b68 <l2cap_recv+0x188>)
    59f0:	9301      	str	r3, [sp, #4]
    59f2:	9300      	str	r3, [sp, #0]
    59f4:	4b5d      	ldr	r3, [pc, #372]	; (5b6c <l2cap_recv+0x18c>)
    59f6:	4a5e      	ldr	r2, [pc, #376]	; (5b70 <l2cap_recv+0x190>)
    59f8:	681c      	ldr	r4, [r3, #0]
    59fa:	495e      	ldr	r1, [pc, #376]	; (5b74 <l2cap_recv+0x194>)
    59fc:	4b5e      	ldr	r3, [pc, #376]	; (5b78 <l2cap_recv+0x198>)
    59fe:	485f      	ldr	r0, [pc, #380]	; (5b7c <l2cap_recv+0x19c>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    5a00:	47a0      	blx	r4
		return;
    5a02:	e015      	b.n	5a30 <l2cap_recv+0x50>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5a04:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5a06:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5a08:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    5a0c:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5a0e:	f00e fa3c 	bl	13e8a <net_buf_simple_pull>
	if (buf->len != len) {
    5a12:	89aa      	ldrh	r2, [r5, #12]
    5a14:	4296      	cmp	r6, r2
    5a16:	d00d      	beq.n	5a34 <l2cap_recv+0x54>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    5a18:	4b53      	ldr	r3, [pc, #332]	; (5b68 <l2cap_recv+0x188>)
    5a1a:	9303      	str	r3, [sp, #12]
    5a1c:	9300      	str	r3, [sp, #0]
    5a1e:	4b53      	ldr	r3, [pc, #332]	; (5b6c <l2cap_recv+0x18c>)
    5a20:	9201      	str	r2, [sp, #4]
    5a22:	9602      	str	r6, [sp, #8]
    5a24:	681c      	ldr	r4, [r3, #0]
    5a26:	4a52      	ldr	r2, [pc, #328]	; (5b70 <l2cap_recv+0x190>)
    5a28:	4b53      	ldr	r3, [pc, #332]	; (5b78 <l2cap_recv+0x198>)
    5a2a:	4952      	ldr	r1, [pc, #328]	; (5b74 <l2cap_recv+0x194>)
    5a2c:	4854      	ldr	r0, [pc, #336]	; (5b80 <l2cap_recv+0x1a0>)
    5a2e:	47a0      	blx	r4
}
    5a30:	b007      	add	sp, #28
    5a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    5a34:	7861      	ldrb	r1, [r4, #1]
    5a36:	b949      	cbnz	r1, 5a4c <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    5a38:	4b4b      	ldr	r3, [pc, #300]	; (5b68 <l2cap_recv+0x188>)
    5a3a:	9301      	str	r3, [sp, #4]
    5a3c:	9300      	str	r3, [sp, #0]
    5a3e:	4b4b      	ldr	r3, [pc, #300]	; (5b6c <l2cap_recv+0x18c>)
    5a40:	4a4b      	ldr	r2, [pc, #300]	; (5b70 <l2cap_recv+0x190>)
    5a42:	681c      	ldr	r4, [r3, #0]
    5a44:	494b      	ldr	r1, [pc, #300]	; (5b74 <l2cap_recv+0x194>)
    5a46:	4b4c      	ldr	r3, [pc, #304]	; (5b78 <l2cap_recv+0x198>)
    5a48:	484e      	ldr	r0, [pc, #312]	; (5b84 <l2cap_recv+0x1a4>)
    5a4a:	e7d9      	b.n	5a00 <l2cap_recv+0x20>
	switch (hdr->code) {
    5a4c:	7823      	ldrb	r3, [r4, #0]
    5a4e:	2b12      	cmp	r3, #18
    5a50:	d02c      	beq.n	5aac <l2cap_recv+0xcc>
    5a52:	2b13      	cmp	r3, #19
    5a54:	d01e      	beq.n	5a94 <l2cap_recv+0xb4>
    5a56:	2b01      	cmp	r3, #1
    5a58:	d0ea      	beq.n	5a30 <l2cap_recv+0x50>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    5a5a:	4a43      	ldr	r2, [pc, #268]	; (5b68 <l2cap_recv+0x188>)
    5a5c:	9202      	str	r2, [sp, #8]
    5a5e:	e88d 000c 	stmia.w	sp, {r2, r3}
    5a62:	4b42      	ldr	r3, [pc, #264]	; (5b6c <l2cap_recv+0x18c>)
    5a64:	4a48      	ldr	r2, [pc, #288]	; (5b88 <l2cap_recv+0x1a8>)
    5a66:	681d      	ldr	r5, [r3, #0]
    5a68:	4942      	ldr	r1, [pc, #264]	; (5b74 <l2cap_recv+0x194>)
    5a6a:	4b43      	ldr	r3, [pc, #268]	; (5b78 <l2cap_recv+0x198>)
    5a6c:	4847      	ldr	r0, [pc, #284]	; (5b8c <l2cap_recv+0x1ac>)
    5a6e:	47a8      	blx	r5
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5a70:	2202      	movs	r2, #2
    5a72:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    5a74:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5a76:	2001      	movs	r0, #1
    5a78:	f7ff fec8 	bl	580c <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    5a7c:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5a7e:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    5a80:	3008      	adds	r0, #8
    5a82:	f00e f9e3 	bl	13e4c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    5a86:	2300      	movs	r3, #0
    5a88:	7003      	strb	r3, [r0, #0]
    5a8a:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    5a8c:	4622      	mov	r2, r4
    5a8e:	2105      	movs	r1, #5
    5a90:	4628      	mov	r0, r5
    5a92:	e029      	b.n	5ae8 <l2cap_recv+0x108>
	if (buf->len < sizeof(*rsp)) {
    5a94:	2e01      	cmp	r6, #1
    5a96:	d8cb      	bhi.n	5a30 <l2cap_recv+0x50>
		BT_ERR("Too small LE conn param rsp");
    5a98:	4b33      	ldr	r3, [pc, #204]	; (5b68 <l2cap_recv+0x188>)
    5a9a:	9301      	str	r3, [sp, #4]
    5a9c:	9300      	str	r3, [sp, #0]
    5a9e:	4b33      	ldr	r3, [pc, #204]	; (5b6c <l2cap_recv+0x18c>)
    5aa0:	4a33      	ldr	r2, [pc, #204]	; (5b70 <l2cap_recv+0x190>)
    5aa2:	681c      	ldr	r4, [r3, #0]
    5aa4:	4933      	ldr	r1, [pc, #204]	; (5b74 <l2cap_recv+0x194>)
    5aa6:	4b3a      	ldr	r3, [pc, #232]	; (5b90 <l2cap_recv+0x1b0>)
    5aa8:	483a      	ldr	r0, [pc, #232]	; (5b94 <l2cap_recv+0x1b4>)
    5aaa:	e7a9      	b.n	5a00 <l2cap_recv+0x20>
	if (buf->len < sizeof(*req)) {
    5aac:	2e07      	cmp	r6, #7
    5aae:	d809      	bhi.n	5ac4 <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn update param req");
    5ab0:	4b2d      	ldr	r3, [pc, #180]	; (5b68 <l2cap_recv+0x188>)
    5ab2:	9301      	str	r3, [sp, #4]
    5ab4:	9300      	str	r3, [sp, #0]
    5ab6:	4b2d      	ldr	r3, [pc, #180]	; (5b6c <l2cap_recv+0x18c>)
    5ab8:	4a2d      	ldr	r2, [pc, #180]	; (5b70 <l2cap_recv+0x190>)
    5aba:	681c      	ldr	r4, [r3, #0]
    5abc:	492d      	ldr	r1, [pc, #180]	; (5b74 <l2cap_recv+0x194>)
    5abe:	4b36      	ldr	r3, [pc, #216]	; (5b98 <l2cap_recv+0x1b8>)
    5ac0:	4836      	ldr	r0, [pc, #216]	; (5b9c <l2cap_recv+0x1bc>)
    5ac2:	e79d      	b.n	5a00 <l2cap_recv+0x20>
    5ac4:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    5ac6:	78e6      	ldrb	r6, [r4, #3]
    5ac8:	b18e      	cbz	r6, 5aee <l2cap_recv+0x10e>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5aca:	2202      	movs	r2, #2
    5acc:	2001      	movs	r0, #1
    5ace:	f7ff fe9d 	bl	580c <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    5ad2:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5ad4:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    5ad6:	3008      	adds	r0, #8
    5ad8:	f00e f9b8 	bl	13e4c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    5adc:	2300      	movs	r3, #0
    5ade:	7003      	strb	r3, [r0, #0]
    5ae0:	7043      	strb	r3, [r0, #1]
    5ae2:	462a      	mov	r2, r5
    5ae4:	2105      	movs	r1, #5
    5ae6:	4620      	mov	r0, r4
    5ae8:	f7ff ff64 	bl	59b4 <bt_l2cap_send_cb>
    5aec:	e7a0      	b.n	5a30 <l2cap_recv+0x50>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    5aee:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    5af0:	7858      	ldrb	r0, [r3, #1]
    5af2:	781a      	ldrb	r2, [r3, #0]
    5af4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    5af8:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    5afc:	78d8      	ldrb	r0, [r3, #3]
    5afe:	789a      	ldrb	r2, [r3, #2]
    5b00:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    5b04:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    5b08:	7958      	ldrb	r0, [r3, #5]
    5b0a:	791a      	ldrb	r2, [r3, #4]
    5b0c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    5b10:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    5b14:	799a      	ldrb	r2, [r3, #6]
    5b16:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5b18:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    5b1a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5b1e:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    5b20:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5b24:	f7ff fe72 	bl	580c <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    5b28:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    5b2a:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    5b2c:	4620      	mov	r0, r4
    5b2e:	f7fe fe15 	bl	475c <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5b32:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    5b34:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    5b36:	f107 0008 	add.w	r0, r7, #8
    5b3a:	f00e f987 	bl	13e4c <net_buf_simple_add>
	if (accepted) {
    5b3e:	b17d      	cbz	r5, 5b60 <l2cap_recv+0x180>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    5b40:	7006      	strb	r6, [r0, #0]
    5b42:	7046      	strb	r6, [r0, #1]
    5b44:	2300      	movs	r3, #0
    5b46:	463a      	mov	r2, r7
    5b48:	2105      	movs	r1, #5
    5b4a:	4620      	mov	r0, r4
    5b4c:	f7ff ff32 	bl	59b4 <bt_l2cap_send_cb>
	if (accepted) {
    5b50:	2d00      	cmp	r5, #0
    5b52:	f43f af6d 	beq.w	5a30 <l2cap_recv+0x50>
		bt_conn_le_conn_update(conn, &param);
    5b56:	a904      	add	r1, sp, #16
    5b58:	4620      	mov	r0, r4
    5b5a:	f7ff fc3c 	bl	53d6 <bt_conn_le_conn_update>
    5b5e:	e767      	b.n	5a30 <l2cap_recv+0x50>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    5b60:	2301      	movs	r3, #1
    5b62:	7003      	strb	r3, [r0, #0]
    5b64:	7045      	strb	r5, [r0, #1]
    5b66:	e7ed      	b.n	5b44 <l2cap_recv+0x164>
    5b68:	000161ba 	.word	0x000161ba
    5b6c:	20003a5c 	.word	0x20003a5c
    5b70:	000179e1 	.word	0x000179e1
    5b74:	00017a29 	.word	0x00017a29
    5b78:	000184b4 	.word	0x000184b4
    5b7c:	00018573 	.word	0x00018573
    5b80:	000185a1 	.word	0x000185a1
    5b84:	000185d2 	.word	0x000185d2
    5b88:	00017a64 	.word	0x00017a64
    5b8c:	00018662 	.word	0x00018662
    5b90:	00018489 	.word	0x00018489
    5b94:	00018603 	.word	0x00018603
    5b98:	0001849b 	.word	0x0001849b
    5b9c:	0001862f 	.word	0x0001862f

00005ba0 <bt_l2cap_le_lookup_tx_cid>:
{
    5ba0:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5ba2:	b100      	cbz	r0, 5ba6 <bt_l2cap_le_lookup_tx_cid+0x6>
    5ba4:	3808      	subs	r0, #8
    5ba6:	b900      	cbnz	r0, 5baa <bt_l2cap_le_lookup_tx_cid+0xa>
}
    5ba8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    5baa:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    5bae:	428b      	cmp	r3, r1
    5bb0:	d0fa      	beq.n	5ba8 <bt_l2cap_le_lookup_tx_cid+0x8>
    5bb2:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5bb4:	2000      	movs	r0, #0
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	d0f6      	beq.n	5ba8 <bt_l2cap_le_lookup_tx_cid+0x8>
    5bba:	f1a3 0008 	sub.w	r0, r3, #8
    5bbe:	e7f2      	b.n	5ba6 <bt_l2cap_le_lookup_tx_cid+0x6>

00005bc0 <bt_l2cap_le_lookup_rx_cid>:
{
    5bc0:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5bc2:	b100      	cbz	r0, 5bc6 <bt_l2cap_le_lookup_rx_cid+0x6>
    5bc4:	3808      	subs	r0, #8
    5bc6:	b900      	cbnz	r0, 5bca <bt_l2cap_le_lookup_rx_cid+0xa>
}
    5bc8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    5bca:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    5bcc:	428b      	cmp	r3, r1
    5bce:	d0fb      	beq.n	5bc8 <bt_l2cap_le_lookup_rx_cid+0x8>
    5bd0:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5bd2:	2000      	movs	r0, #0
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	d0f7      	beq.n	5bc8 <bt_l2cap_le_lookup_rx_cid+0x8>
    5bd8:	f1a3 0008 	sub.w	r0, r3, #8
    5bdc:	e7f3      	b.n	5bc6 <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00005be0 <bt_l2cap_recv>:
{
    5be0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    5be2:	898b      	ldrh	r3, [r1, #12]
    5be4:	2b03      	cmp	r3, #3
{
    5be6:	4606      	mov	r6, r0
    5be8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    5bea:	d80f      	bhi.n	5c0c <bt_l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP PDU received");
    5bec:	4b16      	ldr	r3, [pc, #88]	; (5c48 <bt_l2cap_recv+0x68>)
    5bee:	9301      	str	r3, [sp, #4]
    5bf0:	9300      	str	r3, [sp, #0]
    5bf2:	4b16      	ldr	r3, [pc, #88]	; (5c4c <bt_l2cap_recv+0x6c>)
    5bf4:	4a16      	ldr	r2, [pc, #88]	; (5c50 <bt_l2cap_recv+0x70>)
    5bf6:	681d      	ldr	r5, [r3, #0]
    5bf8:	4916      	ldr	r1, [pc, #88]	; (5c54 <bt_l2cap_recv+0x74>)
    5bfa:	4b17      	ldr	r3, [pc, #92]	; (5c58 <bt_l2cap_recv+0x78>)
    5bfc:	4817      	ldr	r0, [pc, #92]	; (5c5c <bt_l2cap_recv+0x7c>)
    5bfe:	47a8      	blx	r5
	net_buf_unref(buf);
    5c00:	4620      	mov	r0, r4
}
    5c02:	b004      	add	sp, #16
    5c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    5c08:	f00e b8ee 	b.w	13de8 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    5c0c:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5c0e:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    5c10:	f850 3f08 	ldr.w	r3, [r0, #8]!
    5c14:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5c16:	f00e f938 	bl	13e8a <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    5c1a:	4629      	mov	r1, r5
    5c1c:	4630      	mov	r0, r6
    5c1e:	f7ff ffcf 	bl	5bc0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5c22:	b958      	cbnz	r0, 5c3c <bt_l2cap_recv+0x5c>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    5c24:	4b08      	ldr	r3, [pc, #32]	; (5c48 <bt_l2cap_recv+0x68>)
    5c26:	9302      	str	r3, [sp, #8]
    5c28:	e88d 0028 	stmia.w	sp, {r3, r5}
    5c2c:	4b07      	ldr	r3, [pc, #28]	; (5c4c <bt_l2cap_recv+0x6c>)
    5c2e:	4a0c      	ldr	r2, [pc, #48]	; (5c60 <bt_l2cap_recv+0x80>)
    5c30:	681d      	ldr	r5, [r3, #0]
    5c32:	4908      	ldr	r1, [pc, #32]	; (5c54 <bt_l2cap_recv+0x74>)
    5c34:	4b08      	ldr	r3, [pc, #32]	; (5c58 <bt_l2cap_recv+0x78>)
    5c36:	480b      	ldr	r0, [pc, #44]	; (5c64 <bt_l2cap_recv+0x84>)
    5c38:	47a8      	blx	r5
    5c3a:	e7e1      	b.n	5c00 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    5c3c:	6843      	ldr	r3, [r0, #4]
    5c3e:	4621      	mov	r1, r4
    5c40:	691b      	ldr	r3, [r3, #16]
    5c42:	4798      	blx	r3
    5c44:	e7dc      	b.n	5c00 <bt_l2cap_recv+0x20>
    5c46:	bf00      	nop
    5c48:	000161ba 	.word	0x000161ba
    5c4c:	20003a5c 	.word	0x20003a5c
    5c50:	000179e1 	.word	0x000179e1
    5c54:	00017a29 	.word	0x00017a29
    5c58:	000184bf 	.word	0x000184bf
    5c5c:	000184da 	.word	0x000184da
    5c60:	00017a64 	.word	0x00017a64
    5c64:	00018507 	.word	0x00018507

00005c68 <bt_l2cap_update_conn_param>:
{
    5c68:	b570      	push	{r4, r5, r6, lr}
	ident++;
    5c6a:	4b12      	ldr	r3, [pc, #72]	; (5cb4 <bt_l2cap_update_conn_param+0x4c>)
    5c6c:	781a      	ldrb	r2, [r3, #0]
    5c6e:	3201      	adds	r2, #1
	if (!ident) {
    5c70:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    5c74:	bf08      	it	eq
    5c76:	2201      	moveq	r2, #1
    5c78:	701a      	strb	r2, [r3, #0]
{
    5c7a:	460c      	mov	r4, r1
    5c7c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5c7e:	7819      	ldrb	r1, [r3, #0]
    5c80:	2208      	movs	r2, #8
    5c82:	2012      	movs	r0, #18
    5c84:	f7ff fdc2 	bl	580c <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5c88:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5c8a:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5c8c:	4408      	add	r0, r1
    5c8e:	f00e f8dd 	bl	13e4c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    5c92:	8823      	ldrh	r3, [r4, #0]
    5c94:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    5c96:	8863      	ldrh	r3, [r4, #2]
    5c98:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    5c9a:	88a3      	ldrh	r3, [r4, #4]
    5c9c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5c9e:	88e3      	ldrh	r3, [r4, #6]
    5ca0:	80c3      	strh	r3, [r0, #6]
    5ca2:	4632      	mov	r2, r6
    5ca4:	4628      	mov	r0, r5
    5ca6:	2300      	movs	r3, #0
    5ca8:	2105      	movs	r1, #5
    5caa:	f7ff fe83 	bl	59b4 <bt_l2cap_send_cb>
}
    5cae:	2000      	movs	r0, #0
    5cb0:	bd70      	pop	{r4, r5, r6, pc}
    5cb2:	bf00      	nop
    5cb4:	20000494 	.word	0x20000494

00005cb8 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5cb8:	4801      	ldr	r0, [pc, #4]	; (5cc0 <bt_l2cap_init+0x8>)
    5cba:	f7ff bdbb 	b.w	5834 <bt_l2cap_le_fixed_chan_register>
    5cbe:	bf00      	nop
    5cc0:	20003b98 	.word	0x20003b98

00005cc4 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5cc4:	2006      	movs	r0, #6
    5cc6:	4770      	bx	lr

00005cc8 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    5cc8:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    5cca:	4a0a      	ldr	r2, [pc, #40]	; (5cf4 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5ccc:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    5cce:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    5cd2:	4284      	cmp	r4, r0
    5cd4:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    5cd8:	d102      	bne.n	5ce0 <att_op_get_type+0x18>
			return handlers[i].type;
    5cda:	440a      	add	r2, r1
    5cdc:	7890      	ldrb	r0, [r2, #2]
    5cde:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5ce0:	3301      	adds	r3, #1
    5ce2:	2b1b      	cmp	r3, #27
    5ce4:	d1f3      	bne.n	5cce <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    5ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
    5cea:	bf14      	ite	ne
    5cec:	2000      	movne	r0, #0
    5cee:	2006      	moveq	r0, #6
}
    5cf0:	bd10      	pop	{r4, pc}
    5cf2:	bf00      	nop
    5cf4:	000189d8 	.word	0x000189d8

00005cf8 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5cf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    5cfa:	4d11      	ldr	r5, [pc, #68]	; (5d40 <bt_att_accept+0x48>)
    5cfc:	682c      	ldr	r4, [r5, #0]
{
    5cfe:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    5d00:	b984      	cbnz	r4, 5d24 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    5d02:	22e4      	movs	r2, #228	; 0xe4
    5d04:	4621      	mov	r1, r4
    5d06:	4628      	mov	r0, r5
    5d08:	f7fc f8de 	bl	1ec8 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    5d0c:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    5d0e:	4b0d      	ldr	r3, [pc, #52]	; (5d44 <bt_att_accept+0x4c>)
    5d10:	606b      	str	r3, [r5, #4]
    5d12:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    5d16:	4611      	mov	r1, r2
    5d18:	f00f fa4a 	bl	151b0 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    5d1c:	6035      	str	r5, [r6, #0]

		return 0;
    5d1e:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    5d20:	b004      	add	sp, #16
    5d22:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    5d24:	4b08      	ldr	r3, [pc, #32]	; (5d48 <bt_att_accept+0x50>)
    5d26:	9302      	str	r3, [sp, #8]
    5d28:	9300      	str	r3, [sp, #0]
    5d2a:	4b08      	ldr	r3, [pc, #32]	; (5d4c <bt_att_accept+0x54>)
    5d2c:	9001      	str	r0, [sp, #4]
    5d2e:	681c      	ldr	r4, [r3, #0]
    5d30:	4807      	ldr	r0, [pc, #28]	; (5d50 <bt_att_accept+0x58>)
    5d32:	4b08      	ldr	r3, [pc, #32]	; (5d54 <bt_att_accept+0x5c>)
    5d34:	4a08      	ldr	r2, [pc, #32]	; (5d58 <bt_att_accept+0x60>)
    5d36:	4909      	ldr	r1, [pc, #36]	; (5d5c <bt_att_accept+0x64>)
    5d38:	47a0      	blx	r4
	return -ENOMEM;
    5d3a:	f06f 000b 	mvn.w	r0, #11
    5d3e:	e7ef      	b.n	5d20 <bt_att_accept+0x28>
    5d40:	200004a0 	.word	0x200004a0
    5d44:	20003bc4 	.word	0x20003bc4
    5d48:	000161ba 	.word	0x000161ba
    5d4c:	20003a5c 	.word	0x20003a5c
    5d50:	00018891 	.word	0x00018891
    5d54:	0001872c 	.word	0x0001872c
    5d58:	000179e1 	.word	0x000179e1
    5d5c:	00017a29 	.word	0x00017a29

00005d60 <att_req_destroy>:
{
    5d60:	b510      	push	{r4, lr}
    5d62:	4604      	mov	r4, r0
	if (req->buf) {
    5d64:	6900      	ldr	r0, [r0, #16]
    5d66:	b108      	cbz	r0, 5d6c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    5d68:	f00e f83e 	bl	13de8 <net_buf_unref>
	if (req->destroy) {
    5d6c:	68a3      	ldr	r3, [r4, #8]
    5d6e:	b10b      	cbz	r3, 5d74 <att_req_destroy+0x14>
		req->destroy(req);
    5d70:	4620      	mov	r0, r4
    5d72:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5d74:	4620      	mov	r0, r4
    5d76:	2214      	movs	r2, #20
    5d78:	2100      	movs	r1, #0
}
    5d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5d7e:	f7fc b8a3 	b.w	1ec8 <memset>

00005d82 <att_notify>:
{
    5d82:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    5d84:	f101 0008 	add.w	r0, r1, #8
    5d88:	f00e f88f 	bl	13eaa <net_buf_simple_pull_le16>
}
    5d8c:	2000      	movs	r0, #0
    5d8e:	bd08      	pop	{r3, pc}

00005d90 <read_group_cb>:
{
    5d90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5d94:	680d      	ldr	r5, [r1, #0]
{
    5d96:	4606      	mov	r6, r0
    5d98:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5d9a:	f04f 0800 	mov.w	r8, #0
    5d9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5da2:	a902      	add	r1, sp, #8
    5da4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5da6:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5da8:	f88d 8008 	strb.w	r8, [sp, #8]
    5dac:	f8ad 300a 	strh.w	r3, [sp, #10]
    5db0:	f7fc f9dc 	bl	216c <bt_uuid_cmp>
    5db4:	b198      	cbz	r0, 5dde <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5db6:	f642 0301 	movw	r3, #10241	; 0x2801
    5dba:	a903      	add	r1, sp, #12
    5dbc:	6830      	ldr	r0, [r6, #0]
    5dbe:	f88d 800c 	strb.w	r8, [sp, #12]
    5dc2:	f8ad 300e 	strh.w	r3, [sp, #14]
    5dc6:	f7fc f9d1 	bl	216c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5dca:	b140      	cbz	r0, 5dde <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5dcc:	6923      	ldr	r3, [r4, #16]
    5dce:	b123      	cbz	r3, 5dda <read_group_cb+0x4a>
    5dd0:	8a32      	ldrh	r2, [r6, #16]
    5dd2:	8859      	ldrh	r1, [r3, #2]
    5dd4:	4291      	cmp	r1, r2
    5dd6:	d200      	bcs.n	5dda <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5dd8:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5dda:	2001      	movs	r0, #1
    5ddc:	e012      	b.n	5e04 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5dde:	6861      	ldr	r1, [r4, #4]
    5de0:	6830      	ldr	r0, [r6, #0]
    5de2:	f7fc f9c3 	bl	216c <bt_uuid_cmp>
    5de6:	b110      	cbz	r0, 5dee <read_group_cb+0x5e>
		data->group = NULL;
    5de8:	2300      	movs	r3, #0
    5dea:	6123      	str	r3, [r4, #16]
    5dec:	e7f5      	b.n	5dda <read_group_cb+0x4a>
	if (data->rsp->len &&
    5dee:	68e3      	ldr	r3, [r4, #12]
    5df0:	68a0      	ldr	r0, [r4, #8]
    5df2:	781a      	ldrb	r2, [r3, #0]
    5df4:	b14a      	cbz	r2, 5e0a <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5df6:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5dfa:	8981      	ldrh	r1, [r0, #12]
    5dfc:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5dfe:	4293      	cmp	r3, r2
    5e00:	da03      	bge.n	5e0a <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    5e02:	2000      	movs	r0, #0
}
    5e04:	b004      	add	sp, #16
    5e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5e0a:	2104      	movs	r1, #4
    5e0c:	3008      	adds	r0, #8
    5e0e:	f00e f81d 	bl	13e4c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5e12:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5e14:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5e16:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5e18:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5e1a:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5e1c:	898a      	ldrh	r2, [r1, #12]
    5e1e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5e22:	6889      	ldr	r1, [r1, #8]
    5e24:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5e28:	1a9b      	subs	r3, r3, r2
    5e2a:	2500      	movs	r5, #0
    5e2c:	440a      	add	r2, r1
    5e2e:	9500      	str	r5, [sp, #0]
    5e30:	4631      	mov	r1, r6
    5e32:	b29b      	uxth	r3, r3
    5e34:	4638      	mov	r0, r7
    5e36:	47c0      	blx	r8
	if (read < 0) {
    5e38:	1e01      	subs	r1, r0, #0
    5e3a:	dbe2      	blt.n	5e02 <read_group_cb+0x72>
	if (!data->rsp->len) {
    5e3c:	68e0      	ldr	r0, [r4, #12]
    5e3e:	7802      	ldrb	r2, [r0, #0]
    5e40:	1d0b      	adds	r3, r1, #4
    5e42:	b92a      	cbnz	r2, 5e50 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5e44:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5e46:	68a0      	ldr	r0, [r4, #8]
    5e48:	3008      	adds	r0, #8
    5e4a:	f00d ffff 	bl	13e4c <net_buf_simple_add>
    5e4e:	e7c4      	b.n	5dda <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5e50:	429a      	cmp	r2, r3
    5e52:	d0f8      	beq.n	5e46 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5e54:	68a2      	ldr	r2, [r4, #8]
    5e56:	8993      	ldrh	r3, [r2, #12]
    5e58:	3b04      	subs	r3, #4
    5e5a:	8193      	strh	r3, [r2, #12]
    5e5c:	e7d1      	b.n	5e02 <read_group_cb+0x72>

00005e5e <find_info_cb>:
	if (!data->rsp) {
    5e5e:	688b      	ldr	r3, [r1, #8]
{
    5e60:	b570      	push	{r4, r5, r6, lr}
    5e62:	4605      	mov	r5, r0
    5e64:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    5e66:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    5e68:	b963      	cbnz	r3, 5e84 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5e6a:	6848      	ldr	r0, [r1, #4]
    5e6c:	2101      	movs	r1, #1
    5e6e:	3008      	adds	r0, #8
    5e70:	f00d ffec 	bl	13e4c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5e74:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5e76:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5e78:	781b      	ldrb	r3, [r3, #0]
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	bf0c      	ite	eq
    5e7e:	2301      	moveq	r3, #1
    5e80:	2302      	movne	r3, #2
    5e82:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5e84:	68a3      	ldr	r3, [r4, #8]
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	2b01      	cmp	r3, #1
    5e8a:	d003      	beq.n	5e94 <find_info_cb+0x36>
    5e8c:	2b02      	cmp	r3, #2
    5e8e:	d01a      	beq.n	5ec6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5e90:	2000      	movs	r0, #0
}
    5e92:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5e94:	682b      	ldr	r3, [r5, #0]
    5e96:	781b      	ldrb	r3, [r3, #0]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d1f9      	bne.n	5e90 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5e9c:	6860      	ldr	r0, [r4, #4]
    5e9e:	2104      	movs	r1, #4
    5ea0:	3008      	adds	r0, #8
    5ea2:	f00d ffd3 	bl	13e4c <net_buf_simple_add>
    5ea6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5ea8:	8a2b      	ldrh	r3, [r5, #16]
    5eaa:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5eac:	682b      	ldr	r3, [r5, #0]
    5eae:	885b      	ldrh	r3, [r3, #2]
    5eb0:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5eb2:	6863      	ldr	r3, [r4, #4]
    5eb4:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5eb8:	899b      	ldrh	r3, [r3, #12]
    5eba:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5ebc:	2804      	cmp	r0, #4
    5ebe:	bf94      	ite	ls
    5ec0:	2000      	movls	r0, #0
    5ec2:	2001      	movhi	r0, #1
    5ec4:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5ec6:	682b      	ldr	r3, [r5, #0]
    5ec8:	781b      	ldrb	r3, [r3, #0]
    5eca:	2b02      	cmp	r3, #2
    5ecc:	d1e0      	bne.n	5e90 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5ece:	6860      	ldr	r0, [r4, #4]
    5ed0:	2112      	movs	r1, #18
    5ed2:	3008      	adds	r0, #8
    5ed4:	f00d ffba 	bl	13e4c <net_buf_simple_add>
    5ed8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5eda:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5edc:	8a2b      	ldrh	r3, [r5, #16]
    5ede:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5ee2:	2210      	movs	r2, #16
    5ee4:	3101      	adds	r1, #1
    5ee6:	f7fb ffc3 	bl	1e70 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5eea:	6863      	ldr	r3, [r4, #4]
    5eec:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5ef0:	899b      	ldrh	r3, [r3, #12]
    5ef2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5ef4:	2812      	cmp	r0, #18
    5ef6:	e7e2      	b.n	5ebe <find_info_cb+0x60>

00005ef8 <find_type_cb>:
{
    5ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5efc:	680e      	ldr	r6, [r1, #0]
{
    5efe:	b088      	sub	sp, #32
    5f00:	4605      	mov	r5, r0
    5f02:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5f04:	2700      	movs	r7, #0
    5f06:	f642 0301 	movw	r3, #10241	; 0x2801
    5f0a:	a902      	add	r1, sp, #8
    5f0c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5f0e:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5f12:	f88d 7008 	strb.w	r7, [sp, #8]
    5f16:	f8ad 300a 	strh.w	r3, [sp, #10]
    5f1a:	f7fc f927 	bl	216c <bt_uuid_cmp>
    5f1e:	b928      	cbnz	r0, 5f2c <find_type_cb+0x34>
		data->group = NULL;
    5f20:	2300      	movs	r3, #0
    5f22:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    5f24:	2001      	movs	r0, #1
}
    5f26:	b008      	add	sp, #32
    5f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5f2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5f30:	a903      	add	r1, sp, #12
    5f32:	6828      	ldr	r0, [r5, #0]
    5f34:	f88d 700c 	strb.w	r7, [sp, #12]
    5f38:	f8ad 300e 	strh.w	r3, [sp, #14]
    5f3c:	f7fc f916 	bl	216c <bt_uuid_cmp>
    5f40:	b140      	cbz	r0, 5f54 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    5f42:	68a3      	ldr	r3, [r4, #8]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d0ed      	beq.n	5f24 <find_type_cb+0x2c>
    5f48:	8a2a      	ldrh	r2, [r5, #16]
    5f4a:	8859      	ldrh	r1, [r3, #2]
    5f4c:	4291      	cmp	r1, r2
    5f4e:	d2e9      	bcs.n	5f24 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5f50:	805a      	strh	r2, [r3, #2]
    5f52:	e7e7      	b.n	5f24 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5f54:	6862      	ldr	r2, [r4, #4]
    5f56:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    5f5a:	8992      	ldrh	r2, [r2, #12]
    5f5c:	1a9b      	subs	r3, r3, r2
    5f5e:	2b03      	cmp	r3, #3
    5f60:	d9e1      	bls.n	5f26 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5f62:	2310      	movs	r3, #16
    5f64:	9000      	str	r0, [sp, #0]
    5f66:	eb0d 0203 	add.w	r2, sp, r3
    5f6a:	686e      	ldr	r6, [r5, #4]
    5f6c:	4629      	mov	r1, r5
    5f6e:	4640      	mov	r0, r8
    5f70:	47b0      	blx	r6
	if (read < 0) {
    5f72:	1e02      	subs	r2, r0, #0
    5f74:	dbd4      	blt.n	5f20 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    5f76:	7c23      	ldrb	r3, [r4, #16]
    5f78:	429a      	cmp	r2, r3
    5f7a:	d1d1      	bne.n	5f20 <find_type_cb+0x28>
    5f7c:	a904      	add	r1, sp, #16
    5f7e:	68e0      	ldr	r0, [r4, #12]
    5f80:	f7fb ff61 	bl	1e46 <memcmp>
    5f84:	2800      	cmp	r0, #0
    5f86:	d1cb      	bne.n	5f20 <find_type_cb+0x28>
	data->err = 0x00;
    5f88:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5f8a:	6860      	ldr	r0, [r4, #4]
    5f8c:	2104      	movs	r1, #4
    5f8e:	3008      	adds	r0, #8
    5f90:	f00d ff5c 	bl	13e4c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5f94:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5f96:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5f98:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5f9a:	8043      	strh	r3, [r0, #2]
    5f9c:	e7c2      	b.n	5f24 <find_type_cb+0x2c>
	...

00005fa0 <bt_att_connected>:
{
    5fa0:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5fa2:	2317      	movs	r3, #23
{
    5fa4:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5fa6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5faa:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5fac:	4906      	ldr	r1, [pc, #24]	; (5fc8 <bt_att_connected+0x28>)
    5fae:	30a4      	adds	r0, #164	; 0xa4
    5fb0:	f00f fc7c 	bl	158ac <k_delayed_work_init>
	list->head = NULL;
    5fb4:	2300      	movs	r3, #0
    5fb6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    5fba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    5fbe:	6820      	ldr	r0, [r4, #0]
}
    5fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5fc4:	f001 bc88 	b.w	78d8 <bt_gatt_connected>
    5fc8:	00006529 	.word	0x00006529

00005fcc <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    5fcc:	f011 0f01 	tst.w	r1, #1
    5fd0:	7c83      	ldrb	r3, [r0, #18]
    5fd2:	d004      	beq.n	5fde <check_perm.isra.5+0x12>
    5fd4:	f013 0f15 	tst.w	r3, #21
    5fd8:	d012      	beq.n	6000 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5fda:	6842      	ldr	r2, [r0, #4]
    5fdc:	b182      	cbz	r2, 6000 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    5fde:	078a      	lsls	r2, r1, #30
    5fe0:	d504      	bpl.n	5fec <check_perm.isra.5+0x20>
    5fe2:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    5fe6:	d00d      	beq.n	6004 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5fe8:	6882      	ldr	r2, [r0, #8]
    5fea:	b15a      	cbz	r2, 6004 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    5fec:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5fee:	f011 0f30 	tst.w	r1, #48	; 0x30
    5ff2:	d109      	bne.n	6008 <check_perm.isra.5+0x3c>
	return 0;
    5ff4:	f011 0f0c 	tst.w	r1, #12
    5ff8:	bf14      	ite	ne
    5ffa:	200f      	movne	r0, #15
    5ffc:	2000      	moveq	r0, #0
    5ffe:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    6000:	2002      	movs	r0, #2
    6002:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    6004:	2003      	movs	r0, #3
    6006:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    6008:	2005      	movs	r0, #5
}
    600a:	4770      	bx	lr

0000600c <read_type_cb>:
{
    600c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    6010:	680f      	ldr	r7, [r1, #0]
{
    6012:	4606      	mov	r6, r0
    6014:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6016:	6800      	ldr	r0, [r0, #0]
    6018:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    601a:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    601e:	f7fc f8a5 	bl	216c <bt_uuid_cmp>
    6022:	4680      	mov	r8, r0
    6024:	2800      	cmp	r0, #0
    6026:	d14d      	bne.n	60c4 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6028:	2115      	movs	r1, #21
    602a:	4630      	mov	r0, r6
    602c:	f7ff ffce 	bl	5fcc <check_perm.isra.5>
    6030:	4605      	mov	r5, r0
    6032:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6034:	b148      	cbz	r0, 604a <read_type_cb+0x3e>
		if (data->rsp->len) {
    6036:	68e3      	ldr	r3, [r4, #12]
    6038:	781d      	ldrb	r5, [r3, #0]
    603a:	b115      	cbz	r5, 6042 <read_type_cb+0x36>
			data->err = 0x00;
    603c:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    6040:	4645      	mov	r5, r8
}
    6042:	4628      	mov	r0, r5
    6044:	b003      	add	sp, #12
    6046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    604a:	68a0      	ldr	r0, [r4, #8]
    604c:	2102      	movs	r1, #2
    604e:	3008      	adds	r0, #8
    6050:	f00d fefc 	bl	13e4c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    6054:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6056:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    6058:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    605a:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    605c:	898a      	ldrh	r2, [r1, #12]
    605e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    6062:	6889      	ldr	r1, [r1, #8]
    6064:	f8d6 8004 	ldr.w	r8, [r6, #4]
    6068:	9500      	str	r5, [sp, #0]
    606a:	1a9b      	subs	r3, r3, r2
    606c:	b29b      	uxth	r3, r3
    606e:	440a      	add	r2, r1
    6070:	4648      	mov	r0, r9
    6072:	4631      	mov	r1, r6
    6074:	47c0      	blx	r8
	if (read < 0) {
    6076:	1e01      	subs	r1, r0, #0
    6078:	da08      	bge.n	608c <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    607a:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    607e:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    6080:	bf9a      	itte	ls
    6082:	4249      	negls	r1, r1
    6084:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    6086:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    6088:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    608a:	e7da      	b.n	6042 <read_type_cb+0x36>
	if (!data->rsp->len) {
    608c:	68e0      	ldr	r0, [r4, #12]
    608e:	7802      	ldrb	r2, [r0, #0]
    6090:	1c8b      	adds	r3, r1, #2
    6092:	b982      	cbnz	r2, 60b6 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    6094:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    6096:	68a0      	ldr	r0, [r4, #8]
    6098:	3008      	adds	r0, #8
    609a:	f00d fed7 	bl	13e4c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    609e:	68a3      	ldr	r3, [r4, #8]
    60a0:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    60a4:	899b      	ldrh	r3, [r3, #12]
    60a6:	1aed      	subs	r5, r5, r3
    60a8:	68e3      	ldr	r3, [r4, #12]
    60aa:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    60ac:	429d      	cmp	r5, r3
    60ae:	bfd4      	ite	le
    60b0:	2500      	movle	r5, #0
    60b2:	2501      	movgt	r5, #1
    60b4:	e7c5      	b.n	6042 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    60b6:	429a      	cmp	r2, r3
    60b8:	d0ed      	beq.n	6096 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    60ba:	68a2      	ldr	r2, [r4, #8]
    60bc:	8993      	ldrh	r3, [r2, #12]
    60be:	3b02      	subs	r3, #2
    60c0:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    60c2:	e7be      	b.n	6042 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    60c4:	2501      	movs	r5, #1
    60c6:	e7bc      	b.n	6042 <read_type_cb+0x36>

000060c8 <att_get>:
{
    60c8:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    60ca:	2104      	movs	r1, #4
    60cc:	f7ff fd68 	bl	5ba0 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    60d0:	b948      	cbnz	r0, 60e6 <att_get+0x1e>
    60d2:	2376      	movs	r3, #118	; 0x76
    60d4:	4a04      	ldr	r2, [pc, #16]	; (60e8 <att_get+0x20>)
    60d6:	4905      	ldr	r1, [pc, #20]	; (60ec <att_get+0x24>)
    60d8:	4805      	ldr	r0, [pc, #20]	; (60f0 <att_get+0x28>)
    60da:	f7fa ff57 	bl	f8c <printk>
    60de:	4805      	ldr	r0, [pc, #20]	; (60f4 <att_get+0x2c>)
    60e0:	f7fa ff54 	bl	f8c <printk>
    60e4:	e7fe      	b.n	60e4 <att_get+0x1c>
}
    60e6:	bd08      	pop	{r3, pc}
    60e8:	000187b7 	.word	0x000187b7
    60ec:	000187f2 	.word	0x000187f2
    60f0:	0001619c 	.word	0x0001619c
    60f4:	000187f7 	.word	0x000187f7

000060f8 <att_rsp_sent>:
{
    60f8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    60fa:	f7ff ffe5 	bl	60c8 <att_get>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    60fe:	f3bf 8f5b 	dmb	ish
    6102:	f100 0394 	add.w	r3, r0, #148	; 0x94
    6106:	e853 2f00 	ldrex	r2, [r3]
    610a:	f022 0201 	bic.w	r2, r2, #1
    610e:	e843 2100 	strex	r1, r2, [r3]
    6112:	2900      	cmp	r1, #0
    6114:	d1f7      	bne.n	6106 <att_rsp_sent+0xe>
    6116:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    611a:	30cc      	adds	r0, #204	; 0xcc
}
    611c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6120:	f00f b874 	b.w	1520c <_impl_k_sem_give>

00006124 <att_pdu_sent>:
{
    6124:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    6126:	f7ff ffcf 	bl	60c8 <att_get>
}
    612a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    612e:	30cc      	adds	r0, #204	; 0xcc
    6130:	f00f b86c 	b.w	1520c <_impl_k_sem_give>

00006134 <uuid_create>:
{
    6134:	b510      	push	{r4, lr}
	switch (buf->len) {
    6136:	898a      	ldrh	r2, [r1, #12]
    6138:	2a02      	cmp	r2, #2
{
    613a:	4604      	mov	r4, r0
	switch (buf->len) {
    613c:	d003      	beq.n	6146 <uuid_create+0x12>
    613e:	2a10      	cmp	r2, #16
    6140:	d00a      	beq.n	6158 <uuid_create+0x24>
	return false;
    6142:	2000      	movs	r0, #0
}
    6144:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    6146:	2300      	movs	r3, #0
    6148:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    614a:	f101 0008 	add.w	r0, r1, #8
    614e:	f00d feac 	bl	13eaa <net_buf_simple_pull_le16>
    6152:	8060      	strh	r0, [r4, #2]
		return true;
    6154:	2001      	movs	r0, #1
    6156:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    6158:	2302      	movs	r3, #2
    615a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    615e:	6889      	ldr	r1, [r1, #8]
    6160:	f7fb fe86 	bl	1e70 <memcpy>
    6164:	e7f6      	b.n	6154 <uuid_create+0x20>
	...

00006168 <att_req_sent>:
{
    6168:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    616a:	f7ff ffad 	bl	60c8 <att_get>
    616e:	4604      	mov	r4, r0
    6170:	30cc      	adds	r0, #204	; 0xcc
    6172:	f00f f84b 	bl	1520c <_impl_k_sem_give>
	if (att->req) {
    6176:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    617a:	b143      	cbz	r3, 618e <att_req_sent+0x26>
    617c:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    6180:	f247 5230 	movw	r2, #30000	; 0x7530
    6184:	4802      	ldr	r0, [pc, #8]	; (6190 <att_req_sent+0x28>)
}
    6186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    618a:	f00f bc03 	b.w	15994 <k_delayed_work_submit_to_queue>
    618e:	bd10      	pop	{r4, pc}
    6190:	20001988 	.word	0x20001988

00006194 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    6194:	6803      	ldr	r3, [r0, #0]
    6196:	7a5b      	ldrb	r3, [r3, #9]
    6198:	2b03      	cmp	r3, #3
    619a:	d10a      	bne.n	61b2 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    619c:	f3bf 8f5b 	dmb	ish
    61a0:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    61a4:	f3bf 8f5b 	dmb	ish
    61a8:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    61ac:	f000 0001 	and.w	r0, r0, #1
    61b0:	4770      	bx	lr
    61b2:	2001      	movs	r0, #1
}
    61b4:	4770      	bx	lr

000061b6 <att_prepare_write_req>:
    61b6:	2006      	movs	r0, #6
    61b8:	4770      	bx	lr

000061ba <att_cfm_sent>:
{
    61ba:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    61bc:	f7ff ff84 	bl	60c8 <att_get>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    61c0:	f3bf 8f5b 	dmb	ish
    61c4:	f100 0394 	add.w	r3, r0, #148	; 0x94
    61c8:	e853 2f00 	ldrex	r2, [r3]
    61cc:	f022 0202 	bic.w	r2, r2, #2
    61d0:	e843 2100 	strex	r1, r2, [r3]
    61d4:	2900      	cmp	r1, #0
    61d6:	d1f7      	bne.n	61c8 <att_cfm_sent+0xe>
    61d8:	f3bf 8f5b 	dmb	ish
    61dc:	30cc      	adds	r0, #204	; 0xcc
}
    61de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    61e2:	f00f b813 	b.w	1520c <_impl_k_sem_give>
	...

000061e8 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    61e8:	7a43      	ldrb	r3, [r0, #9]
    61ea:	2b03      	cmp	r3, #3
{
    61ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    61ee:	d00c      	beq.n	620a <att_chan_get+0x22>
		BT_WARN("Not connected");
    61f0:	4b17      	ldr	r3, [pc, #92]	; (6250 <att_chan_get+0x68>)
    61f2:	9301      	str	r3, [sp, #4]
    61f4:	9300      	str	r3, [sp, #0]
    61f6:	4b17      	ldr	r3, [pc, #92]	; (6254 <att_chan_get+0x6c>)
    61f8:	4a17      	ldr	r2, [pc, #92]	; (6258 <att_chan_get+0x70>)
    61fa:	681c      	ldr	r4, [r3, #0]
    61fc:	4917      	ldr	r1, [pc, #92]	; (625c <att_chan_get+0x74>)
    61fe:	4b18      	ldr	r3, [pc, #96]	; (6260 <att_chan_get+0x78>)
    6200:	4818      	ldr	r0, [pc, #96]	; (6264 <att_chan_get+0x7c>)
		BT_WARN("ATT context flagged as disconnected");
    6202:	47a0      	blx	r4
		return NULL;
    6204:	2000      	movs	r0, #0
}
    6206:	b003      	add	sp, #12
    6208:	bd30      	pop	{r4, r5, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    620a:	2104      	movs	r1, #4
    620c:	f7ff fcd8 	bl	5bc0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6210:	4604      	mov	r4, r0
    6212:	b958      	cbnz	r0, 622c <att_chan_get+0x44>
		BT_ERR("Unable to find ATT channel");
    6214:	4b0e      	ldr	r3, [pc, #56]	; (6250 <att_chan_get+0x68>)
    6216:	9301      	str	r3, [sp, #4]
    6218:	9300      	str	r3, [sp, #0]
    621a:	4b0e      	ldr	r3, [pc, #56]	; (6254 <att_chan_get+0x6c>)
    621c:	4a12      	ldr	r2, [pc, #72]	; (6268 <att_chan_get+0x80>)
    621e:	681d      	ldr	r5, [r3, #0]
    6220:	490e      	ldr	r1, [pc, #56]	; (625c <att_chan_get+0x74>)
    6222:	4b0f      	ldr	r3, [pc, #60]	; (6260 <att_chan_get+0x78>)
    6224:	4811      	ldr	r0, [pc, #68]	; (626c <att_chan_get+0x84>)
    6226:	47a8      	blx	r5
    6228:	4620      	mov	r0, r4
    622a:	e7ec      	b.n	6206 <att_chan_get+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    622c:	f3bf 8f5b 	dmb	ish
    6230:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    6234:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    6238:	075b      	lsls	r3, r3, #29
    623a:	d5f5      	bpl.n	6228 <att_chan_get+0x40>
		BT_WARN("ATT context flagged as disconnected");
    623c:	4b04      	ldr	r3, [pc, #16]	; (6250 <att_chan_get+0x68>)
    623e:	9301      	str	r3, [sp, #4]
    6240:	9300      	str	r3, [sp, #0]
    6242:	4b04      	ldr	r3, [pc, #16]	; (6254 <att_chan_get+0x6c>)
    6244:	4a04      	ldr	r2, [pc, #16]	; (6258 <att_chan_get+0x70>)
    6246:	681c      	ldr	r4, [r3, #0]
    6248:	4904      	ldr	r1, [pc, #16]	; (625c <att_chan_get+0x74>)
    624a:	4b05      	ldr	r3, [pc, #20]	; (6260 <att_chan_get+0x78>)
    624c:	4808      	ldr	r0, [pc, #32]	; (6270 <att_chan_get+0x88>)
    624e:	e7d8      	b.n	6202 <att_chan_get+0x1a>
    6250:	000161ba 	.word	0x000161ba
    6254:	20003a5c 	.word	0x20003a5c
    6258:	00017a64 	.word	0x00017a64
    625c:	00017a29 	.word	0x00017a29
    6260:	00018701 	.word	0x00018701
    6264:	0001873a 	.word	0x0001873a
    6268:	000179e1 	.word	0x000179e1
    626c:	00018758 	.word	0x00018758
    6270:	00018783 	.word	0x00018783

00006274 <write_cb>:
{
    6274:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6278:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    627a:	f8d1 8000 	ldr.w	r8, [r1]
    627e:	212a      	movs	r1, #42	; 0x2a
{
    6280:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    6282:	f7ff fea3 	bl	5fcc <check_perm.isra.5>
    6286:	4605      	mov	r5, r0
    6288:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    628a:	b9e0      	cbnz	r0, 62c6 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    628c:	8a62      	ldrh	r2, [r4, #18]
    628e:	9001      	str	r0, [sp, #4]
    6290:	9200      	str	r2, [sp, #0]
    6292:	7c23      	ldrb	r3, [r4, #16]
    6294:	68b7      	ldr	r7, [r6, #8]
    6296:	68e2      	ldr	r2, [r4, #12]
    6298:	4631      	mov	r1, r6
    629a:	4640      	mov	r0, r8
    629c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    629e:	2800      	cmp	r0, #0
    62a0:	db02      	blt.n	62a8 <write_cb+0x34>
    62a2:	7c23      	ldrb	r3, [r4, #16]
    62a4:	4298      	cmp	r0, r3
    62a6:	d00b      	beq.n	62c0 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    62a8:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    62ac:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    62ae:	bf9a      	itte	ls
    62b0:	4240      	negls	r0, r0
    62b2:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    62b4:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    62b6:	7520      	strb	r0, [r4, #20]
}
    62b8:	4628      	mov	r0, r5
    62ba:	b002      	add	sp, #8
    62bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    62c0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    62c2:	2501      	movs	r5, #1
    62c4:	e7f8      	b.n	62b8 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    62c6:	2500      	movs	r5, #0
    62c8:	e7f6      	b.n	62b8 <write_cb+0x44>
	...

000062cc <att_send_req>:
{
    62cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    62ce:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    62d0:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    62d4:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    62d8:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    62da:	4630      	mov	r0, r6
    62dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    62e0:	f00e ffbc 	bl	1525c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    62e4:	4628      	mov	r0, r5
    62e6:	f7ff ff55 	bl	6194 <att_is_connected>
    62ea:	b980      	cbnz	r0, 630e <att_send_req+0x42>
		BT_WARN("Disconnected");
    62ec:	4b18      	ldr	r3, [pc, #96]	; (6350 <att_send_req+0x84>)
    62ee:	9301      	str	r3, [sp, #4]
    62f0:	9300      	str	r3, [sp, #0]
    62f2:	4b18      	ldr	r3, [pc, #96]	; (6354 <att_send_req+0x88>)
    62f4:	4a18      	ldr	r2, [pc, #96]	; (6358 <att_send_req+0x8c>)
    62f6:	681c      	ldr	r4, [r3, #0]
    62f8:	4918      	ldr	r1, [pc, #96]	; (635c <att_send_req+0x90>)
    62fa:	4b19      	ldr	r3, [pc, #100]	; (6360 <att_send_req+0x94>)
    62fc:	4819      	ldr	r0, [pc, #100]	; (6364 <att_send_req+0x98>)
    62fe:	47a0      	blx	r4
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6300:	4630      	mov	r0, r6
    6302:	f00e ff83 	bl	1520c <_impl_k_sem_give>
		return -ENOTCONN;
    6306:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    630a:	b002      	add	sp, #8
    630c:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    630e:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    6310:	f106 0008 	add.w	r0, r6, #8
    6314:	f00d fdd1 	bl	13eba <net_buf_simple_headroom>
	state->len = buf->len;
    6318:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    631a:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    631c:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    631e:	6920      	ldr	r0, [r4, #16]
    6320:	682d      	ldr	r5, [r5, #0]
    6322:	f00d fd8f 	bl	13e44 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    6326:	6923      	ldr	r3, [r4, #16]
    6328:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    632a:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    632c:	7818      	ldrb	r0, [r3, #0]
    632e:	f7ff fccb 	bl	5cc8 <att_op_get_type>
    6332:	3801      	subs	r0, #1
    6334:	b2c0      	uxtb	r0, r0
    6336:	2804      	cmp	r0, #4
    6338:	bf96      	itet	ls
    633a:	4b0b      	ldrls	r3, [pc, #44]	; (6368 <att_send_req+0x9c>)
    633c:	4b0b      	ldrhi	r3, [pc, #44]	; (636c <att_send_req+0xa0>)
    633e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    6342:	4632      	mov	r2, r6
    6344:	4628      	mov	r0, r5
    6346:	2104      	movs	r1, #4
    6348:	f7ff fb34 	bl	59b4 <bt_l2cap_send_cb>
	return 0;
    634c:	2000      	movs	r0, #0
    634e:	e7dc      	b.n	630a <att_send_req+0x3e>
    6350:	000161ba 	.word	0x000161ba
    6354:	20003a5c 	.word	0x20003a5c
    6358:	00017a64 	.word	0x00017a64
    635c:	00017a29 	.word	0x00017a29
    6360:	000186c4 	.word	0x000186c4
    6364:	00018833 	.word	0x00018833
    6368:	000186b0 	.word	0x000186b0
    636c:	00006125 	.word	0x00006125

00006370 <att_handle_rsp>:
{
    6370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6374:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    6376:	30a4      	adds	r0, #164	; 0xa4
{
    6378:	461e      	mov	r6, r3
    637a:	460f      	mov	r7, r1
    637c:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    637e:	f00f faa5 	bl	158cc <k_delayed_work_cancel>
	if (!att->req) {
    6382:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6386:	b9e3      	cbnz	r3, 63c2 <att_handle_rsp+0x52>
		BT_WARN("No pending ATT request");
    6388:	4b1c      	ldr	r3, [pc, #112]	; (63fc <att_handle_rsp+0x8c>)
    638a:	9301      	str	r3, [sp, #4]
    638c:	9300      	str	r3, [sp, #0]
    638e:	4b1c      	ldr	r3, [pc, #112]	; (6400 <att_handle_rsp+0x90>)
    6390:	4a1c      	ldr	r2, [pc, #112]	; (6404 <att_handle_rsp+0x94>)
    6392:	681d      	ldr	r5, [r3, #0]
    6394:	491c      	ldr	r1, [pc, #112]	; (6408 <att_handle_rsp+0x98>)
    6396:	4b1d      	ldr	r3, [pc, #116]	; (640c <att_handle_rsp+0x9c>)
    6398:	481d      	ldr	r0, [pc, #116]	; (6410 <att_handle_rsp+0xa0>)
    639a:	47a8      	blx	r5
    639c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    63a0:	b159      	cbz	r1, 63ba <att_handle_rsp+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    63a2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    63a6:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    63a8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    63ac:	4291      	cmp	r1, r2
	list->tail = node;
    63ae:	bf08      	it	eq
    63b0:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    63b4:	4620      	mov	r0, r4
    63b6:	f7ff ff89 	bl	62cc <att_send_req>
}
    63ba:	2000      	movs	r0, #0
    63bc:	b003      	add	sp, #12
    63be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    63c2:	6918      	ldr	r0, [r3, #16]
    63c4:	b128      	cbz	r0, 63d2 <att_handle_rsp+0x62>
		net_buf_unref(att->req->buf);
    63c6:	f00d fd0f 	bl	13de8 <net_buf_unref>
		att->req->buf = NULL;
    63ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    63ce:	2200      	movs	r2, #0
    63d0:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    63d2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    63d6:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    63d8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    63dc:	2500      	movs	r5, #0
    63de:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    63e0:	463a      	mov	r2, r7
    63e2:	9300      	str	r3, [sp, #0]
    63e4:	4631      	mov	r1, r6
    63e6:	4643      	mov	r3, r8
    63e8:	47c8      	blx	r9
	if (!att->req->func) {
    63ea:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    63ee:	6843      	ldr	r3, [r0, #4]
    63f0:	b90b      	cbnz	r3, 63f6 <att_handle_rsp+0x86>
		att_req_destroy(att->req);
    63f2:	f7ff fcb5 	bl	5d60 <att_req_destroy>
	att->req = NULL;
    63f6:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    63fa:	e7cf      	b.n	639c <att_handle_rsp+0x2c>
    63fc:	000161ba 	.word	0x000161ba
    6400:	20003a5c 	.word	0x20003a5c
    6404:	00017a64 	.word	0x00017a64
    6408:	00017a29 	.word	0x00017a29
    640c:	000186d1 	.word	0x000186d1
    6410:	0001880c 	.word	0x0001880c

00006414 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    6414:	898a      	ldrh	r2, [r1, #12]
    6416:	6889      	ldr	r1, [r1, #8]
    6418:	2300      	movs	r3, #0
    641a:	f7ff bfa9 	b.w	6370 <att_handle_rsp>

0000641e <att_handle_exec_write_rsp>:
    641e:	f7ff bff9 	b.w	6414 <att_confirm>

00006422 <att_handle_prepare_write_rsp>:
    6422:	f7ff bff7 	b.w	6414 <att_confirm>

00006426 <att_handle_write_rsp>:
    6426:	f7ff bff5 	b.w	6414 <att_confirm>

0000642a <att_handle_read_mult_rsp>:
    642a:	f7ff bff3 	b.w	6414 <att_confirm>

0000642e <att_handle_read_blob_rsp>:
    642e:	f7ff bff1 	b.w	6414 <att_confirm>

00006432 <att_handle_read_rsp>:
    6432:	f7ff bfef 	b.w	6414 <att_confirm>

00006436 <att_handle_read_type_rsp>:
    6436:	f7ff bfed 	b.w	6414 <att_confirm>

0000643a <att_handle_find_type_rsp>:
    643a:	f7ff bfeb 	b.w	6414 <att_confirm>

0000643e <att_handle_find_info_rsp>:
    643e:	f7ff bfe9 	b.w	6414 <att_confirm>

00006442 <att_mtu_rsp>:
{
    6442:	b410      	push	{r4}
    6444:	460a      	mov	r2, r1
	if (!att) {
    6446:	4603      	mov	r3, r0
    6448:	b180      	cbz	r0, 646c <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    644a:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    644c:	880c      	ldrh	r4, [r1, #0]
    644e:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    6450:	bf83      	ittte	hi
    6452:	2417      	movhi	r4, #23
    6454:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    6456:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    645a:	2200      	movls	r2, #0
    645c:	bf99      	ittee	ls
    645e:	2304      	movls	r3, #4
    6460:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    6462:	2300      	movhi	r3, #0
    6464:	8992      	ldrhhi	r2, [r2, #12]
}
    6466:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    6468:	f7ff bf82 	b.w	6370 <att_handle_rsp>
}
    646c:	bc10      	pop	{r4}
    646e:	4770      	bx	lr

00006470 <att_error_rsp>:
{
    6470:	b430      	push	{r4, r5}
	if (!att->req) {
    6472:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    6476:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    6478:	b16a      	cbz	r2, 6496 <att_error_rsp+0x26>
	if (att->req->buf) {
    647a:	6913      	ldr	r3, [r2, #16]
    647c:	b12b      	cbz	r3, 648a <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    647e:	8995      	ldrh	r5, [r2, #12]
    6480:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    6482:	89d2      	ldrh	r2, [r2, #14]
    6484:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    6486:	4429      	add	r1, r5
    6488:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    648a:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    648c:	2200      	movs	r2, #0
    648e:	4611      	mov	r1, r2
}
    6490:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    6492:	f7ff bf6d 	b.w	6370 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    6496:	230e      	movs	r3, #14
    6498:	e7f8      	b.n	648c <att_error_rsp+0x1c>

0000649a <att_reset>:
{
    649a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    649c:	f100 0394 	add.w	r3, r0, #148	; 0x94
    64a0:	4605      	mov	r5, r0
    64a2:	f3bf 8f5b 	dmb	ish
    64a6:	e853 2f00 	ldrex	r2, [r3]
    64aa:	f042 0204 	orr.w	r2, r2, #4
    64ae:	e843 2100 	strex	r1, r2, [r3]
    64b2:	2900      	cmp	r1, #0
    64b4:	d1f7      	bne.n	64a6 <att_reset+0xc>
    64b6:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    64ba:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    64be:	4620      	mov	r0, r4
    64c0:	f00e fea4 	bl	1520c <_impl_k_sem_give>
    64c4:	4620      	mov	r0, r4
    64c6:	f00e fea1 	bl	1520c <_impl_k_sem_give>
    64ca:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    64ce:	b98c      	cbnz	r4, 64f4 <att_reset+0x5a>
	if (!att->req) {
    64d0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    64d4:	2200      	movs	r2, #0
    64d6:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    64da:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    64de:	b90b      	cbnz	r3, 64e4 <att_reset+0x4a>
}
    64e0:	b003      	add	sp, #12
    64e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    64e4:	230e      	movs	r3, #14
    64e6:	4611      	mov	r1, r2
    64e8:	4628      	mov	r0, r5
}
    64ea:	b003      	add	sp, #12
    64ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    64f0:	f7ff bf3e 	b.w	6370 <att_handle_rsp>
	return node->next;
    64f4:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    64f6:	6867      	ldr	r7, [r4, #4]
    64f8:	b12f      	cbz	r7, 6506 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    64fa:	2300      	movs	r3, #0
    64fc:	9400      	str	r4, [sp, #0]
    64fe:	461a      	mov	r2, r3
    6500:	210e      	movs	r1, #14
    6502:	4618      	mov	r0, r3
    6504:	47b8      	blx	r7
		att_req_destroy(req);
    6506:	4620      	mov	r0, r4
    6508:	f7ff fc2a 	bl	5d60 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    650c:	2e00      	cmp	r6, #0
    650e:	d0df      	beq.n	64d0 <att_reset+0x36>
    6510:	4634      	mov	r4, r6
    6512:	6836      	ldr	r6, [r6, #0]
    6514:	e7ef      	b.n	64f6 <att_reset+0x5c>

00006516 <bt_att_disconnected>:
{
    6516:	b510      	push	{r4, lr}
    6518:	4604      	mov	r4, r0
	att_reset(att);
    651a:	f7ff ffbe 	bl	649a <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    651e:	6820      	ldr	r0, [r4, #0]
}
    6520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    6524:	f001 b9e2 	b.w	78ec <bt_gatt_disconnected>

00006528 <att_timeout>:
{
    6528:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("ATT Timeout");
    652a:	4b0c      	ldr	r3, [pc, #48]	; (655c <att_timeout+0x34>)
    652c:	9301      	str	r3, [sp, #4]
    652e:	9300      	str	r3, [sp, #0]
    6530:	4b0b      	ldr	r3, [pc, #44]	; (6560 <att_timeout+0x38>)
    6532:	4a0c      	ldr	r2, [pc, #48]	; (6564 <att_timeout+0x3c>)
    6534:	490c      	ldr	r1, [pc, #48]	; (6568 <att_timeout+0x40>)
    6536:	681d      	ldr	r5, [r3, #0]
    6538:	4b0c      	ldr	r3, [pc, #48]	; (656c <att_timeout+0x44>)
{
    653a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    653c:	480c      	ldr	r0, [pc, #48]	; (6570 <att_timeout+0x48>)
    653e:	47a8      	blx	r5
	att_reset(att);
    6540:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    6544:	f7ff ffa9 	bl	649a <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    6548:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    654c:	f001 f9ce 	bl	78ec <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    6550:	2300      	movs	r3, #0
    6552:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    6556:	b003      	add	sp, #12
    6558:	bd30      	pop	{r4, r5, pc}
    655a:	bf00      	nop
    655c:	000161ba 	.word	0x000161ba
    6560:	20003a5c 	.word	0x20003a5c
    6564:	000179e1 	.word	0x000179e1
    6568:	00017a29 	.word	0x00017a29
    656c:	00018720 	.word	0x00018720
    6570:	00018875 	.word	0x00018875

00006574 <read_cb>:
{
    6574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6578:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    657a:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    657c:	f8d1 9000 	ldr.w	r9, [r1]
{
    6580:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6582:	3008      	adds	r0, #8
    6584:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    6586:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    658a:	f00d fc5f 	bl	13e4c <net_buf_simple_add>
	data->err = 0x00;
    658e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6590:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    6592:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6594:	2115      	movs	r1, #21
    6596:	4630      	mov	r0, r6
    6598:	f7ff fd18 	bl	5fcc <check_perm.isra.5>
    659c:	4605      	mov	r5, r0
    659e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    65a0:	bb08      	cbnz	r0, 65e6 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    65a2:	68a1      	ldr	r1, [r4, #8]
    65a4:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    65a8:	898a      	ldrh	r2, [r1, #12]
    65aa:	6889      	ldr	r1, [r1, #8]
    65ac:	88a0      	ldrh	r0, [r4, #4]
    65ae:	9000      	str	r0, [sp, #0]
    65b0:	1a9b      	subs	r3, r3, r2
    65b2:	6877      	ldr	r7, [r6, #4]
    65b4:	440a      	add	r2, r1
    65b6:	b29b      	uxth	r3, r3
    65b8:	4631      	mov	r1, r6
    65ba:	4640      	mov	r0, r8
    65bc:	47b8      	blx	r7
	if (read < 0) {
    65be:	1e01      	subs	r1, r0, #0
    65c0:	da0b      	bge.n	65da <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    65c2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    65c6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    65c8:	bf9a      	itte	ls
    65ca:	4249      	negls	r1, r1
    65cc:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    65ce:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    65d0:	7421      	strb	r1, [r4, #16]
}
    65d2:	4628      	mov	r0, r5
    65d4:	b003      	add	sp, #12
    65d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    65da:	68a0      	ldr	r0, [r4, #8]
    65dc:	3008      	adds	r0, #8
    65de:	f00d fc35 	bl	13e4c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    65e2:	2501      	movs	r5, #1
    65e4:	e7f5      	b.n	65d2 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    65e6:	463d      	mov	r5, r7
    65e8:	e7f3      	b.n	65d2 <read_cb+0x5e>
	...

000065ec <bt_att_create_pdu>:
{
    65ec:	b530      	push	{r4, r5, lr}
    65ee:	b085      	sub	sp, #20
    65f0:	460d      	mov	r5, r1
    65f2:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    65f4:	f7ff fdf8 	bl	61e8 <att_chan_get>
	if (!att) {
    65f8:	b1f8      	cbz	r0, 663a <bt_att_create_pdu+0x4e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    65fa:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    65fe:	3401      	adds	r4, #1
    6600:	428c      	cmp	r4, r1
    6602:	d90f      	bls.n	6624 <bt_att_create_pdu+0x38>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    6604:	4b0e      	ldr	r3, [pc, #56]	; (6640 <bt_att_create_pdu+0x54>)
    6606:	9303      	str	r3, [sp, #12]
    6608:	9300      	str	r3, [sp, #0]
    660a:	4b0e      	ldr	r3, [pc, #56]	; (6644 <bt_att_create_pdu+0x58>)
    660c:	9101      	str	r1, [sp, #4]
    660e:	9402      	str	r4, [sp, #8]
    6610:	681c      	ldr	r4, [r3, #0]
    6612:	4a0d      	ldr	r2, [pc, #52]	; (6648 <bt_att_create_pdu+0x5c>)
    6614:	4b0d      	ldr	r3, [pc, #52]	; (664c <bt_att_create_pdu+0x60>)
    6616:	490e      	ldr	r1, [pc, #56]	; (6650 <bt_att_create_pdu+0x64>)
    6618:	480e      	ldr	r0, [pc, #56]	; (6654 <bt_att_create_pdu+0x68>)
    661a:	47a0      	blx	r4
		return NULL;
    661c:	2400      	movs	r4, #0
}
    661e:	4620      	mov	r0, r4
    6620:	b005      	add	sp, #20
    6622:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    6624:	2100      	movs	r1, #0
    6626:	4608      	mov	r0, r1
    6628:	f7ff f9c1 	bl	59ae <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    662c:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    662e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6630:	3008      	adds	r0, #8
    6632:	f00d fc0b 	bl	13e4c <net_buf_simple_add>
	hdr->code = op;
    6636:	7005      	strb	r5, [r0, #0]
	return buf;
    6638:	e7f1      	b.n	661e <bt_att_create_pdu+0x32>
		return NULL;
    663a:	4604      	mov	r4, r0
    663c:	e7ef      	b.n	661e <bt_att_create_pdu+0x32>
    663e:	bf00      	nop
    6640:	000161ba 	.word	0x000161ba
    6644:	20003a5c 	.word	0x20003a5c
    6648:	00017a64 	.word	0x00017a64
    664c:	0001870e 	.word	0x0001870e
    6650:	00017a29 	.word	0x00017a29
    6654:	000188c6 	.word	0x000188c6

00006658 <att_indicate>:
{
    6658:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    665a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    665c:	f101 0008 	add.w	r0, r1, #8
    6660:	f00d fc23 	bl	13eaa <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    6664:	2200      	movs	r2, #0
    6666:	211e      	movs	r1, #30
    6668:	4620      	mov	r0, r4
    666a:	f7ff ffbf 	bl	65ec <bt_att_create_pdu>
	if (!buf) {
    666e:	4602      	mov	r2, r0
    6670:	b120      	cbz	r0, 667c <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    6672:	4b03      	ldr	r3, [pc, #12]	; (6680 <att_indicate+0x28>)
    6674:	2104      	movs	r1, #4
    6676:	4620      	mov	r0, r4
    6678:	f7ff f99c 	bl	59b4 <bt_l2cap_send_cb>
}
    667c:	2000      	movs	r0, #0
    667e:	bd10      	pop	{r4, pc}
    6680:	000061bb 	.word	0x000061bb

00006684 <att_mtu_req>:
{
    6684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    6688:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    668a:	881b      	ldrh	r3, [r3, #0]
    668c:	2b16      	cmp	r3, #22
{
    668e:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6690:	d91c      	bls.n	66cc <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    6692:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    6696:	2202      	movs	r2, #2
    6698:	2103      	movs	r1, #3
    669a:	4640      	mov	r0, r8
    669c:	f7ff ffa6 	bl	65ec <bt_att_create_pdu>
	if (!pdu) {
    66a0:	4607      	mov	r7, r0
    66a2:	b1b0      	cbz	r0, 66d2 <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    66a4:	2102      	movs	r1, #2
    66a6:	3008      	adds	r0, #8
    66a8:	f00d fbd0 	bl	13e4c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    66ac:	2617      	movs	r6, #23
    66ae:	2400      	movs	r4, #0
    66b0:	7006      	strb	r6, [r0, #0]
    66b2:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    66b4:	4b08      	ldr	r3, [pc, #32]	; (66d8 <att_mtu_req+0x54>)
    66b6:	4640      	mov	r0, r8
    66b8:	463a      	mov	r2, r7
    66ba:	2104      	movs	r1, #4
    66bc:	f7ff f97a 	bl	59b4 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    66c0:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    66c2:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    66c6:	4620      	mov	r0, r4
    66c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    66cc:	2004      	movs	r0, #4
    66ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    66d2:	200e      	movs	r0, #14
}
    66d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66d8:	000060f9 	.word	0x000060f9

000066dc <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    66dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66e0:	4688      	mov	r8, r1
    66e2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    66e4:	2101      	movs	r1, #1
    66e6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    66e8:	4605      	mov	r5, r0
    66ea:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    66ec:	f7ff ff7e 	bl	65ec <bt_att_create_pdu>
	if (!buf) {
    66f0:	4604      	mov	r4, r0
    66f2:	b180      	cbz	r0, 6716 <send_err_rsp.part.12+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    66f4:	2104      	movs	r1, #4
    66f6:	3008      	adds	r0, #8
    66f8:	f00d fba8 	bl	13e4c <net_buf_simple_add>
	rsp->request = req;
    66fc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    6700:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    6702:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6706:	4622      	mov	r2, r4
    6708:	4628      	mov	r0, r5
    670a:	4b04      	ldr	r3, [pc, #16]	; (671c <send_err_rsp.part.12+0x40>)
    670c:	2104      	movs	r1, #4
}
    670e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6712:	f7ff b94f 	b.w	59b4 <bt_l2cap_send_cb>
    6716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    671a:	bf00      	nop
    671c:	000060f9 	.word	0x000060f9

00006720 <bt_att_recv>:
{
    6720:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    6722:	898b      	ldrh	r3, [r1, #12]
{
    6724:	b085      	sub	sp, #20
    6726:	4604      	mov	r4, r0
    6728:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    672a:	b95b      	cbnz	r3, 6744 <bt_att_recv+0x24>
		BT_ERR("Too small ATT PDU received");
    672c:	4b4f      	ldr	r3, [pc, #316]	; (686c <bt_att_recv+0x14c>)
    672e:	9301      	str	r3, [sp, #4]
    6730:	9300      	str	r3, [sp, #0]
    6732:	4b4f      	ldr	r3, [pc, #316]	; (6870 <bt_att_recv+0x150>)
    6734:	4a4f      	ldr	r2, [pc, #316]	; (6874 <bt_att_recv+0x154>)
    6736:	681c      	ldr	r4, [r3, #0]
    6738:	494f      	ldr	r1, [pc, #316]	; (6878 <bt_att_recv+0x158>)
    673a:	4b50      	ldr	r3, [pc, #320]	; (687c <bt_att_recv+0x15c>)
    673c:	4850      	ldr	r0, [pc, #320]	; (6880 <bt_att_recv+0x160>)
			BT_WARN("Ignoring unexpected request");
    673e:	47a0      	blx	r4
}
    6740:	b005      	add	sp, #20
    6742:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    6744:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    6746:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    6748:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    674c:	f00d fb9d 	bl	13e8a <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    6750:	4a4c      	ldr	r2, [pc, #304]	; (6884 <bt_att_recv+0x164>)
    6752:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6754:	2300      	movs	r3, #0
    6756:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    6758:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    675c:	4286      	cmp	r6, r0
    675e:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    6762:	d11e      	bne.n	67a2 <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    6764:	4472      	add	r2, lr
    6766:	7896      	ldrb	r6, [r2, #2]
    6768:	2e01      	cmp	r6, #1
    676a:	d139      	bne.n	67e0 <bt_att_recv+0xc0>
    676c:	f3bf 8f5b 	dmb	ish
    6770:	f104 0294 	add.w	r2, r4, #148	; 0x94
    6774:	e852 3f00 	ldrex	r3, [r2]
    6778:	f043 0001 	orr.w	r0, r3, #1
    677c:	e842 0c00 	strex	ip, r0, [r2]
    6780:	f1bc 0f00 	cmp.w	ip, #0
    6784:	d1f6      	bne.n	6774 <bt_att_recv+0x54>
    6786:	f3bf 8f5b 	dmb	ish
    678a:	07da      	lsls	r2, r3, #31
    678c:	d545      	bpl.n	681a <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected request");
    678e:	4b37      	ldr	r3, [pc, #220]	; (686c <bt_att_recv+0x14c>)
    6790:	9301      	str	r3, [sp, #4]
    6792:	9300      	str	r3, [sp, #0]
    6794:	4b36      	ldr	r3, [pc, #216]	; (6870 <bt_att_recv+0x150>)
    6796:	4a3c      	ldr	r2, [pc, #240]	; (6888 <bt_att_recv+0x168>)
    6798:	681c      	ldr	r4, [r3, #0]
    679a:	4937      	ldr	r1, [pc, #220]	; (6878 <bt_att_recv+0x158>)
    679c:	4b37      	ldr	r3, [pc, #220]	; (687c <bt_att_recv+0x15c>)
    679e:	483b      	ldr	r0, [pc, #236]	; (688c <bt_att_recv+0x16c>)
    67a0:	e7cd      	b.n	673e <bt_att_recv+0x1e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    67a2:	3301      	adds	r3, #1
    67a4:	2b1b      	cmp	r3, #27
    67a6:	d1d7      	bne.n	6758 <bt_att_recv+0x38>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    67a8:	4b30      	ldr	r3, [pc, #192]	; (686c <bt_att_recv+0x14c>)
    67aa:	9302      	str	r3, [sp, #8]
    67ac:	9300      	str	r3, [sp, #0]
    67ae:	4b30      	ldr	r3, [pc, #192]	; (6870 <bt_att_recv+0x150>)
    67b0:	9001      	str	r0, [sp, #4]
    67b2:	681e      	ldr	r6, [r3, #0]
    67b4:	4836      	ldr	r0, [pc, #216]	; (6890 <bt_att_recv+0x170>)
    67b6:	4b31      	ldr	r3, [pc, #196]	; (687c <bt_att_recv+0x15c>)
    67b8:	4a33      	ldr	r2, [pc, #204]	; (6888 <bt_att_recv+0x168>)
    67ba:	492f      	ldr	r1, [pc, #188]	; (6878 <bt_att_recv+0x158>)
    67bc:	47b0      	blx	r6
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    67be:	782d      	ldrb	r5, [r5, #0]
    67c0:	4628      	mov	r0, r5
    67c2:	f7ff fa81 	bl	5cc8 <att_op_get_type>
    67c6:	2800      	cmp	r0, #0
    67c8:	d0ba      	beq.n	6740 <bt_att_recv+0x20>
	if (!req) {
    67ca:	2d00      	cmp	r5, #0
    67cc:	d0b8      	beq.n	6740 <bt_att_recv+0x20>
    67ce:	2306      	movs	r3, #6
    67d0:	2200      	movs	r2, #0
    67d2:	4629      	mov	r1, r5
    67d4:	6820      	ldr	r0, [r4, #0]
}
    67d6:	b005      	add	sp, #20
    67d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    67dc:	f7ff bf7e 	b.w	66dc <send_err_rsp.part.12>
		} else if (handler->type == ATT_INDICATION &&
    67e0:	2e05      	cmp	r6, #5
    67e2:	d11a      	bne.n	681a <bt_att_recv+0xfa>
    67e4:	f3bf 8f5b 	dmb	ish
    67e8:	f104 0294 	add.w	r2, r4, #148	; 0x94
    67ec:	e852 3f00 	ldrex	r3, [r2]
    67f0:	f043 0002 	orr.w	r0, r3, #2
    67f4:	e842 0c00 	strex	ip, r0, [r2]
    67f8:	f1bc 0f00 	cmp.w	ip, #0
    67fc:	d1f6      	bne.n	67ec <bt_att_recv+0xcc>
    67fe:	f3bf 8f5b 	dmb	ish
    6802:	079b      	lsls	r3, r3, #30
    6804:	d509      	bpl.n	681a <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected indication");
    6806:	4b19      	ldr	r3, [pc, #100]	; (686c <bt_att_recv+0x14c>)
    6808:	9301      	str	r3, [sp, #4]
    680a:	9300      	str	r3, [sp, #0]
    680c:	4b18      	ldr	r3, [pc, #96]	; (6870 <bt_att_recv+0x150>)
    680e:	4a1e      	ldr	r2, [pc, #120]	; (6888 <bt_att_recv+0x168>)
    6810:	681c      	ldr	r4, [r3, #0]
    6812:	4919      	ldr	r1, [pc, #100]	; (6878 <bt_att_recv+0x158>)
    6814:	4b19      	ldr	r3, [pc, #100]	; (687c <bt_att_recv+0x15c>)
    6816:	481f      	ldr	r0, [pc, #124]	; (6894 <bt_att_recv+0x174>)
    6818:	e791      	b.n	673e <bt_att_recv+0x1e>
	if (buf->len < handler->expect_len) {
    681a:	eb01 030e 	add.w	r3, r1, lr
    681e:	89ba      	ldrh	r2, [r7, #12]
    6820:	7859      	ldrb	r1, [r3, #1]
    6822:	4291      	cmp	r1, r2
    6824:	d911      	bls.n	684a <bt_att_recv+0x12a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    6826:	4b11      	ldr	r3, [pc, #68]	; (686c <bt_att_recv+0x14c>)
    6828:	9303      	str	r3, [sp, #12]
    682a:	7829      	ldrb	r1, [r5, #0]
    682c:	9300      	str	r3, [sp, #0]
    682e:	4b10      	ldr	r3, [pc, #64]	; (6870 <bt_att_recv+0x150>)
    6830:	9102      	str	r1, [sp, #8]
    6832:	9201      	str	r2, [sp, #4]
    6834:	681f      	ldr	r7, [r3, #0]
    6836:	4a0f      	ldr	r2, [pc, #60]	; (6874 <bt_att_recv+0x154>)
    6838:	4b10      	ldr	r3, [pc, #64]	; (687c <bt_att_recv+0x15c>)
    683a:	490f      	ldr	r1, [pc, #60]	; (6878 <bt_att_recv+0x158>)
    683c:	4816      	ldr	r0, [pc, #88]	; (6898 <bt_att_recv+0x178>)
    683e:	47b8      	blx	r7
	if (handler->type == ATT_REQUEST && err) {
    6840:	2e01      	cmp	r6, #1
    6842:	f47f af7d 	bne.w	6740 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    6846:	2304      	movs	r3, #4
    6848:	e00a      	b.n	6860 <bt_att_recv+0x140>
		err = handler->func(att, buf);
    684a:	685b      	ldr	r3, [r3, #4]
    684c:	4639      	mov	r1, r7
    684e:	4620      	mov	r0, r4
    6850:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6852:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    6854:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    6856:	f47f af73 	bne.w	6740 <bt_att_recv+0x20>
    685a:	2800      	cmp	r0, #0
    685c:	f43f af70 	beq.w	6740 <bt_att_recv+0x20>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6860:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    6862:	2900      	cmp	r1, #0
    6864:	f43f af6c 	beq.w	6740 <bt_att_recv+0x20>
    6868:	2200      	movs	r2, #0
    686a:	e7b3      	b.n	67d4 <bt_att_recv+0xb4>
    686c:	000161ba 	.word	0x000161ba
    6870:	20003a5c 	.word	0x20003a5c
    6874:	000179e1 	.word	0x000179e1
    6878:	00017a29 	.word	0x00017a29
    687c:	000186f5 	.word	0x000186f5
    6880:	000188fb 	.word	0x000188fb
    6884:	000189d8 	.word	0x000189d8
    6888:	00017a64 	.word	0x00017a64
    688c:	00018926 	.word	0x00018926
    6890:	000189b0 	.word	0x000189b0
    6894:	00018952 	.word	0x00018952
    6898:	00018981 	.word	0x00018981

0000689c <att_read_group_req>:
{
    689c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    68a0:	898b      	ldrh	r3, [r1, #12]
    68a2:	2b06      	cmp	r3, #6
{
    68a4:	b08d      	sub	sp, #52	; 0x34
    68a6:	4680      	mov	r8, r0
    68a8:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    68aa:	d001      	beq.n	68b0 <att_read_group_req+0x14>
    68ac:	2b14      	cmp	r3, #20
    68ae:	d168      	bne.n	6982 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    68b0:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    68b2:	2104      	movs	r1, #4
	req = (void *)buf->data;
    68b4:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    68b8:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    68bc:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    68be:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    68c0:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    68c2:	f00d fae2 	bl	13e8a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    68c6:	4621      	mov	r1, r4
    68c8:	4638      	mov	r0, r7
    68ca:	f7ff fc33 	bl	6134 <uuid_create>
    68ce:	2800      	cmp	r0, #0
    68d0:	d059      	beq.n	6986 <att_read_group_req+0xea>
	if (!start || !end) {
    68d2:	2d00      	cmp	r5, #0
    68d4:	d05a      	beq.n	698c <att_read_group_req+0xf0>
    68d6:	2400      	movs	r4, #0
    68d8:	2e00      	cmp	r6, #0
    68da:	d056      	beq.n	698a <att_read_group_req+0xee>
	if (start > end) {
    68dc:	42b5      	cmp	r5, r6
    68de:	d855      	bhi.n	698c <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    68e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    68e4:	4669      	mov	r1, sp
    68e6:	4638      	mov	r0, r7
    68e8:	f88d 4000 	strb.w	r4, [sp]
    68ec:	f8ad 3002 	strh.w	r3, [sp, #2]
    68f0:	f7fb fc3c 	bl	216c <bt_uuid_cmp>
    68f4:	bb38      	cbnz	r0, 6946 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    68f6:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    68fa:	2214      	movs	r2, #20
    68fc:	2100      	movs	r1, #0
    68fe:	a807      	add	r0, sp, #28
    6900:	f7fb fae2 	bl	1ec8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6904:	2201      	movs	r2, #1
    6906:	2111      	movs	r1, #17
    6908:	4648      	mov	r0, r9
    690a:	f7ff fe6f 	bl	65ec <bt_att_create_pdu>
    690e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    6910:	2800      	cmp	r0, #0
    6912:	d038      	beq.n	6986 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6914:	2101      	movs	r1, #1
    6916:	3008      	adds	r0, #8
	data.uuid = uuid;
    6918:	9708      	str	r7, [sp, #32]
	data.att = att;
    691a:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    691e:	f00d fa95 	bl	13e4c <net_buf_simple_add>
	data.rsp->len = 0;
    6922:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6924:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6926:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    6928:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    692a:	4a1c      	ldr	r2, [pc, #112]	; (699c <att_read_group_req+0x100>)
	data.group = NULL;
    692c:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    692e:	4631      	mov	r1, r6
    6930:	4628      	mov	r0, r5
    6932:	f000 fea3 	bl	767c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6938:	781c      	ldrb	r4, [r3, #0]
    693a:	b9d4      	cbnz	r4, 6972 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    693c:	9809      	ldr	r0, [sp, #36]	; 0x24
    693e:	f00d fa53 	bl	13de8 <net_buf_unref>
    6942:	230a      	movs	r3, #10
    6944:	e00c      	b.n	6960 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6946:	f642 0301 	movw	r3, #10241	; 0x2801
    694a:	a901      	add	r1, sp, #4
    694c:	4638      	mov	r0, r7
    694e:	f88d 4004 	strb.w	r4, [sp, #4]
    6952:	f8ad 3006 	strh.w	r3, [sp, #6]
    6956:	f7fb fc09 	bl	216c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    695a:	2800      	cmp	r0, #0
    695c:	d0cb      	beq.n	68f6 <att_read_group_req+0x5a>
    695e:	2310      	movs	r3, #16
    6960:	462a      	mov	r2, r5
    6962:	2110      	movs	r1, #16
    6964:	4648      	mov	r0, r9
    6966:	f7ff feb9 	bl	66dc <send_err_rsp.part.12>
}
    696a:	4620      	mov	r0, r4
    696c:	b00d      	add	sp, #52	; 0x34
    696e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6972:	4b0b      	ldr	r3, [pc, #44]	; (69a0 <att_read_group_req+0x104>)
    6974:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6976:	2104      	movs	r1, #4
    6978:	4648      	mov	r0, r9
    697a:	f7ff f81b 	bl	59b4 <bt_l2cap_send_cb>
		return 0;
    697e:	2400      	movs	r4, #0
    6980:	e7f3      	b.n	696a <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    6982:	2404      	movs	r4, #4
    6984:	e7f1      	b.n	696a <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    6986:	240e      	movs	r4, #14
    6988:	e7ef      	b.n	696a <att_read_group_req+0xce>
			*err = 0;
    698a:	4635      	mov	r5, r6
    698c:	2301      	movs	r3, #1
    698e:	462a      	mov	r2, r5
    6990:	2110      	movs	r1, #16
    6992:	4648      	mov	r0, r9
    6994:	f7ff fea2 	bl	66dc <send_err_rsp.part.12>
    6998:	e7f1      	b.n	697e <att_read_group_req+0xe2>
    699a:	bf00      	nop
    699c:	00005d91 	.word	0x00005d91
    69a0:	000060f9 	.word	0x000060f9

000069a4 <att_read_mult_req>:
{
    69a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    69a8:	6804      	ldr	r4, [r0, #0]
{
    69aa:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    69ac:	2214      	movs	r2, #20
{
    69ae:	4606      	mov	r6, r0
    69b0:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    69b2:	a801      	add	r0, sp, #4
    69b4:	2100      	movs	r1, #0
    69b6:	f7fb fa87 	bl	1ec8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    69ba:	2200      	movs	r2, #0
    69bc:	210f      	movs	r1, #15
    69be:	4620      	mov	r0, r4
    69c0:	f7ff fe14 	bl	65ec <bt_att_create_pdu>
    69c4:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    69c6:	b368      	cbz	r0, 6a24 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    69c8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6a2c <att_read_mult_req+0x88>
	data.att = att;
    69cc:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    69ce:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    69d2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    69d6:	89ab      	ldrh	r3, [r5, #12]
    69d8:	2b01      	cmp	r3, #1
    69da:	d806      	bhi.n	69ea <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    69dc:	4b12      	ldr	r3, [pc, #72]	; (6a28 <att_read_mult_req+0x84>)
    69de:	9a03      	ldr	r2, [sp, #12]
    69e0:	2104      	movs	r1, #4
    69e2:	4620      	mov	r0, r4
    69e4:	f7fe ffe6 	bl	59b4 <bt_l2cap_send_cb>
    69e8:	e018      	b.n	6a1c <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    69ea:	4638      	mov	r0, r7
    69ec:	f00d fa5d 	bl	13eaa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    69f0:	ab01      	add	r3, sp, #4
    69f2:	464a      	mov	r2, r9
    69f4:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    69f6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    69f8:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    69fc:	f000 fe3e 	bl	767c <bt_gatt_foreach_attr>
		if (data.err) {
    6a00:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6a04:	2b00      	cmp	r3, #0
    6a06:	d0e6      	beq.n	69d6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    6a08:	9803      	ldr	r0, [sp, #12]
    6a0a:	f00d f9ed 	bl	13de8 <net_buf_unref>
    6a0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6a12:	4632      	mov	r2, r6
    6a14:	210e      	movs	r1, #14
    6a16:	4620      	mov	r0, r4
    6a18:	f7ff fe60 	bl	66dc <send_err_rsp.part.12>
	return 0;
    6a1c:	2000      	movs	r0, #0
}
    6a1e:	b007      	add	sp, #28
    6a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    6a24:	200e      	movs	r0, #14
    6a26:	e7fa      	b.n	6a1e <att_read_mult_req+0x7a>
    6a28:	000060f9 	.word	0x000060f9
    6a2c:	00006575 	.word	0x00006575

00006a30 <att_read_rsp>:
{
    6a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a34:	4607      	mov	r7, r0
    6a36:	b086      	sub	sp, #24
    6a38:	460c      	mov	r4, r1
    6a3a:	4690      	mov	r8, r2
	if (!handle) {
    6a3c:	461d      	mov	r5, r3
    6a3e:	b3a3      	cbz	r3, 6aaa <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    6a40:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    6a42:	2214      	movs	r2, #20
    6a44:	2100      	movs	r1, #0
    6a46:	a801      	add	r0, sp, #4
    6a48:	f7fb fa3e 	bl	1ec8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6a4c:	2200      	movs	r2, #0
    6a4e:	4641      	mov	r1, r8
    6a50:	4630      	mov	r0, r6
    6a52:	f7ff fdcb 	bl	65ec <bt_att_create_pdu>
    6a56:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6a58:	b348      	cbz	r0, 6aae <att_read_rsp+0x7e>
	data.offset = offset;
    6a5a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    6a5e:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6a62:	2301      	movs	r3, #1
    6a64:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6a68:	4a12      	ldr	r2, [pc, #72]	; (6ab4 <att_read_rsp+0x84>)
	data.att = att;
    6a6a:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6a6c:	ab01      	add	r3, sp, #4
    6a6e:	4629      	mov	r1, r5
    6a70:	4628      	mov	r0, r5
    6a72:	f000 fe03 	bl	767c <bt_gatt_foreach_attr>
	if (data.err) {
    6a76:	f89d 7014 	ldrb.w	r7, [sp, #20]
    6a7a:	b17f      	cbz	r7, 6a9c <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    6a7c:	9803      	ldr	r0, [sp, #12]
    6a7e:	f00d f9b3 	bl	13de8 <net_buf_unref>
	if (!req) {
    6a82:	b13c      	cbz	r4, 6a94 <att_read_rsp+0x64>
    6a84:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6a88:	462a      	mov	r2, r5
    6a8a:	4621      	mov	r1, r4
    6a8c:	4630      	mov	r0, r6
    6a8e:	f7ff fe25 	bl	66dc <send_err_rsp.part.12>
		return 0;
    6a92:	2400      	movs	r4, #0
}
    6a94:	4620      	mov	r0, r4
    6a96:	b006      	add	sp, #24
    6a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6a9c:	4b06      	ldr	r3, [pc, #24]	; (6ab8 <att_read_rsp+0x88>)
    6a9e:	9a03      	ldr	r2, [sp, #12]
    6aa0:	2104      	movs	r1, #4
    6aa2:	4630      	mov	r0, r6
    6aa4:	f7fe ff86 	bl	59b4 <bt_l2cap_send_cb>
    6aa8:	e7f3      	b.n	6a92 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    6aaa:	2401      	movs	r4, #1
    6aac:	e7f2      	b.n	6a94 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    6aae:	240e      	movs	r4, #14
    6ab0:	e7f0      	b.n	6a94 <att_read_rsp+0x64>
    6ab2:	bf00      	nop
    6ab4:	00006575 	.word	0x00006575
    6ab8:	000060f9 	.word	0x000060f9

00006abc <att_read_blob_req>:
{
    6abc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    6abe:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    6ac0:	8813      	ldrh	r3, [r2, #0]
    6ac2:	8852      	ldrh	r2, [r2, #2]
    6ac4:	9200      	str	r2, [sp, #0]
    6ac6:	210c      	movs	r1, #12
    6ac8:	220d      	movs	r2, #13
    6aca:	f7ff ffb1 	bl	6a30 <att_read_rsp>
}
    6ace:	b003      	add	sp, #12
    6ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00006ad4 <att_read_req>:
{
    6ad4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    6ad6:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    6ad8:	2200      	movs	r2, #0
    6ada:	881b      	ldrh	r3, [r3, #0]
    6adc:	9200      	str	r2, [sp, #0]
    6ade:	210a      	movs	r1, #10
    6ae0:	220b      	movs	r2, #11
    6ae2:	f7ff ffa5 	bl	6a30 <att_read_rsp>
}
    6ae6:	b003      	add	sp, #12
    6ae8:	f85d fb04 	ldr.w	pc, [sp], #4

00006aec <att_read_type_req>:
{
    6aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6af0:	898b      	ldrh	r3, [r1, #12]
    6af2:	2b06      	cmp	r3, #6
{
    6af4:	b08d      	sub	sp, #52	; 0x34
    6af6:	4607      	mov	r7, r0
    6af8:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6afa:	d001      	beq.n	6b00 <att_read_type_req+0x14>
    6afc:	2b14      	cmp	r3, #20
    6afe:	d152      	bne.n	6ba6 <att_read_type_req+0xba>
	req = (void *)buf->data;
    6b00:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    6b02:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6b04:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6b08:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6b0c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6b0e:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6b10:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    6b14:	f00d f9b9 	bl	13e8a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6b18:	4631      	mov	r1, r6
    6b1a:	4640      	mov	r0, r8
    6b1c:	f7ff fb0a 	bl	6134 <uuid_create>
    6b20:	b198      	cbz	r0, 6b4a <att_read_type_req+0x5e>
	if (!start || !end) {
    6b22:	2d00      	cmp	r5, #0
    6b24:	d042      	beq.n	6bac <att_read_type_req+0xc0>
    6b26:	2c00      	cmp	r4, #0
    6b28:	d03f      	beq.n	6baa <att_read_type_req+0xbe>
	if (start > end) {
    6b2a:	42a5      	cmp	r5, r4
    6b2c:	d83e      	bhi.n	6bac <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    6b2e:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    6b30:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    6b32:	2100      	movs	r1, #0
    6b34:	eb0d 0002 	add.w	r0, sp, r2
    6b38:	f7fb f9c6 	bl	1ec8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6b3c:	2201      	movs	r2, #1
    6b3e:	2109      	movs	r1, #9
    6b40:	4630      	mov	r0, r6
    6b42:	f7ff fd53 	bl	65ec <bt_att_create_pdu>
    6b46:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    6b48:	b908      	cbnz	r0, 6b4e <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    6b4a:	240e      	movs	r4, #14
    6b4c:	e027      	b.n	6b9e <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6b4e:	2101      	movs	r1, #1
    6b50:	3008      	adds	r0, #8
	data.att = att;
    6b52:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    6b54:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6b58:	f00d f978 	bl	13e4c <net_buf_simple_add>
	data.rsp->len = 0;
    6b5c:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6b5e:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6b60:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6b62:	4621      	mov	r1, r4
	data.rsp->len = 0;
    6b64:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6b66:	4a14      	ldr	r2, [pc, #80]	; (6bb8 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6b68:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6b6c:	4628      	mov	r0, r5
    6b6e:	ab06      	add	r3, sp, #24
    6b70:	f000 fd84 	bl	767c <bt_gatt_foreach_attr>
	if (data.err) {
    6b74:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6b78:	b15c      	cbz	r4, 6b92 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    6b7a:	9808      	ldr	r0, [sp, #32]
    6b7c:	f00d f934 	bl	13de8 <net_buf_unref>
    6b80:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6b84:	462a      	mov	r2, r5
    6b86:	2108      	movs	r1, #8
    6b88:	4630      	mov	r0, r6
    6b8a:	f7ff fda7 	bl	66dc <send_err_rsp.part.12>
		return 0;
    6b8e:	2400      	movs	r4, #0
    6b90:	e005      	b.n	6b9e <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6b92:	4b0a      	ldr	r3, [pc, #40]	; (6bbc <att_read_type_req+0xd0>)
    6b94:	9a08      	ldr	r2, [sp, #32]
    6b96:	2104      	movs	r1, #4
    6b98:	4630      	mov	r0, r6
    6b9a:	f7fe ff0b 	bl	59b4 <bt_l2cap_send_cb>
}
    6b9e:	4620      	mov	r0, r4
    6ba0:	b00d      	add	sp, #52	; 0x34
    6ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6ba6:	2404      	movs	r4, #4
    6ba8:	e7f9      	b.n	6b9e <att_read_type_req+0xb2>
			*err = 0;
    6baa:	4625      	mov	r5, r4
    6bac:	2301      	movs	r3, #1
    6bae:	462a      	mov	r2, r5
    6bb0:	2108      	movs	r1, #8
    6bb2:	4648      	mov	r0, r9
    6bb4:	e7e9      	b.n	6b8a <att_read_type_req+0x9e>
    6bb6:	bf00      	nop
    6bb8:	0000600d 	.word	0x0000600d
    6bbc:	000060f9 	.word	0x000060f9

00006bc0 <att_find_type_req>:
{
    6bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6bc4:	f8d0 9000 	ldr.w	r9, [r0]
{
    6bc8:	4680      	mov	r8, r0
	req = (void *)buf->data;
    6bca:	4608      	mov	r0, r1
{
    6bcc:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    6bce:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    6bd2:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    6bd4:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    6bd6:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6bd8:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    6bda:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    6bdc:	f00d f955 	bl	13e8a <net_buf_simple_pull>
    6be0:	4682      	mov	sl, r0
	if (!start || !end) {
    6be2:	2d00      	cmp	r5, #0
    6be4:	d057      	beq.n	6c96 <att_find_type_req+0xd6>
    6be6:	2400      	movs	r4, #0
    6be8:	2f00      	cmp	r7, #0
    6bea:	d053      	beq.n	6c94 <att_find_type_req+0xd4>
	if (start > end) {
    6bec:	42bd      	cmp	r5, r7
    6bee:	d852      	bhi.n	6c96 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    6bf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6bf4:	a902      	add	r1, sp, #8
    6bf6:	a801      	add	r0, sp, #4
    6bf8:	f8ad 6006 	strh.w	r6, [sp, #6]
    6bfc:	f88d 4004 	strb.w	r4, [sp, #4]
    6c00:	f88d 4008 	strb.w	r4, [sp, #8]
    6c04:	f8ad 300a 	strh.w	r3, [sp, #10]
    6c08:	f7fb fab0 	bl	216c <bt_uuid_cmp>
    6c0c:	4606      	mov	r6, r0
    6c0e:	b148      	cbz	r0, 6c24 <att_find_type_req+0x64>
    6c10:	230a      	movs	r3, #10
    6c12:	462a      	mov	r2, r5
    6c14:	2106      	movs	r1, #6
    6c16:	4648      	mov	r0, r9
    6c18:	f7ff fd60 	bl	66dc <send_err_rsp.part.12>
}
    6c1c:	4620      	mov	r0, r4
    6c1e:	b009      	add	sp, #36	; 0x24
    6c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    6c24:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    6c28:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    6c2c:	2214      	movs	r2, #20
    6c2e:	4631      	mov	r1, r6
    6c30:	a803      	add	r0, sp, #12
    6c32:	f7fb f949 	bl	1ec8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    6c36:	4632      	mov	r2, r6
    6c38:	2107      	movs	r1, #7
    6c3a:	4648      	mov	r0, r9
    6c3c:	f7ff fcd6 	bl	65ec <bt_att_create_pdu>
    6c40:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    6c42:	b328      	cbz	r0, 6c90 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6c44:	230a      	movs	r3, #10
    6c46:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6c4a:	4a14      	ldr	r2, [pc, #80]	; (6c9c <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6c4c:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6c50:	ab03      	add	r3, sp, #12
    6c52:	4639      	mov	r1, r7
    6c54:	4628      	mov	r0, r5
	data.att = att;
    6c56:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    6c5a:	9605      	str	r6, [sp, #20]
	data.value = value;
    6c5c:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6c60:	f000 fd0c 	bl	767c <bt_gatt_foreach_attr>
	if (data.err) {
    6c64:	f89d 401d 	ldrb.w	r4, [sp, #29]
    6c68:	b15c      	cbz	r4, 6c82 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    6c6a:	9804      	ldr	r0, [sp, #16]
    6c6c:	f00d f8bc 	bl	13de8 <net_buf_unref>
    6c70:	f89d 301d 	ldrb.w	r3, [sp, #29]
    6c74:	462a      	mov	r2, r5
    6c76:	2106      	movs	r1, #6
    6c78:	4648      	mov	r0, r9
    6c7a:	f7ff fd2f 	bl	66dc <send_err_rsp.part.12>
		return 0;
    6c7e:	2400      	movs	r4, #0
    6c80:	e7cc      	b.n	6c1c <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6c82:	4b07      	ldr	r3, [pc, #28]	; (6ca0 <att_find_type_req+0xe0>)
    6c84:	9a04      	ldr	r2, [sp, #16]
    6c86:	2104      	movs	r1, #4
    6c88:	4648      	mov	r0, r9
    6c8a:	f7fe fe93 	bl	59b4 <bt_l2cap_send_cb>
    6c8e:	e7c5      	b.n	6c1c <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    6c90:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6c92:	e7c3      	b.n	6c1c <att_find_type_req+0x5c>
			*err = 0;
    6c94:	463d      	mov	r5, r7
    6c96:	2301      	movs	r3, #1
    6c98:	e7ec      	b.n	6c74 <att_find_type_req+0xb4>
    6c9a:	bf00      	nop
    6c9c:	00005ef9 	.word	0x00005ef9
    6ca0:	000060f9 	.word	0x000060f9

00006ca4 <att_find_info_req>:
{
    6ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    6ca6:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    6ca8:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6caa:	881d      	ldrh	r5, [r3, #0]
{
    6cac:	b085      	sub	sp, #20
    6cae:	4607      	mov	r7, r0
	if (!start || !end) {
    6cb0:	b375      	cbz	r5, 6d10 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6cb2:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6cb4:	b35c      	cbz	r4, 6d0e <att_find_info_req+0x6a>
	if (start > end) {
    6cb6:	42a5      	cmp	r5, r4
    6cb8:	d82a      	bhi.n	6d10 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    6cba:	2210      	movs	r2, #16
    6cbc:	2100      	movs	r1, #0
    6cbe:	4668      	mov	r0, sp
    6cc0:	f7fb f902 	bl	1ec8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6cc4:	2200      	movs	r2, #0
    6cc6:	2105      	movs	r1, #5
    6cc8:	4630      	mov	r0, r6
    6cca:	f7ff fc8f 	bl	65ec <bt_att_create_pdu>
    6cce:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6cd0:	b910      	cbnz	r0, 6cd8 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    6cd2:	200e      	movs	r0, #14
}
    6cd4:	b005      	add	sp, #20
    6cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6cd8:	4621      	mov	r1, r4
    6cda:	466b      	mov	r3, sp
    6cdc:	4a0d      	ldr	r2, [pc, #52]	; (6d14 <att_find_info_req+0x70>)
	data.att = att;
    6cde:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6ce0:	4628      	mov	r0, r5
    6ce2:	f000 fccb 	bl	767c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    6ce6:	9c02      	ldr	r4, [sp, #8]
    6ce8:	b94c      	cbnz	r4, 6cfe <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    6cea:	9801      	ldr	r0, [sp, #4]
    6cec:	f00d f87c 	bl	13de8 <net_buf_unref>
    6cf0:	230a      	movs	r3, #10
    6cf2:	462a      	mov	r2, r5
    6cf4:	2104      	movs	r1, #4
    6cf6:	4630      	mov	r0, r6
    6cf8:	f7ff fcf0 	bl	66dc <send_err_rsp.part.12>
    6cfc:	e005      	b.n	6d0a <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6cfe:	4b06      	ldr	r3, [pc, #24]	; (6d18 <att_find_info_req+0x74>)
    6d00:	9a01      	ldr	r2, [sp, #4]
    6d02:	2104      	movs	r1, #4
    6d04:	4630      	mov	r0, r6
    6d06:	f7fe fe55 	bl	59b4 <bt_l2cap_send_cb>
		return 0;
    6d0a:	2000      	movs	r0, #0
    6d0c:	e7e2      	b.n	6cd4 <att_find_info_req+0x30>
			*err = 0;
    6d0e:	4625      	mov	r5, r4
    6d10:	2301      	movs	r3, #1
    6d12:	e7ee      	b.n	6cf2 <att_find_info_req+0x4e>
    6d14:	00005e5f 	.word	0x00005e5f
    6d18:	000060f9 	.word	0x000060f9

00006d1c <att_write_rsp.part.13.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d20:	b086      	sub	sp, #24
    6d22:	4690      	mov	r8, r2
    6d24:	4605      	mov	r5, r0
    6d26:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    6d28:	2218      	movs	r2, #24
    6d2a:	2100      	movs	r1, #0
    6d2c:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6d2e:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    6d30:	f7fb f8ca 	bl	1ec8 <memset>
	if (rsp) {
    6d34:	f1b8 0f00 	cmp.w	r8, #0
    6d38:	d11f      	bne.n	6d7a <att_write_rsp.part.13.constprop.17+0x5e>
	data.offset = offset;
    6d3a:	2300      	movs	r3, #0
    6d3c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    6d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d42:	9303      	str	r3, [sp, #12]
	data.len = len;
    6d44:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    6d48:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6d4c:	2301      	movs	r3, #1
    6d4e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6d52:	4a1b      	ldr	r2, [pc, #108]	; (6dc0 <att_write_rsp.part.13.constprop.17+0xa4>)
	data.conn = conn;
    6d54:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6d56:	466b      	mov	r3, sp
    6d58:	4639      	mov	r1, r7
    6d5a:	4638      	mov	r0, r7
	data.op = op;
    6d5c:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6d60:	f000 fc8c 	bl	767c <bt_gatt_foreach_attr>
	if (data.err) {
    6d64:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6d68:	b98c      	cbnz	r4, 6d8e <att_write_rsp.part.13.constprop.17+0x72>
	if (data.buf) {
    6d6a:	9a01      	ldr	r2, [sp, #4]
    6d6c:	b1b2      	cbz	r2, 6d9c <att_write_rsp.part.13.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6d6e:	4b15      	ldr	r3, [pc, #84]	; (6dc4 <att_write_rsp.part.13.constprop.17+0xa8>)
    6d70:	2104      	movs	r1, #4
    6d72:	4628      	mov	r0, r5
    6d74:	f7fe fe1e 	bl	59b4 <bt_l2cap_send_cb>
    6d78:	e011      	b.n	6d9e <att_write_rsp.part.13.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6d7a:	2200      	movs	r2, #0
    6d7c:	4641      	mov	r1, r8
    6d7e:	4628      	mov	r0, r5
    6d80:	f7ff fc34 	bl	65ec <bt_att_create_pdu>
    6d84:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6d86:	2800      	cmp	r0, #0
    6d88:	d1d7      	bne.n	6d3a <att_write_rsp.part.13.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6d8a:	240e      	movs	r4, #14
    6d8c:	e007      	b.n	6d9e <att_write_rsp.part.13.constprop.17+0x82>
		if (rsp) {
    6d8e:	f1b8 0f00 	cmp.w	r8, #0
    6d92:	d00f      	beq.n	6db4 <att_write_rsp.part.13.constprop.17+0x98>
			net_buf_unref(data.buf);
    6d94:	9801      	ldr	r0, [sp, #4]
    6d96:	f00d f827 	bl	13de8 <net_buf_unref>
	if (!req) {
    6d9a:	b926      	cbnz	r6, 6da6 <att_write_rsp.part.13.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6d9c:	2400      	movs	r4, #0
}
    6d9e:	4620      	mov	r0, r4
    6da0:	b006      	add	sp, #24
    6da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6da6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6daa:	463a      	mov	r2, r7
    6dac:	4631      	mov	r1, r6
    6dae:	4628      	mov	r0, r5
    6db0:	f7ff fc94 	bl	66dc <send_err_rsp.part.12>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6db4:	2e18      	cmp	r6, #24
    6db6:	d1f1      	bne.n	6d9c <att_write_rsp.part.13.constprop.17+0x80>
    6db8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6dbc:	e7ef      	b.n	6d9e <att_write_rsp.part.13.constprop.17+0x82>
    6dbe:	bf00      	nop
    6dc0:	00006275 	.word	0x00006275
    6dc4:	000060f9 	.word	0x000060f9

00006dc8 <att_signed_write_cmd>:
{
    6dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6dcc:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    6dce:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    6dd0:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6dd4:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6dd6:	4620      	mov	r0, r4
    6dd8:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    6dda:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6dde:	f00d f84c 	bl	13e7a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    6de2:	4629      	mov	r1, r5
    6de4:	4630      	mov	r0, r6
    6de6:	f000 fde8 	bl	79ba <bt_smp_sign_verify>
	if (err) {
    6dea:	4607      	mov	r7, r0
    6dec:	b168      	cbz	r0, 6e0a <att_signed_write_cmd+0x42>
		BT_ERR("Error verifying data");
    6dee:	4b14      	ldr	r3, [pc, #80]	; (6e40 <att_signed_write_cmd+0x78>)
    6df0:	9301      	str	r3, [sp, #4]
    6df2:	9300      	str	r3, [sp, #0]
    6df4:	4b13      	ldr	r3, [pc, #76]	; (6e44 <att_signed_write_cmd+0x7c>)
    6df6:	4814      	ldr	r0, [pc, #80]	; (6e48 <att_signed_write_cmd+0x80>)
    6df8:	681c      	ldr	r4, [r3, #0]
    6dfa:	4a14      	ldr	r2, [pc, #80]	; (6e4c <att_signed_write_cmd+0x84>)
    6dfc:	4b14      	ldr	r3, [pc, #80]	; (6e50 <att_signed_write_cmd+0x88>)
    6dfe:	4915      	ldr	r1, [pc, #84]	; (6e54 <att_signed_write_cmd+0x8c>)
    6e00:	47a0      	blx	r4
    6e02:	2000      	movs	r0, #0
}
    6e04:	b002      	add	sp, #8
    6e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    6e0a:	2101      	movs	r1, #1
    6e0c:	4620      	mov	r0, r4
    6e0e:	f00d f83c 	bl	13e8a <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6e12:	2102      	movs	r1, #2
    6e14:	4620      	mov	r0, r4
    6e16:	f00d f838 	bl	13e8a <net_buf_simple_pull>
	if (!handle) {
    6e1a:	f1b8 0f00 	cmp.w	r8, #0
    6e1e:	d00c      	beq.n	6e3a <att_signed_write_cmd+0x72>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6e20:	7b2b      	ldrb	r3, [r5, #12]
    6e22:	3b0c      	subs	r3, #12
    6e24:	b2db      	uxtb	r3, r3
    6e26:	9301      	str	r3, [sp, #4]
    6e28:	68ab      	ldr	r3, [r5, #8]
    6e2a:	9300      	str	r3, [sp, #0]
    6e2c:	463a      	mov	r2, r7
    6e2e:	4643      	mov	r3, r8
    6e30:	4639      	mov	r1, r7
    6e32:	4630      	mov	r0, r6
    6e34:	f7ff ff72 	bl	6d1c <att_write_rsp.part.13.constprop.17>
    6e38:	e7e4      	b.n	6e04 <att_signed_write_cmd+0x3c>
		return BT_ATT_ERR_INVALID_HANDLE;
    6e3a:	2001      	movs	r0, #1
    6e3c:	e7e2      	b.n	6e04 <att_signed_write_cmd+0x3c>
    6e3e:	bf00      	nop
    6e40:	000161ba 	.word	0x000161ba
    6e44:	20003a5c 	.word	0x20003a5c
    6e48:	00018850 	.word	0x00018850
    6e4c:	000179e1 	.word	0x000179e1
    6e50:	000186e0 	.word	0x000186e0
    6e54:	00017a29 	.word	0x00017a29

00006e58 <att_write_cmd>:
{
    6e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6e5a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6e5c:	f101 0008 	add.w	r0, r1, #8
{
    6e60:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6e62:	f00d f822 	bl	13eaa <net_buf_simple_pull_le16>
	if (!handle) {
    6e66:	4603      	mov	r3, r0
    6e68:	b150      	cbz	r0, 6e80 <att_write_cmd+0x28>
    6e6a:	7b22      	ldrb	r2, [r4, #12]
    6e6c:	9201      	str	r2, [sp, #4]
    6e6e:	68a2      	ldr	r2, [r4, #8]
    6e70:	9200      	str	r2, [sp, #0]
    6e72:	2200      	movs	r2, #0
    6e74:	4611      	mov	r1, r2
    6e76:	4628      	mov	r0, r5
    6e78:	f7ff ff50 	bl	6d1c <att_write_rsp.part.13.constprop.17>
}
    6e7c:	b003      	add	sp, #12
    6e7e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6e80:	2001      	movs	r0, #1
    6e82:	e7fb      	b.n	6e7c <att_write_cmd+0x24>

00006e84 <att_write_req>:
{
    6e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6e86:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6e88:	f101 0008 	add.w	r0, r1, #8
{
    6e8c:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6e8e:	f00d f80c 	bl	13eaa <net_buf_simple_pull_le16>
	if (!handle) {
    6e92:	4603      	mov	r3, r0
    6e94:	b150      	cbz	r0, 6eac <att_write_req+0x28>
    6e96:	7b22      	ldrb	r2, [r4, #12]
    6e98:	9201      	str	r2, [sp, #4]
    6e9a:	68a2      	ldr	r2, [r4, #8]
    6e9c:	9200      	str	r2, [sp, #0]
    6e9e:	2112      	movs	r1, #18
    6ea0:	2213      	movs	r2, #19
    6ea2:	4628      	mov	r0, r5
    6ea4:	f7ff ff3a 	bl	6d1c <att_write_rsp.part.13.constprop.17>
}
    6ea8:	b003      	add	sp, #12
    6eaa:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6eac:	2001      	movs	r0, #1
    6eae:	e7fb      	b.n	6ea8 <att_write_req+0x24>

00006eb0 <bt_att_init>:

void bt_att_init(void)
{
    6eb0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6eb2:	4803      	ldr	r0, [pc, #12]	; (6ec0 <bt_att_init+0x10>)
    6eb4:	f7fe fcbe 	bl	5834 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6ebc:	f000 bbc8 	b.w	7650 <bt_gatt_init>
    6ec0:	20003bb8 	.word	0x20003bb8

00006ec4 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6ec4:	b510      	push	{r4, lr}
    6ec6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6ec8:	b1d8      	cbz	r0, 6f02 <bt_att_req_send+0x3e>
    6eca:	b1d1      	cbz	r1, 6f02 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6ecc:	f7ff f98c 	bl	61e8 <att_chan_get>
	if (!att) {
    6ed0:	4603      	mov	r3, r0
    6ed2:	b1c8      	cbz	r0, 6f08 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6ed4:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    6ed8:	b172      	cbz	r2, 6ef8 <bt_att_req_send+0x34>
	parent->next = child;
    6eda:	2000      	movs	r0, #0
    6edc:	6020      	str	r0, [r4, #0]
    6ede:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    6ee2:	b92a      	cbnz	r2, 6ef0 <bt_att_req_send+0x2c>
	list->tail = node;
    6ee4:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    6ee8:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6eec:	4610      	mov	r0, r2
    6eee:	bd10      	pop	{r4, pc}
	parent->next = child;
    6ef0:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6ef2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    6ef6:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6ef8:	4621      	mov	r1, r4
}
    6efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    6efe:	f7ff b9e5 	b.w	62cc <att_send_req>
		return -EINVAL;
    6f02:	f06f 0015 	mvn.w	r0, #21
    6f06:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6f08:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6f0c:	bd10      	pop	{r4, pc}

00006f0e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    6f0e:	4770      	bx	lr

00006f10 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6f10:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6f12:	2000      	movs	r0, #0
    6f14:	4770      	bx	lr

00006f16 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6f16:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6f18:	2300      	movs	r3, #0
    6f1a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    6f1c:	461a      	mov	r2, r3
    6f1e:	42aa      	cmp	r2, r5
    6f20:	d107      	bne.n	6f32 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6f22:	890a      	ldrh	r2, [r1, #8]
    6f24:	429a      	cmp	r2, r3
    6f26:	d00d      	beq.n	6f44 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6f28:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6f2a:	68ca      	ldr	r2, [r1, #12]
	}
}
    6f2c:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    6f2e:	4619      	mov	r1, r3
    6f30:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    6f32:	680c      	ldr	r4, [r1, #0]
    6f34:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6f38:	3201      	adds	r2, #1
    6f3a:	8924      	ldrh	r4, [r4, #8]
    6f3c:	42a3      	cmp	r3, r4
    6f3e:	bf38      	it	cc
    6f40:	4623      	movcc	r3, r4
    6f42:	e7ec      	b.n	6f1e <gatt_ccc_changed+0x8>
}
    6f44:	bc30      	pop	{r4, r5}
    6f46:	4770      	bx	lr

00006f48 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6f48:	b410      	push	{r4}
    6f4a:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6f4c:	699c      	ldr	r4, [r3, #24]
    6f4e:	460a      	mov	r2, r1
    6f50:	6959      	ldr	r1, [r3, #20]
    6f52:	4623      	mov	r3, r4
}
    6f54:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6f56:	4718      	bx	r3

00006f58 <gatt_register>:
{
    6f58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    6f5a:	4a1f      	ldr	r2, [pc, #124]	; (6fd8 <gatt_register+0x80>)
    6f5c:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    6f5e:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    6f62:	b14b      	cbz	r3, 6f78 <gatt_register+0x20>
    6f64:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6f66:	2b00      	cmp	r3, #0
    6f68:	d033      	beq.n	6fd2 <gatt_register+0x7a>
	handle = last->attrs[last->attr_count - 1].handle;
    6f6a:	e913 0018 	ldmdb	r3, {r3, r4}
    6f6e:	2614      	movs	r6, #20
    6f70:	fb06 3304 	mla	r3, r6, r4, r3
    6f74:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6f78:	b2ad      	uxth	r5, r5
    6f7a:	2414      	movs	r4, #20
    6f7c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    6f80:	b109      	cbz	r1, 6f86 <gatt_register+0x2e>
    6f82:	42a9      	cmp	r1, r5
    6f84:	d108      	bne.n	6f98 <gatt_register+0x40>
	parent->next = child;
    6f86:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    6f88:	f100 0108 	add.w	r1, r0, #8
    6f8c:	6083      	str	r3, [r0, #8]
    6f8e:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    6f90:	b9d8      	cbnz	r0, 6fca <gatt_register+0x72>
	list->tail = node;
    6f92:	6051      	str	r1, [r2, #4]
	list->head = node;
    6f94:	6011      	str	r1, [r2, #0]
    6f96:	e016      	b.n	6fc6 <gatt_register+0x6e>
		if (!attrs->handle) {
    6f98:	8a0c      	ldrh	r4, [r1, #16]
    6f9a:	b92c      	cbnz	r4, 6fa8 <gatt_register+0x50>
			attrs->handle = ++handle;
    6f9c:	3301      	adds	r3, #1
    6f9e:	b29c      	uxth	r4, r3
    6fa0:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    6fa2:	3114      	adds	r1, #20
    6fa4:	4623      	mov	r3, r4
    6fa6:	e7eb      	b.n	6f80 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6fa8:	42a3      	cmp	r3, r4
    6faa:	d3fa      	bcc.n	6fa2 <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6fac:	4b0b      	ldr	r3, [pc, #44]	; (6fdc <gatt_register+0x84>)
    6fae:	9302      	str	r3, [sp, #8]
    6fb0:	e88d 0018 	stmia.w	sp, {r3, r4}
    6fb4:	4b0a      	ldr	r3, [pc, #40]	; (6fe0 <gatt_register+0x88>)
    6fb6:	480b      	ldr	r0, [pc, #44]	; (6fe4 <gatt_register+0x8c>)
    6fb8:	681c      	ldr	r4, [r3, #0]
    6fba:	4a0b      	ldr	r2, [pc, #44]	; (6fe8 <gatt_register+0x90>)
    6fbc:	4b0b      	ldr	r3, [pc, #44]	; (6fec <gatt_register+0x94>)
    6fbe:	490c      	ldr	r1, [pc, #48]	; (6ff0 <gatt_register+0x98>)
    6fc0:	47a0      	blx	r4
			return -EINVAL;
    6fc2:	f06f 0015 	mvn.w	r0, #21
}
    6fc6:	b004      	add	sp, #16
    6fc8:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    6fca:	6001      	str	r1, [r0, #0]
	list->tail = node;
    6fcc:	6051      	str	r1, [r2, #4]
	return 0;
    6fce:	4618      	mov	r0, r3
    6fd0:	e7f9      	b.n	6fc6 <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    6fd2:	681b      	ldr	r3, [r3, #0]
    6fd4:	deff      	udf	#255	; 0xff
    6fd6:	bf00      	nop
    6fd8:	20000584 	.word	0x20000584
    6fdc:	000161ba 	.word	0x000161ba
    6fe0:	20003a5c 	.word	0x20003a5c
    6fe4:	00018ca5 	.word	0x00018ca5
    6fe8:	000179e1 	.word	0x000179e1
    6fec:	00018ab0 	.word	0x00018ab0
    6ff0:	00017a29 	.word	0x00017a29

00006ff4 <gatt_notify>:
{
    6ff4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6ff8:	468a      	mov	sl, r1
    6ffa:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6ffc:	211b      	movs	r1, #27
    6ffe:	1c9a      	adds	r2, r3, #2
{
    7000:	4680      	mov	r8, r0
    7002:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    7004:	f7ff faf2 	bl	65ec <bt_att_create_pdu>
	if (!buf) {
    7008:	4604      	mov	r4, r0
    700a:	b970      	cbnz	r0, 702a <gatt_notify+0x36>
		BT_WARN("No buffer available to send notification");
    700c:	4b14      	ldr	r3, [pc, #80]	; (7060 <gatt_notify+0x6c>)
    700e:	9301      	str	r3, [sp, #4]
    7010:	9300      	str	r3, [sp, #0]
    7012:	4b14      	ldr	r3, [pc, #80]	; (7064 <gatt_notify+0x70>)
    7014:	4814      	ldr	r0, [pc, #80]	; (7068 <gatt_notify+0x74>)
    7016:	681c      	ldr	r4, [r3, #0]
    7018:	4a14      	ldr	r2, [pc, #80]	; (706c <gatt_notify+0x78>)
    701a:	4b15      	ldr	r3, [pc, #84]	; (7070 <gatt_notify+0x7c>)
    701c:	4915      	ldr	r1, [pc, #84]	; (7074 <gatt_notify+0x80>)
    701e:	47a0      	blx	r4
    7020:	f06f 000b 	mvn.w	r0, #11
}
    7024:	b002      	add	sp, #8
    7026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    702a:	f100 0708 	add.w	r7, r0, #8
    702e:	2102      	movs	r1, #2
    7030:	4638      	mov	r0, r7
    7032:	f00c ff0b 	bl	13e4c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    7036:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    7038:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    703a:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    703e:	4638      	mov	r0, r7
    7040:	f00c ff04 	bl	13e4c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    7044:	4632      	mov	r2, r6
    7046:	4649      	mov	r1, r9
    7048:	4628      	mov	r0, r5
    704a:	f7fa ff11 	bl	1e70 <memcpy>
    704e:	4640      	mov	r0, r8
    7050:	2300      	movs	r3, #0
    7052:	4622      	mov	r2, r4
    7054:	2104      	movs	r1, #4
    7056:	f7fe fcad 	bl	59b4 <bt_l2cap_send_cb>
	return 0;
    705a:	2000      	movs	r0, #0
    705c:	e7e2      	b.n	7024 <gatt_notify+0x30>
    705e:	bf00      	nop
    7060:	000161ba 	.word	0x000161ba
    7064:	20003a5c 	.word	0x20003a5c
    7068:	00018c6c 	.word	0x00018c6c
    706c:	00017a64 	.word	0x00017a64
    7070:	00018aec 	.word	0x00018aec
    7074:	00017a29 	.word	0x00017a29

00007078 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    7078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    707c:	694b      	ldr	r3, [r1, #20]
{
    707e:	b087      	sub	sp, #28
    7080:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    7082:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    7084:	6818      	ldr	r0, [r3, #0]
    7086:	2300      	movs	r3, #0
{
    7088:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    708a:	f88d 3014 	strb.w	r3, [sp, #20]
    708e:	a905      	add	r1, sp, #20
    7090:	f642 0303 	movw	r3, #10243	; 0x2803
    7094:	f8ad 3016 	strh.w	r3, [sp, #22]
    7098:	f7fb f868 	bl	216c <bt_uuid_cmp>
    709c:	b930      	cbnz	r0, 70ac <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    709e:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    70a0:	68db      	ldr	r3, [r3, #12]
    70a2:	791b      	ldrb	r3, [r3, #4]
    70a4:	069b      	lsls	r3, r3, #26
    70a6:	d546      	bpl.n	7136 <gatt_indicate+0xbe>
			return -EINVAL;
		}

		value_handle += 1;
    70a8:	3501      	adds	r5, #1
    70aa:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    70ac:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    70ae:	211d      	movs	r1, #29
    70b0:	3202      	adds	r2, #2
    70b2:	4648      	mov	r0, r9
    70b4:	f7ff fa9a 	bl	65ec <bt_att_create_pdu>
	if (!buf) {
    70b8:	4606      	mov	r6, r0
    70ba:	b978      	cbnz	r0, 70dc <gatt_indicate+0x64>
		BT_WARN("No buffer available to send indication");
    70bc:	4b1f      	ldr	r3, [pc, #124]	; (713c <gatt_indicate+0xc4>)
    70be:	9301      	str	r3, [sp, #4]
    70c0:	9300      	str	r3, [sp, #0]
    70c2:	4b1f      	ldr	r3, [pc, #124]	; (7140 <gatt_indicate+0xc8>)
    70c4:	4a1f      	ldr	r2, [pc, #124]	; (7144 <gatt_indicate+0xcc>)
    70c6:	681c      	ldr	r4, [r3, #0]
    70c8:	491f      	ldr	r1, [pc, #124]	; (7148 <gatt_indicate+0xd0>)
    70ca:	4b20      	ldr	r3, [pc, #128]	; (714c <gatt_indicate+0xd4>)
    70cc:	4820      	ldr	r0, [pc, #128]	; (7150 <gatt_indicate+0xd8>)
    70ce:	47a0      	blx	r4
		return -ENOMEM;
    70d0:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    70d4:	4620      	mov	r0, r4
    70d6:	b007      	add	sp, #28
    70d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    70dc:	f100 0708 	add.w	r7, r0, #8
    70e0:	2102      	movs	r1, #2
    70e2:	4638      	mov	r0, r7
    70e4:	f00c feb2 	bl	13e4c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    70e8:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    70ea:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    70ec:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    70f0:	4638      	mov	r0, r7
    70f2:	f00c feab 	bl	13e4c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    70f6:	8c22      	ldrh	r2, [r4, #32]
    70f8:	69e1      	ldr	r1, [r4, #28]
    70fa:	4640      	mov	r0, r8
    70fc:	f7fa feb8 	bl	1e70 <memcpy>
		req->func = func;
    7100:	4b14      	ldr	r3, [pc, #80]	; (7154 <gatt_indicate+0xdc>)
    7102:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    7104:	2300      	movs	r3, #0
		req->buf = buf;
    7106:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    7108:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    710a:	4621      	mov	r1, r4
    710c:	4648      	mov	r0, r9
    710e:	f7ff fed9 	bl	6ec4 <bt_att_req_send>
	if (err) {
    7112:	4604      	mov	r4, r0
    7114:	2800      	cmp	r0, #0
    7116:	d0dd      	beq.n	70d4 <gatt_indicate+0x5c>
		BT_ERR("Error sending ATT PDU: %d", err);
    7118:	4b08      	ldr	r3, [pc, #32]	; (713c <gatt_indicate+0xc4>)
    711a:	9302      	str	r3, [sp, #8]
    711c:	e88d 0018 	stmia.w	sp, {r3, r4}
    7120:	4b07      	ldr	r3, [pc, #28]	; (7140 <gatt_indicate+0xc8>)
    7122:	4a0d      	ldr	r2, [pc, #52]	; (7158 <gatt_indicate+0xe0>)
    7124:	681d      	ldr	r5, [r3, #0]
    7126:	4908      	ldr	r1, [pc, #32]	; (7148 <gatt_indicate+0xd0>)
    7128:	4b0c      	ldr	r3, [pc, #48]	; (715c <gatt_indicate+0xe4>)
    712a:	480d      	ldr	r0, [pc, #52]	; (7160 <gatt_indicate+0xe8>)
    712c:	47a8      	blx	r5
		net_buf_unref(buf);
    712e:	4630      	mov	r0, r6
    7130:	f00c fe5a 	bl	13de8 <net_buf_unref>
    7134:	e7ce      	b.n	70d4 <gatt_indicate+0x5c>
			return -EINVAL;
    7136:	f06f 0415 	mvn.w	r4, #21
    713a:	e7cb      	b.n	70d4 <gatt_indicate+0x5c>
    713c:	000161ba 	.word	0x000161ba
    7140:	20003a5c 	.word	0x20003a5c
    7144:	00017a64 	.word	0x00017a64
    7148:	00017a29 	.word	0x00017a29
    714c:	00018b02 	.word	0x00018b02
    7150:	00018c0b 	.word	0x00018c0b
    7154:	00006f49 	.word	0x00006f49
    7158:	000179e1 	.word	0x000179e1
    715c:	00018af8 	.word	0x00018af8
    7160:	00018c42 	.word	0x00018c42

00007164 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7164:	490d      	ldr	r1, [pc, #52]	; (719c <sc_indicate_rsp+0x38>)
    7166:	f3bf 8f5b 	dmb	ish
    716a:	f101 0350 	add.w	r3, r1, #80	; 0x50
    716e:	e853 2f00 	ldrex	r2, [r3]
    7172:	f022 0202 	bic.w	r2, r2, #2
    7176:	e843 2000 	strex	r0, r2, [r3]
    717a:	2800      	cmp	r0, #0
    717c:	d1f7      	bne.n	716e <sc_indicate_rsp+0xa>
    717e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7182:	f3bf 8f5b 	dmb	ish
    7186:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    7188:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    718c:	07db      	lsls	r3, r3, #31
    718e:	d504      	bpl.n	719a <sc_indicate_rsp+0x36>
    7190:	2200      	movs	r2, #0
    7192:	3128      	adds	r1, #40	; 0x28
    7194:	4802      	ldr	r0, [pc, #8]	; (71a0 <sc_indicate_rsp+0x3c>)
    7196:	f00e bbfd 	b.w	15994 <k_delayed_work_submit_to_queue>
    719a:	4770      	bx	lr
    719c:	2000058c 	.word	0x2000058c
    71a0:	20001988 	.word	0x20001988

000071a4 <read_appearance>:
{
    71a4:	b513      	push	{r0, r1, r4, lr}
    71a6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    71aa:	4610      	mov	r0, r2
	if (offset > value_len) {
    71ac:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    71ae:	f04f 0200 	mov.w	r2, #0
    71b2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    71b6:	d80d      	bhi.n	71d4 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    71b8:	f1c1 0402 	rsb	r4, r1, #2
    71bc:	429c      	cmp	r4, r3
    71be:	bfa8      	it	ge
    71c0:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    71c2:	f10d 0306 	add.w	r3, sp, #6
    71c6:	4622      	mov	r2, r4
    71c8:	4419      	add	r1, r3
    71ca:	f7fa fe51 	bl	1e70 <memcpy>
}
    71ce:	4620      	mov	r0, r4
    71d0:	b002      	add	sp, #8
    71d2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    71d4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    71d8:	e7f9      	b.n	71ce <read_appearance+0x2a>
	...

000071dc <sc_indicate.constprop.19>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    71dc:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    71de:	4b17      	ldr	r3, [pc, #92]	; (723c <sc_indicate.constprop.19+0x60>)
    71e0:	f3bf 8f5b 	dmb	ish
    71e4:	f103 0250 	add.w	r2, r3, #80	; 0x50
    71e8:	e852 4f00 	ldrex	r4, [r2]
    71ec:	f044 0e01 	orr.w	lr, r4, #1
    71f0:	e842 ec00 	strex	ip, lr, [r2]
    71f4:	f1bc 0f00 	cmp.w	ip, #0
    71f8:	d1f6      	bne.n	71e8 <sc_indicate.constprop.19+0xc>
    71fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    71fe:	07e2      	lsls	r2, r4, #31
    7200:	d402      	bmi.n	7208 <sc_indicate.constprop.19+0x2c>
		sc->start = start;
    7202:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    7204:	84d9      	strh	r1, [r3, #38]	; 0x26
    7206:	e00a      	b.n	721e <sc_indicate.constprop.19+0x42>
	if (new_start >= *start && new_end <= *end) {
    7208:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    720a:	4282      	cmp	r2, r0
    720c:	d803      	bhi.n	7216 <sc_indicate.constprop.19+0x3a>
    720e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    7210:	428a      	cmp	r2, r1
    7212:	d301      	bcc.n	7218 <sc_indicate.constprop.19+0x3c>
    7214:	bd10      	pop	{r4, pc}
		*start = new_start;
    7216:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    7218:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    721a:	428a      	cmp	r2, r1
    721c:	d3f2      	bcc.n	7204 <sc_indicate.constprop.19+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    721e:	f3bf 8f5b 	dmb	ish
    7222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7224:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    7228:	079b      	lsls	r3, r3, #30
    722a:	d406      	bmi.n	723a <sc_indicate.constprop.19+0x5e>
    722c:	220a      	movs	r2, #10
    722e:	4904      	ldr	r1, [pc, #16]	; (7240 <sc_indicate.constprop.19+0x64>)
    7230:	4804      	ldr	r0, [pc, #16]	; (7244 <sc_indicate.constprop.19+0x68>)
}
    7232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7236:	f00e bbad 	b.w	15994 <k_delayed_work_submit_to_queue>
    723a:	bd10      	pop	{r4, pc}
    723c:	2000058c 	.word	0x2000058c
    7240:	200005b4 	.word	0x200005b4
    7244:	20001988 	.word	0x20001988

00007248 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7248:	6882      	ldr	r2, [r0, #8]
    724a:	4b19      	ldr	r3, [pc, #100]	; (72b0 <connected_cb+0x68>)
    724c:	429a      	cmp	r2, r3
{
    724e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7252:	4607      	mov	r7, r0
    7254:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7256:	d125      	bne.n	72a4 <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7258:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    725a:	2600      	movs	r6, #0
    725c:	686b      	ldr	r3, [r5, #4]
    725e:	429e      	cmp	r6, r3
    7260:	d220      	bcs.n	72a4 <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7262:	6829      	ldr	r1, [r5, #0]
    7264:	ea4f 1806 	mov.w	r8, r6, lsl #4
    7268:	4441      	add	r1, r8
    726a:	4620      	mov	r0, r4
    726c:	f7fd fd44 	bl	4cf8 <bt_conn_addr_le_cmp>
    7270:	b9d8      	cbnz	r0, 72aa <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    7272:	682b      	ldr	r3, [r5, #0]
    7274:	4443      	add	r3, r8
    7276:	891b      	ldrh	r3, [r3, #8]
    7278:	b1bb      	cbz	r3, 72aa <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    727a:	4629      	mov	r1, r5
    727c:	4638      	mov	r0, r7
    727e:	f7ff fe4a 	bl	6f16 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    7282:	682c      	ldr	r4, [r5, #0]
    7284:	4b0b      	ldr	r3, [pc, #44]	; (72b4 <connected_cb+0x6c>)
    7286:	429c      	cmp	r4, r3
    7288:	d10c      	bne.n	72a4 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    728a:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    728c:	89a0      	ldrh	r0, [r4, #12]
    728e:	89e1      	ldrh	r1, [r4, #14]
    7290:	b900      	cbnz	r0, 7294 <connected_cb+0x4c>
    7292:	b139      	cbz	r1, 72a4 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    7294:	f7ff ffa2 	bl	71dc <sc_indicate.constprop.19>
	memset(cfg->data, 0, sizeof(cfg->data));
    7298:	2204      	movs	r2, #4
    729a:	2100      	movs	r1, #0
    729c:	f104 000c 	add.w	r0, r4, #12
    72a0:	f7fa fe12 	bl	1ec8 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    72a4:	2001      	movs	r0, #1
    72a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    72aa:	3601      	adds	r6, #1
    72ac:	e7d6      	b.n	725c <connected_cb+0x14>
    72ae:	bf00      	nop
    72b0:	0000745d 	.word	0x0000745d
    72b4:	200005e0 	.word	0x200005e0

000072b8 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    72b8:	6882      	ldr	r2, [r0, #8]
    72ba:	4b27      	ldr	r3, [pc, #156]	; (7358 <disconnected_cb+0xa0>)
    72bc:	429a      	cmp	r2, r3
{
    72be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    72c2:	4680      	mov	r8, r0
    72c4:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    72c6:	d127      	bne.n	7318 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    72c8:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    72ca:	8923      	ldrh	r3, [r4, #8]
    72cc:	b323      	cbz	r3, 7318 <disconnected_cb+0x60>
    72ce:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    72d0:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    72d4:	6863      	ldr	r3, [r4, #4]
    72d6:	429e      	cmp	r6, r3
    72d8:	d30b      	bcc.n	72f2 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    72da:	2202      	movs	r2, #2
    72dc:	2100      	movs	r1, #0
    72de:	f104 0008 	add.w	r0, r4, #8
    72e2:	f7fa fdf1 	bl	1ec8 <memset>
	if (ccc->cfg_changed) {
    72e6:	68e3      	ldr	r3, [r4, #12]
    72e8:	b1b3      	cbz	r3, 7318 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    72ea:	8921      	ldrh	r1, [r4, #8]
    72ec:	4640      	mov	r0, r8
    72ee:	4798      	blx	r3
    72f0:	e012      	b.n	7318 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    72f2:	6821      	ldr	r1, [r4, #0]
    72f4:	0135      	lsls	r5, r6, #4
    72f6:	4429      	add	r1, r5
    72f8:	890b      	ldrh	r3, [r1, #8]
    72fa:	b19b      	cbz	r3, 7324 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    72fc:	4648      	mov	r0, r9
    72fe:	f7fd fcfb 	bl	4cf8 <bt_conn_addr_le_cmp>
    7302:	b188      	cbz	r0, 7328 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    7304:	6820      	ldr	r0, [r4, #0]
    7306:	4428      	add	r0, r5
    7308:	f7fd fd5a 	bl	4dc0 <bt_conn_lookup_addr_le>
			if (tmp) {
    730c:	b150      	cbz	r0, 7324 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    730e:	7a43      	ldrb	r3, [r0, #9]
    7310:	2b03      	cmp	r3, #3
    7312:	d105      	bne.n	7320 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    7314:	f7fd fd8a 	bl	4e2c <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    7318:	2001      	movs	r0, #1
    731a:	b002      	add	sp, #8
    731c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    7320:	f7fd fd84 	bl	4e2c <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    7324:	3601      	adds	r6, #1
    7326:	e7d5      	b.n	72d4 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7328:	4650      	mov	r0, sl
    732a:	f7fd f90b 	bl	4544 <bt_addr_le_is_bonded>
    732e:	4607      	mov	r7, r0
    7330:	6820      	ldr	r0, [r4, #0]
    7332:	b95f      	cbnz	r7, 734c <disconnected_cb+0x94>
    7334:	4428      	add	r0, r5
    7336:	2207      	movs	r2, #7
    7338:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    733a:	9700      	str	r7, [sp, #0]
    733c:	f8cd 7003 	str.w	r7, [sp, #3]
    7340:	f7fa fd96 	bl	1e70 <memcpy>
				ccc->cfg[i].value = 0;
    7344:	6823      	ldr	r3, [r4, #0]
    7346:	441d      	add	r5, r3
    7348:	812f      	strh	r7, [r5, #8]
    734a:	e7eb      	b.n	7324 <disconnected_cb+0x6c>
    734c:	2207      	movs	r2, #7
    734e:	4651      	mov	r1, sl
    7350:	4428      	add	r0, r5
    7352:	f7fa fd8d 	bl	1e70 <memcpy>
    7356:	e7e5      	b.n	7324 <disconnected_cb+0x6c>
    7358:	0000745d 	.word	0x0000745d

0000735c <read_name>:
{
    735c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    7360:	4e0d      	ldr	r6, [pc, #52]	; (7398 <read_name+0x3c>)
{
    7362:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    7366:	4630      	mov	r0, r6
{
    7368:	4698      	mov	r8, r3
    736a:	4617      	mov	r7, r2
				 strlen(gap_name));
    736c:	f7fa fd56 	bl	1e1c <strlen>
	if (offset > value_len) {
    7370:	b283      	uxth	r3, r0
    7372:	42ab      	cmp	r3, r5
    7374:	d30d      	bcc.n	7392 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    7376:	1b5c      	subs	r4, r3, r5
    7378:	4544      	cmp	r4, r8
    737a:	4623      	mov	r3, r4
    737c:	bfa8      	it	ge
    737e:	4643      	movge	r3, r8
    7380:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    7382:	4622      	mov	r2, r4
    7384:	1971      	adds	r1, r6, r5
    7386:	4638      	mov	r0, r7
    7388:	f7fa fd72 	bl	1e70 <memcpy>
}
    738c:	4620      	mov	r0, r4
    738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7392:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    7396:	e7f9      	b.n	738c <read_name+0x30>
    7398:	00018cd6 	.word	0x00018cd6

0000739c <bt_gatt_attr_read_ccc>:
{
    739c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    73a0:	68ce      	ldr	r6, [r1, #12]
{
    73a2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    73a6:	4604      	mov	r4, r0
    73a8:	4690      	mov	r8, r2
    73aa:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    73ac:	2500      	movs	r5, #0
    73ae:	6873      	ldr	r3, [r6, #4]
    73b0:	429d      	cmp	r5, r3
    73b2:	d20e      	bcs.n	73d2 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    73b4:	6831      	ldr	r1, [r6, #0]
    73b6:	ea4f 1905 	mov.w	r9, r5, lsl #4
    73ba:	4449      	add	r1, r9
    73bc:	4620      	mov	r0, r4
    73be:	f7fd fc9b 	bl	4cf8 <bt_conn_addr_le_cmp>
    73c2:	b108      	cbz	r0, 73c8 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    73c4:	3501      	adds	r5, #1
    73c6:	e7f2      	b.n	73ae <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    73c8:	6832      	ldr	r2, [r6, #0]
    73ca:	444a      	add	r2, r9
    73cc:	8913      	ldrh	r3, [r2, #8]
    73ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    73d2:	6873      	ldr	r3, [r6, #4]
    73d4:	429d      	cmp	r5, r3
		value = 0x0000;
    73d6:	bf04      	itt	eq
    73d8:	2300      	moveq	r3, #0
    73da:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    73de:	2f02      	cmp	r7, #2
    73e0:	d80f      	bhi.n	7402 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    73e2:	f1c7 0402 	rsb	r4, r7, #2
    73e6:	4554      	cmp	r4, sl
    73e8:	bfa8      	it	ge
    73ea:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    73ec:	f10d 0306 	add.w	r3, sp, #6
    73f0:	4622      	mov	r2, r4
    73f2:	19d9      	adds	r1, r3, r7
    73f4:	4640      	mov	r0, r8
    73f6:	f7fa fd3b 	bl	1e70 <memcpy>
}
    73fa:	4620      	mov	r0, r4
    73fc:	b002      	add	sp, #8
    73fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7402:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    7406:	e7f8      	b.n	73fa <bt_gatt_attr_read_ccc+0x5e>

00007408 <bt_gatt_attr_read_service>:
{
    7408:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    740a:	68c9      	ldr	r1, [r1, #12]
{
    740c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    7410:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    7412:	780a      	ldrb	r2, [r1, #0]
    7414:	b992      	cbnz	r2, 743c <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    7416:	884a      	ldrh	r2, [r1, #2]
    7418:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    741c:	2d02      	cmp	r5, #2
    741e:	d819      	bhi.n	7454 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    7420:	f1c5 0402 	rsb	r4, r5, #2
    7424:	429c      	cmp	r4, r3
    7426:	bfa8      	it	ge
    7428:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    742a:	f10d 0306 	add.w	r3, sp, #6
    742e:	4622      	mov	r2, r4
    7430:	1959      	adds	r1, r3, r5
    7432:	f7fa fd1d 	bl	1e70 <memcpy>
}
    7436:	4620      	mov	r0, r4
    7438:	b003      	add	sp, #12
    743a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    743c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    743e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    7442:	d807      	bhi.n	7454 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    7444:	f1c5 0410 	rsb	r4, r5, #16
    7448:	429c      	cmp	r4, r3
    744a:	bfa8      	it	ge
    744c:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    744e:	4622      	mov	r2, r4
    7450:	4429      	add	r1, r5
    7452:	e7ee      	b.n	7432 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7454:	f06f 0406 	mvn.w	r4, #6
    7458:	e7ed      	b.n	7436 <bt_gatt_attr_read_service+0x2e>
	...

0000745c <bt_gatt_attr_write_ccc>:
{
    745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7460:	b087      	sub	sp, #28
    7462:	4688      	mov	r8, r1
    7464:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7468:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    746c:	2902      	cmp	r1, #2
{
    746e:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    7470:	d860      	bhi.n	7534 <bt_gatt_attr_write_ccc+0xd8>
	if (offset + len > sizeof(u16_t)) {
    7472:	4419      	add	r1, r3
    7474:	2902      	cmp	r1, #2
    7476:	461f      	mov	r7, r3
    7478:	dc5f      	bgt.n	753a <bt_gatt_attr_write_ccc+0xde>
	return ((u16_t)src[1] << 8) | src[0];
    747a:	7853      	ldrb	r3, [r2, #1]
    747c:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    747e:	2400      	movs	r4, #0
    7480:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    7484:	686b      	ldr	r3, [r5, #4]
    7486:	429c      	cmp	r4, r3
    7488:	d206      	bcs.n	7498 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    748a:	6829      	ldr	r1, [r5, #0]
    748c:	4648      	mov	r0, r9
    748e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    7492:	f7fd fc31 	bl	4cf8 <bt_conn_addr_le_cmp>
    7496:	b9b8      	cbnz	r0, 74c8 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    7498:	686b      	ldr	r3, [r5, #4]
    749a:	429c      	cmp	r4, r3
    749c:	d130      	bne.n	7500 <bt_gatt_attr_write_ccc+0xa4>
		if (!value) {
    749e:	b35e      	cbz	r6, 74f8 <bt_gatt_attr_write_ccc+0x9c>
    74a0:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    74a2:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    74a4:	686b      	ldr	r3, [r5, #4]
    74a6:	429c      	cmp	r4, r3
    74a8:	d217      	bcs.n	74da <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    74aa:	6828      	ldr	r0, [r5, #0]
    74ac:	f8cd a008 	str.w	sl, [sp, #8]
    74b0:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    74b4:	2207      	movs	r2, #7
    74b6:	a902      	add	r1, sp, #8
    74b8:	4458      	add	r0, fp
    74ba:	f8cd a00b 	str.w	sl, [sp, #11]
    74be:	f7fa fcc2 	bl	1e46 <memcmp>
    74c2:	b118      	cbz	r0, 74cc <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    74c4:	3401      	adds	r4, #1
    74c6:	e7ed      	b.n	74a4 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    74c8:	3401      	adds	r4, #1
    74ca:	e7db      	b.n	7484 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    74cc:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    74ce:	2207      	movs	r2, #7
    74d0:	f109 0144 	add.w	r1, r9, #68	; 0x44
    74d4:	4458      	add	r0, fp
    74d6:	f7fa fccb 	bl	1e70 <memcpy>
		if (i == ccc->cfg_len) {
    74da:	686b      	ldr	r3, [r5, #4]
    74dc:	429c      	cmp	r4, r3
    74de:	d10f      	bne.n	7500 <bt_gatt_attr_write_ccc+0xa4>
			BT_WARN("No space to store CCC cfg");
    74e0:	4b17      	ldr	r3, [pc, #92]	; (7540 <bt_gatt_attr_write_ccc+0xe4>)
    74e2:	9301      	str	r3, [sp, #4]
    74e4:	9300      	str	r3, [sp, #0]
    74e6:	4b17      	ldr	r3, [pc, #92]	; (7544 <bt_gatt_attr_write_ccc+0xe8>)
    74e8:	4a17      	ldr	r2, [pc, #92]	; (7548 <bt_gatt_attr_write_ccc+0xec>)
    74ea:	681c      	ldr	r4, [r3, #0]
    74ec:	4917      	ldr	r1, [pc, #92]	; (754c <bt_gatt_attr_write_ccc+0xf0>)
    74ee:	4b18      	ldr	r3, [pc, #96]	; (7550 <bt_gatt_attr_write_ccc+0xf4>)
    74f0:	4818      	ldr	r0, [pc, #96]	; (7554 <bt_gatt_attr_write_ccc+0xf8>)
    74f2:	47a0      	blx	r4
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    74f4:	f06f 0710 	mvn.w	r7, #16
}
    74f8:	4638      	mov	r0, r7
    74fa:	b007      	add	sp, #28
    74fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    7500:	682b      	ldr	r3, [r5, #0]
    7502:	0124      	lsls	r4, r4, #4
    7504:	4423      	add	r3, r4
    7506:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    7508:	892b      	ldrh	r3, [r5, #8]
    750a:	42b3      	cmp	r3, r6
    750c:	d003      	beq.n	7516 <bt_gatt_attr_write_ccc+0xba>
		gatt_ccc_changed(attr, ccc);
    750e:	4629      	mov	r1, r5
    7510:	4640      	mov	r0, r8
    7512:	f7ff fd00 	bl	6f16 <gatt_ccc_changed>
	if (!value) {
    7516:	2e00      	cmp	r6, #0
    7518:	d1ee      	bne.n	74f8 <bt_gatt_attr_write_ccc+0x9c>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    751a:	6828      	ldr	r0, [r5, #0]
    751c:	9604      	str	r6, [sp, #16]
    751e:	4420      	add	r0, r4
    7520:	2207      	movs	r2, #7
    7522:	a904      	add	r1, sp, #16
    7524:	f8cd 6013 	str.w	r6, [sp, #19]
    7528:	f7fa fca2 	bl	1e70 <memcpy>
		ccc->cfg[i].value = 0;
    752c:	682b      	ldr	r3, [r5, #0]
    752e:	441c      	add	r4, r3
    7530:	8126      	strh	r6, [r4, #8]
    7532:	e7e1      	b.n	74f8 <bt_gatt_attr_write_ccc+0x9c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7534:	f06f 0706 	mvn.w	r7, #6
    7538:	e7de      	b.n	74f8 <bt_gatt_attr_write_ccc+0x9c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    753a:	f06f 070c 	mvn.w	r7, #12
    753e:	e7db      	b.n	74f8 <bt_gatt_attr_write_ccc+0x9c>
    7540:	000161ba 	.word	0x000161ba
    7544:	20003a5c 	.word	0x20003a5c
    7548:	00017a64 	.word	0x00017a64
    754c:	00017a29 	.word	0x00017a29
    7550:	00018ad5 	.word	0x00018ad5
    7554:	00018b46 	.word	0x00018b46

00007558 <notify_cb>:
{
    7558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    755c:	f642 1302 	movw	r3, #10498	; 0x2902
{
    7560:	4605      	mov	r5, r0
    7562:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    7564:	2400      	movs	r4, #0
    7566:	4669      	mov	r1, sp
    7568:	6800      	ldr	r0, [r0, #0]
    756a:	f88d 4000 	strb.w	r4, [sp]
    756e:	f8ad 3002 	strh.w	r3, [sp, #2]
    7572:	f7fa fdfb 	bl	216c <bt_uuid_cmp>
    7576:	b178      	cbz	r0, 7598 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    7578:	f642 0303 	movw	r3, #10243	; 0x2803
    757c:	6828      	ldr	r0, [r5, #0]
    757e:	f88d 4004 	strb.w	r4, [sp, #4]
    7582:	a901      	add	r1, sp, #4
    7584:	f8ad 3006 	strh.w	r3, [sp, #6]
    7588:	f7fa fdf0 	bl	216c <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    758c:	1b00      	subs	r0, r0, r4
    758e:	bf18      	it	ne
    7590:	2001      	movne	r0, #1
}
    7592:	b003      	add	sp, #12
    7594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7598:	68aa      	ldr	r2, [r5, #8]
    759a:	4b2b      	ldr	r3, [pc, #172]	; (7648 <notify_cb+0xf0>)
    759c:	429a      	cmp	r2, r3
    759e:	d001      	beq.n	75a4 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    75a0:	2001      	movs	r0, #1
    75a2:	e7f6      	b.n	7592 <notify_cb+0x3a>
	ccc = attr->user_data;
    75a4:	68ef      	ldr	r7, [r5, #12]
    75a6:	4d29      	ldr	r5, [pc, #164]	; (764c <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    75a8:	4604      	mov	r4, r0
    75aa:	46a8      	mov	r8, r5
    75ac:	4681      	mov	r9, r0
    75ae:	687b      	ldr	r3, [r7, #4]
    75b0:	429c      	cmp	r4, r3
    75b2:	d2f5      	bcs.n	75a0 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    75b4:	6838      	ldr	r0, [r7, #0]
    75b6:	88b3      	ldrh	r3, [r6, #4]
    75b8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    75bc:	8902      	ldrh	r2, [r0, #8]
    75be:	429a      	cmp	r2, r3
    75c0:	d114      	bne.n	75ec <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    75c2:	f7fd fbfd 	bl	4dc0 <bt_conn_lookup_addr_le>
		if (!conn) {
    75c6:	4683      	mov	fp, r0
    75c8:	b9f8      	cbnz	r0, 760a <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    75ca:	683b      	ldr	r3, [r7, #0]
    75cc:	4543      	cmp	r3, r8
    75ce:	d10d      	bne.n	75ec <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    75d0:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    75d2:	a801      	add	r0, sp, #4
    75d4:	8c1a      	ldrh	r2, [r3, #32]
    75d6:	69d9      	ldr	r1, [r3, #28]
    75d8:	f7fa fc4a 	bl	1e70 <memcpy>
	if (!stored->start && !stored->end) {
    75dc:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    75de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75e2:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    75e4:	b928      	cbnz	r0, 75f2 <notify_cb+0x9a>
    75e6:	b942      	cbnz	r2, 75fa <notify_cb+0xa2>
		*stored = data;
    75e8:	9801      	ldr	r0, [sp, #4]
    75ea:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    75ec:	3401      	adds	r4, #1
    75ee:	3510      	adds	r5, #16
    75f0:	e7dd      	b.n	75ae <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    75f2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    75f6:	4281      	cmp	r1, r0
    75f8:	d305      	bcc.n	7606 <notify_cb+0xae>
    75fa:	429a      	cmp	r2, r3
    75fc:	d2f6      	bcs.n	75ec <notify_cb+0x94>
	if (*end < new_end) {
    75fe:	429a      	cmp	r2, r3
    7600:	d2f4      	bcs.n	75ec <notify_cb+0x94>
		*end = new_end;
    7602:	81eb      	strh	r3, [r5, #14]
    7604:	e7f2      	b.n	75ec <notify_cb+0x94>
		*start = new_start;
    7606:	81a9      	strh	r1, [r5, #12]
    7608:	e7f9      	b.n	75fe <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    760a:	7a43      	ldrb	r3, [r0, #9]
    760c:	2b03      	cmp	r3, #3
    760e:	d002      	beq.n	7616 <notify_cb+0xbe>
			bt_conn_unref(conn);
    7610:	f7fd fc0c 	bl	4e2c <bt_conn_unref>
    7614:	e7ea      	b.n	75ec <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    7616:	88b3      	ldrh	r3, [r6, #4]
    7618:	2b02      	cmp	r3, #2
    761a:	d10c      	bne.n	7636 <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    761c:	6971      	ldr	r1, [r6, #20]
    761e:	f7ff fd2b 	bl	7078 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    7622:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    7624:	4658      	mov	r0, fp
    7626:	f7fd fc01 	bl	4e2c <bt_conn_unref>
		if (err < 0) {
    762a:	f1ba 0f00 	cmp.w	sl, #0
    762e:	db09      	blt.n	7644 <notify_cb+0xec>
		data->err = 0;
    7630:	f8c6 9000 	str.w	r9, [r6]
    7634:	e7da      	b.n	75ec <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    7636:	68b1      	ldr	r1, [r6, #8]
    7638:	8a33      	ldrh	r3, [r6, #16]
    763a:	68f2      	ldr	r2, [r6, #12]
    763c:	8a09      	ldrh	r1, [r1, #16]
    763e:	f7ff fcd9 	bl	6ff4 <gatt_notify>
    7642:	e7ee      	b.n	7622 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    7644:	2000      	movs	r0, #0
    7646:	e7a4      	b.n	7592 <notify_cb+0x3a>
    7648:	0000745d 	.word	0x0000745d
    764c:	200005e0 	.word	0x200005e0

00007650 <bt_gatt_init>:
{
    7650:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    7652:	4806      	ldr	r0, [pc, #24]	; (766c <bt_gatt_init+0x1c>)
    7654:	f7ff fc80 	bl	6f58 <gatt_register>
	gatt_register(&gatt_svc);
    7658:	4805      	ldr	r0, [pc, #20]	; (7670 <bt_gatt_init+0x20>)
    765a:	f7ff fc7d 	bl	6f58 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    765e:	4905      	ldr	r1, [pc, #20]	; (7674 <bt_gatt_init+0x24>)
    7660:	4805      	ldr	r0, [pc, #20]	; (7678 <bt_gatt_init+0x28>)
}
    7662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    7666:	f00e b921 	b.w	158ac <k_delayed_work_init>
    766a:	bf00      	nop
    766c:	20003c9c 	.word	0x20003c9c
    7670:	20003cf8 	.word	0x20003cf8
    7674:	00007825 	.word	0x00007825
    7678:	200005b4 	.word	0x200005b4

0000767c <bt_gatt_foreach_attr>:
{
    767c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7680:	4699      	mov	r9, r3
    7682:	4b12      	ldr	r3, [pc, #72]	; (76cc <bt_gatt_foreach_attr+0x50>)
    7684:	681c      	ldr	r4, [r3, #0]
    7686:	4606      	mov	r6, r0
    7688:	460f      	mov	r7, r1
    768a:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    768c:	b1dc      	cbz	r4, 76c6 <bt_gatt_foreach_attr+0x4a>
    768e:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7690:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7694:	b1bc      	cbz	r4, 76c6 <bt_gatt_foreach_attr+0x4a>
    7696:	2500      	movs	r5, #0
    7698:	e006      	b.n	76a8 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    769a:	6820      	ldr	r0, [r4, #0]
    769c:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    76a0:	8a03      	ldrh	r3, [r0, #16]
    76a2:	42b3      	cmp	r3, r6
    76a4:	d207      	bcs.n	76b6 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    76a6:	3501      	adds	r5, #1
    76a8:	6863      	ldr	r3, [r4, #4]
    76aa:	42ab      	cmp	r3, r5
    76ac:	d8f5      	bhi.n	769a <bt_gatt_foreach_attr+0x1e>
	return node->next;
    76ae:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    76b0:	b14c      	cbz	r4, 76c6 <bt_gatt_foreach_attr+0x4a>
    76b2:	3c08      	subs	r4, #8
    76b4:	e7ee      	b.n	7694 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    76b6:	42bb      	cmp	r3, r7
    76b8:	d8f5      	bhi.n	76a6 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    76ba:	4649      	mov	r1, r9
    76bc:	47c0      	blx	r8
    76be:	2800      	cmp	r0, #0
    76c0:	d1f1      	bne.n	76a6 <bt_gatt_foreach_attr+0x2a>
    76c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76ca:	bf00      	nop
    76cc:	20000584 	.word	0x20000584

000076d0 <bt_gatt_attr_next>:
{
    76d0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    76d2:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    76d4:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    76d6:	3101      	adds	r1, #1
    76d8:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    76da:	2200      	movs	r2, #0
    76dc:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    76e0:	4608      	mov	r0, r1
    76e2:	4a03      	ldr	r2, [pc, #12]	; (76f0 <bt_gatt_attr_next+0x20>)
    76e4:	f7ff ffca 	bl	767c <bt_gatt_foreach_attr>
}
    76e8:	9801      	ldr	r0, [sp, #4]
    76ea:	b003      	add	sp, #12
    76ec:	f85d fb04 	ldr.w	pc, [sp], #4
    76f0:	00006f11 	.word	0x00006f11

000076f4 <bt_gatt_attr_read_chrc>:
{
    76f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    76f8:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    76fc:	b08b      	sub	sp, #44	; 0x2c
    76fe:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    7700:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    7702:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    7706:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    770a:	f88d 3014 	strb.w	r3, [sp, #20]
{
    770e:	4688      	mov	r8, r1
    7710:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    7712:	f7ff ffdd 	bl	76d0 <bt_gatt_attr_next>
	if (!next) {
    7716:	4605      	mov	r5, r0
    7718:	bb50      	cbnz	r0, 7770 <bt_gatt_attr_read_chrc+0x7c>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    771a:	4b1d      	ldr	r3, [pc, #116]	; (7790 <bt_gatt_attr_read_chrc+0x9c>)
    771c:	9302      	str	r3, [sp, #8]
    771e:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    7722:	9300      	str	r3, [sp, #0]
    7724:	4b1b      	ldr	r3, [pc, #108]	; (7794 <bt_gatt_attr_read_chrc+0xa0>)
    7726:	9201      	str	r2, [sp, #4]
    7728:	f8d3 8000 	ldr.w	r8, [r3]
    772c:	4a1a      	ldr	r2, [pc, #104]	; (7798 <bt_gatt_attr_read_chrc+0xa4>)
    772e:	4b1b      	ldr	r3, [pc, #108]	; (779c <bt_gatt_attr_read_chrc+0xa8>)
    7730:	491b      	ldr	r1, [pc, #108]	; (77a0 <bt_gatt_attr_read_chrc+0xac>)
    7732:	481c      	ldr	r0, [pc, #112]	; (77a4 <bt_gatt_attr_read_chrc+0xb0>)
    7734:	47c0      	blx	r8
		pdu.value_handle = 0x0000;
    7736:	f88d 5015 	strb.w	r5, [sp, #21]
    773a:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    773e:	f8d9 1000 	ldr.w	r1, [r9]
    7742:	780b      	ldrb	r3, [r1, #0]
    7744:	b9c3      	cbnz	r3, 7778 <bt_gatt_attr_read_chrc+0x84>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    7746:	884b      	ldrh	r3, [r1, #2]
    7748:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    774c:	2305      	movs	r3, #5
	if (offset > value_len) {
    774e:	42b3      	cmp	r3, r6
    7750:	d31a      	bcc.n	7788 <bt_gatt_attr_read_chrc+0x94>
	len = min(buf_len, value_len - offset);
    7752:	1b9b      	subs	r3, r3, r6
    7754:	42a3      	cmp	r3, r4
    7756:	bfa8      	it	ge
    7758:	4623      	movge	r3, r4
    775a:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    775c:	ab05      	add	r3, sp, #20
    775e:	4622      	mov	r2, r4
    7760:	1999      	adds	r1, r3, r6
    7762:	4638      	mov	r0, r7
    7764:	f7fa fb84 	bl	1e70 <memcpy>
}
    7768:	4620      	mov	r0, r4
    776a:	b00b      	add	sp, #44	; 0x2c
    776c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    7770:	8a03      	ldrh	r3, [r0, #16]
    7772:	f8ad 3015 	strh.w	r3, [sp, #21]
    7776:	e7e2      	b.n	773e <bt_gatt_attr_read_chrc+0x4a>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    7778:	2210      	movs	r2, #16
    777a:	3101      	adds	r1, #1
    777c:	f10d 0017 	add.w	r0, sp, #23
    7780:	f7fa fb76 	bl	1e70 <memcpy>
		value_len += 16;
    7784:	2313      	movs	r3, #19
    7786:	e7e2      	b.n	774e <bt_gatt_attr_read_chrc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7788:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    778c:	e7ec      	b.n	7768 <bt_gatt_attr_read_chrc+0x74>
    778e:	bf00      	nop
    7790:	000161ba 	.word	0x000161ba
    7794:	20003a5c 	.word	0x20003a5c
    7798:	00017a64 	.word	0x00017a64
    779c:	00018abe 	.word	0x00018abe
    77a0:	00017a29 	.word	0x00017a29
    77a4:	00018b10 	.word	0x00018b10

000077a8 <bt_gatt_indicate>:
{
    77a8:	b530      	push	{r4, r5, lr}
    77aa:	b087      	sub	sp, #28
	__ASSERT(params, "invalid parameters\n");
    77ac:	b951      	cbnz	r1, 77c4 <bt_gatt_indicate+0x1c>
    77ae:	f240 3357 	movw	r3, #855	; 0x357
    77b2:	4a16      	ldr	r2, [pc, #88]	; (780c <bt_gatt_indicate+0x64>)
    77b4:	4916      	ldr	r1, [pc, #88]	; (7810 <bt_gatt_indicate+0x68>)
    77b6:	4817      	ldr	r0, [pc, #92]	; (7814 <bt_gatt_indicate+0x6c>)
    77b8:	f7f9 fbe8 	bl	f8c <printk>
    77bc:	4816      	ldr	r0, [pc, #88]	; (7818 <bt_gatt_indicate+0x70>)
    77be:	f7f9 fbe5 	bl	f8c <printk>
    77c2:	e7fe      	b.n	77c2 <bt_gatt_indicate+0x1a>
	__ASSERT(params->attr && params->attr->handle, "invalid parameters\n");
    77c4:	694a      	ldr	r2, [r1, #20]
    77c6:	b10a      	cbz	r2, 77cc <bt_gatt_indicate+0x24>
    77c8:	8a14      	ldrh	r4, [r2, #16]
    77ca:	b954      	cbnz	r4, 77e2 <bt_gatt_indicate+0x3a>
    77cc:	f44f 7356 	mov.w	r3, #856	; 0x358
    77d0:	4a0e      	ldr	r2, [pc, #56]	; (780c <bt_gatt_indicate+0x64>)
    77d2:	4912      	ldr	r1, [pc, #72]	; (781c <bt_gatt_indicate+0x74>)
    77d4:	480f      	ldr	r0, [pc, #60]	; (7814 <bt_gatt_indicate+0x6c>)
    77d6:	f7f9 fbd9 	bl	f8c <printk>
    77da:	480f      	ldr	r0, [pc, #60]	; (7818 <bt_gatt_indicate+0x70>)
    77dc:	f7f9 fbd6 	bl	f8c <printk>
    77e0:	e7fe      	b.n	77e0 <bt_gatt_indicate+0x38>
	if (conn) {
    77e2:	b118      	cbz	r0, 77ec <bt_gatt_indicate+0x44>
		return gatt_indicate(conn, params);
    77e4:	f7ff fc48 	bl	7078 <gatt_indicate>
}
    77e8:	b007      	add	sp, #28
    77ea:	bd30      	pop	{r4, r5, pc}
	nfy.err = -ENOTCONN;
    77ec:	f06f 0238 	mvn.w	r2, #56	; 0x38
    77f0:	9200      	str	r2, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    77f2:	2202      	movs	r2, #2
    77f4:	f8ad 2004 	strh.w	r2, [sp, #4]
	nfy.params = params;
    77f8:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    77fa:	4620      	mov	r0, r4
    77fc:	466b      	mov	r3, sp
    77fe:	4a08      	ldr	r2, [pc, #32]	; (7820 <bt_gatt_indicate+0x78>)
    7800:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7804:	f7ff ff3a 	bl	767c <bt_gatt_foreach_attr>
	return nfy.err;
    7808:	9800      	ldr	r0, [sp, #0]
    780a:	e7ed      	b.n	77e8 <bt_gatt_indicate+0x40>
    780c:	00018b9c 	.word	0x00018b9c
    7810:	00018b70 	.word	0x00018b70
    7814:	0001619c 	.word	0x0001619c
    7818:	00018bdc 	.word	0x00018bdc
    781c:	00018b77 	.word	0x00018b77
    7820:	00007559 	.word	0x00007559

00007824 <sc_process>:
{
    7824:	b513      	push	{r0, r1, r4, lr}
    7826:	4603      	mov	r3, r0
    7828:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    782c:	f1a0 0128 	sub.w	r1, r0, #40	; 0x28
    7830:	f100 0428 	add.w	r4, r0, #40	; 0x28
    7834:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7836:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    783a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    783e:	b148      	cbz	r0, 7854 <sc_process+0x30>
    7840:	23af      	movs	r3, #175	; 0xaf
    7842:	4a1f      	ldr	r2, [pc, #124]	; (78c0 <sc_process+0x9c>)
    7844:	491f      	ldr	r1, [pc, #124]	; (78c4 <sc_process+0xa0>)
    7846:	4820      	ldr	r0, [pc, #128]	; (78c8 <sc_process+0xa4>)
    7848:	f7f9 fba0 	bl	f8c <printk>
    784c:	481f      	ldr	r0, [pc, #124]	; (78cc <sc_process+0xa8>)
    784e:	f7f9 fb9d 	bl	f8c <printk>
    7852:	e7fe      	b.n	7852 <sc_process+0x2e>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    7854:	f833 2c04 	ldrh.w	r2, [r3, #-4]
    7858:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    785c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    7860:	f8ad 2006 	strh.w	r2, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7864:	f3bf 8f5b 	dmb	ish
    7868:	e854 2f00 	ldrex	r2, [r4]
    786c:	f022 0201 	bic.w	r2, r2, #1
    7870:	e844 2e00 	strex	lr, r2, [r4]
    7874:	f1be 0f00 	cmp.w	lr, #0
    7878:	d1f6      	bne.n	7868 <sc_process+0x44>
    787a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &gatt_attrs[2];
    787e:	4a14      	ldr	r2, [pc, #80]	; (78d0 <sc_process+0xac>)
    7880:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    7884:	4a13      	ldr	r2, [pc, #76]	; (78d4 <sc_process+0xb0>)
    7886:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    788a:	aa01      	add	r2, sp, #4
    788c:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    7890:	2204      	movs	r2, #4
	sc->start = 0;
    7892:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    7896:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    789a:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    789e:	f7ff ff83 	bl	77a8 <bt_gatt_indicate>
    78a2:	b958      	cbnz	r0, 78bc <sc_process+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    78a4:	f3bf 8f5b 	dmb	ish
    78a8:	e854 3f00 	ldrex	r3, [r4]
    78ac:	f043 0302 	orr.w	r3, r3, #2
    78b0:	e844 3200 	strex	r2, r3, [r4]
    78b4:	2a00      	cmp	r2, #0
    78b6:	d1f7      	bne.n	78a8 <sc_process+0x84>
    78b8:	f3bf 8f5b 	dmb	ish
}
    78bc:	b002      	add	sp, #8
    78be:	bd10      	pop	{r4, pc}
    78c0:	00018b9c 	.word	0x00018b9c
    78c4:	00018cdd 	.word	0x00018cdd
    78c8:	0001619c 	.word	0x0001619c
    78cc:	00018d0e 	.word	0x00018d0e
    78d0:	20003cd0 	.word	0x20003cd0
    78d4:	00007165 	.word	0x00007165

000078d8 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    78d8:	4603      	mov	r3, r0
    78da:	4a03      	ldr	r2, [pc, #12]	; (78e8 <bt_gatt_connected+0x10>)
    78dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    78e0:	2001      	movs	r0, #1
    78e2:	f7ff becb 	b.w	767c <bt_gatt_foreach_attr>
    78e6:	bf00      	nop
    78e8:	00007249 	.word	0x00007249

000078ec <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    78ec:	4603      	mov	r3, r0
    78ee:	4a03      	ldr	r2, [pc, #12]	; (78fc <bt_gatt_disconnected+0x10>)
    78f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    78f4:	2001      	movs	r0, #1
    78f6:	f7ff bec1 	b.w	767c <bt_gatt_foreach_attr>
    78fa:	bf00      	nop
    78fc:	000072b9 	.word	0x000072b9

00007900 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;
	static struct bt_l2cap_chan_ops ops = {
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    7904:	4e14      	ldr	r6, [pc, #80]	; (7958 <bt_smp_accept+0x58>)
    7906:	4c15      	ldr	r4, [pc, #84]	; (795c <bt_smp_accept+0x5c>)
    7908:	f8d6 8000 	ldr.w	r8, [r6]
{
    790c:	b086      	sub	sp, #24
    790e:	4605      	mov	r5, r0
    7910:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    7912:	f00d fc47 	bl	151a4 <_impl_k_current_get>
	BT_DBG("conn %p handle %u", conn, conn->handle);
    7916:	882b      	ldrh	r3, [r5, #0]
    7918:	9303      	str	r3, [sp, #12]
    791a:	9001      	str	r0, [sp, #4]
    791c:	4b10      	ldr	r3, [pc, #64]	; (7960 <bt_smp_accept+0x60>)
    791e:	4811      	ldr	r0, [pc, #68]	; (7964 <bt_smp_accept+0x64>)
    7920:	9404      	str	r4, [sp, #16]
    7922:	9502      	str	r5, [sp, #8]
    7924:	9400      	str	r4, [sp, #0]
    7926:	4a10      	ldr	r2, [pc, #64]	; (7968 <bt_smp_accept+0x68>)
    7928:	4910      	ldr	r1, [pc, #64]	; (796c <bt_smp_accept+0x6c>)
    792a:	47c0      	blx	r8

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    792c:	4b10      	ldr	r3, [pc, #64]	; (7970 <bt_smp_accept+0x70>)
    792e:	6818      	ldr	r0, [r3, #0]
    7930:	b928      	cbnz	r0, 793e <bt_smp_accept+0x3e>
			continue;
		}

		smp->chan.ops = &ops;
    7932:	4a10      	ldr	r2, [pc, #64]	; (7974 <bt_smp_accept+0x74>)
    7934:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    7936:	603b      	str	r3, [r7, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    7938:	b006      	add	sp, #24
    793a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    793e:	9402      	str	r4, [sp, #8]
    7940:	e88d 0030 	stmia.w	sp, {r4, r5}
    7944:	480c      	ldr	r0, [pc, #48]	; (7978 <bt_smp_accept+0x78>)
    7946:	6834      	ldr	r4, [r6, #0]
    7948:	4b05      	ldr	r3, [pc, #20]	; (7960 <bt_smp_accept+0x60>)
    794a:	4a0c      	ldr	r2, [pc, #48]	; (797c <bt_smp_accept+0x7c>)
    794c:	4907      	ldr	r1, [pc, #28]	; (796c <bt_smp_accept+0x6c>)
    794e:	47a0      	blx	r4
	return -ENOMEM;
    7950:	f06f 000b 	mvn.w	r0, #11
    7954:	e7f0      	b.n	7938 <bt_smp_accept+0x38>
    7956:	bf00      	nop
    7958:	20003a5c 	.word	0x20003a5c
    795c:	000161ba 	.word	0x000161ba
    7960:	00018d27 	.word	0x00018d27
    7964:	00018d35 	.word	0x00018d35
    7968:	0001697a 	.word	0x0001697a
    796c:	00017a29 	.word	0x00017a29
    7970:	200005f0 	.word	0x200005f0
    7974:	20003d10 	.word	0x20003d10
    7978:	00018d5c 	.word	0x00018d5c
    797c:	000179e1 	.word	0x000179e1

00007980 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    7980:	2100      	movs	r1, #0
{
    7982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    7986:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    7988:	4608      	mov	r0, r1
    798a:	f7fe f810 	bl	59ae <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    798e:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    7992:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7994:	2101      	movs	r1, #1
    7996:	4630      	mov	r0, r6
    7998:	f00c fa58 	bl	13e4c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    799c:	2505      	movs	r5, #5
    799e:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    79a0:	2101      	movs	r1, #1
    79a2:	4630      	mov	r0, r6
    79a4:	f00c fa52 	bl	13e4c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    79a8:	7005      	strb	r5, [r0, #0]
    79aa:	4622      	mov	r2, r4
    79ac:	4638      	mov	r0, r7
    79ae:	2300      	movs	r3, #0
    79b0:	2106      	movs	r1, #6
}
    79b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    79b6:	f7fd bffd 	b.w	59b4 <bt_l2cap_send_cb>

000079ba <bt_smp_sign_verify>:
    79ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
    79be:	4770      	bx	lr

000079c0 <bt_smp_init>:

int bt_smp_init(void)
{
    79c0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    79c2:	4802      	ldr	r0, [pc, #8]	; (79cc <bt_smp_init+0xc>)
    79c4:	f7fd ff36 	bl	5834 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    79c8:	2000      	movs	r0, #0
    79ca:	bd08      	pop	{r3, pc}
    79cc:	20003d04 	.word	0x20003d04

000079d0 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    79d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    79d2:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    79d4:	1dc3      	adds	r3, r0, #7
{
    79d6:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    79d8:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    79dc:	1e50      	subs	r0, r2, #1
{
    79de:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    79e0:	b280      	uxth	r0, r0
{
    79e2:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    79e4:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    79e6:	2100      	movs	r1, #0
    79e8:	2204      	movs	r2, #4
    79ea:	fb06 5000 	mla	r0, r6, r0, r5
    79ee:	f7fa fa6b 	bl	1ec8 <memset>
    79f2:	3c02      	subs	r4, #2
    79f4:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    79f6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    79fa:	42bc      	cmp	r4, r7
    79fc:	d101      	bne.n	7a02 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    79fe:	b003      	add	sp, #12
    7a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    7a02:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    7a06:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7a08:	2204      	movs	r2, #4
    7a0a:	1b80      	subs	r0, r0, r6
    7a0c:	eb0d 0102 	add.w	r1, sp, r2
    7a10:	4428      	add	r0, r5
    7a12:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    7a14:	9301      	str	r3, [sp, #4]
    7a16:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7a18:	f7fa fa2a 	bl	1e70 <memcpy>
    7a1c:	e7ed      	b.n	79fa <mem_init+0x2a>

00007a1e <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    7a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    7a20:	6805      	ldr	r5, [r0, #0]
{
    7a22:	4606      	mov	r6, r0
	if (*mem_head) {
    7a24:	b195      	cbz	r5, 7a4c <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7a26:	1deb      	adds	r3, r5, #7
    7a28:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    7a2c:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7a2e:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    7a30:	4629      	mov	r1, r5
    7a32:	eb0d 0002 	add.w	r0, sp, r2
    7a36:	f7fa fa1b 	bl	1e70 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    7a3a:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    7a3c:	3c01      	subs	r4, #1
    7a3e:	b2a4      	uxth	r4, r4
		if (head) {
    7a40:	b11b      	cbz	r3, 7a4a <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    7a42:	1dda      	adds	r2, r3, #7
    7a44:	f022 0203 	bic.w	r2, r2, #3
    7a48:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    7a4a:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    7a4c:	4628      	mov	r0, r5
    7a4e:	b002      	add	sp, #8
    7a50:	bd70      	pop	{r4, r5, r6, pc}

00007a52 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    7a52:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    7a54:	680c      	ldr	r4, [r1, #0]
{
    7a56:	4606      	mov	r6, r0
    7a58:	460d      	mov	r5, r1
	if (*mem_head) {
    7a5a:	b11c      	cbz	r4, 7a64 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7a5c:	1de3      	adds	r3, r4, #7
    7a5e:	f023 0303 	bic.w	r3, r3, #3
    7a62:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    7a64:	2204      	movs	r2, #4
    7a66:	4629      	mov	r1, r5
    7a68:	4630      	mov	r0, r6
    7a6a:	f7fa fa01 	bl	1e70 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    7a6e:	1df2      	adds	r2, r6, #7
    7a70:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    7a74:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    7a76:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    7a78:	602e      	str	r6, [r5, #0]
    7a7a:	bd70      	pop	{r4, r5, r6, pc}

00007a7c <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    7a7c:	b118      	cbz	r0, 7a86 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    7a7e:	3007      	adds	r0, #7
    7a80:	f020 0003 	bic.w	r0, r0, #3
    7a84:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    7a86:	4770      	bx	lr

00007a88 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    7a88:	fb02 0001 	mla	r0, r2, r1, r0
    7a8c:	4770      	bx	lr

00007a8e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    7a8e:	1a40      	subs	r0, r0, r1
    7a90:	b280      	uxth	r0, r0
}
    7a92:	fbb0 f0f2 	udiv	r0, r0, r2
    7a96:	4770      	bx	lr

00007a98 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    7a98:	b510      	push	{r4, lr}
	src += len;
    7a9a:	4411      	add	r1, r2
    7a9c:	3801      	subs	r0, #1
	while (len--) {
    7a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7aa2:	3a01      	subs	r2, #1
    7aa4:	b292      	uxth	r2, r2
    7aa6:	429a      	cmp	r2, r3
    7aa8:	d100      	bne.n	7aac <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    7aaa:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    7aac:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    7ab0:	f800 4f01 	strb.w	r4, [r0, #1]!
    7ab4:	e7f5      	b.n	7aa2 <mem_rcopy+0xa>

00007ab6 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    7ab6:	4401      	add	r1, r0
	while (len--) {
    7ab8:	4288      	cmp	r0, r1
    7aba:	d101      	bne.n	7ac0 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7abc:	2000      	movs	r0, #0
    7abe:	4770      	bx	lr
		if (*src++) {
    7ac0:	f810 3b01 	ldrb.w	r3, [r0], #1
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d0f7      	beq.n	7ab8 <mem_nz+0x2>
			return 1;
    7ac8:	2001      	movs	r0, #1
}
    7aca:	4770      	bx	lr

00007acc <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7acc:	6010      	str	r0, [r2, #0]
    7ace:	6008      	str	r0, [r1, #0]

	return link;
}
    7ad0:	4770      	bx	lr

00007ad2 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    7ad2:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    7ad4:	6814      	ldr	r4, [r2, #0]
    7ad6:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    7ad8:	6814      	ldr	r4, [r2, #0]
    7ada:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7adc:	6010      	str	r0, [r2, #0]

	return link;
}
    7ade:	bd10      	pop	{r4, pc}

00007ae0 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    7ae0:	4288      	cmp	r0, r1
    7ae2:	d003      	beq.n	7aec <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    7ae4:	b11a      	cbz	r2, 7aee <memq_peek+0xe>
		*mem = head->mem;
    7ae6:	6843      	ldr	r3, [r0, #4]
    7ae8:	6013      	str	r3, [r2, #0]
    7aea:	4770      	bx	lr
		return NULL;
    7aec:	2000      	movs	r0, #0
	}

	return head;
}
    7aee:	4770      	bx	lr

00007af0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    7af0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    7af2:	4283      	cmp	r3, r0
    7af4:	d009      	beq.n	7b0a <memq_dequeue+0x1a>
	if (mem) {
    7af6:	b122      	cbz	r2, 7b02 <memq_dequeue+0x12>
		*mem = head->mem;
    7af8:	6858      	ldr	r0, [r3, #4]
    7afa:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7afc:	681a      	ldr	r2, [r3, #0]
    7afe:	600a      	str	r2, [r1, #0]

	return link;
    7b00:	e001      	b.n	7b06 <memq_dequeue+0x16>
	if (!link) {
    7b02:	2b00      	cmp	r3, #0
    7b04:	d1fa      	bne.n	7afc <memq_dequeue+0xc>
}
    7b06:	4618      	mov	r0, r3
    7b08:	4770      	bx	lr
		return NULL;
    7b0a:	2300      	movs	r3, #0
    7b0c:	e7fb      	b.n	7b06 <memq_dequeue+0x16>
	...

00007b10 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    7b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    7b14:	4f11      	ldr	r7, [pc, #68]	; (7b5c <mayfly_init+0x4c>)
    7b16:	f8df 9048 	ldr.w	r9, [pc, #72]	; 7b60 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    7b1a:	2604      	movs	r6, #4
	while (callee_id--) {
    7b1c:	3e01      	subs	r6, #1
    7b1e:	b2f6      	uxtb	r6, r6
    7b20:	2eff      	cmp	r6, #255	; 0xff
    7b22:	d019      	beq.n	7b58 <mayfly_init+0x48>
    7b24:	b233      	sxth	r3, r6
    7b26:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7b2e:	011d      	lsls	r5, r3, #4
    7b30:	2404      	movs	r4, #4
    7b32:	f04f 0a0c 	mov.w	sl, #12
    7b36:	e00a      	b.n	7b4e <mayfly_init+0x3e>
    7b38:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    7b3c:	1d0a      	adds	r2, r1, #4
    7b3e:	eb04 0008 	add.w	r0, r4, r8
    7b42:	443a      	add	r2, r7
    7b44:	4439      	add	r1, r7
    7b46:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    7b4a:	f7ff ffbf 	bl	7acc <memq_init>
		while (caller_id--) {
    7b4e:	3c01      	subs	r4, #1
    7b50:	b2e4      	uxtb	r4, r4
    7b52:	2cff      	cmp	r4, #255	; 0xff
    7b54:	d1f0      	bne.n	7b38 <mayfly_init+0x28>
    7b56:	e7e1      	b.n	7b1c <mayfly_init+0xc>
    7b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b5c:	20000704 	.word	0x20000704
    7b60:	20000684 	.word	0x20000684

00007b64 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    7b64:	b4f0      	push	{r4, r5, r6, r7}
    7b66:	4b12      	ldr	r3, [pc, #72]	; (7bb0 <mayfly_enable+0x4c>)
    7b68:	4605      	mov	r5, r0
    7b6a:	460f      	mov	r7, r1
    7b6c:	260c      	movs	r6, #12
    7b6e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    7b70:	b172      	cbz	r2, 7b90 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    7b72:	4361      	muls	r1, r4
    7b74:	fb06 1400 	mla	r4, r6, r0, r1
    7b78:	4423      	add	r3, r4
    7b7a:	7a59      	ldrb	r1, [r3, #9]
    7b7c:	7a18      	ldrb	r0, [r3, #8]
    7b7e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    7b80:	bf04      	itt	eq
    7b82:	3101      	addeq	r1, #1
    7b84:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    7b86:	4628      	mov	r0, r5
    7b88:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    7b8a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    7b8c:	f00b bf4a 	b.w	13a24 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    7b90:	434c      	muls	r4, r1
    7b92:	fb06 4400 	mla	r4, r6, r0, r4
    7b96:	4423      	add	r3, r4
    7b98:	7a9c      	ldrb	r4, [r3, #10]
    7b9a:	7ada      	ldrb	r2, [r3, #11]
    7b9c:	42a2      	cmp	r2, r4
    7b9e:	d104      	bne.n	7baa <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    7ba0:	3201      	adds	r2, #1
    7ba2:	729a      	strb	r2, [r3, #10]
}
    7ba4:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    7ba6:	f00b bfa3 	b.w	13af0 <mayfly_pend>
}
    7baa:	bcf0      	pop	{r4, r5, r6, r7}
    7bac:	4770      	bx	lr
    7bae:	bf00      	nop
    7bb0:	20000704 	.word	0x20000704

00007bb4 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    7bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bb6:	4605      	mov	r5, r0
    7bb8:	460e      	mov	r6, r1
    7bba:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7bbc:	b18a      	cbz	r2, 7be2 <mayfly_enqueue+0x2e>
    7bbe:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    7bc0:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    7bc2:	7820      	ldrb	r0, [r4, #0]
    7bc4:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    7bc6:	f010 0703 	ands.w	r7, r0, #3
    7bca:	d029      	beq.n	7c20 <mayfly_enqueue+0x6c>
		if (chain) {
    7bcc:	b303      	cbz	r3, 7c10 <mayfly_enqueue+0x5c>
			if (state != 1) {
    7bce:	2f01      	cmp	r7, #1
    7bd0:	d039      	beq.n	7c46 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    7bd2:	3201      	adds	r2, #1
    7bd4:	b2d2      	uxtb	r2, r2
    7bd6:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    7bd8:	4631      	mov	r1, r6
    7bda:	4628      	mov	r0, r5
    7bdc:	f00b ff88 	bl	13af0 <mayfly_pend>
    7be0:	e01c      	b.n	7c1c <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7be2:	f00b ff73 	bl	13acc <mayfly_prio_is_equal>
    7be6:	2800      	cmp	r0, #0
    7be8:	d0e9      	beq.n	7bbe <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    7bea:	4631      	mov	r1, r6
    7bec:	4628      	mov	r0, r5
    7bee:	f00b ff45 	bl	13a7c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7bf2:	2800      	cmp	r0, #0
    7bf4:	d0e3      	beq.n	7bbe <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    7bf6:	2330      	movs	r3, #48	; 0x30
    7bf8:	220c      	movs	r2, #12
    7bfa:	4373      	muls	r3, r6
    7bfc:	fb02 3305 	mla	r3, r2, r5, r3
    7c00:	4a12      	ldr	r2, [pc, #72]	; (7c4c <mayfly_enqueue+0x98>)
    7c02:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    7c04:	7a93      	ldrb	r3, [r2, #10]
    7c06:	7ad2      	ldrb	r2, [r2, #11]
    7c08:	1a9b      	subs	r3, r3, r2
    7c0a:	bf18      	it	ne
    7c0c:	2301      	movne	r3, #1
    7c0e:	e7d7      	b.n	7bc0 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    7c10:	3202      	adds	r2, #2
    7c12:	b2d2      	uxtb	r2, r2
    7c14:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    7c16:	68e3      	ldr	r3, [r4, #12]
    7c18:	68a0      	ldr	r0, [r4, #8]
    7c1a:	4798      	blx	r3
		return 0;
    7c1c:	2000      	movs	r0, #0
    7c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    7c20:	2b00      	cmp	r3, #0
    7c22:	d0f8      	beq.n	7c16 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    7c24:	3201      	adds	r2, #1
    7c26:	b2d2      	uxtb	r2, r2
    7c28:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7c2a:	2304      	movs	r3, #4
    7c2c:	2230      	movs	r2, #48	; 0x30
    7c2e:	fb12 3206 	smlabb	r2, r2, r6, r3
    7c32:	230c      	movs	r3, #12
    7c34:	fb13 2305 	smlabb	r3, r3, r5, r2
    7c38:	4a04      	ldr	r2, [pc, #16]	; (7c4c <mayfly_enqueue+0x98>)
    7c3a:	6860      	ldr	r0, [r4, #4]
    7c3c:	441a      	add	r2, r3
    7c3e:	4621      	mov	r1, r4
    7c40:	f7ff ff47 	bl	7ad2 <memq_enqueue>
    7c44:	e7c8      	b.n	7bd8 <mayfly_enqueue+0x24>
			return 1;
    7c46:	4638      	mov	r0, r7

	return 0;
}
    7c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c4a:	bf00      	nop
    7c4c:	20000704 	.word	0x20000704

00007c50 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    7c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c54:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7c58:	b089      	sub	sp, #36	; 0x24
    7c5a:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    7c5c:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    7c60:	4e43      	ldr	r6, [pc, #268]	; (7d70 <mayfly_run+0x120>)
    7c62:	9304      	str	r3, [sp, #16]
{
    7c64:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    7c66:	2404      	movs	r4, #4
	u8_t disable = 0;
    7c68:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    7c6c:	3c01      	subs	r4, #1
    7c6e:	b2e4      	uxtb	r4, r4
    7c70:	2cff      	cmp	r4, #255	; 0xff
    7c72:	d10b      	bne.n	7c8c <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    7c74:	9b01      	ldr	r3, [sp, #4]
    7c76:	2b00      	cmp	r3, #0
    7c78:	d076      	beq.n	7d68 <mayfly_run+0x118>
    7c7a:	f1b8 0f00 	cmp.w	r8, #0
    7c7e:	d173      	bne.n	7d68 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    7c80:	4642      	mov	r2, r8
    7c82:	4629      	mov	r1, r5
    7c84:	4628      	mov	r0, r5
    7c86:	f00b fecd 	bl	13a24 <mayfly_enable_cb>
    7c8a:	e06d      	b.n	7d68 <mayfly_run+0x118>
		struct mayfly *m = 0;
    7c8c:	f10d 0b20 	add.w	fp, sp, #32
    7c90:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    7c92:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    7c94:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    7c98:	f04f 0930 	mov.w	r9, #48	; 0x30
    7c9c:	fb07 f304 	mul.w	r3, r7, r4
    7ca0:	fb09 3005 	mla	r0, r9, r5, r3
    7ca4:	1831      	adds	r1, r6, r0
    7ca6:	465a      	mov	r2, fp
    7ca8:	6849      	ldr	r1, [r1, #4]
    7caa:	5830      	ldr	r0, [r6, r0]
    7cac:	9302      	str	r3, [sp, #8]
    7cae:	f7ff ff17 	bl	7ae0 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7cb2:	9b04      	ldr	r3, [sp, #16]
    7cb4:	fb17 3704 	smlabb	r7, r7, r4, r3
    7cb8:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    7cba:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7cbc:	9303      	str	r3, [sp, #12]
		while (link) {
    7cbe:	f1ba 0f00 	cmp.w	sl, #0
    7cc2:	d119      	bne.n	7cf8 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7cc4:	2230      	movs	r2, #48	; 0x30
    7cc6:	230c      	movs	r3, #12
    7cc8:	436a      	muls	r2, r5
    7cca:	fb03 2204 	mla	r2, r3, r4, r2
    7cce:	4432      	add	r2, r6
    7cd0:	7a91      	ldrb	r1, [r2, #10]
    7cd2:	7ad0      	ldrb	r0, [r2, #11]
    7cd4:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    7cd6:	bf1e      	ittt	ne
    7cd8:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    7cda:	2201      	movne	r2, #1
    7cdc:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    7cde:	2230      	movs	r2, #48	; 0x30
    7ce0:	436a      	muls	r2, r5
    7ce2:	fb03 2304 	mla	r3, r3, r4, r2
    7ce6:	4433      	add	r3, r6
    7ce8:	7a1a      	ldrb	r2, [r3, #8]
    7cea:	7a59      	ldrb	r1, [r3, #9]
    7cec:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    7cee:	bf1c      	itt	ne
    7cf0:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    7cf2:	f04f 0801 	movne.w	r8, #1
    7cf6:	e7b9      	b.n	7c6c <mayfly_run+0x1c>
			req = m->_req;
    7cf8:	9b07      	ldr	r3, [sp, #28]
    7cfa:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7cfc:	785a      	ldrb	r2, [r3, #1]
    7cfe:	1abf      	subs	r7, r7, r2
    7d00:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7d04:	2f01      	cmp	r7, #1
    7d06:	d104      	bne.n	7d12 <mayfly_run+0xc2>
				m->_ack--;
    7d08:	3a01      	subs	r2, #1
    7d0a:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    7d0c:	6898      	ldr	r0, [r3, #8]
    7d0e:	68da      	ldr	r2, [r3, #12]
    7d10:	4790      	blx	r2
			req = m->_req;
    7d12:	9a07      	ldr	r2, [sp, #28]
    7d14:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    7d16:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    7d18:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    7d1a:	1a9a      	subs	r2, r3, r2
    7d1c:	f002 0203 	and.w	r2, r2, #3
    7d20:	2a01      	cmp	r2, #1
    7d22:	9305      	str	r3, [sp, #20]
    7d24:	d00d      	beq.n	7d42 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7d26:	9b02      	ldr	r3, [sp, #8]
    7d28:	9903      	ldr	r1, [sp, #12]
    7d2a:	fb09 3005 	mla	r0, r9, r5, r3
    7d2e:	4430      	add	r0, r6
    7d30:	2200      	movs	r2, #0
    7d32:	6840      	ldr	r0, [r0, #4]
    7d34:	f7ff fedc 	bl	7af0 <memq_dequeue>
				m->_link = link;
    7d38:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    7d3a:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    7d3c:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    7d40:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    7d42:	9b02      	ldr	r3, [sp, #8]
    7d44:	fb09 3305 	mla	r3, r9, r5, r3
    7d48:	18f1      	adds	r1, r6, r3
    7d4a:	465a      	mov	r2, fp
    7d4c:	6849      	ldr	r1, [r1, #4]
    7d4e:	58f0      	ldr	r0, [r6, r3]
    7d50:	f7ff fec6 	bl	7ae0 <memq_peek>
			if (state == 1) {
    7d54:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    7d56:	4682      	mov	sl, r0
			if (state == 1) {
    7d58:	d1b1      	bne.n	7cbe <mayfly_run+0x6e>
				if (caller_id || link) {
    7d5a:	b90c      	cbnz	r4, 7d60 <mayfly_run+0x110>
    7d5c:	2800      	cmp	r0, #0
    7d5e:	d0b1      	beq.n	7cc4 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    7d60:	4629      	mov	r1, r5
    7d62:	4628      	mov	r0, r5
    7d64:	f00b fec4 	bl	13af0 <mayfly_pend>
	}
}
    7d68:	b009      	add	sp, #36	; 0x24
    7d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d6e:	bf00      	nop
    7d70:	20000704 	.word	0x20000704

00007d74 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7d74:	b510      	push	{r4, lr}
    7d76:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    7d78:	2000      	movs	r0, #0

	while (octets_len--) {
    7d7a:	3901      	subs	r1, #1
    7d7c:	b2c9      	uxtb	r1, r1
    7d7e:	29ff      	cmp	r1, #255	; 0xff
    7d80:	d100      	bne.n	7d84 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    7d82:	bd10      	pop	{r4, pc}
		bite = *octets;
    7d84:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d0f6      	beq.n	7d7a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7d8c:	1e5c      	subs	r4, r3, #1
			one_count++;
    7d8e:	3001      	adds	r0, #1
			bite &= (bite - 1);
    7d90:	4023      	ands	r3, r4
			one_count++;
    7d92:	b2c0      	uxtb	r0, r0
    7d94:	e7f8      	b.n	7d88 <util_ones_count_get+0x14>

00007d96 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7d96:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7d98:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7d9a:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7d9c:	461a      	mov	r2, r3
	total = 0;
    7d9e:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7da0:	2aff      	cmp	r2, #255	; 0xff
    7da2:	d101      	bne.n	7da8 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7da4:	2000      	movs	r0, #0
    7da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7da8:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7dac:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    7dae:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    7db2:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7db6:	d004      	beq.n	7dc2 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7db8:	68b3      	ldr	r3, [r6, #8]
    7dba:	441c      	add	r4, r3
		current = ticker_current->next;
    7dbc:	4613      	mov	r3, r2
    7dbe:	463a      	mov	r2, r7
    7dc0:	e7ee      	b.n	7da0 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    7dc2:	4293      	cmp	r3, r2
    7dc4:	d100      	bne.n	7dc8 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7dc6:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7dc8:	b21b      	sxth	r3, r3
    7dca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7dce:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    7dd0:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    7dd2:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7dd6:	7833      	ldrb	r3, [r6, #0]
    7dd8:	2bff      	cmp	r3, #255	; 0xff
    7dda:	d006      	beq.n	7dea <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7ddc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7de0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7de4:	689a      	ldr	r2, [r3, #8]
    7de6:	4402      	add	r2, r0
    7de8:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7dea:	4420      	add	r0, r4
    7dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007dee <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7dee:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7df0:	1a55      	subs	r5, r2, r1
    7df2:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7df6:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7df8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7dfa:	d109      	bne.n	7e10 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7dfc:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7e00:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7e02:	42a2      	cmp	r2, r4
    7e04:	d90e      	bls.n	7e24 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7e06:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7e08:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7e0a:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7e0c:	6144      	str	r4, [r0, #20]
    7e0e:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7e10:	1a8a      	subs	r2, r1, r2
    7e12:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7e16:	4293      	cmp	r3, r2
    7e18:	d901      	bls.n	7e1e <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7e1a:	1a9a      	subs	r2, r3, r2
    7e1c:	e7f1      	b.n	7e02 <ticks_to_expire_prep+0x14>
    7e1e:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7e20:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    7e22:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7e24:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    7e26:	2200      	movs	r2, #0
    7e28:	e7ef      	b.n	7e0a <ticks_to_expire_prep+0x1c>

00007e2a <ticker_job_op_cb>:
{
    7e2a:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7e2c:	2200      	movs	r2, #0
    7e2e:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    7e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    7e32:	6259      	str	r1, [r3, #36]	; 0x24
{
    7e34:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    7e36:	b10a      	cbz	r2, 7e3c <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7e3a:	4710      	bx	r2
    7e3c:	4770      	bx	lr

00007e3e <ticker_worker>:
{
    7e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    7e42:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    7e44:	2301      	movs	r3, #1
{
    7e46:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    7e48:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    7e4a:	2d00      	cmp	r5, #0
    7e4c:	d14c      	bne.n	7ee8 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    7e4e:	7f43      	ldrb	r3, [r0, #29]
    7e50:	2bff      	cmp	r3, #255	; 0xff
    7e52:	d102      	bne.n	7e5a <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    7e54:	77c5      	strb	r5, [r0, #31]
		return;
    7e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    7e5a:	f00b f94d 	bl	130f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7e5e:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    7e60:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    7e62:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7e66:	1bc7      	subs	r7, r0, r7
    7e68:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    7e6c:	2eff      	cmp	r6, #255	; 0xff
    7e6e:	d006      	beq.n	7e7e <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    7e70:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7e74:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7e78:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7e7a:	429f      	cmp	r7, r3
    7e7c:	d218      	bcs.n	7eb0 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7e7e:	7aa2      	ldrb	r2, [r4, #10]
    7e80:	7ae3      	ldrb	r3, [r4, #11]
    7e82:	4293      	cmp	r3, r2
    7e84:	d105      	bne.n	7e92 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    7e86:	3301      	adds	r3, #1
    7e88:	b2db      	uxtb	r3, r3
			last = 0;
    7e8a:	2b02      	cmp	r3, #2
    7e8c:	bf08      	it	eq
    7e8e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    7e90:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7e92:	7ae3      	ldrb	r3, [r4, #11]
    7e94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7e98:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7e9a:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7e9c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7e9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    7ea0:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7ea2:	46ac      	mov	ip, r5
    7ea4:	4623      	mov	r3, r4
    7ea6:	2104      	movs	r1, #4
    7ea8:	2003      	movs	r0, #3
}
    7eaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7eae:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    7eb0:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    7eb2:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7eb4:	788a      	ldrb	r2, [r1, #2]
    7eb6:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7eb8:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7ebc:	1a9b      	subs	r3, r3, r2
    7ebe:	b2db      	uxtb	r3, r3
    7ec0:	2b01      	cmp	r3, #1
    7ec2:	d1d3      	bne.n	7e6c <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7ec4:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7ec8:	3a01      	subs	r2, #1
    7eca:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7ecc:	f1b9 0f00 	cmp.w	r9, #0
    7ed0:	d0cc      	beq.n	7e6c <ticker_worker+0x2e>
					   ticks_expired -
    7ed2:	6948      	ldr	r0, [r1, #20]
    7ed4:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7ed6:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7ed8:	1a28      	subs	r0, r5, r0
    7eda:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7edc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7ee0:	690b      	ldr	r3, [r1, #16]
    7ee2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7ee4:	47c8      	blx	r9
    7ee6:	e7c1      	b.n	7e6c <ticker_worker+0x2e>
    7ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007eec <ticker_job>:
{
    7eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    7ef0:	7fc2      	ldrb	r2, [r0, #31]
{
    7ef2:	b095      	sub	sp, #84	; 0x54
    7ef4:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7ef6:	2a00      	cmp	r2, #0
    7ef8:	f040 83bf 	bne.w	867a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67a>
	ticks_previous = instance->ticks_current;
    7efc:	6943      	ldr	r3, [r0, #20]
    7efe:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    7f00:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7f02:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7f04:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7f06:	7ac0      	ldrb	r0, [r0, #11]
    7f08:	4298      	cmp	r0, r3
    7f0a:	f000 808f 	beq.w	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
		first = instance->ticks_elapsed_first + 1;
    7f0e:	440b      	add	r3, r1
    7f10:	b2db      	uxtb	r3, r3
			first = 0;
    7f12:	2b02      	cmp	r3, #2
    7f14:	bf08      	it	eq
    7f16:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7f18:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7f1c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    7f20:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    7f22:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    7f26:	9b07      	ldr	r3, [sp, #28]
    7f28:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    7f2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7f2e:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    7f32:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7f36:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    7f38:	f8db 3000 	ldr.w	r3, [fp]
    7f3c:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    7f3e:	f8db 3004 	ldr.w	r3, [fp, #4]
    7f42:	930d      	str	r3, [sp, #52]	; 0x34
    7f44:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7f48:	3b01      	subs	r3, #1
    7f4a:	b2db      	uxtb	r3, r3
    7f4c:	9304      	str	r3, [sp, #16]
	pending = 0;
    7f4e:	2300      	movs	r3, #0
    7f50:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    7f52:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    7f56:	9b04      	ldr	r3, [sp, #16]
    7f58:	2bff      	cmp	r3, #255	; 0xff
    7f5a:	d16a      	bne.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7f5c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    7f60:	9a05      	ldr	r2, [sp, #20]
    7f62:	1a9b      	subs	r3, r3, r2
    7f64:	bf18      	it	ne
    7f66:	2301      	movne	r3, #1
    7f68:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    7f6a:	9b03      	ldr	r3, [sp, #12]
    7f6c:	b1e3      	cbz	r3, 7fa8 <ticker_job+0xbc>
	node = &instance->node[0];
    7f6e:	f8db 3000 	ldr.w	r3, [fp]
    7f72:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    7f74:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    7f78:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7f7c:	2eff      	cmp	r6, #255	; 0xff
    7f7e:	d00c      	beq.n	7f9a <ticker_job+0xae>
		ticker = &node[id_expired];
    7f80:	b237      	sxth	r7, r6
    7f82:	9b06      	ldr	r3, [sp, #24]
    7f84:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7f88:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7f8c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7f8e:	4545      	cmp	r5, r8
    7f90:	f240 8136 	bls.w	8200 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x200>
			ticker->ticks_to_expire -= ticks_elapsed;
    7f94:	eba5 0508 	sub.w	r5, r5, r8
    7f98:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7f9a:	9b04      	ldr	r3, [sp, #16]
    7f9c:	9a03      	ldr	r2, [sp, #12]
    7f9e:	9905      	ldr	r1, [sp, #20]
    7fa0:	42b1      	cmp	r1, r6
    7fa2:	bf18      	it	ne
    7fa4:	4613      	movne	r3, r2
    7fa6:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    7fa8:	f8db 3000 	ldr.w	r3, [fp]
    7fac:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    7fae:	f8db 3004 	ldr.w	r3, [fp, #4]
    7fb2:	9312      	str	r3, [sp, #72]	; 0x48
    7fb4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7fb8:	3b01      	subs	r3, #1
    7fba:	b2db      	uxtb	r3, r3
    7fbc:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    7fbe:	9b03      	ldr	r3, [sp, #12]
    7fc0:	2bff      	cmp	r3, #255	; 0xff
    7fc2:	f040 8170 	bne.w	82a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a6>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7fc6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7fca:	9a05      	ldr	r2, [sp, #20]
    7fcc:	4293      	cmp	r3, r2
	if (!pending) {
    7fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    7fd0:	f040 834a 	bne.w	8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>
	if (!pending) {
    7fd4:	b95b      	cbnz	r3, 7fee <ticker_job+0x102>
    7fd6:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7fda:	f8db 3004 	ldr.w	r3, [fp, #4]
    7fde:	9303      	str	r3, [sp, #12]
    7fe0:	3c01      	subs	r4, #1
    7fe2:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7fe4:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7fe8:	2cff      	cmp	r4, #255	; 0xff
    7fea:	f040 82a0 	bne.w	852e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52e>
	instance->job_guard = 0;
    7fee:	2300      	movs	r3, #0
    7ff0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7ff4:	9b04      	ldr	r3, [sp, #16]
    7ff6:	b14b      	cbz	r3, 800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
	if (instance->ticker_id_head == TICKER_NULL) {
    7ff8:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7ffc:	2bff      	cmp	r3, #255	; 0xff
    7ffe:	f040 82e9 	bne.w	85d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5d4>
		if (cntr_stop() == 0) {
    8002:	f00b f849 	bl	13098 <cntr_stop>
    8006:	b908      	cbnz	r0, 800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
			instance->ticks_slot_previous = 0;
    8008:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    800c:	f89b 301f 	ldrb.w	r3, [fp, #31]
    8010:	2b00      	cmp	r3, #0
    8012:	f000 8332 	beq.w	867a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8016:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    801a:	465b      	mov	r3, fp
    801c:	2201      	movs	r2, #1
    801e:	2103      	movs	r1, #3
    8020:	2004      	movs	r0, #4
    8022:	46a4      	mov	ip, r4
}
    8024:	b015      	add	sp, #84	; 0x54
    8026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    802a:	4760      	bx	ip
		flag_elapsed = 0;
    802c:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    802e:	4690      	mov	r8, r2
    8030:	e77f      	b.n	7f32 <ticker_job+0x46>
		user = &users[count_user];
    8032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8034:	9a04      	ldr	r2, [sp, #16]
    8036:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    803a:	687b      	ldr	r3, [r7, #4]
    803c:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    803e:	78f9      	ldrb	r1, [r7, #3]
    8040:	78be      	ldrb	r6, [r7, #2]
    8042:	428e      	cmp	r6, r1
    8044:	f000 80d7 	beq.w	81f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f6>
			user_op = &user_ops[user->middle];
    8048:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    804a:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    804c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    8050:	0112      	lsls	r2, r2, #4
    8052:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    8054:	1c73      	adds	r3, r6, #1
    8056:	b2db      	uxtb	r3, r3
				middle = 0;
    8058:	4298      	cmp	r0, r3
    805a:	bf08      	it	eq
    805c:	2300      	moveq	r3, #0
			user->middle = middle;
    805e:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    8060:	9b08      	ldr	r3, [sp, #32]
    8062:	5c9a      	ldrb	r2, [r3, r2]
    8064:	2a03      	cmp	r2, #3
    8066:	d9eb      	bls.n	8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    8068:	2a05      	cmp	r2, #5
    806a:	d817      	bhi.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
			ticker = &node[user_op->id];
    806c:	7869      	ldrb	r1, [r5, #1]
    806e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    8072:	930c      	str	r3, [sp, #48]	; 0x30
    8074:	980c      	ldr	r0, [sp, #48]	; 0x30
    8076:	9b06      	ldr	r3, [sp, #24]
    8078:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    807c:	7863      	ldrb	r3, [r4, #1]
    807e:	78a0      	ldrb	r0, [r4, #2]
    8080:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    8082:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8086:	d009      	beq.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
			    (state == 0) ||
    8088:	2a04      	cmp	r2, #4
    808a:	d10c      	bne.n	80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    808c:	686a      	ldr	r2, [r5, #4]
    808e:	b952      	cbnz	r2, 80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    8090:	68aa      	ldr	r2, [r5, #8]
    8092:	b942      	cbnz	r2, 80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
			     (user_op->params.update.lazy == 0) &&
    8094:	68ea      	ldr	r2, [r5, #12]
    8096:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    809a:	d104      	bne.n	80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
				ticker_job_op_cb(user_op,
    809c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    809e:	4628      	mov	r0, r5
    80a0:	f7ff fec3 	bl	7e2a <ticker_job_op_cb>
    80a4:	e7cb      	b.n	803e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e>
			if (state == 1) {
    80a6:	2b01      	cmp	r3, #1
    80a8:	f040 809b 	bne.w	81e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    80ac:	4658      	mov	r0, fp
    80ae:	f7ff fe72 	bl	7d96 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    80b2:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    80b4:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    80b6:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    80b8:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    80ba:	f040 8084 	bne.w	81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    80be:	f8db 3014 	ldr.w	r3, [fp, #20]
    80c2:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    80c4:	f00b f818 	bl	130f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    80c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    80ca:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    80cc:	1ac3      	subs	r3, r0, r3
    80ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    80d2:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    80d4:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    80d6:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    80d8:	bf9e      	ittt	ls
    80da:	6962      	ldrls	r2, [r4, #20]
    80dc:	1b92      	subls	r2, r2, r6
    80de:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    80e0:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    80e2:	bf96      	itet	ls
    80e4:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    80e6:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    80e8:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    80ea:	b18a      	cbz	r2, 8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>
	    (user_op->params.update.lazy != 0)) {
    80ec:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    80ee:	b179      	cbz	r1, 8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>
		user_op->params.update.lazy--;
    80f0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    80f4:	fa1f fe8e 	uxth.w	lr, lr
    80f8:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    80fc:	429a      	cmp	r2, r3
    80fe:	d32b      	bcc.n	8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>
		ticker->remainder_current -= 30517578UL;
    8100:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8428 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x428>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8104:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    8108:	45e6      	cmp	lr, ip
    810a:	d847      	bhi.n	819c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19c>
		ticker->lazy_periodic = user_op->params.update.lazy;
    810c:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    8110:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    8112:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    8114:	4413      	add	r3, r2
    8116:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    8118:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    811a:	6963      	ldr	r3, [r4, #20]
    811c:	4413      	add	r3, r2
    811e:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    8120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8122:	4620      	mov	r0, r4
    8124:	f7ff fe63 	bl	7dee <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    8128:	69a2      	ldr	r2, [r4, #24]
    812a:	892b      	ldrh	r3, [r5, #8]
    812c:	4413      	add	r3, r2
    812e:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    8130:	896a      	ldrh	r2, [r5, #10]
    8132:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    8134:	bf8c      	ite	hi
    8136:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    8138:	2300      	movls	r3, #0
    813a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    813c:	7bab      	ldrb	r3, [r5, #14]
    813e:	b103      	cbz	r3, 8142 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x142>
		ticker->force = user_op->params.update.force;
    8140:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    8142:	9b06      	ldr	r3, [sp, #24]
    8144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8146:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    814a:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    814c:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    8150:	3301      	adds	r3, #1
    8152:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    8154:	2100      	movs	r1, #0
    8156:	e7a2      	b.n	809e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    8158:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    815c:	45e6      	cmp	lr, ip
    815e:	d2cf      	bcs.n	8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>
	if ((ticker->remainder_current >= BIT(31)) ||
    8160:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8162:	4eaf      	ldr	r6, [pc, #700]	; (8420 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x420>)
    8164:	48af      	ldr	r0, [pc, #700]	; (8424 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x424>)
    8166:	198e      	adds	r6, r1, r6
    8168:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    816a:	bf81      	itttt	hi
    816c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    8170:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    8174:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    8178:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    817a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    817c:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    817e:	bf8c      	ite	hi
    8180:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    8184:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    8188:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    818a:	4491      	add	r9, r2
			ticker->lazy_current--;
    818c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    8190:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    8192:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    8196:	f8a4 c01e 	strh.w	ip, [r4, #30]
    819a:	e7af      	b.n	80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>
	ticker->remainder_current += ticker->remainder_periodic;
    819c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    819e:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    81a0:	48a0      	ldr	r0, [pc, #640]	; (8424 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x424>)
	ticker->remainder_current += ticker->remainder_periodic;
    81a2:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    81a4:	499e      	ldr	r1, [pc, #632]	; (8420 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x420>)
    81a6:	1871      	adds	r1, r6, r1
    81a8:	4281      	cmp	r1, r0
	return 0;
    81aa:	bf8e      	itee	hi
    81ac:	2100      	movhi	r1, #0
		return 1;
    81ae:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    81b0:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    81b2:	4411      	add	r1, r2
			ticker->lazy_current++;
    81b4:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    81b8:	bf8c      	ite	hi
    81ba:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    81bc:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    81be:	440b      	add	r3, r1
			ticker->lazy_current++;
    81c0:	f8a4 c01e 	strh.w	ip, [r4, #30]
    81c4:	e79e      	b.n	8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>
		ticker->req = ticker->ack;
    81c6:	78a3      	ldrb	r3, [r4, #2]
    81c8:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    81ca:	786b      	ldrb	r3, [r5, #1]
    81cc:	f89b 201c 	ldrb.w	r2, [fp, #28]
    81d0:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    81d2:	bf01      	itttt	eq
    81d4:	23ff      	moveq	r3, #255	; 0xff
    81d6:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    81da:	2300      	moveq	r3, #0
    81dc:	f8cb 3018 	streq.w	r3, [fp, #24]
    81e0:	e7b8      	b.n	8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    81e2:	2104      	movs	r1, #4
    81e4:	465b      	mov	r3, fp
    81e6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    81ea:	2201      	movs	r2, #1
    81ec:	4608      	mov	r0, r1
    81ee:	47a0      	blx	r4
				pending = 1;
    81f0:	2301      	movs	r3, #1
				user->middle = prev;
    81f2:	70be      	strb	r6, [r7, #2]
				pending = 1;
    81f4:	9309      	str	r3, [sp, #36]	; 0x24
    81f6:	9b04      	ldr	r3, [sp, #16]
    81f8:	3b01      	subs	r3, #1
    81fa:	b2db      	uxtb	r3, r3
    81fc:	9304      	str	r3, [sp, #16]
    81fe:	e6aa      	b.n	7f56 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    8200:	f8db 3018 	ldr.w	r3, [fp, #24]
    8204:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    8206:	bf29      	itett	cs
    8208:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    820a:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    820c:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    8210:	2300      	movcs	r3, #0
    8212:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    8216:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    8218:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    821a:	b11b      	cbz	r3, 8224 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x224>
			instance->ticker_id_slot_previous = id_expired;
    821c:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    8220:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    8224:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    8226:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    8228:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    822a:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    822e:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    8232:	f8d4 e004 	ldr.w	lr, [r4, #4]
    8236:	f1be 0f00 	cmp.w	lr, #0
    823a:	d030      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    823c:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    823e:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8424 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x424>
	ticker->remainder_current += ticker->remainder_periodic;
    8242:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8244:	6a21      	ldr	r1, [r4, #32]
    8246:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    8248:	4975      	ldr	r1, [pc, #468]	; (8420 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x420>)
    824a:	1859      	adds	r1, r3, r1
    824c:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    824e:	bf9f      	itttt	ls
    8250:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    8254:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    8258:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    825c:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    825e:	bf92      	itee	ls
    8260:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    8262:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    8264:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    8266:	4473      	add	r3, lr
			while (count--) {
    8268:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    826c:	441a      	add	r2, r3
			while (count--) {
    826e:	d2e8      	bcs.n	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    8270:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    8272:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    8274:	f8db 1014 	ldr.w	r1, [fp, #20]
    8278:	eb03 0209 	add.w	r2, r3, r9
    827c:	4620      	mov	r0, r4
    827e:	f7ff fdb6 	bl	7dee <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    8282:	8ba3      	ldrh	r3, [r4, #28]
    8284:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    8286:	2300      	movs	r3, #0
    8288:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    828a:	9b06      	ldr	r3, [sp, #24]
    828c:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    8290:	7863      	ldrb	r3, [r4, #1]
    8292:	3301      	adds	r3, #1
    8294:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    8296:	eba8 0805 	sub.w	r8, r8, r5
    829a:	46b2      	mov	sl, r6
    829c:	e66c      	b.n	7f78 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    829e:	78a3      	ldrb	r3, [r4, #2]
    82a0:	7063      	strb	r3, [r4, #1]
    82a2:	4656      	mov	r6, sl
    82a4:	e7f7      	b.n	8296 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x296>
		user = &users[count_user];
    82a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    82a8:	9a03      	ldr	r2, [sp, #12]
    82aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    82ae:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    82b0:	685b      	ldr	r3, [r3, #4]
    82b2:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    82b4:	9b06      	ldr	r3, [sp, #24]
    82b6:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    82ba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    82be:	f000 808e 	beq.w	83de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3de>
				ticker = &node[id_insert];
    82c2:	fa0f f38a 	sxth.w	r3, sl
    82c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    82ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    82cc:	46d0      	mov	r8, sl
    82ce:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    82d2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    82d6:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    82d8:	f8db 3000 	ldr.w	r3, [fp]
    82dc:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    82de:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    82e0:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    82e2:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    82e4:	8be3      	ldrh	r3, [r4, #30]
    82e6:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    82e8:	bf86      	itte	hi
    82ea:	1a9b      	subhi	r3, r3, r2
    82ec:	b29b      	uxthhi	r3, r3
		skip = 0;
    82ee:	2300      	movls	r3, #0
    82f0:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    82f2:	fa0f f388 	sxth.w	r3, r8
    82f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    82fa:	00db      	lsls	r3, r3, #3
    82fc:	9313      	str	r3, [sp, #76]	; 0x4c
    82fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    8300:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    8304:	f8db 0018 	ldr.w	r0, [fp, #24]
    8308:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    830a:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    830e:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    8310:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    8314:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    8318:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    831a:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    831c:	2bff      	cmp	r3, #255	; 0xff
    831e:	d007      	beq.n	8330 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x330>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    8320:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    8324:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    8328:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    832a:	4281      	cmp	r1, r0
    832c:	f200 80a9 	bhi.w	8482 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x482>
				     ticks_to_expire + ticker_new->ticks_slot);
    8330:	f8de 0018 	ldr.w	r0, [lr, #24]
    8334:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    8336:	eb01 0c00 	add.w	ip, r1, r0
    833a:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    833c:	2eff      	cmp	r6, #255	; 0xff
    833e:	f040 80ae 	bne.w	849e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x49e>
	if ((ticker_new->ticks_slot == 0) ||
    8342:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8344:	b130      	cbz	r0, 8354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x354>
    8346:	9807      	ldr	r0, [sp, #28]
    8348:	4281      	cmp	r1, r0
    834a:	f0c0 80bf 	bcc.w	84cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4cc>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    834e:	2eff      	cmp	r6, #255	; 0xff
    8350:	f040 818f 	bne.w	8672 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x672>
		if (previous == current) {
    8354:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    8356:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    835a:	4283      	cmp	r3, r0
			node[previous].next = id;
    835c:	bf18      	it	ne
    835e:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    8362:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    8366:	bf16      	itet	ne
    8368:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    836c:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    8370:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    8374:	2bff      	cmp	r3, #255	; 0xff
    8376:	d006      	beq.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
			node[current].ticks_to_expire -= ticks_to_expire;
    8378:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    837c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8380:	689a      	ldr	r2, [r3, #8]
    8382:	1a51      	subs	r1, r2, r1
    8384:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    8386:	78a3      	ldrb	r3, [r4, #2]
    8388:	3301      	adds	r3, #1
    838a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    838c:	2100      	movs	r1, #0
			if (user_op) {
    838e:	2d00      	cmp	r5, #0
    8390:	d093      	beq.n	82ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ba>
				ticker_job_op_cb(user_op, status);
    8392:	4628      	mov	r0, r5
    8394:	f7ff fd49 	bl	7e2a <ticker_job_op_cb>
    8398:	e78f      	b.n	82ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ba>
				user_op = &user_ops[user_ops_first];
    839a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    839e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    83a0:	011b      	lsls	r3, r3, #4
    83a2:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    83a4:	f109 0201 	add.w	r2, r9, #1
    83a8:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    83ac:	9a06      	ldr	r2, [sp, #24]
    83ae:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    83b0:	454a      	cmp	r2, r9
    83b2:	bf08      	it	eq
    83b4:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    83b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    83ba:	5cd3      	ldrb	r3, [r2, r3]
    83bc:	2b03      	cmp	r3, #3
    83be:	d10e      	bne.n	83de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3de>
				id_insert = user_op->id;
    83c0:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    83c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    83c6:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    83ca:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    83ce:	7862      	ldrb	r2, [r4, #1]
    83d0:	78a3      	ldrb	r3, [r4, #2]
    83d2:	429a      	cmp	r2, r3
    83d4:	d009      	beq.n	83ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ea>
					ticker_job_op_cb(user_op,
    83d6:	2101      	movs	r1, #1
    83d8:	4628      	mov	r0, r5
    83da:	f7ff fd26 	bl	7e2a <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    83de:	9b06      	ldr	r3, [sp, #24]
    83e0:	789b      	ldrb	r3, [r3, #2]
    83e2:	454b      	cmp	r3, r9
    83e4:	d1d9      	bne.n	839a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39a>
    83e6:	9b03      	ldr	r3, [sp, #12]
    83e8:	e5e6      	b.n	7fb8 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    83ea:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    83ec:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    83f0:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    83f2:	692b      	ldr	r3, [r5, #16]
    83f4:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    83f6:	8aab      	ldrh	r3, [r5, #20]
    83f8:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    83fa:	69ab      	ldr	r3, [r5, #24]
    83fc:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    83fe:	69eb      	ldr	r3, [r5, #28]
    8400:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    8402:	6a2b      	ldr	r3, [r5, #32]
    8404:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    8406:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    8408:	68ab      	ldr	r3, [r5, #8]
    840a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    840c:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    840e:	686a      	ldr	r2, [r5, #4]
    8410:	4620      	mov	r0, r4
    8412:	f7ff fcec 	bl	7dee <ticks_to_expire_prep>
	ticker->force = 1;
    8416:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    8418:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    841a:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    841c:	70e3      	strb	r3, [r4, #3]
    841e:	e75b      	b.n	82d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d8>
    8420:	ff172b5a 	.word	0xff172b5a
    8424:	7f172b59 	.word	0x7f172b59
    8428:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    842c:	6860      	ldr	r0, [r4, #4]
    842e:	2800      	cmp	r0, #0
    8430:	d07b      	beq.n	852a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52a>
	ticker->remainder_current += ticker->remainder_periodic;
    8432:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8434:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    8436:	4b92      	ldr	r3, [pc, #584]	; (8680 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x680>)
	ticker->remainder_current += ticker->remainder_periodic;
    8438:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    843a:	4992      	ldr	r1, [pc, #584]	; (8684 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x684>)
    843c:	18d3      	adds	r3, r2, r3
    843e:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    8440:	bf9c      	itt	ls
    8442:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    8446:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    844a:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    844c:	bf8b      	itete	hi
    844e:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    8450:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    8454:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    8456:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8458:	4403      	add	r3, r0
		return 1;
    845a:	bf98      	it	ls
    845c:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    845e:	4413      	add	r3, r2
			ticker->lazy_current++;
    8460:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8462:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    8464:	3201      	adds	r2, #1
    8466:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    8468:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    846a:	4293      	cmp	r3, r2
    846c:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    8470:	bf89      	itett	hi
    8472:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    8474:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    8476:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    8478:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    847a:	bf9c      	itt	ls
    847c:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    847e:	60a1      	strls	r1, [r4, #8]
    8480:	e73d      	b.n	82fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fe>
		if (ticker_current->ticks_slot != 0) {
    8482:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    8484:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    8486:	b946      	cbnz	r6, 849a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x49a>
			if (ticks_slot_previous > ticks_to_expire_current) {
    8488:	9f07      	ldr	r7, [sp, #28]
    848a:	42b8      	cmp	r0, r7
    848c:	d200      	bcs.n	8490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x490>
				ticks_slot_previous -= ticks_to_expire_current;
    848e:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    8490:	930b      	str	r3, [sp, #44]	; 0x2c
    8492:	9607      	str	r6, [sp, #28]
    8494:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    8498:	e740      	b.n	831c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31c>
		if (ticker_current->ticks_slot != 0) {
    849a:	9308      	str	r3, [sp, #32]
    849c:	e7f8      	b.n	8490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x490>
		ticker = &node[ticker_id_head];
    849e:	b230      	sxth	r0, r6
    84a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    84a4:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    84a8:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    84aa:	68bf      	ldr	r7, [r7, #8]
    84ac:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    84ae:	4567      	cmp	r7, ip
    84b0:	d20a      	bcs.n	84c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c8>
		if (ticker->ticks_slot) {
    84b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
    84b4:	69bf      	ldr	r7, [r7, #24]
    84b6:	2f00      	cmp	r7, #0
    84b8:	f47f af43 	bne.w	8342 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x342>
		ticks_slot -= ticks_to_expire;
    84bc:	9e11      	ldr	r6, [sp, #68]	; 0x44
    84be:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    84c2:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    84c6:	e739      	b.n	833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>
			return TICKER_NULL;
    84c8:	26ff      	movs	r6, #255	; 0xff
    84ca:	e73a      	b.n	8342 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x342>
	while (id_insert !=
    84cc:	9b08      	ldr	r3, [sp, #32]
    84ce:	4598      	cmp	r8, r3
    84d0:	f43f af59 	beq.w	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
		if (id_collide != TICKER_NULL) {
    84d4:	9b08      	ldr	r3, [sp, #32]
    84d6:	2bff      	cmp	r3, #255	; 0xff
    84d8:	d0a8      	beq.n	842c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42c>
    84da:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    84dc:	b233      	sxth	r3, r6
    84de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    84e2:	9307      	str	r3, [sp, #28]
    84e4:	9a07      	ldr	r2, [sp, #28]
    84e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    84e8:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    84ec:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    84ee:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    84f0:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    84f2:	bf88      	it	hi
    84f4:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    84f6:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    84f8:	bf8c      	ite	hi
    84fa:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    84fc:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    84fe:	2a00      	cmp	r2, #0
    8500:	d094      	beq.n	842c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42c>
    8502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8504:	4293      	cmp	r3, r2
    8506:	d891      	bhi.n	842c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42c>
			    skip_collide <= skip &&
    8508:	78fa      	ldrb	r2, [r7, #3]
    850a:	78e3      	ldrb	r3, [r4, #3]
    850c:	429a      	cmp	r2, r3
    850e:	d28d      	bcs.n	842c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42c>
					ticker_dequeue(instance, id_collide);
    8510:	4631      	mov	r1, r6
    8512:	4658      	mov	r0, fp
    8514:	f7ff fc3f 	bl	7d96 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    8518:	78bb      	ldrb	r3, [r7, #2]
    851a:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    851c:	9a07      	ldr	r2, [sp, #28]
    851e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    8520:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    8522:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    8526:	46b2      	mov	sl, r6
    8528:	e6e9      	b.n	82fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fe>
			return TICKER_STATUS_FAILURE;
    852a:	2101      	movs	r1, #1
    852c:	e72f      	b.n	838e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38e>
		user = &users[count_user];
    852e:	9b03      	ldr	r3, [sp, #12]
    8530:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    8534:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    8536:	786b      	ldrb	r3, [r5, #1]
    8538:	78ea      	ldrb	r2, [r5, #3]
    853a:	429a      	cmp	r2, r3
    853c:	d102      	bne.n	8544 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x544>
    853e:	3c01      	subs	r4, #1
    8540:	b2e4      	uxtb	r4, r4
    8542:	e551      	b.n	7fe8 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    8544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8548:	011b      	lsls	r3, r3, #4
    854a:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    854c:	5cf3      	ldrb	r3, [r6, r3]
    854e:	2b01      	cmp	r3, #1
    8550:	d025      	beq.n	859e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59e>
    8552:	2b02      	cmp	r3, #2
    8554:	d12a      	bne.n	85ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ac>
		ticker_by_next_slot_get(instance,
    8556:	f8d2 c004 	ldr.w	ip, [r2, #4]
    855a:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    855c:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    8560:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    8564:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    8568:	28ff      	cmp	r0, #255	; 0xff
    856a:	d004      	beq.n	8576 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x576>
    856c:	6819      	ldr	r1, [r3, #0]
    856e:	f8db 7014 	ldr.w	r7, [fp, #20]
    8572:	42b9      	cmp	r1, r7
    8574:	d023      	beq.n	85be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5be>
		*ticks_current = instance->ticks_current;
    8576:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    857a:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    857e:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    8580:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    8582:	29ff      	cmp	r1, #255	; 0xff
    8584:	d007      	beq.n	8596 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x596>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    8586:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    858a:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    858e:	6987      	ldr	r7, [r0, #24]
    8590:	6880      	ldr	r0, [r0, #8]
    8592:	b1df      	cbz	r7, 85cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5cc>
		_ticks_to_expire += ticker->ticks_to_expire;
    8594:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    8596:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    859a:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    859e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    85a0:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    85a4:	b113      	cbz	r3, 85ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ac>
		fp_op_func(uop->status, uop->op_context);
    85a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    85a8:	2000      	movs	r0, #0
    85aa:	4798      	blx	r3
			first = user->first + 1;
    85ac:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    85ae:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    85b0:	3301      	adds	r3, #1
    85b2:	b2db      	uxtb	r3, r3
				first = 0;
    85b4:	429a      	cmp	r2, r3
    85b6:	bf08      	it	eq
    85b8:	2300      	moveq	r3, #0
			user->first = first;
    85ba:	706b      	strb	r3, [r5, #1]
    85bc:	e7bb      	b.n	8536 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x536>
		ticker = &node[_ticker_id_head];
    85be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    85c2:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    85c6:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    85ca:	e7da      	b.n	8582 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582>
		_ticks_to_expire += ticker->ticks_to_expire;
    85cc:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    85ce:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    85d2:	e7d6      	b.n	8582 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582>
	if (ticker_id_old_head == TICKER_NULL) {
    85d4:	9b05      	ldr	r3, [sp, #20]
    85d6:	2bff      	cmp	r3, #255	; 0xff
    85d8:	d107      	bne.n	85ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ea>
		ticks_current = cntr_cnt_get();
    85da:	f00a fd8d 	bl	130f8 <cntr_cnt_get>
    85de:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    85e0:	f00a fd4c 	bl	1307c <cntr_start>
    85e4:	b908      	cbnz	r0, 85ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ea>
			instance->ticks_current = ticks_current;
    85e6:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    85ea:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    85ee:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    85f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    85f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    85fa:	260a      	movs	r6, #10
    85fc:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    85fe:	f00a fd7b 	bl	130f8 <cntr_cnt_get>
		cc = instance->ticks_current;
    8602:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8606:	1b03      	subs	r3, r0, r4
    8608:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    860c:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    860e:	42ab      	cmp	r3, r5
    8610:	bf2c      	ite	cs
    8612:	18e4      	addcs	r4, r4, r3
    8614:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    8616:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    861a:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    861c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    8620:	4620      	mov	r0, r4
    8622:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    8624:	f00a fd68 	bl	130f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8628:	1bc0      	subs	r0, r0, r7
    862a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    862e:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    8630:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8632:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    8636:	42a0      	cmp	r0, r4
    8638:	f67f ace8 	bls.w	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
		LL_ASSERT(i);
    863c:	3e01      	subs	r6, #1
    863e:	d1de      	bne.n	85fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5fe>
    8640:	4b11      	ldr	r3, [pc, #68]	; (8688 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x688>)
    8642:	9301      	str	r3, [sp, #4]
    8644:	9300      	str	r3, [sp, #0]
    8646:	4b11      	ldr	r3, [pc, #68]	; (868c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68c>)
    8648:	4a11      	ldr	r2, [pc, #68]	; (8690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x690>)
    864a:	681c      	ldr	r4, [r3, #0]
    864c:	4911      	ldr	r1, [pc, #68]	; (8694 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x694>)
    864e:	4b12      	ldr	r3, [pc, #72]	; (8698 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x698>)
    8650:	4812      	ldr	r0, [pc, #72]	; (869c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69c>)
    8652:	47a0      	blx	r4
    8654:	4040      	eors	r0, r0
    8656:	f380 8811 	msr	BASEPRI, r0
    865a:	f04f 0004 	mov.w	r0, #4
    865e:	df02      	svc	2
	instance->job_guard = 0;
    8660:	2300      	movs	r3, #0
    8662:	f88b 301e 	strb.w	r3, [fp, #30]
    8666:	e4c7      	b.n	7ff8 <ticker_job+0x10c>
	if (!pending) {
    8668:	2b00      	cmp	r3, #0
    866a:	d1f9      	bne.n	8660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x660>
		flag_compare_update = 1;
    866c:	2301      	movs	r3, #1
    866e:	9304      	str	r3, [sp, #16]
    8670:	e4b1      	b.n	7fd6 <ticker_job+0xea>
	while (id_insert !=
    8672:	45b0      	cmp	r8, r6
    8674:	f47f af32 	bne.w	84dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4dc>
    8678:	e685      	b.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
}
    867a:	b015      	add	sp, #84	; 0x54
    867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8680:	ff172b5a 	.word	0xff172b5a
    8684:	7f172b59 	.word	0x7f172b59
    8688:	000161ba 	.word	0x000161ba
    868c:	20003a5c 	.word	0x20003a5c
    8690:	000179e1 	.word	0x000179e1
    8694:	00017a29 	.word	0x00017a29
    8698:	00018d91 	.word	0x00018d91
    869c:	00018dab 	.word	0x00018dab

000086a0 <ticker_init>:
{
    86a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    86a2:	4d1a      	ldr	r5, [pc, #104]	; (870c <ticker_init+0x6c>)
{
    86a4:	9f05      	ldr	r7, [sp, #20]
    86a6:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    86aa:	262c      	movs	r6, #44	; 0x2c
    86ac:	4346      	muls	r6, r0
    86ae:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    86b2:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    86b4:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    86b8:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    86ba:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    86be:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    86c2:	3b01      	subs	r3, #1
    86c4:	b2db      	uxtb	r3, r3
    86c6:	2bff      	cmp	r3, #255	; 0xff
    86c8:	d111      	bne.n	86ee <ticker_init+0x4e>
	if (count_op) {
    86ca:	b9ec      	cbnz	r4, 8708 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    86cc:	222c      	movs	r2, #44	; 0x2c
    86ce:	fb02 5200 	mla	r2, r2, r0, r5
    86d2:	9908      	ldr	r1, [sp, #32]
    86d4:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    86d6:	9909      	ldr	r1, [sp, #36]	; 0x24
    86d8:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    86da:	990a      	ldr	r1, [sp, #40]	; 0x28
    86dc:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    86de:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    86e0:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    86e2:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    86e4:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    86e6:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    86e8:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    86ea:	4620      	mov	r0, r4
    86ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    86ee:	b21a      	sxth	r2, r3
    86f0:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    86f4:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    86f6:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    86fa:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    86fe:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    8700:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    8704:	b2e4      	uxtb	r4, r4
    8706:	e7dc      	b.n	86c2 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    8708:	2001      	movs	r0, #1
}
    870a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    870c:	200007c4 	.word	0x200007c4

00008710 <ticker_trigger>:
	instance = &_instance[instance_index];
    8710:	4a07      	ldr	r2, [pc, #28]	; (8730 <ticker_trigger+0x20>)
    8712:	212c      	movs	r1, #44	; 0x2c
    8714:	fb00 2301 	mla	r3, r0, r1, r2
{
    8718:	b410      	push	{r4}
	if (instance->sched_cb) {
    871a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    871c:	b12c      	cbz	r4, 872a <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    871e:	46a4      	mov	ip, r4
    8720:	2201      	movs	r2, #1
    8722:	2103      	movs	r1, #3
    8724:	2002      	movs	r0, #2
}
    8726:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    8728:	4760      	bx	ip
}
    872a:	bc10      	pop	{r4}
    872c:	4770      	bx	lr
    872e:	bf00      	nop
    8730:	200007c4 	.word	0x200007c4

00008734 <ticker_start>:
{
    8734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8738:	4f25      	ldr	r7, [pc, #148]	; (87d0 <ticker_start+0x9c>)
    873a:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    873e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8740:	fb08 7000 	mla	r0, r8, r0, r7
    8744:	fa0f fc81 	sxth.w	ip, r1
    8748:	f8d0 e004 	ldr.w	lr, [r0, #4]
    874c:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    8750:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    8754:	78f4      	ldrb	r4, [r6, #3]
    8756:	1c65      	adds	r5, r4, #1
    8758:	b2ed      	uxtb	r5, r5
		last = 0;
    875a:	45ae      	cmp	lr, r5
    875c:	bf98      	it	ls
    875e:	2500      	movls	r5, #0
	if (last == user->first) {
    8760:	f896 e001 	ldrb.w	lr, [r6, #1]
    8764:	45ae      	cmp	lr, r5
    8766:	d02f      	beq.n	87c8 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    8768:	f8d6 c004 	ldr.w	ip, [r6, #4]
    876c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8770:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    8774:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    8778:	f04f 0a03 	mov.w	sl, #3
    877c:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    8780:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    8782:	9b08      	ldr	r3, [sp, #32]
    8784:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    8786:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8788:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    878a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    878c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    878e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8790:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    8792:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    8796:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    8798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    879a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    879c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    879e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    87a0:	2302      	movs	r3, #2
    87a2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    87a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87a6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    87a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    87aa:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    87ac:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    87ae:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    87b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    87b2:	6a03      	ldr	r3, [r0, #32]
    87b4:	4608      	mov	r0, r1
    87b6:	4798      	blx	r3
    87b8:	fb09 7308 	mla	r3, r9, r8, r7
    87bc:	2200      	movs	r2, #0
    87be:	2104      	movs	r1, #4
    87c0:	47a8      	blx	r5
	return user_op->status;
    87c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    87c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    87c8:	2001      	movs	r0, #1
}
    87ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87ce:	bf00      	nop
    87d0:	200007c4 	.word	0x200007c4

000087d4 <ticker_update>:
{
    87d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    87d8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 886c <ticker_update+0x98>
    87dc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    87e0:	fb0a 8e00 	mla	lr, sl, r0, r8
    87e4:	b20f      	sxth	r7, r1
    87e6:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    87ea:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    87ec:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    87f0:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    87f4:	78c4      	ldrb	r4, [r0, #3]
    87f6:	1c66      	adds	r6, r4, #1
    87f8:	b2f6      	uxtb	r6, r6
		last = 0;
    87fa:	42b5      	cmp	r5, r6
    87fc:	bf98      	it	ls
    87fe:	2600      	movls	r6, #0
	if (last == user->first) {
    8800:	7845      	ldrb	r5, [r0, #1]
    8802:	42b5      	cmp	r5, r6
    8804:	d02f      	beq.n	8866 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    8806:	f8d0 c004 	ldr.w	ip, [r0, #4]
    880a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    880e:	0125      	lsls	r5, r4, #4
    8810:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8814:	2704      	movs	r7, #4
    8816:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    881a:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    881c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8820:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    8822:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8826:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    8828:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    882c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    882e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    8832:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    8834:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    8838:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    883a:	2302      	movs	r3, #2
    883c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    883e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8840:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    8842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    8844:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    8846:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8848:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    884a:	f8de 3020 	ldr.w	r3, [lr, #32]
    884e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    8852:	4608      	mov	r0, r1
    8854:	4798      	blx	r3
    8856:	fb09 830a 	mla	r3, r9, sl, r8
    885a:	2200      	movs	r2, #0
    885c:	4639      	mov	r1, r7
    885e:	47a8      	blx	r5
	return user_op->status;
    8860:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8866:	2001      	movs	r0, #1
}
    8868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    886c:	200007c4 	.word	0x200007c4

00008870 <ticker_stop>:
{
    8870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8874:	f8df 906c 	ldr.w	r9, [pc, #108]	; 88e4 <ticker_stop+0x74>
    8878:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    887c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    8880:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    8882:	f8de 0004 	ldr.w	r0, [lr, #4]
    8886:	b20e      	sxth	r6, r1
    8888:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    888c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    8890:	78fc      	ldrb	r4, [r7, #3]
    8892:	1c65      	adds	r5, r4, #1
    8894:	b2ed      	uxtb	r5, r5
		last = 0;
    8896:	42a8      	cmp	r0, r5
    8898:	bf98      	it	ls
    889a:	2500      	movls	r5, #0
	if (last == user->first) {
    889c:	7878      	ldrb	r0, [r7, #1]
    889e:	42a8      	cmp	r0, r5
    88a0:	d01d      	beq.n	88de <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    88a2:	6878      	ldr	r0, [r7, #4]
    88a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    88a8:	0124      	lsls	r4, r4, #4
    88aa:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    88ac:	f04f 0c05 	mov.w	ip, #5
    88b0:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    88b4:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    88b6:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    88b8:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    88ba:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    88bc:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    88be:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    88c0:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    88c2:	f8de 3020 	ldr.w	r3, [lr, #32]
    88c6:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    88ca:	4608      	mov	r0, r1
    88cc:	4798      	blx	r3
    88ce:	fb08 930a 	mla	r3, r8, sl, r9
    88d2:	2200      	movs	r2, #0
    88d4:	2104      	movs	r1, #4
    88d6:	47a0      	blx	r4
	return user_op->status;
    88d8:	6a70      	ldr	r0, [r6, #36]	; 0x24
    88da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    88de:	2001      	movs	r0, #1
}
    88e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    88e4:	200007c4 	.word	0x200007c4

000088e8 <ticker_next_slot_get>:
{
    88e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    88ec:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8968 <ticker_next_slot_get+0x80>
    88f0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    88f4:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    88f6:	fb0a 8000 	mla	r0, sl, r0, r8
    88fa:	fa0f fe81 	sxth.w	lr, r1
    88fe:	6845      	ldr	r5, [r0, #4]
    8900:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    8904:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    8908:	78fc      	ldrb	r4, [r7, #3]
    890a:	1c66      	adds	r6, r4, #1
    890c:	b2f6      	uxtb	r6, r6
		last = 0;
    890e:	42b5      	cmp	r5, r6
    8910:	bf98      	it	ls
    8912:	2600      	movls	r6, #0
	if (last == user->first) {
    8914:	787d      	ldrb	r5, [r7, #1]
    8916:	42b5      	cmp	r5, r6
    8918:	d023      	beq.n	8962 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    891a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    891e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8922:	0125      	lsls	r5, r4, #4
    8924:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    8928:	f04f 0e02 	mov.w	lr, #2
    892c:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    8930:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    8932:	9b08      	ldr	r3, [sp, #32]
    8934:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    8936:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8938:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    893a:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    893c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    893e:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    8940:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    8942:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    8946:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8948:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    894a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    894c:	6a03      	ldr	r3, [r0, #32]
    894e:	4608      	mov	r0, r1
    8950:	4798      	blx	r3
    8952:	fb09 830a 	mla	r3, r9, sl, r8
    8956:	2200      	movs	r2, #0
    8958:	2104      	movs	r1, #4
    895a:	47a8      	blx	r5
	return user_op->status;
    895c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    895e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8962:	2001      	movs	r0, #1
}
    8964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8968:	200007c4 	.word	0x200007c4

0000896c <ticker_job_idle_get>:
{
    896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8970:	f8df 906c 	ldr.w	r9, [pc, #108]	; 89e0 <ticker_job_idle_get+0x74>
    8974:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8978:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    897c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    897e:	f8de 0004 	ldr.w	r0, [lr, #4]
    8982:	b20e      	sxth	r6, r1
    8984:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    8988:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    898c:	78fc      	ldrb	r4, [r7, #3]
    898e:	1c65      	adds	r5, r4, #1
    8990:	b2ed      	uxtb	r5, r5
		last = 0;
    8992:	42a8      	cmp	r0, r5
    8994:	bf98      	it	ls
    8996:	2500      	movls	r5, #0
	if (last == user->first) {
    8998:	7878      	ldrb	r0, [r7, #1]
    899a:	42a8      	cmp	r0, r5
    899c:	d01d      	beq.n	89da <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    899e:	6878      	ldr	r0, [r7, #4]
    89a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    89a4:	0124      	lsls	r4, r4, #4
    89a6:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    89a8:	f04f 0c01 	mov.w	ip, #1
    89ac:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    89b0:	20ff      	movs	r0, #255	; 0xff
    89b2:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    89b4:	2002      	movs	r0, #2
    89b6:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    89b8:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    89ba:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    89bc:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    89be:	f8de 3020 	ldr.w	r3, [lr, #32]
    89c2:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    89c6:	4608      	mov	r0, r1
    89c8:	4798      	blx	r3
    89ca:	fb08 930a 	mla	r3, r8, sl, r9
    89ce:	2200      	movs	r2, #0
    89d0:	2104      	movs	r1, #4
    89d2:	47a0      	blx	r4
	return user_op->status;
    89d4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    89d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    89da:	2001      	movs	r0, #1
}
    89dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    89e0:	200007c4 	.word	0x200007c4

000089e4 <ticker_job_sched>:
{
    89e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    89e8:	4c08      	ldr	r4, [pc, #32]	; (8a0c <ticker_job_sched+0x28>)
    89ea:	252c      	movs	r5, #44	; 0x2c
    89ec:	fb05 4300 	mla	r3, r5, r0, r4
{
    89f0:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    89f2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    89f4:	6a1b      	ldr	r3, [r3, #32]
    89f6:	4608      	mov	r0, r1
    89f8:	4798      	blx	r3
    89fa:	fb06 4305 	mla	r3, r6, r5, r4
    89fe:	46bc      	mov	ip, r7
    8a00:	2200      	movs	r2, #0
    8a02:	2104      	movs	r1, #4
}
    8a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8a08:	4760      	bx	ip
    8a0a:	bf00      	nop
    8a0c:	200007c4 	.word	0x200007c4

00008a10 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    8a10:	f00a bb72 	b.w	130f8 <cntr_cnt_get>

00008a14 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8a14:	1a40      	subs	r0, r0, r1
}
    8a16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8a1a:	4770      	bx	lr

00008a1c <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    8a1c:	b508      	push	{r3, lr}
    8a1e:	4603      	mov	r3, r0
	if (addr_type > 1) {
    8a20:	2b01      	cmp	r3, #1
{
    8a22:	4608      	mov	r0, r1
	if (addr_type > 1) {
    8a24:	d80e      	bhi.n	8a44 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    8a26:	b133      	cbz	r3, 8a36 <ll_addr_get+0x1a>
		if (bdaddr) {
    8a28:	b119      	cbz	r1, 8a32 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    8a2a:	2206      	movs	r2, #6
    8a2c:	4906      	ldr	r1, [pc, #24]	; (8a48 <ll_addr_get+0x2c>)
    8a2e:	f7f9 fa1f 	bl	1e70 <memcpy>
		}

		return rnd_addr;
    8a32:	4805      	ldr	r0, [pc, #20]	; (8a48 <ll_addr_get+0x2c>)
    8a34:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    8a36:	b119      	cbz	r1, 8a40 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    8a38:	2206      	movs	r2, #6
    8a3a:	4904      	ldr	r1, [pc, #16]	; (8a4c <ll_addr_get+0x30>)
    8a3c:	f7f9 fa18 	bl	1e70 <memcpy>
	}

	return pub_addr;
    8a40:	4802      	ldr	r0, [pc, #8]	; (8a4c <ll_addr_get+0x30>)
}
    8a42:	bd08      	pop	{r3, pc}
		return NULL;
    8a44:	2000      	movs	r0, #0
    8a46:	bd08      	pop	{r3, pc}
    8a48:	20000822 	.word	0x20000822
    8a4c:	2000081c 	.word	0x2000081c

00008a50 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    8a50:	b570      	push	{r4, r5, r6, lr}
    8a52:	4606      	mov	r6, r0
    8a54:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    8a56:	f008 fb53 	bl	11100 <ll_adv_is_enabled>
    8a5a:	4604      	mov	r4, r0
    8a5c:	b110      	cbz	r0, 8a64 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    8a5e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    8a60:	4620      	mov	r0, r4
    8a62:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    8a64:	f008 fb60 	bl	11128 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    8a68:	f010 0f06 	tst.w	r0, #6
    8a6c:	d1f7      	bne.n	8a5e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    8a6e:	2206      	movs	r2, #6
    8a70:	4629      	mov	r1, r5
	if (addr_type) {
    8a72:	b11e      	cbz	r6, 8a7c <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    8a74:	4802      	ldr	r0, [pc, #8]	; (8a80 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    8a76:	f7f9 f9fb 	bl	1e70 <memcpy>
    8a7a:	e7f1      	b.n	8a60 <ll_addr_set+0x10>
    8a7c:	4801      	ldr	r0, [pc, #4]	; (8a84 <ll_addr_set+0x34>)
    8a7e:	e7fa      	b.n	8a76 <ll_addr_set+0x26>
    8a80:	20000822 	.word	0x20000822
    8a84:	2000081c 	.word	0x2000081c

00008a88 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    8a88:	2300      	movs	r3, #0
    8a8a:	7003      	strb	r3, [r0, #0]
	*max = 0;
    8a8c:	700b      	strb	r3, [r1, #0]
    8a8e:	4770      	bx	lr

00008a90 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    8a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8a92:	4607      	mov	r7, r0
    8a94:	460e      	mov	r6, r1
	while (len) {
    8a96:	460c      	mov	r4, r1
    8a98:	1b35      	subs	r5, r6, r4
    8a9a:	443d      	add	r5, r7
    8a9c:	b18c      	cbz	r4, 8ac2 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    8a9e:	f7f8 faa3 	bl	fe8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    8aa2:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    8aa4:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    8aa6:	d907      	bls.n	8ab8 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    8aa8:	2204      	movs	r2, #4
    8aaa:	eb0d 0102 	add.w	r1, sp, r2
    8aae:	4628      	mov	r0, r5
    8ab0:	f7f9 f9de 	bl	1e70 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    8ab4:	3c04      	subs	r4, #4
    8ab6:	e7ef      	b.n	8a98 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    8ab8:	4622      	mov	r2, r4
    8aba:	a901      	add	r1, sp, #4
    8abc:	4628      	mov	r0, r5
    8abe:	f7f9 f9d7 	bl	1e70 <memcpy>
			break;
		}
	}

	return 0;
}
    8ac2:	2000      	movs	r0, #0
    8ac4:	b003      	add	sp, #12
    8ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008ac8 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    8ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));
    8acc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8b64 <bt_encrypt_le+0x9c>
    8ad0:	4e1f      	ldr	r6, [pc, #124]	; (8b50 <bt_encrypt_le+0x88>)
    8ad2:	f8d8 3000 	ldr.w	r3, [r8]
    8ad6:	f8df b090 	ldr.w	fp, [pc, #144]	; 8b68 <bt_encrypt_le+0xa0>
    8ada:	4c1e      	ldr	r4, [pc, #120]	; (8b54 <bt_encrypt_le+0x8c>)
{
    8adc:	b089      	sub	sp, #36	; 0x24
    8ade:	4617      	mov	r7, r2
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));
    8ae0:	461d      	mov	r5, r3
{
    8ae2:	468a      	mov	sl, r1
    8ae4:	4681      	mov	r9, r0
    8ae6:	f00c fb5d 	bl	151a4 <_impl_k_current_get>
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));
    8aea:	2110      	movs	r1, #16
    8aec:	9007      	str	r0, [sp, #28]
    8aee:	4648      	mov	r0, r9
    8af0:	f7f9 fa0e 	bl	1f10 <bt_hex>
    8af4:	2110      	movs	r1, #16
    8af6:	9006      	str	r0, [sp, #24]
    8af8:	4650      	mov	r0, sl
    8afa:	f7f9 fa09 	bl	1f10 <bt_hex>
    8afe:	9a06      	ldr	r2, [sp, #24]
    8b00:	9b07      	ldr	r3, [sp, #28]
    8b02:	9003      	str	r0, [sp, #12]
    8b04:	9202      	str	r2, [sp, #8]
    8b06:	9301      	str	r3, [sp, #4]
    8b08:	4659      	mov	r1, fp
    8b0a:	4633      	mov	r3, r6
    8b0c:	9404      	str	r4, [sp, #16]
    8b0e:	9400      	str	r4, [sp, #0]
    8b10:	4a11      	ldr	r2, [pc, #68]	; (8b58 <bt_encrypt_le+0x90>)
    8b12:	4812      	ldr	r0, [pc, #72]	; (8b5c <bt_encrypt_le+0x94>)
    8b14:	47a8      	blx	r5

	ecb_encrypt(key, plaintext, enc_data, NULL);
    8b16:	463a      	mov	r2, r7
    8b18:	2300      	movs	r3, #0
    8b1a:	4651      	mov	r1, sl
    8b1c:	4648      	mov	r0, r9
    8b1e:	f00a fb1f 	bl	13160 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));
    8b22:	f8d8 8000 	ldr.w	r8, [r8]
    8b26:	f00c fb3d 	bl	151a4 <_impl_k_current_get>
    8b2a:	2110      	movs	r1, #16
    8b2c:	4681      	mov	r9, r0
    8b2e:	4638      	mov	r0, r7
    8b30:	f7f9 f9ee 	bl	1f10 <bt_hex>
    8b34:	9403      	str	r4, [sp, #12]
    8b36:	9002      	str	r0, [sp, #8]
    8b38:	e88d 0210 	stmia.w	sp, {r4, r9}
    8b3c:	4633      	mov	r3, r6
    8b3e:	4a06      	ldr	r2, [pc, #24]	; (8b58 <bt_encrypt_le+0x90>)
    8b40:	4807      	ldr	r0, [pc, #28]	; (8b60 <bt_encrypt_le+0x98>)
    8b42:	4659      	mov	r1, fp
    8b44:	47c0      	blx	r8

	return 0;
}
    8b46:	2000      	movs	r0, #0
    8b48:	b009      	add	sp, #36	; 0x24
    8b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b4e:	bf00      	nop
    8b50:	00018dce 	.word	0x00018dce
    8b54:	000161ba 	.word	0x000161ba
    8b58:	0001697a 	.word	0x0001697a
    8b5c:	00018ddc 	.word	0x00018ddc
    8b60:	00018e05 	.word	0x00018e05
    8b64:	20003a5c 	.word	0x20003a5c
    8b68:	00017a29 	.word	0x00017a29

00008b6c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8b6c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    8b6e:	4802      	ldr	r0, [pc, #8]	; (8b78 <_hci_driver_init+0xc>)
    8b70:	f7fb fc40 	bl	43f4 <bt_hci_driver_register>

	return 0;
}
    8b74:	2000      	movs	r0, #0
    8b76:	bd08      	pop	{r3, pc}
    8b78:	00018e88 	.word	0x00018e88

00008b7c <hci_driver_send>:
{
    8b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_DBG("enter");
    8b80:	4f3f      	ldr	r7, [pc, #252]	; (8c80 <hci_driver_send+0x104>)
    8b82:	4c40      	ldr	r4, [pc, #256]	; (8c84 <hci_driver_send+0x108>)
    8b84:	683d      	ldr	r5, [r7, #0]
{
    8b86:	b087      	sub	sp, #28
    8b88:	4606      	mov	r6, r0
    8b8a:	f00c fb0b 	bl	151a4 <_impl_k_current_get>
	BT_DBG("enter");
    8b8e:	4b3e      	ldr	r3, [pc, #248]	; (8c88 <hci_driver_send+0x10c>)
    8b90:	9001      	str	r0, [sp, #4]
    8b92:	9402      	str	r4, [sp, #8]
    8b94:	9400      	str	r4, [sp, #0]
    8b96:	4a3d      	ldr	r2, [pc, #244]	; (8c8c <hci_driver_send+0x110>)
    8b98:	493d      	ldr	r1, [pc, #244]	; (8c90 <hci_driver_send+0x114>)
    8b9a:	483e      	ldr	r0, [pc, #248]	; (8c94 <hci_driver_send+0x118>)
    8b9c:	47a8      	blx	r5
	if (!buf->len) {
    8b9e:	89b3      	ldrh	r3, [r6, #12]
    8ba0:	46b8      	mov	r8, r7
    8ba2:	4625      	mov	r5, r4
    8ba4:	b96b      	cbnz	r3, 8bc2 <hci_driver_send+0x46>
		BT_ERR("Empty HCI packet");
    8ba6:	9401      	str	r4, [sp, #4]
    8ba8:	9400      	str	r4, [sp, #0]
    8baa:	683c      	ldr	r4, [r7, #0]
    8bac:	4b36      	ldr	r3, [pc, #216]	; (8c88 <hci_driver_send+0x10c>)
    8bae:	4a3a      	ldr	r2, [pc, #232]	; (8c98 <hci_driver_send+0x11c>)
    8bb0:	4937      	ldr	r1, [pc, #220]	; (8c90 <hci_driver_send+0x114>)
    8bb2:	483a      	ldr	r0, [pc, #232]	; (8c9c <hci_driver_send+0x120>)
    8bb4:	47a0      	blx	r4
		return -EINVAL;
    8bb6:	f06f 0415 	mvn.w	r4, #21
}
    8bba:	4620      	mov	r0, r4
    8bbc:	b007      	add	sp, #28
    8bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8bc2:	7d33      	ldrb	r3, [r6, #20]
	switch (type) {
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	d02c      	beq.n	8c22 <hci_driver_send+0xa6>
    8bc8:	2b02      	cmp	r3, #2
    8bca:	d14b      	bne.n	8c64 <hci_driver_send+0xe8>
	err = hci_acl_handle(buf, &evt);
    8bcc:	a905      	add	r1, sp, #20
    8bce:	4630      	mov	r0, r6
    8bd0:	f001 f97a 	bl	9ec8 <hci_acl_handle>
	if (evt) {
    8bd4:	9b05      	ldr	r3, [sp, #20]
	err = hci_acl_handle(buf, &evt);
    8bd6:	4604      	mov	r4, r0
	if (evt) {
    8bd8:	b183      	cbz	r3, 8bfc <hci_driver_send+0x80>
		BT_DBG("Replying with event of %u bytes", evt->len);
    8bda:	683f      	ldr	r7, [r7, #0]
    8bdc:	f00c fae2 	bl	151a4 <_impl_k_current_get>
    8be0:	9b05      	ldr	r3, [sp, #20]
    8be2:	9503      	str	r5, [sp, #12]
    8be4:	899b      	ldrh	r3, [r3, #12]
    8be6:	9302      	str	r3, [sp, #8]
    8be8:	9001      	str	r0, [sp, #4]
    8bea:	9500      	str	r5, [sp, #0]
    8bec:	482c      	ldr	r0, [pc, #176]	; (8ca0 <hci_driver_send+0x124>)
    8bee:	4b2d      	ldr	r3, [pc, #180]	; (8ca4 <hci_driver_send+0x128>)
    8bf0:	4a26      	ldr	r2, [pc, #152]	; (8c8c <hci_driver_send+0x110>)
    8bf2:	4927      	ldr	r1, [pc, #156]	; (8c90 <hci_driver_send+0x114>)
    8bf4:	47b8      	blx	r7
		bt_recv_prio(evt);
    8bf6:	9805      	ldr	r0, [sp, #20]
    8bf8:	f7fb fac4 	bl	4184 <bt_recv_prio>
	if (!err) {
    8bfc:	b91c      	cbnz	r4, 8c06 <hci_driver_send+0x8a>
		net_buf_unref(buf);
    8bfe:	4630      	mov	r0, r6
    8c00:	f00b f8f2 	bl	13de8 <net_buf_unref>
    8c04:	2400      	movs	r4, #0
	BT_DBG("exit: %d", err);
    8c06:	f8d8 6000 	ldr.w	r6, [r8]
    8c0a:	f00c facb 	bl	151a4 <_impl_k_current_get>
    8c0e:	9503      	str	r5, [sp, #12]
    8c10:	9001      	str	r0, [sp, #4]
    8c12:	9402      	str	r4, [sp, #8]
    8c14:	9500      	str	r5, [sp, #0]
    8c16:	4b1c      	ldr	r3, [pc, #112]	; (8c88 <hci_driver_send+0x10c>)
    8c18:	4a1c      	ldr	r2, [pc, #112]	; (8c8c <hci_driver_send+0x110>)
    8c1a:	491d      	ldr	r1, [pc, #116]	; (8c90 <hci_driver_send+0x114>)
    8c1c:	4822      	ldr	r0, [pc, #136]	; (8ca8 <hci_driver_send+0x12c>)
    8c1e:	47b0      	blx	r6
	return err;
    8c20:	e7cb      	b.n	8bba <hci_driver_send+0x3e>
	evt = hci_cmd_handle(buf);
    8c22:	4630      	mov	r0, r6
    8c24:	f000 fbc2 	bl	93ac <hci_cmd_handle>
	if (evt) {
    8c28:	4604      	mov	r4, r0
    8c2a:	2800      	cmp	r0, #0
    8c2c:	d0e7      	beq.n	8bfe <hci_driver_send+0x82>
		hdr = (void *)evt->data;
    8c2e:	6887      	ldr	r7, [r0, #8]
		BT_DBG("Replying with event of %u bytes", evt->len);
    8c30:	f8d8 9000 	ldr.w	r9, [r8]
    8c34:	f00c fab6 	bl	151a4 <_impl_k_current_get>
    8c38:	9503      	str	r5, [sp, #12]
    8c3a:	89a3      	ldrh	r3, [r4, #12]
    8c3c:	9302      	str	r3, [sp, #8]
    8c3e:	9001      	str	r0, [sp, #4]
    8c40:	4a12      	ldr	r2, [pc, #72]	; (8c8c <hci_driver_send+0x110>)
    8c42:	9500      	str	r5, [sp, #0]
    8c44:	4b19      	ldr	r3, [pc, #100]	; (8cac <hci_driver_send+0x130>)
    8c46:	4912      	ldr	r1, [pc, #72]	; (8c90 <hci_driver_send+0x114>)
    8c48:	4815      	ldr	r0, [pc, #84]	; (8ca0 <hci_driver_send+0x124>)
    8c4a:	47c8      	blx	r9
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    8c4c:	783a      	ldrb	r2, [r7, #0]
    8c4e:	2a13      	cmp	r2, #19
    8c50:	d812      	bhi.n	8c78 <hci_driver_send+0xfc>
    8c52:	2301      	movs	r3, #1
    8c54:	4093      	lsls	r3, r2
    8c56:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    8c5a:	d00d      	beq.n	8c78 <hci_driver_send+0xfc>
			bt_recv_prio(evt);
    8c5c:	4620      	mov	r0, r4
    8c5e:	f7fb fa91 	bl	4184 <bt_recv_prio>
    8c62:	e7cc      	b.n	8bfe <hci_driver_send+0x82>
	switch (type) {
    8c64:	9301      	str	r3, [sp, #4]
		BT_ERR("Unknown HCI type %u", type);
    8c66:	9402      	str	r4, [sp, #8]
    8c68:	9400      	str	r4, [sp, #0]
    8c6a:	683c      	ldr	r4, [r7, #0]
    8c6c:	4b06      	ldr	r3, [pc, #24]	; (8c88 <hci_driver_send+0x10c>)
    8c6e:	4a0a      	ldr	r2, [pc, #40]	; (8c98 <hci_driver_send+0x11c>)
    8c70:	4907      	ldr	r1, [pc, #28]	; (8c90 <hci_driver_send+0x114>)
    8c72:	480f      	ldr	r0, [pc, #60]	; (8cb0 <hci_driver_send+0x134>)
    8c74:	47a0      	blx	r4
    8c76:	e79e      	b.n	8bb6 <hci_driver_send+0x3a>
			bt_recv(evt);
    8c78:	4620      	mov	r0, r4
    8c7a:	f7fa fdc3 	bl	3804 <bt_recv>
    8c7e:	e7be      	b.n	8bfe <hci_driver_send+0x82>
    8c80:	20003a5c 	.word	0x20003a5c
    8c84:	000161ba 	.word	0x000161ba
    8c88:	00018e65 	.word	0x00018e65
    8c8c:	0001697a 	.word	0x0001697a
    8c90:	00017a29 	.word	0x00017a29
    8c94:	00018ee7 	.word	0x00018ee7
    8c98:	000179e1 	.word	0x000179e1
    8c9c:	00018f02 	.word	0x00018f02
    8ca0:	00018f23 	.word	0x00018f23
    8ca4:	00018e5a 	.word	0x00018e5a
    8ca8:	00018f7c 	.word	0x00018f7c
    8cac:	00018e4f 	.word	0x00018e4f
    8cb0:	00018f58 	.word	0x00018f58

00008cb4 <recv_thread>:
{
    8cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_DBG("blocking");
    8cb8:	4f41      	ldr	r7, [pc, #260]	; (8dc0 <recv_thread+0x10c>)
    8cba:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8dec <recv_thread+0x138>
    8cbe:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8de0 <recv_thread+0x12c>
{
    8cc2:	b089      	sub	sp, #36	; 0x24
		BT_DBG("blocking");
    8cc4:	4e3f      	ldr	r6, [pc, #252]	; (8dc4 <recv_thread+0x110>)
    8cc6:	4c40      	ldr	r4, [pc, #256]	; (8dc8 <recv_thread+0x114>)
    8cc8:	6835      	ldr	r5, [r6, #0]
    8cca:	f00c fa6b 	bl	151a4 <_impl_k_current_get>
    8cce:	463b      	mov	r3, r7
    8cd0:	4642      	mov	r2, r8
    8cd2:	9001      	str	r0, [sp, #4]
    8cd4:	4649      	mov	r1, r9
    8cd6:	483d      	ldr	r0, [pc, #244]	; (8dcc <recv_thread+0x118>)
    8cd8:	9402      	str	r4, [sp, #8]
    8cda:	9400      	str	r4, [sp, #0]
    8cdc:	47a8      	blx	r5
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    8cde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8ce2:	483b      	ldr	r0, [pc, #236]	; (8dd0 <recv_thread+0x11c>)
    8ce4:	f00b ff1c 	bl	14b20 <_impl_k_queue_get>
		BT_DBG("unblocked");
    8ce8:	6835      	ldr	r5, [r6, #0]
    8cea:	4682      	mov	sl, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8cec:	f00c fa5a 	bl	151a4 <_impl_k_current_get>
    8cf0:	9402      	str	r4, [sp, #8]
    8cf2:	9001      	str	r0, [sp, #4]
    8cf4:	9400      	str	r4, [sp, #0]
    8cf6:	463b      	mov	r3, r7
    8cf8:	4642      	mov	r2, r8
    8cfa:	4649      	mov	r1, r9
    8cfc:	4835      	ldr	r0, [pc, #212]	; (8dd4 <recv_thread+0x120>)
    8cfe:	47a8      	blx	r5
    8d00:	46b3      	mov	fp, r6
    8d02:	4625      	mov	r5, r4
		if (node_rx && !buf) {
    8d04:	f1ba 0f00 	cmp.w	sl, #0
    8d08:	d048      	beq.n	8d9c <recv_thread+0xe8>
	s8_t class = hci_get_class(node_rx);
    8d0a:	4650      	mov	r0, sl
    8d0c:	f001 fd82 	bl	a814 <hci_get_class>
	switch (class) {
    8d10:	1e03      	subs	r3, r0, #0
    8d12:	f8cd a01c 	str.w	sl, [sp, #28]
    8d16:	db03      	blt.n	8d20 <recv_thread+0x6c>
    8d18:	2b02      	cmp	r3, #2
    8d1a:	dd10      	ble.n	8d3e <recv_thread+0x8a>
    8d1c:	2b03      	cmp	r3, #3
    8d1e:	d040      	beq.n	8da2 <recv_thread+0xee>
		LL_ASSERT(0);
    8d20:	9501      	str	r5, [sp, #4]
    8d22:	9500      	str	r5, [sp, #0]
    8d24:	f8db 4000 	ldr.w	r4, [fp]
    8d28:	4b2b      	ldr	r3, [pc, #172]	; (8dd8 <recv_thread+0x124>)
    8d2a:	4a2c      	ldr	r2, [pc, #176]	; (8ddc <recv_thread+0x128>)
    8d2c:	492c      	ldr	r1, [pc, #176]	; (8de0 <recv_thread+0x12c>)
    8d2e:	482d      	ldr	r0, [pc, #180]	; (8de4 <recv_thread+0x130>)
    8d30:	47a0      	blx	r4
    8d32:	4040      	eors	r0, r0
    8d34:	f380 8811 	msr	BASEPRI, r0
    8d38:	f04f 0004 	mov.w	r0, #4
    8d3c:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    8d3e:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    8d40:	bf0e      	itee	eq
    8d42:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8d44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8d48:	2001      	movne	r0, #1
    8d4a:	f7fb fc65 	bl	4618 <bt_buf_get_rx>
    8d4e:	4604      	mov	r4, r0
		if (buf) {
    8d50:	b118      	cbz	r0, 8d5a <recv_thread+0xa6>
			hci_evt_encode(node_rx, buf);
    8d52:	4601      	mov	r1, r0
    8d54:	9807      	ldr	r0, [sp, #28]
    8d56:	f001 f991 	bl	a07c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    8d5a:	9b07      	ldr	r3, [sp, #28]
    8d5c:	2100      	movs	r1, #0
    8d5e:	88d8      	ldrh	r0, [r3, #6]
    8d60:	f008 fe50 	bl	11a04 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    8d64:	a808      	add	r0, sp, #32
    8d66:	2200      	movs	r2, #0
    8d68:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    8d6c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    8d6e:	f008 fdd1 	bl	11914 <ll_rx_mem_release>
		if (buf) {
    8d72:	b19c      	cbz	r4, 8d9c <recv_thread+0xe8>
			if (buf->len) {
    8d74:	89a3      	ldrh	r3, [r4, #12]
    8d76:	b1f3      	cbz	r3, 8db6 <recv_thread+0x102>
				BT_DBG("Packet in: type:%u len:%u",
    8d78:	6836      	ldr	r6, [r6, #0]
    8d7a:	f00c fa13 	bl	151a4 <_impl_k_current_get>
    8d7e:	9504      	str	r5, [sp, #16]
    8d80:	89a3      	ldrh	r3, [r4, #12]
    8d82:	9303      	str	r3, [sp, #12]
    8d84:	7d23      	ldrb	r3, [r4, #20]
    8d86:	9302      	str	r3, [sp, #8]
    8d88:	9001      	str	r0, [sp, #4]
    8d8a:	9500      	str	r5, [sp, #0]
    8d8c:	4816      	ldr	r0, [pc, #88]	; (8de8 <recv_thread+0x134>)
    8d8e:	463b      	mov	r3, r7
    8d90:	4642      	mov	r2, r8
    8d92:	4649      	mov	r1, r9
    8d94:	47b0      	blx	r6
				bt_recv(buf);
    8d96:	4620      	mov	r0, r4
    8d98:	f7fa fd34 	bl	3804 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    8d9c:	f00c f9b2 	bl	15104 <_impl_k_yield>
    8da0:	e790      	b.n	8cc4 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    8da2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8da6:	f7fb fc37 	bl	4618 <bt_buf_get_rx>
    8daa:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    8dac:	4601      	mov	r1, r0
    8dae:	9807      	ldr	r0, [sp, #28]
    8db0:	f001 f922 	bl	9ff8 <hci_acl_encode>
    8db4:	e7d1      	b.n	8d5a <recv_thread+0xa6>
				net_buf_unref(buf);
    8db6:	4620      	mov	r0, r4
    8db8:	f00b f816 	bl	13de8 <net_buf_unref>
    8dbc:	e7ee      	b.n	8d9c <recv_thread+0xe8>
    8dbe:	bf00      	nop
    8dc0:	00018e43 	.word	0x00018e43
    8dc4:	20003a5c 	.word	0x20003a5c
    8dc8:	000161ba 	.word	0x000161ba
    8dcc:	0001902c 	.word	0x0001902c
    8dd0:	20003f1c 	.word	0x20003f1c
    8dd4:	0001904a 	.word	0x0001904a
    8dd8:	00018e37 	.word	0x00018e37
    8ddc:	000179e1 	.word	0x000179e1
    8de0:	00017a29 	.word	0x00017a29
    8de4:	00017955 	.word	0x00017955
    8de8:	00019069 	.word	0x00019069
    8dec:	0001697a 	.word	0x0001697a

00008df0 <prio_recv_thread>:
{
    8df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8df4:	4e2e      	ldr	r6, [pc, #184]	; (8eb0 <prio_recv_thread+0xc0>)
    8df6:	4c2f      	ldr	r4, [pc, #188]	; (8eb4 <prio_recv_thread+0xc4>)
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
    8df8:	4d2f      	ldr	r5, [pc, #188]	; (8eb8 <prio_recv_thread+0xc8>)
{
    8dfa:	b089      	sub	sp, #36	; 0x24
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8dfc:	f10d 011a 	add.w	r1, sp, #26
    8e00:	a807      	add	r0, sp, #28
    8e02:	f008 fd4f 	bl	118a4 <ll_rx_get>
    8e06:	4607      	mov	r7, r0
    8e08:	b9a0      	cbnz	r0, 8e34 <prio_recv_thread+0x44>
		if (node_rx) {
    8e0a:	9b07      	ldr	r3, [sp, #28]
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d032      	beq.n	8e76 <prio_recv_thread+0x86>
			ll_rx_dequeue();
    8e10:	f009 f830 	bl	11e74 <ll_rx_dequeue>
			BT_DBG("RX node enqueue");
    8e14:	6837      	ldr	r7, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8e16:	f00c f9c5 	bl	151a4 <_impl_k_current_get>
    8e1a:	9402      	str	r4, [sp, #8]
    8e1c:	9001      	str	r0, [sp, #4]
    8e1e:	9400      	str	r4, [sp, #0]
    8e20:	462b      	mov	r3, r5
    8e22:	4a26      	ldr	r2, [pc, #152]	; (8ebc <prio_recv_thread+0xcc>)
    8e24:	4926      	ldr	r1, [pc, #152]	; (8ec0 <prio_recv_thread+0xd0>)
    8e26:	4827      	ldr	r0, [pc, #156]	; (8ec4 <prio_recv_thread+0xd4>)
    8e28:	47b8      	blx	r7
			k_fifo_put(&recv_fifo, node_rx);
    8e2a:	9907      	ldr	r1, [sp, #28]
    8e2c:	4826      	ldr	r0, [pc, #152]	; (8ec8 <prio_recv_thread+0xd8>)
    8e2e:	f00b fe3f 	bl	14ab0 <k_queue_append>
    8e32:	e7e3      	b.n	8dfc <prio_recv_thread+0xc>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8e38:	2001      	movs	r0, #1
    8e3a:	f7fb fbed 	bl	4618 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8e3e:	463a      	mov	r2, r7
    8e40:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8e44:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8e46:	f001 fcd1 	bl	a7ec <hci_num_cmplt_encode>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
    8e4a:	f8d6 9000 	ldr.w	r9, [r6]
    8e4e:	f00c f9a9 	bl	151a4 <_impl_k_current_get>
    8e52:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8e56:	9302      	str	r3, [sp, #8]
    8e58:	9001      	str	r0, [sp, #4]
    8e5a:	462b      	mov	r3, r5
    8e5c:	4a17      	ldr	r2, [pc, #92]	; (8ebc <prio_recv_thread+0xcc>)
    8e5e:	4918      	ldr	r1, [pc, #96]	; (8ec0 <prio_recv_thread+0xd0>)
    8e60:	9404      	str	r4, [sp, #16]
    8e62:	9703      	str	r7, [sp, #12]
    8e64:	9400      	str	r4, [sp, #0]
    8e66:	4819      	ldr	r0, [pc, #100]	; (8ecc <prio_recv_thread+0xdc>)
    8e68:	47c8      	blx	r9
			bt_recv_prio(buf);
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7fb f98a 	bl	4184 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    8e70:	f00c f948 	bl	15104 <_impl_k_yield>
    8e74:	e7c2      	b.n	8dfc <prio_recv_thread+0xc>
		BT_DBG("sem take...");
    8e76:	6837      	ldr	r7, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8e78:	f00c f994 	bl	151a4 <_impl_k_current_get>
    8e7c:	462b      	mov	r3, r5
    8e7e:	4a0f      	ldr	r2, [pc, #60]	; (8ebc <prio_recv_thread+0xcc>)
    8e80:	9001      	str	r0, [sp, #4]
    8e82:	9402      	str	r4, [sp, #8]
    8e84:	9400      	str	r4, [sp, #0]
    8e86:	490e      	ldr	r1, [pc, #56]	; (8ec0 <prio_recv_thread+0xd0>)
    8e88:	4811      	ldr	r0, [pc, #68]	; (8ed0 <prio_recv_thread+0xe0>)
    8e8a:	47b8      	blx	r7
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8e8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8e90:	4810      	ldr	r0, [pc, #64]	; (8ed4 <prio_recv_thread+0xe4>)
    8e92:	f00c f9e3 	bl	1525c <_impl_k_sem_take>
		BT_DBG("sem taken");
    8e96:	6837      	ldr	r7, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8e98:	f00c f984 	bl	151a4 <_impl_k_current_get>
    8e9c:	9402      	str	r4, [sp, #8]
    8e9e:	9001      	str	r0, [sp, #4]
    8ea0:	9400      	str	r4, [sp, #0]
    8ea2:	462b      	mov	r3, r5
    8ea4:	4a05      	ldr	r2, [pc, #20]	; (8ebc <prio_recv_thread+0xcc>)
    8ea6:	4906      	ldr	r1, [pc, #24]	; (8ec0 <prio_recv_thread+0xd0>)
    8ea8:	480b      	ldr	r0, [pc, #44]	; (8ed8 <prio_recv_thread+0xe8>)
    8eaa:	47b8      	blx	r7
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8eac:	e7a6      	b.n	8dfc <prio_recv_thread+0xc>
    8eae:	bf00      	nop
    8eb0:	20003a5c 	.word	0x20003a5c
    8eb4:	000161ba 	.word	0x000161ba
    8eb8:	00018e26 	.word	0x00018e26
    8ebc:	0001697a 	.word	0x0001697a
    8ec0:	00017a29 	.word	0x00017a29
    8ec4:	00018fc7 	.word	0x00018fc7
    8ec8:	20003f1c 	.word	0x20003f1c
    8ecc:	00018f9a 	.word	0x00018f9a
    8ed0:	00018fec 	.word	0x00018fec
    8ed4:	20003f04 	.word	0x20003f04
    8ed8:	0001900d 	.word	0x0001900d

00008edc <hci_driver_open>:
{
    8edc:	b570      	push	{r4, r5, r6, lr}
	err = ll_init(&sem_prio_recv);
    8ede:	4820      	ldr	r0, [pc, #128]	; (8f60 <hci_driver_open+0x84>)
    8ee0:	4e20      	ldr	r6, [pc, #128]	; (8f64 <hci_driver_open+0x88>)
    8ee2:	4d21      	ldr	r5, [pc, #132]	; (8f68 <hci_driver_open+0x8c>)
{
    8ee4:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    8ee6:	f009 f8af 	bl	12048 <ll_init>
	if (err) {
    8eea:	4604      	mov	r4, r0
    8eec:	b158      	cbz	r0, 8f06 <hci_driver_open+0x2a>
		BT_ERR("LL initialization failed: %u", err);
    8eee:	9001      	str	r0, [sp, #4]
    8ef0:	9502      	str	r5, [sp, #8]
    8ef2:	9500      	str	r5, [sp, #0]
    8ef4:	6835      	ldr	r5, [r6, #0]
    8ef6:	4b1d      	ldr	r3, [pc, #116]	; (8f6c <hci_driver_open+0x90>)
    8ef8:	4a1d      	ldr	r2, [pc, #116]	; (8f70 <hci_driver_open+0x94>)
    8efa:	491e      	ldr	r1, [pc, #120]	; (8f74 <hci_driver_open+0x98>)
    8efc:	481e      	ldr	r0, [pc, #120]	; (8f78 <hci_driver_open+0x9c>)
    8efe:	47a8      	blx	r5
}
    8f00:	4620      	mov	r0, r4
    8f02:	b006      	add	sp, #24
    8f04:	bd70      	pop	{r4, r5, r6, pc}
	hci_init(NULL);
    8f06:	f001 fc9d 	bl	a844 <hci_init>

    8f0a:	f06f 0309 	mvn.w	r3, #9
    8f0e:	9303      	str	r3, [sp, #12]
    8f10:	9405      	str	r4, [sp, #20]
    8f12:	9404      	str	r4, [sp, #16]
    8f14:	9402      	str	r4, [sp, #8]
    8f16:	9401      	str	r4, [sp, #4]
    8f18:	9400      	str	r4, [sp, #0]
    8f1a:	4b18      	ldr	r3, [pc, #96]	; (8f7c <hci_driver_open+0xa0>)
    8f1c:	4918      	ldr	r1, [pc, #96]	; (8f80 <hci_driver_open+0xa4>)
    8f1e:	4819      	ldr	r0, [pc, #100]	; (8f84 <hci_driver_open+0xa8>)
    8f20:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    8f24:	f00c fb8e 	bl	15644 <_impl_k_thread_create>
    8f28:	f06f 0307 	mvn.w	r3, #7
    8f2c:	9303      	str	r3, [sp, #12]
    8f2e:	f240 522c 	movw	r2, #1324	; 0x52c
    8f32:	4b15      	ldr	r3, [pc, #84]	; (8f88 <hci_driver_open+0xac>)
    8f34:	4915      	ldr	r1, [pc, #84]	; (8f8c <hci_driver_open+0xb0>)
    8f36:	9405      	str	r4, [sp, #20]
    8f38:	9404      	str	r4, [sp, #16]
    8f3a:	9402      	str	r4, [sp, #8]
    8f3c:	9401      	str	r4, [sp, #4]
    8f3e:	9400      	str	r4, [sp, #0]
    8f40:	4813      	ldr	r0, [pc, #76]	; (8f90 <hci_driver_open+0xb4>)
    8f42:	f00c fb7f 	bl	15644 <_impl_k_thread_create>
	BT_DBG("Success.");
    8f46:	6836      	ldr	r6, [r6, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    8f48:	f00c f92c 	bl	151a4 <_impl_k_current_get>
    8f4c:	9502      	str	r5, [sp, #8]
    8f4e:	9001      	str	r0, [sp, #4]
    8f50:	9500      	str	r5, [sp, #0]
    8f52:	4b06      	ldr	r3, [pc, #24]	; (8f6c <hci_driver_open+0x90>)
    8f54:	4a0f      	ldr	r2, [pc, #60]	; (8f94 <hci_driver_open+0xb8>)
    8f56:	4907      	ldr	r1, [pc, #28]	; (8f74 <hci_driver_open+0x98>)
    8f58:	480f      	ldr	r0, [pc, #60]	; (8f98 <hci_driver_open+0xbc>)
    8f5a:	47b0      	blx	r6
    8f5c:	e7d0      	b.n	8f00 <hci_driver_open+0x24>
    8f5e:	bf00      	nop
    8f60:	20003f04 	.word	0x20003f04
    8f64:	20003a5c 	.word	0x20003a5c
    8f68:	000161ba 	.word	0x000161ba
    8f6c:	00018e75 	.word	0x00018e75
    8f70:	000179e1 	.word	0x000179e1
    8f74:	00017a29 	.word	0x00017a29
    8f78:	00018e9c 	.word	0x00018e9c
    8f7c:	00008df1 	.word	0x00008df1
    8f80:	200020c0 	.word	0x200020c0
    8f84:	200018a0 	.word	0x200018a0
    8f88:	00008cb5 	.word	0x00008cb5
    8f8c:	200023b0 	.word	0x200023b0
    8f90:	20001830 	.word	0x20001830
    8f94:	0001697a 	.word	0x0001697a
    8f98:	00018ec9 	.word	0x00018ec9

00008f9c <sys_put_le32>:
	dst[1] = val >> 8;
    8f9c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    8fa0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    8fa2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    8fa4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    8fa6:	0a00      	lsrs	r0, r0, #8
    8fa8:	704b      	strb	r3, [r1, #1]
    8faa:	70c8      	strb	r0, [r1, #3]
    8fac:	4770      	bx	lr

00008fae <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    8fae:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    8fb0:	3008      	adds	r0, #8
{
    8fb2:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    8fb4:	2102      	movs	r1, #2
{
    8fb6:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    8fb8:	f00a ff48 	bl	13e4c <net_buf_simple_add>
	hdr->evt = evt;
    8fbc:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    8fbe:	7044      	strb	r4, [r0, #1]
    8fc0:	bd38      	pop	{r3, r4, r5, pc}
	...

00008fc4 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    8fc4:	b538      	push	{r3, r4, r5, lr}
    8fc6:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8fcc:	f7fb fb4c 	bl	4668 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8fd0:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8fd2:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8fd4:	210f      	movs	r1, #15
    8fd6:	f7ff ffea 	bl	8fae <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8fda:	2104      	movs	r1, #4
    8fdc:	f104 0008 	add.w	r0, r4, #8
    8fe0:	f00a ff34 	bl	13e4c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    8fe4:	2301      	movs	r3, #1
    8fe6:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8fe8:	4b02      	ldr	r3, [pc, #8]	; (8ff4 <cmd_status+0x30>)
	cs->status = status;
    8fea:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8fec:	881b      	ldrh	r3, [r3, #0]
    8fee:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8ff0:	4620      	mov	r0, r4
    8ff2:	bd38      	pop	{r3, r4, r5, pc}
    8ff4:	20000828 	.word	0x20000828

00008ff8 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8ff8:	b570      	push	{r4, r5, r6, lr}
    8ffa:	4604      	mov	r4, r0
    8ffc:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8ffe:	3201      	adds	r2, #1
{
    9000:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    9002:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    9004:	b2d2      	uxtb	r2, r2
    9006:	213e      	movs	r1, #62	; 0x3e
    9008:	f7ff ffd1 	bl	8fae <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    900c:	2101      	movs	r1, #1
    900e:	4620      	mov	r0, r4
    9010:	f00a ff1c 	bl	13e4c <net_buf_simple_add>
	me->subevent = subevt;
    9014:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    9016:	4629      	mov	r1, r5
    9018:	4620      	mov	r0, r4
}
    901a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    901e:	f00a bf15 	b.w	13e4c <net_buf_simple_add>
	...

00009024 <cmd_complete>:
{
    9024:	b538      	push	{r3, r4, r5, lr}
    9026:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    9028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    902c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    902e:	f7fb fb1b 	bl	4668 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    9032:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    9034:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    9036:	b2d2      	uxtb	r2, r2
    9038:	210e      	movs	r1, #14
    903a:	f7ff ffb8 	bl	8fae <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    903e:	6820      	ldr	r0, [r4, #0]
    9040:	2103      	movs	r1, #3
    9042:	3008      	adds	r0, #8
    9044:	f00a ff02 	bl	13e4c <net_buf_simple_add>
	cc->ncmd = 1;
    9048:	2301      	movs	r3, #1
    904a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    904c:	4b05      	ldr	r3, [pc, #20]	; (9064 <cmd_complete+0x40>)
    904e:	881b      	ldrh	r3, [r3, #0]
    9050:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    9054:	6820      	ldr	r0, [r4, #0]
    9056:	4629      	mov	r1, r5
    9058:	3008      	adds	r0, #8
}
    905a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    905e:	f00a bef5 	b.w	13e4c <net_buf_simple_add>
    9062:	bf00      	nop
    9064:	20000828 	.word	0x20000828

00009068 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    9068:	4b0e      	ldr	r3, [pc, #56]	; (90a4 <encrypt_change+0x3c>)
{
    906a:	b570      	push	{r4, r5, r6, lr}
    906c:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    906e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9072:	2300      	movs	r3, #0
    9074:	f002 0280 	and.w	r2, r2, #128	; 0x80
    9078:	4313      	orrs	r3, r2
{
    907a:	4604      	mov	r4, r0
    907c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    907e:	d010      	beq.n	90a2 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    9080:	2204      	movs	r2, #4
    9082:	2108      	movs	r1, #8
    9084:	4628      	mov	r0, r5
    9086:	f7ff ff92 	bl	8fae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    908a:	2104      	movs	r1, #4
    908c:	f105 0008 	add.w	r0, r5, #8
    9090:	f00a fedc 	bl	13e4c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    9094:	fab4 f384 	clz	r3, r4
    9098:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    909a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    909c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    90a0:	70c3      	strb	r3, [r0, #3]
    90a2:	bd70      	pop	{r4, r5, r6, pc}
    90a4:	20003d28 	.word	0x20003d28

000090a8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    90a8:	b570      	push	{r4, r5, r6, lr}
    90aa:	4604      	mov	r4, r0
    90ac:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    90ae:	4b13      	ldr	r3, [pc, #76]	; (90fc <le_remote_feat_complete+0x54>)
{
    90b0:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    90b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    90b6:	2200      	movs	r2, #0
    90b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    90bc:	4313      	orrs	r3, r2
{
    90be:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    90c0:	d01b      	beq.n	90fa <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    90c2:	4b0f      	ldr	r3, [pc, #60]	; (9100 <le_remote_feat_complete+0x58>)
    90c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    90c8:	2300      	movs	r3, #0
    90ca:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    90ce:	4313      	orrs	r3, r2
    90d0:	d013      	beq.n	90fa <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    90d2:	220b      	movs	r2, #11
    90d4:	2104      	movs	r1, #4
    90d6:	f7ff ff8f 	bl	8ff8 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    90da:	2208      	movs	r2, #8
	sep->status = status;
    90dc:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    90de:	f8a0 6001 	strh.w	r6, [r0, #1]
    90e2:	3003      	adds	r0, #3
	if (!status) {
    90e4:	b924      	cbnz	r4, 90f0 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    90e6:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    90e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    90ec:	f7f8 bec0 	b.w	1e70 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    90f0:	2100      	movs	r1, #0
}
    90f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    90f6:	f7f8 bee7 	b.w	1ec8 <memset>
    90fa:	bd70      	pop	{r4, r5, r6, pc}
    90fc:	20003d28 	.word	0x20003d28
    9100:	20003d30 	.word	0x20003d30

00009104 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    9104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9108:	4605      	mov	r5, r0
    910a:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    910c:	4b46      	ldr	r3, [pc, #280]	; (9228 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    910e:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9110:	e9d3 2300 	ldrd	r2, r3, [r3]
    9114:	f240 2801 	movw	r8, #513	; 0x201
    9118:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    911c:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9120:	ea03 0309 	and.w	r3, r3, r9
    9124:	ea02 0208 	and.w	r2, r2, r8
    9128:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    912a:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    912c:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9130:	d077      	beq.n	9222 <le_conn_complete.part.39+0x11e>
	if (!status) {
    9132:	2d00      	cmp	r5, #0
    9134:	d150      	bne.n	91d8 <le_conn_complete.part.39+0xd4>
		conn_count++;
    9136:	4a3d      	ldr	r2, [pc, #244]	; (922c <le_conn_complete.part.39+0x128>)
    9138:	6813      	ldr	r3, [r2, #0]
    913a:	3301      	adds	r3, #1
    913c:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    913e:	ea5a 030b 	orrs.w	r3, sl, fp
    9142:	f101 0803 	add.w	r8, r1, #3
    9146:	d151      	bne.n	91ec <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9148:	2212      	movs	r2, #18
    914a:	2101      	movs	r1, #1
    914c:	f7ff ff54 	bl	8ff8 <meta_evt>
	lecc->status = 0x00;
    9150:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    9152:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    9156:	7863      	ldrb	r3, [r4, #1]
    9158:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    915a:	78a3      	ldrb	r3, [r4, #2]
    915c:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    915e:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9160:	2206      	movs	r2, #6
    9162:	4641      	mov	r1, r8
    9164:	3005      	adds	r0, #5
    9166:	f7f8 fe83 	bl	1e70 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    916a:	8ae3      	ldrh	r3, [r4, #22]
    916c:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    9170:	8b23      	ldrh	r3, [r4, #24]
    9172:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    9176:	8b63      	ldrh	r3, [r4, #26]
    9178:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    917c:	7f23      	ldrb	r3, [r4, #28]
    917e:	747b      	strb	r3, [r7, #17]
    9180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9184:	221e      	movs	r2, #30
    9186:	210a      	movs	r1, #10
    9188:	f7ff ff36 	bl	8ff8 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    918c:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    918e:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    9190:	2100      	movs	r1, #0
    9192:	f7f8 fe99 	bl	1ec8 <memset>
		lecc->status = status;
    9196:	7025      	strb	r5, [r4, #0]
    9198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    919c:	7d63      	ldrb	r3, [r4, #21]
    919e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    91a2:	2b40      	cmp	r3, #64	; 0x40
    91a4:	d138      	bne.n	9218 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    91a6:	2206      	movs	r2, #6
    91a8:	f104 0110 	add.w	r1, r4, #16
    91ac:	f7f8 fe60 	bl	1e70 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    91b0:	2206      	movs	r2, #6
    91b2:	f104 0109 	add.w	r1, r4, #9
    91b6:	f107 0011 	add.w	r0, r7, #17
    91ba:	f7f8 fe59 	bl	1e70 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    91be:	8ae3      	ldrh	r3, [r4, #22]
    91c0:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    91c4:	8b23      	ldrh	r3, [r4, #24]
    91c6:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    91ca:	8b63      	ldrh	r3, [r4, #26]
    91cc:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    91d0:	7f23      	ldrb	r3, [r4, #28]
    91d2:	777b      	strb	r3, [r7, #29]
    91d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    91d8:	ea5a 030b 	orrs.w	r3, sl, fp
    91dc:	d1d2      	bne.n	9184 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    91de:	2212      	movs	r2, #18
    91e0:	2101      	movs	r1, #1
    91e2:	f7ff ff09 	bl	8ff8 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    91e6:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    91e8:	4604      	mov	r4, r0
    91ea:	e7d1      	b.n	9190 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    91ec:	221e      	movs	r2, #30
    91ee:	210a      	movs	r1, #10
    91f0:	f7ff ff02 	bl	8ff8 <meta_evt>
		leecc->status = 0x00;
    91f4:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    91f6:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    91fa:	7863      	ldrb	r3, [r4, #1]
    91fc:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    91fe:	78a3      	ldrb	r3, [r4, #2]
    9200:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9202:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    9204:	2206      	movs	r2, #6
    9206:	4641      	mov	r1, r8
    9208:	3005      	adds	r0, #5
    920a:	f7f8 fe31 	bl	1e70 <memcpy>
		if ((radio_cc->own_addr_type) &&
    920e:	7be3      	ldrb	r3, [r4, #15]
    9210:	f107 000b 	add.w	r0, r7, #11
    9214:	2b00      	cmp	r3, #0
    9216:	d1c1      	bne.n	919c <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    9218:	2206      	movs	r2, #6
    921a:	2100      	movs	r1, #0
    921c:	f7f8 fe54 	bl	1ec8 <memset>
    9220:	e7c6      	b.n	91b0 <le_conn_complete.part.39+0xac>
    9222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9226:	bf00      	nop
    9228:	20003d30 	.word	0x20003d30
    922c:	2000082c 	.word	0x2000082c

00009230 <bt_addr_le_to_str.constprop.71>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9230:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    9232:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9234:	b08a      	sub	sp, #40	; 0x28
    9236:	4604      	mov	r4, r0
    9238:	460e      	mov	r6, r1
    923a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    923c:	2b03      	cmp	r3, #3
    923e:	d820      	bhi.n	9282 <bt_addr_le_to_str.constprop.71+0x52>
    9240:	e8df f003 	tbb	[pc, r3]
    9244:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    9248:	4911      	ldr	r1, [pc, #68]	; (9290 <bt_addr_le_to_str.constprop.71+0x60>)
		strcpy(type, "random");
    924a:	4628      	mov	r0, r5
    924c:	f7f8 fddc 	bl	1e08 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    9250:	7862      	ldrb	r2, [r4, #1]
    9252:	9204      	str	r2, [sp, #16]
    9254:	78a2      	ldrb	r2, [r4, #2]
    9256:	9203      	str	r2, [sp, #12]
    9258:	78e2      	ldrb	r2, [r4, #3]
    925a:	9202      	str	r2, [sp, #8]
    925c:	7922      	ldrb	r2, [r4, #4]
    925e:	9201      	str	r2, [sp, #4]
    9260:	7962      	ldrb	r2, [r4, #5]
    9262:	9200      	str	r2, [sp, #0]
    9264:	79a3      	ldrb	r3, [r4, #6]
    9266:	9505      	str	r5, [sp, #20]
    9268:	4a0a      	ldr	r2, [pc, #40]	; (9294 <bt_addr_le_to_str.constprop.71+0x64>)
    926a:	211b      	movs	r1, #27
    926c:	4630      	mov	r0, r6
    926e:	f7f7 fe9b 	bl	fa8 <snprintk>
}
    9272:	b00a      	add	sp, #40	; 0x28
    9274:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    9276:	4908      	ldr	r1, [pc, #32]	; (9298 <bt_addr_le_to_str.constprop.71+0x68>)
    9278:	e7e7      	b.n	924a <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "public id");
    927a:	4908      	ldr	r1, [pc, #32]	; (929c <bt_addr_le_to_str.constprop.71+0x6c>)
    927c:	e7e5      	b.n	924a <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "random id");
    927e:	4908      	ldr	r1, [pc, #32]	; (92a0 <bt_addr_le_to_str.constprop.71+0x70>)
    9280:	e7e3      	b.n	924a <bt_addr_le_to_str.constprop.71+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    9282:	4a08      	ldr	r2, [pc, #32]	; (92a4 <bt_addr_le_to_str.constprop.71+0x74>)
    9284:	210a      	movs	r1, #10
    9286:	4628      	mov	r0, r5
    9288:	f7f7 fe8e 	bl	fa8 <snprintk>
    928c:	e7e0      	b.n	9250 <bt_addr_le_to_str.constprop.71+0x20>
    928e:	bf00      	nop
    9290:	00015ffd 	.word	0x00015ffd
    9294:	00016026 	.word	0x00016026
    9298:	00016004 	.word	0x00016004
    929c:	0001600b 	.word	0x0001600b
    92a0:	00016015 	.word	0x00016015
    92a4:	0001601f 	.word	0x0001601f

000092a8 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    92a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    92ac:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    92ae:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    92b0:	4d33      	ldr	r5, [pc, #204]	; (9380 <le_adv_ext_report.isra.66+0xd8>)
    92b2:	4e34      	ldr	r6, [pc, #208]	; (9384 <le_adv_ext_report.isra.66+0xdc>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    92b4:	b093      	sub	sp, #76	; 0x4c
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92b6:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    92b8:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92ba:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    92bc:	6837      	ldr	r7, [r6, #0]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92be:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    92c0:	b25b      	sxtb	r3, r3
    92c2:	9306      	str	r3, [sp, #24]
    92c4:	7823      	ldrb	r3, [r4, #0]
    92c6:	9003      	str	r0, [sp, #12]
    92c8:	09d9      	lsrs	r1, r3, #7
    92ca:	9105      	str	r1, [sp, #20]
    92cc:	f3c3 1180 	ubfx	r1, r3, #6, #1
    92d0:	f003 030f 	and.w	r3, r3, #15
    92d4:	9104      	str	r1, [sp, #16]
    92d6:	9302      	str	r3, [sp, #8]
    92d8:	9201      	str	r2, [sp, #4]
    92da:	4b2b      	ldr	r3, [pc, #172]	; (9388 <le_adv_ext_report.isra.66+0xe0>)
    92dc:	9500      	str	r5, [sp, #0]
    92de:	4a2b      	ldr	r2, [pc, #172]	; (938c <le_adv_ext_report.isra.66+0xe4>)
    92e0:	492b      	ldr	r1, [pc, #172]	; (9390 <le_adv_ext_report.isra.66+0xe8>)
    92e2:	482c      	ldr	r0, [pc, #176]	; (9394 <le_adv_ext_report.isra.66+0xec>)
    92e4:	47b8      	blx	r7
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    92e6:	7823      	ldrb	r3, [r4, #0]
    92e8:	f003 030f 	and.w	r3, r3, #15
    92ec:	2b07      	cmp	r3, #7
    92ee:	d143      	bne.n	9378 <le_adv_ext_report.isra.66+0xd0>
    92f0:	7863      	ldrb	r3, [r4, #1]
    92f2:	2b00      	cmp	r3, #0
    92f4:	d040      	beq.n	9378 <le_adv_ext_report.isra.66+0xd0>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    92f6:	9503      	str	r5, [sp, #12]
    92f8:	78a3      	ldrb	r3, [r4, #2]
    92fa:	4925      	ldr	r1, [pc, #148]	; (9390 <le_adv_ext_report.isra.66+0xe8>)
    92fc:	9500      	str	r5, [sp, #0]
    92fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    9302:	099b      	lsrs	r3, r3, #6
    9304:	9202      	str	r2, [sp, #8]
    9306:	9301      	str	r3, [sp, #4]
    9308:	6837      	ldr	r7, [r6, #0]
    930a:	4b1f      	ldr	r3, [pc, #124]	; (9388 <le_adv_ext_report.isra.66+0xe0>)
    930c:	4a1f      	ldr	r2, [pc, #124]	; (938c <le_adv_ext_report.isra.66+0xe4>)
    930e:	4822      	ldr	r0, [pc, #136]	; (9398 <le_adv_ext_report.isra.66+0xf0>)
    9310:	47b8      	blx	r7
		if (!p->ext_hdr_len) {
    9312:	78a3      	ldrb	r3, [r4, #2]
    9314:	0699      	lsls	r1, r3, #26
    9316:	d02f      	beq.n	9378 <le_adv_ext_report.isra.66+0xd0>
		if (h->adv_addr) {
    9318:	78e3      	ldrb	r3, [r4, #3]
    931a:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    931c:	f104 0804 	add.w	r8, r4, #4
		if (h->adv_addr) {
    9320:	d51c      	bpl.n	935c <le_adv_ext_report.isra.66+0xb4>
			addr.type = adv->tx_addr;
    9322:	7823      	ldrb	r3, [r4, #0]
    9324:	af12      	add	r7, sp, #72	; 0x48
    9326:	f3c3 1380 	ubfx	r3, r3, #6, #1
    932a:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    932e:	2206      	movs	r2, #6
    9330:	4641      	mov	r1, r8
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9332:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    9336:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    933a:	f7f8 fd99 	bl	1e70 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    933e:	4649      	mov	r1, r9
    9340:	4638      	mov	r0, r7
    9342:	f7ff ff75 	bl	9230 <bt_addr_le_to_str.constprop.71>
			BT_WARN("AdvA: %s", addr_str);
    9346:	9502      	str	r5, [sp, #8]
    9348:	e88d 0220 	stmia.w	sp, {r5, r9}
    934c:	6837      	ldr	r7, [r6, #0]
    934e:	4b0e      	ldr	r3, [pc, #56]	; (9388 <le_adv_ext_report.isra.66+0xe0>)
    9350:	4a0e      	ldr	r2, [pc, #56]	; (938c <le_adv_ext_report.isra.66+0xe4>)
    9352:	490f      	ldr	r1, [pc, #60]	; (9390 <le_adv_ext_report.isra.66+0xe8>)
    9354:	4811      	ldr	r0, [pc, #68]	; (939c <le_adv_ext_report.isra.66+0xf4>)
			ptr += BDADDR_SIZE;
    9356:	f104 080a 	add.w	r8, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    935a:	47b8      	blx	r7
		if (h->tx_pwr) {
    935c:	78e3      	ldrb	r3, [r4, #3]
    935e:	065b      	lsls	r3, r3, #25
    9360:	d50a      	bpl.n	9378 <le_adv_ext_report.isra.66+0xd0>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    9362:	9502      	str	r5, [sp, #8]
    9364:	f998 3000 	ldrsb.w	r3, [r8]
    9368:	9301      	str	r3, [sp, #4]
    936a:	9500      	str	r5, [sp, #0]
    936c:	6834      	ldr	r4, [r6, #0]
    936e:	4b06      	ldr	r3, [pc, #24]	; (9388 <le_adv_ext_report.isra.66+0xe0>)
    9370:	4a06      	ldr	r2, [pc, #24]	; (938c <le_adv_ext_report.isra.66+0xe4>)
    9372:	4907      	ldr	r1, [pc, #28]	; (9390 <le_adv_ext_report.isra.66+0xe8>)
    9374:	480a      	ldr	r0, [pc, #40]	; (93a0 <le_adv_ext_report.isra.66+0xf8>)
    9376:	47a0      	blx	r4
}
    9378:	b013      	add	sp, #76	; 0x4c
    937a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    937e:	bf00      	nop
    9380:	000161ba 	.word	0x000161ba
    9384:	20003a5c 	.word	0x20003a5c
    9388:	000190f6 	.word	0x000190f6
    938c:	00017a64 	.word	0x00017a64
    9390:	00017a29 	.word	0x00017a29
    9394:	0001937b 	.word	0x0001937b
    9398:	000193c8 	.word	0x000193c8
    939c:	000193f9 	.word	0x000193f9
    93a0:	00019412 	.word	0x00019412

000093a4 <sys_get_le64>:
{
    93a4:	4603      	mov	r3, r0
}
    93a6:	6800      	ldr	r0, [r0, #0]
    93a8:	6859      	ldr	r1, [r3, #4]
    93aa:	4770      	bx	lr

000093ac <hci_cmd_handle>:
{
    93ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
    93b0:	8981      	ldrh	r1, [r0, #12]
{
    93b2:	b092      	sub	sp, #72	; 0x48
	struct net_buf *evt = NULL;
    93b4:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    93b6:	2902      	cmp	r1, #2
{
    93b8:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    93ba:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    93bc:	d80d      	bhi.n	93da <hci_cmd_handle+0x2e>
		BT_ERR("No HCI Command header");
    93be:	4bc1      	ldr	r3, [pc, #772]	; (96c4 <hci_cmd_handle+0x318>)
    93c0:	9301      	str	r3, [sp, #4]
    93c2:	9300      	str	r3, [sp, #0]
    93c4:	4bc0      	ldr	r3, [pc, #768]	; (96c8 <hci_cmd_handle+0x31c>)
    93c6:	4ac1      	ldr	r2, [pc, #772]	; (96cc <hci_cmd_handle+0x320>)
    93c8:	681c      	ldr	r4, [r3, #0]
    93ca:	49c1      	ldr	r1, [pc, #772]	; (96d0 <hci_cmd_handle+0x324>)
    93cc:	4bc1      	ldr	r3, [pc, #772]	; (96d4 <hci_cmd_handle+0x328>)
    93ce:	48c2      	ldr	r0, [pc, #776]	; (96d8 <hci_cmd_handle+0x32c>)
		BT_ERR("Invalid HCI CMD packet length");
    93d0:	47a0      	blx	r4
		return NULL;
    93d2:	4628      	mov	r0, r5
}
    93d4:	b012      	add	sp, #72	; 0x48
    93d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	chdr = (void *)cmd->data;
    93da:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    93dc:	4ebf      	ldr	r6, [pc, #764]	; (96dc <hci_cmd_handle+0x330>)
    93de:	781a      	ldrb	r2, [r3, #0]
    93e0:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    93e2:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    93e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    93e8:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    93ea:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    93ec:	d909      	bls.n	9402 <hci_cmd_handle+0x56>
		BT_ERR("Invalid HCI CMD packet length");
    93ee:	4bb5      	ldr	r3, [pc, #724]	; (96c4 <hci_cmd_handle+0x318>)
    93f0:	9301      	str	r3, [sp, #4]
    93f2:	9300      	str	r3, [sp, #0]
    93f4:	4bb4      	ldr	r3, [pc, #720]	; (96c8 <hci_cmd_handle+0x31c>)
    93f6:	4ab5      	ldr	r2, [pc, #724]	; (96cc <hci_cmd_handle+0x320>)
    93f8:	681c      	ldr	r4, [r3, #0]
    93fa:	49b5      	ldr	r1, [pc, #724]	; (96d0 <hci_cmd_handle+0x324>)
    93fc:	4bb5      	ldr	r3, [pc, #724]	; (96d4 <hci_cmd_handle+0x328>)
    93fe:	48b8      	ldr	r0, [pc, #736]	; (96e0 <hci_cmd_handle+0x334>)
    9400:	e7e6      	b.n	93d0 <hci_cmd_handle+0x24>
	net_buf_pull(cmd, sizeof(*chdr));
    9402:	2103      	movs	r1, #3
    9404:	f104 0008 	add.w	r0, r4, #8
    9408:	f00a fd3f 	bl	13e8a <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    940c:	8833      	ldrh	r3, [r6, #0]
    940e:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    9412:	0a9b      	lsrs	r3, r3, #10
    9414:	2b04      	cmp	r3, #4
    9416:	f000 80bd 	beq.w	9594 <hci_cmd_handle+0x1e8>
    941a:	d809      	bhi.n	9430 <hci_cmd_handle+0x84>
    941c:	2b01      	cmp	r3, #1
    941e:	d027      	beq.n	9470 <hci_cmd_handle+0xc4>
    9420:	2b03      	cmp	r3, #3
    9422:	d03c      	beq.n	949e <hci_cmd_handle+0xf2>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    9424:	2101      	movs	r1, #1
    9426:	a807      	add	r0, sp, #28
    9428:	f7ff fdfc 	bl	9024 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    942c:	2301      	movs	r3, #1
    942e:	e2ae      	b.n	998e <hci_cmd_handle+0x5e2>
	switch (BT_OGF(_opcode)) {
    9430:	2b08      	cmp	r3, #8
    9432:	f000 816b 	beq.w	970c <hci_cmd_handle+0x360>
    9436:	2b3f      	cmp	r3, #63	; 0x3f
    9438:	d1f4      	bne.n	9424 <hci_cmd_handle+0x78>
	switch (ocf) {
    943a:	3a01      	subs	r2, #1
    943c:	2a09      	cmp	r2, #9
    943e:	d8f1      	bhi.n	9424 <hci_cmd_handle+0x78>
    9440:	a301      	add	r3, pc, #4	; (adr r3, 9448 <hci_cmd_handle+0x9c>)
    9442:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    9446:	bf00      	nop
    9448:	00009ce1 	.word	0x00009ce1
    944c:	00009d11 	.word	0x00009d11
    9450:	00009d3b 	.word	0x00009d3b
    9454:	00009425 	.word	0x00009425
    9458:	00009425 	.word	0x00009425
    945c:	00009d81 	.word	0x00009d81
    9460:	00009425 	.word	0x00009425
    9464:	00009d53 	.word	0x00009d53
    9468:	00009d8d 	.word	0x00009d8d
    946c:	00009dfb 	.word	0x00009dfb
	switch (ocf) {
    9470:	2a06      	cmp	r2, #6
    9472:	d006      	beq.n	9482 <hci_cmd_handle+0xd6>
    9474:	2a1d      	cmp	r2, #29
    9476:	d1d5      	bne.n	9424 <hci_cmd_handle+0x78>
	handle = sys_le16_to_cpu(cmd->handle);
    9478:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    947a:	8818      	ldrh	r0, [r3, #0]
    947c:	f008 f927 	bl	116ce <ll_version_ind_send>
    9480:	e004      	b.n	948c <hci_cmd_handle+0xe0>
    9482:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    9484:	7899      	ldrb	r1, [r3, #2]
    9486:	8818      	ldrh	r0, [r3, #0]
    9488:	f008 f935 	bl	116f6 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    948c:	2800      	cmp	r0, #0
    948e:	bf14      	ite	ne
    9490:	200c      	movne	r0, #12
    9492:	2000      	moveq	r0, #0
    9494:	f7ff fd96 	bl	8fc4 <cmd_status>
    9498:	9007      	str	r0, [sp, #28]
	return evt;
    949a:	9807      	ldr	r0, [sp, #28]
    949c:	e79a      	b.n	93d4 <hci_cmd_handle+0x28>
	switch (ocf) {
    949e:	2a2d      	cmp	r2, #45	; 0x2d
    94a0:	d03a      	beq.n	9518 <hci_cmd_handle+0x16c>
    94a2:	d820      	bhi.n	94e6 <hci_cmd_handle+0x13a>
    94a4:	2a01      	cmp	r2, #1
    94a6:	d02b      	beq.n	9500 <hci_cmd_handle+0x154>
    94a8:	2a03      	cmp	r2, #3
    94aa:	d1bb      	bne.n	9424 <hci_cmd_handle+0x78>
	dup_count = -1;
    94ac:	4b8d      	ldr	r3, [pc, #564]	; (96e4 <hci_cmd_handle+0x338>)
    94ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    94b2:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    94b4:	4b8c      	ldr	r3, [pc, #560]	; (96e8 <hci_cmd_handle+0x33c>)
    94b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    94ba:	f641 71ff 	movw	r1, #8191	; 0x1fff
    94be:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    94c2:	4b8a      	ldr	r3, [pc, #552]	; (96ec <hci_cmd_handle+0x340>)
    94c4:	2000      	movs	r0, #0
    94c6:	2100      	movs	r1, #0
    94c8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    94cc:	4b88      	ldr	r3, [pc, #544]	; (96f0 <hci_cmd_handle+0x344>)
    94ce:	201f      	movs	r0, #31
    94d0:	2100      	movs	r1, #0
    94d2:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    94d6:	f007 fdc3 	bl	11060 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    94da:	2101      	movs	r1, #1
    94dc:	a807      	add	r0, sp, #28
    94de:	f7ff fda1 	bl	9024 <cmd_complete>
	ccst->status = 0x00;
    94e2:	2300      	movs	r3, #0
    94e4:	e253      	b.n	998e <hci_cmd_handle+0x5e2>
	switch (ocf) {
    94e6:	2a7b      	cmp	r2, #123	; 0x7b
    94e8:	d02c      	beq.n	9544 <hci_cmd_handle+0x198>
    94ea:	2a7c      	cmp	r2, #124	; 0x7c
    94ec:	d041      	beq.n	9572 <hci_cmd_handle+0x1c6>
    94ee:	2a63      	cmp	r2, #99	; 0x63
    94f0:	d198      	bne.n	9424 <hci_cmd_handle+0x78>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    94f2:	68a0      	ldr	r0, [r4, #8]
    94f4:	f7ff ff56 	bl	93a4 <sys_get_le64>
    94f8:	4b7c      	ldr	r3, [pc, #496]	; (96ec <hci_cmd_handle+0x340>)
	le_event_mask = sys_get_le64(cmd->events);
    94fa:	e9c3 0100 	strd	r0, r1, [r3]
    94fe:	e7ec      	b.n	94da <hci_cmd_handle+0x12e>
	event_mask = sys_get_le64(cmd->events);
    9500:	68a0      	ldr	r0, [r4, #8]
    9502:	f7ff ff4f 	bl	93a4 <sys_get_le64>
    9506:	4b78      	ldr	r3, [pc, #480]	; (96e8 <hci_cmd_handle+0x33c>)
    9508:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    950c:	4611      	mov	r1, r2
    950e:	a807      	add	r0, sp, #28
    9510:	f7ff fd88 	bl	9024 <cmd_complete>
	ccst->status = 0x00;
    9514:	7005      	strb	r5, [r0, #0]
    9516:	e7c0      	b.n	949a <hci_cmd_handle+0xee>
    9518:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    951a:	2104      	movs	r1, #4
    951c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    951e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    9520:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    9522:	f7ff fd7f 	bl	9024 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9526:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9528:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    952a:	1cc2      	adds	r2, r0, #3
    952c:	4639      	mov	r1, r7
    952e:	4630      	mov	r0, r6
    9530:	f008 f8f5 	bl	1171e <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    9534:	2800      	cmp	r0, #0
    9536:	bf14      	ite	ne
    9538:	2302      	movne	r3, #2
    953a:	2300      	moveq	r3, #0
    953c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    953e:	f8a4 5001 	strh.w	r5, [r4, #1]
    9542:	e7aa      	b.n	949a <hci_cmd_handle+0xee>
	handle = sys_le16_to_cpu(cmd->handle);
    9544:	68a3      	ldr	r3, [r4, #8]
    9546:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    9548:	a908      	add	r1, sp, #32
    954a:	b2a0      	uxth	r0, r4
    954c:	f008 f8f1 	bl	11732 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    9550:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    9552:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9554:	a807      	add	r0, sp, #28
    9556:	f7ff fd65 	bl	9024 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    955a:	2d00      	cmp	r5, #0
    955c:	bf14      	ite	ne
    955e:	230c      	movne	r3, #12
    9560:	2300      	moveq	r3, #0
    9562:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9564:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    9568:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    956c:	f8a0 3003 	strh.w	r3, [r0, #3]
    9570:	e793      	b.n	949a <hci_cmd_handle+0xee>
    9572:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9574:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    9576:	8859      	ldrh	r1, [r3, #2]
    9578:	b2a0      	uxth	r0, r4
    957a:	f008 f8ee 	bl	1175a <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    957e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9580:	2103      	movs	r1, #3
    9582:	a807      	add	r0, sp, #28
    9584:	f7ff fd4e 	bl	9024 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9588:	2d00      	cmp	r5, #0
    958a:	bf14      	ite	ne
    958c:	230c      	movne	r3, #12
    958e:	2300      	moveq	r3, #0
    9590:	7003      	strb	r3, [r0, #0]
    9592:	e292      	b.n	9aba <hci_cmd_handle+0x70e>
	switch (ocf) {
    9594:	3a01      	subs	r2, #1
    9596:	2a08      	cmp	r2, #8
    9598:	f63f af44 	bhi.w	9424 <hci_cmd_handle+0x78>
    959c:	a301      	add	r3, pc, #4	; (adr r3, 95a4 <hci_cmd_handle+0x1f8>)
    959e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    95a2:	bf00      	nop
    95a4:	000095c9 	.word	0x000095c9
    95a8:	000095f3 	.word	0x000095f3
    95ac:	000096a7 	.word	0x000096a7
    95b0:	00009425 	.word	0x00009425
    95b4:	00009425 	.word	0x00009425
    95b8:	00009425 	.word	0x00009425
    95bc:	00009425 	.word	0x00009425
    95c0:	00009425 	.word	0x00009425
    95c4:	000096f5 	.word	0x000096f5
	rp = cmd_complete(evt, sizeof(*rp));
    95c8:	2109      	movs	r1, #9
    95ca:	a807      	add	r0, sp, #28
    95cc:	f7ff fd2a 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    95d0:	2300      	movs	r3, #0
    95d2:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    95d4:	7083      	strb	r3, [r0, #2]
    95d6:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    95d8:	f06f 030e 	mvn.w	r3, #14
    95dc:	7143      	strb	r3, [r0, #5]
    95de:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    95e0:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    95e2:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    95e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    95e8:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    95ea:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    95ec:	71c3      	strb	r3, [r0, #7]
    95ee:	7203      	strb	r3, [r0, #8]
    95f0:	e753      	b.n	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    95f2:	2141      	movs	r1, #65	; 0x41
    95f4:	a807      	add	r0, sp, #28
    95f6:	f7ff fd15 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    95fa:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    95fc:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    95fe:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9600:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9604:	f7f8 fc60 	bl	1ec8 <memset>
	rp->commands[2] |= BIT(7);
    9608:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    960a:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    960c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9610:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    9612:	79a3      	ldrb	r3, [r4, #6]
    9614:	f063 033f 	orn	r3, r3, #63	; 0x3f
    9618:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    961a:	7ae3      	ldrb	r3, [r4, #11]
    961c:	f043 0304 	orr.w	r3, r3, #4
    9620:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    9622:	7be3      	ldrb	r3, [r4, #15]
    9624:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    9628:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    962a:	7c23      	ldrb	r3, [r4, #16]
    962c:	f043 0302 	orr.w	r3, r3, #2
    9630:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    9632:	7de3      	ldrb	r3, [r4, #23]
    9634:	f043 0304 	orr.w	r3, r3, #4
    9638:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    963a:	7ea3      	ldrb	r3, [r4, #26]
    963c:	f043 0317 	orr.w	r3, r3, #23
    9640:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    9642:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    9644:	f043 0309 	orr.w	r3, r3, #9
    9648:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    964a:	7863      	ldrb	r3, [r4, #1]
    964c:	f043 0320 	orr.w	r3, r3, #32
    9650:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    9652:	23ff      	movs	r3, #255	; 0xff
    9654:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    9656:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    965a:	f063 030f 	orn	r3, r3, #15
    965e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    9662:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    9666:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    966a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    966e:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    9670:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    9674:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    9678:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    967c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    9680:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    9684:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    9688:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    968c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    9690:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9694:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    9698:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    969c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    96a0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    96a4:	e6f9      	b.n	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    96a6:	2109      	movs	r1, #9
    96a8:	a807      	add	r0, sp, #28
    96aa:	f7ff fcbb 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    96ae:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    96b0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    96b2:	2208      	movs	r2, #8
	rp->status = 0x00;
    96b4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    96b8:	f7f8 fc06 	bl	1ec8 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    96bc:	2360      	movs	r3, #96	; 0x60
    96be:	7163      	strb	r3, [r4, #5]
    96c0:	e6eb      	b.n	949a <hci_cmd_handle+0xee>
    96c2:	bf00      	nop
    96c4:	000161ba 	.word	0x000161ba
    96c8:	20003a5c 	.word	0x20003a5c
    96cc:	000179e1 	.word	0x000179e1
    96d0:	00017a29 	.word	0x00017a29
    96d4:	000190c2 	.word	0x000190c2
    96d8:	00019205 	.word	0x00019205
    96dc:	20000828 	.word	0x20000828
    96e0:	0001922b 	.word	0x0001922b
    96e4:	20000830 	.word	0x20000830
    96e8:	20003d28 	.word	0x20003d28
    96ec:	200008b8 	.word	0x200008b8
    96f0:	20003d30 	.word	0x20003d30
	rp = cmd_complete(evt, sizeof(*rp));
    96f4:	2107      	movs	r1, #7
    96f6:	a807      	add	r0, sp, #28
    96f8:	f7ff fc94 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    96fc:	4601      	mov	r1, r0
    96fe:	2300      	movs	r3, #0
    9700:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    9704:	4618      	mov	r0, r3
    9706:	f7ff f989 	bl	8a1c <ll_addr_get>
    970a:	e6c6      	b.n	949a <hci_cmd_handle+0xee>
	switch (ocf) {
    970c:	3a01      	subs	r2, #1
    970e:	2a4d      	cmp	r2, #77	; 0x4d
    9710:	f63f ae88 	bhi.w	9424 <hci_cmd_handle+0x78>
    9714:	a301      	add	r3, pc, #4	; (adr r3, 971c <hci_cmd_handle+0x370>)
    9716:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    971a:	bf00      	nop
    971c:	00009855 	.word	0x00009855
    9720:	0000985f 	.word	0x0000985f
    9724:	00009877 	.word	0x00009877
    9728:	00009425 	.word	0x00009425
    972c:	0000989b 	.word	0x0000989b
    9730:	00009425 	.word	0x00009425
    9734:	00009425 	.word	0x00009425
    9738:	00009425 	.word	0x00009425
    973c:	00009425 	.word	0x00009425
    9740:	00009425 	.word	0x00009425
    9744:	00009965 	.word	0x00009965
    9748:	00009993 	.word	0x00009993
    974c:	000099b3 	.word	0x000099b3
    9750:	000099dd 	.word	0x000099dd
    9754:	000098a7 	.word	0x000098a7
    9758:	000098bd 	.word	0x000098bd
    975c:	000098cf 	.word	0x000098cf
    9760:	000098d7 	.word	0x000098d7
    9764:	00009a7d 	.word	0x00009a7d
    9768:	00009a3d 	.word	0x00009a3d
    976c:	00009a59 	.word	0x00009a59
    9770:	00009a73 	.word	0x00009a73
    9774:	000098df 	.word	0x000098df
    9778:	00009905 	.word	0x00009905
    977c:	00009a45 	.word	0x00009a45
    9780:	00009425 	.word	0x00009425
    9784:	00009425 	.word	0x00009425
    9788:	0000991b 	.word	0x0000991b
    978c:	00009425 	.word	0x00009425
    9790:	00009425 	.word	0x00009425
    9794:	00009425 	.word	0x00009425
    9798:	00009a97 	.word	0x00009a97
    979c:	00009ac1 	.word	0x00009ac1
    97a0:	00009acf 	.word	0x00009acf
    97a4:	00009adf 	.word	0x00009adf
    97a8:	00009af7 	.word	0x00009af7
    97ac:	00009425 	.word	0x00009425
    97b0:	00009425 	.word	0x00009425
    97b4:	00009c29 	.word	0x00009c29
    97b8:	00009c37 	.word	0x00009c37
    97bc:	00009c3f 	.word	0x00009c3f
    97c0:	00009c4f 	.word	0x00009c4f
    97c4:	00009c61 	.word	0x00009c61
    97c8:	00009c7f 	.word	0x00009c7f
    97cc:	00009c9d 	.word	0x00009c9d
    97d0:	00009cb3 	.word	0x00009cb3
    97d4:	00009b13 	.word	0x00009b13
    97d8:	00009b59 	.word	0x00009b59
    97dc:	00009baf 	.word	0x00009baf
    97e0:	00009bcd 	.word	0x00009bcd
    97e4:	00009425 	.word	0x00009425
    97e8:	00009425 	.word	0x00009425
    97ec:	00009425 	.word	0x00009425
    97f0:	00009425 	.word	0x00009425
    97f4:	00009425 	.word	0x00009425
    97f8:	00009425 	.word	0x00009425
    97fc:	00009425 	.word	0x00009425
    9800:	00009425 	.word	0x00009425
    9804:	00009425 	.word	0x00009425
    9808:	00009425 	.word	0x00009425
    980c:	00009425 	.word	0x00009425
    9810:	00009425 	.word	0x00009425
    9814:	00009425 	.word	0x00009425
    9818:	00009425 	.word	0x00009425
    981c:	00009425 	.word	0x00009425
    9820:	00009425 	.word	0x00009425
    9824:	00009425 	.word	0x00009425
    9828:	00009425 	.word	0x00009425
    982c:	00009425 	.word	0x00009425
    9830:	00009425 	.word	0x00009425
    9834:	00009425 	.word	0x00009425
    9838:	00009425 	.word	0x00009425
    983c:	00009425 	.word	0x00009425
    9840:	00009425 	.word	0x00009425
    9844:	00009cc7 	.word	0x00009cc7
    9848:	00009425 	.word	0x00009425
    984c:	00009425 	.word	0x00009425
    9850:	00009cbd 	.word	0x00009cbd
	le_event_mask = sys_get_le64(cmd->events);
    9854:	68a0      	ldr	r0, [r4, #8]
    9856:	f7ff fda5 	bl	93a4 <sys_get_le64>
    985a:	4bb4      	ldr	r3, [pc, #720]	; (9b2c <hci_cmd_handle+0x780>)
    985c:	e64d      	b.n	94fa <hci_cmd_handle+0x14e>
	rp = cmd_complete(evt, sizeof(*rp));
    985e:	2104      	movs	r1, #4
    9860:	a807      	add	r0, sp, #28
    9862:	f7ff fbdf 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    9866:	2300      	movs	r3, #0
    9868:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    986a:	221b      	movs	r2, #27
    986c:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    986e:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    9870:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    9872:	70c3      	strb	r3, [r0, #3]
    9874:	e611      	b.n	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    9876:	2109      	movs	r1, #9
    9878:	a807      	add	r0, sp, #28
    987a:	f7ff fbd3 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    987e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9880:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9882:	2208      	movs	r2, #8
	rp->status = 0x00;
    9884:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9888:	f7f8 fb1e 	bl	1ec8 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    988c:	23ff      	movs	r3, #255	; 0xff
    988e:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    9890:	2341      	movs	r3, #65	; 0x41
    9892:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    9894:	2301      	movs	r3, #1
    9896:	70e3      	strb	r3, [r4, #3]
    9898:	e5ff      	b.n	949a <hci_cmd_handle+0xee>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    989a:	68a1      	ldr	r1, [r4, #8]
    989c:	2001      	movs	r0, #1
    989e:	f7ff f8d7 	bl	8a50 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    98a2:	4604      	mov	r4, r0
    98a4:	e0c2      	b.n	9a2c <hci_cmd_handle+0x680>
	rp = cmd_complete(evt, sizeof(*rp));
    98a6:	2102      	movs	r1, #2
    98a8:	a807      	add	r0, sp, #28
    98aa:	f7ff fbbb 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    98ae:	2300      	movs	r3, #0
    98b0:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    98b2:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    98b4:	f008 fee8 	bl	12688 <ll_wl_size_get>
    98b8:	7060      	strb	r0, [r4, #1]
    98ba:	e5ee      	b.n	949a <hci_cmd_handle+0xee>
	ccst = cmd_complete(evt, sizeof(*ccst));
    98bc:	2101      	movs	r1, #1
    98be:	a807      	add	r0, sp, #28
    98c0:	f7ff fbb0 	bl	9024 <cmd_complete>
    98c4:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    98c6:	f008 fee1 	bl	1268c <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    98ca:	7020      	strb	r0, [r4, #0]
    98cc:	e5e5      	b.n	949a <hci_cmd_handle+0xee>
	status = ll_wl_add(&cmd->addr);
    98ce:	68a0      	ldr	r0, [r4, #8]
    98d0:	f008 ff88 	bl	127e4 <ll_wl_add>
    98d4:	e7e5      	b.n	98a2 <hci_cmd_handle+0x4f6>
	status = ll_wl_remove(&cmd->addr);
    98d6:	68a0      	ldr	r0, [r4, #8]
    98d8:	f008 fef8 	bl	126cc <ll_wl_remove>
    98dc:	e7e1      	b.n	98a2 <hci_cmd_handle+0x4f6>
    98de:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    98e0:	2300      	movs	r3, #0
    98e2:	aa08      	add	r2, sp, #32
    98e4:	f100 0110 	add.w	r1, r0, #16
    98e8:	f009 fc3a 	bl	13160 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    98ec:	2111      	movs	r1, #17
    98ee:	a807      	add	r0, sp, #28
    98f0:	f7ff fb98 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    98f4:	2300      	movs	r3, #0
    98f6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    98fa:	2210      	movs	r2, #16
    98fc:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    98fe:	f7f8 fab7 	bl	1e70 <memcpy>
    9902:	e5ca      	b.n	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    9904:	2109      	movs	r1, #9
    9906:	a807      	add	r0, sp, #28
    9908:	f7ff fb8c 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    990c:	2300      	movs	r3, #0
    990e:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    9912:	2108      	movs	r1, #8
    9914:	f7ff f8bc 	bl	8a90 <bt_rand>
    9918:	e5bf      	b.n	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    991a:	2109      	movs	r1, #9
    991c:	a807      	add	r0, sp, #28
    991e:	f7ff fb81 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    9922:	4604      	mov	r4, r0
    9924:	2300      	movs	r3, #0
    9926:	f804 3b01 	strb.w	r3, [r4], #1
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    992a:	4b81      	ldr	r3, [pc, #516]	; (9b30 <hci_cmd_handle+0x784>)
    992c:	4f81      	ldr	r7, [pc, #516]	; (9b34 <hci_cmd_handle+0x788>)
    992e:	f8d3 8000 	ldr.w	r8, [r3]
	rp = cmd_complete(evt, sizeof(*rp));
    9932:	4606      	mov	r6, r0
    9934:	f00b fc36 	bl	151a4 <_impl_k_current_get>
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    9938:	f240 253f 	movw	r5, #575	; 0x23f
    993c:	4b7e      	ldr	r3, [pc, #504]	; (9b38 <hci_cmd_handle+0x78c>)
    993e:	9304      	str	r3, [sp, #16]
    9940:	9001      	str	r0, [sp, #4]
    9942:	9300      	str	r3, [sp, #0]
    9944:	4a7d      	ldr	r2, [pc, #500]	; (9b3c <hci_cmd_handle+0x790>)
    9946:	4b7e      	ldr	r3, [pc, #504]	; (9b40 <hci_cmd_handle+0x794>)
    9948:	497e      	ldr	r1, [pc, #504]	; (9b44 <hci_cmd_handle+0x798>)
    994a:	487f      	ldr	r0, [pc, #508]	; (9b48 <hci_cmd_handle+0x79c>)
    994c:	9703      	str	r7, [sp, #12]
    994e:	9502      	str	r5, [sp, #8]
    9950:	47c0      	blx	r8
	sys_put_le32(val, dst);
    9952:	4621      	mov	r1, r4
    9954:	4638      	mov	r0, r7
    9956:	f7ff fb21 	bl	8f9c <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    995a:	1d71      	adds	r1, r6, #5
    995c:	4628      	mov	r0, r5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    995e:	f7ff fb1d 	bl	8f9c <sys_put_le32>
    9962:	e59a      	b.n	949a <hci_cmd_handle+0xee>
    9964:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    9966:	7963      	ldrb	r3, [r4, #5]
    9968:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    996c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9970:	7820      	ldrb	r0, [r4, #0]
    9972:	79a4      	ldrb	r4, [r4, #6]
    9974:	9400      	str	r4, [sp, #0]
    9976:	f008 fc11 	bl	1219c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    997a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    997c:	2101      	movs	r1, #1
    997e:	a807      	add	r0, sp, #28
    9980:	f7ff fb50 	bl	9024 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9984:	2c00      	cmp	r4, #0
    9986:	bf18      	it	ne
    9988:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    998a:	bf08      	it	eq
    998c:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    998e:	7003      	strb	r3, [r0, #0]
    9990:	e583      	b.n	949a <hci_cmd_handle+0xee>
    9992:	68a2      	ldr	r2, [r4, #8]
    9994:	4b6d      	ldr	r3, [pc, #436]	; (9b4c <hci_cmd_handle+0x7a0>)
	if (cmd->enable && cmd->filter_dup) {
    9996:	7810      	ldrb	r0, [r2, #0]
    9998:	b140      	cbz	r0, 99ac <hci_cmd_handle+0x600>
    999a:	7852      	ldrb	r2, [r2, #1]
    999c:	b132      	cbz	r2, 99ac <hci_cmd_handle+0x600>
		dup_count = 0;
    999e:	2200      	movs	r2, #0
    99a0:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    99a2:	4b6b      	ldr	r3, [pc, #428]	; (9b50 <hci_cmd_handle+0x7a4>)
		dup_count = -1;
    99a4:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    99a6:	f008 fc19 	bl	121dc <ll_scan_enable>
    99aa:	e7e6      	b.n	997a <hci_cmd_handle+0x5ce>
		dup_count = -1;
    99ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    99b0:	e7f8      	b.n	99a4 <hci_cmd_handle+0x5f8>
    99b2:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    99b4:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    99b8:	7963      	ldrb	r3, [r4, #5]
    99ba:	7922      	ldrb	r2, [r4, #4]
    99bc:	8861      	ldrh	r1, [r4, #2]
    99be:	8820      	ldrh	r0, [r4, #0]
    99c0:	9504      	str	r5, [sp, #16]
    99c2:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    99c6:	9503      	str	r5, [sp, #12]
    99c8:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    99cc:	9502      	str	r5, [sp, #8]
    99ce:	7b25      	ldrb	r5, [r4, #12]
    99d0:	9501      	str	r5, [sp, #4]
    99d2:	3406      	adds	r4, #6
    99d4:	9400      	str	r4, [sp, #0]
    99d6:	f008 fc3b 	bl	12250 <ll_create_connection>
    99da:	e557      	b.n	948c <hci_cmd_handle+0xe0>
	status = ll_connect_disable();
    99dc:	f008 fa40 	bl	11e60 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    99e0:	4606      	mov	r6, r0
    99e2:	bb48      	cbnz	r0, 9a38 <hci_cmd_handle+0x68c>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    99e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    99e8:	2001      	movs	r0, #1
    99ea:	f7fa fe15 	bl	4618 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99ee:	4a59      	ldr	r2, [pc, #356]	; (9b54 <hci_cmd_handle+0x7a8>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    99f0:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99f2:	e9d2 4500 	ldrd	r4, r5, [r2]
    99f6:	2400      	movs	r4, #0
    99f8:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    99fc:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9a00:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a02:	d004      	beq.n	9a0e <hci_cmd_handle+0x662>
    9a04:	4632      	mov	r2, r6
    9a06:	4631      	mov	r1, r6
    9a08:	2002      	movs	r0, #2
    9a0a:	f7ff fb7b 	bl	9104 <le_conn_complete.part.39>
		if ((*evt)->len) {
    9a0e:	9807      	ldr	r0, [sp, #28]
    9a10:	8984      	ldrh	r4, [r0, #12]
    9a12:	b14c      	cbz	r4, 9a28 <hci_cmd_handle+0x67c>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    9a14:	2101      	movs	r1, #1
    9a16:	a808      	add	r0, sp, #32
    9a18:	f7ff fb04 	bl	9024 <cmd_complete>
			ccst->status = cmd_status;
    9a1c:	2300      	movs	r3, #0
    9a1e:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    9a20:	9808      	ldr	r0, [sp, #32]
    9a22:	f7fa fbaf 	bl	4184 <bt_recv_prio>
    9a26:	e538      	b.n	949a <hci_cmd_handle+0xee>
			net_buf_unref(*evt);
    9a28:	f00a f9de 	bl	13de8 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9a2c:	2101      	movs	r1, #1
    9a2e:	a807      	add	r0, sp, #28
    9a30:	f7ff faf8 	bl	9024 <cmd_complete>
	ccst->status = status;
    9a34:	7004      	strb	r4, [r0, #0]
    9a36:	e530      	b.n	949a <hci_cmd_handle+0xee>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    9a38:	240c      	movs	r4, #12
    9a3a:	e7f7      	b.n	9a2c <hci_cmd_handle+0x680>
	status = ll_chm_update(&cmd->ch_map[0]);
    9a3c:	68a0      	ldr	r0, [r4, #8]
    9a3e:	f007 fddb 	bl	115f8 <ll_chm_update>
    9a42:	e79a      	b.n	997a <hci_cmd_handle+0x5ce>
    9a44:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    9a46:	f100 030c 	add.w	r3, r0, #12
    9a4a:	f100 020a 	add.w	r2, r0, #10
    9a4e:	1c81      	adds	r1, r0, #2
    9a50:	8800      	ldrh	r0, [r0, #0]
    9a52:	f008 f88b 	bl	11b6c <ll_enc_req_send>
    9a56:	e519      	b.n	948c <hci_cmd_handle+0xe0>
	handle = sys_le16_to_cpu(cmd->handle);
    9a58:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9a5a:	2108      	movs	r1, #8
    9a5c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9a5e:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9a60:	f7ff fae0 	bl	9024 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9a64:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9a66:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    9a68:	1cc1      	adds	r1, r0, #3
    9a6a:	4630      	mov	r0, r6
    9a6c:	f007 fe06 	bl	1167c <ll_chm_get>
    9a70:	e560      	b.n	9534 <hci_cmd_handle+0x188>
	handle = sys_le16_to_cpu(cmd->handle);
    9a72:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    9a74:	8818      	ldrh	r0, [r3, #0]
    9a76:	f007 fe16 	bl	116a6 <ll_feature_req_send>
    9a7a:	e507      	b.n	948c <hci_cmd_handle+0xe0>
    9a7c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    9a7e:	8911      	ldrh	r1, [r2, #8]
    9a80:	8893      	ldrh	r3, [r2, #4]
    9a82:	8810      	ldrh	r0, [r2, #0]
    9a84:	9101      	str	r1, [sp, #4]
    9a86:	88d2      	ldrh	r2, [r2, #6]
    9a88:	9200      	str	r2, [sp, #0]
    9a8a:	2200      	movs	r2, #0
    9a8c:	4611      	mov	r1, r2
    9a8e:	f007 fd3b 	bl	11508 <ll_conn_update>
	*evt = cmd_status(status);
    9a92:	b2c0      	uxtb	r0, r0
    9a94:	e4fe      	b.n	9494 <hci_cmd_handle+0xe8>
    9a96:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    9a98:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9a9a:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    9a9c:	8893      	ldrh	r3, [r2, #4]
    9a9e:	9101      	str	r1, [sp, #4]
    9aa0:	88d2      	ldrh	r2, [r2, #6]
    9aa2:	9200      	str	r2, [sp, #0]
    9aa4:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9aa6:	2102      	movs	r1, #2
    9aa8:	b2a0      	uxth	r0, r4
    9aaa:	f007 fd2d 	bl	11508 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    9aae:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9ab0:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    9ab2:	a807      	add	r0, sp, #28
    9ab4:	f7ff fab6 	bl	9024 <cmd_complete>
	rp->status = status;
    9ab8:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9aba:	f8a0 4001 	strh.w	r4, [r0, #1]
    9abe:	e4ec      	b.n	949a <hci_cmd_handle+0xee>
    9ac0:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9ac2:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9ac4:	789a      	ldrb	r2, [r3, #2]
    9ac6:	2300      	movs	r3, #0
    9ac8:	9301      	str	r3, [sp, #4]
    9aca:	9300      	str	r3, [sp, #0]
    9acc:	e7eb      	b.n	9aa6 <hci_cmd_handle+0x6fa>
    9ace:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9ad0:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    9ad2:	889a      	ldrh	r2, [r3, #4]
    9ad4:	8859      	ldrh	r1, [r3, #2]
    9ad6:	b2a0      	uxth	r0, r4
    9ad8:	f007 fe55 	bl	11786 <ll_length_req_send>
    9adc:	e54f      	b.n	957e <hci_cmd_handle+0x1d2>
	rp = cmd_complete(evt, sizeof(*rp));
    9ade:	2105      	movs	r1, #5
    9ae0:	a807      	add	r0, sp, #28
    9ae2:	f7ff fa9f 	bl	9024 <cmd_complete>
    9ae6:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    9ae8:	1cc1      	adds	r1, r0, #3
    9aea:	3001      	adds	r0, #1
    9aec:	f007 fe6e 	bl	117cc <ll_length_default_get>
	rp->status = 0x00;
    9af0:	2300      	movs	r3, #0
    9af2:	7023      	strb	r3, [r4, #0]
    9af4:	e4d1      	b.n	949a <hci_cmd_handle+0xee>
    9af6:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    9af8:	8859      	ldrh	r1, [r3, #2]
    9afa:	8818      	ldrh	r0, [r3, #0]
    9afc:	f007 fe70 	bl	117e0 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9b00:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    9b02:	2101      	movs	r1, #1
    9b04:	a807      	add	r0, sp, #28
    9b06:	f7ff fa8d 	bl	9024 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9b0a:	2c00      	cmp	r4, #0
    9b0c:	bf18      	it	ne
    9b0e:	231e      	movne	r3, #30
    9b10:	e73b      	b.n	998a <hci_cmd_handle+0x5de>
	rp = cmd_complete(evt, sizeof(*rp));
    9b12:	2109      	movs	r1, #9
    9b14:	a807      	add	r0, sp, #28
    9b16:	f7ff fa85 	bl	9024 <cmd_complete>
    9b1a:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    9b1c:	1dc3      	adds	r3, r0, #7
    9b1e:	1d42      	adds	r2, r0, #5
    9b20:	1cc1      	adds	r1, r0, #3
    9b22:	3001      	adds	r0, #1
    9b24:	f007 fe66 	bl	117f4 <ll_length_max_get>
    9b28:	e7e2      	b.n	9af0 <hci_cmd_handle+0x744>
    9b2a:	bf00      	nop
    9b2c:	20003d30 	.word	0x20003d30
    9b30:	20003a5c 	.word	0x20003a5c
    9b34:	130f3370 	.word	0x130f3370
    9b38:	000161ba 	.word	0x000161ba
    9b3c:	0001697a 	.word	0x0001697a
    9b40:	000190ae 	.word	0x000190ae
    9b44:	00017a29 	.word	0x00017a29
    9b48:	00019259 	.word	0x00019259
    9b4c:	20000830 	.word	0x20000830
    9b50:	20000834 	.word	0x20000834
    9b54:	20003d28 	.word	0x20003d28
	handle = sys_le16_to_cpu(cmd->handle);
    9b58:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9b5a:	2105      	movs	r1, #5
    9b5c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9b5e:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9b60:	f7ff fa60 	bl	9024 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9b64:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9b66:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9b68:	1d02      	adds	r2, r0, #4
    9b6a:	1cc1      	adds	r1, r0, #3
    9b6c:	4630      	mov	r0, r6
    9b6e:	f007 fe4a 	bl	11806 <ll_phy_get>
	return __builtin_ffs(op);
    9b72:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    9b74:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9b78:	2800      	cmp	r0, #0
    9b7a:	bf14      	ite	ne
    9b7c:	230c      	movne	r3, #12
    9b7e:	2300      	moveq	r3, #0
    9b80:	7023      	strb	r3, [r4, #0]
    9b82:	2a00      	cmp	r2, #0
    9b84:	fa92 f3a2 	rbit	r3, r2
    9b88:	fab3 f383 	clz	r3, r3
    9b8c:	7922      	ldrb	r2, [r4, #4]
    9b8e:	bf08      	it	eq
    9b90:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9b94:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    9b96:	70e3      	strb	r3, [r4, #3]
    9b98:	2a00      	cmp	r2, #0
    9b9a:	fa92 f3a2 	rbit	r3, r2
    9b9e:	fab3 f383 	clz	r3, r3
    9ba2:	bf08      	it	eq
    9ba4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9ba8:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    9baa:	7123      	strb	r3, [r4, #4]
    9bac:	e475      	b.n	949a <hci_cmd_handle+0xee>
    9bae:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9bb0:	781a      	ldrb	r2, [r3, #0]
    9bb2:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    9bb4:	bf44      	itt	mi
    9bb6:	2107      	movmi	r1, #7
    9bb8:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9bba:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    9bbc:	bf44      	itt	mi
    9bbe:	2207      	movmi	r2, #7
    9bc0:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9bc2:	7899      	ldrb	r1, [r3, #2]
    9bc4:	7858      	ldrb	r0, [r3, #1]
    9bc6:	f007 fe33 	bl	11830 <ll_phy_default_set>
    9bca:	e799      	b.n	9b00 <hci_cmd_handle+0x754>
    9bcc:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9bce:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    9bd0:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    9bd2:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    9bd6:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    9bd8:	bf44      	itt	mi
    9bda:	2103      	movmi	r1, #3
    9bdc:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    9bde:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    9be0:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    9be2:	bf44      	itt	mi
    9be4:	2203      	movmi	r2, #3
    9be6:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9be8:	074d      	lsls	r5, r1, #29
    9bea:	d002      	beq.n	9bf2 <hci_cmd_handle+0x846>
	    !(cmd->rx_phys & 0x07)) {
    9bec:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9bee:	075a      	lsls	r2, r3, #29
    9bf0:	d105      	bne.n	9bfe <hci_cmd_handle+0x852>
		ccst = cmd_complete(evt, sizeof(*ccst));
    9bf2:	2101      	movs	r1, #1
    9bf4:	a807      	add	r0, sp, #28
    9bf6:	f7ff fa15 	bl	9024 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    9bfa:	2312      	movs	r3, #18
    9bfc:	e6c7      	b.n	998e <hci_cmd_handle+0x5e2>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    9bfe:	ea41 0203 	orr.w	r2, r1, r3
    9c02:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    9c06:	d005      	beq.n	9c14 <hci_cmd_handle+0x868>
		ccst = cmd_complete(evt, sizeof(*ccst));
    9c08:	2101      	movs	r1, #1
    9c0a:	a807      	add	r0, sp, #28
    9c0c:	f7ff fa0a 	bl	9024 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    9c10:	2311      	movs	r3, #17
    9c12:	e6bc      	b.n	998e <hci_cmd_handle+0x5e2>
	if (phy_opts & 0x03) {
    9c14:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    9c18:	bf1c      	itt	ne
    9c1a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    9c1e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    9c22:	f007 fe0f 	bl	11844 <ll_phy_req_send>
    9c26:	e431      	b.n	948c <hci_cmd_handle+0xe0>
    9c28:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    9c2a:	f100 0217 	add.w	r2, r0, #23
    9c2e:	1dc1      	adds	r1, r0, #7
    9c30:	f009 f824 	bl	12c7c <ll_rl_add>
    9c34:	e635      	b.n	98a2 <hci_cmd_handle+0x4f6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    9c36:	68a0      	ldr	r0, [r4, #8]
    9c38:	f009 f8c2 	bl	12dc0 <ll_rl_remove>
    9c3c:	e631      	b.n	98a2 <hci_cmd_handle+0x4f6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9c3e:	2101      	movs	r1, #1
    9c40:	a807      	add	r0, sp, #28
    9c42:	f7ff f9ef 	bl	9024 <cmd_complete>
    9c46:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    9c48:	f008 fffe 	bl	12c48 <ll_rl_clear>
    9c4c:	e63d      	b.n	98ca <hci_cmd_handle+0x51e>
	rp = cmd_complete(evt, sizeof(*rp));
    9c4e:	2102      	movs	r1, #2
    9c50:	a807      	add	r0, sp, #28
    9c52:	f7ff f9e7 	bl	9024 <cmd_complete>
    9c56:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    9c58:	f008 fff4 	bl	12c44 <ll_rl_size_get>
    9c5c:	7060      	strb	r0, [r4, #1]
    9c5e:	e747      	b.n	9af0 <hci_cmd_handle+0x744>
    9c60:	2207      	movs	r2, #7
    9c62:	68a1      	ldr	r1, [r4, #8]
    9c64:	a808      	add	r0, sp, #32
    9c66:	f7f8 f903 	bl	1e70 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9c6a:	2107      	movs	r1, #7
    9c6c:	a807      	add	r0, sp, #28
    9c6e:	f7ff f9d9 	bl	9024 <cmd_complete>
    9c72:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    9c74:	1c41      	adds	r1, r0, #1
    9c76:	a808      	add	r0, sp, #32
    9c78:	f009 f930 	bl	12edc <ll_rl_crpa_get>
    9c7c:	e625      	b.n	98ca <hci_cmd_handle+0x51e>
    9c7e:	2207      	movs	r2, #7
    9c80:	68a1      	ldr	r1, [r4, #8]
    9c82:	a808      	add	r0, sp, #32
    9c84:	f7f8 f8f4 	bl	1e70 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9c88:	2107      	movs	r1, #7
    9c8a:	a807      	add	r0, sp, #28
    9c8c:	f7ff f9ca 	bl	9024 <cmd_complete>
    9c90:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9c92:	1c41      	adds	r1, r0, #1
    9c94:	a808      	add	r0, sp, #32
    9c96:	f009 f941 	bl	12f1c <ll_rl_lrpa_get>
    9c9a:	e616      	b.n	98ca <hci_cmd_handle+0x51e>
	u8_t enable = cmd->enable;
    9c9c:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9c9e:	2101      	movs	r1, #1
    9ca0:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    9ca2:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9ca4:	f7ff f9be 	bl	9024 <cmd_complete>
    9ca8:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    9caa:	4628      	mov	r0, r5
    9cac:	f009 f94e 	bl	12f4c <ll_rl_enable>
    9cb0:	e60b      	b.n	98ca <hci_cmd_handle+0x51e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    9cb2:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    9cb4:	8818      	ldrh	r0, [r3, #0]
    9cb6:	f009 f95b 	bl	12f70 <ll_rl_timeout_set>
    9cba:	e40e      	b.n	94da <hci_cmd_handle+0x12e>
    9cbc:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9cbe:	79c1      	ldrb	r1, [r0, #7]
    9cc0:	f009 f95e 	bl	12f80 <ll_priv_mode_set>
    9cc4:	e5ed      	b.n	98a2 <hci_cmd_handle+0x4f6>
	rp = cmd_complete(evt, sizeof(*rp));
    9cc6:	2103      	movs	r1, #3
    9cc8:	a807      	add	r0, sp, #28
    9cca:	f7ff f9ab 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    9cce:	4601      	mov	r1, r0
    9cd0:	2300      	movs	r3, #0
    9cd2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    9cd6:	3001      	adds	r0, #1
    9cd8:	f7fe fed6 	bl	8a88 <ll_tx_pwr_get>
    9cdc:	f7ff bbdd 	b.w	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    9ce0:	210d      	movs	r1, #13
    9ce2:	a807      	add	r0, sp, #28
    9ce4:	f7ff f99e 	bl	9024 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9ce8:	2202      	movs	r2, #2
    9cea:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9cec:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    9cee:	2201      	movs	r2, #1
    9cf0:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9cf2:	220c      	movs	r2, #12
	rp->status = 0x00;
    9cf4:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9cf6:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    9cf8:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    9cfa:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9cfc:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9cfe:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    9d00:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9d02:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    9d04:	7242      	strb	r2, [r0, #9]
    9d06:	7283      	strb	r3, [r0, #10]
    9d08:	72c3      	strb	r3, [r0, #11]
    9d0a:	7303      	strb	r3, [r0, #12]
    9d0c:	f7ff bbc5 	b.w	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    9d10:	2141      	movs	r1, #65	; 0x41
    9d12:	a807      	add	r0, sp, #28
    9d14:	f7ff f986 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    9d18:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9d1a:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9d1c:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9d1e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9d22:	f7f8 f8d1 	bl	1ec8 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    9d26:	7863      	ldrb	r3, [r4, #1]
    9d28:	f063 0358 	orn	r3, r3, #88	; 0x58
    9d2c:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9d2e:	78a3      	ldrb	r3, [r4, #2]
    9d30:	f043 0303 	orr.w	r3, r3, #3
    9d34:	70a3      	strb	r3, [r4, #2]
    9d36:	f7ff bbb0 	b.w	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    9d3a:	2109      	movs	r1, #9
    9d3c:	a807      	add	r0, sp, #28
    9d3e:	f7ff f971 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    9d42:	2100      	movs	r1, #0
    9d44:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9d48:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    9d4a:	f7f8 f8bd 	bl	1ec8 <memset>
    9d4e:	f7ff bba4 	b.w	949a <hci_cmd_handle+0xee>
	const char build_info[] = HCI_VS_BUILD_INFO;
    9d52:	4b5c      	ldr	r3, [pc, #368]	; (9ec4 <hci_cmd_handle+0xb18>)
    9d54:	aa08      	add	r2, sp, #32
    9d56:	f103 0628 	add.w	r6, r3, #40	; 0x28
    9d5a:	4615      	mov	r5, r2
    9d5c:	6818      	ldr	r0, [r3, #0]
    9d5e:	6859      	ldr	r1, [r3, #4]
    9d60:	4614      	mov	r4, r2
    9d62:	c403      	stmia	r4!, {r0, r1}
    9d64:	3308      	adds	r3, #8
    9d66:	42b3      	cmp	r3, r6
    9d68:	4622      	mov	r2, r4
    9d6a:	d1f7      	bne.n	9d5c <hci_cmd_handle+0x9b0>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    9d6c:	2129      	movs	r1, #41	; 0x29
    9d6e:	a807      	add	r0, sp, #28
    9d70:	f7ff f958 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    9d74:	2300      	movs	r3, #0
    9d76:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    9d7a:	2228      	movs	r2, #40	; 0x28
    9d7c:	4629      	mov	r1, r5
    9d7e:	e5be      	b.n	98fe <hci_cmd_handle+0x552>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9d80:	68a1      	ldr	r1, [r4, #8]
    9d82:	2000      	movs	r0, #0
    9d84:	f7fe fe64 	bl	8a50 <ll_addr_set>
    9d88:	f7ff bba7 	b.w	94da <hci_cmd_handle+0x12e>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9d8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9d90:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    9d94:	3201      	adds	r2, #1
    9d96:	d106      	bne.n	9da6 <hci_cmd_handle+0x9fa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9d98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9da0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9da2:	4293      	cmp	r3, r2
    9da4:	d020      	beq.n	9de8 <hci_cmd_handle+0xa3c>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    9da6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    9daa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9dae:	07db      	lsls	r3, r3, #31
    9db0:	d51a      	bpl.n	9de8 <hci_cmd_handle+0xa3c>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9db2:	2118      	movs	r1, #24
    9db4:	a807      	add	r0, sp, #28
    9db6:	f7ff f935 	bl	9024 <cmd_complete>
		rp->status = 0x00;
    9dba:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    9dbc:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9dbe:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    9dc0:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    9dc2:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    9dc4:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    9dc8:	1ca1      	adds	r1, r4, #2
    9dca:	f7ff f8e7 	bl	8f9c <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    9dce:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    9dd2:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    9dd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    9dd8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    9ddc:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    9dde:	2210      	movs	r2, #16
    9de0:	4631      	mov	r1, r6
    9de2:	f104 0008 	add.w	r0, r4, #8
    9de6:	e7b0      	b.n	9d4a <hci_cmd_handle+0x99e>
	rp = cmd_complete(evt, sizeof(*rp));
    9de8:	2102      	movs	r1, #2
    9dea:	a807      	add	r0, sp, #28
    9dec:	f7ff f91a 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    9df0:	2300      	movs	r3, #0
    9df2:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    9df4:	7043      	strb	r3, [r0, #1]
    9df6:	f7ff bb50 	b.w	949a <hci_cmd_handle+0xee>
	rp = cmd_complete(evt, sizeof(*rp));
    9dfa:	2121      	movs	r1, #33	; 0x21
    9dfc:	a807      	add	r0, sp, #28
    9dfe:	f7ff f911 	bl	9024 <cmd_complete>
	rp->status = 0x00;
    9e02:	4603      	mov	r3, r0
    9e04:	2200      	movs	r2, #0
    9e06:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    9e0e:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9e10:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9e14:	3101      	adds	r1, #1
    9e16:	d04b      	beq.n	9eb0 <hci_cmd_handle+0xb04>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    9e18:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9e1c:	3101      	adds	r1, #1
    9e1e:	d047      	beq.n	9eb0 <hci_cmd_handle+0xb04>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9e20:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    9e24:	3101      	adds	r1, #1
    9e26:	d043      	beq.n	9eb0 <hci_cmd_handle+0xb04>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    9e28:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9e2c:	3101      	adds	r1, #1
    9e2e:	d03f      	beq.n	9eb0 <hci_cmd_handle+0xb04>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    9e30:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    9e34:	4619      	mov	r1, r3
    9e36:	f7ff f8b1 	bl	8f9c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    9e3a:	1d61      	adds	r1, r4, #5
    9e3c:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    9e40:	f7ff f8ac 	bl	8f9c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    9e44:	f104 0109 	add.w	r1, r4, #9
    9e48:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    9e4c:	f7ff f8a6 	bl	8f9c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    9e50:	f104 010d 	add.w	r1, r4, #13
    9e54:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    9e58:	f7ff f8a0 	bl	8f9c <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9e60:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9e64:	3301      	adds	r3, #1
    9e66:	f104 0311 	add.w	r3, r4, #17
    9e6a:	d027      	beq.n	9ebc <hci_cmd_handle+0xb10>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9e6c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9e70:	3101      	adds	r1, #1
    9e72:	d023      	beq.n	9ebc <hci_cmd_handle+0xb10>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9e74:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9e78:	3101      	adds	r1, #1
    9e7a:	d01f      	beq.n	9ebc <hci_cmd_handle+0xb10>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    9e7c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9e80:	3101      	adds	r1, #1
    9e82:	d01b      	beq.n	9ebc <hci_cmd_handle+0xb10>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    9e84:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    9e88:	4619      	mov	r1, r3
    9e8a:	f7ff f887 	bl	8f9c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    9e8e:	f104 0115 	add.w	r1, r4, #21
    9e92:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    9e96:	f7ff f881 	bl	8f9c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    9e9a:	f104 0119 	add.w	r1, r4, #25
    9e9e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    9ea2:	f7ff f87b 	bl	8f9c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    9ea6:	f104 011d 	add.w	r1, r4, #29
    9eaa:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    9eae:	e556      	b.n	995e <hci_cmd_handle+0x5b2>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    9eb0:	2210      	movs	r2, #16
    9eb2:	2100      	movs	r1, #0
    9eb4:	4618      	mov	r0, r3
    9eb6:	f7f8 f807 	bl	1ec8 <memset>
    9eba:	e7cf      	b.n	9e5c <hci_cmd_handle+0xab0>
		memset(rp->er, 0x00, sizeof(rp->er));
    9ebc:	2210      	movs	r2, #16
    9ebe:	2100      	movs	r1, #0
    9ec0:	4618      	mov	r0, r3
    9ec2:	e742      	b.n	9d4a <hci_cmd_handle+0x99e>
    9ec4:	00019281 	.word	0x00019281

00009ec8 <hci_acl_handle>:
{
    9ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    9ecc:	2300      	movs	r3, #0
    9ece:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9ed0:	8983      	ldrh	r3, [r0, #12]
    9ed2:	2b03      	cmp	r3, #3
{
    9ed4:	4606      	mov	r6, r0
    9ed6:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    9ed8:	d80e      	bhi.n	9ef8 <hci_acl_handle+0x30>
		BT_ERR("No HCI ACL header");
    9eda:	4b3d      	ldr	r3, [pc, #244]	; (9fd0 <hci_acl_handle+0x108>)
    9edc:	9301      	str	r3, [sp, #4]
    9ede:	9300      	str	r3, [sp, #0]
    9ee0:	4b3c      	ldr	r3, [pc, #240]	; (9fd4 <hci_acl_handle+0x10c>)
    9ee2:	4a3d      	ldr	r2, [pc, #244]	; (9fd8 <hci_acl_handle+0x110>)
    9ee4:	681c      	ldr	r4, [r3, #0]
    9ee6:	493d      	ldr	r1, [pc, #244]	; (9fdc <hci_acl_handle+0x114>)
    9ee8:	4b3d      	ldr	r3, [pc, #244]	; (9fe0 <hci_acl_handle+0x118>)
    9eea:	483e      	ldr	r0, [pc, #248]	; (9fe4 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL packet length");
    9eec:	47a0      	blx	r4
		return -EINVAL;
    9eee:	f06f 0015 	mvn.w	r0, #21
}
    9ef2:	b003      	add	sp, #12
    9ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    9ef8:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    9efc:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    9efe:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9f00:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    9f02:	f009 ffc2 	bl	13e8a <net_buf_simple_pull>
	if (buf->len < len) {
    9f06:	89b3      	ldrh	r3, [r6, #12]
    9f08:	42bb      	cmp	r3, r7
    9f0a:	d209      	bcs.n	9f20 <hci_acl_handle+0x58>
		BT_ERR("Invalid HCI ACL packet length");
    9f0c:	4b30      	ldr	r3, [pc, #192]	; (9fd0 <hci_acl_handle+0x108>)
    9f0e:	9301      	str	r3, [sp, #4]
    9f10:	9300      	str	r3, [sp, #0]
    9f12:	4b30      	ldr	r3, [pc, #192]	; (9fd4 <hci_acl_handle+0x10c>)
    9f14:	4a30      	ldr	r2, [pc, #192]	; (9fd8 <hci_acl_handle+0x110>)
    9f16:	681c      	ldr	r4, [r3, #0]
    9f18:	4930      	ldr	r1, [pc, #192]	; (9fdc <hci_acl_handle+0x114>)
    9f1a:	4b31      	ldr	r3, [pc, #196]	; (9fe0 <hci_acl_handle+0x118>)
    9f1c:	4832      	ldr	r0, [pc, #200]	; (9fe8 <hci_acl_handle+0x120>)
    9f1e:	e7e5      	b.n	9eec <hci_acl_handle+0x24>
	node_tx = ll_tx_mem_acquire();
    9f20:	f007 fd9c 	bl	11a5c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    9f24:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    9f28:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    9f2a:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    9f2e:	bb38      	cbnz	r0, 9f80 <hci_acl_handle+0xb8>
		BT_ERR("Tx Buffer Overflow");
    9f30:	4b27      	ldr	r3, [pc, #156]	; (9fd0 <hci_acl_handle+0x108>)
    9f32:	9301      	str	r3, [sp, #4]
    9f34:	9300      	str	r3, [sp, #0]
    9f36:	4b27      	ldr	r3, [pc, #156]	; (9fd4 <hci_acl_handle+0x10c>)
    9f38:	4a27      	ldr	r2, [pc, #156]	; (9fd8 <hci_acl_handle+0x110>)
    9f3a:	681c      	ldr	r4, [r3, #0]
    9f3c:	4927      	ldr	r1, [pc, #156]	; (9fdc <hci_acl_handle+0x114>)
    9f3e:	4b28      	ldr	r3, [pc, #160]	; (9fe0 <hci_acl_handle+0x118>)
    9f40:	482a      	ldr	r0, [pc, #168]	; (9fec <hci_acl_handle+0x124>)
    9f42:	47a0      	blx	r4
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    9f44:	4b2a      	ldr	r3, [pc, #168]	; (9ff0 <hci_acl_handle+0x128>)
    9f46:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f4a:	2300      	movs	r3, #0
    9f4c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    9f50:	4313      	orrs	r3, r2
    9f52:	d012      	beq.n	9f7a <hci_acl_handle+0xb2>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f58:	2001      	movs	r0, #1
    9f5a:	f7fa fb5d 	bl	4618 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9f5e:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9f60:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9f64:	211a      	movs	r1, #26
    9f66:	f7ff f822 	bl	8fae <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    9f6a:	f8d8 0000 	ldr.w	r0, [r8]
    9f6e:	2101      	movs	r1, #1
    9f70:	3008      	adds	r0, #8
    9f72:	f009 ff6b 	bl	13e4c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    9f76:	2301      	movs	r3, #1
    9f78:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    9f7a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9f7e:	e7b8      	b.n	9ef2 <hci_acl_handle+0x2a>
    9f80:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9f82:	f1b9 0f00 	cmp.w	r9, #0
    9f86:	d002      	beq.n	9f8e <hci_acl_handle+0xc6>
    9f88:	f1b9 0f02 	cmp.w	r9, #2
    9f8c:	d11d      	bne.n	9fca <hci_acl_handle+0x102>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9f8e:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9f90:	f362 0301 	bfi	r3, r2, #0, #2
    9f94:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    9f96:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    9f98:	68b1      	ldr	r1, [r6, #8]
    9f9a:	463a      	mov	r2, r7
    9f9c:	1de0      	adds	r0, r4, #7
    9f9e:	f7f7 ff67 	bl	1e70 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    9fa2:	4621      	mov	r1, r4
    9fa4:	4628      	mov	r0, r5
    9fa6:	f007 fd65 	bl	11a74 <ll_tx_mem_enqueue>
    9faa:	2800      	cmp	r0, #0
    9fac:	d0a1      	beq.n	9ef2 <hci_acl_handle+0x2a>
		BT_ERR("Invalid Tx Enqueue");
    9fae:	4b08      	ldr	r3, [pc, #32]	; (9fd0 <hci_acl_handle+0x108>)
    9fb0:	9301      	str	r3, [sp, #4]
    9fb2:	9300      	str	r3, [sp, #0]
    9fb4:	4b07      	ldr	r3, [pc, #28]	; (9fd4 <hci_acl_handle+0x10c>)
    9fb6:	4a08      	ldr	r2, [pc, #32]	; (9fd8 <hci_acl_handle+0x110>)
    9fb8:	681d      	ldr	r5, [r3, #0]
    9fba:	4908      	ldr	r1, [pc, #32]	; (9fdc <hci_acl_handle+0x114>)
    9fbc:	4b08      	ldr	r3, [pc, #32]	; (9fe0 <hci_acl_handle+0x118>)
    9fbe:	480d      	ldr	r0, [pc, #52]	; (9ff4 <hci_acl_handle+0x12c>)
    9fc0:	47a8      	blx	r5
		ll_tx_mem_release(node_tx);
    9fc2:	4620      	mov	r0, r4
    9fc4:	f007 fd50 	bl	11a68 <ll_tx_mem_release>
    9fc8:	e791      	b.n	9eee <hci_acl_handle+0x26>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9fca:	2201      	movs	r2, #1
    9fcc:	e7e0      	b.n	9f90 <hci_acl_handle+0xc8>
    9fce:	bf00      	nop
    9fd0:	000161ba 	.word	0x000161ba
    9fd4:	20003a5c 	.word	0x20003a5c
    9fd8:	000179e1 	.word	0x000179e1
    9fdc:	00017a29 	.word	0x00017a29
    9fe0:	000190d1 	.word	0x000190d1
    9fe4:	0001916f 	.word	0x0001916f
    9fe8:	00019191 	.word	0x00019191
    9fec:	000191bf 	.word	0x000191bf
    9ff0:	20003d28 	.word	0x20003d28
    9ff4:	000191e2 	.word	0x000191e2

00009ff8 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9ff8:	7a03      	ldrb	r3, [r0, #8]
    9ffa:	f003 0303 	and.w	r3, r3, #3
    9ffe:	3b01      	subs	r3, #1
    a000:	2b01      	cmp	r3, #1
{
    a002:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a004:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    a006:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    a008:	d81c      	bhi.n	a044 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    a00a:	f101 0608 	add.w	r6, r1, #8
    a00e:	4630      	mov	r0, r6
    a010:	2104      	movs	r1, #4
    a012:	f009 ff1b 	bl	13e4c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    a016:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    a018:	7a61      	ldrb	r1, [r4, #9]
    a01a:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    a01c:	f003 0303 	and.w	r3, r3, #3
    a020:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    a022:	bf0c      	ite	eq
    a024:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    a028:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    a02c:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    a02e:	4630      	mov	r0, r6
    a030:	f009 ff0c 	bl	13e4c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    a034:	7a62      	ldrb	r2, [r4, #9]
    a036:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    a03a:	b002      	add	sp, #8
    a03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    a040:	f7f7 bf16 	b.w	1e70 <memcpy>
		LL_ASSERT(0);
    a044:	4b07      	ldr	r3, [pc, #28]	; (a064 <hci_acl_encode+0x6c>)
    a046:	9301      	str	r3, [sp, #4]
    a048:	9300      	str	r3, [sp, #0]
    a04a:	4b07      	ldr	r3, [pc, #28]	; (a068 <hci_acl_encode+0x70>)
    a04c:	4a07      	ldr	r2, [pc, #28]	; (a06c <hci_acl_encode+0x74>)
    a04e:	681c      	ldr	r4, [r3, #0]
    a050:	4907      	ldr	r1, [pc, #28]	; (a070 <hci_acl_encode+0x78>)
    a052:	4b08      	ldr	r3, [pc, #32]	; (a074 <hci_acl_encode+0x7c>)
    a054:	4808      	ldr	r0, [pc, #32]	; (a078 <hci_acl_encode+0x80>)
    a056:	47a0      	blx	r4
    a058:	4040      	eors	r0, r0
    a05a:	f380 8811 	msr	BASEPRI, r0
    a05e:	f04f 0004 	mov.w	r0, #4
    a062:	df02      	svc	2
    a064:	000161ba 	.word	0x000161ba
    a068:	20003a5c 	.word	0x20003a5c
    a06c:	000179e1 	.word	0x000179e1
    a070:	00017a29 	.word	0x00017a29
    a074:	00019160 	.word	0x00019160
    a078:	00017955 	.word	0x00017955

0000a07c <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a080:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    a082:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a084:	2b01      	cmp	r3, #1
{
    a086:	b093      	sub	sp, #76	; 0x4c
    a088:	4604      	mov	r4, r0
    a08a:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    a08c:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a090:	f000 82ad 	beq.w	a5ee <hci_evt_encode+0x572>
	switch (node_rx->hdr.type) {
    a094:	3b02      	subs	r3, #2
    a096:	2b0a      	cmp	r3, #10
    a098:	f200 829f 	bhi.w	a5da <hci_evt_encode+0x55e>
    a09c:	e8df f013 	tbh	[pc, r3, lsl #1]
    a0a0:	0135000b 	.word	0x0135000b
    a0a4:	013d013b 	.word	0x013d013b
    a0a8:	01be0185 	.word	0x01be0185
    a0ac:	020101dc 	.word	0x020101dc
    a0b0:	022e0219 	.word	0x022e0219
    a0b4:	0249      	.short	0x0249
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a0b6:	2301      	movs	r3, #1
    a0b8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    a0bc:	2303      	movs	r3, #3
    a0be:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    a0c2:	23ff      	movs	r3, #255	; 0xff
    a0c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    a0c8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    a0cc:	2302      	movs	r3, #2
    a0ce:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a0d2:	7a43      	ldrb	r3, [r0, #9]
    a0d4:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a0d6:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a0d8:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    a0dc:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a0de:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    a0e2:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    a0e4:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    a0e6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    a0ea:	d505      	bpl.n	a0f8 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    a0ec:	f104 030a 	add.w	r3, r4, #10
    a0f0:	464a      	mov	r2, r9
    a0f2:	4608      	mov	r0, r1
    a0f4:	f008 fed0 	bl	12e98 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    a0f8:	4bb9      	ldr	r3, [pc, #740]	; (a3e0 <hci_evt_encode+0x364>)
    a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    a0fe:	2200      	movs	r2, #0
    a100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a104:	4313      	orrs	r3, r2
    a106:	f000 80ba 	beq.w	a27e <hci_evt_encode+0x202>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a10a:	7a63      	ldrb	r3, [r4, #9]
    a10c:	4423      	add	r3, r4
    a10e:	f893 a00c 	ldrb.w	sl, [r3, #12]
    a112:	4bb4      	ldr	r3, [pc, #720]	; (a3e4 <hci_evt_encode+0x368>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    a114:	e9d3 2300 	ldrd	r2, r3, [r3]
    a118:	f1ba 0f00 	cmp.w	sl, #0
    a11c:	d13d      	bne.n	a19a <hci_evt_encode+0x11e>
    a11e:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    a122:	2300      	movs	r3, #0
    a124:	4313      	orrs	r3, r2
    a126:	f000 80aa 	beq.w	a27e <hci_evt_encode+0x202>
	if (dup_count >= 0) {
    a12a:	4baf      	ldr	r3, [pc, #700]	; (a3e8 <hci_evt_encode+0x36c>)
    a12c:	681a      	ldr	r2, [r3, #0]
    a12e:	2a00      	cmp	r2, #0
    a130:	4698      	mov	r8, r3
    a132:	db54      	blt.n	a1de <hci_evt_encode+0x162>
    a134:	f8df b2e0 	ldr.w	fp, [pc, #736]	; a418 <hci_evt_encode+0x39c>
    a138:	2600      	movs	r6, #0
    a13a:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    a13e:	f8d8 2000 	ldr.w	r2, [r8]
    a142:	4296      	cmp	r6, r2
    a144:	db2c      	blt.n	a1a0 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    a146:	4ea9      	ldr	r6, [pc, #676]	; (a3ec <hci_evt_encode+0x370>)
    a148:	f8df b2a4 	ldr.w	fp, [pc, #676]	; a3f0 <hci_evt_encode+0x374>
    a14c:	6830      	ldr	r0, [r6, #0]
    a14e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    a152:	4619      	mov	r1, r3
    a154:	2206      	movs	r2, #6
    a156:	3002      	adds	r0, #2
    a158:	f7f7 fe8a 	bl	1e70 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    a15c:	6832      	ldr	r2, [r6, #0]
    a15e:	7a23      	ldrb	r3, [r4, #8]
    a160:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    a164:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a168:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    a16a:	7a23      	ldrb	r3, [r4, #8]
    a16c:	f003 010f 	and.w	r1, r3, #15
    a170:	2301      	movs	r3, #1
    a172:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a174:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    a178:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a17c:	290f      	cmp	r1, #15
			dup_count++;
    a17e:	bfd5      	itete	le
    a180:	3101      	addle	r1, #1
			dup_curr++;
    a182:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    a184:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    a186:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a188:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    a18a:	bfd8      	it	le
    a18c:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    a190:	2a10      	cmp	r2, #16
    a192:	d124      	bne.n	a1de <hci_evt_encode+0x162>
			dup_curr = 0;
    a194:	2200      	movs	r2, #0
    a196:	6032      	str	r2, [r6, #0]
    a198:	e021      	b.n	a1de <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    a19a:	f002 020b 	and.w	r2, r2, #11
    a19e:	e7c0      	b.n	a122 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    a1a0:	4618      	mov	r0, r3
    a1a2:	2206      	movs	r2, #6
    a1a4:	4659      	mov	r1, fp
    a1a6:	9307      	str	r3, [sp, #28]
    a1a8:	f7f7 fe4d 	bl	1e46 <memcmp>
    a1ac:	9b07      	ldr	r3, [sp, #28]
    a1ae:	bb00      	cbnz	r0, a1f2 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    a1b0:	7a21      	ldrb	r1, [r4, #8]
    a1b2:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    a1b6:	460a      	mov	r2, r1
    a1b8:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    a1bc:	4281      	cmp	r1, r0
    a1be:	d118      	bne.n	a1f2 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    a1c0:	488b      	ldr	r0, [pc, #556]	; (a3f0 <hci_evt_encode+0x374>)
    a1c2:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    a1c6:	f002 020f 	and.w	r2, r2, #15
    a1ca:	fa23 f102 	lsr.w	r1, r3, r2
    a1ce:	07c9      	lsls	r1, r1, #31
    a1d0:	d455      	bmi.n	a27e <hci_evt_encode+0x202>
				dup_filter[i].mask |= BIT(adv->type);
    a1d2:	2101      	movs	r1, #1
    a1d4:	fa01 f202 	lsl.w	r2, r1, r2
    a1d8:	4313      	orrs	r3, r2
    a1da:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    a1de:	f894 b008 	ldrb.w	fp, [r4, #8]
    a1e2:	7a63      	ldrb	r3, [r4, #9]
    a1e4:	f00b 0b0f 	and.w	fp, fp, #15
    a1e8:	f1bb 0f01 	cmp.w	fp, #1
    a1ec:	d105      	bne.n	a1fa <hci_evt_encode+0x17e>
		data_len = 0;
    a1ee:	2600      	movs	r6, #0
    a1f0:	e005      	b.n	a1fe <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    a1f2:	3601      	adds	r6, #1
    a1f4:	f10b 0b08 	add.w	fp, fp, #8
    a1f8:	e7a1      	b.n	a13e <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    a1fa:	1f9e      	subs	r6, r3, #6
    a1fc:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a1fe:	4423      	add	r3, r4
    a200:	f893 800a 	ldrb.w	r8, [r3, #10]
    a204:	f1c8 0800 	rsb	r8, r8, #0
    a208:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    a20c:	f1ba 0f00 	cmp.w	sl, #0
    a210:	d042      	beq.n	a298 <hci_evt_encode+0x21c>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    a212:	f1bb 0f01 	cmp.w	fp, #1
    a216:	d00f      	beq.n	a238 <hci_evt_encode+0x1bc>
    a218:	4b76      	ldr	r3, [pc, #472]	; (a3f4 <hci_evt_encode+0x378>)
    a21a:	9301      	str	r3, [sp, #4]
    a21c:	9300      	str	r3, [sp, #0]
    a21e:	4b76      	ldr	r3, [pc, #472]	; (a3f8 <hci_evt_encode+0x37c>)
    a220:	4a76      	ldr	r2, [pc, #472]	; (a3fc <hci_evt_encode+0x380>)
    a222:	681c      	ldr	r4, [r3, #0]
    a224:	4976      	ldr	r1, [pc, #472]	; (a400 <hci_evt_encode+0x384>)
    a226:	4b77      	ldr	r3, [pc, #476]	; (a404 <hci_evt_encode+0x388>)
    a228:	4877      	ldr	r0, [pc, #476]	; (a408 <hci_evt_encode+0x38c>)
		LL_ASSERT(0);
    a22a:	47a0      	blx	r4
    a22c:	4040      	eors	r0, r0
    a22e:	f380 8811 	msr	BASEPRI, r0
    a232:	f04f 0004 	mov.w	r0, #4
    a236:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    a238:	2211      	movs	r2, #17
    a23a:	210b      	movs	r1, #11
    a23c:	4628      	mov	r0, r5
    a23e:	f7fe fedb 	bl	8ff8 <meta_evt>
		drp->num_reports = 1;
    a242:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    a246:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    a24a:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    a24c:	f008 fcfa 	bl	12c44 <ll_rl_size_get>
    a250:	4581      	cmp	r9, r0
    a252:	f105 0003 	add.w	r0, r5, #3
    a256:	d215      	bcs.n	a284 <hci_evt_encode+0x208>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    a258:	4602      	mov	r2, r0
    a25a:	1ca9      	adds	r1, r5, #2
    a25c:	4648      	mov	r0, r9
    a25e:	f008 fb4f 	bl	12900 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    a262:	78ab      	ldrb	r3, [r5, #2]
    a264:	3302      	adds	r3, #2
    a266:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    a268:	2301      	movs	r3, #1
    a26a:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    a26c:	2206      	movs	r2, #6
    a26e:	f107 0108 	add.w	r1, r7, #8
    a272:	f105 000a 	add.w	r0, r5, #10
    a276:	f7f7 fdfb 	bl	1e70 <memcpy>
		dir_info->rssi = rssi;
    a27a:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    a27e:	b013      	add	sp, #76	; 0x4c
    a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    a284:	7a23      	ldrb	r3, [r4, #8]
    a286:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a28a:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    a28c:	2206      	movs	r2, #6
    a28e:	f104 010a 	add.w	r1, r4, #10
    a292:	f7f7 fded 	bl	1e70 <memcpy>
    a296:	e7e7      	b.n	a268 <hci_evt_encode+0x1ec>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    a298:	f106 020b 	add.w	r2, r6, #11
    a29c:	b2d2      	uxtb	r2, r2
    a29e:	2102      	movs	r1, #2
    a2a0:	4628      	mov	r0, r5
    a2a2:	f7fe fea9 	bl	8ff8 <meta_evt>
	sep->num_reports = 1;
    a2a6:	2301      	movs	r3, #1
    a2a8:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    a2aa:	7a23      	ldrb	r3, [r4, #8]
    a2ac:	aa12      	add	r2, sp, #72	; 0x48
    a2ae:	f003 030f 	and.w	r3, r3, #15
    a2b2:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    a2b4:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    a2b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    a2ba:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a2bc:	7a63      	ldrb	r3, [r4, #9]
    a2be:	4423      	add	r3, r4
    a2c0:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    a2c4:	f008 fcbe 	bl	12c44 <ll_rl_size_get>
    a2c8:	4581      	cmp	r9, r0
    a2ca:	f105 0003 	add.w	r0, r5, #3
    a2ce:	d212      	bcs.n	a2f6 <hci_evt_encode+0x27a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    a2d0:	4602      	mov	r2, r0
    a2d2:	1ca9      	adds	r1, r5, #2
    a2d4:	4648      	mov	r0, r9
    a2d6:	f008 fb13 	bl	12900 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    a2da:	78ab      	ldrb	r3, [r5, #2]
    a2dc:	3302      	adds	r3, #2
    a2de:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    a2e0:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    a2e2:	350a      	adds	r5, #10
    a2e4:	4632      	mov	r2, r6
    a2e6:	f107 0108 	add.w	r1, r7, #8
    a2ea:	4628      	mov	r0, r5
    a2ec:	f7f7 fdc0 	bl	1e70 <memcpy>
	*prssi = rssi;
    a2f0:	f805 8006 	strb.w	r8, [r5, r6]
    a2f4:	e7c3      	b.n	a27e <hci_evt_encode+0x202>
		adv_info->addr.type = adv->tx_addr;
    a2f6:	7a23      	ldrb	r3, [r4, #8]
    a2f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a2fc:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    a2fe:	2206      	movs	r2, #6
    a300:	f104 010a 	add.w	r1, r4, #10
    a304:	f7f7 fdb4 	bl	1e70 <memcpy>
    a308:	e7ea      	b.n	a2e0 <hci_evt_encode+0x264>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    a30a:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    a30c:	4621      	mov	r1, r4
    a30e:	4638      	mov	r0, r7
    a310:	f7fe ffca 	bl	92a8 <le_adv_ext_report.isra.66>
    a314:	e7b3      	b.n	a27e <hci_evt_encode+0x202>
    a316:	2204      	movs	r2, #4
    a318:	e7f8      	b.n	a30c <hci_evt_encode+0x290>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a31a:	4b31      	ldr	r3, [pc, #196]	; (a3e0 <hci_evt_encode+0x364>)
    a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a320:	2200      	movs	r2, #0
    a322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a326:	4313      	orrs	r3, r2
    a328:	f100 060a 	add.w	r6, r0, #10
    a32c:	d007      	beq.n	a33e <hci_evt_encode+0x2c2>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    a32e:	4b2d      	ldr	r3, [pc, #180]	; (a3e4 <hci_evt_encode+0x368>)
    a330:	e9d3 2300 	ldrd	r2, r3, [r3]
    a334:	2300      	movs	r3, #0
    a336:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a33a:	4313      	orrs	r3, r2
    a33c:	d124      	bne.n	a388 <hci_evt_encode+0x30c>
		addr.type = adv->tx_addr;
    a33e:	7a23      	ldrb	r3, [r4, #8]
    a340:	ad12      	add	r5, sp, #72	; 0x48
    a342:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    a346:	2206      	movs	r2, #6
    a348:	4631      	mov	r1, r6
    a34a:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    a34e:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    a352:	f7f7 fd8d 	bl	1e70 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    a356:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a358:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    a35a:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a35c:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    a35e:	4631      	mov	r1, r6
    a360:	4628      	mov	r0, r5
    a362:	f7fe ff65 	bl	9230 <bt_addr_le_to_str.constprop.71>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a366:	4264      	negs	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    a368:	4b22      	ldr	r3, [pc, #136]	; (a3f4 <hci_evt_encode+0x378>)
    a36a:	9304      	str	r3, [sp, #16]
    a36c:	9300      	str	r3, [sp, #0]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    a36e:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    a370:	2200      	movs	r2, #0
    a372:	4b21      	ldr	r3, [pc, #132]	; (a3f8 <hci_evt_encode+0x37c>)
    a374:	9201      	str	r2, [sp, #4]
    a376:	9403      	str	r4, [sp, #12]
    a378:	9602      	str	r6, [sp, #8]
    a37a:	681c      	ldr	r4, [r3, #0]
    a37c:	4a23      	ldr	r2, [pc, #140]	; (a40c <hci_evt_encode+0x390>)
    a37e:	4b24      	ldr	r3, [pc, #144]	; (a410 <hci_evt_encode+0x394>)
    a380:	491f      	ldr	r1, [pc, #124]	; (a400 <hci_evt_encode+0x384>)
    a382:	4824      	ldr	r0, [pc, #144]	; (a414 <hci_evt_encode+0x398>)
    a384:	47a0      	blx	r4
    a386:	e77a      	b.n	a27e <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    a388:	2208      	movs	r2, #8
    a38a:	2113      	movs	r1, #19
    a38c:	4628      	mov	r0, r5
    a38e:	f7fe fe33 	bl	8ff8 <meta_evt>
	sep->handle = 0;
    a392:	2300      	movs	r3, #0
    a394:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    a396:	7a23      	ldrb	r3, [r4, #8]
    a398:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a39c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    a39e:	2206      	movs	r2, #6
    a3a0:	4631      	mov	r1, r6
    a3a2:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    a3a4:	f7f7 fd64 	bl	1e70 <memcpy>
    a3a8:	e769      	b.n	a27e <hci_evt_encode+0x202>
			le_conn_complete(cc->status, cc, handle, buf);
    a3aa:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    a3ac:	b93f      	cbnz	r7, a3be <hci_evt_encode+0x342>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    a3ae:	f100 0314 	add.w	r3, r0, #20
    a3b2:	f100 010e 	add.w	r1, r0, #14
    a3b6:	22ff      	movs	r2, #255	; 0xff
    a3b8:	7b40      	ldrb	r0, [r0, #13]
    a3ba:	f008 fd6d 	bl	12e98 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a3be:	4b08      	ldr	r3, [pc, #32]	; (a3e0 <hci_evt_encode+0x364>)
    a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a3c4:	2200      	movs	r2, #0
    a3c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a3ca:	4313      	orrs	r3, r2
    a3cc:	f43f af57 	beq.w	a27e <hci_evt_encode+0x202>
    a3d0:	462b      	mov	r3, r5
    a3d2:	4632      	mov	r2, r6
    a3d4:	f104 010b 	add.w	r1, r4, #11
    a3d8:	4638      	mov	r0, r7
    a3da:	f7fe fe93 	bl	9104 <le_conn_complete.part.39>
    a3de:	e74e      	b.n	a27e <hci_evt_encode+0x202>
    a3e0:	20003d28 	.word	0x20003d28
    a3e4:	20003d30 	.word	0x20003d30
    a3e8:	20000830 	.word	0x20000830
    a3ec:	20000834 	.word	0x20000834
    a3f0:	20000838 	.word	0x20000838
    a3f4:	000161ba 	.word	0x000161ba
    a3f8:	20003a5c 	.word	0x20003a5c
    a3fc:	000179e1 	.word	0x000179e1
    a400:	00017a29 	.word	0x00017a29
    a404:	000190e0 	.word	0x000190e0
    a408:	000192a9 	.word	0x000192a9
    a40c:	00017a64 	.word	0x00017a64
    a410:	00019108 	.word	0x00019108
    a414:	000192ef 	.word	0x000192ef
    a418:	2000083a 	.word	0x2000083a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    a41c:	4bb8      	ldr	r3, [pc, #736]	; (a700 <hci_evt_encode+0x684>)
    a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a422:	2300      	movs	r3, #0
    a424:	f002 0210 	and.w	r2, r2, #16
    a428:	4313      	orrs	r3, r2
    a42a:	f43f af28 	beq.w	a27e <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    a42e:	2204      	movs	r2, #4
    a430:	2105      	movs	r1, #5
    a432:	4628      	mov	r0, r5
    a434:	f7fe fdbb 	bl	8fae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a438:	2104      	movs	r1, #4
    a43a:	f105 0008 	add.w	r0, r5, #8
    a43e:	f009 fd05 	bl	13e4c <net_buf_simple_add>
	ep->status = 0x00;
    a442:	2300      	movs	r3, #0
	conn_count--;
    a444:	4aaf      	ldr	r2, [pc, #700]	; (a704 <hci_evt_encode+0x688>)
	ep->status = 0x00;
    a446:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a448:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    a44c:	7a23      	ldrb	r3, [r4, #8]
    a44e:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    a450:	6813      	ldr	r3, [r2, #0]
    a452:	3b01      	subs	r3, #1
    a454:	6013      	str	r3, [r2, #0]
    a456:	e712      	b.n	a27e <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a458:	4ba9      	ldr	r3, [pc, #676]	; (a700 <hci_evt_encode+0x684>)
    a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a45e:	2200      	movs	r2, #0
    a460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a464:	4313      	orrs	r3, r2
    a466:	f43f af0a 	beq.w	a27e <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    a46a:	4ba7      	ldr	r3, [pc, #668]	; (a708 <hci_evt_encode+0x68c>)
    a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a470:	2300      	movs	r3, #0
    a472:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a476:	4313      	orrs	r3, r2
    a478:	f43f af01 	beq.w	a27e <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    a47c:	2209      	movs	r2, #9
    a47e:	2103      	movs	r1, #3
    a480:	4628      	mov	r0, r5
    a482:	f7fe fdb9 	bl	8ff8 <meta_evt>
	sep->status = radio_cu->status;
    a486:	7ae3      	ldrb	r3, [r4, #11]
    a488:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    a48a:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    a48c:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    a490:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    a494:	89e3      	ldrh	r3, [r4, #14]
    a496:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    a49a:	8a23      	ldrh	r3, [r4, #16]
    a49c:	f8a0 3007 	strh.w	r3, [r0, #7]
    a4a0:	e6ed      	b.n	a27e <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    a4a2:	4b97      	ldr	r3, [pc, #604]	; (a700 <hci_evt_encode+0x684>)
    a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4a8:	2200      	movs	r2, #0
    a4aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a4ae:	4313      	orrs	r3, r2
    a4b0:	f43f aee5 	beq.w	a27e <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    a4b4:	2203      	movs	r2, #3
    a4b6:	2130      	movs	r1, #48	; 0x30
    a4b8:	4628      	mov	r0, r5
    a4ba:	f7fe fd78 	bl	8fae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a4be:	2103      	movs	r1, #3
    a4c0:	f105 0008 	add.w	r0, r5, #8
    a4c4:	f009 fcc2 	bl	13e4c <net_buf_simple_add>
	ep->status = 0x00;
    a4c8:	2300      	movs	r3, #0
    a4ca:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a4cc:	f8a0 6001 	strh.w	r6, [r0, #1]
    a4d0:	e6d5      	b.n	a27e <hci_evt_encode+0x202>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    a4d2:	4b8e      	ldr	r3, [pc, #568]	; (a70c <hci_evt_encode+0x690>)
    a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4d8:	2300      	movs	r3, #0
    a4da:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    a4de:	4313      	orrs	r3, r2
    a4e0:	f43f aecd 	beq.w	a27e <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    a4e4:	2202      	movs	r2, #2
    a4e6:	2157      	movs	r1, #87	; 0x57
    a4e8:	4628      	mov	r0, r5
    a4ea:	f7fe fd60 	bl	8fae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a4ee:	2102      	movs	r1, #2
    a4f0:	f105 0008 	add.w	r0, r5, #8
    a4f4:	f009 fcaa 	bl	13e4c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    a4f8:	8006      	strh	r6, [r0, #0]
    a4fa:	e6c0      	b.n	a27e <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a4fc:	4b80      	ldr	r3, [pc, #512]	; (a700 <hci_evt_encode+0x684>)
    a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    a502:	2200      	movs	r2, #0
    a504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a508:	4313      	orrs	r3, r2
    a50a:	f43f aeb8 	beq.w	a27e <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    a50e:	4b7e      	ldr	r3, [pc, #504]	; (a708 <hci_evt_encode+0x68c>)
    a510:	e9d3 2300 	ldrd	r2, r3, [r3]
    a514:	2300      	movs	r3, #0
    a516:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a51a:	4313      	orrs	r3, r2
    a51c:	f43f aeaf 	beq.w	a27e <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    a520:	2203      	movs	r2, #3
    a522:	2114      	movs	r1, #20
    a524:	4628      	mov	r0, r5
    a526:	f7fe fd67 	bl	8ff8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a52a:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    a52c:	7ae3      	ldrb	r3, [r4, #11]
    a52e:	7083      	strb	r3, [r0, #2]
    a530:	e6a5      	b.n	a27e <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a532:	4b73      	ldr	r3, [pc, #460]	; (a700 <hci_evt_encode+0x684>)
    a534:	e9d3 2300 	ldrd	r2, r3, [r3]
    a538:	2200      	movs	r2, #0
    a53a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a53e:	4313      	orrs	r3, r2
    a540:	d007      	beq.n	a552 <hci_evt_encode+0x4d6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    a542:	4b71      	ldr	r3, [pc, #452]	; (a708 <hci_evt_encode+0x68c>)
    a544:	e9d3 2300 	ldrd	r2, r3, [r3]
    a548:	2300      	movs	r3, #0
    a54a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a54e:	4313      	orrs	r3, r2
    a550:	d123      	bne.n	a59a <hci_evt_encode+0x51e>
    a552:	7b22      	ldrb	r2, [r4, #12]
    a554:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    a556:	486e      	ldr	r0, [pc, #440]	; (a710 <hci_evt_encode+0x694>)
    a558:	2a00      	cmp	r2, #0
    a55a:	fa92 f3a2 	rbit	r3, r2
    a55e:	fab3 f383 	clz	r3, r3
    a562:	fa91 f2a1 	rbit	r2, r1
    a566:	bf08      	it	eq
    a568:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a56c:	2900      	cmp	r1, #0
    a56e:	fab2 f282 	clz	r2, r2
    a572:	bf08      	it	eq
    a574:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    a578:	4966      	ldr	r1, [pc, #408]	; (a714 <hci_evt_encode+0x698>)
    a57a:	9105      	str	r1, [sp, #20]
    a57c:	3301      	adds	r3, #1
    a57e:	3201      	adds	r2, #1
    a580:	9204      	str	r2, [sp, #16]
    a582:	9303      	str	r3, [sp, #12]
    a584:	7ae3      	ldrb	r3, [r4, #11]
    a586:	9302      	str	r3, [sp, #8]
    a588:	e88d 0042 	stmia.w	sp, {r1, r6}
    a58c:	4b62      	ldr	r3, [pc, #392]	; (a718 <hci_evt_encode+0x69c>)
    a58e:	4a63      	ldr	r2, [pc, #396]	; (a71c <hci_evt_encode+0x6a0>)
    a590:	681c      	ldr	r4, [r3, #0]
    a592:	4963      	ldr	r1, [pc, #396]	; (a720 <hci_evt_encode+0x6a4>)
    a594:	4b63      	ldr	r3, [pc, #396]	; (a724 <hci_evt_encode+0x6a8>)
    a596:	47a0      	blx	r4
    a598:	e671      	b.n	a27e <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    a59a:	2205      	movs	r2, #5
    a59c:	210c      	movs	r1, #12
    a59e:	4628      	mov	r0, r5
    a5a0:	f7fe fd2a 	bl	8ff8 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    a5a4:	7ae3      	ldrb	r3, [r4, #11]
    a5a6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    a5a8:	f8a0 6001 	strh.w	r6, [r0, #1]
    a5ac:	7b22      	ldrb	r2, [r4, #12]
    a5ae:	2a00      	cmp	r2, #0
    a5b0:	fa92 f3a2 	rbit	r3, r2
    a5b4:	fab3 f383 	clz	r3, r3
    a5b8:	bf08      	it	eq
    a5ba:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a5be:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    a5c0:	70c3      	strb	r3, [r0, #3]
    a5c2:	7b62      	ldrb	r2, [r4, #13]
    a5c4:	fa92 f3a2 	rbit	r3, r2
    a5c8:	2a00      	cmp	r2, #0
    a5ca:	fab3 f383 	clz	r3, r3
    a5ce:	bf08      	it	eq
    a5d0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a5d4:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    a5d6:	7103      	strb	r3, [r0, #4]
    a5d8:	e651      	b.n	a27e <hci_evt_encode+0x202>
		LL_ASSERT(0);
    a5da:	4b4e      	ldr	r3, [pc, #312]	; (a714 <hci_evt_encode+0x698>)
    a5dc:	9301      	str	r3, [sp, #4]
    a5de:	9300      	str	r3, [sp, #0]
    a5e0:	4b4d      	ldr	r3, [pc, #308]	; (a718 <hci_evt_encode+0x69c>)
    a5e2:	681c      	ldr	r4, [r3, #0]
    a5e4:	4b50      	ldr	r3, [pc, #320]	; (a728 <hci_evt_encode+0x6ac>)
    a5e6:	4a51      	ldr	r2, [pc, #324]	; (a72c <hci_evt_encode+0x6b0>)
    a5e8:	494d      	ldr	r1, [pc, #308]	; (a720 <hci_evt_encode+0x6a4>)
    a5ea:	4851      	ldr	r0, [pc, #324]	; (a730 <hci_evt_encode+0x6b4>)
    a5ec:	e61d      	b.n	a22a <hci_evt_encode+0x1ae>
	switch (pdu_data->llctrl.opcode) {
    a5ee:	7ac3      	ldrb	r3, [r0, #11]
    a5f0:	3b03      	subs	r3, #3
    a5f2:	2b12      	cmp	r3, #18
    a5f4:	f200 80e1 	bhi.w	a7ba <hci_evt_encode+0x73e>
    a5f8:	e8df f013 	tbh	[pc, r3, lsl #1]
    a5fc:	00df0013 	.word	0x00df0013
    a600:	003800df 	.word	0x003800df
    a604:	00df00cb 	.word	0x00df00cb
    a608:	00df003e 	.word	0x00df003e
    a60c:	004500df 	.word	0x004500df
    a610:	00df0064 	.word	0x00df0064
    a614:	00df0068 	.word	0x00df0068
    a618:	00df00df 	.word	0x00df00df
    a61c:	00ab00df 	.word	0x00ab00df
    a620:	00ab      	.short	0x00ab
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a622:	4b37      	ldr	r3, [pc, #220]	; (a700 <hci_evt_encode+0x684>)
    a624:	e9d3 2300 	ldrd	r2, r3, [r3]
    a628:	2200      	movs	r2, #0
    a62a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a62e:	4313      	orrs	r3, r2
    a630:	f43f ae25 	beq.w	a27e <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    a634:	4b34      	ldr	r3, [pc, #208]	; (a708 <hci_evt_encode+0x68c>)
    a636:	e9d3 2300 	ldrd	r2, r3, [r3]
    a63a:	2300      	movs	r3, #0
    a63c:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a640:	4313      	orrs	r3, r2
    a642:	f43f ae1c 	beq.w	a27e <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a646:	220c      	movs	r2, #12
    a648:	2105      	movs	r1, #5
    a64a:	4628      	mov	r0, r5
    a64c:	f7fe fcd4 	bl	8ff8 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a650:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    a652:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a654:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    a658:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    a65c:	f7f7 fc08 	bl	1e70 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    a660:	2202      	movs	r2, #2
    a662:	f104 0114 	add.w	r1, r4, #20
    a666:	f105 000a 	add.w	r0, r5, #10
    a66a:	e69b      	b.n	a3a4 <hci_evt_encode+0x328>
		encrypt_change(0x00, handle, buf);
    a66c:	460a      	mov	r2, r1
    a66e:	2000      	movs	r0, #0
    a670:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a672:	f7fe fcf9 	bl	9068 <encrypt_change>
    a676:	e602      	b.n	a27e <hci_evt_encode+0x202>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    a678:	460b      	mov	r3, r1
    a67a:	4632      	mov	r2, r6
    a67c:	4639      	mov	r1, r7
    a67e:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a680:	f7fe fd12 	bl	90a8 <le_remote_feat_complete>
    a684:	e5fb      	b.n	a27e <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    a686:	4b1e      	ldr	r3, [pc, #120]	; (a700 <hci_evt_encode+0x684>)
    a688:	e9d3 2300 	ldrd	r2, r3, [r3]
    a68c:	2300      	movs	r3, #0
    a68e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    a692:	4313      	orrs	r3, r2
    a694:	f43f adf3 	beq.w	a27e <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    a698:	2208      	movs	r2, #8
    a69a:	210c      	movs	r1, #12
    a69c:	4628      	mov	r0, r5
    a69e:	f7fe fc86 	bl	8fae <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    a6a2:	2108      	movs	r1, #8
    a6a4:	1868      	adds	r0, r5, r1
    a6a6:	f009 fbd1 	bl	13e4c <net_buf_simple_add>
	ep->status = 0x00;
    a6aa:	2300      	movs	r3, #0
    a6ac:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    a6ae:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    a6b2:	7b23      	ldrb	r3, [r4, #12]
    a6b4:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    a6b6:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    a6ba:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    a6bc:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    a6c0:	80c3      	strh	r3, [r0, #6]
    a6c2:	e5dc      	b.n	a27e <hci_evt_encode+0x202>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    a6c4:	460a      	mov	r2, r1
    a6c6:	7b00      	ldrb	r0, [r0, #12]
    a6c8:	4631      	mov	r1, r6
    a6ca:	e7d2      	b.n	a672 <hci_evt_encode+0x5f6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a6cc:	4b0c      	ldr	r3, [pc, #48]	; (a700 <hci_evt_encode+0x684>)
    a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6d2:	2200      	movs	r2, #0
    a6d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a6d8:	4313      	orrs	r3, r2
    a6da:	d007      	beq.n	a6ec <hci_evt_encode+0x670>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    a6dc:	4b0a      	ldr	r3, [pc, #40]	; (a708 <hci_evt_encode+0x68c>)
    a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6e2:	2300      	movs	r3, #0
    a6e4:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a6e8:	4313      	orrs	r3, r2
    a6ea:	d123      	bne.n	a734 <hci_evt_encode+0x6b8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a6ec:	2300      	movs	r3, #0
    a6ee:	9301      	str	r3, [sp, #4]
    a6f0:	9300      	str	r3, [sp, #0]
    a6f2:	221a      	movs	r2, #26
    a6f4:	2102      	movs	r1, #2
    a6f6:	4630      	mov	r0, r6
    a6f8:	f006 ff06 	bl	11508 <ll_conn_update>
    a6fc:	e5bf      	b.n	a27e <hci_evt_encode+0x202>
    a6fe:	bf00      	nop
    a700:	20003d28 	.word	0x20003d28
    a704:	2000082c 	.word	0x2000082c
    a708:	20003d30 	.word	0x20003d30
    a70c:	200008b8 	.word	0x200008b8
    a710:	00019322 	.word	0x00019322
    a714:	000161ba 	.word	0x000161ba
    a718:	20003a5c 	.word	0x20003a5c
    a71c:	00017a64 	.word	0x00017a64
    a720:	00017a29 	.word	0x00017a29
    a724:	0001911d 	.word	0x0001911d
    a728:	00019131 	.word	0x00019131
    a72c:	000179e1 	.word	0x000179e1
    a730:	00017955 	.word	0x00017955
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    a734:	220a      	movs	r2, #10
    a736:	2106      	movs	r1, #6
    a738:	4628      	mov	r0, r5
    a73a:	f7fe fc5d 	bl	8ff8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a73e:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    a740:	89a3      	ldrh	r3, [r4, #12]
    a742:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    a744:	89e3      	ldrh	r3, [r4, #14]
    a746:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    a748:	8a23      	ldrh	r3, [r4, #16]
    a74a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    a74c:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a74e:	8103      	strh	r3, [r0, #8]
    a750:	e595      	b.n	a27e <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a752:	4b1d      	ldr	r3, [pc, #116]	; (a7c8 <hci_evt_encode+0x74c>)
    a754:	e9d3 2300 	ldrd	r2, r3, [r3]
    a758:	2200      	movs	r2, #0
    a75a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a75e:	4313      	orrs	r3, r2
    a760:	f43f ad8d 	beq.w	a27e <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    a764:	4b19      	ldr	r3, [pc, #100]	; (a7cc <hci_evt_encode+0x750>)
    a766:	e9d3 2300 	ldrd	r2, r3, [r3]
    a76a:	2300      	movs	r3, #0
    a76c:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    a770:	4313      	orrs	r3, r2
    a772:	f43f ad84 	beq.w	a27e <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    a776:	220a      	movs	r2, #10
    a778:	2107      	movs	r1, #7
    a77a:	4628      	mov	r0, r5
    a77c:	f7fe fc3c 	bl	8ff8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    a780:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    a782:	8a23      	ldrh	r3, [r4, #16]
    a784:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    a786:	8a63      	ldrh	r3, [r4, #18]
    a788:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    a78a:	89a3      	ldrh	r3, [r4, #12]
    a78c:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    a78e:	89e3      	ldrh	r3, [r4, #14]
    a790:	e7dd      	b.n	a74e <hci_evt_encode+0x6d2>
    a792:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a794:	2a0e      	cmp	r2, #14
    a796:	d104      	bne.n	a7a2 <hci_evt_encode+0x726>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    a798:	460b      	mov	r3, r1
    a79a:	4632      	mov	r2, r6
    a79c:	2100      	movs	r1, #0
    a79e:	201a      	movs	r0, #26
    a7a0:	e76e      	b.n	a680 <hci_evt_encode+0x604>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    a7a2:	4b0b      	ldr	r3, [pc, #44]	; (a7d0 <hci_evt_encode+0x754>)
    a7a4:	9302      	str	r3, [sp, #8]
    a7a6:	9300      	str	r3, [sp, #0]
    a7a8:	4b0a      	ldr	r3, [pc, #40]	; (a7d4 <hci_evt_encode+0x758>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
    a7aa:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    a7ac:	681c      	ldr	r4, [r3, #0]
    a7ae:	4a0a      	ldr	r2, [pc, #40]	; (a7d8 <hci_evt_encode+0x75c>)
    a7b0:	4b0a      	ldr	r3, [pc, #40]	; (a7dc <hci_evt_encode+0x760>)
    a7b2:	490b      	ldr	r1, [pc, #44]	; (a7e0 <hci_evt_encode+0x764>)
    a7b4:	480b      	ldr	r0, [pc, #44]	; (a7e4 <hci_evt_encode+0x768>)
    a7b6:	47a0      	blx	r4
    a7b8:	e561      	b.n	a27e <hci_evt_encode+0x202>
		LL_ASSERT(0);
    a7ba:	4b05      	ldr	r3, [pc, #20]	; (a7d0 <hci_evt_encode+0x754>)
    a7bc:	9301      	str	r3, [sp, #4]
    a7be:	9300      	str	r3, [sp, #0]
    a7c0:	4b04      	ldr	r3, [pc, #16]	; (a7d4 <hci_evt_encode+0x758>)
    a7c2:	681c      	ldr	r4, [r3, #0]
    a7c4:	4b08      	ldr	r3, [pc, #32]	; (a7e8 <hci_evt_encode+0x76c>)
    a7c6:	e70e      	b.n	a5e6 <hci_evt_encode+0x56a>
    a7c8:	20003d28 	.word	0x20003d28
    a7cc:	20003d30 	.word	0x20003d30
    a7d0:	000161ba 	.word	0x000161ba
    a7d4:	20003a5c 	.word	0x20003a5c
    a7d8:	00017a64 	.word	0x00017a64
    a7dc:	00019140 	.word	0x00019140
    a7e0:	00017a29 	.word	0x00017a29
    a7e4:	0001935e 	.word	0x0001935e
    a7e8:	0001914f 	.word	0x0001914f

0000a7ec <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    a7ec:	b570      	push	{r4, r5, r6, lr}
    a7ee:	4606      	mov	r6, r0
    a7f0:	460d      	mov	r5, r1
    a7f2:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    a7f4:	2113      	movs	r1, #19
    a7f6:	2205      	movs	r2, #5
    a7f8:	f7fe fbd9 	bl	8fae <evt_create>

	ep = net_buf_add(buf, len);
    a7fc:	2105      	movs	r1, #5
    a7fe:	f106 0008 	add.w	r0, r6, #8
    a802:	f009 fb23 	bl	13e4c <net_buf_simple_add>
	ep->num_handles = num_handles;
    a806:	2301      	movs	r3, #1
    a808:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    a80a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    a80e:	f8a0 4003 	strh.w	r4, [r0, #3]
    a812:	bd70      	pop	{r4, r5, r6, pc}

0000a814 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a814:	7903      	ldrb	r3, [r0, #4]
    a816:	2b01      	cmp	r3, #1
    a818:	d006      	beq.n	a828 <hci_get_class+0x14>
    a81a:	3b02      	subs	r3, #2
    a81c:	b2db      	uxtb	r3, r3
    a81e:	2b0a      	cmp	r3, #10
    a820:	d80a      	bhi.n	a838 <hci_get_class+0x24>
    a822:	4a07      	ldr	r2, [pc, #28]	; (a840 <hci_get_class+0x2c>)
    a824:	56d0      	ldrsb	r0, [r2, r3]
    a826:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    a828:	7a03      	ldrb	r3, [r0, #8]
    a82a:	f003 0303 	and.w	r3, r3, #3
    a82e:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    a830:	bf0c      	ite	eq
    a832:	2002      	moveq	r0, #2
    a834:	2003      	movne	r0, #3
    a836:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    a838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    a83c:	4770      	bx	lr
    a83e:	bf00      	nop
    a840:	000190a3 	.word	0x000190a3

0000a844 <hci_init>:
	dup_count = -1;
    a844:	4b0a      	ldr	r3, [pc, #40]	; (a870 <hci_init+0x2c>)
    a846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a84a:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    a84c:	4b09      	ldr	r3, [pc, #36]	; (a874 <hci_init+0x30>)
    a84e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a852:	f641 71ff 	movw	r1, #8191	; 0x1fff
    a856:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    a85a:	4b07      	ldr	r3, [pc, #28]	; (a878 <hci_init+0x34>)
    a85c:	2000      	movs	r0, #0
    a85e:	2100      	movs	r1, #0
    a860:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    a864:	4b05      	ldr	r3, [pc, #20]	; (a87c <hci_init+0x38>)
    a866:	201f      	movs	r0, #31
    a868:	2100      	movs	r1, #0
    a86a:	e9c3 0100 	strd	r0, r1, [r3]
    a86e:	4770      	bx	lr
    a870:	20000830 	.word	0x20000830
    a874:	20003d28 	.word	0x20003d28
    a878:	200008b8 	.word	0x200008b8
    a87c:	20003d30 	.word	0x20003d30

0000a880 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    a880:	bf20      	wfe
	__SEV();
    a882:	bf40      	sev
	__WFE();
    a884:	bf20      	wfe
    a886:	4770      	bx	lr

0000a888 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    a888:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    a88a:	4b0d      	ldr	r3, [pc, #52]	; (a8c0 <pdu_len_cmp+0x38>)
{
    a88c:	b089      	sub	sp, #36	; 0x24
    a88e:	4605      	mov	r5, r0
    a890:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    a892:	aa01      	add	r2, sp, #4
    a894:	f103 0718 	add.w	r7, r3, #24
    a898:	6818      	ldr	r0, [r3, #0]
    a89a:	6859      	ldr	r1, [r3, #4]
    a89c:	4614      	mov	r4, r2
    a89e:	c403      	stmia	r4!, {r0, r1}
    a8a0:	3308      	adds	r3, #8
    a8a2:	42bb      	cmp	r3, r7
    a8a4:	4622      	mov	r2, r4
    a8a6:	d1f7      	bne.n	a898 <pdu_len_cmp+0x10>
    a8a8:	881b      	ldrh	r3, [r3, #0]
    a8aa:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    a8ac:	ab08      	add	r3, sp, #32
    a8ae:	441d      	add	r5, r3
    a8b0:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    a8b4:	1b83      	subs	r3, r0, r6
    a8b6:	4258      	negs	r0, r3
    a8b8:	4158      	adcs	r0, r3
    a8ba:	b009      	add	sp, #36	; 0x24
    a8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8be:	bf00      	nop
    a8c0:	00015fe3 	.word	0x00015fe3

0000a8c4 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    a8c4:	6008      	str	r0, [r1, #0]
    a8c6:	4770      	bx	lr

0000a8c8 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    a8c8:	b918      	cbnz	r0, a8d2 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    a8ca:	680b      	ldr	r3, [r1, #0]
    a8cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a8d0:	600b      	str	r3, [r1, #0]
    a8d2:	4770      	bx	lr

0000a8d4 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    a8d4:	b918      	cbnz	r0, a8de <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    a8d6:	680b      	ldr	r3, [r1, #0]
    a8d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a8dc:	600b      	str	r3, [r1, #0]
    a8de:	4770      	bx	lr

0000a8e0 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    a8e0:	b570      	push	{r4, r5, r6, lr}
    a8e2:	1d03      	adds	r3, r0, #4
    a8e4:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    a8e6:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    a8e8:	429d      	cmp	r5, r3
    a8ea:	d101      	bne.n	a8f0 <chan_sel_remap+0x10>
    a8ec:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    a8ee:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    a8f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    a8f4:	2200      	movs	r2, #0
    a8f6:	18a0      	adds	r0, r4, r2
    a8f8:	2a08      	cmp	r2, #8
    a8fa:	b2c0      	uxtb	r0, r0
    a8fc:	d101      	bne.n	a902 <chan_sel_remap+0x22>
    a8fe:	4604      	mov	r4, r0
    a900:	e7f2      	b.n	a8e8 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    a902:	f016 0f01 	tst.w	r6, #1
    a906:	d003      	beq.n	a910 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    a908:	2900      	cmp	r1, #0
    a90a:	d0f0      	beq.n	a8ee <chan_sel_remap+0xe>
				chan_index--;
    a90c:	3901      	subs	r1, #1
    a90e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    a910:	0876      	lsrs	r6, r6, #1
    a912:	3201      	adds	r2, #1
    a914:	e7ef      	b.n	a8f6 <chan_sel_remap+0x16>
	...

0000a918 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    a918:	4b09      	ldr	r3, [pc, #36]	; (a940 <packet_rx_acquired_count_get+0x28>)
    a91a:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    a91e:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    a922:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    a924:	bf3b      	ittet	cc
    a926:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    a92a:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    a92e:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    a932:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    a934:	bf2c      	ite	cs
    a936:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    a938:	1a80      	subcc	r0, r0, r2
    a93a:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    a93c:	4770      	bx	lr
    a93e:	bf00      	nop
    a940:	200008c0 	.word	0x200008c0

0000a944 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    a944:	b508      	push	{r3, lr}
    a946:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    a948:	f7ff ffe6 	bl	a918 <packet_rx_acquired_count_get>
    a94c:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    a94e:	bf21      	itttt	cs
    a950:	4b04      	ldrcs	r3, [pc, #16]	; (a964 <packet_rx_reserve_get+0x20>)
    a952:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    a956:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    a95a:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    a95e:	bf38      	it	cc
    a960:	2000      	movcc	r0, #0
}
    a962:	bd08      	pop	{r3, pc}
    a964:	200008c0 	.word	0x200008c0

0000a968 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    a968:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    a96a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    a96e:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    a972:	429c      	cmp	r4, r3
    a974:	d15a      	bne.n	aa2c <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    a976:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a97a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    a97e:	428b      	cmp	r3, r1
    a980:	d154      	bne.n	aa2c <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    a982:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a986:	2b00      	cmp	r3, #0
    a988:	db25      	blt.n	a9d6 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    a98a:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    a98c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    a98e:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    a992:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    a994:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    a998:	4351      	muls	r1, r2
					      conn->supervision_reload *
    a99a:	227d      	movs	r2, #125	; 0x7d
    a99c:	434a      	muls	r2, r1
					      125 / 1000;
    a99e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a9a2:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    a9a6:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    a9aa:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    a9ae:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    a9b0:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    a9b4:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    a9b6:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    a9b8:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    a9bc:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    a9be:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    a9c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    a9c6:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    a9ca:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    a9ce:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    a9d2:	4618      	mov	r0, r3
    a9d4:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    a9d6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    a9da:	06dc      	lsls	r4, r3, #27
    a9dc:	d428      	bmi.n	aa30 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    a9de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    a9e2:	069a      	lsls	r2, r3, #26
    a9e4:	d503      	bpl.n	a9ee <conn_update_req+0x86>
		    (conn->llcp_features &
    a9e6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    a9ea:	079b      	lsls	r3, r3, #30
    a9ec:	d520      	bpl.n	aa30 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    a9ee:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    a9f0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    a9f2:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    a9f6:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    a9f8:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    a9fc:	4354      	muls	r4, r2
						conn->supervision_reload *
    a9fe:	227d      	movs	r2, #125	; 0x7d
    aa00:	4362      	muls	r2, r4
						125 / 1000;
    aa02:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    aa06:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    aa0a:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    aa0e:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    aa12:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    aa14:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    aa18:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    aa1c:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    aa1e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    aa22:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    aa26:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    aa2a:	e7d2      	b.n	a9d2 <conn_update_req+0x6a>
		return 1;
    aa2c:	2001      	movs	r0, #1
    aa2e:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    aa30:	2002      	movs	r0, #2
}
    aa32:	bd30      	pop	{r4, r5, pc}

0000aa34 <packet_rx_allocate>:
{
    aa34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    aa38:	4d22      	ldr	r5, [pc, #136]	; (aac4 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    aa3a:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    aa3e:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    aa42:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    aa46:	3401      	adds	r4, #1
    aa48:	4581      	cmp	r9, r0
    aa4a:	b2e4      	uxtb	r4, r4
    aa4c:	bf28      	it	cs
    aa4e:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    aa50:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    aa54:	42a3      	cmp	r3, r4
    aa56:	bf08      	it	eq
    aa58:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    aa5a:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    aa5e:	f1b9 0f00 	cmp.w	r9, #0
    aa62:	d003      	beq.n	aa6c <packet_rx_allocate+0x38>
    aa64:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    aa68:	429c      	cmp	r4, r3
    aa6a:	d101      	bne.n	aa70 <packet_rx_allocate+0x3c>
    aa6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    aa70:	4638      	mov	r0, r7
    aa72:	f7fc ffd4 	bl	7a1e <mem_acquire>
		if (!link) {
    aa76:	4606      	mov	r6, r0
    aa78:	2800      	cmp	r0, #0
    aa7a:	d0f7      	beq.n	aa6c <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    aa7c:	4640      	mov	r0, r8
    aa7e:	f7fc ffce 	bl	7a1e <mem_acquire>
		if (!node_rx) {
    aa82:	b928      	cbnz	r0, aa90 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    aa84:	4630      	mov	r0, r6
    aa86:	4910      	ldr	r1, [pc, #64]	; (aac8 <packet_rx_allocate+0x94>)
}
    aa88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    aa8c:	f7fc bfe1 	b.w	7a52 <mem_release>
		node_rx->hdr.onion.link = link;
    aa90:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    aa92:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    aa96:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    aa9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    aa9e:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    aaa2:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    aaa6:	3401      	adds	r4, #1
    aaa8:	b2e4      	uxtb	r4, r4
			acquire = 0;
    aaaa:	42a3      	cmp	r3, r4
    aaac:	bf08      	it	eq
    aaae:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    aab0:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    aab4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    aab8:	3b01      	subs	r3, #1
    aaba:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    aabe:	fa5f f989 	uxtb.w	r9, r9
    aac2:	e7cc      	b.n	aa5e <packet_rx_allocate+0x2a>
    aac4:	200008c0 	.word	0x200008c0
    aac8:	20000a08 	.word	0x20000a08

0000aacc <common_init>:
{
    aacc:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    aace:	4c3a      	ldr	r4, [pc, #232]	; (abb8 <common_init+0xec>)
    aad0:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    aad4:	2a00      	cmp	r2, #0
    aad6:	d041      	beq.n	ab5c <common_init+0x90>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    aad8:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    aadc:	f44f 71aa 	mov.w	r1, #340	; 0x154
    aae0:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    aae4:	f7fc ff74 	bl	79d0 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    aae8:	4b34      	ldr	r3, [pc, #208]	; (abbc <common_init+0xf0>)
    aaea:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    aaee:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    aaf2:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    aaf6:	f7fc ff6b 	bl	79d0 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    aafa:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    aafe:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    ab02:	4b2f      	ldr	r3, [pc, #188]	; (abc0 <common_init+0xf4>)
    ab04:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    ab08:	440a      	add	r2, r1
    ab0a:	2108      	movs	r1, #8
    ab0c:	f7fc ff60 	bl	79d0 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    ab10:	4b2c      	ldr	r3, [pc, #176]	; (abc4 <common_init+0xf8>)
    ab12:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    ab16:	2202      	movs	r2, #2
    ab18:	2124      	movs	r1, #36	; 0x24
    ab1a:	f7fc ff59 	bl	79d0 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    ab1e:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    ab22:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    ab26:	4b28      	ldr	r3, [pc, #160]	; (abc8 <common_init+0xfc>)
    ab28:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    ab2c:	3a01      	subs	r2, #1
    ab2e:	b292      	uxth	r2, r2
    ab30:	f7fc ff4e 	bl	79d0 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    ab34:	4822      	ldr	r0, [pc, #136]	; (abc0 <common_init+0xf4>)
    ab36:	f7fc ff72 	bl	7a1e <mem_acquire>
	LL_ASSERT(link);
    ab3a:	b990      	cbnz	r0, ab62 <common_init+0x96>
    ab3c:	4b23      	ldr	r3, [pc, #140]	; (abcc <common_init+0x100>)
    ab3e:	9301      	str	r3, [sp, #4]
    ab40:	9300      	str	r3, [sp, #0]
    ab42:	4b23      	ldr	r3, [pc, #140]	; (abd0 <common_init+0x104>)
    ab44:	4a23      	ldr	r2, [pc, #140]	; (abd4 <common_init+0x108>)
    ab46:	681c      	ldr	r4, [r3, #0]
    ab48:	4923      	ldr	r1, [pc, #140]	; (abd8 <common_init+0x10c>)
    ab4a:	4b24      	ldr	r3, [pc, #144]	; (abdc <common_init+0x110>)
    ab4c:	4824      	ldr	r0, [pc, #144]	; (abe0 <common_init+0x114>)
    ab4e:	47a0      	blx	r4
    ab50:	4040      	eors	r0, r0
    ab52:	f380 8811 	msr	BASEPRI, r0
    ab56:	f04f 0004 	mov.w	r0, #4
    ab5a:	df02      	svc	2
		_radio.conn_free = NULL;
    ab5c:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    ab60:	e7c2      	b.n	aae8 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    ab62:	4a20      	ldr	r2, [pc, #128]	; (abe4 <common_init+0x118>)
    ab64:	1f11      	subs	r1, r2, #4
    ab66:	f7fc ffb1 	bl	7acc <memq_init>
	_radio.advertiser.chan_map = 0x07;
    ab6a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    ab6e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    ab72:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    ab76:	231f      	movs	r3, #31
    ab78:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    ab7c:	2325      	movs	r3, #37	; 0x25
    ab7e:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    ab82:	231b      	movs	r3, #27
    ab84:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    ab88:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    ab8c:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    ab8e:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    ab92:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    ab94:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    ab98:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    ab9c:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    aba0:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    aba4:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    aba8:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    abac:	b002      	add	sp, #8
    abae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    abb2:	f7ff bf3f 	b.w	aa34 <packet_rx_allocate>
    abb6:	bf00      	nop
    abb8:	200008c0 	.word	0x200008c0
    abbc:	200009f0 	.word	0x200009f0
    abc0:	20000a08 	.word	0x20000a08
    abc4:	20000a1c 	.word	0x20000a1c
    abc8:	20000a24 	.word	0x20000a24
    abcc:	000161ba 	.word	0x000161ba
    abd0:	20003a5c 	.word	0x20003a5c
    abd4:	000179e1 	.word	0x000179e1
    abd8:	00017a29 	.word	0x00017a29
    abdc:	00019430 	.word	0x00019430
    abe0:	000198ad 	.word	0x000198ad
    abe4:	20000a10 	.word	0x20000a10

0000abe8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    abe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    abec:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    abee:	4294      	cmp	r4, r2
{
    abf0:	4681      	mov	r9, r0
    abf2:	460f      	mov	r7, r1
    abf4:	4690      	mov	r8, r2
	if (_first == last) {
    abf6:	d03d      	beq.n	ac74 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    abf8:	4e1f      	ldr	r6, [pc, #124]	; (ac78 <tx_cmplt_get+0x90>)
    abfa:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    abfe:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    ac02:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    ac04:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    ac06:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    ac0a:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    ac0e:	b222      	sxth	r2, r4
    ac10:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    ac14:	f8b9 e000 	ldrh.w	lr, [r9]
    ac18:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    ac1c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    ac20:	4596      	cmp	lr, r2
    ac22:	d120      	bne.n	ac66 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    ac24:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    ac26:	2801      	cmp	r0, #1
    ac28:	f020 0303 	bic.w	r3, r0, #3
    ac2c:	d90a      	bls.n	ac44 <tx_cmplt_get+0x5c>
    ac2e:	b1f3      	cbz	r3, ac6e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    ac30:	1d02      	adds	r2, r0, #4
    ac32:	d01c      	beq.n	ac6e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    ac34:	7942      	ldrb	r2, [r0, #5]
    ac36:	b1d2      	cbz	r2, ac6e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    ac38:	7902      	ldrb	r2, [r0, #4]
    ac3a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    ac3e:	3a01      	subs	r2, #1
    ac40:	2a01      	cmp	r2, #1
    ac42:	d814      	bhi.n	ac6e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    ac44:	2201      	movs	r2, #1
			cmplt++;
    ac46:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    ac48:	604a      	str	r2, [r1, #4]
			cmplt++;
    ac4a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    ac4c:	b113      	cbz	r3, ac54 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    ac4e:	4651      	mov	r1, sl
    ac50:	f7fc feff 	bl	7a52 <mem_release>
		}

		_first = _first + 1;
    ac54:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    ac56:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    ac5a:	b2e4      	uxtb	r4, r4
			_first = 0;
    ac5c:	42a2      	cmp	r2, r4
    ac5e:	bf08      	it	eq
    ac60:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    ac62:	4544      	cmp	r4, r8
    ac64:	d1d3      	bne.n	ac0e <tx_cmplt_get+0x26>

	*first = _first;
    ac66:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    ac68:	4628      	mov	r0, r5
    ac6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    ac6e:	f8c1 b004 	str.w	fp, [r1, #4]
    ac72:	e7eb      	b.n	ac4c <tx_cmplt_get+0x64>
		return 0;
    ac74:	2500      	movs	r5, #0
    ac76:	e7f7      	b.n	ac68 <tx_cmplt_get+0x80>
    ac78:	200008c0 	.word	0x200008c0

0000ac7c <connection_get>:
{
    ac7c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    ac7e:	4b09      	ldr	r3, [pc, #36]	; (aca4 <connection_get+0x28>)
    ac80:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    ac84:	4282      	cmp	r2, r0
{
    ac86:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    ac88:	d90a      	bls.n	aca0 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    ac8a:	4602      	mov	r2, r0
    ac8c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ac90:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    ac94:	f7fc fef8 	bl	7a88 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    ac98:	b110      	cbz	r0, aca0 <connection_get+0x24>
    ac9a:	8c03      	ldrh	r3, [r0, #32]
    ac9c:	42a3      	cmp	r3, r4
    ac9e:	d000      	beq.n	aca2 <connection_get+0x26>
	return 0;
    aca0:	2000      	movs	r0, #0
}
    aca2:	bd10      	pop	{r4, pc}
    aca4:	200008c0 	.word	0x200008c0

0000aca8 <role_disable>:
{
    aca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acac:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    acae:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    acb0:	2805      	cmp	r0, #5
{
    acb2:	4605      	mov	r5, r0
    acb4:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    acb6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    acb8:	d00c      	beq.n	acd4 <role_disable+0x2c>
    acba:	2806      	cmp	r0, #6
    acbc:	d043      	beq.n	ad46 <role_disable+0x9e>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    acbe:	d948      	bls.n	ad52 <role_disable+0xaa>
			conn_handle = ticker_id_primary -
    acc0:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    acc2:	b280      	uxth	r0, r0
    acc4:	f7ff ffda 	bl	ac7c <connection_get>
			if (!conn) {
    acc8:	2800      	cmp	r0, #0
    acca:	f000 8160 	beq.w	af8e <role_disable+0x2e6>
			ticks_active_to_start =
    acce:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    acd2:	e00f      	b.n	acf4 <role_disable+0x4c>
		ticks_xtal_to_start =
    acd4:	4b96      	ldr	r3, [pc, #600]	; (af30 <role_disable+0x288>)
    acd6:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    acd8:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    acdc:	ab02      	add	r3, sp, #8
    acde:	9300      	str	r3, [sp, #0]
    ace0:	460a      	mov	r2, r1
    ace2:	4b94      	ldr	r3, [pc, #592]	; (af34 <role_disable+0x28c>)
    ace4:	2103      	movs	r1, #3
    ace6:	2000      	movs	r0, #0
    ace8:	f7fd fdc2 	bl	8870 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    acec:	2802      	cmp	r0, #2
    acee:	d013      	beq.n	ad18 <role_disable+0x70>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    acf0:	9b02      	ldr	r3, [sp, #8]
    acf2:	b9ab      	cbnz	r3, ad20 <role_disable+0x78>
	LL_ASSERT(!_radio.ticker_id_stop);
    acf4:	4c8e      	ldr	r4, [pc, #568]	; (af30 <role_disable+0x288>)
    acf6:	7ca3      	ldrb	r3, [r4, #18]
    acf8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    acfc:	2b00      	cmp	r3, #0
    acfe:	d032      	beq.n	ad66 <role_disable+0xbe>
    ad00:	4b8d      	ldr	r3, [pc, #564]	; (af38 <role_disable+0x290>)
    ad02:	9301      	str	r3, [sp, #4]
    ad04:	9300      	str	r3, [sp, #0]
    ad06:	4b8d      	ldr	r3, [pc, #564]	; (af3c <role_disable+0x294>)
    ad08:	4a8d      	ldr	r2, [pc, #564]	; (af40 <role_disable+0x298>)
    ad0a:	681c      	ldr	r4, [r3, #0]
    ad0c:	498d      	ldr	r1, [pc, #564]	; (af44 <role_disable+0x29c>)
    ad0e:	4b8e      	ldr	r3, [pc, #568]	; (af48 <role_disable+0x2a0>)
    ad10:	488e      	ldr	r0, [pc, #568]	; (af4c <role_disable+0x2a4>)
    ad12:	e011      	b.n	ad38 <role_disable+0x90>
				cpu_sleep();
    ad14:	f7ff fdb4 	bl	a880 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    ad18:	9b02      	ldr	r3, [sp, #8]
    ad1a:	2b02      	cmp	r3, #2
    ad1c:	d0fa      	beq.n	ad14 <role_disable+0x6c>
    ad1e:	e7e7      	b.n	acf0 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    ad20:	9b02      	ldr	r3, [sp, #8]
    ad22:	2b01      	cmp	r3, #1
    ad24:	d0e6      	beq.n	acf4 <role_disable+0x4c>
    ad26:	4b84      	ldr	r3, [pc, #528]	; (af38 <role_disable+0x290>)
    ad28:	9301      	str	r3, [sp, #4]
    ad2a:	9300      	str	r3, [sp, #0]
    ad2c:	4b83      	ldr	r3, [pc, #524]	; (af3c <role_disable+0x294>)
    ad2e:	4a84      	ldr	r2, [pc, #528]	; (af40 <role_disable+0x298>)
    ad30:	681c      	ldr	r4, [r3, #0]
    ad32:	4984      	ldr	r1, [pc, #528]	; (af44 <role_disable+0x29c>)
    ad34:	4b84      	ldr	r3, [pc, #528]	; (af48 <role_disable+0x2a0>)
    ad36:	4886      	ldr	r0, [pc, #536]	; (af50 <role_disable+0x2a8>)
			LL_ASSERT(0);
    ad38:	47a0      	blx	r4
    ad3a:	4040      	eors	r0, r0
    ad3c:	f380 8811 	msr	BASEPRI, r0
    ad40:	f04f 0004 	mov.w	r0, #4
    ad44:	df02      	svc	2
		ticks_xtal_to_start =
    ad46:	4b7a      	ldr	r3, [pc, #488]	; (af30 <role_disable+0x288>)
    ad48:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    ad4c:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    ad50:	e7d0      	b.n	acf4 <role_disable+0x4c>
			LL_ASSERT(0);
    ad52:	4b79      	ldr	r3, [pc, #484]	; (af38 <role_disable+0x290>)
    ad54:	9301      	str	r3, [sp, #4]
    ad56:	9300      	str	r3, [sp, #0]
    ad58:	4b78      	ldr	r3, [pc, #480]	; (af3c <role_disable+0x294>)
    ad5a:	681c      	ldr	r4, [r3, #0]
    ad5c:	4b7a      	ldr	r3, [pc, #488]	; (af48 <role_disable+0x2a0>)
    ad5e:	4a78      	ldr	r2, [pc, #480]	; (af40 <role_disable+0x298>)
    ad60:	4978      	ldr	r1, [pc, #480]	; (af44 <role_disable+0x29c>)
    ad62:	487c      	ldr	r0, [pc, #496]	; (af54 <role_disable+0x2ac>)
    ad64:	e7e8      	b.n	ad38 <role_disable+0x90>
	ret_cb = TICKER_STATUS_BUSY;
    ad66:	ab06      	add	r3, sp, #24
    ad68:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    ad6a:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    ad6c:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad70:	2103      	movs	r1, #3
    ad72:	9300      	str	r3, [sp, #0]
    ad74:	462a      	mov	r2, r5
    ad76:	4b6f      	ldr	r3, [pc, #444]	; (af34 <role_disable+0x28c>)
    ad78:	f7fd fd7a 	bl	8870 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ad7c:	2802      	cmp	r0, #2
    ad7e:	d027      	beq.n	add0 <role_disable+0x128>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    ad80:	9b02      	ldr	r3, [sp, #8]
    ad82:	2b00      	cmp	r3, #0
    ad84:	d16f      	bne.n	ae66 <role_disable+0x1be>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    ad86:	7c23      	ldrb	r3, [r4, #16]
    ad88:	429d      	cmp	r5, r3
    ad8a:	d002      	beq.n	ad92 <role_disable+0xea>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    ad8c:	7c63      	ldrb	r3, [r4, #17]
    ad8e:	429d      	cmp	r5, r3
    ad90:	d165      	bne.n	ae5e <role_disable+0x1b6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    ad92:	ab06      	add	r3, sp, #24
    ad94:	2202      	movs	r2, #2
    ad96:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad9a:	2200      	movs	r2, #0
    ad9c:	9300      	str	r3, [sp, #0]
    ad9e:	2103      	movs	r1, #3
    ada0:	4b64      	ldr	r3, [pc, #400]	; (af34 <role_disable+0x28c>)
    ada2:	4610      	mov	r0, r2
    ada4:	f7fd fd64 	bl	8870 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ada8:	2802      	cmp	r0, #2
    adaa:	d11f      	bne.n	adec <role_disable+0x144>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    adac:	2201      	movs	r2, #1
    adae:	4611      	mov	r1, r2
    adb0:	2003      	movs	r0, #3
    adb2:	f7fc fed7 	bl	7b64 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    adb6:	9b03      	ldr	r3, [sp, #12]
    adb8:	2b02      	cmp	r3, #2
    adba:	d117      	bne.n	adec <role_disable+0x144>
    adbc:	4b5e      	ldr	r3, [pc, #376]	; (af38 <role_disable+0x290>)
    adbe:	9301      	str	r3, [sp, #4]
    adc0:	9300      	str	r3, [sp, #0]
    adc2:	4b5e      	ldr	r3, [pc, #376]	; (af3c <role_disable+0x294>)
    adc4:	4a5e      	ldr	r2, [pc, #376]	; (af40 <role_disable+0x298>)
    adc6:	681c      	ldr	r4, [r3, #0]
    adc8:	495e      	ldr	r1, [pc, #376]	; (af44 <role_disable+0x29c>)
    adca:	4b63      	ldr	r3, [pc, #396]	; (af58 <role_disable+0x2b0>)
    adcc:	4863      	ldr	r0, [pc, #396]	; (af5c <role_disable+0x2b4>)
    adce:	e7b3      	b.n	ad38 <role_disable+0x90>
		if (_radio.ticker_id_event == ticker_id_primary) {
    add0:	7c63      	ldrb	r3, [r4, #17]
    add2:	429d      	cmp	r5, r3
    add4:	d104      	bne.n	ade0 <role_disable+0x138>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    add6:	2201      	movs	r2, #1
    add8:	4611      	mov	r1, r2
    adda:	2003      	movs	r0, #3
    addc:	f7fc fec2 	bl	7b64 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    ade0:	9b02      	ldr	r3, [sp, #8]
    ade2:	2b02      	cmp	r3, #2
    ade4:	d1cc      	bne.n	ad80 <role_disable+0xd8>
			cpu_sleep();
    ade6:	f7ff fd4b 	bl	a880 <cpu_sleep>
    adea:	e7f9      	b.n	ade0 <role_disable+0x138>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    adec:	9803      	ldr	r0, [sp, #12]
    adee:	2800      	cmp	r0, #0
    adf0:	d157      	bne.n	aea2 <role_disable+0x1fa>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    adf2:	2302      	movs	r3, #2
    adf4:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    adf6:	7c23      	ldrb	r3, [r4, #16]
    adf8:	b94b      	cbnz	r3, ae0e <role_disable+0x166>
    adfa:	4b4f      	ldr	r3, [pc, #316]	; (af38 <role_disable+0x290>)
    adfc:	9301      	str	r3, [sp, #4]
    adfe:	9300      	str	r3, [sp, #0]
    ae00:	4b4e      	ldr	r3, [pc, #312]	; (af3c <role_disable+0x294>)
    ae02:	4a4f      	ldr	r2, [pc, #316]	; (af40 <role_disable+0x298>)
    ae04:	681c      	ldr	r4, [r3, #0]
    ae06:	494f      	ldr	r1, [pc, #316]	; (af44 <role_disable+0x29c>)
    ae08:	4b53      	ldr	r3, [pc, #332]	; (af58 <role_disable+0x2b0>)
    ae0a:	4855      	ldr	r0, [pc, #340]	; (af60 <role_disable+0x2b8>)
    ae0c:	e794      	b.n	ad38 <role_disable+0x90>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ae0e:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
    ae10:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ae12:	2201      	movs	r2, #1
    ae14:	9300      	str	r3, [sp, #0]
    ae16:	2103      	movs	r1, #3
    ae18:	4b46      	ldr	r3, [pc, #280]	; (af34 <role_disable+0x28c>)
    ae1a:	f7fd fd29 	bl	8870 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    ae1e:	2802      	cmp	r0, #2
    ae20:	d111      	bne.n	ae46 <role_disable+0x19e>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ae22:	2201      	movs	r2, #1
    ae24:	4611      	mov	r1, r2
    ae26:	2003      	movs	r0, #3
    ae28:	f7fc fe9c 	bl	7b64 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    ae2c:	9b04      	ldr	r3, [sp, #16]
    ae2e:	2b02      	cmp	r3, #2
    ae30:	d109      	bne.n	ae46 <role_disable+0x19e>
    ae32:	4b41      	ldr	r3, [pc, #260]	; (af38 <role_disable+0x290>)
    ae34:	9301      	str	r3, [sp, #4]
    ae36:	9300      	str	r3, [sp, #0]
    ae38:	4b40      	ldr	r3, [pc, #256]	; (af3c <role_disable+0x294>)
    ae3a:	4a41      	ldr	r2, [pc, #260]	; (af40 <role_disable+0x298>)
    ae3c:	681c      	ldr	r4, [r3, #0]
    ae3e:	4941      	ldr	r1, [pc, #260]	; (af44 <role_disable+0x29c>)
    ae40:	4b45      	ldr	r3, [pc, #276]	; (af58 <role_disable+0x2b0>)
    ae42:	4848      	ldr	r0, [pc, #288]	; (af64 <role_disable+0x2bc>)
    ae44:	e778      	b.n	ad38 <role_disable+0x90>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    ae46:	9a04      	ldr	r2, [sp, #16]
    ae48:	b99a      	cbnz	r2, ae72 <role_disable+0x1ca>
			ticks_xtal_to_start &= ~XON_BITMASK;
    ae4a:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    ae4e:	45b0      	cmp	r8, r6
    ae50:	d925      	bls.n	ae9e <role_disable+0x1f6>
				ret = mayfly_enqueue(
    ae52:	4b45      	ldr	r3, [pc, #276]	; (af68 <role_disable+0x2c0>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    ae54:	4611      	mov	r1, r2
    ae56:	2003      	movs	r0, #3
    ae58:	f7fc feac 	bl	7bb4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    ae5c:	b9a8      	cbnz	r0, ae8a <role_disable+0x1e2>
	if (!_radio.ticker_id_stop) {
    ae5e:	7ca3      	ldrb	r3, [r4, #18]
    ae60:	b90b      	cbnz	r3, ae66 <role_disable+0x1be>
		ret_cb = TICKER_STATUS_FAILURE;
    ae62:	2301      	movs	r3, #1
    ae64:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    ae66:	2300      	movs	r3, #0
    ae68:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    ae6a:	9802      	ldr	r0, [sp, #8]
}
    ae6c:	b006      	add	sp, #24
    ae6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    ae72:	9b04      	ldr	r3, [sp, #16]
    ae74:	2b01      	cmp	r3, #1
    ae76:	f040 8083 	bne.w	af80 <role_disable+0x2d8>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    ae7a:	2200      	movs	r2, #0
    ae7c:	4611      	mov	r1, r2
    ae7e:	4b3a      	ldr	r3, [pc, #232]	; (af68 <role_disable+0x2c0>)
    ae80:	2003      	movs	r0, #3
    ae82:	f7fc fe97 	bl	7bb4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    ae86:	4602      	mov	r2, r0
    ae88:	b148      	cbz	r0, ae9e <role_disable+0x1f6>
			LL_ASSERT(!ret);
    ae8a:	4b2b      	ldr	r3, [pc, #172]	; (af38 <role_disable+0x290>)
    ae8c:	9301      	str	r3, [sp, #4]
    ae8e:	9300      	str	r3, [sp, #0]
    ae90:	4b2a      	ldr	r3, [pc, #168]	; (af3c <role_disable+0x294>)
    ae92:	4a2b      	ldr	r2, [pc, #172]	; (af40 <role_disable+0x298>)
    ae94:	681c      	ldr	r4, [r3, #0]
    ae96:	492b      	ldr	r1, [pc, #172]	; (af44 <role_disable+0x29c>)
    ae98:	4b2f      	ldr	r3, [pc, #188]	; (af58 <role_disable+0x2b0>)
    ae9a:	4834      	ldr	r0, [pc, #208]	; (af6c <role_disable+0x2c4>)
    ae9c:	e74c      	b.n	ad38 <role_disable+0x90>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    ae9e:	4b34      	ldr	r3, [pc, #208]	; (af70 <role_disable+0x2c8>)
    aea0:	e7d8      	b.n	ae54 <role_disable+0x1ac>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    aea2:	9d03      	ldr	r5, [sp, #12]
    aea4:	2d01      	cmp	r5, #1
    aea6:	d16b      	bne.n	af80 <role_disable+0x2d8>
		if (ticker_id_stop != TICKER_NULL) {
    aea8:	2fff      	cmp	r7, #255	; 0xff
    aeaa:	d02d      	beq.n	af08 <role_disable+0x260>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    aeac:	ab06      	add	r3, sp, #24
    aeae:	2202      	movs	r2, #2
    aeb0:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    aeb4:	2103      	movs	r1, #3
    aeb6:	9300      	str	r3, [sp, #0]
    aeb8:	463a      	mov	r2, r7
    aeba:	4b1e      	ldr	r3, [pc, #120]	; (af34 <role_disable+0x28c>)
    aebc:	2000      	movs	r0, #0
    aebe:	f7fd fcd7 	bl	8870 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    aec2:	2802      	cmp	r0, #2
    aec4:	d111      	bne.n	aeea <role_disable+0x242>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    aec6:	462a      	mov	r2, r5
    aec8:	4629      	mov	r1, r5
    aeca:	2003      	movs	r0, #3
    aecc:	f7fc fe4a 	bl	7b64 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    aed0:	9b05      	ldr	r3, [sp, #20]
    aed2:	2b02      	cmp	r3, #2
    aed4:	d109      	bne.n	aeea <role_disable+0x242>
    aed6:	4b18      	ldr	r3, [pc, #96]	; (af38 <role_disable+0x290>)
    aed8:	9301      	str	r3, [sp, #4]
    aeda:	9300      	str	r3, [sp, #0]
    aedc:	4b17      	ldr	r3, [pc, #92]	; (af3c <role_disable+0x294>)
    aede:	4a18      	ldr	r2, [pc, #96]	; (af40 <role_disable+0x298>)
    aee0:	681c      	ldr	r4, [r3, #0]
    aee2:	4918      	ldr	r1, [pc, #96]	; (af44 <role_disable+0x29c>)
    aee4:	4b1c      	ldr	r3, [pc, #112]	; (af58 <role_disable+0x2b0>)
    aee6:	4823      	ldr	r0, [pc, #140]	; (af74 <role_disable+0x2cc>)
    aee8:	e726      	b.n	ad38 <role_disable+0x90>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    aeea:	9b05      	ldr	r3, [sp, #20]
    aeec:	b163      	cbz	r3, af08 <role_disable+0x260>
    aeee:	9b05      	ldr	r3, [sp, #20]
    aef0:	2b01      	cmp	r3, #1
    aef2:	d009      	beq.n	af08 <role_disable+0x260>
    aef4:	4b10      	ldr	r3, [pc, #64]	; (af38 <role_disable+0x290>)
    aef6:	9301      	str	r3, [sp, #4]
    aef8:	9300      	str	r3, [sp, #0]
    aefa:	4b10      	ldr	r3, [pc, #64]	; (af3c <role_disable+0x294>)
    aefc:	4a10      	ldr	r2, [pc, #64]	; (af40 <role_disable+0x298>)
    aefe:	681c      	ldr	r4, [r3, #0]
    af00:	4910      	ldr	r1, [pc, #64]	; (af44 <role_disable+0x29c>)
    af02:	4b15      	ldr	r3, [pc, #84]	; (af58 <role_disable+0x2b0>)
    af04:	481c      	ldr	r0, [pc, #112]	; (af78 <role_disable+0x2d0>)
    af06:	e717      	b.n	ad38 <role_disable+0x90>
		if (_radio.role != ROLE_NONE) {
    af08:	7ce3      	ldrb	r3, [r4, #19]
    af0a:	2b00      	cmp	r3, #0
    af0c:	d0a7      	beq.n	ae5e <role_disable+0x1b6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    af0e:	4b1b      	ldr	r3, [pc, #108]	; (af7c <role_disable+0x2d4>)
    af10:	2204      	movs	r2, #4
    af12:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    af14:	2200      	movs	r2, #0
    af16:	4611      	mov	r1, r2
    af18:	2003      	movs	r0, #3
    af1a:	f7fc fe4b 	bl	7bb4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    af1e:	2800      	cmp	r0, #0
    af20:	d1b3      	bne.n	ae8a <role_disable+0x1e2>
			while (_radio.role != ROLE_NONE) {
    af22:	7ce3      	ldrb	r3, [r4, #19]
    af24:	2b00      	cmp	r3, #0
    af26:	d09a      	beq.n	ae5e <role_disable+0x1b6>
				cpu_sleep();
    af28:	f7ff fcaa 	bl	a880 <cpu_sleep>
    af2c:	e7f9      	b.n	af22 <role_disable+0x27a>
    af2e:	bf00      	nop
    af30:	200008c0 	.word	0x200008c0
    af34:	0000a8c5 	.word	0x0000a8c5
    af38:	000161ba 	.word	0x000161ba
    af3c:	20003a5c 	.word	0x20003a5c
    af40:	000179e1 	.word	0x000179e1
    af44:	00017a29 	.word	0x00017a29
    af48:	00019852 	.word	0x00019852
    af4c:	0001a1c4 	.word	0x0001a1c4
    af50:	0001a184 	.word	0x0001a184
    af54:	00017955 	.word	0x00017955
    af58:	0001983e 	.word	0x0001983e
    af5c:	0001a1fc 	.word	0x0001a1fc
    af60:	0001a22d 	.word	0x0001a22d
    af64:	0001a267 	.word	0x0001a267
    af68:	20003d58 	.word	0x20003d58
    af6c:	0001a297 	.word	0x0001a297
    af70:	20003df8 	.word	0x20003df8
    af74:	0001a2bd 	.word	0x0001a2bd
    af78:	0001a2ef 	.word	0x0001a2ef
    af7c:	20003d78 	.word	0x20003d78
		LL_ASSERT(0);
    af80:	4b04      	ldr	r3, [pc, #16]	; (af94 <role_disable+0x2ec>)
    af82:	9301      	str	r3, [sp, #4]
    af84:	9300      	str	r3, [sp, #0]
    af86:	4b04      	ldr	r3, [pc, #16]	; (af98 <role_disable+0x2f0>)
    af88:	681c      	ldr	r4, [r3, #0]
    af8a:	4b04      	ldr	r3, [pc, #16]	; (af9c <role_disable+0x2f4>)
    af8c:	e6e7      	b.n	ad5e <role_disable+0xb6>
				return 1;
    af8e:	2001      	movs	r0, #1
    af90:	e76c      	b.n	ae6c <role_disable+0x1c4>
    af92:	bf00      	nop
    af94:	000161ba 	.word	0x000161ba
    af98:	20003a5c 	.word	0x20003a5c
    af9c:	0001983e 	.word	0x0001983e

0000afa0 <mayfly_xtal_retain>:
{
    afa0:	b513      	push	{r0, r1, r4, lr}
    afa2:	4b20      	ldr	r3, [pc, #128]	; (b024 <mayfly_xtal_retain+0x84>)
    afa4:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    afa6:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    afa8:	b319      	cbz	r1, aff2 <mayfly_xtal_retain+0x52>
		if (!s_xtal_retained) {
    afaa:	2a00      	cmp	r2, #0
    afac:	d137      	bne.n	b01e <mayfly_xtal_retain+0x7e>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    afae:	2801      	cmp	r0, #1
    afb0:	d00f      	beq.n	afd2 <mayfly_xtal_retain+0x32>
    afb2:	4b1d      	ldr	r3, [pc, #116]	; (b028 <mayfly_xtal_retain+0x88>)
    afb4:	9301      	str	r3, [sp, #4]
    afb6:	9300      	str	r3, [sp, #0]
    afb8:	4b1c      	ldr	r3, [pc, #112]	; (b02c <mayfly_xtal_retain+0x8c>)
    afba:	4a1d      	ldr	r2, [pc, #116]	; (b030 <mayfly_xtal_retain+0x90>)
    afbc:	681c      	ldr	r4, [r3, #0]
    afbe:	491d      	ldr	r1, [pc, #116]	; (b034 <mayfly_xtal_retain+0x94>)
    afc0:	4b1d      	ldr	r3, [pc, #116]	; (b038 <mayfly_xtal_retain+0x98>)
    afc2:	481e      	ldr	r0, [pc, #120]	; (b03c <mayfly_xtal_retain+0x9c>)
			LL_ASSERT(!retval);
    afc4:	47a0      	blx	r4
    afc6:	4040      	eors	r0, r0
    afc8:	f380 8811 	msr	BASEPRI, r0
    afcc:	f04f 0004 	mov.w	r0, #4
    afd0:	df02      	svc	2
			s_xtal_retained = 1;
    afd2:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    afd4:	4b1a      	ldr	r3, [pc, #104]	; (b040 <mayfly_xtal_retain+0xa0>)
    afd6:	4611      	mov	r1, r2
    afd8:	f7fc fdec 	bl	7bb4 <mayfly_enqueue>
			LL_ASSERT(!retval);
    afdc:	b1f8      	cbz	r0, b01e <mayfly_xtal_retain+0x7e>
    afde:	4b12      	ldr	r3, [pc, #72]	; (b028 <mayfly_xtal_retain+0x88>)
    afe0:	9301      	str	r3, [sp, #4]
    afe2:	9300      	str	r3, [sp, #0]
    afe4:	4b11      	ldr	r3, [pc, #68]	; (b02c <mayfly_xtal_retain+0x8c>)
    afe6:	4a12      	ldr	r2, [pc, #72]	; (b030 <mayfly_xtal_retain+0x90>)
    afe8:	681c      	ldr	r4, [r3, #0]
    afea:	4912      	ldr	r1, [pc, #72]	; (b034 <mayfly_xtal_retain+0x94>)
    afec:	4b12      	ldr	r3, [pc, #72]	; (b038 <mayfly_xtal_retain+0x98>)
    afee:	4815      	ldr	r0, [pc, #84]	; (b044 <mayfly_xtal_retain+0xa4>)
    aff0:	e7e8      	b.n	afc4 <mayfly_xtal_retain+0x24>
		if (s_xtal_retained) {
    aff2:	b1a2      	cbz	r2, b01e <mayfly_xtal_retain+0x7e>
			s_xtal_retained = 0;
    aff4:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    aff6:	b180      	cbz	r0, b01a <mayfly_xtal_retain+0x7a>
    aff8:	2801      	cmp	r0, #1
    affa:	d104      	bne.n	b006 <mayfly_xtal_retain+0x66>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    affc:	4b12      	ldr	r3, [pc, #72]	; (b048 <mayfly_xtal_retain+0xa8>)
			retval = mayfly_enqueue(caller_id,
    affe:	2200      	movs	r2, #0
    b000:	4611      	mov	r1, r2
    b002:	4620      	mov	r0, r4
    b004:	e7e8      	b.n	afd8 <mayfly_xtal_retain+0x38>
				LL_ASSERT(0);
    b006:	4b08      	ldr	r3, [pc, #32]	; (b028 <mayfly_xtal_retain+0x88>)
    b008:	9301      	str	r3, [sp, #4]
    b00a:	9300      	str	r3, [sp, #0]
    b00c:	4b07      	ldr	r3, [pc, #28]	; (b02c <mayfly_xtal_retain+0x8c>)
    b00e:	4a08      	ldr	r2, [pc, #32]	; (b030 <mayfly_xtal_retain+0x90>)
    b010:	681c      	ldr	r4, [r3, #0]
    b012:	4908      	ldr	r1, [pc, #32]	; (b034 <mayfly_xtal_retain+0x94>)
    b014:	4b08      	ldr	r3, [pc, #32]	; (b038 <mayfly_xtal_retain+0x98>)
    b016:	480d      	ldr	r0, [pc, #52]	; (b04c <mayfly_xtal_retain+0xac>)
    b018:	e7d4      	b.n	afc4 <mayfly_xtal_retain+0x24>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    b01a:	4b0d      	ldr	r3, [pc, #52]	; (b050 <mayfly_xtal_retain+0xb0>)
    b01c:	e7ef      	b.n	affe <mayfly_xtal_retain+0x5e>
}
    b01e:	b002      	add	sp, #8
    b020:	bd10      	pop	{r4, pc}
    b022:	bf00      	nop
    b024:	20000ac0 	.word	0x20000ac0
    b028:	000161ba 	.word	0x000161ba
    b02c:	20003a5c 	.word	0x20003a5c
    b030:	000179e1 	.word	0x000179e1
    b034:	00017a29 	.word	0x00017a29
    b038:	000195f7 	.word	0x000195f7
    b03c:	00019fdd 	.word	0x00019fdd
    b040:	20003dc8 	.word	0x20003dc8
    b044:	0001a00d 	.word	0x0001a00d
    b048:	20003de8 	.word	0x20003de8
    b04c:	00017955 	.word	0x00017955
    b050:	20003dd8 	.word	0x20003dd8

0000b054 <rx_packet_set>:
{
    b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    b056:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    b05a:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    b05c:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    b05e:	f004 0407 	and.w	r4, r4, #7
{
    b062:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    b064:	4620      	mov	r0, r4
    b066:	2100      	movs	r1, #0
    b068:	f008 f970 	bl	1334c <radio_phy_set>
	if (conn->enc_rx) {
    b06c:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    b070:	f013 0f10 	tst.w	r3, #16
    b074:	ea4f 0244 	mov.w	r2, r4, lsl #1
    b078:	d010      	beq.n	b09c <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    b07a:	1d29      	adds	r1, r5, #4
    b07c:	f042 0201 	orr.w	r2, r2, #1
    b080:	b2c9      	uxtb	r1, r1
    b082:	2008      	movs	r0, #8
    b084:	f008 f9a8 	bl	133d8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    b088:	463a      	mov	r2, r7
    b08a:	4621      	mov	r1, r4
    b08c:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    b090:	f008 fbe6 	bl	13860 <radio_ccm_rx_pkt_set>
}
    b094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    b098:	f008 b9cc 	b.w	13434 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    b09c:	2008      	movs	r0, #8
    b09e:	f042 0201 	orr.w	r2, r2, #1
    b0a2:	b2e9      	uxtb	r1, r5
    b0a4:	f008 f998 	bl	133d8 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    b0a8:	4638      	mov	r0, r7
    b0aa:	e7f3      	b.n	b094 <rx_packet_set+0x40>

0000b0ac <tx_packet_set>:
{
    b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0ae:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    b0b0:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    b0b4:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    b0b6:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    b0ba:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    b0bc:	09c9      	lsrs	r1, r1, #7
    b0be:	4620      	mov	r0, r4
    b0c0:	f008 f944 	bl	1334c <radio_phy_set>
	if (conn->enc_tx) {
    b0c4:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    b0c8:	f013 0f20 	tst.w	r3, #32
    b0cc:	ea4f 0244 	mov.w	r2, r4, lsl #1
    b0d0:	d00f      	beq.n	b0f2 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    b0d2:	1d29      	adds	r1, r5, #4
    b0d4:	b2c9      	uxtb	r1, r1
    b0d6:	2008      	movs	r0, #8
    b0d8:	f042 0201 	orr.w	r2, r2, #1
    b0dc:	f008 f97c 	bl	133d8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    b0e0:	4639      	mov	r1, r7
    b0e2:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    b0e6:	f008 fbf7 	bl	138d8 <radio_ccm_tx_pkt_set>
}
    b0ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    b0ee:	f008 b9a7 	b.w	13440 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    b0f2:	2008      	movs	r0, #8
    b0f4:	f042 0201 	orr.w	r2, r2, #1
    b0f8:	b2e9      	uxtb	r1, r5
    b0fa:	f008 f96d 	bl	133d8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    b0fe:	4638      	mov	r0, r7
    b100:	e7f3      	b.n	b0ea <tx_packet_set+0x3e>
    b102:	0000      	movs	r0, r0
    b104:	0000      	movs	r0, r0
	...

0000b108 <sched_free_win_offset_calc>:
{
    b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b10c:	b08f      	sub	sp, #60	; 0x3c
    b10e:	4692      	mov	sl, r2
    b110:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b112:	6803      	ldr	r3, [r0, #0]
{
    b114:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b116:	2b00      	cmp	r3, #0
{
    b118:	4680      	mov	r8, r0
    b11a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b11c:	da3b      	bge.n	b196 <sched_free_win_offset_calc+0x8e>
		u32_t ticks_prepare_to_start =
    b11e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    b120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    b124:	4291      	cmp	r1, r2
    b126:	bf2c      	ite	cs
    b128:	1a5a      	subcs	r2, r3, r1
    b12a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    b12c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    b12e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    b132:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b134:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b136:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    b138:	18d3      	adds	r3, r2, r3
    b13a:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b13c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b140:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    b144:	940c      	str	r4, [sp, #48]	; 0x30
    b146:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    b148:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    b14a:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    b14c:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    b14e:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b150:	2302      	movs	r3, #2
    b152:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b154:	ab0d      	add	r3, sp, #52	; 0x34
    b156:	9302      	str	r3, [sp, #8]
    b158:	4b81      	ldr	r3, [pc, #516]	; (b360 <sched_free_win_offset_calc+0x258>)
    b15a:	9301      	str	r3, [sp, #4]
    b15c:	ab0b      	add	r3, sp, #44	; 0x2c
    b15e:	9300      	str	r3, [sp, #0]
    b160:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    b164:	ab0c      	add	r3, sp, #48	; 0x30
    b166:	2101      	movs	r1, #1
    b168:	2000      	movs	r0, #0
    b16a:	f7fd fbbd 	bl	88e8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b16e:	2802      	cmp	r0, #2
    b170:	d01a      	beq.n	b1a8 <sched_free_win_offset_calc+0xa0>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b174:	b1e3      	cbz	r3, b1b0 <sched_free_win_offset_calc+0xa8>
    b176:	4b7b      	ldr	r3, [pc, #492]	; (b364 <sched_free_win_offset_calc+0x25c>)
    b178:	9301      	str	r3, [sp, #4]
    b17a:	9300      	str	r3, [sp, #0]
    b17c:	4b7a      	ldr	r3, [pc, #488]	; (b368 <sched_free_win_offset_calc+0x260>)
    b17e:	4a7b      	ldr	r2, [pc, #492]	; (b36c <sched_free_win_offset_calc+0x264>)
    b180:	681c      	ldr	r4, [r3, #0]
    b182:	497b      	ldr	r1, [pc, #492]	; (b370 <sched_free_win_offset_calc+0x268>)
    b184:	4b7b      	ldr	r3, [pc, #492]	; (b374 <sched_free_win_offset_calc+0x26c>)
    b186:	487c      	ldr	r0, [pc, #496]	; (b378 <sched_free_win_offset_calc+0x270>)
			LL_ASSERT(0);
    b188:	47a0      	blx	r4
    b18a:	4040      	eors	r0, r0
    b18c:	f380 8811 	msr	BASEPRI, r0
    b190:	f04f 0004 	mov.w	r0, #4
    b194:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    b196:	4293      	cmp	r3, r2
    b198:	bf38      	it	cc
    b19a:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    b19c:	2200      	movs	r2, #0
    b19e:	e7c5      	b.n	b12c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b1a0:	2101      	movs	r1, #1
    b1a2:	2000      	movs	r0, #0
    b1a4:	f7fd fc1e 	bl	89e4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b1a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b1aa:	2b02      	cmp	r3, #2
    b1ac:	d0f8      	beq.n	b1a0 <sched_free_win_offset_calc+0x98>
    b1ae:	e7e0      	b.n	b172 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    b1b0:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    b1b4:	2aff      	cmp	r2, #255	; 0xff
    b1b6:	d067      	beq.n	b288 <sched_free_win_offset_calc+0x180>
		if ((ticker_id_prev != 0xff) &&
    b1b8:	2fff      	cmp	r7, #255	; 0xff
    b1ba:	d00c      	beq.n	b1d6 <sched_free_win_offset_calc+0xce>
    b1bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b1be:	4599      	cmp	r9, r3
    b1c0:	d009      	beq.n	b1d6 <sched_free_win_offset_calc+0xce>
			LL_ASSERT(0);
    b1c2:	4b68      	ldr	r3, [pc, #416]	; (b364 <sched_free_win_offset_calc+0x25c>)
    b1c4:	9301      	str	r3, [sp, #4]
    b1c6:	9300      	str	r3, [sp, #0]
    b1c8:	4b67      	ldr	r3, [pc, #412]	; (b368 <sched_free_win_offset_calc+0x260>)
    b1ca:	4a68      	ldr	r2, [pc, #416]	; (b36c <sched_free_win_offset_calc+0x264>)
    b1cc:	681c      	ldr	r4, [r3, #0]
    b1ce:	4968      	ldr	r1, [pc, #416]	; (b370 <sched_free_win_offset_calc+0x268>)
    b1d0:	4b68      	ldr	r3, [pc, #416]	; (b374 <sched_free_win_offset_calc+0x26c>)
    b1d2:	486a      	ldr	r0, [pc, #424]	; (b37c <sched_free_win_offset_calc+0x274>)
    b1d4:	e7d8      	b.n	b188 <sched_free_win_offset_calc+0x80>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    b1d6:	2a05      	cmp	r2, #5
    b1d8:	d951      	bls.n	b27e <sched_free_win_offset_calc+0x176>
				  _radio.connection_count)) {
    b1da:	4869      	ldr	r0, [pc, #420]	; (b380 <sched_free_win_offset_calc+0x278>)
    b1dc:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b1e0:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    b1e2:	429a      	cmp	r2, r3
    b1e4:	da4b      	bge.n	b27e <sched_free_win_offset_calc+0x176>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    b1e6:	2a06      	cmp	r2, #6
    b1e8:	f000 8092 	beq.w	b310 <sched_free_win_offset_calc+0x208>
		if (ticker_id_other != 0xFF) {
    b1ec:	9b06      	ldr	r3, [sp, #24]
    b1ee:	2bff      	cmp	r3, #255	; 0xff
    b1f0:	d14a      	bne.n	b288 <sched_free_win_offset_calc+0x180>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b1f2:	3a07      	subs	r2, #7
    b1f4:	b292      	uxth	r2, r2
    b1f6:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b1fa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b1fe:	f7fc fc43 	bl	7a88 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    b202:	4580      	cmp	r8, r0
    b204:	d03b      	beq.n	b27e <sched_free_win_offset_calc+0x176>
    b206:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b208:	b91b      	cbnz	r3, b212 <sched_free_win_offset_calc+0x10a>
    b20a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b20e:	2b00      	cmp	r3, #0
    b210:	db35      	blt.n	b27e <sched_free_win_offset_calc+0x176>
			u32_t ticks_to_expire_normal =
    b212:	9b05      	ldr	r3, [sp, #20]
    b214:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b216:	6841      	ldr	r1, [r0, #4]
    b218:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b21a:	6803      	ldr	r3, [r0, #0]
    b21c:	2b00      	cmp	r3, #0
    b21e:	da4e      	bge.n	b2be <sched_free_win_offset_calc+0x1b6>
				u32_t ticks_prepare_to_start =
    b220:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    b222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b226:	428a      	cmp	r2, r1
    b228:	bf2c      	ite	cs
    b22a:	18b6      	addcs	r6, r6, r2
    b22c:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    b22e:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    b230:	68c2      	ldr	r2, [r0, #12]
    b232:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    b236:	444b      	add	r3, r9
    b238:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    b23a:	f8da 3000 	ldr.w	r3, [sl]
    b23e:	429e      	cmp	r6, r3
    b240:	d916      	bls.n	b270 <sched_free_win_offset_calc+0x168>
    b242:	429d      	cmp	r5, r3
    b244:	bf38      	it	cc
    b246:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    b248:	9b07      	ldr	r3, [sp, #28]
    b24a:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    b24e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b250:	781b      	ldrb	r3, [r3, #0]
    b252:	42a3      	cmp	r3, r4
    b254:	d905      	bls.n	b262 <sched_free_win_offset_calc+0x15a>
				       (ticker_ticks_diff_get(
    b256:	4629      	mov	r1, r5
    b258:	4630      	mov	r0, r6
    b25a:	f7fd fbdb 	bl	8a14 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    b25e:	42b8      	cmp	r0, r7
    b260:	d231      	bcs.n	b2c6 <sched_free_win_offset_calc+0x1be>
				if (_win_offset >= conn_interval) {
    b262:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    b266:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    b268:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    b26c:	4293      	cmp	r3, r2
    b26e:	d20b      	bcs.n	b288 <sched_free_win_offset_calc+0x180>
			ticks_anchor_prev = ticks_anchor;
    b270:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    b274:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    b278:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    b27c:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    b27e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b280:	781b      	ldrb	r3, [r3, #0]
    b282:	42a3      	cmp	r3, r4
    b284:	f63f af64 	bhi.w	b150 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    b288:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    b28c:	2bff      	cmp	r3, #255	; 0xff
    b28e:	d111      	bne.n	b2b4 <sched_free_win_offset_calc+0x1ac>
    b290:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b294:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b384 <sched_free_win_offset_calc+0x27c>
    b298:	a72f      	add	r7, pc, #188	; (adr r7, b358 <sched_free_win_offset_calc+0x250>)
    b29a:	e9d7 6700 	ldrd	r6, r7, [r7]
    b29e:	429d      	cmp	r5, r3
    b2a0:	bf38      	it	cc
    b2a2:	461d      	movcc	r5, r3
    b2a4:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    b2a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b2aa:	781b      	ldrb	r3, [r3, #0]
    b2ac:	42a3      	cmp	r3, r4
    b2ae:	d831      	bhi.n	b314 <sched_free_win_offset_calc+0x20c>
		*ticks_to_offset_next = ticks_to_expire_prev;
    b2b0:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    b2b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b2b6:	701c      	strb	r4, [r3, #0]
}
    b2b8:	b00f      	add	sp, #60	; 0x3c
    b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    b2be:	428b      	cmp	r3, r1
    b2c0:	bf38      	it	cc
    b2c2:	460b      	movcc	r3, r1
    b2c4:	e7b4      	b.n	b230 <sched_free_win_offset_calc+0x128>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b2c6:	4a2f      	ldr	r2, [pc, #188]	; (b384 <sched_free_win_offset_calc+0x27c>)
    b2c8:	eb05 030b 	add.w	r3, r5, fp
    b2cc:	fba3 0102 	umull	r0, r1, r3, r2
    b2d0:	2207      	movs	r2, #7
    b2d2:	fb02 1103 	mla	r1, r2, r3, r1
    b2d6:	a320      	add	r3, pc, #128	; (adr r3, b358 <sched_free_win_offset_calc+0x250>)
    b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2dc:	f7f4 ff9a 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    b2e0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b2e4:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    b2e8:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b2ea:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    b2ec:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    b2ee:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    b2f2:	d20b      	bcs.n	b30c <sched_free_win_offset_calc+0x204>
					memcpy(win_offset +
    b2f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b2f6:	2202      	movs	r2, #2
    b2f8:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    b2fc:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    b300:	3401      	adds	r4, #1
					memcpy(win_offset +
    b302:	f7f6 fdb5 	bl	1e70 <memcpy>
					offset_index++;
    b306:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    b308:	3528      	adds	r5, #40	; 0x28
    b30a:	e7a0      	b.n	b24e <sched_free_win_offset_calc+0x146>
						ticks_to_expire_prev = 0;
    b30c:	2500      	movs	r5, #0
    b30e:	e7a8      	b.n	b262 <sched_free_win_offset_calc+0x15a>
    b310:	9206      	str	r2, [sp, #24]
    b312:	e7b4      	b.n	b27e <sched_free_win_offset_calc+0x176>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b314:	eb05 030b 	add.w	r3, r5, fp
    b318:	fba3 0108 	umull	r0, r1, r3, r8
    b31c:	fb09 1103 	mla	r1, r9, r3, r1
    b320:	4632      	mov	r2, r6
    b322:	463b      	mov	r3, r7
    b324:	f7f4 ff76 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    b328:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b32c:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    b330:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b332:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    b334:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    b336:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    b33a:	d90b      	bls.n	b354 <sched_free_win_offset_calc+0x24c>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    b33c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b33e:	2202      	movs	r2, #2
    b340:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    b344:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    b348:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    b34a:	f7f6 fd91 	bl	1e70 <memcpy>
			offset_index++;
    b34e:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    b350:	3528      	adds	r5, #40	; 0x28
    b352:	e7a9      	b.n	b2a8 <sched_free_win_offset_calc+0x1a0>
				ticks_to_expire_prev = 0;
    b354:	2500      	movs	r5, #0
    b356:	e7ab      	b.n	b2b0 <sched_free_win_offset_calc+0x1a8>
    b358:	3b9aca00 	.word	0x3b9aca00
    b35c:	00000000 	.word	0x00000000
    b360:	0000a8c5 	.word	0x0000a8c5
    b364:	000161ba 	.word	0x000161ba
    b368:	20003a5c 	.word	0x20003a5c
    b36c:	000179e1 	.word	0x000179e1
    b370:	00017a29 	.word	0x00017a29
    b374:	00019673 	.word	0x00019673
    b378:	0001a392 	.word	0x0001a392
    b37c:	00017955 	.word	0x00017955
    b380:	200008c0 	.word	0x200008c0
    b384:	1afd498d 	.word	0x1afd498d

0000b388 <mayfly_sched_free_win_offset_calc>:
{
    b388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    b38a:	2300      	movs	r3, #0
    b38c:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    b38e:	2306      	movs	r3, #6
    b390:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    b394:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b398:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    b39c:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    b39e:	bfbe      	ittt	lt
    b3a0:	4602      	movlt	r2, r0
    b3a2:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    b3a4:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b3a8:	9101      	str	r1, [sp, #4]
    b3aa:	f10d 010b 	add.w	r1, sp, #11
    b3ae:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    b3b0:	bfa8      	it	ge
    b3b2:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    b3b4:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    b3b8:	2100      	movs	r1, #0
    b3ba:	f7ff fea5 	bl	b108 <sched_free_win_offset_calc>
}
    b3be:	b005      	add	sp, #20
    b3c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b3c4:	0000      	movs	r0, r0
	...

0000b3c8 <mayfly_sched_win_offset_select>:
{
    b3c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b3cc:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    b3d0:	b089      	sub	sp, #36	; 0x24
    b3d2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b3d4:	4840      	ldr	r0, [pc, #256]	; (b4d8 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    b3d6:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b3d8:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b3da:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    b3de:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b3e2:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b3e6:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b3e8:	fb03 1102 	mla	r1, r3, r2, r1
    b3ec:	a338      	add	r3, pc, #224	; (adr r3, b4d0 <mayfly_sched_win_offset_select+0x108>)
    b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    b3f2:	9505      	str	r5, [sp, #20]
    b3f4:	6075      	str	r5, [r6, #4]
    b3f6:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b3f8:	f7f4 ff0c 	bl	214 <__aeabi_uldivmod>
    b3fc:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    b3fe:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    b402:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    b406:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    b40a:	9100      	str	r1, [sp, #0]
    b40c:	9601      	str	r6, [sp, #4]
    b40e:	2101      	movs	r1, #1
    b410:	4620      	mov	r0, r4
    b412:	f7ff fe79 	bl	b108 <sched_free_win_offset_calc>
    b416:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    b41a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    b41e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    b422:	2202      	movs	r2, #2
    b424:	4639      	mov	r1, r7
    b426:	f10d 000e 	add.w	r0, sp, #14
    b42a:	f7f6 fd21 	bl	1e70 <memcpy>
		while (offset_index_m < offset_m_max) {
    b42e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    b432:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    b436:	2300      	movs	r3, #0
    b438:	b2d9      	uxtb	r1, r3
    b43a:	4288      	cmp	r0, r1
    b43c:	d811      	bhi.n	b462 <mayfly_sched_win_offset_select+0x9a>
    b43e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    b440:	4547      	cmp	r7, r8
    b442:	d1ee      	bne.n	b422 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    b444:	b9b5      	cbnz	r5, b474 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    b446:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    b44a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b44e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    b450:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b454:	2202      	movs	r2, #2
    b456:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b458:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    b45c:	f7f6 fd08 	bl	1e70 <memcpy>
    b460:	e027      	b.n	b4b2 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    b462:	454a      	cmp	r2, r9
    b464:	d004      	beq.n	b470 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    b466:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    b46a:	4291      	cmp	r1, r2
    b46c:	d024      	beq.n	b4b8 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    b46e:	2501      	movs	r5, #1
    b470:	3301      	adds	r3, #1
    b472:	e7e1      	b.n	b438 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    b474:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    b478:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b47c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b480:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    b484:	4b15      	ldr	r3, [pc, #84]	; (b4dc <mayfly_sched_win_offset_select+0x114>)
    b486:	2200      	movs	r2, #0
    b488:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    b48c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b490:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    b494:	f042 0203 	orr.w	r2, r2, #3
    b498:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    b49c:	2203      	movs	r2, #3
    b49e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    b4a2:	2211      	movs	r2, #17
    b4a4:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    b4a8:	220f      	movs	r2, #15
    b4aa:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    b4ae:	2220      	movs	r2, #32
    b4b0:	701a      	strb	r2, [r3, #0]
}
    b4b2:	b009      	add	sp, #36	; 0x24
    b4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    b4b8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b4bc:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    b4be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    b4c2:	2202      	movs	r2, #2
    b4c4:	f10d 010e 	add.w	r1, sp, #14
    b4c8:	e7c6      	b.n	b458 <mayfly_sched_win_offset_select+0x90>
    b4ca:	bf00      	nop
    b4cc:	f3af 8000 	nop.w
    b4d0:	1afd498d 	.word	0x1afd498d
    b4d4:	00000007 	.word	0x00000007
    b4d8:	09ce5400 	.word	0x09ce5400
    b4dc:	200008c0 	.word	0x200008c0

0000b4e0 <sched_after_mstr_free_slot_get>:
{
    b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4e4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    b4e6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    b4e8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    b4ea:	f8df 9144 	ldr.w	r9, [pc, #324]	; b630 <sched_after_mstr_free_slot_get+0x150>
	ticker_id = ticker_id_prev = 0xff;
    b4ee:	f88d 501f 	strb.w	r5, [sp, #31]
{
    b4f2:	4680      	mov	r8, r0
    b4f4:	4693      	mov	fp, r2
    b4f6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    b4f8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    b4fc:	601c      	str	r4, [r3, #0]
    b4fe:	9408      	str	r4, [sp, #32]
    b500:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b502:	2302      	movs	r3, #2
    b504:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b506:	ab09      	add	r3, sp, #36	; 0x24
    b508:	9302      	str	r3, [sp, #8]
    b50a:	4b41      	ldr	r3, [pc, #260]	; (b610 <sched_after_mstr_free_slot_get+0x130>)
    b50c:	9301      	str	r3, [sp, #4]
    b50e:	ab08      	add	r3, sp, #32
    b510:	9300      	str	r3, [sp, #0]
    b512:	f10d 021f 	add.w	r2, sp, #31
    b516:	465b      	mov	r3, fp
    b518:	4641      	mov	r1, r8
    b51a:	2000      	movs	r0, #0
    b51c:	f7fd f9e4 	bl	88e8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b520:	2802      	cmp	r0, #2
    b522:	d015      	beq.n	b550 <sched_after_mstr_free_slot_get+0x70>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b524:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b526:	b1bb      	cbz	r3, b558 <sched_after_mstr_free_slot_get+0x78>
    b528:	4b3a      	ldr	r3, [pc, #232]	; (b614 <sched_after_mstr_free_slot_get+0x134>)
    b52a:	9301      	str	r3, [sp, #4]
    b52c:	9300      	str	r3, [sp, #0]
    b52e:	4b3a      	ldr	r3, [pc, #232]	; (b618 <sched_after_mstr_free_slot_get+0x138>)
    b530:	4a3a      	ldr	r2, [pc, #232]	; (b61c <sched_after_mstr_free_slot_get+0x13c>)
    b532:	681c      	ldr	r4, [r3, #0]
    b534:	493a      	ldr	r1, [pc, #232]	; (b620 <sched_after_mstr_free_slot_get+0x140>)
    b536:	4b3b      	ldr	r3, [pc, #236]	; (b624 <sched_after_mstr_free_slot_get+0x144>)
    b538:	483b      	ldr	r0, [pc, #236]	; (b628 <sched_after_mstr_free_slot_get+0x148>)
    b53a:	47a0      	blx	r4
    b53c:	4040      	eors	r0, r0
    b53e:	f380 8811 	msr	BASEPRI, r0
    b542:	f04f 0004 	mov.w	r0, #4
    b546:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b548:	4641      	mov	r1, r8
    b54a:	2000      	movs	r0, #0
    b54c:	f7fd fa4a 	bl	89e4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b550:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b552:	2b02      	cmp	r3, #2
    b554:	d0f8      	beq.n	b548 <sched_after_mstr_free_slot_get+0x68>
    b556:	e7e5      	b.n	b524 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    b558:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b55c:	2aff      	cmp	r2, #255	; 0xff
    b55e:	d04e      	beq.n	b5fe <sched_after_mstr_free_slot_get+0x11e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    b560:	2a06      	cmp	r2, #6
    b562:	d9ce      	bls.n	b502 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    b564:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b568:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    b56a:	429a      	cmp	r2, r3
    b56c:	dac9      	bge.n	b502 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b56e:	3a07      	subs	r2, #7
    b570:	b292      	uxth	r2, r2
    b572:	f44f 71aa 	mov.w	r1, #340	; 0x154
    b576:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    b57a:	f7fc fa85 	bl	7a88 <mem_get>
		if (conn && !conn->role) {
    b57e:	2800      	cmp	r0, #0
    b580:	d0bf      	beq.n	b502 <sched_after_mstr_free_slot_get+0x22>
    b582:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b586:	2b00      	cmp	r3, #0
    b588:	dbbb      	blt.n	b502 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b58a:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    b58c:	9a08      	ldr	r2, [sp, #32]
    b58e:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    b592:	2b00      	cmp	r3, #0
    b594:	da12      	bge.n	b5bc <sched_after_mstr_free_slot_get+0xdc>
    b596:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    b598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b59c:	4571      	cmp	r1, lr
    b59e:	bf2c      	ite	cs
    b5a0:	1852      	addcs	r2, r2, r1
    b5a2:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    b5a4:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    b5a6:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    b5a8:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    b5aa:	f101 0104 	add.w	r1, r1, #4
    b5ae:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    b5b0:	d108      	bne.n	b5c4 <sched_after_mstr_free_slot_get+0xe4>
			ticker_id_prev = ticker_id;
    b5b2:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    b5b6:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    b5b8:	4616      	mov	r6, r2
    b5ba:	e7a2      	b.n	b502 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    b5bc:	4573      	cmp	r3, lr
    b5be:	bf38      	it	cc
    b5c0:	4673      	movcc	r3, lr
    b5c2:	e7f0      	b.n	b5a6 <sched_after_mstr_free_slot_get+0xc6>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    b5c4:	4631      	mov	r1, r6
    b5c6:	4610      	mov	r0, r2
    b5c8:	9305      	str	r3, [sp, #20]
    b5ca:	9204      	str	r2, [sp, #16]
    b5cc:	f7fd fa22 	bl	8a14 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    b5d0:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    b5d4:	4288      	cmp	r0, r1
    b5d6:	9a04      	ldr	r2, [sp, #16]
    b5d8:	9b05      	ldr	r3, [sp, #20]
    b5da:	d9ea      	bls.n	b5b2 <sched_after_mstr_free_slot_get+0xd2>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    b5dc:	4813      	ldr	r0, [pc, #76]	; (b62c <sched_after_mstr_free_slot_get+0x14c>)
    b5de:	4434      	add	r4, r6
    b5e0:	fba4 0100 	umull	r0, r1, r4, r0
    b5e4:	2307      	movs	r3, #7
    b5e6:	fb03 1104 	mla	r1, r3, r4, r1
    b5ea:	a307      	add	r3, pc, #28	; (adr r3, b608 <sched_after_mstr_free_slot_get+0x128>)
    b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    b5f0:	f7f4 fe10 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    b5f4:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    b5f6:	6038      	str	r0, [r7, #0]
}
    b5f8:	b00b      	add	sp, #44	; 0x2c
    b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    b5fe:	2dff      	cmp	r5, #255	; 0xff
    b600:	d1ec      	bne.n	b5dc <sched_after_mstr_free_slot_get+0xfc>
    b602:	e7f9      	b.n	b5f8 <sched_after_mstr_free_slot_get+0x118>
    b604:	f3af 8000 	nop.w
    b608:	3b9aca00 	.word	0x3b9aca00
    b60c:	00000000 	.word	0x00000000
    b610:	0000a8c5 	.word	0x0000a8c5
    b614:	000161ba 	.word	0x000161ba
    b618:	20003a5c 	.word	0x20003a5c
    b61c:	000179e1 	.word	0x000179e1
    b620:	00017a29 	.word	0x00017a29
    b624:	00019633 	.word	0x00019633
    b628:	0001a392 	.word	0x0001a392
    b62c:	1afd498d 	.word	0x1afd498d
    b630:	200008c0 	.word	0x200008c0

0000b634 <isr_adv_ci_adva_check>:
{
    b634:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    b636:	7804      	ldrb	r4, [r0, #0]
    b638:	780a      	ldrb	r2, [r1, #0]
    b63a:	f3c4 1380 	ubfx	r3, r4, #6, #1
    b63e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    b642:	d119      	bne.n	b678 <isr_adv_ci_adva_check+0x44>
    b644:	f004 040f 	and.w	r4, r4, #15
    b648:	2c01      	cmp	r4, #1
    b64a:	f101 0608 	add.w	r6, r1, #8
    b64e:	f100 0502 	add.w	r5, r0, #2
    b652:	d008      	beq.n	b666 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    b654:	2206      	movs	r2, #6
    b656:	4631      	mov	r1, r6
    b658:	4628      	mov	r0, r5
    b65a:	f7f6 fbf4 	bl	1e46 <memcmp>
			 BDADDR_SIZE)) ||
    b65e:	fab0 f080 	clz	r0, r0
    b662:	0940      	lsrs	r0, r0, #5
    b664:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    b666:	2206      	movs	r2, #6
    b668:	4631      	mov	r1, r6
    b66a:	4628      	mov	r0, r5
    b66c:	f7f6 fbeb 	bl	1e46 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    b670:	2800      	cmp	r0, #0
    b672:	d1ef      	bne.n	b654 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    b674:	4620      	mov	r0, r4
    b676:	bd70      	pop	{r4, r5, r6, pc}
    b678:	2000      	movs	r0, #0
}
    b67a:	bd70      	pop	{r4, r5, r6, pc}

0000b67c <packet_rx_enqueue>:
{
    b67c:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    b67e:	4a20      	ldr	r2, [pc, #128]	; (b700 <packet_rx_enqueue+0x84>)
    b680:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    b684:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    b688:	4299      	cmp	r1, r3
    b68a:	d10f      	bne.n	b6ac <packet_rx_enqueue+0x30>
    b68c:	4b1d      	ldr	r3, [pc, #116]	; (b704 <packet_rx_enqueue+0x88>)
    b68e:	9301      	str	r3, [sp, #4]
    b690:	9300      	str	r3, [sp, #0]
    b692:	4b1d      	ldr	r3, [pc, #116]	; (b708 <packet_rx_enqueue+0x8c>)
    b694:	4a1d      	ldr	r2, [pc, #116]	; (b70c <packet_rx_enqueue+0x90>)
    b696:	681c      	ldr	r4, [r3, #0]
    b698:	491d      	ldr	r1, [pc, #116]	; (b710 <packet_rx_enqueue+0x94>)
    b69a:	4b1e      	ldr	r3, [pc, #120]	; (b714 <packet_rx_enqueue+0x98>)
    b69c:	481e      	ldr	r0, [pc, #120]	; (b718 <packet_rx_enqueue+0x9c>)
	LL_ASSERT(link);
    b69e:	47a0      	blx	r4
    b6a0:	4040      	eors	r0, r0
    b6a2:	f380 8811 	msr	BASEPRI, r0
    b6a6:	f04f 0004 	mov.w	r0, #4
    b6aa:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b6ac:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    b6b0:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    b6b4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b6b8:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    b6bc:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b6be:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    b6c0:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    b6c4:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    b6c8:	3301      	adds	r3, #1
    b6ca:	b2db      	uxtb	r3, r3
		last = 0;
    b6cc:	429c      	cmp	r4, r3
    b6ce:	bf08      	it	eq
    b6d0:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    b6d2:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b6d6:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b6da:	f7fc f9fa 	bl	7ad2 <memq_enqueue>
	LL_ASSERT(link);
    b6de:	b948      	cbnz	r0, b6f4 <packet_rx_enqueue+0x78>
    b6e0:	4b08      	ldr	r3, [pc, #32]	; (b704 <packet_rx_enqueue+0x88>)
    b6e2:	9301      	str	r3, [sp, #4]
    b6e4:	9300      	str	r3, [sp, #0]
    b6e6:	4b08      	ldr	r3, [pc, #32]	; (b708 <packet_rx_enqueue+0x8c>)
    b6e8:	4a08      	ldr	r2, [pc, #32]	; (b70c <packet_rx_enqueue+0x90>)
    b6ea:	681c      	ldr	r4, [r3, #0]
    b6ec:	4908      	ldr	r1, [pc, #32]	; (b710 <packet_rx_enqueue+0x94>)
    b6ee:	4b09      	ldr	r3, [pc, #36]	; (b714 <packet_rx_enqueue+0x98>)
    b6f0:	480a      	ldr	r0, [pc, #40]	; (b71c <packet_rx_enqueue+0xa0>)
    b6f2:	e7d4      	b.n	b69e <packet_rx_enqueue+0x22>
}
    b6f4:	b002      	add	sp, #8
    b6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b6fa:	f006 bc9f 	b.w	1203c <radio_event_callback>
    b6fe:	bf00      	nop
    b700:	200008c0 	.word	0x200008c0
    b704:	000161ba 	.word	0x000161ba
    b708:	20003a5c 	.word	0x20003a5c
    b70c:	000179e1 	.word	0x000179e1
    b710:	00017a29 	.word	0x00017a29
    b714:	000197c4 	.word	0x000197c4
    b718:	0001a08a 	.word	0x0001a08a
    b71c:	000198ad 	.word	0x000198ad

0000b720 <isr_scan_tgta_check>:
{
    b720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b724:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b726:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    b728:	f101 0808 	add.w	r8, r1, #8
{
    b72c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b72e:	09c0      	lsrs	r0, r0, #7
    b730:	4641      	mov	r1, r8
{
    b732:	4691      	mov	r9, r2
    b734:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    b736:	f007 f963 	bl	12a00 <ctrl_rl_addr_resolve>
    b73a:	4604      	mov	r4, r0
    b73c:	b9d8      	cbnz	r0, b776 <isr_scan_tgta_check+0x56>
    b73e:	4f1c      	ldr	r7, [pc, #112]	; (b7b0 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    b740:	f1ba 0f00 	cmp.w	sl, #0
    b744:	d10e      	bne.n	b764 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    b746:	782b      	ldrb	r3, [r5, #0]
    b748:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    b74c:	09db      	lsrs	r3, r3, #7
    b74e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    b752:	d113      	bne.n	b77c <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    b754:	2206      	movs	r2, #6
    b756:	4641      	mov	r1, r8
    b758:	4816      	ldr	r0, [pc, #88]	; (b7b4 <isr_scan_tgta_check+0x94>)
    b75a:	f7f6 fb74 	bl	1e46 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    b75e:	b968      	cbnz	r0, b77c <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    b760:	2001      	movs	r0, #1
    b762:	e012      	b.n	b78a <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    b764:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    b768:	07db      	lsls	r3, r3, #31
    b76a:	d5ec      	bpl.n	b746 <isr_scan_tgta_check+0x26>
    b76c:	4648      	mov	r0, r9
    b76e:	f006 fe8b 	bl	12488 <ctrl_lrpa_get>
    b772:	2800      	cmp	r0, #0
    b774:	d0e7      	beq.n	b746 <isr_scan_tgta_check+0x26>
}
    b776:	4620      	mov	r0, r4
    b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b77c:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    b780:	f3c0 1001 	ubfx	r0, r0, #4, #2
    b784:	f010 0002 	ands.w	r0, r0, #2
    b788:	d101      	bne.n	b78e <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    b78a:	4604      	mov	r4, r0
    b78c:	e7f3      	b.n	b776 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b78e:	f995 3000 	ldrsb.w	r3, [r5]
    b792:	2b00      	cmp	r3, #0
    b794:	da09      	bge.n	b7aa <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    b796:	7b6b      	ldrb	r3, [r5, #13]
    b798:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b79c:	2b40      	cmp	r3, #64	; 0x40
    b79e:	d104      	bne.n	b7aa <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    b7a0:	2e00      	cmp	r6, #0
    b7a2:	d0dd      	beq.n	b760 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    b7a4:	2001      	movs	r0, #1
    b7a6:	7030      	strb	r0, [r6, #0]
    b7a8:	e7ef      	b.n	b78a <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    b7aa:	2000      	movs	r0, #0
    b7ac:	e7ed      	b.n	b78a <isr_scan_tgta_check+0x6a>
    b7ae:	bf00      	nop
    b7b0:	200008c0 	.word	0x200008c0
    b7b4:	200009a4 	.word	0x200009a4

0000b7b8 <isr_rx_scan_report>:
{
    b7b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b7bc:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    b7be:	2003      	movs	r0, #3
{
    b7c0:	460f      	mov	r7, r1
    b7c2:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    b7c4:	f7ff f8be 	bl	a944 <packet_rx_reserve_get>
	if (node_rx == 0) {
    b7c8:	4604      	mov	r4, r0
    b7ca:	2800      	cmp	r0, #0
    b7cc:	d03f      	beq.n	b84e <isr_rx_scan_report+0x96>
	node_rx->hdr.handle = 0xffff;
    b7ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b7d2:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    b7d4:	4b1f      	ldr	r3, [pc, #124]	; (b854 <isr_rx_scan_report+0x9c>)
    b7d6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    b7da:	075a      	lsls	r2, r3, #29
    b7dc:	d033      	beq.n	b846 <isr_rx_scan_report+0x8e>
		switch (_radio.scanner.phy) {
    b7de:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b7e2:	b2da      	uxtb	r2, r3
    b7e4:	2a01      	cmp	r2, #1
    b7e6:	d011      	beq.n	b80c <isr_rx_scan_report+0x54>
    b7e8:	2a04      	cmp	r2, #4
    b7ea:	d010      	beq.n	b80e <isr_rx_scan_report+0x56>
			LL_ASSERT(0);
    b7ec:	4b1a      	ldr	r3, [pc, #104]	; (b858 <isr_rx_scan_report+0xa0>)
    b7ee:	9301      	str	r3, [sp, #4]
    b7f0:	9300      	str	r3, [sp, #0]
    b7f2:	4b1a      	ldr	r3, [pc, #104]	; (b85c <isr_rx_scan_report+0xa4>)
    b7f4:	4a1a      	ldr	r2, [pc, #104]	; (b860 <isr_rx_scan_report+0xa8>)
    b7f6:	681c      	ldr	r4, [r3, #0]
    b7f8:	491a      	ldr	r1, [pc, #104]	; (b864 <isr_rx_scan_report+0xac>)
    b7fa:	4b1b      	ldr	r3, [pc, #108]	; (b868 <isr_rx_scan_report+0xb0>)
    b7fc:	481b      	ldr	r0, [pc, #108]	; (b86c <isr_rx_scan_report+0xb4>)
    b7fe:	47a0      	blx	r4
    b800:	4040      	eors	r0, r0
    b802:	f380 8811 	msr	BASEPRI, r0
    b806:	f04f 0004 	mov.w	r0, #4
    b80a:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    b80c:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    b80e:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b812:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    b814:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b818:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    b81c:	f1b9 0f00 	cmp.w	r9, #0
    b820:	d013      	beq.n	b84a <isr_rx_scan_report+0x92>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    b822:	f007 feb5 	bl	13590 <radio_rssi_get>
			     pdu_adv_rx->len] =
    b826:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b82a:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b82e:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    b830:	442b      	add	r3, r5
    b832:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b834:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    b836:	441d      	add	r5, r3
    b838:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    b83a:	f7ff ff1f 	bl	b67c <packet_rx_enqueue>
	return 0;
    b83e:	2000      	movs	r0, #0
}
    b840:	b003      	add	sp, #12
    b842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b846:	2302      	movs	r3, #2
    b848:	e7e1      	b.n	b80e <isr_rx_scan_report+0x56>
			     pdu_adv_rx->len] =
    b84a:	207f      	movs	r0, #127	; 0x7f
    b84c:	e7ed      	b.n	b82a <isr_rx_scan_report+0x72>
		return 1;
    b84e:	2001      	movs	r0, #1
    b850:	e7f6      	b.n	b840 <isr_rx_scan_report+0x88>
    b852:	bf00      	nop
    b854:	200008c0 	.word	0x200008c0
    b858:	000161ba 	.word	0x000161ba
    b85c:	20003a5c 	.word	0x20003a5c
    b860:	000179e1 	.word	0x000179e1
    b864:	00017a29 	.word	0x00017a29
    b868:	0001945a 	.word	0x0001945a
    b86c:	00017955 	.word	0x00017955

0000b870 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    b870:	4a0b      	ldr	r2, [pc, #44]	; (b8a0 <rx_fc_lock+0x30>)
    b872:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b876:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    b87a:	4299      	cmp	r1, r3
    b87c:	d10e      	bne.n	b89c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    b87e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b882:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    b886:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    b88a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    b88e:	3301      	adds	r3, #1
    b890:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    b892:	2b03      	cmp	r3, #3
    b894:	bf08      	it	eq
    b896:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    b898:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    b89c:	4770      	bx	lr
    b89e:	bf00      	nop
    b8a0:	200008c0 	.word	0x200008c0

0000b8a4 <ticker_success_assert>:
{
    b8a4:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b8a6:	b178      	cbz	r0, b8c8 <ticker_success_assert+0x24>
    b8a8:	4b08      	ldr	r3, [pc, #32]	; (b8cc <ticker_success_assert+0x28>)
    b8aa:	9301      	str	r3, [sp, #4]
    b8ac:	9300      	str	r3, [sp, #0]
    b8ae:	4b08      	ldr	r3, [pc, #32]	; (b8d0 <ticker_success_assert+0x2c>)
    b8b0:	4a08      	ldr	r2, [pc, #32]	; (b8d4 <ticker_success_assert+0x30>)
    b8b2:	681c      	ldr	r4, [r3, #0]
    b8b4:	4908      	ldr	r1, [pc, #32]	; (b8d8 <ticker_success_assert+0x34>)
    b8b6:	4b09      	ldr	r3, [pc, #36]	; (b8dc <ticker_success_assert+0x38>)
    b8b8:	4809      	ldr	r0, [pc, #36]	; (b8e0 <ticker_success_assert+0x3c>)
    b8ba:	47a0      	blx	r4
    b8bc:	4040      	eors	r0, r0
    b8be:	f380 8811 	msr	BASEPRI, r0
    b8c2:	f04f 0004 	mov.w	r0, #4
    b8c6:	df02      	svc	2
}
    b8c8:	b002      	add	sp, #8
    b8ca:	bd10      	pop	{r4, pc}
    b8cc:	000161ba 	.word	0x000161ba
    b8d0:	20003a5c 	.word	0x20003a5c
    b8d4:	000179e1 	.word	0x000179e1
    b8d8:	00017a29 	.word	0x00017a29
    b8dc:	00019543 	.word	0x00019543
    b8e0:	0001a4aa 	.word	0x0001a4aa

0000b8e4 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b8e4:	2801      	cmp	r0, #1
{
    b8e6:	b513      	push	{r0, r1, r4, lr}
    b8e8:	4b12      	ldr	r3, [pc, #72]	; (b934 <ticker_stop_adv_assert+0x50>)
	if (status == TICKER_STATUS_FAILURE) {
    b8ea:	d116      	bne.n	b91a <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    b8ec:	7c9a      	ldrb	r2, [r3, #18]
    b8ee:	2a05      	cmp	r2, #5
    b8f0:	d103      	bne.n	b8fa <ticker_stop_adv_assert+0x16>
			_radio.ticker_id_stop = 0;
    b8f2:	2200      	movs	r2, #0
    b8f4:	749a      	strb	r2, [r3, #18]
}
    b8f6:	b002      	add	sp, #8
    b8f8:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    b8fa:	4b0f      	ldr	r3, [pc, #60]	; (b938 <ticker_stop_adv_assert+0x54>)
    b8fc:	9301      	str	r3, [sp, #4]
    b8fe:	9300      	str	r3, [sp, #0]
    b900:	4b0e      	ldr	r3, [pc, #56]	; (b93c <ticker_stop_adv_assert+0x58>)
    b902:	4a0f      	ldr	r2, [pc, #60]	; (b940 <ticker_stop_adv_assert+0x5c>)
    b904:	681c      	ldr	r4, [r3, #0]
    b906:	490f      	ldr	r1, [pc, #60]	; (b944 <ticker_stop_adv_assert+0x60>)
    b908:	4b0f      	ldr	r3, [pc, #60]	; (b948 <ticker_stop_adv_assert+0x64>)
    b90a:	4810      	ldr	r0, [pc, #64]	; (b94c <ticker_stop_adv_assert+0x68>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    b90c:	47a0      	blx	r4
    b90e:	4040      	eors	r0, r0
    b910:	f380 8811 	msr	BASEPRI, r0
    b914:	f04f 0004 	mov.w	r0, #4
    b918:	df02      	svc	2
    b91a:	7c1b      	ldrb	r3, [r3, #16]
    b91c:	2b05      	cmp	r3, #5
    b91e:	d1ea      	bne.n	b8f6 <ticker_stop_adv_assert+0x12>
    b920:	4b05      	ldr	r3, [pc, #20]	; (b938 <ticker_stop_adv_assert+0x54>)
    b922:	9301      	str	r3, [sp, #4]
    b924:	9300      	str	r3, [sp, #0]
    b926:	4b05      	ldr	r3, [pc, #20]	; (b93c <ticker_stop_adv_assert+0x58>)
    b928:	4a05      	ldr	r2, [pc, #20]	; (b940 <ticker_stop_adv_assert+0x5c>)
    b92a:	681c      	ldr	r4, [r3, #0]
    b92c:	4905      	ldr	r1, [pc, #20]	; (b944 <ticker_stop_adv_assert+0x60>)
    b92e:	4b06      	ldr	r3, [pc, #24]	; (b948 <ticker_stop_adv_assert+0x64>)
    b930:	4807      	ldr	r0, [pc, #28]	; (b950 <ticker_stop_adv_assert+0x6c>)
    b932:	e7eb      	b.n	b90c <ticker_stop_adv_assert+0x28>
    b934:	200008c0 	.word	0x200008c0
    b938:	000161ba 	.word	0x000161ba
    b93c:	20003a5c 	.word	0x20003a5c
    b940:	000179e1 	.word	0x000179e1
    b944:	00017a29 	.word	0x00017a29
    b948:	00019559 	.word	0x00019559
    b94c:	00017955 	.word	0x00017955
    b950:	0001a42c 	.word	0x0001a42c

0000b954 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b954:	2801      	cmp	r0, #1
{
    b956:	b513      	push	{r0, r1, r4, lr}
    b958:	4b12      	ldr	r3, [pc, #72]	; (b9a4 <ticker_stop_scan_assert+0x50>)
	if (status == TICKER_STATUS_FAILURE) {
    b95a:	d116      	bne.n	b98a <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    b95c:	7c9a      	ldrb	r2, [r3, #18]
    b95e:	2a06      	cmp	r2, #6
    b960:	d103      	bne.n	b96a <ticker_stop_scan_assert+0x16>
			_radio.ticker_id_stop = 0;
    b962:	2200      	movs	r2, #0
    b964:	749a      	strb	r2, [r3, #18]
}
    b966:	b002      	add	sp, #8
    b968:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    b96a:	4b0f      	ldr	r3, [pc, #60]	; (b9a8 <ticker_stop_scan_assert+0x54>)
    b96c:	9301      	str	r3, [sp, #4]
    b96e:	9300      	str	r3, [sp, #0]
    b970:	4b0e      	ldr	r3, [pc, #56]	; (b9ac <ticker_stop_scan_assert+0x58>)
    b972:	4a0f      	ldr	r2, [pc, #60]	; (b9b0 <ticker_stop_scan_assert+0x5c>)
    b974:	681c      	ldr	r4, [r3, #0]
    b976:	490f      	ldr	r1, [pc, #60]	; (b9b4 <ticker_stop_scan_assert+0x60>)
    b978:	4b0f      	ldr	r3, [pc, #60]	; (b9b8 <ticker_stop_scan_assert+0x64>)
    b97a:	4810      	ldr	r0, [pc, #64]	; (b9bc <ticker_stop_scan_assert+0x68>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    b97c:	47a0      	blx	r4
    b97e:	4040      	eors	r0, r0
    b980:	f380 8811 	msr	BASEPRI, r0
    b984:	f04f 0004 	mov.w	r0, #4
    b988:	df02      	svc	2
    b98a:	7c1b      	ldrb	r3, [r3, #16]
    b98c:	2b06      	cmp	r3, #6
    b98e:	d1ea      	bne.n	b966 <ticker_stop_scan_assert+0x12>
    b990:	4b05      	ldr	r3, [pc, #20]	; (b9a8 <ticker_stop_scan_assert+0x54>)
    b992:	9301      	str	r3, [sp, #4]
    b994:	9300      	str	r3, [sp, #0]
    b996:	4b05      	ldr	r3, [pc, #20]	; (b9ac <ticker_stop_scan_assert+0x58>)
    b998:	4a05      	ldr	r2, [pc, #20]	; (b9b0 <ticker_stop_scan_assert+0x5c>)
    b99a:	681c      	ldr	r4, [r3, #0]
    b99c:	4905      	ldr	r1, [pc, #20]	; (b9b4 <ticker_stop_scan_assert+0x60>)
    b99e:	4b06      	ldr	r3, [pc, #24]	; (b9b8 <ticker_stop_scan_assert+0x64>)
    b9a0:	4807      	ldr	r0, [pc, #28]	; (b9c0 <ticker_stop_scan_assert+0x6c>)
    b9a2:	e7eb      	b.n	b97c <ticker_stop_scan_assert+0x28>
    b9a4:	200008c0 	.word	0x200008c0
    b9a8:	000161ba 	.word	0x000161ba
    b9ac:	20003a5c 	.word	0x20003a5c
    b9b0:	000179e1 	.word	0x000179e1
    b9b4:	00017a29 	.word	0x00017a29
    b9b8:	00019570 	.word	0x00019570
    b9bc:	00017955 	.word	0x00017955
    b9c0:	0001a46b 	.word	0x0001a46b

0000b9c4 <ticker_update_adv_assert>:
{
    b9c4:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b9c6:	b198      	cbz	r0, b9f0 <ticker_update_adv_assert+0x2c>
    b9c8:	4b0a      	ldr	r3, [pc, #40]	; (b9f4 <ticker_update_adv_assert+0x30>)
    b9ca:	7c9b      	ldrb	r3, [r3, #18]
    b9cc:	2b05      	cmp	r3, #5
    b9ce:	d00f      	beq.n	b9f0 <ticker_update_adv_assert+0x2c>
    b9d0:	4b09      	ldr	r3, [pc, #36]	; (b9f8 <ticker_update_adv_assert+0x34>)
    b9d2:	9301      	str	r3, [sp, #4]
    b9d4:	9300      	str	r3, [sp, #0]
    b9d6:	4b09      	ldr	r3, [pc, #36]	; (b9fc <ticker_update_adv_assert+0x38>)
    b9d8:	4a09      	ldr	r2, [pc, #36]	; (ba00 <ticker_update_adv_assert+0x3c>)
    b9da:	681c      	ldr	r4, [r3, #0]
    b9dc:	4909      	ldr	r1, [pc, #36]	; (ba04 <ticker_update_adv_assert+0x40>)
    b9de:	4b0a      	ldr	r3, [pc, #40]	; (ba08 <ticker_update_adv_assert+0x44>)
    b9e0:	480a      	ldr	r0, [pc, #40]	; (ba0c <ticker_update_adv_assert+0x48>)
    b9e2:	47a0      	blx	r4
    b9e4:	4040      	eors	r0, r0
    b9e6:	f380 8811 	msr	BASEPRI, r0
    b9ea:	f04f 0004 	mov.w	r0, #4
    b9ee:	df02      	svc	2
}
    b9f0:	b002      	add	sp, #8
    b9f2:	bd10      	pop	{r4, pc}
    b9f4:	200008c0 	.word	0x200008c0
    b9f8:	000161ba 	.word	0x000161ba
    b9fc:	20003a5c 	.word	0x20003a5c
    ba00:	000179e1 	.word	0x000179e1
    ba04:	00017a29 	.word	0x00017a29
    ba08:	00019588 	.word	0x00019588
    ba0c:	0001a4d7 	.word	0x0001a4d7

0000ba10 <ticker_update_slave_assert>:
{
    ba10:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ba12:	b1a0      	cbz	r0, ba3e <ticker_update_slave_assert+0x2e>
    ba14:	4b0b      	ldr	r3, [pc, #44]	; (ba44 <ticker_update_slave_assert+0x34>)
    ba16:	7c9b      	ldrb	r3, [r3, #18]
    ba18:	b2c9      	uxtb	r1, r1
    ba1a:	4299      	cmp	r1, r3
    ba1c:	d00f      	beq.n	ba3e <ticker_update_slave_assert+0x2e>
    ba1e:	4b0a      	ldr	r3, [pc, #40]	; (ba48 <ticker_update_slave_assert+0x38>)
    ba20:	9301      	str	r3, [sp, #4]
    ba22:	9300      	str	r3, [sp, #0]
    ba24:	4b09      	ldr	r3, [pc, #36]	; (ba4c <ticker_update_slave_assert+0x3c>)
    ba26:	4a0a      	ldr	r2, [pc, #40]	; (ba50 <ticker_update_slave_assert+0x40>)
    ba28:	681c      	ldr	r4, [r3, #0]
    ba2a:	490a      	ldr	r1, [pc, #40]	; (ba54 <ticker_update_slave_assert+0x44>)
    ba2c:	4b0a      	ldr	r3, [pc, #40]	; (ba58 <ticker_update_slave_assert+0x48>)
    ba2e:	480b      	ldr	r0, [pc, #44]	; (ba5c <ticker_update_slave_assert+0x4c>)
    ba30:	47a0      	blx	r4
    ba32:	4040      	eors	r0, r0
    ba34:	f380 8811 	msr	BASEPRI, r0
    ba38:	f04f 0004 	mov.w	r0, #4
    ba3c:	df02      	svc	2
}
    ba3e:	b002      	add	sp, #8
    ba40:	bd10      	pop	{r4, pc}
    ba42:	bf00      	nop
    ba44:	200008c0 	.word	0x200008c0
    ba48:	000161ba 	.word	0x000161ba
    ba4c:	20003a5c 	.word	0x20003a5c
    ba50:	000179e1 	.word	0x000179e1
    ba54:	00017a29 	.word	0x00017a29
    ba58:	000195a1 	.word	0x000195a1
    ba5c:	0001a526 	.word	0x0001a526

0000ba60 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    ba60:	b513      	push	{r0, r1, r4, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    ba62:	b178      	cbz	r0, ba84 <ticker_op_latency_cancelled+0x24>
    ba64:	4b0b      	ldr	r3, [pc, #44]	; (ba94 <ticker_op_latency_cancelled+0x34>)
    ba66:	9301      	str	r3, [sp, #4]
    ba68:	9300      	str	r3, [sp, #0]
    ba6a:	4b0b      	ldr	r3, [pc, #44]	; (ba98 <ticker_op_latency_cancelled+0x38>)
    ba6c:	4a0b      	ldr	r2, [pc, #44]	; (ba9c <ticker_op_latency_cancelled+0x3c>)
    ba6e:	681c      	ldr	r4, [r3, #0]
    ba70:	490b      	ldr	r1, [pc, #44]	; (baa0 <ticker_op_latency_cancelled+0x40>)
    ba72:	4b0c      	ldr	r3, [pc, #48]	; (baa4 <ticker_op_latency_cancelled+0x44>)
    ba74:	480c      	ldr	r0, [pc, #48]	; (baa8 <ticker_op_latency_cancelled+0x48>)
    ba76:	47a0      	blx	r4
    ba78:	4040      	eors	r0, r0
    ba7a:	f380 8811 	msr	BASEPRI, r0
    ba7e:	f04f 0004 	mov.w	r0, #4
    ba82:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    ba84:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ba88:	f360 0341 	bfi	r3, r0, #1, #1
    ba8c:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    ba90:	b002      	add	sp, #8
    ba92:	bd10      	pop	{r4, pc}
    ba94:	000161ba 	.word	0x000161ba
    ba98:	20003a5c 	.word	0x20003a5c
    ba9c:	000179e1 	.word	0x000179e1
    baa0:	00017a29 	.word	0x00017a29
    baa4:	0001987f 	.word	0x0001987f
    baa8:	0001a3f8 	.word	0x0001a3f8

0000baac <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    baac:	4b04      	ldr	r3, [pc, #16]	; (bac0 <ticker_job_disable+0x14>)
    baae:	7d1b      	ldrb	r3, [r3, #20]
    bab0:	b123      	cbz	r3, babc <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    bab2:	2101      	movs	r1, #1
    bab4:	2200      	movs	r2, #0
    bab6:	4608      	mov	r0, r1
    bab8:	f7fc b854 	b.w	7b64 <mayfly_enable>
    babc:	4770      	bx	lr
    babe:	bf00      	nop
    bac0:	200008c0 	.word	0x200008c0

0000bac4 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    bac4:	2806      	cmp	r0, #6
{
    bac6:	b510      	push	{r4, lr}
    bac8:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    baca:	d90a      	bls.n	bae2 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bacc:	4b09      	ldr	r3, [pc, #36]	; (baf4 <hdr_conn_get+0x30>)
    bace:	1fc2      	subs	r2, r0, #7
    bad0:	b292      	uxth	r2, r2
    bad2:	f44f 71aa 	mov.w	r1, #340	; 0x154
    bad6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    bada:	f7fb ffd5 	bl	7a88 <mem_get>
    bade:	6020      	str	r0, [r4, #0]
    bae0:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    bae2:	2805      	cmp	r0, #5
    bae4:	d004      	beq.n	baf0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    bae6:	2806      	cmp	r0, #6
	return NULL;
    bae8:	4803      	ldr	r0, [pc, #12]	; (baf8 <hdr_conn_get+0x34>)
    baea:	bf18      	it	ne
    baec:	2000      	movne	r0, #0
    baee:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    baf0:	4802      	ldr	r0, [pc, #8]	; (bafc <hdr_conn_get+0x38>)
}
    baf2:	bd10      	pop	{r4, pc}
    baf4:	200008c0 	.word	0x200008c0
    baf8:	20000990 	.word	0x20000990
    bafc:	200008d8 	.word	0x200008d8

0000bb00 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    bb00:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    bb02:	4b08      	ldr	r3, [pc, #32]	; (bb24 <event_stop.part.10+0x24>)
    bb04:	9301      	str	r3, [sp, #4]
    bb06:	9300      	str	r3, [sp, #0]
    bb08:	4b07      	ldr	r3, [pc, #28]	; (bb28 <event_stop.part.10+0x28>)
    bb0a:	4a08      	ldr	r2, [pc, #32]	; (bb2c <event_stop.part.10+0x2c>)
    bb0c:	681c      	ldr	r4, [r3, #0]
    bb0e:	4908      	ldr	r1, [pc, #32]	; (bb30 <event_stop.part.10+0x30>)
    bb10:	4b08      	ldr	r3, [pc, #32]	; (bb34 <event_stop.part.10+0x34>)
    bb12:	4809      	ldr	r0, [pc, #36]	; (bb38 <event_stop.part.10+0x38>)
    bb14:	47a0      	blx	r4
    bb16:	4040      	eors	r0, r0
    bb18:	f380 8811 	msr	BASEPRI, r0
    bb1c:	f04f 0004 	mov.w	r0, #4
    bb20:	df02      	svc	2
    bb22:	bf00      	nop
    bb24:	000161ba 	.word	0x000161ba
    bb28:	20003a5c 	.word	0x20003a5c
    bb2c:	000179e1 	.word	0x000179e1
    bb30:	00017a29 	.word	0x00017a29
    bb34:	000196a0 	.word	0x000196a0
    bb38:	0001a00d 	.word	0x0001a00d

0000bb3c <event_stop>:
	s_mfy_radio_stop.param = context;
    bb3c:	4a06      	ldr	r2, [pc, #24]	; (bb58 <event_stop+0x1c>)
{
    bb3e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    bb40:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bb42:	4613      	mov	r3, r2
    bb44:	2200      	movs	r2, #0
    bb46:	4611      	mov	r1, r2
    bb48:	4610      	mov	r0, r2
    bb4a:	f7fc f833 	bl	7bb4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    bb4e:	b108      	cbz	r0, bb54 <event_stop+0x18>
    bb50:	f7ff ffd6 	bl	bb00 <event_stop.part.10>
    bb54:	bd08      	pop	{r3, pc}
    bb56:	bf00      	nop
    bb58:	20003d68 	.word	0x20003d68

0000bb5c <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bb5c:	2200      	movs	r2, #0
{
    bb5e:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bb60:	4b0b      	ldr	r3, [pc, #44]	; (bb90 <event_active+0x34>)
    bb62:	4611      	mov	r1, r2
    bb64:	4610      	mov	r0, r2
    bb66:	f7fc f825 	bl	7bb4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    bb6a:	b178      	cbz	r0, bb8c <event_active+0x30>
    bb6c:	4b09      	ldr	r3, [pc, #36]	; (bb94 <event_active+0x38>)
    bb6e:	9301      	str	r3, [sp, #4]
    bb70:	9300      	str	r3, [sp, #0]
    bb72:	4b09      	ldr	r3, [pc, #36]	; (bb98 <event_active+0x3c>)
    bb74:	4a09      	ldr	r2, [pc, #36]	; (bb9c <event_active+0x40>)
    bb76:	681c      	ldr	r4, [r3, #0]
    bb78:	4909      	ldr	r1, [pc, #36]	; (bba0 <event_active+0x44>)
    bb7a:	4b0a      	ldr	r3, [pc, #40]	; (bba4 <event_active+0x48>)
    bb7c:	480a      	ldr	r0, [pc, #40]	; (bba8 <event_active+0x4c>)
    bb7e:	47a0      	blx	r4
    bb80:	4040      	eors	r0, r0
    bb82:	f380 8811 	msr	BASEPRI, r0
    bb86:	f04f 0004 	mov.w	r0, #4
    bb8a:	df02      	svc	2
}
    bb8c:	b002      	add	sp, #8
    bb8e:	bd10      	pop	{r4, pc}
    bb90:	20003d38 	.word	0x20003d38
    bb94:	000161ba 	.word	0x000161ba
    bb98:	20003a5c 	.word	0x20003a5c
    bb9c:	000179e1 	.word	0x000179e1
    bba0:	00017a29 	.word	0x00017a29
    bba4:	000195d0 	.word	0x000195d0
    bba8:	0001a00d 	.word	0x0001a00d

0000bbac <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bbac:	2200      	movs	r2, #0
{
    bbae:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bbb0:	4b0b      	ldr	r3, [pc, #44]	; (bbe0 <event_xtal+0x34>)
    bbb2:	4611      	mov	r1, r2
    bbb4:	4610      	mov	r0, r2
    bbb6:	f7fb fffd 	bl	7bb4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    bbba:	b178      	cbz	r0, bbdc <event_xtal+0x30>
    bbbc:	4b09      	ldr	r3, [pc, #36]	; (bbe4 <event_xtal+0x38>)
    bbbe:	9301      	str	r3, [sp, #4]
    bbc0:	9300      	str	r3, [sp, #0]
    bbc2:	4b09      	ldr	r3, [pc, #36]	; (bbe8 <event_xtal+0x3c>)
    bbc4:	4a09      	ldr	r2, [pc, #36]	; (bbec <event_xtal+0x40>)
    bbc6:	681c      	ldr	r4, [r3, #0]
    bbc8:	4909      	ldr	r1, [pc, #36]	; (bbf0 <event_xtal+0x44>)
    bbca:	4b0a      	ldr	r3, [pc, #40]	; (bbf4 <event_xtal+0x48>)
    bbcc:	480a      	ldr	r0, [pc, #40]	; (bbf8 <event_xtal+0x4c>)
    bbce:	47a0      	blx	r4
    bbd0:	4040      	eors	r0, r0
    bbd2:	f380 8811 	msr	BASEPRI, r0
    bbd6:	f04f 0004 	mov.w	r0, #4
    bbda:	df02      	svc	2
}
    bbdc:	b002      	add	sp, #8
    bbde:	bd10      	pop	{r4, pc}
    bbe0:	20003db8 	.word	0x20003db8
    bbe4:	000161ba 	.word	0x000161ba
    bbe8:	20003a5c 	.word	0x20003a5c
    bbec:	000179e1 	.word	0x000179e1
    bbf0:	00017a29 	.word	0x00017a29
    bbf4:	000195ec 	.word	0x000195ec
    bbf8:	0001a00d 	.word	0x0001a00d

0000bbfc <mayfly_radio_active>:
{
    bbfc:	b513      	push	{r0, r1, r4, lr}
    bbfe:	4a12      	ldr	r2, [pc, #72]	; (bc48 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    bc00:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    bc02:	b140      	cbz	r0, bc16 <mayfly_radio_active+0x1a>
		if (s_active++) {
    bc04:	1c59      	adds	r1, r3, #1
    bc06:	7011      	strb	r1, [r2, #0]
    bc08:	b9db      	cbnz	r3, bc42 <mayfly_radio_active+0x46>
		radio_active_callback(1);
    bc0a:	2001      	movs	r0, #1
}
    bc0c:	b002      	add	sp, #8
    bc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_active_callback(0);
    bc12:	f006 ba11 	b.w	12038 <radio_active_callback>
		LL_ASSERT(s_active);
    bc16:	b97b      	cbnz	r3, bc38 <mayfly_radio_active+0x3c>
    bc18:	4b0c      	ldr	r3, [pc, #48]	; (bc4c <mayfly_radio_active+0x50>)
    bc1a:	9301      	str	r3, [sp, #4]
    bc1c:	9300      	str	r3, [sp, #0]
    bc1e:	4b0c      	ldr	r3, [pc, #48]	; (bc50 <mayfly_radio_active+0x54>)
    bc20:	4a0c      	ldr	r2, [pc, #48]	; (bc54 <mayfly_radio_active+0x58>)
    bc22:	681c      	ldr	r4, [r3, #0]
    bc24:	490c      	ldr	r1, [pc, #48]	; (bc58 <mayfly_radio_active+0x5c>)
    bc26:	4b0d      	ldr	r3, [pc, #52]	; (bc5c <mayfly_radio_active+0x60>)
    bc28:	480d      	ldr	r0, [pc, #52]	; (bc60 <mayfly_radio_active+0x64>)
    bc2a:	47a0      	blx	r4
    bc2c:	4040      	eors	r0, r0
    bc2e:	f380 8811 	msr	BASEPRI, r0
    bc32:	f04f 0004 	mov.w	r0, #4
    bc36:	df02      	svc	2
		if (--s_active) {
    bc38:	3b01      	subs	r3, #1
    bc3a:	b2db      	uxtb	r3, r3
    bc3c:	7013      	strb	r3, [r2, #0]
    bc3e:	2b00      	cmp	r3, #0
    bc40:	d0e4      	beq.n	bc0c <mayfly_radio_active+0x10>
}
    bc42:	b002      	add	sp, #8
    bc44:	bd10      	pop	{r4, pc}
    bc46:	bf00      	nop
    bc48:	20000a64 	.word	0x20000a64
    bc4c:	000161ba 	.word	0x000161ba
    bc50:	20003a5c 	.word	0x20003a5c
    bc54:	000179e1 	.word	0x000179e1
    bc58:	00017a29 	.word	0x00017a29
    bc5c:	000195bc 	.word	0x000195bc
    bc60:	00019f62 	.word	0x00019f62

0000bc64 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    bc64:	2000      	movs	r0, #0
    bc66:	f7ff bfc9 	b.w	bbfc <mayfly_radio_active>
	...

0000bc6c <mayfly_radio_stop>:
{
    bc6c:	b513      	push	{r0, r1, r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    bc6e:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    bc70:	1f03      	subs	r3, r0, #4
    bc72:	2b01      	cmp	r3, #1
    bc74:	d90f      	bls.n	bc96 <mayfly_radio_stop+0x2a>
    bc76:	4b11      	ldr	r3, [pc, #68]	; (bcbc <mayfly_radio_stop+0x50>)
    bc78:	9301      	str	r3, [sp, #4]
    bc7a:	9300      	str	r3, [sp, #0]
    bc7c:	4b10      	ldr	r3, [pc, #64]	; (bcc0 <mayfly_radio_stop+0x54>)
    bc7e:	4a11      	ldr	r2, [pc, #68]	; (bcc4 <mayfly_radio_stop+0x58>)
    bc80:	681c      	ldr	r4, [r3, #0]
    bc82:	4911      	ldr	r1, [pc, #68]	; (bcc8 <mayfly_radio_stop+0x5c>)
    bc84:	4b11      	ldr	r3, [pc, #68]	; (bccc <mayfly_radio_stop+0x60>)
    bc86:	4812      	ldr	r0, [pc, #72]	; (bcd0 <mayfly_radio_stop+0x64>)
    bc88:	47a0      	blx	r4
    bc8a:	4040      	eors	r0, r0
    bc8c:	f380 8811 	msr	BASEPRI, r0
    bc90:	f04f 0004 	mov.w	r0, #4
    bc94:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    bc96:	4a0f      	ldr	r2, [pc, #60]	; (bcd4 <mayfly_radio_stop+0x68>)
    bc98:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    bc9a:	b143      	cbz	r3, bcae <mayfly_radio_stop+0x42>
	radio_used = ((_radio.state != STATE_NONE) &&
    bc9c:	3b04      	subs	r3, #4
    bc9e:	2b01      	cmp	r3, #1
    bca0:	d905      	bls.n	bcae <mayfly_radio_stop+0x42>
			_radio.state = state;
    bca2:	7510      	strb	r0, [r2, #20]
}
    bca4:	b002      	add	sp, #8
    bca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    bcaa:	f007 bbe9 	b.w	13480 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    bcae:	f007 fc19 	bl	134e4 <radio_is_idle>
    bcb2:	2800      	cmp	r0, #0
    bcb4:	d0f6      	beq.n	bca4 <mayfly_radio_stop+0x38>
}
    bcb6:	b002      	add	sp, #8
    bcb8:	bd10      	pop	{r4, pc}
    bcba:	bf00      	nop
    bcbc:	000161ba 	.word	0x000161ba
    bcc0:	20003a5c 	.word	0x20003a5c
    bcc4:	000179e1 	.word	0x000179e1
    bcc8:	00017a29 	.word	0x00017a29
    bccc:	0001968e 	.word	0x0001968e
    bcd0:	00019f8c 	.word	0x00019f8c
    bcd4:	200008c0 	.word	0x200008c0

0000bcd8 <pdu_node_tx_release>:
{
    bcd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    bcda:	4a18      	ldr	r2, [pc, #96]	; (bd3c <pdu_node_tx_release+0x64>)
    bcdc:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    bce0:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    bce4:	3301      	adds	r3, #1
    bce6:	b2db      	uxtb	r3, r3
		last = 0;
    bce8:	429c      	cmp	r4, r3
    bcea:	bf08      	it	eq
    bcec:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    bcee:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    bcf2:	429c      	cmp	r4, r3
    bcf4:	d10f      	bne.n	bd16 <pdu_node_tx_release+0x3e>
    bcf6:	4b12      	ldr	r3, [pc, #72]	; (bd40 <pdu_node_tx_release+0x68>)
    bcf8:	9301      	str	r3, [sp, #4]
    bcfa:	9300      	str	r3, [sp, #0]
    bcfc:	4b11      	ldr	r3, [pc, #68]	; (bd44 <pdu_node_tx_release+0x6c>)
    bcfe:	4a12      	ldr	r2, [pc, #72]	; (bd48 <pdu_node_tx_release+0x70>)
    bd00:	681c      	ldr	r4, [r3, #0]
    bd02:	4912      	ldr	r1, [pc, #72]	; (bd4c <pdu_node_tx_release+0x74>)
    bd04:	4b12      	ldr	r3, [pc, #72]	; (bd50 <pdu_node_tx_release+0x78>)
    bd06:	4813      	ldr	r0, [pc, #76]	; (bd54 <pdu_node_tx_release+0x7c>)
    bd08:	47a0      	blx	r4
    bd0a:	4040      	eors	r0, r0
    bd0c:	f380 8811 	msr	BASEPRI, r0
    bd10:	f04f 0004 	mov.w	r0, #4
    bd14:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    bd16:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    bd1a:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    bd1e:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    bd22:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    bd26:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    bd2a:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    bd2c:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    bd30:	b003      	add	sp, #12
    bd32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    bd36:	f006 b981 	b.w	1203c <radio_event_callback>
    bd3a:	bf00      	nop
    bd3c:	200008c0 	.word	0x200008c0
    bd40:	000161ba 	.word	0x000161ba
    bd44:	20003a5c 	.word	0x20003a5c
    bd48:	000179e1 	.word	0x000179e1
    bd4c:	00017a29 	.word	0x00017a29
    bd50:	000197d6 	.word	0x000197d6
    bd54:	0001a0dd 	.word	0x0001a0dd

0000bd58 <packet_tx_enqueue>:
{
    bd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    bd5c:	4c24      	ldr	r4, [pc, #144]	; (bdf0 <packet_tx_enqueue+0x98>)
{
    bd5e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    bd60:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    bd62:	b12e      	cbz	r6, bd70 <packet_tx_enqueue+0x18>
    bd64:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    bd68:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    bd6c:	429a      	cmp	r2, r3
    bd6e:	d101      	bne.n	bd74 <packet_tx_enqueue+0x1c>
    bd70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    bd74:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    bd78:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bd7c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    bd80:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    bd84:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bd88:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    bd8c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    bd8e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    bd90:	f7fb fe7a 	bl	7a88 <mem_get>
    bd94:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    bd96:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    bd9a:	8c1a      	ldrh	r2, [r3, #32]
    bd9c:	4282      	cmp	r2, r0
    bd9e:	d11f      	bne.n	bde0 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    bda0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    bda4:	b942      	cbnz	r2, bdb8 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    bda6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    bdaa:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    bdae:	b91a      	cbnz	r2, bdb8 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    bdb0:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    bdb4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    bdb8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    bdbc:	b102      	cbz	r2, bdc0 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    bdbe:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    bdc0:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    bdc4:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    bdc8:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    bdcc:	3301      	adds	r3, #1
    bdce:	b2db      	uxtb	r3, r3
			first = 0;
    bdd0:	429a      	cmp	r2, r3
    bdd2:	bf08      	it	eq
    bdd4:	2300      	moveq	r3, #0
    bdd6:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    bdd8:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    bddc:	b2f6      	uxtb	r6, r6
    bdde:	e7c0      	b.n	bd62 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    bde0:	792b      	ldrb	r3, [r5, #4]
    bde2:	f367 0301 	bfi	r3, r7, #0, #2
    bde6:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    bde8:	4629      	mov	r1, r5
    bdea:	f7ff ff75 	bl	bcd8 <pdu_node_tx_release>
    bdee:	e7e9      	b.n	bdc4 <packet_tx_enqueue+0x6c>
    bdf0:	200008c0 	.word	0x200008c0

0000bdf4 <connection_release>:
{
    bdf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    bdf6:	2201      	movs	r2, #1
{
    bdf8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    bdfa:	4611      	mov	r1, r2
    bdfc:	2000      	movs	r0, #0
    bdfe:	f7fb feb1 	bl	7b64 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    be02:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    be06:	2100      	movs	r1, #0
    be08:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    be0c:	3207      	adds	r2, #7
	ticker_status =
    be0e:	9300      	str	r3, [sp, #0]
    be10:	4608      	mov	r0, r1
    be12:	4b3f      	ldr	r3, [pc, #252]	; (bf10 <connection_release+0x11c>)
    be14:	b2d2      	uxtb	r2, r2
    be16:	f7fc fd2b 	bl	8870 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    be1a:	f030 0102 	bics.w	r1, r0, #2
    be1e:	d00f      	beq.n	be40 <connection_release+0x4c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    be20:	4b3c      	ldr	r3, [pc, #240]	; (bf14 <connection_release+0x120>)
    be22:	9301      	str	r3, [sp, #4]
    be24:	9300      	str	r3, [sp, #0]
    be26:	4b3c      	ldr	r3, [pc, #240]	; (bf18 <connection_release+0x124>)
    be28:	4a3c      	ldr	r2, [pc, #240]	; (bf1c <connection_release+0x128>)
    be2a:	681c      	ldr	r4, [r3, #0]
    be2c:	493c      	ldr	r1, [pc, #240]	; (bf20 <connection_release+0x12c>)
    be2e:	4b3d      	ldr	r3, [pc, #244]	; (bf24 <connection_release+0x130>)
    be30:	483d      	ldr	r0, [pc, #244]	; (bf28 <connection_release+0x134>)
    be32:	47a0      	blx	r4
    be34:	4040      	eors	r0, r0
    be36:	f380 8811 	msr	BASEPRI, r0
    be3a:	f04f 0004 	mov.w	r0, #4
    be3e:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    be40:	4b3a      	ldr	r3, [pc, #232]	; (bf2c <connection_release+0x138>)
    be42:	7d1a      	ldrb	r2, [r3, #20]
    be44:	2a05      	cmp	r2, #5
    be46:	461d      	mov	r5, r3
    be48:	d11b      	bne.n	be82 <connection_release+0x8e>
					  conn->handle))) {
    be4a:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    be4c:	7c18      	ldrb	r0, [r3, #16]
    be4e:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    be50:	4290      	cmp	r0, r2
    be52:	d116      	bne.n	be82 <connection_release+0x8e>
		_radio.ticker_id_prepare = 0;
    be54:	7419      	strb	r1, [r3, #16]
		ticker_status =
    be56:	f242 23fb 	movw	r3, #8955	; 0x22fb
    be5a:	9300      	str	r3, [sp, #0]
    be5c:	2201      	movs	r2, #1
    be5e:	4b2c      	ldr	r3, [pc, #176]	; (bf10 <connection_release+0x11c>)
    be60:	4608      	mov	r0, r1
    be62:	f7fc fd05 	bl	8870 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    be66:	f030 0202 	bics.w	r2, r0, #2
    be6a:	d1d9      	bne.n	be20 <connection_release+0x2c>
		ticker_status =
    be6c:	f242 3302 	movw	r3, #8962	; 0x2302
    be70:	9300      	str	r3, [sp, #0]
    be72:	4611      	mov	r1, r2
    be74:	4b26      	ldr	r3, [pc, #152]	; (bf10 <connection_release+0x11c>)
    be76:	4610      	mov	r0, r2
    be78:	f7fc fcfa 	bl	8870 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    be7c:	f030 0302 	bics.w	r3, r0, #2
    be80:	d1ce      	bne.n	be20 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    be82:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    be86:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    be8a:	4299      	cmp	r1, r3
    be8c:	d003      	beq.n	be96 <connection_release+0xa2>
    be8e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    be92:	4299      	cmp	r1, r3
    be94:	d101      	bne.n	be9a <connection_release+0xa6>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    be96:	4e26      	ldr	r6, [pc, #152]	; (bf30 <connection_release+0x13c>)
    be98:	e012      	b.n	bec0 <connection_release+0xcc>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    be9a:	790b      	ldrb	r3, [r1, #4]
    be9c:	f36f 0301 	bfc	r3, #0, #2
    bea0:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    bea2:	680b      	ldr	r3, [r1, #0]
    bea4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    bea8:	8c20      	ldrh	r0, [r4, #32]
    beaa:	f7ff ff15 	bl	bcd8 <pdu_node_tx_release>
    beae:	e7e8      	b.n	be82 <connection_release+0x8e>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    beb0:	6803      	ldr	r3, [r0, #0]
    beb2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    beb6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    beba:	4631      	mov	r1, r6
    bebc:	f7fb fdc9 	bl	7a52 <mem_release>
	while ((conn->pkt_tx_head) &&
    bec0:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    bec4:	b118      	cbz	r0, bece <connection_release+0xda>
    bec6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    beca:	4298      	cmp	r0, r3
    becc:	d1f0      	bne.n	beb0 <connection_release+0xbc>
	conn->pkt_tx_ctrl = NULL;
    bece:	2300      	movs	r3, #0
    bed0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    bed4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    bed8:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    bedc:	b951      	cbnz	r1, bef4 <connection_release+0x100>
	conn->handle = 0xffff;
    bede:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bee2:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    bee4:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    bee8:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    beea:	bf08      	it	eq
    beec:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    bef0:	b002      	add	sp, #8
    bef2:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    bef4:	790b      	ldrb	r3, [r1, #4]
    bef6:	f36f 0301 	bfc	r3, #0, #2
    befa:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    befc:	680b      	ldr	r3, [r1, #0]
    befe:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    bf02:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    bf06:	8c20      	ldrh	r0, [r4, #32]
    bf08:	f7ff fee6 	bl	bcd8 <pdu_node_tx_release>
    bf0c:	e7e4      	b.n	bed8 <connection_release+0xe4>
    bf0e:	bf00      	nop
    bf10:	0000b8a5 	.word	0x0000b8a5
    bf14:	000161ba 	.word	0x000161ba
    bf18:	20003a5c 	.word	0x20003a5c
    bf1c:	000179e1 	.word	0x000179e1
    bf20:	00017a29 	.word	0x00017a29
    bf24:	000197ea 	.word	0x000197ea
    bf28:	000198d3 	.word	0x000198d3
    bf2c:	200008c0 	.word	0x200008c0
    bf30:	20000a1c 	.word	0x20000a1c

0000bf34 <chan_set>:
	switch (chan) {
    bf34:	2826      	cmp	r0, #38	; 0x26
{
    bf36:	b513      	push	{r0, r1, r4, lr}
    bf38:	4604      	mov	r4, r0
	switch (chan) {
    bf3a:	d00c      	beq.n	bf56 <chan_set+0x22>
    bf3c:	2827      	cmp	r0, #39	; 0x27
    bf3e:	d00c      	beq.n	bf5a <chan_set+0x26>
    bf40:	2825      	cmp	r0, #37	; 0x25
    bf42:	d10c      	bne.n	bf5e <chan_set+0x2a>
		radio_freq_chan_set(2);
    bf44:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    bf46:	f007 fa17 	bl	13378 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    bf4a:	4620      	mov	r0, r4
}
    bf4c:	b002      	add	sp, #8
    bf4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    bf52:	f007 ba17 	b.w	13384 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    bf56:	201a      	movs	r0, #26
    bf58:	e7f5      	b.n	bf46 <chan_set+0x12>
		radio_freq_chan_set(80);
    bf5a:	2050      	movs	r0, #80	; 0x50
    bf5c:	e7f3      	b.n	bf46 <chan_set+0x12>
		if (chan < 11) {
    bf5e:	280a      	cmp	r0, #10
    bf60:	d802      	bhi.n	bf68 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    bf62:	3002      	adds	r0, #2
    bf64:	0040      	lsls	r0, r0, #1
    bf66:	e7ee      	b.n	bf46 <chan_set+0x12>
		} else if (chan < 40) {
    bf68:	2827      	cmp	r0, #39	; 0x27
    bf6a:	d801      	bhi.n	bf70 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    bf6c:	3003      	adds	r0, #3
    bf6e:	e7f9      	b.n	bf64 <chan_set+0x30>
			LL_ASSERT(0);
    bf70:	4b07      	ldr	r3, [pc, #28]	; (bf90 <chan_set+0x5c>)
    bf72:	9301      	str	r3, [sp, #4]
    bf74:	9300      	str	r3, [sp, #0]
    bf76:	4b07      	ldr	r3, [pc, #28]	; (bf94 <chan_set+0x60>)
    bf78:	4a07      	ldr	r2, [pc, #28]	; (bf98 <chan_set+0x64>)
    bf7a:	681c      	ldr	r4, [r3, #0]
    bf7c:	4907      	ldr	r1, [pc, #28]	; (bf9c <chan_set+0x68>)
    bf7e:	4b08      	ldr	r3, [pc, #32]	; (bfa0 <chan_set+0x6c>)
    bf80:	4808      	ldr	r0, [pc, #32]	; (bfa4 <chan_set+0x70>)
    bf82:	47a0      	blx	r4
    bf84:	4040      	eors	r0, r0
    bf86:	f380 8811 	msr	BASEPRI, r0
    bf8a:	f04f 0004 	mov.w	r0, #4
    bf8e:	df02      	svc	2
    bf90:	000161ba 	.word	0x000161ba
    bf94:	20003a5c 	.word	0x20003a5c
    bf98:	000179e1 	.word	0x000179e1
    bf9c:	00017a29 	.word	0x00017a29
    bfa0:	000196c0 	.word	0x000196c0
    bfa4:	00017955 	.word	0x00017955

0000bfa8 <adv_setup>:
{
    bfa8:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    bfaa:	4c31      	ldr	r4, [pc, #196]	; (c070 <adv_setup+0xc8>)
    bfac:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    bfb0:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    bfb4:	429a      	cmp	r2, r3
    bfb6:	d051      	beq.n	c05c <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    bfb8:	3301      	adds	r3, #1
    bfba:	b2db      	uxtb	r3, r3
			first = 0;
    bfbc:	2b02      	cmp	r3, #2
    bfbe:	bf08      	it	eq
    bfc0:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    bfc2:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    bfc6:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    bfc8:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    bfcc:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    bfd0:	4299      	cmp	r1, r3
    bfd2:	d007      	beq.n	bfe4 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    bfd4:	3301      	adds	r3, #1
    bfd6:	b2db      	uxtb	r3, r3
			first = 0;
    bfd8:	2b02      	cmp	r3, #2
    bfda:	bf08      	it	eq
    bfdc:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    bfde:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    bfe2:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    bfe4:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    bfe8:	2327      	movs	r3, #39	; 0x27
    bfea:	212b      	movs	r1, #43	; 0x2b
    bfec:	fb13 1505 	smlabb	r5, r3, r5, r1
    bff0:	1966      	adds	r6, r4, r5
	if (upd) {
    bff2:	b142      	cbz	r2, c006 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    bff4:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    bff8:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    bffc:	2206      	movs	r2, #6
    bffe:	1cb1      	adds	r1, r6, #2
    c000:	307d      	adds	r0, #125	; 0x7d
    c002:	f7f5 ff35 	bl	1e70 <memcpy>
	radio_pkt_tx_set(pdu);
    c006:	4630      	mov	r0, r6
    c008:	f007 fa1a 	bl	13440 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    c00c:	5d63      	ldrb	r3, [r4, r5]
    c00e:	f003 030f 	and.w	r3, r3, #15
    c012:	2b02      	cmp	r3, #2
    c014:	d024      	beq.n	c060 <adv_setup+0xb8>
    c016:	2b07      	cmp	r3, #7
    c018:	d022      	beq.n	c060 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    c01a:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    c01c:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    c01e:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    c020:	f007 fb24 	bl	1366c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    c024:	2000      	movs	r0, #0
    c026:	f007 fa85 	bl	13534 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    c02a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c02e:	f3c3 0202 	ubfx	r2, r3, #0, #3
    c032:	b2d3      	uxtb	r3, r2
    c034:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    c036:	2000      	movs	r0, #0
    c038:	07ce      	lsls	r6, r1, #31
    c03a:	f100 0501 	add.w	r5, r0, #1
    c03e:	d514      	bpl.n	c06a <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    c040:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    c042:	4013      	ands	r3, r2
    c044:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    c048:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    c04a:	f363 0202 	bfi	r2, r3, #0, #3
    c04e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    c052:	3025      	adds	r0, #37	; 0x25
}
    c054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    c058:	f7ff bf6c 	b.w	bf34 <chan_set>
	u8_t upd = 0;
    c05c:	2200      	movs	r2, #0
    c05e:	e7b3      	b.n	bfc8 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    c060:	2303      	movs	r3, #3
    c062:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    c064:	f007 fa7c 	bl	13560 <radio_switch_complete_and_disable>
    c068:	e7df      	b.n	c02a <adv_setup+0x82>
		bitmap >>= 1;
    c06a:	0849      	lsrs	r1, r1, #1
    c06c:	4628      	mov	r0, r5
    c06e:	e7e3      	b.n	c038 <adv_setup+0x90>
    c070:	200008c0 	.word	0x200008c0
    c074:	00000000 	.word	0x00000000

0000c078 <sched_after_mstr_free_offset_get>:
{
    c078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c07a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    c07c:	aa04      	add	r2, sp, #16
{
    c07e:	461c      	mov	r4, r3
    c080:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    c082:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    c086:	3127      	adds	r1, #39	; 0x27
    c088:	2001      	movs	r0, #1
    c08a:	f7ff fa29 	bl	b4e0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    c08e:	6823      	ldr	r3, [r4, #0]
    c090:	2b00      	cmp	r3, #0
    c092:	d02d      	beq.n	c0f0 <sched_after_mstr_free_offset_get+0x78>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    c094:	9803      	ldr	r0, [sp, #12]
    c096:	1b83      	subs	r3, r0, r6
    c098:	021b      	lsls	r3, r3, #8
    c09a:	d50f      	bpl.n	c0bc <sched_after_mstr_free_offset_get+0x44>
    c09c:	4b1a      	ldr	r3, [pc, #104]	; (c108 <sched_after_mstr_free_offset_get+0x90>)
    c09e:	9301      	str	r3, [sp, #4]
    c0a0:	9300      	str	r3, [sp, #0]
    c0a2:	4b1a      	ldr	r3, [pc, #104]	; (c10c <sched_after_mstr_free_offset_get+0x94>)
    c0a4:	4a1a      	ldr	r2, [pc, #104]	; (c110 <sched_after_mstr_free_offset_get+0x98>)
    c0a6:	681c      	ldr	r4, [r3, #0]
    c0a8:	491a      	ldr	r1, [pc, #104]	; (c114 <sched_after_mstr_free_offset_get+0x9c>)
    c0aa:	4b1b      	ldr	r3, [pc, #108]	; (c118 <sched_after_mstr_free_offset_get+0xa0>)
    c0ac:	481b      	ldr	r0, [pc, #108]	; (c11c <sched_after_mstr_free_offset_get+0xa4>)
    c0ae:	47a0      	blx	r4
    c0b0:	4040      	eors	r0, r0
    c0b2:	f380 8811 	msr	BASEPRI, r0
    c0b6:	f04f 0004 	mov.w	r0, #4
    c0ba:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    c0bc:	4631      	mov	r1, r6
    c0be:	f7fc fca9 	bl	8a14 <ticker_ticks_diff_get>
    c0c2:	4602      	mov	r2, r0
    c0c4:	4816      	ldr	r0, [pc, #88]	; (c120 <sched_after_mstr_free_offset_get+0xa8>)
    c0c6:	2307      	movs	r3, #7
    c0c8:	fba2 0100 	umull	r0, r1, r2, r0
    c0cc:	fb03 1102 	mla	r1, r3, r2, r1
    c0d0:	a30b      	add	r3, pc, #44	; (adr r3, c100 <sched_after_mstr_free_offset_get+0x88>)
    c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c0d6:	f7f4 f89d 	bl	214 <__aeabi_uldivmod>
    c0da:	6823      	ldr	r3, [r4, #0]
    c0dc:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    c0de:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    c0e0:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    c0e2:	db05      	blt.n	c0f0 <sched_after_mstr_free_offset_get+0x78>
		u32_t conn_interval_us = conn_interval * 1250;
    c0e4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c0e8:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    c0ea:	6823      	ldr	r3, [r4, #0]
    c0ec:	4298      	cmp	r0, r3
    c0ee:	d301      	bcc.n	c0f4 <sched_after_mstr_free_offset_get+0x7c>
}
    c0f0:	b004      	add	sp, #16
    c0f2:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    c0f4:	1a1b      	subs	r3, r3, r0
    c0f6:	6023      	str	r3, [r4, #0]
    c0f8:	e7f7      	b.n	c0ea <sched_after_mstr_free_offset_get+0x72>
    c0fa:	bf00      	nop
    c0fc:	f3af 8000 	nop.w
    c100:	3b9aca00 	.word	0x3b9aca00
    c104:	00000000 	.word	0x00000000
    c108:	000161ba 	.word	0x000161ba
    c10c:	20003a5c 	.word	0x20003a5c
    c110:	000179e1 	.word	0x000179e1
    c114:	00017a29 	.word	0x00017a29
    c118:	00019652 	.word	0x00019652
    c11c:	0001a339 	.word	0x0001a339
    c120:	1afd498d 	.word	0x1afd498d

0000c124 <mayfly_sched_win_offset_use>:
{
    c124:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    c126:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    c12a:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    c12c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    c130:	68c1      	ldr	r1, [r0, #12]
    c132:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    c134:	f7ff ffa0 	bl	c078 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c138:	a902      	add	r1, sp, #8
    c13a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c13e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c142:	f240 42e2 	movw	r2, #1250	; 0x4e2
    c146:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c14a:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c14c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    c150:	f7f5 fe8e 	bl	1e70 <memcpy>
}
    c154:	b002      	add	sp, #8
    c156:	bd10      	pop	{r4, pc}

0000c158 <mayfly_sched_after_mstr_free_offset_get>:
{
    c158:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    c15a:	4c05      	ldr	r4, [pc, #20]	; (c170 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    c15c:	4602      	mov	r2, r0
    c15e:	f504 7382 	add.w	r3, r4, #260	; 0x104
    c162:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    c166:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    c16a:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    c16c:	f7ff bf84 	b.w	c078 <sched_after_mstr_free_offset_get>
    c170:	200008c0 	.word	0x200008c0

0000c174 <terminate_ind_rx_enqueue>:
{
    c174:	b513      	push	{r0, r1, r4, lr}
    c176:	4603      	mov	r3, r0
    c178:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    c17a:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    c17e:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    c182:	b978      	cbnz	r0, c1a4 <terminate_ind_rx_enqueue+0x30>
    c184:	4b18      	ldr	r3, [pc, #96]	; (c1e8 <terminate_ind_rx_enqueue+0x74>)
    c186:	9301      	str	r3, [sp, #4]
    c188:	9300      	str	r3, [sp, #0]
    c18a:	4b18      	ldr	r3, [pc, #96]	; (c1ec <terminate_ind_rx_enqueue+0x78>)
    c18c:	4a18      	ldr	r2, [pc, #96]	; (c1f0 <terminate_ind_rx_enqueue+0x7c>)
    c18e:	681c      	ldr	r4, [r3, #0]
    c190:	4918      	ldr	r1, [pc, #96]	; (c1f4 <terminate_ind_rx_enqueue+0x80>)
    c192:	4b19      	ldr	r3, [pc, #100]	; (c1f8 <terminate_ind_rx_enqueue+0x84>)
    c194:	4819      	ldr	r0, [pc, #100]	; (c1fc <terminate_ind_rx_enqueue+0x88>)
	LL_ASSERT(link);
    c196:	47a0      	blx	r4
    c198:	4040      	eors	r0, r0
    c19a:	f380 8811 	msr	BASEPRI, r0
    c19e:	f04f 0004 	mov.w	r0, #4
    c1a2:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    c1a4:	8c1c      	ldrh	r4, [r3, #32]
    c1a6:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    c1aa:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c1ae:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    c1b0:	4a13      	ldr	r2, [pc, #76]	; (c200 <terminate_ind_rx_enqueue+0x8c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c1b2:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    c1b6:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    c1ba:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    c1be:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    c1c2:	f7fb fc86 	bl	7ad2 <memq_enqueue>
	LL_ASSERT(link);
    c1c6:	b948      	cbnz	r0, c1dc <terminate_ind_rx_enqueue+0x68>
    c1c8:	4b07      	ldr	r3, [pc, #28]	; (c1e8 <terminate_ind_rx_enqueue+0x74>)
    c1ca:	9301      	str	r3, [sp, #4]
    c1cc:	9300      	str	r3, [sp, #0]
    c1ce:	4b07      	ldr	r3, [pc, #28]	; (c1ec <terminate_ind_rx_enqueue+0x78>)
    c1d0:	4a07      	ldr	r2, [pc, #28]	; (c1f0 <terminate_ind_rx_enqueue+0x7c>)
    c1d2:	681c      	ldr	r4, [r3, #0]
    c1d4:	4907      	ldr	r1, [pc, #28]	; (c1f4 <terminate_ind_rx_enqueue+0x80>)
    c1d6:	4b08      	ldr	r3, [pc, #32]	; (c1f8 <terminate_ind_rx_enqueue+0x84>)
    c1d8:	480a      	ldr	r0, [pc, #40]	; (c204 <terminate_ind_rx_enqueue+0x90>)
    c1da:	e7dc      	b.n	c196 <terminate_ind_rx_enqueue+0x22>
}
    c1dc:	b002      	add	sp, #8
    c1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    c1e2:	f005 bf2b 	b.w	1203c <radio_event_callback>
    c1e6:	bf00      	nop
    c1e8:	000161ba 	.word	0x000161ba
    c1ec:	20003a5c 	.word	0x20003a5c
    c1f0:	000179e1 	.word	0x000179e1
    c1f4:	00017a29 	.word	0x00017a29
    c1f8:	000197fd 	.word	0x000197fd
    c1fc:	0001a3bf 	.word	0x0001a3bf
    c200:	200008c0 	.word	0x200008c0
    c204:	000198ad 	.word	0x000198ad

0000c208 <prepare_normal_set>:
{
    c208:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    c20a:	6804      	ldr	r4, [r0, #0]
    c20c:	2c00      	cmp	r4, #0
{
    c20e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    c210:	da27      	bge.n	c262 <prepare_normal_set+0x5a>
		u32_t ticks_prepare_to_start =
    c212:	6843      	ldr	r3, [r0, #4]
    c214:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    c216:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    c218:	429d      	cmp	r5, r3
    c21a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    c21e:	bf34      	ite	cc
    c220:	1ae4      	subcc	r4, r4, r3
    c222:	1b64      	subcs	r4, r4, r5
		ticker_status =
    c224:	4b10      	ldr	r3, [pc, #64]	; (c268 <prepare_normal_set+0x60>)
    c226:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c228:	b2a4      	uxth	r4, r4
		ticker_status =
    c22a:	2300      	movs	r3, #0
    c22c:	9304      	str	r3, [sp, #16]
    c22e:	9303      	str	r3, [sp, #12]
    c230:	9302      	str	r3, [sp, #8]
    c232:	4618      	mov	r0, r3
    c234:	9401      	str	r4, [sp, #4]
    c236:	9400      	str	r4, [sp, #0]
    c238:	f7fc facc 	bl	87d4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c23c:	f030 0302 	bics.w	r3, r0, #2
    c240:	d00f      	beq.n	c262 <prepare_normal_set+0x5a>
    c242:	4b0a      	ldr	r3, [pc, #40]	; (c26c <prepare_normal_set+0x64>)
    c244:	9301      	str	r3, [sp, #4]
    c246:	9300      	str	r3, [sp, #0]
    c248:	4b09      	ldr	r3, [pc, #36]	; (c270 <prepare_normal_set+0x68>)
    c24a:	4a0a      	ldr	r2, [pc, #40]	; (c274 <prepare_normal_set+0x6c>)
    c24c:	681c      	ldr	r4, [r3, #0]
    c24e:	490a      	ldr	r1, [pc, #40]	; (c278 <prepare_normal_set+0x70>)
    c250:	4b0a      	ldr	r3, [pc, #40]	; (c27c <prepare_normal_set+0x74>)
    c252:	480b      	ldr	r0, [pc, #44]	; (c280 <prepare_normal_set+0x78>)
    c254:	47a0      	blx	r4
    c256:	4040      	eors	r0, r0
    c258:	f380 8811 	msr	BASEPRI, r0
    c25c:	f04f 0004 	mov.w	r0, #4
    c260:	df02      	svc	2
}
    c262:	b009      	add	sp, #36	; 0x24
    c264:	bd30      	pop	{r4, r5, pc}
    c266:	bf00      	nop
    c268:	0000a8d5 	.word	0x0000a8d5
    c26c:	000161ba 	.word	0x000161ba
    c270:	20003a5c 	.word	0x20003a5c
    c274:	000179e1 	.word	0x000179e1
    c278:	00017a29 	.word	0x00017a29
    c27c:	0001960a 	.word	0x0001960a
    c280:	000198d3 	.word	0x000198d3
    c284:	00000000 	.word	0x00000000

0000c288 <mayfly_xtal_stop_calc>:
{
    c288:	b570      	push	{r4, r5, r6, lr}
    c28a:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c28c:	2302      	movs	r3, #2
    c28e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    c290:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    c292:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c294:	4e82      	ldr	r6, [pc, #520]	; (c4a0 <mayfly_xtal_stop_calc+0x218>)
				    _radio.connection_count));
    c296:	4d83      	ldr	r5, [pc, #524]	; (c4a4 <mayfly_xtal_stop_calc+0x21c>)
	struct connection *conn_curr = NULL;
    c298:	930a      	str	r3, [sp, #40]	; 0x28
{
    c29a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    c29c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    c29e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    c2a2:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2a4:	ab09      	add	r3, sp, #36	; 0x24
    c2a6:	9302      	str	r3, [sp, #8]
    c2a8:	ab0c      	add	r3, sp, #48	; 0x30
    c2aa:	9300      	str	r3, [sp, #0]
    c2ac:	9601      	str	r6, [sp, #4]
    c2ae:	ab0d      	add	r3, sp, #52	; 0x34
    c2b0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    c2b4:	2101      	movs	r1, #1
    c2b6:	2000      	movs	r0, #0
    c2b8:	f7fc fb16 	bl	88e8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    c2bc:	2802      	cmp	r0, #2
    c2be:	d015      	beq.n	c2ec <mayfly_xtal_stop_calc+0x64>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    c2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c2c2:	b1bb      	cbz	r3, c2f4 <mayfly_xtal_stop_calc+0x6c>
    c2c4:	4b78      	ldr	r3, [pc, #480]	; (c4a8 <mayfly_xtal_stop_calc+0x220>)
    c2c6:	9301      	str	r3, [sp, #4]
    c2c8:	9300      	str	r3, [sp, #0]
    c2ca:	4b78      	ldr	r3, [pc, #480]	; (c4ac <mayfly_xtal_stop_calc+0x224>)
    c2cc:	4a78      	ldr	r2, [pc, #480]	; (c4b0 <mayfly_xtal_stop_calc+0x228>)
    c2ce:	681c      	ldr	r4, [r3, #0]
    c2d0:	4978      	ldr	r1, [pc, #480]	; (c4b4 <mayfly_xtal_stop_calc+0x22c>)
    c2d2:	4b79      	ldr	r3, [pc, #484]	; (c4b8 <mayfly_xtal_stop_calc+0x230>)
    c2d4:	4879      	ldr	r0, [pc, #484]	; (c4bc <mayfly_xtal_stop_calc+0x234>)
	LL_ASSERT(hdr_curr);
    c2d6:	47a0      	blx	r4
    c2d8:	4040      	eors	r0, r0
    c2da:	f380 8811 	msr	BASEPRI, r0
    c2de:	f04f 0004 	mov.w	r0, #4
    c2e2:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2e4:	2101      	movs	r1, #1
    c2e6:	2000      	movs	r0, #0
    c2e8:	f7fc fb7c 	bl	89e4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    c2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c2ee:	2b02      	cmp	r3, #2
    c2f0:	d0f8      	beq.n	c2e4 <mayfly_xtal_stop_calc+0x5c>
    c2f2:	e7e5      	b.n	c2c0 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    c2f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    c2f8:	2bff      	cmp	r3, #255	; 0xff
    c2fa:	d004      	beq.n	c306 <mayfly_xtal_stop_calc+0x7e>
    c2fc:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c300:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    c302:	4293      	cmp	r3, r2
    c304:	dace      	bge.n	c2a4 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    c306:	1f5a      	subs	r2, r3, #5
    c308:	b2d2      	uxtb	r2, r2
    c30a:	2af9      	cmp	r2, #249	; 0xf9
    c30c:	d805      	bhi.n	c31a <mayfly_xtal_stop_calc+0x92>
				_radio.connection_count))) {
    c30e:	4a65      	ldr	r2, [pc, #404]	; (c4a4 <mayfly_xtal_stop_calc+0x21c>)
    c310:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    c314:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    c316:	4293      	cmp	r3, r2
    c318:	db05      	blt.n	c326 <mayfly_xtal_stop_calc+0x9e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    c31a:	2100      	movs	r1, #0
    c31c:	2001      	movs	r0, #1
    c31e:	f7fe fe3f 	bl	afa0 <mayfly_xtal_retain>
}
    c322:	b00e      	add	sp, #56	; 0x38
    c324:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    c326:	a90a      	add	r1, sp, #40	; 0x28
    c328:	b2e0      	uxtb	r0, r4
    c32a:	f7ff fbcb 	bl	bac4 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    c32e:	b948      	cbnz	r0, c344 <mayfly_xtal_stop_calc+0xbc>
    c330:	4b5d      	ldr	r3, [pc, #372]	; (c4a8 <mayfly_xtal_stop_calc+0x220>)
    c332:	9301      	str	r3, [sp, #4]
    c334:	9300      	str	r3, [sp, #0]
    c336:	4b5d      	ldr	r3, [pc, #372]	; (c4ac <mayfly_xtal_stop_calc+0x224>)
    c338:	4a5d      	ldr	r2, [pc, #372]	; (c4b0 <mayfly_xtal_stop_calc+0x228>)
    c33a:	681c      	ldr	r4, [r3, #0]
    c33c:	495d      	ldr	r1, [pc, #372]	; (c4b4 <mayfly_xtal_stop_calc+0x22c>)
    c33e:	4b5e      	ldr	r3, [pc, #376]	; (c4b8 <mayfly_xtal_stop_calc+0x230>)
    c340:	485f      	ldr	r0, [pc, #380]	; (c4c0 <mayfly_xtal_stop_calc+0x238>)
    c342:	e7c8      	b.n	c2d6 <mayfly_xtal_stop_calc+0x4e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    c344:	6803      	ldr	r3, [r0, #0]
    c346:	6844      	ldr	r4, [r0, #4]
    c348:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    c34a:	bfb8      	it	lt
    c34c:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    c34e:	429c      	cmp	r4, r3
    c350:	bf38      	it	cc
    c352:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    c354:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    c356:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    c35a:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    c35c:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    c35e:	f7ff fbb1 	bl	bac4 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    c362:	4605      	mov	r5, r0
    c364:	b948      	cbnz	r0, c37a <mayfly_xtal_stop_calc+0xf2>
    c366:	4b50      	ldr	r3, [pc, #320]	; (c4a8 <mayfly_xtal_stop_calc+0x220>)
    c368:	9301      	str	r3, [sp, #4]
    c36a:	9300      	str	r3, [sp, #0]
    c36c:	4b4f      	ldr	r3, [pc, #316]	; (c4ac <mayfly_xtal_stop_calc+0x224>)
    c36e:	4a50      	ldr	r2, [pc, #320]	; (c4b0 <mayfly_xtal_stop_calc+0x228>)
    c370:	681c      	ldr	r4, [r3, #0]
    c372:	4950      	ldr	r1, [pc, #320]	; (c4b4 <mayfly_xtal_stop_calc+0x22c>)
    c374:	4b50      	ldr	r3, [pc, #320]	; (c4b8 <mayfly_xtal_stop_calc+0x230>)
    c376:	4853      	ldr	r0, [pc, #332]	; (c4c4 <mayfly_xtal_stop_calc+0x23c>)
    c378:	e7ad      	b.n	c2d6 <mayfly_xtal_stop_calc+0x4e>
	ticks_prepare_to_start_next =
    c37a:	6886      	ldr	r6, [r0, #8]
    c37c:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    c37e:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    c380:	429e      	cmp	r6, r3
    c382:	bf38      	it	cc
    c384:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    c386:	2a00      	cmp	r2, #0
    c388:	da05      	bge.n	c396 <mayfly_xtal_stop_calc+0x10e>
		ticks_to_expire -=
    c38a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    c38c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    c390:	4433      	add	r3, r6
    c392:	1a9b      	subs	r3, r3, r2
    c394:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    c396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    c398:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    c39c:	4293      	cmp	r3, r2
    c39e:	d20a      	bcs.n	c3b6 <mayfly_xtal_stop_calc+0x12e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    c3a0:	2100      	movs	r1, #0
    c3a2:	2001      	movs	r0, #1
    c3a4:	f7fe fdfc 	bl	afa0 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    c3a8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c3ac:	2101      	movs	r1, #1
    c3ae:	4628      	mov	r0, r5
    c3b0:	f7ff ff2a 	bl	c208 <prepare_normal_set>
    c3b4:	e7b5      	b.n	c322 <mayfly_xtal_stop_calc+0x9a>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    c3b6:	2101      	movs	r1, #1
    c3b8:	4608      	mov	r0, r1
    c3ba:	f7fe fdf1 	bl	afa0 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    c3be:	682b      	ldr	r3, [r5, #0]
    c3c0:	2b00      	cmp	r3, #0
    c3c2:	db1e      	blt.n	c402 <mayfly_xtal_stop_calc+0x17a>
    c3c4:	429e      	cmp	r6, r3
    c3c6:	d21c      	bcs.n	c402 <mayfly_xtal_stop_calc+0x17a>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    c3c8:	1b9b      	subs	r3, r3, r6
			ticker_status =
    c3ca:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c3cc:	b29b      	uxth	r3, r3
			ticker_status =
    c3ce:	493e      	ldr	r1, [pc, #248]	; (c4c8 <mayfly_xtal_stop_calc+0x240>)
    c3d0:	9105      	str	r1, [sp, #20]
    c3d2:	9302      	str	r3, [sp, #8]
    c3d4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c3d8:	9506      	str	r5, [sp, #24]
    c3da:	9004      	str	r0, [sp, #16]
    c3dc:	9003      	str	r0, [sp, #12]
    c3de:	9001      	str	r0, [sp, #4]
    c3e0:	9000      	str	r0, [sp, #0]
    c3e2:	2101      	movs	r1, #1
    c3e4:	f7fc f9f6 	bl	87d4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c3e8:	f030 0302 	bics.w	r3, r0, #2
    c3ec:	d009      	beq.n	c402 <mayfly_xtal_stop_calc+0x17a>
    c3ee:	4b2e      	ldr	r3, [pc, #184]	; (c4a8 <mayfly_xtal_stop_calc+0x220>)
    c3f0:	9301      	str	r3, [sp, #4]
    c3f2:	9300      	str	r3, [sp, #0]
    c3f4:	4b2d      	ldr	r3, [pc, #180]	; (c4ac <mayfly_xtal_stop_calc+0x224>)
    c3f6:	4a2e      	ldr	r2, [pc, #184]	; (c4b0 <mayfly_xtal_stop_calc+0x228>)
    c3f8:	681c      	ldr	r4, [r3, #0]
    c3fa:	492e      	ldr	r1, [pc, #184]	; (c4b4 <mayfly_xtal_stop_calc+0x22c>)
    c3fc:	4b2e      	ldr	r3, [pc, #184]	; (c4b8 <mayfly_xtal_stop_calc+0x230>)
    c3fe:	4833      	ldr	r0, [pc, #204]	; (c4cc <mayfly_xtal_stop_calc+0x244>)
    c400:	e769      	b.n	c2d6 <mayfly_xtal_stop_calc+0x4e>
		if (!conn_curr || !conn_next) {
    c402:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c404:	2e00      	cmp	r6, #0
    c406:	d08c      	beq.n	c322 <mayfly_xtal_stop_calc+0x9a>
    c408:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c40a:	2d00      	cmp	r5, #0
    c40c:	d089      	beq.n	c322 <mayfly_xtal_stop_calc+0x9a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    c40e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    c410:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    c412:	429a      	cmp	r2, r3
    c414:	d185      	bne.n	c322 <mayfly_xtal_stop_calc+0x9a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    c416:	482e      	ldr	r0, [pc, #184]	; (c4d0 <mayfly_xtal_stop_calc+0x248>)
    c418:	b292      	uxth	r2, r2
    c41a:	fba2 0100 	umull	r0, r1, r2, r0
    c41e:	f240 1323 	movw	r3, #291	; 0x123
    c422:	fb03 1102 	mla	r1, r3, r2, r1
    c426:	a31c      	add	r3, pc, #112	; (adr r3, c498 <mayfly_xtal_stop_calc+0x210>)
    c428:	e9d3 2300 	ldrd	r2, r3, [r3]
    c42c:	f7f3 fef2 	bl	214 <__aeabi_uldivmod>
    c430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c432:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    c436:	2200      	movs	r2, #0
    c438:	4298      	cmp	r0, r3
    c43a:	d318      	bcc.n	c46e <mayfly_xtal_stop_calc+0x1e6>
    c43c:	b102      	cbz	r2, c440 <mayfly_xtal_stop_calc+0x1b8>
    c43e:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    c440:	f996 201d 	ldrsb.w	r2, [r6, #29]
    c444:	2a00      	cmp	r2, #0
    c446:	f995 201d 	ldrsb.w	r2, [r5, #29]
    c44a:	da13      	bge.n	c474 <mayfly_xtal_stop_calc+0x1ec>
    c44c:	2a00      	cmp	r2, #0
    c44e:	f6ff af68 	blt.w	c322 <mayfly_xtal_stop_calc+0x9a>
			     (ticks_slot_abs +
    c452:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    c454:	429c      	cmp	r4, r3
    c456:	f67f af64 	bls.w	c322 <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_curr);
    c45a:	4630      	mov	r0, r6
    c45c:	f7fe fa84 	bl	a968 <conn_update_req>
				if (status == 2) {
    c460:	2802      	cmp	r0, #2
    c462:	f47f af5e 	bne.w	c322 <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_next);
    c466:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    c468:	f7fe fa7e 	bl	a968 <conn_update_req>
    c46c:	e759      	b.n	c322 <mayfly_xtal_stop_calc+0x9a>
				ticks_to_expire -= ticks_conn_interval;
    c46e:	1a1b      	subs	r3, r3, r0
    c470:	2201      	movs	r2, #1
    c472:	e7e1      	b.n	c438 <mayfly_xtal_stop_calc+0x1b0>
			} else if (!conn_curr->role && conn_next->role &&
    c474:	2a00      	cmp	r2, #0
    c476:	f6bf af54 	bge.w	c322 <mayfly_xtal_stop_calc+0x9a>
				    (ticks_slot_abs +
    c47a:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    c47c:	429c      	cmp	r4, r3
    c47e:	f67f af50 	bls.w	c322 <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_next);
    c482:	4628      	mov	r0, r5
    c484:	f7fe fa70 	bl	a968 <conn_update_req>
				if (status == 2) {
    c488:	2802      	cmp	r0, #2
    c48a:	f47f af4a 	bne.w	c322 <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_curr);
    c48e:	980a      	ldr	r0, [sp, #40]	; 0x28
    c490:	e7ea      	b.n	c468 <mayfly_xtal_stop_calc+0x1e0>
    c492:	bf00      	nop
    c494:	f3af 8000 	nop.w
    c498:	1afd498d 	.word	0x1afd498d
    c49c:	00000007 	.word	0x00000007
    c4a0:	0000a8c5 	.word	0x0000a8c5
    c4a4:	200008c0 	.word	0x200008c0
    c4a8:	000161ba 	.word	0x000161ba
    c4ac:	20003a5c 	.word	0x20003a5c
    c4b0:	000179e1 	.word	0x000179e1
    c4b4:	00017a29 	.word	0x00017a29
    c4b8:	0001961d 	.word	0x0001961d
    c4bc:	0001a392 	.word	0x0001a392
    c4c0:	0001a036 	.word	0x0001a036
    c4c4:	0001a060 	.word	0x0001a060
    c4c8:	0000a8c9 	.word	0x0000a8c9
    c4cc:	000198d3 	.word	0x000198d3
    c4d0:	09ce5400 	.word	0x09ce5400

0000c4d4 <preempt_calc>:
{
    c4d4:	b570      	push	{r4, r5, r6, lr}
    c4d6:	4614      	mov	r4, r2
    c4d8:	460e      	mov	r6, r1
    c4da:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    c4dc:	f7fc fa98 	bl	8a10 <ticker_ticks_now_get>
	u32_t diff =
    c4e0:	4621      	mov	r1, r4
    c4e2:	f7fc fa97 	bl	8a14 <ticker_ticks_diff_get>
	diff += 3;
    c4e6:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    c4e8:	2c09      	cmp	r4, #9
    c4ea:	d90f      	bls.n	c50c <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    c4ec:	2100      	movs	r1, #0
    c4ee:	4608      	mov	r0, r1
    c4f0:	f7fe fd56 	bl	afa0 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    c4f4:	4632      	mov	r2, r6
    c4f6:	2100      	movs	r1, #0
    c4f8:	4628      	mov	r0, r5
    c4fa:	f7ff fe85 	bl	c208 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    c4fe:	68ab      	ldr	r3, [r5, #8]
    c500:	441c      	add	r4, r3
		if (diff <
    c502:	2c26      	cmp	r4, #38	; 0x26
    c504:	d800      	bhi.n	c508 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    c506:	60ac      	str	r4, [r5, #8]
		return 1;
    c508:	2001      	movs	r0, #1
}
    c50a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    c50c:	2000      	movs	r0, #0
    c50e:	bd70      	pop	{r4, r5, r6, pc}

0000c510 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    c510:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    c512:	ad02      	add	r5, sp, #8
    c514:	4b10      	ldr	r3, [pc, #64]	; (c558 <adv_scan_configure.constprop.30+0x48>)
    c516:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    c51a:	4604      	mov	r4, r0
	radio_reset();
    c51c:	f006 fefc 	bl	13318 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    c520:	2000      	movs	r0, #0
    c522:	f006 ff23 	bl	1336c <radio_tx_power_set>
	radio_isr_set(isr);
    c526:	480d      	ldr	r0, [pc, #52]	; (c55c <adv_scan_configure.constprop.30+0x4c>)
    c528:	f006 fec0 	bl	132ac <radio_isr_set>
	radio_phy_set(phy, flags);
    c52c:	2101      	movs	r1, #1
    c52e:	4620      	mov	r0, r4
    c530:	f006 ff0c 	bl	1334c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    c534:	4628      	mov	r0, r5
    c536:	f006 ff37 	bl	133a8 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    c53a:	0062      	lsls	r2, r4, #1
    c53c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    c540:	2125      	movs	r1, #37	; 0x25
    c542:	2008      	movs	r0, #8
    c544:	f006 ff48 	bl	133d8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c548:	4905      	ldr	r1, [pc, #20]	; (c560 <adv_scan_configure.constprop.30+0x50>)
    c54a:	f240 605b 	movw	r0, #1627	; 0x65b
    c54e:	f006 ffd3 	bl	134f8 <radio_crc_configure>
}
    c552:	b003      	add	sp, #12
    c554:	bd30      	pop	{r4, r5, pc}
    c556:	bf00      	nop
    c558:	8e89bed6 	.word	0x8e89bed6
    c55c:	0000f589 	.word	0x0000f589
    c560:	00555555 	.word	0x00555555

0000c564 <event_scan>:
{
    c564:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    c566:	4b64      	ldr	r3, [pc, #400]	; (c6f8 <event_scan+0x194>)
    c568:	7cda      	ldrb	r2, [r3, #19]
{
    c56a:	b08d      	sub	sp, #52	; 0x34
    c56c:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    c56e:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    c572:	461c      	mov	r4, r3
    c574:	b17a      	cbz	r2, c596 <event_scan+0x32>
    c576:	4b61      	ldr	r3, [pc, #388]	; (c6fc <event_scan+0x198>)
    c578:	9301      	str	r3, [sp, #4]
    c57a:	9300      	str	r3, [sp, #0]
    c57c:	4b60      	ldr	r3, [pc, #384]	; (c700 <event_scan+0x19c>)
    c57e:	4a61      	ldr	r2, [pc, #388]	; (c704 <event_scan+0x1a0>)
    c580:	681c      	ldr	r4, [r3, #0]
    c582:	4961      	ldr	r1, [pc, #388]	; (c708 <event_scan+0x1a4>)
    c584:	4b61      	ldr	r3, [pc, #388]	; (c70c <event_scan+0x1a8>)
    c586:	4862      	ldr	r0, [pc, #392]	; (c710 <event_scan+0x1ac>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    c588:	47a0      	blx	r4
    c58a:	4040      	eors	r0, r0
    c58c:	f380 8811 	msr	BASEPRI, r0
    c590:	f04f 0004 	mov.w	r0, #4
    c594:	df02      	svc	2
    c596:	7c1b      	ldrb	r3, [r3, #16]
    c598:	b2db      	uxtb	r3, r3
    c59a:	2b06      	cmp	r3, #6
    c59c:	d009      	beq.n	c5b2 <event_scan+0x4e>
    c59e:	4b57      	ldr	r3, [pc, #348]	; (c6fc <event_scan+0x198>)
    c5a0:	9301      	str	r3, [sp, #4]
    c5a2:	9300      	str	r3, [sp, #0]
    c5a4:	4b56      	ldr	r3, [pc, #344]	; (c700 <event_scan+0x19c>)
    c5a6:	4a57      	ldr	r2, [pc, #348]	; (c704 <event_scan+0x1a0>)
    c5a8:	681c      	ldr	r4, [r3, #0]
    c5aa:	4957      	ldr	r1, [pc, #348]	; (c708 <event_scan+0x1a4>)
    c5ac:	4b57      	ldr	r3, [pc, #348]	; (c70c <event_scan+0x1a8>)
    c5ae:	4859      	ldr	r0, [pc, #356]	; (c714 <event_scan+0x1b0>)
    c5b0:	e7ea      	b.n	c588 <event_scan+0x24>
	_radio.role = ROLE_SCAN;
    c5b2:	2202      	movs	r2, #2
    c5b4:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    c5b6:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    c5b8:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c5ba:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    c5be:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    c5c0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    c5c4:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    c5c6:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c5ca:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    c5ce:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    c5d0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    c5d4:	f7ff ff9c 	bl	c510 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    c5d8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    c5dc:	f3c3 0081 	ubfx	r0, r3, #2, #2
    c5e0:	1c42      	adds	r2, r0, #1
    c5e2:	f362 0383 	bfi	r3, r2, #2, #2
    c5e6:	3025      	adds	r0, #37	; 0x25
    c5e8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    c5ec:	f7ff fca2 	bl	bf34 <chan_set>
	if (_radio.scanner.chan == 3) {
    c5f0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    c5f4:	f003 020c 	and.w	r2, r3, #12
    c5f8:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    c5fa:	bf08      	it	eq
    c5fc:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    c600:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    c604:	bf08      	it	eq
    c606:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    c60a:	f007 f82f 	bl	1366c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    c60e:	2300      	movs	r3, #0
    c610:	4619      	mov	r1, r3
    c612:	461a      	mov	r2, r3
    c614:	4618      	mov	r0, r3
    c616:	f006 ff99 	bl	1354c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c61a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c61e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c622:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c626:	3008      	adds	r0, #8
    c628:	f006 ff04 	bl	13434 <radio_pkt_rx_set>
	radio_rssi_measure();
    c62c:	f006 ffa6 	bl	1357c <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    c630:	f006 fa06 	bl	12a40 <ctrl_rl_enabled>
    c634:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    c638:	b340      	cbz	r0, c68c <event_scan+0x128>
		struct ll_filter *filter =
    c63a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    c63e:	f006 f817 	bl	12670 <ctrl_filter_get>
    c642:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    c644:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    c648:	f005 ff32 	bl	124b0 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    c64c:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    c64e:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    c650:	1cb2      	adds	r2, r6, #2
    c652:	7830      	ldrb	r0, [r6, #0]
    c654:	f006 ffb4 	bl	135c0 <radio_filter_configure>
		radio_ar_configure(count, irks);
    c658:	4639      	mov	r1, r7
    c65a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c65e:	f007 f989 	bl	13974 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    c662:	68e2      	ldr	r2, [r4, #12]
    c664:	f105 0109 	add.w	r1, r5, #9
    c668:	2000      	movs	r0, #0
    c66a:	f007 f80b 	bl	13684 <radio_tmr_start>
	radio_tmr_end_capture();
    c66e:	f007 f8d9 	bl	13824 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    c672:	2106      	movs	r1, #6
    c674:	462a      	mov	r2, r5
    c676:	4828      	ldr	r0, [pc, #160]	; (c718 <event_scan+0x1b4>)
    c678:	f7ff ff2c 	bl	c4d4 <preempt_calc>
    c67c:	4601      	mov	r1, r0
    c67e:	b188      	cbz	r0, c6a4 <event_scan+0x140>
		_radio.state = STATE_STOP;
    c680:	2304      	movs	r3, #4
    c682:	7523      	strb	r3, [r4, #20]
		radio_disable();
    c684:	f006 fefc 	bl	13480 <radio_disable>
}
    c688:	b00d      	add	sp, #52	; 0x34
    c68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    c68c:	f013 0f30 	tst.w	r3, #48	; 0x30
    c690:	d0e7      	beq.n	c662 <event_scan+0xfe>
		struct ll_filter *wl = ctrl_filter_get(true);
    c692:	2001      	movs	r0, #1
    c694:	f005 ffec 	bl	12670 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    c698:	1c82      	adds	r2, r0, #2
    c69a:	7841      	ldrb	r1, [r0, #1]
    c69c:	7800      	ldrb	r0, [r0, #0]
    c69e:	f006 ff8f 	bl	135c0 <radio_filter_configure>
    c6a2:	e7de      	b.n	c662 <event_scan+0xfe>
		ret = ticker_start(
    c6a4:	f641 1336 	movw	r3, #6454	; 0x1936
    c6a8:	9308      	str	r3, [sp, #32]
    c6aa:	4b1c      	ldr	r3, [pc, #112]	; (c71c <event_scan+0x1b8>)
    c6ac:	9307      	str	r3, [sp, #28]
    c6ae:	2204      	movs	r2, #4
    c6b0:	4b1b      	ldr	r3, [pc, #108]	; (c720 <event_scan+0x1bc>)
    c6b2:	9206      	str	r2, [sp, #24]
    c6b4:	9305      	str	r3, [sp, #20]
    c6b6:	9004      	str	r0, [sp, #16]
    c6b8:	9003      	str	r0, [sp, #12]
    c6ba:	9002      	str	r0, [sp, #8]
    c6bc:	9001      	str	r0, [sp, #4]
    c6be:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    c6c2:	3309      	adds	r3, #9
    c6c4:	9300      	str	r3, [sp, #0]
    c6c6:	462b      	mov	r3, r5
    c6c8:	f7fc f834 	bl	8734 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c6cc:	f030 0302 	bics.w	r3, r0, #2
    c6d0:	d009      	beq.n	c6e6 <event_scan+0x182>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c6d2:	4b0a      	ldr	r3, [pc, #40]	; (c6fc <event_scan+0x198>)
    c6d4:	9301      	str	r3, [sp, #4]
    c6d6:	9300      	str	r3, [sp, #0]
    c6d8:	4b09      	ldr	r3, [pc, #36]	; (c700 <event_scan+0x19c>)
    c6da:	4a0a      	ldr	r2, [pc, #40]	; (c704 <event_scan+0x1a0>)
    c6dc:	681c      	ldr	r4, [r3, #0]
    c6de:	490a      	ldr	r1, [pc, #40]	; (c708 <event_scan+0x1a4>)
    c6e0:	4b0a      	ldr	r3, [pc, #40]	; (c70c <event_scan+0x1a8>)
    c6e2:	4810      	ldr	r0, [pc, #64]	; (c724 <event_scan+0x1c0>)
    c6e4:	e750      	b.n	c588 <event_scan+0x24>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    c6e6:	4619      	mov	r1, r3
    c6e8:	4618      	mov	r0, r3
    c6ea:	4a0f      	ldr	r2, [pc, #60]	; (c728 <event_scan+0x1c4>)
    c6ec:	f7fc f93e 	bl	896c <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c6f0:	f030 0302 	bics.w	r3, r0, #2
    c6f4:	d1ed      	bne.n	c6d2 <event_scan+0x16e>
    c6f6:	e7c7      	b.n	c688 <event_scan+0x124>
    c6f8:	200008c0 	.word	0x200008c0
    c6fc:	000161ba 	.word	0x000161ba
    c700:	20003a5c 	.word	0x20003a5c
    c704:	000179e1 	.word	0x000179e1
    c708:	00017a29 	.word	0x00017a29
    c70c:	000196ec 	.word	0x000196ec
    c710:	000199ef 	.word	0x000199ef
    c714:	00019a29 	.word	0x00019a29
    c718:	20000990 	.word	0x20000990
    c71c:	0000b8a5 	.word	0x0000b8a5
    c720:	0000bb3d 	.word	0x0000bb3d
    c724:	00019a68 	.word	0x00019a68
    c728:	0000baad 	.word	0x0000baad

0000c72c <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    c72c:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    c72e:	4b05      	ldr	r3, [pc, #20]	; (c744 <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c730:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    c732:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c734:	4611      	mov	r1, r2
    c736:	4610      	mov	r0, r2
    c738:	f7fb fa3c 	bl	7bb4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    c73c:	b108      	cbz	r0, c742 <event_stop.constprop.31+0x16>
    c73e:	f7ff f9df 	bl	bb00 <event_stop.part.10>
    c742:	bd08      	pop	{r3, pc}
    c744:	20003d68 	.word	0x20003d68

0000c748 <event_common_prepare>:
{
    c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    c74c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    c74e:	681d      	ldr	r5, [r3, #0]
{
    c750:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c752:	2c00      	cmp	r4, #0
{
    c754:	4681      	mov	r9, r0
    c756:	910b      	str	r1, [sp, #44]	; 0x2c
    c758:	4690      	mov	r8, r2
    c75a:	469b      	mov	fp, r3
    c75c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    c760:	da03      	bge.n	c76a <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    c762:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c764:	42ac      	cmp	r4, r5
    c766:	bf38      	it	cc
    c768:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    c76a:	42ac      	cmp	r4, r5
    c76c:	4f57      	ldr	r7, [pc, #348]	; (c8cc <event_common_prepare+0x184>)
    c76e:	d925      	bls.n	c7bc <event_common_prepare+0x74>
		ticker_status =
    c770:	f241 5374 	movw	r3, #5492	; 0x1574
    c774:	9308      	str	r3, [sp, #32]
    c776:	4b56      	ldr	r3, [pc, #344]	; (c8d0 <event_common_prepare+0x188>)
    c778:	9305      	str	r3, [sp, #20]
    c77a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    c77c:	1b63      	subs	r3, r4, r5
		ticker_status =
    c77e:	9300      	str	r3, [sp, #0]
    c780:	9707      	str	r7, [sp, #28]
    c782:	464b      	mov	r3, r9
    c784:	9106      	str	r1, [sp, #24]
    c786:	9104      	str	r1, [sp, #16]
    c788:	9103      	str	r1, [sp, #12]
    c78a:	9102      	str	r1, [sp, #8]
    c78c:	9101      	str	r1, [sp, #4]
    c78e:	2201      	movs	r2, #1
    c790:	4608      	mov	r0, r1
    c792:	f7fb ffcf 	bl	8734 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c796:	f030 0302 	bics.w	r3, r0, #2
    c79a:	d035      	beq.n	c808 <event_common_prepare+0xc0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c79c:	4b4d      	ldr	r3, [pc, #308]	; (c8d4 <event_common_prepare+0x18c>)
    c79e:	9301      	str	r3, [sp, #4]
    c7a0:	9300      	str	r3, [sp, #0]
    c7a2:	4b4d      	ldr	r3, [pc, #308]	; (c8d8 <event_common_prepare+0x190>)
    c7a4:	4a4d      	ldr	r2, [pc, #308]	; (c8dc <event_common_prepare+0x194>)
    c7a6:	681c      	ldr	r4, [r3, #0]
    c7a8:	494d      	ldr	r1, [pc, #308]	; (c8e0 <event_common_prepare+0x198>)
    c7aa:	4b4e      	ldr	r3, [pc, #312]	; (c8e4 <event_common_prepare+0x19c>)
    c7ac:	484e      	ldr	r0, [pc, #312]	; (c8e8 <event_common_prepare+0x1a0>)
		LL_ASSERT(!retval);
    c7ae:	47a0      	blx	r4
    c7b0:	4040      	eors	r0, r0
    c7b2:	f380 8811 	msr	BASEPRI, r0
    c7b6:	f04f 0004 	mov.w	r0, #4
    c7ba:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    c7bc:	d21d      	bcs.n	c7fa <event_common_prepare+0xb2>
		event_active(0, 0, 0, NULL);
    c7be:	2300      	movs	r3, #0
    c7c0:	461a      	mov	r2, r3
    c7c2:	4619      	mov	r1, r3
    c7c4:	4618      	mov	r0, r3
    c7c6:	f7ff f9c9 	bl	bb5c <event_active>
		ticker_status =
    c7ca:	f241 5389 	movw	r3, #5513	; 0x1589
    c7ce:	2100      	movs	r1, #0
    c7d0:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    c7d2:	1b2c      	subs	r4, r5, r4
		ticker_status =
    c7d4:	4b45      	ldr	r3, [pc, #276]	; (c8ec <event_common_prepare+0x1a4>)
    c7d6:	9305      	str	r3, [sp, #20]
    c7d8:	9707      	str	r7, [sp, #28]
    c7da:	464b      	mov	r3, r9
    c7dc:	9106      	str	r1, [sp, #24]
    c7de:	9104      	str	r1, [sp, #16]
    c7e0:	9103      	str	r1, [sp, #12]
    c7e2:	9102      	str	r1, [sp, #8]
    c7e4:	9101      	str	r1, [sp, #4]
    c7e6:	9400      	str	r4, [sp, #0]
    c7e8:	2201      	movs	r2, #1
    c7ea:	4608      	mov	r0, r1
    c7ec:	f7fb ffa2 	bl	8734 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c7f0:	f030 0302 	bics.w	r3, r0, #2
    c7f4:	d1d2      	bne.n	c79c <event_common_prepare+0x54>
    c7f6:	462c      	mov	r4, r5
    c7f8:	e00b      	b.n	c812 <event_common_prepare+0xca>
		event_active(0, 0, 0, NULL);
    c7fa:	2300      	movs	r3, #0
    c7fc:	461a      	mov	r2, r3
    c7fe:	4619      	mov	r1, r3
    c800:	4618      	mov	r0, r3
    c802:	f7ff f9ab 	bl	bb5c <event_active>
		event_xtal(0, 0, 0, NULL);
    c806:	2300      	movs	r3, #0
    c808:	461a      	mov	r2, r3
    c80a:	4619      	mov	r1, r3
    c80c:	4618      	mov	r0, r3
    c80e:	f7ff f9cd 	bl	bbac <event_xtal>
	_radio.remainder_anchor = remainder;
    c812:	4e37      	ldr	r6, [pc, #220]	; (c8f0 <event_common_prepare+0x1a8>)
    c814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c816:	60f3      	str	r3, [r6, #12]
	ticker_status =
    c818:	f241 53a1 	movw	r3, #5537	; 0x15a1
    c81c:	9308      	str	r3, [sp, #32]
    c81e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c820:	9306      	str	r3, [sp, #24]
    c822:	2200      	movs	r2, #0
    c824:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c826:	9305      	str	r3, [sp, #20]
    c828:	9707      	str	r7, [sp, #28]
    c82a:	464b      	mov	r3, r9
    c82c:	9204      	str	r2, [sp, #16]
    c82e:	9203      	str	r2, [sp, #12]
    c830:	9202      	str	r2, [sp, #8]
    c832:	9201      	str	r2, [sp, #4]
    c834:	9400      	str	r4, [sp, #0]
    c836:	4611      	mov	r1, r2
    c838:	4610      	mov	r0, r2
    c83a:	f7fb ff7b 	bl	8734 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c83e:	f030 0302 	bics.w	r3, r0, #2
    c842:	d1ab      	bne.n	c79c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    c844:	2005      	movs	r0, #5
    c846:	f7ff ff71 	bl	c72c <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    c84a:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    c84e:	429d      	cmp	r5, r3
    c850:	d023      	beq.n	c89a <event_common_prepare+0x152>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    c852:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c856:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    c85a:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    c85c:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    c85e:	bfbc      	itt	lt
    c860:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    c864:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    c868:	f8d8 2000 	ldr.w	r2, [r8]
    c86c:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    c870:	428a      	cmp	r2, r1
    c872:	bf38      	it	cc
    c874:	460a      	movcc	r2, r1
		ticker_status =
    c876:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c87a:	b2a3      	uxth	r3, r4
    c87c:	b292      	uxth	r2, r2
		ticker_status =
    c87e:	9106      	str	r1, [sp, #24]
    c880:	2100      	movs	r1, #0
    c882:	9302      	str	r3, [sp, #8]
    c884:	9201      	str	r2, [sp, #4]
    c886:	9200      	str	r2, [sp, #0]
    c888:	9104      	str	r1, [sp, #16]
    c88a:	9103      	str	r1, [sp, #12]
    c88c:	4652      	mov	r2, sl
    c88e:	4608      	mov	r0, r1
    c890:	f7fb ffa0 	bl	87d4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c894:	f030 0302 	bics.w	r3, r0, #2
    c898:	d180      	bne.n	c79c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    c89a:	20ff      	movs	r0, #255	; 0xff
    c89c:	f7ff fa5c 	bl	bd58 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c8a0:	4b14      	ldr	r3, [pc, #80]	; (c8f4 <event_common_prepare+0x1ac>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c8a2:	2201      	movs	r2, #1
    c8a4:	4611      	mov	r1, r2
    c8a6:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c8a8:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c8ac:	f7fb f982 	bl	7bb4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c8b0:	b148      	cbz	r0, c8c6 <event_common_prepare+0x17e>
    c8b2:	4b08      	ldr	r3, [pc, #32]	; (c8d4 <event_common_prepare+0x18c>)
    c8b4:	9301      	str	r3, [sp, #4]
    c8b6:	9300      	str	r3, [sp, #0]
    c8b8:	4b07      	ldr	r3, [pc, #28]	; (c8d8 <event_common_prepare+0x190>)
    c8ba:	4a08      	ldr	r2, [pc, #32]	; (c8dc <event_common_prepare+0x194>)
    c8bc:	681c      	ldr	r4, [r3, #0]
    c8be:	4908      	ldr	r1, [pc, #32]	; (c8e0 <event_common_prepare+0x198>)
    c8c0:	4b08      	ldr	r3, [pc, #32]	; (c8e4 <event_common_prepare+0x19c>)
    c8c2:	480d      	ldr	r0, [pc, #52]	; (c8f8 <event_common_prepare+0x1b0>)
    c8c4:	e773      	b.n	c7ae <event_common_prepare+0x66>
}
    c8c6:	b00d      	add	sp, #52	; 0x34
    c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8cc:	0000b8a5 	.word	0x0000b8a5
    c8d0:	0000bb5d 	.word	0x0000bb5d
    c8d4:	000161ba 	.word	0x000161ba
    c8d8:	20003a5c 	.word	0x20003a5c
    c8dc:	000179e1 	.word	0x000179e1
    c8e0:	00017a29 	.word	0x00017a29
    c8e4:	000196ab 	.word	0x000196ab
    c8e8:	000198d3 	.word	0x000198d3
    c8ec:	0000bbad 	.word	0x0000bbad
    c8f0:	200008c0 	.word	0x200008c0
    c8f4:	20003e08 	.word	0x20003e08
    c8f8:	0001a00d 	.word	0x0001a00d

0000c8fc <event_scan_prepare>:
{
    c8fc:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c8fe:	4c27      	ldr	r4, [pc, #156]	; (c99c <event_scan_prepare+0xa0>)
    c900:	7c23      	ldrb	r3, [r4, #16]
{
    c902:	b085      	sub	sp, #20
    c904:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    c90a:	b17b      	cbz	r3, c92c <event_scan_prepare+0x30>
    c90c:	4b24      	ldr	r3, [pc, #144]	; (c9a0 <event_scan_prepare+0xa4>)
    c90e:	9301      	str	r3, [sp, #4]
    c910:	9300      	str	r3, [sp, #0]
    c912:	4b24      	ldr	r3, [pc, #144]	; (c9a4 <event_scan_prepare+0xa8>)
    c914:	4a24      	ldr	r2, [pc, #144]	; (c9a8 <event_scan_prepare+0xac>)
    c916:	681c      	ldr	r4, [r3, #0]
    c918:	4924      	ldr	r1, [pc, #144]	; (c9ac <event_scan_prepare+0xb0>)
    c91a:	4b25      	ldr	r3, [pc, #148]	; (c9b0 <event_scan_prepare+0xb4>)
    c91c:	4825      	ldr	r0, [pc, #148]	; (c9b4 <event_scan_prepare+0xb8>)
		LL_ASSERT(!retval);
    c91e:	47a0      	blx	r4
    c920:	4040      	eors	r0, r0
    c922:	f380 8811 	msr	BASEPRI, r0
    c926:	f04f 0004 	mov.w	r0, #4
    c92a:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    c92c:	2306      	movs	r3, #6
    c92e:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    c930:	9203      	str	r2, [sp, #12]
    c932:	4a21      	ldr	r2, [pc, #132]	; (c9b8 <event_scan_prepare+0xbc>)
    c934:	9202      	str	r2, [sp, #8]
    c936:	9301      	str	r3, [sp, #4]
    c938:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    c93c:	9300      	str	r3, [sp, #0]
    c93e:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    c942:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    c946:	f7ff feff 	bl	c748 <event_common_prepare>
	if (_radio.scanner.conn) {
    c94a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    c94e:	b313      	cbz	r3, c996 <event_scan_prepare+0x9a>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    c950:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    c954:	2b00      	cmp	r3, #0
    c956:	da0c      	bge.n	c972 <event_scan_prepare+0x76>
			u32_t ticks_prepare_to_start =
    c958:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    c95c:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    c960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    c964:	4291      	cmp	r1, r2
    c966:	bf2c      	ite	cs
    c968:	ebc3 0301 	rsbcs	r3, r3, r1
    c96c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    c970:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    c972:	4b12      	ldr	r3, [pc, #72]	; (c9bc <event_scan_prepare+0xc0>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c974:	2201      	movs	r2, #1
    c976:	4611      	mov	r1, r2
    c978:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    c97a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c97c:	f7fb f91a 	bl	7bb4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c980:	b148      	cbz	r0, c996 <event_scan_prepare+0x9a>
    c982:	4b07      	ldr	r3, [pc, #28]	; (c9a0 <event_scan_prepare+0xa4>)
    c984:	9301      	str	r3, [sp, #4]
    c986:	9300      	str	r3, [sp, #0]
    c988:	4b06      	ldr	r3, [pc, #24]	; (c9a4 <event_scan_prepare+0xa8>)
    c98a:	4a07      	ldr	r2, [pc, #28]	; (c9a8 <event_scan_prepare+0xac>)
    c98c:	681c      	ldr	r4, [r3, #0]
    c98e:	4907      	ldr	r1, [pc, #28]	; (c9ac <event_scan_prepare+0xb0>)
    c990:	4b07      	ldr	r3, [pc, #28]	; (c9b0 <event_scan_prepare+0xb4>)
    c992:	480b      	ldr	r0, [pc, #44]	; (c9c0 <event_scan_prepare+0xc4>)
    c994:	e7c3      	b.n	c91e <event_scan_prepare+0x22>
}
    c996:	b005      	add	sp, #20
    c998:	bd30      	pop	{r4, r5, pc}
    c99a:	bf00      	nop
    c99c:	200008c0 	.word	0x200008c0
    c9a0:	000161ba 	.word	0x000161ba
    c9a4:	20003a5c 	.word	0x20003a5c
    c9a8:	000179e1 	.word	0x000179e1
    c9ac:	00017a29 	.word	0x00017a29
    c9b0:	000196d9 	.word	0x000196d9
    c9b4:	0001a149 	.word	0x0001a149
    c9b8:	0000c565 	.word	0x0000c565
    c9bc:	20003d88 	.word	0x20003d88
    c9c0:	0001a00d 	.word	0x0001a00d

0000c9c4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    c9c4:	4b02      	ldr	r3, [pc, #8]	; (c9d0 <mayfly_xtal_start+0xc>)
    c9c6:	6818      	ldr	r0, [r3, #0]
    c9c8:	6843      	ldr	r3, [r0, #4]
    c9ca:	2100      	movs	r1, #0
    c9cc:	681b      	ldr	r3, [r3, #0]
    c9ce:	4718      	bx	r3
    c9d0:	200008c0 	.word	0x200008c0

0000c9d4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    c9d4:	4b02      	ldr	r3, [pc, #8]	; (c9e0 <mayfly_xtal_stop+0xc>)
    c9d6:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    c9d8:	6843      	ldr	r3, [r0, #4]
    c9da:	2100      	movs	r1, #0
    c9dc:	685b      	ldr	r3, [r3, #4]
    c9de:	4718      	bx	r3
    c9e0:	200008c0 	.word	0x200008c0

0000c9e4 <chan_sel_2>:
{
    c9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    c9e6:	4048      	eors	r0, r1
    c9e8:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    c9ea:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    c9ee:	2608      	movs	r6, #8
	o = 0;
    c9f0:	2400      	movs	r4, #0
		o |= (i & 1);
    c9f2:	f00e 0501 	and.w	r5, lr, #1
    c9f6:	3e01      	subs	r6, #1
    c9f8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    c9fc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    ca00:	b2ec      	uxtb	r4, r5
		i >>= 1;
    ca02:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    ca06:	d1f4      	bne.n	c9f2 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    ca08:	0225      	lsls	r5, r4, #8
    ca0a:	b22d      	sxth	r5, r5
    ca0c:	b2c0      	uxtb	r0, r0
    ca0e:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    ca12:	4634      	mov	r4, r6
		o |= (i & 1);
    ca14:	f000 0601 	and.w	r6, r0, #1
    ca18:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    ca1c:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    ca20:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    ca24:	b2e4      	uxtb	r4, r4
		i >>= 1;
    ca26:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    ca2a:	d1f3      	bne.n	ca14 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    ca2c:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    ca2e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    ca32:	3f01      	subs	r7, #1
    ca34:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    ca36:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    ca3a:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    ca3c:	d1d5      	bne.n	c9ea <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    ca3e:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    ca40:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    ca42:	fbb1 f0f4 	udiv	r0, r1, r4
    ca46:	fb04 1010 	mls	r0, r4, r0, r1
    ca4a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ca4c:	08c4      	lsrs	r4, r0, #3
    ca4e:	f000 0507 	and.w	r5, r0, #7
    ca52:	5d14      	ldrb	r4, [r2, r4]
    ca54:	412c      	asrs	r4, r5
    ca56:	07e4      	lsls	r4, r4, #31
    ca58:	d407      	bmi.n	ca6a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    ca5a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    ca5c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    ca60:	4610      	mov	r0, r2
}
    ca62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    ca66:	f7fd bf3b 	b.w	a8e0 <chan_sel_remap>
}
    ca6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ca6c <ctrl_tx_enqueue>:
{
    ca6c:	b510      	push	{r4, lr}
	    !conn->empty &&
    ca6e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    ca72:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    ca76:	f014 0f80 	tst.w	r4, #128	; 0x80
    ca7a:	d118      	bne.n	caae <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    ca7c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    ca80:	b1ab      	cbz	r3, caae <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    ca82:	0724      	lsls	r4, r4, #28
    ca84:	d413      	bmi.n	caae <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    ca86:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    ca8a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    ca8c:	bf04      	itt	eq
    ca8e:	681c      	ldreq	r4, [r3, #0]
    ca90:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    ca94:	b992      	cbnz	r2, cabc <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    ca96:	681a      	ldr	r2, [r3, #0]
    ca98:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    ca9a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    ca9c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    caa0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    caa4:	680b      	ldr	r3, [r1, #0]
    caa6:	b90b      	cbnz	r3, caac <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    caa8:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    caac:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    caae:	b92a      	cbnz	r2, cabc <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    cab0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    cab4:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    cab6:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    caba:	e7ef      	b.n	ca9c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    cabc:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    cac0:	681a      	ldr	r2, [r3, #0]
    cac2:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    cac4:	6019      	str	r1, [r3, #0]
    cac6:	e7eb      	b.n	caa0 <ctrl_tx_enqueue+0x34>

0000cac8 <ctrl_tx_sec_enqueue>:
{
    cac8:	b410      	push	{r4}
	if (conn->pause_tx) {
    caca:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    cace:	0724      	lsls	r4, r4, #28
{
    cad0:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    cad2:	d50f      	bpl.n	caf4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    cad4:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    cad8:	b931      	cbnz	r1, cae8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    cada:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    cade:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    cae0:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    cae4:	bc10      	pop	{r4}
    cae6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    cae8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    caec:	6819      	ldr	r1, [r3, #0]
    caee:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    caf0:	601a      	str	r2, [r3, #0]
    caf2:	e7f7      	b.n	cae4 <ctrl_tx_sec_enqueue+0x1c>
}
    caf4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    caf6:	f7ff bfb9 	b.w	ca6c <ctrl_tx_enqueue>
	...

0000cafc <feature_rsp_send>:
{
    cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cafe:	4f21      	ldr	r7, [pc, #132]	; (cb84 <feature_rsp_send+0x88>)
{
    cb00:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb02:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    cb06:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb08:	f7fa ff89 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    cb0c:	4604      	mov	r4, r0
    cb0e:	b3b0      	cbz	r0, cb7e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    cb10:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    cb12:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    cb14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    cb18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    cb1c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    cb20:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    cb24:	f043 0310 	orr.w	r3, r3, #16
    cb28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    cb2c:	79b1      	ldrb	r1, [r6, #6]
    cb2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    cb32:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    cb36:	f3c1 0110 	ubfx	r1, r1, #0, #17
    cb3a:	400b      	ands	r3, r1
    cb3c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    cb40:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    cb44:	f043 0320 	orr.w	r3, r3, #32
    cb48:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb4c:	7903      	ldrb	r3, [r0, #4]
    cb4e:	f043 0303 	orr.w	r3, r3, #3
    cb52:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    cb54:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    cb56:	2309      	movs	r3, #9
    cb58:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    cb5a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    cb5c:	2100      	movs	r1, #0
    cb5e:	4410      	add	r0, r2
    cb60:	f7f5 f9b2 	bl	1ec8 <memset>
		conn->llcp_features & 0xFF;
    cb64:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    cb68:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    cb6a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    cb6c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    cb6e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    cb70:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    cb72:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    cb74:	4621      	mov	r1, r4
    cb76:	f7ff ffa7 	bl	cac8 <ctrl_tx_sec_enqueue>
	return 0;
    cb7a:	2000      	movs	r0, #0
    cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    cb7e:	2001      	movs	r0, #1
}
    cb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb82:	bf00      	nop
    cb84:	200008c0 	.word	0x200008c0

0000cb88 <start_enc_rsp_send>:
{
    cb88:	b510      	push	{r4, lr}
    cb8a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    cb8c:	b9c9      	cbnz	r1, cbc2 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb8e:	480f      	ldr	r0, [pc, #60]	; (cbcc <start_enc_rsp_send+0x44>)
    cb90:	f7fa ff45 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    cb94:	b1b8      	cbz	r0, cbc6 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    cb96:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    cb98:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cb9c:	f043 0320 	orr.w	r3, r3, #32
    cba0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cba4:	780b      	ldrb	r3, [r1, #0]
    cba6:	f043 0303 	orr.w	r3, r3, #3
    cbaa:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    cbac:	2301      	movs	r3, #1
    cbae:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    cbb0:	2306      	movs	r3, #6
    cbb2:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    cbb4:	b140      	cbz	r0, cbc8 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    cbb6:	4601      	mov	r1, r0
    cbb8:	4620      	mov	r0, r4
    cbba:	f7ff ff57 	bl	ca6c <ctrl_tx_enqueue>
	return 0;
    cbbe:	2000      	movs	r0, #0
    cbc0:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    cbc2:	2000      	movs	r0, #0
    cbc4:	e7e8      	b.n	cb98 <start_enc_rsp_send+0x10>
			return 1;
    cbc6:	2001      	movs	r0, #1
}
    cbc8:	bd10      	pop	{r4, pc}
    cbca:	bf00      	nop
    cbcc:	20000a1c 	.word	0x20000a1c

0000cbd0 <reject_ext_ind_send>:
{
    cbd0:	b570      	push	{r4, r5, r6, lr}
    cbd2:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cbd4:	480b      	ldr	r0, [pc, #44]	; (cc04 <reject_ext_ind_send+0x34>)
{
    cbd6:	460e      	mov	r6, r1
    cbd8:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cbda:	f7fa ff20 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    cbde:	b178      	cbz	r0, cc00 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cbe0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    cbe2:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cbe4:	f043 0303 	orr.w	r3, r3, #3
    cbe8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    cbea:	2303      	movs	r3, #3
    cbec:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    cbee:	2311      	movs	r3, #17
    cbf0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    cbf2:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    cbf4:	4601      	mov	r1, r0
    cbf6:	4620      	mov	r0, r4
    cbf8:	f7ff ff38 	bl	ca6c <ctrl_tx_enqueue>
	return 0;
    cbfc:	2000      	movs	r0, #0
    cbfe:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    cc00:	2001      	movs	r0, #1
}
    cc02:	bd70      	pop	{r4, r5, r6, pc}
    cc04:	20000a1c 	.word	0x20000a1c

0000cc08 <event_connection_prepare>:
{
    cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    cc0c:	4db9      	ldr	r5, [pc, #740]	; (cef4 <event_connection_prepare+0x2ec>)
{
    cc0e:	b08f      	sub	sp, #60	; 0x3c
    cc10:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    cc12:	7c2b      	ldrb	r3, [r5, #16]
{
    cc14:	910c      	str	r1, [sp, #48]	; 0x30
    cc16:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    cc18:	b17b      	cbz	r3, cc3a <event_connection_prepare+0x32>
    cc1a:	4bb7      	ldr	r3, [pc, #732]	; (cef8 <event_connection_prepare+0x2f0>)
    cc1c:	9301      	str	r3, [sp, #4]
    cc1e:	9300      	str	r3, [sp, #0]
    cc20:	4bb6      	ldr	r3, [pc, #728]	; (cefc <event_connection_prepare+0x2f4>)
    cc22:	4ab7      	ldr	r2, [pc, #732]	; (cf00 <event_connection_prepare+0x2f8>)
    cc24:	681c      	ldr	r4, [r3, #0]
    cc26:	49b7      	ldr	r1, [pc, #732]	; (cf04 <event_connection_prepare+0x2fc>)
    cc28:	4bb7      	ldr	r3, [pc, #732]	; (cf08 <event_connection_prepare+0x300>)
    cc2a:	48b8      	ldr	r0, [pc, #736]	; (cf0c <event_connection_prepare+0x304>)
		LL_ASSERT(!retval);
    cc2c:	47a0      	blx	r4
    cc2e:	4040      	eors	r0, r0
    cc30:	f380 8811 	msr	BASEPRI, r0
    cc34:	f04f 0004 	mov.w	r0, #4
    cc38:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    cc3a:	f894 3020 	ldrb.w	r3, [r4, #32]
    cc3e:	3307      	adds	r3, #7
    cc40:	b2db      	uxtb	r3, r3
    cc42:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    cc44:	f994 301d 	ldrsb.w	r3, [r4, #29]
    cc48:	2b00      	cmp	r3, #0
    cc4a:	da09      	bge.n	cc60 <event_connection_prepare+0x58>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    cc4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    cc4e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    cc50:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    cc54:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    cc56:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    cc58:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    cc5a:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    cc5c:	bf88      	it	hi
    cc5e:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    cc60:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    cc62:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    cc66:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    cc68:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    cc6a:	b292      	uxth	r2, r2
    cc6c:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    cc6e:	4432      	add	r2, r6
    cc70:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    cc72:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    cc76:	429a      	cmp	r2, r3
    cc78:	f040 81bf 	bne.w	cffa <event_connection_prepare+0x3f2>
    cc7c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cc80:	075f      	lsls	r7, r3, #29
    cc82:	f100 84bc 	bmi.w	d5fe <event_connection_prepare+0x9f6>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    cc86:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    cc8a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    cc8e:	429a      	cmp	r2, r3
    cc90:	f000 8098 	beq.w	cdc4 <event_connection_prepare+0x1bc>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    cc94:	2005      	movs	r0, #5
    cc96:	f7ff fd49 	bl	c72c <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    cc9a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    cc9e:	b113      	cbz	r3, cca6 <event_connection_prepare+0x9e>
    cca0:	429c      	cmp	r4, r3
    cca2:	f040 808f 	bne.w	cdc4 <event_connection_prepare+0x1bc>
	switch (conn->llcp_conn_param.state) {
    cca6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    ccaa:	f003 0307 	and.w	r3, r3, #7
    ccae:	2b05      	cmp	r3, #5
    ccb0:	f200 8160 	bhi.w	cf74 <event_connection_prepare+0x36c>
    ccb4:	e8df f013 	tbh	[pc, r3, lsl #1]
    ccb8:	00670006 	.word	0x00670006
    ccbc:	00860134 	.word	0x00860134
    ccc0:	00860086 	.word	0x00860086
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ccc4:	4892      	ldr	r0, [pc, #584]	; (cf10 <event_connection_prepare+0x308>)
    ccc6:	f7fa feaa 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    ccca:	4607      	mov	r7, r0
    cccc:	2800      	cmp	r0, #0
    ccce:	d079      	beq.n	cdc4 <event_connection_prepare+0x1bc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    ccd0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    ccd4:	2204      	movs	r2, #4
    ccd6:	f362 0302 	bfi	r3, r2, #0, #3
    ccda:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ccde:	7903      	ldrb	r3, [r0, #4]
    cce0:	f043 0303 	orr.w	r3, r3, #3
    cce4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    cce6:	2318      	movs	r3, #24
    cce8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    ccea:	230f      	movs	r3, #15
    ccec:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    ccee:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    ccf2:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    ccf4:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    ccf6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    ccfa:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    ccfc:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    cd00:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    cd02:	2300      	movs	r3, #0
    cd04:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    cd06:	74c3      	strb	r3, [r0, #19]
    cd08:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    cd0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd0e:	7543      	strb	r3, [r0, #21]
    cd10:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    cd12:	75c3      	strb	r3, [r0, #23]
    cd14:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    cd16:	7643      	strb	r3, [r0, #25]
    cd18:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    cd1a:	76c3      	strb	r3, [r0, #27]
    cd1c:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    cd1e:	7743      	strb	r3, [r0, #29]
    cd20:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    cd22:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    cd26:	4601      	mov	r1, r0
    cd28:	4620      	mov	r0, r4
    cd2a:	f7ff fe9f 	bl	ca6c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cd2e:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    cd30:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    cd34:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cd38:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    cd3a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    cd3e:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    cd42:	da0b      	bge.n	cd5c <event_connection_prepare+0x154>
			u32_t ticks_prepare_to_start =
    cd44:	68a3      	ldr	r3, [r4, #8]
    cd46:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    cd48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    cd4c:	428b      	cmp	r3, r1
    cd4e:	bf2c      	ite	cs
    cd50:	4443      	addcs	r3, r8
    cd52:	eb08 0301 	addcc.w	r3, r8, r1
    cd56:	1a9b      	subs	r3, r3, r2
    cd58:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    cd5c:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    cd5e:	4b6d      	ldr	r3, [pc, #436]	; (cf14 <event_connection_prepare+0x30c>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    cd60:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cd64:	2201      	movs	r2, #1
    cd66:	4611      	mov	r1, r2
    cd68:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    cd6a:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    cd6c:	f7fa ff22 	bl	7bb4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    cd70:	b340      	cbz	r0, cdc4 <event_connection_prepare+0x1bc>
    cd72:	4b61      	ldr	r3, [pc, #388]	; (cef8 <event_connection_prepare+0x2f0>)
    cd74:	9301      	str	r3, [sp, #4]
    cd76:	9300      	str	r3, [sp, #0]
    cd78:	4b60      	ldr	r3, [pc, #384]	; (cefc <event_connection_prepare+0x2f4>)
    cd7a:	681c      	ldr	r4, [r3, #0]
    cd7c:	4b66      	ldr	r3, [pc, #408]	; (cf18 <event_connection_prepare+0x310>)
    cd7e:	4a60      	ldr	r2, [pc, #384]	; (cf00 <event_connection_prepare+0x2f8>)
    cd80:	4960      	ldr	r1, [pc, #384]	; (cf04 <event_connection_prepare+0x2fc>)
    cd82:	4866      	ldr	r0, [pc, #408]	; (cf1c <event_connection_prepare+0x314>)
    cd84:	e752      	b.n	cc2c <event_connection_prepare+0x24>
	if (conn->llcp_conn_param.status) {
    cd86:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    cd8a:	b397      	cbz	r7, cdf2 <event_connection_prepare+0x1ea>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cd8c:	4860      	ldr	r0, [pc, #384]	; (cf10 <event_connection_prepare+0x308>)
    cd8e:	f7fa fe46 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    cd92:	4601      	mov	r1, r0
    cd94:	b1b0      	cbz	r0, cdc4 <event_connection_prepare+0x1bc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    cd96:	7903      	ldrb	r3, [r0, #4]
    cd98:	f043 0303 	orr.w	r3, r3, #3
    cd9c:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    cd9e:	2311      	movs	r3, #17
    cda0:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    cda2:	2303      	movs	r3, #3
    cda4:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    cda6:	230f      	movs	r3, #15
    cda8:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    cdaa:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    cdae:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    cdb0:	4620      	mov	r0, r4
    cdb2:	f7ff fe5b 	bl	ca6c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cdb6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    cdba:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    cdbe:	2300      	movs	r3, #0
    cdc0:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    cdc4:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    cdc8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    cdcc:	429a      	cmp	r2, r3
    cdce:	f000 810d 	beq.w	cfec <event_connection_prepare+0x3e4>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    cdd2:	2005      	movs	r0, #5
    cdd4:	f7ff fcaa 	bl	c72c <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    cdd8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    cddc:	f003 0203 	and.w	r2, r3, #3
    cde0:	2a03      	cmp	r2, #3
    cde2:	f200 817c 	bhi.w	d0de <event_connection_prepare+0x4d6>
    cde6:	e8df f012 	tbh	[pc, r2, lsl #1]
    cdea:	00cf      	.short	0x00cf
    cdec:	01010101 	.word	0x01010101
    cdf0:	011b      	.short	0x011b
	if (!conn->role) {
    cdf2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	db3b      	blt.n	ce72 <event_connection_prepare+0x26a>
		if (conn->llcp_req != conn->llcp_ack) {
    cdfa:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    cdfe:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    ce02:	428b      	cmp	r3, r1
    ce04:	d1de      	bne.n	cdc4 <event_connection_prepare+0x1bc>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    ce06:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    ce0a:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    ce0e:	2205      	movs	r2, #5
    ce10:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    ce14:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    ce18:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    ce1c:	2301      	movs	r3, #1
    ce1e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    ce22:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    ce26:	b122      	cbz	r2, ce32 <event_connection_prepare+0x22a>
				((conn->llcp_conn_param.interval /
    ce28:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    ce2c:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    ce2e:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    ce32:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    ce36:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    ce3a:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    ce3e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    ce42:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    ce46:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ce4a:	2202      	movs	r2, #2
    ce4c:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    ce50:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    ce54:	f082 0208 	eor.w	r2, r2, #8
    ce58:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    ce5c:	f362 0382 	bfi	r3, r2, #2, #1
    ce60:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    ce64:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    ce66:	2301      	movs	r3, #1
    ce68:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    ce6c:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    ce70:	e7a8      	b.n	cdc4 <event_connection_prepare+0x1bc>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ce72:	4827      	ldr	r0, [pc, #156]	; (cf10 <event_connection_prepare+0x308>)
    ce74:	f7fa fdd3 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    ce78:	4601      	mov	r1, r0
    ce7a:	2800      	cmp	r0, #0
    ce7c:	d0a2      	beq.n	cdc4 <event_connection_prepare+0x1bc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ce7e:	7903      	ldrb	r3, [r0, #4]
    ce80:	f043 0303 	orr.w	r3, r3, #3
    ce84:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    ce86:	2318      	movs	r3, #24
    ce88:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    ce8a:	2310      	movs	r3, #16
    ce8c:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    ce8e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    ce92:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    ce94:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    ce96:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    ce9a:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    ce9c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    cea0:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    cea2:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    cea6:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    cea8:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    ceac:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    ceb0:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    ceb4:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    ceb8:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    cebc:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    cec0:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    cec4:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    cec8:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    cecc:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    ced0:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    ced4:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    ced8:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    cedc:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    cee0:	4620      	mov	r0, r4
    cee2:	f7ff fdc3 	bl	ca6c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cee6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ceea:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    ceee:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    cef2:	e767      	b.n	cdc4 <event_connection_prepare+0x1bc>
    cef4:	200008c0 	.word	0x200008c0
    cef8:	000161ba 	.word	0x000161ba
    cefc:	20003a5c 	.word	0x20003a5c
    cf00:	000179e1 	.word	0x000179e1
    cf04:	00017a29 	.word	0x00017a29
    cf08:	00019792 	.word	0x00019792
    cf0c:	0001a149 	.word	0x0001a149
    cf10:	20000a1c 	.word	0x20000a1c
    cf14:	20003da8 	.word	0x20003da8
    cf18:	0001972e 	.word	0x0001972e
    cf1c:	0001a00d 	.word	0x0001a00d
	if (conn->pause_tx) {
    cf20:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cf24:	0718      	lsls	r0, r3, #28
    cf26:	f53f af4d 	bmi.w	cdc4 <event_connection_prepare+0x1bc>
	node_rx = packet_rx_reserve_get(2);
    cf2a:	2002      	movs	r0, #2
    cf2c:	f7fd fd0a 	bl	a944 <packet_rx_reserve_get>
	if (!node_rx) {
    cf30:	2800      	cmp	r0, #0
    cf32:	f43f af47 	beq.w	cdc4 <event_connection_prepare+0x1bc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    cf36:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    cf3a:	2203      	movs	r2, #3
    cf3c:	f362 0302 	bfi	r3, r2, #0, #3
    cf40:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    cf44:	8c23      	ldrh	r3, [r4, #32]
    cf46:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cf48:	2301      	movs	r3, #1
    cf4a:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    cf4c:	7a03      	ldrb	r3, [r0, #8]
    cf4e:	4313      	orrs	r3, r2
    cf50:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    cf52:	2318      	movs	r3, #24
    cf54:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    cf56:	230f      	movs	r3, #15
    cf58:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    cf5a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    cf5e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    cf60:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    cf62:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    cf66:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    cf68:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    cf6c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    cf6e:	f7fe fb85 	bl	b67c <packet_rx_enqueue>
    cf72:	e727      	b.n	cdc4 <event_connection_prepare+0x1bc>
		LL_ASSERT(0);
    cf74:	4bbe      	ldr	r3, [pc, #760]	; (d270 <event_connection_prepare+0x668>)
    cf76:	9301      	str	r3, [sp, #4]
    cf78:	9300      	str	r3, [sp, #0]
    cf7a:	4bbe      	ldr	r3, [pc, #760]	; (d274 <event_connection_prepare+0x66c>)
    cf7c:	681c      	ldr	r4, [r3, #0]
    cf7e:	4bbe      	ldr	r3, [pc, #760]	; (d278 <event_connection_prepare+0x670>)
		LL_ASSERT(0);
    cf80:	4abe      	ldr	r2, [pc, #760]	; (d27c <event_connection_prepare+0x674>)
    cf82:	49bf      	ldr	r1, [pc, #764]	; (d280 <event_connection_prepare+0x678>)
    cf84:	48bf      	ldr	r0, [pc, #764]	; (d284 <event_connection_prepare+0x67c>)
    cf86:	e651      	b.n	cc2c <event_connection_prepare+0x24>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cf88:	48bf      	ldr	r0, [pc, #764]	; (d288 <event_connection_prepare+0x680>)
    cf8a:	f7fa fd48 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    cf8e:	4601      	mov	r1, r0
    cf90:	b360      	cbz	r0, cfec <event_connection_prepare+0x3e4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    cf92:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    cf96:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    cf9a:	2201      	movs	r2, #1
    cf9c:	f362 0301 	bfi	r3, r2, #0, #2
    cfa0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cfa4:	b2db      	uxtb	r3, r3
    cfa6:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    cfaa:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cfae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    cfb2:	f363 07c5 	bfi	r7, r3, #3, #3
    cfb6:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    cfba:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    cfbe:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    cfc2:	f367 1286 	bfi	r2, r7, #6, #1
    cfc6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cfca:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    cfcc:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cfce:	f042 0203 	orr.w	r2, r2, #3
    cfd2:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    cfd4:	2203      	movs	r2, #3
    cfd6:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    cfd8:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    cfda:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    cfdc:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    cfde:	4620      	mov	r0, r4
    cfe0:	f7ff fd44 	bl	ca6c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    cfe4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    cfe8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    cfec:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    cff0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cff4:	429a      	cmp	r2, r3
    cff6:	f000 8302 	beq.w	d5fe <event_connection_prepare+0x9f6>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cffa:	2005      	movs	r0, #5
    cffc:	f7ff fb96 	bl	c72c <event_stop.constprop.31>
		switch (conn->llcp_type) {
    d000:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    d004:	3b01      	subs	r3, #1
    d006:	2b07      	cmp	r3, #7
    d008:	f200 85ba 	bhi.w	db80 <event_connection_prepare+0xf78>
    d00c:	e8df f013 	tbh	[pc, r3, lsl #1]
    d010:	02d0006e 	.word	0x02d0006e
    d014:	046a034f 	.word	0x046a034f
    d018:	05b8049a 	.word	0x05b8049a
    d01c:	050a04f6 	.word	0x050a04f6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    d020:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    d024:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    d028:	f3c3 0282 	ubfx	r2, r3, #2, #3
    d02c:	0791      	lsls	r1, r2, #30
    d02e:	d544      	bpl.n	d0ba <event_connection_prepare+0x4b2>
			conn->llcp_phy.tx = BIT(1);
    d030:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    d032:	f362 0384 	bfi	r3, r2, #2, #3
    d036:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    d03a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    d03e:	095a      	lsrs	r2, r3, #5
    d040:	0790      	lsls	r0, r2, #30
    d042:	d543      	bpl.n	d0cc <event_connection_prepare+0x4c4>
			conn->llcp_phy.rx = BIT(1);
    d044:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    d046:	f362 1347 	bfi	r3, r2, #5, #3
    d04a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    d04e:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    d052:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d056:	f3c2 0182 	ubfx	r1, r2, #2, #3
    d05a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d05e:	428b      	cmp	r3, r1
    d060:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    d064:	bf14      	ite	ne
    d066:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    d06a:	f36f 0384 	bfceq	r3, #2, #3
    d06e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    d072:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d076:	0952      	lsrs	r2, r2, #5
    d078:	f003 0307 	and.w	r3, r3, #7
    d07c:	4293      	cmp	r3, r2
    d07e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    d082:	bf14      	ite	ne
    d084:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    d088:	f36f 1347 	bfceq	r3, #5, #3
    d08c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    d090:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    d094:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    d098:	f043 0301 	orr.w	r3, r3, #1
    d09c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d0a0:	f362 0341 	bfi	r3, r2, #1, #1
    d0a4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    d0a8:	2308      	movs	r3, #8
    d0aa:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    d0ae:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    d0b2:	3b01      	subs	r3, #1
    d0b4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    d0b8:	e798      	b.n	cfec <event_connection_prepare+0x3e4>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    d0ba:	07d7      	lsls	r7, r2, #31
    d0bc:	d501      	bpl.n	d0c2 <event_connection_prepare+0x4ba>
			conn->llcp_phy.tx = BIT(0);
    d0be:	2201      	movs	r2, #1
    d0c0:	e7b7      	b.n	d032 <event_connection_prepare+0x42a>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    d0c2:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    d0c6:	bf18      	it	ne
    d0c8:	2204      	movne	r2, #4
    d0ca:	e7b2      	b.n	d032 <event_connection_prepare+0x42a>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    d0cc:	07d1      	lsls	r1, r2, #31
    d0ce:	d501      	bpl.n	d0d4 <event_connection_prepare+0x4cc>
			conn->llcp_phy.rx = BIT(0);
    d0d0:	2201      	movs	r2, #1
    d0d2:	e7b8      	b.n	d046 <event_connection_prepare+0x43e>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    d0d4:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    d0d8:	bf18      	it	ne
    d0da:	2204      	movne	r2, #4
    d0dc:	e7b3      	b.n	d046 <event_connection_prepare+0x43e>
		LL_ASSERT(0);
    d0de:	4b64      	ldr	r3, [pc, #400]	; (d270 <event_connection_prepare+0x668>)
    d0e0:	9301      	str	r3, [sp, #4]
    d0e2:	9300      	str	r3, [sp, #0]
    d0e4:	4b63      	ldr	r3, [pc, #396]	; (d274 <event_connection_prepare+0x66c>)
    d0e6:	681c      	ldr	r4, [r3, #0]
    d0e8:	4b68      	ldr	r3, [pc, #416]	; (d28c <event_connection_prepare+0x684>)
    d0ea:	e749      	b.n	cf80 <event_connection_prepare+0x378>
	if (!conn_upd) {
    d0ec:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    d0f0:	b90b      	cbnz	r3, d0f6 <event_connection_prepare+0x4ee>
		_radio.conn_upd = conn;
    d0f2:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    d0f6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d0fa:	f013 0303 	ands.w	r3, r3, #3
    d0fe:	d06c      	beq.n	d1da <event_connection_prepare+0x5d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d100:	4861      	ldr	r0, [pc, #388]	; (d288 <event_connection_prepare+0x680>)
    d102:	f7fa fc8c 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    d106:	4607      	mov	r7, r0
    d108:	2800      	cmp	r0, #0
    d10a:	f000 8278 	beq.w	d5fe <event_connection_prepare+0x9f6>
		switch (conn->llcp.conn_upd.state) {
    d10e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d112:	f003 0303 	and.w	r3, r3, #3
    d116:	2b01      	cmp	r3, #1
    d118:	d05d      	beq.n	d1d6 <event_connection_prepare+0x5ce>
    d11a:	2b02      	cmp	r3, #2
    d11c:	d154      	bne.n	d1c8 <event_connection_prepare+0x5c0>
			fp_mayfly_select_or_use =
    d11e:	4a5c      	ldr	r2, [pc, #368]	; (d290 <event_connection_prepare+0x688>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d120:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d124:	f36f 0301 	bfc	r3, #0, #2
    d128:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    d12c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d12e:	3306      	adds	r3, #6
    d130:	4433      	add	r3, r6
    d132:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    d134:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d138:	7939      	ldrb	r1, [r7, #4]
    d13a:	f041 0103 	orr.w	r1, r1, #3
    d13e:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    d140:	210c      	movs	r1, #12
    d142:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    d144:	2100      	movs	r1, #0
    d146:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    d148:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    d14c:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    d14e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    d152:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d156:	fbb1 f1f0 	udiv	r1, r1, r0
    d15a:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    d15e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    d162:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    d166:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    d16a:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    d16e:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    d172:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    d176:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d17a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    d17c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d180:	2900      	cmp	r1, #0
    d182:	da0b      	bge.n	d19c <event_connection_prepare+0x594>
			u32_t ticks_prepare_to_start =
    d184:	68a3      	ldr	r3, [r4, #8]
    d186:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    d188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    d18c:	4283      	cmp	r3, r0
    d18e:	bf2c      	ite	cs
    d190:	4443      	addcs	r3, r8
    d192:	eb08 0300 	addcc.w	r3, r8, r0
    d196:	1a5b      	subs	r3, r3, r1
    d198:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    d19c:	f107 0309 	add.w	r3, r7, #9
    d1a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    d1a4:	4b3b      	ldr	r3, [pc, #236]	; (d294 <event_connection_prepare+0x68c>)
    d1a6:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d1a8:	2201      	movs	r2, #1
    d1aa:	4611      	mov	r1, r2
    d1ac:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    d1ae:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    d1b0:	f7fa fd00 	bl	7bb4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    d1b4:	2800      	cmp	r0, #0
    d1b6:	f000 821e 	beq.w	d5f6 <event_connection_prepare+0x9ee>
    d1ba:	4b2d      	ldr	r3, [pc, #180]	; (d270 <event_connection_prepare+0x668>)
    d1bc:	9301      	str	r3, [sp, #4]
    d1be:	9300      	str	r3, [sp, #0]
    d1c0:	4b2c      	ldr	r3, [pc, #176]	; (d274 <event_connection_prepare+0x66c>)
    d1c2:	681c      	ldr	r4, [r3, #0]
    d1c4:	4b34      	ldr	r3, [pc, #208]	; (d298 <event_connection_prepare+0x690>)
    d1c6:	e5da      	b.n	cd7e <event_connection_prepare+0x176>
			LL_ASSERT(0);
    d1c8:	4b29      	ldr	r3, [pc, #164]	; (d270 <event_connection_prepare+0x668>)
    d1ca:	9301      	str	r3, [sp, #4]
    d1cc:	9300      	str	r3, [sp, #0]
    d1ce:	4b29      	ldr	r3, [pc, #164]	; (d274 <event_connection_prepare+0x66c>)
    d1d0:	681c      	ldr	r4, [r3, #0]
    d1d2:	4b32      	ldr	r3, [pc, #200]	; (d29c <event_connection_prepare+0x694>)
    d1d4:	e6d4      	b.n	cf80 <event_connection_prepare+0x378>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    d1d6:	4a32      	ldr	r2, [pc, #200]	; (d2a0 <event_connection_prepare+0x698>)
    d1d8:	e7a2      	b.n	d120 <event_connection_prepare+0x518>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    d1da:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    d1de:	1bf7      	subs	r7, r6, r7
    d1e0:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    d1e2:	043a      	lsls	r2, r7, #16
    d1e4:	f100 820b 	bmi.w	d5fe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    d1e8:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    d1ec:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d1f0:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    d1f4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    d1f8:	428a      	cmp	r2, r1
    d1fa:	d009      	beq.n	d210 <event_connection_prepare+0x608>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    d1fc:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d200:	f002 0207 	and.w	r2, r2, #7
    d204:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d206:	bf04      	itt	eq
    d208:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    d20c:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    d210:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    d214:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    d216:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    d218:	bf08      	it	eq
    d21a:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    d21e:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    d220:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    d222:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d226:	429a      	cmp	r2, r3
    d228:	d114      	bne.n	d254 <event_connection_prepare+0x64c>
		     conn->conn_interval) ||
    d22a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    d22e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d230:	4299      	cmp	r1, r3
    d232:	d10f      	bne.n	d254 <event_connection_prepare+0x64c>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    d234:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d238:	435a      	muls	r2, r3
    d23a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d23e:	f242 7110 	movw	r1, #10000	; 0x2710
    d242:	fb01 2303 	mla	r3, r1, r3, r2
    d246:	3b01      	subs	r3, #1
    d248:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    d24c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    d24e:	b29b      	uxth	r3, r3
    d250:	429a      	cmp	r2, r3
    d252:	d03a      	beq.n	d2ca <event_connection_prepare+0x6c2>
			node_rx = packet_rx_reserve_get(2);
    d254:	2002      	movs	r0, #2
    d256:	f7fd fb75 	bl	a944 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    d25a:	bb28      	cbnz	r0, d2a8 <event_connection_prepare+0x6a0>
    d25c:	4b04      	ldr	r3, [pc, #16]	; (d270 <event_connection_prepare+0x668>)
    d25e:	9301      	str	r3, [sp, #4]
    d260:	9300      	str	r3, [sp, #0]
    d262:	4b04      	ldr	r3, [pc, #16]	; (d274 <event_connection_prepare+0x66c>)
    d264:	681c      	ldr	r4, [r3, #0]
    d266:	4b0d      	ldr	r3, [pc, #52]	; (d29c <event_connection_prepare+0x694>)
		LL_ASSERT(node_rx);
    d268:	4a04      	ldr	r2, [pc, #16]	; (d27c <event_connection_prepare+0x674>)
    d26a:	4905      	ldr	r1, [pc, #20]	; (d280 <event_connection_prepare+0x678>)
    d26c:	480d      	ldr	r0, [pc, #52]	; (d2a4 <event_connection_prepare+0x69c>)
    d26e:	e4dd      	b.n	cc2c <event_connection_prepare+0x24>
    d270:	000161ba 	.word	0x000161ba
    d274:	20003a5c 	.word	0x20003a5c
    d278:	00019743 	.word	0x00019743
    d27c:	000179e1 	.word	0x000179e1
    d280:	00017a29 	.word	0x00017a29
    d284:	00017955 	.word	0x00017955
    d288:	20000a1c 	.word	0x20000a1c
    d28c:	00019768 	.word	0x00019768
    d290:	0000b3c9 	.word	0x0000b3c9
    d294:	20003d98 	.word	0x20003d98
    d298:	000196f7 	.word	0x000196f7
    d29c:	0001970b 	.word	0x0001970b
    d2a0:	0000c125 	.word	0x0000c125
    d2a4:	00019f39 	.word	0x00019f39
			node_rx->hdr.handle = conn->handle;
    d2a8:	8c23      	ldrh	r3, [r4, #32]
    d2aa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d2ac:	2308      	movs	r3, #8
    d2ae:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    d2b0:	2300      	movs	r3, #0
    d2b2:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    d2b4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d2b8:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    d2ba:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    d2be:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    d2c0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d2c4:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    d2c6:	f7fe f9d9 	bl	b67c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    d2ca:	6823      	ldr	r3, [r4, #0]
    d2cc:	6866      	ldr	r6, [r4, #4]
    d2ce:	2b00      	cmp	r3, #0
    d2d0:	da09      	bge.n	d2e6 <event_connection_prepare+0x6de>
			u32_t ticks_prepare_to_start =
    d2d2:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    d2d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d2d8:	42b0      	cmp	r0, r6
    d2da:	bf2c      	ite	cs
    d2dc:	4480      	addcs	r8, r0
    d2de:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    d2e0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    d2e2:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    d2e6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    d2e8:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    d2ec:	49a0      	ldr	r1, [pc, #640]	; (d570 <event_connection_prepare+0x968>)
		conn_interval_old = instant_latency * conn->conn_interval;
    d2ee:	fb13 f307 	smulbb	r3, r3, r7
    d2f2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    d2f4:	fbb3 f2fa 	udiv	r2, r3, sl
    d2f8:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    d2fc:	fb1a f009 	smulbb	r0, sl, r9
    d300:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    d302:	4283      	cmp	r3, r0
    d304:	f080 80c1 	bcs.w	d48a <event_connection_prepare+0x882>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    d308:	1ac0      	subs	r0, r0, r3
    d30a:	f240 1223 	movw	r2, #291	; 0x123
    d30e:	4342      	muls	r2, r0
    d310:	17c3      	asrs	r3, r0, #31
    d312:	fb01 2303 	mla	r3, r1, r3, r2
    d316:	fba0 0101 	umull	r0, r1, r0, r1
    d31a:	4419      	add	r1, r3
    d31c:	a392      	add	r3, pc, #584	; (adr r3, d568 <event_connection_prepare+0x960>)
    d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d322:	f7f2 ff77 	bl	214 <__aeabi_uldivmod>
    d326:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d32a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d32e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    d330:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d332:	f8df b278 	ldr.w	fp, [pc, #632]	; d5ac <event_connection_prepare+0x9a4>
    d336:	1bdb      	subs	r3, r3, r7
    d338:	444b      	add	r3, r9
    d33a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    d33c:	6823      	ldr	r3, [r4, #0]
    d33e:	42b3      	cmp	r3, r6
    d340:	bf38      	it	cc
    d342:	4633      	movcc	r3, r6
    d344:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    d346:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    d34a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    d34e:	2b00      	cmp	r3, #0
    d350:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    d354:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    d356:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    d35a:	f280 80a7 	bge.w	d4ac <event_connection_prepare+0x8a4>
				conn->slave.window_widening_periodic_us *
    d35e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    d360:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d362:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    d366:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    d36a:	4a82      	ldr	r2, [pc, #520]	; (d574 <event_connection_prepare+0x96c>)
    d36c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    d370:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d374:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    d37c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    d380:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    d382:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d384:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    d388:	4b7b      	ldr	r3, [pc, #492]	; (d578 <event_connection_prepare+0x970>)
				conn->llcp.conn_upd.win_size * 1250;
    d38a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    d38e:	f205 253f 	addw	r5, r5, #575	; 0x23f
    d392:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    d396:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    d398:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    d39c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    d39e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    d3a0:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    d3a2:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    d3a4:	429f      	cmp	r7, r3
    d3a6:	bf94      	ite	ls
    d3a8:	65e7      	strls	r7, [r4, #92]	; 0x5c
    d3aa:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    d3ac:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    d3ae:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    d3b0:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d3b2:	fba0 010b 	umull	r0, r1, r0, fp
    d3b6:	a36c      	add	r3, pc, #432	; (adr r3, d568 <event_connection_prepare+0x960>)
    d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3bc:	f7f2 ff2a 	bl	214 <__aeabi_uldivmod>
    d3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d3c2:	1a1b      	subs	r3, r3, r0
    d3c4:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d3c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d3c8:	fbb3 f0f8 	udiv	r0, r3, r8
    d3cc:	fb08 f000 	mul.w	r0, r8, r0
    d3d0:	a365      	add	r3, pc, #404	; (adr r3, d568 <event_connection_prepare+0x960>)
    d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3d6:	fba0 010b 	umull	r0, r1, r0, fp
    d3da:	f7f2 ff1b 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    d3de:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d3e0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    d3e4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    d3e8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    d3ec:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    d3ee:	f242 7110 	movw	r1, #10000	; 0x2710
    d3f2:	fb01 6303 	mla	r3, r1, r3, r6
    d3f6:	3b01      	subs	r3, #1
    d3f8:	fbb3 f3f6 	udiv	r3, r3, r6
    d3fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d3fe:	4b5f      	ldr	r3, [pc, #380]	; (d57c <event_connection_prepare+0x974>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    d400:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    d404:	4433      	add	r3, r6
    d406:	fbb3 f3f6 	udiv	r3, r3, r6
    d40a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d40e:	4b5c      	ldr	r3, [pc, #368]	; (d580 <event_connection_prepare+0x978>)
    d410:	4433      	add	r3, r6
    d412:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d416:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d418:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d41a:	4299      	cmp	r1, r3
    d41c:	bfc4      	itt	gt
    d41e:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    d422:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    d424:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d428:	bfc8      	it	gt
    d42a:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    d42c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d430:	bfc8      	it	gt
    d432:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    d434:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    d438:	bf08      	it	eq
    d43a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    d43e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    d442:	2000      	movs	r0, #0
    d444:	2101      	movs	r1, #1
    d446:	f006 fb19 	bl	13a7c <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d44a:	2200      	movs	r2, #0
    d44c:	2101      	movs	r1, #1
		mayfly_was_enabled =
    d44e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d450:	4610      	mov	r0, r2
    d452:	f7fa fb87 	bl	7b64 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d456:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    d45a:	f641 2385 	movw	r3, #6789	; 0x1a85
    d45e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d460:	3207      	adds	r2, #7
		ticker_status =
    d462:	9300      	str	r3, [sp, #0]
    d464:	b2d2      	uxtb	r2, r2
    d466:	4b47      	ldr	r3, [pc, #284]	; (d584 <event_connection_prepare+0x97c>)
    d468:	4608      	mov	r0, r1
    d46a:	f7fb fa01 	bl	8870 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d46e:	f030 0802 	bics.w	r8, r0, #2
    d472:	d028      	beq.n	d4c6 <event_connection_prepare+0x8be>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d474:	4b44      	ldr	r3, [pc, #272]	; (d588 <event_connection_prepare+0x980>)
    d476:	9301      	str	r3, [sp, #4]
    d478:	9300      	str	r3, [sp, #0]
    d47a:	4b44      	ldr	r3, [pc, #272]	; (d58c <event_connection_prepare+0x984>)
    d47c:	4a44      	ldr	r2, [pc, #272]	; (d590 <event_connection_prepare+0x988>)
    d47e:	681c      	ldr	r4, [r3, #0]
    d480:	4944      	ldr	r1, [pc, #272]	; (d594 <event_connection_prepare+0x98c>)
    d482:	4b45      	ldr	r3, [pc, #276]	; (d598 <event_connection_prepare+0x990>)
    d484:	4845      	ldr	r0, [pc, #276]	; (d59c <event_connection_prepare+0x994>)
    d486:	f7ff bbd1 	b.w	cc2c <event_connection_prepare+0x24>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    d48a:	fb0a 3212 	mls	r2, sl, r2, r3
    d48e:	b292      	uxth	r2, r2
    d490:	fba2 0101 	umull	r0, r1, r2, r1
    d494:	f240 1323 	movw	r3, #291	; 0x123
    d498:	fb03 1102 	mla	r1, r3, r2, r1
    d49c:	a332      	add	r3, pc, #200	; (adr r3, d568 <event_connection_prepare+0x960>)
    d49e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d4a2:	f7f2 feb7 	bl	214 <__aeabi_uldivmod>
    d4a6:	eba8 0300 	sub.w	r3, r8, r0
    d4aa:	e740      	b.n	d32e <event_connection_prepare+0x726>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    d4ac:	990c      	ldr	r1, [sp, #48]	; 0x30
    d4ae:	a32e      	add	r3, pc, #184	; (adr r3, d568 <event_connection_prepare+0x960>)
    d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d4b4:	fba1 010b 	umull	r0, r1, r1, fp
    d4b8:	f7f2 feac 	bl	214 <__aeabi_uldivmod>
    d4bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    d4c0:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    d4c2:	4635      	mov	r5, r6
    d4c4:	e78e      	b.n	d3e4 <event_connection_prepare+0x7dc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    d4c6:	fba5 ab0b 	umull	sl, fp, r5, fp
    d4ca:	a327      	add	r3, pc, #156	; (adr r3, d568 <event_connection_prepare+0x960>)
    d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    d4d0:	4650      	mov	r0, sl
    d4d2:	4659      	mov	r1, fp
    d4d4:	f7f2 fe9e 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    d4d8:	4a31      	ldr	r2, [pc, #196]	; (d5a0 <event_connection_prepare+0x998>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d4da:	f894 6020 	ldrb.w	r6, [r4, #32]
    d4de:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    d4e2:	2307      	movs	r3, #7
    d4e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d4e8:	2100      	movs	r1, #0
    d4ea:	4343      	muls	r3, r0
    d4ec:	fb02 3301 	mla	r3, r2, r1, r3
    d4f0:	fba0 0102 	umull	r0, r1, r0, r2
    d4f4:	ebba 0000 	subs.w	r0, sl, r0
    d4f8:	4419      	add	r1, r3
    d4fa:	eb6b 0101 	sbc.w	r1, fp, r1
    d4fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d502:	2300      	movs	r3, #0
    d504:	f7f2 fe86 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d508:	68e3      	ldr	r3, [r4, #12]
    d50a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d50c:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    d510:	4924      	ldr	r1, [pc, #144]	; (d5a4 <event_connection_prepare+0x99c>)
		ticker_status =
    d512:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d514:	441a      	add	r2, r3
    d516:	4613      	mov	r3, r2
    d518:	4a23      	ldr	r2, [pc, #140]	; (d5a8 <event_connection_prepare+0x9a0>)
		ticker_status =
    d51a:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d51c:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    d520:	bf38      	it	cc
    d522:	460a      	movcc	r2, r1
    d524:	3607      	adds	r6, #7
		ticker_status =
    d526:	f641 2195 	movw	r1, #6805	; 0x1a95
    d52a:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d52c:	b2f6      	uxtb	r6, r6
		ticker_status =
    d52e:	4915      	ldr	r1, [pc, #84]	; (d584 <event_connection_prepare+0x97c>)
    d530:	9107      	str	r1, [sp, #28]
    d532:	9205      	str	r2, [sp, #20]
    d534:	9406      	str	r4, [sp, #24]
    d536:	f8cd 800c 	str.w	r8, [sp, #12]
    d53a:	9501      	str	r5, [sp, #4]
    d53c:	9700      	str	r7, [sp, #0]
    d53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d540:	4632      	mov	r2, r6
    d542:	4641      	mov	r1, r8
    d544:	4640      	mov	r0, r8
    d546:	f7fb f8f5 	bl	8734 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d54a:	f030 0002 	bics.w	r0, r0, #2
    d54e:	d191      	bne.n	d474 <event_connection_prepare+0x86c>
		if (mayfly_was_enabled) {
    d550:	f1b9 0f00 	cmp.w	r9, #0
    d554:	f000 838f 	beq.w	dc76 <event_connection_prepare+0x106e>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d558:	2201      	movs	r2, #1
    d55a:	4611      	mov	r1, r2
}
    d55c:	b00f      	add	sp, #60	; 0x3c
    d55e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    d562:	f7fa baff 	b.w	7b64 <mayfly_enable>
    d566:	bf00      	nop
    d568:	1afd498d 	.word	0x1afd498d
    d56c:	00000007 	.word	0x00000007
    d570:	09ce5400 	.word	0x09ce5400
    d574:	00019af2 	.word	0x00019af2
    d578:	000f4240 	.word	0x000f4240
    d57c:	026259ff 	.word	0x026259ff
    d580:	01c9c37f 	.word	0x01c9c37f
    d584:	0000b8a5 	.word	0x0000b8a5
    d588:	000161ba 	.word	0x000161ba
    d58c:	20003a5c 	.word	0x20003a5c
    d590:	000179e1 	.word	0x000179e1
    d594:	00017a29 	.word	0x00017a29
    d598:	0001970b 	.word	0x0001970b
    d59c:	000198d3 	.word	0x000198d3
    d5a0:	1afd498d 	.word	0x1afd498d
    d5a4:	0000de39 	.word	0x0000de39
    d5a8:	0000de3d 	.word	0x0000de3d
    d5ac:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    d5b0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d05e      	beq.n	d676 <event_connection_prepare+0xa6e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d5b8:	48c9      	ldr	r0, [pc, #804]	; (d8e0 <event_connection_prepare+0xcd8>)
    d5ba:	f7fa fa30 	bl	7a1e <mem_acquire>
		if (node_tx) {
    d5be:	4607      	mov	r7, r0
    d5c0:	b1e8      	cbz	r0, d5fe <event_connection_prepare+0x9f6>
			conn->llcp.chan_map.initiate = 0;
    d5c2:	2300      	movs	r3, #0
    d5c4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    d5c8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    d5ca:	3306      	adds	r3, #6
    d5cc:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    d5ce:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5d2:	7903      	ldrb	r3, [r0, #4]
    d5d4:	f043 0303 	orr.w	r3, r3, #3
    d5d8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d5da:	2308      	movs	r3, #8
    d5dc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d5de:	2301      	movs	r3, #1
    d5e0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    d5e2:	2205      	movs	r2, #5
    d5e4:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d5e8:	3008      	adds	r0, #8
    d5ea:	f7f4 fc41 	bl	1e70 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    d5ee:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d5f2:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    d5f6:	4639      	mov	r1, r7
    d5f8:	4620      	mov	r0, r4
    d5fa:	f7ff fa37 	bl	ca6c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    d5fe:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    d602:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    d606:	429a      	cmp	r2, r3
    d608:	d01e      	beq.n	d648 <event_connection_prepare+0xa40>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d60a:	2005      	movs	r0, #5
    d60c:	f7ff f88e 	bl	c72c <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d610:	48b3      	ldr	r0, [pc, #716]	; (d8e0 <event_connection_prepare+0xcd8>)
    d612:	f7fa fa04 	bl	7a1e <mem_acquire>
		if (node_tx) {
    d616:	4601      	mov	r1, r0
    d618:	b1b0      	cbz	r0, d648 <event_connection_prepare+0xa40>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    d61a:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    d61e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d622:	7903      	ldrb	r3, [r0, #4]
    d624:	f043 0303 	orr.w	r3, r3, #3
    d628:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d62a:	2302      	movs	r3, #2
    d62c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d62e:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    d630:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    d634:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    d636:	4620      	mov	r0, r4
    d638:	f7ff fa18 	bl	ca6c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    d63c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    d63e:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    d640:	bf98      	it	ls
    d642:	3301      	addls	r3, #1
    d644:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    d648:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    d64c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d650:	429a      	cmp	r2, r3
    d652:	f000 82f7 	beq.w	dc44 <event_connection_prepare+0x103c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d656:	2005      	movs	r0, #5
    d658:	f7ff f868 	bl	c72c <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    d65c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    d660:	f003 0303 	and.w	r3, r3, #3
    d664:	2b03      	cmp	r3, #3
    d666:	f200 8318 	bhi.w	dc9a <event_connection_prepare+0x1092>
    d66a:	e8df f013 	tbh	[pc, r3, lsl #1]
    d66e:	0291      	.short	0x0291
    d670:	02eb02eb 	.word	0x02eb02eb
    d674:	0307      	.short	0x0307
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    d676:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    d67a:	1af3      	subs	r3, r6, r3
    d67c:	041f      	lsls	r7, r3, #16
    d67e:	d4be      	bmi.n	d5fe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    d680:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d684:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    d688:	f104 0717 	add.w	r7, r4, #23
    d68c:	2205      	movs	r2, #5
    d68e:	f104 0179 	add.w	r1, r4, #121	; 0x79
    d692:	4638      	mov	r0, r7
    d694:	f7f4 fbec 	bl	1e70 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    d698:	2105      	movs	r1, #5
    d69a:	4638      	mov	r0, r7
    d69c:	f7fa fb6a 	bl	7d74 <util_ones_count_get>
		conn->data_chan_count =
    d6a0:	7f63      	ldrb	r3, [r4, #29]
    d6a2:	f360 0305 	bfi	r3, r0, #0, #6
    d6a6:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    d6a8:	2301      	movs	r3, #1
    d6aa:	7723      	strb	r3, [r4, #28]
    d6ac:	e7a7      	b.n	d5fe <event_connection_prepare+0x9f6>
	if (conn->llcp.encryption.initiate) {
    d6ae:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    d6b2:	f1b9 0f00 	cmp.w	r9, #0
    d6b6:	d1a2      	bne.n	d5fe <event_connection_prepare+0x9f6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d6b8:	4889      	ldr	r0, [pc, #548]	; (d8e0 <event_connection_prepare+0xcd8>)
    d6ba:	f7fa f9b0 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    d6be:	4607      	mov	r7, r0
    d6c0:	2800      	cmp	r0, #0
    d6c2:	d09c      	beq.n	d5fe <event_connection_prepare+0x9f6>
	if (!conn->role) {
    d6c4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d6c8:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    d6ca:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    d6ce:	db4d      	blt.n	d76c <event_connection_prepare+0xb64>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d6d0:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    d6d4:	465b      	mov	r3, fp
    d6d6:	464a      	mov	r2, r9
    d6d8:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d6dc:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d6e0:	f005 fd3e 	bl	13160 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    d6e4:	2210      	movs	r2, #16
    d6e6:	4659      	mov	r1, fp
    d6e8:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d6ec:	f7f4 fbc0 	bl	1e70 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d6f0:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d6f4:	2208      	movs	r2, #8
    d6f6:	f204 1033 	addw	r0, r4, #307	; 0x133
    d6fa:	f7f4 fbb9 	bl	1e70 <memcpy>
		conn->ccm_rx.direction = 0;
    d6fe:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    d702:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    d706:	f369 0300 	bfi	r3, r9, #0, #1
    d70a:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    d70e:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    d712:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    d716:	f043 0301 	orr.w	r3, r3, #1
    d71a:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    d71e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    d722:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    d726:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    d72a:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    d72e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d732:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d736:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d73a:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    d73e:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d742:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d746:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d74a:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    d74e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    d752:	4651      	mov	r1, sl
    d754:	4620      	mov	r0, r4
    d756:	f7ff fa17 	bl	cb88 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    d75a:	4639      	mov	r1, r7
    d75c:	4620      	mov	r0, r4
    d75e:	f7ff f985 	bl	ca6c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    d762:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d766:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    d76a:	e748      	b.n	d5fe <event_connection_prepare+0x9f6>
	else if (!conn->pause_tx || conn->refresh) {
    d76c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d770:	f003 0348 	and.w	r3, r3, #72	; 0x48
    d774:	2b08      	cmp	r3, #8
    d776:	f000 80a2 	beq.w	d8be <event_connection_prepare+0xcb6>
		if (conn->llcp.encryption.error_code) {
    d77a:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    d77e:	f1b9 0f00 	cmp.w	r9, #0
    d782:	d020      	beq.n	d7c6 <event_connection_prepare+0xbbe>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    d784:	7903      	ldrb	r3, [r0, #4]
    d786:	f043 0303 	orr.w	r3, r3, #3
    d78a:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    d78c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    d790:	0698      	lsls	r0, r3, #26
    d792:	d512      	bpl.n	d7ba <event_connection_prepare+0xbb2>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    d794:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    d798:	0759      	lsls	r1, r3, #29
    d79a:	d50e      	bpl.n	d7ba <event_connection_prepare+0xbb2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    d79c:	2311      	movs	r3, #17
    d79e:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d7a0:	2303      	movs	r3, #3
    d7a2:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    d7a4:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    d7a8:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d7aa:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    d7ac:	797b      	ldrb	r3, [r7, #5]
    d7ae:	3301      	adds	r3, #1
    d7b0:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    d7b2:	2300      	movs	r3, #0
    d7b4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    d7b8:	e7cf      	b.n	d75a <event_connection_prepare+0xb52>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    d7ba:	230d      	movs	r3, #13
    d7bc:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    d7be:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    d7c2:	2301      	movs	r3, #1
    d7c4:	e7f1      	b.n	d7aa <event_connection_prepare+0xba2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d7c6:	4846      	ldr	r0, [pc, #280]	; (d8e0 <event_connection_prepare+0xcd8>)
    d7c8:	f7fa f929 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    d7cc:	4682      	mov	sl, r0
    d7ce:	2800      	cmp	r0, #0
    d7d0:	f000 8314 	beq.w	ddfc <event_connection_prepare+0x11f4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d7d4:	7903      	ldrb	r3, [r0, #4]
    d7d6:	f043 0303 	orr.w	r3, r3, #3
    d7da:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d7dc:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    d7e0:	230d      	movs	r3, #13
    d7e2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d7e4:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    d7e8:	f100 0308 	add.w	r3, r0, #8
    d7ec:	4619      	mov	r1, r3
    d7ee:	2208      	movs	r2, #8
    d7f0:	6868      	ldr	r0, [r5, #4]
    d7f2:	930d      	str	r3, [sp, #52]	; 0x34
    d7f4:	f006 fefe 	bl	145f4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    d7f8:	f10a 0310 	add.w	r3, sl, #16
    d7fc:	4619      	mov	r1, r3
    d7fe:	465a      	mov	r2, fp
    d800:	6868      	ldr	r0, [r5, #4]
    d802:	930b      	str	r3, [sp, #44]	; 0x2c
    d804:	f006 fef6 	bl	145f4 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    d808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d80a:	2208      	movs	r2, #8
    d80c:	4619      	mov	r1, r3
    d80e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    d812:	f7f4 fb2d 	bl	1e70 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    d816:	465a      	mov	r2, fp
    d818:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d81a:	f504 708b 	add.w	r0, r4, #278	; 0x116
    d81e:	f7f4 fb27 	bl	1e70 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    d822:	4651      	mov	r1, sl
    d824:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d826:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    d82a:	f7ff f91f 	bl	ca6c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    d82e:	4653      	mov	r3, sl
    d830:	464a      	mov	r2, r9
    d832:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d836:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d83a:	f005 fc91 	bl	13160 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    d83e:	2210      	movs	r2, #16
    d840:	4651      	mov	r1, sl
    d842:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    d846:	f7f4 fb13 	bl	1e70 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    d84a:	2208      	movs	r2, #8
    d84c:	f504 7189 	add.w	r1, r4, #274	; 0x112
    d850:	f204 1033 	addw	r0, r4, #307	; 0x133
    d854:	f7f4 fb0c 	bl	1e70 <memcpy>
			conn->ccm_rx.direction = 1;
    d858:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    d85c:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    d860:	f043 0301 	orr.w	r3, r3, #1
    d864:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    d868:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    d86c:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    d870:	f369 0300 	bfi	r3, r9, #0, #1
    d874:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    d878:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    d87c:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    d880:	f043 0310 	orr.w	r3, r3, #16
    d884:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d888:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    d88a:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d88e:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    d892:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    d896:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    d89a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    d89e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    d8a2:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    d8a6:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    d8aa:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    d8ae:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8b2:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d8b4:	2301      	movs	r3, #1
    d8b6:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d8b8:	2305      	movs	r3, #5
    d8ba:	71fb      	strb	r3, [r7, #7]
    d8bc:	e74d      	b.n	d75a <event_connection_prepare+0xb52>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    d8be:	4651      	mov	r1, sl
    d8c0:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d8c4:	f7ff f960 	bl	cb88 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    d8c8:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d8cc:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d8d0:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    d8d4:	f369 03c3 	bfi	r3, r9, #3, #1
    d8d8:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d8dc:	e73d      	b.n	d75a <event_connection_prepare+0xb52>
    d8de:	bf00      	nop
    d8e0:	20000a1c 	.word	0x20000a1c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d8e4:	48b5      	ldr	r0, [pc, #724]	; (dbbc <event_connection_prepare+0xfb4>)
    d8e6:	f7fa f89a 	bl	7a1e <mem_acquire>
	if (node_tx) {
    d8ea:	4607      	mov	r7, r0
    d8ec:	2800      	cmp	r0, #0
    d8ee:	f43f ae86 	beq.w	d5fe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    d8f2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d8f6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    d8fa:	4bb1      	ldr	r3, [pc, #708]	; (dbc0 <event_connection_prepare+0xfb8>)
    d8fc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d900:	7903      	ldrb	r3, [r0, #4]
    d902:	f043 0303 	orr.w	r3, r3, #3
    d906:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d908:	2309      	movs	r3, #9
    d90a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    d90c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d910:	2b00      	cmp	r3, #0
    d912:	bfac      	ite	ge
    d914:	2308      	movge	r3, #8
    d916:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    d918:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    d91a:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    d91c:	2100      	movs	r1, #0
    d91e:	4410      	add	r0, r2
    d920:	f7f4 fad2 	bl	1ec8 <memset>
			conn->llcp_features & 0xFF;
    d924:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    d928:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    d92a:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    d92c:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    d92e:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    d930:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    d932:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    d934:	4620      	mov	r0, r4
    d936:	f7ff f899 	bl	ca6c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d93a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d93e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    d942:	e65c      	b.n	d5fe <event_connection_prepare+0x9f6>
	if (conn->llcp_version.tx == 0) {
    d944:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    d948:	07da      	lsls	r2, r3, #31
    d94a:	d424      	bmi.n	d996 <event_connection_prepare+0xd8e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d94c:	489b      	ldr	r0, [pc, #620]	; (dbbc <event_connection_prepare+0xfb4>)
    d94e:	f7fa f866 	bl	7a1e <mem_acquire>
		if (node_tx) {
    d952:	4601      	mov	r1, r0
    d954:	2800      	cmp	r0, #0
    d956:	f43f ae52 	beq.w	d5fe <event_connection_prepare+0x9f6>
			conn->llcp_ack = conn->llcp_req;
    d95a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d95e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    d962:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    d966:	f043 0301 	orr.w	r3, r3, #1
    d96a:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d96e:	7903      	ldrb	r3, [r0, #4]
    d970:	f043 0303 	orr.w	r3, r3, #3
    d974:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    d976:	2306      	movs	r3, #6
    d978:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d97a:	230c      	movs	r3, #12
    d97c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    d97e:	2309      	movs	r3, #9
    d980:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    d982:	f06f 030e 	mvn.w	r3, #14
    d986:	7243      	strb	r3, [r0, #9]
    d988:	2305      	movs	r3, #5
    d98a:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    d98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d990:	72c3      	strb	r3, [r0, #11]
    d992:	7303      	strb	r3, [r0, #12]
    d994:	e7ce      	b.n	d934 <event_connection_prepare+0xd2c>
	} else if (conn->llcp_version.rx != 0) {
    d996:	079b      	lsls	r3, r3, #30
    d998:	d528      	bpl.n	d9ec <event_connection_prepare+0xde4>
		conn->llcp_ack = conn->llcp_req;
    d99a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    d99e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    d9a2:	2002      	movs	r0, #2
    d9a4:	f7fc ffce 	bl	a944 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d9a8:	b930      	cbnz	r0, d9b8 <event_connection_prepare+0xdb0>
    d9aa:	4b86      	ldr	r3, [pc, #536]	; (dbc4 <event_connection_prepare+0xfbc>)
    d9ac:	9301      	str	r3, [sp, #4]
    d9ae:	9300      	str	r3, [sp, #0]
    d9b0:	4b85      	ldr	r3, [pc, #532]	; (dbc8 <event_connection_prepare+0xfc0>)
    d9b2:	681c      	ldr	r4, [r3, #0]
    d9b4:	4b85      	ldr	r3, [pc, #532]	; (dbcc <event_connection_prepare+0xfc4>)
    d9b6:	e457      	b.n	d268 <event_connection_prepare+0x660>
		node_rx->hdr.handle = conn->handle;
    d9b8:	8c23      	ldrh	r3, [r4, #32]
    d9ba:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d9bc:	2301      	movs	r3, #1
    d9be:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    d9c0:	7a03      	ldrb	r3, [r0, #8]
    d9c2:	f043 0303 	orr.w	r3, r3, #3
    d9c6:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    d9c8:	2306      	movs	r3, #6
    d9ca:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    d9cc:	230c      	movs	r3, #12
    d9ce:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    d9d0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    d9d4:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    d9d6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    d9da:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    d9de:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    d9e2:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    d9e6:	f7fd fe49 	bl	b67c <packet_rx_enqueue>
    d9ea:	e608      	b.n	d5fe <event_connection_prepare+0x9f6>
		LL_ASSERT(0);
    d9ec:	4b75      	ldr	r3, [pc, #468]	; (dbc4 <event_connection_prepare+0xfbc>)
    d9ee:	9301      	str	r3, [sp, #4]
    d9f0:	9300      	str	r3, [sp, #0]
    d9f2:	4b75      	ldr	r3, [pc, #468]	; (dbc8 <event_connection_prepare+0xfc0>)
    d9f4:	681c      	ldr	r4, [r3, #0]
    d9f6:	4b75      	ldr	r3, [pc, #468]	; (dbcc <event_connection_prepare+0xfc4>)
    d9f8:	f7ff bac2 	b.w	cf80 <event_connection_prepare+0x378>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d9fc:	486f      	ldr	r0, [pc, #444]	; (dbbc <event_connection_prepare+0xfb4>)
    d9fe:	f7fa f80e 	bl	7a1e <mem_acquire>
	if (node_tx) {
    da02:	4601      	mov	r1, r0
    da04:	2800      	cmp	r0, #0
    da06:	f43f adfa 	beq.w	d5fe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    da0a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    da0e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da12:	7903      	ldrb	r3, [r0, #4]
    da14:	f043 0303 	orr.w	r3, r3, #3
    da18:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    da1a:	2301      	movs	r3, #1
    da1c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    da1e:	2312      	movs	r3, #18
    da20:	71c3      	strb	r3, [r0, #7]
    da22:	e787      	b.n	d934 <event_connection_prepare+0xd2c>
	if (conn->llcp.phy_upd_ind.initiate) {
    da24:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    da28:	07d7      	lsls	r7, r2, #31
    da2a:	d554      	bpl.n	dad6 <event_connection_prepare+0xece>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da2c:	4863      	ldr	r0, [pc, #396]	; (dbbc <event_connection_prepare+0xfb4>)
    da2e:	f7f9 fff6 	bl	7a1e <mem_acquire>
		if (node_tx) {
    da32:	4607      	mov	r7, r0
    da34:	2800      	cmp	r0, #0
    da36:	f43f ade2 	beq.w	d5fe <event_connection_prepare+0x9f6>
			conn->llcp.phy_upd_ind.initiate = 0;
    da3a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    da3e:	f36f 0300 	bfc	r3, #0, #1
    da42:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    da46:	b2db      	uxtb	r3, r3
    da48:	f3c3 0982 	ubfx	r9, r3, #2, #3
    da4c:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    da50:	d13b      	bne.n	daca <event_connection_prepare+0xec2>
				conn->llcp_ack = conn->llcp_req;
    da52:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    da56:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    da5a:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    da5c:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    da60:	d51d      	bpl.n	da9e <event_connection_prepare+0xe96>
					node_rx = packet_rx_reserve_get(2);
    da62:	2002      	movs	r0, #2
    da64:	f7fc ff6e 	bl	a944 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    da68:	b938      	cbnz	r0, da7a <event_connection_prepare+0xe72>
		LL_ASSERT(node_rx);
    da6a:	4b56      	ldr	r3, [pc, #344]	; (dbc4 <event_connection_prepare+0xfbc>)
    da6c:	9301      	str	r3, [sp, #4]
    da6e:	9300      	str	r3, [sp, #0]
    da70:	4b55      	ldr	r3, [pc, #340]	; (dbc8 <event_connection_prepare+0xfc0>)
    da72:	681c      	ldr	r4, [r3, #0]
    da74:	4b56      	ldr	r3, [pc, #344]	; (dbd0 <event_connection_prepare+0xfc8>)
    da76:	f7ff bbf7 	b.w	d268 <event_connection_prepare+0x660>
					node_rx->hdr.handle = conn->handle;
    da7a:	8c23      	ldrh	r3, [r4, #32]
    da7c:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    da7e:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    da82:	230c      	movs	r3, #12
    da84:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    da86:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    da8a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    da8e:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    da90:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    da94:	f3c3 0302 	ubfx	r3, r3, #0, #3
    da98:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    da9a:	f7fd fdef 	bl	b67c <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da9e:	793b      	ldrb	r3, [r7, #4]
    daa0:	f043 0303 	orr.w	r3, r3, #3
    daa4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    daa6:	2305      	movs	r3, #5
    daa8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    daaa:	2318      	movs	r3, #24
    daac:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    daae:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dab2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    dab6:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    dab8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dabc:	f3c3 1342 	ubfx	r3, r3, #5, #3
    dac0:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    dac2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    dac6:	817b      	strh	r3, [r7, #10]
    dac8:	e595      	b.n	d5f6 <event_connection_prepare+0x9ee>
								 conn->latency +
    daca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    dacc:	3306      	adds	r3, #6
    dace:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    dad0:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    dad4:	e7e3      	b.n	da9e <event_connection_prepare+0xe96>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    dad6:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    dada:	1af3      	subs	r3, r6, r3
    dadc:	0419      	lsls	r1, r3, #16
    dade:	f53f ad8e 	bmi.w	d5fe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    dae2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    dae6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    daea:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    daee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    daf2:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    daf6:	bf18      	it	ne
    daf8:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    dafc:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    db00:	bf1c      	itt	ne
    db02:	f367 03c5 	bfine	r3, r7, #3, #3
    db06:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    db0a:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    db0e:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    db12:	d008      	beq.n	db26 <event_connection_prepare+0xf1e>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    db14:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    db18:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    db1c:	095b      	lsrs	r3, r3, #5
    db1e:	f363 0702 	bfi	r7, r3, #0, #3
    db22:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    db26:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    db2a:	461f      	mov	r7, r3
    db2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    db30:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    db34:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    db36:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    db3a:	d40b      	bmi.n	db54 <event_connection_prepare+0xf4c>
    db3c:	b2fb      	uxtb	r3, r7
    db3e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    db42:	4283      	cmp	r3, r0
    db44:	d106      	bne.n	db54 <event_connection_prepare+0xf4c>
		    (conn->phy_rx == old_rx)) {
    db46:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    db4a:	f003 0307 	and.w	r3, r3, #7
    db4e:	428b      	cmp	r3, r1
    db50:	f43f ad55 	beq.w	d5fe <event_connection_prepare+0x9f6>
		node_rx = packet_rx_reserve_get(2);
    db54:	2002      	movs	r0, #2
    db56:	f7fc fef5 	bl	a944 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    db5a:	2800      	cmp	r0, #0
    db5c:	d085      	beq.n	da6a <event_connection_prepare+0xe62>
		node_rx->hdr.handle = conn->handle;
    db5e:	8c23      	ldrh	r3, [r4, #32]
    db60:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    db62:	230c      	movs	r3, #12
    db64:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    db66:	2300      	movs	r3, #0
    db68:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    db6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    db6e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    db72:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    db74:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    db78:	f3c3 0302 	ubfx	r3, r3, #0, #3
    db7c:	7343      	strb	r3, [r0, #13]
    db7e:	e732      	b.n	d9e6 <event_connection_prepare+0xdde>
			LL_ASSERT(0);
    db80:	4b10      	ldr	r3, [pc, #64]	; (dbc4 <event_connection_prepare+0xfbc>)
    db82:	9301      	str	r3, [sp, #4]
    db84:	9300      	str	r3, [sp, #0]
    db86:	4b10      	ldr	r3, [pc, #64]	; (dbc8 <event_connection_prepare+0xfc0>)
    db88:	681c      	ldr	r4, [r3, #0]
    db8a:	4b12      	ldr	r3, [pc, #72]	; (dbd4 <event_connection_prepare+0xfcc>)
    db8c:	f7ff b9f8 	b.w	cf80 <event_connection_prepare+0x378>
		free_count_rx = packet_rx_acquired_count_get() +
    db90:	f7fc fec2 	bl	a918 <packet_rx_acquired_count_get>
    db94:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    db96:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    db9a:	f7f9 ff6f 	bl	7a7c <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    db9e:	4438      	add	r0, r7
    dba0:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    dba2:	28ff      	cmp	r0, #255	; 0xff
    dba4:	d920      	bls.n	dbe8 <event_connection_prepare+0xfe0>
		LL_ASSERT(free_count_rx <= 0xFF);
    dba6:	4b07      	ldr	r3, [pc, #28]	; (dbc4 <event_connection_prepare+0xfbc>)
    dba8:	9301      	str	r3, [sp, #4]
    dbaa:	9300      	str	r3, [sp, #0]
    dbac:	4b06      	ldr	r3, [pc, #24]	; (dbc8 <event_connection_prepare+0xfc0>)
    dbae:	4a0a      	ldr	r2, [pc, #40]	; (dbd8 <event_connection_prepare+0xfd0>)
    dbb0:	681c      	ldr	r4, [r3, #0]
    dbb2:	490a      	ldr	r1, [pc, #40]	; (dbdc <event_connection_prepare+0xfd4>)
    dbb4:	4b0a      	ldr	r3, [pc, #40]	; (dbe0 <event_connection_prepare+0xfd8>)
    dbb6:	480b      	ldr	r0, [pc, #44]	; (dbe4 <event_connection_prepare+0xfdc>)
    dbb8:	f7ff b838 	b.w	cc2c <event_connection_prepare+0x24>
    dbbc:	20000a1c 	.word	0x20000a1c
    dbc0:	000141ff 	.word	0x000141ff
    dbc4:	000161ba 	.word	0x000161ba
    dbc8:	20003a5c 	.word	0x20003a5c
    dbcc:	0001971f 	.word	0x0001971f
    dbd0:	0001977b 	.word	0x0001977b
    dbd4:	00019792 	.word	0x00019792
    dbd8:	000179e1 	.word	0x000179e1
    dbdc:	00017a29 	.word	0x00017a29
    dbe0:	00019759 	.word	0x00019759
    dbe4:	00019921 	.word	0x00019921
		if (_radio.packet_rx_data_count != free_count_rx) {
    dbe8:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    dbec:	4283      	cmp	r3, r0
    dbee:	d129      	bne.n	dc44 <event_connection_prepare+0x103c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dbf0:	4885      	ldr	r0, [pc, #532]	; (de08 <event_connection_prepare+0x1200>)
    dbf2:	f7f9 ff14 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    dbf6:	4601      	mov	r1, r0
    dbf8:	b320      	cbz	r0, dc44 <event_connection_prepare+0x103c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    dbfa:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    dbfe:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    dc02:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    dc06:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    dc08:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    dc0a:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    dc0c:	f365 0301 	bfi	r3, r5, #0, #2
    dc10:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc14:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    dc16:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc18:	f043 0303 	orr.w	r3, r3, #3
    dc1c:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    dc1e:	2309      	movs	r3, #9
    dc20:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    dc22:	2314      	movs	r3, #20
    dc24:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    dc26:	231b      	movs	r3, #27
    dc28:	720b      	strb	r3, [r1, #8]
    dc2a:	2300      	movs	r3, #0
    dc2c:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    dc2e:	2348      	movs	r3, #72	; 0x48
    dc30:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    dc32:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    dc34:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    dc36:	4620      	mov	r0, r4
    dc38:	f7fe ff18 	bl	ca6c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    dc3c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    dc40:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    dc44:	f894 3020 	ldrb.w	r3, [r4, #32]
    dc48:	f994 501d 	ldrsb.w	r5, [r4, #29]
    dc4c:	486f      	ldr	r0, [pc, #444]	; (de0c <event_connection_prepare+0x1204>)
    dc4e:	4970      	ldr	r1, [pc, #448]	; (de10 <event_connection_prepare+0x1208>)
    dc50:	68a2      	ldr	r2, [r4, #8]
    dc52:	9403      	str	r4, [sp, #12]
    dc54:	3307      	adds	r3, #7
    dc56:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    dc5a:	bf38      	it	cc
    dc5c:	4601      	movcc	r1, r0
    dc5e:	b2db      	uxtb	r3, r3
    dc60:	e88d 000c 	stmia.w	sp, {r2, r3}
    dc64:	9102      	str	r1, [sp, #8]
    dc66:	1d23      	adds	r3, r4, #4
    dc68:	4622      	mov	r2, r4
    dc6a:	990c      	ldr	r1, [sp, #48]	; 0x30
    dc6c:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    dc6e:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    dc70:	f7fe fd6a 	bl	c748 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    dc74:	8466      	strh	r6, [r4, #34]	; 0x22
}
    dc76:	b00f      	add	sp, #60	; 0x3c
    dc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    dc7c:	f7fc fe4c 	bl	a918 <packet_rx_acquired_count_get>
    dc80:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    dc82:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    dc86:	f7f9 fef9 	bl	7a7c <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    dc8a:	4438      	add	r0, r7
    dc8c:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    dc8e:	28ff      	cmp	r0, #255	; 0xff
    dc90:	d889      	bhi.n	dba6 <event_connection_prepare+0xf9e>
		if (_radio.packet_rx_data_count != free_count_rx) {
    dc92:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    dc96:	4283      	cmp	r3, r0
    dc98:	d007      	beq.n	dcaa <event_connection_prepare+0x10a2>
		LL_ASSERT(0);
    dc9a:	4b5e      	ldr	r3, [pc, #376]	; (de14 <event_connection_prepare+0x120c>)
    dc9c:	9301      	str	r3, [sp, #4]
    dc9e:	9300      	str	r3, [sp, #0]
    dca0:	4b5d      	ldr	r3, [pc, #372]	; (de18 <event_connection_prepare+0x1210>)
    dca2:	681c      	ldr	r4, [r3, #0]
    dca4:	4b5d      	ldr	r3, [pc, #372]	; (de1c <event_connection_prepare+0x1214>)
    dca6:	f7ff b96b 	b.w	cf80 <event_connection_prepare+0x378>
		conn->llcp_length.ack = conn->llcp_length.req;
    dcaa:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    dcae:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    dcb2:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    dcb6:	2100      	movs	r1, #0
    dcb8:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    dcbc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    dcc0:	f361 02c3 	bfi	r2, r1, #3, #1
    dcc4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    dcc8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    dccc:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    dcce:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    dcd2:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    dcd4:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    dcd8:	f7f9 fed0 	bl	7a7c <mem_free_count_get>
		if (_radio.advertiser.conn) {
    dcdc:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    dce0:	b10b      	cbz	r3, dce6 <event_connection_prepare+0x10de>
			free_count_conn++;
    dce2:	3001      	adds	r0, #1
    dce4:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    dce6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    dcea:	b10b      	cbz	r3, dcf0 <event_connection_prepare+0x10e8>
			free_count_conn++;
    dcec:	3001      	adds	r0, #1
    dcee:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    dcf0:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    dcf2:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    dcf6:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    dcf8:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    dcfa:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    dcfe:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    dd00:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    dd02:	d058      	beq.n	ddb6 <event_connection_prepare+0x11ae>
    dd04:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    dd08:	42bb      	cmp	r3, r7
    dd0a:	d354      	bcc.n	ddb6 <event_connection_prepare+0x11ae>
		node_rx = packet_rx_reserve_get(2);
    dd0c:	2002      	movs	r0, #2
    dd0e:	f7fc fe19 	bl	a944 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    dd12:	2800      	cmp	r0, #0
    dd14:	d15b      	bne.n	ddce <event_connection_prepare+0x11c6>
    dd16:	4b3f      	ldr	r3, [pc, #252]	; (de14 <event_connection_prepare+0x120c>)
    dd18:	9301      	str	r3, [sp, #4]
    dd1a:	9300      	str	r3, [sp, #0]
    dd1c:	4b3e      	ldr	r3, [pc, #248]	; (de18 <event_connection_prepare+0x1210>)
    dd1e:	681c      	ldr	r4, [r3, #0]
    dd20:	4b3e      	ldr	r3, [pc, #248]	; (de1c <event_connection_prepare+0x1214>)
    dd22:	f7ff baa1 	b.w	d268 <event_connection_prepare+0x660>
				if (_radio.packet_rx_acquire == 0) {
    dd26:	b90b      	cbnz	r3, dd2c <event_connection_prepare+0x1124>
						_radio.packet_rx_count - 1;
    dd28:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    dd2c:	3b01      	subs	r3, #1
    dd2e:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    dd32:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    dd36:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    dd3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    dd3e:	4649      	mov	r1, r9
    dd40:	6818      	ldr	r0, [r3, #0]
    dd42:	f7f9 fe86 	bl	7a52 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    dd46:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    dd4a:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    dd4e:	3a01      	subs	r2, #1
    dd50:	4293      	cmp	r3, r2
    dd52:	db0a      	blt.n	dd6a <event_connection_prepare+0x1162>
    dd54:	4b2f      	ldr	r3, [pc, #188]	; (de14 <event_connection_prepare+0x120c>)
    dd56:	9301      	str	r3, [sp, #4]
    dd58:	9300      	str	r3, [sp, #0]
    dd5a:	4b2f      	ldr	r3, [pc, #188]	; (de18 <event_connection_prepare+0x1210>)
    dd5c:	4a30      	ldr	r2, [pc, #192]	; (de20 <event_connection_prepare+0x1218>)
    dd5e:	681c      	ldr	r4, [r3, #0]
    dd60:	4930      	ldr	r1, [pc, #192]	; (de24 <event_connection_prepare+0x121c>)
    dd62:	4b2e      	ldr	r3, [pc, #184]	; (de1c <event_connection_prepare+0x1214>)
    dd64:	4830      	ldr	r0, [pc, #192]	; (de28 <event_connection_prepare+0x1220>)
    dd66:	f7fe bf61 	b.w	cc2c <event_connection_prepare+0x24>
				_radio.link_rx_data_quota++;
    dd6a:	3301      	adds	r3, #1
    dd6c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    dd70:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    dd74:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    dd78:	4293      	cmp	r3, r2
    dd7a:	d1d4      	bne.n	dd26 <event_connection_prepare+0x111e>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    dd7c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    dd7e:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    dd82:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    dd84:	bf9a      	itte	ls
    dd86:	2334      	movls	r3, #52	; 0x34
    dd88:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    dd8c:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    dd90:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    dd94:	fbb2 f2f1 	udiv	r2, r2, r1
    dd98:	b2d2      	uxtb	r2, r2
    dd9a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    dd9e:	b96a      	cbnz	r2, ddbc <event_connection_prepare+0x11b4>
    dda0:	4b1c      	ldr	r3, [pc, #112]	; (de14 <event_connection_prepare+0x120c>)
    dda2:	9301      	str	r3, [sp, #4]
    dda4:	9300      	str	r3, [sp, #0]
    dda6:	4b1c      	ldr	r3, [pc, #112]	; (de18 <event_connection_prepare+0x1210>)
    dda8:	4a1d      	ldr	r2, [pc, #116]	; (de20 <event_connection_prepare+0x1218>)
    ddaa:	681c      	ldr	r4, [r3, #0]
    ddac:	491d      	ldr	r1, [pc, #116]	; (de24 <event_connection_prepare+0x121c>)
    ddae:	4b1b      	ldr	r3, [pc, #108]	; (de1c <event_connection_prepare+0x1214>)
    ddb0:	481e      	ldr	r0, [pc, #120]	; (de2c <event_connection_prepare+0x1224>)
    ddb2:	f7fe bf3b 	b.w	cc2c <event_connection_prepare+0x24>
				mem_release(node_rx->hdr.onion.link,
    ddb6:	f8df 907c 	ldr.w	r9, [pc, #124]	; de34 <event_connection_prepare+0x122c>
    ddba:	e7d9      	b.n	dd70 <event_connection_prepare+0x1168>
			mem_init(_radio.pkt_rx_data_pool,
    ddbc:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    ddc0:	4b1b      	ldr	r3, [pc, #108]	; (de30 <event_connection_prepare+0x1228>)
    ddc2:	f7f9 fe05 	bl	79d0 <mem_init>
			packet_rx_allocate(4);
    ddc6:	2004      	movs	r0, #4
    ddc8:	f7fc fe34 	bl	aa34 <packet_rx_allocate>
    ddcc:	e79e      	b.n	dd0c <event_connection_prepare+0x1104>
		node_rx->hdr.handle = conn->handle;
    ddce:	8c23      	ldrh	r3, [r4, #32]
    ddd0:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ddd2:	2301      	movs	r3, #1
    ddd4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    ddd6:	7a03      	ldrb	r3, [r0, #8]
    ddd8:	f043 0303 	orr.w	r3, r3, #3
    dddc:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    ddde:	2309      	movs	r3, #9
    dde0:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dde2:	2315      	movs	r3, #21
    dde4:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    dde6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    dde8:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    ddea:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    ddec:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    ddee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    ddf0:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    ddf2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    ddf4:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    ddf6:	f7fd fc41 	bl	b67c <packet_rx_enqueue>
    ddfa:	e723      	b.n	dc44 <event_connection_prepare+0x103c>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ddfc:	4902      	ldr	r1, [pc, #8]	; (de08 <event_connection_prepare+0x1200>)
    ddfe:	4638      	mov	r0, r7
    de00:	f7f9 fe27 	bl	7a52 <mem_release>
    de04:	f7ff bbfb 	b.w	d5fe <event_connection_prepare+0x9f6>
    de08:	20000a1c 	.word	0x20000a1c
    de0c:	0000e175 	.word	0x0000e175
    de10:	0000de7d 	.word	0x0000de7d
    de14:	000161ba 	.word	0x000161ba
    de18:	20003a5c 	.word	0x20003a5c
    de1c:	00019759 	.word	0x00019759
    de20:	000179e1 	.word	0x000179e1
    de24:	00017a29 	.word	0x00017a29
    de28:	00019958 	.word	0x00019958
    de2c:	000199b2 	.word	0x000199b2
    de30:	200009f0 	.word	0x200009f0
    de34:	20000a08 	.word	0x20000a08

0000de38 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    de38:	f7fe bee6 	b.w	cc08 <event_connection_prepare>

0000de3c <event_slave_prepare>:
    de3c:	f7fe bee4 	b.w	cc08 <event_connection_prepare>

0000de40 <connection_configure>:
{
    de40:	b510      	push	{r4, lr}
    de42:	4604      	mov	r4, r0
	radio_reset();
    de44:	f005 fa68 	bl	13318 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    de48:	2000      	movs	r0, #0
    de4a:	f005 fa8f 	bl	1336c <radio_tx_power_set>
	radio_isr_set(isr);
    de4e:	480a      	ldr	r0, [pc, #40]	; (de78 <connection_configure+0x38>)
    de50:	f005 fa2c 	bl	132ac <radio_isr_set>
	radio_aa_set(conn->access_addr);
    de54:	f104 0010 	add.w	r0, r4, #16
    de58:	f005 faa6 	bl	133a8 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    de5c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    de5e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    de60:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    de62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    de66:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    de68:	f240 605b 	movw	r0, #1627	; 0x65b
    de6c:	4319      	orrs	r1, r3
}
    de6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    de72:	f005 bb41 	b.w	134f8 <radio_crc_configure>
    de76:	bf00      	nop
    de78:	0000f589 	.word	0x0000f589

0000de7c <event_slave>:
{
    de7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    de80:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    de82:	4b74      	ldr	r3, [pc, #464]	; (e054 <event_slave+0x1d8>)
    de84:	7cda      	ldrb	r2, [r3, #19]
{
    de86:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    de88:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    de8c:	461d      	mov	r5, r3
    de8e:	b17a      	cbz	r2, deb0 <event_slave+0x34>
    de90:	4b71      	ldr	r3, [pc, #452]	; (e058 <event_slave+0x1dc>)
    de92:	9301      	str	r3, [sp, #4]
    de94:	9300      	str	r3, [sp, #0]
    de96:	4b71      	ldr	r3, [pc, #452]	; (e05c <event_slave+0x1e0>)
    de98:	4a71      	ldr	r2, [pc, #452]	; (e060 <event_slave+0x1e4>)
    de9a:	681c      	ldr	r4, [r3, #0]
    de9c:	4971      	ldr	r1, [pc, #452]	; (e064 <event_slave+0x1e8>)
    de9e:	4b72      	ldr	r3, [pc, #456]	; (e068 <event_slave+0x1ec>)
    dea0:	4872      	ldr	r0, [pc, #456]	; (e06c <event_slave+0x1f0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    dea2:	47a0      	blx	r4
    dea4:	4040      	eors	r0, r0
    dea6:	f380 8811 	msr	BASEPRI, r0
    deaa:	f04f 0004 	mov.w	r0, #4
    deae:	df02      	svc	2
    deb0:	7c1b      	ldrb	r3, [r3, #16]
    deb2:	8c22      	ldrh	r2, [r4, #32]
    deb4:	b2db      	uxtb	r3, r3
    deb6:	3207      	adds	r2, #7
    deb8:	4293      	cmp	r3, r2
    deba:	d009      	beq.n	ded0 <event_slave+0x54>
    debc:	4b66      	ldr	r3, [pc, #408]	; (e058 <event_slave+0x1dc>)
    debe:	9301      	str	r3, [sp, #4]
    dec0:	9300      	str	r3, [sp, #0]
    dec2:	4b66      	ldr	r3, [pc, #408]	; (e05c <event_slave+0x1e0>)
    dec4:	4a66      	ldr	r2, [pc, #408]	; (e060 <event_slave+0x1e4>)
    dec6:	681c      	ldr	r4, [r3, #0]
    dec8:	4966      	ldr	r1, [pc, #408]	; (e064 <event_slave+0x1e8>)
    deca:	4b67      	ldr	r3, [pc, #412]	; (e068 <event_slave+0x1ec>)
    decc:	4868      	ldr	r0, [pc, #416]	; (e070 <event_slave+0x1f4>)
    dece:	e7e8      	b.n	dea2 <event_slave+0x26>
	_radio.packet_counter = 0;
    ded0:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    ded4:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    ded8:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    deda:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    dedc:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    dede:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    dee0:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    dee2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    dee4:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    dee8:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    deea:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    deec:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    deee:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    def0:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    def2:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    def4:	f7ff ffa4 	bl	de40 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    def8:	2096      	movs	r0, #150	; 0x96
    defa:	f005 fbb7 	bl	1366c <radio_tmr_tifs_set>
				     conn->phy_flags);
    defe:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    df02:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    df06:	09d3      	lsrs	r3, r2, #7
    df08:	4631      	mov	r1, r6
    df0a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    df0e:	f000 0007 	and.w	r0, r0, #7
    df12:	f005 fb1b 	bl	1354c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    df16:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    df1a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    df1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    df22:	4620      	mov	r0, r4
    df24:	3108      	adds	r1, #8
    df26:	f7fd f895 	bl	b054 <rx_packet_set>
	if (conn->data_chan_sel) {
    df2a:	7f63      	ldrb	r3, [r4, #29]
    df2c:	f013 0f40 	tst.w	r3, #64	; 0x40
    df30:	f104 0217 	add.w	r2, r4, #23
    df34:	d05a      	beq.n	dfec <event_slave+0x170>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    df36:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    df38:	8be1      	ldrh	r1, [r4, #30]
    df3a:	3801      	subs	r0, #1
    df3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    df40:	b280      	uxth	r0, r0
    df42:	f7fe fd4f 	bl	c9e4 <chan_sel_2>
	chan_set(data_chan_use);
    df46:	f7fd fff5 	bl	bf34 <chan_set>
	conn->slave.window_widening_event_us +=
    df4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    df4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    df4e:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    df50:	2200      	movs	r2, #0
    df52:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    df54:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    df56:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    df58:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    df5a:	bf88      	it	hi
    df5c:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    df5e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    df60:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    df62:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    df64:	4413      	add	r3, r2
    df66:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    df68:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    df6a:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    df6c:	f107 0109 	add.w	r1, r7, #9
    df70:	4630      	mov	r0, r6
    df72:	f005 fb87 	bl	13684 <radio_tmr_start>
    df76:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    df78:	f005 fc20 	bl	137bc <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    df7c:	4630      	mov	r0, r6
    df7e:	f005 fc3f 	bl	13800 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    df82:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    df84:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    df86:	f103 0650 	add.w	r6, r3, #80	; 0x50
    df8a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    df8e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    df92:	2101      	movs	r1, #1
    df94:	f000 0007 	and.w	r0, r0, #7
    df98:	f005 fa5f 	bl	1345a <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    df9c:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    df9e:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    dfa0:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    dfa4:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    dfa8:	2802      	cmp	r0, #2
    dfaa:	d03f      	beq.n	e02c <event_slave+0x1b0>
		return 40;
    dfac:	2804      	cmp	r0, #4
    dfae:	bf0c      	ite	eq
    dfb0:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    dfb4:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    dfb6:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    dfb8:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    dfba:	f005 fa50 	bl	1345e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    dfbe:	4430      	add	r0, r6
    dfc0:	f005 fbde 	bl	13780 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    dfc4:	f894 1020 	ldrb.w	r1, [r4, #32]
    dfc8:	3107      	adds	r1, #7
    dfca:	463a      	mov	r2, r7
    dfcc:	b2c9      	uxtb	r1, r1
    dfce:	4620      	mov	r0, r4
    dfd0:	f7fe fa80 	bl	c4d4 <preempt_calc>
    dfd4:	4603      	mov	r3, r0
    dfd6:	b358      	cbz	r0, e030 <event_slave+0x1b4>
		_radio.state = STATE_STOP;
    dfd8:	2304      	movs	r3, #4
    dfda:	752b      	strb	r3, [r5, #20]
		radio_disable();
    dfdc:	f005 fa50 	bl	13480 <radio_disable>
	packet_tx_enqueue(2);
    dfe0:	2002      	movs	r0, #2
}
    dfe2:	b002      	add	sp, #8
    dfe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    dfe8:	f7fd beb6 	b.w	bd58 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    dfec:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    dfee:	7fa6      	ldrb	r6, [r4, #30]
    dff0:	fb01 6606 	mla	r6, r1, r6, r6
    dff4:	7fe1      	ldrb	r1, [r4, #31]
    dff6:	2025      	movs	r0, #37	; 0x25
    dff8:	440e      	add	r6, r1
    dffa:	fb96 f1f0 	sdiv	r1, r6, r0
    dffe:	fb00 6611 	mls	r6, r0, r1, r6
    e002:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e004:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    e006:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e008:	5c51      	ldrb	r1, [r2, r1]
    e00a:	f006 0607 	and.w	r6, r6, #7
    e00e:	fa41 f606 	asr.w	r6, r1, r6
    e012:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    e014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e018:	d495      	bmi.n	df46 <event_slave+0xca>
		chan_index = chan_next % chan_count;
    e01a:	fbb0 f1f3 	udiv	r1, r0, r3
    e01e:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    e022:	b2c9      	uxtb	r1, r1
    e024:	4610      	mov	r0, r2
    e026:	f7fc fc5b 	bl	a8e0 <chan_sel_remap>
    e02a:	e78c      	b.n	df46 <event_slave+0xca>
		return 24;
    e02c:	2318      	movs	r3, #24
    e02e:	e7c2      	b.n	dfb6 <event_slave+0x13a>
		ticker_status =
    e030:	4a10      	ldr	r2, [pc, #64]	; (e074 <event_slave+0x1f8>)
    e032:	4601      	mov	r1, r0
    e034:	f7fa fc9a 	bl	896c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e038:	f030 0302 	bics.w	r3, r0, #2
    e03c:	d0d0      	beq.n	dfe0 <event_slave+0x164>
    e03e:	4b06      	ldr	r3, [pc, #24]	; (e058 <event_slave+0x1dc>)
    e040:	9301      	str	r3, [sp, #4]
    e042:	9300      	str	r3, [sp, #0]
    e044:	4b05      	ldr	r3, [pc, #20]	; (e05c <event_slave+0x1e0>)
    e046:	4a06      	ldr	r2, [pc, #24]	; (e060 <event_slave+0x1e4>)
    e048:	681c      	ldr	r4, [r3, #0]
    e04a:	4906      	ldr	r1, [pc, #24]	; (e064 <event_slave+0x1e8>)
    e04c:	4b06      	ldr	r3, [pc, #24]	; (e068 <event_slave+0x1ec>)
    e04e:	480a      	ldr	r0, [pc, #40]	; (e078 <event_slave+0x1fc>)
    e050:	e727      	b.n	dea2 <event_slave+0x26>
    e052:	bf00      	nop
    e054:	200008c0 	.word	0x200008c0
    e058:	000161ba 	.word	0x000161ba
    e05c:	20003a5c 	.word	0x20003a5c
    e060:	000179e1 	.word	0x000179e1
    e064:	00017a29 	.word	0x00017a29
    e068:	000197ab 	.word	0x000197ab
    e06c:	000199ef 	.word	0x000199ef
    e070:	00019aa2 	.word	0x00019aa2
    e074:	0000baad 	.word	0x0000baad
    e078:	000198d3 	.word	0x000198d3

0000e07c <prepare_pdu_data_tx>:
	    conn->empty ||
    e07c:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    e080:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e086:	4604      	mov	r4, r0
    e088:	460e      	mov	r6, r1
	if (/* empty packet */
    e08a:	d109      	bne.n	e0a0 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    e08c:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    e090:	b131      	cbz	r1, e0a0 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    e092:	f01c 0f08 	tst.w	ip, #8
    e096:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    e09a:	d022      	beq.n	e0e2 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    e09c:	4571      	cmp	r1, lr
    e09e:	d020      	beq.n	e0e2 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    e0a0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    e0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e0a8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    e0ac:	f005 fa3a 	bl	13524 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e0b0:	7803      	ldrb	r3, [r0, #0]
    e0b2:	2201      	movs	r2, #1
    e0b4:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    e0b8:	2200      	movs	r2, #0
    e0ba:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    e0bc:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e0c0:	7003      	strb	r3, [r0, #0]
    e0c2:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    e0c4:	b152      	cbz	r2, e0dc <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    e0c6:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    e0ca:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    e0cc:	7803      	ldrb	r3, [r0, #0]
    e0ce:	f36f 1347 	bfc	r3, #5, #3
    e0d2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    e0d4:	2300      	movs	r3, #0
    e0d6:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    e0d8:	6030      	str	r0, [r6, #0]
    e0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    e0dc:	f362 1304 	bfi	r3, r2, #4, #1
    e0e0:	e7f3      	b.n	e0ca <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    e0e2:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    e0e6:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    e0ea:	1d0d      	adds	r5, r1, #4
    e0ec:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    e0ee:	b913      	cbnz	r3, e0f6 <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    e0f0:	7843      	ldrb	r3, [r0, #1]
    e0f2:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    e0f6:	b122      	cbz	r2, e102 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e0f8:	5cab      	ldrb	r3, [r5, r2]
    e0fa:	2701      	movs	r7, #1
    e0fc:	f367 0301 	bfi	r3, r7, #0, #2
    e100:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    e102:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    e106:	1abf      	subs	r7, r7, r2
    e108:	b2ff      	uxtb	r7, r7
    e10a:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    e10c:	5cab      	ldrb	r3, [r5, r2]
    e10e:	f36f 1304 	bfc	r3, #4, #1
    e112:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    e114:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    e118:	f003 0307 	and.w	r3, r3, #7
    e11c:	2b02      	cmp	r3, #2
    e11e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    e120:	bf15      	itete	ne
    e122:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    e124:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    e126:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    e128:	3b0b      	subeq	r3, #11
    e12a:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    e12c:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    e130:	bf18      	it	ne
    e132:	3b04      	subne	r3, #4
    e134:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    e138:	bf18      	it	ne
    e13a:	b29b      	uxthne	r3, r3
    e13c:	4563      	cmp	r3, ip
    e13e:	bf28      	it	cs
    e140:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    e142:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    e144:	bf81      	itttt	hi
    e146:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    e148:	5cab      	ldrbhi	r3, [r5, r2]
    e14a:	f043 0310 	orrhi.w	r3, r3, #16
    e14e:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    e150:	680b      	ldr	r3, [r1, #0]
    e152:	b11b      	cbz	r3, e15c <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    e154:	5cab      	ldrb	r3, [r5, r2]
    e156:	f043 0310 	orr.w	r3, r3, #16
    e15a:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    e15c:	f1be 0f00 	cmp.w	lr, #0
    e160:	d1b4      	bne.n	e0cc <prepare_pdu_data_tx+0x50>
    e162:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    e166:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    e168:	bf1c      	itt	ne
    e16a:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    e16e:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    e172:	e7ab      	b.n	e0cc <prepare_pdu_data_tx+0x50>

0000e174 <event_master>:
{
    e174:	b5f0      	push	{r4, r5, r6, r7, lr}
    e176:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    e178:	4b59      	ldr	r3, [pc, #356]	; (e2e0 <event_master+0x16c>)
    e17a:	7cd9      	ldrb	r1, [r3, #19]
{
    e17c:	b085      	sub	sp, #20
    e17e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    e180:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    e184:	461d      	mov	r5, r3
    e186:	b179      	cbz	r1, e1a8 <event_master+0x34>
    e188:	4b56      	ldr	r3, [pc, #344]	; (e2e4 <event_master+0x170>)
    e18a:	9301      	str	r3, [sp, #4]
    e18c:	9300      	str	r3, [sp, #0]
    e18e:	4b56      	ldr	r3, [pc, #344]	; (e2e8 <event_master+0x174>)
    e190:	4a56      	ldr	r2, [pc, #344]	; (e2ec <event_master+0x178>)
    e192:	681c      	ldr	r4, [r3, #0]
    e194:	4956      	ldr	r1, [pc, #344]	; (e2f0 <event_master+0x17c>)
    e196:	4b57      	ldr	r3, [pc, #348]	; (e2f4 <event_master+0x180>)
    e198:	4857      	ldr	r0, [pc, #348]	; (e2f8 <event_master+0x184>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    e19a:	47a0      	blx	r4
    e19c:	4040      	eors	r0, r0
    e19e:	f380 8811 	msr	BASEPRI, r0
    e1a2:	f04f 0004 	mov.w	r0, #4
    e1a6:	df02      	svc	2
    e1a8:	7c1b      	ldrb	r3, [r3, #16]
    e1aa:	8c21      	ldrh	r1, [r4, #32]
    e1ac:	b2db      	uxtb	r3, r3
    e1ae:	3107      	adds	r1, #7
    e1b0:	428b      	cmp	r3, r1
    e1b2:	d009      	beq.n	e1c8 <event_master+0x54>
    e1b4:	4b4b      	ldr	r3, [pc, #300]	; (e2e4 <event_master+0x170>)
    e1b6:	9301      	str	r3, [sp, #4]
    e1b8:	9300      	str	r3, [sp, #0]
    e1ba:	4b4b      	ldr	r3, [pc, #300]	; (e2e8 <event_master+0x174>)
    e1bc:	4a4b      	ldr	r2, [pc, #300]	; (e2ec <event_master+0x178>)
    e1be:	681c      	ldr	r4, [r3, #0]
    e1c0:	494b      	ldr	r1, [pc, #300]	; (e2f0 <event_master+0x17c>)
    e1c2:	4b4c      	ldr	r3, [pc, #304]	; (e2f4 <event_master+0x180>)
    e1c4:	484d      	ldr	r0, [pc, #308]	; (e2fc <event_master+0x188>)
    e1c6:	e7e8      	b.n	e19a <event_master+0x26>
	_radio.packet_counter = 0;
    e1c8:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    e1cc:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    e1d0:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    e1d2:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    e1d4:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    e1d6:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    e1d8:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    e1da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    e1dc:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    e1e0:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    e1e2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    e1e4:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    e1e6:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    e1e8:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    e1ea:	f7fd fdb5 	bl	bd58 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    e1ee:	a903      	add	r1, sp, #12
    e1f0:	4620      	mov	r0, r4
    e1f2:	f7ff ff43 	bl	e07c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    e1f6:	9903      	ldr	r1, [sp, #12]
    e1f8:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    e1fc:	780b      	ldrb	r3, [r1, #0]
    e1fe:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    e202:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e206:	f362 0382 	bfi	r3, r2, #2, #1
    e20a:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    e20c:	4620      	mov	r0, r4
    e20e:	f7ff fe17 	bl	de40 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    e212:	2096      	movs	r0, #150	; 0x96
    e214:	f005 fa2a 	bl	1366c <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    e218:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e21c:	f000 0007 	and.w	r0, r0, #7
    e220:	f005 f988 	bl	13534 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    e224:	9903      	ldr	r1, [sp, #12]
    e226:	4620      	mov	r0, r4
    e228:	f7fc ff40 	bl	b0ac <tx_packet_set>
	if (conn->data_chan_sel) {
    e22c:	7f63      	ldrb	r3, [r4, #29]
    e22e:	f013 0f40 	tst.w	r3, #64	; 0x40
    e232:	f104 0217 	add.w	r2, r4, #23
    e236:	d021      	beq.n	e27c <event_master+0x108>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    e238:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    e23a:	8be1      	ldrh	r1, [r4, #30]
    e23c:	3801      	subs	r0, #1
    e23e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e242:	b280      	uxth	r0, r0
    e244:	f7fe fbce 	bl	c9e4 <chan_sel_2>
	chan_set(data_chan_use);
    e248:	f7fd fe74 	bl	bf34 <chan_set>
		remainder_us = radio_tmr_start(1,
    e24c:	68ea      	ldr	r2, [r5, #12]
    e24e:	f107 0109 	add.w	r1, r7, #9
    e252:	2001      	movs	r0, #1
    e254:	f005 fa16 	bl	13684 <radio_tmr_start>
		radio_tmr_end_capture();
    e258:	f005 fae4 	bl	13824 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    e25c:	f894 1020 	ldrb.w	r1, [r4, #32]
    e260:	3107      	adds	r1, #7
    e262:	463a      	mov	r2, r7
    e264:	b2c9      	uxtb	r1, r1
    e266:	4620      	mov	r0, r4
    e268:	f7fe f934 	bl	c4d4 <preempt_calc>
	if (0 !=
    e26c:	4603      	mov	r3, r0
    e26e:	b328      	cbz	r0, e2bc <event_master+0x148>
		_radio.state = STATE_STOP;
    e270:	2304      	movs	r3, #4
    e272:	752b      	strb	r3, [r5, #20]
		radio_disable();
    e274:	f005 f904 	bl	13480 <radio_disable>
}
    e278:	b005      	add	sp, #20
    e27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    e27c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    e27e:	7fa6      	ldrb	r6, [r4, #30]
    e280:	fb01 6606 	mla	r6, r1, r6, r6
    e284:	7fe1      	ldrb	r1, [r4, #31]
    e286:	2025      	movs	r0, #37	; 0x25
    e288:	440e      	add	r6, r1
    e28a:	fb96 f1f0 	sdiv	r1, r6, r0
    e28e:	fb00 6611 	mls	r6, r0, r1, r6
    e292:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e294:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    e296:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e298:	5c51      	ldrb	r1, [r2, r1]
    e29a:	f006 0607 	and.w	r6, r6, #7
    e29e:	fa41 f606 	asr.w	r6, r1, r6
    e2a2:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    e2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    e2a8:	d4ce      	bmi.n	e248 <event_master+0xd4>
		chan_index = chan_next % chan_count;
    e2aa:	fbb0 f1f3 	udiv	r1, r0, r3
    e2ae:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    e2b2:	b2c9      	uxtb	r1, r1
    e2b4:	4610      	mov	r0, r2
    e2b6:	f7fc fb13 	bl	a8e0 <chan_sel_remap>
    e2ba:	e7c5      	b.n	e248 <event_master+0xd4>
		ticker_status =
    e2bc:	4a10      	ldr	r2, [pc, #64]	; (e300 <event_master+0x18c>)
    e2be:	4601      	mov	r1, r0
    e2c0:	f7fa fb54 	bl	896c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e2c4:	f030 0302 	bics.w	r3, r0, #2
    e2c8:	d0d6      	beq.n	e278 <event_master+0x104>
    e2ca:	4b06      	ldr	r3, [pc, #24]	; (e2e4 <event_master+0x170>)
    e2cc:	9301      	str	r3, [sp, #4]
    e2ce:	9300      	str	r3, [sp, #0]
    e2d0:	4b05      	ldr	r3, [pc, #20]	; (e2e8 <event_master+0x174>)
    e2d2:	4a06      	ldr	r2, [pc, #24]	; (e2ec <event_master+0x178>)
    e2d4:	681c      	ldr	r4, [r3, #0]
    e2d6:	4906      	ldr	r1, [pc, #24]	; (e2f0 <event_master+0x17c>)
    e2d8:	4b06      	ldr	r3, [pc, #24]	; (e2f4 <event_master+0x180>)
    e2da:	480a      	ldr	r0, [pc, #40]	; (e304 <event_master+0x190>)
    e2dc:	e75d      	b.n	e19a <event_master+0x26>
    e2de:	bf00      	nop
    e2e0:	200008c0 	.word	0x200008c0
    e2e4:	000161ba 	.word	0x000161ba
    e2e8:	20003a5c 	.word	0x20003a5c
    e2ec:	000179e1 	.word	0x000179e1
    e2f0:	00017a29 	.word	0x00017a29
    e2f4:	000197b7 	.word	0x000197b7
    e2f8:	000199ef 	.word	0x000199ef
    e2fc:	00019aa2 	.word	0x00019aa2
    e300:	0000baad 	.word	0x0000baad
    e304:	000198d3 	.word	0x000198d3

0000e308 <isr_rx_conn_pkt_ctrl>:
{
    e308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    e30c:	7ac7      	ldrb	r7, [r0, #11]
{
    e30e:	4604      	mov	r4, r0
    e310:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    e312:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    e316:	2f19      	cmp	r7, #25
    e318:	f201 80fb 	bhi.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
    e31c:	e8df f017 	tbh	[pc, r7, lsl #1]
    e320:	0083001a 	.word	0x0083001a
    e324:	00d000c1 	.word	0x00d000c1
    e328:	012600fe 	.word	0x012600fe
    e32c:	05a40159 	.word	0x05a40159
    e330:	01ca0195 	.word	0x01ca0195
    e334:	022201f8 	.word	0x022201f8
    e338:	02bc0253 	.word	0x02bc0253
    e33c:	02d401ab 	.word	0x02d401ab
    e340:	04ac0429 	.word	0x04ac0429
    e344:	0586056c 	.word	0x0586056c
    e348:	065b065b 	.word	0x065b065b
    e34c:	08030734 	.word	0x08030734
    e350:	08c6083a 	.word	0x08c6083a
		if (!_radio.conn_curr->role ||
    e354:	4ecd      	ldr	r6, [pc, #820]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e356:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e35a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e35e:	2b00      	cmp	r3, #0
    e360:	f281 80d7 	bge.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    e364:	7a41      	ldrb	r1, [r0, #9]
    e366:	2000      	movs	r0, #0
    e368:	f7fc fa8e 	bl	a888 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e36c:	2800      	cmp	r0, #0
    e36e:	f001 80d0 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    e372:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    e376:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    e378:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    e37a:	041b      	lsls	r3, r3, #16
    e37c:	f101 80df 	bmi.w	f53e <isr_rx_conn_pkt_ctrl+0x1236>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e380:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e384:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    e388:	429a      	cmp	r2, r3
    e38a:	d009      	beq.n	e3a0 <isr_rx_conn_pkt_ctrl+0x98>
    e38c:	4bc0      	ldr	r3, [pc, #768]	; (e690 <isr_rx_conn_pkt_ctrl+0x388>)
    e38e:	9301      	str	r3, [sp, #4]
    e390:	9300      	str	r3, [sp, #0]
    e392:	4bc0      	ldr	r3, [pc, #768]	; (e694 <isr_rx_conn_pkt_ctrl+0x38c>)
    e394:	681c      	ldr	r4, [r3, #0]
    e396:	4bc0      	ldr	r3, [pc, #768]	; (e698 <isr_rx_conn_pkt_ctrl+0x390>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e398:	4ac0      	ldr	r2, [pc, #768]	; (e69c <isr_rx_conn_pkt_ctrl+0x394>)
    e39a:	49c1      	ldr	r1, [pc, #772]	; (e6a0 <isr_rx_conn_pkt_ctrl+0x398>)
    e39c:	48c1      	ldr	r0, [pc, #772]	; (e6a4 <isr_rx_conn_pkt_ctrl+0x39c>)
    e39e:	e0fb      	b.n	e598 <isr_rx_conn_pkt_ctrl+0x290>
	if (_radio.conn_upd == 0) {
    e3a0:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    e3a4:	b90a      	cbnz	r2, e3aa <isr_rx_conn_pkt_ctrl+0xa2>
		_radio.conn_upd = conn;
    e3a6:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    e3aa:	7b22      	ldrb	r2, [r4, #12]
    e3ac:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    e3b0:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    e3b4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e3b8:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    e3ba:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    e3be:	7c20      	ldrb	r0, [r4, #16]
    e3c0:	7be2      	ldrb	r2, [r4, #15]
    e3c2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    e3c6:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    e3ca:	7ca0      	ldrb	r0, [r4, #18]
    e3cc:	7c62      	ldrb	r2, [r4, #17]
    e3ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    e3d2:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    e3d6:	7ce2      	ldrb	r2, [r4, #19]
    e3d8:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    e3da:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    e3de:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    e3e2:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    e3e6:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    e3ea:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e3ee:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    e3f2:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    e3f4:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    e3f8:	2201      	movs	r2, #1
    e3fa:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    e3fe:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e402:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e406:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e40a:	4293      	cmp	r3, r2
    e40c:	d007      	beq.n	e41e <isr_rx_conn_pkt_ctrl+0x116>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    e40e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    e412:	f003 0307 	and.w	r3, r3, #7
    e416:	2b04      	cmp	r3, #4
    e418:	d101      	bne.n	e41e <isr_rx_conn_pkt_ctrl+0x116>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e41a:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    e41e:	2000      	movs	r0, #0
    e420:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    e424:	e03a      	b.n	e49c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    e426:	4b99      	ldr	r3, [pc, #612]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e428:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e42c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e430:	2b00      	cmp	r3, #0
    e432:	f281 806e 	bge.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    e436:	7a41      	ldrb	r1, [r0, #9]
    e438:	2001      	movs	r0, #1
    e43a:	f7fc fa25 	bl	a888 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e43e:	2800      	cmp	r0, #0
    e440:	f001 8067 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    e444:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    e448:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    e44a:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    e44c:	041f      	lsls	r7, r3, #16
    e44e:	f101 8076 	bmi.w	f53e <isr_rx_conn_pkt_ctrl+0x1236>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e452:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e456:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e45a:	429a      	cmp	r2, r3
    e45c:	d006      	beq.n	e46c <isr_rx_conn_pkt_ctrl+0x164>
    e45e:	4b8c      	ldr	r3, [pc, #560]	; (e690 <isr_rx_conn_pkt_ctrl+0x388>)
    e460:	9301      	str	r3, [sp, #4]
    e462:	9300      	str	r3, [sp, #0]
    e464:	4b8b      	ldr	r3, [pc, #556]	; (e694 <isr_rx_conn_pkt_ctrl+0x38c>)
    e466:	681c      	ldr	r4, [r3, #0]
    e468:	4b8f      	ldr	r3, [pc, #572]	; (e6a8 <isr_rx_conn_pkt_ctrl+0x3a0>)
    e46a:	e795      	b.n	e398 <isr_rx_conn_pkt_ctrl+0x90>
	memcpy(&conn->llcp.chan_map.chm[0],
    e46c:	2205      	movs	r2, #5
    e46e:	f104 010c 	add.w	r1, r4, #12
    e472:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e476:	f7f3 fcfb 	bl	1e70 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    e47a:	7c63      	ldrb	r3, [r4, #17]
    e47c:	7ca2      	ldrb	r2, [r4, #18]
    e47e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    e482:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    e486:	2302      	movs	r3, #2
    e488:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    e48c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    e490:	2000      	movs	r0, #0
	conn->llcp_ack--;
    e492:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    e494:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    e498:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    e49c:	b003      	add	sp, #12
    e49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    e4a2:	7a41      	ldrb	r1, [r0, #9]
    e4a4:	2002      	movs	r0, #2
    e4a6:	f7fc f9ef 	bl	a888 <pdu_len_cmp>
    e4aa:	2800      	cmp	r0, #0
    e4ac:	f001 8031 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->llcp_terminate.reason_peer =
    e4b0:	4b76      	ldr	r3, [pc, #472]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e4b2:	7b22      	ldrb	r2, [r4, #12]
    e4b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e4b8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    e4bc:	2000      	movs	r0, #0
	return nack;
    e4be:	e7ed      	b.n	e49c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    e4c0:	4e72      	ldr	r6, [pc, #456]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e4c2:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    e4c6:	f998 301d 	ldrsb.w	r3, [r8, #29]
    e4ca:	2b00      	cmp	r3, #0
    e4cc:	f281 8021 	bge.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    e4d0:	7a41      	ldrb	r1, [r0, #9]
    e4d2:	2003      	movs	r0, #3
    e4d4:	f7fc f9d8 	bl	a888 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e4d8:	2800      	cmp	r0, #0
    e4da:	f001 801a 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    e4de:	2208      	movs	r2, #8
    e4e0:	f104 0116 	add.w	r1, r4, #22
    e4e4:	f108 0094 	add.w	r0, r8, #148	; 0x94
    e4e8:	f7f3 fcc2 	bl	1e70 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    e4ec:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    e4f0:	2204      	movs	r2, #4
    e4f2:	f104 011e 	add.w	r1, r4, #30
    e4f6:	f500 7089 	add.w	r0, r0, #274	; 0x112
    e4fa:	f7f3 fcb9 	bl	1e70 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    e4fe:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    e502:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e506:	f042 0204 	orr.w	r2, r2, #4
    e50a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    e50e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    e512:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    e516:	2301      	movs	r3, #1
    e518:	702b      	strb	r3, [r5, #0]
    e51a:	e7cf      	b.n	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (_radio.conn_curr->role ||
    e51c:	4d5b      	ldr	r5, [pc, #364]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e51e:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    e522:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e526:	2b00      	cmp	r3, #0
    e528:	f2c0 87f3 	blt.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    e52c:	7a41      	ldrb	r1, [r0, #9]
    e52e:	2004      	movs	r0, #4
    e530:	f7fc f9aa 	bl	a888 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e534:	2800      	cmp	r0, #0
    e536:	f000 87ec 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    e53a:	2208      	movs	r2, #8
    e53c:	f104 010c 	add.w	r1, r4, #12
    e540:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    e544:	f7f3 fc94 	bl	1e70 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    e548:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    e54c:	2204      	movs	r2, #4
    e54e:	f104 0114 	add.w	r1, r4, #20
    e552:	f500 708b 	add.w	r0, r0, #278	; 0x116
    e556:	f7f3 fc8b 	bl	1e70 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    e55a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    e55e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    e562:	f043 0304 	orr.w	r3, r3, #4
    e566:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    e56a:	e7a7      	b.n	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    e56c:	4b47      	ldr	r3, [pc, #284]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e56e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e572:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    e576:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    e57a:	42b3      	cmp	r3, r6
    e57c:	d013      	beq.n	e5a6 <isr_rx_conn_pkt_ctrl+0x29e>
    e57e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    e582:	2b03      	cmp	r3, #3
    e584:	d00f      	beq.n	e5a6 <isr_rx_conn_pkt_ctrl+0x29e>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    e586:	4b42      	ldr	r3, [pc, #264]	; (e690 <isr_rx_conn_pkt_ctrl+0x388>)
    e588:	9301      	str	r3, [sp, #4]
    e58a:	9300      	str	r3, [sp, #0]
    e58c:	4b41      	ldr	r3, [pc, #260]	; (e694 <isr_rx_conn_pkt_ctrl+0x38c>)
    e58e:	4a43      	ldr	r2, [pc, #268]	; (e69c <isr_rx_conn_pkt_ctrl+0x394>)
    e590:	681c      	ldr	r4, [r3, #0]
    e592:	4943      	ldr	r1, [pc, #268]	; (e6a0 <isr_rx_conn_pkt_ctrl+0x398>)
    e594:	4b45      	ldr	r3, [pc, #276]	; (e6ac <isr_rx_conn_pkt_ctrl+0x3a4>)
    e596:	4846      	ldr	r0, [pc, #280]	; (e6b0 <isr_rx_conn_pkt_ctrl+0x3a8>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e598:	47a0      	blx	r4
    e59a:	4040      	eors	r0, r0
    e59c:	f380 8811 	msr	BASEPRI, r0
    e5a0:	f04f 0004 	mov.w	r0, #4
    e5a4:	df02      	svc	2
		if (_radio.conn_curr->role ||
    e5a6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e5aa:	2b00      	cmp	r3, #0
    e5ac:	f2c0 87b1 	blt.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    e5b0:	7a61      	ldrb	r1, [r4, #9]
    e5b2:	2005      	movs	r0, #5
    e5b4:	f7fc f968 	bl	a888 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e5b8:	2800      	cmp	r0, #0
    e5ba:	f000 87aa 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    e5be:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e5c0:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    e5c2:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    e5c4:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e5c8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    e5cc:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    e5d0:	e764      	b.n	e49c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    e5d2:	7a41      	ldrb	r1, [r0, #9]
    e5d4:	2006      	movs	r0, #6
    e5d6:	f7fc f957 	bl	a888 <pdu_len_cmp>
    e5da:	2800      	cmp	r0, #0
    e5dc:	f000 8799 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.role == ROLE_SLAVE) {
    e5e0:	4b2a      	ldr	r3, [pc, #168]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e5e2:	7cda      	ldrb	r2, [r3, #19]
    e5e4:	2a03      	cmp	r2, #3
    e5e6:	4619      	mov	r1, r3
    e5e8:	d124      	bne.n	e634 <isr_rx_conn_pkt_ctrl+0x32c>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    e5ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e5ee:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    e5f2:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    e5f6:	4290      	cmp	r0, r2
    e5f8:	d003      	beq.n	e602 <isr_rx_conn_pkt_ctrl+0x2fa>
    e5fa:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    e5fe:	2803      	cmp	r0, #3
    e600:	d1c1      	bne.n	e586 <isr_rx_conn_pkt_ctrl+0x27e>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    e602:	2000      	movs	r0, #0
    e604:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    e608:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    e60a:	2003      	movs	r0, #3
    e60c:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    e610:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    e614:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    e618:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    e61c:	065e      	lsls	r6, r3, #25
    e61e:	d505      	bpl.n	e62c <isr_rx_conn_pkt_ctrl+0x324>
			_radio.conn_curr->refresh = 0;
    e620:	f36f 1386 	bfc	r3, #6, #1
    e624:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    e628:	2309      	movs	r3, #9
    e62a:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    e62c:	2301      	movs	r3, #1
    e62e:	702b      	strb	r3, [r5, #0]
				break;
    e630:	f000 bccd 	b.w	efce <isr_rx_conn_pkt_ctrl+0xcc6>
			_radio.conn_curr->pause_rx = 0;
    e634:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e638:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    e63c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e640:	f36f 03c3 	bfc	r3, #3, #1
    e644:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    e648:	e7e4      	b.n	e614 <isr_rx_conn_pkt_ctrl+0x30c>
		if (!_radio.conn_curr->role ||
    e64a:	4b10      	ldr	r3, [pc, #64]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e64c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e650:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e654:	2b00      	cmp	r3, #0
    e656:	f280 875c 	bge.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    e65a:	7a41      	ldrb	r1, [r0, #9]
    e65c:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e65e:	f7fc f913 	bl	a888 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e662:	2800      	cmp	r0, #0
    e664:	f000 8755 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e668:	4631      	mov	r1, r6
    e66a:	4628      	mov	r0, r5
}
    e66c:	b003      	add	sp, #12
    e66e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    e672:	f7fe ba43 	b.w	cafc <feature_rsp_send>
		if (_radio.conn_curr->role ||
    e676:	4b05      	ldr	r3, [pc, #20]	; (e68c <isr_rx_conn_pkt_ctrl+0x384>)
    e678:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e67c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e680:	2b00      	cmp	r3, #0
    e682:	f2c0 8746 	blt.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    e686:	7a41      	ldrb	r1, [r0, #9]
    e688:	200e      	movs	r0, #14
    e68a:	e7e8      	b.n	e65e <isr_rx_conn_pkt_ctrl+0x356>
    e68c:	200008c0 	.word	0x200008c0
    e690:	000161ba 	.word	0x000161ba
    e694:	20003a5c 	.word	0x20003a5c
    e698:	00019816 	.word	0x00019816
    e69c:	000179e1 	.word	0x000179e1
    e6a0:	00017a29 	.word	0x00017a29
    e6a4:	00019c9e 	.word	0x00019c9e
    e6a8:	00019822 	.word	0x00019822
    e6ac:	000194c8 	.word	0x000194c8
    e6b0:	00019ce0 	.word	0x00019ce0
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    e6b4:	7a41      	ldrb	r1, [r0, #9]
    e6b6:	2009      	movs	r0, #9
    e6b8:	f7fc f8e6 	bl	a888 <pdu_len_cmp>
    e6bc:	2800      	cmp	r0, #0
    e6be:	f000 8728 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e6c2:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    e6c4:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e6c6:	48b2      	ldr	r0, [pc, #712]	; (e990 <isr_rx_conn_pkt_ctrl+0x688>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e6c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    e6cc:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    e6d0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    e6d4:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e6d8:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    e6dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    e6e0:	7ba1      	ldrb	r1, [r4, #14]
    e6e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    e6e6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    e6ea:	f3c1 0110 	ubfx	r1, r1, #0, #17
    e6ee:	400b      	ands	r3, r1
    e6f0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    e6f4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e6f8:	f043 0320 	orr.w	r3, r3, #32
    e6fc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    e700:	2301      	movs	r3, #1
    e702:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    e704:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    e708:	2000      	movs	r0, #0
    e70a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    e70e:	e6c5      	b.n	e49c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    e710:	4e9f      	ldr	r6, [pc, #636]	; (e990 <isr_rx_conn_pkt_ctrl+0x688>)
    e712:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e716:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e71a:	2b00      	cmp	r3, #0
    e71c:	f280 86f9 	bge.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    e720:	7a41      	ldrb	r1, [r0, #9]
    e722:	200a      	movs	r0, #10
    e724:	f7fc f8b0 	bl	a888 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e728:	2800      	cmp	r0, #0
    e72a:	f000 86f2 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e72e:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    e732:	f7f9 f974 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    e736:	4601      	mov	r1, r0
    e738:	b908      	cbnz	r0, e73e <isr_rx_conn_pkt_ctrl+0x436>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e73a:	2001      	movs	r0, #1
    e73c:	e6ae      	b.n	e49c <isr_rx_conn_pkt_ctrl+0x194>
		conn->refresh = 1;
    e73e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    e742:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    e746:	f36f 1304 	bfc	r3, #4, #1
    e74a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e74e:	7903      	ldrb	r3, [r0, #4]
    e750:	f043 0303 	orr.w	r3, r3, #3
    e754:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e756:	2301      	movs	r3, #1
    e758:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e75a:	230b      	movs	r3, #11
    e75c:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e75e:	4628      	mov	r0, r5
    e760:	f000 bced 	b.w	f13e <isr_rx_conn_pkt_ctrl+0xe36>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    e764:	7a41      	ldrb	r1, [r0, #9]
    e766:	200b      	movs	r0, #11
    e768:	f7fc f88e 	bl	a888 <pdu_len_cmp>
    e76c:	2800      	cmp	r0, #0
    e76e:	f000 86d0 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    e772:	4887      	ldr	r0, [pc, #540]	; (e990 <isr_rx_conn_pkt_ctrl+0x688>)
    e774:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    e778:	f994 301d 	ldrsb.w	r3, [r4, #29]
    e77c:	2b00      	cmp	r3, #0
    e77e:	db1b      	blt.n	e7b8 <isr_rx_conn_pkt_ctrl+0x4b0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e780:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e784:	f7f9 f94b 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    e788:	4601      	mov	r1, r0
    e78a:	2800      	cmp	r0, #0
    e78c:	d0d5      	beq.n	e73a <isr_rx_conn_pkt_ctrl+0x432>
		conn->enc_tx = 0;
    e78e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    e792:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    e796:	f043 0304 	orr.w	r3, r3, #4
    e79a:	f36f 1304 	bfc	r3, #4, #1
    e79e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e7a2:	7903      	ldrb	r3, [r0, #4]
    e7a4:	f043 0303 	orr.w	r3, r3, #3
    e7a8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    e7aa:	2301      	movs	r3, #1
    e7ac:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    e7ae:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e7b0:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    e7b2:	4620      	mov	r0, r4
    e7b4:	f000 bcc3 	b.w	f13e <isr_rx_conn_pkt_ctrl+0xe36>
		conn->enc_tx = 0;
    e7b8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    e7bc:	f36f 1345 	bfc	r3, #5, #1
    e7c0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    e7c4:	e67a      	b.n	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    e7c6:	7a41      	ldrb	r1, [r0, #9]
    e7c8:	200c      	movs	r0, #12
    e7ca:	f7fc f85d 	bl	a888 <pdu_len_cmp>
    e7ce:	2800      	cmp	r0, #0
    e7d0:	f000 869f 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    e7d4:	486e      	ldr	r0, [pc, #440]	; (e990 <isr_rx_conn_pkt_ctrl+0x688>)
    e7d6:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    e7da:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e7de:	f013 0701 	ands.w	r7, r3, #1
    e7e2:	d150      	bne.n	e886 <isr_rx_conn_pkt_ctrl+0x57e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e7e4:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e7e8:	f7f9 f919 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    e7ec:	4601      	mov	r1, r0
    e7ee:	2800      	cmp	r0, #0
    e7f0:	d0a3      	beq.n	e73a <isr_rx_conn_pkt_ctrl+0x432>
		conn->llcp_version.tx = 1;
    e7f2:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e7f6:	f043 0301 	orr.w	r3, r3, #1
    e7fa:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e7fe:	7903      	ldrb	r3, [r0, #4]
    e800:	f043 0303 	orr.w	r3, r3, #3
    e804:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    e806:	2306      	movs	r3, #6
    e808:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    e80a:	230c      	movs	r3, #12
    e80c:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    e80e:	2309      	movs	r3, #9
    e810:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    e812:	f06f 030e 	mvn.w	r3, #14
    e816:	7243      	strb	r3, [r0, #9]
    e818:	2305      	movs	r3, #5
    e81a:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    e81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e820:	72c3      	strb	r3, [r0, #11]
    e822:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    e824:	4630      	mov	r0, r6
    e826:	f7fe f94f 	bl	cac8 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    e82a:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    e82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e832:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    e836:	f004 fe75 	bl	13524 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e83a:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    e83c:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e83e:	2201      	movs	r2, #1
    e840:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    e844:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e848:	7003      	strb	r3, [r0, #0]
    e84a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    e84c:	b1c2      	cbz	r2, e880 <isr_rx_conn_pkt_ctrl+0x578>
		pdu_data_tx->md = 1;
    e84e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    e852:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    e854:	7b23      	ldrb	r3, [r4, #12]
    e856:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    e85a:	7ba2      	ldrb	r2, [r4, #14]
    e85c:	7b63      	ldrb	r3, [r4, #13]
    e85e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e862:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    e866:	7be3      	ldrb	r3, [r4, #15]
    e868:	7c22      	ldrb	r2, [r4, #16]
    e86a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e86e:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    e872:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    e876:	f043 0302 	orr.w	r3, r3, #2
    e87a:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    e87e:	e61d      	b.n	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		pdu_data_tx->md = 0;
    e880:	f362 1304 	bfi	r3, r2, #4, #1
    e884:	e7e5      	b.n	e852 <isr_rx_conn_pkt_ctrl+0x54a>
	} else if (!conn->llcp_version.rx) {
    e886:	f013 0302 	ands.w	r3, r3, #2
    e88a:	f47f ae17 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->procedure_expire = 0;
    e88e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    e892:	2301      	movs	r3, #1
    e894:	702b      	strb	r3, [r5, #0]
    e896:	e7dd      	b.n	e854 <isr_rx_conn_pkt_ctrl+0x54c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    e898:	7a41      	ldrb	r1, [r0, #9]
    e89a:	200d      	movs	r0, #13
    e89c:	f7fb fff4 	bl	a888 <pdu_len_cmp>
    e8a0:	2800      	cmp	r0, #0
    e8a2:	f000 8636 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->pause_rx = 0;
    e8a6:	4b3a      	ldr	r3, [pc, #232]	; (e990 <isr_rx_conn_pkt_ctrl+0x688>)
    e8a8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    e8ac:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    e8b0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e8b4:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    e8b8:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    e8ba:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    e8be:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    e8c2:	2301      	movs	r3, #1
    e8c4:	702b      	strb	r3, [r5, #0]
    e8c6:	e5e9      	b.n	e49c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    e8c8:	7a41      	ldrb	r1, [r0, #9]
    e8ca:	200f      	movs	r0, #15
    e8cc:	f7fb ffdc 	bl	a888 <pdu_len_cmp>
    e8d0:	2800      	cmp	r0, #0
    e8d2:	f000 861e 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    e8d6:	4b2e      	ldr	r3, [pc, #184]	; (e990 <isr_rx_conn_pkt_ctrl+0x688>)
    e8d8:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    e8dc:	461a      	mov	r2, r3
    e8de:	b151      	cbz	r1, e8f6 <isr_rx_conn_pkt_ctrl+0x5ee>
    e8e0:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    e8e4:	4281      	cmp	r1, r0
    e8e6:	d006      	beq.n	e8f6 <isr_rx_conn_pkt_ctrl+0x5ee>
			nack = reject_ext_ind_send(_radio.conn_curr,
    e8e8:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    e8ea:	210f      	movs	r1, #15
}
    e8ec:	b003      	add	sp, #12
    e8ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    e8f2:	f7fe b96d 	b.w	cbd0 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    e8f6:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    e8fa:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e8fe:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    e902:	2b00      	cmp	r3, #0
    e904:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e908:	f2c0 80a7 	blt.w	ea5a <isr_rx_conn_pkt_ctrl+0x752>
			if ((conn->llcp_conn_param.req !=
    e90c:	4299      	cmp	r1, r3
    e90e:	d009      	beq.n	e924 <isr_rx_conn_pkt_ctrl+0x61c>
			    ((conn->llcp_conn_param.state ==
    e910:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    e914:	f013 0307 	ands.w	r3, r3, #7
    e918:	d002      	beq.n	e920 <isr_rx_conn_pkt_ctrl+0x618>
			      LLCP_CPR_STATE_REQ) ||
    e91a:	3b04      	subs	r3, #4
    e91c:	2b01      	cmp	r3, #1
    e91e:	d801      	bhi.n	e924 <isr_rx_conn_pkt_ctrl+0x61c>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e920:	2223      	movs	r2, #35	; 0x23
    e922:	e7e2      	b.n	e8ea <isr_rx_conn_pkt_ctrl+0x5e2>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    e924:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e928:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e92c:	4299      	cmp	r1, r3
    e92e:	d003      	beq.n	e938 <isr_rx_conn_pkt_ctrl+0x630>
    e930:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    e934:	2b03      	cmp	r3, #3
    e936:	d105      	bne.n	e944 <isr_rx_conn_pkt_ctrl+0x63c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    e938:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    e93c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    e940:	4299      	cmp	r1, r3
    e942:	d001      	beq.n	e948 <isr_rx_conn_pkt_ctrl+0x640>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e944:	222a      	movs	r2, #42	; 0x2a
    e946:	e7d0      	b.n	e8ea <isr_rx_conn_pkt_ctrl+0x5e2>
				if ((cpr->interval_min < 6) ||
    e948:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    e94c:	4643      	mov	r3, r8
    e94e:	2b05      	cmp	r3, #5
    e950:	d91b      	bls.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->interval_max > 3200) ||
    e952:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    e954:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    e958:	d817      	bhi.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->interval_max > 3200) ||
    e95a:	45b8      	cmp	r8, r7
    e95c:	d815      	bhi.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->latency > 499) ||
    e95e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    e962:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    e966:	d210      	bcs.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->timeout < 10) ||
    e968:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    e96c:	f1ae 060a 	sub.w	r6, lr, #10
    e970:	b2b6      	uxth	r6, r6
    e972:	f640 4976 	movw	r9, #3190	; 0xc76
    e976:	454e      	cmp	r6, r9
    e978:	d807      	bhi.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
				     ((cpr->latency + 1) *
    e97a:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    e97e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    e982:	da02      	bge.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->preferred_periodicity >
    e984:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    e986:	428f      	cmp	r7, r1
    e988:	d204      	bcs.n	e994 <isr_rx_conn_pkt_ctrl+0x68c>
				nack = reject_ext_ind_send(conn,
    e98a:	221e      	movs	r2, #30
    e98c:	e7ad      	b.n	e8ea <isr_rx_conn_pkt_ctrl+0x5e2>
    e98e:	bf00      	nop
    e990:	200008c0 	.word	0x200008c0
				conn->llcp_conn_param.interval = cpr->interval_min;
    e994:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    e998:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    e99c:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    e9a0:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    e9a4:	7da6      	ldrb	r6, [r4, #22]
    e9a6:	7d61      	ldrb	r1, [r4, #21]
    e9a8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    e9ac:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    e9b0:	7e26      	ldrb	r6, [r4, #24]
    e9b2:	7de1      	ldrb	r1, [r4, #23]
    e9b4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e9b8:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    e9bc:	7ea6      	ldrb	r6, [r4, #26]
    e9be:	7e61      	ldrb	r1, [r4, #25]
    e9c0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e9c4:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    e9c8:	7f26      	ldrb	r6, [r4, #28]
    e9ca:	7ee1      	ldrb	r1, [r4, #27]
    e9cc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e9d0:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    e9d4:	7fa6      	ldrb	r6, [r4, #30]
    e9d6:	7f61      	ldrb	r1, [r4, #29]
    e9d8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e9dc:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    e9e0:	7fe1      	ldrb	r1, [r4, #31]
    e9e2:	f894 6020 	ldrb.w	r6, [r4, #32]
    e9e6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e9ea:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    e9ee:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e9f2:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e9f6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e9fa:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    e9fe:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    ea02:	6a41      	ldr	r1, [r0, #36]	; 0x24
    ea04:	428c      	cmp	r4, r1
    ea06:	d10f      	bne.n	ea28 <isr_rx_conn_pkt_ctrl+0x720>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    ea08:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    ea0a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ea0e:	4361      	muls	r1, r4
    ea10:	f242 7410 	movw	r4, #10000	; 0x2710
    ea14:	fb04 130e 	mla	r3, r4, lr, r1
    ea18:	3b01      	subs	r3, #1
    ea1a:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    ea1e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    ea20:	b29b      	uxth	r3, r3
    ea22:	4299      	cmp	r1, r3
    ea24:	f000 8092 	beq.w	eb4c <isr_rx_conn_pkt_ctrl+0x844>
					if (conn->pause_tx) {
    ea28:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    ea2c:	071c      	lsls	r4, r3, #28
    ea2e:	f140 8087 	bpl.w	eb40 <isr_rx_conn_pkt_ctrl+0x838>
						conn->llcp_conn_param.state =
    ea32:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    ea36:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    ea38:	f361 0302 	bfi	r3, r1, #0, #3
    ea3c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    ea40:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    ea44:	3b01      	subs	r3, #1
    ea46:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    ea4a:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    ea4e:	2b00      	cmp	r3, #0
    ea50:	f47f ad34 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
				_radio.conn_upd = conn;
    ea54:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    ea58:	e530      	b.n	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    ea5a:	4299      	cmp	r1, r3
    ea5c:	d003      	beq.n	ea66 <isr_rx_conn_pkt_ctrl+0x75e>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    ea5e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    ea62:	0799      	lsls	r1, r3, #30
    ea64:	d17b      	bne.n	eb5e <isr_rx_conn_pkt_ctrl+0x856>
			if ((cpr->interval_min < 6) ||
    ea66:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    ea6a:	4643      	mov	r3, r8
    ea6c:	2b05      	cmp	r3, #5
    ea6e:	d98c      	bls.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->interval_max > 3200) ||
    ea70:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    ea72:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    ea76:	d888      	bhi.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->interval_max > 3200) ||
    ea78:	45b8      	cmp	r8, r7
    ea7a:	d886      	bhi.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->latency > 499) ||
    ea7c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    ea80:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    ea84:	d281      	bcs.n	e98a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    ea86:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    ea8a:	f1ae 060a 	sub.w	r6, lr, #10
    ea8e:	b2b6      	uxth	r6, r6
    ea90:	f640 4976 	movw	r9, #3190	; 0xc76
    ea94:	454e      	cmp	r6, r9
    ea96:	f63f af78 	bhi.w	e98a <isr_rx_conn_pkt_ctrl+0x682>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    ea9a:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    ea9e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    eaa2:	f6bf af72 	bge.w	e98a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    eaa6:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    eaa8:	428f      	cmp	r7, r1
    eaaa:	f4ff af6e 	bcc.w	e98a <isr_rx_conn_pkt_ctrl+0x682>
			conn->llcp_conn_param.interval = cpr->interval_min;
    eaae:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    eab2:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    eab6:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    eaba:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    eabe:	7da6      	ldrb	r6, [r4, #22]
    eac0:	7d61      	ldrb	r1, [r4, #21]
    eac2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    eac6:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    eaca:	7e26      	ldrb	r6, [r4, #24]
    eacc:	7de1      	ldrb	r1, [r4, #23]
    eace:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ead2:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    ead6:	7ea6      	ldrb	r6, [r4, #26]
    ead8:	7e61      	ldrb	r1, [r4, #25]
    eada:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    eade:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    eae2:	7f26      	ldrb	r6, [r4, #28]
    eae4:	7ee1      	ldrb	r1, [r4, #27]
    eae6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    eaea:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    eaee:	7fa6      	ldrb	r6, [r4, #30]
    eaf0:	7f61      	ldrb	r1, [r4, #29]
    eaf2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    eaf6:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    eafa:	7fe1      	ldrb	r1, [r4, #31]
    eafc:	f894 6020 	ldrb.w	r6, [r4, #32]
    eb00:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    eb04:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    eb08:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    eb0c:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    eb10:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    eb14:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    eb18:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    eb1c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    eb1e:	428c      	cmp	r4, r1
    eb20:	d10e      	bne.n	eb40 <isr_rx_conn_pkt_ctrl+0x838>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    eb22:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    eb24:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eb28:	4361      	muls	r1, r4
    eb2a:	f242 7410 	movw	r4, #10000	; 0x2710
    eb2e:	fb04 130e 	mla	r3, r4, lr, r1
    eb32:	3b01      	subs	r3, #1
    eb34:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    eb38:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    eb3a:	b29b      	uxth	r3, r3
    eb3c:	4299      	cmp	r1, r3
    eb3e:	d005      	beq.n	eb4c <isr_rx_conn_pkt_ctrl+0x844>
				*rx_enqueue = 1;
    eb40:	2301      	movs	r3, #1
    eb42:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    eb44:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    eb48:	2103      	movs	r1, #3
    eb4a:	e775      	b.n	ea38 <isr_rx_conn_pkt_ctrl+0x730>
				conn->llcp_conn_param.status = 0;
    eb4c:	2300      	movs	r3, #0
    eb4e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    eb52:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    eb56:	2101      	movs	r1, #1
    eb58:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    eb5c:	e76c      	b.n	ea38 <isr_rx_conn_pkt_ctrl+0x730>
			LL_ASSERT(0);
    eb5e:	4bb9      	ldr	r3, [pc, #740]	; (ee44 <isr_rx_conn_pkt_ctrl+0xb3c>)
    eb60:	9301      	str	r3, [sp, #4]
    eb62:	9300      	str	r3, [sp, #0]
    eb64:	4bb8      	ldr	r3, [pc, #736]	; (ee48 <isr_rx_conn_pkt_ctrl+0xb40>)
    eb66:	4ab9      	ldr	r2, [pc, #740]	; (ee4c <isr_rx_conn_pkt_ctrl+0xb44>)
    eb68:	681c      	ldr	r4, [r3, #0]
    eb6a:	49b9      	ldr	r1, [pc, #740]	; (ee50 <isr_rx_conn_pkt_ctrl+0xb48>)
    eb6c:	4bb9      	ldr	r3, [pc, #740]	; (ee54 <isr_rx_conn_pkt_ctrl+0xb4c>)
    eb6e:	48ba      	ldr	r0, [pc, #744]	; (ee58 <isr_rx_conn_pkt_ctrl+0xb50>)
    eb70:	e512      	b.n	e598 <isr_rx_conn_pkt_ctrl+0x290>
		if (_radio.conn_curr->role ||
    eb72:	4bba      	ldr	r3, [pc, #744]	; (ee5c <isr_rx_conn_pkt_ctrl+0xb54>)
    eb74:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    eb78:	f995 301d 	ldrsb.w	r3, [r5, #29]
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	f2c0 84c8 	blt.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    eb82:	7a41      	ldrb	r1, [r0, #9]
    eb84:	2010      	movs	r0, #16
    eb86:	f7fb fe7f 	bl	a888 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    eb8a:	2800      	cmp	r0, #0
    eb8c:	f000 84c1 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		if (!_radio.conn_curr->role &&
    eb90:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    eb94:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    eb98:	429a      	cmp	r2, r3
    eb9a:	f43f ac8f 	beq.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		    (_radio.conn_curr->llcp_conn_param.state ==
    eb9e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    eba2:	f003 0307 	and.w	r3, r3, #7
    eba6:	2b04      	cmp	r3, #4
    eba8:	f47f ac88 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
			if ((cpr->interval_min < 6) ||
    ebac:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    ebb0:	fa1f f28e 	uxth.w	r2, lr
    ebb4:	2a05      	cmp	r2, #5
    ebb6:	d91b      	bls.n	ebf0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->interval_max > 3200) ||
    ebb8:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    ebba:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    ebbe:	d817      	bhi.n	ebf0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->interval_max > 3200) ||
    ebc0:	429a      	cmp	r2, r3
    ebc2:	d815      	bhi.n	ebf0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->latency > 499) ||
    ebc4:	8a27      	ldrh	r7, [r4, #16]
    ebc6:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    ebc8:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    ebcc:	d210      	bcs.n	ebf0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    ebce:	8a66      	ldrh	r6, [r4, #18]
    ebd0:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    ebd2:	f1a0 010a 	sub.w	r1, r0, #10
    ebd6:	b289      	uxth	r1, r1
    ebd8:	f640 4c76 	movw	ip, #3190	; 0xc76
    ebdc:	4561      	cmp	r1, ip
    ebde:	d807      	bhi.n	ebf0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    ebe0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    ebe4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    ebe8:	da02      	bge.n	ebf0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    ebea:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    ebec:	4293      	cmp	r3, r2
    ebee:	d203      	bcs.n	ebf8 <isr_rx_conn_pkt_ctrl+0x8f0>
				nack = reject_ext_ind_send(conn,
    ebf0:	221e      	movs	r2, #30
    ebf2:	2110      	movs	r1, #16
    ebf4:	4628      	mov	r0, r5
    ebf6:	e679      	b.n	e8ec <isr_rx_conn_pkt_ctrl+0x5e4>
			_radio.conn_curr->procedure_expire = 0;
    ebf8:	2000      	movs	r0, #0
    ebfa:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    ebfe:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    ec02:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    ec06:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    ec0a:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    ec0e:	7da2      	ldrb	r2, [r4, #22]
    ec10:	7d63      	ldrb	r3, [r4, #21]
    ec12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    ec16:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    ec1a:	7e22      	ldrb	r2, [r4, #24]
    ec1c:	7de3      	ldrb	r3, [r4, #23]
    ec1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec22:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    ec26:	7ea2      	ldrb	r2, [r4, #26]
    ec28:	7e63      	ldrb	r3, [r4, #25]
    ec2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec2e:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    ec32:	7f22      	ldrb	r2, [r4, #28]
    ec34:	7ee3      	ldrb	r3, [r4, #27]
    ec36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec3a:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    ec3e:	7fa2      	ldrb	r2, [r4, #30]
    ec40:	7f63      	ldrb	r3, [r4, #29]
    ec42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec46:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    ec4a:	f894 2020 	ldrb.w	r2, [r4, #32]
    ec4e:	7fe3      	ldrb	r3, [r4, #31]
    ec50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec54:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    ec58:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    ec5c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    ec60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec64:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    ec68:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    ec6c:	2201      	movs	r2, #1
    ec6e:	f362 0302 	bfi	r3, r2, #0, #3
    ec72:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    ec76:	e411      	b.n	e49c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    ec78:	7a41      	ldrb	r1, [r0, #9]
    ec7a:	2011      	movs	r0, #17
    ec7c:	f7fb fe04 	bl	a888 <pdu_len_cmp>
    ec80:	2800      	cmp	r0, #0
    ec82:	f000 8446 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    ec86:	4a75      	ldr	r2, [pc, #468]	; (ee5c <isr_rx_conn_pkt_ctrl+0xb54>)
    ec88:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    ec8c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    ec90:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    ec94:	4281      	cmp	r1, r0
    ec96:	7b21      	ldrb	r1, [r4, #12]
    ec98:	d027      	beq.n	ecea <isr_rx_conn_pkt_ctrl+0x9e2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    ec9a:	2916      	cmp	r1, #22
    ec9c:	f47f ac0e 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (rej_ext_ind->error_code != 0x23) {
    eca0:	7b61      	ldrb	r1, [r4, #13]
    eca2:	2923      	cmp	r1, #35	; 0x23
    eca4:	d00e      	beq.n	ecc4 <isr_rx_conn_pkt_ctrl+0x9bc>
				_radio.conn_curr->phy_tx;
    eca6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    ecaa:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    ecae:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    ecb2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ecb6:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    ecba:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    ecbc:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    ecc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    ecc4:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    ecc8:	0792      	lsls	r2, r2, #30
    ecca:	f57f abf7 	bpl.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ecce:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    ecd0:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ecd2:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    ecd4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    ecd8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ecdc:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    ecde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    ece2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ece6:	7363      	strb	r3, [r4, #13]
    ece8:	e415      	b.n	e516 <isr_rx_conn_pkt_ctrl+0x20e>
		   _radio.conn_curr->llcp_conn_param.req) {
    ecea:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    ecee:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    ecf2:	42b8      	cmp	r0, r7
    ecf4:	d04c      	beq.n	ed90 <isr_rx_conn_pkt_ctrl+0xa88>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    ecf6:	290f      	cmp	r1, #15
    ecf8:	f47f abe0 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
    ecfc:	f993 001d 	ldrsb.w	r0, [r3, #29]
    ed00:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    ed02:	2800      	cmp	r0, #0
    ed04:	db10      	blt.n	ed28 <isr_rx_conn_pkt_ctrl+0xa20>
    ed06:	291a      	cmp	r1, #26
    ed08:	d10e      	bne.n	ed28 <isr_rx_conn_pkt_ctrl+0xa20>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    ed0a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    ed0e:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    ed12:	4294      	cmp	r4, r2
    ed14:	f000 80d1 	beq.w	eeba <isr_rx_conn_pkt_ctrl+0xbb2>
    ed18:	4b4a      	ldr	r3, [pc, #296]	; (ee44 <isr_rx_conn_pkt_ctrl+0xb3c>)
    ed1a:	9301      	str	r3, [sp, #4]
    ed1c:	9300      	str	r3, [sp, #0]
    ed1e:	4b4a      	ldr	r3, [pc, #296]	; (ee48 <isr_rx_conn_pkt_ctrl+0xb40>)
    ed20:	681c      	ldr	r4, [r3, #0]
    ed22:	4b4f      	ldr	r3, [pc, #316]	; (ee60 <isr_rx_conn_pkt_ctrl+0xb58>)
    ed24:	f7ff bb38 	b.w	e398 <isr_rx_conn_pkt_ctrl+0x90>
	else if (rej_ext_ind->error_code != 0x23) {
    ed28:	2923      	cmp	r1, #35	; 0x23
    ed2a:	d01a      	beq.n	ed62 <isr_rx_conn_pkt_ctrl+0xa5a>
		LL_ASSERT(_radio.conn_upd == conn);
    ed2c:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    ed30:	42b3      	cmp	r3, r6
    ed32:	d009      	beq.n	ed48 <isr_rx_conn_pkt_ctrl+0xa40>
    ed34:	4b43      	ldr	r3, [pc, #268]	; (ee44 <isr_rx_conn_pkt_ctrl+0xb3c>)
    ed36:	9301      	str	r3, [sp, #4]
    ed38:	9300      	str	r3, [sp, #0]
    ed3a:	4b43      	ldr	r3, [pc, #268]	; (ee48 <isr_rx_conn_pkt_ctrl+0xb40>)
    ed3c:	681c      	ldr	r4, [r3, #0]
    ed3e:	4b48      	ldr	r3, [pc, #288]	; (ee60 <isr_rx_conn_pkt_ctrl+0xb58>)
			LL_ASSERT(_radio.conn_upd == conn);
    ed40:	4a42      	ldr	r2, [pc, #264]	; (ee4c <isr_rx_conn_pkt_ctrl+0xb44>)
    ed42:	4943      	ldr	r1, [pc, #268]	; (ee50 <isr_rx_conn_pkt_ctrl+0xb48>)
    ed44:	4847      	ldr	r0, [pc, #284]	; (ee64 <isr_rx_conn_pkt_ctrl+0xb5c>)
    ed46:	e427      	b.n	e598 <isr_rx_conn_pkt_ctrl+0x290>
		_radio.conn_upd = NULL;
    ed48:	2600      	movs	r6, #0
		if (conn->role) {
    ed4a:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    ed4c:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    ed50:	bfb8      	it	lt
    ed52:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    ed56:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    ed5a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    ed5e:	bfb8      	it	lt
    ed60:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    ed62:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    ed66:	0717      	lsls	r7, r2, #28
    ed68:	f57f aba8 	bpl.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
	cp->status = rej_ext_ind->error_code;
    ed6c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ed6e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    ed70:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ed72:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    ed74:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    ed76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    ed78:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    ed7a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    ed7c:	237d      	movs	r3, #125	; 0x7d
    ed7e:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    ed80:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    ed82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ed86:	fb93 f3f2 	sdiv	r3, r3, r2
    ed8a:	8223      	strh	r3, [r4, #16]
    ed8c:	f7ff bbc3 	b.w	e516 <isr_rx_conn_pkt_ctrl+0x20e>
		   _radio.conn_curr->llcp_length.req) {
    ed90:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    ed94:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    ed98:	4290      	cmp	r0, r2
    ed9a:	d01a      	beq.n	edd2 <isr_rx_conn_pkt_ctrl+0xaca>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    ed9c:	2914      	cmp	r1, #20
    ed9e:	f47f ab8d 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->llcp_length.ack = conn->llcp_length.req;
    eda2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    eda6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    edaa:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    edac:	f360 02c3 	bfi	r2, r0, #3, #1
    edb0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    edb4:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    edb6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    edba:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    edbc:	2215      	movs	r2, #21
    edbe:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    edc0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    edc2:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    edc4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    edc6:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    edc8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    edca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    edcc:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    edce:	8263      	strh	r3, [r4, #18]
    edd0:	e577      	b.n	e8c2 <isr_rx_conn_pkt_ctrl+0x5ba>
		switch (rej_ext_ind->reject_opcode) {
    edd2:	2903      	cmp	r1, #3
    edd4:	f47f ab72 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->pause_rx = 0;
    edd8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    eddc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    ede0:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    ede4:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    ede6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    edea:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    edee:	230d      	movs	r3, #13
    edf0:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    edf2:	7b63      	ldrb	r3, [r4, #13]
    edf4:	7323      	strb	r3, [r4, #12]
    edf6:	e564      	b.n	e8c2 <isr_rx_conn_pkt_ctrl+0x5ba>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    edf8:	7a41      	ldrb	r1, [r0, #9]
    edfa:	2012      	movs	r0, #18
    edfc:	f7fb fd44 	bl	a888 <pdu_len_cmp>
    ee00:	2800      	cmp	r0, #0
    ee02:	f000 8386 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = ping_resp_send(_radio.conn_curr);
    ee06:	4815      	ldr	r0, [pc, #84]	; (ee5c <isr_rx_conn_pkt_ctrl+0xb54>)
    ee08:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ee0c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    ee10:	f7f8 fe05 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    ee14:	4601      	mov	r1, r0
    ee16:	2800      	cmp	r0, #0
    ee18:	f43f ac8f 	beq.w	e73a <isr_rx_conn_pkt_ctrl+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ee1c:	7903      	ldrb	r3, [r0, #4]
    ee1e:	f043 0303 	orr.w	r3, r3, #3
    ee22:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    ee24:	2301      	movs	r3, #1
    ee26:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    ee28:	2313      	movs	r3, #19
    ee2a:	e4c1      	b.n	e7b0 <isr_rx_conn_pkt_ctrl+0x4a8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    ee2c:	7a41      	ldrb	r1, [r0, #9]
    ee2e:	2013      	movs	r0, #19
    ee30:	f7fb fd2a 	bl	a888 <pdu_len_cmp>
    ee34:	2800      	cmp	r0, #0
    ee36:	f000 836c 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->procedure_expire = 0;
    ee3a:	4b08      	ldr	r3, [pc, #32]	; (ee5c <isr_rx_conn_pkt_ctrl+0xb54>)
    ee3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    ee40:	e462      	b.n	e708 <isr_rx_conn_pkt_ctrl+0x400>
    ee42:	bf00      	nop
    ee44:	000161ba 	.word	0x000161ba
    ee48:	20003a5c 	.word	0x20003a5c
    ee4c:	000179e1 	.word	0x000179e1
    ee50:	00017a29 	.word	0x00017a29
    ee54:	000194c8 	.word	0x000194c8
    ee58:	00017955 	.word	0x00017955
    ee5c:	200008c0 	.word	0x200008c0
    ee60:	0001948d 	.word	0x0001948d
    ee64:	00019d70 	.word	0x00019d70
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    ee68:	7a41      	ldrb	r1, [r0, #9]
    ee6a:	2007      	movs	r0, #7
    ee6c:	f7fb fd0c 	bl	a888 <pdu_len_cmp>
    ee70:	2800      	cmp	r0, #0
    ee72:	f000 834e 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    ee76:	4ad3      	ldr	r2, [pc, #844]	; (f1c4 <isr_rx_conn_pkt_ctrl+0xebc>)
    ee78:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    ee7c:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    ee80:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    ee84:	42b1      	cmp	r1, r6
    ee86:	4611      	mov	r1, r2
    ee88:	d06b      	beq.n	ef62 <isr_rx_conn_pkt_ctrl+0xc5a>
			conn->llcp_conn_param.disabled = 1;
    ee8a:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    ee8e:	f040 0010 	orr.w	r0, r0, #16
    ee92:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    ee96:	f993 001d 	ldrsb.w	r0, [r3, #29]
    ee9a:	2800      	cmp	r0, #0
    ee9c:	db39      	blt.n	ef12 <isr_rx_conn_pkt_ctrl+0xc0a>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    ee9e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    eea2:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    eea6:	4294      	cmp	r4, r2
    eea8:	d007      	beq.n	eeba <isr_rx_conn_pkt_ctrl+0xbb2>
    eeaa:	4bc7      	ldr	r3, [pc, #796]	; (f1c8 <isr_rx_conn_pkt_ctrl+0xec0>)
    eeac:	9301      	str	r3, [sp, #4]
    eeae:	9300      	str	r3, [sp, #0]
    eeb0:	4bc6      	ldr	r3, [pc, #792]	; (f1cc <isr_rx_conn_pkt_ctrl+0xec4>)
    eeb2:	681c      	ldr	r4, [r3, #0]
    eeb4:	4bc6      	ldr	r3, [pc, #792]	; (f1d0 <isr_rx_conn_pkt_ctrl+0xec8>)
    eeb6:	f7ff ba6f 	b.w	e398 <isr_rx_conn_pkt_ctrl+0x90>
				conn->llcp_conn_param.state =
    eeba:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    eebe:	2105      	movs	r1, #5
    eec0:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    eec4:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    eec8:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    eecc:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    eed0:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    eed4:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    eed8:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    eedc:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    eee0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    eee4:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    eee6:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    eeea:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    eeee:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    eef2:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    eef4:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    eef8:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    eefa:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    eefe:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    ef02:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    ef06:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    ef0a:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    ef0e:	f7ff bac5 	b.w	e49c <isr_rx_conn_pkt_ctrl+0x194>
			LL_ASSERT(_radio.conn_upd == conn);
    ef12:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    ef16:	4293      	cmp	r3, r2
    ef18:	d006      	beq.n	ef28 <isr_rx_conn_pkt_ctrl+0xc20>
    ef1a:	4bab      	ldr	r3, [pc, #684]	; (f1c8 <isr_rx_conn_pkt_ctrl+0xec0>)
    ef1c:	9301      	str	r3, [sp, #4]
    ef1e:	9300      	str	r3, [sp, #0]
    ef20:	4baa      	ldr	r3, [pc, #680]	; (f1cc <isr_rx_conn_pkt_ctrl+0xec4>)
    ef22:	681c      	ldr	r4, [r3, #0]
    ef24:	4baa      	ldr	r3, [pc, #680]	; (f1d0 <isr_rx_conn_pkt_ctrl+0xec8>)
    ef26:	e70b      	b.n	ed40 <isr_rx_conn_pkt_ctrl+0xa38>
			_radio.conn_upd = NULL;
    ef28:	2200      	movs	r2, #0
    ef2a:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    ef2e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ef32:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    ef36:	0716      	lsls	r6, r2, #28
    ef38:	f57f aac0 	bpl.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ef3c:	2208      	movs	r2, #8
    ef3e:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    ef40:	221a      	movs	r2, #26
    ef42:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    ef44:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    ef46:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    ef48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    ef4a:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    ef4c:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    ef4e:	237d      	movs	r3, #125	; 0x7d
    ef50:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    ef52:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    ef54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ef58:	fb93 f3f2 	sdiv	r3, r3, r2
    ef5c:	8223      	strh	r3, [r4, #16]
    ef5e:	f7ff bb65 	b.w	e62c <isr_rx_conn_pkt_ctrl+0x324>
		} else if (_radio.conn_curr->llcp_length.req !=
    ef62:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    ef66:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    ef6a:	4290      	cmp	r0, r2
    ef6c:	d009      	beq.n	ef82 <isr_rx_conn_pkt_ctrl+0xc7a>
			_radio.conn_curr->llcp_length.ack =
    ef6e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    ef72:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ef76:	f36f 02c3 	bfc	r2, #3, #1
    ef7a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    ef7e:	f7ff bb55 	b.w	e62c <isr_rx_conn_pkt_ctrl+0x324>
		} else if (_radio.conn_curr->llcp_phy.req !=
    ef82:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    ef86:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    ef8a:	4290      	cmp	r0, r2
    ef8c:	d01b      	beq.n	efc6 <isr_rx_conn_pkt_ctrl+0xcbe>
			_radio.conn_curr->llcp_phy.ack =
    ef8e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    ef92:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    ef96:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    ef9a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    ef9e:	f362 0002 	bfi	r0, r2, #0, #3
    efa2:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    efa6:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    efaa:	0780      	lsls	r0, r0, #30
    efac:	d50f      	bpl.n	efce <isr_rx_conn_pkt_ctrl+0xcc6>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    efae:	200c      	movs	r0, #12
    efb0:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    efb2:	2000      	movs	r0, #0
    efb4:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    efb6:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    efb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    efbc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    efc0:	7363      	strb	r3, [r4, #13]
    efc2:	f7ff bb33 	b.w	e62c <isr_rx_conn_pkt_ctrl+0x324>
			switch (llctrl->unknown_rsp.type) {
    efc6:	7b23      	ldrb	r3, [r4, #12]
    efc8:	2b12      	cmp	r3, #18
    efca:	f47f ab2f 	bne.w	e62c <isr_rx_conn_pkt_ctrl+0x324>
		_radio.conn_curr->procedure_expire = 0;
    efce:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    efd2:	f7ff bb99 	b.w	e708 <isr_rx_conn_pkt_ctrl+0x400>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    efd6:	7a41      	ldrb	r1, [r0, #9]
    efd8:	2014      	movs	r0, #20
    efda:	f7fb fc55 	bl	a888 <pdu_len_cmp>
    efde:	2800      	cmp	r0, #0
    efe0:	f000 8297 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    efe4:	2f14      	cmp	r7, #20
    efe6:	d129      	bne.n	f03c <isr_rx_conn_pkt_ctrl+0xd34>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    efe8:	487a      	ldr	r0, [pc, #488]	; (f1d4 <isr_rx_conn_pkt_ctrl+0xecc>)
    efea:	f7f8 fd18 	bl	7a1e <mem_acquire>
		if (!node_tx) {
    efee:	4606      	mov	r6, r0
    eff0:	2800      	cmp	r0, #0
    eff2:	f43f aba2 	beq.w	e73a <isr_rx_conn_pkt_ctrl+0x432>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    eff6:	4f73      	ldr	r7, [pc, #460]	; (f1c4 <isr_rx_conn_pkt_ctrl+0xebc>)
    eff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    effc:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    f000:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f004:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f006:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    f008:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f00a:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    f00e:	45e0      	cmp	r8, ip
    f010:	46b9      	mov	r9, r7
    f012:	f894 800b 	ldrb.w	r8, [r4, #11]
    f016:	d113      	bne.n	f040 <isr_rx_conn_pkt_ctrl+0xd38>
	      _radio.conn_curr->llcp_length.ack) &&
    f018:	f1b8 0f14 	cmp.w	r8, #20
    f01c:	d01c      	beq.n	f058 <isr_rx_conn_pkt_ctrl+0xd50>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    f01e:	f1b8 0f15 	cmp.w	r8, #21
    f022:	f000 829a 	beq.w	f55a <isr_rx_conn_pkt_ctrl+0x1252>
    f026:	4b68      	ldr	r3, [pc, #416]	; (f1c8 <isr_rx_conn_pkt_ctrl+0xec0>)
    f028:	9301      	str	r3, [sp, #4]
    f02a:	9300      	str	r3, [sp, #0]
    f02c:	4b67      	ldr	r3, [pc, #412]	; (f1cc <isr_rx_conn_pkt_ctrl+0xec4>)
    f02e:	4a6a      	ldr	r2, [pc, #424]	; (f1d8 <isr_rx_conn_pkt_ctrl+0xed0>)
    f030:	681c      	ldr	r4, [r3, #0]
    f032:	496a      	ldr	r1, [pc, #424]	; (f1dc <isr_rx_conn_pkt_ctrl+0xed4>)
    f034:	4b6a      	ldr	r3, [pc, #424]	; (f1e0 <isr_rx_conn_pkt_ctrl+0xed8>)
    f036:	486b      	ldr	r0, [pc, #428]	; (f1e4 <isr_rx_conn_pkt_ctrl+0xedc>)
    f038:	f7ff baae 	b.w	e598 <isr_rx_conn_pkt_ctrl+0x290>
	struct radio_pdu_node_tx *node_tx = NULL;
    f03c:	2600      	movs	r6, #0
    f03e:	e7da      	b.n	eff6 <isr_rx_conn_pkt_ctrl+0xcee>
		 LLCP_LENGTH_STATE_REQ) ||
    f040:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    f044:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    f048:	2f01      	cmp	r7, #1
    f04a:	d9e5      	bls.n	f018 <isr_rx_conn_pkt_ctrl+0xd10>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    f04c:	2f02      	cmp	r7, #2
    f04e:	d1e6      	bne.n	f01e <isr_rx_conn_pkt_ctrl+0xd16>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    f050:	f1a8 0714 	sub.w	r7, r8, #20
    f054:	2f01      	cmp	r7, #1
    f056:	d8e2      	bhi.n	f01e <isr_rx_conn_pkt_ctrl+0xd16>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    f058:	89a7      	ldrh	r7, [r4, #12]
    f05a:	2f1a      	cmp	r7, #26
    f05c:	d936      	bls.n	f0cc <isr_rx_conn_pkt_ctrl+0xdc4>
			eff_tx_octets = min(lr->max_rx_octets,
    f05e:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    f062:	4547      	cmp	r7, r8
    f064:	bf28      	it	cs
    f066:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    f068:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    f06c:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    f070:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    f074:	bf34      	ite	cc
    f076:	4693      	movcc	fp, r2
    f078:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    f07c:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    f080:	d326      	bcc.n	f0d0 <isr_rx_conn_pkt_ctrl+0xdc8>
			eff_tx_time = min(lr->max_rx_time,
    f082:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    f086:	45d0      	cmp	r8, sl
    f088:	bf28      	it	cs
    f08a:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    f08c:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    f090:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    f094:	bf34      	ite	cc
    f096:	4682      	movcc	sl, r0
    f098:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    f09c:	455a      	cmp	r2, fp
    f09e:	d052      	beq.n	f146 <isr_rx_conn_pkt_ctrl+0xe3e>
			free_count_rx = packet_rx_acquired_count_get() +
    f0a0:	f7fb fc3a 	bl	a918 <packet_rx_acquired_count_get>
    f0a4:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    f0a6:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    f0aa:	f7f8 fce7 	bl	7a7c <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    f0ae:	4420      	add	r0, r4
    f0b0:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    f0b2:	28ff      	cmp	r0, #255	; 0xff
    f0b4:	d90e      	bls.n	f0d4 <isr_rx_conn_pkt_ctrl+0xdcc>
    f0b6:	4b44      	ldr	r3, [pc, #272]	; (f1c8 <isr_rx_conn_pkt_ctrl+0xec0>)
    f0b8:	9301      	str	r3, [sp, #4]
    f0ba:	9300      	str	r3, [sp, #0]
    f0bc:	4b43      	ldr	r3, [pc, #268]	; (f1cc <isr_rx_conn_pkt_ctrl+0xec4>)
    f0be:	4a46      	ldr	r2, [pc, #280]	; (f1d8 <isr_rx_conn_pkt_ctrl+0xed0>)
    f0c0:	681c      	ldr	r4, [r3, #0]
    f0c2:	4946      	ldr	r1, [pc, #280]	; (f1dc <isr_rx_conn_pkt_ctrl+0xed4>)
    f0c4:	4b46      	ldr	r3, [pc, #280]	; (f1e0 <isr_rx_conn_pkt_ctrl+0xed8>)
    f0c6:	4848      	ldr	r0, [pc, #288]	; (f1e8 <isr_rx_conn_pkt_ctrl+0xee0>)
    f0c8:	f7ff ba66 	b.w	e598 <isr_rx_conn_pkt_ctrl+0x290>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f0cc:	460f      	mov	r7, r1
    f0ce:	e7cb      	b.n	f068 <isr_rx_conn_pkt_ctrl+0xd60>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f0d0:	46f0      	mov	r8, lr
    f0d2:	e7db      	b.n	f08c <isr_rx_conn_pkt_ctrl+0xd84>
			if (_radio.packet_rx_data_count == free_count_rx) {
    f0d4:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    f0d8:	4283      	cmp	r3, r0
    f0da:	f040 8235 	bne.w	f548 <isr_rx_conn_pkt_ctrl+0x1240>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f0de:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    f0e2:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f0e6:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    f0e8:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    f0ea:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    f0ee:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    f0f2:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    f0f6:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    f0fa:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    f0fe:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    f102:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    f106:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    f10a:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    f10e:	2303      	movs	r3, #3
    f110:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    f114:	2e00      	cmp	r6, #0
    f116:	f43f a9d1 	beq.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f11a:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    f11c:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    f120:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f124:	f043 0303 	orr.w	r3, r3, #3
    f128:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    f12a:	2309      	movs	r3, #9
    f12c:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f12e:	2315      	movs	r3, #21
    f130:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    f132:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    f134:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    f138:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    f13c:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    f13e:	f7fd fc95 	bl	ca6c <ctrl_tx_enqueue>
    f142:	f7ff b9bb 	b.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->pause_tx = 0;
    f146:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    f14a:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    f14e:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    f152:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    f156:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    f158:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    f15c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    f160:	d103      	bne.n	f16a <isr_rx_conn_pkt_ctrl+0xe62>
    f162:	45c6      	cmp	lr, r8
    f164:	d101      	bne.n	f16a <isr_rx_conn_pkt_ctrl+0xe62>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    f166:	4550      	cmp	r0, sl
    f168:	d0d4      	beq.n	f114 <isr_rx_conn_pkt_ctrl+0xe0c>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    f16a:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    f16c:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    f170:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    f174:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    f176:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    f17a:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    f17c:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    f180:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    f184:	702b      	strb	r3, [r5, #0]
    f186:	e7c5      	b.n	f114 <isr_rx_conn_pkt_ctrl+0xe0c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    f188:	7a41      	ldrb	r1, [r0, #9]
    f18a:	2016      	movs	r0, #22
    f18c:	f7fb fb7c 	bl	a888 <pdu_len_cmp>
    f190:	2800      	cmp	r0, #0
    f192:	f000 81be 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.role == ROLE_MASTER) {
    f196:	480b      	ldr	r0, [pc, #44]	; (f1c4 <isr_rx_conn_pkt_ctrl+0xebc>)
    f198:	7cc3      	ldrb	r3, [r0, #19]
    f19a:	2b04      	cmp	r3, #4
    f19c:	d16b      	bne.n	f276 <isr_rx_conn_pkt_ctrl+0xf6e>
			if ((_radio.conn_curr->llcp_phy.ack !=
    f19e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    f1a2:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    f1a6:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    f1aa:	428b      	cmp	r3, r1
    f1ac:	d01e      	beq.n	f1ec <isr_rx_conn_pkt_ctrl+0xee4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    f1ae:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    f1b2:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    f1b6:	3a01      	subs	r2, #1
    f1b8:	2a02      	cmp	r2, #2
    f1ba:	d817      	bhi.n	f1ec <isr_rx_conn_pkt_ctrl+0xee4>
				nack = reject_ext_ind_send(_radio.conn_curr,
    f1bc:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    f1be:	2116      	movs	r1, #22
    f1c0:	f7ff bb94 	b.w	e8ec <isr_rx_conn_pkt_ctrl+0x5e4>
    f1c4:	200008c0 	.word	0x200008c0
    f1c8:	000161ba 	.word	0x000161ba
    f1cc:	20003a5c 	.word	0x20003a5c
    f1d0:	000194c8 	.word	0x000194c8
    f1d4:	20000a1c 	.word	0x20000a1c
    f1d8:	000179e1 	.word	0x000179e1
    f1dc:	00017a29 	.word	0x00017a29
    f1e0:	000194af 	.word	0x000194af
    f1e4:	00019da9 	.word	0x00019da9
    f1e8:	00019921 	.word	0x00019921
			} else if (((_radio.conn_curr->llcp_req !=
    f1ec:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    f1f0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    f1f4:	4295      	cmp	r5, r2
    f1f6:	d003      	beq.n	f200 <isr_rx_conn_pkt_ctrl+0xef8>
				     _radio.conn_curr->llcp_ack) &&
    f1f8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    f1fc:	2a03      	cmp	r2, #3
    f1fe:	d105      	bne.n	f20c <isr_rx_conn_pkt_ctrl+0xf04>
				     LLCP_ENCRYPTION)) ||
    f200:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    f204:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    f208:	4295      	cmp	r5, r2
    f20a:	d001      	beq.n	f210 <isr_rx_conn_pkt_ctrl+0xf08>
				nack = reject_ext_ind_send(_radio.conn_curr,
    f20c:	222a      	movs	r2, #42	; 0x2a
    f20e:	e7d6      	b.n	f1be <isr_rx_conn_pkt_ctrl+0xeb6>
				_radio.conn_curr->llcp_phy.state =
    f210:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    f214:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    f216:	f042 0203 	orr.w	r2, r2, #3
    f21a:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    f21e:	d116      	bne.n	f24e <isr_rx_conn_pkt_ctrl+0xf46>
					_radio.conn_curr->llcp_phy.ack--;
    f220:	3b01      	subs	r3, #1
    f222:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    f226:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    f22a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    f22e:	f36f 0341 	bfc	r3, #1, #1
    f232:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    f236:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    f23a:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    f23e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    f242:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f246:	f362 1347 	bfi	r3, r2, #5, #3
    f24a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f24e:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    f252:	7b62      	ldrb	r2, [r4, #13]
    f254:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f258:	400a      	ands	r2, r1
    f25a:	f362 0384 	bfi	r3, r2, #2, #3
    f25e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f262:	7b22      	ldrb	r2, [r4, #12]
    f264:	b2db      	uxtb	r3, r3
    f266:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f26a:	f362 1347 	bfi	r3, r2, #5, #3
    f26e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    f272:	f7ff b923 	b.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    f276:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f27a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    f27e:	f7f8 fbce 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    f282:	4601      	mov	r1, r0
    f284:	2800      	cmp	r0, #0
    f286:	f43f aa58 	beq.w	e73a <isr_rx_conn_pkt_ctrl+0x432>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f28a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f28e:	2202      	movs	r2, #2
    f290:	f362 0301 	bfi	r3, r2, #0, #2
    f294:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    f298:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    f29c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    f2a0:	4293      	cmp	r3, r2
    f2a2:	d11a      	bne.n	f2da <isr_rx_conn_pkt_ctrl+0xfd2>
		conn->llcp_phy.ack--;
    f2a4:	3b01      	subs	r3, #1
    f2a6:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    f2aa:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    f2ae:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    f2b2:	f36f 0341 	bfc	r3, #1, #1
    f2b6:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    f2ba:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f2be:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    f2c2:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    f2c6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f2ca:	f362 1347 	bfi	r3, r2, #5, #3
    f2ce:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    f2d2:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    f2d6:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    f2da:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f2de:	7b62      	ldrb	r2, [r4, #13]
    f2e0:	f3c3 0082 	ubfx	r0, r3, #2, #3
    f2e4:	4002      	ands	r2, r0
    f2e6:	f362 0384 	bfi	r3, r2, #2, #3
    f2ea:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    f2ee:	7b22      	ldrb	r2, [r4, #12]
    f2f0:	b2db      	uxtb	r3, r3
    f2f2:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f2f6:	f362 1347 	bfi	r3, r2, #5, #3
    f2fa:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2fe:	790b      	ldrb	r3, [r1, #4]
    f300:	f043 0303 	orr.w	r3, r3, #3
    f304:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    f306:	2303      	movs	r3, #3
    f308:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    f30a:	2317      	movs	r3, #23
    f30c:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    f30e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f312:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f316:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    f318:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    f31c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f320:	724b      	strb	r3, [r1, #9]
    f322:	f7ff ba1c 	b.w	e75e <isr_rx_conn_pkt_ctrl+0x456>
		if (_radio.conn_curr->role ||
    f326:	4e92      	ldr	r6, [pc, #584]	; (f570 <isr_rx_conn_pkt_ctrl+0x1268>)
    f328:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    f32c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    f330:	2b00      	cmp	r3, #0
    f332:	f2c0 80ee 	blt.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    f336:	7a41      	ldrb	r1, [r0, #9]
    f338:	2017      	movs	r0, #23
    f33a:	f7fb faa5 	bl	a888 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    f33e:	2800      	cmp	r0, #0
    f340:	f000 80e7 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		if ((_radio.role == ROLE_MASTER) &&
    f344:	7cf3      	ldrb	r3, [r6, #19]
    f346:	2b04      	cmp	r3, #4
    f348:	f47f a8b8 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
    f34c:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    f350:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    f354:	429a      	cmp	r2, r3
    f356:	f43f a8b1 	beq.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		    (_radio.conn_curr->llcp_phy.state ==
    f35a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    f35e:	f003 0203 	and.w	r2, r3, #3
    f362:	2a02      	cmp	r2, #2
    f364:	f47f a8aa 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    f368:	f043 0303 	orr.w	r3, r3, #3
    f36c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    f370:	7b62      	ldrb	r2, [r4, #13]
    f372:	f3c3 0182 	ubfx	r1, r3, #2, #3
    f376:	400a      	ands	r2, r1
    f378:	f362 0384 	bfi	r3, r2, #2, #3
    f37c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    f380:	7b22      	ldrb	r2, [r4, #12]
    f382:	b2db      	uxtb	r3, r3
    f384:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    f388:	f362 1347 	bfi	r3, r2, #5, #3
    f38c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    f390:	f7ff b845 	b.w	e41e <isr_rx_conn_pkt_ctrl+0x116>
		if (!_radio.conn_curr->role ||
    f394:	4b76      	ldr	r3, [pc, #472]	; (f570 <isr_rx_conn_pkt_ctrl+0x1268>)
    f396:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    f39a:	f996 301d 	ldrsb.w	r3, [r6, #29]
    f39e:	2b00      	cmp	r3, #0
    f3a0:	f280 80b7 	bge.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    f3a4:	7a41      	ldrb	r1, [r0, #9]
    f3a6:	2018      	movs	r0, #24
    f3a8:	f7fb fa6e 	bl	a888 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    f3ac:	2800      	cmp	r0, #0
    f3ae:	f000 80b0 	beq.w	f512 <isr_rx_conn_pkt_ctrl+0x120a>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    f3b2:	7b27      	ldrb	r7, [r4, #12]
    f3b4:	7b62      	ldrb	r2, [r4, #13]
    f3b6:	ea47 0002 	orr.w	r0, r7, r2
    f3ba:	f010 0007 	ands.w	r0, r0, #7
    f3be:	d125      	bne.n	f40c <isr_rx_conn_pkt_ctrl+0x1104>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f3c0:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    f3c4:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    f3c8:	4293      	cmp	r3, r2
    f3ca:	f43f a877 	beq.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    f3ce:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    f3d2:	f003 0303 	and.w	r3, r3, #3
    f3d6:	2b02      	cmp	r3, #2
    f3d8:	f47f a870 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (!conn->llcp_phy.cmd) {
    f3dc:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f3e0:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    f3e4:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    f3e6:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    f3ea:	f57f a867 	bpl.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f3ee:	230c      	movs	r3, #12
		upd->status = 0;
    f3f0:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    f3f2:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    f3f4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    f3f8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f3fc:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    f3fe:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    f402:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f406:	7363      	strb	r3, [r4, #13]
    f408:	f7ff ba5b 	b.w	e8c2 <isr_rx_conn_pkt_ctrl+0x5ba>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    f40c:	89e0      	ldrh	r0, [r4, #14]
    f40e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    f410:	1ac3      	subs	r3, r0, r3
    f412:	041b      	lsls	r3, r3, #16
    f414:	f100 80a6 	bmi.w	f564 <isr_rx_conn_pkt_ctrl+0x125c>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f418:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    f41c:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    f420:	428b      	cmp	r3, r1
    f422:	d007      	beq.n	f434 <isr_rx_conn_pkt_ctrl+0x112c>
    f424:	4b53      	ldr	r3, [pc, #332]	; (f574 <isr_rx_conn_pkt_ctrl+0x126c>)
    f426:	9301      	str	r3, [sp, #4]
    f428:	9300      	str	r3, [sp, #0]
    f42a:	4b53      	ldr	r3, [pc, #332]	; (f578 <isr_rx_conn_pkt_ctrl+0x1270>)
    f42c:	681c      	ldr	r4, [r3, #0]
    f42e:	4b53      	ldr	r3, [pc, #332]	; (f57c <isr_rx_conn_pkt_ctrl+0x1274>)
    f430:	f7fe bfb2 	b.w	e398 <isr_rx_conn_pkt_ctrl+0x90>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f434:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    f438:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    f43c:	42a3      	cmp	r3, r4
    f43e:	d014      	beq.n	f46a <isr_rx_conn_pkt_ctrl+0x1162>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    f440:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    f444:	f003 0303 	and.w	r3, r3, #3
    f448:	2b02      	cmp	r3, #2
    f44a:	d10e      	bne.n	f46a <isr_rx_conn_pkt_ctrl+0x1162>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f44c:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f450:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f454:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    f458:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f45c:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    f460:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f462:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    f466:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f46a:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    f46e:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    f472:	f002 0207 	and.w	r2, r2, #7
    f476:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    f47a:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    f47e:	f36f 0300 	bfc	r3, #0, #1
    f482:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    f486:	2008      	movs	r0, #8
	conn->llcp_ack--;
    f488:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    f48a:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    f48e:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    f492:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    f496:	2b00      	cmp	r3, #0
    f498:	f43f a810 	beq.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    f49c:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    f4a0:	f362 0302 	bfi	r3, r2, #0, #3
    f4a4:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    f4a8:	f7ff b808 	b.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (_radio.conn_curr->role ||
    f4ac:	4e30      	ldr	r6, [pc, #192]	; (f570 <isr_rx_conn_pkt_ctrl+0x1268>)
    f4ae:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    f4b2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    f4b6:	2b00      	cmp	r3, #0
    f4b8:	db2b      	blt.n	f512 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    f4ba:	7a41      	ldrb	r1, [r0, #9]
    f4bc:	2019      	movs	r0, #25
    f4be:	f7fb f9e3 	bl	a888 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    f4c2:	b330      	cbz	r0, f512 <isr_rx_conn_pkt_ctrl+0x120a>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    f4c4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    f4c8:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    f4cc:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    f4d0:	7b22      	ldrb	r2, [r4, #12]
    f4d2:	f003 0307 	and.w	r3, r3, #7
    f4d6:	4213      	tst	r3, r2
    f4d8:	f43e aff0 	beq.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
			if (conn->llcp_req != conn->llcp_ack) {
    f4dc:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    f4e0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    f4e4:	429a      	cmp	r2, r3
    f4e6:	f47e afe9 	bne.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
			memcpy(&conn->llcp.chan_map.chm[0],
    f4ea:	2205      	movs	r2, #5
    f4ec:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    f4f0:	f105 0079 	add.w	r0, r5, #121	; 0x79
    f4f4:	f7f2 fcbc 	bl	1e70 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    f4f8:	2301      	movs	r3, #1
    f4fa:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    f4fe:	2302      	movs	r3, #2
    f500:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    f504:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    f508:	3b01      	subs	r3, #1
    f50a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    f50e:	f7fe bfd5 	b.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
		nack = unknown_rsp_send(_radio.conn_curr,
    f512:	4817      	ldr	r0, [pc, #92]	; (f570 <isr_rx_conn_pkt_ctrl+0x1268>)
    f514:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f518:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    f51c:	f7f8 fa7f 	bl	7a1e <mem_acquire>
	if (!node_tx) {
    f520:	4601      	mov	r1, r0
    f522:	2800      	cmp	r0, #0
    f524:	f43f a909 	beq.w	e73a <isr_rx_conn_pkt_ctrl+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f528:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    f52a:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f52c:	f043 0303 	orr.w	r3, r3, #3
    f530:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    f532:	2302      	movs	r3, #2
    f534:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    f536:	2307      	movs	r3, #7
    f538:	71c3      	strb	r3, [r0, #7]
    f53a:	f7ff b93a 	b.w	e7b2 <isr_rx_conn_pkt_ctrl+0x4aa>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    f53e:	2328      	movs	r3, #40	; 0x28
    f540:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    f544:	f7fe bfba 	b.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
	if (node_tx) {
    f548:	2e00      	cmp	r6, #0
    f54a:	f43f a8f6 	beq.w	e73a <isr_rx_conn_pkt_ctrl+0x432>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f54e:	490c      	ldr	r1, [pc, #48]	; (f580 <isr_rx_conn_pkt_ctrl+0x1278>)
    f550:	4630      	mov	r0, r6
    f552:	f7f8 fa7e 	bl	7a52 <mem_release>
    f556:	f7ff b8f0 	b.w	e73a <isr_rx_conn_pkt_ctrl+0x432>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    f55a:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    f55c:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    f55e:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    f560:	4693      	mov	fp, r2
    f562:	e5d7      	b.n	f114 <isr_rx_conn_pkt_ctrl+0xe0c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    f564:	2328      	movs	r3, #40	; 0x28
    f566:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    f56a:	f7fe bfa7 	b.w	e4bc <isr_rx_conn_pkt_ctrl+0x1b4>
    f56e:	bf00      	nop
    f570:	200008c0 	.word	0x200008c0
    f574:	000161ba 	.word	0x000161ba
    f578:	20003a5c 	.word	0x20003a5c
    f57c:	00019832 	.word	0x00019832
    f580:	20000a1c 	.word	0x20000a1c
    f584:	00000000 	.word	0x00000000

0000f588 <isr>:
{
    f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f58c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    f58e:	f003 ff9f 	bl	134d0 <radio_is_done>
    f592:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    f594:	b366      	cbz	r6, f5f0 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    f596:	f003 ffbb 	bl	13510 <radio_crc_is_valid>
    f59a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    f59c:	f004 f83c 	bl	13618 <radio_filter_has_match>
    f5a0:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    f5a4:	f004 f842 	bl	1362c <radio_filter_match_get>
    f5a8:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    f5ac:	f004 fa26 	bl	139fc <radio_ar_has_match>
    f5b0:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    f5b4:	f004 fa10 	bl	139d8 <radio_ar_match_get>
    f5b8:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    f5bc:	f003 fff6 	bl	135ac <radio_rssi_is_ready>
    f5c0:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    f5c2:	4cb7      	ldr	r4, [pc, #732]	; (f8a0 <isr+0x318>)
	radio_status_reset();
    f5c4:	f003 ff6e 	bl	134a4 <radio_status_reset>
	radio_tmr_status_reset();
    f5c8:	f004 f842 	bl	13650 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f5cc:	f004 f81c 	bl	13608 <radio_filter_status_reset>
	radio_ar_status_reset();
    f5d0:	f004 fa08 	bl	139e4 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f5d4:	f003 ffe2 	bl	1359c <radio_rssi_status_reset>
	switch (_radio.state) {
    f5d8:	7d23      	ldrb	r3, [r4, #20]
    f5da:	2b05      	cmp	r3, #5
    f5dc:	f201 84aa 	bhi.w	10f34 <__kernel_ram_size+0xf34>
    f5e0:	e8df f013 	tbh	[pc, r3, lsl #1]
    f5e4:	00d1007e 	.word	0x00d1007e
    f5e8:	0a44000e 	.word	0x0a44000e
    f5ec:	0a440a44 	.word	0x0a440a44
		devmatch_id = irkmatch_id = 0xFF;
    f5f0:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f5f4:	4635      	mov	r5, r6
    f5f6:	46b2      	mov	sl, r6
    f5f8:	46b1      	mov	r9, r6
    f5fa:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    f5fc:	46d8      	mov	r8, fp
    f5fe:	e7e0      	b.n	f5c2 <isr+0x3a>
	_radio.state = STATE_RX;
    f600:	2301      	movs	r3, #1
    f602:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    f604:	f004 f926 	bl	13854 <radio_tmr_tifs_base_get>
    f608:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    f60a:	2096      	movs	r0, #150	; 0x96
    f60c:	f004 f82e 	bl	1366c <radio_tmr_tifs_set>
	switch (_radio.role) {
    f610:	7ce3      	ldrb	r3, [r4, #19]
    f612:	3b01      	subs	r3, #1
    f614:	2b03      	cmp	r3, #3
    f616:	f200 80ac 	bhi.w	f772 <isr+0x1ea>
    f61a:	e8df f003 	tbb	[pc, r3]
    f61e:	3402      	.short	0x3402
    f620:	6464      	.short	0x6464
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f622:	2300      	movs	r3, #0
    f624:	461a      	mov	r2, r3
    f626:	4619      	mov	r1, r3
    f628:	4618      	mov	r0, r3
    f62a:	f003 ff8f 	bl	1354c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f62e:	f003 ff7d 	bl	1352c <radio_pkt_scratch_get>
    f632:	f003 feff 	bl	13434 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f636:	f003 ff41 	bl	134bc <radio_is_ready>
    f63a:	b148      	cbz	r0, f650 <isr+0xc8>
		LL_ASSERT(!radio_is_ready());
    f63c:	4b99      	ldr	r3, [pc, #612]	; (f8a4 <isr+0x31c>)
    f63e:	9301      	str	r3, [sp, #4]
    f640:	9300      	str	r3, [sp, #0]
    f642:	4b99      	ldr	r3, [pc, #612]	; (f8a8 <isr+0x320>)
    f644:	681c      	ldr	r4, [r3, #0]
    f646:	4b99      	ldr	r3, [pc, #612]	; (f8ac <isr+0x324>)
	LL_ASSERT(!radio_is_ready());
    f648:	4a99      	ldr	r2, [pc, #612]	; (f8b0 <isr+0x328>)
    f64a:	499a      	ldr	r1, [pc, #616]	; (f8b4 <isr+0x32c>)
    f64c:	489a      	ldr	r0, [pc, #616]	; (f8b8 <isr+0x330>)
    f64e:	e357      	b.n	fd00 <isr+0x778>
		if (ctrl_rl_enabled()) {
    f650:	f003 f9f6 	bl	12a40 <ctrl_rl_enabled>
    f654:	b138      	cbz	r0, f666 <isr+0xde>
			u8_t count, *irks = ctrl_irks_get(&count);
    f656:	a810      	add	r0, sp, #64	; 0x40
    f658:	f002 ff2a 	bl	124b0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f65c:	4601      	mov	r1, r0
    f65e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f662:	f004 f987 	bl	13974 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f666:	2100      	movs	r1, #0
    f668:	4608      	mov	r0, r1
    f66a:	f003 fef8 	bl	1345e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f66e:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f670:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f672:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f674:	4608      	mov	r0, r1
    f676:	f003 feee 	bl	13456 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f67a:	1a28      	subs	r0, r5, r0
    f67c:	f004 f880 	bl	13780 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f680:	f004 f8d0 	bl	13824 <radio_tmr_end_capture>
    f684:	e02c      	b.n	f6e0 <isr+0x158>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f686:	2300      	movs	r3, #0
    f688:	461a      	mov	r2, r3
    f68a:	4619      	mov	r1, r3
    f68c:	4618      	mov	r0, r3
    f68e:	f003 ff5d 	bl	1354c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f692:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f696:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f69a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f69e:	3008      	adds	r0, #8
    f6a0:	f003 fec8 	bl	13434 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f6a4:	f003 ff0a 	bl	134bc <radio_is_ready>
    f6a8:	2800      	cmp	r0, #0
    f6aa:	d1c7      	bne.n	f63c <isr+0xb4>
		if (ctrl_rl_enabled()) {
    f6ac:	f003 f9c8 	bl	12a40 <ctrl_rl_enabled>
    f6b0:	b138      	cbz	r0, f6c2 <isr+0x13a>
			u8_t count, *irks = ctrl_irks_get(&count);
    f6b2:	a810      	add	r0, sp, #64	; 0x40
    f6b4:	f002 fefc 	bl	124b0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f6b8:	4601      	mov	r1, r0
    f6ba:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f6be:	f004 f959 	bl	13974 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    f6c2:	2100      	movs	r1, #0
    f6c4:	4608      	mov	r0, r1
    f6c6:	f003 feca 	bl	1345e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    f6ca:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    f6cc:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    f6ce:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    f6d0:	4608      	mov	r0, r1
    f6d2:	f003 fec0 	bl	13456 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f6d6:	1a28      	subs	r0, r5, r0
    f6d8:	f004 f852 	bl	13780 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f6dc:	f003 ff4e 	bl	1357c <radio_rssi_measure>
}
    f6e0:	b013      	add	sp, #76	; 0x4c
    f6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f6e6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    f6ea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f6ee:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f6f2:	2100      	movs	r1, #0
    f6f4:	09d3      	lsrs	r3, r2, #7
    f6f6:	f000 0007 	and.w	r0, r0, #7
    f6fa:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f6fe:	f003 ff25 	bl	1354c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f702:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f706:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    f70a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f70e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    f712:	3108      	adds	r1, #8
    f714:	f7fb fc9e 	bl	b054 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f718:	f003 fed0 	bl	134bc <radio_is_ready>
    f71c:	2800      	cmp	r0, #0
    f71e:	d18d      	bne.n	f63c <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f720:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f724:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f728:	2101      	movs	r1, #1
    f72a:	f000 0007 	and.w	r0, r0, #7
    f72e:	f003 fe96 	bl	1345e <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f732:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f736:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    f73a:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    f73e:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    f740:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f742:	4405      	add	r5, r0
	switch (phy) {
    f744:	d013      	beq.n	f76e <isr+0x1e6>
		return 40;
    f746:	2b04      	cmp	r3, #4
    f748:	bf0c      	ite	eq
    f74a:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    f74e:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f750:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    f752:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f756:	09c1      	lsrs	r1, r0, #7
    f758:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f75c:	f003 fe7b 	bl	13456 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f760:	1a28      	subs	r0, r5, r0
    f762:	f004 f80d 	bl	13780 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f766:	2001      	movs	r0, #1
    f768:	f7fc faf6 	bl	bd58 <packet_tx_enqueue>
    f76c:	e7b8      	b.n	f6e0 <isr+0x158>
		return 24;
    f76e:	2018      	movs	r0, #24
    f770:	e7ee      	b.n	f750 <isr+0x1c8>
		LL_ASSERT(0);
    f772:	4b4c      	ldr	r3, [pc, #304]	; (f8a4 <isr+0x31c>)
    f774:	9301      	str	r3, [sp, #4]
    f776:	9300      	str	r3, [sp, #0]
    f778:	4b4b      	ldr	r3, [pc, #300]	; (f8a8 <isr+0x320>)
    f77a:	681c      	ldr	r4, [r3, #0]
    f77c:	4b4b      	ldr	r3, [pc, #300]	; (f8ac <isr+0x324>)
		LL_ASSERT(0);
    f77e:	4a4c      	ldr	r2, [pc, #304]	; (f8b0 <isr+0x328>)
    f780:	494c      	ldr	r1, [pc, #304]	; (f8b4 <isr+0x32c>)
    f782:	484e      	ldr	r0, [pc, #312]	; (f8bc <isr+0x334>)
    f784:	e2bc      	b.n	fd00 <isr+0x778>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f786:	b926      	cbnz	r6, f792 <isr+0x20a>
		_radio.state = STATE_CLOSE;
    f788:	2303      	movs	r3, #3
    f78a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f78c:	f003 fe78 	bl	13480 <radio_disable>
    f790:	e7a6      	b.n	f6e0 <isr+0x158>
	switch (_radio.role) {
    f792:	7ce3      	ldrb	r3, [r4, #19]
    f794:	3b01      	subs	r3, #1
    f796:	2b03      	cmp	r3, #3
    f798:	f201 8160 	bhi.w	10a5c <__kernel_ram_size+0xa5c>
    f79c:	e8df f013 	tbh	[pc, r3, lsl #1]
    f7a0:	02b70004 	.word	0x02b70004
    f7a4:	05f905f9 	.word	0x05f905f9
		if (crc_ok) {
    f7a8:	2f00      	cmp	r7, #0
    f7aa:	d0ed      	beq.n	f788 <isr+0x200>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f7ac:	f1ba 0f00 	cmp.w	sl, #0
    f7b0:	d039      	beq.n	f826 <isr+0x29e>
    f7b2:	4658      	mov	r0, fp
    f7b4:	f002 fee2 	bl	1257c <ctrl_rl_irk_idx>
    f7b8:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    f7bc:	f003 feb6 	bl	1352c <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f7c0:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    f7c4:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f7c6:	232b      	movs	r3, #43	; 0x2b
    f7c8:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f7ca:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    f7cc:	fb11 3302 	smlabb	r3, r1, r2, r3
    f7d0:	930a      	str	r3, [sp, #40]	; 0x28
    f7d2:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f7d4:	f000 030f 	and.w	r3, r0, #15
    f7d8:	2b03      	cmp	r3, #3
    f7da:	d10a      	bne.n	f7f2 <isr+0x26a>
    f7dc:	7873      	ldrb	r3, [r6, #1]
    f7de:	2b0c      	cmp	r3, #12
    f7e0:	d107      	bne.n	f7f2 <isr+0x26a>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f7e2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f7e6:	065f      	lsls	r7, r3, #25
    f7e8:	d51f      	bpl.n	f82a <isr+0x2a2>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f7ea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    f7ee:	0658      	lsls	r0, r3, #25
    f7f0:	d44b      	bmi.n	f88a <isr+0x302>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    f7f2:	7830      	ldrb	r0, [r6, #0]
    f7f4:	f000 030f 	and.w	r3, r0, #15
    f7f8:	2b05      	cmp	r3, #5
    f7fa:	d1c5      	bne.n	f788 <isr+0x200>
    f7fc:	7873      	ldrb	r3, [r6, #1]
    f7fe:	2b22      	cmp	r3, #34	; 0x22
    f800:	d1c2      	bne.n	f788 <isr+0x200>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f804:	5ce3      	ldrb	r3, [r4, r3]
    f806:	f003 030f 	and.w	r3, r3, #15
    f80a:	2b01      	cmp	r3, #1
    f80c:	f040 8155 	bne.w	faba <isr+0x532>
					    ci->connect_ind.init_addr,
    f810:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    f812:	aa10      	add	r2, sp, #64	; 0x40
    f814:	4639      	mov	r1, r7
    f816:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f81a:	f003 f8b5 	bl	12988 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    f81e:	2800      	cmp	r0, #0
    f820:	d150      	bne.n	f8c4 <isr+0x33c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f822:	2000      	movs	r0, #0
    f824:	e05e      	b.n	f8e4 <isr+0x35c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    f826:	20ff      	movs	r0, #255	; 0xff
    f828:	e7c6      	b.n	f7b8 <isr+0x230>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    f82a:	aa10      	add	r2, sp, #64	; 0x40
    f82c:	1cb1      	adds	r1, r6, #2
    f82e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f832:	f003 f8a9 	bl	12988 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    f836:	2800      	cmp	r0, #0
    f838:	d0d7      	beq.n	f7ea <isr+0x262>
	return (adv->tx_addr == sr->rx_addr) &&
    f83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f83c:	7832      	ldrb	r2, [r6, #0]
    f83e:	5ce3      	ldrb	r3, [r4, r3]
    f840:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f844:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f848:	d1d3      	bne.n	f7f2 <isr+0x26a>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    f84a:	2206      	movs	r2, #6
    f84c:	f106 0108 	add.w	r1, r6, #8
    f850:	1ca8      	adds	r0, r5, #2
    f852:	f7f2 faf8 	bl	1e46 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    f856:	2800      	cmp	r0, #0
    f858:	d1cb      	bne.n	f7f2 <isr+0x26a>
		_radio.state = STATE_CLOSE;
    f85a:	2303      	movs	r3, #3
    f85c:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    f85e:	f003 fe7f 	bl	13560 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    f862:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    f866:	2327      	movs	r3, #39	; 0x27
    f868:	fb03 4000 	mla	r0, r3, r0, r4
    f86c:	307b      	adds	r0, #123	; 0x7b
    f86e:	f003 fde7 	bl	13440 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f872:	f003 fe23 	bl	134bc <radio_is_ready>
    f876:	2800      	cmp	r0, #0
    f878:	f43f af32 	beq.w	f6e0 <isr+0x158>
    f87c:	4b09      	ldr	r3, [pc, #36]	; (f8a4 <isr+0x31c>)
    f87e:	9301      	str	r3, [sp, #4]
    f880:	9300      	str	r3, [sp, #0]
    f882:	4b09      	ldr	r3, [pc, #36]	; (f8a8 <isr+0x320>)
    f884:	681c      	ldr	r4, [r3, #0]
    f886:	4b0e      	ldr	r3, [pc, #56]	; (f8c0 <isr+0x338>)
    f888:	e6de      	b.n	f648 <isr+0xc0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    f88a:	f1b9 0f00 	cmp.w	r9, #0
    f88e:	d1d4      	bne.n	f83a <isr+0x2b2>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f890:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f894:	f002 febe 	bl	12614 <ctrl_irk_whitelisted>
    f898:	2800      	cmp	r0, #0
    f89a:	d1ce      	bne.n	f83a <isr+0x2b2>
    f89c:	e7a9      	b.n	f7f2 <isr+0x26a>
    f89e:	bf00      	nop
    f8a0:	200008c0 	.word	0x200008c0
    f8a4:	000161ba 	.word	0x000161ba
    f8a8:	20003a5c 	.word	0x20003a5c
    f8ac:	0001943c 	.word	0x0001943c
    f8b0:	000179e1 	.word	0x000179e1
    f8b4:	00017a29 	.word	0x00017a29
    f8b8:	00019b02 	.word	0x00019b02
    f8bc:	00017955 	.word	0x00017955
    f8c0:	0001944f 	.word	0x0001944f
		       isr_adv_ci_adva_check(adv, ci) &&
    f8c4:	4631      	mov	r1, r6
    f8c6:	4628      	mov	r0, r5
    f8c8:	f7fb feb4 	bl	b634 <isr_adv_ci_adva_check>
					    rl_idx) &&
    f8cc:	2800      	cmp	r0, #0
    f8ce:	d0a8      	beq.n	f822 <isr+0x29a>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    f8d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    f8d4:	2bff      	cmp	r3, #255	; 0xff
    f8d6:	f000 80dd 	beq.w	fa94 <isr+0x50c>
		return rl_idx == _radio.advertiser.rl_idx;
    f8da:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    f8de:	1ac1      	subs	r1, r0, r3
    f8e0:	4248      	negs	r0, r1
    f8e2:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    f8e4:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    f8e8:	2800      	cmp	r0, #0
    f8ea:	f43f af4d 	beq.w	f788 <isr+0x200>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    f8ee:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f8f2:	b133      	cbz	r3, f902 <isr+0x37a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    f8f4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    f8f8:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f8fc:	429a      	cmp	r2, r3
    f8fe:	f47f af43 	bne.w	f788 <isr+0x200>
    f902:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    f906:	2b00      	cmp	r3, #0
    f908:	f43f af3e 	beq.w	f788 <isr+0x200>
			node_rx = packet_rx_reserve_get(4);
    f90c:	2004      	movs	r0, #4
    f90e:	f7fb f819 	bl	a944 <packet_rx_reserve_get>
		if (!node_rx) {
    f912:	4607      	mov	r7, r0
    f914:	2800      	cmp	r0, #0
    f916:	f43f af37 	beq.w	f788 <isr+0x200>
		_radio.state = STATE_STOP;
    f91a:	f04f 0904 	mov.w	r9, #4
    f91e:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    f922:	f003 fdad 	bl	13480 <radio_disable>
		conn = _radio.advertiser.conn;
    f926:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f92a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    f92e:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f930:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f934:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    f936:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f93a:	f7f8 f8a8 	bl	7a8e <mem_index_get>
		memcpy(&conn->access_addr[0],
    f93e:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f942:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    f944:	2203      	movs	r2, #3
    f946:	f106 0112 	add.w	r1, r6, #18
    f94a:	f105 0014 	add.w	r0, r5, #20
    f94e:	f7f2 fa8f 	bl	1e70 <memcpy>
		memcpy(&conn->data_chan_map[0],
    f952:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    f956:	464a      	mov	r2, r9
    f958:	f106 010e 	add.w	r1, r6, #14
    f95c:	4650      	mov	r0, sl
    f95e:	f7f2 fa87 	bl	1e70 <memcpy>
		memcpy(&conn->data_chan_map[0],
    f962:	2205      	movs	r2, #5
    f964:	f106 011e 	add.w	r1, r6, #30
    f968:	4640      	mov	r0, r8
    f96a:	f7f2 fa81 	bl	1e70 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    f96e:	2105      	movs	r1, #5
    f970:	4640      	mov	r0, r8
    f972:	f7f8 f9ff 	bl	7d74 <util_ones_count_get>
		conn->data_chan_count =
    f976:	7f6b      	ldrb	r3, [r5, #29]
    f978:	f360 0305 	bfi	r3, r0, #0, #6
    f97c:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    f97e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    f982:	f3c3 0304 	ubfx	r3, r3, #0, #5
    f986:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    f988:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    f98a:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    f98c:	f240 48e2 	movw	r8, #1250	; 0x4e2
    f990:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    f994:	7ef2      	ldrb	r2, [r6, #27]
    f996:	7eb3      	ldrb	r3, [r6, #26]
    f998:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    f99c:	4651      	mov	r1, sl
    f99e:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    f9a0:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    f9a2:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    f9a6:	f7f2 fa63 	bl	1e70 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    f9aa:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f9ac:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    f9ae:	f242 7210 	movw	r2, #10000	; 0x2710
    f9b2:	fb02 8303 	mla	r3, r2, r3, r8
    f9b6:	3b01      	subs	r3, #1
    f9b8:	fbb3 f3f8 	udiv	r3, r3, r8
    f9bc:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    f9be:	4b55      	ldr	r3, [pc, #340]	; (fb14 <isr+0x58c>)
    f9c0:	4443      	add	r3, r8
    f9c2:	fbb3 f3f8 	udiv	r3, r3, r8
    f9c6:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f9ca:	4b53      	ldr	r3, [pc, #332]	; (fb18 <isr+0x590>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f9cc:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f9ce:	4443      	add	r3, r8
    f9d0:	fbb3 f3f8 	udiv	r3, r3, r8
    f9d4:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f9d6:	4282      	cmp	r2, r0
    f9d8:	4613      	mov	r3, r2
    f9da:	bfc4      	itt	gt
    f9dc:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    f9e0:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    f9e2:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f9e6:	bfc4      	itt	gt
    f9e8:	18d2      	addgt	r2, r2, r3
    f9ea:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    f9ec:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    f9ee:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f9f2:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    f9f4:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    f9f6:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    f9f8:	2300      	movs	r3, #0
    f9fa:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    f9fc:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f9fe:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    fa02:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fa04:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    fa08:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    fa0c:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    fa0e:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    fa12:	464a      	mov	r2, r9
    fa14:	f107 001b 	add.w	r0, r7, #27
    fa18:	f7f2 fa2a 	bl	1e70 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    fa1c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fa20:	f107 030e 	add.w	r3, r7, #14
    fa24:	28ff      	cmp	r0, #255	; 0xff
    fa26:	930b      	str	r3, [sp, #44]	; 0x2c
    fa28:	f106 0a02 	add.w	sl, r6, #2
    fa2c:	f107 0b14 	add.w	fp, r7, #20
    fa30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fa32:	d061      	beq.n	faf8 <isr+0x570>
			ll_rl_id_addr_get(rl_idx,
    fa34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fa36:	f107 010d 	add.w	r1, r7, #13
    fa3a:	f002 ff61 	bl	12900 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    fa3e:	7b7b      	ldrb	r3, [r7, #13]
    fa40:	3302      	adds	r3, #2
    fa42:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    fa44:	464a      	mov	r2, r9
    fa46:	4651      	mov	r1, sl
    fa48:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fa4a:	f7f2 fa11 	bl	1e70 <memcpy>
			pdu_adv->connect_ind.interval;
    fa4e:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    fa50:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    fa54:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    fa56:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    fa5a:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    fa5c:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    fa60:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    fa64:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    fa68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    fa6c:	8c28      	ldrh	r0, [r5, #32]
    fa6e:	f7fb feff 	bl	b870 <rx_fc_lock>
		packet_rx_enqueue();
    fa72:	f7fb fe03 	bl	b67c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    fa76:	2003      	movs	r0, #3
    fa78:	f7fa ff64 	bl	a944 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fa7c:	2800      	cmp	r0, #0
    fa7e:	d159      	bne.n	fb34 <isr+0x5ac>
    fa80:	4b26      	ldr	r3, [pc, #152]	; (fb1c <isr+0x594>)
    fa82:	9301      	str	r3, [sp, #4]
    fa84:	9300      	str	r3, [sp, #0]
    fa86:	4b26      	ldr	r3, [pc, #152]	; (fb20 <isr+0x598>)
    fa88:	681c      	ldr	r4, [r3, #0]
    fa8a:	4b26      	ldr	r3, [pc, #152]	; (fb24 <isr+0x59c>)
			LL_ASSERT(node_rx);
    fa8c:	4a26      	ldr	r2, [pc, #152]	; (fb28 <isr+0x5a0>)
    fa8e:	4927      	ldr	r1, [pc, #156]	; (fb2c <isr+0x5a4>)
    fa90:	4827      	ldr	r0, [pc, #156]	; (fb30 <isr+0x5a8>)
    fa92:	e135      	b.n	fd00 <isr+0x778>
	return (adv->rx_addr == ci->tx_addr) &&
    fa94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa96:	5ce2      	ldrb	r2, [r4, r3]
    fa98:	7833      	ldrb	r3, [r6, #0]
    fa9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fa9e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    faa2:	f47f aebe 	bne.w	f822 <isr+0x29a>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    faa6:	2206      	movs	r2, #6
    faa8:	4639      	mov	r1, r7
    faaa:	f105 0008 	add.w	r0, r5, #8
    faae:	f7f2 f9ca 	bl	1e46 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    fab2:	fab0 f080 	clz	r0, r0
    fab6:	0940      	lsrs	r0, r0, #5
    fab8:	e714      	b.n	f8e4 <isr+0x35c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    faba:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fabe:	09db      	lsrs	r3, r3, #7
    fac0:	d00d      	beq.n	fade <isr+0x556>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    fac2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    fac6:	09db      	lsrs	r3, r3, #7
    fac8:	f43f aeab 	beq.w	f822 <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    facc:	f1b9 0f00 	cmp.w	r9, #0
    fad0:	d10d      	bne.n	faee <isr+0x566>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    fad2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fad6:	f002 fd9d 	bl	12614 <ctrl_irk_whitelisted>
    fada:	b940      	cbnz	r0, faee <isr+0x566>
    fadc:	e6a1      	b.n	f822 <isr+0x29a>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    fade:	aa10      	add	r2, sp, #64	; 0x40
    fae0:	1cb1      	adds	r1, r6, #2
    fae2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    fae6:	f002 ff4f 	bl	12988 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    faea:	2800      	cmp	r0, #0
    faec:	d0e9      	beq.n	fac2 <isr+0x53a>
	       isr_adv_ci_adva_check(adv, ci);
    faee:	4631      	mov	r1, r6
    faf0:	4628      	mov	r0, r5
    faf2:	f7fb fd9f 	bl	b634 <isr_adv_ci_adva_check>
    faf6:	e6f5      	b.n	f8e4 <isr+0x35c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    faf8:	4619      	mov	r1, r3
    fafa:	464a      	mov	r2, r9
    fafc:	4658      	mov	r0, fp
    fafe:	f7f2 f9e3 	bl	1ec8 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    fb02:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fb04:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    fb06:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fb0a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    fb0c:	464a      	mov	r2, r9
    fb0e:	4651      	mov	r1, sl
    fb10:	e79b      	b.n	fa4a <isr+0x4c2>
    fb12:	bf00      	nop
    fb14:	026259ff 	.word	0x026259ff
    fb18:	01c9c37f 	.word	0x01c9c37f
    fb1c:	000161ba 	.word	0x000161ba
    fb20:	20003a5c 	.word	0x20003a5c
    fb24:	0001944f 	.word	0x0001944f
    fb28:	000179e1 	.word	0x000179e1
    fb2c:	00017a29 	.word	0x00017a29
    fb30:	00019f39 	.word	0x00019f39
			node_rx->hdr.handle = conn->handle;
    fb34:	8c2b      	ldrh	r3, [r5, #32]
    fb36:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    fb38:	230b      	movs	r3, #11
    fb3a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    fb3c:	7833      	ldrb	r3, [r6, #0]
    fb3e:	f013 0320 	ands.w	r3, r3, #32
    fb42:	d00e      	beq.n	fb62 <isr+0x5da>
					((u16_t)conn->access_addr[1] << 8) |
    fb44:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    fb46:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    fb48:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    fb4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    fb4e:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    fb50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    fb54:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    fb56:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    fb58:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    fb5c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    fb5e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    fb60:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    fb62:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    fb64:	f7fb fd8a 	bl	b67c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    fb68:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    fb6c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    fb70:	497f      	ldr	r1, [pc, #508]	; (fd70 <isr+0x7e8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    fb72:	0952      	lsrs	r2, r2, #5
    fb74:	f362 0384 	bfi	r3, r2, #2, #3
    fb78:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    fb7c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    fb80:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    fb84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    fb88:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    fb8a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    fb8e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    fb92:	4a78      	ldr	r2, [pc, #480]	; (fd74 <isr+0x7ec>)
    fb94:	f203 233f 	addw	r3, r3, #575	; 0x23f
    fb98:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    fb9c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    fb9e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    fba2:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    fba4:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    fba6:	7d73      	ldrb	r3, [r6, #21]
    fba8:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    fbac:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    fbae:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    fbb2:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    fbb4:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    fbb6:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    fbb8:	4638      	mov	r0, r7
    fbba:	f003 fc4e 	bl	1345a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    fbbe:	496e      	ldr	r1, [pc, #440]	; (fd78 <isr+0x7f0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    fbc0:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    fbc2:	f200 4052 	addw	r0, r0, #1106	; 0x452
    fbc6:	a368      	add	r3, pc, #416	; (adr r3, fd68 <isr+0x7e0>)
    fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    fbcc:	fba0 0101 	umull	r0, r1, r0, r1
    fbd0:	f7f0 fb20 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    fbd4:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    fbd8:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    fbda:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fbdc:	4293      	cmp	r3, r2
    fbde:	bf38      	it	cc
    fbe0:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    fbe2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    fbe6:	469a      	mov	sl, r3
		conn_interval_us -=
    fbe8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    fbea:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    fbec:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    fbee:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    fbf0:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    fbf4:	f003 fe28 	bl	13848 <radio_tmr_end_get>
    fbf8:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    fbfa:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    fbfc:	4639      	mov	r1, r7
		conn_offset_us +=
    fbfe:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    fc02:	4638      	mov	r0, r7
    fc04:	f003 fc27 	bl	13456 <radio_tx_chain_delay_get>
    fc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fc0a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    fc0e:	4499      	add	r9, r3
    fc10:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    fc14:	eba9 030b 	sub.w	r3, r9, fp
    fc18:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc1a:	f240 4383 	movw	r3, #1155	; 0x483
    fc1e:	9300      	str	r3, [sp, #0]
    fc20:	2205      	movs	r2, #5
    fc22:	4b56      	ldr	r3, [pc, #344]	; (fd7c <isr+0x7f4>)
    fc24:	f8df b150 	ldr.w	fp, [pc, #336]	; fd78 <isr+0x7f0>
    fc28:	4639      	mov	r1, r7
    fc2a:	4638      	mov	r0, r7
    fc2c:	f7f8 fe20 	bl	8870 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    fc30:	f240 4184 	movw	r1, #1156	; 0x484
    fc34:	f7fb fe56 	bl	b8e4 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    fc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc3a:	5ce3      	ldrb	r3, [r4, r3]
    fc3c:	f003 030f 	and.w	r3, r3, #15
    fc40:	2b01      	cmp	r3, #1
    fc42:	d106      	bne.n	fc52 <isr+0x6ca>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc44:	9700      	str	r7, [sp, #0]
    fc46:	463b      	mov	r3, r7
    fc48:	2203      	movs	r2, #3
    fc4a:	4639      	mov	r1, r7
    fc4c:	4638      	mov	r0, r7
    fc4e:	f7f8 fe0f 	bl	8870 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fc52:	fba8 890b 	umull	r8, r9, r8, fp
    fc56:	a344      	add	r3, pc, #272	; (adr r3, fd68 <isr+0x7e0>)
    fc58:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc5c:	4640      	mov	r0, r8
    fc5e:	4649      	mov	r1, r9
    fc60:	f7f0 fad8 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc64:	f895 3020 	ldrb.w	r3, [r5, #32]
    fc68:	68a4      	ldr	r4, [r4, #8]
    fc6a:	9506      	str	r5, [sp, #24]
    fc6c:	3307      	adds	r3, #7
    fc6e:	b2db      	uxtb	r3, r3
    fc70:	930a      	str	r3, [sp, #40]	; 0x28
    fc72:	f240 439b 	movw	r3, #1179	; 0x49b
    fc76:	9308      	str	r3, [sp, #32]
    fc78:	4b41      	ldr	r3, [pc, #260]	; (fd80 <isr+0x7f8>)
    fc7a:	9307      	str	r3, [sp, #28]
    fc7c:	4b41      	ldr	r3, [pc, #260]	; (fd84 <isr+0x7fc>)
    fc7e:	9305      	str	r3, [sp, #20]
    fc80:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    fc82:	4a41      	ldr	r2, [pc, #260]	; (fd88 <isr+0x800>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc84:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    fc86:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fc88:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    fc8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fc8e:	2307      	movs	r3, #7
    fc90:	2100      	movs	r1, #0
    fc92:	4343      	muls	r3, r0
    fc94:	fb02 3301 	mla	r3, r2, r1, r3
    fc98:	fba0 1202 	umull	r1, r2, r0, r2
    fc9c:	441a      	add	r2, r3
    fc9e:	4608      	mov	r0, r1
    fca0:	ebb8 0000 	subs.w	r0, r8, r0
    fca4:	4611      	mov	r1, r2
    fca6:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcaa:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    fcac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fcb0:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcb2:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    fcb4:	f7f0 faae 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    fcb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcba:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    fcbc:	a32a      	add	r3, pc, #168	; (adr r3, fd68 <isr+0x7e0>)
    fcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcc2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    fcc6:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcca:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    fccc:	f7f0 faa2 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcd0:	eba4 040a 	sub.w	r4, r4, sl
    fcd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fcd8:	9000      	str	r0, [sp, #0]
    fcda:	4623      	mov	r3, r4
    fcdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fcde:	4629      	mov	r1, r5
    fce0:	4628      	mov	r0, r5
    fce2:	f7f8 fd27 	bl	8734 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fce6:	f030 0302 	bics.w	r3, r0, #2
    fcea:	f43f acf9 	beq.w	f6e0 <isr+0x158>
    fcee:	4b27      	ldr	r3, [pc, #156]	; (fd8c <isr+0x804>)
    fcf0:	9301      	str	r3, [sp, #4]
    fcf2:	9300      	str	r3, [sp, #0]
    fcf4:	4b26      	ldr	r3, [pc, #152]	; (fd90 <isr+0x808>)
    fcf6:	681c      	ldr	r4, [r3, #0]
    fcf8:	4b26      	ldr	r3, [pc, #152]	; (fd94 <isr+0x80c>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fcfa:	4a27      	ldr	r2, [pc, #156]	; (fd98 <isr+0x810>)
    fcfc:	4927      	ldr	r1, [pc, #156]	; (fd9c <isr+0x814>)
    fcfe:	4828      	ldr	r0, [pc, #160]	; (fda0 <isr+0x818>)
		LL_ASSERT(0);
    fd00:	47a0      	blx	r4
    fd02:	4040      	eors	r0, r0
    fd04:	f380 8811 	msr	BASEPRI, r0
    fd08:	f04f 0004 	mov.w	r0, #4
    fd0c:	df02      	svc	2
		rl_idx = devmatch_ok ?
    fd0e:	f1b9 0f00 	cmp.w	r9, #0
    fd12:	d01c      	beq.n	fd4e <isr+0x7c6>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    fd14:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    fd18:	4641      	mov	r1, r8
    fd1a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fd1e:	f002 fbd1 	bl	124c4 <ctrl_rl_idx>
    fd22:	4680      	mov	r8, r0
		if (crc_ok &&
    fd24:	b147      	cbz	r7, fd38 <isr+0x7b0>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    fd26:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fd2a:	06da      	lsls	r2, r3, #27
    fd2c:	d53a      	bpl.n	fda4 <isr+0x81c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    fd2e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fd32:	06db      	lsls	r3, r3, #27
    fd34:	f100 8125 	bmi.w	ff82 <isr+0x9fa>
			_radio.state = STATE_CLOSE;
    fd38:	2303      	movs	r3, #3
    fd3a:	7523      	strb	r3, [r4, #20]
			radio_disable();
    fd3c:	f003 fba0 	bl	13480 <radio_disable>
			_radio.scanner.state = 0;
    fd40:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    fd44:	f36f 0341 	bfc	r3, #1, #1
    fd48:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    fd4c:	e4c8      	b.n	f6e0 <isr+0x158>
		rl_idx = devmatch_ok ?
    fd4e:	f1ba 0f00 	cmp.w	sl, #0
    fd52:	d003      	beq.n	fd5c <isr+0x7d4>
    fd54:	4658      	mov	r0, fp
    fd56:	f002 fc11 	bl	1257c <ctrl_rl_irk_idx>
    fd5a:	e7e2      	b.n	fd22 <isr+0x79a>
    fd5c:	f04f 08ff 	mov.w	r8, #255	; 0xff
    fd60:	e7e0      	b.n	fd24 <isr+0x79c>
    fd62:	bf00      	nop
    fd64:	f3af 8000 	nop.w
    fd68:	1afd498d 	.word	0x1afd498d
    fd6c:	00000007 	.word	0x00000007
    fd70:	00019af2 	.word	0x00019af2
    fd74:	000f4240 	.word	0x000f4240
    fd78:	3b9aca00 	.word	0x3b9aca00
    fd7c:	0000b8e5 	.word	0x0000b8e5
    fd80:	0000b8a5 	.word	0x0000b8a5
    fd84:	0000de3d 	.word	0x0000de3d
    fd88:	1afd498d 	.word	0x1afd498d
    fd8c:	000161ba 	.word	0x000161ba
    fd90:	20003a5c 	.word	0x20003a5c
    fd94:	0001944f 	.word	0x0001944f
    fd98:	000179e1 	.word	0x000179e1
    fd9c:	00017a29 	.word	0x00017a29
    fda0:	000198d3 	.word	0x000198d3
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    fda4:	f1b9 0f00 	cmp.w	r9, #0
    fda8:	d005      	beq.n	fdb6 <isr+0x82e>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fdaa:	4641      	mov	r1, r8
    fdac:	4650      	mov	r0, sl
    fdae:	f002 fd71 	bl	12894 <ctrl_rl_idx_allowed>
    fdb2:	2800      	cmp	r0, #0
    fdb4:	d0bb      	beq.n	fd2e <isr+0x7a6>
	bool dir_report = false;
    fdb6:	2300      	movs	r3, #0
    fdb8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    fdbc:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    fdc0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    fdc4:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    fdc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    fdcc:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	f000 80ef 	beq.w	ffb4 <isr+0xa2c>
    fdd6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    fdda:	b133      	cbz	r3, fdea <isr+0x862>
				      (_radio.fc_req == _radio.fc_ack)) &&
    fddc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    fde0:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    fde4:	429a      	cmp	r2, r3
    fde6:	f040 80e5 	bne.w	ffb4 <isr+0xa2c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    fdea:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    fdee:	f3c3 1000 	ubfx	r0, r3, #4, #1
    fdf2:	2800      	cmp	r0, #0
    fdf4:	f000 80d0 	beq.w	ff98 <isr+0xa10>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    fdf8:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    fdfc:	f010 000f 	ands.w	r0, r0, #15
    fe00:	f040 814f 	bne.w	100a2 <__kernel_ram_size+0xa2>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    fe04:	f003 fd20 	bl	13848 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    fe08:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    fe0c:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    fe10:	48b9      	ldr	r0, [pc, #740]	; (100f8 <__kernel_ram_size+0xf8>)
    fe12:	2207      	movs	r2, #7
    fe14:	fba3 0100 	umull	r0, r1, r3, r0
    fe18:	fb02 1103 	mla	r1, r2, r3, r1
    fe1c:	a3b4      	add	r3, pc, #720	; (adr r3, 100f0 <__kernel_ram_size+0xf0>)
    fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe22:	f7f0 f9f7 	bl	214 <__aeabi_uldivmod>
    fe26:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    fe2a:	4287      	cmp	r7, r0
    fe2c:	f080 80c2 	bcs.w	ffb4 <isr+0xa2c>
			node_rx = packet_rx_reserve_get(4);
    fe30:	2004      	movs	r0, #4
    fe32:	f7fa fd87 	bl	a944 <packet_rx_reserve_get>
		if (node_rx == 0) {
    fe36:	4607      	mov	r7, r0
    fe38:	2800      	cmp	r0, #0
    fe3a:	f43f af7d 	beq.w	fd38 <isr+0x7b0>
		_radio.state = STATE_STOP;
    fe3e:	2304      	movs	r3, #4
    fe40:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    fe42:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    fe44:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    fe48:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    fe4c:	f003 fb6e 	bl	1352c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    fe50:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    fe52:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    fe56:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    fe5a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fe5c:	f899 3008 	ldrb.w	r3, [r9, #8]
    fe60:	7802      	ldrb	r2, [r0, #0]
    fe62:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fe66:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    fe6a:	2322      	movs	r3, #34	; 0x22
    fe6c:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    fe6e:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fe70:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    fe72:	4640      	mov	r0, r8
    fe74:	f002 fb08 	bl	12488 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    fe78:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    fe7c:	4601      	mov	r1, r0
    fe7e:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    fe80:	f013 0f01 	tst.w	r3, #1
    fe84:	f810 3b02 	ldrb.w	r3, [r0], #2
    fe88:	f000 8116 	beq.w	100b8 <__kernel_ram_size+0xb8>
    fe8c:	2900      	cmp	r1, #0
    fe8e:	f000 8113 	beq.w	100b8 <__kernel_ram_size+0xb8>
			pdu_adv_tx->tx_addr = 1;
    fe92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fe96:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fe98:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    fe9a:	f7f1 ffe9 	bl	1e70 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    fe9e:	f105 0308 	add.w	r3, r5, #8
    fea2:	4618      	mov	r0, r3
    fea4:	2206      	movs	r2, #6
    fea6:	f109 010a 	add.w	r1, r9, #10
    feaa:	930a      	str	r3, [sp, #40]	; 0x28
    feac:	f7f1 ffe0 	bl	1e70 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    feb0:	2204      	movs	r2, #4
    feb2:	f106 0110 	add.w	r1, r6, #16
    feb6:	f105 000e 	add.w	r0, r5, #14
    feba:	f7f1 ffd9 	bl	1e70 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    febe:	2203      	movs	r2, #3
    fec0:	f106 0114 	add.w	r1, r6, #20
    fec4:	f105 0012 	add.w	r0, r5, #18
    fec8:	f7f1 ffd2 	bl	1e70 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    fecc:	2301      	movs	r3, #1
    fece:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    fed0:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    fed4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    fed8:	4353      	muls	r3, r2
    feda:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    fedc:	f003 fcb4 	bl	13848 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    fee0:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    fee2:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    fee6:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    fee8:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    feec:	bfd8      	it	le
    feee:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    fef2:	f1bb 0f00 	cmp.w	fp, #0
    fef6:	f040 80ea 	bne.w	100ce <__kernel_ram_size+0xce>
			pdu_adv_tx->connect_ind.win_offset = 0;
    fefa:	f885 b016 	strb.w	fp, [r5, #22]
    fefe:	f885 b017 	strb.w	fp, [r5, #23]
    ff02:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ff04:	2100      	movs	r1, #0
    ff06:	4608      	mov	r0, r1
    ff08:	f003 faa0 	bl	1344c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ff0c:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ff0e:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ff12:	4608      	mov	r0, r1
    ff14:	f003 fa9f 	bl	13456 <radio_tx_chain_delay_get>
    ff18:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    ff1c:	f100 031e 	add.w	r3, r0, #30
    ff20:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    ff22:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    ff26:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    ff28:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    ff2c:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    ff2e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    ff32:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    ff34:	f106 0117 	add.w	r1, r6, #23
    ff38:	2205      	movs	r2, #5
    ff3a:	f105 001e 	add.w	r0, r5, #30
    ff3e:	f7f1 ff97 	bl	1e70 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    ff42:	7fb2      	ldrb	r2, [r6, #30]
    ff44:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ff48:	f362 0304 	bfi	r3, r2, #0, #5
    ff4c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    ff50:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    ff54:	f362 1347 	bfi	r3, r2, #5, #3
    ff58:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    ff5c:	f003 fb00 	bl	13560 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    ff60:	4628      	mov	r0, r5
    ff62:	f003 fa6d 	bl	13440 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    ff66:	f003 faa9 	bl	134bc <radio_is_ready>
    ff6a:	4683      	mov	fp, r0
    ff6c:	2800      	cmp	r0, #0
    ff6e:	f000 80cf 	beq.w	10110 <__kernel_ram_size+0x110>
		LL_ASSERT(!radio_is_ready());
    ff72:	4b62      	ldr	r3, [pc, #392]	; (100fc <__kernel_ram_size+0xfc>)
    ff74:	9301      	str	r3, [sp, #4]
    ff76:	9300      	str	r3, [sp, #0]
    ff78:	4b61      	ldr	r3, [pc, #388]	; (10100 <__kernel_ram_size+0x100>)
    ff7a:	681c      	ldr	r4, [r3, #0]
    ff7c:	4b61      	ldr	r3, [pc, #388]	; (10104 <__kernel_ram_size+0x104>)
    ff7e:	f7ff bb63 	b.w	f648 <isr+0xc0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ff82:	f1b9 0f00 	cmp.w	r9, #0
    ff86:	f47f af16 	bne.w	fdb6 <isr+0x82e>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    ff8a:	4640      	mov	r0, r8
    ff8c:	f002 fb42 	bl	12614 <ctrl_irk_whitelisted>
		if (crc_ok &&
    ff90:	2800      	cmp	r0, #0
    ff92:	f43f aed1 	beq.w	fd38 <isr+0x7b0>
    ff96:	e70e      	b.n	fdb6 <isr+0x82e>
	if (rl_idx != FILTER_IDX_NONE) {
    ff98:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    ff9c:	d06f      	beq.n	1007e <__kernel_ram_size+0x7e>
		return (rl_idx == _radio.scanner.rl_idx);
    ff9e:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    ffa2:	eba0 0e08 	sub.w	lr, r0, r8
    ffa6:	f1de 0000 	rsbs	r0, lr, #0
    ffaa:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ffae:	2800      	cmp	r0, #0
    ffb0:	f47f af22 	bne.w	fdf8 <isr+0x870>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ffb4:	f899 0008 	ldrb.w	r0, [r9, #8]
    ffb8:	f010 000f 	ands.w	r0, r0, #15
    ffbc:	d002      	beq.n	ffc4 <isr+0xa3c>
    ffbe:	2806      	cmp	r0, #6
    ffc0:	f040 81b1 	bne.w	10326 <__kernel_ram_size+0x326>
		 (_radio.scanner.type != 0) &&
    ffc4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    ffc8:	071f      	lsls	r7, r3, #28
    ffca:	f140 8196 	bpl.w	102fa <__kernel_ram_size+0x2fa>
		 (_radio.scanner.type != 0) &&
    ffce:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    ffd2:	2a00      	cmp	r2, #0
    ffd4:	f040 8191 	bne.w	102fa <__kernel_ram_size+0x2fa>
		err = isr_rx_scan_report(rssi_ready,
    ffd8:	f1ba 0f00 	cmp.w	sl, #0
    ffdc:	bf14      	ite	ne
    ffde:	4641      	movne	r1, r8
    ffe0:	21ff      	moveq	r1, #255	; 0xff
    ffe2:	4628      	mov	r0, r5
    ffe4:	f7fb fbe8 	bl	b7b8 <isr_rx_scan_report>
		if (err) {
    ffe8:	2800      	cmp	r0, #0
    ffea:	f47f aea5 	bne.w	fd38 <isr+0x7b0>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ffee:	f003 fa9d 	bl	1352c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    fff2:	7803      	ldrb	r3, [r0, #0]
    fff4:	2203      	movs	r2, #3
    fff6:	f362 0303 	bfi	r3, r2, #0, #4
    fffa:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    fffc:	f899 3008 	ldrb.w	r3, [r9, #8]
   10000:	7802      	ldrb	r2, [r0, #0]
   10002:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10006:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   1000a:	230c      	movs	r3, #12
   1000c:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1000e:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   10010:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   10012:	4640      	mov	r0, r8
   10014:	f002 fa38 	bl	12488 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   10018:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
   1001c:	4601      	mov	r1, r0
   1001e:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   10020:	f013 0f01 	tst.w	r3, #1
   10024:	f810 3b02 	ldrb.w	r3, [r0], #2
   10028:	f000 815e 	beq.w	102e8 <__kernel_ram_size+0x2e8>
   1002c:	2900      	cmp	r1, #0
   1002e:	f000 815b 	beq.w	102e8 <__kernel_ram_size+0x2e8>
			pdu_adv_tx->tx_addr = 1;
   10032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10036:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   10038:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   1003a:	f7f1 ff19 	bl	1e70 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   1003e:	2206      	movs	r2, #6
   10040:	f109 010a 	add.w	r1, r9, #10
   10044:	f105 0008 	add.w	r0, r5, #8
   10048:	f7f1 ff12 	bl	1e70 <memcpy>
		_radio.scanner.state = 1;
   1004c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10050:	f043 0302 	orr.w	r3, r3, #2
   10054:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
   10058:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   1005a:	2302      	movs	r3, #2
   1005c:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
   1005e:	f003 fb05 	bl	1366c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   10062:	2000      	movs	r0, #0
   10064:	f003 fa66 	bl	13534 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   10068:	4628      	mov	r0, r5
   1006a:	f003 f9e9 	bl	13440 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   1006e:	f003 fbd9 	bl	13824 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   10072:	f003 fa23 	bl	134bc <radio_is_ready>
   10076:	2800      	cmp	r0, #0
   10078:	f43f ab32 	beq.w	f6e0 <isr+0x158>
   1007c:	e779      	b.n	ff72 <isr+0x9ea>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   1007e:	f899 2008 	ldrb.w	r2, [r9, #8]
   10082:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10086:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1008a:	4293      	cmp	r3, r2
   1008c:	d18f      	bne.n	ffae <isr+0xa26>
		(memcmp(&_radio.scanner.adv_addr[0],
   1008e:	2206      	movs	r2, #6
   10090:	f109 010a 	add.w	r1, r9, #10
   10094:	481c      	ldr	r0, [pc, #112]	; (10108 <__kernel_ram_size+0x108>)
   10096:	f7f1 fed6 	bl	1e46 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   1009a:	fab0 f080 	clz	r0, r0
   1009e:	0940      	lsrs	r0, r0, #5
   100a0:	e785      	b.n	ffae <isr+0xa26>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   100a2:	2801      	cmp	r0, #1
   100a4:	d18b      	bne.n	ffbe <isr+0xa36>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   100a6:	2300      	movs	r3, #0
   100a8:	4642      	mov	r2, r8
   100aa:	4631      	mov	r1, r6
   100ac:	f7fb fb38 	bl	b720 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   100b0:	2800      	cmp	r0, #0
   100b2:	f43f af7f 	beq.w	ffb4 <isr+0xa2c>
   100b6:	e6a5      	b.n	fe04 <isr+0x87c>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   100b8:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   100bc:	4913      	ldr	r1, [pc, #76]	; (1010c <__kernel_ram_size+0x10c>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   100be:	09d2      	lsrs	r2, r2, #7
   100c0:	f362 1386 	bfi	r3, r2, #6, #1
   100c4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   100c6:	2206      	movs	r2, #6
   100c8:	e6e7      	b.n	fe9a <isr+0x912>
				conn_space_us += conn_interval_us;
   100ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   100cc:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   100ce:	f1bb 0f00 	cmp.w	fp, #0
   100d2:	dbfa      	blt.n	100ca <__kernel_ram_size+0xca>
   100d4:	459b      	cmp	fp, r3
   100d6:	d3f8      	bcc.n	100ca <__kernel_ram_size+0xca>
				(conn_space_us - conn_offset_us) / 1250;
   100d8:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
   100dc:	f240 42e2 	movw	r2, #1250	; 0x4e2
   100e0:	fbb3 f3f2 	udiv	r3, r3, r2
   100e4:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   100e6:	7d6b      	ldrb	r3, [r5, #21]
   100e8:	3301      	adds	r3, #1
   100ea:	756b      	strb	r3, [r5, #21]
   100ec:	e70a      	b.n	ff04 <isr+0x97c>
   100ee:	bf00      	nop
   100f0:	3b9aca00 	.word	0x3b9aca00
   100f4:	00000000 	.word	0x00000000
   100f8:	1afd498d 	.word	0x1afd498d
   100fc:	000161ba 	.word	0x000161ba
   10100:	20003a5c 	.word	0x20003a5c
   10104:	0001946d 	.word	0x0001946d
   10108:	200009aa 	.word	0x200009aa
   1010c:	200009a4 	.word	0x200009a4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   10110:	f44f 72aa 	mov.w	r2, #340	; 0x154
   10114:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   10118:	4630      	mov	r0, r6
   1011a:	f7f7 fcb8 	bl	7a8e <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   1011e:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   10120:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   10122:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   10126:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
   1012a:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1012e:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   10130:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   10134:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   10136:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1013a:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1013c:	2206      	movs	r2, #6
   1013e:	f107 001b 	add.w	r0, r7, #27
   10142:	f7f1 fe95 	bl	1e70 <memcpy>
   10146:	f107 0b0e 	add.w	fp, r7, #14
   1014a:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   1014e:	f1ba 0f00 	cmp.w	sl, #0
   10152:	d034      	beq.n	101be <__kernel_ram_size+0x1be>
   10154:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   10158:	d031      	beq.n	101be <__kernel_ram_size+0x1be>
			ll_rl_id_addr_get(rl_idx,
   1015a:	465a      	mov	r2, fp
   1015c:	f107 010d 	add.w	r1, r7, #13
   10160:	4640      	mov	r0, r8
   10162:	930d      	str	r3, [sp, #52]	; 0x34
   10164:	f002 fbcc 	bl	12900 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   10168:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1016a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1016c:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   1016e:	3202      	adds	r2, #2
   10170:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   10172:	4618      	mov	r0, r3
   10174:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   10176:	f7f1 fe7b 	bl	1e70 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   1017a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1017e:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   10182:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   10186:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   1018a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   1018e:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
   10192:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   10196:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   1019a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
   1019e:	8c30      	ldrh	r0, [r6, #32]
   101a0:	f7fb fb66 	bl	b870 <rx_fc_lock>
		packet_rx_enqueue();
   101a4:	f7fb fa6a 	bl	b67c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   101a8:	2003      	movs	r0, #3
   101aa:	f7fa fbcb 	bl	a944 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   101ae:	b998      	cbnz	r0, 101d8 <__kernel_ram_size+0x1d8>
   101b0:	4bbd      	ldr	r3, [pc, #756]	; (104a8 <__kernel_ram_size+0x4a8>)
   101b2:	9301      	str	r3, [sp, #4]
   101b4:	9300      	str	r3, [sp, #0]
   101b6:	4bbd      	ldr	r3, [pc, #756]	; (104ac <__kernel_ram_size+0x4ac>)
   101b8:	681c      	ldr	r4, [r3, #0]
   101ba:	4bbd      	ldr	r3, [pc, #756]	; (104b0 <__kernel_ram_size+0x4b0>)
   101bc:	e466      	b.n	fa8c <isr+0x504>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   101be:	2206      	movs	r2, #6
   101c0:	2100      	movs	r1, #0
   101c2:	4618      	mov	r0, r3
   101c4:	f7f1 fe80 	bl	1ec8 <memset>
				pdu_adv_tx->rx_addr;
   101c8:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   101ca:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   101cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   101d0:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   101d2:	2206      	movs	r2, #6
   101d4:	4658      	mov	r0, fp
   101d6:	e7ce      	b.n	10176 <__kernel_ram_size+0x176>
			node_rx->hdr.handle = conn->handle;
   101d8:	8c33      	ldrh	r3, [r6, #32]
   101da:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   101dc:	230b      	movs	r3, #11
   101de:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
   101e0:	f899 3008 	ldrb.w	r3, [r9, #8]
   101e4:	f013 0320 	ands.w	r3, r3, #32
   101e8:	d00e      	beq.n	10208 <__kernel_ram_size+0x208>
					((u16_t)conn->access_addr[1] << 8) |
   101ea:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   101ec:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   101ee:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   101f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   101f4:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   101f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   101fa:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   101fc:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   101fe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   10202:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   10204:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   10206:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   10208:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   1020a:	f7fb fa37 	bl	b67c <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   1020e:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   10210:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   10214:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   10216:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1021a:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   1021c:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1021e:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   10222:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   10224:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10226:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   1022a:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1022c:	4629      	mov	r1, r5
   1022e:	9300      	str	r3, [sp, #0]
   10230:	4628      	mov	r0, r5
   10232:	4ba0      	ldr	r3, [pc, #640]	; (104b4 <__kernel_ram_size+0x4b4>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   10234:	f8df a290 	ldr.w	sl, [pc, #656]	; 104c8 <__kernel_ram_size+0x4c8>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
   10238:	bf38      	it	cc
   1023a:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1023c:	f7f8 fb18 	bl	8870 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   10240:	f240 6139 	movw	r1, #1593	; 0x639
   10244:	f7fb fb86 	bl	b954 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10248:	462b      	mov	r3, r5
   1024a:	2204      	movs	r2, #4
   1024c:	4629      	mov	r1, r5
   1024e:	9500      	str	r5, [sp, #0]
   10250:	4628      	mov	r0, r5
   10252:	f7f8 fb0d 	bl	8870 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   10256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10258:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1025c:	68a3      	ldr	r3, [r4, #8]
   1025e:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
   10262:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10264:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   10268:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   1026c:	9308      	str	r3, [sp, #32]
   1026e:	4b92      	ldr	r3, [pc, #584]	; (104b8 <__kernel_ram_size+0x4b8>)
   10270:	9307      	str	r3, [sp, #28]
   10272:	4b92      	ldr	r3, [pc, #584]	; (104bc <__kernel_ram_size+0x4bc>)
   10274:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10276:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
   10278:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1027a:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   1027c:	4640      	mov	r0, r8
   1027e:	a388      	add	r3, pc, #544	; (adr r3, 104a0 <__kernel_ram_size+0x4a0>)
   10280:	e9d3 2300 	ldrd	r2, r3, [r3]
   10284:	4649      	mov	r1, r9
		ticker_status =
   10286:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   10288:	f7ef ffc4 	bl	214 <__aeabi_uldivmod>
   1028c:	4610      	mov	r0, r2
   1028e:	4619      	mov	r1, r3
   10290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10294:	2300      	movs	r3, #0
   10296:	f7ef ffbd 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1029a:	a381      	add	r3, pc, #516	; (adr r3, 104a0 <__kernel_ram_size+0x4a0>)
   1029c:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   102a0:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   102a2:	4649      	mov	r1, r9
   102a4:	4640      	mov	r0, r8
   102a6:	f7ef ffb5 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   102aa:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   102ac:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   102ae:	a37c      	add	r3, pc, #496	; (adr r3, 104a0 <__kernel_ram_size+0x4a0>)
   102b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   102b4:	fba1 010a 	umull	r0, r1, r1, sl
   102b8:	f7ef ffac 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   102bc:	3407      	adds	r4, #7
   102be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   102c2:	b2e4      	uxtb	r4, r4
   102c4:	9000      	str	r0, [sp, #0]
   102c6:	465b      	mov	r3, fp
   102c8:	4622      	mov	r2, r4
   102ca:	4629      	mov	r1, r5
   102cc:	4628      	mov	r0, r5
   102ce:	f7f8 fa31 	bl	8734 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   102d2:	f030 0302 	bics.w	r3, r0, #2
   102d6:	f43f aa03 	beq.w	f6e0 <isr+0x158>
   102da:	4b73      	ldr	r3, [pc, #460]	; (104a8 <__kernel_ram_size+0x4a8>)
   102dc:	9301      	str	r3, [sp, #4]
   102de:	9300      	str	r3, [sp, #0]
   102e0:	4b72      	ldr	r3, [pc, #456]	; (104ac <__kernel_ram_size+0x4ac>)
   102e2:	681c      	ldr	r4, [r3, #0]
   102e4:	4b72      	ldr	r3, [pc, #456]	; (104b0 <__kernel_ram_size+0x4b0>)
   102e6:	e508      	b.n	fcfa <isr+0x772>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   102e8:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   102ec:	4974      	ldr	r1, [pc, #464]	; (104c0 <__kernel_ram_size+0x4c0>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   102ee:	09d2      	lsrs	r2, r2, #7
   102f0:	f362 1386 	bfi	r3, r2, #6, #1
   102f4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   102f6:	2206      	movs	r2, #6
   102f8:	e69f      	b.n	1003a <__kernel_ram_size+0x3a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   102fa:	b9a0      	cbnz	r0, 10326 <__kernel_ram_size+0x326>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   102fc:	f899 3009 	ldrb.w	r3, [r9, #9]
   10300:	2b00      	cmp	r3, #0
   10302:	f43f ad19 	beq.w	fd38 <isr+0x7b0>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   10306:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1030a:	2b00      	cmp	r3, #0
   1030c:	f47f ad14 	bne.w	fd38 <isr+0x7b0>
		err = isr_rx_scan_report(rssi_ready,
   10310:	f1ba 0f00 	cmp.w	sl, #0
   10314:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   10318:	bf14      	ite	ne
   1031a:	4641      	movne	r1, r8
   1031c:	21ff      	moveq	r1, #255	; 0xff
   1031e:	4628      	mov	r0, r5
   10320:	f7fb fa4a 	bl	b7b8 <isr_rx_scan_report>
   10324:	e508      	b.n	fd38 <isr+0x7b0>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   10326:	2801      	cmp	r0, #1
   10328:	d00e      	beq.n	10348 <__kernel_ram_size+0x348>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1032a:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
   1032e:	f003 020b 	and.w	r2, r3, #11
   10332:	2a02      	cmp	r2, #2
   10334:	d0e2      	beq.n	102fc <__kernel_ram_size+0x2fc>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   10336:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   1033a:	2b07      	cmp	r3, #7
   1033c:	d10d      	bne.n	1035a <__kernel_ram_size+0x35a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   1033e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10342:	0758      	lsls	r0, r3, #29
   10344:	d1da      	bne.n	102fc <__kernel_ram_size+0x2fc>
   10346:	e4f7      	b.n	fd38 <isr+0x7b0>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   10348:	ab10      	add	r3, sp, #64	; 0x40
   1034a:	4642      	mov	r2, r8
   1034c:	4631      	mov	r1, r6
   1034e:	2000      	movs	r0, #0
   10350:	f7fb f9e6 	bl	b720 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   10354:	2800      	cmp	r0, #0
   10356:	d1d1      	bne.n	102fc <__kernel_ram_size+0x2fc>
   10358:	e7e7      	b.n	1032a <__kernel_ram_size+0x32a>
		   (_radio.scanner.phy)) ||
   1035a:	2b04      	cmp	r3, #4
   1035c:	f47f acec 	bne.w	fd38 <isr+0x7b0>
		   (_radio.scanner.state != 0) &&
   10360:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   10364:	0799      	lsls	r1, r3, #30
   10366:	f57f ace7 	bpl.w	fd38 <isr+0x7b0>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1036a:	f003 f8df 	bl	1352c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   1036e:	f899 3008 	ldrb.w	r3, [r9, #8]
   10372:	7802      	ldrb	r2, [r0, #0]
   10374:	f3c3 1380 	ubfx	r3, r3, #6, #1
   10378:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1037c:	f47f acdc 	bne.w	fd38 <isr+0x7b0>
		(memcmp(&sreq->scan_req.adv_addr[0],
   10380:	2206      	movs	r2, #6
   10382:	f109 010a 	add.w	r1, r9, #10
   10386:	3008      	adds	r0, #8
   10388:	f7f1 fd5d 	bl	1e46 <memcmp>
		   (_radio.scanner.state != 0) &&
   1038c:	2800      	cmp	r0, #0
   1038e:	d0b5      	beq.n	102fc <__kernel_ram_size+0x2fc>
   10390:	e4d2      	b.n	fd38 <isr+0x7b0>
	_radio.packet_counter++;
   10392:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   10396:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
   1039a:	3301      	adds	r3, #1
   1039c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
   103a0:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   103a2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
   103a6:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   103aa:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   103ae:	2301      	movs	r3, #1
   103b0:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   103b4:	2f00      	cmp	r7, #0
   103b6:	f000 82dc 	beq.w	10972 <__kernel_ram_size+0x972>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   103ba:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   103be:	f898 1008 	ldrb.w	r1, [r8, #8]
   103c2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   103c6:	f3c1 0180 	ubfx	r1, r1, #2, #1
   103ca:	f003 0201 	and.w	r2, r3, #1
   103ce:	4291      	cmp	r1, r2
   103d0:	f000 81a2 	beq.w	10718 <__kernel_ram_size+0x718>
		_radio.conn_curr->sn++;
   103d4:	f082 0201 	eor.w	r2, r2, #1
   103d8:	f362 0300 	bfi	r3, r2, #0, #1
   103dc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   103e0:	7ce3      	ldrb	r3, [r4, #19]
   103e2:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   103e4:	bf02      	ittt	eq
   103e6:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   103ea:	f043 0301 	orreq.w	r3, r3, #1
   103ee:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   103f2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   103f6:	061a      	lsls	r2, r3, #24
   103f8:	f100 8189 	bmi.w	1070e <__kernel_ram_size+0x70e>
			node_tx = _radio.conn_curr->pkt_tx_head;
   103fc:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   10400:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   10404:	1d30      	adds	r0, r6, #4
   10406:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   1040a:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   1040e:	f1b9 0f00 	cmp.w	r9, #0
   10412:	f000 80af 	beq.w	10574 <__kernel_ram_size+0x574>
				if (_radio.conn_curr->enc_tx) {
   10416:	069b      	lsls	r3, r3, #26
   10418:	d50b      	bpl.n	10432 <__kernel_ram_size+0x432>
					_radio.conn_curr->ccm_tx.counter++;
   1041a:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   1041e:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   10422:	f11b 0201 	adds.w	r2, fp, #1
   10426:	f14c 0300 	adc.w	r3, ip, #0
   1042a:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   1042e:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   10432:	5c43      	ldrb	r3, [r0, r1]
   10434:	f003 0303 	and.w	r3, r3, #3
   10438:	2b03      	cmp	r3, #3
   1043a:	f040 809b 	bne.w	10574 <__kernel_ram_size+0x574>
	switch (pdu_data_tx->llctrl.opcode) {
   1043e:	f89a 3003 	ldrb.w	r3, [sl, #3]
   10442:	3b02      	subs	r3, #2
   10444:	2b16      	cmp	r3, #22
   10446:	f200 8095 	bhi.w	10574 <__kernel_ram_size+0x574>
   1044a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1044e:	0017      	.short	0x0017
   10450:	00c90077 	.word	0x00c90077
   10454:	00930093 	.word	0x00930093
   10458:	00930093 	.word	0x00930093
   1045c:	00950093 	.word	0x00950093
   10460:	009300a0 	.word	0x009300a0
   10464:	009300d0 	.word	0x009300d0
   10468:	00930093 	.word	0x00930093
   1046c:	00930093 	.word	0x00930093
   10470:	00da0093 	.word	0x00da0093
   10474:	00f20093 	.word	0x00f20093
   10478:	012400f9 	.word	0x012400f9
		_radio.state = STATE_CLOSE;
   1047c:	2303      	movs	r3, #3
   1047e:	7523      	strb	r3, [r4, #20]
		radio_disable();
   10480:	f002 fffe 	bl	13480 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   10484:	f003 f81a 	bl	134bc <radio_is_ready>
   10488:	b300      	cbz	r0, 104cc <__kernel_ram_size+0x4cc>
   1048a:	4b07      	ldr	r3, [pc, #28]	; (104a8 <__kernel_ram_size+0x4a8>)
   1048c:	9301      	str	r3, [sp, #4]
   1048e:	9300      	str	r3, [sp, #0]
   10490:	4b06      	ldr	r3, [pc, #24]	; (104ac <__kernel_ram_size+0x4ac>)
   10492:	681c      	ldr	r4, [r3, #0]
   10494:	4b0b      	ldr	r3, [pc, #44]	; (104c4 <__kernel_ram_size+0x4c4>)
   10496:	f7ff b8d7 	b.w	f648 <isr+0xc0>
   1049a:	bf00      	nop
   1049c:	f3af 8000 	nop.w
   104a0:	1afd498d 	.word	0x1afd498d
   104a4:	00000007 	.word	0x00000007
   104a8:	000161ba 	.word	0x000161ba
   104ac:	20003a5c 	.word	0x20003a5c
   104b0:	0001946d 	.word	0x0001946d
   104b4:	0000b955 	.word	0x0000b955
   104b8:	0000b8a5 	.word	0x0000b8a5
   104bc:	0000de39 	.word	0x0000de39
   104c0:	200009a4 	.word	0x200009a4
   104c4:	00019479 	.word	0x00019479
   104c8:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   104cc:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   104d0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   104d4:	2913      	cmp	r1, #19
   104d6:	bf08      	it	eq
   104d8:	2116      	moveq	r1, #22
   104da:	f7fb fe4b 	bl	c174 <terminate_ind_rx_enqueue>
		terminate = 1;
   104de:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   104e0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   104e4:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   104e8:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   104ea:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   104ee:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   104f2:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   104f4:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   104f8:	d11e      	bne.n	10538 <__kernel_ram_size+0x538>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   104fa:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   104fe:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   10502:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   10504:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   10506:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1050a:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   1050e:	f040 80c9 	bne.w	106a4 <__kernel_ram_size+0x6a4>
		if (node_tx) {
   10512:	b18e      	cbz	r6, 10538 <__kernel_ram_size+0x538>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   10514:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   10518:	f8d3 e000 	ldr.w	lr, [r3]
   1051c:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   10520:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   10522:	bf06      	itte	eq
   10524:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   10528:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   1052c:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   10530:	49cf      	ldr	r1, [pc, #828]	; (10870 <__kernel_ram_size+0x870>)
   10532:	4630      	mov	r0, r6
   10534:	f7f7 fa8d 	bl	7a52 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   10538:	2600      	movs	r6, #0
   1053a:	e0bc      	b.n	106b6 <__kernel_ram_size+0x6b6>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   1053c:	2208      	movs	r2, #8
   1053e:	f10a 010e 	add.w	r1, sl, #14
   10542:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10546:	f7f1 fc93 	bl	1e70 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   1054a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1054e:	2204      	movs	r2, #4
   10550:	f10a 0116 	add.w	r1, sl, #22
   10554:	f500 7089 	add.w	r0, r0, #274	; 0x112
   10558:	f7f1 fc8a 	bl	1e70 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   1055c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10560:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10564:	f042 0208 	orr.w	r2, r2, #8
   10568:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   1056c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   10570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   10574:	2500      	movs	r5, #0
   10576:	e7b3      	b.n	104e0 <__kernel_ram_size+0x4e0>
		_radio.conn_curr->pause_tx = 1;
   10578:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   1057c:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   10580:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   10584:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   10588:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   1058c:	e7f2      	b.n	10574 <__kernel_ram_size+0x574>
		if (_radio.role == ROLE_MASTER) {
   1058e:	f894 a013 	ldrb.w	sl, [r4, #19]
   10592:	fa5f fa8a 	uxtb.w	sl, sl
   10596:	f1ba 0f04 	cmp.w	sl, #4
   1059a:	d121      	bne.n	105e0 <__kernel_ram_size+0x5e0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1059c:	7933      	ldrb	r3, [r6, #4]
   1059e:	f043 0303 	orr.w	r3, r3, #3
   105a2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   105a4:	2317      	movs	r3, #23
   105a6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   105a8:	2303      	movs	r3, #3
   105aa:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   105ac:	2208      	movs	r2, #8
   105ae:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   105b2:	3004      	adds	r0, #4
   105b4:	f7f1 fc5c 	bl	1e70 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   105b8:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   105bc:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   105be:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   105c2:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   105c4:	f106 0112 	add.w	r1, r6, #18
   105c8:	2208      	movs	r2, #8
   105ca:	6860      	ldr	r0, [r4, #4]
   105cc:	f004 f812 	bl	145f4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   105d0:	f106 011a 	add.w	r1, r6, #26
   105d4:	4652      	mov	r2, sl
   105d6:	6860      	ldr	r0, [r4, #4]
   105d8:	f004 f80c 	bl	145f4 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
   105dc:	2600      	movs	r6, #0
   105de:	e7c9      	b.n	10574 <__kernel_ram_size+0x574>
			_radio.conn_curr->pause_tx = 1;
   105e0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   105e4:	f043 0308 	orr.w	r3, r3, #8
   105e8:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   105ec:	e7c2      	b.n	10574 <__kernel_ram_size+0x574>
		_radio.conn_curr->pause_rx = 0;
   105ee:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   105f2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   105f6:	f36f 03c3 	bfc	r3, #3, #1
   105fa:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   105fe:	2300      	movs	r3, #0
   10600:	e7c2      	b.n	10588 <__kernel_ram_size+0x588>
		if ((_radio.conn_curr->llcp_length.req !=
   10602:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   10606:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1060a:	429a      	cmp	r2, r3
   1060c:	d0b2      	beq.n	10574 <__kernel_ram_size+0x574>
		    (_radio.conn_curr->llcp_length.state ==
   1060e:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   10612:	f003 0203 	and.w	r2, r3, #3
   10616:	2a01      	cmp	r2, #1
   10618:	d1ac      	bne.n	10574 <__kernel_ram_size+0x574>
			_radio.conn_curr->pause_tx = 1;
   1061a:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   1061e:	f042 0208 	orr.w	r2, r2, #8
   10622:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   10626:	2202      	movs	r2, #2
   10628:	f362 0301 	bfi	r3, r2, #0, #2
   1062c:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   10630:	e7a0      	b.n	10574 <__kernel_ram_size+0x574>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   10632:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   10636:	2202      	movs	r2, #2
   10638:	f362 0301 	bfi	r3, r2, #0, #2
   1063c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   10640:	7ce3      	ldrb	r3, [r4, #19]
   10642:	2b03      	cmp	r3, #3
   10644:	d196      	bne.n	10574 <__kernel_ram_size+0x574>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   10646:	2301      	movs	r3, #1
   10648:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1064c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   10650:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10654:	2202      	movs	r2, #2
   10656:	2304      	movs	r3, #4
   10658:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   1065c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   10660:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   10664:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   10668:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   1066c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   10670:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   10674:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10678:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   1067c:	f003 0307 	and.w	r3, r3, #7
   10680:	aa12      	add	r2, sp, #72	; 0x48
   10682:	4413      	add	r3, r2
   10684:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   10688:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   1068c:	f363 0202 	bfi	r2, r3, #0, #3
   10690:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   10694:	e76e      	b.n	10574 <__kernel_ram_size+0x574>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   10696:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   1069a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1069e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   106a2:	e7f3      	b.n	1068c <__kernel_ram_size+0x68c>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   106a4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   106a8:	4293      	cmp	r3, r2
   106aa:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   106ac:	bf08      	it	eq
   106ae:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   106b2:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   106b6:	b37d      	cbz	r5, 10718 <__kernel_ram_size+0x718>
		connection_release(_radio.conn_curr);
   106b8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   106bc:	f7fb fb9a 	bl	bdf4 <connection_release>
		_radio.conn_curr = NULL;
   106c0:	2300      	movs	r3, #0
   106c2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
   106c6:	f003 f8a1 	bl	1380c <radio_tmr_aa_restore>
   106ca:	b918      	cbnz	r0, 106d4 <__kernel_ram_size+0x6d4>
		radio_tmr_aa_save(radio_tmr_aa_get());
   106cc:	f003 f892 	bl	137f4 <radio_tmr_aa_get>
   106d0:	f003 f896 	bl	13800 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   106d4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   106d8:	2b00      	cmp	r3, #0
   106da:	f43f a801 	beq.w	f6e0 <isr+0x158>
	if (tx_release) {
   106de:	b11e      	cbz	r6, 106e8 <__kernel_ram_size+0x6e8>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   106e0:	4631      	mov	r1, r6
   106e2:	8c18      	ldrh	r0, [r3, #32]
   106e4:	f7fb faf8 	bl	bcd8 <pdu_node_tx_release>
	if (rx_enqueue) {
   106e8:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   106ec:	2b00      	cmp	r3, #0
   106ee:	f43e aff7 	beq.w	f6e0 <isr+0x158>
		rx_fc_lock(_radio.conn_curr->handle);
   106f2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   106f6:	8c18      	ldrh	r0, [r3, #32]
   106f8:	f7fb f8ba 	bl	b870 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   106fc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10700:	8c1b      	ldrh	r3, [r3, #32]
   10702:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   10706:	f7fa ffb9 	bl	b67c <packet_rx_enqueue>
   1070a:	f7fe bfe9 	b.w	f6e0 <isr+0x158>
			_radio.conn_curr->empty = 0;
   1070e:	f36f 13c7 	bfc	r3, #7, #1
   10712:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   10716:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   10718:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1071c:	f898 2008 	ldrb.w	r2, [r8, #8]
   10720:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   10724:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10728:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1072c:	429a      	cmp	r2, r3
   1072e:	f040 80ef 	bne.w	10910 <__kernel_ram_size+0x910>
	    (packet_rx_reserve_get(3) != 0) &&
   10732:	2003      	movs	r0, #3
   10734:	f7fa f906 	bl	a944 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   10738:	2800      	cmp	r0, #0
   1073a:	f000 80e9 	beq.w	10910 <__kernel_ram_size+0x910>
	    (packet_rx_reserve_get(3) != 0) &&
   1073e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   10742:	b393      	cbz	r3, 107aa <__kernel_ram_size+0x7aa>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10744:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   10748:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
   1074c:	4293      	cmp	r3, r2
   1074e:	d105      	bne.n	1075c <__kernel_ram_size+0x75c>
	      (_radio.fc_req == _radio.fc_ack)) ||
   10750:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10754:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
   10758:	4291      	cmp	r1, r2
   1075a:	d026      	beq.n	107aa <__kernel_ram_size+0x7aa>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1075c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
   10760:	4293      	cmp	r3, r2
   10762:	f000 80d5 	beq.w	10910 <__kernel_ram_size+0x910>
	      (_radio.fc_req != _radio.fc_ack) &&
   10766:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1076a:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
   1076e:	429a      	cmp	r2, r3
   10770:	f000 80ce 	beq.w	10910 <__kernel_ram_size+0x910>
		(((_radio.fc_req == 0) &&
   10774:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
   10778:	b933      	cbnz	r3, 10788 <__kernel_ram_size+0x788>
		   _radio.conn_curr->handle)) ||
   1077a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
   1077e:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   10782:	8c1b      	ldrh	r3, [r3, #32]
   10784:	429a      	cmp	r2, r3
   10786:	d010      	beq.n	107aa <__kernel_ram_size+0x7aa>
		 ((_radio.fc_req != 0) &&
   10788:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
   1078c:	2b00      	cmp	r3, #0
   1078e:	f000 80bf 	beq.w	10910 <__kernel_ram_size+0x910>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   10792:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
   10796:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1079a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   1079e:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
   107a2:	8c0b      	ldrh	r3, [r1, #32]
   107a4:	429a      	cmp	r2, r3
   107a6:	f040 80b3 	bne.w	10910 <__kernel_ram_size+0x910>
		if (pdu_data_rx->len != 0) {
   107aa:	f898 5009 	ldrb.w	r5, [r8, #9]
   107ae:	2d00      	cmp	r5, #0
   107b0:	f000 80b7 	beq.w	10922 <__kernel_ram_size+0x922>
			if (_radio.conn_curr->enc_rx) {
   107b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   107b8:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   107bc:	f015 0510 	ands.w	r5, r5, #16
   107c0:	d00e      	beq.n	107e0 <__kernel_ram_size+0x7e0>
				done = radio_ccm_is_done();
   107c2:	f003 f8af 	bl	13924 <radio_ccm_is_done>
				LL_ASSERT(done);
   107c6:	b950      	cbnz	r0, 107de <__kernel_ram_size+0x7de>
   107c8:	4b2a      	ldr	r3, [pc, #168]	; (10874 <__kernel_ram_size+0x874>)
   107ca:	9301      	str	r3, [sp, #4]
   107cc:	9300      	str	r3, [sp, #0]
   107ce:	4b2a      	ldr	r3, [pc, #168]	; (10878 <__kernel_ram_size+0x878>)
   107d0:	4a2a      	ldr	r2, [pc, #168]	; (1087c <__kernel_ram_size+0x87c>)
   107d2:	681c      	ldr	r4, [r3, #0]
   107d4:	492a      	ldr	r1, [pc, #168]	; (10880 <__kernel_ram_size+0x880>)
   107d6:	4b2b      	ldr	r3, [pc, #172]	; (10884 <__kernel_ram_size+0x884>)
   107d8:	482b      	ldr	r0, [pc, #172]	; (10888 <__kernel_ram_size+0x888>)
   107da:	f7ff ba91 	b.w	fd00 <isr+0x778>
				ccm_rx_increment = 1;
   107de:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   107e0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   107e4:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   107e8:	06d9      	lsls	r1, r3, #27
   107ea:	d42c      	bmi.n	10846 <__kernel_ram_size+0x846>
			    (_radio.conn_curr->pause_rx &&
   107ec:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   107f0:	f898 3008 	ldrb.w	r3, [r8, #8]
   107f4:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   107f8:	f012 0f04 	tst.w	r2, #4
   107fc:	d146      	bne.n	1088c <__kernel_ram_size+0x88c>
			_radio.conn_curr->appto_expire = 0;
   107fe:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   10800:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   10804:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   10808:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   1080c:	d004      	beq.n	10818 <__kernel_ram_size+0x818>
   1080e:	2b02      	cmp	r3, #2
   10810:	d877      	bhi.n	10902 <__kernel_ram_size+0x902>
				*rx_enqueue = 1;
   10812:	2301      	movs	r3, #1
   10814:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   10818:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1081c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10820:	f082 0202 	eor.w	r2, r2, #2
   10824:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   10828:	2d00      	cmp	r5, #0
   1082a:	d071      	beq.n	10910 <__kernel_ram_size+0x910>
				_radio.conn_curr->ccm_rx.counter++;
   1082c:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   10830:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   10834:	f119 0001 	adds.w	r0, r9, #1
   10838:	f14a 0100 	adc.w	r1, sl, #0
   1083c:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   10840:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   10844:	e064      	b.n	10910 <__kernel_ram_size+0x910>
			     !radio_ccm_mic_is_valid()) ||
   10846:	f003 f88b 	bl	13960 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   1084a:	2800      	cmp	r0, #0
   1084c:	d1ce      	bne.n	107ec <__kernel_ram_size+0x7ec>
				_radio.state = STATE_CLOSE;
   1084e:	2303      	movs	r3, #3
   10850:	7523      	strb	r3, [r4, #20]
				radio_disable();
   10852:	f002 fe15 	bl	13480 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   10856:	f002 fe31 	bl	134bc <radio_is_ready>
   1085a:	4605      	mov	r5, r0
   1085c:	2800      	cmp	r0, #0
   1085e:	d044      	beq.n	108ea <__kernel_ram_size+0x8ea>
   10860:	4b04      	ldr	r3, [pc, #16]	; (10874 <__kernel_ram_size+0x874>)
   10862:	9301      	str	r3, [sp, #4]
   10864:	9300      	str	r3, [sp, #0]
   10866:	4b04      	ldr	r3, [pc, #16]	; (10878 <__kernel_ram_size+0x878>)
   10868:	681c      	ldr	r4, [r3, #0]
   1086a:	4b06      	ldr	r3, [pc, #24]	; (10884 <__kernel_ram_size+0x884>)
   1086c:	f7fe beec 	b.w	f648 <isr+0xc0>
   10870:	20000a1c 	.word	0x20000a1c
   10874:	000161ba 	.word	0x000161ba
   10878:	20003a5c 	.word	0x20003a5c
   1087c:	000179e1 	.word	0x000179e1
   10880:	00017a29 	.word	0x00017a29
   10884:	000194dd 	.word	0x000194dd
   10888:	00019b35 	.word	0x00019b35
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1088c:	f003 0103 	and.w	r1, r3, #3
   10890:	2903      	cmp	r1, #3
   10892:	d1dc      	bne.n	1084e <__kernel_ram_size+0x84e>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   10894:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   10898:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   1089c:	f1be 0f00 	cmp.w	lr, #0
   108a0:	f002 0240 	and.w	r2, r2, #64	; 0x40
   108a4:	db15      	blt.n	108d2 <__kernel_ram_size+0x8d2>
	       (!conn->role &&
   108a6:	b922      	cbnz	r2, 108b2 <__kernel_ram_size+0x8b2>
		((!conn->refresh &&
   108a8:	2902      	cmp	r1, #2
   108aa:	d0a8      	beq.n	107fe <__kernel_ram_size+0x7fe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   108ac:	2911      	cmp	r1, #17
   108ae:	d8ce      	bhi.n	1084e <__kernel_ram_size+0x84e>
   108b0:	e009      	b.n	108c6 <__kernel_ram_size+0x8c6>
		 (conn->refresh &&
   108b2:	1e8a      	subs	r2, r1, #2
   108b4:	b2d2      	uxtb	r2, r2
   108b6:	2a09      	cmp	r2, #9
   108b8:	d8f8      	bhi.n	108ac <__kernel_ram_size+0x8ac>
   108ba:	f240 2e05 	movw	lr, #517	; 0x205
   108be:	fa2e f202 	lsr.w	r2, lr, r2
   108c2:	07d2      	lsls	r2, r2, #31
   108c4:	d49b      	bmi.n	107fe <__kernel_ram_size+0x7fe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   108c6:	4ab0      	ldr	r2, [pc, #704]	; (10b88 <__kernel_ram_size+0xb88>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   108c8:	fa22 f101 	lsr.w	r1, r2, r1
   108cc:	07ca      	lsls	r2, r1, #31
   108ce:	d5be      	bpl.n	1084e <__kernel_ram_size+0x84e>
   108d0:	e795      	b.n	107fe <__kernel_ram_size+0x7fe>
	       (conn->role &&
   108d2:	b92a      	cbnz	r2, 108e0 <__kernel_ram_size+0x8e0>
		((!conn->refresh &&
   108d4:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   108d6:	d092      	beq.n	107fe <__kernel_ram_size+0x7fe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   108d8:	2911      	cmp	r1, #17
   108da:	d8b8      	bhi.n	1084e <__kernel_ram_size+0x84e>
   108dc:	4aab      	ldr	r2, [pc, #684]	; (10b8c <__kernel_ram_size+0xb8c>)
   108de:	e7f3      	b.n	108c8 <__kernel_ram_size+0x8c8>
		 (conn->refresh &&
   108e0:	1e8a      	subs	r2, r1, #2
   108e2:	2a01      	cmp	r2, #1
   108e4:	d98b      	bls.n	107fe <__kernel_ram_size+0x7fe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   108e6:	290b      	cmp	r1, #11
   108e8:	e7f5      	b.n	108d6 <__kernel_ram_size+0x8d6>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   108ea:	213d      	movs	r1, #61	; 0x3d
   108ec:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   108f0:	f7fb fc40 	bl	c174 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   108f4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   108f8:	f7fb fa7c 	bl	bdf4 <connection_release>
				_radio.conn_curr = NULL;
   108fc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   10900:	e6e1      	b.n	106c6 <__kernel_ram_size+0x6c6>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   10902:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   10906:	4640      	mov	r0, r8
   10908:	f7fd fcfe 	bl	e308 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   1090c:	2800      	cmp	r0, #0
   1090e:	d083      	beq.n	10818 <__kernel_ram_size+0x818>
		_radio.conn_curr->supervision_expire = 0;
   10910:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
   10914:	2300      	movs	r3, #0
   10916:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
   1091a:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   1091c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   10920:	e03e      	b.n	109a0 <__kernel_ram_size+0x9a0>
		} else if ((_radio.conn_curr->enc_rx) ||
   10922:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   10926:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1092a:	f013 0f14 	tst.w	r3, #20
   1092e:	f43f af73 	beq.w	10818 <__kernel_ram_size+0x818>
					    (conn->latency + 6)) ?
   10932:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   10934:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   10938:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   1093a:	4299      	cmp	r1, r3
   1093c:	bfc4      	itt	gt
   1093e:	1f8b      	subgt	r3, r1, #6
   10940:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   10942:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   10946:	bfcc      	ite	gt
   10948:	b29b      	uxthgt	r3, r3
   1094a:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   1094c:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
   1094e:	bf1e      	ittt	ne
   10950:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   10954:	2300      	movne	r3, #0
   10956:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   1095a:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   1095e:	2b00      	cmp	r3, #0
   10960:	f47f af5a 	bne.w	10818 <__kernel_ram_size+0x818>
				conn->appto_expire = conn->appto_reload;
   10964:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   10968:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   1096c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
   10970:	e752      	b.n	10818 <__kernel_ram_size+0x818>
		if (_radio.crc_expire == 0) {
   10972:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   10976:	b913      	cbnz	r3, 1097e <__kernel_ram_size+0x97e>
			_radio.crc_expire = 2;
   10978:	2302      	movs	r3, #2
   1097a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
   1097e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   10982:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
   10986:	3b01      	subs	r3, #1
   10988:	b2db      	uxtb	r3, r3
   1098a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
   1098e:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   10992:	fab3 f583 	clz	r5, r3
   10996:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   10998:	bb86      	cbnz	r6, 109fc <__kernel_ram_size+0x9fc>
			_radio.conn_curr->supervision_expire =
   1099a:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   1099c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   109a0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   109a4:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   109a6:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   109aa:	f7fd fb67 	bl	e07c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   109ae:	7d23      	ldrb	r3, [r4, #20]
   109b0:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   109b2:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   109b6:	d010      	beq.n	109da <__kernel_ram_size+0x9da>
   109b8:	bb15      	cbnz	r5, 10a00 <__kernel_ram_size+0xa00>
   109ba:	b137      	cbz	r7, 109ca <__kernel_ram_size+0x9ca>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   109bc:	f898 3008 	ldrb.w	r3, [r8, #8]
   109c0:	06d8      	lsls	r0, r3, #27
   109c2:	d402      	bmi.n	109ca <__kernel_ram_size+0x9ca>
			 (pdu_data_tx->len == 0)) ||
   109c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   109c6:	785b      	ldrb	r3, [r3, #1]
   109c8:	b1d3      	cbz	r3, 10a00 <__kernel_ram_size+0xa00>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   109ca:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
   109ce:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   109d2:	2b00      	cmp	r3, #0
   109d4:	bf0c      	ite	eq
   109d6:	2302      	moveq	r3, #2
   109d8:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   109da:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   109dc:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   109de:	d12f      	bne.n	10a40 <__kernel_ram_size+0xa40>
		if (_radio.role == ROLE_MASTER) {
   109e0:	7ce3      	ldrb	r3, [r4, #19]
   109e2:	2b04      	cmp	r3, #4
   109e4:	d10e      	bne.n	10a04 <__kernel_ram_size+0xa04>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   109e6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   109ea:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   109ee:	f369 12c7 	bfi	r2, r9, #7, #1
   109f2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   109f6:	f002 fd43 	bl	13480 <radio_disable>
   109fa:	e664      	b.n	106c6 <__kernel_ram_size+0x6c6>
	struct radio_pdu_node_tx *tx_release = NULL;
   109fc:	2600      	movs	r6, #0
   109fe:	e7cf      	b.n	109a0 <__kernel_ram_size+0x9a0>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10a00:	2303      	movs	r3, #3
   10a02:	e7ea      	b.n	109da <__kernel_ram_size+0x9da>
			radio_switch_complete_and_disable();
   10a04:	f002 fdac 	bl	13560 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   10a08:	9910      	ldr	r1, [sp, #64]	; 0x40
   10a0a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10a0e:	780b      	ldrb	r3, [r1, #0]
   10a10:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   10a14:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   10a18:	f3c2 0240 	ubfx	r2, r2, #1, #1
   10a1c:	f362 0382 	bfi	r3, r2, #2, #1
   10a20:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   10a22:	f7fa fb43 	bl	b0ac <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   10a26:	f002 fd49 	bl	134bc <radio_is_ready>
   10a2a:	2800      	cmp	r0, #0
   10a2c:	f43f ae4b 	beq.w	106c6 <__kernel_ram_size+0x6c6>
   10a30:	4b57      	ldr	r3, [pc, #348]	; (10b90 <__kernel_ram_size+0xb90>)
   10a32:	9301      	str	r3, [sp, #4]
   10a34:	9300      	str	r3, [sp, #0]
   10a36:	4b57      	ldr	r3, [pc, #348]	; (10b94 <__kernel_ram_size+0xb94>)
   10a38:	681c      	ldr	r4, [r3, #0]
   10a3a:	4b57      	ldr	r3, [pc, #348]	; (10b98 <__kernel_ram_size+0xb98>)
   10a3c:	f7fe be04 	b.w	f648 <isr+0xc0>
		radio_tmr_tifs_set(RADIO_TIFS);
   10a40:	2096      	movs	r0, #150	; 0x96
   10a42:	f002 fe13 	bl	1366c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   10a46:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10a4a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   10a4e:	f000 0007 	and.w	r0, r0, #7
   10a52:	f002 fd6f 	bl	13534 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   10a56:	f002 fee5 	bl	13824 <radio_tmr_end_capture>
   10a5a:	e7d5      	b.n	10a08 <__kernel_ram_size+0xa08>
		LL_ASSERT(0);
   10a5c:	4b4c      	ldr	r3, [pc, #304]	; (10b90 <__kernel_ram_size+0xb90>)
   10a5e:	9301      	str	r3, [sp, #4]
   10a60:	9300      	str	r3, [sp, #0]
   10a62:	4b4c      	ldr	r3, [pc, #304]	; (10b94 <__kernel_ram_size+0xb94>)
   10a64:	681c      	ldr	r4, [r3, #0]
   10a66:	4b4d      	ldr	r3, [pc, #308]	; (10b9c <__kernel_ram_size+0xb9c>)
   10a68:	f7fe be89 	b.w	f77e <isr+0x1f6>
	switch (_radio.role) {
   10a6c:	7ce2      	ldrb	r2, [r4, #19]
   10a6e:	2a04      	cmp	r2, #4
   10a70:	f200 824c 	bhi.w	10f0c <__kernel_ram_size+0xf0c>
   10a74:	e8df f012 	tbh	[pc, r2, lsl #1]
   10a78:	00050238 	.word	0x00050238
   10a7c:	00c7005a 	.word	0x00c7005a
   10a80:	00c7      	.short	0x00c7
	if ((_radio.state == STATE_CLOSE) &&
   10a82:	2b03      	cmp	r3, #3
   10a84:	d109      	bne.n	10a9a <__kernel_ram_size+0xa9a>
	    (_radio.advertiser.chan_map_current != 0)) {
   10a86:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   10a8a:	0759      	lsls	r1, r3, #29
   10a8c:	d005      	beq.n	10a9a <__kernel_ram_size+0xa9a>
		adv_setup();
   10a8e:	f7fb fa8b 	bl	bfa8 <adv_setup>
		radio_tx_enable();
   10a92:	f002 fcef 	bl	13474 <radio_tx_enable>
   10a96:	f7fe bdf3 	b.w	f680 <isr+0xf8>
		radio_filter_disable();
   10a9a:	f002 fdab 	bl	135f4 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   10a9e:	7d23      	ldrb	r3, [r4, #20]
   10aa0:	2b03      	cmp	r3, #3
   10aa2:	f040 8095 	bne.w	10bd0 <__kernel_ram_size+0xbd0>
		    (!_radio.advertiser.is_hdcd)) {
   10aa6:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   10aaa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   10aae:	f040 808f 	bne.w	10bd0 <__kernel_ram_size+0xbd0>
			entropy_nrf_get_entropy_isr(_radio.entropy,
   10ab2:	2201      	movs	r2, #1
   10ab4:	a910      	add	r1, sp, #64	; 0x40
   10ab6:	6860      	ldr	r0, [r4, #4]
   10ab8:	f003 fd9c 	bl	145f4 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
   10abc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   10ac0:	4837      	ldr	r0, [pc, #220]	; (10ba0 <__kernel_ram_size+0xba0>)
			random_delay %= 10;
   10ac2:	230a      	movs	r3, #10
   10ac4:	fbb1 f2f3 	udiv	r2, r1, r3
   10ac8:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
   10acc:	3201      	adds	r2, #1
   10ace:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
   10ad0:	b2d6      	uxtb	r6, r2
   10ad2:	fba6 0100 	umull	r0, r1, r6, r0
   10ad6:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
   10ad8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
   10adc:	fb03 1106 	mla	r1, r3, r6, r1
   10ae0:	a327      	add	r3, pc, #156	; (adr r3, 10b80 <__kernel_ram_size+0xb80>)
   10ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ae6:	f7ef fb95 	bl	214 <__aeabi_uldivmod>
			ticker_status =
   10aea:	f640 734b 	movw	r3, #3915	; 0xf4b
   10aee:	9306      	str	r3, [sp, #24]
   10af0:	4b2c      	ldr	r3, [pc, #176]	; (10ba4 <__kernel_ram_size+0xba4>)
   10af2:	9305      	str	r3, [sp, #20]
   10af4:	9504      	str	r5, [sp, #16]
   10af6:	b283      	uxth	r3, r0
   10af8:	9503      	str	r5, [sp, #12]
   10afa:	9502      	str	r5, [sp, #8]
   10afc:	9501      	str	r5, [sp, #4]
   10afe:	9500      	str	r5, [sp, #0]
   10b00:	2205      	movs	r2, #5
   10b02:	4629      	mov	r1, r5
   10b04:	4628      	mov	r0, r5
   10b06:	f7f7 fe65 	bl	87d4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10b0a:	f030 0302 	bics.w	r3, r0, #2
   10b0e:	d05f      	beq.n	10bd0 <__kernel_ram_size+0xbd0>
   10b10:	7ca3      	ldrb	r3, [r4, #18]
   10b12:	2b05      	cmp	r3, #5
   10b14:	d05c      	beq.n	10bd0 <__kernel_ram_size+0xbd0>
   10b16:	4b1e      	ldr	r3, [pc, #120]	; (10b90 <__kernel_ram_size+0xb90>)
   10b18:	9301      	str	r3, [sp, #4]
   10b1a:	9300      	str	r3, [sp, #0]
   10b1c:	4b1d      	ldr	r3, [pc, #116]	; (10b94 <__kernel_ram_size+0xb94>)
   10b1e:	4a22      	ldr	r2, [pc, #136]	; (10ba8 <__kernel_ram_size+0xba8>)
   10b20:	681c      	ldr	r4, [r3, #0]
   10b22:	4922      	ldr	r1, [pc, #136]	; (10bac <__kernel_ram_size+0xbac>)
   10b24:	4b22      	ldr	r3, [pc, #136]	; (10bb0 <__kernel_ram_size+0xbb0>)
   10b26:	4823      	ldr	r0, [pc, #140]	; (10bb4 <__kernel_ram_size+0xbb4>)
   10b28:	f7ff b8ea 	b.w	fd00 <isr+0x778>
	if (_radio.state == STATE_CLOSE) {
   10b2c:	2b03      	cmp	r3, #3
   10b2e:	d143      	bne.n	10bb8 <__kernel_ram_size+0xbb8>
		radio_tmr_tifs_set(RADIO_TIFS);
   10b30:	2096      	movs	r0, #150	; 0x96
   10b32:	f002 fd9b 	bl	1366c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   10b36:	2300      	movs	r3, #0
   10b38:	4619      	mov	r1, r3
   10b3a:	461a      	mov	r2, r3
   10b3c:	4618      	mov	r0, r3
   10b3e:	f002 fd05 	bl	1354c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   10b42:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   10b46:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   10b4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   10b4e:	3008      	adds	r0, #8
   10b50:	f002 fc70 	bl	13434 <radio_pkt_rx_set>
		radio_rssi_measure();
   10b54:	f002 fd12 	bl	1357c <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10b58:	f001 ff72 	bl	12a40 <ctrl_rl_enabled>
   10b5c:	b138      	cbz	r0, 10b6e <__kernel_ram_size+0xb6e>
			u8_t count, *irks = ctrl_irks_get(&count);
   10b5e:	a810      	add	r0, sp, #64	; 0x40
   10b60:	f001 fca6 	bl	124b0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10b64:	4601      	mov	r1, r0
   10b66:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   10b6a:	f002 ff03 	bl	13974 <radio_ar_configure>
		_radio.state = STATE_RX;
   10b6e:	2301      	movs	r3, #1
   10b70:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   10b72:	f002 fc79 	bl	13468 <radio_rx_enable>
   10b76:	f7fe bd83 	b.w	f680 <isr+0xf8>
   10b7a:	bf00      	nop
   10b7c:	f3af 8000 	nop.w
   10b80:	1afd498d 	.word	0x1afd498d
   10b84:	00000007 	.word	0x00000007
   10b88:	00022060 	.word	0x00022060
   10b8c:	00022040 	.word	0x00022040
   10b90:	000161ba 	.word	0x000161ba
   10b94:	20003a5c 	.word	0x20003a5c
   10b98:	000194ed 	.word	0x000194ed
   10b9c:	000194f9 	.word	0x000194f9
   10ba0:	d4a51000 	.word	0xd4a51000
   10ba4:	0000b9c5 	.word	0x0000b9c5
   10ba8:	000179e1 	.word	0x000179e1
   10bac:	00017a29 	.word	0x00017a29
   10bb0:	0001950c 	.word	0x0001950c
   10bb4:	00019b5b 	.word	0x00019b5b
		radio_filter_disable();
   10bb8:	f002 fd1c 	bl	135f4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   10bbc:	7d23      	ldrb	r3, [r4, #20]
   10bbe:	2b05      	cmp	r3, #5
   10bc0:	d106      	bne.n	10bd0 <__kernel_ram_size+0xbd0>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10bc2:	2300      	movs	r3, #0
   10bc4:	9300      	str	r3, [sp, #0]
   10bc6:	2204      	movs	r2, #4
   10bc8:	4619      	mov	r1, r3
   10bca:	4618      	mov	r0, r3
   10bcc:	f7f7 fe50 	bl	8870 <ticker_stop>
	_radio.role = ROLE_NONE;
   10bd0:	2500      	movs	r5, #0
   10bd2:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   10bd4:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   10bd6:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   10bd8:	f002 fdc6 	bl	13768 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10bdc:	462a      	mov	r2, r5
   10bde:	4629      	mov	r1, r5
   10be0:	4628      	mov	r0, r5
   10be2:	4bab      	ldr	r3, [pc, #684]	; (10e90 <__kernel_ram_size+0xe90>)
   10be4:	f7f6 ffe6 	bl	7bb4 <mayfly_enqueue>
	LL_ASSERT(!retval);
   10be8:	4605      	mov	r5, r0
   10bea:	2800      	cmp	r0, #0
   10bec:	f000 8196 	beq.w	10f1c <__kernel_ram_size+0xf1c>
   10bf0:	4ba8      	ldr	r3, [pc, #672]	; (10e94 <__kernel_ram_size+0xe94>)
   10bf2:	9301      	str	r3, [sp, #4]
   10bf4:	9300      	str	r3, [sp, #0]
   10bf6:	4ba8      	ldr	r3, [pc, #672]	; (10e98 <__kernel_ram_size+0xe98>)
   10bf8:	4aa8      	ldr	r2, [pc, #672]	; (10e9c <__kernel_ram_size+0xe9c>)
   10bfa:	681c      	ldr	r4, [r3, #0]
   10bfc:	49a8      	ldr	r1, [pc, #672]	; (10ea0 <__kernel_ram_size+0xea0>)
   10bfe:	4ba9      	ldr	r3, [pc, #676]	; (10ea4 <__kernel_ram_size+0xea4>)
   10c00:	48a9      	ldr	r0, [pc, #676]	; (10ea8 <__kernel_ram_size+0xea8>)
   10c02:	f7ff b87d 	b.w	fd00 <isr+0x778>
	if (_radio.conn_curr == 0) {
   10c06:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10c0a:	2800      	cmp	r0, #0
   10c0c:	d0e0      	beq.n	10bd0 <__kernel_ram_size+0xbd0>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   10c0e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   10c12:	b181      	cbz	r1, 10c36 <__kernel_ram_size+0xc36>
   10c14:	7ce3      	ldrb	r3, [r4, #19]
   10c16:	2b03      	cmp	r3, #3
   10c18:	d003      	beq.n	10c22 <__kernel_ram_size+0xc22>
   10c1a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10c1e:	07da      	lsls	r2, r3, #31
   10c20:	d509      	bpl.n	10c36 <__kernel_ram_size+0xc36>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10c22:	f7fb faa7 	bl	c174 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10c26:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10c2a:	f7fb f8e3 	bl	bdf4 <connection_release>
			_radio.conn_curr = NULL;
   10c2e:	2300      	movs	r3, #0
   10c30:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   10c34:	e7cc      	b.n	10bd0 <__kernel_ram_size+0xbd0>
	latency_event = _radio.conn_curr->latency_event;
   10c36:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   10c3a:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   10c3e:	f10b 0601 	add.w	r6, fp, #1
   10c42:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   10c44:	2f00      	cmp	r7, #0
   10c46:	f000 8084 	beq.w	10d52 <__kernel_ram_size+0xd52>
		if (_radio.role == ROLE_SLAVE) {
   10c4a:	7ce3      	ldrb	r3, [r4, #19]
   10c4c:	2b03      	cmp	r3, #3
   10c4e:	d173      	bne.n	10d38 <__kernel_ram_size+0xd38>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10c50:	f002 fddc 	bl	1380c <radio_tmr_aa_restore>
   10c54:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   10c56:	f002 fddf 	bl	13818 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   10c5a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   10c5e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   10c62:	f003 0307 	and.w	r3, r3, #7
   10c66:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10c68:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   10c6c:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   10c6e:	d052      	beq.n	10d16 <__kernel_ram_size+0xd16>
		return 40;
   10c70:	2b04      	cmp	r3, #4
   10c72:	bf0c      	ite	eq
   10c74:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   10c78:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10c7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10c80:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   10c82:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10c84:	930a      	str	r3, [sp, #40]	; 0x28
   10c86:	f8df a230 	ldr.w	sl, [pc, #560]	; 10eb8 <__kernel_ram_size+0xeb8>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10c8a:	a37f      	add	r3, pc, #508	; (adr r3, 10e88 <__kernel_ram_size+0xe88>)
   10c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   10c90:	d844      	bhi.n	10d1c <__kernel_ram_size+0xd1c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10c92:	fba0 010a 	umull	r0, r1, r0, sl
   10c96:	f7ef fabd 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10c9c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10c9e:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10ca2:	a379      	add	r3, pc, #484	; (adr r3, 10e88 <__kernel_ram_size+0xe88>)
   10ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ca8:	fba0 010a 	umull	r0, r1, r0, sl
   10cac:	f7ef fab2 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   10cb0:	2300      	movs	r3, #0
   10cb2:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   10cb4:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   10cb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10cba:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   10cbe:	b3ab      	cbz	r3, 10d2c <__kernel_ram_size+0xd2c>
				if (pdu_data_tx->len ||
   10cc0:	795b      	ldrb	r3, [r3, #5]
   10cc2:	b913      	cbnz	r3, 10cca <__kernel_ram_size+0xcca>
   10cc4:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   10cc8:	b10b      	cbz	r3, 10cce <__kernel_ram_size+0xcce>
					_radio.conn_curr->latency_event = 0;
   10cca:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   10ccc:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   10cce:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10cd2:	2200      	movs	r2, #0
   10cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   10cd6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10cda:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10cde:	b1c3      	cbz	r3, 10d12 <__kernel_ram_size+0xd12>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10ce0:	429e      	cmp	r6, r3
   10ce2:	f080 80b2 	bcs.w	10e4a <__kernel_ram_size+0xe4a>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10ce6:	1b9b      	subs	r3, r3, r6
   10ce8:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   10cea:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   10cec:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10cee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   10cf2:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   10cf4:	f240 80ab 	bls.w	10e4e <__kernel_ram_size+0xe4e>
			else if (_radio.role == ROLE_SLAVE) {
   10cf8:	7ce3      	ldrb	r3, [r4, #19]
   10cfa:	2b03      	cmp	r3, #3
   10cfc:	d109      	bne.n	10d12 <__kernel_ram_size+0xd12>
				if (latency_event != 0) {
   10cfe:	f1bb 0f00 	cmp.w	fp, #0
   10d02:	f040 80a4 	bne.w	10e4e <__kernel_ram_size+0xe4e>
					force = _radio.conn_curr->slave.force & 0x01;
   10d06:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   10d08:	087b      	lsrs	r3, r7, #1
					if (force) {
   10d0a:	f017 0701 	ands.w	r7, r7, #1
   10d0e:	d13d      	bne.n	10d8c <__kernel_ram_size+0xd8c>
					_radio.conn_curr->slave.force >>= 1;
   10d10:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   10d12:	2700      	movs	r7, #0
   10d14:	e03d      	b.n	10d92 <__kernel_ram_size+0xd92>
		return 24;
   10d16:	f04f 0818 	mov.w	r8, #24
   10d1a:	e7af      	b.n	10c7c <__kernel_ram_size+0xc7c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10d1c:	fba9 010a 	umull	r0, r1, r9, sl
   10d20:	f7ef fa78 	bl	214 <__aeabi_uldivmod>
   10d24:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10d26:	f108 0030 	add.w	r0, r8, #48	; 0x30
   10d2a:	e7ba      	b.n	10ca2 <__kernel_ram_size+0xca2>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   10d2c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   10d30:	07db      	lsls	r3, r3, #31
   10d32:	d5cc      	bpl.n	10cce <__kernel_ram_size+0xcce>
				_radio.conn_curr->latency_event =
   10d34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   10d36:	e7c9      	b.n	10ccc <__kernel_ram_size+0xccc>
		} else if (reason_peer) {
   10d38:	b149      	cbz	r1, 10d4e <__kernel_ram_size+0xd4e>
			_radio.conn_curr->master.terminate_ack = 1;
   10d3a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10d3e:	f043 0301 	orr.w	r3, r3, #1
   10d42:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   10d46:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   10d4a:	4645      	mov	r5, r8
   10d4c:	e7bf      	b.n	10cce <__kernel_ram_size+0xcce>
	ticks_drift_minus = 0;
   10d4e:	4688      	mov	r8, r1
   10d50:	e7fb      	b.n	10d4a <__kernel_ram_size+0xd4a>
	else if (_radio.conn_curr->connect_expire) {
   10d52:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   10d54:	b185      	cbz	r5, 10d78 <__kernel_ram_size+0xd78>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10d56:	42ae      	cmp	r6, r5
   10d58:	d204      	bcs.n	10d64 <__kernel_ram_size+0xd64>
			_radio.conn_curr->connect_expire -= elapsed_event;
   10d5a:	1bad      	subs	r5, r5, r6
   10d5c:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10d5e:	463d      	mov	r5, r7
   10d60:	46a8      	mov	r8, r5
   10d62:	e7b8      	b.n	10cd6 <__kernel_ram_size+0xcd6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10d64:	213e      	movs	r1, #62	; 0x3e
   10d66:	f7fb fa05 	bl	c174 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10d6a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   10d6e:	f7fb f841 	bl	bdf4 <connection_release>
			_radio.conn_curr = NULL;
   10d72:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   10d76:	e72b      	b.n	10bd0 <__kernel_ram_size+0xbd0>
		if (!_radio.conn_curr->supervision_expire) {
   10d78:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   10d7c:	f1b8 0f00 	cmp.w	r8, #0
   10d80:	d1ee      	bne.n	10d60 <__kernel_ram_size+0xd60>
			_radio.conn_curr->supervision_expire =
   10d82:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   10d84:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10d88:	4645      	mov	r5, r8
   10d8a:	e7a4      	b.n	10cd6 <__kernel_ram_size+0xcd6>
						_radio.conn_curr->slave.force |=
   10d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10d90:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   10d92:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10d96:	b123      	cbz	r3, 10da2 <__kernel_ram_size+0xda2>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   10d98:	429e      	cmp	r6, r3
   10d9a:	d25a      	bcs.n	10e52 <__kernel_ram_size+0xe52>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   10d9c:	1b9b      	subs	r3, r3, r6
   10d9e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   10da2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   10da6:	b123      	cbz	r3, 10db2 <__kernel_ram_size+0xdb2>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   10da8:	429e      	cmp	r6, r3
   10daa:	d254      	bcs.n	10e56 <__kernel_ram_size+0xe56>
			_radio.conn_curr->apto_expire -= elapsed_event;
   10dac:	1b9b      	subs	r3, r3, r6
   10dae:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   10db2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   10db6:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   10dba:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   10dbe:	b123      	cbz	r3, 10dca <__kernel_ram_size+0xdca>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10dc0:	429e      	cmp	r6, r3
   10dc2:	d27b      	bcs.n	10ebc <__kernel_ram_size+0xebc>
			_radio.conn_curr->appto_expire -= elapsed_event;
   10dc4:	1b9e      	subs	r6, r3, r6
   10dc6:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10dca:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10dce:	428b      	cmp	r3, r1
   10dd0:	d006      	beq.n	10de0 <__kernel_ram_size+0xde0>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   10dd2:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10dd6:	3b01      	subs	r3, #1
   10dd8:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   10dda:	bf9c      	itt	ls
   10ddc:	2300      	movls	r3, #0
   10dde:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10de0:	b917      	cbnz	r7, 10de8 <__kernel_ram_size+0xde8>
   10de2:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10de4:	455b      	cmp	r3, fp
   10de6:	d07d      	beq.n	10ee4 <__kernel_ram_size+0xee4>
		lazy = _radio.conn_curr->latency_event + 1;
   10de8:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   10dea:	3301      	adds	r3, #1
   10dec:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10dee:	b935      	cbnz	r5, 10dfe <__kernel_ram_size+0xdfe>
   10df0:	f1b8 0f00 	cmp.w	r8, #0
   10df4:	d103      	bne.n	10dfe <__kernel_ram_size+0xdfe>
   10df6:	b913      	cbnz	r3, 10dfe <__kernel_ram_size+0xdfe>
	    (lazy != 0) || (force != 0)) {
   10df8:	2f00      	cmp	r7, #0
   10dfa:	f43f aee9 	beq.w	10bd0 <__kernel_ram_size+0xbd0>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10dfe:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   10e02:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10e04:	3207      	adds	r2, #7
		ticker_status =
   10e06:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10e08:	b2d6      	uxtb	r6, r2
		ticker_status =
   10e0a:	4a28      	ldr	r2, [pc, #160]	; (10eac <__kernel_ram_size+0xeac>)
   10e0c:	9205      	str	r2, [sp, #20]
   10e0e:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   10e10:	9606      	str	r6, [sp, #24]
		ticker_status =
   10e12:	9704      	str	r7, [sp, #16]
   10e14:	9102      	str	r1, [sp, #8]
   10e16:	9101      	str	r1, [sp, #4]
   10e18:	f8cd 8000 	str.w	r8, [sp]
   10e1c:	4632      	mov	r2, r6
   10e1e:	4608      	mov	r0, r1
   10e20:	f7f7 fcd8 	bl	87d4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10e24:	f030 0302 	bics.w	r3, r0, #2
   10e28:	f43f aed2 	beq.w	10bd0 <__kernel_ram_size+0xbd0>
   10e2c:	7ca3      	ldrb	r3, [r4, #18]
   10e2e:	429e      	cmp	r6, r3
   10e30:	f43f aece 	beq.w	10bd0 <__kernel_ram_size+0xbd0>
   10e34:	4b17      	ldr	r3, [pc, #92]	; (10e94 <__kernel_ram_size+0xe94>)
   10e36:	9301      	str	r3, [sp, #4]
   10e38:	9300      	str	r3, [sp, #0]
   10e3a:	4b17      	ldr	r3, [pc, #92]	; (10e98 <__kernel_ram_size+0xe98>)
   10e3c:	4a17      	ldr	r2, [pc, #92]	; (10e9c <__kernel_ram_size+0xe9c>)
   10e3e:	681c      	ldr	r4, [r3, #0]
   10e40:	4917      	ldr	r1, [pc, #92]	; (10ea0 <__kernel_ram_size+0xea0>)
   10e42:	4b1b      	ldr	r3, [pc, #108]	; (10eb0 <__kernel_ram_size+0xeb0>)
   10e44:	481b      	ldr	r0, [pc, #108]	; (10eb4 <__kernel_ram_size+0xeb4>)
   10e46:	f7fe bf5b 	b.w	fd00 <isr+0x778>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10e4a:	2108      	movs	r1, #8
   10e4c:	e6e9      	b.n	10c22 <__kernel_ram_size+0xc22>
				force = 1;
   10e4e:	2701      	movs	r7, #1
   10e50:	e79f      	b.n	10d92 <__kernel_ram_size+0xd92>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10e52:	2122      	movs	r1, #34	; 0x22
   10e54:	e6e5      	b.n	10c22 <__kernel_ram_size+0xc22>
			_radio.conn_curr->apto_expire = 0;
   10e56:	2300      	movs	r3, #0
   10e58:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   10e5c:	2002      	movs	r0, #2
   10e5e:	f7f9 fd71 	bl	a944 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   10e62:	b938      	cbnz	r0, 10e74 <__kernel_ram_size+0xe74>
   10e64:	4b0b      	ldr	r3, [pc, #44]	; (10e94 <__kernel_ram_size+0xe94>)
   10e66:	9301      	str	r3, [sp, #4]
   10e68:	9300      	str	r3, [sp, #0]
   10e6a:	4b0b      	ldr	r3, [pc, #44]	; (10e98 <__kernel_ram_size+0xe98>)
   10e6c:	681c      	ldr	r4, [r3, #0]
   10e6e:	4b10      	ldr	r3, [pc, #64]	; (10eb0 <__kernel_ram_size+0xeb0>)
   10e70:	f7fe be0c 	b.w	fa8c <isr+0x504>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   10e74:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10e78:	8c1b      	ldrh	r3, [r3, #32]
   10e7a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10e7c:	230a      	movs	r3, #10
   10e7e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   10e80:	f7fa fbfc 	bl	b67c <packet_rx_enqueue>
   10e84:	e795      	b.n	10db2 <__kernel_ram_size+0xdb2>
   10e86:	bf00      	nop
   10e88:	1afd498d 	.word	0x1afd498d
   10e8c:	00000007 	.word	0x00000007
   10e90:	20003d48 	.word	0x20003d48
   10e94:	000161ba 	.word	0x000161ba
   10e98:	20003a5c 	.word	0x20003a5c
   10e9c:	000179e1 	.word	0x000179e1
   10ea0:	00017a29 	.word	0x00017a29
   10ea4:	000195dd 	.word	0x000195dd
   10ea8:	0001a00d 	.word	0x0001a00d
   10eac:	0000ba11 	.word	0x0000ba11
   10eb0:	0001951a 	.word	0x0001951a
   10eb4:	00019bc9 	.word	0x00019bc9
   10eb8:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->appto_expire = 0;
   10ebc:	2300      	movs	r3, #0
   10ebe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10ec2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   10ec6:	2b00      	cmp	r3, #0
   10ec8:	f47f af7f 	bne.w	10dca <__kernel_ram_size+0xdca>
   10ecc:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10ed0:	428b      	cmp	r3, r1
   10ed2:	f47f af7e 	bne.w	10dd2 <__kernel_ram_size+0xdd2>
				_radio.conn_curr->llcp_type = LLCP_PING;
   10ed6:	2307      	movs	r3, #7
   10ed8:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10edc:	1e4b      	subs	r3, r1, #1
   10ede:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   10ee2:	e772      	b.n	10dca <__kernel_ram_size+0xdca>
	lazy = 0;
   10ee4:	463b      	mov	r3, r7
   10ee6:	e782      	b.n	10dee <__kernel_ram_size+0xdee>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10ee8:	3b04      	subs	r3, #4
   10eea:	2b01      	cmp	r3, #1
   10eec:	d90a      	bls.n	10f04 <__kernel_ram_size+0xf04>
   10eee:	4b15      	ldr	r3, [pc, #84]	; (10f44 <__kernel_ram_size+0xf44>)
   10ef0:	9301      	str	r3, [sp, #4]
   10ef2:	9300      	str	r3, [sp, #0]
   10ef4:	4b14      	ldr	r3, [pc, #80]	; (10f48 <__kernel_ram_size+0xf48>)
   10ef6:	4a15      	ldr	r2, [pc, #84]	; (10f4c <__kernel_ram_size+0xf4c>)
   10ef8:	681c      	ldr	r4, [r3, #0]
   10efa:	4915      	ldr	r1, [pc, #84]	; (10f50 <__kernel_ram_size+0xf50>)
   10efc:	4b15      	ldr	r3, [pc, #84]	; (10f54 <__kernel_ram_size+0xf54>)
   10efe:	4816      	ldr	r0, [pc, #88]	; (10f58 <__kernel_ram_size+0xf58>)
   10f00:	f7fe befe 	b.w	fd00 <isr+0x778>
		_radio.state = STATE_NONE;
   10f04:	2300      	movs	r3, #0
   10f06:	7523      	strb	r3, [r4, #20]
   10f08:	f7fe bbea 	b.w	f6e0 <isr+0x158>
		LL_ASSERT(0);
   10f0c:	4b0d      	ldr	r3, [pc, #52]	; (10f44 <__kernel_ram_size+0xf44>)
   10f0e:	9301      	str	r3, [sp, #4]
   10f10:	9300      	str	r3, [sp, #0]
   10f12:	4b0d      	ldr	r3, [pc, #52]	; (10f48 <__kernel_ram_size+0xf48>)
   10f14:	681c      	ldr	r4, [r3, #0]
   10f16:	4b0f      	ldr	r3, [pc, #60]	; (10f54 <__kernel_ram_size+0xf54>)
   10f18:	f7fe bc31 	b.w	f77e <isr+0x1f6>
	clock_control_off(_radio.hf_clock, NULL);
   10f1c:	6820      	ldr	r0, [r4, #0]
   10f1e:	6843      	ldr	r3, [r0, #4]
   10f20:	4629      	mov	r1, r5
   10f22:	685b      	ldr	r3, [r3, #4]
   10f24:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10f26:	2201      	movs	r2, #1
   10f28:	4611      	mov	r1, r2
   10f2a:	4628      	mov	r0, r5
   10f2c:	f7f6 fe1a 	bl	7b64 <mayfly_enable>
   10f30:	f7fe bbd6 	b.w	f6e0 <isr+0x158>
		LL_ASSERT(0);
   10f34:	4b03      	ldr	r3, [pc, #12]	; (10f44 <__kernel_ram_size+0xf44>)
   10f36:	9301      	str	r3, [sp, #4]
   10f38:	9300      	str	r3, [sp, #0]
   10f3a:	4b03      	ldr	r3, [pc, #12]	; (10f48 <__kernel_ram_size+0xf48>)
   10f3c:	681c      	ldr	r4, [r3, #0]
   10f3e:	4b07      	ldr	r3, [pc, #28]	; (10f5c <__kernel_ram_size+0xf5c>)
   10f40:	f7fe bc1d 	b.w	f77e <isr+0x1f6>
   10f44:	000161ba 	.word	0x000161ba
   10f48:	20003a5c 	.word	0x20003a5c
   10f4c:	000179e1 	.word	0x000179e1
   10f50:	00017a29 	.word	0x00017a29
   10f54:	00019529 	.word	0x00019529
   10f58:	00019c3f 	.word	0x00019c3f
   10f5c:	0001953f 	.word	0x0001953f

00010f60 <radio_init>:
{
   10f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   10f64:	4e3d      	ldr	r6, [pc, #244]	; (1105c <radio_init+0xfc>)
{
   10f66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10f68:	f89d c01c 	ldrb.w	ip, [sp, #28]
   10f6c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   10f70:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   10f74:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   10f78:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   10f7a:	f44f 70aa 	mov.w	r0, #340	; 0x154
   10f7e:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   10f82:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   10f86:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   10f8a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   10f8c:	f10c 0401 	add.w	r4, ip, #1
   10f90:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   10f92:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   10f94:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   10f98:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   10f9c:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   10f9e:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10fa0:	bf98      	it	ls
   10fa2:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   10fa6:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   10faa:	bf88      	it	hi
   10fac:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   10fb0:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   10fb4:	bf8c      	ite	hi
   10fb6:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10fba:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   10fbe:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   10fc2:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   10fc6:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   10fca:	bf8c      	ite	hi
   10fcc:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10fd0:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   10fd2:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   10fd6:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   10fda:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   10fde:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10fe2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   10fe6:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10fea:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   10fee:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10ff2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10ff4:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   10ff6:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10ffa:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10ffc:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   11000:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   11004:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   11008:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1100a:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   1100e:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   11012:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   11016:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   1101a:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1101e:	340a      	adds	r4, #10
   11020:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   11024:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   11026:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   11028:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1102c:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   11030:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   11032:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   11036:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1103a:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   1103e:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   11042:	d003      	beq.n	1104c <radio_init+0xec>
		return (retcode + mem_size);
   11044:	442c      	add	r4, r5
}
   11046:	4620      	mov	r0, r4
   11048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   1104c:	2301      	movs	r3, #1
   1104e:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   11052:	f7f9 fd3b 	bl	aacc <common_init>
	radio_setup();
   11056:	f002 f93d 	bl	132d4 <radio_setup>
	return retcode;
   1105a:	e7f4      	b.n	11046 <radio_init+0xe6>
   1105c:	200008c0 	.word	0x200008c0

00011060 <ll_reset>:
{
   11060:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   11062:	2103      	movs	r1, #3
   11064:	2005      	movs	r0, #5
   11066:	f7f9 fe1f 	bl	aca8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1106a:	2104      	movs	r1, #4
   1106c:	2006      	movs	r0, #6
   1106e:	f7f9 fe1b 	bl	aca8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   11072:	4c22      	ldr	r4, [pc, #136]	; (110fc <ll_reset+0x9c>)
   11074:	2500      	movs	r5, #0
   11076:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1107a:	b2ab      	uxth	r3, r5
   1107c:	429a      	cmp	r2, r3
   1107e:	f105 0501 	add.w	r5, r5, #1
   11082:	d834      	bhi.n	110ee <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   11084:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11088:	f36f 13c7 	bfc	r3, #7, #1
   1108c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   11090:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   11094:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   11096:	f360 0300 	bfi	r3, r0, #0, #1
   1109a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1109e:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   110a0:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   110a4:	fbb3 f3f2 	udiv	r3, r3, r2
   110a8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   110ac:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   110b0:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   110b4:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   110b6:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   110ba:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   110be:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   110c2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   110c6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   110ca:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   110ce:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   110d2:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   110d6:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   110da:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   110de:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   110e2:	f001 ff75 	bl	12fd0 <ll_filter_reset>
}
   110e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   110ea:	f7f9 bcef 	b.w	aacc <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   110ee:	1da8      	adds	r0, r5, #6
   110f0:	21ff      	movs	r1, #255	; 0xff
   110f2:	b2c0      	uxtb	r0, r0
   110f4:	f7f9 fdd8 	bl	aca8 <role_disable>
   110f8:	e7bd      	b.n	11076 <ll_reset+0x16>
   110fa:	bf00      	nop
   110fc:	200008c0 	.word	0x200008c0

00011100 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   11100:	4b02      	ldr	r3, [pc, #8]	; (1110c <ll_adv_is_enabled+0xc>)
   11102:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   11106:	09c0      	lsrs	r0, r0, #7
   11108:	4770      	bx	lr
   1110a:	bf00      	nop
   1110c:	200008c0 	.word	0x200008c0

00011110 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   11110:	4b04      	ldr	r3, [pc, #16]	; (11124 <radio_adv_filter_pol_get+0x14>)
   11112:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   11116:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   11118:	bfba      	itte	lt
   1111a:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   1111e:	0980      	lsrlt	r0, r0, #6
   11120:	2000      	movge	r0, #0
}
   11122:	4770      	bx	lr
   11124:	200008c0 	.word	0x200008c0

00011128 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   11128:	4a09      	ldr	r2, [pc, #36]	; (11150 <ll_scan_is_enabled+0x28>)
   1112a:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   1112e:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   11132:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   11136:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1113a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1113c:	f003 0301 	and.w	r3, r3, #1
   11140:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   11144:	bf14      	ite	ne
   11146:	2004      	movne	r0, #4
   11148:	2000      	moveq	r0, #0
}
   1114a:	4318      	orrs	r0, r3
   1114c:	4770      	bx	lr
   1114e:	bf00      	nop
   11150:	200008c0 	.word	0x200008c0

00011154 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   11154:	4b05      	ldr	r3, [pc, #20]	; (1116c <radio_scan_filter_pol_get+0x18>)
   11156:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1115a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   1115e:	bf1c      	itt	ne
   11160:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   11164:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   11168:	4770      	bx	lr
   1116a:	bf00      	nop
   1116c:	200008c0 	.word	0x200008c0

00011170 <radio_connect_enable>:
{
   11170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   11174:	f8df 8388 	ldr.w	r8, [pc, #904]	; 11500 <radio_connect_enable+0x390>
{
   11178:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   1117a:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   1117e:	9303      	str	r3, [sp, #12]
   11180:	4683      	mov	fp, r0
   11182:	468a      	mov	sl, r1
   11184:	4691      	mov	r9, r2
   11186:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   11188:	2e00      	cmp	r6, #0
   1118a:	f040 819d 	bne.w	114c8 <radio_connect_enable+0x358>
	link = mem_acquire(&_radio.link_rx_free);
   1118e:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   11192:	f7f6 fc44 	bl	7a1e <mem_acquire>
	if (!link) {
   11196:	4607      	mov	r7, r0
   11198:	b150      	cbz	r0, 111b0 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   1119a:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   1119e:	f7f6 fc3e 	bl	7a1e <mem_acquire>
	if (!conn) {
   111a2:	4604      	mov	r4, r0
   111a4:	b930      	cbnz	r0, 111b4 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   111a6:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   111aa:	4638      	mov	r0, r7
   111ac:	f7f6 fc51 	bl	7a52 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   111b0:	2007      	movs	r0, #7
   111b2:	e15c      	b.n	1146e <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   111b4:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   111b8:	f36b 1386 	bfi	r3, fp, #6, #1
   111bc:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   111c0:	2206      	movs	r2, #6
   111c2:	4651      	mov	r1, sl
   111c4:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   111c8:	f7f0 fe52 	bl	1e70 <memcpy>
	_radio.scanner.conn_latency = latency;
   111cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   111d0:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   111d4:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   111d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   111da:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   111de:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   111e0:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   111e4:	f002 f932 	bl	1344c <radio_tx_ready_delay_get>
   111e8:	49bb      	ldr	r1, [pc, #748]	; (114d8 <radio_connect_enable+0x368>)
   111ea:	f200 4052 	addw	r0, r0, #1106	; 0x452
   111ee:	a3b8      	add	r3, pc, #736	; (adr r3, 114d0 <radio_connect_enable+0x360>)
   111f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   111f4:	fba0 0101 	umull	r0, r1, r0, r1
   111f8:	f7ef f80c 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   111fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   11200:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11204:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   11208:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1120a:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 11504 <radio_connect_enable+0x394>
	conn->llcp_features = RADIO_BLE_FEAT;
   1120e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   11212:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   11216:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   11218:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   1121c:	2104      	movs	r1, #4
   1121e:	a805      	add	r0, sp, #20
   11220:	f7f7 fc36 	bl	8a90 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   11224:	f8dd c014 	ldr.w	ip, [sp, #20]
   11228:	2000      	movs	r0, #0
   1122a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   1122e:	231f      	movs	r3, #31
	transitions = 0;
   11230:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   11232:	2101      	movs	r1, #1
	while (bit_idx--) {
   11234:	3b01      	subs	r3, #1
   11236:	b2db      	uxtb	r3, r3
   11238:	2bff      	cmp	r3, #255	; 0xff
   1123a:	d103      	bne.n	11244 <radio_connect_enable+0xd4>
   1123c:	b3d0      	cbz	r0, 112b4 <radio_connect_enable+0x144>
   1123e:	f8cd c014 	str.w	ip, [sp, #20]
   11242:	e037      	b.n	112b4 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   11244:	fa2c fe03 	lsr.w	lr, ip, r3
   11248:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   1124c:	45d6      	cmp	lr, sl
   1124e:	d11a      	bne.n	11286 <radio_connect_enable+0x116>
			consecutive_cnt++;
   11250:	3101      	adds	r1, #1
   11252:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   11254:	2906      	cmp	r1, #6
   11256:	d807      	bhi.n	11268 <radio_connect_enable+0xf8>
   11258:	2b1b      	cmp	r3, #27
   1125a:	d81a      	bhi.n	11292 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   1125c:	b122      	cbz	r2, 11268 <radio_connect_enable+0xf8>
   1125e:	2b1b      	cmp	r3, #27
   11260:	d017      	beq.n	11292 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   11262:	2a01      	cmp	r2, #1
   11264:	d815      	bhi.n	11292 <radio_connect_enable+0x122>
   11266:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   11268:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   1126c:	f1be 0f00 	cmp.w	lr, #0
   11270:	f000 8100 	beq.w	11474 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   11274:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   11278:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   1127c:	3201      	adds	r2, #1
   1127e:	2001      	movs	r0, #1
   11280:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   11282:	4601      	mov	r1, r0
   11284:	e005      	b.n	11292 <radio_connect_enable+0x122>
			transitions++;
   11286:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   11288:	2b1b      	cmp	r3, #27
			transitions++;
   1128a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1128c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   11290:	d9e5      	bls.n	1125e <radio_connect_enable+0xee>
		if (transitions > 24) {
   11292:	2a18      	cmp	r2, #24
   11294:	f240 80f6 	bls.w	11484 <radio_connect_enable+0x314>
   11298:	b108      	cbz	r0, 1129e <radio_connect_enable+0x12e>
   1129a:	f8cd c014 	str.w	ip, [sp, #20]
   1129e:	3301      	adds	r3, #1
   112a0:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   112a2:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   112a6:	f1be 0f00 	cmp.w	lr, #0
   112aa:	f000 80e8 	beq.w	1147e <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   112ae:	425b      	negs	r3, r3
   112b0:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   112b2:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   112b4:	9b05      	ldr	r3, [sp, #20]
   112b6:	a806      	add	r0, sp, #24
   112b8:	ea83 0308 	eor.w	r3, r3, r8
   112bc:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   112c0:	2104      	movs	r1, #4
   112c2:	f7f6 fd57 	bl	7d74 <util_ones_count_get>
   112c6:	2801      	cmp	r0, #1
   112c8:	f240 80e3 	bls.w	11492 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   112cc:	9b05      	ldr	r3, [sp, #20]
   112ce:	b29a      	uxth	r2, r3
   112d0:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   112d4:	f000 80d8 	beq.w	11488 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   112d8:	2204      	movs	r2, #4
   112da:	a905      	add	r1, sp, #20
   112dc:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   112e0:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   112e2:	f7f0 fdc5 	bl	1e70 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   112e6:	2103      	movs	r1, #3
   112e8:	f104 0014 	add.w	r0, r4, #20
   112ec:	f7f7 fbd0 	bl	8a90 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   112f0:	2205      	movs	r2, #5
   112f2:	497a      	ldr	r1, [pc, #488]	; (114dc <radio_connect_enable+0x36c>)
   112f4:	f104 0017 	add.w	r0, r4, #23
   112f8:	f7f0 fdba 	bl	1e70 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   112fc:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   11300:	7f63      	ldrb	r3, [r4, #29]
   11302:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   11306:	f36f 1386 	bfc	r3, #6, #1
   1130a:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   1130c:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   1130e:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   11310:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   11312:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   11314:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   11318:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   1131c:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   11320:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   11322:	211b      	movs	r1, #27
   11324:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   11326:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   11328:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   1132c:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1132e:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   11332:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   11336:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   11338:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   1133a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   1133e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   11340:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   11344:	2601      	movs	r6, #1
   11346:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   1134a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   1134e:	f363 11c7 	bfi	r1, r3, #7, #1
   11352:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   11356:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   1135a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   1135e:	f366 0102 	bfi	r1, r6, #0, #3
   11362:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   11366:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   1136a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   1136c:	b2c9      	uxtb	r1, r1
   1136e:	f36c 01c5 	bfi	r1, ip, #3, #3
   11372:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   11376:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   1137a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   1137c:	f366 0102 	bfi	r1, r6, #0, #3
   11380:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   11384:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   11386:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   11388:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   1138c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   1138e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   11390:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   11394:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   11398:	f363 0100 	bfi	r1, r3, #0, #1
   1139c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   113a0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   113a4:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   113a8:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   113ac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   113b0:	1e56      	subs	r6, r2, #1
   113b2:	f242 7e10 	movw	lr, #10000	; 0x2710
   113b6:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   113ba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   113be:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   113c2:	4b47      	ldr	r3, [pc, #284]	; (114e0 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   113c4:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   113c6:	4947      	ldr	r1, [pc, #284]	; (114e4 <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   113c8:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   113ca:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   113cc:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   113d0:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   113d4:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   113d6:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   113da:	1d81      	adds	r1, r0, #6
   113dc:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   113de:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   113e2:	dc6b      	bgt.n	114bc <radio_connect_enable+0x34c>
	conn->llcp_version.tx = 0;
   113e4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   113e8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   113ec:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   113ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   113f2:	f360 0341 	bfi	r3, r0, #1, #1
   113f6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   113fa:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   113fe:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   11402:	f360 1304 	bfi	r3, r0, #4, #1
   11406:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   1140a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   1140e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   11412:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11416:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   1141a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   1141e:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   11422:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   11426:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   1142a:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1142e:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   11432:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   11436:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   1143a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   1143e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   11442:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   11446:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   1144a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   1144e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   11452:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   11456:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1145a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   1145e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   11462:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   11466:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   1146a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   1146e:	b007      	add	sp, #28
   11470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   11474:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   11478:	f04f 0e01 	mov.w	lr, #1
   1147c:	e6fe      	b.n	1127c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1147e:	3b01      	subs	r3, #1
   11480:	4313      	orrs	r3, r2
   11482:	e716      	b.n	112b2 <radio_connect_enable+0x142>
		if (transitions > 24) {
   11484:	46f2      	mov	sl, lr
   11486:	e6d5      	b.n	11234 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   11488:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1148a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   1148e:	f47f af23 	bne.w	112d8 <radio_connect_enable+0x168>
   11492:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   11494:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   11498:	f47f aec0 	bne.w	1121c <radio_connect_enable+0xac>
   1149c:	4b12      	ldr	r3, [pc, #72]	; (114e8 <radio_connect_enable+0x378>)
   1149e:	9301      	str	r3, [sp, #4]
   114a0:	9300      	str	r3, [sp, #0]
   114a2:	4b12      	ldr	r3, [pc, #72]	; (114ec <radio_connect_enable+0x37c>)
   114a4:	4a12      	ldr	r2, [pc, #72]	; (114f0 <radio_connect_enable+0x380>)
   114a6:	681c      	ldr	r4, [r3, #0]
   114a8:	4912      	ldr	r1, [pc, #72]	; (114f4 <radio_connect_enable+0x384>)
   114aa:	4b13      	ldr	r3, [pc, #76]	; (114f8 <radio_connect_enable+0x388>)
   114ac:	4813      	ldr	r0, [pc, #76]	; (114fc <radio_connect_enable+0x38c>)
   114ae:	47a0      	blx	r4
   114b0:	4040      	eors	r0, r0
   114b2:	f380 8811 	msr	BASEPRI, r0
   114b6:	f04f 0004 	mov.w	r0, #4
   114ba:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   114bc:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   114c0:	33fa      	adds	r3, #250	; 0xfa
   114c2:	441a      	add	r2, r3
   114c4:	b292      	uxth	r2, r2
   114c6:	e78d      	b.n	113e4 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   114c8:	200c      	movs	r0, #12
   114ca:	e7d0      	b.n	1146e <radio_connect_enable+0x2fe>
   114cc:	f3af 8000 	nop.w
   114d0:	1afd498d 	.word	0x1afd498d
   114d4:	00000007 	.word	0x00000007
   114d8:	3b9aca00 	.word	0x3b9aca00
   114dc:	200009da 	.word	0x200009da
   114e0:	01c9c37f 	.word	0x01c9c37f
   114e4:	026259ff 	.word	0x026259ff
   114e8:	000161ba 	.word	0x000161ba
   114ec:	20003a5c 	.word	0x20003a5c
   114f0:	000179e1 	.word	0x000179e1
   114f4:	00017a29 	.word	0x00017a29
   114f8:	000196c9 	.word	0x000196c9
   114fc:	0001a122 	.word	0x0001a122
   11500:	200008c0 	.word	0x200008c0
   11504:	8e89bed6 	.word	0x8e89bed6

00011508 <ll_conn_update>:
{
   11508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1150c:	460c      	mov	r4, r1
   1150e:	4690      	mov	r8, r2
   11510:	461d      	mov	r5, r3
   11512:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   11516:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   1151a:	f7f9 fbaf 	bl	ac7c <connection_get>
	if (!conn) {
   1151e:	b330      	cbz	r0, 1156e <ll_conn_update+0x66>
	if (!cmd) {
   11520:	2c00      	cmp	r4, #0
   11522:	d14a      	bne.n	115ba <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   11524:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11528:	06d9      	lsls	r1, r3, #27
   1152a:	d407      	bmi.n	1153c <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   1152c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   11530:	069a      	lsls	r2, r3, #26
   11532:	d541      	bpl.n	115b8 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   11534:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   11538:	079b      	lsls	r3, r3, #30
   1153a:	d43d      	bmi.n	115b8 <ll_conn_update+0xb0>
		} else if (conn->role) {
   1153c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11540:	2b00      	cmp	r3, #0
   11542:	da17      	bge.n	11574 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11544:	201a      	movs	r0, #26
   11546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   1154a:	428b      	cmp	r3, r1
   1154c:	d00f      	beq.n	1156e <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   1154e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   11552:	f003 0207 	and.w	r2, r3, #7
   11556:	2a03      	cmp	r2, #3
   11558:	d109      	bne.n	1156e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1155a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1155e:	b2db      	uxtb	r3, r3
   11560:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   11564:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   11568:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   1156c:	e021      	b.n	115b2 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1156e:	200c      	movs	r0, #12
   11570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   11574:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   11578:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1157c:	429a      	cmp	r2, r3
   1157e:	d1f6      	bne.n	1156e <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11580:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   11584:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   11588:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   1158a:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1158c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   11590:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   11594:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   11596:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1159a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   1159e:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   115a2:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   115a6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   115aa:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   115ae:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   115b2:	2000      	movs	r0, #0
   115b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   115b8:	2401      	movs	r4, #1
		cmd--;
   115ba:	3c01      	subs	r4, #1
		if (cmd) {
   115bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   115c0:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   115c4:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   115c8:	d1bf      	bne.n	1154a <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   115ca:	4299      	cmp	r1, r3
   115cc:	d1cf      	bne.n	1156e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   115ce:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   115d2:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   115d6:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   115da:	b2db      	uxtb	r3, r3
   115dc:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   115e0:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   115e2:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   115e6:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   115ea:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   115ee:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   115f2:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   115f6:	e7dc      	b.n	115b2 <ll_conn_update+0xaa>

000115f8 <ll_chm_update>:
{
   115f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   115fc:	4c1e      	ldr	r4, [pc, #120]	; (11678 <ll_chm_update+0x80>)
   115fe:	4601      	mov	r1, r0
   11600:	2205      	movs	r2, #5
{
   11602:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   11604:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11608:	f7f0 fc32 	bl	1e70 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   1160c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11610:	2105      	movs	r1, #5
   11612:	f7f6 fbaf 	bl	7d74 <util_ones_count_get>
	_radio.data_chan_count =
   11616:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   1161a:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   1161e:	3c01      	subs	r4, #1
   11620:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   11622:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   11624:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   11628:	2cff      	cmp	r4, #255	; 0xff
   1162a:	d102      	bne.n	11632 <ll_chm_update+0x3a>
	return 0;
   1162c:	2000      	movs	r0, #0
   1162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   11632:	4620      	mov	r0, r4
   11634:	f7f9 fb22 	bl	ac7c <connection_get>
		if (!conn || conn->role) {
   11638:	4606      	mov	r6, r0
   1163a:	b1b8      	cbz	r0, 1166c <ll_chm_update+0x74>
   1163c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11640:	2b00      	cmp	r3, #0
   11642:	db13      	blt.n	1166c <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   11644:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11648:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1164c:	429a      	cmp	r2, r3
   1164e:	d110      	bne.n	11672 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   11650:	2205      	movs	r2, #5
   11652:	4629      	mov	r1, r5
   11654:	3079      	adds	r0, #121	; 0x79
   11656:	f7f0 fc0b 	bl	1e70 <memcpy>
		conn->llcp_req++;
   1165a:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   1165e:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   11662:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   11664:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   11668:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   1166c:	3c01      	subs	r4, #1
   1166e:	b2e4      	uxtb	r4, r4
   11670:	e7da      	b.n	11628 <ll_chm_update+0x30>
			return 1;
   11672:	2001      	movs	r0, #1
}
   11674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11678:	200008c0 	.word	0x200008c0

0001167c <ll_chm_get>:
{
   1167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1167e:	460d      	mov	r5, r1
	conn = connection_get(handle);
   11680:	f7f9 fafc 	bl	ac7c <connection_get>
	if (!conn) {
   11684:	4604      	mov	r4, r0
   11686:	b160      	cbz	r0, 116a2 <ll_chm_get+0x26>
		conn->chm_update = 0;
   11688:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1168a:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   1168e:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   11690:	2205      	movs	r2, #5
   11692:	4631      	mov	r1, r6
   11694:	4628      	mov	r0, r5
   11696:	f7f0 fbeb 	bl	1e70 <memcpy>
	} while (conn->chm_update);
   1169a:	7f20      	ldrb	r0, [r4, #28]
   1169c:	2800      	cmp	r0, #0
   1169e:	d1f6      	bne.n	1168e <ll_chm_get+0x12>
   116a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   116a2:	2001      	movs	r0, #1
}
   116a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000116a6 <ll_feature_req_send>:
{
   116a6:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   116a8:	f7f9 fae8 	bl	ac7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   116ac:	b168      	cbz	r0, 116ca <ll_feature_req_send+0x24>
   116ae:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   116b2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   116b6:	4293      	cmp	r3, r2
   116b8:	d107      	bne.n	116ca <ll_feature_req_send+0x24>
	conn->llcp_req++;
   116ba:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   116bc:	2204      	movs	r2, #4
	conn->llcp_req++;
   116be:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   116c2:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   116c6:	2000      	movs	r0, #0
   116c8:	bd08      	pop	{r3, pc}
		return 1;
   116ca:	2001      	movs	r0, #1
}
   116cc:	bd08      	pop	{r3, pc}

000116ce <ll_version_ind_send>:
{
   116ce:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   116d0:	f7f9 fad4 	bl	ac7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   116d4:	b168      	cbz	r0, 116f2 <ll_version_ind_send+0x24>
   116d6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   116da:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   116de:	4293      	cmp	r3, r2
   116e0:	d107      	bne.n	116f2 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   116e2:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   116e4:	2205      	movs	r2, #5
	conn->llcp_req++;
   116e6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   116ea:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   116ee:	2000      	movs	r0, #0
   116f0:	bd08      	pop	{r3, pc}
		return 1;
   116f2:	2001      	movs	r0, #1
}
   116f4:	bd08      	pop	{r3, pc}

000116f6 <ll_terminate_ind_send>:
{
   116f6:	b510      	push	{r4, lr}
   116f8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   116fa:	f7f9 fabf 	bl	ac7c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   116fe:	b160      	cbz	r0, 1171a <ll_terminate_ind_send+0x24>
   11700:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   11704:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   11708:	4293      	cmp	r3, r2
   1170a:	d106      	bne.n	1171a <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   1170c:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   1170e:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   11712:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   11716:	2000      	movs	r0, #0
   11718:	bd10      	pop	{r4, pc}
		return 1;
   1171a:	2001      	movs	r0, #1
}
   1171c:	bd10      	pop	{r4, pc}

0001171e <ll_tx_pwr_lvl_get>:
{
   1171e:	b510      	push	{r4, lr}
   11720:	4614      	mov	r4, r2
	conn = connection_get(handle);
   11722:	f7f9 faab 	bl	ac7c <connection_get>
	if (!conn) {
   11726:	b110      	cbz	r0, 1172e <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   11728:	2000      	movs	r0, #0
   1172a:	7020      	strb	r0, [r4, #0]
	return 0;
   1172c:	bd10      	pop	{r4, pc}
		return 1;
   1172e:	2001      	movs	r0, #1
}
   11730:	bd10      	pop	{r4, pc}

00011732 <ll_apto_get>:
{
   11732:	b510      	push	{r4, lr}
   11734:	460c      	mov	r4, r1
	conn = connection_get(handle);
   11736:	f7f9 faa1 	bl	ac7c <connection_get>
	if (!conn) {
   1173a:	b160      	cbz	r0, 11756 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1173c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1173e:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   11742:	435a      	muls	r2, r3
   11744:	237d      	movs	r3, #125	; 0x7d
   11746:	4353      	muls	r3, r2
	return 0;
   11748:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1174a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1174e:	fb93 f3f2 	sdiv	r3, r3, r2
   11752:	8023      	strh	r3, [r4, #0]
	return 0;
   11754:	bd10      	pop	{r4, pc}
		return 1;
   11756:	2001      	movs	r0, #1
}
   11758:	bd10      	pop	{r4, pc}

0001175a <ll_apto_set>:
{
   1175a:	b510      	push	{r4, lr}
   1175c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1175e:	f7f9 fa8d 	bl	ac7c <connection_get>
	if (!conn) {
   11762:	b170      	cbz	r0, 11782 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   11764:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   11766:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1176a:	4353      	muls	r3, r2
   1176c:	f242 7110 	movw	r1, #10000	; 0x2710
   11770:	fb01 3404 	mla	r4, r1, r4, r3
   11774:	3c01      	subs	r4, #1
   11776:	fb94 f4f3 	sdiv	r4, r4, r3
   1177a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   1177e:	2000      	movs	r0, #0
   11780:	bd10      	pop	{r4, pc}
		return 1;
   11782:	2001      	movs	r0, #1
}
   11784:	bd10      	pop	{r4, pc}

00011786 <ll_length_req_send>:
{
   11786:	b570      	push	{r4, r5, r6, lr}
   11788:	460e      	mov	r6, r1
   1178a:	4615      	mov	r5, r2
	conn = connection_get(handle);
   1178c:	f7f9 fa76 	bl	ac7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11790:	b1d0      	cbz	r0, 117c8 <ll_length_req_send+0x42>
   11792:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11796:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1179a:	429a      	cmp	r2, r3
   1179c:	d114      	bne.n	117c8 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1179e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   117a2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   117a6:	4293      	cmp	r3, r2
   117a8:	d10e      	bne.n	117c8 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   117aa:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   117ae:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   117b2:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   117b4:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   117b8:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   117bc:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   117c0:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   117c4:	2000      	movs	r0, #0
   117c6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   117c8:	2001      	movs	r0, #1
}
   117ca:	bd70      	pop	{r4, r5, r6, pc}

000117cc <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   117cc:	4b03      	ldr	r3, [pc, #12]	; (117dc <ll_length_default_get+0x10>)
   117ce:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   117d2:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   117d4:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   117d8:	800b      	strh	r3, [r1, #0]
   117da:	4770      	bx	lr
   117dc:	200008c0 	.word	0x200008c0

000117e0 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   117e0:	4b03      	ldr	r3, [pc, #12]	; (117f0 <ll_length_default_set+0x10>)
   117e2:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   117e6:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   117ea:	2000      	movs	r0, #0
   117ec:	4770      	bx	lr
   117ee:	bf00      	nop
   117f0:	200008c0 	.word	0x200008c0

000117f4 <ll_length_max_get>:
{
   117f4:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   117f6:	241b      	movs	r4, #27
   117f8:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   117fa:	f44f 70a4 	mov.w	r0, #328	; 0x148
   117fe:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   11800:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   11802:	8018      	strh	r0, [r3, #0]
   11804:	bd10      	pop	{r4, pc}

00011806 <ll_phy_get>:
{
   11806:	b538      	push	{r3, r4, r5, lr}
   11808:	460d      	mov	r5, r1
   1180a:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1180c:	f7f9 fa36 	bl	ac7c <connection_get>
	if (!conn) {
   11810:	b158      	cbz	r0, 1182a <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   11812:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   11816:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1181a:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   1181c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   11820:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11824:	7023      	strb	r3, [r4, #0]
	return 0;
   11826:	2000      	movs	r0, #0
   11828:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1182a:	2001      	movs	r0, #1
}
   1182c:	bd38      	pop	{r3, r4, r5, pc}
	...

00011830 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   11830:	4b03      	ldr	r3, [pc, #12]	; (11840 <ll_phy_default_set+0x10>)
   11832:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   11836:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   1183a:	2000      	movs	r0, #0
   1183c:	4770      	bx	lr
   1183e:	bf00      	nop
   11840:	200008c0 	.word	0x200008c0

00011844 <ll_phy_req_send>:
{
   11844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11848:	4689      	mov	r9, r1
   1184a:	4690      	mov	r8, r2
   1184c:	461f      	mov	r7, r3
	conn = connection_get(handle);
   1184e:	f7f9 fa15 	bl	ac7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11852:	b320      	cbz	r0, 1189e <ll_phy_req_send+0x5a>
   11854:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11858:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1185c:	429a      	cmp	r2, r3
   1185e:	d11e      	bne.n	1189e <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   11860:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   11864:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   11868:	429d      	cmp	r5, r3
   1186a:	d118      	bne.n	1189e <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1186c:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   11870:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   11874:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   11878:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   1187c:	f046 0102 	orr.w	r1, r6, #2
   11880:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   11884:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   11886:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   11888:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   1188c:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   11890:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   11894:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   11898:	2000      	movs	r0, #0
   1189a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   1189e:	2001      	movs	r0, #1
}
   118a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000118a4 <ll_rx_get>:
{
   118a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   118a8:	4605      	mov	r5, r0
   118aa:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   118ac:	4918      	ldr	r1, [pc, #96]	; (11910 <ll_rx_get+0x6c>)
   118ae:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   118b2:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   118b6:	4293      	cmp	r3, r2
   118b8:	460f      	mov	r7, r1
   118ba:	d01f      	beq.n	118fc <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   118bc:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   118c0:	f201 1177 	addw	r1, r1, #375	; 0x177
   118c4:	f898 2000 	ldrb.w	r2, [r8]
   118c8:	f7f9 f98e 	bl	abe8 <tx_cmplt_get>
		if (!cmplt) {
   118cc:	4604      	mov	r4, r0
   118ce:	b9e0      	cbnz	r0, 1190a <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   118d0:	ae02      	add	r6, sp, #8
   118d2:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   118d6:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   118da:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   118de:	4631      	mov	r1, r6
   118e0:	f10d 0006 	add.w	r0, sp, #6
   118e4:	f7f9 f980 	bl	abe8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   118e8:	b934      	cbnz	r4, 118f8 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   118ea:	b928      	cbnz	r0, 118f8 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   118ec:	f8c5 8000 	str.w	r8, [r5]
}
   118f0:	4620      	mov	r0, r4
   118f2:	b002      	add	sp, #8
   118f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   118f8:	4604      	mov	r4, r0
   118fa:	e7ee      	b.n	118da <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   118fc:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   11900:	f201 1177 	addw	r1, r1, #375	; 0x177
   11904:	f7f9 f970 	bl	abe8 <tx_cmplt_get>
   11908:	4604      	mov	r4, r0
		*node_rx = NULL;
   1190a:	2300      	movs	r3, #0
   1190c:	602b      	str	r3, [r5, #0]
   1190e:	e7ef      	b.n	118f0 <ll_rx_get+0x4c>
   11910:	200008c0 	.word	0x200008c0

00011914 <ll_rx_mem_release>:
{
   11914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   11918:	4c1c      	ldr	r4, [pc, #112]	; (1198c <ll_rx_mem_release+0x78>)
{
   1191a:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   1191c:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1191e:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   11922:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   11926:	b930      	cbnz	r0, 11936 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   11928:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   1192a:	20ff      	movs	r0, #255	; 0xff
}
   1192c:	b002      	add	sp, #8
   1192e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   11932:	f7f9 b87f 	b.w	aa34 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   11936:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   11938:	f8d0 8000 	ldr.w	r8, [r0]
   1193c:	2a0c      	cmp	r2, #12
   1193e:	d807      	bhi.n	11950 <ll_rx_mem_release+0x3c>
   11940:	2301      	movs	r3, #1
   11942:	4093      	lsls	r3, r2
   11944:	f641 727e 	movw	r2, #8062	; 0x1f7e
   11948:	4213      	tst	r3, r2
   1194a:	d111      	bne.n	11970 <ll_rx_mem_release+0x5c>
   1194c:	061b      	lsls	r3, r3, #24
   1194e:	d414      	bmi.n	1197a <ll_rx_mem_release+0x66>
			LL_ASSERT(0);
   11950:	4b0f      	ldr	r3, [pc, #60]	; (11990 <ll_rx_mem_release+0x7c>)
   11952:	9301      	str	r3, [sp, #4]
   11954:	9300      	str	r3, [sp, #0]
   11956:	4b0f      	ldr	r3, [pc, #60]	; (11994 <ll_rx_mem_release+0x80>)
   11958:	4a0f      	ldr	r2, [pc, #60]	; (11998 <ll_rx_mem_release+0x84>)
   1195a:	681c      	ldr	r4, [r3, #0]
   1195c:	490f      	ldr	r1, [pc, #60]	; (1199c <ll_rx_mem_release+0x88>)
   1195e:	4b10      	ldr	r3, [pc, #64]	; (119a0 <ll_rx_mem_release+0x8c>)
   11960:	4810      	ldr	r0, [pc, #64]	; (119a4 <ll_rx_mem_release+0x90>)
   11962:	47a0      	blx	r4
   11964:	4040      	eors	r0, r0
   11966:	f380 8811 	msr	BASEPRI, r0
   1196a:	f04f 0004 	mov.w	r0, #4
   1196e:	df02      	svc	2
			mem_release(_node_rx_free,
   11970:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   11972:	f7f6 f86e 	bl	7a52 <mem_release>
{
   11976:	4640      	mov	r0, r8
   11978:	e7d5      	b.n	11926 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1197a:	88c2      	ldrh	r2, [r0, #6]
   1197c:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   11980:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11984:	f7f6 f880 	bl	7a88 <mem_get>
			mem_release(conn, &_radio.conn_free);
   11988:	4639      	mov	r1, r7
   1198a:	e7f2      	b.n	11972 <ll_rx_mem_release+0x5e>
   1198c:	200009f0 	.word	0x200009f0
   11990:	000161ba 	.word	0x000161ba
   11994:	20003a5c 	.word	0x20003a5c
   11998:	000179e1 	.word	0x000179e1
   1199c:	00017a29 	.word	0x00017a29
   119a0:	0001986d 	.word	0x0001986d
   119a4:	00017955 	.word	0x00017955

000119a8 <do_radio_rx_fc_set>:
	if (req == ack) {
   119a8:	4291      	cmp	r1, r2
{
   119aa:	b510      	push	{r4, lr}
   119ac:	4b14      	ldr	r3, [pc, #80]	; (11a00 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   119ae:	d119      	bne.n	119e4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   119b0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   119b4:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   119b8:	4294      	cmp	r4, r2
   119ba:	d111      	bne.n	119e0 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   119bc:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   119be:	bf14      	ite	ne
   119c0:	460a      	movne	r2, r1
   119c2:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   119c4:	3a01      	subs	r2, #1
   119c6:	b2d2      	uxtb	r2, r2
   119c8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   119cc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   119d0:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   119d4:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   119d8:	4291      	cmp	r1, r2
   119da:	d00f      	beq.n	119fc <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   119dc:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   119e0:	2001      	movs	r0, #1
   119e2:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   119e4:	b929      	cbnz	r1, 119f2 <do_radio_rx_fc_set+0x4a>
   119e6:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   119ea:	1a18      	subs	r0, r3, r0
   119ec:	bf18      	it	ne
   119ee:	2001      	movne	r0, #1
   119f0:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   119f2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   119f6:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   119fa:	e7f6      	b.n	119ea <do_radio_rx_fc_set+0x42>
	return 0;
   119fc:	2000      	movs	r0, #0
}
   119fe:	bd10      	pop	{r4, pc}
   11a00:	200008c0 	.word	0x200008c0

00011a04 <radio_rx_fc_set>:
{
   11a04:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   11a06:	4b14      	ldr	r3, [pc, #80]	; (11a58 <radio_rx_fc_set+0x54>)
   11a08:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   11a0c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   11a0e:	b302      	cbz	r2, 11a52 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   11a10:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   11a14:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   11a16:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   11a1a:	b135      	cbz	r5, 11a2a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   11a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a20:	4298      	cmp	r0, r3
   11a22:	d016      	beq.n	11a52 <radio_rx_fc_set+0x4e>
}
   11a24:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   11a26:	f7ff bfbf 	b.w	119a8 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   11a2a:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   11a2e:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   11a32:	42a0      	cmp	r0, r4
   11a34:	d10d      	bne.n	11a52 <radio_rx_fc_set+0x4e>
   11a36:	4291      	cmp	r1, r2
   11a38:	d00b      	beq.n	11a52 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11a3a:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   11a3e:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11a42:	42a0      	cmp	r0, r4
   11a44:	d005      	beq.n	11a52 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   11a46:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   11a4a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   11a4c:	bf08      	it	eq
   11a4e:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   11a52:	2000      	movs	r0, #0
   11a54:	bc30      	pop	{r4, r5}
   11a56:	4770      	bx	lr
   11a58:	200008c0 	.word	0x200008c0

00011a5c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   11a5c:	4801      	ldr	r0, [pc, #4]	; (11a64 <ll_tx_mem_acquire+0x8>)
   11a5e:	f7f5 bfde 	b.w	7a1e <mem_acquire>
   11a62:	bf00      	nop
   11a64:	20000a24 	.word	0x20000a24

00011a68 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   11a68:	4901      	ldr	r1, [pc, #4]	; (11a70 <ll_tx_mem_release+0x8>)
   11a6a:	f7f5 bff2 	b.w	7a52 <mem_release>
   11a6e:	bf00      	nop
   11a70:	20000a24 	.word	0x20000a24

00011a74 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   11a74:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   11a76:	4d34      	ldr	r5, [pc, #208]	; (11b48 <ll_tx_mem_enqueue+0xd4>)
   11a78:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   11a7c:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   11a80:	3401      	adds	r4, #1
{
   11a82:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   11a84:	b2e4      	uxtb	r4, r4
{
   11a86:	4607      	mov	r7, r0
   11a88:	460e      	mov	r6, r1
		last = 0;
   11a8a:	42a3      	cmp	r3, r4
   11a8c:	bf08      	it	eq
   11a8e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   11a90:	f7f9 f8f4 	bl	ac7c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   11a94:	2800      	cmp	r0, #0
   11a96:	d055      	beq.n	11b44 <ll_tx_mem_enqueue+0xd0>
   11a98:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   11a9c:	429c      	cmp	r4, r3
   11a9e:	d051      	beq.n	11b44 <ll_tx_mem_enqueue+0xd0>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   11aa0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   11aa4:	7972      	ldrb	r2, [r6, #5]
   11aa6:	3b07      	subs	r3, #7
   11aa8:	429a      	cmp	r2, r3
   11aaa:	d90f      	bls.n	11acc <ll_tx_mem_enqueue+0x58>
   11aac:	4b27      	ldr	r3, [pc, #156]	; (11b4c <ll_tx_mem_enqueue+0xd8>)
   11aae:	9301      	str	r3, [sp, #4]
   11ab0:	9300      	str	r3, [sp, #0]
   11ab2:	4b27      	ldr	r3, [pc, #156]	; (11b50 <ll_tx_mem_enqueue+0xdc>)
   11ab4:	4a27      	ldr	r2, [pc, #156]	; (11b54 <ll_tx_mem_enqueue+0xe0>)
   11ab6:	681c      	ldr	r4, [r3, #0]
   11ab8:	4927      	ldr	r1, [pc, #156]	; (11b58 <ll_tx_mem_enqueue+0xe4>)
   11aba:	4b28      	ldr	r3, [pc, #160]	; (11b5c <ll_tx_mem_enqueue+0xe8>)
   11abc:	4828      	ldr	r0, [pc, #160]	; (11b60 <ll_tx_mem_enqueue+0xec>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11abe:	47a0      	blx	r4
   11ac0:	4040      	eors	r0, r0
   11ac2:	f380 8811 	msr	BASEPRI, r0
   11ac6:	f04f 0004 	mov.w	r0, #4
   11aca:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   11acc:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   11ad0:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   11ad4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   11ad8:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   11adc:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   11ade:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   11ae2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11ae6:	2b00      	cmp	r3, #0
   11ae8:	db02      	blt.n	11af0 <ll_tx_mem_enqueue+0x7c>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   11aea:	2000      	movs	r0, #0
}
   11aec:	b009      	add	sp, #36	; 0x24
   11aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   11af0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   11af2:	2b00      	cmp	r3, #0
   11af4:	d0f9      	beq.n	11aea <ll_tx_mem_enqueue+0x76>
   11af6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   11afa:	f012 0302 	ands.w	r3, r2, #2
   11afe:	d1f4      	bne.n	11aea <ll_tx_mem_enqueue+0x76>
		conn->slave.latency_cancel = 1;
   11b00:	f042 0202 	orr.w	r2, r2, #2
   11b04:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   11b08:	f890 2020 	ldrb.w	r2, [r0, #32]
   11b0c:	4915      	ldr	r1, [pc, #84]	; (11b64 <ll_tx_mem_enqueue+0xf0>)
   11b0e:	9105      	str	r1, [sp, #20]
   11b10:	3207      	adds	r2, #7
   11b12:	2101      	movs	r1, #1
   11b14:	9006      	str	r0, [sp, #24]
   11b16:	9304      	str	r3, [sp, #16]
   11b18:	9103      	str	r1, [sp, #12]
   11b1a:	9302      	str	r3, [sp, #8]
   11b1c:	9301      	str	r3, [sp, #4]
   11b1e:	9300      	str	r3, [sp, #0]
   11b20:	4618      	mov	r0, r3
   11b22:	b2d2      	uxtb	r2, r2
   11b24:	2103      	movs	r1, #3
   11b26:	f7f6 fe55 	bl	87d4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11b2a:	f030 0302 	bics.w	r3, r0, #2
   11b2e:	d0dc      	beq.n	11aea <ll_tx_mem_enqueue+0x76>
   11b30:	4b06      	ldr	r3, [pc, #24]	; (11b4c <ll_tx_mem_enqueue+0xd8>)
   11b32:	9301      	str	r3, [sp, #4]
   11b34:	9300      	str	r3, [sp, #0]
   11b36:	4b06      	ldr	r3, [pc, #24]	; (11b50 <ll_tx_mem_enqueue+0xdc>)
   11b38:	4a06      	ldr	r2, [pc, #24]	; (11b54 <ll_tx_mem_enqueue+0xe0>)
   11b3a:	681c      	ldr	r4, [r3, #0]
   11b3c:	4906      	ldr	r1, [pc, #24]	; (11b58 <ll_tx_mem_enqueue+0xe4>)
   11b3e:	4b07      	ldr	r3, [pc, #28]	; (11b5c <ll_tx_mem_enqueue+0xe8>)
   11b40:	4809      	ldr	r0, [pc, #36]	; (11b68 <ll_tx_mem_enqueue+0xf4>)
   11b42:	e7bc      	b.n	11abe <ll_tx_mem_enqueue+0x4a>
		return 1;
   11b44:	2001      	movs	r0, #1
   11b46:	e7d1      	b.n	11aec <ll_tx_mem_enqueue+0x78>
   11b48:	200008c0 	.word	0x200008c0
   11b4c:	000161ba 	.word	0x000161ba
   11b50:	20003a5c 	.word	0x20003a5c
   11b54:	000179e1 	.word	0x000179e1
   11b58:	00017a29 	.word	0x00017a29
   11b5c:	0001989b 	.word	0x0001989b
   11b60:	00019e81 	.word	0x00019e81
   11b64:	0000ba61 	.word	0x0000ba61
   11b68:	000198d3 	.word	0x000198d3

00011b6c <ll_enc_req_send>:
{
   11b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b70:	4607      	mov	r7, r0
   11b72:	4688      	mov	r8, r1
   11b74:	4616      	mov	r6, r2
   11b76:	4699      	mov	r9, r3
	conn = connection_get(handle);
   11b78:	f7f9 f880 	bl	ac7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11b7c:	4605      	mov	r5, r0
   11b7e:	b910      	cbnz	r0, 11b86 <ll_enc_req_send+0x1a>
			return 1;
   11b80:	2001      	movs	r0, #1
   11b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11b86:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11b8a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11b8e:	429a      	cmp	r2, r3
   11b90:	d1f6      	bne.n	11b80 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   11b92:	f7ff ff63 	bl	11a5c <ll_tx_mem_acquire>
	if (node_tx) {
   11b96:	4604      	mov	r4, r0
   11b98:	2800      	cmp	r0, #0
   11b9a:	d0f1      	beq.n	11b80 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   11b9c:	2210      	movs	r2, #16
   11b9e:	4649      	mov	r1, r9
   11ba0:	f105 0084 	add.w	r0, r5, #132	; 0x84
   11ba4:	f7f0 f964 	bl	1e70 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   11ba8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11bac:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   11bb0:	d124      	bne.n	11bfc <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   11bb2:	7923      	ldrb	r3, [r4, #4]
   11bb4:	f043 0303 	orr.w	r3, r3, #3
   11bb8:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   11bba:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   11bbc:	2208      	movs	r2, #8
			pdu_data_tx->len =
   11bbe:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11bc0:	2303      	movs	r3, #3
   11bc2:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   11bc4:	4641      	mov	r1, r8
   11bc6:	18a0      	adds	r0, r4, r2
   11bc8:	f7f0 f952 	bl	1e70 <memcpy>
			enc_req->ediv[0] = ediv[0];
   11bcc:	7833      	ldrb	r3, [r6, #0]
   11bce:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   11bd0:	7873      	ldrb	r3, [r6, #1]
   11bd2:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   11bd4:	2108      	movs	r1, #8
   11bd6:	f104 0012 	add.w	r0, r4, #18
   11bda:	f7f6 ff59 	bl	8a90 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   11bde:	2104      	movs	r1, #4
   11be0:	f104 001a 	add.w	r0, r4, #26
   11be4:	f7f6 ff54 	bl	8a90 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   11be8:	4621      	mov	r1, r4
   11bea:	4638      	mov	r0, r7
   11bec:	f7ff ff42 	bl	11a74 <ll_tx_mem_enqueue>
   11bf0:	2601      	movs	r6, #1
   11bf2:	b1d0      	cbz	r0, 11c2a <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   11bf4:	4620      	mov	r0, r4
   11bf6:	f7ff ff37 	bl	11a68 <ll_tx_mem_release>
   11bfa:	e7c1      	b.n	11b80 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   11bfc:	2b30      	cmp	r3, #48	; 0x30
   11bfe:	d1f9      	bne.n	11bf4 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   11c00:	2208      	movs	r2, #8
   11c02:	4641      	mov	r1, r8
   11c04:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   11c08:	f7f0 f932 	bl	1e70 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   11c0c:	7833      	ldrb	r3, [r6, #0]
   11c0e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   11c12:	7873      	ldrb	r3, [r6, #1]
   11c14:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c18:	7923      	ldrb	r3, [r4, #4]
   11c1a:	f043 0303 	orr.w	r3, r3, #3
   11c1e:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   11c20:	2301      	movs	r3, #1
   11c22:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11c24:	230a      	movs	r3, #10
   11c26:	71e3      	strb	r3, [r4, #7]
   11c28:	e7de      	b.n	11be8 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   11c2a:	2303      	movs	r3, #3
   11c2c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   11c30:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   11c34:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   11c38:	3301      	adds	r3, #1
   11c3a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   11c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11c42:	0000      	movs	r0, r0
   11c44:	0000      	movs	r0, r0
	...

00011c48 <radio_scan_enable>:
{
   11c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   11c4c:	4c68      	ldr	r4, [pc, #416]	; (11df0 <radio_scan_enable+0x1a8>)
   11c4e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   11c52:	b08e      	sub	sp, #56	; 0x38
   11c54:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   11c56:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11c5a:	f04f 0302 	mov.w	r3, #2
{
   11c5e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11c60:	930b      	str	r3, [sp, #44]	; 0x2c
{
   11c62:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   11c64:	d003      	beq.n	11c6e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11c66:	200c      	movs	r0, #12
}
   11c68:	b00e      	add	sp, #56	; 0x38
   11c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   11c6e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   11c72:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   11c76:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   11c7a:	0840      	lsrs	r0, r0, #1
   11c7c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   11c80:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   11c84:	f360 0200 	bfi	r2, r0, #0, #1
   11c88:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   11c8c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   11c90:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   11c94:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11c98:	2206      	movs	r2, #6
   11c9a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   11c9e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11ca2:	4e54      	ldr	r6, [pc, #336]	; (11df4 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11ca4:	f7f0 f8e4 	bl	1e70 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11ca8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   11cac:	f04f 0991 	mov.w	r9, #145	; 0x91
   11cb0:	fba2 0106 	umull	r0, r1, r2, r6
   11cb4:	fb09 1102 	mla	r1, r9, r2, r1
   11cb8:	a34b      	add	r3, pc, #300	; (adr r3, 11de8 <radio_scan_enable+0x1a0>)
   11cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cbe:	f7ee faa9 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   11cc2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   11cc6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   11cca:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   11cce:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   11cd2:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11cd6:	b2ba      	uxth	r2, r7
   11cd8:	fba2 6706 	umull	r6, r7, r2, r6
   11cdc:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   11ce0:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   11ce4:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   11ce6:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   11cea:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   11cee:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   11cf2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11cf6:	a33c      	add	r3, pc, #240	; (adr r3, 11de8 <radio_scan_enable+0x1a0>)
   11cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cfc:	4630      	mov	r0, r6
   11cfe:	4639      	mov	r1, r7
   11d00:	f7ee fa88 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   11d04:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   11d08:	459a      	cmp	sl, r3
   11d0a:	bf94      	ite	ls
   11d0c:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   11d10:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   11d14:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11d18:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   11d1a:	bf38      	it	cc
   11d1c:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   11d20:	f7f6 fe76 	bl	8a10 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   11d24:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   11d28:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   11d2a:	2b00      	cmp	r3, #0
   11d2c:	d045      	beq.n	11dba <radio_scan_enable+0x172>
		us_offset = 0;
   11d2e:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11d30:	980c      	ldr	r0, [sp, #48]	; 0x30
   11d32:	4931      	ldr	r1, [pc, #196]	; (11df8 <radio_scan_enable+0x1b0>)
   11d34:	a32c      	add	r3, pc, #176	; (adr r3, 11de8 <radio_scan_enable+0x1a0>)
   11d36:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d3a:	fba0 0101 	umull	r0, r1, r0, r1
   11d3e:	f7ee fa69 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11d42:	ab0b      	add	r3, sp, #44	; 0x2c
   11d44:	9308      	str	r3, [sp, #32]
   11d46:	4b2d      	ldr	r3, [pc, #180]	; (11dfc <radio_scan_enable+0x1b4>)
   11d48:	9307      	str	r3, [sp, #28]
   11d4a:	4b2d      	ldr	r3, [pc, #180]	; (11e00 <radio_scan_enable+0x1b8>)
   11d4c:	9305      	str	r3, [sp, #20]
   11d4e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11d52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11d56:	4443      	add	r3, r8
   11d58:	2500      	movs	r5, #0
   11d5a:	4482      	add	sl, r0
   11d5c:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   11d5e:	4630      	mov	r0, r6
   11d60:	a321      	add	r3, pc, #132	; (adr r3, 11de8 <radio_scan_enable+0x1a0>)
   11d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d66:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11d68:	9506      	str	r5, [sp, #24]
   11d6a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   11d6c:	f7ee fa52 	bl	214 <__aeabi_uldivmod>
   11d70:	4610      	mov	r0, r2
   11d72:	4619      	mov	r1, r3
   11d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11d78:	2300      	movs	r3, #0
   11d7a:	f7ee fa4b 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11d7e:	e88d 0220 	stmia.w	sp, {r5, r9}
   11d82:	9002      	str	r0, [sp, #8]
   11d84:	4653      	mov	r3, sl
   11d86:	2206      	movs	r2, #6
   11d88:	2103      	movs	r1, #3
   11d8a:	4628      	mov	r0, r5
   11d8c:	f7f6 fcd2 	bl	8734 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   11d90:	2802      	cmp	r0, #2
   11d92:	d023      	beq.n	11ddc <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11d94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11d96:	2d00      	cmp	r5, #0
   11d98:	f47f af65 	bne.w	11c66 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   11d9c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11da0:	f043 0301 	orr.w	r3, r3, #1
   11da4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   11da8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11dac:	2b00      	cmp	r3, #0
   11dae:	db02      	blt.n	11db6 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   11db0:	2002      	movs	r0, #2
   11db2:	f000 ff0f 	bl	12bd4 <ll_adv_scan_state_cb>
	return 0;
   11db6:	4628      	mov	r0, r5
   11db8:	e756      	b.n	11c68 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11dba:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   11dbe:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   11dc0:	aa0d      	add	r2, sp, #52	; 0x34
   11dc2:	ab0c      	add	r3, sp, #48	; 0x30
   11dc4:	4441      	add	r1, r8
   11dc6:	2003      	movs	r0, #3
   11dc8:	f7f9 fb8a 	bl	b4e0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   11dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11dce:	2b00      	cmp	r3, #0
   11dd0:	d0ae      	beq.n	11d30 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   11dd2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   11dd6:	e7ab      	b.n	11d30 <radio_scan_enable+0xe8>
			cpu_sleep();
   11dd8:	f7f8 fd52 	bl	a880 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   11ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11dde:	2b02      	cmp	r3, #2
   11de0:	d0fa      	beq.n	11dd8 <radio_scan_enable+0x190>
   11de2:	e7d7      	b.n	11d94 <radio_scan_enable+0x14c>
   11de4:	f3af 8000 	nop.w
   11de8:	1afd498d 	.word	0x1afd498d
   11dec:	00000007 	.word	0x00000007
   11df0:	200008c0 	.word	0x200008c0
   11df4:	84e72a00 	.word	0x84e72a00
   11df8:	3b9aca00 	.word	0x3b9aca00
   11dfc:	0000a8c5 	.word	0x0000a8c5
   11e00:	0000c8fd 	.word	0x0000c8fd

00011e04 <radio_scan_disable>:
{
   11e04:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   11e06:	2104      	movs	r1, #4
   11e08:	2006      	movs	r0, #6
   11e0a:	f7f8 ff4d 	bl	aca8 <role_disable>
	if (!status) {
   11e0e:	4605      	mov	r5, r0
   11e10:	b9e8      	cbnz	r0, 11e4e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   11e12:	4c10      	ldr	r4, [pc, #64]	; (11e54 <radio_scan_disable+0x50>)
   11e14:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   11e18:	f360 0200 	bfi	r2, r0, #0, #1
   11e1c:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   11e20:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   11e24:	2a00      	cmp	r2, #0
   11e26:	db01      	blt.n	11e2c <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   11e28:	f000 fed4 	bl	12bd4 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   11e2c:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   11e30:	b15e      	cbz	r6, 11e4a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   11e32:	2300      	movs	r3, #0
   11e34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   11e38:	4907      	ldr	r1, [pc, #28]	; (11e58 <radio_scan_disable+0x54>)
   11e3a:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   11e3e:	f7f5 fe08 	bl	7a52 <mem_release>
			mem_release(conn, &_radio.conn_free);
   11e42:	4906      	ldr	r1, [pc, #24]	; (11e5c <radio_scan_disable+0x58>)
   11e44:	4630      	mov	r0, r6
   11e46:	f7f5 fe04 	bl	7a52 <mem_release>
}
   11e4a:	4628      	mov	r0, r5
   11e4c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   11e4e:	250c      	movs	r5, #12
   11e50:	e7fb      	b.n	11e4a <radio_scan_disable+0x46>
   11e52:	bf00      	nop
   11e54:	200008c0 	.word	0x200008c0
   11e58:	20000a08 	.word	0x20000a08
   11e5c:	200009cc 	.word	0x200009cc

00011e60 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   11e60:	4b03      	ldr	r3, [pc, #12]	; (11e70 <ll_connect_disable+0x10>)
   11e62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11e66:	b10b      	cbz	r3, 11e6c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   11e68:	f7ff bfcc 	b.w	11e04 <radio_scan_disable>
}
   11e6c:	200c      	movs	r0, #12
   11e6e:	4770      	bx	lr
   11e70:	200008c0 	.word	0x200008c0

00011e74 <ll_rx_dequeue>:
{
   11e74:	b530      	push	{r4, r5, lr}
   11e76:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11e78:	4d4c      	ldr	r5, [pc, #304]	; (11fac <ll_rx_dequeue+0x138>)
	struct radio_pdu_node_rx *node_rx = NULL;
   11e7a:	aa04      	add	r2, sp, #16
   11e7c:	2300      	movs	r3, #0
   11e7e:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11e82:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   11e86:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   11e8a:	f7f5 fe31 	bl	7af0 <memq_dequeue>
   11e8e:	462c      	mov	r4, r5
	LL_ASSERT(link);
   11e90:	b978      	cbnz	r0, 11eb2 <ll_rx_dequeue+0x3e>
   11e92:	4b47      	ldr	r3, [pc, #284]	; (11fb0 <ll_rx_dequeue+0x13c>)
   11e94:	9301      	str	r3, [sp, #4]
   11e96:	9300      	str	r3, [sp, #0]
   11e98:	4b46      	ldr	r3, [pc, #280]	; (11fb4 <ll_rx_dequeue+0x140>)
   11e9a:	4a47      	ldr	r2, [pc, #284]	; (11fb8 <ll_rx_dequeue+0x144>)
   11e9c:	681c      	ldr	r4, [r3, #0]
   11e9e:	4947      	ldr	r1, [pc, #284]	; (11fbc <ll_rx_dequeue+0x148>)
   11ea0:	4b47      	ldr	r3, [pc, #284]	; (11fc0 <ll_rx_dequeue+0x14c>)
   11ea2:	4848      	ldr	r0, [pc, #288]	; (11fc4 <ll_rx_dequeue+0x150>)
		LL_ASSERT(_radio.link_rx_data_quota <
   11ea4:	47a0      	blx	r4
   11ea6:	4040      	eors	r0, r0
   11ea8:	f380 8811 	msr	BASEPRI, r0
   11eac:	f04f 0004 	mov.w	r0, #4
   11eb0:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   11eb2:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   11eb6:	f7f5 fdcc 	bl	7a52 <mem_release>
	switch (node_rx->hdr.type) {
   11eba:	9a03      	ldr	r2, [sp, #12]
   11ebc:	7911      	ldrb	r1, [r2, #4]
   11ebe:	290c      	cmp	r1, #12
   11ec0:	d807      	bhi.n	11ed2 <ll_rx_dequeue+0x5e>
   11ec2:	2301      	movs	r3, #1
   11ec4:	408b      	lsls	r3, r1
   11ec6:	f641 707e 	movw	r0, #8062	; 0x1f7e
   11eca:	4203      	tst	r3, r0
   11ecc:	d10b      	bne.n	11ee6 <ll_rx_dequeue+0x72>
   11ece:	0618      	lsls	r0, r3, #24
   11ed0:	d41d      	bmi.n	11f0e <ll_rx_dequeue+0x9a>
		LL_ASSERT(0);
   11ed2:	4b37      	ldr	r3, [pc, #220]	; (11fb0 <ll_rx_dequeue+0x13c>)
   11ed4:	9301      	str	r3, [sp, #4]
   11ed6:	9300      	str	r3, [sp, #0]
   11ed8:	4b36      	ldr	r3, [pc, #216]	; (11fb4 <ll_rx_dequeue+0x140>)
   11eda:	4a37      	ldr	r2, [pc, #220]	; (11fb8 <ll_rx_dequeue+0x144>)
   11edc:	681c      	ldr	r4, [r3, #0]
   11ede:	4937      	ldr	r1, [pc, #220]	; (11fbc <ll_rx_dequeue+0x148>)
   11ee0:	4b37      	ldr	r3, [pc, #220]	; (11fc0 <ll_rx_dequeue+0x14c>)
   11ee2:	4839      	ldr	r0, [pc, #228]	; (11fc8 <ll_rx_dequeue+0x154>)
   11ee4:	e7de      	b.n	11ea4 <ll_rx_dequeue+0x30>
		LL_ASSERT(_radio.link_rx_data_quota <
   11ee6:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   11eea:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   11eee:	3801      	subs	r0, #1
   11ef0:	4283      	cmp	r3, r0
   11ef2:	db09      	blt.n	11f08 <ll_rx_dequeue+0x94>
   11ef4:	4b2e      	ldr	r3, [pc, #184]	; (11fb0 <ll_rx_dequeue+0x13c>)
   11ef6:	9301      	str	r3, [sp, #4]
   11ef8:	9300      	str	r3, [sp, #0]
   11efa:	4b2e      	ldr	r3, [pc, #184]	; (11fb4 <ll_rx_dequeue+0x140>)
   11efc:	4a2e      	ldr	r2, [pc, #184]	; (11fb8 <ll_rx_dequeue+0x144>)
   11efe:	681c      	ldr	r4, [r3, #0]
   11f00:	492e      	ldr	r1, [pc, #184]	; (11fbc <ll_rx_dequeue+0x148>)
   11f02:	4b2f      	ldr	r3, [pc, #188]	; (11fc0 <ll_rx_dequeue+0x14c>)
   11f04:	4831      	ldr	r0, [pc, #196]	; (11fcc <ll_rx_dequeue+0x158>)
   11f06:	e7cd      	b.n	11ea4 <ll_rx_dequeue+0x30>
		_radio.link_rx_data_quota++;
   11f08:	3301      	adds	r3, #1
   11f0a:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   11f0e:	2906      	cmp	r1, #6
   11f10:	d13a      	bne.n	11f88 <ll_rx_dequeue+0x114>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   11f12:	7ad3      	ldrb	r3, [r2, #11]
   11f14:	2b3c      	cmp	r3, #60	; 0x3c
   11f16:	d00f      	beq.n	11f38 <ll_rx_dequeue+0xc4>
   11f18:	7b12      	ldrb	r2, [r2, #12]
   11f1a:	bb02      	cbnz	r2, 11f5e <ll_rx_dequeue+0xea>
			LL_ASSERT(_radio.scanner.is_enabled);
   11f1c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11f20:	07d9      	lsls	r1, r3, #31
   11f22:	d433      	bmi.n	11f8c <ll_rx_dequeue+0x118>
   11f24:	4b22      	ldr	r3, [pc, #136]	; (11fb0 <ll_rx_dequeue+0x13c>)
   11f26:	9301      	str	r3, [sp, #4]
   11f28:	9300      	str	r3, [sp, #0]
   11f2a:	4b22      	ldr	r3, [pc, #136]	; (11fb4 <ll_rx_dequeue+0x140>)
   11f2c:	4a22      	ldr	r2, [pc, #136]	; (11fb8 <ll_rx_dequeue+0x144>)
   11f2e:	681c      	ldr	r4, [r3, #0]
   11f30:	4922      	ldr	r1, [pc, #136]	; (11fbc <ll_rx_dequeue+0x148>)
   11f32:	4b23      	ldr	r3, [pc, #140]	; (11fc0 <ll_rx_dequeue+0x14c>)
   11f34:	4826      	ldr	r0, [pc, #152]	; (11fd0 <ll_rx_dequeue+0x15c>)
   11f36:	e7b5      	b.n	11ea4 <ll_rx_dequeue+0x30>
				_radio.advertiser.conn = NULL;
   11f38:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   11f3a:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   11f3e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   11f42:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11f46:	2b00      	cmp	r3, #0
   11f48:	db0b      	blt.n	11f62 <ll_rx_dequeue+0xee>
   11f4a:	4b19      	ldr	r3, [pc, #100]	; (11fb0 <ll_rx_dequeue+0x13c>)
   11f4c:	9301      	str	r3, [sp, #4]
   11f4e:	9300      	str	r3, [sp, #0]
   11f50:	4b18      	ldr	r3, [pc, #96]	; (11fb4 <ll_rx_dequeue+0x140>)
   11f52:	4a19      	ldr	r2, [pc, #100]	; (11fb8 <ll_rx_dequeue+0x144>)
   11f54:	681c      	ldr	r4, [r3, #0]
   11f56:	4919      	ldr	r1, [pc, #100]	; (11fbc <ll_rx_dequeue+0x148>)
   11f58:	4b19      	ldr	r3, [pc, #100]	; (11fc0 <ll_rx_dequeue+0x14c>)
   11f5a:	481e      	ldr	r0, [pc, #120]	; (11fd4 <ll_rx_dequeue+0x160>)
   11f5c:	e7a2      	b.n	11ea4 <ll_rx_dequeue+0x30>
		struct connection *conn = NULL;
   11f5e:	2500      	movs	r5, #0
   11f60:	e7ef      	b.n	11f42 <ll_rx_dequeue+0xce>
			_radio.advertiser.is_enabled = 0;
   11f62:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11f66:	f36f 13c7 	bfc	r3, #7, #1
   11f6a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   11f6e:	b995      	cbnz	r5, 11f96 <ll_rx_dequeue+0x122>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11f70:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   11f74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11f78:	f000 0001 	and.w	r0, r0, #1
   11f7c:	0040      	lsls	r0, r0, #1
		if (!bm) {
   11f7e:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   11f82:	d101      	bne.n	11f88 <ll_rx_dequeue+0x114>
			ll_adv_scan_state_cb(0);
   11f84:	f000 fe26 	bl	12bd4 <ll_adv_scan_state_cb>
}
   11f88:	b005      	add	sp, #20
   11f8a:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   11f8c:	f362 0300 	bfi	r3, r2, #0, #1
   11f90:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   11f94:	e7ec      	b.n	11f70 <ll_rx_dequeue+0xfc>
			mem_release(node_rx->hdr.onion.link,
   11f96:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   11f9a:	490f      	ldr	r1, [pc, #60]	; (11fd8 <ll_rx_dequeue+0x164>)
   11f9c:	f7f5 fd59 	bl	7a52 <mem_release>
			mem_release(conn, &_radio.conn_free);
   11fa0:	490e      	ldr	r1, [pc, #56]	; (11fdc <ll_rx_dequeue+0x168>)
   11fa2:	4628      	mov	r0, r5
   11fa4:	f7f5 fd55 	bl	7a52 <mem_release>
   11fa8:	e7e2      	b.n	11f70 <ll_rx_dequeue+0xfc>
   11faa:	bf00      	nop
   11fac:	200008c0 	.word	0x200008c0
   11fb0:	000161ba 	.word	0x000161ba
   11fb4:	20003a5c 	.word	0x20003a5c
   11fb8:	000179e1 	.word	0x000179e1
   11fbc:	00017a29 	.word	0x00017a29
   11fc0:	0001985f 	.word	0x0001985f
   11fc4:	000198ad 	.word	0x000198ad
   11fc8:	00017955 	.word	0x00017955
   11fcc:	00019958 	.word	0x00019958
   11fd0:	00019e46 	.word	0x00019e46
   11fd4:	00019e08 	.word	0x00019e08
   11fd8:	20000a08 	.word	0x20000a08
   11fdc:	200009cc 	.word	0x200009cc

00011fe0 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   11fe0:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   11fe2:	4c0b      	ldr	r4, [pc, #44]	; (12010 <rtc0_nrf5_isr+0x30>)
   11fe4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   11fe8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   11fec:	b122      	cbz	r2, 11ff8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   11fee:	2000      	movs	r0, #0
   11ff0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   11ff4:	f7f6 fb8c 	bl	8710 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   11ff8:	b12d      	cbz	r5, 12006 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   11ffa:	2300      	movs	r3, #0
   11ffc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   12000:	2001      	movs	r0, #1
   12002:	f7f6 fb85 	bl	8710 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   12006:	2000      	movs	r0, #0
}
   12008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   1200c:	f7f5 be20 	b.w	7c50 <mayfly_run>
   12010:	4000b000 	.word	0x4000b000

00012014 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   12014:	2001      	movs	r0, #1
   12016:	f7f5 be1b 	b.w	7c50 <mayfly_run>

0001201a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1201a:	4668      	mov	r0, sp
   1201c:	f020 0107 	bic.w	r1, r0, #7
   12020:	468d      	mov	sp, r1
   12022:	b501      	push	{r0, lr}
	isr_radio();
   12024:	f001 f93a 	bl	1329c <isr_radio>
	ISR_DIRECT_PM();
   12028:	f7ef fd14 	bl	1a54 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1202c:	f7ef fae8 	bl	1600 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   12030:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   12034:	4685      	mov	sp, r0
   12036:	4770      	bx	lr

00012038 <radio_active_callback>:
{
   12038:	4770      	bx	lr
	...

0001203c <radio_event_callback>:
	k_sem_give(sem_recv);
   1203c:	4b01      	ldr	r3, [pc, #4]	; (12044 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1203e:	6818      	ldr	r0, [r3, #0]
   12040:	f003 b8e4 	b.w	1520c <_impl_k_sem_give>
   12044:	200011f0 	.word	0x200011f0

00012048 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   12048:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1204a:	4b42      	ldr	r3, [pc, #264]	; (12154 <ll_init+0x10c>)
{
   1204c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1204e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   12050:	4841      	ldr	r0, [pc, #260]	; (12158 <ll_init+0x110>)
   12052:	f002 faeb 	bl	1462c <device_get_binding>
	if (!clk_k32) {
   12056:	b918      	cbnz	r0, 12060 <ll_init+0x18>
		return -ENODEV;
   12058:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   1205c:	b006      	add	sp, #24
   1205e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   12060:	6843      	ldr	r3, [r0, #4]
   12062:	2101      	movs	r1, #1
   12064:	681b      	ldr	r3, [r3, #0]
   12066:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   12068:	483c      	ldr	r0, [pc, #240]	; (1215c <ll_init+0x114>)
   1206a:	f002 fadf 	bl	1462c <device_get_binding>
	if (!entropy) {
   1206e:	4604      	mov	r4, r0
   12070:	2800      	cmp	r0, #0
   12072:	d0f1      	beq.n	12058 <ll_init+0x10>
	cntr_init();
   12074:	f000 fff4 	bl	13060 <cntr_init>
	mayfly_init();
   12078:	f7f5 fd4a 	bl	7b10 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1207c:	4b38      	ldr	r3, [pc, #224]	; (12160 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1207e:	2203      	movs	r2, #3
   12080:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   12082:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   12084:	4a37      	ldr	r2, [pc, #220]	; (12164 <ll_init+0x11c>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   12086:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   12088:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1208a:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1208c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1208e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   12090:	9205      	str	r2, [sp, #20]
   12092:	4a35      	ldr	r2, [pc, #212]	; (12168 <ll_init+0x120>)
   12094:	9204      	str	r2, [sp, #16]
   12096:	4a35      	ldr	r2, [pc, #212]	; (1216c <ll_init+0x124>)
   12098:	9203      	str	r2, [sp, #12]
   1209a:	4a35      	ldr	r2, [pc, #212]	; (12170 <ll_init+0x128>)
   1209c:	9202      	str	r2, [sp, #8]
   1209e:	220d      	movs	r2, #13
   120a0:	9201      	str	r2, [sp, #4]
   120a2:	9300      	str	r3, [sp, #0]
   120a4:	4a33      	ldr	r2, [pc, #204]	; (12174 <ll_init+0x12c>)
   120a6:	2304      	movs	r3, #4
   120a8:	f7f6 fafa 	bl	86a0 <ticker_init>
	LL_ASSERT(!err);
   120ac:	b178      	cbz	r0, 120ce <ll_init+0x86>
   120ae:	4b32      	ldr	r3, [pc, #200]	; (12178 <ll_init+0x130>)
   120b0:	9301      	str	r3, [sp, #4]
   120b2:	9300      	str	r3, [sp, #0]
   120b4:	4b31      	ldr	r3, [pc, #196]	; (1217c <ll_init+0x134>)
   120b6:	4a32      	ldr	r2, [pc, #200]	; (12180 <ll_init+0x138>)
   120b8:	681c      	ldr	r4, [r3, #0]
   120ba:	4932      	ldr	r1, [pc, #200]	; (12184 <ll_init+0x13c>)
   120bc:	4b32      	ldr	r3, [pc, #200]	; (12188 <ll_init+0x140>)
   120be:	4833      	ldr	r0, [pc, #204]	; (1218c <ll_init+0x144>)
   120c0:	47a0      	blx	r4
   120c2:	4040      	eors	r0, r0
   120c4:	f380 8811 	msr	BASEPRI, r0
   120c8:	f04f 0004 	mov.w	r0, #4
   120cc:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   120ce:	4830      	ldr	r0, [pc, #192]	; (12190 <ll_init+0x148>)
   120d0:	f002 faac 	bl	1462c <device_get_binding>
	if (!clk_m16) {
   120d4:	2800      	cmp	r0, #0
   120d6:	d0bf      	beq.n	12058 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   120d8:	4b2e      	ldr	r3, [pc, #184]	; (12194 <ll_init+0x14c>)
   120da:	9304      	str	r3, [sp, #16]
   120dc:	9501      	str	r5, [sp, #4]
   120de:	231b      	movs	r3, #27
   120e0:	2501      	movs	r5, #1
   120e2:	f44f 7657 	mov.w	r6, #860	; 0x35c
   120e6:	9303      	str	r3, [sp, #12]
   120e8:	9302      	str	r3, [sp, #8]
   120ea:	4622      	mov	r2, r4
   120ec:	9605      	str	r6, [sp, #20]
   120ee:	9500      	str	r5, [sp, #0]
   120f0:	462b      	mov	r3, r5
   120f2:	2107      	movs	r1, #7
   120f4:	f7fe ff34 	bl	10f60 <radio_init>
	if (err) {
   120f8:	4604      	mov	r4, r0
   120fa:	b168      	cbz	r0, 12118 <ll_init+0xd0>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   120fc:	4b1e      	ldr	r3, [pc, #120]	; (12178 <ll_init+0x130>)
   120fe:	9303      	str	r3, [sp, #12]
   12100:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   12104:	4b1d      	ldr	r3, [pc, #116]	; (1217c <ll_init+0x134>)
   12106:	4824      	ldr	r0, [pc, #144]	; (12198 <ll_init+0x150>)
   12108:	681c      	ldr	r4, [r3, #0]
   1210a:	4a1d      	ldr	r2, [pc, #116]	; (12180 <ll_init+0x138>)
   1210c:	4b1e      	ldr	r3, [pc, #120]	; (12188 <ll_init+0x140>)
   1210e:	491d      	ldr	r1, [pc, #116]	; (12184 <ll_init+0x13c>)
   12110:	47a0      	blx	r4
		return -ENOMEM;
   12112:	f06f 000b 	mvn.w	r0, #11
   12116:	e7a1      	b.n	1205c <ll_init+0x14>
	ll_filter_reset(true);
   12118:	4628      	mov	r0, r5
   1211a:	f000 ff59 	bl	12fd0 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1211e:	4622      	mov	r2, r4
   12120:	4621      	mov	r1, r4
   12122:	4628      	mov	r0, r5
   12124:	f7ef fc66 	bl	19f4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   12128:	4622      	mov	r2, r4
   1212a:	4621      	mov	r1, r4
   1212c:	200b      	movs	r0, #11
   1212e:	f7ef fc61 	bl	19f4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   12132:	4622      	mov	r2, r4
   12134:	4621      	mov	r1, r4
   12136:	2018      	movs	r0, #24
   12138:	f7ef fc5c 	bl	19f4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1213c:	4628      	mov	r0, r5
   1213e:	f7ef fc27 	bl	1990 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   12142:	200b      	movs	r0, #11
   12144:	f7ef fc24 	bl	1990 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   12148:	2018      	movs	r0, #24
   1214a:	f7ef fc21 	bl	1990 <_arch_irq_enable>
	return 0;
   1214e:	4620      	mov	r0, r4
   12150:	e784      	b.n	1205c <ll_init+0x14>
   12152:	bf00      	nop
   12154:	200011f0 	.word	0x200011f0
   12158:	0001632a 	.word	0x0001632a
   1215c:	00016138 	.word	0x00016138
   12160:	200011d0 	.word	0x200011d0
   12164:	00013c55 	.word	0x00013c55
   12168:	00013bad 	.word	0x00013bad
   1216c:	00013b49 	.word	0x00013b49
   12170:	20000f60 	.word	0x20000f60
   12174:	20000e20 	.word	0x20000e20
   12178:	000161ba 	.word	0x000161ba
   1217c:	20003a5c 	.word	0x20003a5c
   12180:	000179e1 	.word	0x000179e1
   12184:	00017a29 	.word	0x00017a29
   12188:	0001a57d 	.word	0x0001a57d
   1218c:	0001a585 	.word	0x0001a585
   12190:	00016335 	.word	0x00016335
   12194:	20000ac4 	.word	0x20000ac4
   12198:	0001a5ab 	.word	0x0001a5ab

0001219c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1219c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   121a0:	4681      	mov	r9, r0
   121a2:	4688      	mov	r8, r1
   121a4:	4617      	mov	r7, r2
   121a6:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   121a8:	f7fe ffbe 	bl	11128 <ll_scan_is_enabled>
   121ac:	b988      	cbnz	r0, 121d2 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   121ae:	4d0a      	ldr	r5, [pc, #40]	; (121d8 <ll_scan_params_set+0x3c>)
   121b0:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   121b2:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   121b6:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   121ba:	4622      	mov	r2, r4
   121bc:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   121c0:	4613      	mov	r3, r2
   121c2:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   121c6:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   121c8:	f362 1387 	bfi	r3, r2, #6, #2
   121cc:	712b      	strb	r3, [r5, #4]

	return 0;
   121ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   121d2:	200c      	movs	r0, #12
}
   121d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   121d8:	200011f4 	.word	0x200011f4

000121dc <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   121dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   121de:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   121e0:	b920      	cbnz	r0, 121ec <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   121e2:	b005      	add	sp, #20
   121e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   121e8:	f7ff be0c 	b.w	11e04 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   121ec:	f7fe ff9c 	bl	11128 <ll_scan_is_enabled>
   121f0:	4606      	mov	r6, r0
   121f2:	bb40      	cbnz	r0, 12246 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   121f4:	4c15      	ldr	r4, [pc, #84]	; (1224c <ll_scan_enable+0x70>)
   121f6:	7920      	ldrb	r0, [r4, #4]
   121f8:	0980      	lsrs	r0, r0, #6
   121fa:	f000 fa9d 	bl	12738 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   121fe:	7923      	ldrb	r3, [r4, #4]
   12200:	f013 0501 	ands.w	r5, r3, #1
   12204:	d006      	beq.n	12214 <ll_scan_enable+0x38>
   12206:	f013 0520 	ands.w	r5, r3, #32
   1220a:	d003      	beq.n	12214 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   1220c:	4630      	mov	r0, r6
   1220e:	f000 fc1f 	bl	12a50 <ll_rl_rpa_update>
		rpa_gen = 1;
   12212:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   12214:	7926      	ldrb	r6, [r4, #4]
   12216:	f006 070f 	and.w	r7, r6, #15
   1221a:	f3c6 1600 	ubfx	r6, r6, #4, #1
   1221e:	2100      	movs	r1, #0
   12220:	4630      	mov	r0, r6
   12222:	f7f6 fbfb 	bl	8a1c <ll_addr_get>
   12226:	22ff      	movs	r2, #255	; 0xff
   12228:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   1222a:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1222c:	8823      	ldrh	r3, [r4, #0]
   1222e:	9502      	str	r5, [sp, #8]
   12230:	0992      	lsrs	r2, r2, #6
   12232:	9201      	str	r2, [sp, #4]
   12234:	8862      	ldrh	r2, [r4, #2]
   12236:	9200      	str	r2, [sp, #0]
   12238:	4631      	mov	r1, r6
   1223a:	4602      	mov	r2, r0
   1223c:	4638      	mov	r0, r7
   1223e:	f7ff fd03 	bl	11c48 <radio_scan_enable>
}
   12242:	b005      	add	sp, #20
   12244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   12246:	2000      	movs	r0, #0
   12248:	e7fb      	b.n	12242 <ll_scan_enable+0x66>
   1224a:	bf00      	nop
   1224c:	200011f4 	.word	0x200011f4

00012250 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   12250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12254:	b085      	sub	sp, #20
   12256:	461e      	mov	r6, r3
   12258:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1225c:	9303      	str	r3, [sp, #12]
   1225e:	4680      	mov	r8, r0
   12260:	4689      	mov	r9, r1
   12262:	4615      	mov	r5, r2
   12264:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   12266:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   1226a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   1226e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   12272:	f7fe ff59 	bl	11128 <ll_scan_is_enabled>
   12276:	9b03      	ldr	r3, [sp, #12]
   12278:	bba0      	cbnz	r0, 122e4 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1227a:	9300      	str	r3, [sp, #0]
   1227c:	4652      	mov	r2, sl
   1227e:	465b      	mov	r3, fp
   12280:	4639      	mov	r1, r7
   12282:	4630      	mov	r0, r6
   12284:	f7fe ff74 	bl	11170 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   12288:	bb68      	cbnz	r0, 122e6 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   1228a:	4628      	mov	r0, r5
   1228c:	f000 fa54 	bl	12738 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   12290:	b1dd      	cbz	r5, 122ca <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   12292:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   12294:	1ea3      	subs	r3, r4, #2
   12296:	2b01      	cmp	r3, #1
   12298:	d822      	bhi.n	122e0 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   1229a:	2000      	movs	r0, #0
   1229c:	f000 fbd8 	bl	12a50 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   122a0:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   122a4:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   122a6:	2100      	movs	r1, #0
   122a8:	4620      	mov	r0, r4
   122aa:	f7f6 fbb7 	bl	8a1c <ll_addr_get>
   122ae:	4643      	mov	r3, r8
   122b0:	4602      	mov	r2, r0
   122b2:	4621      	mov	r1, r4
   122b4:	2000      	movs	r0, #0
   122b6:	9711      	str	r7, [sp, #68]	; 0x44
   122b8:	9610      	str	r6, [sp, #64]	; 0x40
   122ba:	950f      	str	r5, [sp, #60]	; 0x3c
   122bc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   122c0:	b005      	add	sp, #20
   122c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   122c6:	f7ff bcbf 	b.w	11c48 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   122ca:	f000 fbb9 	bl	12a40 <ctrl_rl_enabled>
   122ce:	2800      	cmp	r0, #0
   122d0:	d0df      	beq.n	12292 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   122d2:	4639      	mov	r1, r7
   122d4:	462a      	mov	r2, r5
   122d6:	4630      	mov	r0, r6
   122d8:	f000 fa50 	bl	1277c <ll_rl_find>
   122dc:	4607      	mov	r7, r0
   122de:	e7d9      	b.n	12294 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   122e0:	2600      	movs	r6, #0
   122e2:	e7e0      	b.n	122a6 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   122e4:	200c      	movs	r0, #12
}
   122e6:	b005      	add	sp, #20
   122e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000122ec <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   122ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122f0:	4688      	mov	r8, r1
	int i;

	if (free) {
   122f2:	4615      	mov	r5, r2
   122f4:	b10a      	cbz	r2, 122fa <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   122f6:	23ff      	movs	r3, #255	; 0xff
   122f8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   122fa:	4e14      	ldr	r6, [pc, #80]	; (1234c <wl_find+0x60>)
{
   122fc:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   122fe:	f000 0701 	and.w	r7, r0, #1
   12302:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   12306:	07da      	lsls	r2, r3, #31
   12308:	d51d      	bpl.n	12346 <wl_find+0x5a>
   1230a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1230e:	42bb      	cmp	r3, r7
   12310:	d113      	bne.n	1233a <wl_find+0x4e>
   12312:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   12316:	2206      	movs	r2, #6
   12318:	4641      	mov	r1, r8
   1231a:	3002      	adds	r0, #2
   1231c:	f7ef fd93 	bl	1e46 <memcmp>
   12320:	b910      	cbnz	r0, 12328 <wl_find+0x3c>
			return i;
   12322:	b2e0      	uxtb	r0, r4
   12324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   12328:	b13d      	cbz	r5, 1233a <wl_find+0x4e>
   1232a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1232e:	07db      	lsls	r3, r3, #31
   12330:	d403      	bmi.n	1233a <wl_find+0x4e>
   12332:	782b      	ldrb	r3, [r5, #0]
   12334:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   12336:	bf08      	it	eq
   12338:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1233a:	3401      	adds	r4, #1
   1233c:	2c08      	cmp	r4, #8
   1233e:	d1e0      	bne.n	12302 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   12340:	20ff      	movs	r0, #255	; 0xff
   12342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   12346:	2d00      	cmp	r5, #0
   12348:	d1f3      	bne.n	12332 <wl_find+0x46>
   1234a:	e7f6      	b.n	1233a <wl_find+0x4e>
   1234c:	20001427 	.word	0x20001427

00012350 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   12350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12354:	4d1a      	ldr	r5, [pc, #104]	; (123c0 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   12356:	f8df 8074 	ldr.w	r8, [pc, #116]	; 123cc <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   1235a:	1eae      	subs	r6, r5, #2
{
   1235c:	2400      	movs	r4, #0
   1235e:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   12360:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   12364:	07d9      	lsls	r1, r3, #31
   12366:	d524      	bpl.n	123b2 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   12368:	f898 3000 	ldrb.w	r3, [r8]
   1236c:	b15b      	cbz	r3, 12386 <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   1236e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   12372:	2a07      	cmp	r2, #7
   12374:	d807      	bhi.n	12386 <filter_wl_update+0x36>
   12376:	2328      	movs	r3, #40	; 0x28
   12378:	4353      	muls	r3, r2
   1237a:	4a12      	ldr	r2, [pc, #72]	; (123c4 <filter_wl_update+0x74>)
   1237c:	5cd3      	ldrb	r3, [r2, r3]
   1237e:	075a      	lsls	r2, r3, #29
   12380:	d501      	bpl.n	12386 <filter_wl_update+0x36>
   12382:	06db      	lsls	r3, r3, #27
   12384:	d515      	bpl.n	123b2 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   12386:	4810      	ldr	r0, [pc, #64]	; (123c8 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   12388:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1238c:	2201      	movs	r2, #1
   1238e:	fa02 f104 	lsl.w	r1, r2, r4
   12392:	7802      	ldrb	r2, [r0, #0]
   12394:	430a      	orrs	r2, r1
   12396:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   12398:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1239c:	7842      	ldrb	r2, [r0, #1]
   1239e:	40a3      	lsls	r3, r4
   123a0:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   123a2:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   123a4:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   123a6:	fb02 0004 	mla	r0, r2, r4, r0
   123aa:	4629      	mov	r1, r5
   123ac:	3002      	adds	r0, #2
   123ae:	f7ef fd5f 	bl	1e70 <memcpy>
   123b2:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   123b4:	2c08      	cmp	r4, #8
   123b6:	f105 0508 	add.w	r5, r5, #8
   123ba:	d1d1      	bne.n	12360 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   123bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123c0:	20001429 	.word	0x20001429
   123c4:	200012b4 	.word	0x200012b4
   123c8:	20001467 	.word	0x20001467
   123cc:	200013f4 	.word	0x200013f4

000123d0 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   123d0:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   123d2:	f7fe fe95 	bl	11100 <ll_adv_is_enabled>
   123d6:	b928      	cbnz	r0, 123e4 <rl_access_check.constprop.1+0x14>
   123d8:	f7fe fea6 	bl	11128 <ll_scan_is_enabled>
   123dc:	fab0 f080 	clz	r0, r0
   123e0:	0940      	lsrs	r0, r0, #5
   123e2:	bd08      	pop	{r3, pc}
   123e4:	2000      	movs	r0, #0
}
   123e6:	bd08      	pop	{r3, pc}

000123e8 <sys_memcpy_swap.constprop.2>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	u8_t *pdst = (u8_t *)dst;
	const u8_t *psrc = (const u8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   123e8:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   123ea:	b508      	push	{r3, lr}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   123ec:	d90e      	bls.n	1240c <sys_memcpy_swap.constprop.2+0x24>
   123ee:	f101 0310 	add.w	r3, r1, #16
   123f2:	4298      	cmp	r0, r3
   123f4:	d20f      	bcs.n	12416 <sys_memcpy_swap.constprop.2+0x2e>
   123f6:	f240 1329 	movw	r3, #297	; 0x129
   123fa:	4a0c      	ldr	r2, [pc, #48]	; (1242c <sys_memcpy_swap.constprop.2+0x44>)
   123fc:	490c      	ldr	r1, [pc, #48]	; (12430 <sys_memcpy_swap.constprop.2+0x48>)
   123fe:	480d      	ldr	r0, [pc, #52]	; (12434 <sys_memcpy_swap.constprop.2+0x4c>)
   12400:	f7ee fdc4 	bl	f8c <printk>
   12404:	480c      	ldr	r0, [pc, #48]	; (12438 <sys_memcpy_swap.constprop.2+0x50>)
   12406:	f7ee fdc1 	bl	f8c <printk>
   1240a:	e7fe      	b.n	1240a <sys_memcpy_swap.constprop.2+0x22>
   1240c:	d2f3      	bcs.n	123f6 <sys_memcpy_swap.constprop.2+0xe>
   1240e:	f100 0310 	add.w	r3, r0, #16
   12412:	4299      	cmp	r1, r3
   12414:	e7ee      	b.n	123f4 <sys_memcpy_swap.constprop.2+0xc>
   12416:	f101 0310 	add.w	r3, r1, #16
   1241a:	3801      	subs	r0, #1
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   1241c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   12420:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   12424:	4299      	cmp	r1, r3
   12426:	d1f9      	bne.n	1241c <sys_memcpy_swap.constprop.2+0x34>
	}
}
   12428:	bd08      	pop	{r3, pc}
   1242a:	bf00      	nop
   1242c:	0001a91b 	.word	0x0001a91b
   12430:	0001a953 	.word	0x0001a953
   12434:	0001619c 	.word	0x0001619c
   12438:	0001a9aa 	.word	0x0001a9aa

0001243c <filter_rl_update>:
{
   1243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   1243e:	4e10      	ldr	r6, [pc, #64]	; (12480 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   12440:	4d10      	ldr	r5, [pc, #64]	; (12484 <filter_rl_update+0x48>)
{
   12442:	2400      	movs	r4, #0
		if (rl[i].taken) {
   12444:	2728      	movs	r7, #40	; 0x28
   12446:	fb07 f104 	mul.w	r1, r7, r4
   1244a:	5c73      	ldrb	r3, [r6, r1]
   1244c:	07da      	lsls	r2, r3, #31
   1244e:	d513      	bpl.n	12478 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   12450:	2201      	movs	r2, #1
   12452:	fa02 f004 	lsl.w	r0, r2, r4
   12456:	782a      	ldrb	r2, [r5, #0]
   12458:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1245a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1245e:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12460:	786a      	ldrb	r2, [r5, #1]
   12462:	40a3      	lsls	r3, r4
   12464:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12466:	2206      	movs	r2, #6
   12468:	3101      	adds	r1, #1
   1246a:	fb02 5004 	mla	r0, r2, r4, r5
   1246e:	4431      	add	r1, r6
   12470:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12472:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12474:	f7ef fcfc 	bl	1e70 <memcpy>
   12478:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1247a:	2c08      	cmp	r4, #8
   1247c:	d1e3      	bne.n	12446 <filter_rl_update+0xa>
}
   1247e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12480:	200012b4 	.word	0x200012b4
   12484:	200013f5 	.word	0x200013f5

00012488 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   12488:	2807      	cmp	r0, #7
   1248a:	d80c      	bhi.n	124a6 <ctrl_lrpa_get+0x1e>
   1248c:	2328      	movs	r3, #40	; 0x28
   1248e:	4358      	muls	r0, r3
   12490:	4a06      	ldr	r2, [pc, #24]	; (124ac <ctrl_lrpa_get+0x24>)
   12492:	5c13      	ldrb	r3, [r2, r0]
   12494:	1811      	adds	r1, r2, r0
   12496:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1249a:	b128      	cbz	r0, 124a8 <ctrl_lrpa_get+0x20>
   1249c:	f3c3 0040 	ubfx	r0, r3, #1, #1
   124a0:	b110      	cbz	r0, 124a8 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   124a2:	6a48      	ldr	r0, [r1, #36]	; 0x24
   124a4:	4770      	bx	lr
		return NULL;
   124a6:	2000      	movs	r0, #0
}
   124a8:	4770      	bx	lr
   124aa:	bf00      	nop
   124ac:	200012b4 	.word	0x200012b4

000124b0 <ctrl_irks_get>:
	*count = peer_irk_count;
   124b0:	4b02      	ldr	r3, [pc, #8]	; (124bc <ctrl_irks_get+0xc>)
   124b2:	781b      	ldrb	r3, [r3, #0]
   124b4:	7003      	strb	r3, [r0, #0]
}
   124b6:	4802      	ldr	r0, [pc, #8]	; (124c0 <ctrl_irks_get+0x10>)
   124b8:	4770      	bx	lr
   124ba:	bf00      	nop
   124bc:	2000122a 	.word	0x2000122a
   124c0:	20001233 	.word	0x20001233

000124c4 <ctrl_rl_idx>:
{
   124c4:	b513      	push	{r0, r1, r4, lr}
	if (whitelist) {
   124c6:	2800      	cmp	r0, #0
   124c8:	d026      	beq.n	12518 <ctrl_rl_idx+0x54>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   124ca:	2907      	cmp	r1, #7
   124cc:	d90f      	bls.n	124ee <ctrl_rl_idx+0x2a>
		LL_ASSERT(wl[devmatch_id].taken);
   124ce:	4b20      	ldr	r3, [pc, #128]	; (12550 <ctrl_rl_idx+0x8c>)
   124d0:	9301      	str	r3, [sp, #4]
   124d2:	9300      	str	r3, [sp, #0]
   124d4:	4b1f      	ldr	r3, [pc, #124]	; (12554 <ctrl_rl_idx+0x90>)
   124d6:	4a20      	ldr	r2, [pc, #128]	; (12558 <ctrl_rl_idx+0x94>)
   124d8:	681c      	ldr	r4, [r3, #0]
   124da:	4920      	ldr	r1, [pc, #128]	; (1255c <ctrl_rl_idx+0x98>)
   124dc:	4b20      	ldr	r3, [pc, #128]	; (12560 <ctrl_rl_idx+0x9c>)
   124de:	4821      	ldr	r0, [pc, #132]	; (12564 <ctrl_rl_idx+0xa0>)
   124e0:	47a0      	blx	r4
   124e2:	4040      	eors	r0, r0
   124e4:	f380 8811 	msr	BASEPRI, r0
   124e8:	f04f 0004 	mov.w	r0, #4
   124ec:	df02      	svc	2
   124ee:	4b1e      	ldr	r3, [pc, #120]	; (12568 <ctrl_rl_idx+0xa4>)
   124f0:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   124f4:	07d2      	lsls	r2, r2, #31
   124f6:	d409      	bmi.n	1250c <ctrl_rl_idx+0x48>
   124f8:	4b15      	ldr	r3, [pc, #84]	; (12550 <ctrl_rl_idx+0x8c>)
   124fa:	9301      	str	r3, [sp, #4]
   124fc:	9300      	str	r3, [sp, #0]
   124fe:	4b15      	ldr	r3, [pc, #84]	; (12554 <ctrl_rl_idx+0x90>)
   12500:	4a15      	ldr	r2, [pc, #84]	; (12558 <ctrl_rl_idx+0x94>)
   12502:	681c      	ldr	r4, [r3, #0]
   12504:	4915      	ldr	r1, [pc, #84]	; (1255c <ctrl_rl_idx+0x98>)
   12506:	4b16      	ldr	r3, [pc, #88]	; (12560 <ctrl_rl_idx+0x9c>)
   12508:	4818      	ldr	r0, [pc, #96]	; (1256c <ctrl_rl_idx+0xa8>)
   1250a:	e7e9      	b.n	124e0 <ctrl_rl_idx+0x1c>
		i = wl[devmatch_id].rl_idx;
   1250c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   12510:	7849      	ldrb	r1, [r1, #1]
}
   12512:	4608      	mov	r0, r1
   12514:	b002      	add	sp, #8
   12516:	bd10      	pop	{r4, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   12518:	2907      	cmp	r1, #7
   1251a:	d909      	bls.n	12530 <ctrl_rl_idx+0x6c>
   1251c:	4b0c      	ldr	r3, [pc, #48]	; (12550 <ctrl_rl_idx+0x8c>)
   1251e:	9301      	str	r3, [sp, #4]
   12520:	9300      	str	r3, [sp, #0]
   12522:	4b0c      	ldr	r3, [pc, #48]	; (12554 <ctrl_rl_idx+0x90>)
   12524:	4a0c      	ldr	r2, [pc, #48]	; (12558 <ctrl_rl_idx+0x94>)
   12526:	681c      	ldr	r4, [r3, #0]
   12528:	490c      	ldr	r1, [pc, #48]	; (1255c <ctrl_rl_idx+0x98>)
   1252a:	4b0d      	ldr	r3, [pc, #52]	; (12560 <ctrl_rl_idx+0x9c>)
   1252c:	4810      	ldr	r0, [pc, #64]	; (12570 <ctrl_rl_idx+0xac>)
   1252e:	e7d7      	b.n	124e0 <ctrl_rl_idx+0x1c>
		LL_ASSERT(rl[i].taken);
   12530:	2328      	movs	r3, #40	; 0x28
   12532:	434b      	muls	r3, r1
   12534:	4a0f      	ldr	r2, [pc, #60]	; (12574 <ctrl_rl_idx+0xb0>)
   12536:	5cd3      	ldrb	r3, [r2, r3]
   12538:	07db      	lsls	r3, r3, #31
   1253a:	d4ea      	bmi.n	12512 <ctrl_rl_idx+0x4e>
   1253c:	4b04      	ldr	r3, [pc, #16]	; (12550 <ctrl_rl_idx+0x8c>)
   1253e:	9301      	str	r3, [sp, #4]
   12540:	9300      	str	r3, [sp, #0]
   12542:	4b04      	ldr	r3, [pc, #16]	; (12554 <ctrl_rl_idx+0x90>)
   12544:	4a04      	ldr	r2, [pc, #16]	; (12558 <ctrl_rl_idx+0x94>)
   12546:	681c      	ldr	r4, [r3, #0]
   12548:	4904      	ldr	r1, [pc, #16]	; (1255c <ctrl_rl_idx+0x98>)
   1254a:	4b05      	ldr	r3, [pc, #20]	; (12560 <ctrl_rl_idx+0x9c>)
   1254c:	480a      	ldr	r0, [pc, #40]	; (12578 <ctrl_rl_idx+0xb4>)
   1254e:	e7c7      	b.n	124e0 <ctrl_rl_idx+0x1c>
   12550:	000161ba 	.word	0x000161ba
   12554:	20003a5c 	.word	0x20003a5c
   12558:	000179e1 	.word	0x000179e1
   1255c:	00017a29 	.word	0x00017a29
   12560:	0001a5e0 	.word	0x0001a5e0
   12564:	0001a68c 	.word	0x0001a68c
   12568:	20001427 	.word	0x20001427
   1256c:	0001a759 	.word	0x0001a759
   12570:	0001a790 	.word	0x0001a790
   12574:	200012b4 	.word	0x200012b4
   12578:	0001a85d 	.word	0x0001a85d

0001257c <ctrl_rl_irk_idx>:
{
   1257c:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1257e:	4b1a      	ldr	r3, [pc, #104]	; (125e8 <ctrl_rl_irk_idx+0x6c>)
   12580:	781b      	ldrb	r3, [r3, #0]
   12582:	4283      	cmp	r3, r0
   12584:	d80f      	bhi.n	125a6 <ctrl_rl_irk_idx+0x2a>
   12586:	4b19      	ldr	r3, [pc, #100]	; (125ec <ctrl_rl_irk_idx+0x70>)
   12588:	9301      	str	r3, [sp, #4]
   1258a:	9300      	str	r3, [sp, #0]
   1258c:	4b18      	ldr	r3, [pc, #96]	; (125f0 <ctrl_rl_irk_idx+0x74>)
   1258e:	4a19      	ldr	r2, [pc, #100]	; (125f4 <ctrl_rl_irk_idx+0x78>)
   12590:	681c      	ldr	r4, [r3, #0]
   12592:	4919      	ldr	r1, [pc, #100]	; (125f8 <ctrl_rl_irk_idx+0x7c>)
   12594:	4b19      	ldr	r3, [pc, #100]	; (125fc <ctrl_rl_irk_idx+0x80>)
   12596:	481a      	ldr	r0, [pc, #104]	; (12600 <ctrl_rl_irk_idx+0x84>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   12598:	47a0      	blx	r4
   1259a:	4040      	eors	r0, r0
   1259c:	f380 8811 	msr	BASEPRI, r0
   125a0:	f04f 0004 	mov.w	r0, #4
   125a4:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   125a6:	4b17      	ldr	r3, [pc, #92]	; (12604 <ctrl_rl_irk_idx+0x88>)
   125a8:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   125aa:	2807      	cmp	r0, #7
   125ac:	d909      	bls.n	125c2 <ctrl_rl_irk_idx+0x46>
   125ae:	4b0f      	ldr	r3, [pc, #60]	; (125ec <ctrl_rl_irk_idx+0x70>)
   125b0:	9301      	str	r3, [sp, #4]
   125b2:	9300      	str	r3, [sp, #0]
   125b4:	4b0e      	ldr	r3, [pc, #56]	; (125f0 <ctrl_rl_irk_idx+0x74>)
   125b6:	4a0f      	ldr	r2, [pc, #60]	; (125f4 <ctrl_rl_irk_idx+0x78>)
   125b8:	681c      	ldr	r4, [r3, #0]
   125ba:	490f      	ldr	r1, [pc, #60]	; (125f8 <ctrl_rl_irk_idx+0x7c>)
   125bc:	4b0f      	ldr	r3, [pc, #60]	; (125fc <ctrl_rl_irk_idx+0x80>)
   125be:	4812      	ldr	r0, [pc, #72]	; (12608 <ctrl_rl_irk_idx+0x8c>)
   125c0:	e7ea      	b.n	12598 <ctrl_rl_irk_idx+0x1c>
	LL_ASSERT(rl[i].taken);
   125c2:	2328      	movs	r3, #40	; 0x28
   125c4:	4343      	muls	r3, r0
   125c6:	4a11      	ldr	r2, [pc, #68]	; (1260c <ctrl_rl_irk_idx+0x90>)
   125c8:	5cd3      	ldrb	r3, [r2, r3]
   125ca:	07db      	lsls	r3, r3, #31
   125cc:	d409      	bmi.n	125e2 <ctrl_rl_irk_idx+0x66>
   125ce:	4b07      	ldr	r3, [pc, #28]	; (125ec <ctrl_rl_irk_idx+0x70>)
   125d0:	9301      	str	r3, [sp, #4]
   125d2:	9300      	str	r3, [sp, #0]
   125d4:	4b06      	ldr	r3, [pc, #24]	; (125f0 <ctrl_rl_irk_idx+0x74>)
   125d6:	4a07      	ldr	r2, [pc, #28]	; (125f4 <ctrl_rl_irk_idx+0x78>)
   125d8:	681c      	ldr	r4, [r3, #0]
   125da:	4907      	ldr	r1, [pc, #28]	; (125f8 <ctrl_rl_irk_idx+0x7c>)
   125dc:	4b07      	ldr	r3, [pc, #28]	; (125fc <ctrl_rl_irk_idx+0x80>)
   125de:	480c      	ldr	r0, [pc, #48]	; (12610 <ctrl_rl_irk_idx+0x94>)
   125e0:	e7da      	b.n	12598 <ctrl_rl_irk_idx+0x1c>
}
   125e2:	b002      	add	sp, #8
   125e4:	bd10      	pop	{r4, pc}
   125e6:	bf00      	nop
   125e8:	2000122a 	.word	0x2000122a
   125ec:	000161ba 	.word	0x000161ba
   125f0:	20003a5c 	.word	0x20003a5c
   125f4:	000179e1 	.word	0x000179e1
   125f8:	00017a29 	.word	0x00017a29
   125fc:	0001a5ec 	.word	0x0001a5ec
   12600:	0001a88a 	.word	0x0001a88a
   12604:	2000122b 	.word	0x2000122b
   12608:	0001a8c8 	.word	0x0001a8c8
   1260c:	200012b4 	.word	0x200012b4
   12610:	0001a85d 	.word	0x0001a85d

00012614 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   12614:	2807      	cmp	r0, #7
{
   12616:	b513      	push	{r0, r1, r4, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   12618:	d819      	bhi.n	1264e <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   1261a:	2328      	movs	r3, #40	; 0x28
   1261c:	4358      	muls	r0, r3
   1261e:	4b0d      	ldr	r3, [pc, #52]	; (12654 <ctrl_irk_whitelisted+0x40>)
   12620:	5c18      	ldrb	r0, [r3, r0]
   12622:	07c3      	lsls	r3, r0, #31
   12624:	d40f      	bmi.n	12646 <ctrl_irk_whitelisted+0x32>
   12626:	4b0c      	ldr	r3, [pc, #48]	; (12658 <ctrl_irk_whitelisted+0x44>)
   12628:	9301      	str	r3, [sp, #4]
   1262a:	9300      	str	r3, [sp, #0]
   1262c:	4b0b      	ldr	r3, [pc, #44]	; (1265c <ctrl_irk_whitelisted+0x48>)
   1262e:	4a0c      	ldr	r2, [pc, #48]	; (12660 <ctrl_irk_whitelisted+0x4c>)
   12630:	681c      	ldr	r4, [r3, #0]
   12632:	490c      	ldr	r1, [pc, #48]	; (12664 <ctrl_irk_whitelisted+0x50>)
   12634:	4b0c      	ldr	r3, [pc, #48]	; (12668 <ctrl_irk_whitelisted+0x54>)
   12636:	480d      	ldr	r0, [pc, #52]	; (1266c <ctrl_irk_whitelisted+0x58>)
   12638:	47a0      	blx	r4
   1263a:	4040      	eors	r0, r0
   1263c:	f380 8811 	msr	BASEPRI, r0
   12640:	f04f 0004 	mov.w	r0, #4
   12644:	df02      	svc	2
	return rl[rl_idx].wl;
   12646:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1264a:	b002      	add	sp, #8
   1264c:	bd10      	pop	{r4, pc}
		return false;
   1264e:	2000      	movs	r0, #0
   12650:	e7fb      	b.n	1264a <ctrl_irk_whitelisted+0x36>
   12652:	bf00      	nop
   12654:	200012b4 	.word	0x200012b4
   12658:	000161ba 	.word	0x000161ba
   1265c:	20003a5c 	.word	0x20003a5c
   12660:	000179e1 	.word	0x000179e1
   12664:	00017a29 	.word	0x00017a29
   12668:	0001a5fc 	.word	0x0001a5fc
   1266c:	0001a65a 	.word	0x0001a65a

00012670 <ctrl_filter_get>:
}
   12670:	4b03      	ldr	r3, [pc, #12]	; (12680 <ctrl_filter_get+0x10>)
   12672:	4a04      	ldr	r2, [pc, #16]	; (12684 <ctrl_filter_get+0x14>)
   12674:	2800      	cmp	r0, #0
   12676:	bf14      	ite	ne
   12678:	4610      	movne	r0, r2
   1267a:	4618      	moveq	r0, r3
   1267c:	4770      	bx	lr
   1267e:	bf00      	nop
   12680:	200013f5 	.word	0x200013f5
   12684:	20001467 	.word	0x20001467

00012688 <ll_wl_size_get>:
   12688:	2008      	movs	r0, #8
   1268a:	4770      	bx	lr

0001268c <ll_wl_clear>:
{
   1268c:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1268e:	f7fe fd3f 	bl	11110 <radio_adv_filter_pol_get>
   12692:	4604      	mov	r4, r0
   12694:	b110      	cbz	r0, 1269c <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12696:	240c      	movs	r4, #12
}
   12698:	4620      	mov	r0, r4
   1269a:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1269c:	f7fe fd5a 	bl	11154 <radio_scan_filter_pol_get>
   126a0:	07c3      	lsls	r3, r0, #31
   126a2:	d4f8      	bmi.n	12696 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   126a4:	4a07      	ldr	r2, [pc, #28]	; (126c4 <ll_wl_clear+0x38>)
   126a6:	4623      	mov	r3, r4
   126a8:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   126ac:	f36f 0100 	bfc	r1, #0, #1
   126b0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   126b4:	3301      	adds	r3, #1
   126b6:	2b08      	cmp	r3, #8
   126b8:	d1f6      	bne.n	126a8 <ll_wl_clear+0x1c>
	wl_anon = 0;
   126ba:	4b03      	ldr	r3, [pc, #12]	; (126c8 <ll_wl_clear+0x3c>)
   126bc:	2200      	movs	r2, #0
   126be:	701a      	strb	r2, [r3, #0]
	return 0;
   126c0:	e7ea      	b.n	12698 <ll_wl_clear+0xc>
   126c2:	bf00      	nop
   126c4:	20001427 	.word	0x20001427
   126c8:	20001918 	.word	0x20001918

000126cc <ll_wl_remove>:
{
   126cc:	b538      	push	{r3, r4, r5, lr}
   126ce:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   126d0:	f7fe fd1e 	bl	11110 <radio_adv_filter_pol_get>
   126d4:	4604      	mov	r4, r0
   126d6:	b110      	cbz	r0, 126de <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   126d8:	240c      	movs	r4, #12
}
   126da:	4620      	mov	r0, r4
   126dc:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   126de:	f7fe fd39 	bl	11154 <radio_scan_filter_pol_get>
   126e2:	07c3      	lsls	r3, r0, #31
   126e4:	d4f8      	bmi.n	126d8 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   126e6:	7828      	ldrb	r0, [r5, #0]
   126e8:	28ff      	cmp	r0, #255	; 0xff
   126ea:	d102      	bne.n	126f2 <ll_wl_remove+0x26>
		wl_anon = 0;
   126ec:	4b0f      	ldr	r3, [pc, #60]	; (1272c <ll_wl_remove+0x60>)
   126ee:	701c      	strb	r4, [r3, #0]
		return 0;
   126f0:	e7f3      	b.n	126da <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   126f2:	4622      	mov	r2, r4
   126f4:	1c69      	adds	r1, r5, #1
   126f6:	f7ff fdf9 	bl	122ec <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   126fa:	2807      	cmp	r0, #7
   126fc:	d813      	bhi.n	12726 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   126fe:	4b0c      	ldr	r3, [pc, #48]	; (12730 <ll_wl_remove+0x64>)
   12700:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   12704:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   12706:	2d07      	cmp	r5, #7
   12708:	d806      	bhi.n	12718 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1270a:	2228      	movs	r2, #40	; 0x28
   1270c:	4909      	ldr	r1, [pc, #36]	; (12734 <ll_wl_remove+0x68>)
   1270e:	436a      	muls	r2, r5
   12710:	5c8d      	ldrb	r5, [r1, r2]
   12712:	f364 1545 	bfi	r5, r4, #5, #1
   12716:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   12718:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1271c:	f36f 0200 	bfc	r2, #0, #1
   12720:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   12724:	e7d9      	b.n	126da <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12726:	2402      	movs	r4, #2
   12728:	e7d7      	b.n	126da <ll_wl_remove+0xe>
   1272a:	bf00      	nop
   1272c:	20001918 	.word	0x20001918
   12730:	20001427 	.word	0x20001427
   12734:	200012b4 	.word	0x200012b4

00012738 <ll_filters_scan_update>:
{
   12738:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1273a:	4b0d      	ldr	r3, [pc, #52]	; (12770 <ll_filters_scan_update+0x38>)
   1273c:	2200      	movs	r2, #0
   1273e:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   12740:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   12742:	07c3      	lsls	r3, r0, #31
   12744:	d504      	bpl.n	12750 <ll_filters_scan_update+0x18>
   12746:	f7fe fce3 	bl	11110 <radio_adv_filter_pol_get>
   1274a:	b908      	cbnz	r0, 12750 <ll_filters_scan_update+0x18>
		filter_wl_update();
   1274c:	f7ff fe00 	bl	12350 <filter_wl_update>
	filter->enable_bitmask = 0;
   12750:	4b08      	ldr	r3, [pc, #32]	; (12774 <ll_filters_scan_update+0x3c>)
   12752:	2200      	movs	r2, #0
   12754:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   12756:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   12758:	4b07      	ldr	r3, [pc, #28]	; (12778 <ll_filters_scan_update+0x40>)
   1275a:	781b      	ldrb	r3, [r3, #0]
   1275c:	b133      	cbz	r3, 1276c <ll_filters_scan_update+0x34>
   1275e:	f7fe fccf 	bl	11100 <ll_adv_is_enabled>
   12762:	b918      	cbnz	r0, 1276c <ll_filters_scan_update+0x34>
}
   12764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   12768:	f7ff be68 	b.w	1243c <filter_rl_update>
   1276c:	bd08      	pop	{r3, pc}
   1276e:	bf00      	nop
   12770:	20001467 	.word	0x20001467
   12774:	200013f5 	.word	0x200013f5
   12778:	200013f4 	.word	0x200013f4

0001277c <ll_rl_find>:
{
   1277c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12780:	468a      	mov	sl, r1
	if (free) {
   12782:	4614      	mov	r4, r2
   12784:	b10a      	cbz	r2, 1278a <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   12786:	23ff      	movs	r3, #255	; 0xff
   12788:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1278a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 127e0 <ll_rl_find+0x64>
{
   1278e:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12790:	f000 0901 	and.w	r9, r0, #1
   12794:	2628      	movs	r6, #40	; 0x28
   12796:	436e      	muls	r6, r5
   12798:	b2ef      	uxtb	r7, r5
   1279a:	f818 3006 	ldrb.w	r3, [r8, r6]
   1279e:	07da      	lsls	r2, r3, #31
   127a0:	d51a      	bpl.n	127d8 <ll_rl_find+0x5c>
   127a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   127a6:	454b      	cmp	r3, r9
   127a8:	d10f      	bne.n	127ca <ll_rl_find+0x4e>
   127aa:	1c70      	adds	r0, r6, #1
   127ac:	2206      	movs	r2, #6
   127ae:	4651      	mov	r1, sl
   127b0:	4440      	add	r0, r8
   127b2:	f7ef fb48 	bl	1e46 <memcmp>
   127b6:	b160      	cbz	r0, 127d2 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   127b8:	b13c      	cbz	r4, 127ca <ll_rl_find+0x4e>
   127ba:	f818 3006 	ldrb.w	r3, [r8, r6]
   127be:	07db      	lsls	r3, r3, #31
   127c0:	d403      	bmi.n	127ca <ll_rl_find+0x4e>
   127c2:	7823      	ldrb	r3, [r4, #0]
   127c4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   127c6:	bf08      	it	eq
   127c8:	7027      	strbeq	r7, [r4, #0]
   127ca:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   127cc:	2d08      	cmp	r5, #8
   127ce:	d1e1      	bne.n	12794 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   127d0:	27ff      	movs	r7, #255	; 0xff
}
   127d2:	4638      	mov	r0, r7
   127d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   127d8:	2c00      	cmp	r4, #0
   127da:	d1f2      	bne.n	127c2 <ll_rl_find+0x46>
   127dc:	e7f5      	b.n	127ca <ll_rl_find+0x4e>
   127de:	bf00      	nop
   127e0:	200012b4 	.word	0x200012b4

000127e4 <ll_wl_add>:
{
   127e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   127e8:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   127ea:	f7fe fc91 	bl	11110 <radio_adv_filter_pol_get>
   127ee:	4605      	mov	r5, r0
   127f0:	b120      	cbz	r0, 127fc <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   127f2:	250c      	movs	r5, #12
}
   127f4:	4628      	mov	r0, r5
   127f6:	b002      	add	sp, #8
   127f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   127fc:	f7fe fcaa 	bl	11154 <radio_scan_filter_pol_get>
   12800:	07c3      	lsls	r3, r0, #31
   12802:	d4f6      	bmi.n	127f2 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   12804:	7838      	ldrb	r0, [r7, #0]
   12806:	28ff      	cmp	r0, #255	; 0xff
   12808:	d103      	bne.n	12812 <ll_wl_add+0x2e>
		wl_anon = 1;
   1280a:	4b1f      	ldr	r3, [pc, #124]	; (12888 <ll_wl_add+0xa4>)
   1280c:	2201      	movs	r2, #1
   1280e:	701a      	strb	r2, [r3, #0]
		return 0;
   12810:	e7f0      	b.n	127f4 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   12812:	f107 0801 	add.w	r8, r7, #1
   12816:	f10d 0207 	add.w	r2, sp, #7
   1281a:	4641      	mov	r1, r8
   1281c:	f7ff fd66 	bl	122ec <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   12820:	2807      	cmp	r0, #7
   12822:	d92d      	bls.n	12880 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   12824:	f89d 6007 	ldrb.w	r6, [sp, #7]
   12828:	2e07      	cmp	r6, #7
   1282a:	d82b      	bhi.n	12884 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1282c:	4c17      	ldr	r4, [pc, #92]	; (1288c <ll_wl_add+0xa8>)
   1282e:	783a      	ldrb	r2, [r7, #0]
   12830:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   12834:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   12838:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   1283c:	4641      	mov	r1, r8
   1283e:	2206      	movs	r2, #6
   12840:	3002      	adds	r0, #2
   12842:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   12846:	f7ef fb13 	bl	1e70 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1284a:	462a      	mov	r2, r5
   1284c:	4641      	mov	r1, r8
   1284e:	7838      	ldrb	r0, [r7, #0]
   12850:	f7ff ff94 	bl	1277c <ll_rl_find>
   12854:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   12856:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   12858:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   1285a:	d80e      	bhi.n	1287a <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   1285c:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1285e:	2328      	movs	r3, #40	; 0x28
   12860:	4a0b      	ldr	r2, [pc, #44]	; (12890 <ll_wl_add+0xac>)
   12862:	4358      	muls	r0, r3
   12864:	5c13      	ldrb	r3, [r2, r0]
   12866:	f043 0320 	orr.w	r3, r3, #32
   1286a:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   1286c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   12870:	f043 0301 	orr.w	r3, r3, #1
   12874:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   12878:	e7bc      	b.n	127f4 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1287a:	22ff      	movs	r2, #255	; 0xff
   1287c:	705a      	strb	r2, [r3, #1]
   1287e:	e7f5      	b.n	1286c <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   12880:	2512      	movs	r5, #18
   12882:	e7b7      	b.n	127f4 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12884:	2507      	movs	r5, #7
	return wl_add(addr);
   12886:	e7b5      	b.n	127f4 <ll_wl_add+0x10>
   12888:	20001918 	.word	0x20001918
   1288c:	20001427 	.word	0x20001427
   12890:	200012b4 	.word	0x200012b4

00012894 <ctrl_rl_idx_allowed>:
{
   12894:	b513      	push	{r0, r1, r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   12896:	4b12      	ldr	r3, [pc, #72]	; (128e0 <ctrl_rl_idx_allowed+0x4c>)
   12898:	781b      	ldrb	r3, [r3, #0]
   1289a:	b1f3      	cbz	r3, 128da <ctrl_rl_idx_allowed+0x46>
   1289c:	2907      	cmp	r1, #7
   1289e:	d81c      	bhi.n	128da <ctrl_rl_idx_allowed+0x46>
   128a0:	b9d8      	cbnz	r0, 128da <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   128a2:	2328      	movs	r3, #40	; 0x28
   128a4:	4359      	muls	r1, r3
   128a6:	4b0f      	ldr	r3, [pc, #60]	; (128e4 <ctrl_rl_idx_allowed+0x50>)
   128a8:	5c58      	ldrb	r0, [r3, r1]
   128aa:	07c2      	lsls	r2, r0, #31
   128ac:	d40f      	bmi.n	128ce <ctrl_rl_idx_allowed+0x3a>
   128ae:	4b0e      	ldr	r3, [pc, #56]	; (128e8 <ctrl_rl_idx_allowed+0x54>)
   128b0:	9301      	str	r3, [sp, #4]
   128b2:	9300      	str	r3, [sp, #0]
   128b4:	4b0d      	ldr	r3, [pc, #52]	; (128ec <ctrl_rl_idx_allowed+0x58>)
   128b6:	4a0e      	ldr	r2, [pc, #56]	; (128f0 <ctrl_rl_idx_allowed+0x5c>)
   128b8:	681c      	ldr	r4, [r3, #0]
   128ba:	490e      	ldr	r1, [pc, #56]	; (128f4 <ctrl_rl_idx_allowed+0x60>)
   128bc:	4b0e      	ldr	r3, [pc, #56]	; (128f8 <ctrl_rl_idx_allowed+0x64>)
   128be:	480f      	ldr	r0, [pc, #60]	; (128fc <ctrl_rl_idx_allowed+0x68>)
   128c0:	47a0      	blx	r4
   128c2:	4040      	eors	r0, r0
   128c4:	f380 8811 	msr	BASEPRI, r0
   128c8:	f04f 0004 	mov.w	r0, #4
   128cc:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   128ce:	0743      	lsls	r3, r0, #29
   128d0:	d503      	bpl.n	128da <ctrl_rl_idx_allowed+0x46>
   128d2:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   128d6:	b002      	add	sp, #8
   128d8:	bd10      	pop	{r4, pc}
		return true;
   128da:	2001      	movs	r0, #1
   128dc:	e7fb      	b.n	128d6 <ctrl_rl_idx_allowed+0x42>
   128de:	bf00      	nop
   128e0:	200013f4 	.word	0x200013f4
   128e4:	200012b4 	.word	0x200012b4
   128e8:	000161ba 	.word	0x000161ba
   128ec:	20003a5c 	.word	0x20003a5c
   128f0:	000179e1 	.word	0x000179e1
   128f4:	00017a29 	.word	0x00017a29
   128f8:	0001a611 	.word	0x0001a611
   128fc:	0001a65a 	.word	0x0001a65a

00012900 <ll_rl_id_addr_get>:
{
   12900:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12902:	2b07      	cmp	r3, #7
{
   12904:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12906:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12908:	d90f      	bls.n	1292a <ll_rl_id_addr_get+0x2a>
   1290a:	4b17      	ldr	r3, [pc, #92]	; (12968 <ll_rl_id_addr_get+0x68>)
   1290c:	9301      	str	r3, [sp, #4]
   1290e:	9300      	str	r3, [sp, #0]
   12910:	4b16      	ldr	r3, [pc, #88]	; (1296c <ll_rl_id_addr_get+0x6c>)
   12912:	4a17      	ldr	r2, [pc, #92]	; (12970 <ll_rl_id_addr_get+0x70>)
   12914:	681c      	ldr	r4, [r3, #0]
   12916:	4917      	ldr	r1, [pc, #92]	; (12974 <ll_rl_id_addr_get+0x74>)
   12918:	4b17      	ldr	r3, [pc, #92]	; (12978 <ll_rl_id_addr_get+0x78>)
   1291a:	4818      	ldr	r0, [pc, #96]	; (1297c <ll_rl_id_addr_get+0x7c>)
	LL_ASSERT(rl[rl_idx].taken);
   1291c:	47a0      	blx	r4
   1291e:	4040      	eors	r0, r0
   12920:	f380 8811 	msr	BASEPRI, r0
   12924:	f04f 0004 	mov.w	r0, #4
   12928:	df02      	svc	2
   1292a:	2528      	movs	r5, #40	; 0x28
   1292c:	4c14      	ldr	r4, [pc, #80]	; (12980 <ll_rl_id_addr_get+0x80>)
   1292e:	fb05 f203 	mul.w	r2, r5, r3
   12932:	5ca2      	ldrb	r2, [r4, r2]
   12934:	f012 0f01 	tst.w	r2, #1
   12938:	d109      	bne.n	1294e <ll_rl_id_addr_get+0x4e>
   1293a:	4b0b      	ldr	r3, [pc, #44]	; (12968 <ll_rl_id_addr_get+0x68>)
   1293c:	9301      	str	r3, [sp, #4]
   1293e:	9300      	str	r3, [sp, #0]
   12940:	4b0a      	ldr	r3, [pc, #40]	; (1296c <ll_rl_id_addr_get+0x6c>)
   12942:	4a0b      	ldr	r2, [pc, #44]	; (12970 <ll_rl_id_addr_get+0x70>)
   12944:	681c      	ldr	r4, [r3, #0]
   12946:	490b      	ldr	r1, [pc, #44]	; (12974 <ll_rl_id_addr_get+0x74>)
   12948:	4b0b      	ldr	r3, [pc, #44]	; (12978 <ll_rl_id_addr_get+0x78>)
   1294a:	480e      	ldr	r0, [pc, #56]	; (12984 <ll_rl_id_addr_get+0x84>)
   1294c:	e7e6      	b.n	1291c <ll_rl_id_addr_get+0x1c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1294e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   12952:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   12954:	fb05 4103 	mla	r1, r5, r3, r4
   12958:	2206      	movs	r2, #6
   1295a:	3101      	adds	r1, #1
}
   1295c:	b003      	add	sp, #12
   1295e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   12962:	f7ef ba85 	b.w	1e70 <memcpy>
   12966:	bf00      	nop
   12968:	000161ba 	.word	0x000161ba
   1296c:	20003a5c 	.word	0x20003a5c
   12970:	000179e1 	.word	0x000179e1
   12974:	00017a29 	.word	0x00017a29
   12978:	0001a625 	.word	0x0001a625
   1297c:	0001a8ef 	.word	0x0001a8ef
   12980:	200012b4 	.word	0x200012b4
   12984:	0001a65a 	.word	0x0001a65a

00012988 <ctrl_rl_addr_allowed>:
{
   12988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1298c:	4b1a      	ldr	r3, [pc, #104]	; (129f8 <ctrl_rl_addr_allowed+0x70>)
   1298e:	781b      	ldrb	r3, [r3, #0]
   12990:	b37b      	cbz	r3, 129f2 <ctrl_rl_addr_allowed+0x6a>
   12992:	7813      	ldrb	r3, [r2, #0]
   12994:	2bff      	cmp	r3, #255	; 0xff
   12996:	d12c      	bne.n	129f2 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   12998:	4e18      	ldr	r6, [pc, #96]	; (129fc <ctrl_rl_addr_allowed+0x74>)
   1299a:	2400      	movs	r4, #0
   1299c:	f04f 0828 	mov.w	r8, #40	; 0x28
   129a0:	46b6      	mov	lr, r6
   129a2:	fb08 f304 	mul.w	r3, r8, r4
   129a6:	fa5f fc84 	uxtb.w	ip, r4
   129aa:	5cf7      	ldrb	r7, [r6, r3]
   129ac:	f017 0f01 	tst.w	r7, #1
   129b0:	eb06 0503 	add.w	r5, r6, r3
   129b4:	d01a      	beq.n	129ec <ctrl_rl_addr_allowed+0x64>
   129b6:	f3c7 1780 	ubfx	r7, r7, #6, #1
   129ba:	4287      	cmp	r7, r0
   129bc:	d116      	bne.n	129ec <ctrl_rl_addr_allowed+0x64>
   129be:	3306      	adds	r3, #6
   129c0:	1e4f      	subs	r7, r1, #1
   129c2:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   129c4:	f815 af01 	ldrb.w	sl, [r5, #1]!
   129c8:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   129cc:	45ca      	cmp	sl, r9
   129ce:	d10d      	bne.n	129ec <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   129d0:	429d      	cmp	r5, r3
   129d2:	d1f7      	bne.n	129c4 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   129d4:	2328      	movs	r3, #40	; 0x28
   129d6:	435c      	muls	r4, r3
				*rl_idx = i;
   129d8:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   129dc:	f81e 0004 	ldrb.w	r0, [lr, r4]
   129e0:	0743      	lsls	r3, r0, #29
   129e2:	d506      	bpl.n	129f2 <ctrl_rl_addr_allowed+0x6a>
   129e4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   129e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   129ec:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   129ee:	2c08      	cmp	r4, #8
   129f0:	d1d7      	bne.n	129a2 <ctrl_rl_addr_allowed+0x1a>
   129f2:	2001      	movs	r0, #1
}
   129f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   129f8:	200013f4 	.word	0x200013f4
   129fc:	200012b4 	.word	0x200012b4

00012a00 <ctrl_rl_addr_resolve>:
{
   12a00:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   12a02:	4c0d      	ldr	r4, [pc, #52]	; (12a38 <ctrl_rl_addr_resolve+0x38>)
   12a04:	7824      	ldrb	r4, [r4, #0]
   12a06:	b1a4      	cbz	r4, 12a32 <ctrl_rl_addr_resolve+0x32>
   12a08:	2a07      	cmp	r2, #7
   12a0a:	d812      	bhi.n	12a32 <ctrl_rl_addr_resolve+0x32>
   12a0c:	2528      	movs	r5, #40	; 0x28
   12a0e:	4c0b      	ldr	r4, [pc, #44]	; (12a3c <ctrl_rl_addr_resolve+0x3c>)
   12a10:	fb05 f602 	mul.w	r6, r5, r2
   12a14:	5da6      	ldrb	r6, [r4, r6]
   12a16:	0736      	lsls	r6, r6, #28
   12a18:	d50b      	bpl.n	12a32 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   12a1a:	b150      	cbz	r0, 12a32 <ctrl_rl_addr_resolve+0x32>
   12a1c:	794b      	ldrb	r3, [r1, #5]
   12a1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12a22:	2b40      	cmp	r3, #64	; 0x40
   12a24:	d105      	bne.n	12a32 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12a26:	fb05 4202 	mla	r2, r5, r2, r4
   12a2a:	1dd0      	adds	r0, r2, #7
}
   12a2c:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   12a2e:	f7ef bb34 	b.w	209a <bt_rpa_irk_matches>
}
   12a32:	2000      	movs	r0, #0
   12a34:	bc70      	pop	{r4, r5, r6}
   12a36:	4770      	bx	lr
   12a38:	200013f4 	.word	0x200013f4
   12a3c:	200012b4 	.word	0x200012b4

00012a40 <ctrl_rl_enabled>:
	return rl_enable;
   12a40:	4b02      	ldr	r3, [pc, #8]	; (12a4c <ctrl_rl_enabled+0xc>)
   12a42:	7818      	ldrb	r0, [r3, #0]
}
   12a44:	3000      	adds	r0, #0
   12a46:	bf18      	it	ne
   12a48:	2001      	movne	r0, #1
   12a4a:	4770      	bx	lr
   12a4c:	200013f4 	.word	0x200013f4

00012a50 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   12a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a54:	b08d      	sub	sp, #52	; 0x34
   12a56:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   12a58:	f002 fc54 	bl	15304 <_impl_k_uptime_get>
   12a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   12a60:	2c00      	cmp	r4, #0
   12a62:	d154      	bne.n	12b0e <ll_rl_rpa_update+0xbe>
   12a64:	4b45      	ldr	r3, [pc, #276]	; (12b7c <ll_rl_rpa_update+0x12c>)
   12a66:	e9d3 2300 	ldrd	r2, r3, [r3]
   12a6a:	1c5c      	adds	r4, r3, #1
   12a6c:	bf08      	it	eq
   12a6e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   12a72:	d04c      	beq.n	12b0e <ll_rl_rpa_update+0xbe>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   12a74:	1a80      	subs	r0, r0, r2
   12a76:	eb61 0103 	sbc.w	r1, r1, r3
   12a7a:	460b      	mov	r3, r1
   12a7c:	4940      	ldr	r1, [pc, #256]	; (12b80 <ll_rl_rpa_update+0x130>)
   12a7e:	4602      	mov	r2, r0
   12a80:	6808      	ldr	r0, [r1, #0]
   12a82:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   12a84:	4282      	cmp	r2, r0
   12a86:	418b      	sbcs	r3, r1
   12a88:	bfac      	ite	ge
   12a8a:	f04f 0801 	movge.w	r8, #1
   12a8e:	f04f 0800 	movlt.w	r8, #0
	BT_DBG("");
   12a92:	4f3c      	ldr	r7, [pc, #240]	; (12b84 <ll_rl_rpa_update+0x134>)
   12a94:	4d3c      	ldr	r5, [pc, #240]	; (12b88 <ll_rl_rpa_update+0x138>)
   12a96:	683c      	ldr	r4, [r7, #0]
   12a98:	4e3c      	ldr	r6, [pc, #240]	; (12b8c <ll_rl_rpa_update+0x13c>)
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   12a9a:	f002 fb83 	bl	151a4 <_impl_k_current_get>

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12a9e:	f1a5 0b07 	sub.w	fp, r5, #7
	BT_DBG("");
   12aa2:	9001      	str	r0, [sp, #4]
   12aa4:	9602      	str	r6, [sp, #8]
   12aa6:	9600      	str	r6, [sp, #0]
   12aa8:	4b39      	ldr	r3, [pc, #228]	; (12b90 <ll_rl_rpa_update+0x140>)
   12aaa:	4a3a      	ldr	r2, [pc, #232]	; (12b94 <ll_rl_rpa_update+0x144>)
   12aac:	493a      	ldr	r1, [pc, #232]	; (12b98 <ll_rl_rpa_update+0x148>)
   12aae:	483b      	ldr	r0, [pc, #236]	; (12b9c <ll_rl_rpa_update+0x14c>)
   12ab0:	47a0      	blx	r4
   12ab2:	46d9      	mov	r9, fp
   12ab4:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   12ab6:	2328      	movs	r3, #40	; 0x28
   12ab8:	4363      	muls	r3, r4
   12aba:	f81b 3003 	ldrb.w	r3, [fp, r3]
   12abe:	07d8      	lsls	r0, r3, #31
   12ac0:	d54c      	bpl.n	12b5c <ll_rl_rpa_update+0x10c>
   12ac2:	f1b8 0f00 	cmp.w	r8, #0
   12ac6:	d101      	bne.n	12acc <ll_rl_rpa_update+0x7c>
   12ac8:	0799      	lsls	r1, r3, #30
   12aca:	d447      	bmi.n	12b5c <ll_rl_rpa_update+0x10c>

			if (rl[i].pirk) {
   12acc:	2328      	movs	r3, #40	; 0x28
   12ace:	4363      	muls	r3, r4
   12ad0:	f819 3003 	ldrb.w	r3, [r9, r3]
   12ad4:	075a      	lsls	r2, r3, #29
   12ad6:	d51d      	bpl.n	12b14 <ll_rl_rpa_update+0xc4>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   12ad8:	7c29      	ldrb	r1, [r5, #16]
   12ada:	4b31      	ldr	r3, [pc, #196]	; (12ba0 <ll_rl_rpa_update+0x150>)
   12adc:	a808      	add	r0, sp, #32
   12ade:	eb03 1101 	add.w	r1, r3, r1, lsl #4
   12ae2:	f7ff fc81 	bl	123e8 <sys_memcpy_swap.constprop.2>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   12ae6:	f105 0117 	add.w	r1, r5, #23
   12aea:	a808      	add	r0, sp, #32
   12aec:	f7ef fae8 	bl	20c0 <bt_rpa_create>
				LL_ASSERT(!err);
   12af0:	b180      	cbz	r0, 12b14 <ll_rl_rpa_update+0xc4>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   12af2:	9601      	str	r6, [sp, #4]
   12af4:	9600      	str	r6, [sp, #0]
   12af6:	683c      	ldr	r4, [r7, #0]
   12af8:	4b25      	ldr	r3, [pc, #148]	; (12b90 <ll_rl_rpa_update+0x140>)
   12afa:	4a2a      	ldr	r2, [pc, #168]	; (12ba4 <ll_rl_rpa_update+0x154>)
   12afc:	4926      	ldr	r1, [pc, #152]	; (12b98 <ll_rl_rpa_update+0x148>)
   12afe:	482a      	ldr	r0, [pc, #168]	; (12ba8 <ll_rl_rpa_update+0x158>)
   12b00:	47a0      	blx	r4
   12b02:	4040      	eors	r0, r0
   12b04:	f380 8811 	msr	BASEPRI, r0
   12b08:	f04f 0004 	mov.w	r0, #4
   12b0c:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   12b0e:	f04f 0801 	mov.w	r8, #1
   12b12:	e7be      	b.n	12a92 <ll_rl_rpa_update+0x42>
			if (rl[i].lirk) {
   12b14:	2328      	movs	r3, #40	; 0x28
   12b16:	4363      	muls	r3, r4
   12b18:	f819 3003 	ldrb.w	r3, [r9, r3]
   12b1c:	071b      	lsls	r3, r3, #28
   12b1e:	d515      	bpl.n	12b4c <ll_rl_rpa_update+0xfc>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   12b20:	f10d 0a20 	add.w	sl, sp, #32
   12b24:	4651      	mov	r1, sl
   12b26:	4628      	mov	r0, r5
   12b28:	f7ef faca 	bl	20c0 <bt_rpa_create>
				LL_ASSERT(!err);
   12b2c:	2800      	cmp	r0, #0
   12b2e:	d1e0      	bne.n	12af2 <ll_rl_rpa_update+0xa2>
   12b30:	4b1e      	ldr	r3, [pc, #120]	; (12bac <ll_rl_rpa_update+0x15c>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   12b32:	f8c5 a01d 	str.w	sl, [r5, #29]
   12b36:	2206      	movs	r2, #6
   12b38:	fb02 3304 	mla	r3, r2, r4, r3
   12b3c:	4618      	mov	r0, r3
   12b3e:	4651      	mov	r1, sl
   12b40:	9307      	str	r3, [sp, #28]
   12b42:	f7ef f995 	bl	1e70 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   12b46:	9b07      	ldr	r3, [sp, #28]
   12b48:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   12b4c:	2328      	movs	r3, #40	; 0x28
   12b4e:	4363      	muls	r3, r4
   12b50:	f819 2003 	ldrb.w	r2, [r9, r3]
   12b54:	f042 0202 	orr.w	r2, r2, #2
   12b58:	f809 2003 	strb.w	r2, [r9, r3]
   12b5c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12b5e:	2c08      	cmp	r4, #8
   12b60:	f105 0528 	add.w	r5, r5, #40	; 0x28
   12b64:	d1a7      	bne.n	12ab6 <ll_rl_rpa_update+0x66>
		}
	}

	if (all) {
   12b66:	f1b8 0f00 	cmp.w	r8, #0
   12b6a:	d004      	beq.n	12b76 <ll_rl_rpa_update+0x126>
		rpa_last_ms = now;
   12b6c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   12b70:	4b02      	ldr	r3, [pc, #8]	; (12b7c <ll_rl_rpa_update+0x12c>)
   12b72:	e9c3 1200 	strd	r1, r2, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   12b76:	b00d      	add	sp, #52	; 0x34
   12b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b7c:	20001910 	.word	0x20001910
   12b80:	20001944 	.word	0x20001944
   12b84:	20003a5c 	.word	0x20003a5c
   12b88:	200012bb 	.word	0x200012bb
   12b8c:	000161ba 	.word	0x000161ba
   12b90:	0001a637 	.word	0x0001a637
   12b94:	0001697a 	.word	0x0001697a
   12b98:	00017a29 	.word	0x00017a29
   12b9c:	00017f9a 	.word	0x00017f9a
   12ba0:	20001233 	.word	0x20001233
   12ba4:	000179e1 	.word	0x000179e1
   12ba8:	0001a585 	.word	0x0001a585
   12bac:	200011fa 	.word	0x200011fa

00012bb0 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   12bb0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   12bb2:	2001      	movs	r0, #1
   12bb4:	f7ff ff4c 	bl	12a50 <ll_rl_rpa_update>
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <rpa_timeout+0x18>)
   12bba:	4904      	ldr	r1, [pc, #16]	; (12bcc <rpa_timeout+0x1c>)
   12bbc:	681a      	ldr	r2, [r3, #0]
   12bbe:	4804      	ldr	r0, [pc, #16]	; (12bd0 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   12bc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12bc4:	f002 bee6 	b.w	15994 <k_delayed_work_submit_to_queue>
   12bc8:	20001944 	.word	0x20001944
   12bcc:	2000191c 	.word	0x2000191c
   12bd0:	20001988 	.word	0x20001988

00012bd4 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   12bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12bd6:	4b11      	ldr	r3, [pc, #68]	; (12c1c <ll_adv_scan_state_cb+0x48>)
	if (!rl_enable) {
   12bd8:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   12bda:	b1b0      	cbz	r0, 12c0a <ll_adv_scan_state_cb+0x36>
	if (!rl_enable) {
   12bdc:	b1e3      	cbz	r3, 12c18 <ll_adv_scan_state_cb+0x44>
	BT_DBG("");
   12bde:	4b10      	ldr	r3, [pc, #64]	; (12c20 <ll_adv_scan_state_cb+0x4c>)
   12be0:	681c      	ldr	r4, [r3, #0]
   12be2:	f002 fadf 	bl	151a4 <_impl_k_current_get>
   12be6:	4b0f      	ldr	r3, [pc, #60]	; (12c24 <ll_adv_scan_state_cb+0x50>)
   12be8:	9302      	str	r3, [sp, #8]
   12bea:	9001      	str	r0, [sp, #4]
   12bec:	9300      	str	r3, [sp, #0]
   12bee:	4a0e      	ldr	r2, [pc, #56]	; (12c28 <ll_adv_scan_state_cb+0x54>)
   12bf0:	4b0e      	ldr	r3, [pc, #56]	; (12c2c <ll_adv_scan_state_cb+0x58>)
   12bf2:	490f      	ldr	r1, [pc, #60]	; (12c30 <ll_adv_scan_state_cb+0x5c>)
   12bf4:	480f      	ldr	r0, [pc, #60]	; (12c34 <ll_adv_scan_state_cb+0x60>)
   12bf6:	47a0      	blx	r4
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   12bf8:	4b0f      	ldr	r3, [pc, #60]	; (12c38 <ll_adv_scan_state_cb+0x64>)
   12bfa:	4910      	ldr	r1, [pc, #64]	; (12c3c <ll_adv_scan_state_cb+0x68>)
   12bfc:	681a      	ldr	r2, [r3, #0]
   12bfe:	4810      	ldr	r0, [pc, #64]	; (12c40 <ll_adv_scan_state_cb+0x6c>)
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
   12c00:	b004      	add	sp, #16
   12c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12c06:	f002 bec5 	b.w	15994 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   12c0a:	b12b      	cbz	r3, 12c18 <ll_adv_scan_state_cb+0x44>
	k_delayed_work_cancel(&rpa_work);
   12c0c:	480b      	ldr	r0, [pc, #44]	; (12c3c <ll_adv_scan_state_cb+0x68>)
}
   12c0e:	b004      	add	sp, #16
   12c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_cancel(&rpa_work);
   12c14:	f002 be5a 	b.w	158cc <k_delayed_work_cancel>
}
   12c18:	b004      	add	sp, #16
   12c1a:	bd10      	pop	{r4, pc}
   12c1c:	200013f4 	.word	0x200013f4
   12c20:	20003a5c 	.word	0x20003a5c
   12c24:	000161ba 	.word	0x000161ba
   12c28:	0001697a 	.word	0x0001697a
   12c2c:	0001a648 	.word	0x0001a648
   12c30:	00017a29 	.word	0x00017a29
   12c34:	00017f9a 	.word	0x00017f9a
   12c38:	20001944 	.word	0x20001944
   12c3c:	2000191c 	.word	0x2000191c
   12c40:	20001988 	.word	0x20001988

00012c44 <ll_rl_size_get>:

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   12c44:	2008      	movs	r0, #8
   12c46:	4770      	bx	lr

00012c48 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   12c48:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   12c4a:	f7ff fbc1 	bl	123d0 <rl_access_check.constprop.1>
   12c4e:	b178      	cbz	r0, 12c70 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   12c50:	4908      	ldr	r1, [pc, #32]	; (12c74 <ll_rl_clear+0x2c>)
   12c52:	2300      	movs	r3, #0
   12c54:	2428      	movs	r4, #40	; 0x28
   12c56:	fb04 f203 	mul.w	r2, r4, r3
   12c5a:	3301      	adds	r3, #1
   12c5c:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12c5e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12c60:	f36f 0000 	bfc	r0, #0, #1
   12c64:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12c66:	d1f6      	bne.n	12c56 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   12c68:	4b03      	ldr	r3, [pc, #12]	; (12c78 <ll_rl_clear+0x30>)
   12c6a:	2000      	movs	r0, #0
   12c6c:	7018      	strb	r0, [r3, #0]
   12c6e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12c70:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   12c72:	bd10      	pop	{r4, pc}
   12c74:	200012b4 	.word	0x200012b4
   12c78:	2000122a 	.word	0x2000122a

00012c7c <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   12c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c80:	b085      	sub	sp, #20
   12c82:	4607      	mov	r7, r0
   12c84:	468a      	mov	sl, r1
   12c86:	4691      	mov	r9, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   12c88:	f7ff fba2 	bl	123d0 <rl_access_check.constprop.1>
   12c8c:	2800      	cmp	r0, #0
   12c8e:	f000 8087 	beq.w	12da0 <ll_rl_add+0x124>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   12c92:	f107 0801 	add.w	r8, r7, #1
   12c96:	f10d 020f 	add.w	r2, sp, #15
   12c9a:	4641      	mov	r1, r8
   12c9c:	7838      	ldrb	r0, [r7, #0]
   12c9e:	f7ff fd6d 	bl	1277c <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   12ca2:	2807      	cmp	r0, #7
   12ca4:	d97e      	bls.n	12da4 <ll_rl_add+0x128>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   12ca6:	f89d 500f 	ldrb.w	r5, [sp, #15]
   12caa:	2d07      	cmp	r5, #7
   12cac:	d87c      	bhi.n	12da8 <ll_rl_add+0x12c>
   12cae:	eb05 0685 	add.w	r6, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12cb2:	4c3e      	ldr	r4, [pc, #248]	; (12dac <ll_rl_add+0x130>)
   12cb4:	00f6      	lsls	r6, r6, #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   12cb6:	f04f 0b28 	mov.w	fp, #40	; 0x28
   12cba:	fb0b fb05 	mul.w	fp, fp, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12cbe:	1c70      	adds	r0, r6, #1
   12cc0:	2206      	movs	r2, #6
   12cc2:	4641      	mov	r1, r8
   12cc4:	4420      	add	r0, r4
   12cc6:	f7ef f8d3 	bl	1e70 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   12cca:	7839      	ldrb	r1, [r7, #0]
   12ccc:	f814 200b 	ldrb.w	r2, [r4, fp]
   12cd0:	eb04 030b 	add.w	r3, r4, fp
   12cd4:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12cd8:	4650      	mov	r0, sl
   12cda:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   12cdc:	9301      	str	r3, [sp, #4]
   12cde:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12ce2:	f7f4 fee8 	bl	7ab6 <mem_nz>
   12ce6:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12cea:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12cec:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12cf0:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12cf2:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12cf6:	f7f4 fede 	bl	7ab6 <mem_nz>
   12cfa:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   12cfe:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d00:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   12d04:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12d08:	f804 200b 	strb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   12d0c:	d00c      	beq.n	12d28 <ll_rl_add+0xac>
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
   12d0e:	4928      	ldr	r1, [pc, #160]	; (12db0 <ll_rl_add+0x134>)
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   12d10:	4828      	ldr	r0, [pc, #160]	; (12db4 <ll_rl_add+0x138>)
		rl[i].pirk_idx = peer_irk_count;
   12d12:	780a      	ldrb	r2, [r1, #0]
   12d14:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   12d16:	4b28      	ldr	r3, [pc, #160]	; (12db8 <ll_rl_add+0x13c>)
   12d18:	549d      	strb	r5, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   12d1a:	1c53      	adds	r3, r2, #1
   12d1c:	700b      	strb	r3, [r1, #0]
   12d1e:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   12d22:	4651      	mov	r1, sl
   12d24:	f7ff fb60 	bl	123e8 <sys_memcpy_swap.constprop.2>
	}
	if (rl[i].lirk) {
   12d28:	2328      	movs	r3, #40	; 0x28
   12d2a:	436b      	muls	r3, r5
   12d2c:	eb04 0a03 	add.w	sl, r4, r3
   12d30:	5ce3      	ldrb	r3, [r4, r3]
   12d32:	071b      	lsls	r3, r3, #28
   12d34:	d508      	bpl.n	12d48 <ll_rl_add+0xcc>
		memcpy(rl[i].local_irk, lirk, 16);
   12d36:	1df0      	adds	r0, r6, #7
   12d38:	2210      	movs	r2, #16
   12d3a:	4649      	mov	r1, r9
   12d3c:	4420      	add	r0, r4
   12d3e:	f7ef f897 	bl	1e70 <memcpy>
		rl[i].local_rpa = NULL;
   12d42:	2300      	movs	r3, #0
   12d44:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   12d48:	f106 0018 	add.w	r0, r6, #24
	rl[i].rpas_ready = 0;
   12d4c:	2628      	movs	r6, #40	; 0x28
   12d4e:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   12d50:	2206      	movs	r2, #6
   12d52:	2100      	movs	r1, #0
   12d54:	4420      	add	r0, r4
   12d56:	f7ef f8b7 	bl	1ec8 <memset>
	rl[i].rpas_ready = 0;
   12d5a:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12d5c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12d60:	f36f 1304 	bfc	r3, #4, #1
   12d64:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12d66:	2200      	movs	r2, #0
   12d68:	4641      	mov	r1, r8
   12d6a:	7838      	ldrb	r0, [r7, #0]
   12d6c:	f7ff fabe 	bl	122ec <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   12d70:	2807      	cmp	r0, #7
   12d72:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   12d74:	bf9d      	ittte	ls
   12d76:	4a11      	ldrls	r2, [pc, #68]	; (12dbc <ll_rl_add+0x140>)
		rl[i].wl = 1;
   12d78:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   12d7c:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   12d80:	f36f 1345 	bfchi	r3, #5, #1
   12d84:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   12d86:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   12d8a:	bf98      	it	ls
   12d8c:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   12d8e:	435d      	muls	r5, r3

	return 0;
   12d90:	2000      	movs	r0, #0
	rl[i].taken = 1;
   12d92:	5d63      	ldrb	r3, [r4, r5]
   12d94:	f043 0301 	orr.w	r3, r3, #1
   12d98:	5563      	strb	r3, [r4, r5]
}
   12d9a:	b005      	add	sp, #20
   12d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12da0:	200c      	movs	r0, #12
   12da2:	e7fa      	b.n	12d9a <ll_rl_add+0x11e>
		return BT_HCI_ERR_INVALID_PARAM;
   12da4:	2012      	movs	r0, #18
   12da6:	e7f8      	b.n	12d9a <ll_rl_add+0x11e>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   12da8:	2007      	movs	r0, #7
   12daa:	e7f6      	b.n	12d9a <ll_rl_add+0x11e>
   12dac:	200012b4 	.word	0x200012b4
   12db0:	2000122a 	.word	0x2000122a
   12db4:	20001233 	.word	0x20001233
   12db8:	2000122b 	.word	0x2000122b
   12dbc:	20001427 	.word	0x20001427

00012dc0 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   12dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc4:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   12dc6:	f7ff fb03 	bl	123d0 <rl_access_check.constprop.1>
   12dca:	2800      	cmp	r0, #0
   12dcc:	d053      	beq.n	12e76 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12dce:	f109 0a01 	add.w	sl, r9, #1
   12dd2:	2200      	movs	r2, #0
   12dd4:	4651      	mov	r1, sl
   12dd6:	f899 0000 	ldrb.w	r0, [r9]
   12dda:	f7ff fccf 	bl	1277c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12dde:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12de0:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   12de2:	d84b      	bhi.n	12e7c <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   12de4:	f04f 0b28 	mov.w	fp, #40	; 0x28
   12de8:	4c26      	ldr	r4, [pc, #152]	; (12e84 <ll_rl_remove+0xc4>)
   12dea:	fb0b f300 	mul.w	r3, fp, r0
   12dee:	18e2      	adds	r2, r4, r3
   12df0:	5ce3      	ldrb	r3, [r4, r3]
   12df2:	075b      	lsls	r3, r3, #29
   12df4:	d524      	bpl.n	12e40 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12df6:	4e24      	ldr	r6, [pc, #144]	; (12e88 <ll_rl_remove+0xc8>)
   12df8:	7835      	ldrb	r5, [r6, #0]
   12dfa:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   12dfc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12e00:	d01b      	beq.n	12e3a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12e02:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   12e04:	42af      	cmp	r7, r5
   12e06:	d018      	beq.n	12e3a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   12e08:	4820      	ldr	r0, [pc, #128]	; (12e8c <ll_rl_remove+0xcc>)
   12e0a:	2210      	movs	r2, #16
   12e0c:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   12e10:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   12e14:	f7ef f82c 	bl	1e70 <memcpy>
   12e18:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   12e1a:	fb0b f103 	mul.w	r1, fp, r3
   12e1e:	1862      	adds	r2, r4, r1
   12e20:	5c61      	ldrb	r1, [r4, r1]
   12e22:	f011 0f01 	tst.w	r1, #1
   12e26:	b2d8      	uxtb	r0, r3
   12e28:	d021      	beq.n	12e6e <ll_rl_remove+0xae>
   12e2a:	0749      	lsls	r1, r1, #29
   12e2c:	d51f      	bpl.n	12e6e <ll_rl_remove+0xae>
   12e2e:	7dd1      	ldrb	r1, [r2, #23]
   12e30:	42a9      	cmp	r1, r5
   12e32:	d11c      	bne.n	12e6e <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   12e34:	4b16      	ldr	r3, [pc, #88]	; (12e90 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   12e36:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   12e38:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   12e3a:	7833      	ldrb	r3, [r6, #0]
   12e3c:	3b01      	subs	r3, #1
   12e3e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12e40:	2200      	movs	r2, #0
   12e42:	4651      	mov	r1, sl
   12e44:	f899 0000 	ldrb.w	r0, [r9]
   12e48:	f7ff fa50 	bl	122ec <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   12e4c:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   12e4e:	bf9f      	itttt	ls
   12e50:	4b10      	ldrls	r3, [pc, #64]	; (12e94 <ll_rl_remove+0xd4>)
   12e52:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   12e56:	23ff      	movls	r3, #255	; 0xff
   12e58:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   12e5a:	2028      	movs	r0, #40	; 0x28
   12e5c:	fb00 f008 	mul.w	r0, r0, r8
   12e60:	5c23      	ldrb	r3, [r4, r0]
   12e62:	f36f 0300 	bfc	r3, #0, #1
   12e66:	5423      	strb	r3, [r4, r0]
		return 0;
   12e68:	2000      	movs	r0, #0
   12e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e6e:	3301      	adds	r3, #1
				for (k = 0;
   12e70:	2b08      	cmp	r3, #8
   12e72:	d1d2      	bne.n	12e1a <ll_rl_remove+0x5a>
   12e74:	e7e1      	b.n	12e3a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12e76:	200c      	movs	r0, #12
   12e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12e7c:	2002      	movs	r0, #2
}
   12e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e82:	bf00      	nop
   12e84:	200012b4 	.word	0x200012b4
   12e88:	2000122a 	.word	0x2000122a
   12e8c:	20001233 	.word	0x20001233
   12e90:	2000122b 	.word	0x2000122b
   12e94:	20001427 	.word	0x20001427

00012e98 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   12e98:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   12e9a:	795c      	ldrb	r4, [r3, #5]
   12e9c:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   12ea0:	2c40      	cmp	r4, #64	; 0x40
{
   12ea2:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   12ea4:	d117      	bne.n	12ed6 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   12ea6:	b119      	cbz	r1, 12eb0 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   12ea8:	2200      	movs	r2, #0
   12eaa:	f7ff fc67 	bl	1277c <ll_rl_find>
   12eae:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   12eb0:	2a07      	cmp	r2, #7
   12eb2:	d810      	bhi.n	12ed6 <ll_rl_crpa_set+0x3e>
   12eb4:	2128      	movs	r1, #40	; 0x28
   12eb6:	4c08      	ldr	r4, [pc, #32]	; (12ed8 <ll_rl_crpa_set+0x40>)
   12eb8:	fb01 f302 	mul.w	r3, r1, r2
   12ebc:	5ce3      	ldrb	r3, [r4, r3]
   12ebe:	07db      	lsls	r3, r3, #31
   12ec0:	d509      	bpl.n	12ed6 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12ec2:	2018      	movs	r0, #24
   12ec4:	fb11 0002 	smlabb	r0, r1, r2, r0
   12ec8:	4420      	add	r0, r4
   12eca:	4629      	mov	r1, r5
   12ecc:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   12ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12ed2:	f7ee bfcd 	b.w	1e70 <memcpy>
   12ed6:	bd70      	pop	{r4, r5, r6, pc}
   12ed8:	200012b4 	.word	0x200012b4

00012edc <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   12edc:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12ede:	2200      	movs	r2, #0
{
   12ee0:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12ee2:	1c41      	adds	r1, r0, #1
   12ee4:	7800      	ldrb	r0, [r0, #0]
   12ee6:	f7ff fc49 	bl	1277c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   12eea:	2807      	cmp	r0, #7
   12eec:	d901      	bls.n	12ef2 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12eee:	2002      	movs	r0, #2
   12ef0:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   12ef2:	2428      	movs	r4, #40	; 0x28
   12ef4:	2318      	movs	r3, #24
   12ef6:	fb14 3000 	smlabb	r0, r4, r0, r3
   12efa:	4c07      	ldr	r4, [pc, #28]	; (12f18 <ll_rl_crpa_get+0x3c>)
   12efc:	4404      	add	r4, r0
   12efe:	2106      	movs	r1, #6
   12f00:	4620      	mov	r0, r4
   12f02:	f7f4 fdd8 	bl	7ab6 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   12f06:	2800      	cmp	r0, #0
   12f08:	d0f1      	beq.n	12eee <ll_rl_crpa_get+0x12>
   12f0a:	2206      	movs	r2, #6
   12f0c:	4621      	mov	r1, r4
   12f0e:	4628      	mov	r0, r5
   12f10:	f7ee ffae 	bl	1e70 <memcpy>
			return 0;
   12f14:	2000      	movs	r0, #0
}
   12f16:	bd38      	pop	{r3, r4, r5, pc}
   12f18:	200012b4 	.word	0x200012b4

00012f1c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   12f1c:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12f1e:	2200      	movs	r2, #0
{
   12f20:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12f22:	1c41      	adds	r1, r0, #1
   12f24:	7800      	ldrb	r0, [r0, #0]
   12f26:	f7ff fc29 	bl	1277c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12f2a:	2807      	cmp	r0, #7
   12f2c:	d80a      	bhi.n	12f44 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   12f2e:	4b06      	ldr	r3, [pc, #24]	; (12f48 <ll_rl_lrpa_get+0x2c>)
   12f30:	2228      	movs	r2, #40	; 0x28
   12f32:	fb02 3000 	mla	r0, r2, r0, r3
   12f36:	2206      	movs	r2, #6
   12f38:	6a41      	ldr	r1, [r0, #36]	; 0x24
   12f3a:	4620      	mov	r0, r4
   12f3c:	f7ee ff98 	bl	1e70 <memcpy>
		return 0;
   12f40:	2000      	movs	r0, #0
   12f42:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12f44:	2002      	movs	r0, #2
}
   12f46:	bd10      	pop	{r4, pc}
   12f48:	200012b4 	.word	0x200012b4

00012f4c <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   12f4c:	b510      	push	{r4, lr}
   12f4e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   12f50:	f7ff fa3e 	bl	123d0 <rl_access_check.constprop.1>
   12f54:	b140      	cbz	r0, 12f68 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   12f56:	b11c      	cbz	r4, 12f60 <ll_rl_enable+0x14>
   12f58:	2c01      	cmp	r4, #1
   12f5a:	d001      	beq.n	12f60 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   12f5c:	2012      	movs	r0, #18
	}

	return 0;
}
   12f5e:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   12f60:	4b02      	ldr	r3, [pc, #8]	; (12f6c <ll_rl_enable+0x20>)
   12f62:	701c      	strb	r4, [r3, #0]
	return 0;
   12f64:	2000      	movs	r0, #0
		break;
   12f66:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12f68:	200c      	movs	r0, #12
   12f6a:	bd10      	pop	{r4, pc}
   12f6c:	200013f4 	.word	0x200013f4

00012f70 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12f74:	4358      	muls	r0, r3
   12f76:	4b01      	ldr	r3, [pc, #4]	; (12f7c <ll_rl_timeout_set+0xc>)
   12f78:	6018      	str	r0, [r3, #0]
   12f7a:	4770      	bx	lr
   12f7c:	20001944 	.word	0x20001944

00012f80 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   12f80:	b538      	push	{r3, r4, r5, lr}
   12f82:	4605      	mov	r5, r0
   12f84:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   12f86:	f7ff fa23 	bl	123d0 <rl_access_check.constprop.1>
   12f8a:	b1d8      	cbz	r0, 12fc4 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12f8c:	2200      	movs	r2, #0
   12f8e:	1c69      	adds	r1, r5, #1
   12f90:	7828      	ldrb	r0, [r5, #0]
   12f92:	f7ff fbf3 	bl	1277c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12f96:	2807      	cmp	r0, #7
   12f98:	d816      	bhi.n	12fc8 <ll_priv_mode_set+0x48>
		switch (mode) {
   12f9a:	b11c      	cbz	r4, 12fa4 <ll_priv_mode_set+0x24>
   12f9c:	2c01      	cmp	r4, #1
   12f9e:	d00a      	beq.n	12fb6 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   12fa0:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   12fa2:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   12fa4:	2328      	movs	r3, #40	; 0x28
   12fa6:	4a09      	ldr	r2, [pc, #36]	; (12fcc <ll_priv_mode_set+0x4c>)
   12fa8:	4358      	muls	r0, r3
   12faa:	5c13      	ldrb	r3, [r2, r0]
   12fac:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   12fb0:	5413      	strb	r3, [r2, r0]
	return 0;
   12fb2:	2000      	movs	r0, #0
			break;
   12fb4:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   12fb6:	2328      	movs	r3, #40	; 0x28
   12fb8:	4a04      	ldr	r2, [pc, #16]	; (12fcc <ll_priv_mode_set+0x4c>)
   12fba:	4358      	muls	r0, r3
   12fbc:	5c13      	ldrb	r3, [r2, r0]
   12fbe:	f043 0310 	orr.w	r3, r3, #16
   12fc2:	e7f5      	b.n	12fb0 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12fc4:	200c      	movs	r0, #12
   12fc6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12fc8:	2002      	movs	r0, #2
   12fca:	bd38      	pop	{r3, r4, r5, pc}
   12fcc:	200012b4 	.word	0x200012b4

00012fd0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12fd0:	4a19      	ldr	r2, [pc, #100]	; (13038 <ll_filter_reset+0x68>)
   12fd2:	2300      	movs	r3, #0
{
   12fd4:	b430      	push	{r4, r5}
	wl_anon = 0;
   12fd6:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   12fd8:	4a18      	ldr	r2, [pc, #96]	; (1303c <ll_filter_reset+0x6c>)
   12fda:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12fde:	f36f 0100 	bfc	r1, #0, #1
   12fe2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   12fe6:	3301      	adds	r3, #1
   12fe8:	2b08      	cmp	r3, #8
   12fea:	d1f6      	bne.n	12fda <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   12fec:	4a14      	ldr	r2, [pc, #80]	; (13040 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12fee:	4915      	ldr	r1, [pc, #84]	; (13044 <ll_filter_reset+0x74>)
	rl_enable = 0;
   12ff0:	2300      	movs	r3, #0
   12ff2:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12ff4:	4a14      	ldr	r2, [pc, #80]	; (13048 <ll_filter_reset+0x78>)
   12ff6:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   12ff8:	4a14      	ldr	r2, [pc, #80]	; (1304c <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   12ffa:	4915      	ldr	r1, [pc, #84]	; (13050 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   12ffc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13000:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13004:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   13008:	2528      	movs	r5, #40	; 0x28
   1300a:	fb05 f203 	mul.w	r2, r5, r3
   1300e:	3301      	adds	r3, #1
   13010:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   13012:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   13014:	f36f 0400 	bfc	r4, #0, #1
   13018:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1301a:	d1f6      	bne.n	1300a <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   1301c:	4b0d      	ldr	r3, [pc, #52]	; (13054 <ll_filter_reset+0x84>)
   1301e:	2200      	movs	r2, #0
   13020:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   13022:	b120      	cbz	r0, 1302e <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   13024:	490c      	ldr	r1, [pc, #48]	; (13058 <ll_filter_reset+0x88>)
   13026:	480d      	ldr	r0, [pc, #52]	; (1305c <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   13028:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1302a:	f002 bc3f 	b.w	158ac <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   1302e:	480b      	ldr	r0, [pc, #44]	; (1305c <ll_filter_reset+0x8c>)
}
   13030:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   13032:	f002 bc4b 	b.w	158cc <k_delayed_work_cancel>
   13036:	bf00      	nop
   13038:	20001918 	.word	0x20001918
   1303c:	20001427 	.word	0x20001427
   13040:	200013f4 	.word	0x200013f4
   13044:	000dbba0 	.word	0x000dbba0
   13048:	20001944 	.word	0x20001944
   1304c:	20001910 	.word	0x20001910
   13050:	200012b4 	.word	0x200012b4
   13054:	2000122a 	.word	0x2000122a
   13058:	00012bb1 	.word	0x00012bb1
   1305c:	2000191c 	.word	0x2000191c

00013060 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   13060:	4b05      	ldr	r3, [pc, #20]	; (13078 <cntr_init+0x18>)
   13062:	2200      	movs	r2, #0
   13064:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   13068:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1306c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   13070:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   13074:	4770      	bx	lr
   13076:	bf00      	nop
   13078:	4000b000 	.word	0x4000b000

0001307c <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   1307c:	4a04      	ldr	r2, [pc, #16]	; (13090 <cntr_start+0x14>)
   1307e:	7813      	ldrb	r3, [r2, #0]
   13080:	1c59      	adds	r1, r3, #1
   13082:	7011      	strb	r1, [r2, #0]
   13084:	2001      	movs	r0, #1
   13086:	b913      	cbnz	r3, 1308e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   13088:	4a02      	ldr	r2, [pc, #8]	; (13094 <cntr_start+0x18>)
   1308a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   1308c:	4618      	mov	r0, r3
}
   1308e:	4770      	bx	lr
   13090:	20001499 	.word	0x20001499
   13094:	4000b000 	.word	0x4000b000

00013098 <cntr_stop>:

u32_t cntr_stop(void)
{
   13098:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_refcount);
   1309a:	4b0f      	ldr	r3, [pc, #60]	; (130d8 <cntr_stop+0x40>)
   1309c:	7818      	ldrb	r0, [r3, #0]
   1309e:	b978      	cbnz	r0, 130c0 <cntr_stop+0x28>
   130a0:	4b0e      	ldr	r3, [pc, #56]	; (130dc <cntr_stop+0x44>)
   130a2:	9301      	str	r3, [sp, #4]
   130a4:	9300      	str	r3, [sp, #0]
   130a6:	4b0e      	ldr	r3, [pc, #56]	; (130e0 <cntr_stop+0x48>)
   130a8:	4a0e      	ldr	r2, [pc, #56]	; (130e4 <cntr_stop+0x4c>)
   130aa:	681c      	ldr	r4, [r3, #0]
   130ac:	490e      	ldr	r1, [pc, #56]	; (130e8 <cntr_stop+0x50>)
   130ae:	4b0f      	ldr	r3, [pc, #60]	; (130ec <cntr_stop+0x54>)
   130b0:	480f      	ldr	r0, [pc, #60]	; (130f0 <cntr_stop+0x58>)
   130b2:	47a0      	blx	r4
   130b4:	4040      	eors	r0, r0
   130b6:	f380 8811 	msr	BASEPRI, r0
   130ba:	f04f 0004 	mov.w	r0, #4
   130be:	df02      	svc	2

	if (--_refcount) {
   130c0:	3801      	subs	r0, #1
   130c2:	b2c0      	uxtb	r0, r0
   130c4:	7018      	strb	r0, [r3, #0]
   130c6:	2301      	movs	r3, #1
   130c8:	b918      	cbnz	r0, 130d2 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   130ca:	4a0a      	ldr	r2, [pc, #40]	; (130f4 <cntr_stop+0x5c>)
   130cc:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   130ce:	b002      	add	sp, #8
   130d0:	bd10      	pop	{r4, pc}
		return 1;
   130d2:	4618      	mov	r0, r3
   130d4:	e7fb      	b.n	130ce <cntr_stop+0x36>
   130d6:	bf00      	nop
   130d8:	20001499 	.word	0x20001499
   130dc:	000161ba 	.word	0x000161ba
   130e0:	20003a5c 	.word	0x20003a5c
   130e4:	000179e1 	.word	0x000179e1
   130e8:	00017a29 	.word	0x00017a29
   130ec:	0001a9da 	.word	0x0001a9da
   130f0:	0001a9e4 	.word	0x0001a9e4
   130f4:	4000b000 	.word	0x4000b000

000130f8 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   130f8:	4b01      	ldr	r3, [pc, #4]	; (13100 <cntr_cnt_get+0x8>)
   130fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   130fe:	4770      	bx	lr
   13100:	4000b000 	.word	0x4000b000

00013104 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   13104:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13108:	4b01      	ldr	r3, [pc, #4]	; (13110 <cntr_cmp_set+0xc>)
   1310a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   1310e:	4770      	bx	lr
   13110:	4000b000 	.word	0x4000b000

00013114 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   13114:	4b11      	ldr	r3, [pc, #68]	; (1315c <do_ecb+0x48>)
{
   13116:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   13118:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1311a:	2500      	movs	r5, #0
   1311c:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   1311e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   13120:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   13124:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   13128:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   1312c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1312e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   13132:	b934      	cbnz	r4, 13142 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   13134:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   13138:	b91c      	cbnz	r4, 13142 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1313a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1313e:	2c00      	cmp	r4, #0
   13140:	d1f5      	bne.n	1312e <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   13142:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   13144:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   13148:	2c00      	cmp	r4, #0
   1314a:	d1e8      	bne.n	1311e <do_ecb+0xa>
   1314c:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   13150:	2e00      	cmp	r6, #0
   13152:	d0e4      	beq.n	1311e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   13154:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   13158:	bd70      	pop	{r4, r5, r6, pc}
   1315a:	bf00      	nop
   1315c:	4000e000 	.word	0x4000e000

00013160 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   13160:	b570      	push	{r4, r5, r6, lr}
   13162:	b08c      	sub	sp, #48	; 0x30
   13164:	460e      	mov	r6, r1
   13166:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   13168:	4601      	mov	r1, r0
   1316a:	2210      	movs	r2, #16
   1316c:	4668      	mov	r0, sp
{
   1316e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   13170:	f7f4 fc92 	bl	7a98 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   13174:	2210      	movs	r2, #16
   13176:	eb0d 0002 	add.w	r0, sp, r2
   1317a:	4631      	mov	r1, r6
   1317c:	f7f4 fc8c 	bl	7a98 <mem_rcopy>

	do_ecb(&ecb);
   13180:	4668      	mov	r0, sp
   13182:	f7ff ffc7 	bl	13114 <do_ecb>

	if (cipher_text_le) {
   13186:	b125      	cbz	r5, 13192 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   13188:	2210      	movs	r2, #16
   1318a:	a908      	add	r1, sp, #32
   1318c:	4628      	mov	r0, r5
   1318e:	f7f4 fc83 	bl	7a98 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   13192:	b124      	cbz	r4, 1319e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   13194:	2210      	movs	r2, #16
   13196:	a908      	add	r1, sp, #32
   13198:	4620      	mov	r0, r4
   1319a:	f7ee fe69 	bl	1e70 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1319e:	b00c      	add	sp, #48	; 0x30
   131a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000131a4 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   131a4:	4b07      	ldr	r3, [pc, #28]	; (131c4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   131a6:	4a08      	ldr	r2, [pc, #32]	; (131c8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   131a8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   131ac:	4907      	ldr	r1, [pc, #28]	; (131cc <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   131ae:	4a08      	ldr	r2, [pc, #32]	; (131d0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   131b0:	2800      	cmp	r0, #0
   131b2:	bf14      	ite	ne
   131b4:	4610      	movne	r0, r2
   131b6:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   131b8:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   131ba:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   131be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   131c2:	4770      	bx	lr
   131c4:	4001f000 	.word	0x4001f000
   131c8:	40008140 	.word	0x40008140
   131cc:	40001004 	.word	0x40001004
   131d0:	40001000 	.word	0x40001000

000131d4 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   131d4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   131d6:	4e2c      	ldr	r6, [pc, #176]	; (13288 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   131d8:	4f2c      	ldr	r7, [pc, #176]	; (1328c <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   131da:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   131dc:	4b2c      	ldr	r3, [pc, #176]	; (13290 <sw_switch.isra.9+0xbc>)
   131de:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   131e2:	b22b      	sxth	r3, r5
   131e4:	00dc      	lsls	r4, r3, #3
   131e6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   131ea:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   131ee:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   131f2:	f105 040b 	add.w	r4, r5, #11
   131f6:	b2e4      	uxtb	r4, r4
   131f8:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   131fa:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   131fe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   13202:	3fc0      	subs	r7, #192	; 0xc0
   13204:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   13208:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   1320c:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   13210:	2800      	cmp	r0, #0
   13212:	d034      	beq.n	1327e <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   13214:	f24a 075a 	movw	r7, #41050	; 0xa05a
   13218:	f649 4040 	movw	r0, #40000	; 0x9c40
   1321c:	2a02      	cmp	r2, #2
   1321e:	bf0c      	ite	eq
   13220:	4602      	moveq	r2, r0
   13222:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   13224:	f242 47b8 	movw	r7, #9400	; 0x24b8
   13228:	f241 504a 	movw	r0, #5450	; 0x154a
   1322c:	2902      	cmp	r1, #2
   1322e:	bf18      	it	ne
   13230:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   13232:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   13236:	4401      	add	r1, r0
   13238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1323c:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   13240:	4a14      	ldr	r2, [pc, #80]	; (13294 <sw_switch.isra.9+0xc0>)
   13242:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   13246:	009b      	lsls	r3, r3, #2
   13248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1324c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   13250:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   13254:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   13256:	bf8b      	itete	hi
   13258:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   1325c:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1325e:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   13260:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   13264:	bf88      	it	hi
   13266:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   1326a:	4b08      	ldr	r3, [pc, #32]	; (1328c <sw_switch.isra.9+0xb8>)
   1326c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   13270:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   13274:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   13276:	f003 0301 	and.w	r3, r3, #1
   1327a:	7033      	strb	r3, [r6, #0]
   1327c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   1327e:	4a06      	ldr	r2, [pc, #24]	; (13298 <sw_switch.isra.9+0xc4>)
   13280:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   13284:	212d      	movs	r1, #45	; 0x2d
   13286:	e7de      	b.n	13246 <sw_switch.isra.9+0x72>
   13288:	200016bc 	.word	0x200016bc
   1328c:	4001f000 	.word	0x4001f000
   13290:	4000110c 	.word	0x4000110c
   13294:	40001000 	.word	0x40001000
   13298:	40001004 	.word	0x40001004

0001329c <isr_radio>:
	if (sfp_radio_isr) {
   1329c:	4b02      	ldr	r3, [pc, #8]	; (132a8 <isr_radio+0xc>)
   1329e:	681b      	ldr	r3, [r3, #0]
   132a0:	b103      	cbz	r3, 132a4 <isr_radio+0x8>
		sfp_radio_isr();
   132a2:	4718      	bx	r3
   132a4:	4770      	bx	lr
   132a6:	bf00      	nop
   132a8:	200016b8 	.word	0x200016b8

000132ac <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   132ac:	4b06      	ldr	r3, [pc, #24]	; (132c8 <radio_isr_set+0x1c>)
   132ae:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   132b0:	4b06      	ldr	r3, [pc, #24]	; (132cc <radio_isr_set+0x20>)
   132b2:	2210      	movs	r2, #16
   132b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   132b8:	4b05      	ldr	r3, [pc, #20]	; (132d0 <radio_isr_set+0x24>)
   132ba:	2202      	movs	r2, #2
   132bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   132c0:	2001      	movs	r0, #1
   132c2:	f7ee bb65 	b.w	1990 <_arch_irq_enable>
   132c6:	bf00      	nop
   132c8:	200016b8 	.word	0x200016b8
   132cc:	40001000 	.word	0x40001000
   132d0:	e000e100 	.word	0xe000e100

000132d4 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   132d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   132d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   132dc:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   132de:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   132e2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   132e6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   132ea:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   132ee:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   132f2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   132f6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   132fa:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   132fe:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   13302:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   13306:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1330a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1330e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   13312:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   13316:	4770      	bx	lr

00013318 <radio_reset>:
{
   13318:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1331a:	2001      	movs	r0, #1
   1331c:	f7ee fb48 	bl	19b0 <_arch_irq_disable>
	NRF_RADIO->POWER =
   13320:	4b08      	ldr	r3, [pc, #32]	; (13344 <radio_reset+0x2c>)
   13322:	2200      	movs	r2, #0
   13324:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   13328:	2201      	movs	r2, #1
   1332a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1332e:	4a06      	ldr	r2, [pc, #24]	; (13348 <radio_reset+0x30>)
   13330:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   13332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   13336:	f023 0301 	bic.w	r3, r3, #1
   1333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1333e:	6013      	str	r3, [r2, #0]
   13340:	bd08      	pop	{r3, pc}
   13342:	bf00      	nop
   13344:	40001000 	.word	0x40001000
   13348:	40001774 	.word	0x40001774

0001334c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1334c:	4b06      	ldr	r3, [pc, #24]	; (13368 <radio_phy_set+0x1c>)
	switch (phy) {
   1334e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   13350:	bf0c      	ite	eq
   13352:	2204      	moveq	r2, #4
   13354:	2203      	movne	r2, #3
   13356:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1335a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1335e:	f042 0201 	orr.w	r2, r2, #1
   13362:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   13366:	4770      	bx	lr
   13368:	40001000 	.word	0x40001000

0001336c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   1336c:	4b01      	ldr	r3, [pc, #4]	; (13374 <radio_tx_power_set+0x8>)
   1336e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   13372:	4770      	bx	lr
   13374:	40001000 	.word	0x40001000

00013378 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   13378:	4b01      	ldr	r3, [pc, #4]	; (13380 <radio_freq_chan_set+0x8>)
   1337a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1337e:	4770      	bx	lr
   13380:	40001000 	.word	0x40001000

00013384 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   13384:	4b07      	ldr	r3, [pc, #28]	; (133a4 <radio_whiten_iv_set+0x20>)
   13386:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1338a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1338e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   13392:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   13396:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1339a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1339e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   133a2:	4770      	bx	lr
   133a4:	40001000 	.word	0x40001000

000133a8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   133a8:	4a0a      	ldr	r2, [pc, #40]	; (133d4 <radio_aa_set+0x2c>)
   133aa:	2300      	movs	r3, #0
   133ac:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   133b0:	2301      	movs	r3, #1
   133b2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   133b6:	78c3      	ldrb	r3, [r0, #3]
   133b8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   133bc:	7843      	ldrb	r3, [r0, #1]
   133be:	7881      	ldrb	r1, [r0, #2]
   133c0:	041b      	lsls	r3, r3, #16
   133c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   133c6:	7801      	ldrb	r1, [r0, #0]
   133c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   133cc:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   133d0:	4770      	bx	lr
   133d2:	bf00      	nop
   133d4:	40001000 	.word	0x40001000

000133d8 <radio_pkt_configure>:
	switch (phy) {
   133d8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   133dc:	2b02      	cmp	r3, #2
{
   133de:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   133e0:	bf0c      	ite	eq
   133e2:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   133e6:	2400      	movne	r4, #0
	if (dc) {
   133e8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   133ea:	f1c0 0308 	rsb	r3, r0, #8
   133ee:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   133f2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   133f6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   133fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   133fe:	4a0b      	ldr	r2, [pc, #44]	; (1342c <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   13400:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   13404:	bf48      	it	mi
   13406:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   1340a:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1340c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   13410:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   13414:	4b06      	ldr	r3, [pc, #24]	; (13430 <radio_pkt_configure+0x58>)
   13416:	4003      	ands	r3, r0
   13418:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1341c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   13420:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   13424:	4319      	orrs	r1, r3
   13426:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   1342a:	bd10      	pop	{r4, pc}
   1342c:	40001000 	.word	0x40001000
   13430:	fef80000 	.word	0xfef80000

00013434 <radio_pkt_rx_set>:
   13434:	4b01      	ldr	r3, [pc, #4]	; (1343c <radio_pkt_rx_set+0x8>)
   13436:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1343a:	4770      	bx	lr
   1343c:	40001000 	.word	0x40001000

00013440 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   13440:	4b01      	ldr	r3, [pc, #4]	; (13448 <radio_pkt_tx_set+0x8>)
   13442:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   13446:	4770      	bx	lr
   13448:	40001000 	.word	0x40001000

0001344c <radio_tx_ready_delay_get>:
	switch (phy) {
   1344c:	2802      	cmp	r0, #2
}
   1344e:	bf0c      	ite	eq
   13450:	2028      	moveq	r0, #40	; 0x28
   13452:	2029      	movne	r0, #41	; 0x29
   13454:	4770      	bx	lr

00013456 <radio_tx_chain_delay_get>:
}
   13456:	2001      	movs	r0, #1
   13458:	4770      	bx	lr

0001345a <radio_rx_ready_delay_get>:
}
   1345a:	2029      	movs	r0, #41	; 0x29
   1345c:	4770      	bx	lr

0001345e <radio_rx_chain_delay_get>:
	switch (phy) {
   1345e:	2802      	cmp	r0, #2
}
   13460:	bf0c      	ite	eq
   13462:	2006      	moveq	r0, #6
   13464:	200a      	movne	r0, #10
   13466:	4770      	bx	lr

00013468 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   13468:	4b01      	ldr	r3, [pc, #4]	; (13470 <radio_rx_enable+0x8>)
   1346a:	2201      	movs	r2, #1
   1346c:	605a      	str	r2, [r3, #4]
   1346e:	4770      	bx	lr
   13470:	40001000 	.word	0x40001000

00013474 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   13474:	4b01      	ldr	r3, [pc, #4]	; (1347c <radio_tx_enable+0x8>)
   13476:	2201      	movs	r2, #1
   13478:	601a      	str	r2, [r3, #0]
   1347a:	4770      	bx	lr
   1347c:	40001000 	.word	0x40001000

00013480 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   13480:	4a07      	ldr	r2, [pc, #28]	; (134a0 <radio_disable+0x20>)
   13482:	f44f 6390 	mov.w	r3, #1152	; 0x480
   13486:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   1348a:	2301      	movs	r3, #1
   1348c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   1348e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   13490:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   13494:	2100      	movs	r1, #0
   13496:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   1349a:	6113      	str	r3, [r2, #16]
   1349c:	4770      	bx	lr
   1349e:	bf00      	nop
   134a0:	4001f000 	.word	0x4001f000

000134a4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   134a4:	4b04      	ldr	r3, [pc, #16]	; (134b8 <radio_status_reset+0x14>)
   134a6:	2200      	movs	r2, #0
   134a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   134ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   134b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   134b4:	4770      	bx	lr
   134b6:	bf00      	nop
   134b8:	40001000 	.word	0x40001000

000134bc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   134bc:	4b03      	ldr	r3, [pc, #12]	; (134cc <radio_is_ready+0x10>)
   134be:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   134c2:	3000      	adds	r0, #0
   134c4:	bf18      	it	ne
   134c6:	2001      	movne	r0, #1
   134c8:	4770      	bx	lr
   134ca:	bf00      	nop
   134cc:	40001000 	.word	0x40001000

000134d0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   134d0:	4b03      	ldr	r3, [pc, #12]	; (134e0 <radio_is_done+0x10>)
   134d2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   134d6:	3000      	adds	r0, #0
   134d8:	bf18      	it	ne
   134da:	2001      	movne	r0, #1
   134dc:	4770      	bx	lr
   134de:	bf00      	nop
   134e0:	40001000 	.word	0x40001000

000134e4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   134e4:	4b03      	ldr	r3, [pc, #12]	; (134f4 <radio_is_idle+0x10>)
   134e6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   134ea:	fab0 f080 	clz	r0, r0
   134ee:	0940      	lsrs	r0, r0, #5
   134f0:	4770      	bx	lr
   134f2:	bf00      	nop
   134f4:	40001000 	.word	0x40001000

000134f8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   134f8:	4b04      	ldr	r3, [pc, #16]	; (1350c <radio_crc_configure+0x14>)
   134fa:	f240 1203 	movw	r2, #259	; 0x103
   134fe:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   13502:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   13506:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   1350a:	4770      	bx	lr
   1350c:	40001000 	.word	0x40001000

00013510 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   13510:	4b03      	ldr	r3, [pc, #12]	; (13520 <radio_crc_is_valid+0x10>)
   13512:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13516:	3000      	adds	r0, #0
   13518:	bf18      	it	ne
   1351a:	2001      	movne	r0, #1
   1351c:	4770      	bx	lr
   1351e:	bf00      	nop
   13520:	40001000 	.word	0x40001000

00013524 <radio_pkt_empty_get>:
}
   13524:	4800      	ldr	r0, [pc, #0]	; (13528 <radio_pkt_empty_get+0x4>)
   13526:	4770      	bx	lr
   13528:	200015ac 	.word	0x200015ac

0001352c <radio_pkt_scratch_get>:
}
   1352c:	4800      	ldr	r0, [pc, #0]	; (13530 <radio_pkt_scratch_get+0x4>)
   1352e:	4770      	bx	lr
   13530:	200015b0 	.word	0x200015b0

00013534 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   13534:	4b04      	ldr	r3, [pc, #16]	; (13548 <radio_switch_complete_and_rx+0x14>)
   13536:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   13538:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1353a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1353e:	4602      	mov	r2, r0
   13540:	4608      	mov	r0, r1
   13542:	f7ff be47 	b.w	131d4 <sw_switch.isra.9>
   13546:	bf00      	nop
   13548:	40001000 	.word	0x40001000

0001354c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1354c:	4b03      	ldr	r3, [pc, #12]	; (1355c <radio_switch_complete_and_tx+0x10>)
   1354e:	2103      	movs	r1, #3
   13550:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   13554:	4601      	mov	r1, r0
   13556:	2001      	movs	r0, #1
   13558:	f7ff be3c 	b.w	131d4 <sw_switch.isra.9>
   1355c:	40001000 	.word	0x40001000

00013560 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   13560:	4b05      	ldr	r3, [pc, #20]	; (13578 <radio_switch_complete_and_disable+0x18>)
   13562:	2203      	movs	r2, #3
   13564:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   13568:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1356c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   13570:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   13574:	4770      	bx	lr
   13576:	bf00      	nop
   13578:	40001000 	.word	0x40001000

0001357c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1357c:	4a03      	ldr	r2, [pc, #12]	; (1358c <radio_rssi_measure+0x10>)
   1357e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   13582:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   13586:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   1358a:	4770      	bx	lr
   1358c:	40001000 	.word	0x40001000

00013590 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   13590:	4b01      	ldr	r3, [pc, #4]	; (13598 <radio_rssi_get+0x8>)
   13592:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   13596:	4770      	bx	lr
   13598:	40001000 	.word	0x40001000

0001359c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1359c:	4b02      	ldr	r3, [pc, #8]	; (135a8 <radio_rssi_status_reset+0xc>)
   1359e:	2200      	movs	r2, #0
   135a0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   135a4:	4770      	bx	lr
   135a6:	bf00      	nop
   135a8:	40001000 	.word	0x40001000

000135ac <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   135ac:	4b03      	ldr	r3, [pc, #12]	; (135bc <radio_rssi_is_ready+0x10>)
   135ae:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   135b2:	3000      	adds	r0, #0
   135b4:	bf18      	it	ne
   135b6:	2001      	movne	r0, #1
   135b8:	4770      	bx	lr
   135ba:	bf00      	nop
   135bc:	40001000 	.word	0x40001000

000135c0 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   135c0:	b530      	push	{r4, r5, lr}
   135c2:	2400      	movs	r4, #0
   135c4:	00a3      	lsls	r3, r4, #2
   135c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   135ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   135ce:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   135d0:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   135d4:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   135d6:	8895      	ldrh	r5, [r2, #4]
   135d8:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   135dc:	2c08      	cmp	r4, #8
		bdaddr += 6;
   135de:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   135e2:	d1ef      	bne.n	135c4 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   135e4:	4b02      	ldr	r3, [pc, #8]	; (135f0 <radio_filter_configure+0x30>)
   135e6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   135ea:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   135ee:	bd30      	pop	{r4, r5, pc}
   135f0:	40001000 	.word	0x40001000

000135f4 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   135f4:	4a03      	ldr	r2, [pc, #12]	; (13604 <radio_filter_disable+0x10>)
   135f6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   135fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   135fe:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   13602:	4770      	bx	lr
   13604:	40001000 	.word	0x40001000

00013608 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   13608:	4b02      	ldr	r3, [pc, #8]	; (13614 <radio_filter_status_reset+0xc>)
   1360a:	2200      	movs	r2, #0
   1360c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   13610:	4770      	bx	lr
   13612:	bf00      	nop
   13614:	40001000 	.word	0x40001000

00013618 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   13618:	4b03      	ldr	r3, [pc, #12]	; (13628 <radio_filter_has_match+0x10>)
   1361a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1361e:	3000      	adds	r0, #0
   13620:	bf18      	it	ne
   13622:	2001      	movne	r0, #1
   13624:	4770      	bx	lr
   13626:	bf00      	nop
   13628:	40001000 	.word	0x40001000

0001362c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1362c:	4b01      	ldr	r3, [pc, #4]	; (13634 <radio_filter_match_get+0x8>)
   1362e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   13632:	4770      	bx	lr
   13634:	40001000 	.word	0x40001000

00013638 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   13638:	4b04      	ldr	r3, [pc, #16]	; (1364c <radio_bc_configure+0x14>)
   1363a:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1363e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   13642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13646:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1364a:	4770      	bx	lr
   1364c:	40001000 	.word	0x40001000

00013650 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   13650:	4b05      	ldr	r3, [pc, #20]	; (13668 <radio_tmr_status_reset+0x18>)
   13652:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   13656:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   1365a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1365e:	227f      	movs	r2, #127	; 0x7f
   13660:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   13664:	4770      	bx	lr
   13666:	bf00      	nop
   13668:	4000b000 	.word	0x4000b000

0001366c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   1366c:	4b03      	ldr	r3, [pc, #12]	; (1367c <radio_tmr_tifs_set+0x10>)
   1366e:	4a04      	ldr	r2, [pc, #16]	; (13680 <radio_tmr_tifs_set+0x14>)
   13670:	781b      	ldrb	r3, [r3, #0]
   13672:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   13676:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1367a:	4770      	bx	lr
   1367c:	200016bc 	.word	0x200016bc
   13680:	40009000 	.word	0x40009000

00013684 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   13684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13688:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1368c:	4c30      	ldr	r4, [pc, #192]	; (13750 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   1368e:	4d31      	ldr	r5, [pc, #196]	; (13754 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13690:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   13694:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   13696:	bf88      	it	hi
   13698:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   1369c:	4b2e      	ldr	r3, [pc, #184]	; (13758 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   1369e:	4c2f      	ldr	r4, [pc, #188]	; (1375c <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   136a0:	bf82      	ittt	hi
   136a2:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   136a6:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   136aa:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   136ae:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   136b0:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   136b4:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   136b6:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   136b8:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   136bc:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   136be:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   136c2:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   136c6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   136ca:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   136ce:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   136d2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   136d6:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   136da:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   136de:	4920      	ldr	r1, [pc, #128]	; (13760 <radio_tmr_start+0xdc>)
   136e0:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   136e4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   136e8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   136ec:	f7ff fd5a 	bl	131a4 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   136f0:	4b1c      	ldr	r3, [pc, #112]	; (13764 <radio_tmr_start+0xe0>)
   136f2:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   136f4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   136f8:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   136fc:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   13700:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   13702:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   13706:	3b74      	subs	r3, #116	; 0x74
   13708:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   1370c:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   13710:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   13714:	f503 739a 	add.w	r3, r3, #308	; 0x134
   13718:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1371c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13720:	33c4      	adds	r3, #196	; 0xc4
   13722:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13726:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1372a:	3bc0      	subs	r3, #192	; 0xc0
   1372c:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   13730:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   13734:	33c8      	adds	r3, #200	; 0xc8
   13736:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1373a:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1373e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   13742:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   13746:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   1374a:	4628      	mov	r0, r5
   1374c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13750:	7ff0bdbf 	.word	0x7ff0bdbf
   13754:	000f4240 	.word	0x000f4240
   13758:	40008000 	.word	0x40008000
   1375c:	4000b000 	.word	0x4000b000
   13760:	4000b148 	.word	0x4000b148
   13764:	40009000 	.word	0x40009000

00013768 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   13768:	4a04      	ldr	r2, [pc, #16]	; (1377c <radio_tmr_stop+0x14>)
   1376a:	2301      	movs	r3, #1
   1376c:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   1376e:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   13770:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13774:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   13776:	6113      	str	r3, [r2, #16]
   13778:	4770      	bx	lr
   1377a:	bf00      	nop
   1377c:	40008000 	.word	0x40008000

00013780 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   13780:	4b0c      	ldr	r3, [pc, #48]	; (137b4 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13782:	4a0d      	ldr	r2, [pc, #52]	; (137b8 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   13784:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   13788:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1378c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   13790:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13794:	3240      	adds	r2, #64	; 0x40
   13796:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   1379a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1379e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   137a2:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   137a6:	3a34      	subs	r2, #52	; 0x34
   137a8:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   137ac:	2218      	movs	r2, #24
   137ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   137b2:	4770      	bx	lr
   137b4:	40008000 	.word	0x40008000
   137b8:	40001104 	.word	0x40001104

000137bc <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   137bc:	4b0b      	ldr	r3, [pc, #44]	; (137ec <radio_tmr_aa_capture+0x30>)
   137be:	4a0c      	ldr	r2, [pc, #48]	; (137f0 <radio_tmr_aa_capture+0x34>)
   137c0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   137c4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   137c8:	3240      	adds	r2, #64	; 0x40
   137ca:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   137ce:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   137d2:	3a3c      	subs	r2, #60	; 0x3c
   137d4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   137d8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   137dc:	3240      	adds	r2, #64	; 0x40
   137de:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   137e2:	220c      	movs	r2, #12
   137e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   137e8:	4770      	bx	lr
   137ea:	bf00      	nop
   137ec:	4001f000 	.word	0x4001f000
   137f0:	40001100 	.word	0x40001100

000137f4 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   137f4:	4b01      	ldr	r3, [pc, #4]	; (137fc <radio_tmr_aa_get+0x8>)
   137f6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   137fa:	4770      	bx	lr
   137fc:	40008000 	.word	0x40008000

00013800 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   13800:	4b01      	ldr	r3, [pc, #4]	; (13808 <radio_tmr_aa_save+0x8>)
   13802:	6018      	str	r0, [r3, #0]
   13804:	4770      	bx	lr
   13806:	bf00      	nop
   13808:	200016b4 	.word	0x200016b4

0001380c <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1380c:	4b01      	ldr	r3, [pc, #4]	; (13814 <radio_tmr_aa_restore+0x8>)
   1380e:	6818      	ldr	r0, [r3, #0]
   13810:	4770      	bx	lr
   13812:	bf00      	nop
   13814:	200016b4 	.word	0x200016b4

00013818 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   13818:	4b01      	ldr	r3, [pc, #4]	; (13820 <radio_tmr_ready_get+0x8>)
   1381a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1381e:	4770      	bx	lr
   13820:	40008000 	.word	0x40008000

00013824 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   13824:	4b06      	ldr	r3, [pc, #24]	; (13840 <radio_tmr_end_capture+0x1c>)
   13826:	4a07      	ldr	r2, [pc, #28]	; (13844 <radio_tmr_end_capture+0x20>)
   13828:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   1382c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   13830:	323c      	adds	r2, #60	; 0x3c
   13832:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   13836:	2220      	movs	r2, #32
   13838:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1383c:	4770      	bx	lr
   1383e:	bf00      	nop
   13840:	4001f000 	.word	0x4001f000
   13844:	4000110c 	.word	0x4000110c

00013848 <radio_tmr_end_get>:
   13848:	4b01      	ldr	r3, [pc, #4]	; (13850 <radio_tmr_end_get+0x8>)
   1384a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1384e:	4770      	bx	lr
   13850:	40008000 	.word	0x40008000

00013854 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   13854:	4b01      	ldr	r3, [pc, #4]	; (1385c <radio_tmr_tifs_base_get+0x8>)
   13856:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   1385a:	4770      	bx	lr
   1385c:	40008000 	.word	0x40008000

00013860 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13860:	4b16      	ldr	r3, [pc, #88]	; (138bc <radio_ccm_rx_pkt_set+0x5c>)
{
   13862:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13864:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13866:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13868:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1386c:	4e14      	ldr	r6, [pc, #80]	; (138c0 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1386e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   13872:	4d14      	ldr	r5, [pc, #80]	; (138c4 <radio_ccm_rx_pkt_set+0x64>)
   13874:	2902      	cmp	r1, #2
   13876:	bf0c      	ite	eq
   13878:	4629      	moveq	r1, r5
   1387a:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1387c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   13880:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   13884:	4810      	ldr	r0, [pc, #64]	; (138c8 <radio_ccm_rx_pkt_set+0x68>)
   13886:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1388a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1388e:	4a0f      	ldr	r2, [pc, #60]	; (138cc <radio_ccm_rx_pkt_set+0x6c>)
   13890:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   13894:	490e      	ldr	r1, [pc, #56]	; (138d0 <radio_ccm_rx_pkt_set+0x70>)
   13896:	4a0f      	ldr	r2, [pc, #60]	; (138d4 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   13898:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1389c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   138a0:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   138a4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   138a8:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   138ac:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   138b0:	2140      	movs	r1, #64	; 0x40
   138b2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   138b6:	2201      	movs	r2, #1
   138b8:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   138ba:	bd70      	pop	{r4, r5, r6, pc}
   138bc:	4000f000 	.word	0x4000f000
   138c0:	01000001 	.word	0x01000001
   138c4:	01010001 	.word	0x01010001
   138c8:	200015b0 	.word	0x200015b0
   138cc:	200014a0 	.word	0x200014a0
   138d0:	40001104 	.word	0x40001104
   138d4:	4001f000 	.word	0x4001f000

000138d8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   138d8:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   138da:	4b0e      	ldr	r3, [pc, #56]	; (13914 <radio_ccm_tx_pkt_set+0x3c>)
   138dc:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   138de:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   138e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   138e4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   138e8:	4c0b      	ldr	r4, [pc, #44]	; (13918 <radio_ccm_tx_pkt_set+0x40>)
   138ea:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   138ee:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   138f2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   138f6:	4809      	ldr	r0, [pc, #36]	; (1391c <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   138f8:	4909      	ldr	r1, [pc, #36]	; (13920 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   138fa:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   138fe:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   13902:	2101      	movs	r1, #1
   13904:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13908:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1390c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   13910:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   13912:	bd10      	pop	{r4, pc}
   13914:	4000f000 	.word	0x4000f000
   13918:	01010000 	.word	0x01010000
   1391c:	200015b0 	.word	0x200015b0
   13920:	200014a0 	.word	0x200014a0

00013924 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   13924:	4b0c      	ldr	r3, [pc, #48]	; (13958 <radio_ccm_is_done+0x34>)
   13926:	2202      	movs	r2, #2
   13928:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1392c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   13930:	b16a      	cbz	r2, 1394e <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   13932:	2202      	movs	r2, #2
   13934:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   13938:	4a08      	ldr	r2, [pc, #32]	; (1395c <radio_ccm_is_done+0x38>)
   1393a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1393e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   13942:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   13946:	fab0 f080 	clz	r0, r0
   1394a:	0940      	lsrs	r0, r0, #5
   1394c:	4770      	bx	lr
		__WFE();
   1394e:	bf20      	wfe
		__SEV();
   13950:	bf40      	sev
		__WFE();
   13952:	bf20      	wfe
   13954:	e7ea      	b.n	1392c <radio_ccm_is_done+0x8>
   13956:	bf00      	nop
   13958:	4000f000 	.word	0x4000f000
   1395c:	e000e100 	.word	0xe000e100

00013960 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   13960:	4b03      	ldr	r3, [pc, #12]	; (13970 <radio_ccm_mic_is_valid+0x10>)
   13962:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13966:	3000      	adds	r0, #0
   13968:	bf18      	it	ne
   1396a:	2001      	movne	r0, #1
   1396c:	4770      	bx	lr
   1396e:	bf00      	nop
   13970:	4000f000 	.word	0x4000f000

00013974 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   13974:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13976:	4c13      	ldr	r4, [pc, #76]	; (139c4 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   13978:	4d13      	ldr	r5, [pc, #76]	; (139c8 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1397a:	2303      	movs	r3, #3
   1397c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   13980:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   13984:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   13988:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   1398c:	3b01      	subs	r3, #1
   1398e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   13992:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   13994:	4b0d      	ldr	r3, [pc, #52]	; (139cc <radio_ar_configure+0x58>)
   13996:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1399a:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   1399c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   139a0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   139a4:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   139a8:	f7ff fe46 	bl	13638 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   139ac:	4b08      	ldr	r3, [pc, #32]	; (139d0 <radio_ar_configure+0x5c>)
   139ae:	4a09      	ldr	r2, [pc, #36]	; (139d4 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   139b0:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   139b4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   139b8:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   139ba:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   139be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   139c2:	bd38      	pop	{r3, r4, r5, pc}
   139c4:	4000f000 	.word	0x4000f000
   139c8:	40001000 	.word	0x40001000
   139cc:	2000149c 	.word	0x2000149c
   139d0:	4001f000 	.word	0x4001f000
   139d4:	40001128 	.word	0x40001128

000139d8 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   139d8:	4b01      	ldr	r3, [pc, #4]	; (139e0 <radio_ar_match_get+0x8>)
   139da:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   139de:	4770      	bx	lr
   139e0:	4000f000 	.word	0x4000f000

000139e4 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   139e4:	4a04      	ldr	r2, [pc, #16]	; (139f8 <radio_ar_status_reset+0x14>)
   139e6:	2300      	movs	r3, #0
   139e8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   139ec:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   139f0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   139f4:	4770      	bx	lr
   139f6:	bf00      	nop
   139f8:	40001000 	.word	0x40001000

000139fc <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   139fc:	4b08      	ldr	r3, [pc, #32]	; (13a20 <radio_ar_has_match+0x24>)
   139fe:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   13a02:	b160      	cbz	r0, 13a1e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   13a04:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   13a08:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   13a0c:	b138      	cbz	r0, 13a1e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   13a0e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   13a12:	b120      	cbz	r0, 13a1e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   13a14:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   13a18:	fab0 f080 	clz	r0, r0
   13a1c:	0940      	lsrs	r0, r0, #5
}
   13a1e:	4770      	bx	lr
   13a20:	40001000 	.word	0x40001000

00013a24 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13a24:	2901      	cmp	r1, #1
{
   13a26:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13a28:	d00f      	beq.n	13a4a <mayfly_enable_cb+0x26>
   13a2a:	4b0e      	ldr	r3, [pc, #56]	; (13a64 <mayfly_enable_cb+0x40>)
   13a2c:	9301      	str	r3, [sp, #4]
   13a2e:	9300      	str	r3, [sp, #0]
   13a30:	4b0d      	ldr	r3, [pc, #52]	; (13a68 <mayfly_enable_cb+0x44>)
   13a32:	4a0e      	ldr	r2, [pc, #56]	; (13a6c <mayfly_enable_cb+0x48>)
   13a34:	681c      	ldr	r4, [r3, #0]
   13a36:	490e      	ldr	r1, [pc, #56]	; (13a70 <mayfly_enable_cb+0x4c>)
   13a38:	4b0e      	ldr	r3, [pc, #56]	; (13a74 <mayfly_enable_cb+0x50>)
   13a3a:	480f      	ldr	r0, [pc, #60]	; (13a78 <mayfly_enable_cb+0x54>)
   13a3c:	47a0      	blx	r4
   13a3e:	4040      	eors	r0, r0
   13a40:	f380 8811 	msr	BASEPRI, r0
   13a44:	f04f 0004 	mov.w	r0, #4
   13a48:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   13a4a:	2018      	movs	r0, #24
	if (enable) {
   13a4c:	b122      	cbz	r2, 13a58 <mayfly_enable_cb+0x34>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   13a4e:	b002      	add	sp, #8
   13a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(SWI4_IRQn);
   13a54:	f7ed bf9c 	b.w	1990 <_arch_irq_enable>
}
   13a58:	b002      	add	sp, #8
   13a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(SWI4_IRQn);
   13a5e:	f7ed bfa7 	b.w	19b0 <_arch_irq_disable>
   13a62:	bf00      	nop
   13a64:	000161ba 	.word	0x000161ba
   13a68:	20003a5c 	.word	0x20003a5c
   13a6c:	000179e1 	.word	0x000179e1
   13a70:	00017a29 	.word	0x00017a29
   13a74:	0001aa0f 	.word	0x0001aa0f
   13a78:	0001aa3e 	.word	0x0001aa3e

00013a7c <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   13a7c:	b513      	push	{r0, r1, r4, lr}
	(void)caller_id;

	switch (callee_id) {
   13a7e:	b189      	cbz	r1, 13aa4 <mayfly_is_enabled+0x28>
   13a80:	2901      	cmp	r1, #1
   13a82:	d015      	beq.n	13ab0 <mayfly_is_enabled+0x34>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   13a84:	4b0b      	ldr	r3, [pc, #44]	; (13ab4 <mayfly_is_enabled+0x38>)
   13a86:	9301      	str	r3, [sp, #4]
   13a88:	9300      	str	r3, [sp, #0]
   13a8a:	4b0b      	ldr	r3, [pc, #44]	; (13ab8 <mayfly_is_enabled+0x3c>)
   13a8c:	4a0b      	ldr	r2, [pc, #44]	; (13abc <mayfly_is_enabled+0x40>)
   13a8e:	681c      	ldr	r4, [r3, #0]
   13a90:	490b      	ldr	r1, [pc, #44]	; (13ac0 <mayfly_is_enabled+0x44>)
   13a92:	4b0c      	ldr	r3, [pc, #48]	; (13ac4 <mayfly_is_enabled+0x48>)
   13a94:	480c      	ldr	r0, [pc, #48]	; (13ac8 <mayfly_is_enabled+0x4c>)
   13a96:	47a0      	blx	r4
   13a98:	4040      	eors	r0, r0
   13a9a:	f380 8811 	msr	BASEPRI, r0
   13a9e:	f04f 0004 	mov.w	r0, #4
   13aa2:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   13aa4:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   13aa6:	b002      	add	sp, #8
   13aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return irq_is_enabled(SWI4_IRQn);
   13aac:	f7ed bf94 	b.w	19d8 <_arch_irq_is_enabled>
   13ab0:	2018      	movs	r0, #24
   13ab2:	e7f8      	b.n	13aa6 <mayfly_is_enabled+0x2a>
   13ab4:	000161ba 	.word	0x000161ba
   13ab8:	20003a5c 	.word	0x20003a5c
   13abc:	000179e1 	.word	0x000179e1
   13ac0:	00017a29 	.word	0x00017a29
   13ac4:	0001aa20 	.word	0x0001aa20
   13ac8:	00017955 	.word	0x00017955

00013acc <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13acc:	4288      	cmp	r0, r1
   13ace:	d00a      	beq.n	13ae6 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   13ad0:	b918      	cbnz	r0, 13ada <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   13ad2:	1e4b      	subs	r3, r1, #1
   13ad4:	4258      	negs	r0, r3
   13ad6:	4158      	adcs	r0, r3
   13ad8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13ada:	2801      	cmp	r0, #1
   13adc:	d105      	bne.n	13aea <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   13ade:	fab1 f081 	clz	r0, r1
   13ae2:	0940      	lsrs	r0, r0, #5
   13ae4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13ae6:	2001      	movs	r0, #1
   13ae8:	4770      	bx	lr
   13aea:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   13aec:	4770      	bx	lr
	...

00013af0 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   13af0:	b513      	push	{r0, r1, r4, lr}
   13af2:	4b0e      	ldr	r3, [pc, #56]	; (13b2c <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   13af4:	b189      	cbz	r1, 13b1a <mayfly_pend+0x2a>
   13af6:	2901      	cmp	r1, #1
   13af8:	d015      	beq.n	13b26 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   13afa:	4b0d      	ldr	r3, [pc, #52]	; (13b30 <mayfly_pend+0x40>)
   13afc:	9301      	str	r3, [sp, #4]
   13afe:	9300      	str	r3, [sp, #0]
   13b00:	4b0c      	ldr	r3, [pc, #48]	; (13b34 <mayfly_pend+0x44>)
   13b02:	4a0d      	ldr	r2, [pc, #52]	; (13b38 <mayfly_pend+0x48>)
   13b04:	681c      	ldr	r4, [r3, #0]
   13b06:	490d      	ldr	r1, [pc, #52]	; (13b3c <mayfly_pend+0x4c>)
   13b08:	4b0d      	ldr	r3, [pc, #52]	; (13b40 <mayfly_pend+0x50>)
   13b0a:	480e      	ldr	r0, [pc, #56]	; (13b44 <mayfly_pend+0x54>)
   13b0c:	47a0      	blx	r4
   13b0e:	4040      	eors	r0, r0
   13b10:	f380 8811 	msr	BASEPRI, r0
   13b14:	f04f 0004 	mov.w	r0, #4
   13b18:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13b1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   13b22:	b002      	add	sp, #8
   13b24:	bd10      	pop	{r4, pc}
   13b26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   13b2a:	e7f8      	b.n	13b1e <mayfly_pend+0x2e>
   13b2c:	e000e100 	.word	0xe000e100
   13b30:	000161ba 	.word	0x000161ba
   13b34:	20003a5c 	.word	0x20003a5c
   13b38:	000179e1 	.word	0x000179e1
   13b3c:	00017a29 	.word	0x00017a29
   13b40:	0001aa32 	.word	0x0001aa32
   13b44:	00017955 	.word	0x00017955

00013b48 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13b48:	2803      	cmp	r0, #3
{
   13b4a:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13b4c:	d90f      	bls.n	13b6e <hal_ticker_instance0_caller_id_get+0x26>
   13b4e:	4b0f      	ldr	r3, [pc, #60]	; (13b8c <hal_ticker_instance0_caller_id_get+0x44>)
   13b50:	9301      	str	r3, [sp, #4]
   13b52:	9300      	str	r3, [sp, #0]
   13b54:	4b0e      	ldr	r3, [pc, #56]	; (13b90 <hal_ticker_instance0_caller_id_get+0x48>)
   13b56:	4a0f      	ldr	r2, [pc, #60]	; (13b94 <hal_ticker_instance0_caller_id_get+0x4c>)
   13b58:	681c      	ldr	r4, [r3, #0]
   13b5a:	490f      	ldr	r1, [pc, #60]	; (13b98 <hal_ticker_instance0_caller_id_get+0x50>)
   13b5c:	4b0f      	ldr	r3, [pc, #60]	; (13b9c <hal_ticker_instance0_caller_id_get+0x54>)
   13b5e:	4810      	ldr	r0, [pc, #64]	; (13ba0 <hal_ticker_instance0_caller_id_get+0x58>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13b60:	47a0      	blx	r4
   13b62:	4040      	eors	r0, r0
   13b64:	f380 8811 	msr	BASEPRI, r0
   13b68:	f04f 0004 	mov.w	r0, #4
   13b6c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   13b6e:	4b0d      	ldr	r3, [pc, #52]	; (13ba4 <hal_ticker_instance0_caller_id_get+0x5c>)
   13b70:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13b72:	b948      	cbnz	r0, 13b88 <hal_ticker_instance0_caller_id_get+0x40>
   13b74:	4b05      	ldr	r3, [pc, #20]	; (13b8c <hal_ticker_instance0_caller_id_get+0x44>)
   13b76:	9301      	str	r3, [sp, #4]
   13b78:	9300      	str	r3, [sp, #0]
   13b7a:	4b05      	ldr	r3, [pc, #20]	; (13b90 <hal_ticker_instance0_caller_id_get+0x48>)
   13b7c:	4a05      	ldr	r2, [pc, #20]	; (13b94 <hal_ticker_instance0_caller_id_get+0x4c>)
   13b7e:	681c      	ldr	r4, [r3, #0]
   13b80:	4905      	ldr	r1, [pc, #20]	; (13b98 <hal_ticker_instance0_caller_id_get+0x50>)
   13b82:	4b06      	ldr	r3, [pc, #24]	; (13b9c <hal_ticker_instance0_caller_id_get+0x54>)
   13b84:	4808      	ldr	r0, [pc, #32]	; (13ba8 <hal_ticker_instance0_caller_id_get+0x60>)
   13b86:	e7eb      	b.n	13b60 <hal_ticker_instance0_caller_id_get+0x18>

	return caller_id;
}
   13b88:	b002      	add	sp, #8
   13b8a:	bd10      	pop	{r4, pc}
   13b8c:	000161ba 	.word	0x000161ba
   13b90:	20003a5c 	.word	0x20003a5c
   13b94:	000179e1 	.word	0x000179e1
   13b98:	00017a29 	.word	0x00017a29
   13b9c:	0001aa6e 	.word	0x0001aa6e
   13ba0:	0001aab0 	.word	0x0001aab0
   13ba4:	0001aaac 	.word	0x0001aaac
   13ba8:	0001aaf1 	.word	0x0001aaf1

00013bac <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   13bac:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   13bae:	3802      	subs	r0, #2
{
   13bb0:	461c      	mov	r4, r3
	switch (caller_id) {
   13bb2:	2803      	cmp	r0, #3
   13bb4:	d818      	bhi.n	13be8 <hal_ticker_instance0_sched+0x3c>
   13bb6:	e8df f000 	tbb	[pc, r0]
   13bba:	0d02      	.short	0x0d02
   13bbc:	3013      	.short	0x3013
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   13bbe:	2903      	cmp	r1, #3
   13bc0:	d112      	bne.n	13be8 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   13bc2:	4b19      	ldr	r3, [pc, #100]	; (13c28 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13bc4:	2100      	movs	r1, #0
			m.param = instance;
   13bc6:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13bc8:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   13bca:	b002      	add	sp, #8
   13bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13bd0:	f7f3 bff0 	b.w	7bb4 <mayfly_enqueue>
		switch (callee_id) {
   13bd4:	2904      	cmp	r1, #4
   13bd6:	d107      	bne.n	13be8 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13bd8:	4b14      	ldr	r3, [pc, #80]	; (13c2c <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13bda:	2101      	movs	r1, #1
			m.param = instance;
   13bdc:	609c      	str	r4, [r3, #8]
   13bde:	e7f3      	b.n	13bc8 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   13be0:	2903      	cmp	r1, #3
   13be2:	d011      	beq.n	13c08 <hal_ticker_instance0_sched+0x5c>
   13be4:	2904      	cmp	r1, #4
   13be6:	d014      	beq.n	13c12 <hal_ticker_instance0_sched+0x66>
		LL_ASSERT(0);
   13be8:	4b11      	ldr	r3, [pc, #68]	; (13c30 <hal_ticker_instance0_sched+0x84>)
   13bea:	9301      	str	r3, [sp, #4]
   13bec:	9300      	str	r3, [sp, #0]
   13bee:	4b11      	ldr	r3, [pc, #68]	; (13c34 <hal_ticker_instance0_sched+0x88>)
   13bf0:	4a11      	ldr	r2, [pc, #68]	; (13c38 <hal_ticker_instance0_sched+0x8c>)
   13bf2:	681c      	ldr	r4, [r3, #0]
   13bf4:	4911      	ldr	r1, [pc, #68]	; (13c3c <hal_ticker_instance0_sched+0x90>)
   13bf6:	4b12      	ldr	r3, [pc, #72]	; (13c40 <hal_ticker_instance0_sched+0x94>)
   13bf8:	4812      	ldr	r0, [pc, #72]	; (13c44 <hal_ticker_instance0_sched+0x98>)
   13bfa:	47a0      	blx	r4
   13bfc:	4040      	eors	r0, r0
   13bfe:	f380 8811 	msr	BASEPRI, r0
   13c02:	f04f 0004 	mov.w	r0, #4
   13c06:	df02      	svc	2
			m.param = instance;
   13c08:	4b0f      	ldr	r3, [pc, #60]	; (13c48 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13c0a:	2100      	movs	r1, #0
			m.param = instance;
   13c0c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13c0e:	2001      	movs	r0, #1
   13c10:	e7db      	b.n	13bca <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   13c12:	4b0e      	ldr	r3, [pc, #56]	; (13c4c <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13c14:	2101      	movs	r1, #1
			m.param = instance;
   13c16:	609c      	str	r4, [r3, #8]
   13c18:	e7f9      	b.n	13c0e <hal_ticker_instance0_sched+0x62>
		switch (callee_id) {
   13c1a:	2904      	cmp	r1, #4
   13c1c:	d1e4      	bne.n	13be8 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   13c1e:	4b0c      	ldr	r3, [pc, #48]	; (13c50 <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13c20:	2101      	movs	r1, #1
			m.param = instance;
   13c22:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13c24:	2003      	movs	r0, #3
   13c26:	e7d0      	b.n	13bca <hal_ticker_instance0_sched+0x1e>
   13c28:	20003e18 	.word	0x20003e18
   13c2c:	20003e28 	.word	0x20003e28
   13c30:	000161ba 	.word	0x000161ba
   13c34:	20003a5c 	.word	0x20003a5c
   13c38:	000179e1 	.word	0x000179e1
   13c3c:	00017a29 	.word	0x00017a29
   13c40:	0001aa91 	.word	0x0001aa91
   13c44:	00017955 	.word	0x00017955
   13c48:	20003e38 	.word	0x20003e38
   13c4c:	20003e48 	.word	0x20003e48
   13c50:	20003e58 	.word	0x20003e58

00013c54 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   13c54:	4601      	mov	r1, r0
   13c56:	2000      	movs	r0, #0
   13c58:	f7ff ba54 	b.w	13104 <cntr_cmp_set>

00013c5c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   13c5c:	4770      	bx	lr
	...

00013c60 <net_buf_pool_get>:
}
   13c60:	4b01      	ldr	r3, [pc, #4]	; (13c68 <net_buf_pool_get+0x8>)
   13c62:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   13c66:	4770      	bx	lr
   13c68:	20003f2c 	.word	0x20003f2c

00013c6c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13c6c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   13c6e:	4b04      	ldr	r3, [pc, #16]	; (13c80 <net_buf_id+0x14>)
   13c70:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   13c74:	69db      	ldr	r3, [r3, #28]
   13c76:	1ac0      	subs	r0, r0, r3
}
   13c78:	4b02      	ldr	r3, [pc, #8]	; (13c84 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   13c7a:	10c0      	asrs	r0, r0, #3
}
   13c7c:	4358      	muls	r0, r3
   13c7e:	4770      	bx	lr
   13c80:	20003f2c 	.word	0x20003f2c
   13c84:	aaaaaaab 	.word	0xaaaaaaab

00013c88 <fixed_data_alloc>:
{
   13c88:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13c8a:	4b09      	ldr	r3, [pc, #36]	; (13cb0 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13c8c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13c8e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   13c92:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13c94:	699b      	ldr	r3, [r3, #24]
   13c96:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   13c98:	6823      	ldr	r3, [r4, #0]
   13c9a:	429a      	cmp	r2, r3
   13c9c:	bf94      	ite	ls
   13c9e:	600a      	strls	r2, [r1, #0]
   13ca0:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13ca2:	f7ff ffe3 	bl	13c6c <net_buf_id>
   13ca6:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   13caa:	fb02 3000 	mla	r0, r2, r0, r3
   13cae:	bd10      	pop	{r4, pc}
   13cb0:	20003f2c 	.word	0x20003f2c

00013cb4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   13cb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13cb8:	4605      	mov	r5, r0
   13cba:	9101      	str	r1, [sp, #4]
   13cbc:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13cbe:	f001 fb09 	bl	152d4 <_impl_k_uptime_get_32>
   13cc2:	4607      	mov	r7, r0
	__asm__ volatile(
   13cc4:	f04f 0320 	mov.w	r3, #32
   13cc8:	f3ef 8811 	mrs	r8, BASEPRI
   13ccc:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   13cd0:	8a6b      	ldrh	r3, [r5, #18]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d03d      	beq.n	13d52 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   13cd6:	8a2a      	ldrh	r2, [r5, #16]
   13cd8:	429a      	cmp	r2, r3
   13cda:	d92a      	bls.n	13d32 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13cdc:	2100      	movs	r1, #0
   13cde:	4628      	mov	r0, r5
   13ce0:	f000 ff1e 	bl	14b20 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   13ce4:	b328      	cbz	r0, 13d32 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ce6:	f388 8811 	msr	BASEPRI, r8
   13cea:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   13cec:	9b01      	ldr	r3, [sp, #4]
   13cee:	2b00      	cmp	r3, #0
   13cf0:	d03c      	beq.n	13d6c <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   13cf2:	1c73      	adds	r3, r6, #1
   13cf4:	2b01      	cmp	r3, #1
   13cf6:	d906      	bls.n	13d06 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13cf8:	f001 faec 	bl	152d4 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   13cfc:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   13cfe:	42b0      	cmp	r0, r6
   13d00:	bf94      	ite	ls
   13d02:	1a36      	subls	r6, r6, r0
   13d04:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13d06:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13d08:	4f1e      	ldr	r7, [pc, #120]	; (13d84 <net_buf_alloc_len+0xd0>)
   13d0a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   13d0e:	4632      	mov	r2, r6
   13d10:	699b      	ldr	r3, [r3, #24]
   13d12:	681b      	ldr	r3, [r3, #0]
   13d14:	a901      	add	r1, sp, #4
   13d16:	681b      	ldr	r3, [r3, #0]
   13d18:	4620      	mov	r0, r4
   13d1a:	4798      	blx	r3
   13d1c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   13d1e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   13d20:	bb28      	cbnz	r0, 13d6e <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   13d22:	79a0      	ldrb	r0, [r4, #6]
   13d24:	4621      	mov	r1, r4
   13d26:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   13d2a:	f000 fec6 	bl	14aba <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   13d2e:	462c      	mov	r4, r5
   13d30:	e018      	b.n	13d64 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   13d32:	8a68      	ldrh	r0, [r5, #18]
   13d34:	1e43      	subs	r3, r0, #1
   13d36:	826b      	strh	r3, [r5, #18]
   13d38:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   13d3c:	8a2c      	ldrh	r4, [r5, #16]
   13d3e:	1a24      	subs	r4, r4, r0
   13d40:	69e8      	ldr	r0, [r5, #28]
   13d42:	2318      	movs	r3, #24
   13d44:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   13d48:	4b0e      	ldr	r3, [pc, #56]	; (13d84 <net_buf_alloc_len+0xd0>)
   13d4a:	1aed      	subs	r5, r5, r3
   13d4c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   13d4e:	71a5      	strb	r5, [r4, #6]
		goto success;
   13d50:	e7cc      	b.n	13cec <net_buf_alloc_len+0x38>
   13d52:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13d56:	4631      	mov	r1, r6
   13d58:	4628      	mov	r0, r5
   13d5a:	f000 fee1 	bl	14b20 <_impl_k_queue_get>
		return NULL;
   13d5e:	4604      	mov	r4, r0
	if (!buf) {
   13d60:	2800      	cmp	r0, #0
   13d62:	d1c3      	bne.n	13cec <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   13d64:	4620      	mov	r0, r4
   13d66:	b002      	add	sp, #8
   13d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   13d6c:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   13d6e:	2301      	movs	r3, #1
   13d70:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   13d72:	2300      	movs	r3, #0
	buf->frags = NULL;
   13d74:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   13d76:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   13d78:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   13d7a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   13d7c:	6923      	ldr	r3, [r4, #16]
   13d7e:	81e2      	strh	r2, [r4, #14]
   13d80:	60a3      	str	r3, [r4, #8]
	return buf;
   13d82:	e7ef      	b.n	13d64 <net_buf_alloc_len+0xb0>
   13d84:	20003f2c 	.word	0x20003f2c

00013d88 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13d88:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   13d8a:	685b      	ldr	r3, [r3, #4]
   13d8c:	460a      	mov	r2, r1
   13d8e:	6819      	ldr	r1, [r3, #0]
   13d90:	f7ff bf90 	b.w	13cb4 <net_buf_alloc_len>

00013d94 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   13d94:	b570      	push	{r4, r5, r6, lr}
   13d96:	4606      	mov	r6, r0
   13d98:	f000 fec2 	bl	14b20 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   13d9c:	4605      	mov	r5, r0
   13d9e:	b128      	cbz	r0, 13dac <net_buf_get+0x18>
   13da0:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13da2:	7963      	ldrb	r3, [r4, #5]
   13da4:	f013 0301 	ands.w	r3, r3, #1
   13da8:	d102      	bne.n	13db0 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   13daa:	6023      	str	r3, [r4, #0]

	return buf;
}
   13dac:	4628      	mov	r0, r5
   13dae:	bd70      	pop	{r4, r5, r6, pc}
   13db0:	2100      	movs	r1, #0
   13db2:	4630      	mov	r0, r6
   13db4:	f000 feb4 	bl	14b20 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   13db8:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   13dba:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   13dbc:	f023 0301 	bic.w	r3, r3, #1
   13dc0:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13dc2:	4604      	mov	r4, r0
   13dc4:	e7ed      	b.n	13da2 <net_buf_get+0xe>

00013dc6 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   13dc6:	6883      	ldr	r3, [r0, #8]
   13dc8:	4419      	add	r1, r3
   13dca:	6001      	str	r1, [r0, #0]
   13dcc:	4770      	bx	lr

00013dce <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   13dce:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   13dd0:	460a      	mov	r2, r1
   13dd2:	6814      	ldr	r4, [r2, #0]
   13dd4:	b914      	cbnz	r4, 13ddc <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   13dd6:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   13dd8:	f000 be74 	b.w	14ac4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   13ddc:	7953      	ldrb	r3, [r2, #5]
   13dde:	f043 0301 	orr.w	r3, r3, #1
   13de2:	7153      	strb	r3, [r2, #5]
   13de4:	4622      	mov	r2, r4
   13de6:	e7f4      	b.n	13dd2 <net_buf_put+0x4>

00013de8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13dea:	4d15      	ldr	r5, [pc, #84]	; (13e40 <net_buf_unref+0x58>)
   13dec:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13dee:	2600      	movs	r6, #0
	while (buf) {
   13df0:	b904      	cbnz	r4, 13df4 <net_buf_unref+0xc>
   13df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   13df4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   13df6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   13df8:	3b01      	subs	r3, #1
   13dfa:	b2db      	uxtb	r3, r3
   13dfc:	7123      	strb	r3, [r4, #4]
   13dfe:	2b00      	cmp	r3, #0
   13e00:	d1f7      	bne.n	13df2 <net_buf_unref+0xa>
		if (buf->__buf) {
   13e02:	6921      	ldr	r1, [r4, #16]
   13e04:	b159      	cbz	r1, 13e1e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13e06:	7963      	ldrb	r3, [r4, #5]
   13e08:	079b      	lsls	r3, r3, #30
   13e0a:	d407      	bmi.n	13e1c <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13e0c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   13e0e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   13e12:	4620      	mov	r0, r4
   13e14:	699b      	ldr	r3, [r3, #24]
   13e16:	681b      	ldr	r3, [r3, #0]
   13e18:	689b      	ldr	r3, [r3, #8]
   13e1a:	4798      	blx	r3
			buf->__buf = NULL;
   13e1c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   13e1e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   13e20:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   13e22:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   13e26:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   13e28:	695b      	ldr	r3, [r3, #20]
   13e2a:	b11b      	cbz	r3, 13e34 <net_buf_unref+0x4c>
			pool->destroy(buf);
   13e2c:	4620      	mov	r0, r4
   13e2e:	4798      	blx	r3
{
   13e30:	463c      	mov	r4, r7
   13e32:	e7dd      	b.n	13df0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   13e34:	4621      	mov	r1, r4
   13e36:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   13e3a:	f000 fe3e 	bl	14aba <k_queue_prepend>
   13e3e:	e7f7      	b.n	13e30 <net_buf_unref+0x48>
   13e40:	20003f2c 	.word	0x20003f2c

00013e44 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   13e44:	7903      	ldrb	r3, [r0, #4]
   13e46:	3301      	adds	r3, #1
   13e48:	7103      	strb	r3, [r0, #4]
	return buf;
}
   13e4a:	4770      	bx	lr

00013e4c <net_buf_simple_add>:
	return buf->data + buf->len;
   13e4c:	8883      	ldrh	r3, [r0, #4]
   13e4e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   13e50:	4419      	add	r1, r3
   13e52:	8081      	strh	r1, [r0, #4]
	return tail;
}
   13e54:	18d0      	adds	r0, r2, r3
   13e56:	4770      	bx	lr

00013e58 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   13e58:	b430      	push	{r4, r5}
   13e5a:	8883      	ldrh	r3, [r0, #4]
   13e5c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   13e5e:	189d      	adds	r5, r3, r2
   13e60:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13e62:	18e0      	adds	r0, r4, r3
}
   13e64:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   13e66:	f7ee b803 	b.w	1e70 <memcpy>

00013e6a <net_buf_simple_add_u8>:
   13e6a:	8883      	ldrh	r3, [r0, #4]
   13e6c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   13e6e:	b510      	push	{r4, lr}
	buf->len += len;
   13e70:	1c5c      	adds	r4, r3, #1
   13e72:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   13e74:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   13e76:	18d0      	adds	r0, r2, r3
   13e78:	bd10      	pop	{r4, pc}

00013e7a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   13e7a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   13e7c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   13e7e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   13e80:	4411      	add	r1, r2
	buf->data -= len;
   13e82:	6003      	str	r3, [r0, #0]
	buf->len += len;
   13e84:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   13e86:	4618      	mov	r0, r3
   13e88:	4770      	bx	lr

00013e8a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   13e8a:	8883      	ldrh	r3, [r0, #4]
   13e8c:	1a5b      	subs	r3, r3, r1
   13e8e:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   13e90:	6803      	ldr	r3, [r0, #0]
   13e92:	4419      	add	r1, r3
   13e94:	6001      	str	r1, [r0, #0]
}
   13e96:	4608      	mov	r0, r1
   13e98:	4770      	bx	lr

00013e9a <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   13e9a:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   13e9c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   13e9e:	2101      	movs	r1, #1
	val = buf->data[0];
   13ea0:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   13ea2:	f7ff fff2 	bl	13e8a <net_buf_simple_pull>

	return val;
}
   13ea6:	4610      	mov	r0, r2
   13ea8:	bd08      	pop	{r3, pc}

00013eaa <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   13eaa:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   13eac:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13eae:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   13eb0:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13eb2:	f7ff ffea 	bl	13e8a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   13eb6:	4610      	mov	r0, r2
   13eb8:	bd08      	pop	{r3, pc}

00013eba <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   13eba:	6802      	ldr	r2, [r0, #0]
   13ebc:	6880      	ldr	r0, [r0, #8]
}
   13ebe:	1a10      	subs	r0, r2, r0
   13ec0:	4770      	bx	lr

00013ec2 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   13ec2:	6802      	ldr	r2, [r0, #0]
   13ec4:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13ec6:	88c3      	ldrh	r3, [r0, #6]
   13ec8:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   13eca:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13ecc:	1a9b      	subs	r3, r3, r2
}
   13ece:	1a18      	subs	r0, r3, r0
   13ed0:	4770      	bx	lr

00013ed2 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13ed2:	6800      	ldr	r0, [r0, #0]
   13ed4:	6880      	ldr	r0, [r0, #8]
   13ed6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   13ed8:	b941      	cbnz	r1, 13eec <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   13eda:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   13ede:	fa21 f202 	lsr.w	r2, r1, r2
   13ee2:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   13ee6:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   13ee8:	2000      	movs	r0, #0
   13eea:	4770      	bx	lr
		*value = gpio->IN;
   13eec:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   13ef0:	e7f9      	b.n	13ee6 <gpio_nrf5_read+0x14>

00013ef2 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13ef2:	6800      	ldr	r0, [r0, #0]
   13ef4:	6880      	ldr	r0, [r0, #8]
   13ef6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   13ef8:	b949      	cbnz	r1, 13f0e <gpio_nrf5_write+0x1c>
   13efa:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   13efc:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   13efe:	b11b      	cbz	r3, 13f08 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   13f00:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   13f04:	2000      	movs	r0, #0
   13f06:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   13f08:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   13f0c:	e7fa      	b.n	13f04 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   13f0e:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   13f12:	e7f7      	b.n	13f04 <gpio_nrf5_write+0x12>

00013f14 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
   13f14:	b508      	push	{r3, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13f16:	6883      	ldr	r3, [r0, #8]
 */
static inline void _gpio_manage_callback(sys_slist_t *callbacks,
					 struct gpio_callback *callback,
					 bool set)
{
	__ASSERT(callback, "No callback!");
   13f18:	b949      	cbnz	r1, 13f2e <gpio_nrf5_manage_callback+0x1a>
   13f1a:	231a      	movs	r3, #26
   13f1c:	4a1a      	ldr	r2, [pc, #104]	; (13f88 <gpio_nrf5_manage_callback+0x74>)
   13f1e:	491b      	ldr	r1, [pc, #108]	; (13f8c <gpio_nrf5_manage_callback+0x78>)
   13f20:	481b      	ldr	r0, [pc, #108]	; (13f90 <gpio_nrf5_manage_callback+0x7c>)
   13f22:	f7ed f833 	bl	f8c <printk>
   13f26:	481b      	ldr	r0, [pc, #108]	; (13f94 <gpio_nrf5_manage_callback+0x80>)
   13f28:	f7ed f830 	bl	f8c <printk>
   13f2c:	e7fe      	b.n	13f2c <gpio_nrf5_manage_callback+0x18>
	__ASSERT(callback->handler, "No callback handler!");
   13f2e:	6848      	ldr	r0, [r1, #4]
   13f30:	b948      	cbnz	r0, 13f46 <gpio_nrf5_manage_callback+0x32>
   13f32:	231b      	movs	r3, #27
   13f34:	4a14      	ldr	r2, [pc, #80]	; (13f88 <gpio_nrf5_manage_callback+0x74>)
   13f36:	4918      	ldr	r1, [pc, #96]	; (13f98 <gpio_nrf5_manage_callback+0x84>)
   13f38:	4815      	ldr	r0, [pc, #84]	; (13f90 <gpio_nrf5_manage_callback+0x7c>)
   13f3a:	f7ed f827 	bl	f8c <printk>
   13f3e:	4817      	ldr	r0, [pc, #92]	; (13f9c <gpio_nrf5_manage_callback+0x88>)
   13f40:	f7ed f824 	bl	f8c <printk>
   13f44:	e7fe      	b.n	13f44 <gpio_nrf5_manage_callback+0x30>
   13f46:	6818      	ldr	r0, [r3, #0]

	if (set) {
   13f48:	b172      	cbz	r2, 13f68 <gpio_nrf5_manage_callback+0x54>
	parent->next = child;
   13f4a:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   13f4c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13f4e:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   13f50:	b902      	cbnz	r2, 13f54 <gpio_nrf5_manage_callback+0x40>
	list->tail = node;
   13f52:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   13f54:	2000      	movs	r0, #0
   13f56:	bd08      	pop	{r3, pc}
	parent->next = child;
   13f58:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   13f5a:	6858      	ldr	r0, [r3, #4]
   13f5c:	4281      	cmp	r1, r0
	list->tail = node;
   13f5e:	bf08      	it	eq
   13f60:	605a      	streq	r2, [r3, #4]
   13f62:	e00d      	b.n	13f80 <gpio_nrf5_manage_callback+0x6c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   13f64:	4602      	mov	r2, r0
   13f66:	6800      	ldr	r0, [r0, #0]
   13f68:	2800      	cmp	r0, #0
   13f6a:	d0f3      	beq.n	13f54 <gpio_nrf5_manage_callback+0x40>
   13f6c:	4281      	cmp	r1, r0
   13f6e:	d1f9      	bne.n	13f64 <gpio_nrf5_manage_callback+0x50>
   13f70:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   13f72:	2a00      	cmp	r2, #0
   13f74:	d1f0      	bne.n	13f58 <gpio_nrf5_manage_callback+0x44>
   13f76:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13f78:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   13f7a:	4291      	cmp	r1, r2
   13f7c:	d100      	bne.n	13f80 <gpio_nrf5_manage_callback+0x6c>
	list->tail = node;
   13f7e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   13f80:	2300      	movs	r3, #0
   13f82:	600b      	str	r3, [r1, #0]
   13f84:	e7e6      	b.n	13f54 <gpio_nrf5_manage_callback+0x40>
   13f86:	bf00      	nop
   13f88:	0001abe8 	.word	0x0001abe8
   13f8c:	0001ac21 	.word	0x0001ac21
   13f90:	0001619c 	.word	0x0001619c
   13f94:	0001ac2a 	.word	0x0001ac2a
   13f98:	0001ac37 	.word	0x0001ac37
   13f9c:	0001ac49 	.word	0x0001ac49

00013fa0 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   13fa0:	4b0c      	ldr	r3, [pc, #48]	; (13fd4 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   13fa2:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13fa4:	4d0c      	ldr	r5, [pc, #48]	; (13fd8 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   13fa6:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13fa8:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   13faa:	fa24 f203 	lsr.w	r2, r4, r3
   13fae:	07d2      	lsls	r2, r2, #31
   13fb0:	d508      	bpl.n	13fc4 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13fb2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   13fb6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   13fba:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   13fbe:	4282      	cmp	r2, r0
   13fc0:	d100      	bne.n	13fc4 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13fc2:	b121      	cbz	r1, 13fce <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13fc4:	3301      	adds	r3, #1
   13fc6:	2b08      	cmp	r3, #8
   13fc8:	d1ef      	bne.n	13faa <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   13fca:	f06f 0312 	mvn.w	r3, #18
}
   13fce:	4618      	mov	r0, r3
   13fd0:	bd30      	pop	{r4, r5, pc}
   13fd2:	bf00      	nop
   13fd4:	200016f4 	.word	0x200016f4
   13fd8:	40006000 	.word	0x40006000

00013fdc <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   13fdc:	b570      	push	{r4, r5, r6, lr}
   13fde:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13fe0:	460d      	mov	r5, r1
   13fe2:	b9c9      	cbnz	r1, 14018 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   13fe4:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   13fe6:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   13fe8:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   13fea:	4610      	mov	r0, r2
   13fec:	7919      	ldrb	r1, [r3, #4]
   13fee:	f7ff ffd7 	bl	13fa0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13ff2:	2800      	cmp	r0, #0
   13ff4:	db12      	blt.n	1401c <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   13ff6:	68b2      	ldr	r2, [r6, #8]
   13ff8:	2301      	movs	r3, #1
   13ffa:	fa03 f404 	lsl.w	r4, r3, r4
   13ffe:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   14000:	f100 0140 	add.w	r1, r0, #64	; 0x40
   14004:	4a06      	ldr	r2, [pc, #24]	; (14020 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   14006:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   14008:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   1400c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   14010:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   14014:	4628      	mov	r0, r5
   14016:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   14018:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   1401c:	bd70      	pop	{r4, r5, r6, pc}
   1401e:	bf00      	nop
   14020:	40006000 	.word	0x40006000

00014024 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   14024:	b570      	push	{r4, r5, r6, lr}
   14026:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   14028:	460d      	mov	r5, r1
   1402a:	b9b1      	cbnz	r1, 1405a <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   1402c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1402e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   14030:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   14032:	4610      	mov	r0, r2
   14034:	7919      	ldrb	r1, [r3, #4]
   14036:	f7ff ffb3 	bl	13fa0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1403a:	2800      	cmp	r0, #0
   1403c:	db0f      	blt.n	1405e <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   1403e:	68b2      	ldr	r2, [r6, #8]
   14040:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   14042:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   14046:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   1404a:	4b05      	ldr	r3, [pc, #20]	; (14060 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   1404c:	ea22 0404 	bic.w	r4, r2, r4
   14050:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   14052:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   14056:	4628      	mov	r0, r5
   14058:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1405a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   1405e:	bd70      	pop	{r4, r5, r6, pc}
   14060:	40006000 	.word	0x40006000

00014064 <gpio_nrf5_config>:
{
   14064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14068:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   1406a:	b119      	cbz	r1, 14074 <gpio_nrf5_config+0x10>
		return -ENOTSUP;
   1406c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   14074:	f3c3 3101 	ubfx	r1, r3, #12, #2
		__ASSERT_NO_MSG(ds_low != 2);
   14078:	2902      	cmp	r1, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   1407a:	f3c3 3e81 	ubfx	lr, r3, #14, #2
		__ASSERT_NO_MSG(ds_low != 2);
   1407e:	d109      	bne.n	14094 <gpio_nrf5_config+0x30>
   14080:	23c1      	movs	r3, #193	; 0xc1
   14082:	4a47      	ldr	r2, [pc, #284]	; (141a0 <gpio_nrf5_config+0x13c>)
   14084:	4947      	ldr	r1, [pc, #284]	; (141a4 <gpio_nrf5_config+0x140>)
   14086:	4848      	ldr	r0, [pc, #288]	; (141a8 <gpio_nrf5_config+0x144>)
   14088:	f7ec ff80 	bl	f8c <printk>
   1408c:	4847      	ldr	r0, [pc, #284]	; (141ac <gpio_nrf5_config+0x148>)
   1408e:	f7ec ff7d 	bl	f8c <printk>
   14092:	e7fe      	b.n	14092 <gpio_nrf5_config+0x2e>
		__ASSERT_NO_MSG(ds_high != 2);
   14094:	f1be 0f02 	cmp.w	lr, #2
   14098:	d109      	bne.n	140ae <gpio_nrf5_config+0x4a>
   1409a:	23c2      	movs	r3, #194	; 0xc2
   1409c:	4a40      	ldr	r2, [pc, #256]	; (141a0 <gpio_nrf5_config+0x13c>)
   1409e:	4944      	ldr	r1, [pc, #272]	; (141b0 <gpio_nrf5_config+0x14c>)
   140a0:	4841      	ldr	r0, [pc, #260]	; (141a8 <gpio_nrf5_config+0x144>)
   140a2:	f7ec ff73 	bl	f8c <printk>
   140a6:	4841      	ldr	r0, [pc, #260]	; (141ac <gpio_nrf5_config+0x148>)
   140a8:	f7ec ff70 	bl	f8c <printk>
   140ac:	e7fe      	b.n	140ac <gpio_nrf5_config+0x48>
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   140ae:	f403 7240 	and.w	r2, r3, #768	; 0x300
   140b2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   140b6:	d05d      	beq.n	14174 <gpio_nrf5_config+0x110>
		u8_t pull = GPIO_PULL_DISABLE;
   140b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   140bc:	bf0c      	ite	eq
   140be:	2204      	moveq	r2, #4
   140c0:	2200      	movne	r2, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   140c2:	6805      	ldr	r5, [r0, #0]
   140c4:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 141bc <gpio_nrf5_config+0x158>
   140c8:	68a8      	ldr	r0, [r5, #8]
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   140ca:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
			sense = GPIO_SENSE_DISABLE;
   140ce:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   140d2:	bf08      	it	eq
   140d4:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   140d6:	f013 0f01 	tst.w	r3, #1
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   140da:	6800      	ldr	r0, [r0, #0]
   140dc:	ea4f 0181 	mov.w	r1, r1, lsl #2
   140e0:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   140e4:	d04f      	beq.n	14186 <gpio_nrf5_config+0x122>
			if (pull == GPIO_PULL_UP) {
   140e6:	2a0c      	cmp	r2, #12
   140e8:	d146      	bne.n	14178 <gpio_nrf5_config+0x114>
				gpio->OUTSET = BIT(pin);
   140ea:	2701      	movs	r7, #1
   140ec:	40a7      	lsls	r7, r4
   140ee:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   140f2:	4471      	add	r1, lr
					      GPIO_INPUT_DISCONNECT |
   140f4:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   140f8:	f041 0103 	orr.w	r1, r1, #3
   140fc:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   140fe:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
   14102:	f013 0002 	ands.w	r0, r3, #2
   14106:	d049      	beq.n	1419c <gpio_nrf5_config+0x138>
		u32_t port = GPIO_PORT(dev);
   14108:	68aa      	ldr	r2, [r5, #8]
		if (flags & GPIO_INT_EDGE) {
   1410a:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   1410c:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   14110:	d5ac      	bpl.n	1406c <gpio_nrf5_config+0x8>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   14112:	065a      	lsls	r2, r3, #25
   14114:	d43d      	bmi.n	14192 <gpio_nrf5_config+0x12e>
				config |= GPIOTE_CFG_POL_H2L;
   14116:	f013 0f04 	tst.w	r3, #4
   1411a:	bf14      	ite	ne
   1411c:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   14120:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   14124:	4e23      	ldr	r6, [pc, #140]	; (141b4 <gpio_nrf5_config+0x150>)
   14126:	6837      	ldr	r7, [r6, #0]
   14128:	4638      	mov	r0, r7
   1412a:	f7ec f88b 	bl	244 <__popcountsi2>
   1412e:	2808      	cmp	r0, #8
   14130:	d032      	beq.n	14198 <gpio_nrf5_config+0x134>
		int i = gpiote_find_channel(dev, pin, port);
   14132:	4641      	mov	r1, r8
   14134:	4620      	mov	r0, r4
   14136:	f7ff ff33 	bl	13fa0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1413a:	2800      	cmp	r0, #0
   1413c:	da08      	bge.n	14150 <gpio_nrf5_config+0xec>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   1413e:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   14140:	fa93 f0a3 	rbit	r0, r3
   14144:	2b00      	cmp	r3, #0
   14146:	fab0 f080 	clz	r0, r0
   1414a:	bf08      	it	eq
   1414c:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   14150:	2301      	movs	r3, #1
   14152:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   14154:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   14156:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   14158:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   1415c:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   1415e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   14162:	4b15      	ldr	r3, [pc, #84]	; (141b8 <gpio_nrf5_config+0x154>)
		config |= GPIOTE_CFG_PIN(pin);
   14164:	f044 0401 	orr.w	r4, r4, #1
   14168:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   1416a:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   1416e:	2000      	movs	r0, #0
   14170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   14174:	220c      	movs	r2, #12
   14176:	e7a4      	b.n	140c2 <gpio_nrf5_config+0x5e>
			} else if (pull == GPIO_PULL_DOWN) {
   14178:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   1417a:	bf02      	ittt	eq
   1417c:	2701      	moveq	r7, #1
   1417e:	40a7      	lsleq	r7, r4
   14180:	f8c0 750c 	streq.w	r7, [r0, #1292]	; 0x50c
   14184:	e7b5      	b.n	140f2 <gpio_nrf5_config+0x8e>
					      drive_strength[ds_low][ds_high] |
   14186:	4471      	add	r1, lr
   14188:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   1418c:	430a      	orrs	r2, r1
   1418e:	433a      	orrs	r2, r7
   14190:	e7b5      	b.n	140fe <gpio_nrf5_config+0x9a>
				config |= GPIOTE_CFG_POL_TOGG;
   14192:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   14196:	e7c5      	b.n	14124 <gpio_nrf5_config+0xc0>
			return -EIO;
   14198:	f06f 0004 	mvn.w	r0, #4
}
   1419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   141a0:	0001ab78 	.word	0x0001ab78
   141a4:	0001abb0 	.word	0x0001abb0
   141a8:	0001619c 	.word	0x0001619c
   141ac:	000161ba 	.word	0x000161ba
   141b0:	0001abbc 	.word	0x0001abbc
   141b4:	200016f4 	.word	0x200016f4
   141b8:	40006000 	.word	0x40006000
   141bc:	0001ab30 	.word	0x0001ab30

000141c0 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   141c0:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   141c2:	2200      	movs	r2, #0
   141c4:	2105      	movs	r1, #5
   141c6:	2006      	movs	r0, #6
   141c8:	f7ed fc14 	bl	19f4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   141cc:	2006      	movs	r0, #6
   141ce:	f7ed fbdf 	bl	1990 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   141d2:	2000      	movs	r0, #0
   141d4:	bd08      	pop	{r3, pc}
	...

000141d8 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   141d8:	2100      	movs	r1, #0
{
   141da:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   141dc:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   141de:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   141e0:	2501      	movs	r5, #1
   141e2:	008b      	lsls	r3, r1, #2
   141e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   141e8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   141ec:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   141f0:	b140      	cbz	r0, 14204 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   141f2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   141f6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   141fa:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   141fe:	fa05 f303 	lsl.w	r3, r5, r3
   14202:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   14204:	3101      	adds	r1, #1
   14206:	2908      	cmp	r1, #8
   14208:	d1eb      	bne.n	141e2 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   1420a:	4e0e      	ldr	r6, [pc, #56]	; (14244 <gpio_nrf5_port_isr+0x6c>)
   1420c:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   1420e:	689d      	ldr	r5, [r3, #8]
   14210:	681c      	ldr	r4, [r3, #0]
   14212:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   14214:	b1a4      	cbz	r4, 14240 <gpio_nrf5_port_isr+0x68>
		if (cb->pin_mask & pins) {
   14216:	68a3      	ldr	r3, [r4, #8]
   14218:	421d      	tst	r5, r3
   1421a:	d00f      	beq.n	1423c <gpio_nrf5_port_isr+0x64>
			__ASSERT(cb->handler, "No callback handler!");
   1421c:	6863      	ldr	r3, [r4, #4]
   1421e:	b94b      	cbnz	r3, 14234 <gpio_nrf5_port_isr+0x5c>
   14220:	2333      	movs	r3, #51	; 0x33
   14222:	4a09      	ldr	r2, [pc, #36]	; (14248 <gpio_nrf5_port_isr+0x70>)
   14224:	4909      	ldr	r1, [pc, #36]	; (1424c <gpio_nrf5_port_isr+0x74>)
   14226:	480a      	ldr	r0, [pc, #40]	; (14250 <gpio_nrf5_port_isr+0x78>)
   14228:	f7ec feb0 	bl	f8c <printk>
   1422c:	4809      	ldr	r0, [pc, #36]	; (14254 <gpio_nrf5_port_isr+0x7c>)
   1422e:	f7ec fead 	bl	f8c <printk>
   14232:	e7fe      	b.n	14232 <gpio_nrf5_port_isr+0x5a>
			cb->handler(port, cb, pins);
   14234:	462a      	mov	r2, r5
   14236:	4621      	mov	r1, r4
   14238:	4630      	mov	r0, r6
   1423a:	4798      	blx	r3
	return node->next;
   1423c:	6824      	ldr	r4, [r4, #0]
   1423e:	e7e9      	b.n	14214 <gpio_nrf5_port_isr+0x3c>
   14240:	bd70      	pop	{r4, r5, r6, pc}
   14242:	bf00      	nop
   14244:	20003ed4 	.word	0x20003ed4
   14248:	0001abe8 	.word	0x0001abe8
   1424c:	0001ac5e 	.word	0x0001ac5e
   14250:	0001619c 	.word	0x0001619c
   14254:	0001ac49 	.word	0x0001ac49

00014258 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14258:	4b03      	ldr	r3, [pc, #12]	; (14268 <uart_nrfx_err_check+0x10>)
   1425a:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   1425c:	b118      	cbz	r0, 14266 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1425e:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   14262:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   14266:	4770      	bx	lr
   14268:	40002124 	.word	0x40002124

0001426c <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1426c:	4b07      	ldr	r3, [pc, #28]	; (1428c <uart_nrfx_poll_out+0x20>)
   1426e:	2200      	movs	r2, #0
   14270:	601a      	str	r2, [r3, #0]
{
   14272:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14274:	681a      	ldr	r2, [r3, #0]
   14276:	9201      	str	r2, [sp, #4]
    (void)dummy;
   14278:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   1427a:	4a05      	ldr	r2, [pc, #20]	; (14290 <uart_nrfx_poll_out+0x24>)
   1427c:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14280:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   14282:	2a00      	cmp	r2, #0
   14284:	d0fc      	beq.n	14280 <uart_nrfx_poll_out+0x14>
}
   14286:	4608      	mov	r0, r1
   14288:	b002      	add	sp, #8
   1428a:	4770      	bx	lr
   1428c:	4000211c 	.word	0x4000211c
   14290:	40002000 	.word	0x40002000

00014294 <uart_nrfx_poll_in>:
   14294:	4b08      	ldr	r3, [pc, #32]	; (142b8 <uart_nrfx_poll_in+0x24>)
   14296:	681a      	ldr	r2, [r3, #0]
{
   14298:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   1429a:	b152      	cbz	r2, 142b2 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1429c:	2000      	movs	r0, #0
   1429e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   142a0:	681b      	ldr	r3, [r3, #0]
   142a2:	9301      	str	r3, [sp, #4]
    (void)dummy;
   142a4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   142a6:	4b05      	ldr	r3, [pc, #20]	; (142bc <uart_nrfx_poll_in+0x28>)
   142a8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   142ac:	700b      	strb	r3, [r1, #0]
}
   142ae:	b002      	add	sp, #8
   142b0:	4770      	bx	lr
		return -1;
   142b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142b6:	e7fa      	b.n	142ae <uart_nrfx_poll_in+0x1a>
   142b8:	40002108 	.word	0x40002108
   142bc:	40002000 	.word	0x40002000

000142c0 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   142c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   142c2:	481f      	ldr	r0, [pc, #124]	; (14340 <uart_nrfx_init+0x80>)
   142c4:	f000 f9b2 	bl	1462c <device_get_binding>

	__ASSERT(gpio_dev,
   142c8:	4604      	mov	r4, r0
   142ca:	b958      	cbnz	r0, 142e4 <uart_nrfx_init+0x24>
   142cc:	491d      	ldr	r1, [pc, #116]	; (14344 <uart_nrfx_init+0x84>)
   142ce:	4a1e      	ldr	r2, [pc, #120]	; (14348 <uart_nrfx_init+0x88>)
   142d0:	481e      	ldr	r0, [pc, #120]	; (1434c <uart_nrfx_init+0x8c>)
   142d2:	f44f 73a8 	mov.w	r3, #336	; 0x150
   142d6:	f7ec fe59 	bl	f8c <printk>
   142da:	4919      	ldr	r1, [pc, #100]	; (14340 <uart_nrfx_init+0x80>)
   142dc:	481c      	ldr	r0, [pc, #112]	; (14350 <uart_nrfx_init+0x90>)
   142de:	f7ec fe55 	bl	f8c <printk>
   142e2:	e7fe      	b.n	142e2 <uart_nrfx_init+0x22>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   142e4:	6843      	ldr	r3, [r0, #4]
   142e6:	2206      	movs	r2, #6
   142e8:	681d      	ldr	r5, [r3, #0]
   142ea:	2100      	movs	r1, #0
   142ec:	f240 1301 	movw	r3, #257	; 0x101
   142f0:	47a8      	blx	r5
   142f2:	6863      	ldr	r3, [r4, #4]
   142f4:	681d      	ldr	r5, [r3, #0]
   142f6:	2300      	movs	r3, #0
   142f8:	4619      	mov	r1, r3
   142fa:	2208      	movs	r2, #8
   142fc:	4620      	mov	r0, r4
   142fe:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   14300:	4b14      	ldr	r3, [pc, #80]	; (14354 <uart_nrfx_init+0x94>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14302:	4915      	ldr	r1, [pc, #84]	; (14358 <uart_nrfx_init+0x98>)
    p_reg->PSELRXD = pselrxd;
   14304:	2208      	movs	r2, #8
   14306:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1430a:	2206      	movs	r2, #6
   1430c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   14310:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14312:	4a12      	ldr	r2, [pc, #72]	; (1435c <uart_nrfx_init+0x9c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   14314:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   14318:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1431c:	2204      	movs	r2, #4
   1431e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14322:	4a0f      	ldr	r2, [pc, #60]	; (14360 <uart_nrfx_init+0xa0>)
   14324:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14326:	6812      	ldr	r2, [r2, #0]
   14328:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1432a:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1432c:	4a0d      	ldr	r2, [pc, #52]	; (14364 <uart_nrfx_init+0xa4>)
   1432e:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   14330:	6812      	ldr	r2, [r2, #0]
   14332:	9200      	str	r2, [sp, #0]
    (void)dummy;
   14334:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14336:	2201      	movs	r2, #1
   14338:	600a      	str	r2, [r1, #0]
   1433a:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   1433c:	b003      	add	sp, #12
   1433e:	bd30      	pop	{r4, r5, pc}
   14340:	0001ac6a 	.word	0x0001ac6a
   14344:	0001acb0 	.word	0x0001acb0
   14348:	0001ac71 	.word	0x0001ac71
   1434c:	0001619c 	.word	0x0001619c
   14350:	0001acb9 	.word	0x0001acb9
   14354:	40002000 	.word	0x40002000
   14358:	40002008 	.word	0x40002008
   1435c:	01d7e000 	.word	0x01d7e000
   14360:	4000211c 	.word	0x4000211c
   14364:	40002108 	.word	0x40002108

00014368 <isr>:
	return octets;
}
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   14368:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   1436a:	b1d0      	cbz	r0, 143a2 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   1436c:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   1436e:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   14370:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   14372:	1c53      	adds	r3, r2, #1
   14374:	b2db      	uxtb	r3, r3
		last = 0;
   14376:	42ab      	cmp	r3, r5
   14378:	bf08      	it	eq
   1437a:	2300      	moveq	r3, #0
	if (last == rng->first) {
   1437c:	42a3      	cmp	r3, r4
   1437e:	d010      	beq.n	143a2 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   14380:	b161      	cbz	r1, 1439c <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   14382:	490a      	ldr	r1, [pc, #40]	; (143ac <isr+0x44>)
   14384:	4402      	add	r2, r0
   14386:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   1438a:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   1438c:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   1438e:	3301      	adds	r3, #1
   14390:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   14392:	429d      	cmp	r5, r3
   14394:	bf08      	it	eq
   14396:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   14398:	42a3      	cmp	r3, r4
   1439a:	d005      	beq.n	143a8 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   1439c:	f06f 000f 	mvn.w	r0, #15
   143a0:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   143a2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   143a6:	bd30      	pop	{r4, r5, pc}
		return 0;
   143a8:	2000      	movs	r0, #0
}
   143aa:	bd30      	pop	{r4, r5, pc}
   143ac:	4000d000 	.word	0x4000d000

000143b0 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   143b0:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   143b2:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   143b4:	2201      	movs	r2, #1
   143b6:	4611      	mov	r1, r2
   143b8:	4620      	mov	r0, r4
   143ba:	f000 fef9 	bl	151b0 <_impl_k_sem_init>
   143be:	f104 0018 	add.w	r0, r4, #24
   143c2:	2201      	movs	r2, #1
   143c4:	2100      	movs	r1, #0
   143c6:	f000 fef3 	bl	151b0 <_impl_k_sem_init>
	rng->threshold = threshold;
   143ca:	2304      	movs	r3, #4
   143cc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   143d0:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   143d2:	2500      	movs	r5, #0
	rng->threshold = threshold;
   143d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   143d8:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   143da:	4b11      	ldr	r3, [pc, #68]	; (14420 <entropy_nrf5_init+0x70>)
	rng->count = len;
   143dc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   143e0:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   143e2:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   143e6:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   143ea:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   143ee:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   143f2:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   143f6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   143fa:	f042 0201 	orr.w	r2, r2, #1
   143fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   14402:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   14404:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   14408:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1440a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   1440e:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   14410:	462a      	mov	r2, r5
   14412:	f7ed faef 	bl	19f4 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   14416:	4630      	mov	r0, r6
   14418:	f7ed faba 	bl	1990 <_arch_irq_enable>

	return 0;
}
   1441c:	4628      	mov	r0, r5
   1441e:	bd70      	pop	{r4, r5, r6, pc}
   14420:	4000d000 	.word	0x4000d000

00014424 <isr_rand>:
{
   14424:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   14426:	4b12      	ldr	r3, [pc, #72]	; (14470 <isr_rand+0x4c>)
   14428:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1442c:	b1fb      	cbz	r3, 1446e <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1442e:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   14430:	2101      	movs	r1, #1
   14432:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   14436:	f7ff ff97 	bl	14368 <isr>
		if (ret != -EBUSY) {
   1443a:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   1443e:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   14440:	d00d      	beq.n	1445e <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   14442:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   14446:	bf14      	ite	ne
   14448:	2100      	movne	r1, #0
   1444a:	2101      	moveq	r1, #1
   1444c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   14450:	f7ff ff8a 	bl	14368 <isr>
   14454:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   14456:	f105 0018 	add.w	r0, r5, #24
   1445a:	f000 fed7 	bl	1520c <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   1445e:	4b04      	ldr	r3, [pc, #16]	; (14470 <isr_rand+0x4c>)
   14460:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   14462:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   14464:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   14468:	bf1c      	itt	ne
   1446a:	2201      	movne	r2, #1
   1446c:	605a      	strne	r2, [r3, #4]
   1446e:	bd38      	pop	{r3, r4, r5, pc}
   14470:	4000d000 	.word	0x4000d000

00014474 <get>:
{
   14474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(rng);
   14478:	b948      	cbnz	r0, 1448e <get+0x1a>
   1447a:	2361      	movs	r3, #97	; 0x61
   1447c:	4a32      	ldr	r2, [pc, #200]	; (14548 <get+0xd4>)
   1447e:	4933      	ldr	r1, [pc, #204]	; (1454c <get+0xd8>)
   14480:	4833      	ldr	r0, [pc, #204]	; (14550 <get+0xdc>)
   14482:	f7ec fd83 	bl	f8c <printk>
   14486:	4833      	ldr	r0, [pc, #204]	; (14554 <get+0xe0>)
   14488:	f7ec fd80 	bl	f8c <printk>
   1448c:	e7fe      	b.n	1448c <get+0x18>
	first = rng->first;
   1448e:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   14490:	78c4      	ldrb	r4, [r0, #3]
	s = &rng->rand[first];
   14492:	1d1e      	adds	r6, r3, #4
	if (first <= last) {
   14494:	42a3      	cmp	r3, r4
	d = &rand[octets];
   14496:	440a      	add	r2, r1
	s = &rng->rand[first];
   14498:	4406      	add	r6, r0
	if (first <= last) {
   1449a:	d81f      	bhi.n	144dc <get+0x68>
		avail = last - first;
   1449c:	1ae4      	subs	r4, r4, r3
   1449e:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   144a0:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   144a2:	bf3e      	ittt	cc
   144a4:	1a64      	subcc	r4, r4, r1
   144a6:	b2e7      	uxtbcc	r7, r4
   144a8:	460c      	movcc	r4, r1
		first += avail;
   144aa:	4423      	add	r3, r4
		octets -= avail;
   144ac:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   144b0:	bf28      	it	cs
   144b2:	2700      	movcs	r7, #0
		first += avail;
   144b4:	b2db      	uxtb	r3, r3
		octets -= avail;
   144b6:	b2c9      	uxtb	r1, r1
   144b8:	4434      	add	r4, r6
		while (avail--) {
   144ba:	42a6      	cmp	r6, r4
   144bc:	d109      	bne.n	144d2 <get+0x5e>
		rng->first = first;
   144be:	7083      	strb	r3, [r0, #2]
	if (remaining < rng->threshold) {
   144c0:	7843      	ldrb	r3, [r0, #1]
   144c2:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   144c4:	bf82      	ittt	hi
   144c6:	4b24      	ldrhi	r3, [pc, #144]	; (14558 <get+0xe4>)
   144c8:	2201      	movhi	r2, #1
   144ca:	601a      	strhi	r2, [r3, #0]
}
   144cc:	4608      	mov	r0, r1
   144ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   144d2:	f816 5b01 	ldrb.w	r5, [r6], #1
   144d6:	f802 5d01 	strb.w	r5, [r2, #-1]!
   144da:	e7ee      	b.n	144ba <get+0x46>
		avail = rng->count - first;
   144dc:	7805      	ldrb	r5, [r0, #0]
   144de:	1aed      	subs	r5, r5, r3
   144e0:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   144e2:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   144e4:	bf3f      	itttt	cc
   144e6:	1a67      	subcc	r7, r4, r1
   144e8:	19ed      	addcc	r5, r5, r7
   144ea:	b2ef      	uxtbcc	r7, r5
   144ec:	460d      	movcc	r5, r1
			first += avail;
   144ee:	bf38      	it	cc
   144f0:	185b      	addcc	r3, r3, r1
		octets -= avail;
   144f2:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   144f6:	bf32      	itee	cc
   144f8:	b2db      	uxtbcc	r3, r3
   144fa:	4627      	movcs	r7, r4
			first = 0;
   144fc:	2300      	movcs	r3, #0
		octets -= avail;
   144fe:	b2c9      	uxtb	r1, r1
   14500:	4696      	mov	lr, r2
   14502:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   14506:	4566      	cmp	r6, ip
   14508:	d119      	bne.n	1453e <get+0xca>
   1450a:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   1450c:	2900      	cmp	r1, #0
   1450e:	d0d6      	beq.n	144be <get+0x4a>
   14510:	2c00      	cmp	r4, #0
   14512:	d0d4      	beq.n	144be <get+0x4a>
			if (octets < last) {
   14514:	428c      	cmp	r4, r1
   14516:	bf8a      	itet	hi
   14518:	460b      	movhi	r3, r1
   1451a:	4623      	movls	r3, r4
				remaining = last - octets;
   1451c:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   1451e:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   14522:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   14526:	bf8c      	ite	hi
   14528:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   1452a:	2700      	movls	r7, #0
			octets -= last;
   1452c:	b2c9      	uxtb	r1, r1
   1452e:	18f4      	adds	r4, r6, r3
			while (last--) {
   14530:	42a6      	cmp	r6, r4
   14532:	d0c4      	beq.n	144be <get+0x4a>
				*(--d) = *s++;
   14534:	f816 5b01 	ldrb.w	r5, [r6], #1
   14538:	f802 5d01 	strb.w	r5, [r2, #-1]!
   1453c:	e7f8      	b.n	14530 <get+0xbc>
			*(--d) = *s++;
   1453e:	f816 8b01 	ldrb.w	r8, [r6], #1
   14542:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   14546:	e7de      	b.n	14506 <get+0x92>
   14548:	0001acf0 	.word	0x0001acf0
   1454c:	0001ad2e 	.word	0x0001ad2e
   14550:	0001619c 	.word	0x0001619c
   14554:	000161ba 	.word	0x000161ba
   14558:	4000d000 	.word	0x4000d000

0001455c <entropy_nrf5_get_entropy_isr>:
	if (!(flags & ENTROPY_BUSYWAIT)) {
   1455c:	07db      	lsls	r3, r3, #31
{
   1455e:	b570      	push	{r4, r5, r6, lr}
   14560:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   14562:	d507      	bpl.n	14574 <entropy_nrf5_get_entropy_isr+0x18>
   14564:	4613      	mov	r3, r2
   14566:	4a0d      	ldr	r2, [pc, #52]	; (1459c <entropy_nrf5_get_entropy_isr+0x40>)
   14568:	2001      	movs	r0, #1
		NRF_RNG->EVENTS_VALRDY = 0;
   1456a:	2500      	movs	r5, #0
	while (len) {
   1456c:	b94b      	cbnz	r3, 14582 <entropy_nrf5_get_entropy_isr+0x26>
	NRF_RNG->TASKS_STOP = 1;
   1456e:	6050      	str	r0, [r2, #4]
	return cnt;
   14570:	4620      	mov	r0, r4
}
   14572:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   14574:	6880      	ldr	r0, [r0, #8]
   14576:	460a      	mov	r2, r1
   14578:	303c      	adds	r0, #60	; 0x3c
   1457a:	b2e1      	uxtb	r1, r4
   1457c:	f7ff ff7a 	bl	14474 <get>
   14580:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   14582:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   14586:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   14588:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   1458c:	2e00      	cmp	r6, #0
   1458e:	d0fb      	beq.n	14588 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   14590:	3b01      	subs	r3, #1
   14592:	b29b      	uxth	r3, r3
   14594:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   14598:	54ce      	strb	r6, [r1, r3]
   1459a:	e7e7      	b.n	1456c <entropy_nrf5_get_entropy_isr+0x10>
   1459c:	4000d000 	.word	0x4000d000

000145a0 <entropy_nrf5_get_entropy>:
{
   145a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   145a4:	6885      	ldr	r5, [r0, #8]
{
   145a6:	460f      	mov	r7, r1
   145a8:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   145aa:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   145ae:	b914      	cbnz	r4, 145b6 <entropy_nrf5_get_entropy+0x16>
}
   145b0:	4620      	mov	r0, r4
   145b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145b6:	2cff      	cmp	r4, #255	; 0xff
   145b8:	4623      	mov	r3, r4
   145ba:	bf28      	it	cs
   145bc:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   145be:	1ae4      	subs	r4, r4, r3
   145c0:	b2de      	uxtb	r6, r3
   145c2:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   145c4:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   145c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   145cc:	4628      	mov	r0, r5
   145ce:	f000 fe45 	bl	1525c <_impl_k_sem_take>
   145d2:	4631      	mov	r1, r6
   145d4:	463a      	mov	r2, r7
   145d6:	4648      	mov	r0, r9
   145d8:	f7ff ff4c 	bl	14474 <get>
   145dc:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   145de:	4628      	mov	r0, r5
   145e0:	f000 fe14 	bl	1520c <_impl_k_sem_give>
			if (len8) {
   145e4:	2e00      	cmp	r6, #0
   145e6:	d0e2      	beq.n	145ae <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   145e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   145ec:	4640      	mov	r0, r8
   145ee:	f000 fe35 	bl	1525c <_impl_k_sem_take>
   145f2:	e7e9      	b.n	145c8 <entropy_nrf5_get_entropy+0x28>

000145f4 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   145f4:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   145f6:	4802      	ldr	r0, [pc, #8]	; (14600 <entropy_nrf_get_entropy_isr+0xc>)
   145f8:	460a      	mov	r2, r1
   145fa:	4619      	mov	r1, r3
   145fc:	f7ff bf3a 	b.w	14474 <get>
   14600:	20001734 	.word	0x20001734

00014604 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   14604:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   14606:	4b08      	ldr	r3, [pc, #32]	; (14628 <_sys_device_do_config_level+0x24>)
   14608:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1460c:	3001      	adds	r0, #1
   1460e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   14612:	4620      	mov	r0, r4
   14614:	42a8      	cmp	r0, r5
   14616:	f104 040c 	add.w	r4, r4, #12
   1461a:	d300      	bcc.n	1461e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   1461c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   1461e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14622:	685b      	ldr	r3, [r3, #4]
   14624:	4798      	blx	r3
   14626:	e7f4      	b.n	14612 <_sys_device_do_config_level+0xe>
   14628:	0001ad34 	.word	0x0001ad34

0001462c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1462c:	4b10      	ldr	r3, [pc, #64]	; (14670 <device_get_binding+0x44>)
{
   1462e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   14630:	4c10      	ldr	r4, [pc, #64]	; (14674 <device_get_binding+0x48>)
{
   14632:	4605      	mov	r5, r0
   14634:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   14636:	429c      	cmp	r4, r3
   14638:	d104      	bne.n	14644 <device_get_binding+0x18>
   1463a:	4c0e      	ldr	r4, [pc, #56]	; (14674 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1463c:	42b4      	cmp	r4, r6
   1463e:	d109      	bne.n	14654 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   14640:	2400      	movs	r4, #0
   14642:	e012      	b.n	1466a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   14644:	6862      	ldr	r2, [r4, #4]
   14646:	b11a      	cbz	r2, 14650 <device_get_binding+0x24>
   14648:	6822      	ldr	r2, [r4, #0]
   1464a:	6812      	ldr	r2, [r2, #0]
   1464c:	42aa      	cmp	r2, r5
   1464e:	d00c      	beq.n	1466a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   14650:	340c      	adds	r4, #12
   14652:	e7f0      	b.n	14636 <device_get_binding+0xa>
		if (!info->driver_api) {
   14654:	6863      	ldr	r3, [r4, #4]
   14656:	b90b      	cbnz	r3, 1465c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   14658:	340c      	adds	r4, #12
   1465a:	e7ef      	b.n	1463c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   1465c:	6823      	ldr	r3, [r4, #0]
   1465e:	4628      	mov	r0, r5
   14660:	6819      	ldr	r1, [r3, #0]
   14662:	f7ed fbe3 	bl	1e2c <strcmp>
   14666:	2800      	cmp	r0, #0
   14668:	d1f6      	bne.n	14658 <device_get_binding+0x2c>
}
   1466a:	4620      	mov	r0, r4
   1466c:	bd70      	pop	{r4, r5, r6, pc}
   1466e:	bf00      	nop
   14670:	20003f04 	.word	0x20003f04
   14674:	20003e74 	.word	0x20003e74

00014678 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   14678:	1c43      	adds	r3, r0, #1
   1467a:	d003      	beq.n	14684 <_sys_power_save_idle_exit+0xc>
   1467c:	4b03      	ldr	r3, [pc, #12]	; (1468c <_sys_power_save_idle_exit+0x14>)
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	4298      	cmp	r0, r3
   14682:	db01      	blt.n	14688 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   14684:	f7ec bf4c 	b.w	1520 <_timer_idle_exit>
   14688:	4770      	bx	lr
   1468a:	bf00      	nop
   1468c:	20003e68 	.word	0x20003e68

00014690 <idle>:
	return list->head == list;
   14690:	4d0f      	ldr	r5, [pc, #60]	; (146d0 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   14692:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   14694:	4f0f      	ldr	r7, [pc, #60]	; (146d4 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14696:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   1469a:	f04f 0220 	mov.w	r2, #32
   1469e:	f3ef 8311 	mrs	r3, BASEPRI
   146a2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   146a6:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   146a8:	42b3      	cmp	r3, r6
   146aa:	d00a      	beq.n	146c2 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   146ac:	b14b      	cbz	r3, 146c2 <idle+0x32>
   146ae:	691c      	ldr	r4, [r3, #16]
   146b0:	1c63      	adds	r3, r4, #1
   146b2:	d008      	beq.n	146c6 <idle+0x36>
   146b4:	683b      	ldr	r3, [r7, #0]
   146b6:	42a3      	cmp	r3, r4
   146b8:	dd05      	ble.n	146c6 <idle+0x36>
	_kernel.idle = ticks;
   146ba:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   146bc:	f7ed fa2c 	bl	1b18 <k_cpu_idle>
   146c0:	e7eb      	b.n	1469a <idle+0xa>
   146c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   146c6:	4620      	mov	r0, r4
   146c8:	f7ec ff0c 	bl	14e4 <_timer_idle_enter>
   146cc:	e7f5      	b.n	146ba <idle+0x2a>
   146ce:	bf00      	nop
   146d0:	20001948 	.word	0x20001948
   146d4:	20003e68 	.word	0x20003e68

000146d8 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   146d8:	4802      	ldr	r0, [pc, #8]	; (146e4 <_bss_zero+0xc>)
   146da:	4a03      	ldr	r2, [pc, #12]	; (146e8 <_bss_zero+0x10>)
   146dc:	2100      	movs	r1, #0
   146de:	1a12      	subs	r2, r2, r0
   146e0:	f7ed bbf2 	b.w	1ec8 <memset>
   146e4:	20000000 	.word	0x20000000
   146e8:	20001a08 	.word	0x20001a08

000146ec <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   146ec:	4802      	ldr	r0, [pc, #8]	; (146f8 <_data_copy+0xc>)
   146ee:	4a03      	ldr	r2, [pc, #12]	; (146fc <_data_copy+0x10>)
   146f0:	4903      	ldr	r1, [pc, #12]	; (14700 <_data_copy+0x14>)
   146f2:	1a12      	subs	r2, r2, r0
   146f4:	f7ed bbbc 	b.w	1e70 <memcpy>
   146f8:	20003a20 	.word	0x20003a20
   146fc:	20003fac 	.word	0x20003fac
   14700:	0001b1fc 	.word	0x0001b1fc

00014704 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   14704:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   14706:	2002      	movs	r0, #2
   14708:	f7ff ff7c 	bl	14604 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   1470c:	4807      	ldr	r0, [pc, #28]	; (1472c <bg_thread_main+0x28>)
   1470e:	f7ec fc3d 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   14712:	2003      	movs	r0, #3
   14714:	f7ff ff76 	bl	14604 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   14718:	f000 fff2 	bl	15700 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1471c:	f7eb ffd0 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   14720:	4a03      	ldr	r2, [pc, #12]	; (14730 <bg_thread_main+0x2c>)
   14722:	7a13      	ldrb	r3, [r2, #8]
   14724:	f023 0301 	bic.w	r3, r3, #1
   14728:	7213      	strb	r3, [r2, #8]
   1472a:	bd08      	pop	{r3, pc}
   1472c:	0001ad50 	.word	0x0001ad50
   14730:	200017b8 	.word	0x200017b8

00014734 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   14734:	b580      	push	{r7, lr}
   14736:	b086      	sub	sp, #24
   14738:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   1473a:	f7ec ff75 	bl	1628 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1473e:	4b30      	ldr	r3, [pc, #192]	; (14800 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14740:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14744:	4b2f      	ldr	r3, [pc, #188]	; (14804 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   14746:	4d30      	ldr	r5, [pc, #192]	; (14808 <_Cstart+0xd4>)
   14748:	4e30      	ldr	r6, [pc, #192]	; (1480c <_Cstart+0xd8>)
   1474a:	2400      	movs	r4, #0
   1474c:	22e0      	movs	r2, #224	; 0xe0
   1474e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   14752:	77dc      	strb	r4, [r3, #31]
   14754:	761c      	strb	r4, [r3, #24]
   14756:	765c      	strb	r4, [r3, #25]
   14758:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1475a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1475c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   14760:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   14762:	f7ed f90d 	bl	1980 <_FaultInit>
	_CpuIdleInit();
   14766:	f7ed f9d1 	bl	1b0c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1476a:	4620      	mov	r0, r4
   1476c:	f7ff ff4a 	bl	14604 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   14770:	2001      	movs	r0, #1
   14772:	f7ff ff47 	bl	14604 <_sys_device_do_config_level>
	_sched_init();
   14776:	f000 fcbd 	bl	150f4 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   1477a:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   1477c:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   1477e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14782:	9304      	str	r3, [sp, #16]
   14784:	9403      	str	r4, [sp, #12]
   14786:	9402      	str	r4, [sp, #8]
   14788:	9401      	str	r4, [sp, #4]
   1478a:	9400      	str	r4, [sp, #0]
   1478c:	4b20      	ldr	r3, [pc, #128]	; (14810 <_Cstart+0xdc>)
   1478e:	4921      	ldr	r1, [pc, #132]	; (14814 <_Cstart+0xe0>)
   14790:	4628      	mov	r0, r5
   14792:	f000 ff3d 	bl	15610 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14796:	7a6b      	ldrb	r3, [r5, #9]
   14798:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   1479c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   147a0:	726a      	strb	r2, [r5, #9]
   147a2:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   147a4:	d102      	bne.n	147ac <_Cstart+0x78>
   147a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   147a8:	3301      	adds	r3, #1
   147aa:	d024      	beq.n	147f6 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   147ac:	2301      	movs	r3, #1
   147ae:	4e1a      	ldr	r6, [pc, #104]	; (14818 <_Cstart+0xe4>)
   147b0:	9304      	str	r3, [sp, #16]
   147b2:	230f      	movs	r3, #15
   147b4:	9303      	str	r3, [sp, #12]
   147b6:	2300      	movs	r3, #0
   147b8:	9302      	str	r3, [sp, #8]
   147ba:	9301      	str	r3, [sp, #4]
   147bc:	9300      	str	r3, [sp, #0]
   147be:	f44f 72a0 	mov.w	r2, #320	; 0x140
   147c2:	4b16      	ldr	r3, [pc, #88]	; (1481c <_Cstart+0xe8>)
   147c4:	4916      	ldr	r1, [pc, #88]	; (14820 <_Cstart+0xec>)
   147c6:	4630      	mov	r0, r6
   147c8:	f000 ff22 	bl	15610 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   147cc:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   147ce:	60e6      	str	r6, [r4, #12]
   147d0:	f023 0304 	bic.w	r3, r3, #4
   147d4:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   147d6:	4b13      	ldr	r3, [pc, #76]	; (14824 <_Cstart+0xf0>)
   147d8:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   147da:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   147dc:	4b12      	ldr	r3, [pc, #72]	; (14828 <_Cstart+0xf4>)

	_current = main_thread;
   147de:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   147e0:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   147e4:	4c11      	ldr	r4, [pc, #68]	; (1482c <_Cstart+0xf8>)
   147e6:	4a0a      	ldr	r2, [pc, #40]	; (14810 <_Cstart+0xdc>)
   147e8:	f383 8809 	msr	PSP, r3
   147ec:	2100      	movs	r1, #0
   147ee:	f381 8811 	msr	BASEPRI, r1
   147f2:	4610      	mov	r0, r2
   147f4:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   147f6:	4628      	mov	r0, r5
   147f8:	f000 fae8 	bl	14dcc <_add_thread_to_ready_q>
   147fc:	e7d6      	b.n	147ac <_Cstart+0x78>
   147fe:	bf00      	nop
   14800:	20003620 	.word	0x20003620
   14804:	e000ed00 	.word	0xe000ed00
   14808:	200017b8 	.word	0x200017b8
   1480c:	20001948 	.word	0x20001948
   14810:	00014705 	.word	0x00014705
   14814:	200028e0 	.word	0x200028e0
   14818:	20001748 	.word	0x20001748
   1481c:	00014691 	.word	0x00014691
   14820:	20002ce0 	.word	0x20002ce0
   14824:	2000195c 	.word	0x2000195c
   14828:	20002ce0 	.word	0x20002ce0
   1482c:	00000899 	.word	0x00000899

00014830 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   14830:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   14832:	4c07      	ldr	r4, [pc, #28]	; (14850 <init_static_pools+0x20>)
   14834:	4d07      	ldr	r5, [pc, #28]	; (14854 <init_static_pools+0x24>)
   14836:	42ac      	cmp	r4, r5
   14838:	d301      	bcc.n	1483e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1483a:	2000      	movs	r0, #0
   1483c:	bd38      	pop	{r3, r4, r5, pc}
   1483e:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   14842:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   14844:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   14846:	4620      	mov	r0, r4
   14848:	f7ec f861 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1484c:	341c      	adds	r4, #28
   1484e:	e7f2      	b.n	14836 <init_static_pools+0x6>
   14850:	20003f04 	.word	0x20003f04
   14854:	20003f04 	.word	0x20003f04

00014858 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   14858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1485c:	4607      	mov	r7, r0
   1485e:	b085      	sub	sp, #20
   14860:	460c      	mov	r4, r1
   14862:	4692      	mov	sl, r2
   14864:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14866:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   1486a:	2b0d      	cmp	r3, #13
   1486c:	d85d      	bhi.n	1492a <k_mem_pool_alloc+0xd2>
   1486e:	b11b      	cbz	r3, 14878 <k_mem_pool_alloc+0x20>
   14870:	4b30      	ldr	r3, [pc, #192]	; (14934 <k_mem_pool_alloc+0xdc>)
   14872:	685b      	ldr	r3, [r3, #4]
   14874:	051a      	lsls	r2, r3, #20
   14876:	d558      	bpl.n	1492a <k_mem_pool_alloc+0xd2>
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   14878:	2d00      	cmp	r5, #0
   1487a:	dd58      	ble.n	1492e <k_mem_pool_alloc+0xd6>
		end = _tick_get() + _ms_to_ticks(timeout);
   1487c:	f000 fd34 	bl	152e8 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14880:	f105 0309 	add.w	r3, r5, #9
   14884:	220a      	movs	r2, #10
   14886:	fbb3 f3f2 	udiv	r3, r3, r2
   1488a:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   1488e:	4b2a      	ldr	r3, [pc, #168]	; (14938 <k_mem_pool_alloc+0xe0>)
   14890:	4e2a      	ldr	r6, [pc, #168]	; (1493c <k_mem_pool_alloc+0xe4>)
   14892:	1afb      	subs	r3, r7, r3
   14894:	109b      	asrs	r3, r3, #2
   14896:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   14898:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1489a:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1489e:	9400      	str	r4, [sp, #0]
   148a0:	ab03      	add	r3, sp, #12
   148a2:	aa02      	add	r2, sp, #8
   148a4:	4651      	mov	r1, sl
   148a6:	4638      	mov	r0, r7
   148a8:	f7ec f87c 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   148ac:	f110 0f0b 	cmn.w	r0, #11
   148b0:	d10b      	bne.n	148ca <k_mem_pool_alloc+0x72>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   148b2:	9400      	str	r4, [sp, #0]
   148b4:	ab03      	add	r3, sp, #12
   148b6:	aa02      	add	r2, sp, #8
   148b8:	4651      	mov	r1, sl
   148ba:	4638      	mov	r0, r7
   148bc:	f7ec f872 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   148c0:	f110 0f0b 	cmn.w	r0, #11
   148c4:	bf08      	it	eq
   148c6:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   148ca:	7963      	ldrb	r3, [r4, #5]
   148cc:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   148ce:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   148d0:	f362 0303 	bfi	r3, r2, #0, #4
   148d4:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   148d6:	6863      	ldr	r3, [r4, #4]
   148d8:	9a03      	ldr	r2, [sp, #12]
   148da:	f362 331f 	bfi	r3, r2, #12, #20
   148de:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   148e0:	b1b0      	cbz	r0, 14910 <k_mem_pool_alloc+0xb8>
   148e2:	b1ad      	cbz	r5, 14910 <k_mem_pool_alloc+0xb8>
		    (ret && ret != -ENOMEM)) {
   148e4:	f110 0f0c 	cmn.w	r0, #12
   148e8:	d112      	bne.n	14910 <k_mem_pool_alloc+0xb8>
   148ea:	f04f 0320 	mov.w	r3, #32
   148ee:	f3ef 8011 	mrs	r0, BASEPRI
   148f2:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   148f6:	462a      	mov	r2, r5
   148f8:	4659      	mov	r1, fp
   148fa:	f000 fb8f 	bl	1501c <_pend_current_thread>

		if (timeout != K_FOREVER) {
   148fe:	1c6b      	adds	r3, r5, #1
   14900:	d0cd      	beq.n	1489e <k_mem_pool_alloc+0x46>
			timeout = end - _tick_get();
   14902:	f000 fcf1 	bl	152e8 <_tick_get>

			if (timeout < 0) {
   14906:	ebb8 0500 	subs.w	r5, r8, r0
   1490a:	d5c8      	bpl.n	1489e <k_mem_pool_alloc+0x46>
				break;
			}
		}
	}

	return -EAGAIN;
   1490c:	f06f 000a 	mvn.w	r0, #10
}
   14910:	b005      	add	sp, #20
   14912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");
   14916:	2338      	movs	r3, #56	; 0x38
   14918:	4a09      	ldr	r2, [pc, #36]	; (14940 <k_mem_pool_alloc+0xe8>)
   1491a:	490a      	ldr	r1, [pc, #40]	; (14944 <k_mem_pool_alloc+0xec>)
   1491c:	480a      	ldr	r0, [pc, #40]	; (14948 <k_mem_pool_alloc+0xf0>)
   1491e:	f7ec fb35 	bl	f8c <printk>
   14922:	480a      	ldr	r0, [pc, #40]	; (1494c <k_mem_pool_alloc+0xf4>)
   14924:	f7ec fb32 	bl	f8c <printk>
   14928:	e7fe      	b.n	14928 <k_mem_pool_alloc+0xd0>
   1492a:	2d00      	cmp	r5, #0
   1492c:	d1f3      	bne.n	14916 <k_mem_pool_alloc+0xbe>
	s64_t end = 0;
   1492e:	f04f 0800 	mov.w	r8, #0
   14932:	e7ac      	b.n	1488e <k_mem_pool_alloc+0x36>
   14934:	e000ed00 	.word	0xe000ed00
   14938:	20003f04 	.word	0x20003f04
   1493c:	b6db6db7 	.word	0xb6db6db7
   14940:	0001ad84 	.word	0x0001ad84
   14944:	0001adb4 	.word	0x0001adb4
   14948:	0001619c 	.word	0x0001619c
   1494c:	000161ba 	.word	0x000161ba

00014950 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   14950:	b570      	push	{r4, r5, r6, lr}
   14952:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   14954:	6802      	ldr	r2, [r0, #0]
   14956:	7841      	ldrb	r1, [r0, #1]
   14958:	4e13      	ldr	r6, [pc, #76]	; (149a8 <k_mem_pool_free_id+0x58>)
   1495a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1495e:	00a4      	lsls	r4, r4, #2
   14960:	0b12      	lsrs	r2, r2, #12
   14962:	f001 010f 	and.w	r1, r1, #15
   14966:	1930      	adds	r0, r6, r4
   14968:	f7ec f8ce 	bl	b08 <_sys_mem_pool_block_free>
   1496c:	f04f 0320 	mov.w	r3, #32
   14970:	f3ef 8511 	mrs	r5, BASEPRI
   14974:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   14978:	f104 0014 	add.w	r0, r4, #20
   1497c:	4430      	add	r0, r6
   1497e:	f000 fba9 	bl	150d4 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   14982:	b140      	cbz	r0, 14996 <k_mem_pool_free_id+0x46>
   14984:	f3ef 8305 	mrs	r3, IPSR
   14988:	2b0d      	cmp	r3, #13
   1498a:	d804      	bhi.n	14996 <k_mem_pool_free_id+0x46>
   1498c:	b133      	cbz	r3, 1499c <k_mem_pool_free_id+0x4c>
   1498e:	4b07      	ldr	r3, [pc, #28]	; (149ac <k_mem_pool_free_id+0x5c>)
   14990:	685b      	ldr	r3, [r3, #4]
   14992:	051b      	lsls	r3, r3, #20
   14994:	d402      	bmi.n	1499c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14996:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1499a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   1499c:	4628      	mov	r0, r5
}
   1499e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   149a2:	f000 b973 	b.w	14c8c <_reschedule>
   149a6:	bf00      	nop
   149a8:	20003f04 	.word	0x20003f04
   149ac:	e000ed00 	.word	0xe000ed00

000149b0 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   149b0:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   149b2:	1d0a      	adds	r2, r1, #4
   149b4:	d204      	bcs.n	149c0 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   149b6:	2300      	movs	r3, #0
   149b8:	4669      	mov	r1, sp
   149ba:	f7ff ff4d 	bl	14858 <k_mem_pool_alloc>
   149be:	b118      	cbz	r0, 149c8 <k_mem_pool_malloc+0x18>
		return NULL;
   149c0:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   149c2:	b003      	add	sp, #12
   149c4:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   149c8:	2204      	movs	r2, #4
   149ca:	eb0d 0102 	add.w	r1, sp, r2
   149ce:	9800      	ldr	r0, [sp, #0]
   149d0:	f7ed fa4e 	bl	1e70 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   149d4:	9800      	ldr	r0, [sp, #0]
   149d6:	3004      	adds	r0, #4
   149d8:	e7f3      	b.n	149c2 <k_mem_pool_malloc+0x12>

000149da <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   149da:	b110      	cbz	r0, 149e2 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   149dc:	3804      	subs	r0, #4
   149de:	f7ff bfb7 	b.w	14950 <k_mem_pool_free_id>
   149e2:	4770      	bx	lr

000149e4 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   149e4:	4b03      	ldr	r3, [pc, #12]	; (149f4 <z_thread_malloc+0x10>)
   149e6:	689b      	ldr	r3, [r3, #8]
{
   149e8:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   149ea:	6e58      	ldr	r0, [r3, #100]	; 0x64
   149ec:	b108      	cbz	r0, 149f2 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   149ee:	f7ff bfdf 	b.w	149b0 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   149f2:	4770      	bx	lr
   149f4:	20001948 	.word	0x20001948

000149f8 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   149f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149fa:	4605      	mov	r5, r0
   149fc:	460f      	mov	r7, r1
   149fe:	4614      	mov	r4, r2
	__asm__ volatile(
   14a00:	f04f 0220 	mov.w	r2, #32
   14a04:	f3ef 8611 	mrs	r6, BASEPRI
   14a08:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   14a0c:	b1a3      	cbz	r3, 14a38 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   14a0e:	2008      	movs	r0, #8
   14a10:	f7ff ffe8 	bl	149e4 <z_thread_malloc>
		if (!anode) {
   14a14:	2800      	cmp	r0, #0
   14a16:	d034      	beq.n	14a82 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   14a18:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   14a1a:	6044      	str	r4, [r0, #4]
   14a1c:	6003      	str	r3, [r0, #0]
   14a1e:	4604      	mov	r4, r0
   14a20:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   14a22:	b95f      	cbnz	r7, 14a3c <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a24:	682a      	ldr	r2, [r5, #0]
   14a26:	f003 0303 	and.w	r3, r3, #3
   14a2a:	4313      	orrs	r3, r2
   14a2c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   14a2e:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   14a30:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   14a32:	b973      	cbnz	r3, 14a52 <queue_insert+0x5a>
	list->tail = node;
   14a34:	606c      	str	r4, [r5, #4]
   14a36:	e00c      	b.n	14a52 <queue_insert+0x5a>
	node->next_and_flags = flags;
   14a38:	6023      	str	r3, [r4, #0]
   14a3a:	e7f1      	b.n	14a20 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14a3c:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   14a3e:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a42:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   14a46:	d114      	bne.n	14a72 <queue_insert+0x7a>
   14a48:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a4a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   14a4c:	b95a      	cbnz	r2, 14a66 <queue_insert+0x6e>
	list->tail = node;
   14a4e:	606c      	str	r4, [r5, #4]
	list->head = node;
   14a50:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   14a52:	2104      	movs	r1, #4
   14a54:	f105 0008 	add.w	r0, r5, #8
   14a58:	f001 fa28 	bl	15eac <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   14a5c:	4630      	mov	r0, r6
   14a5e:	f000 f915 	bl	14c8c <_reschedule>
	return 0;
   14a62:	2000      	movs	r0, #0
   14a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14a66:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a68:	f003 0303 	and.w	r3, r3, #3
   14a6c:	4323      	orrs	r3, r4
   14a6e:	6013      	str	r3, [r2, #0]
   14a70:	e7e0      	b.n	14a34 <queue_insert+0x3c>
   14a72:	4313      	orrs	r3, r2
   14a74:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14a76:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14a78:	f002 0203 	and.w	r2, r2, #3
   14a7c:	4314      	orrs	r4, r2
   14a7e:	603c      	str	r4, [r7, #0]
   14a80:	e7e7      	b.n	14a52 <queue_insert+0x5a>
			return -ENOMEM;
   14a82:	f06f 000b 	mvn.w	r0, #11
}
   14a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014a88 <z_queue_node_peek>:
{
   14a88:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   14a8a:	4604      	mov	r4, r0
   14a8c:	b130      	cbz	r0, 14a9c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14a8e:	6802      	ldr	r2, [r0, #0]
   14a90:	0793      	lsls	r3, r2, #30
   14a92:	d003      	beq.n	14a9c <z_queue_node_peek+0x14>
		ret = anode->data;
   14a94:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   14a96:	b109      	cbz	r1, 14a9c <z_queue_node_peek+0x14>
			k_free(anode);
   14a98:	f7ff ff9f 	bl	149da <k_free>
}
   14a9c:	4620      	mov	r0, r4
   14a9e:	bd10      	pop	{r4, pc}

00014aa0 <_impl_k_queue_init>:
	list->head = NULL;
   14aa0:	2300      	movs	r3, #0
   14aa2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   14aa4:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   14aa6:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   14aaa:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   14aac:	60c3      	str	r3, [r0, #12]
   14aae:	4770      	bx	lr

00014ab0 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   14ab0:	460a      	mov	r2, r1
   14ab2:	2300      	movs	r3, #0
   14ab4:	6841      	ldr	r1, [r0, #4]
   14ab6:	f7ff bf9f 	b.w	149f8 <queue_insert>

00014aba <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   14aba:	2300      	movs	r3, #0
   14abc:	460a      	mov	r2, r1
   14abe:	4619      	mov	r1, r3
   14ac0:	f7ff bf9a 	b.w	149f8 <queue_insert>

00014ac4 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   14ac4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(head && tail, "invalid head or tail");
   14ac6:	b101      	cbz	r1, 14aca <k_queue_append_list+0x6>
   14ac8:	b94a      	cbnz	r2, 14ade <k_queue_append_list+0x1a>
   14aca:	23e9      	movs	r3, #233	; 0xe9
   14acc:	4a10      	ldr	r2, [pc, #64]	; (14b10 <k_queue_append_list+0x4c>)
   14ace:	4911      	ldr	r1, [pc, #68]	; (14b14 <k_queue_append_list+0x50>)
   14ad0:	4811      	ldr	r0, [pc, #68]	; (14b18 <k_queue_append_list+0x54>)
   14ad2:	f7ec fa5b 	bl	f8c <printk>
   14ad6:	4811      	ldr	r0, [pc, #68]	; (14b1c <k_queue_append_list+0x58>)
   14ad8:	f7ec fa58 	bl	f8c <printk>
   14adc:	e7fe      	b.n	14adc <k_queue_append_list+0x18>
   14ade:	f04f 0320 	mov.w	r3, #32
   14ae2:	f3ef 8511 	mrs	r5, BASEPRI
   14ae6:	f383 8811 	msr	BASEPRI, r3
   14aea:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   14aec:	b953      	cbnz	r3, 14b04 <k_queue_append_list+0x40>
	list->head = node;
   14aee:	6001      	str	r1, [r0, #0]
	list->tail = node;
   14af0:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   14af2:	2104      	movs	r1, #4
   14af4:	3008      	adds	r0, #8
   14af6:	f001 f9d9 	bl	15eac <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   14afa:	4628      	mov	r0, r5
}
   14afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   14b00:	f000 b8c4 	b.w	14c8c <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14b04:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14b06:	f004 0403 	and.w	r4, r4, #3
   14b0a:	4321      	orrs	r1, r4
   14b0c:	6019      	str	r1, [r3, #0]
   14b0e:	e7ef      	b.n	14af0 <k_queue_append_list+0x2c>
   14b10:	0001add2 	.word	0x0001add2
   14b14:	0001ae00 	.word	0x0001ae00
   14b18:	0001619c 	.word	0x0001619c
   14b1c:	0001ae0d 	.word	0x0001ae0d

00014b20 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   14b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b24:	4604      	mov	r4, r0
   14b26:	b086      	sub	sp, #24
   14b28:	460d      	mov	r5, r1
   14b2a:	f04f 0320 	mov.w	r3, #32
   14b2e:	f3ef 8711 	mrs	r7, BASEPRI
   14b32:	f383 8811 	msr	BASEPRI, r3
   14b36:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   14b38:	b182      	cbz	r2, 14b5c <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14b3a:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14b3c:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14b3e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14b42:	428a      	cmp	r2, r1
	list->head = node;
   14b44:	6003      	str	r3, [r0, #0]
	list->tail = node;
   14b46:	bf08      	it	eq
   14b48:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14b4a:	2101      	movs	r1, #1
   14b4c:	4610      	mov	r0, r2
   14b4e:	f7ff ff9b 	bl	14a88 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14b52:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   14b56:	b006      	add	sp, #24
   14b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   14b5c:	b919      	cbnz	r1, 14b66 <_impl_k_queue_get+0x46>
   14b5e:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   14b62:	2000      	movs	r0, #0
   14b64:	e7f7      	b.n	14b56 <_impl_k_queue_get+0x36>
   14b66:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   14b6a:	2104      	movs	r1, #4
   14b6c:	4603      	mov	r3, r0
   14b6e:	eb0d 0001 	add.w	r0, sp, r1
   14b72:	f001 f83b 	bl	15bec <k_poll_event_init>
	if (timeout != K_FOREVER) {
   14b76:	1c6a      	adds	r2, r5, #1
   14b78:	d002      	beq.n	14b80 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14b7a:	f000 fbab 	bl	152d4 <_impl_k_uptime_get_32>
   14b7e:	4606      	mov	r6, r0
{
   14b80:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   14b82:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   14b86:	1bea      	subs	r2, r5, r7
   14b88:	f36f 1307 	bfc	r3, #4, #4
   14b8c:	2101      	movs	r1, #1
   14b8e:	a801      	add	r0, sp, #4
   14b90:	f88d 3011 	strb.w	r3, [sp, #17]
   14b94:	f001 f870 	bl	15c78 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   14b98:	b108      	cbz	r0, 14b9e <_impl_k_queue_get+0x7e>
   14b9a:	300b      	adds	r0, #11
   14b9c:	d1e1      	bne.n	14b62 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   14b9e:	f04f 0320 	mov.w	r3, #32
   14ba2:	f3ef 8811 	mrs	r8, BASEPRI
   14ba6:	f383 8811 	msr	BASEPRI, r3
   14baa:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   14bac:	b138      	cbz	r0, 14bbe <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14bae:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14bb0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14bb2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14bb6:	4290      	cmp	r0, r2
	list->head = node;
   14bb8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   14bba:	bf08      	it	eq
   14bbc:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   14bbe:	2101      	movs	r1, #1
   14bc0:	f7ff ff62 	bl	14a88 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14bc4:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   14bc8:	2800      	cmp	r0, #0
   14bca:	d1c4      	bne.n	14b56 <_impl_k_queue_get+0x36>
   14bcc:	1c6b      	adds	r3, r5, #1
   14bce:	d0d8      	beq.n	14b82 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14bd0:	f000 fb80 	bl	152d4 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   14bd4:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   14bd6:	42bd      	cmp	r5, r7
   14bd8:	dad3      	bge.n	14b82 <_impl_k_queue_get+0x62>
   14bda:	e7c2      	b.n	14b62 <_impl_k_queue_get+0x42>

00014bdc <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14bdc:	6903      	ldr	r3, [r0, #16]
   14bde:	1c5a      	adds	r2, r3, #1
   14be0:	d011      	beq.n	14c06 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14be2:	4a0a      	ldr	r2, [pc, #40]	; (14c0c <_abort_timeout+0x30>)
   14be4:	6992      	ldr	r2, [r2, #24]
   14be6:	4290      	cmp	r0, r2
	return (node == list->tail) ? NULL : node->next;
   14be8:	bf1f      	itttt	ne
   14bea:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14bec:	690a      	ldrne	r2, [r1, #16]
   14bee:	189b      	addne	r3, r3, r2
   14bf0:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   14bf2:	e890 000c 	ldmia.w	r0, {r2, r3}
   14bf6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14bf8:	6802      	ldr	r2, [r0, #0]
   14bfa:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c00:	6103      	str	r3, [r0, #16]
	return 0;
   14c02:	2000      	movs	r0, #0
   14c04:	4770      	bx	lr
		return _INACTIVE;
   14c06:	4618      	mov	r0, r3
}
   14c08:	4770      	bx	lr
   14c0a:	bf00      	nop
   14c0c:	20001948 	.word	0x20001948

00014c10 <k_spin_lock.isra.11>:
	__asm__ volatile(
   14c10:	f04f 0320 	mov.w	r3, #32
   14c14:	f3ef 8011 	mrs	r0, BASEPRI
   14c18:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   14c1c:	4770      	bx	lr
	...

00014c20 <update_cache>:
	return list->head == list;
   14c20:	4b0d      	ldr	r3, [pc, #52]	; (14c58 <update_cache+0x38>)
   14c22:	4619      	mov	r1, r3
   14c24:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14c28:	428a      	cmp	r2, r1
   14c2a:	d000      	beq.n	14c2e <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   14c2c:	b902      	cbnz	r2, 14c30 <update_cache+0x10>
   14c2e:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   14c30:	b970      	cbnz	r0, 14c50 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   14c32:	6899      	ldr	r1, [r3, #8]
   14c34:	b161      	cbz	r1, 14c50 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   14c36:	7a48      	ldrb	r0, [r1, #9]
   14c38:	06c0      	lsls	r0, r0, #27
   14c3a:	d109      	bne.n	14c50 <update_cache+0x30>
   14c3c:	6a48      	ldr	r0, [r1, #36]	; 0x24
   14c3e:	3001      	adds	r0, #1
   14c40:	d106      	bne.n	14c50 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   14c42:	8948      	ldrh	r0, [r1, #10]
   14c44:	287f      	cmp	r0, #127	; 0x7f
   14c46:	d903      	bls.n	14c50 <update_cache+0x30>
	return thread == _idle_thread;
   14c48:	4804      	ldr	r0, [pc, #16]	; (14c5c <update_cache+0x3c>)
	if (_is_idle(_current)) {
   14c4a:	6800      	ldr	r0, [r0, #0]
   14c4c:	4281      	cmp	r1, r0
   14c4e:	d101      	bne.n	14c54 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   14c50:	621a      	str	r2, [r3, #32]
   14c52:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   14c54:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   14c56:	4770      	bx	lr
   14c58:	20001948 	.word	0x20001948
   14c5c:	0001ad4c 	.word	0x0001ad4c

00014c60 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   14c60:	f990 000a 	ldrsb.w	r0, [r0, #10]
   14c64:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   14c68:	4298      	cmp	r0, r3
   14c6a:	bfac      	ite	ge
   14c6c:	2000      	movge	r0, #0
   14c6e:	2001      	movlt	r0, #1
   14c70:	4770      	bx	lr

00014c72 <_find_first_thread_to_unpend>:
#endif
}

struct k_thread *_find_first_thread_to_unpend(_wait_q_t *wait_q,
					      struct k_thread *from)
{
   14c72:	b508      	push	{r3, lr}
   14c74:	4602      	mov	r2, r0
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_lock) {
   14c76:	f7ff ffcb 	bl	14c10 <k_spin_lock.isra.11>
	return list->head == list;
   14c7a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14c7c:	429a      	cmp	r2, r3
   14c7e:	bf08      	it	eq
   14c80:	2300      	moveq	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14c82:	f380 8811 	msr	BASEPRI, r0
		ret = _priq_wait_best(&wait_q->waitq);
	}

	return ret;
}
   14c86:	4618      	mov	r0, r3
   14c88:	bd08      	pop	{r3, pc}
	...

00014c8c <_reschedule>:
   14c8c:	f3ef 8305 	mrs	r3, IPSR
   14c90:	2b0d      	cmp	r3, #13
   14c92:	d809      	bhi.n	14ca8 <_reschedule+0x1c>
   14c94:	b11b      	cbz	r3, 14c9e <_reschedule+0x12>
   14c96:	4b09      	ldr	r3, [pc, #36]	; (14cbc <_reschedule+0x30>)
   14c98:	685b      	ldr	r3, [r3, #4]
   14c9a:	051b      	lsls	r3, r3, #20
   14c9c:	d504      	bpl.n	14ca8 <_reschedule+0x1c>
	}

#ifdef CONFIG_SMP
	return _Swap(key);
#else
	if (_get_next_ready_thread() != _current) {
   14c9e:	4b08      	ldr	r3, [pc, #32]	; (14cc0 <_reschedule+0x34>)
   14ca0:	689a      	ldr	r2, [r3, #8]
   14ca2:	6a1b      	ldr	r3, [r3, #32]
   14ca4:	429a      	cmp	r2, r3
   14ca6:	d103      	bne.n	14cb0 <_reschedule+0x24>
   14ca8:	f380 8811 	msr	BASEPRI, r0
#endif

 noswap:
	irq_unlock(key);
	return 0;
}
   14cac:	2000      	movs	r0, #0
   14cae:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14cb0:	4b04      	ldr	r3, [pc, #16]	; (14cc4 <_reschedule+0x38>)
   14cb2:	2200      	movs	r2, #0
   14cb4:	601a      	str	r2, [r3, #0]
   14cb6:	f7ec bcc3 	b.w	1640 <__swap>
   14cba:	bf00      	nop
   14cbc:	e000ed00 	.word	0xe000ed00
   14cc0:	20001948 	.word	0x20001948
   14cc4:	2000197c 	.word	0x2000197c

00014cc8 <k_sched_unlock>:
{
   14cc8:	b510      	push	{r4, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   14cca:	4a1c      	ldr	r2, [pc, #112]	; (14d3c <k_sched_unlock+0x74>)
   14ccc:	6893      	ldr	r3, [r2, #8]
   14cce:	7ad9      	ldrb	r1, [r3, #11]
   14cd0:	b951      	cbnz	r1, 14ce8 <k_sched_unlock+0x20>
   14cd2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   14cd6:	4a1a      	ldr	r2, [pc, #104]	; (14d40 <k_sched_unlock+0x78>)
   14cd8:	491a      	ldr	r1, [pc, #104]	; (14d44 <k_sched_unlock+0x7c>)
   14cda:	481b      	ldr	r0, [pc, #108]	; (14d48 <k_sched_unlock+0x80>)
   14cdc:	f7ec f956 	bl	f8c <printk>
   14ce0:	481a      	ldr	r0, [pc, #104]	; (14d4c <k_sched_unlock+0x84>)
   14ce2:	f7ec f953 	bl	f8c <printk>
   14ce6:	e7fe      	b.n	14ce6 <k_sched_unlock+0x1e>
   14ce8:	f3ef 8305 	mrs	r3, IPSR
   14cec:	2b0d      	cmp	r3, #13
   14cee:	d81a      	bhi.n	14d26 <k_sched_unlock+0x5e>
   14cf0:	b11b      	cbz	r3, 14cfa <k_sched_unlock+0x32>
   14cf2:	4b17      	ldr	r3, [pc, #92]	; (14d50 <k_sched_unlock+0x88>)
   14cf4:	685b      	ldr	r3, [r3, #4]
   14cf6:	051b      	lsls	r3, r3, #20
   14cf8:	d515      	bpl.n	14d26 <k_sched_unlock+0x5e>
	LOCKED(&sched_lock) {
   14cfa:	f7ff ff89 	bl	14c10 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   14cfe:	6892      	ldr	r2, [r2, #8]
   14d00:	7ad3      	ldrb	r3, [r2, #11]
   14d02:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   14d04:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   14d06:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   14d08:	2001      	movs	r0, #1
   14d0a:	f7ff ff89 	bl	14c20 <update_cache>
   14d0e:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   14d12:	f04f 0320 	mov.w	r3, #32
   14d16:	f3ef 8011 	mrs	r0, BASEPRI
   14d1a:	f383 8811 	msr	BASEPRI, r3
}
   14d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   14d22:	f7ff bfb3 	b.w	14c8c <_reschedule>
	__ASSERT(!_is_in_isr(), "");
   14d26:	f240 13a5 	movw	r3, #421	; 0x1a5
   14d2a:	4a05      	ldr	r2, [pc, #20]	; (14d40 <k_sched_unlock+0x78>)
   14d2c:	4909      	ldr	r1, [pc, #36]	; (14d54 <k_sched_unlock+0x8c>)
   14d2e:	4806      	ldr	r0, [pc, #24]	; (14d48 <k_sched_unlock+0x80>)
   14d30:	f7ec f92c 	bl	f8c <printk>
   14d34:	4805      	ldr	r0, [pc, #20]	; (14d4c <k_sched_unlock+0x84>)
   14d36:	f7ec f929 	bl	f8c <printk>
   14d3a:	e7fe      	b.n	14d3a <k_sched_unlock+0x72>
   14d3c:	20001948 	.word	0x20001948
   14d40:	0001af09 	.word	0x0001af09
   14d44:	0001af37 	.word	0x0001af37
   14d48:	0001619c 	.word	0x0001619c
   14d4c:	000161ba 	.word	0x000161ba
   14d50:	e000ed00 	.word	0xe000ed00
   14d54:	0001aefd 	.word	0x0001aefd

00014d58 <_priq_dumb_add>:
	return thread == _idle_thread;
   14d58:	4b17      	ldr	r3, [pc, #92]	; (14db8 <_priq_dumb_add+0x60>)
	__ASSERT_NO_MSG(!_is_idle(thread));
   14d5a:	681b      	ldr	r3, [r3, #0]
   14d5c:	4299      	cmp	r1, r3
{
   14d5e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!_is_idle(thread));
   14d60:	d10a      	bne.n	14d78 <_priq_dumb_add+0x20>
   14d62:	f240 13dd 	movw	r3, #477	; 0x1dd
   14d66:	4a15      	ldr	r2, [pc, #84]	; (14dbc <_priq_dumb_add+0x64>)
   14d68:	4915      	ldr	r1, [pc, #84]	; (14dc0 <_priq_dumb_add+0x68>)
   14d6a:	4816      	ldr	r0, [pc, #88]	; (14dc4 <_priq_dumb_add+0x6c>)
   14d6c:	f7ec f90e 	bl	f8c <printk>
   14d70:	4815      	ldr	r0, [pc, #84]	; (14dc8 <_priq_dumb_add+0x70>)
   14d72:	f7ec f90b 	bl	f8c <printk>
   14d76:	e7fe      	b.n	14d76 <_priq_dumb_add+0x1e>
	return list->head == list;
   14d78:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14d7a:	4298      	cmp	r0, r3
   14d7c:	bf08      	it	eq
   14d7e:	2300      	moveq	r3, #0
   14d80:	b193      	cbz	r3, 14da8 <_priq_dumb_add+0x50>
	if (t1->base.prio < t2->base.prio) {
   14d82:	f991 400a 	ldrsb.w	r4, [r1, #10]
   14d86:	f993 200a 	ldrsb.w	r2, [r3, #10]
   14d8a:	4294      	cmp	r4, r2
   14d8c:	da06      	bge.n	14d9c <_priq_dumb_add+0x44>
		node->prev = insert_point->prev;
   14d8e:	685a      	ldr	r2, [r3, #4]
   14d90:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14d92:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14d94:	685a      	ldr	r2, [r3, #4]
   14d96:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14d98:	6059      	str	r1, [r3, #4]
   14d9a:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   14d9c:	6842      	ldr	r2, [r0, #4]
   14d9e:	4293      	cmp	r3, r2
   14da0:	d002      	beq.n	14da8 <_priq_dumb_add+0x50>
   14da2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14da4:	2b00      	cmp	r3, #0
   14da6:	d1eb      	bne.n	14d80 <_priq_dumb_add+0x28>
	node->next = list;
   14da8:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14daa:	6843      	ldr	r3, [r0, #4]
   14dac:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14dae:	6843      	ldr	r3, [r0, #4]
   14db0:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14db2:	6041      	str	r1, [r0, #4]
   14db4:	bd10      	pop	{r4, pc}
   14db6:	bf00      	nop
   14db8:	0001ad4c 	.word	0x0001ad4c
   14dbc:	0001af09 	.word	0x0001af09
   14dc0:	0001ae8c 	.word	0x0001ae8c
   14dc4:	0001619c 	.word	0x0001619c
   14dc8:	000161ba 	.word	0x000161ba

00014dcc <_add_thread_to_ready_q>:
{
   14dcc:	b538      	push	{r3, r4, r5, lr}
   14dce:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14dd0:	f7ff ff1e 	bl	14c10 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14dd4:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   14dd6:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14dd8:	4806      	ldr	r0, [pc, #24]	; (14df4 <_add_thread_to_ready_q+0x28>)
   14dda:	f7ff ffbd 	bl	14d58 <_priq_dumb_add>
	thread->base.thread_state |= states;
   14dde:	7a63      	ldrb	r3, [r4, #9]
   14de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14de4:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   14de6:	2000      	movs	r0, #0
   14de8:	f7ff ff1a 	bl	14c20 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14dec:	f385 8811 	msr	BASEPRI, r5
   14df0:	bd38      	pop	{r3, r4, r5, pc}
   14df2:	bf00      	nop
   14df4:	2000196c 	.word	0x2000196c

00014df8 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   14df8:	7a42      	ldrb	r2, [r0, #9]
   14dfa:	06d2      	lsls	r2, r2, #27
   14dfc:	d104      	bne.n	14e08 <_ready_thread+0x10>
   14dfe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14e00:	3301      	adds	r3, #1
   14e02:	d101      	bne.n	14e08 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   14e04:	f7ff bfe2 	b.w	14dcc <_add_thread_to_ready_q>
   14e08:	4770      	bx	lr
	...

00014e0c <_priq_dumb_remove>:
{
   14e0c:	b508      	push	{r3, lr}
	return thread == _idle_thread;
   14e0e:	4b0a      	ldr	r3, [pc, #40]	; (14e38 <_priq_dumb_remove+0x2c>)
	__ASSERT_NO_MSG(!_is_idle(thread));
   14e10:	681b      	ldr	r3, [r3, #0]
   14e12:	4299      	cmp	r1, r3
   14e14:	d10a      	bne.n	14e2c <_priq_dumb_remove+0x20>
   14e16:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   14e1a:	4a08      	ldr	r2, [pc, #32]	; (14e3c <_priq_dumb_remove+0x30>)
   14e1c:	4908      	ldr	r1, [pc, #32]	; (14e40 <_priq_dumb_remove+0x34>)
   14e1e:	4809      	ldr	r0, [pc, #36]	; (14e44 <_priq_dumb_remove+0x38>)
   14e20:	f7ec f8b4 	bl	f8c <printk>
   14e24:	4808      	ldr	r0, [pc, #32]	; (14e48 <_priq_dumb_remove+0x3c>)
   14e26:	f7ec f8b1 	bl	f8c <printk>
   14e2a:	e7fe      	b.n	14e2a <_priq_dumb_remove+0x1e>
	node->prev->next = node->next;
   14e2c:	e891 000c 	ldmia.w	r1, {r2, r3}
   14e30:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14e32:	680a      	ldr	r2, [r1, #0]
   14e34:	6053      	str	r3, [r2, #4]
   14e36:	bd08      	pop	{r3, pc}
   14e38:	0001ad4c 	.word	0x0001ad4c
   14e3c:	0001af09 	.word	0x0001af09
   14e40:	0001ae8c 	.word	0x0001ae8c
   14e44:	0001619c 	.word	0x0001619c
   14e48:	000161ba 	.word	0x000161ba

00014e4c <_unpend_thread_no_timeout>:
{
   14e4c:	b538      	push	{r3, r4, r5, lr}
   14e4e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14e50:	f7ff fede 	bl	14c10 <k_spin_lock.isra.11>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   14e54:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   14e56:	4605      	mov	r5, r0
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   14e58:	2000      	movs	r0, #0
   14e5a:	f7ff ffd7 	bl	14e0c <_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14e5e:	7a63      	ldrb	r3, [r4, #9]
   14e60:	f023 0302 	bic.w	r3, r3, #2
   14e64:	7263      	strb	r3, [r4, #9]
   14e66:	f385 8811 	msr	BASEPRI, r5
   14e6a:	bd38      	pop	{r3, r4, r5, pc}

00014e6c <_add_timeout>:
{
   14e6c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(timeout_in_ticks >= 0, "");
   14e6e:	1e1e      	subs	r6, r3, #0
{
   14e70:	4604      	mov	r4, r0
	__ASSERT(timeout_in_ticks >= 0, "");
   14e72:	da09      	bge.n	14e88 <_add_timeout+0x1c>
   14e74:	23c9      	movs	r3, #201	; 0xc9
   14e76:	4a28      	ldr	r2, [pc, #160]	; (14f18 <_add_timeout+0xac>)
   14e78:	4928      	ldr	r1, [pc, #160]	; (14f1c <_add_timeout+0xb0>)
   14e7a:	4829      	ldr	r0, [pc, #164]	; (14f20 <_add_timeout+0xb4>)
   14e7c:	f7ec f886 	bl	f8c <printk>
   14e80:	4828      	ldr	r0, [pc, #160]	; (14f24 <_add_timeout+0xb8>)
   14e82:	f7ec f883 	bl	f8c <printk>
   14e86:	e7fe      	b.n	14e86 <_add_timeout+0x1a>
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14e88:	610e      	str	r6, [r1, #16]
	timeout->thread = thread;
   14e8a:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14e8c:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   14e8e:	d120      	bne.n	14ed2 <_add_timeout+0x66>
	__asm__ volatile(
   14e90:	f04f 0320 	mov.w	r3, #32
   14e94:	f3ef 8511 	mrs	r5, BASEPRI
   14e98:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   14e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ea0:	610b      	str	r3, [r1, #16]
	if (thread) {
   14ea2:	b170      	cbz	r0, 14ec2 <_add_timeout+0x56>
	if (timeout_obj->wait_q) {
   14ea4:	68cb      	ldr	r3, [r1, #12]
   14ea6:	b113      	cbz	r3, 14eae <_add_timeout+0x42>
		_unpend_thread_no_timeout(thread);
   14ea8:	f7ff ffd0 	bl	14e4c <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   14eac:	6226      	str	r6, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14eae:	7a63      	ldrb	r3, [r4, #9]
   14eb0:	f023 0304 	bic.w	r3, r3, #4
   14eb4:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   14eb6:	4620      	mov	r0, r4
   14eb8:	f7ff ff9e 	bl	14df8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14ebc:	f385 8811 	msr	BASEPRI, r5
   14ec0:	bd70      	pop	{r4, r5, r6, pc}
   14ec2:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   14ec6:	694b      	ldr	r3, [r1, #20]
   14ec8:	b32b      	cbz	r3, 14f16 <_add_timeout+0xaa>
			timeout->func(timeout);
   14eca:	4608      	mov	r0, r1
}
   14ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   14ed0:	4718      	bx	r3
	return list->head == list;
   14ed2:	4a15      	ldr	r2, [pc, #84]	; (14f28 <_add_timeout+0xbc>)
   14ed4:	4610      	mov	r0, r2
   14ed6:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14eda:	4283      	cmp	r3, r0
   14edc:	d10c      	bne.n	14ef8 <_add_timeout+0x8c>
	node->next = list;
   14ede:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14ee0:	6993      	ldr	r3, [r2, #24]
   14ee2:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14ee4:	6993      	ldr	r3, [r2, #24]
   14ee6:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14ee8:	6191      	str	r1, [r2, #24]
   14eea:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   14eec:	1b64      	subs	r4, r4, r5
   14eee:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   14ef0:	6994      	ldr	r4, [r2, #24]
   14ef2:	42a3      	cmp	r3, r4
   14ef4:	d0f3      	beq.n	14ede <_add_timeout+0x72>
   14ef6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d0f0      	beq.n	14ede <_add_timeout+0x72>
		if (*delta <= in_q->delta_ticks_from_prev) {
   14efc:	690c      	ldr	r4, [r1, #16]
   14efe:	691d      	ldr	r5, [r3, #16]
   14f00:	42ac      	cmp	r4, r5
   14f02:	dcf3      	bgt.n	14eec <_add_timeout+0x80>
		node->prev = insert_point->prev;
   14f04:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14f06:	1b2c      	subs	r4, r5, r4
   14f08:	611c      	str	r4, [r3, #16]
   14f0a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14f0c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14f0e:	685a      	ldr	r2, [r3, #4]
   14f10:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14f12:	6059      	str	r1, [r3, #4]
   14f14:	bd70      	pop	{r4, r5, r6, pc}
   14f16:	bd70      	pop	{r4, r5, r6, pc}
   14f18:	0001ae22 	.word	0x0001ae22
   14f1c:	0001ae5c 	.word	0x0001ae5c
   14f20:	0001619c 	.word	0x0001619c
   14f24:	000161ba 	.word	0x000161ba
   14f28:	20001948 	.word	0x20001948

00014f2c <_unpend_thread>:
{
   14f2c:	b510      	push	{r4, lr}
   14f2e:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   14f30:	f7ff ff8c 	bl	14e4c <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   14f34:	f104 0014 	add.w	r0, r4, #20
}
   14f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14f3c:	f7ff be4e 	b.w	14bdc <_abort_timeout>

00014f40 <_unpend_first_thread>:
{
   14f40:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   14f42:	2100      	movs	r1, #0
   14f44:	f7ff fe95 	bl	14c72 <_find_first_thread_to_unpend>

	if (thread) {
   14f48:	4604      	mov	r4, r0
   14f4a:	b128      	cbz	r0, 14f58 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   14f4c:	f7ff ff7e 	bl	14e4c <_unpend_thread_no_timeout>
   14f50:	f104 0014 	add.w	r0, r4, #20
   14f54:	f7ff fe42 	bl	14bdc <_abort_timeout>
}
   14f58:	4620      	mov	r0, r4
   14f5a:	bd10      	pop	{r4, pc}

00014f5c <_move_thread_to_end_of_prio_q>:
{
   14f5c:	b570      	push	{r4, r5, r6, lr}
   14f5e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14f60:	f7ff fe56 	bl	14c10 <k_spin_lock.isra.11>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   14f64:	4d09      	ldr	r5, [pc, #36]	; (14f8c <_move_thread_to_end_of_prio_q+0x30>)
   14f66:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   14f68:	4606      	mov	r6, r0
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   14f6a:	4628      	mov	r0, r5
   14f6c:	f7ff ff4e 	bl	14e0c <_priq_dumb_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14f70:	4621      	mov	r1, r4
   14f72:	4628      	mov	r0, r5
   14f74:	f7ff fef0 	bl	14d58 <_priq_dumb_add>
	thread->base.thread_state |= states;
   14f78:	7a63      	ldrb	r3, [r4, #9]
   14f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14f7e:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   14f80:	2000      	movs	r0, #0
   14f82:	f7ff fe4d 	bl	14c20 <update_cache>
   14f86:	f386 8811 	msr	BASEPRI, r6
   14f8a:	bd70      	pop	{r4, r5, r6, pc}
   14f8c:	2000196c 	.word	0x2000196c

00014f90 <_remove_thread_from_ready_q>:
{
   14f90:	b538      	push	{r3, r4, r5, lr}
   14f92:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14f94:	f7ff fe3c 	bl	14c10 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   14f98:	7a63      	ldrb	r3, [r4, #9]
   14f9a:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   14f9c:	4605      	mov	r5, r0
		if (_is_thread_queued(thread)) {
   14f9e:	d50e      	bpl.n	14fbe <_remove_thread_from_ready_q+0x2e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   14fa0:	4808      	ldr	r0, [pc, #32]	; (14fc4 <_remove_thread_from_ready_q+0x34>)
   14fa2:	4621      	mov	r1, r4
   14fa4:	f7ff ff32 	bl	14e0c <_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   14fa8:	7a63      	ldrb	r3, [r4, #9]
   14faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14fae:	7263      	strb	r3, [r4, #9]
			update_cache(thread == _current);
   14fb0:	4b05      	ldr	r3, [pc, #20]	; (14fc8 <_remove_thread_from_ready_q+0x38>)
   14fb2:	6898      	ldr	r0, [r3, #8]
   14fb4:	1b03      	subs	r3, r0, r4
   14fb6:	4258      	negs	r0, r3
   14fb8:	4158      	adcs	r0, r3
   14fba:	f7ff fe31 	bl	14c20 <update_cache>
   14fbe:	f385 8811 	msr	BASEPRI, r5
   14fc2:	bd38      	pop	{r3, r4, r5, pc}
   14fc4:	2000196c 	.word	0x2000196c
   14fc8:	20001948 	.word	0x20001948

00014fcc <pend>:
{
   14fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14fce:	4605      	mov	r5, r0
   14fd0:	4614      	mov	r4, r2
   14fd2:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   14fd4:	f7ff ffdc 	bl	14f90 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   14fd8:	7a6b      	ldrb	r3, [r5, #9]
   14fda:	f043 0302 	orr.w	r3, r3, #2
   14fde:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   14fe0:	1c63      	adds	r3, r4, #1
   14fe2:	d012      	beq.n	1500a <pend+0x3e>
	__asm__ volatile(
   14fe4:	f04f 0320 	mov.w	r3, #32
   14fe8:	f3ef 8711 	mrs	r7, BASEPRI
   14fec:	f383 8811 	msr	BASEPRI, r3
   14ff0:	230a      	movs	r3, #10
   14ff2:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14ff4:	4632      	mov	r2, r6
   14ff6:	fbb4 f3f3 	udiv	r3, r4, r3
   14ffa:	f105 0114 	add.w	r1, r5, #20
   14ffe:	3301      	adds	r3, #1
   15000:	4628      	mov	r0, r5
   15002:	f7ff ff33 	bl	14e6c <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15006:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   1500a:	b12e      	cbz	r6, 15018 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   1500c:	4629      	mov	r1, r5
   1500e:	4630      	mov	r0, r6
}
   15010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   15014:	f7ff bea0 	b.w	14d58 <_priq_dumb_add>
   15018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001501c <_pend_current_thread>:
{
   1501c:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   1501e:	4b06      	ldr	r3, [pc, #24]	; (15038 <_pend_current_thread+0x1c>)
{
   15020:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   15022:	6898      	ldr	r0, [r3, #8]
   15024:	f7ff ffd2 	bl	14fcc <pend>
	_time_slice_elapsed = 0;
   15028:	4b04      	ldr	r3, [pc, #16]	; (1503c <_pend_current_thread+0x20>)
   1502a:	2200      	movs	r2, #0
   1502c:	4620      	mov	r0, r4
}
   1502e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   15032:	601a      	str	r2, [r3, #0]
   15034:	f7ec bb04 	b.w	1640 <__swap>
   15038:	20001948 	.word	0x20001948
   1503c:	2000197c 	.word	0x2000197c

00015040 <_is_thread_time_slicing>:
{
   15040:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(thread == _current);
   15042:	4a1a      	ldr	r2, [pc, #104]	; (150ac <_is_thread_time_slicing+0x6c>)
   15044:	6891      	ldr	r1, [r2, #8]
   15046:	4281      	cmp	r1, r0
   15048:	d00a      	beq.n	15060 <_is_thread_time_slicing+0x20>
   1504a:	f240 2346 	movw	r3, #582	; 0x246
   1504e:	4a18      	ldr	r2, [pc, #96]	; (150b0 <_is_thread_time_slicing+0x70>)
   15050:	4918      	ldr	r1, [pc, #96]	; (150b4 <_is_thread_time_slicing+0x74>)
   15052:	4819      	ldr	r0, [pc, #100]	; (150b8 <_is_thread_time_slicing+0x78>)
   15054:	f7eb ff9a 	bl	f8c <printk>
   15058:	4818      	ldr	r0, [pc, #96]	; (150bc <_is_thread_time_slicing+0x7c>)
   1505a:	f7eb ff97 	bl	f8c <printk>
   1505e:	e7fe      	b.n	1505e <_is_thread_time_slicing+0x1e>
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   15060:	4b17      	ldr	r3, [pc, #92]	; (150c0 <_is_thread_time_slicing+0x80>)
   15062:	681b      	ldr	r3, [r3, #0]
   15064:	2b00      	cmp	r3, #0
   15066:	dd1e      	ble.n	150a6 <_is_thread_time_slicing+0x66>
   15068:	894b      	ldrh	r3, [r1, #10]
   1506a:	2b7f      	cmp	r3, #127	; 0x7f
   1506c:	d81b      	bhi.n	150a6 <_is_thread_time_slicing+0x66>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   1506e:	4b15      	ldr	r3, [pc, #84]	; (150c4 <_is_thread_time_slicing+0x84>)
   15070:	f991 000a 	ldrsb.w	r0, [r1, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   15074:	681b      	ldr	r3, [r3, #0]
   15076:	4298      	cmp	r0, r3
   15078:	db15      	blt.n	150a6 <_is_thread_time_slicing+0x66>
	LOCKED(&sched_lock) {
   1507a:	f7ff fdc9 	bl	14c10 <k_spin_lock.isra.11>
	return list->head == list;
   1507e:	f852 3f24 	ldr.w	r3, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15082:	4293      	cmp	r3, r2
   15084:	4604      	mov	r4, r0
   15086:	d00a      	beq.n	1509e <_is_thread_time_slicing+0x5e>
		if (next) {
   15088:	b15b      	cbz	r3, 150a2 <_is_thread_time_slicing+0x62>
			ret = thread->base.prio == next->base.prio;
   1508a:	f991 000a 	ldrsb.w	r0, [r1, #10]
   1508e:	f993 300a 	ldrsb.w	r3, [r3, #10]
   15092:	1ac3      	subs	r3, r0, r3
   15094:	4258      	negs	r0, r3
   15096:	4158      	adcs	r0, r3
   15098:	f384 8811 	msr	BASEPRI, r4
	return ret;
   1509c:	bd10      	pop	{r4, pc}
   1509e:	2000      	movs	r0, #0
   150a0:	e7fa      	b.n	15098 <_is_thread_time_slicing+0x58>
   150a2:	4618      	mov	r0, r3
   150a4:	e7f8      	b.n	15098 <_is_thread_time_slicing+0x58>
		return 0;
   150a6:	2000      	movs	r0, #0
}
   150a8:	bd10      	pop	{r4, pc}
   150aa:	bf00      	nop
   150ac:	20001948 	.word	0x20001948
   150b0:	0001af09 	.word	0x0001af09
   150b4:	0001ae72 	.word	0x0001ae72
   150b8:	0001619c 	.word	0x0001619c
   150bc:	000161ba 	.word	0x000161ba
   150c0:	20001828 	.word	0x20001828
   150c4:	2000182c 	.word	0x2000182c

000150c8 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   150c8:	4b01      	ldr	r3, [pc, #4]	; (150d0 <_update_time_slice_before_swap+0x8>)
   150ca:	2200      	movs	r2, #0
   150cc:	601a      	str	r2, [r3, #0]
   150ce:	4770      	bx	lr
   150d0:	2000197c 	.word	0x2000197c

000150d4 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   150d4:	b538      	push	{r3, r4, r5, lr}
   150d6:	4605      	mov	r5, r0
	int need_sched = 0;
   150d8:	2000      	movs	r0, #0
	return list->head == list;
   150da:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   150dc:	42a5      	cmp	r5, r4
   150de:	d000      	beq.n	150e2 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   150e0:	b904      	cbnz	r4, 150e4 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   150e2:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   150e4:	4620      	mov	r0, r4
   150e6:	f7ff ff21 	bl	14f2c <_unpend_thread>
		_ready_thread(th);
   150ea:	4620      	mov	r0, r4
   150ec:	f7ff fe84 	bl	14df8 <_ready_thread>
		need_sched = 1;
   150f0:	2001      	movs	r0, #1
   150f2:	e7f2      	b.n	150da <_unpend_all+0x6>

000150f4 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   150f4:	4b02      	ldr	r3, [pc, #8]	; (15100 <_sched_init+0xc>)
   150f6:	f103 0224 	add.w	r2, r3, #36	; 0x24
   150fa:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   150fc:	629a      	str	r2, [r3, #40]	; 0x28
   150fe:	4770      	bx	lr
   15100:	20001948 	.word	0x20001948

00015104 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   15104:	b538      	push	{r3, r4, r5, lr}
   15106:	f3ef 8305 	mrs	r3, IPSR
   1510a:	2b0d      	cmp	r3, #13
   1510c:	d82d      	bhi.n	1516a <_impl_k_yield+0x66>
   1510e:	b11b      	cbz	r3, 15118 <_impl_k_yield+0x14>
   15110:	4b1c      	ldr	r3, [pc, #112]	; (15184 <_impl_k_yield+0x80>)
   15112:	685b      	ldr	r3, [r3, #4]
   15114:	051b      	lsls	r3, r3, #20
   15116:	d528      	bpl.n	1516a <_impl_k_yield+0x66>
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   15118:	4c1b      	ldr	r4, [pc, #108]	; (15188 <_impl_k_yield+0x84>)
   1511a:	4b1c      	ldr	r3, [pc, #112]	; (1518c <_impl_k_yield+0x88>)
   1511c:	68a2      	ldr	r2, [r4, #8]
   1511e:	681b      	ldr	r3, [r3, #0]
   15120:	429a      	cmp	r2, r3
   15122:	d011      	beq.n	15148 <_impl_k_yield+0x44>
		LOCKED(&sched_lock) {
   15124:	f7ff fd74 	bl	14c10 <k_spin_lock.isra.11>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
   15128:	68a1      	ldr	r1, [r4, #8]
		LOCKED(&sched_lock) {
   1512a:	4605      	mov	r5, r0
			_priq_run_remove(&_kernel.ready_q.runq, _current);
   1512c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15130:	f7ff fe6c 	bl	14e0c <_priq_dumb_remove>
			_priq_run_add(&_kernel.ready_q.runq, _current);
   15134:	68a1      	ldr	r1, [r4, #8]
   15136:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1513a:	f7ff fe0d 	bl	14d58 <_priq_dumb_add>
			update_cache(1);
   1513e:	2001      	movs	r0, #1
   15140:	f7ff fd6e 	bl	14c20 <update_cache>
   15144:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   15148:	68a2      	ldr	r2, [r4, #8]
   1514a:	6a23      	ldr	r3, [r4, #32]
   1514c:	429a      	cmp	r2, r3
   1514e:	d017      	beq.n	15180 <_impl_k_yield+0x7c>
	__asm__ volatile(
   15150:	f04f 0320 	mov.w	r3, #32
   15154:	f3ef 8011 	mrs	r0, BASEPRI
   15158:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   1515c:	4b0c      	ldr	r3, [pc, #48]	; (15190 <_impl_k_yield+0x8c>)
   1515e:	2200      	movs	r2, #0
   15160:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   15162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15166:	f7ec ba6b 	b.w	1640 <__swap>
	__ASSERT(!_is_in_isr(), "");
   1516a:	f240 23d7 	movw	r3, #727	; 0x2d7
   1516e:	4a09      	ldr	r2, [pc, #36]	; (15194 <_impl_k_yield+0x90>)
   15170:	4909      	ldr	r1, [pc, #36]	; (15198 <_impl_k_yield+0x94>)
   15172:	480a      	ldr	r0, [pc, #40]	; (1519c <_impl_k_yield+0x98>)
   15174:	f7eb ff0a 	bl	f8c <printk>
   15178:	4809      	ldr	r0, [pc, #36]	; (151a0 <_impl_k_yield+0x9c>)
   1517a:	f7eb ff07 	bl	f8c <printk>
   1517e:	e7fe      	b.n	1517e <_impl_k_yield+0x7a>
   15180:	bd38      	pop	{r3, r4, r5, pc}
   15182:	bf00      	nop
   15184:	e000ed00 	.word	0xe000ed00
   15188:	20001948 	.word	0x20001948
   1518c:	0001ad4c 	.word	0x0001ad4c
   15190:	2000197c 	.word	0x2000197c
   15194:	0001af09 	.word	0x0001af09
   15198:	0001aefd 	.word	0x0001aefd
   1519c:	0001619c 	.word	0x0001619c
   151a0:	000161ba 	.word	0x000161ba

000151a4 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   151a4:	4b01      	ldr	r3, [pc, #4]	; (151ac <_impl_k_current_get+0x8>)
   151a6:	6898      	ldr	r0, [r3, #8]
   151a8:	4770      	bx	lr
   151aa:	bf00      	nop
   151ac:	20001948 	.word	0x20001948

000151b0 <_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void _impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   151b0:	b508      	push	{r3, lr}
	__ASSERT(limit != 0, "limit cannot be zero");
   151b2:	b94a      	cbnz	r2, 151c8 <_impl_k_sem_init+0x18>
   151b4:	233c      	movs	r3, #60	; 0x3c
   151b6:	4a0f      	ldr	r2, [pc, #60]	; (151f4 <_impl_k_sem_init+0x44>)
   151b8:	490f      	ldr	r1, [pc, #60]	; (151f8 <_impl_k_sem_init+0x48>)
   151ba:	4810      	ldr	r0, [pc, #64]	; (151fc <_impl_k_sem_init+0x4c>)
   151bc:	f7eb fee6 	bl	f8c <printk>
   151c0:	480f      	ldr	r0, [pc, #60]	; (15200 <_impl_k_sem_init+0x50>)
   151c2:	f7eb fee3 	bl	f8c <printk>
   151c6:	e7fe      	b.n	151c6 <_impl_k_sem_init+0x16>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   151c8:	428a      	cmp	r2, r1
   151ca:	d209      	bcs.n	151e0 <_impl_k_sem_init+0x30>
   151cc:	233d      	movs	r3, #61	; 0x3d
   151ce:	4a09      	ldr	r2, [pc, #36]	; (151f4 <_impl_k_sem_init+0x44>)
   151d0:	490c      	ldr	r1, [pc, #48]	; (15204 <_impl_k_sem_init+0x54>)
   151d2:	480a      	ldr	r0, [pc, #40]	; (151fc <_impl_k_sem_init+0x4c>)
   151d4:	f7eb feda 	bl	f8c <printk>
   151d8:	480b      	ldr	r0, [pc, #44]	; (15208 <_impl_k_sem_init+0x58>)
   151da:	f7eb fed7 	bl	f8c <printk>
   151de:	e7fe      	b.n	151de <_impl_k_sem_init+0x2e>

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   151e0:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   151e4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   151e6:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   151e8:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   151ea:	6143      	str	r3, [r0, #20]
	sem->count = initial_count;
   151ec:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   151ee:	60c2      	str	r2, [r0, #12]
   151f0:	bd08      	pop	{r3, pc}
   151f2:	bf00      	nop
   151f4:	0001af5f 	.word	0x0001af5f
   151f8:	0001af8b 	.word	0x0001af8b
   151fc:	0001619c 	.word	0x0001619c
   15200:	0001af96 	.word	0x0001af96
   15204:	0001afab 	.word	0x0001afab
   15208:	0001afc2 	.word	0x0001afc2

0001520c <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   1520c:	b570      	push	{r4, r5, r6, lr}
   1520e:	4604      	mov	r4, r0
   15210:	f04f 0320 	mov.w	r3, #32
   15214:	f3ef 8611 	mrs	r6, BASEPRI
   15218:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   1521c:	f7ff fe90 	bl	14f40 <_unpend_first_thread>
	if (thread) {
   15220:	4605      	mov	r5, r0
   15222:	b160      	cbz	r0, 1523e <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   15224:	7a43      	ldrb	r3, [r0, #9]
   15226:	06db      	lsls	r3, r3, #27
   15228:	d102      	bne.n	15230 <_impl_k_sem_give+0x24>
   1522a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1522c:	3301      	adds	r3, #1
   1522e:	d012      	beq.n	15256 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15230:	2300      	movs	r3, #0
   15232:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   15234:	4630      	mov	r0, r6
}
   15236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   1523a:	f7ff bd27 	b.w	14c8c <_reschedule>
	sem->count += (sem->count != sem->limit);
   1523e:	68a3      	ldr	r3, [r4, #8]
   15240:	68e2      	ldr	r2, [r4, #12]
   15242:	429a      	cmp	r2, r3
   15244:	bf18      	it	ne
   15246:	3301      	addne	r3, #1
   15248:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1524a:	2102      	movs	r1, #2
   1524c:	f104 0010 	add.w	r0, r4, #16
   15250:	f000 fe2c 	bl	15eac <_handle_obj_poll_events>
   15254:	e7ee      	b.n	15234 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   15256:	f7ff fdb9 	bl	14dcc <_add_thread_to_ready_q>
   1525a:	e7e9      	b.n	15230 <_impl_k_sem_give+0x24>

0001525c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1525c:	b510      	push	{r4, lr}
   1525e:	460a      	mov	r2, r1
   15260:	f3ef 8305 	mrs	r3, IPSR
   15264:	2b0d      	cmp	r3, #13
   15266:	d81e      	bhi.n	152a6 <_impl_k_sem_take+0x4a>
   15268:	b11b      	cbz	r3, 15272 <_impl_k_sem_take+0x16>
   1526a:	4b15      	ldr	r3, [pc, #84]	; (152c0 <_impl_k_sem_take+0x64>)
   1526c:	685b      	ldr	r3, [r3, #4]
   1526e:	051b      	lsls	r3, r3, #20
   15270:	d519      	bpl.n	152a6 <_impl_k_sem_take+0x4a>
   15272:	f04f 0320 	mov.w	r3, #32
   15276:	f3ef 8411 	mrs	r4, BASEPRI
   1527a:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1527e:	6883      	ldr	r3, [r0, #8]
   15280:	b12b      	cbz	r3, 1528e <_impl_k_sem_take+0x32>
		sem->count--;
   15282:	3b01      	subs	r3, #1
   15284:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15286:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   1528a:	2000      	movs	r0, #0
   1528c:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   1528e:	b922      	cbnz	r2, 1529a <_impl_k_sem_take+0x3e>
   15290:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   15294:	f06f 000f 	mvn.w	r0, #15
   15298:	bd10      	pop	{r4, pc}
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
   1529a:	4601      	mov	r1, r0
   1529c:	4620      	mov	r0, r4
}
   1529e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   152a2:	f7ff bebb 	b.w	1501c <_pend_current_thread>
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");
   152a6:	2a00      	cmp	r2, #0
   152a8:	d0e3      	beq.n	15272 <_impl_k_sem_take+0x16>
   152aa:	2393      	movs	r3, #147	; 0x93
   152ac:	4a05      	ldr	r2, [pc, #20]	; (152c4 <_impl_k_sem_take+0x68>)
   152ae:	4906      	ldr	r1, [pc, #24]	; (152c8 <_impl_k_sem_take+0x6c>)
   152b0:	4806      	ldr	r0, [pc, #24]	; (152cc <_impl_k_sem_take+0x70>)
   152b2:	f7eb fe6b 	bl	f8c <printk>
   152b6:	4806      	ldr	r0, [pc, #24]	; (152d0 <_impl_k_sem_take+0x74>)
   152b8:	f7eb fe68 	bl	f8c <printk>
   152bc:	e7fe      	b.n	152bc <_impl_k_sem_take+0x60>
   152be:	bf00      	nop
   152c0:	e000ed00 	.word	0xe000ed00
   152c4:	0001af5f 	.word	0x0001af5f
   152c8:	0001afe5 	.word	0x0001afe5
   152cc:	0001619c 	.word	0x0001619c
   152d0:	000161ba 	.word	0x000161ba

000152d4 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   152d4:	4b03      	ldr	r3, [pc, #12]	; (152e4 <_impl_k_uptime_get_32+0x10>)
   152d6:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   152da:	230a      	movs	r3, #10
   152dc:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   152e0:	4770      	bx	lr
   152e2:	bf00      	nop
   152e4:	20001980 	.word	0x20001980

000152e8 <_tick_get>:
	__asm__ volatile(
   152e8:	f04f 0220 	mov.w	r2, #32
   152ec:	f3ef 8311 	mrs	r3, BASEPRI
   152f0:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   152f4:	4a02      	ldr	r2, [pc, #8]	; (15300 <_tick_get+0x18>)
   152f6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   152fa:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   152fe:	4770      	bx	lr
   15300:	20001980 	.word	0x20001980

00015304 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   15304:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   15306:	f7ff ffef 	bl	152e8 <_tick_get>
   1530a:	240a      	movs	r4, #10
   1530c:	fba0 2304 	umull	r2, r3, r0, r4
   15310:	fb04 3301 	mla	r3, r4, r1, r3
}
   15314:	4610      	mov	r0, r2
   15316:	4619      	mov	r1, r3
   15318:	bd10      	pop	{r4, pc}
	...

0001531c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   1531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15320:	4607      	mov	r7, r0
   15322:	b085      	sub	sp, #20
	__asm__ volatile(
   15324:	f04f 0320 	mov.w	r3, #32
   15328:	f3ef 8011 	mrs	r0, BASEPRI
   1532c:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   15330:	4961      	ldr	r1, [pc, #388]	; (154b8 <_nano_sys_clock_tick_announce+0x19c>)
   15332:	e9d1 4500 	ldrd	r4, r5, [r1]
   15336:	19e2      	adds	r2, r4, r7
   15338:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   1533c:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15340:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   15344:	ae02      	add	r6, sp, #8
   15346:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   15348:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   1534a:	f04f 0320 	mov.w	r3, #32
   1534e:	f3ef 8011 	mrs	r0, BASEPRI
   15352:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15356:	4c59      	ldr	r4, [pc, #356]	; (154bc <_nano_sys_clock_tick_announce+0x1a0>)
   15358:	4621      	mov	r1, r4
   1535a:	4602      	mov	r2, r0
   1535c:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15360:	428b      	cmp	r3, r1
   15362:	d000      	beq.n	15366 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   15364:	b9fb      	cbnz	r3, 153a6 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15366:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   1536a:	68a0      	ldr	r0, [r4, #8]
   1536c:	f7ff fe68 	bl	15040 <_is_thread_time_slicing>
   15370:	b1b0      	cbz	r0, 153a0 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   15372:	4a53      	ldr	r2, [pc, #332]	; (154c0 <_nano_sys_clock_tick_announce+0x1a4>)
   15374:	6811      	ldr	r1, [r2, #0]
   15376:	230a      	movs	r3, #10
   15378:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   1537c:	4b51      	ldr	r3, [pc, #324]	; (154c4 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   1537e:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   15380:	681b      	ldr	r3, [r3, #0]
   15382:	429f      	cmp	r7, r3
   15384:	db0c      	blt.n	153a0 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   15386:	2300      	movs	r3, #0
   15388:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1538a:	f04f 0320 	mov.w	r3, #32
   1538e:	f3ef 8511 	mrs	r5, BASEPRI
   15392:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   15396:	68a0      	ldr	r0, [r4, #8]
   15398:	f7ff fde0 	bl	14f5c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1539c:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   153a0:	b005      	add	sp, #20
   153a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   153a6:	4d48      	ldr	r5, [pc, #288]	; (154c8 <_nano_sys_clock_tick_announce+0x1ac>)
   153a8:	9501      	str	r5, [sp, #4]
   153aa:	2101      	movs	r1, #1
   153ac:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   153ae:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   153b2:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   153b4:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   153b8:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   153ba:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   153bc:	bfaa      	itet	ge
   153be:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   153c2:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   153c6:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   153ca:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   153cc:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   153ce:	691d      	ldr	r5, [r3, #16]
   153d0:	4298      	cmp	r0, r3
   153d2:	bf14      	ite	ne
   153d4:	6818      	ldrne	r0, [r3, #0]
   153d6:	2000      	moveq	r0, #0
   153d8:	b9d5      	cbnz	r5, 15410 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   153da:	e893 0220 	ldmia.w	r3, {r5, r9}
   153de:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   153e2:	681d      	ldr	r5, [r3, #0]
   153e4:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   153e8:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   153ea:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   153ee:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   153f0:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   153f2:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   153f4:	f8c3 c010 	str.w	ip, [r3, #16]
   153f8:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   153fc:	f04f 0320 	mov.w	r3, #32
   15400:	f3ef 8211 	mrs	r2, BASEPRI
   15404:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   15408:	4603      	mov	r3, r0
   1540a:	2800      	cmp	r0, #0
   1540c:	d1d4      	bne.n	153b8 <_nano_sys_clock_tick_announce+0x9c>
   1540e:	e001      	b.n	15414 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   15410:	2900      	cmp	r1, #0
   15412:	dcf1      	bgt.n	153f8 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15414:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   15418:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1541a:	42b0      	cmp	r0, r6
   1541c:	d103      	bne.n	15426 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   1541e:	9a01      	ldr	r2, [sp, #4]
   15420:	2300      	movs	r3, #0
   15422:	6013      	str	r3, [r2, #0]
   15424:	e7a1      	b.n	1536a <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   15426:	2800      	cmp	r0, #0
   15428:	d0f9      	beq.n	1541e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1542a:	9b03      	ldr	r3, [sp, #12]
   1542c:	4298      	cmp	r0, r3
   1542e:	d102      	bne.n	15436 <_nano_sys_clock_tick_announce+0x11a>
   15430:	f04f 0b00 	mov.w	fp, #0
   15434:	e001      	b.n	1543a <_nano_sys_clock_tick_announce+0x11e>
   15436:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1543a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   1543e:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   15442:	e890 000c 	ldmia.w	r0, {r2, r3}
   15446:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   15448:	6802      	ldr	r2, [r0, #0]
   1544a:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   1544c:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   1544e:	f04f 0320 	mov.w	r3, #32
   15452:	f3ef 8811 	mrs	r8, BASEPRI
   15456:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1545a:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   1545e:	b1d6      	cbz	r6, 15496 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   15460:	68c3      	ldr	r3, [r0, #12]
   15462:	b123      	cbz	r3, 1546e <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   15464:	4630      	mov	r0, r6
   15466:	f7ff fcf1 	bl	14e4c <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1546a:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1546e:	7a73      	ldrb	r3, [r6, #9]
   15470:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   15474:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15478:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1547a:	d102      	bne.n	15482 <_nano_sys_clock_tick_announce+0x166>
   1547c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1547e:	3301      	adds	r3, #1
   15480:	d015      	beq.n	154ae <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15482:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   15486:	f1bb 0f00 	cmp.w	fp, #0
   1548a:	d0c8      	beq.n	1541e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1548c:	9b03      	ldr	r3, [sp, #12]
   1548e:	455b      	cmp	r3, fp
   15490:	d108      	bne.n	154a4 <_nano_sys_clock_tick_announce+0x188>
   15492:	2300      	movs	r3, #0
   15494:	e008      	b.n	154a8 <_nano_sys_clock_tick_announce+0x18c>
   15496:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   1549a:	6943      	ldr	r3, [r0, #20]
   1549c:	2b00      	cmp	r3, #0
   1549e:	d0f2      	beq.n	15486 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   154a0:	4798      	blx	r3
   154a2:	e7f0      	b.n	15486 <_nano_sys_clock_tick_announce+0x16a>
   154a4:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   154a8:	4658      	mov	r0, fp
   154aa:	469b      	mov	fp, r3
   154ac:	e7c9      	b.n	15442 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   154ae:	4630      	mov	r0, r6
   154b0:	f7ff fc8c 	bl	14dcc <_add_thread_to_ready_q>
   154b4:	e7e5      	b.n	15482 <_nano_sys_clock_tick_announce+0x166>
   154b6:	bf00      	nop
   154b8:	20001980 	.word	0x20001980
   154bc:	20001948 	.word	0x20001948
   154c0:	2000197c 	.word	0x2000197c
   154c4:	20001828 	.word	0x20001828
   154c8:	20001978 	.word	0x20001978

000154cc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   154cc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   154ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   154d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154d6:	4903      	ldr	r1, [pc, #12]	; (154e4 <k_sys_work_q_init+0x18>)
   154d8:	4803      	ldr	r0, [pc, #12]	; (154e8 <k_sys_work_q_init+0x1c>)
   154da:	f000 f9cd 	bl	15878 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   154de:	2000      	movs	r0, #0
   154e0:	bd08      	pop	{r3, pc}
   154e2:	bf00      	nop
   154e4:	20003620 	.word	0x20003620
   154e8:	20001988 	.word	0x20001988

000154ec <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   154ec:	6903      	ldr	r3, [r0, #16]
   154ee:	1c5a      	adds	r2, r3, #1
   154f0:	d011      	beq.n	15516 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   154f2:	4a0a      	ldr	r2, [pc, #40]	; (1551c <_abort_timeout+0x30>)
   154f4:	6992      	ldr	r2, [r2, #24]
   154f6:	4290      	cmp	r0, r2
   154f8:	bf1f      	itttt	ne
   154fa:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   154fc:	690a      	ldrne	r2, [r1, #16]
   154fe:	189b      	addne	r3, r3, r2
   15500:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   15502:	e890 000c 	ldmia.w	r0, {r2, r3}
   15506:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   15508:	6802      	ldr	r2, [r0, #0]
   1550a:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1550c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15510:	6103      	str	r3, [r0, #16]
	return 0;
   15512:	2000      	movs	r0, #0
   15514:	4770      	bx	lr
		return _INACTIVE;
   15516:	4618      	mov	r0, r3
}
   15518:	4770      	bx	lr
   1551a:	bf00      	nop
   1551c:	20001948 	.word	0x20001948

00015520 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   15520:	7a42      	ldrb	r2, [r0, #9]
   15522:	06d2      	lsls	r2, r2, #27
   15524:	d104      	bne.n	15530 <_ready_thread+0x10>
   15526:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15528:	3301      	adds	r3, #1
   1552a:	d101      	bne.n	15530 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   1552c:	f7ff bc4e 	b.w	14dcc <_add_thread_to_ready_q>
   15530:	4770      	bx	lr
	...

00015534 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   15534:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   15536:	f04f 0320 	mov.w	r3, #32
   1553a:	f3ef 8611 	mrs	r6, BASEPRI
   1553e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15542:	4a19      	ldr	r2, [pc, #100]	; (155a8 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   15544:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   15546:	230a      	movs	r3, #10
   15548:	3109      	adds	r1, #9
   1554a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   1554e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   15550:	6241      	str	r1, [r0, #36]	; 0x24
   15552:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   15554:	2300      	movs	r3, #0
   15556:	6203      	str	r3, [r0, #32]
   15558:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1555c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   1555e:	f100 0514 	add.w	r5, r0, #20
   15562:	d108      	bne.n	15576 <schedule_new_thread.part.11+0x42>
	node->next = list;
   15564:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   15566:	6993      	ldr	r3, [r2, #24]
   15568:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   1556a:	6993      	ldr	r3, [r2, #24]
   1556c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1556e:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15570:	f386 8811 	msr	BASEPRI, r6
   15574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15576:	2b00      	cmp	r3, #0
   15578:	d0f4      	beq.n	15564 <schedule_new_thread.part.11+0x30>
   1557a:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1557e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   15580:	691f      	ldr	r7, [r3, #16]
   15582:	42bc      	cmp	r4, r7
   15584:	dc08      	bgt.n	15598 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   15586:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   15588:	1b3c      	subs	r4, r7, r4
   1558a:	611c      	str	r4, [r3, #16]
   1558c:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   1558e:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   15590:	685a      	ldr	r2, [r3, #4]
   15592:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   15594:	605d      	str	r5, [r3, #4]
   15596:	e7eb      	b.n	15570 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   15598:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   1559a:	4573      	cmp	r3, lr
   1559c:	6244      	str	r4, [r0, #36]	; 0x24
   1559e:	d0e1      	beq.n	15564 <schedule_new_thread.part.11+0x30>
   155a0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   155a2:	2b00      	cmp	r3, #0
   155a4:	d1eb      	bne.n	1557e <schedule_new_thread.part.11+0x4a>
   155a6:	e7dd      	b.n	15564 <schedule_new_thread.part.11+0x30>
   155a8:	20001948 	.word	0x20001948

000155ac <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   155ac:	4770      	bx	lr
	...

000155b0 <k_is_in_isr>:
   155b0:	f3ef 8005 	mrs	r0, IPSR
   155b4:	280d      	cmp	r0, #13
   155b6:	d807      	bhi.n	155c8 <k_is_in_isr+0x18>
   155b8:	b138      	cbz	r0, 155ca <k_is_in_isr+0x1a>
   155ba:	4b04      	ldr	r3, [pc, #16]	; (155cc <k_is_in_isr+0x1c>)
   155bc:	6858      	ldr	r0, [r3, #4]
   155be:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   155c2:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   155c6:	4770      	bx	lr
   155c8:	2001      	movs	r0, #1
}
   155ca:	4770      	bx	lr
   155cc:	e000ed00 	.word	0xe000ed00

000155d0 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   155d0:	4b02      	ldr	r3, [pc, #8]	; (155dc <_is_thread_essential+0xc>)
   155d2:	689b      	ldr	r3, [r3, #8]
   155d4:	7a18      	ldrb	r0, [r3, #8]
}
   155d6:	f000 0001 	and.w	r0, r0, #1
   155da:	4770      	bx	lr
   155dc:	20001948 	.word	0x20001948

000155e0 <_impl_k_thread_start>:
{
   155e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   155e2:	f04f 0320 	mov.w	r3, #32
   155e6:	f3ef 8411 	mrs	r4, BASEPRI
   155ea:	f383 8811 	msr	BASEPRI, r3
   155ee:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   155f0:	0759      	lsls	r1, r3, #29
   155f2:	d402      	bmi.n	155fa <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   155f4:	f384 8811 	msr	BASEPRI, r4
   155f8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   155fa:	f023 0304 	bic.w	r3, r3, #4
   155fe:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   15600:	f7ff ff8e 	bl	15520 <_ready_thread>
	_reschedule(key);
   15604:	4620      	mov	r0, r4
}
   15606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   1560a:	f7ff bb3f 	b.w	14c8c <_reschedule>
	...

00015610 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   15610:	b530      	push	{r4, r5, lr}
   15612:	b087      	sub	sp, #28
   15614:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15616:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15618:	9504      	str	r5, [sp, #16]
   1561a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1561c:	9503      	str	r5, [sp, #12]
   1561e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15620:	9502      	str	r5, [sp, #8]
   15622:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   15624:	9501      	str	r5, [sp, #4]
   15626:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   15628:	9500      	str	r5, [sp, #0]
   1562a:	f7ec fa21 	bl	1a70 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1562e:	4b04      	ldr	r3, [pc, #16]	; (15640 <_setup_new_thread+0x30>)
   15630:	689b      	ldr	r3, [r3, #8]
   15632:	b913      	cbnz	r3, 1563a <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   15634:	6663      	str	r3, [r4, #100]	; 0x64
}
   15636:	b007      	add	sp, #28
   15638:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   1563a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1563c:	e7fa      	b.n	15634 <_setup_new_thread+0x24>
   1563e:	bf00      	nop
   15640:	20001948 	.word	0x20001948

00015644 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   15644:	b530      	push	{r4, r5, lr}
   15646:	b087      	sub	sp, #28
   15648:	4604      	mov	r4, r0
   1564a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1564c:	f3ef 8005 	mrs	r0, IPSR
   15650:	280d      	cmp	r0, #13
   15652:	d81f      	bhi.n	15694 <_impl_k_thread_create+0x50>
   15654:	b118      	cbz	r0, 1565e <_impl_k_thread_create+0x1a>
   15656:	4815      	ldr	r0, [pc, #84]	; (156ac <_impl_k_thread_create+0x68>)
   15658:	6840      	ldr	r0, [r0, #4]
   1565a:	0500      	lsls	r0, r0, #20
   1565c:	d51a      	bpl.n	15694 <_impl_k_thread_create+0x50>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1565e:	980e      	ldr	r0, [sp, #56]	; 0x38
   15660:	9004      	str	r0, [sp, #16]
   15662:	980d      	ldr	r0, [sp, #52]	; 0x34
   15664:	9003      	str	r0, [sp, #12]
   15666:	980c      	ldr	r0, [sp, #48]	; 0x30
   15668:	9002      	str	r0, [sp, #8]
   1566a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1566c:	9001      	str	r0, [sp, #4]
   1566e:	980a      	ldr	r0, [sp, #40]	; 0x28
   15670:	9000      	str	r0, [sp, #0]
   15672:	4620      	mov	r0, r4
   15674:	f7ff ffcc 	bl	15610 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   15678:	1c6b      	adds	r3, r5, #1
   1567a:	d003      	beq.n	15684 <_impl_k_thread_create+0x40>
	if (delay == 0) {
   1567c:	b92d      	cbnz	r5, 1568a <_impl_k_thread_create+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   1567e:	4620      	mov	r0, r4
   15680:	f7ff ffae 	bl	155e0 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   15684:	4620      	mov	r0, r4
   15686:	b007      	add	sp, #28
   15688:	bd30      	pop	{r4, r5, pc}
   1568a:	4629      	mov	r1, r5
   1568c:	4620      	mov	r0, r4
   1568e:	f7ff ff51 	bl	15534 <schedule_new_thread.part.11>
   15692:	e7f7      	b.n	15684 <_impl_k_thread_create+0x40>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
   15694:	f44f 73b0 	mov.w	r3, #352	; 0x160
   15698:	4a05      	ldr	r2, [pc, #20]	; (156b0 <_impl_k_thread_create+0x6c>)
   1569a:	4906      	ldr	r1, [pc, #24]	; (156b4 <_impl_k_thread_create+0x70>)
   1569c:	4806      	ldr	r0, [pc, #24]	; (156b8 <_impl_k_thread_create+0x74>)
   1569e:	f7eb fc75 	bl	f8c <printk>
   156a2:	4806      	ldr	r0, [pc, #24]	; (156bc <_impl_k_thread_create+0x78>)
   156a4:	f7eb fc72 	bl	f8c <printk>
   156a8:	e7fe      	b.n	156a8 <_impl_k_thread_create+0x64>
   156aa:	bf00      	nop
   156ac:	e000ed00 	.word	0xe000ed00
   156b0:	0001b001 	.word	0x0001b001
   156b4:	0001aefd 	.word	0x0001aefd
   156b8:	0001619c 	.word	0x0001619c
   156bc:	0001b030 	.word	0x0001b030

000156c0 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   156c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   156c2:	b510      	push	{r4, lr}
   156c4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   156c6:	b103      	cbz	r3, 156ca <_k_thread_single_abort+0xa>
		thread->fn_abort();
   156c8:	4798      	blx	r3
   156ca:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   156cc:	06da      	lsls	r2, r3, #27
   156ce:	d106      	bne.n	156de <_k_thread_single_abort+0x1e>
   156d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   156d2:	3201      	adds	r2, #1
   156d4:	d103      	bne.n	156de <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   156d6:	4620      	mov	r0, r4
   156d8:	f7ff fc5a 	bl	14f90 <_remove_thread_from_ready_q>
   156dc:	e00b      	b.n	156f6 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   156de:	079b      	lsls	r3, r3, #30
   156e0:	d502      	bpl.n	156e8 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   156e2:	4620      	mov	r0, r4
   156e4:	f7ff fbb2 	bl	14e4c <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   156e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   156ea:	3301      	adds	r3, #1
   156ec:	d003      	beq.n	156f6 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   156ee:	f104 0014 	add.w	r0, r4, #20
   156f2:	f7ff fefb 	bl	154ec <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   156f6:	7a63      	ldrb	r3, [r4, #9]
   156f8:	f043 0308 	orr.w	r3, r3, #8
   156fc:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   156fe:	bd10      	pop	{r4, pc}

00015700 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   15700:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   15702:	4f30      	ldr	r7, [pc, #192]	; (157c4 <_init_static_threads+0xc4>)
   15704:	4d30      	ldr	r5, [pc, #192]	; (157c8 <_init_static_threads+0xc8>)
{
   15706:	b087      	sub	sp, #28
   15708:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   1570a:	42bd      	cmp	r5, r7
   1570c:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   15710:	d317      	bcc.n	15742 <_init_static_threads+0x42>
   15712:	f3ef 8305 	mrs	r3, IPSR
   15716:	2b0d      	cmp	r3, #13
   15718:	d84a      	bhi.n	157b0 <_init_static_threads+0xb0>
   1571a:	b11b      	cbz	r3, 15724 <_init_static_threads+0x24>
   1571c:	4b2b      	ldr	r3, [pc, #172]	; (157cc <_init_static_threads+0xcc>)
   1571e:	685b      	ldr	r3, [r3, #4]
   15720:	051a      	lsls	r2, r3, #20
   15722:	d545      	bpl.n	157b0 <_init_static_threads+0xb0>
	__ASSERT(_current->base.sched_locked != 1, "");
   15724:	4b2a      	ldr	r3, [pc, #168]	; (157d0 <_init_static_threads+0xd0>)
   15726:	689a      	ldr	r2, [r3, #8]
   15728:	7ad3      	ldrb	r3, [r2, #11]
   1572a:	2b01      	cmp	r3, #1
   1572c:	d122      	bne.n	15774 <_init_static_threads+0x74>
   1572e:	23f6      	movs	r3, #246	; 0xf6
   15730:	4a28      	ldr	r2, [pc, #160]	; (157d4 <_init_static_threads+0xd4>)
   15732:	4929      	ldr	r1, [pc, #164]	; (157d8 <_init_static_threads+0xd8>)
   15734:	4829      	ldr	r0, [pc, #164]	; (157dc <_init_static_threads+0xdc>)
   15736:	f7eb fc29 	bl	f8c <printk>
   1573a:	4829      	ldr	r0, [pc, #164]	; (157e0 <_init_static_threads+0xe0>)
   1573c:	f7eb fc26 	bl	f8c <printk>
   15740:	e7fe      	b.n	15740 <_init_static_threads+0x40>
		_setup_new_thread(
   15742:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   15746:	9304      	str	r3, [sp, #16]
   15748:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1574c:	9303      	str	r3, [sp, #12]
   1574e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   15752:	9302      	str	r3, [sp, #8]
   15754:	f854 3c18 	ldr.w	r3, [r4, #-24]
   15758:	9301      	str	r3, [sp, #4]
   1575a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1575e:	9300      	str	r3, [sp, #0]
   15760:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   15764:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   15766:	f7ff ff53 	bl	15610 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   1576a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   1576e:	651d      	str	r5, [r3, #80]	; 0x50
   15770:	4625      	mov	r5, r4
   15772:	e7ca      	b.n	1570a <_init_static_threads+0xa>
	--_current->base.sched_locked;
   15774:	3b01      	subs	r3, #1
   15776:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   15778:	f04f 0320 	mov.w	r3, #32
   1577c:	f3ef 8511 	mrs	r5, BASEPRI
   15780:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   15784:	4c10      	ldr	r4, [pc, #64]	; (157c8 <_init_static_threads+0xc8>)
   15786:	42b4      	cmp	r4, r6
   15788:	d306      	bcc.n	15798 <_init_static_threads+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1578a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   1578e:	b007      	add	sp, #28
   15790:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   15794:	f7ff ba98 	b.w	14cc8 <k_sched_unlock>
		if (thread_data->init_delay != K_FOREVER) {
   15798:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1579a:	1c4b      	adds	r3, r1, #1
   1579c:	d003      	beq.n	157a6 <_init_static_threads+0xa6>
			schedule_new_thread(thread_data->init_thread,
   1579e:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   157a0:	b919      	cbnz	r1, 157aa <_init_static_threads+0xaa>
   157a2:	f7ff ff1d 	bl	155e0 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   157a6:	342c      	adds	r4, #44	; 0x2c
   157a8:	e7ed      	b.n	15786 <_init_static_threads+0x86>
   157aa:	f7ff fec3 	bl	15534 <schedule_new_thread.part.11>
   157ae:	e7fa      	b.n	157a6 <_init_static_threads+0xa6>
	__ASSERT(!_is_in_isr(), "");
   157b0:	23f5      	movs	r3, #245	; 0xf5
   157b2:	4a08      	ldr	r2, [pc, #32]	; (157d4 <_init_static_threads+0xd4>)
   157b4:	490b      	ldr	r1, [pc, #44]	; (157e4 <_init_static_threads+0xe4>)
   157b6:	4809      	ldr	r0, [pc, #36]	; (157dc <_init_static_threads+0xdc>)
   157b8:	f7eb fbe8 	bl	f8c <printk>
   157bc:	4808      	ldr	r0, [pc, #32]	; (157e0 <_init_static_threads+0xe0>)
   157be:	f7eb fbe5 	bl	f8c <printk>
   157c2:	e7fe      	b.n	157c2 <_init_static_threads+0xc2>
   157c4:	20003f04 	.word	0x20003f04
   157c8:	20003f04 	.word	0x20003f04
   157cc:	e000ed00 	.word	0xe000ed00
   157d0:	20001948 	.word	0x20001948
   157d4:	0001ae9e 	.word	0x0001ae9e
   157d8:	0001aed5 	.word	0x0001aed5
   157dc:	0001619c 	.word	0x0001619c
   157e0:	000161ba 	.word	0x000161ba
   157e4:	0001aefd 	.word	0x0001aefd

000157e8 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   157e8:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   157ea:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   157ec:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   157ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   157f2:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   157f4:	72c3      	strb	r3, [r0, #11]
   157f6:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   157f8:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   157fa:	61c3      	str	r3, [r0, #28]
	t->func = func;
   157fc:	6283      	str	r3, [r0, #40]	; 0x28
   157fe:	4770      	bx	lr

00015800 <k_work_submit_to_queue>:
{
   15800:	b500      	push	{lr}
   15802:	f101 0308 	add.w	r3, r1, #8
   15806:	f3bf 8f5b 	dmb	ish
   1580a:	e853 2f00 	ldrex	r2, [r3]
   1580e:	f042 0e01 	orr.w	lr, r2, #1
   15812:	e843 ec00 	strex	ip, lr, [r3]
   15816:	f1bc 0f00 	cmp.w	ip, #0
   1581a:	d1f6      	bne.n	1580a <k_work_submit_to_queue+0xa>
   1581c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   15820:	07d3      	lsls	r3, r2, #31
   15822:	d403      	bmi.n	1582c <k_work_submit_to_queue+0x2c>
}
   15824:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   15828:	f7ff b942 	b.w	14ab0 <k_queue_append>
   1582c:	f85d fb04 	ldr.w	pc, [sp], #4

00015830 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   15830:	f1a0 010c 	sub.w	r1, r0, #12
   15834:	6980      	ldr	r0, [r0, #24]
   15836:	f7ff bfe3 	b.w	15800 <k_work_submit_to_queue>

0001583a <work_q_main>:
{
   1583a:	b510      	push	{r4, lr}
   1583c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1583e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15842:	4620      	mov	r0, r4
   15844:	f7ff f96c 	bl	14b20 <_impl_k_queue_get>
		if (!work) {
   15848:	4603      	mov	r3, r0
   1584a:	2800      	cmp	r0, #0
   1584c:	d0f7      	beq.n	1583e <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1584e:	3308      	adds	r3, #8
		handler = work->handler;
   15850:	6842      	ldr	r2, [r0, #4]
   15852:	f3bf 8f5b 	dmb	ish
   15856:	e853 1f00 	ldrex	r1, [r3]
   1585a:	f021 0e01 	bic.w	lr, r1, #1
   1585e:	e843 ec00 	strex	ip, lr, [r3]
   15862:	f1bc 0f00 	cmp.w	ip, #0
   15866:	d1f6      	bne.n	15856 <work_q_main+0x1c>
   15868:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   1586c:	07cb      	lsls	r3, r1, #31
   1586e:	d500      	bpl.n	15872 <work_q_main+0x38>
			handler(work);
   15870:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   15872:	f7ff fc47 	bl	15104 <_impl_k_yield>
   15876:	e7e2      	b.n	1583e <work_q_main+0x4>

00015878 <k_work_q_start>:
{
   15878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1587a:	b087      	sub	sp, #28
   1587c:	4604      	mov	r4, r0
   1587e:	461f      	mov	r7, r3
   15880:	460d      	mov	r5, r1
   15882:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   15884:	f7ff f90c 	bl	14aa0 <_impl_k_queue_init>

   15888:	2000      	movs	r0, #0
   1588a:	9005      	str	r0, [sp, #20]
   1588c:	9004      	str	r0, [sp, #16]
   1588e:	9002      	str	r0, [sp, #8]
   15890:	9001      	str	r0, [sp, #4]
   15892:	9703      	str	r7, [sp, #12]
   15894:	9400      	str	r4, [sp, #0]
   15896:	4b04      	ldr	r3, [pc, #16]	; (158a8 <k_work_q_start+0x30>)
   15898:	4632      	mov	r2, r6
   1589a:	4629      	mov	r1, r5
   1589c:	f104 0010 	add.w	r0, r4, #16
   158a0:	f7ff fed0 	bl	15644 <_impl_k_thread_create>
}
   158a4:	b007      	add	sp, #28
   158a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   158a8:	0001583b 	.word	0x0001583b

000158ac <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   158ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   158b0:	2300      	movs	r3, #0
   158b2:	61c2      	str	r2, [r0, #28]
	t->func = func;
   158b4:	4a04      	ldr	r2, [pc, #16]	; (158c8 <k_delayed_work_init+0x1c>)
   158b6:	6003      	str	r3, [r0, #0]
   158b8:	6041      	str	r1, [r0, #4]
   158ba:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   158bc:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   158be:	6143      	str	r3, [r0, #20]
	t->func = func;
   158c0:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   158c2:	6243      	str	r3, [r0, #36]	; 0x24
   158c4:	4770      	bx	lr
   158c6:	bf00      	nop
   158c8:	00015831 	.word	0x00015831

000158cc <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   158cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   158ce:	f04f 0320 	mov.w	r3, #32
   158d2:	f3ef 8411 	mrs	r4, BASEPRI
   158d6:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   158da:	6a43      	ldr	r3, [r0, #36]	; 0x24
   158dc:	b923      	cbnz	r3, 158e8 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   158de:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   158e2:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   158e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   158e8:	f3bf 8f5b 	dmb	ish
   158ec:	6883      	ldr	r3, [r0, #8]
   158ee:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   158f2:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   158f4:	f100 0508 	add.w	r5, r0, #8
   158f8:	d533      	bpl.n	15962 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   158fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
   158fc:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   158fe:	2100      	movs	r1, #0
   15900:	2b00      	cmp	r3, #0
   15902:	d0ec      	beq.n	158de <k_delayed_work_cancel+0x12>
   15904:	4298      	cmp	r0, r3
   15906:	d127      	bne.n	15958 <k_delayed_work_cancel+0x8c>
   15908:	6803      	ldr	r3, [r0, #0]
   1590a:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1590c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   15910:	b9c9      	cbnz	r1, 15946 <k_delayed_work_cancel+0x7a>
   15912:	42b8      	cmp	r0, r7
	list->head = node;
   15914:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   15916:	d100      	bne.n	1591a <k_delayed_work_cancel+0x4e>
	list->tail = node;
   15918:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1591a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1591c:	f003 0303 	and.w	r3, r3, #3
   15920:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   15922:	2300      	movs	r3, #0
   15924:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15926:	f3bf 8f5b 	dmb	ish
   1592a:	e855 2f00 	ldrex	r2, [r5]
   1592e:	f022 0201 	bic.w	r2, r2, #1
   15932:	e845 2100 	strex	r1, r2, [r5]
   15936:	2900      	cmp	r1, #0
   15938:	d1f7      	bne.n	1592a <k_delayed_work_cancel+0x5e>
   1593a:	f3bf 8f5b 	dmb	ish
   1593e:	f384 8811 	msr	BASEPRI, r4
	return 0;
   15942:	4618      	mov	r0, r3
   15944:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15946:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   15948:	f006 0603 	and.w	r6, r6, #3
   1594c:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   1594e:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   15950:	600b      	str	r3, [r1, #0]
	list->tail = node;
   15952:	bf08      	it	eq
   15954:	6051      	streq	r1, [r2, #4]
   15956:	e7e0      	b.n	1591a <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15958:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   1595a:	4619      	mov	r1, r3
   1595c:	f026 0303 	bic.w	r3, r6, #3
   15960:	e7ce      	b.n	15900 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   15962:	69c1      	ldr	r1, [r0, #28]
   15964:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   15966:	f100 020c 	add.w	r2, r0, #12
   1596a:	d0da      	beq.n	15922 <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1596c:	4b08      	ldr	r3, [pc, #32]	; (15990 <k_delayed_work_cancel+0xc4>)
   1596e:	699b      	ldr	r3, [r3, #24]
   15970:	429a      	cmp	r2, r3
   15972:	bf1f      	itttt	ne
   15974:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   15976:	6913      	ldrne	r3, [r2, #16]
   15978:	185b      	addne	r3, r3, r1
   1597a:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   1597c:	6903      	ldr	r3, [r0, #16]
   1597e:	68c2      	ldr	r2, [r0, #12]
   15980:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   15982:	68c2      	ldr	r2, [r0, #12]
   15984:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   15986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1598a:	61c3      	str	r3, [r0, #28]
   1598c:	e7c9      	b.n	15922 <k_delayed_work_cancel+0x56>
   1598e:	bf00      	nop
   15990:	20001948 	.word	0x20001948

00015994 <k_delayed_work_submit_to_queue>:
{
   15994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15996:	4607      	mov	r7, r0
   15998:	460c      	mov	r4, r1
   1599a:	4615      	mov	r5, r2
	__asm__ volatile(
   1599c:	f04f 0320 	mov.w	r3, #32
   159a0:	f3ef 8611 	mrs	r6, BASEPRI
   159a4:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   159a8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   159aa:	b123      	cbz	r3, 159b6 <k_delayed_work_submit_to_queue+0x22>
   159ac:	4283      	cmp	r3, r0
   159ae:	d00b      	beq.n	159c8 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   159b0:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   159b4:	e00d      	b.n	159d2 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   159b6:	b138      	cbz	r0, 159c8 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   159b8:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   159ba:	b96d      	cbnz	r5, 159d8 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   159bc:	4621      	mov	r1, r4
   159be:	4638      	mov	r0, r7
   159c0:	f7ff ff1e 	bl	15800 <k_work_submit_to_queue>
	err = 0;
   159c4:	2000      	movs	r0, #0
   159c6:	e004      	b.n	159d2 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   159c8:	4620      	mov	r0, r4
   159ca:	f7ff ff7f 	bl	158cc <k_delayed_work_cancel>
		if (err < 0) {
   159ce:	2800      	cmp	r0, #0
   159d0:	daf2      	bge.n	159b8 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   159d2:	f386 8811 	msr	BASEPRI, r6
}
   159d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   159d8:	220a      	movs	r2, #10
   159da:	3509      	adds	r5, #9
   159dc:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   159e0:	4a16      	ldr	r2, [pc, #88]	; (15a3c <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   159e2:	2300      	movs	r3, #0
   159e4:	4611      	mov	r1, r2
   159e6:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   159e8:	61a3      	str	r3, [r4, #24]
   159ea:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   159ee:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   159f0:	428b      	cmp	r3, r1
   159f2:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   159f6:	61e5      	str	r5, [r4, #28]
   159f8:	d106      	bne.n	15a08 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   159fa:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   159fc:	6993      	ldr	r3, [r2, #24]
   159fe:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   15a00:	6993      	ldr	r3, [r2, #24]
   15a02:	601f      	str	r7, [r3, #0]
	list->tail = node;
   15a04:	6197      	str	r7, [r2, #24]
   15a06:	e7dd      	b.n	159c4 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15a08:	2b00      	cmp	r3, #0
   15a0a:	d0f6      	beq.n	159fa <k_delayed_work_submit_to_queue+0x66>
   15a0c:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   15a10:	69e0      	ldr	r0, [r4, #28]
   15a12:	691d      	ldr	r5, [r3, #16]
   15a14:	42a8      	cmp	r0, r5
   15a16:	dc08      	bgt.n	15a2a <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   15a18:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   15a1a:	1a28      	subs	r0, r5, r0
   15a1c:	6118      	str	r0, [r3, #16]
   15a1e:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   15a20:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   15a22:	685a      	ldr	r2, [r3, #4]
   15a24:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   15a26:	605f      	str	r7, [r3, #4]
   15a28:	e7cc      	b.n	159c4 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   15a2a:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   15a2c:	4573      	cmp	r3, lr
   15a2e:	61e0      	str	r0, [r4, #28]
   15a30:	d0e3      	beq.n	159fa <k_delayed_work_submit_to_queue+0x66>
   15a32:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   15a34:	2b00      	cmp	r3, #0
   15a36:	d1eb      	bne.n	15a10 <k_delayed_work_submit_to_queue+0x7c>
   15a38:	e7df      	b.n	159fa <k_delayed_work_submit_to_queue+0x66>
   15a3a:	bf00      	nop
   15a3c:	20001948 	.word	0x20001948

00015a40 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   15a40:	6883      	ldr	r3, [r0, #8]
{
   15a42:	b570      	push	{r4, r5, r6, lr}
   15a44:	4605      	mov	r5, r0
   15a46:	460e      	mov	r6, r1
	if (!event->poller) {
   15a48:	b333      	cbz	r3, 15a98 <signal_poll_event+0x58>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   15a4a:	681c      	ldr	r4, [r3, #0]

	__ASSERT(event->poller->thread, "poller should have a thread\n");
   15a4c:	b954      	cbnz	r4, 15a64 <signal_poll_event+0x24>
   15a4e:	f44f 73a4 	mov.w	r3, #328	; 0x148
   15a52:	4a17      	ldr	r2, [pc, #92]	; (15ab0 <signal_poll_event+0x70>)
   15a54:	4917      	ldr	r1, [pc, #92]	; (15ab4 <signal_poll_event+0x74>)
   15a56:	4818      	ldr	r0, [pc, #96]	; (15ab8 <signal_poll_event+0x78>)
   15a58:	f7eb fa98 	bl	f8c <printk>
   15a5c:	4817      	ldr	r0, [pc, #92]	; (15abc <signal_poll_event+0x7c>)
   15a5e:	f7eb fa95 	bl	f8c <printk>
   15a62:	e7fe      	b.n	15a62 <signal_poll_event+0x22>

	event->poller->is_polling = 0;
   15a64:	2200      	movs	r2, #0
   15a66:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   15a68:	7a63      	ldrb	r3, [r4, #9]
   15a6a:	079a      	lsls	r2, r3, #30
   15a6c:	d514      	bpl.n	15a98 <signal_poll_event+0x58>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   15a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15a70:	3302      	adds	r3, #2
   15a72:	d01a      	beq.n	15aaa <signal_poll_event+0x6a>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   15a74:	4620      	mov	r0, r4
   15a76:	f7ff fa59 	bl	14f2c <_unpend_thread>
	_set_thread_return_value(thread,
   15a7a:	2e00      	cmp	r6, #0
   15a7c:	bf0c      	ite	eq
   15a7e:	f06f 0303 	mvneq.w	r3, #3
   15a82:	2300      	movne	r3, #0
   15a84:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   15a86:	7a63      	ldrb	r3, [r4, #9]
   15a88:	06db      	lsls	r3, r3, #27
   15a8a:	d105      	bne.n	15a98 <signal_poll_event+0x58>
   15a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15a8e:	3301      	adds	r3, #1
   15a90:	d102      	bne.n	15a98 <signal_poll_event+0x58>
		_add_thread_to_ready_q(thread);
   15a92:	4620      	mov	r0, r4
   15a94:	f7ff f99a 	bl	14dcc <_add_thread_to_ready_q>
	event->state |= state;
   15a98:	7b6b      	ldrb	r3, [r5, #13]
   15a9a:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   15a9e:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   15aa2:	2000      	movs	r0, #0
	event->state |= state;
   15aa4:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   15aa6:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   15aa8:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   15aaa:	f06f 000a 	mvn.w	r0, #10
}
   15aae:	bd70      	pop	{r4, r5, r6, pc}
   15ab0:	0001b19b 	.word	0x0001b19b
   15ab4:	0001b1c8 	.word	0x0001b1c8
   15ab8:	0001619c 	.word	0x0001619c
   15abc:	0001b1de 	.word	0x0001b1de

00015ac0 <add_event>:
{
   15ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15ac2:	6803      	ldr	r3, [r0, #0]
   15ac4:	4298      	cmp	r0, r3
   15ac6:	4604      	mov	r4, r0
   15ac8:	460e      	mov	r6, r1
   15aca:	4617      	mov	r7, r2
   15acc:	d106      	bne.n	15adc <add_event+0x1c>
	node->next = list;
   15ace:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   15ad0:	6863      	ldr	r3, [r4, #4]
   15ad2:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   15ad4:	6863      	ldr	r3, [r4, #4]
   15ad6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   15ad8:	6066      	str	r6, [r4, #4]
   15ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   15adc:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   15ade:	2b00      	cmp	r3, #0
   15ae0:	d0f5      	beq.n	15ace <add_event+0xe>
   15ae2:	689b      	ldr	r3, [r3, #8]
   15ae4:	6811      	ldr	r1, [r2, #0]
   15ae6:	6818      	ldr	r0, [r3, #0]
   15ae8:	f7ff f8ba 	bl	14c60 <_is_t1_higher_prio_than_t2>
   15aec:	2800      	cmp	r0, #0
   15aee:	d1ee      	bne.n	15ace <add_event+0xe>
	return list->head == list;
   15af0:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15af2:	42ac      	cmp	r4, r5
   15af4:	d0eb      	beq.n	15ace <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   15af6:	2d00      	cmp	r5, #0
   15af8:	d0e9      	beq.n	15ace <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   15afa:	68ab      	ldr	r3, [r5, #8]
   15afc:	6838      	ldr	r0, [r7, #0]
   15afe:	6819      	ldr	r1, [r3, #0]
   15b00:	f7ff f8ae 	bl	14c60 <_is_t1_higher_prio_than_t2>
   15b04:	b130      	cbz	r0, 15b14 <add_event+0x54>
		node->prev = insert_point->prev;
   15b06:	686b      	ldr	r3, [r5, #4]
   15b08:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   15b0a:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   15b0c:	686b      	ldr	r3, [r5, #4]
   15b0e:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   15b10:	606e      	str	r6, [r5, #4]
   15b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   15b14:	6863      	ldr	r3, [r4, #4]
   15b16:	429d      	cmp	r5, r3
   15b18:	d0d9      	beq.n	15ace <add_event+0xe>
   15b1a:	682d      	ldr	r5, [r5, #0]
   15b1c:	e7eb      	b.n	15af6 <add_event+0x36>
	...

00015b20 <clear_event_registrations>:
{
   15b20:	b538      	push	{r3, r4, r5, lr}
   15b22:	2314      	movs	r3, #20
   15b24:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   15b28:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   15b2a:	2900      	cmp	r1, #0
   15b2c:	da00      	bge.n	15b30 <clear_event_registrations+0x10>
}
   15b2e:	bd38      	pop	{r3, r4, r5, pc}
	switch (event->type) {
   15b30:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   15b32:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   15b34:	f003 030f 	and.w	r3, r3, #15
   15b38:	2b04      	cmp	r3, #4
   15b3a:	d838      	bhi.n	15bae <clear_event_registrations+0x8e>
   15b3c:	e8df f003 	tbb	[pc, r3]
   15b40:	37031b2c 	.word	0x37031b2c
   15b44:	0f          	.byte	0x0f
   15b45:	00          	.byte	0x00
		__ASSERT(event->sem, "invalid semaphore\n");
   15b46:	6903      	ldr	r3, [r0, #16]
   15b48:	bb0b      	cbnz	r3, 15b8e <clear_event_registrations+0x6e>
   15b4a:	2389      	movs	r3, #137	; 0x89
   15b4c:	4a1d      	ldr	r2, [pc, #116]	; (15bc4 <clear_event_registrations+0xa4>)
   15b4e:	491e      	ldr	r1, [pc, #120]	; (15bc8 <clear_event_registrations+0xa8>)
   15b50:	481e      	ldr	r0, [pc, #120]	; (15bcc <clear_event_registrations+0xac>)
   15b52:	f7eb fa1b 	bl	f8c <printk>
   15b56:	481e      	ldr	r0, [pc, #120]	; (15bd0 <clear_event_registrations+0xb0>)
   15b58:	f7eb fa18 	bl	f8c <printk>
   15b5c:	e7fe      	b.n	15b5c <clear_event_registrations+0x3c>
		__ASSERT(event->queue, "invalid queue\n");
   15b5e:	6903      	ldr	r3, [r0, #16]
   15b60:	b9ab      	cbnz	r3, 15b8e <clear_event_registrations+0x6e>
   15b62:	238d      	movs	r3, #141	; 0x8d
   15b64:	4a17      	ldr	r2, [pc, #92]	; (15bc4 <clear_event_registrations+0xa4>)
   15b66:	491b      	ldr	r1, [pc, #108]	; (15bd4 <clear_event_registrations+0xb4>)
   15b68:	4818      	ldr	r0, [pc, #96]	; (15bcc <clear_event_registrations+0xac>)
   15b6a:	f7eb fa0f 	bl	f8c <printk>
   15b6e:	481a      	ldr	r0, [pc, #104]	; (15bd8 <clear_event_registrations+0xb8>)
   15b70:	f7eb fa0c 	bl	f8c <printk>
   15b74:	e7fe      	b.n	15b74 <clear_event_registrations+0x54>
		__ASSERT(event->signal, "invalid poll signal\n");
   15b76:	6903      	ldr	r3, [r0, #16]
   15b78:	b94b      	cbnz	r3, 15b8e <clear_event_registrations+0x6e>
   15b7a:	2391      	movs	r3, #145	; 0x91
   15b7c:	4a11      	ldr	r2, [pc, #68]	; (15bc4 <clear_event_registrations+0xa4>)
   15b7e:	4917      	ldr	r1, [pc, #92]	; (15bdc <clear_event_registrations+0xbc>)
   15b80:	4812      	ldr	r0, [pc, #72]	; (15bcc <clear_event_registrations+0xac>)
   15b82:	f7eb fa03 	bl	f8c <printk>
   15b86:	4816      	ldr	r0, [pc, #88]	; (15be0 <clear_event_registrations+0xc0>)
   15b88:	f7eb fa00 	bl	f8c <printk>
   15b8c:	e7fe      	b.n	15b8c <clear_event_registrations+0x6c>
	node->prev->next = node->next;
   15b8e:	6843      	ldr	r3, [r0, #4]
   15b90:	6805      	ldr	r5, [r0, #0]
   15b92:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   15b94:	6805      	ldr	r5, [r0, #0]
   15b96:	606b      	str	r3, [r5, #4]
   15b98:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   15b9c:	f04f 0320 	mov.w	r3, #32
   15ba0:	f3ef 8211 	mrs	r2, BASEPRI
   15ba4:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   15ba8:	3901      	subs	r1, #1
   15baa:	3814      	subs	r0, #20
   15bac:	e7bd      	b.n	15b2a <clear_event_registrations+0xa>
		__ASSERT(0, "invalid event type\n");
   15bae:	2398      	movs	r3, #152	; 0x98
   15bb0:	4a04      	ldr	r2, [pc, #16]	; (15bc4 <clear_event_registrations+0xa4>)
   15bb2:	490c      	ldr	r1, [pc, #48]	; (15be4 <clear_event_registrations+0xc4>)
   15bb4:	4805      	ldr	r0, [pc, #20]	; (15bcc <clear_event_registrations+0xac>)
   15bb6:	f7eb f9e9 	bl	f8c <printk>
   15bba:	480b      	ldr	r0, [pc, #44]	; (15be8 <clear_event_registrations+0xc8>)
   15bbc:	f7eb f9e6 	bl	f8c <printk>
   15bc0:	e7fe      	b.n	15bc0 <clear_event_registrations+0xa0>
   15bc2:	bf00      	nop
   15bc4:	0001b19b 	.word	0x0001b19b
   15bc8:	0001b09e 	.word	0x0001b09e
   15bcc:	0001619c 	.word	0x0001619c
   15bd0:	0001b0a9 	.word	0x0001b0a9
   15bd4:	0001b0bc 	.word	0x0001b0bc
   15bd8:	0001b0c9 	.word	0x0001b0c9
   15bdc:	0001b0d8 	.word	0x0001b0d8
   15be0:	0001b0e6 	.word	0x0001b0e6
   15be4:	0001af5d 	.word	0x0001af5d
   15be8:	0001b0fb 	.word	0x0001b0fb

00015bec <k_poll_event_init>:
{
   15bec:	b510      	push	{r4, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   15bee:	b14a      	cbz	r2, 15c04 <k_poll_event_init+0x18>
   15bf0:	231f      	movs	r3, #31
   15bf2:	4a19      	ldr	r2, [pc, #100]	; (15c58 <k_poll_event_init+0x6c>)
   15bf4:	4919      	ldr	r1, [pc, #100]	; (15c5c <k_poll_event_init+0x70>)
   15bf6:	481a      	ldr	r0, [pc, #104]	; (15c60 <k_poll_event_init+0x74>)
   15bf8:	f7eb f9c8 	bl	f8c <printk>
   15bfc:	4819      	ldr	r0, [pc, #100]	; (15c64 <k_poll_event_init+0x78>)
   15bfe:	f7eb f9c5 	bl	f8c <printk>
   15c02:	e7fe      	b.n	15c02 <k_poll_event_init+0x16>
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
   15c04:	290f      	cmp	r1, #15
   15c06:	d909      	bls.n	15c1c <k_poll_event_init+0x30>
   15c08:	2320      	movs	r3, #32
   15c0a:	4a13      	ldr	r2, [pc, #76]	; (15c58 <k_poll_event_init+0x6c>)
   15c0c:	4916      	ldr	r1, [pc, #88]	; (15c68 <k_poll_event_init+0x7c>)
   15c0e:	4814      	ldr	r0, [pc, #80]	; (15c60 <k_poll_event_init+0x74>)
   15c10:	f7eb f9bc 	bl	f8c <printk>
   15c14:	4815      	ldr	r0, [pc, #84]	; (15c6c <k_poll_event_init+0x80>)
   15c16:	f7eb f9b9 	bl	f8c <printk>
   15c1a:	e7fe      	b.n	15c1a <k_poll_event_init+0x2e>
	__ASSERT(obj, "must provide an object\n");
   15c1c:	b94b      	cbnz	r3, 15c32 <k_poll_event_init+0x46>
   15c1e:	2321      	movs	r3, #33	; 0x21
   15c20:	4a0d      	ldr	r2, [pc, #52]	; (15c58 <k_poll_event_init+0x6c>)
   15c22:	4913      	ldr	r1, [pc, #76]	; (15c70 <k_poll_event_init+0x84>)
   15c24:	480e      	ldr	r0, [pc, #56]	; (15c60 <k_poll_event_init+0x74>)
   15c26:	f7eb f9b1 	bl	f8c <printk>
   15c2a:	4812      	ldr	r0, [pc, #72]	; (15c74 <k_poll_event_init+0x88>)
   15c2c:	f7eb f9ae 	bl	f8c <printk>
   15c30:	e7fe      	b.n	15c30 <k_poll_event_init+0x44>
	event->type = type;
   15c32:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   15c34:	6103      	str	r3, [r0, #16]
	event->type = type;
   15c36:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   15c3a:	4621      	mov	r1, r4
   15c3c:	f362 1107 	bfi	r1, r2, #4, #4
   15c40:	7341      	strb	r1, [r0, #13]
	event->mode = mode;
   15c42:	7b81      	ldrb	r1, [r0, #14]
	event->poller = NULL;
   15c44:	6082      	str	r2, [r0, #8]
	event->mode = mode;
   15c46:	f362 0100 	bfi	r1, r2, #0, #1
   15c4a:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   15c4c:	89c1      	ldrh	r1, [r0, #14]
   15c4e:	f362 014f 	bfi	r1, r2, #1, #15
   15c52:	81c1      	strh	r1, [r0, #14]
	event->obj = obj;
   15c54:	bd10      	pop	{r4, pc}
   15c56:	bf00      	nop
   15c58:	0001b19b 	.word	0x0001b19b
   15c5c:	0001b10f 	.word	0x0001b10f
   15c60:	0001619c 	.word	0x0001619c
   15c64:	0001b12f 	.word	0x0001b12f
   15c68:	0001b153 	.word	0x0001b153
   15c6c:	0001b171 	.word	0x0001b171
   15c70:	0001b17f 	.word	0x0001b17f
   15c74:	0001b183 	.word	0x0001b183

00015c78 <_impl_k_poll>:
{
   15c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c7c:	4607      	mov	r7, r0
   15c7e:	b085      	sub	sp, #20
   15c80:	4689      	mov	r9, r1
   15c82:	4690      	mov	r8, r2
   15c84:	f3ef 8305 	mrs	r3, IPSR
   15c88:	2b0d      	cmp	r3, #13
   15c8a:	f200 80d3 	bhi.w	15e34 <_impl_k_poll+0x1bc>
   15c8e:	b123      	cbz	r3, 15c9a <_impl_k_poll+0x22>
   15c90:	4b73      	ldr	r3, [pc, #460]	; (15e60 <_impl_k_poll+0x1e8>)
   15c92:	685b      	ldr	r3, [r3, #4]
   15c94:	051b      	lsls	r3, r3, #20
   15c96:	f140 80cd 	bpl.w	15e34 <_impl_k_poll+0x1bc>
	__ASSERT(events, "NULL events\n");
   15c9a:	b94f      	cbnz	r7, 15cb0 <_impl_k_poll+0x38>
   15c9c:	23b2      	movs	r3, #178	; 0xb2
   15c9e:	4a71      	ldr	r2, [pc, #452]	; (15e64 <_impl_k_poll+0x1ec>)
   15ca0:	4971      	ldr	r1, [pc, #452]	; (15e68 <_impl_k_poll+0x1f0>)
   15ca2:	4872      	ldr	r0, [pc, #456]	; (15e6c <_impl_k_poll+0x1f4>)
   15ca4:	f7eb f972 	bl	f8c <printk>
   15ca8:	4871      	ldr	r0, [pc, #452]	; (15e70 <_impl_k_poll+0x1f8>)
   15caa:	f7eb f96f 	bl	f8c <printk>
   15cae:	e7fe      	b.n	15cae <_impl_k_poll+0x36>
	__ASSERT(num_events > 0, "zero events\n");
   15cb0:	f1b9 0f00 	cmp.w	r9, #0
   15cb4:	dc09      	bgt.n	15cca <_impl_k_poll+0x52>
   15cb6:	23b3      	movs	r3, #179	; 0xb3
   15cb8:	4a6a      	ldr	r2, [pc, #424]	; (15e64 <_impl_k_poll+0x1ec>)
   15cba:	496e      	ldr	r1, [pc, #440]	; (15e74 <_impl_k_poll+0x1fc>)
   15cbc:	486b      	ldr	r0, [pc, #428]	; (15e6c <_impl_k_poll+0x1f4>)
   15cbe:	f7eb f965 	bl	f8c <printk>
   15cc2:	486d      	ldr	r0, [pc, #436]	; (15e78 <_impl_k_poll+0x200>)
   15cc4:	f7eb f962 	bl	f8c <printk>
   15cc8:	e7fe      	b.n	15cc8 <_impl_k_poll+0x50>
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15cca:	4b6c      	ldr	r3, [pc, #432]	; (15e7c <_impl_k_poll+0x204>)
   15ccc:	689b      	ldr	r3, [r3, #8]
   15cce:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   15cd0:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15cd2:	2301      	movs	r3, #1
   15cd4:	9301      	str	r3, [sp, #4]
   15cd6:	463c      	mov	r4, r7
	int last_registered = -1, rc;
   15cd8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   15cdc:	46b2      	mov	sl, r6
   15cde:	f04f 0320 	mov.w	r3, #32
   15ce2:	f3ef 8b11 	mrs	fp, BASEPRI
   15ce6:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   15cea:	7b63      	ldrb	r3, [r4, #13]
   15cec:	f003 020f 	and.w	r2, r3, #15
   15cf0:	2a04      	cmp	r2, #4
   15cf2:	d822      	bhi.n	15d3a <_impl_k_poll+0xc2>
   15cf4:	e8df f002 	tbb	[pc, r2]
   15cf8:	21031b08 	.word	0x21031b08
   15cfc:	15          	.byte	0x15
   15cfd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   15cfe:	6921      	ldr	r1, [r4, #16]
   15d00:	6889      	ldr	r1, [r1, #8]
   15d02:	2900      	cmp	r1, #0
   15d04:	f040 80a0 	bne.w	15e48 <_impl_k_poll+0x1d0>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   15d08:	f1b8 0f00 	cmp.w	r8, #0
   15d0c:	d036      	beq.n	15d7c <_impl_k_poll+0x104>
   15d0e:	9b01      	ldr	r3, [sp, #4]
   15d10:	2b00      	cmp	r3, #0
   15d12:	d033      	beq.n	15d7c <_impl_k_poll+0x104>
	switch (event->type) {
   15d14:	2a04      	cmp	r2, #4
   15d16:	d867      	bhi.n	15de8 <_impl_k_poll+0x170>
   15d18:	e8df f002 	tbb	[pc, r2]
   15d1c:	661c572d 	.word	0x661c572d
   15d20:	47          	.byte	0x47
   15d21:	00          	.byte	0x00
		if (!k_queue_is_empty(event->queue)) {
   15d22:	6921      	ldr	r1, [r4, #16]
   15d24:	6809      	ldr	r1, [r1, #0]
   15d26:	2900      	cmp	r1, #0
   15d28:	d0ee      	beq.n	15d08 <_impl_k_poll+0x90>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   15d2a:	2204      	movs	r2, #4
   15d2c:	e08d      	b.n	15e4a <_impl_k_poll+0x1d2>
		if (event->signal->signaled) {
   15d2e:	6921      	ldr	r1, [r4, #16]
   15d30:	6889      	ldr	r1, [r1, #8]
   15d32:	2900      	cmp	r1, #0
   15d34:	d0e8      	beq.n	15d08 <_impl_k_poll+0x90>
			*state = K_POLL_STATE_SIGNALED;
   15d36:	2201      	movs	r2, #1
   15d38:	e087      	b.n	15e4a <_impl_k_poll+0x1d2>
		__ASSERT(0, "invalid event type (0x%x)\n", event->type);
   15d3a:	4951      	ldr	r1, [pc, #324]	; (15e80 <_impl_k_poll+0x208>)
   15d3c:	4a49      	ldr	r2, [pc, #292]	; (15e64 <_impl_k_poll+0x1ec>)
   15d3e:	484b      	ldr	r0, [pc, #300]	; (15e6c <_impl_k_poll+0x1f4>)
   15d40:	2345      	movs	r3, #69	; 0x45
   15d42:	f7eb f923 	bl	f8c <printk>
   15d46:	7b61      	ldrb	r1, [r4, #13]
   15d48:	484e      	ldr	r0, [pc, #312]	; (15e84 <_impl_k_poll+0x20c>)
   15d4a:	f001 010f 	and.w	r1, r1, #15
   15d4e:	f7eb f91d 	bl	f8c <printk>
   15d52:	e7fe      	b.n	15d52 <_impl_k_poll+0xda>
		__ASSERT(event->sem, "invalid semaphore\n");
   15d54:	6920      	ldr	r0, [r4, #16]
   15d56:	b948      	cbnz	r0, 15d6c <_impl_k_poll+0xf4>
   15d58:	236a      	movs	r3, #106	; 0x6a
   15d5a:	4a42      	ldr	r2, [pc, #264]	; (15e64 <_impl_k_poll+0x1ec>)
   15d5c:	494a      	ldr	r1, [pc, #296]	; (15e88 <_impl_k_poll+0x210>)
   15d5e:	4843      	ldr	r0, [pc, #268]	; (15e6c <_impl_k_poll+0x1f4>)
   15d60:	f7eb f914 	bl	f8c <printk>
   15d64:	4849      	ldr	r0, [pc, #292]	; (15e8c <_impl_k_poll+0x214>)
   15d66:	f7eb f911 	bl	f8c <printk>
   15d6a:	e7fe      	b.n	15d6a <_impl_k_poll+0xf2>
		add_event(&event->sem->poll_events, event, poller);
   15d6c:	466a      	mov	r2, sp
   15d6e:	4621      	mov	r1, r4
   15d70:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   15d72:	f7ff fea5 	bl	15ac0 <add_event>
	event->poller = poller;
   15d76:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   15d7a:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15d7c:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   15d80:	3601      	adds	r6, #1
   15d82:	45b1      	cmp	r9, r6
   15d84:	f104 0414 	add.w	r4, r4, #20
   15d88:	d1a9      	bne.n	15cde <_impl_k_poll+0x66>
	__asm__ volatile(
   15d8a:	f04f 0320 	mov.w	r3, #32
   15d8e:	f3ef 8611 	mrs	r6, BASEPRI
   15d92:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   15d96:	9c01      	ldr	r4, [sp, #4]
   15d98:	bb84      	cbnz	r4, 15dfc <_impl_k_poll+0x184>
	clear_event_registrations(events, last_registered, key);
   15d9a:	4632      	mov	r2, r6
   15d9c:	4629      	mov	r1, r5
   15d9e:	4638      	mov	r0, r7
   15da0:	f7ff febe 	bl	15b20 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15da4:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   15da8:	e031      	b.n	15e0e <_impl_k_poll+0x196>
		__ASSERT(event->queue, "invalid queue\n");
   15daa:	6920      	ldr	r0, [r4, #16]
   15dac:	b948      	cbnz	r0, 15dc2 <_impl_k_poll+0x14a>
   15dae:	236e      	movs	r3, #110	; 0x6e
   15db0:	4a2c      	ldr	r2, [pc, #176]	; (15e64 <_impl_k_poll+0x1ec>)
   15db2:	4937      	ldr	r1, [pc, #220]	; (15e90 <_impl_k_poll+0x218>)
   15db4:	482d      	ldr	r0, [pc, #180]	; (15e6c <_impl_k_poll+0x1f4>)
   15db6:	f7eb f8e9 	bl	f8c <printk>
   15dba:	4836      	ldr	r0, [pc, #216]	; (15e94 <_impl_k_poll+0x21c>)
   15dbc:	f7eb f8e6 	bl	f8c <printk>
   15dc0:	e7fe      	b.n	15dc0 <_impl_k_poll+0x148>
		add_event(&event->queue->poll_events, event, poller);
   15dc2:	466a      	mov	r2, sp
   15dc4:	4621      	mov	r1, r4
   15dc6:	3008      	adds	r0, #8
   15dc8:	e7d3      	b.n	15d72 <_impl_k_poll+0xfa>
		__ASSERT(event->signal, "invalid poll signal\n");
   15dca:	6920      	ldr	r0, [r4, #16]
   15dcc:	b948      	cbnz	r0, 15de2 <_impl_k_poll+0x16a>
   15dce:	2372      	movs	r3, #114	; 0x72
   15dd0:	4a24      	ldr	r2, [pc, #144]	; (15e64 <_impl_k_poll+0x1ec>)
   15dd2:	4931      	ldr	r1, [pc, #196]	; (15e98 <_impl_k_poll+0x220>)
   15dd4:	4825      	ldr	r0, [pc, #148]	; (15e6c <_impl_k_poll+0x1f4>)
   15dd6:	f7eb f8d9 	bl	f8c <printk>
   15dda:	4830      	ldr	r0, [pc, #192]	; (15e9c <_impl_k_poll+0x224>)
   15ddc:	f7eb f8d6 	bl	f8c <printk>
   15de0:	e7fe      	b.n	15de0 <_impl_k_poll+0x168>
		add_event(&event->signal->poll_events, event, poller);
   15de2:	466a      	mov	r2, sp
   15de4:	4621      	mov	r1, r4
   15de6:	e7c4      	b.n	15d72 <_impl_k_poll+0xfa>
		__ASSERT(0, "invalid event type\n");
   15de8:	2379      	movs	r3, #121	; 0x79
   15dea:	4a1e      	ldr	r2, [pc, #120]	; (15e64 <_impl_k_poll+0x1ec>)
   15dec:	4924      	ldr	r1, [pc, #144]	; (15e80 <_impl_k_poll+0x208>)
   15dee:	481f      	ldr	r0, [pc, #124]	; (15e6c <_impl_k_poll+0x1f4>)
   15df0:	f7eb f8cc 	bl	f8c <printk>
   15df4:	482a      	ldr	r0, [pc, #168]	; (15ea0 <_impl_k_poll+0x228>)
   15df6:	f7eb f8c9 	bl	f8c <printk>
   15dfa:	e7fe      	b.n	15dfa <_impl_k_poll+0x182>
	poller.is_polling = 0;
   15dfc:	2300      	movs	r3, #0
   15dfe:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   15e00:	f1b8 0f00 	cmp.w	r8, #0
   15e04:	d107      	bne.n	15e16 <_impl_k_poll+0x19e>
   15e06:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   15e0a:	f06f 040a 	mvn.w	r4, #10
}
   15e0e:	4620      	mov	r0, r4
   15e10:	b005      	add	sp, #20
   15e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   15e16:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   15e18:	4642      	mov	r2, r8
   15e1a:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   15e1c:	9102      	str	r1, [sp, #8]
   15e1e:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   15e20:	f7ff f8fc 	bl	1501c <_pend_current_thread>
   15e24:	4604      	mov	r4, r0
	__asm__ volatile(
   15e26:	f04f 0320 	mov.w	r3, #32
   15e2a:	f3ef 8611 	mrs	r6, BASEPRI
   15e2e:	f383 8811 	msr	BASEPRI, r3
   15e32:	e7b2      	b.n	15d9a <_impl_k_poll+0x122>
	__ASSERT(!_is_in_isr(), "");
   15e34:	23b1      	movs	r3, #177	; 0xb1
   15e36:	4a0b      	ldr	r2, [pc, #44]	; (15e64 <_impl_k_poll+0x1ec>)
   15e38:	491a      	ldr	r1, [pc, #104]	; (15ea4 <_impl_k_poll+0x22c>)
   15e3a:	480c      	ldr	r0, [pc, #48]	; (15e6c <_impl_k_poll+0x1f4>)
   15e3c:	f7eb f8a6 	bl	f8c <printk>
   15e40:	4819      	ldr	r0, [pc, #100]	; (15ea8 <_impl_k_poll+0x230>)
   15e42:	f7eb f8a3 	bl	f8c <printk>
   15e46:	e7fe      	b.n	15e46 <_impl_k_poll+0x1ce>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   15e48:	2202      	movs	r2, #2
	event->state |= state;
   15e4a:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   15e4e:	f362 1307 	bfi	r3, r2, #4, #4
   15e52:	7363      	strb	r3, [r4, #13]
	event->poller = NULL;
   15e54:	f8c4 a008 	str.w	sl, [r4, #8]
			poller.is_polling = 0;
   15e58:	f8cd a004 	str.w	sl, [sp, #4]
   15e5c:	e78e      	b.n	15d7c <_impl_k_poll+0x104>
   15e5e:	bf00      	nop
   15e60:	e000ed00 	.word	0xe000ed00
   15e64:	0001b19b 	.word	0x0001b19b
   15e68:	0001b053 	.word	0x0001b053
   15e6c:	0001619c 	.word	0x0001619c
   15e70:	0001b05a 	.word	0x0001b05a
   15e74:	0001b067 	.word	0x0001b067
   15e78:	0001b076 	.word	0x0001b076
   15e7c:	20001948 	.word	0x20001948
   15e80:	0001af5d 	.word	0x0001af5d
   15e84:	0001b083 	.word	0x0001b083
   15e88:	0001b09e 	.word	0x0001b09e
   15e8c:	0001b0a9 	.word	0x0001b0a9
   15e90:	0001b0bc 	.word	0x0001b0bc
   15e94:	0001b0c9 	.word	0x0001b0c9
   15e98:	0001b0d8 	.word	0x0001b0d8
   15e9c:	0001b0e6 	.word	0x0001b0e6
   15ea0:	0001b0fb 	.word	0x0001b0fb
   15ea4:	0001aefd 	.word	0x0001aefd
   15ea8:	000161ba 	.word	0x000161ba

00015eac <_handle_obj_poll_events>:
	return list->head == list;
   15eac:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   15eae:	4298      	cmp	r0, r3
   15eb0:	d007      	beq.n	15ec2 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   15eb2:	e893 0005 	ldmia.w	r3, {r0, r2}
   15eb6:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   15eb8:	6818      	ldr	r0, [r3, #0]
   15eba:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   15ebc:	4618      	mov	r0, r3
   15ebe:	f7ff bdbf 	b.w	15a40 <signal_poll_event>
   15ec2:	4770      	bx	lr

00015ec4 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   15ec4:	b538      	push	{r3, r4, r5, lr}
   15ec6:	f04f 0320 	mov.w	r3, #32
   15eca:	f3ef 8511 	mrs	r5, BASEPRI
   15ece:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15ed2:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   15ed4:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   15ed6:	4298      	cmp	r0, r3
	signal->signaled = 1;
   15ed8:	f04f 0101 	mov.w	r1, #1
   15edc:	6081      	str	r1, [r0, #8]
   15ede:	d00d      	beq.n	15efc <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   15ee0:	e893 0005 	ldmia.w	r3, {r0, r2}
   15ee4:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   15ee6:	6818      	ldr	r0, [r3, #0]
   15ee8:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15eea:	4618      	mov	r0, r3
   15eec:	f7ff fda8 	bl	15a40 <signal_poll_event>
   15ef0:	4604      	mov	r4, r0

	_reschedule(key);
   15ef2:	4628      	mov	r0, r5
   15ef4:	f7fe feca 	bl	14c8c <_reschedule>
	return rc;
}
   15ef8:	4620      	mov	r0, r4
   15efa:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15efc:	f385 8811 	msr	BASEPRI, r5
		return 0;
   15f00:	2400      	movs	r4, #0
   15f02:	e7f9      	b.n	15ef8 <_impl_k_poll_signal+0x34>

00015f04 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   15f04:	4770      	bx	lr
