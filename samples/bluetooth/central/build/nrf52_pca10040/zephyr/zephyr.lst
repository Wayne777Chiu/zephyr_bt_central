
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	200026f8 	.word	0x200026f8

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001ae1 	.word	0x00001ae1
       8:	00001b35 	.word	0x00001b35
       c:	00001979 	.word	0x00001979
      10:	00001979 	.word	0x00001979
      14:	00001979 	.word	0x00001979
      18:	00001979 	.word	0x00001979
      1c:	00001979 	.word	0x00001979
      20:	00001979 	.word	0x00001979
      24:	00001979 	.word	0x00001979
      28:	00001979 	.word	0x00001979
      2c:	00001581 	.word	0x00001581
      30:	00001979 	.word	0x00001979
      34:	00001979 	.word	0x00001979
      38:	0000153d 	.word	0x0000153d
      3c:	00001979 	.word	0x00001979

00000040 <_irq_vector_table>:
      40:	00001aa5 0000ed07 00001aa5 00001aa5     ................
      50:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      60:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      70:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      80:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      90:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      a0:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      b0:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      c0:	00001aa5 00001aa5 00001aa5 00001aa5     ................
      d0:	00001aa5 00001aa5 00001aa5              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001279 00000000 000018f1     ....y...........
      ec:	00000000 000018f1 00000000 000018f1     ................
      fc:	00000000 000018f1 00000000 000018f1     ................
     10c:	00000000 00010a41 00000000 000018f1     ....A...........
     11c:	00000000 000018f1 00000000 000018f1     ................
     12c:	00000000 000018f1 00000000 0000eccd     ................
     13c:	00000000 000018f1 200038c8 00010d45     .........8. E...
     14c:	00000000 000018f1 00000000 000018f1     ................
     15c:	00000000 000018f1 00000000 000013a1     ................
     16c:	00000000 000018f1 00000000 000018f1     ................
     17c:	00000000 000018f1 00000000 000018f1     ................
     18c:	00000000 000018f1 00000000 000018f1     ................
     19c:	00000000 0000ed01 00000000 000018f1     ................
     1ac:	00000000 000018f1 00000000 000018f1     ................
     1bc:	00000000 000018f1 00000000 000018f1     ................
     1cc:	00000000 000018f1 00000000 000018f1     ................
     1dc:	00000000 000018f1 00000000 000018f1     ................
     1ec:	00000000 000018f1 00000000 000018f1     ................
     1fc:	00000000 000018f1 00000000 000018f1     ................
     20c:	00000000 000018f1                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb3a 	bl	1be0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	000122a1 	.word	0x000122a1
     5b0:	000122ca 	.word	0x000122ca
     5b4:	000122a8 	.word	0x000122a8
     5b8:	000122af 	.word	0x000122af
     5bc:	000122b9 	.word	0x000122b9
     5c0:	000122c3 	.word	0x000122c3

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f003 fa37 	bl	3a3e <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f003 fad5 	bl	3ba8 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	000122ed 	.word	0x000122ed
     604:	20000000 	.word	0x20000000
     608:	0001230b 	.word	0x0001230b

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 fa10 	bl	3a3e <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 fa02 	bl	3a38 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f002 fe34 	bl	32b4 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00012336 	.word	0x00012336
     664:	0001226c 	.word	0x0001226c
     668:	00000671 	.word	0x00000671
     66c:	00012354 	.word	0x00012354

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f002 fe5f 	bl	3358 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 f9cb 	bl	3a44 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	0001231a 	.word	0x0001231a
     6bc:	00012272 	.word	0x00012272

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f002 fda6 	bl	3214 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f002 fef6 	bl	34d0 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f002 fdde 	bl	32b4 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00012377 	.word	0x00012377
     70c:	00012397 	.word	0x00012397
     710:	20003438 	.word	0x20003438
     714:	0001227a 	.word	0x0001227a
     718:	00000671 	.word	0x00000671
     71c:	00012354 	.word	0x00012354
     720:	000123ae 	.word	0x000123ae

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	2000346c 	.word	0x2000346c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f010 ff94 	bl	117d0 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d6 	bl	1a58 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003470 	.word	0x20003470

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003470 	.word	0x20003470

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr

00000fe2 <syslog_hook_default>:
 */

#include <logging/sys_log.h>

void syslog_hook_default(const char *fmt, ...)
{
     fe2:	b40f      	push	{r0, r1, r2, r3}
	(void)(fmt);  /* Prevent warning about unused argument */
}
     fe4:	b004      	add	sp, #16
     fe6:	4770      	bx	lr

00000fe8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fea:	4c11      	ldr	r4, [pc, #68]	; (1030 <sys_rand32_get+0x48>)
     fec:	f3bf 8f5b 	dmb	ish
     ff0:	6820      	ldr	r0, [r4, #0]
     ff2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff6:	b960      	cbnz	r0, 1012 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff8:	480e      	ldr	r0, [pc, #56]	; (1034 <sys_rand32_get+0x4c>)
     ffa:	f00f ff11 	bl	10e20 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffe:	f3bf 8f5b 	dmb	ish
    1002:	e854 3f00 	ldrex	r3, [r4]
    1006:	e844 0200 	strex	r2, r0, [r4]
    100a:	2a00      	cmp	r2, #0
    100c:	d1f9      	bne.n	1002 <sys_rand32_get+0x1a>
    100e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1012:	6843      	ldr	r3, [r0, #4]
    1014:	2204      	movs	r2, #4
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	eb0d 0102 	add.w	r1, sp, r2
    101c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101e:	2800      	cmp	r0, #0
    1020:	da02      	bge.n	1028 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1022:	f000 fa37 	bl	1494 <_timer_cycle_get_32>
    1026:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1028:	9801      	ldr	r0, [sp, #4]
    102a:	b002      	add	sp, #8
    102c:	bd10      	pop	{r4, pc}
    102e:	bf00      	nop
    1030:	20000004 	.word	0x20000004
    1034:	000123dc 	.word	0x000123dc

00001038 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1038:	280a      	cmp	r0, #10
{
    103a:	b538      	push	{r3, r4, r5, lr}
    103c:	4604      	mov	r4, r0
    103e:	4d07      	ldr	r5, [pc, #28]	; (105c <console_out+0x24>)
	if ('\n' == c) {
    1040:	d104      	bne.n	104c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1042:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1044:	6843      	ldr	r3, [r0, #4]
    1046:	210d      	movs	r1, #13
    1048:	685b      	ldr	r3, [r3, #4]
    104a:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    104c:	6828      	ldr	r0, [r5, #0]
    104e:	6843      	ldr	r3, [r0, #4]
    1050:	b2e1      	uxtb	r1, r4
    1052:	685b      	ldr	r3, [r3, #4]
    1054:	4798      	blx	r3

	return c;
}
    1056:	4620      	mov	r0, r4
    1058:	bd38      	pop	{r3, r4, r5, pc}
    105a:	bf00      	nop
    105c:	20000008 	.word	0x20000008

00001060 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1060:	4801      	ldr	r0, [pc, #4]	; (1068 <uart_console_hook_install+0x8>)
    1062:	f7ff be4d 	b.w	d00 <__printk_hook_install>
    1066:	bf00      	nop
    1068:	00001039 	.word	0x00001039

0000106c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    106c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106e:	4804      	ldr	r0, [pc, #16]	; (1080 <uart_console_init+0x14>)
    1070:	f00f fed6 	bl	10e20 <device_get_binding>
    1074:	4b03      	ldr	r3, [pc, #12]	; (1084 <uart_console_init+0x18>)
    1076:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1078:	f7ff fff2 	bl	1060 <uart_console_hook_install>

	return 0;
}
    107c:	2000      	movs	r0, #0
    107e:	bd08      	pop	{r3, pc}
    1080:	000123e6 	.word	0x000123e6
    1084:	20000008 	.word	0x20000008

00001088 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1088:	b510      	push	{r4, lr}
	__asm__ volatile(
    108a:	f04f 0320 	mov.w	r3, #32
    108e:	f3ef 8211 	mrs	r2, BASEPRI
    1092:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1096:	4c11      	ldr	r4, [pc, #68]	; (10dc <_m16src_stop+0x54>)
    1098:	7823      	ldrb	r3, [r4, #0]
    109a:	b923      	cbnz	r3, 10a6 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    109c:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10a0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a4:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a6:	3b01      	subs	r3, #1
    10a8:	b2db      	uxtb	r3, r3
    10aa:	7023      	strb	r3, [r4, #0]
    10ac:	b123      	cbz	r3, 10b8 <_m16src_stop+0x30>
    10ae:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10b2:	f06f 000f 	mvn.w	r0, #15
    10b6:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b8:	4b09      	ldr	r3, [pc, #36]	; (10e0 <_m16src_stop+0x58>)
    10ba:	7818      	ldrb	r0, [r3, #0]
    10bc:	2101      	movs	r1, #1
    10be:	b128      	cbz	r0, 10cc <_m16src_stop+0x44>
		m16src_ref++;
    10c0:	7021      	strb	r1, [r4, #0]
    10c2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c6:	f06f 000a 	mvn.w	r0, #10
    10ca:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10cc:	7019      	strb	r1, [r3, #0]
    10ce:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d6:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d8:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10da:	bd10      	pop	{r4, pc}
    10dc:	2000000e 	.word	0x2000000e
    10e0:	2000000d 	.word	0x2000000d

000010e4 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e6:	2200      	movs	r2, #0
    10e8:	4610      	mov	r0, r2
    10ea:	2101      	movs	r1, #1
    10ec:	f000 fbe8 	bl	18c0 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10f0:	2000      	movs	r0, #0
    10f2:	f000 fbb3 	bl	185c <_arch_irq_enable>

	return 0;
}
    10f6:	2000      	movs	r0, #0
    10f8:	bd08      	pop	{r3, pc}
	...

000010fc <_m16src_start>:
{
    10fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fe:	f04f 0220 	mov.w	r2, #32
    1102:	f3ef 8311 	mrs	r3, BASEPRI
    1106:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    110a:	4a25      	ldr	r2, [pc, #148]	; (11a0 <_m16src_start+0xa4>)
    110c:	7810      	ldrb	r0, [r2, #0]
    110e:	1c44      	adds	r4, r0, #1
    1110:	7014      	strb	r4, [r2, #0]
    1112:	b160      	cbz	r0, 112e <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1114:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    111c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1120:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1124:	bf14      	ite	ne
    1126:	2000      	movne	r0, #0
    1128:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112e:	4d1d      	ldr	r5, [pc, #116]	; (11a4 <_m16src_start+0xa8>)
    1130:	782f      	ldrb	r7, [r5, #0]
    1132:	b12f      	cbz	r7, 1140 <_m16src_start+0x44>
		m16src_ref--;
    1134:	7010      	strb	r0, [r2, #0]
    1136:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    113a:	f06f 000a 	mvn.w	r0, #10
    113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1140:	2601      	movs	r6, #1
    1142:	702e      	strb	r6, [r5, #0]
    1144:	f383 8811 	msr	BASEPRI, r3
    1148:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    114c:	b319      	cbz	r1, 1196 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114e:	4638      	mov	r0, r7
    1150:	f000 fb94 	bl	187c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1154:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1158:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    115c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1160:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1162:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1166:	b192      	cbz	r2, 118e <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1168:	2200      	movs	r2, #0
    116a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116e:	4a0e      	ldr	r2, [pc, #56]	; (11a8 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1170:	f013 0f01 	tst.w	r3, #1
    1174:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1178:	bf08      	it	eq
    117a:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117e:	2000      	movs	r0, #0
    1180:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1184:	f000 fb6a 	bl	185c <_arch_irq_enable>
	m16src_grd = 0;
    1188:	2300      	movs	r3, #0
    118a:	702b      	strb	r3, [r5, #0]
    118c:	e7c4      	b.n	1118 <_m16src_start+0x1c>
			__WFE();
    118e:	bf20      	wfe
			__SEV();
    1190:	bf40      	sev
			__WFE();
    1192:	bf20      	wfe
    1194:	e7e5      	b.n	1162 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1196:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    119a:	6026      	str	r6, [r4, #0]
    119c:	e7f4      	b.n	1188 <_m16src_start+0x8c>
    119e:	bf00      	nop
    11a0:	2000000e 	.word	0x2000000e
    11a4:	2000000d 	.word	0x2000000d
    11a8:	e000e100 	.word	0xe000e100

000011ac <_k32src_start>:
{
    11ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ae:	4606      	mov	r6, r0
    11b0:	460c      	mov	r4, r1
	__asm__ volatile(
    11b2:	f04f 0220 	mov.w	r2, #32
    11b6:	f3ef 8311 	mrs	r3, BASEPRI
    11ba:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11be:	4a2c      	ldr	r2, [pc, #176]	; (1270 <_k32src_start+0xc4>)
    11c0:	7815      	ldrb	r5, [r2, #0]
    11c2:	b165      	cbz	r5, 11de <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c4:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d4:	bf0c      	ite	eq
    11d6:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11da:	2000      	movne	r0, #0
    11dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11de:	2701      	movs	r7, #1
    11e0:	7017      	strb	r7, [r2, #0]
    11e2:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e6:	4628      	mov	r0, r5
    11e8:	f000 fb48 	bl	187c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f0:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11f2:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fe:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1202:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1204:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1208:	b371      	cbz	r1, 1268 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    120a:	0792      	lsls	r2, r2, #30
    120c:	4f19      	ldr	r7, [pc, #100]	; (1274 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120e:	bf58      	it	pl
    1210:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1212:	f04f 0100 	mov.w	r1, #0
    1216:	f04f 0501 	mov.w	r5, #1
    121a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121e:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1222:	bf58      	it	pl
    1224:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1228:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    122c:	f000 fb16 	bl	185c <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1234:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1236:	2218      	movs	r2, #24
    1238:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    123c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1240:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1244:	f014 0103 	ands.w	r1, r4, #3
    1248:	d1be      	bne.n	11c8 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    124a:	2010      	movs	r0, #16
    124c:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1250:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1254:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1256:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    125a:	f7ff ff4f 	bl	10fc <_m16src_start>
		if (!err) {
    125e:	2800      	cmp	r0, #0
    1260:	d1b2      	bne.n	11c8 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1262:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1266:	e7af      	b.n	11c8 <_k32src_start+0x1c>
		__WFE();
    1268:	bf20      	wfe
		__SEV();
    126a:	bf40      	sev
		__WFE();
    126c:	bf20      	wfe
    126e:	e7c9      	b.n	1204 <_k32src_start+0x58>
    1270:	2000000c 	.word	0x2000000c
    1274:	e000e100 	.word	0xe000e100

00001278 <_power_clock_isr>:
{
    1278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1280:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1284:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1288:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    128c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1290:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1294:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1298:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    129c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    12a0:	f1be 0f00 	cmp.w	lr, #0
    12a4:	d003      	beq.n	12ae <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a6:	f04f 0e00 	mov.w	lr, #0
    12aa:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12ae:	b127      	cbz	r7, 12ba <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b4:	2700      	movs	r7, #0
    12b6:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12ba:	b13a      	cbz	r2, 12cc <_power_clock_isr+0x54>
    12bc:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12be:	bf41      	itttt	mi
    12c0:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c4:	2201      	movmi	r2, #1
    12c6:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12ca:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12cc:	b120      	cbz	r0, 12d8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12d2:	2200      	movs	r2, #0
    12d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d8:	b149      	cbz	r1, 12ee <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12de:	2100      	movs	r1, #0
    12e0:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e4:	4628      	mov	r0, r5
    12e6:	f7ff fecf 	bl	1088 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12ea:	2301      	movs	r3, #1
    12ec:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ee:	b176      	cbz	r6, 130e <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f4:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f6:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12fc:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fe:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1302:	f7ff fefb 	bl	10fc <_m16src_start>
		if (!err) {
    1306:	b910      	cbnz	r0, 130e <_power_clock_isr+0x96>
    1308:	4b01      	ldr	r3, [pc, #4]	; (1310 <_power_clock_isr+0x98>)
    130a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1310:	e000e100 	.word	0xe000e100

00001314 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1314:	4b08      	ldr	r3, [pc, #32]	; (1338 <rtc_compare_set+0x24>)
    1316:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    131a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131e:	1ac0      	subs	r0, r0, r3
    1320:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1324:	4b05      	ldr	r3, [pc, #20]	; (133c <rtc_compare_set+0x28>)
    1326:	3802      	subs	r0, #2
    1328:	4298      	cmp	r0, r3
    132a:	bf82      	ittt	hi
    132c:	4b04      	ldrhi	r3, [pc, #16]	; (1340 <rtc_compare_set+0x2c>)
    132e:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1332:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1336:	4770      	bx	lr
    1338:	40011000 	.word	0x40011000
    133c:	007ffffd 	.word	0x007ffffd
    1340:	e000e100 	.word	0xe000e100

00001344 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1344:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1346:	4b11      	ldr	r3, [pc, #68]	; (138c <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1348:	4c11      	ldr	r4, [pc, #68]	; (1390 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    134a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	4d10      	ldr	r5, [pc, #64]	; (1394 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1354:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    135a:	4298      	cmp	r0, r3
    135c:	d30f      	bcc.n	137e <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135e:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1362:	490d      	ldr	r1, [pc, #52]	; (1398 <rtc_announce_set_next+0x54>)
    1364:	6809      	ldr	r1, [r1, #0]
    1366:	4288      	cmp	r0, r1
    1368:	bf28      	it	cs
    136a:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    136c:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    1370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1374:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <rtc_announce_set_next+0x58>)
    1378:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    137a:	f010 faa1 	bl	118c0 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137e:	6820      	ldr	r0, [r4, #0]
    1380:	682b      	ldr	r3, [r5, #0]
    1382:	4418      	add	r0, r3
}
    1384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1388:	f7ff bfc4 	b.w	1314 <rtc_compare_set>
    138c:	40011000 	.word	0x40011000
    1390:	20000014 	.word	0x20000014
    1394:	20003888 	.word	0x20003888
    1398:	20000010 	.word	0x20000010
    139c:	20003884 	.word	0x20003884

000013a0 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    13a0:	4b02      	ldr	r3, [pc, #8]	; (13ac <rtc1_nrf5_isr+0xc>)
    13a2:	2200      	movs	r2, #0
    13a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a8:	f7ff bfcc 	b.w	1344 <rtc_announce_set_next>
    13ac:	40011000 	.word	0x40011000

000013b0 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13b0:	1e03      	subs	r3, r0, #0
    13b2:	4a0a      	ldr	r2, [pc, #40]	; (13dc <_timer_idle_enter+0x2c>)
    13b4:	480a      	ldr	r0, [pc, #40]	; (13e0 <_timer_idle_enter+0x30>)
    13b6:	db04      	blt.n	13c2 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b8:	6811      	ldr	r1, [r2, #0]
    13ba:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13be:	428b      	cmp	r3, r1
    13c0:	dd02      	ble.n	13c8 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13c2:	6813      	ldr	r3, [r2, #0]
    13c4:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c8:	6810      	ldr	r0, [r2, #0]
    13ca:	4a06      	ldr	r2, [pc, #24]	; (13e4 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13cc:	4906      	ldr	r1, [pc, #24]	; (13e8 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13d0:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13d2:	fb00 2003 	mla	r0, r0, r3, r2
    13d6:	f7ff bf9d 	b.w	1314 <rtc_compare_set>
    13da:	bf00      	nop
    13dc:	20003888 	.word	0x20003888
    13e0:	007fffff 	.word	0x007fffff
    13e4:	20000014 	.word	0x20000014
    13e8:	20000010 	.word	0x20000010

000013ec <_timer_idle_exit>:
{
    13ec:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <_timer_idle_exit+0x20>)
    13f0:	2200      	movs	r2, #0
    13f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <_timer_idle_exit+0x24>)
    13f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1400:	f7ff ffa0 	bl	1344 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1404:	4b03      	ldr	r3, [pc, #12]	; (1414 <_timer_idle_exit+0x28>)
    1406:	2201      	movs	r2, #1
    1408:	601a      	str	r2, [r3, #0]
    140a:	bd08      	pop	{r3, pc}
    140c:	40011000 	.word	0x40011000
    1410:	e000e100 	.word	0xe000e100
    1414:	20000010 	.word	0x20000010

00001418 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1418:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    141a:	4818      	ldr	r0, [pc, #96]	; (147c <_sys_clock_driver_init+0x64>)
    141c:	f00f fd00 	bl	10e20 <device_get_binding>
	if (!clock) {
    1420:	b348      	cbz	r0, 1476 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1422:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1424:	4d16      	ldr	r5, [pc, #88]	; (1480 <_sys_clock_driver_init+0x68>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	2101      	movs	r1, #1
    142a:	4798      	blx	r3
	rtc_past = 0;
    142c:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x6c>)
    142e:	2400      	movs	r4, #0
    1430:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1432:	4b15      	ldr	r3, [pc, #84]	; (1488 <_sys_clock_driver_init+0x70>)
    1434:	2601      	movs	r6, #1
    1436:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1438:	4b14      	ldr	r3, [pc, #80]	; (148c <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    143a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1448:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    144c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1452:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    145a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145e:	4631      	mov	r1, r6
    1460:	4622      	mov	r2, r4
    1462:	2011      	movs	r0, #17
    1464:	f000 fa2c 	bl	18c0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1468:	2011      	movs	r0, #17
    146a:	f000 f9f7 	bl	185c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1470:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1472:	602e      	str	r6, [r5, #0]
	return 0;
    1474:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    147a:	bd70      	pop	{r4, r5, r6, pc}
    147c:	00012408 	.word	0x00012408
    1480:	40011000 	.word	0x40011000
    1484:	20000014 	.word	0x20000014
    1488:	20000010 	.word	0x20000010
    148c:	20003888 	.word	0x20003888
    1490:	e000e100 	.word	0xe000e100

00001494 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1494:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <_timer_cycle_get_32+0x2c>)
{
    1496:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1498:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    149c:	4d09      	ldr	r5, [pc, #36]	; (14c4 <_timer_cycle_get_32+0x30>)
    149e:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    14a2:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a6:	42a3      	cmp	r3, r4
    14a8:	d107      	bne.n	14ba <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14aa:	4a07      	ldr	r2, [pc, #28]	; (14c8 <_timer_cycle_get_32+0x34>)
    14ac:	6812      	ldr	r2, [r2, #0]
    14ae:	4350      	muls	r0, r2
    14b0:	1a1b      	subs	r3, r3, r0
    14b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b6:	4418      	add	r0, r3
    14b8:	bd30      	pop	{r4, r5, pc}
    14ba:	4623      	mov	r3, r4
    14bc:	e7ef      	b.n	149e <_timer_cycle_get_32+0xa>
    14be:	bf00      	nop
    14c0:	40011000 	.word	0x40011000
    14c4:	20001720 	.word	0x20001720
    14c8:	20003888 	.word	0x20003888

000014cc <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14cc:	4807      	ldr	r0, [pc, #28]	; (14ec <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ce:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14d0:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14d2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d4:	d008      	beq.n	14e8 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d6:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d8:	f010 f92c 	bl	11734 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14dc:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14e0:	4903      	ldr	r1, [pc, #12]	; (14f0 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e6:	600a      	str	r2, [r1, #0]

000014e8 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e8:	4770      	bx	lr
    14ea:	0000      	.short	0x0000
    ldr r0, =_kernel
    14ec:	200016e8 	.word	0x200016e8
    ldr r1, =_SCS_ICSR
    14f0:	e000ed04 	.word	0xe000ed04

000014f4 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f4:	4804      	ldr	r0, [pc, #16]	; (1508 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f6:	2300      	movs	r3, #0
    14f8:	2120      	movs	r1, #32
    14fa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14fc:	3301      	adds	r3, #1
    14fe:	2b27      	cmp	r3, #39	; 0x27
    1500:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1504:	d1f9      	bne.n	14fa <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1506:	4770      	bx	lr
    1508:	e000e100 	.word	0xe000e100

0000150c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    150c:	4a08      	ldr	r2, [pc, #32]	; (1530 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	4909      	ldr	r1, [pc, #36]	; (1534 <__swap+0x28>)
	_current->arch.basepri = key;
    1510:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1512:	6809      	ldr	r1, [r1, #0]
    1514:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	4908      	ldr	r1, [pc, #32]	; (1538 <__swap+0x2c>)
	_current->arch.basepri = key;
    1518:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    151a:	684b      	ldr	r3, [r1, #4]
    151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1520:	604b      	str	r3, [r1, #4]
    1522:	2300      	movs	r3, #0
    1524:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1528:	6893      	ldr	r3, [r2, #8]
}
    152a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    152c:	4770      	bx	lr
    152e:	bf00      	nop
    1530:	200016e8 	.word	0x200016e8
    1534:	00012adc 	.word	0x00012adc
    1538:	e000ed00 	.word	0xe000ed00

0000153c <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    153c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1542:	490d      	ldr	r1, [pc, #52]	; (1578 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1544:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1546:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1548:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    154a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1552:	4f0a      	ldr	r7, [pc, #40]	; (157c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1554:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1558:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    155a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    155c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155e:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1560:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1562:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1564:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1568:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    156c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    1570:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1574:	4770      	bx	lr
    1576:	0000      	.short	0x0000
    ldr r1, =_kernel
    1578:	200016e8 	.word	0x200016e8
    ldr v4, =_SCS_ICSR
    157c:	e000ed04 	.word	0xe000ed04

00001580 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1580:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1584:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1586:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    158a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    1590:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1594:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1598:	2902      	cmp	r1, #2
    beq _oops
    159a:	d0ff      	beq.n	159c <_oops>

0000159c <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    159c:	b500      	push	{lr}
    blx _do_kernel_oops
    159e:	f000 fa2b 	bl	19f8 <_do_kernel_oops>
    pop {pc}
    15a2:	bd00      	pop	{pc}

000015a4 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a4:	b510      	push	{r4, lr}
    15a6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a8:	f010 f912 	bl	117d0 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15ac:	6822      	ldr	r2, [r4, #0]
    15ae:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b4:	4801      	ldr	r0, [pc, #4]	; (15bc <_FaultThreadShow.isra.2+0x18>)
    15b6:	f7ff bce9 	b.w	f8c <printk>
    15ba:	bf00      	nop
    15bc:	00012561 	.word	0x00012561

000015c0 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15c0:	b538      	push	{r3, r4, r5, lr}
    15c2:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c4:	481a      	ldr	r0, [pc, #104]	; (1630 <_MpuFault+0x70>)
{
    15c6:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c8:	f7ff fce0 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15cc:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d0:	4c18      	ldr	r4, [pc, #96]	; (1634 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15d2:	f7ff ffe7 	bl	15a4 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d8:	06d9      	lsls	r1, r3, #27
    15da:	d502      	bpl.n	15e2 <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15dc:	4816      	ldr	r0, [pc, #88]	; (1638 <_MpuFault+0x78>)
    15de:	f7ff fcd5 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e4:	071a      	lsls	r2, r3, #28
    15e6:	d502      	bpl.n	15ee <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e8:	4814      	ldr	r0, [pc, #80]	; (163c <_MpuFault+0x7c>)
    15ea:	f7ff fccf 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15f0:	079b      	lsls	r3, r3, #30
    15f2:	d50e      	bpl.n	1612 <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f4:	4812      	ldr	r0, [pc, #72]	; (1640 <_MpuFault+0x80>)
    15f6:	f7ff fcc9 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15fa:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fe:	0618      	lsls	r0, r3, #24
    1600:	d507      	bpl.n	1612 <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    1602:	4810      	ldr	r0, [pc, #64]	; (1644 <_MpuFault+0x84>)
    1604:	f7ff fcc2 	bl	f8c <printk>
			if (fromHardFault) {
    1608:	b11d      	cbz	r5, 1612 <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    160a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    160c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1610:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1612:	4c08      	ldr	r4, [pc, #32]	; (1634 <_MpuFault+0x74>)
    1614:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1616:	07d2      	lsls	r2, r2, #31
    1618:	d502      	bpl.n	1620 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    161a:	480b      	ldr	r0, [pc, #44]	; (1648 <_MpuFault+0x88>)
    161c:	f7ff fcb6 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1622:	069b      	lsls	r3, r3, #26
    1624:	d502      	bpl.n	162c <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1626:	4809      	ldr	r0, [pc, #36]	; (164c <_MpuFault+0x8c>)
    1628:	f7ff fcb0 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    162c:	2000      	movs	r0, #0
    162e:	bd38      	pop	{r3, r4, r5, pc}
    1630:	000125ab 	.word	0x000125ab
    1634:	e000ed00 	.word	0xe000ed00
    1638:	000125c2 	.word	0x000125c2
    163c:	000125d4 	.word	0x000125d4
    1640:	000125e8 	.word	0x000125e8
    1644:	00012601 	.word	0x00012601
    1648:	00012612 	.word	0x00012612
    164c:	00012632 	.word	0x00012632

00001650 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1650:	b510      	push	{r4, lr}
    1652:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1654:	481a      	ldr	r0, [pc, #104]	; (16c0 <_UsageFault+0x70>)
    1656:	f7ff fc99 	bl	f8c <printk>

	_FaultThreadShow(esf);
    165a:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165e:	4c19      	ldr	r4, [pc, #100]	; (16c4 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1660:	f7ff ffa0 	bl	15a4 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1664:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1666:	019a      	lsls	r2, r3, #6
    1668:	d502      	bpl.n	1670 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    166a:	4817      	ldr	r0, [pc, #92]	; (16c8 <_UsageFault+0x78>)
    166c:	f7ff fc8e 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1672:	01db      	lsls	r3, r3, #7
    1674:	d502      	bpl.n	167c <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1676:	4815      	ldr	r0, [pc, #84]	; (16cc <_UsageFault+0x7c>)
    1678:	f7ff fc88 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    167c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167e:	0318      	lsls	r0, r3, #12
    1680:	d502      	bpl.n	1688 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    1682:	4813      	ldr	r0, [pc, #76]	; (16d0 <_UsageFault+0x80>)
    1684:	f7ff fc82 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1688:	4c0e      	ldr	r4, [pc, #56]	; (16c4 <_UsageFault+0x74>)
    168a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    168c:	0359      	lsls	r1, r3, #13
    168e:	d502      	bpl.n	1696 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    1690:	4810      	ldr	r0, [pc, #64]	; (16d4 <_UsageFault+0x84>)
    1692:	f7ff fc7b 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1698:	039a      	lsls	r2, r3, #14
    169a:	d502      	bpl.n	16a2 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    169c:	480e      	ldr	r0, [pc, #56]	; (16d8 <_UsageFault+0x88>)
    169e:	f7ff fc75 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    16a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a4:	03db      	lsls	r3, r3, #15
    16a6:	d502      	bpl.n	16ae <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a8:	480c      	ldr	r0, [pc, #48]	; (16dc <_UsageFault+0x8c>)
    16aa:	f7ff fc6f 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16ae:	4a05      	ldr	r2, [pc, #20]	; (16c4 <_UsageFault+0x74>)
    16b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16b2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16ba:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16bc:	2000      	movs	r0, #0
    16be:	bd10      	pop	{r4, pc}
    16c0:	00012662 	.word	0x00012662
    16c4:	e000ed00 	.word	0xe000ed00
    16c8:	0001267b 	.word	0x0001267b
    16cc:	0001268f 	.word	0x0001268f
    16d0:	000126aa 	.word	0x000126aa
    16d4:	000126c9 	.word	0x000126c9
    16d8:	000126ef 	.word	0x000126ef
    16dc:	0001270a 	.word	0x0001270a

000016e0 <_BusFault>:
{
    16e0:	b538      	push	{r3, r4, r5, lr}
    16e2:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	481d      	ldr	r0, [pc, #116]	; (175c <_BusFault+0x7c>)
{
    16e6:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e8:	f7ff fc50 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16ec:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f0:	4c1b      	ldr	r4, [pc, #108]	; (1760 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16f2:	f7ff ff57 	bl	15a4 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f8:	04d8      	lsls	r0, r3, #19
    16fa:	d504      	bpl.n	1706 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16fc:	4819      	ldr	r0, [pc, #100]	; (1764 <_BusFault+0x84>)
}
    16fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    1702:	f7ff bc43 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1708:	0519      	lsls	r1, r3, #20
    170a:	d501      	bpl.n	1710 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    170c:	4816      	ldr	r0, [pc, #88]	; (1768 <_BusFault+0x88>)
    170e:	e7f6      	b.n	16fe <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1712:	059a      	lsls	r2, r3, #22
    1714:	d514      	bpl.n	1740 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1716:	4815      	ldr	r0, [pc, #84]	; (176c <_BusFault+0x8c>)
    1718:	f7ff fc38 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    171c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1720:	041b      	lsls	r3, r3, #16
    1722:	d507      	bpl.n	1734 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1724:	4812      	ldr	r0, [pc, #72]	; (1770 <_BusFault+0x90>)
    1726:	f7ff fc31 	bl	f8c <printk>
			if (fromHardFault) {
    172a:	b11d      	cbz	r5, 1734 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    172c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1732:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <_BusFault+0x80>)
    1736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1738:	0558      	lsls	r0, r3, #21
    173a:	d50e      	bpl.n	175a <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    173c:	480d      	ldr	r0, [pc, #52]	; (1774 <_BusFault+0x94>)
    173e:	e7de      	b.n	16fe <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1742:	0559      	lsls	r1, r3, #21
    1744:	d4fa      	bmi.n	173c <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1748:	05da      	lsls	r2, r3, #23
    174a:	d501      	bpl.n	1750 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    174c:	480a      	ldr	r0, [pc, #40]	; (1778 <_BusFault+0x98>)
    174e:	e7d6      	b.n	16fe <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1752:	049b      	lsls	r3, r3, #18
    1754:	d501      	bpl.n	175a <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1756:	4809      	ldr	r0, [pc, #36]	; (177c <_BusFault+0x9c>)
    1758:	e7d1      	b.n	16fe <_BusFault+0x1e>
    175a:	bd38      	pop	{r3, r4, r5, pc}
    175c:	00012428 	.word	0x00012428
    1760:	e000ed00 	.word	0xe000ed00
    1764:	000125c2 	.word	0x000125c2
    1768:	000125d4 	.word	0x000125d4
    176c:	0001243f 	.word	0x0001243f
    1770:	00012601 	.word	0x00012601
    1774:	00012459 	.word	0x00012459
    1778:	00012475 	.word	0x00012475
    177c:	00012632 	.word	0x00012632

00001780 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    1780:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1782:	4c27      	ldr	r4, [pc, #156]	; (1820 <_Fault+0xa0>)
    1784:	6863      	ldr	r3, [r4, #4]
    1786:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    178a:	1eda      	subs	r2, r3, #3
{
    178c:	4605      	mov	r5, r0
	switch (fault) {
    178e:	2a09      	cmp	r2, #9
    1790:	d83b      	bhi.n	180a <_Fault+0x8a>
    1792:	e8df f002 	tbb	[pc, r2]
    1796:	3405      	.short	0x3405
    1798:	3a3a3036 	.word	0x3a3a3036
    179c:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    17a0:	4820      	ldr	r0, [pc, #128]	; (1824 <_Fault+0xa4>)
    17a2:	f7ff fbf3 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a8:	079a      	lsls	r2, r3, #30
    17aa:	d503      	bpl.n	17b4 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17ac:	481e      	ldr	r0, [pc, #120]	; (1828 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17ae:	f7ff fbed 	bl	f8c <printk>
    17b2:	e002      	b.n	17ba <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b6:	005b      	lsls	r3, r3, #1
    17b8:	d401      	bmi.n	17be <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17ba:	2000      	movs	r0, #0
    17bc:	e009      	b.n	17d2 <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17be:	481b      	ldr	r0, [pc, #108]	; (182c <_Fault+0xac>)
    17c0:	f7ff fbe4 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c4:	4b1a      	ldr	r3, [pc, #104]	; (1830 <_Fault+0xb0>)
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	b143      	cbz	r3, 17dc <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17ca:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17cc:	4628      	mov	r0, r5
    17ce:	f7ff fef7 	bl	15c0 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17d2:	4629      	mov	r1, r5
}
    17d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d8:	f000 b912 	b.w	1a00 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17dc:	4b15      	ldr	r3, [pc, #84]	; (1834 <_Fault+0xb4>)
    17de:	781b      	ldrb	r3, [r3, #0]
    17e0:	b123      	cbz	r3, 17ec <_Fault+0x6c>
			_BusFault(esf, 1);
    17e2:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e4:	4628      	mov	r0, r5
    17e6:	f7ff ff7b 	bl	16e0 <_BusFault>
    17ea:	e7e6      	b.n	17ba <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17ec:	4b12      	ldr	r3, [pc, #72]	; (1838 <_Fault+0xb8>)
    17ee:	881b      	ldrh	r3, [r3, #0]
    17f0:	b29b      	uxth	r3, r3
    17f2:	2b00      	cmp	r3, #0
    17f4:	d0e1      	beq.n	17ba <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f6:	4628      	mov	r0, r5
    17f8:	f7ff ff2a 	bl	1650 <_UsageFault>
    17fc:	e7e9      	b.n	17d2 <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7e4      	b.n	17cc <_Fault+0x4c>
		_BusFault(esf, 0);
    1802:	2100      	movs	r1, #0
    1804:	e7ee      	b.n	17e4 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xbc>)
    1808:	e7d1      	b.n	17ae <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    180a:	480d      	ldr	r0, [pc, #52]	; (1840 <_Fault+0xc0>)
    180c:	490d      	ldr	r1, [pc, #52]	; (1844 <_Fault+0xc4>)
    180e:	f1a3 0210 	sub.w	r2, r3, #16
    1812:	2b0f      	cmp	r3, #15
    1814:	bfd8      	it	le
    1816:	4601      	movle	r1, r0
    1818:	480b      	ldr	r0, [pc, #44]	; (1848 <_Fault+0xc8>)
    181a:	f7ff fbb7 	bl	f8c <printk>
    181e:	e7cc      	b.n	17ba <_Fault+0x3a>
    1820:	e000ed00 	.word	0xe000ed00
    1824:	000124bc 	.word	0x000124bc
    1828:	000124d4 	.word	0x000124d4
    182c:	000124f6 	.word	0x000124f6
    1830:	e000ed28 	.word	0xe000ed28
    1834:	e000ed29 	.word	0xe000ed29
    1838:	e000ed2a 	.word	0xe000ed2a
    183c:	00012516 	.word	0x00012516
    1840:	0001248e 	.word	0x0001248e
    1844:	000124a3 	.word	0x000124a3
    1848:	0001254d 	.word	0x0001254d

0000184c <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    184c:	4a02      	ldr	r2, [pc, #8]	; (1858 <_FaultInit+0xc>)
    184e:	6953      	ldr	r3, [r2, #20]
    1850:	f043 0310 	orr.w	r3, r3, #16
    1854:	6153      	str	r3, [r2, #20]
    1856:	4770      	bx	lr
    1858:	e000ed00 	.word	0xe000ed00

0000185c <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    185c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185e:	2b00      	cmp	r3, #0
    1860:	db08      	blt.n	1874 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1862:	2201      	movs	r2, #1
    1864:	f000 001f 	and.w	r0, r0, #31
    1868:	fa02 f000 	lsl.w	r0, r2, r0
    186c:	095b      	lsrs	r3, r3, #5
    186e:	4a02      	ldr	r2, [pc, #8]	; (1878 <_arch_irq_enable+0x1c>)
    1870:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1874:	4770      	bx	lr
    1876:	bf00      	nop
    1878:	e000e100 	.word	0xe000e100

0000187c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    187c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187e:	2b00      	cmp	r3, #0
    1880:	db0d      	blt.n	189e <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1882:	2201      	movs	r2, #1
    1884:	095b      	lsrs	r3, r3, #5
    1886:	f000 001f 	and.w	r0, r0, #31
    188a:	fa02 f000 	lsl.w	r0, r2, r0
    188e:	3320      	adds	r3, #32
    1890:	4a03      	ldr	r2, [pc, #12]	; (18a0 <_arch_irq_disable+0x24>)
    1892:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1896:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    189a:	f3bf 8f6f 	isb	sy
    189e:	4770      	bx	lr
    18a0:	e000e100 	.word	0xe000e100

000018a4 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a4:	0942      	lsrs	r2, r0, #5
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <_arch_irq_is_enabled+0x18>)
    18a8:	f000 001f 	and.w	r0, r0, #31
    18ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18b0:	2301      	movs	r3, #1
    18b2:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b6:	4010      	ands	r0, r2
    18b8:	4770      	bx	lr
    18ba:	bf00      	nop
    18bc:	e000e100 	.word	0xe000e100

000018c0 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18c0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18c2:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c4:	bfa8      	it	ge
    18c6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18ca:	f101 0101 	add.w	r1, r1, #1
    18ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18d2:	bfad      	iteet	ge
    18d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d8:	f000 000f 	andlt.w	r0, r0, #15
    18dc:	4b03      	ldrlt	r3, [pc, #12]	; (18ec <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18de:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	bfb6      	itet	lt
    18e2:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e8:	5419      	strblt	r1, [r3, r0]
    18ea:	4770      	bx	lr
    18ec:	e000ed14 	.word	0xe000ed14

000018f0 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18f0:	f000 b842 	b.w	1978 <__bus_fault>

000018f4 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <_arch_isr_direct_pm+0x18>)
    18fa:	69d8      	ldr	r0, [r3, #28]
    18fc:	b118      	cbz	r0, 1906 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fe:	2200      	movs	r2, #0
    1900:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    1902:	f00f fab3 	bl	10e6c <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1906:	b662      	cpsie	i
    1908:	bd08      	pop	{r3, pc}
    190a:	bf00      	nop
    190c:	200016e8 	.word	0x200016e8

00001910 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1912:	460c      	mov	r4, r1
    1914:	4616      	mov	r6, r2
    1916:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1918:	2204      	movs	r2, #4
    191a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    191c:	9909      	ldr	r1, [sp, #36]	; 0x24
    191e:	4605      	mov	r5, r0
    1920:	f010 f9ea 	bl	11cf8 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1924:	f1a6 0120 	sub.w	r1, r6, #32
    1928:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    192a:	4a0c      	ldr	r2, [pc, #48]	; (195c <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    192c:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192e:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1932:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1934:	f022 0201 	bic.w	r2, r2, #1
    1938:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    193a:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    193c:	662e      	str	r6, [r5, #96]	; 0x60
    193e:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1940:	9a06      	ldr	r2, [sp, #24]
    1942:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1944:	9a07      	ldr	r2, [sp, #28]
    1946:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1948:	9a08      	ldr	r2, [sp, #32]
    194a:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    194c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1952:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1954:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1956:	66ab      	str	r3, [r5, #104]	; 0x68
    1958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    195a:	bf00      	nop
    195c:	00000899 	.word	0x00000899

00001960 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1960:	4901      	ldr	r1, [pc, #4]	; (1968 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1962:	2210      	movs	r2, #16
	str r2, [r1]
    1964:	600a      	str	r2, [r1, #0]
	bx lr
    1966:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1968:	e000ed10 	.word	0xe000ed10

0000196c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    196c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1972:	bf30      	wfi

	bx lr
    1974:	4770      	bx	lr
    1976:	bf00      	nop

00001978 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1978:	4040      	eors	r0, r0
	msr BASEPRI, r0
    197a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 199c <__bus_fault+0x24>
	ldr ip, [ip]
    1982:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1986:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    198a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    198c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1990:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1994:	b500      	push	{lr}
	bl _Fault
    1996:	f7ff fef3 	bl	1780 <_Fault>

	pop {pc}
    199a:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    199c:	e000ed04 	.word	0xe000ed04

000019a0 <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    19a0:	2804      	cmp	r0, #4
{
    19a2:	b538      	push	{r3, r4, r5, lr}
    19a4:	4604      	mov	r4, r0
    19a6:	460d      	mov	r5, r1
	switch (reason) {
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x32>
    19aa:	2805      	cmp	r0, #5
    19ac:	d013      	beq.n	19d6 <_NanoFatalErrorHandler+0x36>
    19ae:	2803      	cmp	r0, #3
    19b0:	d113      	bne.n	19da <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19b2:	480c      	ldr	r0, [pc, #48]	; (19e4 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b4:	f7ff faea 	bl	f8c <printk>
    19b8:	f00f ff0a 	bl	117d0 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19bc:	69aa      	ldr	r2, [r5, #24]
    19be:	4601      	mov	r1, r0
    19c0:	4809      	ldr	r0, [pc, #36]	; (19e8 <_NanoFatalErrorHandler+0x48>)
    19c2:	f7ff fae3 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c6:	4629      	mov	r1, r5
    19c8:	4620      	mov	r0, r4
}
    19ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ce:	f000 b817 	b.w	1a00 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x4c>)
    19d4:	e7ee      	b.n	19b4 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d6:	4806      	ldr	r0, [pc, #24]	; (19f0 <_NanoFatalErrorHandler+0x50>)
    19d8:	e7ec      	b.n	19b4 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19da:	4601      	mov	r1, r0
    19dc:	4805      	ldr	r0, [pc, #20]	; (19f4 <_NanoFatalErrorHandler+0x54>)
    19de:	f7ff fad5 	bl	f8c <printk>
		break;
    19e2:	e7e9      	b.n	19b8 <_NanoFatalErrorHandler+0x18>
    19e4:	00012736 	.word	0x00012736
    19e8:	000127b4 	.word	0x000127b4
    19ec:	0001275c 	.word	0x0001275c
    19f0:	00012776 	.word	0x00012776
    19f4:	00012791 	.word	0x00012791

000019f8 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f8:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19fa:	6800      	ldr	r0, [r0, #0]
    19fc:	f7ff bfd0 	b.w	19a0 <_NanoFatalErrorHandler>

00001a00 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	2805      	cmp	r0, #5
{
    1a02:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a04:	d00c      	beq.n	1a20 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a06:	f010 f8a5 	bl	11b54 <k_is_in_isr>
    1a0a:	b160      	cbz	r0, 1a26 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a0c:	f010 f8a2 	bl	11b54 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a10:	4b0c      	ldr	r3, [pc, #48]	; (1a44 <_SysFatalErrorHandler+0x44>)
    1a12:	490d      	ldr	r1, [pc, #52]	; (1a48 <_SysFatalErrorHandler+0x48>)
    1a14:	2800      	cmp	r0, #0
    1a16:	bf08      	it	eq
    1a18:	4619      	moveq	r1, r3
    1a1a:	480c      	ldr	r0, [pc, #48]	; (1a4c <_SysFatalErrorHandler+0x4c>)
    1a1c:	f7ff fab6 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a20:	f7ff ffa4 	bl	196c <k_cpu_idle>
    1a24:	e7fc      	b.n	1a20 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a26:	f010 f8a5 	bl	11b74 <_is_thread_essential>
    1a2a:	2800      	cmp	r0, #0
    1a2c:	d1ee      	bne.n	1a0c <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2e:	4c08      	ldr	r4, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x50>)
    1a30:	4808      	ldr	r0, [pc, #32]	; (1a54 <_SysFatalErrorHandler+0x54>)
    1a32:	68a1      	ldr	r1, [r4, #8]
    1a34:	f7ff faaa 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a38:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3e:	f000 b80b 	b.w	1a58 <_impl_k_thread_abort>
    1a42:	bf00      	nop
    1a44:	000127f4 	.word	0x000127f4
    1a48:	000127f0 	.word	0x000127f0
    1a4c:	00012805 	.word	0x00012805
    1a50:	200016e8 	.word	0x200016e8
    1a54:	00012825 	.word	0x00012825

00001a58 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a58:	b538      	push	{r3, r4, r5, lr}
    1a5a:	4605      	mov	r5, r0
	__asm__ volatile(
    1a5c:	f04f 0320 	mov.w	r3, #32
    1a60:	f3ef 8411 	mrs	r4, BASEPRI
    1a64:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a68:	f010 f8dc 	bl	11c24 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a6c:	4b0b      	ldr	r3, [pc, #44]	; (1a9c <_impl_k_thread_abort+0x44>)
    1a6e:	689b      	ldr	r3, [r3, #8]
    1a70:	429d      	cmp	r5, r3
    1a72:	d10d      	bne.n	1a90 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a74:	4b0a      	ldr	r3, [pc, #40]	; (1aa0 <_impl_k_thread_abort+0x48>)
    1a76:	685a      	ldr	r2, [r3, #4]
    1a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a7c:	b922      	cbnz	r2, 1a88 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7e:	f00f fe59 	bl	11734 <_update_time_slice_before_swap>

	return __swap(key);
    1a82:	4620      	mov	r0, r4
    1a84:	f7ff fd42 	bl	150c <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a88:	685a      	ldr	r2, [r3, #4]
    1a8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a90:	4620      	mov	r0, r4
}
    1a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a96:	f00f bd07 	b.w	114a8 <_reschedule>
    1a9a:	bf00      	nop
    1a9c:	200016e8 	.word	0x200016e8
    1aa0:	e000ed00 	.word	0xe000ed00

00001aa4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa8:	4a0b      	ldr	r2, [pc, #44]	; (1ad8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aaa:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aae:	bf1e      	ittt	ne
	movne	r1, #0
    1ab0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1ab2:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab4:	f00f f9da 	blne	10e6c <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1aba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1abe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ac2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac6:	4905      	ldr	r1, [pc, #20]	; (1adc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1aca:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1acc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1ace:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ad2:	f7ff bcfb 	b.w	14cc <_ExcExit>
    1ad6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad8:	200016e8 	.word	0x200016e8
	ldr r1, =_sw_isr_table
    1adc:	000000dc 	.word	0x000000dc

00001ae0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ae0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ae2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae6:	4806      	ldr	r0, [pc, #24]	; (1b00 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1aec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aee:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1af2:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af8:	f3bf 8f6f 	isb	sy

    b _PrepC
    1afc:	f000 b806 	b.w	1b0c <_PrepC>
    ldr r0, =_interrupt_stack
    1b00:	20002838 	.word	0x20002838

00001b04 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b04:	bf30      	wfi
    b _SysNmiOnReset
    1b06:	f7ff bffd 	b.w	1b04 <_SysNmiOnReset>
    1b0a:	bf00      	nop

00001b0c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b0c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0e:	4b07      	ldr	r3, [pc, #28]	; (1b2c <_PrepC+0x20>)
    1b10:	4a07      	ldr	r2, [pc, #28]	; (1b30 <_PrepC+0x24>)
    1b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b16:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b1c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b20:	f00f f9d4 	bl	10ecc <_bss_zero>
	_data_copy();
    1b24:	f00f f9dc 	bl	10ee0 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b28:	f00f f9fe 	bl	10f28 <_Cstart>
    1b2c:	00000000 	.word	0x00000000
    1b30:	e000ed00 	.word	0xe000ed00

00001b34 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b34:	b508      	push	{r3, lr}
	handler();
    1b36:	f7ff ffe5 	bl	1b04 <_SysNmiOnReset>
	_ExcExit();
}
    1b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3e:	f7ff bcc5 	b.w	14cc <_ExcExit>
	...

00001b44 <_region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
    1b44:	b510      	push	{r4, lr}
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b46:	f021 031f 	bic.w	r3, r1, #31
	ARM_MPU_DEV->rnr = index;
    1b4a:	4c0c      	ldr	r4, [pc, #48]	; (1b7c <_region_init+0x38>)
				| REGION_VALID | index;
    1b4c:	4303      	orrs	r3, r0
    1b4e:	f043 0310 	orr.w	r3, r3, #16
	ARM_MPU_DEV->rnr = index;
    1b52:	60a0      	str	r0, [r4, #8]
{
    1b54:	b086      	sub	sp, #24
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b56:	60e3      	str	r3, [r4, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b58:	f042 0301 	orr.w	r3, r2, #1
    1b5c:	6123      	str	r3, [r4, #16]
	SYS_LOG_DBG("[%d] 0x%08x 0x%08x", index, region_addr, region_attr);
    1b5e:	4b08      	ldr	r3, [pc, #32]	; (1b80 <_region_init+0x3c>)
    1b60:	9304      	str	r3, [sp, #16]
    1b62:	9300      	str	r3, [sp, #0]
    1b64:	4b07      	ldr	r3, [pc, #28]	; (1b84 <_region_init+0x40>)
    1b66:	9203      	str	r2, [sp, #12]
    1b68:	9102      	str	r1, [sp, #8]
    1b6a:	9001      	str	r0, [sp, #4]
    1b6c:	681c      	ldr	r4, [r3, #0]
    1b6e:	4a06      	ldr	r2, [pc, #24]	; (1b88 <_region_init+0x44>)
    1b70:	4b06      	ldr	r3, [pc, #24]	; (1b8c <_region_init+0x48>)
    1b72:	4907      	ldr	r1, [pc, #28]	; (1b90 <_region_init+0x4c>)
    1b74:	4807      	ldr	r0, [pc, #28]	; (1b94 <_region_init+0x50>)
    1b76:	47a0      	blx	r4
}
    1b78:	b006      	add	sp, #24
    1b7a:	bd10      	pop	{r4, pc}
    1b7c:	e000ed90 	.word	0xe000ed90
    1b80:	00012335 	.word	0x00012335
    1b84:	20003474 	.word	0x20003474
    1b88:	00012857 	.word	0x00012857
    1b8c:	0001284a 	.word	0x0001284a
    1b90:	0001285e 	.word	0x0001285e
    1b94:	00012866 	.word	0x00012866

00001b98 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b9a:	4d0f      	ldr	r5, [pc, #60]	; (1bd8 <arm_mpu_init+0x40>)
    1b9c:	682b      	ldr	r3, [r5, #0]
    1b9e:	2b08      	cmp	r3, #8
    1ba0:	d80c      	bhi.n	1bbc <arm_mpu_init+0x24>
	ARM_MPU_DEV->ctrl = 0;
    1ba2:	4e0e      	ldr	r6, [pc, #56]	; (1bdc <arm_mpu_init+0x44>)
    1ba4:	2400      	movs	r4, #0
    1ba6:	6074      	str	r4, [r6, #4]
			     mpu_config.mpu_regions[r_index].base,
    1ba8:	270c      	movs	r7, #12
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1baa:	682b      	ldr	r3, [r5, #0]
    1bac:	429c      	cmp	r4, r3
    1bae:	d307      	bcc.n	1bc0 <arm_mpu_init+0x28>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1bb0:	2305      	movs	r3, #5
    1bb2:	6073      	str	r3, [r6, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bb8:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1bbc:	2000      	movs	r0, #0
    1bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			     mpu_config.mpu_regions[r_index].base,
    1bc0:	6869      	ldr	r1, [r5, #4]
    1bc2:	fb07 f304 	mul.w	r3, r7, r4
    1bc6:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
    1bc8:	4620      	mov	r0, r4
    1bca:	6892      	ldr	r2, [r2, #8]
    1bcc:	58c9      	ldr	r1, [r1, r3]
    1bce:	f7ff ffb9 	bl	1b44 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1bd2:	3401      	adds	r4, #1
    1bd4:	e7e9      	b.n	1baa <arm_mpu_init+0x12>
    1bd6:	bf00      	nop
    1bd8:	2000344c 	.word	0x2000344c
    1bdc:	e000ed90 	.word	0xe000ed90

00001be0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1be0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1be2:	4603      	mov	r3, r0
    1be4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1be8:	b90a      	cbnz	r2, 1bee <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1bea:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1bec:	4770      	bx	lr
		*d = *s;
    1bee:	f803 2b01 	strb.w	r2, [r3], #1
    1bf2:	e7f7      	b.n	1be4 <strcpy+0x4>

00001bf4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1bf4:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1bf6:	4603      	mov	r3, r0
    1bf8:	1a98      	subs	r0, r3, r2
    1bfa:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bfe:	2900      	cmp	r1, #0
    1c00:	d1fa      	bne.n	1bf8 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1c02:	4770      	bx	lr

00001c04 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1c04:	3801      	subs	r0, #1
    1c06:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1c08:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1c0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1c10:	4293      	cmp	r3, r2
    1c12:	d102      	bne.n	1c1a <strcmp+0x16>
    1c14:	2b00      	cmp	r3, #0
    1c16:	d1f7      	bne.n	1c08 <strcmp+0x4>
    1c18:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1c1a:	1a98      	subs	r0, r3, r2
    1c1c:	4770      	bx	lr

00001c1e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1c1e:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1c20:	b182      	cbz	r2, 1c44 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1c22:	3a01      	subs	r2, #1
    1c24:	460c      	mov	r4, r1
    1c26:	4603      	mov	r3, r0
    1c28:	d103      	bne.n	1c32 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1c2a:	781a      	ldrb	r2, [r3, #0]
    1c2c:	7820      	ldrb	r0, [r4, #0]
    1c2e:	1a10      	subs	r0, r2, r0
    1c30:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1c32:	781e      	ldrb	r6, [r3, #0]
    1c34:	7825      	ldrb	r5, [r4, #0]
    1c36:	42ae      	cmp	r6, r5
    1c38:	f100 0001 	add.w	r0, r0, #1
    1c3c:	f101 0101 	add.w	r1, r1, #1
    1c40:	d0ef      	beq.n	1c22 <memcmp+0x4>
    1c42:	e7f2      	b.n	1c2a <memcmp+0xc>
		return 0;
    1c44:	4610      	mov	r0, r2
}
    1c46:	bd70      	pop	{r4, r5, r6, pc}

00001c48 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c48:	ea81 0300 	eor.w	r3, r1, r0
    1c4c:	f013 0f03 	tst.w	r3, #3
{
    1c50:	b570      	push	{r4, r5, r6, lr}
    1c52:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c54:	d00b      	beq.n	1c6e <memcpy+0x26>
    1c56:	3b01      	subs	r3, #1
    1c58:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c5a:	4291      	cmp	r1, r2
    1c5c:	d11b      	bne.n	1c96 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c5e:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c60:	2a00      	cmp	r2, #0
    1c62:	d0fc      	beq.n	1c5e <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c64:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c68:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c6c:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c6e:	079c      	lsls	r4, r3, #30
    1c70:	d1f6      	bne.n	1c60 <memcpy+0x18>
    1c72:	1f1e      	subs	r6, r3, #4
    1c74:	460d      	mov	r5, r1
    1c76:	1b54      	subs	r4, r2, r5
    1c78:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c7a:	2c03      	cmp	r4, #3
    1c7c:	d806      	bhi.n	1c8c <memcpy+0x44>
    1c7e:	f022 0403 	bic.w	r4, r2, #3
    1c82:	4421      	add	r1, r4
    1c84:	4423      	add	r3, r4
    1c86:	f002 0203 	and.w	r2, r2, #3
    1c8a:	e7e4      	b.n	1c56 <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c8c:	f855 4b04 	ldr.w	r4, [r5], #4
    1c90:	f846 4f04 	str.w	r4, [r6, #4]!
    1c94:	e7ef      	b.n	1c76 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c96:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c9e:	e7dc      	b.n	1c5a <memcpy+0x12>

00001ca0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1ca0:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1ca2:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1ca4:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1ca6:	079c      	lsls	r4, r3, #30
    1ca8:	d111      	bne.n	1cce <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1caa:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1cae:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1cb2:	461e      	mov	r6, r3
    1cb4:	1b95      	subs	r5, r2, r6
    1cb6:	441d      	add	r5, r3
    1cb8:	2d03      	cmp	r5, #3
    1cba:	d80e      	bhi.n	1cda <memset+0x3a>
    1cbc:	f022 0403 	bic.w	r4, r2, #3
    1cc0:	4423      	add	r3, r4
    1cc2:	f002 0203 	and.w	r2, r2, #3
    1cc6:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1cc8:	4293      	cmp	r3, r2
    1cca:	d109      	bne.n	1ce0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1ccc:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1cce:	2a00      	cmp	r2, #0
    1cd0:	d0fc      	beq.n	1ccc <memset+0x2c>
		*(d_byte++) = c_byte;
    1cd2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1cd6:	3a01      	subs	r2, #1
    1cd8:	e7e5      	b.n	1ca6 <memset+0x6>
		*(d_word++) = c_word;
    1cda:	f846 4b04 	str.w	r4, [r6], #4
    1cde:	e7e9      	b.n	1cb4 <memset+0x14>
		*(d_byte++) = c_byte;
    1ce0:	f803 1b01 	strb.w	r1, [r3], #1
    1ce4:	e7f0      	b.n	1cc8 <memset+0x28>

00001ce6 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1ce6:	b530      	push	{r4, r5, lr}
    1ce8:	b085      	sub	sp, #20
    1cea:	4604      	mov	r4, r0
    1cec:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1cee:	4668      	mov	r0, sp
    1cf0:	2203      	movs	r2, #3
    1cf2:	f7ff ffa9 	bl	1c48 <memcpy>
	memset(res + 3, 0, 13);
    1cf6:	220d      	movs	r2, #13
    1cf8:	2100      	movs	r1, #0
    1cfa:	f10d 0003 	add.w	r0, sp, #3
    1cfe:	f7ff ffcf 	bl	1ca0 <memset>

	err = bt_encrypt_le(irk, res, res);
    1d02:	4620      	mov	r0, r4
    1d04:	466a      	mov	r2, sp
    1d06:	4669      	mov	r1, sp
    1d08:	f004 ff7c 	bl	6c04 <bt_encrypt_le>
	if (err) {
    1d0c:	4604      	mov	r4, r0
    1d0e:	b920      	cbnz	r0, 1d1a <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1d10:	2203      	movs	r2, #3
    1d12:	4669      	mov	r1, sp
    1d14:	4628      	mov	r0, r5
    1d16:	f7ff ff97 	bl	1c48 <memcpy>

	return 0;
}
    1d1a:	4620      	mov	r0, r4
    1d1c:	b005      	add	sp, #20
    1d1e:	bd30      	pop	{r4, r5, pc}

00001d20 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1d20:	b513      	push	{r0, r1, r4, lr}
    1d22:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1d24:	aa01      	add	r2, sp, #4
    1d26:	3103      	adds	r1, #3
    1d28:	f7ff ffdd 	bl	1ce6 <ah>
	if (err) {
    1d2c:	b948      	cbnz	r0, 1d42 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1d2e:	2203      	movs	r2, #3
    1d30:	a901      	add	r1, sp, #4
    1d32:	4620      	mov	r0, r4
    1d34:	f7ff ff73 	bl	1c1e <memcmp>
    1d38:	fab0 f080 	clz	r0, r0
    1d3c:	0940      	lsrs	r0, r0, #5
}
    1d3e:	b002      	add	sp, #8
    1d40:	bd10      	pop	{r4, pc}
		return false;
    1d42:	2000      	movs	r0, #0
    1d44:	e7fb      	b.n	1d3e <bt_rpa_irk_matches+0x1e>

00001d46 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1d46:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1d48:	1ccd      	adds	r5, r1, #3
{
    1d4a:	4606      	mov	r6, r0
    1d4c:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1d4e:	4628      	mov	r0, r5
    1d50:	2103      	movs	r1, #3
    1d52:	f004 ff3b 	bl	6bcc <bt_rand>
	if (err) {
    1d56:	b960      	cbnz	r0, 1d72 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1d58:	7963      	ldrb	r3, [r4, #5]
    1d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d62:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1d64:	4622      	mov	r2, r4
    1d66:	4629      	mov	r1, r5
    1d68:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1d6e:	f7ff bfba 	b.w	1ce6 <ah>
}
    1d72:	bd70      	pop	{r4, r5, r6, pc}

00001d74 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1d74:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1d76:	7802      	ldrb	r2, [r0, #0]
    1d78:	2a01      	cmp	r2, #1
{
    1d7a:	4604      	mov	r4, r0
    1d7c:	460b      	mov	r3, r1
	switch (src->type) {
    1d7e:	d017      	beq.n	1db0 <uuid_to_uuid128+0x3c>
    1d80:	d303      	bcc.n	1d8a <uuid_to_uuid128+0x16>
    1d82:	2a02      	cmp	r2, #2
    1d84:	d02c      	beq.n	1de0 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1d86:	bcf0      	pop	{r4, r5, r6, r7}
    1d88:	4770      	bx	lr
		*dst = uuid128_base;
    1d8a:	4a18      	ldr	r2, [pc, #96]	; (1dec <uuid_to_uuid128+0x78>)
    1d8c:	460d      	mov	r5, r1
    1d8e:	f102 0710 	add.w	r7, r2, #16
    1d92:	6810      	ldr	r0, [r2, #0]
    1d94:	6851      	ldr	r1, [r2, #4]
    1d96:	462e      	mov	r6, r5
    1d98:	c603      	stmia	r6!, {r0, r1}
    1d9a:	3208      	adds	r2, #8
    1d9c:	42ba      	cmp	r2, r7
    1d9e:	4635      	mov	r5, r6
    1da0:	d1f7      	bne.n	1d92 <uuid_to_uuid128+0x1e>
    1da2:	7812      	ldrb	r2, [r2, #0]
    1da4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1da6:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1da8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1daa:	0a12      	lsrs	r2, r2, #8
    1dac:	739a      	strb	r2, [r3, #14]
    1dae:	e7ea      	b.n	1d86 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1db0:	4a0e      	ldr	r2, [pc, #56]	; (1dec <uuid_to_uuid128+0x78>)
    1db2:	460d      	mov	r5, r1
    1db4:	f102 0710 	add.w	r7, r2, #16
    1db8:	6810      	ldr	r0, [r2, #0]
    1dba:	6851      	ldr	r1, [r2, #4]
    1dbc:	462e      	mov	r6, r5
    1dbe:	c603      	stmia	r6!, {r0, r1}
    1dc0:	3208      	adds	r2, #8
    1dc2:	42ba      	cmp	r2, r7
    1dc4:	4635      	mov	r5, r6
    1dc6:	d1f7      	bne.n	1db8 <uuid_to_uuid128+0x44>
    1dc8:	7812      	ldrb	r2, [r2, #0]
    1dca:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1dcc:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1dce:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1dd0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1dd4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1dd6:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1dd8:	0a12      	lsrs	r2, r2, #8
    1dda:	7399      	strb	r1, [r3, #14]
    1ddc:	741a      	strb	r2, [r3, #16]
    1dde:	e7d2      	b.n	1d86 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1de0:	4601      	mov	r1, r0
    1de2:	2211      	movs	r2, #17
    1de4:	4618      	mov	r0, r3
}
    1de6:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1de8:	f7ff bf2e 	b.w	1c48 <memcpy>
    1dec:	00012889 	.word	0x00012889

00001df0 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1df0:	b510      	push	{r4, lr}
    1df2:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1df4:	7801      	ldrb	r1, [r0, #0]
    1df6:	7822      	ldrb	r2, [r4, #0]
    1df8:	428a      	cmp	r2, r1
{
    1dfa:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1dfc:	d00e      	beq.n	1e1c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1dfe:	4669      	mov	r1, sp
    1e00:	f7ff ffb8 	bl	1d74 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1e04:	a905      	add	r1, sp, #20
    1e06:	4620      	mov	r0, r4
    1e08:	f7ff ffb4 	bl	1d74 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1e0c:	2210      	movs	r2, #16
    1e0e:	f10d 0115 	add.w	r1, sp, #21
    1e12:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1e16:	f7ff ff02 	bl	1c1e <memcmp>
    1e1a:	e00a      	b.n	1e32 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1e1c:	2a01      	cmp	r2, #1
    1e1e:	d00a      	beq.n	1e36 <bt_uuid_cmp+0x46>
    1e20:	d304      	bcc.n	1e2c <bt_uuid_cmp+0x3c>
    1e22:	2a02      	cmp	r2, #2
    1e24:	d00a      	beq.n	1e3c <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1e26:	f06f 0015 	mvn.w	r0, #21
    1e2a:	e002      	b.n	1e32 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1e2c:	8840      	ldrh	r0, [r0, #2]
    1e2e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1e30:	1ac0      	subs	r0, r0, r3
}
    1e32:	b00a      	add	sp, #40	; 0x28
    1e34:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1e36:	6840      	ldr	r0, [r0, #4]
    1e38:	6863      	ldr	r3, [r4, #4]
    1e3a:	e7f9      	b.n	1e30 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1e3c:	2210      	movs	r2, #16
    1e3e:	1c61      	adds	r1, r4, #1
    1e40:	3001      	adds	r0, #1
    1e42:	e7e8      	b.n	1e16 <bt_uuid_cmp+0x26>

00001e44 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1e44:	4770      	bx	lr

00001e46 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1e46:	2207      	movs	r2, #7
    1e48:	f7ff befe 	b.w	1c48 <memcpy>

00001e4c <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1e4c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1e4e:	f3bf 8f5b 	dmb	ish
    1e52:	e850 3f00 	ldrex	r3, [r0]
    1e56:	ea43 0201 	orr.w	r2, r3, r1
    1e5a:	e840 2e00 	strex	lr, r2, [r0]
    1e5e:	f1be 0f00 	cmp.w	lr, #0
    1e62:	d1f6      	bne.n	1e52 <atomic_or+0x6>
    1e64:	f3bf 8f5b 	dmb	ish
    1e68:	4618      	mov	r0, r3
    1e6a:	f85d fb04 	ldr.w	pc, [sp], #4

00001e6e <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1e6e:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1e70:	f3bf 8f5b 	dmb	ish
    1e74:	e850 3f00 	ldrex	r3, [r0]
    1e78:	ea03 0201 	and.w	r2, r3, r1
    1e7c:	e840 2e00 	strex	lr, r2, [r0]
    1e80:	f1be 0f00 	cmp.w	lr, #0
    1e84:	d1f6      	bne.n	1e74 <atomic_and+0x6>
    1e86:	f3bf 8f5b 	dmb	ish
    1e8a:	4618      	mov	r0, r3
    1e8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001e90 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    1e90:	78c3      	ldrb	r3, [r0, #3]
    1e92:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1e94:	f241 3288 	movw	r2, #5000	; 0x1388
    1e98:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1e9c:	bf08      	it	eq
    1e9e:	2200      	moveq	r2, #0
    1ea0:	4801      	ldr	r0, [pc, #4]	; (1ea8 <update_conn_param+0x18>)
    1ea2:	f00f bfff 	b.w	11ea4 <k_delayed_work_submit_to_queue>
    1ea6:	bf00      	nop
    1ea8:	20001728 	.word	0x20001728

00001eac <hci_cmd_done.isra.18>:

	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
	atomic_set(bt_dev.flags, flags);
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1eac:	b570      	push	{r4, r5, r6, lr}
    1eae:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1eb0:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1eb2:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1eb4:	f00e fb4e 	bl	10554 <net_buf_pool_get>
    1eb8:	4b0e      	ldr	r3, [pc, #56]	; (1ef4 <hci_cmd_done.isra.18+0x48>)
    1eba:	4283      	cmp	r3, r0
    1ebc:	d119      	bne.n	1ef2 <hci_cmd_done.isra.18+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1ebe:	4628      	mov	r0, r5
    1ec0:	f00e fb4e 	bl	10560 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1ec4:	4628      	mov	r0, r5
    1ec6:	f00e fb4b 	bl	10560 <net_buf_id>
    1eca:	4c0b      	ldr	r4, [pc, #44]	; (1ef8 <hci_cmd_done.isra.18+0x4c>)
    1ecc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1ed0:	6843      	ldr	r3, [r0, #4]
    1ed2:	b173      	cbz	r3, 1ef2 <hci_cmd_done.isra.18+0x46>
		cmd(buf)->status = status;
    1ed4:	4628      	mov	r0, r5
    1ed6:	f00e fb43 	bl	10560 <net_buf_id>
    1eda:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1ede:	4628      	mov	r0, r5
    1ee0:	f00e fb3e 	bl	10560 <net_buf_id>
    1ee4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1eec:	6840      	ldr	r0, [r0, #4]
    1eee:	f00f bc7e 	b.w	117ee <_impl_k_sem_give>
    1ef2:	bd70      	pop	{r4, r5, r6, pc}
    1ef4:	20003984 	.word	0x20003984
    1ef8:	20000018 	.word	0x20000018

00001efc <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1efc:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1efe:	f3bf 8f5b 	dmb	ish
    1f02:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    1f06:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1f0a:	f001 011f 	and.w	r1, r1, #31
    1f0e:	4108      	asrs	r0, r1
}
    1f10:	f000 0001 	and.w	r0, r0, #1
    1f14:	4770      	bx	lr
	...

00001f18 <bt_hci_cmd_create>:
{
    1f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f1c:	4680      	mov	r8, r0
    1f1e:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1f20:	4813      	ldr	r0, [pc, #76]	; (1f70 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1f22:	4d14      	ldr	r5, [pc, #80]	; (1f74 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1f28:	f00e fba8 	bl	1067c <net_buf_alloc_fixed>
    1f2c:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1f2e:	f100 0608 	add.w	r6, r0, #8
    1f32:	2100      	movs	r1, #0
    1f34:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1f36:	2700      	movs	r7, #0
    1f38:	f00e fbbf 	bl	106ba <net_buf_simple_reserve>
    1f3c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1f3e:	4620      	mov	r0, r4
    1f40:	f00e fb0e 	bl	10560 <net_buf_id>
    1f44:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1f48:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1f4c:	4620      	mov	r0, r4
    1f4e:	f00e fb07 	bl	10560 <net_buf_id>
    1f52:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f56:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1f58:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f5a:	4630      	mov	r0, r6
    1f5c:	f00e fbf0 	bl	10740 <net_buf_simple_add>
	hdr->param_len = param_len;
    1f60:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1f64:	f8a0 8000 	strh.w	r8, [r0]
}
    1f68:	4620      	mov	r0, r4
    1f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f6e:	bf00      	nop
    1f70:	20003984 	.word	0x20003984
    1f74:	20000018 	.word	0x20000018

00001f78 <bt_hci_cmd_send_sync>:
{
    1f78:	b570      	push	{r4, r5, r6, lr}
    1f7a:	4615      	mov	r5, r2
    1f7c:	b086      	sub	sp, #24
	if (!buf) {
    1f7e:	460c      	mov	r4, r1
    1f80:	b919      	cbnz	r1, 1f8a <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1f82:	f7ff ffc9 	bl	1f18 <bt_hci_cmd_create>
		if (!buf) {
    1f86:	4604      	mov	r4, r0
    1f88:	b368      	cbz	r0, 1fe6 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1f8a:	2201      	movs	r2, #1
    1f8c:	2100      	movs	r1, #0
    1f8e:	4668      	mov	r0, sp
    1f90:	f00f fc24 	bl	117dc <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1f94:	4620      	mov	r0, r4
    1f96:	f00e fae3 	bl	10560 <net_buf_id>
    1f9a:	4e14      	ldr	r6, [pc, #80]	; (1fec <bt_hci_cmd_send_sync+0x74>)
    1f9c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1fa0:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1fa4:	4620      	mov	r0, r4
    1fa6:	f00e fbc7 	bl	10738 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1faa:	4621      	mov	r1, r4
    1fac:	4810      	ldr	r0, [pc, #64]	; (1ff0 <bt_hci_cmd_send_sync+0x78>)
    1fae:	f00e fb88 	bl	106c2 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1fb2:	f242 7110 	movw	r1, #10000	; 0x2710
    1fb6:	4668      	mov	r0, sp
    1fb8:	f00f fc41 	bl	1183e <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1fbc:	4620      	mov	r0, r4
    1fbe:	f00e facf 	bl	10560 <net_buf_id>
    1fc2:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1fc6:	b130      	cbz	r0, 1fd6 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1fc8:	4620      	mov	r0, r4
    1fca:	f00e fb87 	bl	106dc <net_buf_unref>
		err = -EIO;
    1fce:	f06f 0004 	mvn.w	r0, #4
}
    1fd2:	b006      	add	sp, #24
    1fd4:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    1fd6:	b10d      	cbz	r5, 1fdc <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    1fd8:	602c      	str	r4, [r5, #0]
    1fda:	e7fa      	b.n	1fd2 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    1fdc:	4620      	mov	r0, r4
    1fde:	f00e fb7d 	bl	106dc <net_buf_unref>
		err = 0;
    1fe2:	4628      	mov	r0, r5
    1fe4:	e7f5      	b.n	1fd2 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    1fe6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1fea:	e7f2      	b.n	1fd2 <bt_hci_cmd_send_sync+0x5a>
    1fec:	20000018 	.word	0x20000018
    1ff0:	2000353c 	.word	0x2000353c

00001ff4 <set_le_scan_enable>:
{
    1ff4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1ff6:	2102      	movs	r1, #2
{
    1ff8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1ffa:	f242 000c 	movw	r0, #8204	; 0x200c
    1ffe:	f7ff ff8b 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    2002:	4604      	mov	r4, r0
    2004:	b330      	cbz	r0, 2054 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    2006:	2102      	movs	r1, #2
    2008:	3008      	adds	r0, #8
    200a:	f00e fb99 	bl	10740 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    200e:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2010:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2012:	d116      	bne.n	2042 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    2014:	210b      	movs	r1, #11
    2016:	4811      	ldr	r0, [pc, #68]	; (205c <set_le_scan_enable+0x68>)
    2018:	f7ff ff70 	bl	1efc <atomic_test_bit>
    201c:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    201e:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2020:	4621      	mov	r1, r4
    2022:	2200      	movs	r2, #0
    2024:	f242 000c 	movw	r0, #8204	; 0x200c
    2028:	f7ff ffa6 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    202c:	4604      	mov	r4, r0
    202e:	b930      	cbnz	r0, 203e <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2030:	2d01      	cmp	r5, #1
    2032:	d109      	bne.n	2048 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2034:	f44f 7180 	mov.w	r1, #256	; 0x100
    2038:	4808      	ldr	r0, [pc, #32]	; (205c <set_le_scan_enable+0x68>)
    203a:	f7ff ff07 	bl	1e4c <atomic_or>
}
    203e:	4620      	mov	r0, r4
    2040:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2042:	2300      	movs	r3, #0
    2044:	7043      	strb	r3, [r0, #1]
    2046:	e7ea      	b.n	201e <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2048:	f46f 7180 	mvn.w	r1, #256	; 0x100
    204c:	4803      	ldr	r0, [pc, #12]	; (205c <set_le_scan_enable+0x68>)
    204e:	f7ff ff0e 	bl	1e6e <atomic_and>
    2052:	e7f4      	b.n	203e <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    2054:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2058:	e7f1      	b.n	203e <set_le_scan_enable+0x4a>
    205a:	bf00      	nop
    205c:	200034e8 	.word	0x200034e8

00002060 <set_random_address>:
{
    2060:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    2062:	4d15      	ldr	r5, [pc, #84]	; (20b8 <set_random_address+0x58>)
    2064:	2206      	movs	r2, #6
    2066:	f105 0108 	add.w	r1, r5, #8
    206a:	4606      	mov	r6, r0
    206c:	f7ff fdd7 	bl	1c1e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2070:	4604      	mov	r4, r0
    2072:	b1d8      	cbz	r0, 20ac <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2074:	2106      	movs	r1, #6
    2076:	f242 0005 	movw	r0, #8197	; 0x2005
    207a:	f7ff ff4d 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    207e:	4604      	mov	r4, r0
    2080:	b1b0      	cbz	r0, 20b0 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2082:	2206      	movs	r2, #6
    2084:	4631      	mov	r1, r6
    2086:	3008      	adds	r0, #8
    2088:	f00e fb60 	bl	1074c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    208c:	4621      	mov	r1, r4
    208e:	2200      	movs	r2, #0
    2090:	f242 0005 	movw	r0, #8197	; 0x2005
    2094:	f7ff ff70 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    2098:	4604      	mov	r4, r0
    209a:	b938      	cbnz	r0, 20ac <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    209c:	2206      	movs	r2, #6
    209e:	4631      	mov	r1, r6
    20a0:	f105 0008 	add.w	r0, r5, #8
    20a4:	f7ff fdd0 	bl	1c48 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    20a8:	2301      	movs	r3, #1
    20aa:	71eb      	strb	r3, [r5, #7]
}
    20ac:	4620      	mov	r0, r4
    20ae:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    20b0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    20b4:	e7fa      	b.n	20ac <set_random_address+0x4c>
    20b6:	bf00      	nop
    20b8:	20003478 	.word	0x20003478

000020bc <le_set_private_addr>:
{
    20bc:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    20be:	2106      	movs	r1, #6
    20c0:	4668      	mov	r0, sp
    20c2:	f004 fd83 	bl	6bcc <bt_rand>
	if (err) {
    20c6:	b940      	cbnz	r0, 20da <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    20c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    20cc:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    20ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    20d2:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    20d6:	f7ff ffc3 	bl	2060 <set_random_address>
}
    20da:	b003      	add	sp, #12
    20dc:	f85d fb04 	ldr.w	pc, [sp], #4

000020e0 <set_advertise_enable>:
{
    20e0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    20e2:	2101      	movs	r1, #1
{
    20e4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    20e6:	f242 000a 	movw	r0, #8202	; 0x200a
    20ea:	f7ff ff15 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    20ee:	4604      	mov	r4, r0
    20f0:	b1d8      	cbz	r0, 212a <set_advertise_enable+0x4a>
    20f2:	3008      	adds	r0, #8
	if (enable) {
    20f4:	b18d      	cbz	r5, 211a <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    20f6:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    20f8:	f00e fb31 	bl	1075e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    20fc:	4621      	mov	r1, r4
    20fe:	2200      	movs	r2, #0
    2100:	f242 000a 	movw	r0, #8202	; 0x200a
    2104:	f7ff ff38 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    2108:	4604      	mov	r4, r0
    210a:	b920      	cbnz	r0, 2116 <set_advertise_enable+0x36>
	if (enable) {
    210c:	b13d      	cbz	r5, 211e <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    210e:	2140      	movs	r1, #64	; 0x40
    2110:	4807      	ldr	r0, [pc, #28]	; (2130 <set_advertise_enable+0x50>)
    2112:	f7ff fe9b 	bl	1e4c <atomic_or>
}
    2116:	4620      	mov	r0, r4
    2118:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    211a:	4629      	mov	r1, r5
    211c:	e7ec      	b.n	20f8 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    211e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2122:	4803      	ldr	r0, [pc, #12]	; (2130 <set_advertise_enable+0x50>)
    2124:	f7ff fea3 	bl	1e6e <atomic_and>
    2128:	e7f5      	b.n	2116 <set_advertise_enable+0x36>
		return -ENOBUFS;
    212a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    212e:	e7f2      	b.n	2116 <set_advertise_enable+0x36>
    2130:	200034e8 	.word	0x200034e8

00002134 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    2134:	8802      	ldrh	r2, [r0, #0]
    2136:	8843      	ldrh	r3, [r0, #2]
    2138:	429a      	cmp	r2, r3
{
    213a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    213c:	d818      	bhi.n	2170 <bt_le_conn_params_valid+0x3c>
    213e:	2a05      	cmp	r2, #5
    2140:	d916      	bls.n	2170 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    2142:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    2146:	d813      	bhi.n	2170 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2148:	8884      	ldrh	r4, [r0, #4]
    214a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    214e:	d20f      	bcs.n	2170 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2150:	88c1      	ldrh	r1, [r0, #6]
    2152:	f1a1 020a 	sub.w	r2, r1, #10
    2156:	b292      	uxth	r2, r2
    2158:	f640 4076 	movw	r0, #3190	; 0xc76
    215c:	4282      	cmp	r2, r0
    215e:	d807      	bhi.n	2170 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2160:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    2164:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2168:	bfb4      	ite	lt
    216a:	2001      	movlt	r0, #1
    216c:	2000      	movge	r0, #0
    216e:	bd10      	pop	{r4, pc}
		return false;
    2170:	2000      	movs	r0, #0
}
    2172:	bd10      	pop	{r4, pc}

00002174 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    2174:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    2176:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2178:	2106      	movs	r1, #6
{
    217a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    217c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2180:	f004 fd24 	bl	6bcc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    2184:	b918      	cbnz	r0, 218e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    2186:	79a3      	ldrb	r3, [r4, #6]
    2188:	f063 033f 	orn	r3, r3, #63	; 0x3f
    218c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    218e:	bd10      	pop	{r4, pc}

00002190 <bt_set_static_addr>:

int bt_set_static_addr(void)
{
    2190:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2192:	4d0c      	ldr	r5, [pc, #48]	; (21c4 <bt_set_static_addr+0x34>)
    2194:	782b      	ldrb	r3, [r5, #0]
    2196:	2b01      	cmp	r3, #1
    2198:	d110      	bne.n	21bc <bt_set_static_addr+0x2c>
    219a:	79ab      	ldrb	r3, [r5, #6]
    219c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    21a0:	2bc0      	cmp	r3, #192	; 0xc0
    21a2:	d10b      	bne.n	21bc <bt_set_static_addr+0x2c>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
    21a4:	1c68      	adds	r0, r5, #1
    21a6:	f7ff ff5b 	bl	2060 <set_random_address>
	if (err) {
    21aa:	4604      	mov	r4, r0
    21ac:	b920      	cbnz	r0, 21b8 <bt_set_static_addr+0x28>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    21ae:	2104      	movs	r1, #4
    21b0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    21b4:	f7ff fe4a 	bl	1e4c <atomic_or>
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM);

	return 0;
}
    21b8:	4620      	mov	r0, r4
    21ba:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    21bc:	f06f 0415 	mvn.w	r4, #21
    21c0:	e7fa      	b.n	21b8 <bt_set_static_addr+0x28>
    21c2:	bf00      	nop
    21c4:	20003478 	.word	0x20003478

000021c8 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    21c8:	4b02      	ldr	r3, [pc, #8]	; (21d4 <bt_send+0xc>)
    21ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    21ce:	691b      	ldr	r3, [r3, #16]
    21d0:	4718      	bx	r3
    21d2:	bf00      	nop
    21d4:	20003478 	.word	0x20003478

000021d8 <bt_hci_cmd_send>:
{
    21d8:	b538      	push	{r3, r4, r5, lr}
    21da:	4605      	mov	r5, r0
	if (!buf) {
    21dc:	460c      	mov	r4, r1
    21de:	b919      	cbnz	r1, 21e8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    21e0:	f7ff fe9a 	bl	1f18 <bt_hci_cmd_create>
		if (!buf) {
    21e4:	4604      	mov	r4, r0
    21e6:	b198      	cbz	r0, 2210 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    21e8:	f640 4335 	movw	r3, #3125	; 0xc35
    21ec:	429d      	cmp	r5, r3
    21ee:	d109      	bne.n	2204 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    21f0:	4620      	mov	r0, r4
    21f2:	f7ff ffe9 	bl	21c8 <bt_send>
		if (err) {
    21f6:	4605      	mov	r5, r0
    21f8:	b110      	cbz	r0, 2200 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    21fa:	4620      	mov	r0, r4
    21fc:	f00e fa6e 	bl	106dc <net_buf_unref>
}
    2200:	4628      	mov	r0, r5
    2202:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2204:	4621      	mov	r1, r4
    2206:	4804      	ldr	r0, [pc, #16]	; (2218 <bt_hci_cmd_send+0x40>)
    2208:	f00e fa5b 	bl	106c2 <net_buf_put>
	return 0;
    220c:	2500      	movs	r5, #0
    220e:	e7f7      	b.n	2200 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    2210:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2214:	e7f4      	b.n	2200 <bt_hci_cmd_send+0x28>
    2216:	bf00      	nop
    2218:	2000353c 	.word	0x2000353c

0000221c <start_le_scan>:
{
    221c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    221e:	4605      	mov	r5, r0
    2220:	460e      	mov	r6, r1
    2222:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    2224:	2100      	movs	r1, #0
    2226:	2207      	movs	r2, #7
    2228:	4668      	mov	r0, sp
    222a:	f7ff fd39 	bl	1ca0 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    222e:	4821      	ldr	r0, [pc, #132]	; (22b4 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    2230:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    2234:	2300      	movs	r3, #0
    2236:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    223a:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    223c:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    223e:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    2242:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    2246:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    224a:	d10a      	bne.n	2262 <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    224c:	2106      	movs	r1, #6
    224e:	3070      	adds	r0, #112	; 0x70
    2250:	f7ff fe54 	bl	1efc <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2254:	b928      	cbnz	r0, 2262 <start_le_scan+0x46>
			err = le_set_private_addr();
    2256:	f7ff ff31 	bl	20bc <le_set_private_addr>
			if (err) {
    225a:	4604      	mov	r4, r0
    225c:	b9f0      	cbnz	r0, 229c <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    225e:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2262:	2107      	movs	r1, #7
    2264:	f242 000b 	movw	r0, #8203	; 0x200b
    2268:	f7ff fe56 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    226c:	4604      	mov	r4, r0
    226e:	b1f0      	cbz	r0, 22ae <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2270:	2207      	movs	r2, #7
    2272:	4669      	mov	r1, sp
    2274:	3008      	adds	r0, #8
    2276:	f00e fa69 	bl	1074c <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    227a:	4621      	mov	r1, r4
    227c:	f242 000b 	movw	r0, #8203	; 0x200b
    2280:	f7ff ffaa 	bl	21d8 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2284:	2001      	movs	r0, #1
    2286:	f7ff feb5 	bl	1ff4 <set_le_scan_enable>
	if (err) {
    228a:	4604      	mov	r4, r0
    228c:	b930      	cbnz	r0, 229c <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    228e:	2d01      	cmp	r5, #1
    2290:	d107      	bne.n	22a2 <start_le_scan+0x86>
    2292:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2296:	4808      	ldr	r0, [pc, #32]	; (22b8 <start_le_scan+0x9c>)
    2298:	f7ff fdd8 	bl	1e4c <atomic_or>
}
    229c:	4620      	mov	r0, r4
    229e:	b002      	add	sp, #8
    22a0:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22a2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    22a6:	4804      	ldr	r0, [pc, #16]	; (22b8 <start_le_scan+0x9c>)
    22a8:	f7ff fde1 	bl	1e6e <atomic_and>
    22ac:	e7f6      	b.n	229c <start_le_scan+0x80>
		return -ENOBUFS;
    22ae:	f06f 0436 	mvn.w	r4, #54	; 0x36
    22b2:	e7f3      	b.n	229c <start_le_scan+0x80>
    22b4:	20003478 	.word	0x20003478
    22b8:	200034e8 	.word	0x200034e8

000022bc <bt_le_scan_update>:
{
    22bc:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    22be:	2109      	movs	r1, #9
{
    22c0:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    22c2:	4816      	ldr	r0, [pc, #88]	; (231c <bt_le_scan_update+0x60>)
    22c4:	f7ff fe1a 	bl	1efc <atomic_test_bit>
    22c8:	4602      	mov	r2, r0
    22ca:	b108      	cbz	r0, 22d0 <bt_le_scan_update+0x14>
		return 0;
    22cc:	2000      	movs	r0, #0
    22ce:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    22d0:	2108      	movs	r1, #8
    22d2:	4812      	ldr	r0, [pc, #72]	; (231c <bt_le_scan_update+0x60>)
    22d4:	f7ff fe12 	bl	1efc <atomic_test_bit>
    22d8:	b9d0      	cbnz	r0, 2310 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    22da:	2101      	movs	r1, #1
    22dc:	2000      	movs	r0, #0
    22de:	f001 fb89 	bl	39f4 <bt_conn_lookup_state_le>
		if (!conn) {
    22e2:	4604      	mov	r4, r0
    22e4:	2800      	cmp	r0, #0
    22e6:	d0f1      	beq.n	22cc <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    22ec:	480b      	ldr	r0, [pc, #44]	; (231c <bt_le_scan_update+0x60>)
    22ee:	f7ff fdad 	bl	1e4c <atomic_or>
		bt_conn_unref(conn);
    22f2:	4620      	mov	r0, r4
    22f4:	f001 fba0 	bl	3a38 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    22f8:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    22fa:	bf15      	itete	ne
    22fc:	2230      	movne	r2, #48	; 0x30
    22fe:	2212      	moveq	r2, #18
    2300:	2160      	movne	r1, #96	; 0x60
    2302:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    2306:	2000      	movs	r0, #0
}
    2308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    230c:	f7ff bf86 	b.w	221c <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2310:	4610      	mov	r0, r2
    2312:	f7ff fe6f 	bl	1ff4 <set_le_scan_enable>
		if (err) {
    2316:	2800      	cmp	r0, #0
    2318:	d0df      	beq.n	22da <bt_le_scan_update+0x1e>
    231a:	bd38      	pop	{r3, r4, r5, pc}
    231c:	200034e8 	.word	0x200034e8

00002320 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    2320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2324:	4dc1      	ldr	r5, [pc, #772]	; (262c <bt_init+0x30c>)
    2326:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    232a:	6899      	ldr	r1, [r3, #8]
    232c:	f011 0101 	ands.w	r1, r1, #1
{
    2330:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2332:	d124      	bne.n	237e <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2334:	aa04      	add	r2, sp, #16
    2336:	f640 4003 	movw	r0, #3075	; 0xc03
    233a:	f7ff fe1d 	bl	1f78 <bt_hci_cmd_send_sync>
		if (err) {
    233e:	4604      	mov	r4, r0
    2340:	2800      	cmp	r0, #0
    2342:	f040 81c8 	bne.w	26d6 <bt_init+0x3b6>
	u8_t status = buf->data[0];
    2346:	9b04      	ldr	r3, [sp, #16]
    2348:	689b      	ldr	r3, [r3, #8]
	if (status) {
    234a:	781b      	ldrb	r3, [r3, #0]
    234c:	b9a3      	cbnz	r3, 2378 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    234e:	4ab8      	ldr	r2, [pc, #736]	; (2630 <bt_init+0x310>)
    2350:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2352:	462b      	mov	r3, r5
    2354:	f3bf 8f5b 	dmb	ish
    2358:	f853 2f70 	ldr.w	r2, [r3, #112]!
    235c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2360:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2364:	f3bf 8f5b 	dmb	ish
    2368:	e853 1f00 	ldrex	r1, [r3]
    236c:	e843 2000 	strex	r0, r2, [r3]
    2370:	2800      	cmp	r0, #0
    2372:	d1f9      	bne.n	2368 <bt_init+0x48>
    2374:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    2378:	9804      	ldr	r0, [sp, #16]
    237a:	f00e f9af 	bl	106dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    237e:	aa04      	add	r2, sp, #16
    2380:	2100      	movs	r1, #0
    2382:	f241 0003 	movw	r0, #4099	; 0x1003
    2386:	f7ff fdf7 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    238a:	4604      	mov	r4, r0
    238c:	2800      	cmp	r0, #0
    238e:	f040 81a2 	bne.w	26d6 <bt_init+0x3b6>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2392:	9b04      	ldr	r3, [sp, #16]
    2394:	48a7      	ldr	r0, [pc, #668]	; (2634 <bt_init+0x314>)
    2396:	6899      	ldr	r1, [r3, #8]
    2398:	2208      	movs	r2, #8
    239a:	3101      	adds	r1, #1
    239c:	f7ff fc54 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    23a0:	9804      	ldr	r0, [sp, #16]
    23a2:	f00e f99b 	bl	106dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    23a6:	4621      	mov	r1, r4
    23a8:	aa04      	add	r2, sp, #16
    23aa:	f241 0001 	movw	r0, #4097	; 0x1001
    23ae:	f7ff fde3 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    23b2:	4604      	mov	r4, r0
    23b4:	2800      	cmp	r0, #0
    23b6:	f040 818e 	bne.w	26d6 <bt_init+0x3b6>
	read_local_ver_complete(rsp);
    23ba:	9804      	ldr	r0, [sp, #16]
    23bc:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    23be:	785a      	ldrb	r2, [r3, #1]
    23c0:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    23c2:	78d9      	ldrb	r1, [r3, #3]
    23c4:	789a      	ldrb	r2, [r3, #2]
    23c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    23ca:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    23cc:	791a      	ldrb	r2, [r3, #4]
    23ce:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    23d0:	7a19      	ldrb	r1, [r3, #8]
    23d2:	79da      	ldrb	r2, [r3, #7]
    23d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    23d8:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    23da:	795a      	ldrb	r2, [r3, #5]
    23dc:	799b      	ldrb	r3, [r3, #6]
    23de:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    23e2:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    23e4:	f00e f97a 	bl	106dc <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    23e8:	2103      	movs	r1, #3
    23ea:	4893      	ldr	r0, [pc, #588]	; (2638 <bt_init+0x318>)
    23ec:	f7ff fd86 	bl	1efc <atomic_test_bit>
    23f0:	4601      	mov	r1, r0
    23f2:	b998      	cbnz	r0, 241c <bt_init+0xfc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    23f4:	aa04      	add	r2, sp, #16
    23f6:	f241 0009 	movw	r0, #4105	; 0x1009
    23fa:	f7ff fdbd 	bl	1f78 <bt_hci_cmd_send_sync>
		if (err) {
    23fe:	4604      	mov	r4, r0
    2400:	2800      	cmp	r0, #0
    2402:	f040 8168 	bne.w	26d6 <bt_init+0x3b6>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    2406:	9b04      	ldr	r3, [sp, #16]
    2408:	488c      	ldr	r0, [pc, #560]	; (263c <bt_init+0x31c>)
    240a:	6899      	ldr	r1, [r3, #8]
    240c:	2206      	movs	r2, #6
    240e:	3101      	adds	r1, #1
    2410:	f7ff fc1a 	bl	1c48 <memcpy>
		net_buf_unref(rsp);
    2414:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2416:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    2418:	f00e f960 	bl	106dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    241c:	aa04      	add	r2, sp, #16
    241e:	2100      	movs	r1, #0
    2420:	f241 0002 	movw	r0, #4098	; 0x1002
    2424:	f7ff fda8 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    2428:	4604      	mov	r4, r0
    242a:	2800      	cmp	r0, #0
    242c:	f040 8153 	bne.w	26d6 <bt_init+0x3b6>
	memcpy(bt_dev.supported_commands, rp->commands,
    2430:	9b04      	ldr	r3, [sp, #16]
    2432:	4883      	ldr	r0, [pc, #524]	; (2640 <bt_init+0x320>)
    2434:	6899      	ldr	r1, [r3, #8]
    2436:	2240      	movs	r2, #64	; 0x40
    2438:	3101      	adds	r1, #1
    243a:	f7ff fc05 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    243e:	9804      	ldr	r0, [sp, #16]
    2440:	f00e f94c 	bl	106dc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2444:	7eab      	ldrb	r3, [r5, #26]
    2446:	065a      	lsls	r2, r3, #25
    2448:	f140 81b0 	bpl.w	27ac <bt_init+0x48c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    244c:	4621      	mov	r1, r4
    244e:	aa04      	add	r2, sp, #16
    2450:	f242 0003 	movw	r0, #8195	; 0x2003
    2454:	f7ff fd90 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    2458:	4604      	mov	r4, r0
    245a:	2800      	cmp	r0, #0
    245c:	f040 813b 	bne.w	26d6 <bt_init+0x3b6>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2460:	9b04      	ldr	r3, [sp, #16]
    2462:	4878      	ldr	r0, [pc, #480]	; (2644 <bt_init+0x324>)
    2464:	6899      	ldr	r1, [r3, #8]
    2466:	2208      	movs	r2, #8
    2468:	3101      	adds	r1, #1
    246a:	f7ff fbed 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    246e:	9804      	ldr	r0, [sp, #16]
    2470:	f00e f934 	bl	106dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2474:	4621      	mov	r1, r4
    2476:	aa04      	add	r2, sp, #16
    2478:	f242 0002 	movw	r0, #8194	; 0x2002
    247c:	f7ff fd7c 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    2480:	4604      	mov	r4, r0
    2482:	2800      	cmp	r0, #0
    2484:	f040 8127 	bne.w	26d6 <bt_init+0x3b6>
    2488:	9b04      	ldr	r3, [sp, #16]
    248a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    248c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    2490:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2494:	b13a      	cbz	r2, 24a6 <bt_init+0x186>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2496:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2498:	486b      	ldr	r0, [pc, #428]	; (2648 <bt_init+0x328>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    249a:	2a02      	cmp	r2, #2
    249c:	bf28      	it	cs
    249e:	2202      	movcs	r2, #2
    24a0:	4611      	mov	r1, r2
    24a2:	f00f f99b 	bl	117dc <_impl_k_sem_init>
	net_buf_unref(rsp);
    24a6:	9804      	ldr	r0, [sp, #16]
    24a8:	f00e f918 	bl	106dc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    24ac:	7eac      	ldrb	r4, [r5, #26]
    24ae:	f014 0420 	ands.w	r4, r4, #32
    24b2:	f000 80f5 	beq.w	26a0 <bt_init+0x380>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    24b6:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    24ba:	071b      	lsls	r3, r3, #28
    24bc:	d514      	bpl.n	24e8 <bt_init+0x1c8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    24be:	aa04      	add	r2, sp, #16
    24c0:	2100      	movs	r1, #0
    24c2:	f242 001c 	movw	r0, #8220	; 0x201c
    24c6:	f7ff fd57 	bl	1f78 <bt_hci_cmd_send_sync>
		if (err) {
    24ca:	4604      	mov	r4, r0
    24cc:	2800      	cmp	r0, #0
    24ce:	f040 8102 	bne.w	26d6 <bt_init+0x3b6>
		le_read_supp_states_complete(rsp);
    24d2:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    24d4:	6883      	ldr	r3, [r0, #8]
    24d6:	f853 2f01 	ldr.w	r2, [r3, #1]!
    24da:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    24dc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    24e0:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    24e4:	f00e f8fa 	bl	106dc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    24e8:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    24ec:	069f      	lsls	r7, r3, #26
    24ee:	f100 80f6 	bmi.w	26de <bt_init+0x3be>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    24f2:	2108      	movs	r1, #8
    24f4:	f242 0001 	movw	r0, #8193	; 0x2001
    24f8:	f7ff fd0e 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    24fc:	4604      	mov	r4, r0
    24fe:	2800      	cmp	r0, #0
    2500:	f000 80d5 	beq.w	26ae <bt_init+0x38e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2504:	2108      	movs	r1, #8
    2506:	4408      	add	r0, r1
    2508:	f00e f91a 	bl	10740 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    250c:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    2510:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2512:	bf4c      	ite	mi
    2514:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2516:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2518:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    251a:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    251e:	bf48      	it	mi
    2520:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2524:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2528:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    252c:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2530:	bf18      	it	ne
    2532:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2536:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2538:	bf08      	it	eq
    253a:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    253e:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2540:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2544:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2546:	2200      	movs	r2, #0
    2548:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    254a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    254c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    254e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2550:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2552:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2554:	4621      	mov	r1, r4
    2556:	f242 0001 	movw	r0, #8193	; 0x2001
    255a:	f7ff fd0d 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    255e:	4604      	mov	r4, r0
    2560:	2800      	cmp	r0, #0
    2562:	f040 80b8 	bne.w	26d6 <bt_init+0x3b6>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2566:	7eab      	ldrb	r3, [r5, #26]
    2568:	069a      	lsls	r2, r3, #26
    256a:	d421      	bmi.n	25b0 <bt_init+0x290>
	if (bt_dev.le.mtu) {
    256c:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    2570:	b9f1      	cbnz	r1, 25b0 <bt_init+0x290>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2572:	aa04      	add	r2, sp, #16
    2574:	f241 0005 	movw	r0, #4101	; 0x1005
    2578:	f7ff fcfe 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    257c:	4604      	mov	r4, r0
    257e:	2800      	cmp	r0, #0
    2580:	f040 80a9 	bne.w	26d6 <bt_init+0x3b6>
	if (bt_dev.le.mtu) {
    2584:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2588:	b97b      	cbnz	r3, 25aa <bt_init+0x28a>
    258a:	9b04      	ldr	r3, [sp, #16]
    258c:	482e      	ldr	r0, [pc, #184]	; (2648 <bt_init+0x328>)
    258e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2590:	7899      	ldrb	r1, [r3, #2]
    2592:	785a      	ldrb	r2, [r3, #1]
    2594:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2598:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    259c:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    259e:	2a02      	cmp	r2, #2
    25a0:	bf28      	it	cs
    25a2:	2202      	movcs	r2, #2
    25a4:	4611      	mov	r1, r2
    25a6:	f00f f919 	bl	117dc <_impl_k_sem_init>
	net_buf_unref(rsp);
    25aa:	9804      	ldr	r0, [sp, #16]
    25ac:	f00e f896 	bl	106dc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    25b0:	2108      	movs	r1, #8
    25b2:	f640 4001 	movw	r0, #3073	; 0xc01
    25b6:	f7ff fcaf 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    25ba:	4604      	mov	r4, r0
    25bc:	2800      	cmp	r0, #0
    25be:	d076      	beq.n	26ae <bt_init+0x38e>
	ev = net_buf_add(buf, sizeof(*ev));
    25c0:	2108      	movs	r1, #8
    25c2:	4408      	add	r0, r1
    25c4:	f00e f8bc 	bl	10740 <net_buf_simple_add>
	dst[0] = val;
    25c8:	2310      	movs	r3, #16
    25ca:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    25cc:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    25ce:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    25d0:	7043      	strb	r3, [r0, #1]
    25d2:	2602      	movs	r6, #2
    25d4:	2320      	movs	r3, #32
	dst[0] = val;
    25d6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    25d8:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    25da:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    25dc:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    25de:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    25e0:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    25e2:	4621      	mov	r1, r4
    25e4:	f640 4001 	movw	r0, #3073	; 0xc01
    25e8:	f7ff fcc6 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    25ec:	4604      	mov	r4, r0
    25ee:	2800      	cmp	r0, #0
    25f0:	d171      	bne.n	26d6 <bt_init+0x3b6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    25f2:	4601      	mov	r1, r0
    25f4:	aa04      	add	r2, sp, #16
    25f6:	f64f 4001 	movw	r0, #64513	; 0xfc01
    25fa:	f7ff fcbd 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    25fe:	4604      	mov	r4, r0
    2600:	2800      	cmp	r0, #0
    2602:	d138      	bne.n	2676 <bt_init+0x356>
	net_buf_unref(rsp);
    2604:	9804      	ldr	r0, [sp, #16]
    2606:	f00e f869 	bl	106dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    260a:	4621      	mov	r1, r4
    260c:	aa04      	add	r2, sp, #16
    260e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2612:	f7ff fcb1 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    2616:	4604      	mov	r4, r0
    2618:	bb68      	cbnz	r0, 2676 <bt_init+0x356>
	rp.cmds = (void *)rsp->data;
    261a:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    261c:	480b      	ldr	r0, [pc, #44]	; (264c <bt_init+0x32c>)
    261e:	6899      	ldr	r1, [r3, #8]
    2620:	4632      	mov	r2, r6
    2622:	3101      	adds	r1, #1
    2624:	f7ff fb10 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    2628:	9804      	ldr	r0, [sp, #16]
    262a:	e011      	b.n	2650 <bt_init+0x330>
    262c:	20003478 	.word	0x20003478
    2630:	20000074 	.word	0x20000074
    2634:	2000348e 	.word	0x2000348e
    2638:	200034e8 	.word	0x200034e8
    263c:	20003479 	.word	0x20003479
    2640:	20003496 	.word	0x20003496
    2644:	200034f0 	.word	0x200034f0
    2648:	20003504 	.word	0x20003504
    264c:	200034d7 	.word	0x200034d7
    2650:	f00e f844 	bl	106dc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2654:	aa04      	add	r2, sp, #16
    2656:	4621      	mov	r1, r4
    2658:	f64f 4003 	movw	r0, #64515	; 0xfc03
    265c:	f7ff fc8c 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    2660:	b948      	cbnz	r0, 2676 <bt_init+0x356>
	rp.feat = (void *)rsp->data;
    2662:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2664:	4853      	ldr	r0, [pc, #332]	; (27b4 <bt_init+0x494>)
    2666:	6899      	ldr	r1, [r3, #8]
    2668:	2201      	movs	r2, #1
    266a:	4411      	add	r1, r2
    266c:	f7ff faec 	bl	1c48 <memcpy>
	net_buf_unref(rsp);
    2670:	9804      	ldr	r0, [sp, #16]
    2672:	f00e f833 	bl	106dc <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2676:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2678:	2207      	movs	r2, #7
    267a:	a904      	add	r1, sp, #16
    267c:	484e      	ldr	r0, [pc, #312]	; (27b8 <bt_init+0x498>)
    267e:	9304      	str	r3, [sp, #16]
    2680:	f8cd 3013 	str.w	r3, [sp, #19]
    2684:	f7ff facb 	bl	1c1e <memcmp>
    2688:	2800      	cmp	r0, #0
    268a:	d153      	bne.n	2734 <bt_init+0x414>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    268c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2690:	07db      	lsls	r3, r3, #31
    2692:	d46c      	bmi.n	276e <bt_init+0x44e>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2694:	4848      	ldr	r0, [pc, #288]	; (27b8 <bt_init+0x498>)
    2696:	f7ff fd6d 	bl	2174 <bt_addr_le_create_static>
		if (err) {
    269a:	4604      	mov	r4, r0
    269c:	b9d8      	cbnz	r0, 26d6 <bt_init+0x3b6>
    269e:	e07c      	b.n	279a <bt_init+0x47a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    26a0:	2102      	movs	r1, #2
    26a2:	f640 406d 	movw	r0, #3181	; 0xc6d
    26a6:	f7ff fc37 	bl	1f18 <bt_hci_cmd_create>
		if (!buf) {
    26aa:	4606      	mov	r6, r0
    26ac:	b910      	cbnz	r0, 26b4 <bt_init+0x394>
		return -ENOBUFS;
    26ae:	f06f 0436 	mvn.w	r4, #54	; 0x36
    26b2:	e010      	b.n	26d6 <bt_init+0x3b6>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    26b4:	2102      	movs	r1, #2
    26b6:	3008      	adds	r0, #8
    26b8:	f00e f842 	bl	10740 <net_buf_simple_add>
		cp_le->le = 0x01;
    26bc:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    26be:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    26c0:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    26c2:	4622      	mov	r2, r4
    26c4:	4631      	mov	r1, r6
    26c6:	f640 406d 	movw	r0, #3181	; 0xc6d
    26ca:	f7ff fc55 	bl	1f78 <bt_hci_cmd_send_sync>
		if (err) {
    26ce:	4604      	mov	r4, r0
    26d0:	2800      	cmp	r0, #0
    26d2:	f43f aef0 	beq.w	24b6 <bt_init+0x196>
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    26d6:	4620      	mov	r0, r4
    26d8:	b006      	add	sp, #24
    26da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    26de:	aa04      	add	r2, sp, #16
    26e0:	2100      	movs	r1, #0
    26e2:	f242 002f 	movw	r0, #8239	; 0x202f
    26e6:	f7ff fc47 	bl	1f78 <bt_hci_cmd_send_sync>
		if (err) {
    26ea:	4604      	mov	r4, r0
    26ec:	2800      	cmp	r0, #0
    26ee:	d1f2      	bne.n	26d6 <bt_init+0x3b6>
		rp = (void *)rsp->data;
    26f0:	9804      	ldr	r0, [sp, #16]
    26f2:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    26f4:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    26f8:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    26fc:	f00d ffee 	bl	106dc <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2700:	2104      	movs	r1, #4
    2702:	f242 0024 	movw	r0, #8228	; 0x2024
    2706:	f7ff fc07 	bl	1f18 <bt_hci_cmd_create>
		if (!buf) {
    270a:	4606      	mov	r6, r0
    270c:	2800      	cmp	r0, #0
    270e:	d0ce      	beq.n	26ae <bt_init+0x38e>
		cp = net_buf_add(buf, sizeof(*cp));
    2710:	2104      	movs	r1, #4
    2712:	3008      	adds	r0, #8
    2714:	f00e f814 	bl	10740 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2718:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    271a:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    271e:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2720:	4631      	mov	r1, r6
    2722:	f242 0024 	movw	r0, #8228	; 0x2024
    2726:	f7ff fc27 	bl	1f78 <bt_hci_cmd_send_sync>
		if (err) {
    272a:	4604      	mov	r4, r0
    272c:	2800      	cmp	r0, #0
    272e:	f43f aee0 	beq.w	24f2 <bt_init+0x1d2>
    2732:	e7d0      	b.n	26d6 <bt_init+0x3b6>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2734:	4b21      	ldr	r3, [pc, #132]	; (27bc <bt_init+0x49c>)
    2736:	6818      	ldr	r0, [r3, #0]
    2738:	889a      	ldrh	r2, [r3, #4]
    273a:	9002      	str	r0, [sp, #8]
    273c:	799b      	ldrb	r3, [r3, #6]
    273e:	f8ad 200c 	strh.w	r2, [sp, #12]
    2742:	a902      	add	r1, sp, #8
    2744:	2207      	movs	r2, #7
    2746:	481c      	ldr	r0, [pc, #112]	; (27b8 <bt_init+0x498>)
    2748:	f88d 300e 	strb.w	r3, [sp, #14]
    274c:	f7ff fa67 	bl	1c1e <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2750:	2800      	cmp	r0, #0
    2752:	d09b      	beq.n	268c <bt_init+0x36c>
		err = bt_conn_init();
    2754:	f001 fb9e 	bl	3e94 <bt_conn_init>
		if (err) {
    2758:	4604      	mov	r4, r0
    275a:	2800      	cmp	r0, #0
    275c:	d1bb      	bne.n	26d6 <bt_init+0x3b6>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    275e:	2102      	movs	r1, #2
    2760:	4817      	ldr	r0, [pc, #92]	; (27c0 <bt_init+0x4a0>)
    2762:	f7ff fb73 	bl	1e4c <atomic_or>
	bt_le_scan_update(false);
    2766:	4620      	mov	r0, r4
    2768:	f7ff fda8 	bl	22bc <bt_le_scan_update>
    276c:	e7b3      	b.n	26d6 <bt_init+0x3b6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    276e:	aa01      	add	r2, sp, #4
    2770:	2100      	movs	r1, #0
    2772:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2776:	f7ff fbff 	bl	1f78 <bt_hci_cmd_send_sync>
		if (err) {
    277a:	2800      	cmp	r0, #0
    277c:	d18a      	bne.n	2694 <bt_init+0x374>
		rp = (void *)rsp->data;
    277e:	9801      	ldr	r0, [sp, #4]
    2780:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    2782:	784b      	ldrb	r3, [r1, #1]
    2784:	b17b      	cbz	r3, 27a6 <bt_init+0x486>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2786:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2788:	2206      	movs	r2, #6
    278a:	3102      	adds	r1, #2
    278c:	480d      	ldr	r0, [pc, #52]	; (27c4 <bt_init+0x4a4>)
    278e:	702b      	strb	r3, [r5, #0]
    2790:	f7ff fa5a 	bl	1c48 <memcpy>
			net_buf_unref(rsp);
    2794:	9801      	ldr	r0, [sp, #4]
    2796:	f00d ffa1 	bl	106dc <net_buf_unref>
		return bt_set_static_addr();
    279a:	f7ff fcf9 	bl	2190 <bt_set_static_addr>
    279e:	4604      	mov	r4, r0
		if (err) {
    27a0:	2800      	cmp	r0, #0
    27a2:	d0d7      	beq.n	2754 <bt_init+0x434>
    27a4:	e797      	b.n	26d6 <bt_init+0x3b6>
		net_buf_unref(rsp);
    27a6:	f00d ff99 	bl	106dc <net_buf_unref>
    27aa:	e773      	b.n	2694 <bt_init+0x374>
		return -ENODEV;
    27ac:	f06f 0412 	mvn.w	r4, #18
    27b0:	e791      	b.n	26d6 <bt_init+0x3b6>
    27b2:	bf00      	nop
    27b4:	200034d6 	.word	0x200034d6
    27b8:	20003478 	.word	0x20003478
    27bc:	00012280 	.word	0x00012280
    27c0:	200034e8 	.word	0x200034e8
    27c4:	20003479 	.word	0x20003479

000027c8 <init_work>:

static void init_work(struct k_work *work)
{
    27c8:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    27ca:	f7ff fda9 	bl	2320 <bt_init>
	if (ready_cb) {
    27ce:	4b03      	ldr	r3, [pc, #12]	; (27dc <init_work+0x14>)
    27d0:	681b      	ldr	r3, [r3, #0]
    27d2:	b113      	cbz	r3, 27da <init_work+0x12>
		ready_cb(err);
	}
}
    27d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    27d8:	4718      	bx	r3
    27da:	bd10      	pop	{r4, pc}
    27dc:	20000070 	.word	0x20000070

000027e0 <hci_le_set_phy.isra.29>:
static int hci_le_set_phy(struct bt_conn *conn)
    27e0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    27e2:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    27e4:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    27e6:	f242 0032 	movw	r0, #8242	; 0x2032
    27ea:	f7ff fb95 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    27ee:	4605      	mov	r5, r0
    27f0:	b198      	cbz	r0, 281a <hci_le_set_phy.isra.29+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    27f2:	2107      	movs	r1, #7
    27f4:	3008      	adds	r0, #8
    27f6:	f00d ffa3 	bl	10740 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    27fa:	8823      	ldrh	r3, [r4, #0]
    27fc:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    27fe:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2800:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2802:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2804:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2806:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2808:	7144      	strb	r4, [r0, #5]
    280a:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    280c:	4629      	mov	r1, r5
    280e:	f242 0032 	movw	r0, #8242	; 0x2032
    2812:	f7ff fce1 	bl	21d8 <bt_hci_cmd_send>
	return 0;
    2816:	4620      	mov	r0, r4
    2818:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    281a:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    281e:	bd38      	pop	{r3, r4, r5, pc}

00002820 <hci_le_set_data_len.isra.30>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2822:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2824:	aa01      	add	r2, sp, #4
    2826:	2100      	movs	r1, #0
    2828:	f242 002f 	movw	r0, #8239	; 0x202f
    282c:	f7ff fba4 	bl	1f78 <bt_hci_cmd_send_sync>
	if (err) {
    2830:	b9d8      	cbnz	r0, 286a <hci_le_set_data_len.isra.30+0x4a>
	rp = (void *)rsp->data;
    2832:	9801      	ldr	r0, [sp, #4]
    2834:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2836:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    283a:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    283e:	f00d ff4d 	bl	106dc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2842:	2106      	movs	r1, #6
    2844:	f242 0022 	movw	r0, #8226	; 0x2022
    2848:	f7ff fb66 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    284c:	4604      	mov	r4, r0
    284e:	b170      	cbz	r0, 286e <hci_le_set_data_len.isra.30+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2850:	2106      	movs	r1, #6
    2852:	3008      	adds	r0, #8
    2854:	f00d ff74 	bl	10740 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2858:	883b      	ldrh	r3, [r7, #0]
    285a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    285c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    285e:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2860:	4621      	mov	r1, r4
    2862:	f242 0022 	movw	r0, #8226	; 0x2022
    2866:	f7ff fcb7 	bl	21d8 <bt_hci_cmd_send>
}
    286a:	b003      	add	sp, #12
    286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    286e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2872:	e7fa      	b.n	286a <hci_le_set_data_len.isra.30+0x4a>

00002874 <le_enh_conn_complete>:
{
    2874:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2876:	7803      	ldrb	r3, [r0, #0]
{
    2878:	b085      	sub	sp, #20
    287a:	4605      	mov	r5, r0
	if (evt->status) {
    287c:	b17b      	cbz	r3, 289e <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    287e:	2102      	movs	r1, #2
    2880:	2000      	movs	r0, #0
    2882:	f001 f8b7 	bl	39f4 <bt_conn_lookup_state_le>
		if (!conn) {
    2886:	4604      	mov	r4, r0
    2888:	b138      	cbz	r0, 289a <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    288a:	782b      	ldrb	r3, [r5, #0]
    288c:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    288e:	2100      	movs	r1, #0
    2890:	f000 ffba 	bl	3808 <bt_conn_set_state>
		bt_conn_unref(conn);
    2894:	4620      	mov	r0, r4
    2896:	f001 f8cf 	bl	3a38 <bt_conn_unref>
}
    289a:	b005      	add	sp, #20
    289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    289e:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    28a0:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    28a4:	4621      	mov	r1, r4
    28a6:	a802      	add	r0, sp, #8
    28a8:	f7ff facd 	bl	1e46 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    28ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
    28b0:	3b02      	subs	r3, #2
    28b2:	b2db      	uxtb	r3, r3
    28b4:	2b01      	cmp	r3, #1
    28b6:	d87d      	bhi.n	29b4 <le_enh_conn_complete+0x140>
    28b8:	2206      	movs	r2, #6
    28ba:	f105 0111 	add.w	r1, r5, #17
    28be:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    28c2:	f88d 3008 	strb.w	r3, [sp, #8]
    28c6:	f7ff f9bf 	bl	1c48 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    28ca:	2301      	movs	r3, #1
    28cc:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    28d0:	2102      	movs	r1, #2
    28d2:	a802      	add	r0, sp, #8
    28d4:	f001 f88e 	bl	39f4 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    28d8:	78eb      	ldrb	r3, [r5, #3]
    28da:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    28dc:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    28de:	d109      	bne.n	28f4 <le_enh_conn_complete+0x80>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28e0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    28e4:	4844      	ldr	r0, [pc, #272]	; (29f8 <le_enh_conn_complete+0x184>)
    28e6:	f7ff fac2 	bl	1e6e <atomic_and>
		if (!conn) {
    28ea:	b92c      	cbnz	r4, 28f8 <le_enh_conn_complete+0x84>
			conn = bt_conn_add_le(&id_addr);
    28ec:	a802      	add	r0, sp, #8
    28ee:	f000 ff57 	bl	37a0 <bt_conn_add_le>
    28f2:	4604      	mov	r4, r0
	if (!conn) {
    28f4:	2c00      	cmp	r4, #0
    28f6:	d0d0      	beq.n	289a <le_enh_conn_complete+0x26>
	conn->handle   = handle;
    28f8:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    28fa:	a902      	add	r1, sp, #8
	conn->handle   = handle;
    28fc:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2900:	f7ff faa1 	bl	1e46 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2904:	7e2a      	ldrb	r2, [r5, #24]
    2906:	7deb      	ldrb	r3, [r5, #23]
    2908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    290c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2910:	7eaa      	ldrb	r2, [r5, #26]
    2912:	7e6b      	ldrb	r3, [r5, #25]
    2914:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2918:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    291c:	7eeb      	ldrb	r3, [r5, #27]
    291e:	7f2a      	ldrb	r2, [r5, #28]
    2920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2924:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    2928:	78ee      	ldrb	r6, [r5, #3]
    292a:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    292c:	2e01      	cmp	r6, #1
    292e:	d11a      	bne.n	2966 <le_enh_conn_complete+0xf2>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2930:	4f32      	ldr	r7, [pc, #200]	; (29fc <le_enh_conn_complete+0x188>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2932:	4669      	mov	r1, sp
    2934:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    2938:	f7ff fa85 	bl	1e46 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    293c:	4639      	mov	r1, r7
    293e:	f104 0052 	add.w	r0, r4, #82	; 0x52
    2942:	f7ff fa80 	bl	1e46 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2946:	2107      	movs	r1, #7
    2948:	f107 0070 	add.w	r0, r7, #112	; 0x70
    294c:	f7ff fad6 	bl	1efc <atomic_test_bit>
    2950:	b148      	cbz	r0, 2966 <le_enh_conn_complete+0xf2>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2952:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2956:	2200      	movs	r2, #0
    2958:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    295c:	4313      	orrs	r3, r2
    295e:	d002      	beq.n	2966 <le_enh_conn_complete+0xf2>
			set_advertise_enable(true);
    2960:	4630      	mov	r0, r6
    2962:	f7ff fbbd 	bl	20e0 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2966:	2103      	movs	r1, #3
    2968:	4620      	mov	r0, r4
    296a:	f000 ff4d 	bl	3808 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    296e:	7a63      	ldrb	r3, [r4, #9]
    2970:	2b03      	cmp	r3, #3
    2972:	d118      	bne.n	29a6 <le_enh_conn_complete+0x132>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2974:	78eb      	ldrb	r3, [r5, #3]
    2976:	b123      	cbz	r3, 2982 <le_enh_conn_complete+0x10e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2978:	4b20      	ldr	r3, [pc, #128]	; (29fc <le_enh_conn_complete+0x188>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    297a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    297e:	0719      	lsls	r1, r3, #28
    2980:	d51d      	bpl.n	29be <le_enh_conn_complete+0x14a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2982:	2102      	movs	r1, #2
    2984:	f242 0016 	movw	r0, #8214	; 0x2016
    2988:	f7ff fac6 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    298c:	4605      	mov	r5, r0
    298e:	b1b0      	cbz	r0, 29be <le_enh_conn_complete+0x14a>
	cp = net_buf_add(buf, sizeof(*cp));
    2990:	2102      	movs	r1, #2
    2992:	3008      	adds	r0, #8
    2994:	f00d fed4 	bl	10740 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2998:	8823      	ldrh	r3, [r4, #0]
    299a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    299c:	4629      	mov	r1, r5
    299e:	f242 0016 	movw	r0, #8214	; 0x2016
    29a2:	f7ff fc19 	bl	21d8 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    29a6:	4620      	mov	r0, r4
    29a8:	f001 f846 	bl	3a38 <bt_conn_unref>
	bt_le_scan_update(false);
    29ac:	2000      	movs	r0, #0
    29ae:	f7ff fc85 	bl	22bc <bt_le_scan_update>
    29b2:	e772      	b.n	289a <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    29b4:	4621      	mov	r1, r4
    29b6:	4668      	mov	r0, sp
    29b8:	f7ff fa45 	bl	1e46 <bt_addr_le_copy>
    29bc:	e788      	b.n	28d0 <le_enh_conn_complete+0x5c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    29be:	4d0f      	ldr	r5, [pc, #60]	; (29fc <le_enh_conn_complete+0x188>)
    29c0:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    29c4:	07d2      	lsls	r2, r2, #31
    29c6:	d508      	bpl.n	29da <le_enh_conn_complete+0x166>
		err = hci_le_set_phy(conn);
    29c8:	4620      	mov	r0, r4
    29ca:	f7ff ff09 	bl	27e0 <hci_le_set_phy.isra.29>
		if (!err) {
    29ce:	b920      	cbnz	r0, 29da <le_enh_conn_complete+0x166>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    29d0:	2180      	movs	r1, #128	; 0x80
    29d2:	1d20      	adds	r0, r4, #4
    29d4:	f7ff fa3a 	bl	1e4c <atomic_or>
    29d8:	e7e5      	b.n	29a6 <le_enh_conn_complete+0x132>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    29da:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    29de:	069b      	lsls	r3, r3, #26
    29e0:	d506      	bpl.n	29f0 <le_enh_conn_complete+0x17c>
		err = hci_le_set_data_len(conn);
    29e2:	4620      	mov	r0, r4
    29e4:	f7ff ff1c 	bl	2820 <hci_le_set_data_len.isra.30>
		if (!err) {
    29e8:	b910      	cbnz	r0, 29f0 <le_enh_conn_complete+0x17c>
    29ea:	f44f 7180 	mov.w	r1, #256	; 0x100
    29ee:	e7f0      	b.n	29d2 <le_enh_conn_complete+0x15e>
	update_conn_param(conn);
    29f0:	4620      	mov	r0, r4
    29f2:	f7ff fa4d 	bl	1e90 <update_conn_param>
    29f6:	e7d6      	b.n	29a6 <le_enh_conn_complete+0x132>
    29f8:	200034e8 	.word	0x200034e8
    29fc:	20003478 	.word	0x20003478

00002a00 <le_conn_param_neg_reply>:
{
    2a00:	b570      	push	{r4, r5, r6, lr}
    2a02:	4606      	mov	r6, r0
    2a04:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2a06:	f242 0021 	movw	r0, #8225	; 0x2021
    2a0a:	2103      	movs	r1, #3
    2a0c:	f7ff fa84 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    2a10:	4604      	mov	r4, r0
    2a12:	b160      	cbz	r0, 2a2e <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2a14:	2103      	movs	r1, #3
    2a16:	3008      	adds	r0, #8
    2a18:	f00d fe92 	bl	10740 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2a1c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2a1e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2a20:	4621      	mov	r1, r4
    2a22:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2a2a:	f7ff bbd5 	b.w	21d8 <bt_hci_cmd_send>
}
    2a2e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2a32:	bd70      	pop	{r4, r5, r6, pc}

00002a34 <hci_tx_thread>:
{
    2a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2a38:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2b1c <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2a3c:	4c35      	ldr	r4, [pc, #212]	; (2b14 <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2a3e:	f898 300d 	ldrb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2a42:	4835      	ldr	r0, [pc, #212]	; (2b18 <hci_tx_thread+0xe4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2a44:	f36f 1307 	bfc	r3, #4, #4
    2a48:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2a4c:	f000 fe60 	bl	3710 <bt_conn_prepare_events>
    2a50:	1c47      	adds	r7, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a56:	4639      	mov	r1, r7
    2a58:	4830      	ldr	r0, [pc, #192]	; (2b1c <hci_tx_thread+0xe8>)
    2a5a:	f00f fb09 	bl	12070 <_impl_k_poll>
		BT_ASSERT(err == 0);
    2a5e:	b9b8      	cbnz	r0, 2a90 <hci_tx_thread+0x5c>
    2a60:	4d2e      	ldr	r5, [pc, #184]	; (2b1c <hci_tx_thread+0xe8>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2a62:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2b20 <hci_tx_thread+0xec>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2a66:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
	for (; count; ev++, count--) {
    2a6a:	b917      	cbnz	r7, 2a72 <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2a6c:	f00e fe80 	bl	11770 <_impl_k_yield>
    2a70:	e7e5      	b.n	2a3e <hci_tx_thread+0xa>
		switch (ev->state) {
    2a72:	7b6b      	ldrb	r3, [r5, #13]
    2a74:	091b      	lsrs	r3, r3, #4
    2a76:	2b04      	cmp	r3, #4
    2a78:	d139      	bne.n	2aee <hci_tx_thread+0xba>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2a7a:	f895 a00c 	ldrb.w	sl, [r5, #12]
    2a7e:	f1ba 0f00 	cmp.w	sl, #0
    2a82:	d137      	bne.n	2af4 <hci_tx_thread+0xc0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2a84:	4651      	mov	r1, sl
    2a86:	4658      	mov	r0, fp
    2a88:	f00d fdfe 	bl	10688 <net_buf_get>
	BT_ASSERT(buf);
    2a8c:	4606      	mov	r6, r0
    2a8e:	b928      	cbnz	r0, 2a9c <hci_tx_thread+0x68>
    2a90:	4040      	eors	r0, r0
    2a92:	f380 8811 	msr	BASEPRI, r0
    2a96:	f04f 0004 	mov.w	r0, #4
    2a9a:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2aa0:	4648      	mov	r0, r9
    2aa2:	f00e fecc 	bl	1183e <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2aa6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2aaa:	b118      	cbz	r0, 2ab4 <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
    2aac:	f00d fe16 	bl	106dc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2ab0:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    2ab4:	4630      	mov	r0, r6
    2ab6:	f00d fe3f 	bl	10738 <net_buf_ref>
    2aba:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    2abe:	4630      	mov	r0, r6
    2ac0:	f7ff fb82 	bl	21c8 <bt_send>
	if (err) {
    2ac4:	b198      	cbz	r0, 2aee <hci_tx_thread+0xba>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2ac6:	4648      	mov	r0, r9
    2ac8:	f00e fe91 	bl	117ee <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2acc:	4630      	mov	r0, r6
    2ace:	f00d fd47 	bl	10560 <net_buf_id>
    2ad2:	2100      	movs	r1, #0
    2ad4:	201f      	movs	r0, #31
    2ad6:	f7ff f9e9 	bl	1eac <hci_cmd_done.isra.18>
		net_buf_unref(bt_dev.sent_cmd);
    2ada:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2ade:	f00d fdfd 	bl	106dc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2ae2:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2ae4:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    2ae6:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    2aea:	f00d fdf7 	bl	106dc <net_buf_unref>
	for (; count; ev++, count--) {
    2aee:	3514      	adds	r5, #20
    2af0:	3f01      	subs	r7, #1
    2af2:	e7ba      	b.n	2a6a <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2af4:	f1ba 0f01 	cmp.w	sl, #1
    2af8:	d104      	bne.n	2b04 <hci_tx_thread+0xd0>
					conn = CONTAINER_OF(ev->fifo,
    2afa:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    2afc:	3818      	subs	r0, #24
    2afe:	f000 fd47 	bl	3590 <bt_conn_notify_tx>
    2b02:	e7f4      	b.n	2aee <hci_tx_thread+0xba>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2b04:	f1ba 0f02 	cmp.w	sl, #2
    2b08:	d1f1      	bne.n	2aee <hci_tx_thread+0xba>
					conn = CONTAINER_OF(ev->fifo,
    2b0a:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    2b0c:	3828      	subs	r0, #40	; 0x28
    2b0e:	f001 f95b 	bl	3dc8 <bt_conn_process_tx>
    2b12:	e7ec      	b.n	2aee <hci_tx_thread+0xba>
    2b14:	20003478 	.word	0x20003478
    2b18:	20003564 	.word	0x20003564
    2b1c:	20003550 	.word	0x20003550
    2b20:	20003520 	.word	0x20003520

00002b24 <bt_recv>:
{
    2b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    2b28:	7d03      	ldrb	r3, [r0, #20]
    2b2a:	2b01      	cmp	r3, #1
{
    2b2c:	b08f      	sub	sp, #60	; 0x3c
    2b2e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2b30:	d02a      	beq.n	2b88 <bt_recv+0x64>
    2b32:	2b03      	cmp	r3, #3
    2b34:	f040 828e 	bne.w	3054 <bt_recv+0x530>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    2b38:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    2b3a:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    2b3c:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    2b3e:	f3c6 030b 	ubfx	r3, r6, #0, #12
    2b42:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    2b44:	23ff      	movs	r3, #255	; 0xff
    2b46:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    2b48:	2104      	movs	r1, #4
    2b4a:	3008      	adds	r0, #8
    2b4c:	f00d fe17 	bl	1077e <net_buf_simple_pull>
	if (buf->len != len) {
    2b50:	89a3      	ldrh	r3, [r4, #12]
    2b52:	42ab      	cmp	r3, r5
    2b54:	d003      	beq.n	2b5e <bt_recv+0x3a>
	net_buf_unref(buf);
    2b56:	4620      	mov	r0, r4
    2b58:	f00d fdc0 	bl	106dc <net_buf_unref>
    2b5c:	e010      	b.n	2b80 <bt_recv+0x5c>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    2b5e:	8ae0      	ldrh	r0, [r4, #22]
    2b60:	f000 fefc 	bl	395c <bt_conn_lookup_handle>
	if (!conn) {
    2b64:	4605      	mov	r5, r0
    2b66:	2800      	cmp	r0, #0
    2b68:	d0f5      	beq.n	2b56 <bt_recv+0x32>
	acl(buf)->id = bt_conn_get_id(conn);
    2b6a:	f001 f987 	bl	3e7c <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    2b6e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    2b70:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    2b72:	4621      	mov	r1, r4
    2b74:	4628      	mov	r0, r5
    2b76:	f000 fcb3 	bl	34e0 <bt_conn_recv>
	bt_conn_unref(conn);
    2b7a:	4628      	mov	r0, r5
    2b7c:	f000 ff5c 	bl	3a38 <bt_conn_unref>
		return 0;
    2b80:	2000      	movs	r0, #0
}
    2b82:	b00f      	add	sp, #60	; 0x3c
    2b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2b88:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2b8a:	7832      	ldrb	r2, [r6, #0]
    2b8c:	2a13      	cmp	r2, #19
    2b8e:	f200 8266 	bhi.w	305e <bt_recv+0x53a>
    2b92:	4093      	lsls	r3, r2
    2b94:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    2b98:	f000 8261 	beq.w	305e <bt_recv+0x53a>
    2b9c:	4040      	eors	r0, r0
    2b9e:	f380 8811 	msr	BASEPRI, r0
    2ba2:	f04f 0004 	mov.w	r0, #4
    2ba6:	df02      	svc	2
    2ba8:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    2baa:	783e      	ldrb	r6, [r7, #0]
    2bac:	2e00      	cmp	r6, #0
    2bae:	d1d2      	bne.n	2b56 <bt_recv+0x32>
	conn = bt_conn_lookup_handle(handle);
    2bb0:	f8b7 0001 	ldrh.w	r0, [r7, #1]
    2bb4:	f000 fed2 	bl	395c <bt_conn_lookup_handle>
	if (!conn) {
    2bb8:	4605      	mov	r5, r0
    2bba:	b1e8      	cbz	r0, 2bf8 <bt_recv+0xd4>
	conn->err = evt->reason;
    2bbc:	78fb      	ldrb	r3, [r7, #3]
    2bbe:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    2bc0:	49b8      	ldr	r1, [pc, #736]	; (2ea4 <bt_recv+0x380>)
    2bc2:	48b9      	ldr	r0, [pc, #740]	; (2ea8 <bt_recv+0x384>)
    2bc4:	f00e ffc4 	bl	11b50 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2bc8:	4631      	mov	r1, r6
    2bca:	4628      	mov	r0, r5
    2bcc:	f000 fe1c 	bl	3808 <bt_conn_set_state>
	conn->handle = 0;
    2bd0:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    2bd2:	78ae      	ldrb	r6, [r5, #2]
    2bd4:	b10e      	cbz	r6, 2bda <bt_recv+0xb6>
	bt_conn_unref(conn);
    2bd6:	4628      	mov	r0, r5
    2bd8:	e075      	b.n	2cc6 <bt_recv+0x1a2>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    2bda:	4631      	mov	r1, r6
    2bdc:	1d28      	adds	r0, r5, #4
    2bde:	f7ff f98d 	bl	1efc <atomic_test_bit>
    2be2:	b130      	cbz	r0, 2bf2 <bt_recv+0xce>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    2be4:	4628      	mov	r0, r5
    2be6:	2101      	movs	r1, #1
    2be8:	f000 fe0e 	bl	3808 <bt_conn_set_state>
		bt_le_scan_update(false);
    2bec:	4630      	mov	r0, r6
    2bee:	f7ff fb65 	bl	22bc <bt_le_scan_update>
	bt_conn_unref(conn);
    2bf2:	4628      	mov	r0, r5
    2bf4:	f000 ff20 	bl	3a38 <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2bf8:	2107      	movs	r1, #7
    2bfa:	48ac      	ldr	r0, [pc, #688]	; (2eac <bt_recv+0x388>)
    2bfc:	f7ff f97e 	bl	1efc <atomic_test_bit>
    2c00:	2800      	cmp	r0, #0
    2c02:	d0a8      	beq.n	2b56 <bt_recv+0x32>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2c04:	2106      	movs	r1, #6
    2c06:	48a9      	ldr	r0, [pc, #676]	; (2eac <bt_recv+0x388>)
    2c08:	f7ff f978 	bl	1efc <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2c0c:	2800      	cmp	r0, #0
    2c0e:	d1a2      	bne.n	2b56 <bt_recv+0x32>
		set_advertise_enable(true);
    2c10:	2001      	movs	r0, #1
    2c12:	f7ff fa65 	bl	20e0 <set_advertise_enable>
    2c16:	e79e      	b.n	2b56 <bt_recv+0x32>
    2c18:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    2c1a:	780b      	ldrb	r3, [r1, #0]
    2c1c:	f88d 3018 	strb.w	r3, [sp, #24]
	enh.handle         = evt->handle;
    2c20:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    2c24:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.role           = evt->role;
    2c28:	78cb      	ldrb	r3, [r1, #3]
    2c2a:	f88d 301b 	strb.w	r3, [sp, #27]
	enh.interval       = evt->interval;
    2c2e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    2c32:	f8ad 302f 	strh.w	r3, [sp, #47]	; 0x2f
	enh.latency        = evt->latency;
    2c36:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    2c3a:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.supv_timeout   = evt->supv_timeout;
    2c3e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    2c42:	f8ad 3033 	strh.w	r3, [sp, #51]	; 0x33
	enh.clock_accuracy = evt->clock_accuracy;
    2c46:	7c4b      	ldrb	r3, [r1, #17]
    2c48:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    2c4c:	3104      	adds	r1, #4
    2c4e:	a807      	add	r0, sp, #28
    2c50:	f7ff f8f9 	bl	1e46 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    2c54:	2500      	movs	r5, #0
    2c56:	2206      	movs	r2, #6
    2c58:	a902      	add	r1, sp, #8
    2c5a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
    2c5e:	9502      	str	r5, [sp, #8]
    2c60:	f8ad 500c 	strh.w	r5, [sp, #12]
    2c64:	f7fe fff0 	bl	1c48 <memcpy>
    2c68:	2206      	movs	r2, #6
    2c6a:	a904      	add	r1, sp, #16
    2c6c:	f10d 0029 	add.w	r0, sp, #41	; 0x29
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    2c70:	9504      	str	r5, [sp, #16]
    2c72:	f8ad 5014 	strh.w	r5, [sp, #20]
    2c76:	f7fe ffe7 	bl	1c48 <memcpy>
	le_enh_conn_complete(&enh);
    2c7a:	a806      	add	r0, sp, #24
		le_enh_conn_complete((void *)buf->data);
    2c7c:	f7ff fdfa 	bl	2874 <le_enh_conn_complete>
    2c80:	e769      	b.n	2b56 <bt_recv+0x32>
    2c82:	68a0      	ldr	r0, [r4, #8]
    2c84:	e7fa      	b.n	2c7c <bt_recv+0x158>
    2c86:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2c88:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    2c8c:	f000 fe66 	bl	395c <bt_conn_lookup_handle>
	if (!conn) {
    2c90:	4606      	mov	r6, r0
    2c92:	2800      	cmp	r0, #0
    2c94:	f43f af5f 	beq.w	2b56 <bt_recv+0x32>
	if (!evt->status) {
    2c98:	782b      	ldrb	r3, [r5, #0]
    2c9a:	b99b      	cbnz	r3, 2cc4 <bt_recv+0x1a0>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    2c9c:	792a      	ldrb	r2, [r5, #4]
    2c9e:	78eb      	ldrb	r3, [r5, #3]
    2ca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2ca4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    2ca8:	79aa      	ldrb	r2, [r5, #6]
    2caa:	796b      	ldrb	r3, [r5, #5]
    2cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2cb0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2cb4:	79eb      	ldrb	r3, [r5, #7]
    2cb6:	7a2a      	ldrb	r2, [r5, #8]
    2cb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2cbc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    2cc0:	f000 fbd2 	bl	3468 <notify_le_param_updated>
	bt_conn_unref(conn);
    2cc4:	4630      	mov	r0, r6
    2cc6:	f000 feb7 	bl	3a38 <bt_conn_unref>
    2cca:	e744      	b.n	2b56 <bt_recv+0x32>
    2ccc:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2cce:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    2cd2:	f000 fe43 	bl	395c <bt_conn_lookup_handle>
	if (!conn) {
    2cd6:	4605      	mov	r5, r0
    2cd8:	2800      	cmp	r0, #0
    2cda:	f43f af3c 	beq.w	2b56 <bt_recv+0x32>
	if (!evt->status) {
    2cde:	7833      	ldrb	r3, [r6, #0]
    2ce0:	b923      	cbnz	r3, 2cec <bt_recv+0x1c8>
		memcpy(conn->le.features, evt->features,
    2ce2:	2208      	movs	r2, #8
    2ce4:	1cf1      	adds	r1, r6, #3
    2ce6:	3064      	adds	r0, #100	; 0x64
    2ce8:	f7fe ffae 	bl	1c48 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    2cec:	4e70      	ldr	r6, [pc, #448]	; (2eb0 <bt_recv+0x38c>)
    2cee:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    2cf2:	07d2      	lsls	r2, r2, #31
    2cf4:	d50c      	bpl.n	2d10 <bt_recv+0x1ec>
    2cf6:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    2cfa:	07db      	lsls	r3, r3, #31
    2cfc:	d508      	bpl.n	2d10 <bt_recv+0x1ec>
		err = hci_le_set_phy(conn);
    2cfe:	4628      	mov	r0, r5
    2d00:	f7ff fd6e 	bl	27e0 <hci_le_set_phy.isra.29>
		if (!err) {
    2d04:	b920      	cbnz	r0, 2d10 <bt_recv+0x1ec>
    2d06:	2180      	movs	r1, #128	; 0x80
    2d08:	1d28      	adds	r0, r5, #4
    2d0a:	f7ff f89f 	bl	1e4c <atomic_or>
    2d0e:	e762      	b.n	2bd6 <bt_recv+0xb2>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2d10:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    2d14:	069f      	lsls	r7, r3, #26
    2d16:	d56e      	bpl.n	2df6 <bt_recv+0x2d2>
    2d18:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2d1c:	069e      	lsls	r6, r3, #26
    2d1e:	d56a      	bpl.n	2df6 <bt_recv+0x2d2>
		err = hci_le_set_data_len(conn);
    2d20:	4628      	mov	r0, r5
    2d22:	f7ff fd7d 	bl	2820 <hci_le_set_data_len.isra.30>
		if (!err) {
    2d26:	2800      	cmp	r0, #0
    2d28:	d165      	bne.n	2df6 <bt_recv+0x2d2>
    2d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
    2d2e:	e7eb      	b.n	2d08 <bt_recv+0x1e4>
    2d30:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    2d32:	78d9      	ldrb	r1, [r3, #3]
    2d34:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    2d36:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    2d38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2d3c:	f8ad 2018 	strh.w	r2, [sp, #24]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    2d40:	7959      	ldrb	r1, [r3, #5]
    2d42:	791a      	ldrb	r2, [r3, #4]
    2d44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2d48:	f8ad 201a 	strh.w	r2, [sp, #26]
	param.latency = sys_le16_to_cpu(evt->latency);
    2d4c:	799a      	ldrb	r2, [r3, #6]
    2d4e:	79d9      	ldrb	r1, [r3, #7]
    2d50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2d54:	f8ad 201c 	strh.w	r2, [sp, #28]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2d58:	7a1a      	ldrb	r2, [r3, #8]
    2d5a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    2d5c:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2d5e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    2d62:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2d64:	f8ad 301e 	strh.w	r3, [sp, #30]
	conn = bt_conn_lookup_handle(handle);
    2d68:	f000 fdf8 	bl	395c <bt_conn_lookup_handle>
	if (!conn) {
    2d6c:	4680      	mov	r8, r0
    2d6e:	b920      	cbnz	r0, 2d7a <bt_recv+0x256>
		return le_conn_param_neg_reply(handle,
    2d70:	2102      	movs	r1, #2
    2d72:	4628      	mov	r0, r5
    2d74:	f7ff fe44 	bl	2a00 <le_conn_param_neg_reply>
    2d78:	e6ed      	b.n	2b56 <bt_recv+0x32>
	if (!le_param_req(conn, &param)) {
    2d7a:	a906      	add	r1, sp, #24
    2d7c:	f000 fb88 	bl	3490 <le_param_req>
    2d80:	b928      	cbnz	r0, 2d8e <bt_recv+0x26a>
		err = le_conn_param_neg_reply(handle,
    2d82:	211e      	movs	r1, #30
    2d84:	4628      	mov	r0, r5
    2d86:	f7ff fe3b 	bl	2a00 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    2d8a:	4640      	mov	r0, r8
    2d8c:	e79b      	b.n	2cc6 <bt_recv+0x1a2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    2d8e:	210e      	movs	r1, #14
    2d90:	f242 0020 	movw	r0, #8224	; 0x2020
    2d94:	f7ff f8c0 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    2d98:	4606      	mov	r6, r0
    2d9a:	2800      	cmp	r0, #0
    2d9c:	d0f5      	beq.n	2d8a <bt_recv+0x266>
	cp = net_buf_add(buf, sizeof(*cp));
    2d9e:	210e      	movs	r1, #14
    2da0:	3008      	adds	r0, #8
    2da2:	f00d fccd 	bl	10740 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2da6:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    2da8:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    2daa:	2100      	movs	r1, #0
    2dac:	f7fe ff78 	bl	1ca0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    2db0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2db4:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    2db6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    2dba:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    2dbc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2dc0:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    2dc2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	cp->handle = sys_cpu_to_le16(handle);
    2dc6:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    2dc8:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    2dca:	4631      	mov	r1, r6
    2dcc:	f242 0020 	movw	r0, #8224	; 0x2020
    2dd0:	f7ff fa02 	bl	21d8 <bt_hci_cmd_send>
    2dd4:	e7d9      	b.n	2d8a <bt_recv+0x266>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2dd6:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2dd8:	8818      	ldrh	r0, [r3, #0]
    2dda:	f000 fdbf 	bl	395c <bt_conn_lookup_handle>
	if (!conn) {
    2dde:	4605      	mov	r5, r0
    2de0:	2800      	cmp	r0, #0
    2de2:	f43f aeb8 	beq.w	2b56 <bt_recv+0x32>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2de6:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2dea:	3004      	adds	r0, #4
    2dec:	f7ff f83f 	bl	1e6e <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    2df0:	05c0      	lsls	r0, r0, #23
    2df2:	f57f aef0 	bpl.w	2bd6 <bt_recv+0xb2>
	update_conn_param(conn);
    2df6:	4628      	mov	r0, r5
    2df8:	f7ff f84a 	bl	1e90 <update_conn_param>
    2dfc:	e6eb      	b.n	2bd6 <bt_recv+0xb2>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2dfe:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2e00:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    2e04:	f000 fdaa 	bl	395c <bt_conn_lookup_handle>
	if (!conn) {
    2e08:	4605      	mov	r5, r0
    2e0a:	2800      	cmp	r0, #0
    2e0c:	f43f aea3 	beq.w	2b56 <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    2e10:	1d06      	adds	r6, r0, #4
    2e12:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2e16:	4630      	mov	r0, r6
    2e18:	f7ff f829 	bl	1e6e <atomic_and>
    2e1c:	0601      	lsls	r1, r0, #24
    2e1e:	f57f aeda 	bpl.w	2bd6 <bt_recv+0xb2>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2e22:	4b23      	ldr	r3, [pc, #140]	; (2eb0 <bt_recv+0x38c>)
    2e24:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2e28:	069a      	lsls	r2, r3, #26
    2e2a:	d5e4      	bpl.n	2df6 <bt_recv+0x2d2>
    2e2c:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2e30:	069b      	lsls	r3, r3, #26
    2e32:	d5e0      	bpl.n	2df6 <bt_recv+0x2d2>
		err = hci_le_set_data_len(conn);
    2e34:	4628      	mov	r0, r5
    2e36:	f7ff fcf3 	bl	2820 <hci_le_set_data_len.isra.30>
		if (!err) {
    2e3a:	2800      	cmp	r0, #0
    2e3c:	d1db      	bne.n	2df6 <bt_recv+0x2d2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
    2e42:	4630      	mov	r0, r6
    2e44:	e761      	b.n	2d0a <bt_recv+0x1e6>
    2e46:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2e48:	4818      	ldr	r0, [pc, #96]	; (2eac <bt_recv+0x388>)
    2e4a:	f06f 0120 	mvn.w	r1, #32
    2e4e:	f7ff f80e 	bl	1e6e <atomic_and>
	if (!evt->status) {
    2e52:	7833      	ldrb	r3, [r6, #0]
    2e54:	b943      	cbnz	r3, 2e68 <bt_recv+0x344>
		memcpy(pub_key, evt->key, 64);
    2e56:	1c71      	adds	r1, r6, #1
    2e58:	2240      	movs	r2, #64	; 0x40
    2e5a:	4816      	ldr	r0, [pc, #88]	; (2eb4 <bt_recv+0x390>)
    2e5c:	f7fe fef4 	bl	1c48 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e60:	2110      	movs	r1, #16
    2e62:	4812      	ldr	r0, [pc, #72]	; (2eac <bt_recv+0x388>)
    2e64:	f7fe fff2 	bl	1e4c <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2e68:	4b13      	ldr	r3, [pc, #76]	; (2eb8 <bt_recv+0x394>)
    2e6a:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    2e6c:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2e6e:	2d00      	cmp	r5, #0
    2e70:	f43f ae71 	beq.w	2b56 <bt_recv+0x32>
		cb->func(evt->status ? NULL : evt->key);
    2e74:	7832      	ldrb	r2, [r6, #0]
    2e76:	682b      	ldr	r3, [r5, #0]
    2e78:	2a00      	cmp	r2, #0
    2e7a:	bf0c      	ite	eq
    2e7c:	4638      	moveq	r0, r7
    2e7e:	2000      	movne	r0, #0
    2e80:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2e82:	686d      	ldr	r5, [r5, #4]
    2e84:	e7f3      	b.n	2e6e <bt_recv+0x34a>
	if (dh_key_cb) {
    2e86:	4d0d      	ldr	r5, [pc, #52]	; (2ebc <bt_recv+0x398>)
    2e88:	68a0      	ldr	r0, [r4, #8]
    2e8a:	682a      	ldr	r2, [r5, #0]
    2e8c:	2a00      	cmp	r2, #0
    2e8e:	f43f ae62 	beq.w	2b56 <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2e92:	7803      	ldrb	r3, [r0, #0]
    2e94:	b923      	cbnz	r3, 2ea0 <bt_recv+0x37c>
    2e96:	3001      	adds	r0, #1
    2e98:	4790      	blx	r2
		dh_key_cb = NULL;
    2e9a:	2300      	movs	r3, #0
    2e9c:	602b      	str	r3, [r5, #0]
    2e9e:	e65a      	b.n	2b56 <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2ea0:	2000      	movs	r0, #0
    2ea2:	e7f9      	b.n	2e98 <bt_recv+0x374>
    2ea4:	0001289a 	.word	0x0001289a
    2ea8:	00001e45 	.word	0x00001e45
    2eac:	200034e8 	.word	0x200034e8
    2eb0:	20003478 	.word	0x20003478
    2eb4:	2000002c 	.word	0x2000002c
    2eb8:	2000006c 	.word	0x2000006c
    2ebc:	20000028 	.word	0x20000028
	u8_t num_reports = net_buf_pull_u8(buf);
    2ec0:	4628      	mov	r0, r5
    2ec2:	f00d fc64 	bl	1078e <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2ec6:	f8df 9208 	ldr.w	r9, [pc, #520]	; 30d0 <bt_recv+0x5ac>
	u8_t num_reports = net_buf_pull_u8(buf);
    2eca:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    2ecc:	9b00      	ldr	r3, [sp, #0]
    2ece:	2b00      	cmp	r3, #0
    2ed0:	f43f ae41 	beq.w	2b56 <bt_recv+0x32>
		info = (void *)buf->data;
    2ed4:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    2ed6:	2109      	movs	r1, #9
    2ed8:	4628      	mov	r0, r5
    2eda:	f00d fc50 	bl	1077e <net_buf_simple_pull>
		rssi = info->data[info->length];
    2ede:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2ee0:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    2ee2:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    2ee4:	a806      	add	r0, sp, #24
		rssi = info->data[info->length];
    2ee6:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2eea:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    2eee:	3b02      	subs	r3, #2
    2ef0:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    2ef2:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2ef4:	f200 8099 	bhi.w	302a <bt_recv+0x506>
			bt_addr_le_copy(&id_addr, &info->addr);
    2ef8:	f7fe ffa5 	bl	1e46 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2efc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2f00:	3b02      	subs	r3, #2
    2f02:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    2f06:	4b6f      	ldr	r3, [pc, #444]	; (30c4 <bt_recv+0x5a0>)
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	b1bb      	cbz	r3, 2f3c <bt_recv+0x418>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2f0c:	4628      	mov	r0, r5
    2f0e:	f00d fc4e 	bl	107ae <net_buf_simple_headroom>
	state->len = buf->len;
    2f12:	89a3      	ldrh	r3, [r4, #12]
    2f14:	9301      	str	r3, [sp, #4]
			buf->len = info->length;
    2f16:	7a33      	ldrb	r3, [r6, #8]
    2f18:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2f1a:	4b6a      	ldr	r3, [pc, #424]	; (30c4 <bt_recv+0x5a0>)
    2f1c:	7832      	ldrb	r2, [r6, #0]
    2f1e:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    2f20:	4682      	mov	sl, r0
    2f22:	461f      	mov	r7, r3
    2f24:	fa4f f18b 	sxtb.w	r1, fp
    2f28:	462b      	mov	r3, r5
    2f2a:	a806      	add	r0, sp, #24
    2f2c:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2f2e:	6923      	ldr	r3, [r4, #16]
    2f30:	fa13 f38a 	uxtah	r3, r3, sl
    2f34:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    2f36:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2f3a:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2f3c:	2109      	movs	r1, #9
    2f3e:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    2f40:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2f42:	f7fe ffdb 	bl	1efc <atomic_test_bit>
    2f46:	4682      	mov	sl, r0
    2f48:	2800      	cmp	r0, #0
    2f4a:	d164      	bne.n	3016 <bt_recv+0x4f2>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    2f4c:	2a01      	cmp	r2, #1
    2f4e:	d862      	bhi.n	3016 <bt_recv+0x4f2>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    2f50:	2101      	movs	r1, #1
    2f52:	a806      	add	r0, sp, #24
    2f54:	f000 fd4e 	bl	39f4 <bt_conn_lookup_state_le>
	if (!conn) {
    2f58:	4607      	mov	r7, r0
    2f5a:	2800      	cmp	r0, #0
    2f5c:	d05b      	beq.n	3016 <bt_recv+0x4f2>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    2f5e:	2108      	movs	r1, #8
    2f60:	4648      	mov	r0, r9
    2f62:	f7fe ffcb 	bl	1efc <atomic_test_bit>
    2f66:	2800      	cmp	r0, #0
    2f68:	d162      	bne.n	3030 <bt_recv+0x50c>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    2f6a:	2102      	movs	r1, #2
    2f6c:	4648      	mov	r0, r9
    2f6e:	f7fe ffc5 	bl	1efc <atomic_test_bit>
    2f72:	b110      	cbz	r0, 2f7a <bt_recv+0x456>
			set_random_address(&bt_dev.id_addr.a);
    2f74:	4854      	ldr	r0, [pc, #336]	; (30c8 <bt_recv+0x5a4>)
    2f76:	f7ff f873 	bl	2060 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2f7a:	4954      	ldr	r1, [pc, #336]	; (30cc <bt_recv+0x5a8>)
    2f7c:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2f80:	f107 0a52 	add.w	sl, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2f84:	f7fe ff5f 	bl	1e46 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2f88:	4641      	mov	r1, r8
    2f8a:	4650      	mov	r0, sl
    2f8c:	f7fe ff5b 	bl	1e46 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    2f90:	2119      	movs	r1, #25
    2f92:	f242 000d 	movw	r0, #8205	; 0x200d
    2f96:	f7fe ffbf 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    2f9a:	4683      	mov	fp, r0
    2f9c:	2800      	cmp	r0, #0
    2f9e:	d04c      	beq.n	303a <bt_recv+0x516>
	cp = net_buf_add(buf, sizeof(*cp));
    2fa0:	2119      	movs	r1, #25
    2fa2:	3008      	adds	r0, #8
    2fa4:	f00d fbcc 	bl	10740 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2fa8:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    2faa:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    2fac:	2100      	movs	r1, #0
    2fae:	f7fe fe77 	bl	1ca0 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    2fb2:	2200      	movs	r2, #0
    2fb4:	2360      	movs	r3, #96	; 0x60
    2fb6:	f888 3000 	strb.w	r3, [r8]
    2fba:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    2fbe:	f888 3002 	strb.w	r3, [r8, #2]
    2fc2:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2fc6:	4651      	mov	r1, sl
    2fc8:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    2fcc:	9201      	str	r2, [sp, #4]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2fce:	f7fe ff3a 	bl	1e46 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    2fd2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    2fd6:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    2fda:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    2fde:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    2fe2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    2fe6:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    2fea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    2fee:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    2ff2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    2ff6:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2ffa:	9a01      	ldr	r2, [sp, #4]
    2ffc:	4659      	mov	r1, fp
    2ffe:	f242 000d 	movw	r0, #8205	; 0x200d
    3002:	f7fe ffb9 	bl	1f78 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3006:	b9c0      	cbnz	r0, 303a <bt_recv+0x516>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3008:	4638      	mov	r0, r7
    300a:	2102      	movs	r1, #2
    300c:	f000 fbfc 	bl	3808 <bt_conn_set_state>
	bt_conn_unref(conn);
    3010:	4638      	mov	r0, r7
    3012:	f000 fd11 	bl	3a38 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3016:	7a31      	ldrb	r1, [r6, #8]
    3018:	4628      	mov	r0, r5
    301a:	3101      	adds	r1, #1
    301c:	f00d fbaf 	bl	1077e <net_buf_simple_pull>
    3020:	9b00      	ldr	r3, [sp, #0]
    3022:	3b01      	subs	r3, #1
    3024:	b2db      	uxtb	r3, r3
    3026:	9300      	str	r3, [sp, #0]
    3028:	e750      	b.n	2ecc <bt_recv+0x3a8>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    302a:	f7fe ff0c 	bl	1e46 <bt_addr_le_copy>
    302e:	e76a      	b.n	2f06 <bt_recv+0x3e2>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3030:	4650      	mov	r0, sl
    3032:	f7fe ffdf 	bl	1ff4 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3036:	2800      	cmp	r0, #0
    3038:	d097      	beq.n	2f6a <bt_recv+0x446>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    303a:	231f      	movs	r3, #31
    303c:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    303e:	2100      	movs	r1, #0
    3040:	4638      	mov	r0, r7
    3042:	f000 fbe1 	bl	3808 <bt_conn_set_state>
	bt_conn_unref(conn);
    3046:	4638      	mov	r0, r7
    3048:	f000 fcf6 	bl	3a38 <bt_conn_unref>
	bt_le_scan_update(false);
    304c:	2000      	movs	r0, #0
    304e:	f7ff f935 	bl	22bc <bt_le_scan_update>
    3052:	e7e0      	b.n	3016 <bt_recv+0x4f2>
		net_buf_unref(buf);
    3054:	f00d fb42 	bl	106dc <net_buf_unref>
		return -EINVAL;
    3058:	f06f 0015 	mvn.w	r0, #21
    305c:	e591      	b.n	2b82 <bt_recv+0x5e>
	net_buf_pull(buf, sizeof(*hdr));
    305e:	f104 0508 	add.w	r5, r4, #8
    3062:	2102      	movs	r1, #2
    3064:	4628      	mov	r0, r5
    3066:	f00d fb8a 	bl	1077e <net_buf_simple_pull>
	switch (hdr->evt) {
    306a:	7833      	ldrb	r3, [r6, #0]
    306c:	2b05      	cmp	r3, #5
    306e:	f43f ad9b 	beq.w	2ba8 <bt_recv+0x84>
    3072:	2b3e      	cmp	r3, #62	; 0x3e
    3074:	f47f ad6f 	bne.w	2b56 <bt_recv+0x32>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3078:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    307a:	2101      	movs	r1, #1
    307c:	4628      	mov	r0, r5
    307e:	f00d fb7e 	bl	1077e <net_buf_simple_pull>
	switch (evt->subevent) {
    3082:	7833      	ldrb	r3, [r6, #0]
    3084:	3b01      	subs	r3, #1
    3086:	2b0b      	cmp	r3, #11
    3088:	f63f ad65 	bhi.w	2b56 <bt_recv+0x32>
    308c:	a201      	add	r2, pc, #4	; (adr r2, 3094 <bt_recv+0x570>)
    308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3092:	bf00      	nop
    3094:	00002c19 	.word	0x00002c19
    3098:	00002ec1 	.word	0x00002ec1
    309c:	00002c87 	.word	0x00002c87
    30a0:	00002ccd 	.word	0x00002ccd
    30a4:	00002b57 	.word	0x00002b57
    30a8:	00002d31 	.word	0x00002d31
    30ac:	00002dd7 	.word	0x00002dd7
    30b0:	00002e47 	.word	0x00002e47
    30b4:	00002e87 	.word	0x00002e87
    30b8:	00002c83 	.word	0x00002c83
    30bc:	00002b57 	.word	0x00002b57
    30c0:	00002dff 	.word	0x00002dff
    30c4:	20000074 	.word	0x20000074
    30c8:	20003479 	.word	0x20003479
    30cc:	20003478 	.word	0x20003478
    30d0:	200034e8 	.word	0x200034e8

000030d4 <bt_recv_prio>:
{
    30d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    30d8:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    30da:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    30dc:	2b01      	cmp	r3, #1
{
    30de:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    30e0:	d005      	beq.n	30ee <bt_recv_prio+0x1a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    30e2:	4040      	eors	r0, r0
    30e4:	f380 8811 	msr	BASEPRI, r0
    30e8:	f04f 0004 	mov.w	r0, #4
    30ec:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    30ee:	8982      	ldrh	r2, [r0, #12]
    30f0:	2a01      	cmp	r2, #1
    30f2:	d9f6      	bls.n	30e2 <bt_recv_prio+0xe>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    30f4:	7832      	ldrb	r2, [r6, #0]
    30f6:	2a13      	cmp	r2, #19
    30f8:	d8f3      	bhi.n	30e2 <bt_recv_prio+0xe>
    30fa:	4093      	lsls	r3, r2
    30fc:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3100:	d0ef      	beq.n	30e2 <bt_recv_prio+0xe>
	net_buf_pull(buf, sizeof(*hdr));
    3102:	f100 0508 	add.w	r5, r0, #8
    3106:	2102      	movs	r1, #2
    3108:	4628      	mov	r0, r5
    310a:	f00d fb38 	bl	1077e <net_buf_simple_pull>
	switch (hdr->evt) {
    310e:	7833      	ldrb	r3, [r6, #0]
    3110:	2b0f      	cmp	r3, #15
    3112:	d018      	beq.n	3146 <bt_recv_prio+0x72>
    3114:	2b13      	cmp	r3, #19
    3116:	d023      	beq.n	3160 <bt_recv_prio+0x8c>
    3118:	2b0e      	cmp	r3, #14
    311a:	d161      	bne.n	31e0 <bt_recv_prio+0x10c>
	u8_t status, ncmd = evt->ncmd;
    311c:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    311e:	2103      	movs	r1, #3
    3120:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    3122:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    3124:	f00d fb2b 	bl	1077e <net_buf_simple_pull>
	status = buf->data[0];
    3128:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    312a:	4621      	mov	r1, r4
    312c:	7818      	ldrb	r0, [r3, #0]
    312e:	f7fe febd 	bl	1eac <hci_cmd_done.isra.18>
	if (ncmd) {
    3132:	b116      	cbz	r6, 313a <bt_recv_prio+0x66>
    3134:	482c      	ldr	r0, [pc, #176]	; (31e8 <bt_recv_prio+0x114>)
    3136:	f00e fb5a 	bl	117ee <_impl_k_sem_give>
	net_buf_unref(buf);
    313a:	4620      	mov	r0, r4
    313c:	f00d face 	bl	106dc <net_buf_unref>
}
    3140:	2000      	movs	r0, #0
    3142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3146:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3148:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    314a:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    314c:	4628      	mov	r0, r5
    314e:	f00d fb16 	bl	1077e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3152:	4621      	mov	r1, r4
    3154:	7830      	ldrb	r0, [r6, #0]
    3156:	f7fe fea9 	bl	1eac <hci_cmd_done.isra.18>
	if (ncmd) {
    315a:	2f00      	cmp	r7, #0
    315c:	d0ed      	beq.n	313a <bt_recv_prio+0x66>
    315e:	e7e9      	b.n	3134 <bt_recv_prio+0x60>
    3160:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
    3164:	2700      	movs	r7, #0
    3166:	f898 3000 	ldrb.w	r3, [r8]
    316a:	429f      	cmp	r7, r3
    316c:	dae5      	bge.n	313a <bt_recv_prio+0x66>
    316e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3172:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3176:	f8b3 6003 	ldrh.w	r6, [r3, #3]
    317a:	f04f 0320 	mov.w	r3, #32
    317e:	f3ef 8911 	mrs	r9, BASEPRI
    3182:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    3186:	f000 fbe9 	bl	395c <bt_conn_lookup_handle>
		if (!conn) {
    318a:	4605      	mov	r5, r0
    318c:	b918      	cbnz	r0, 3196 <bt_recv_prio+0xc2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    318e:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
    3192:	3701      	adds	r7, #1
    3194:	e7e7      	b.n	3166 <bt_recv_prio+0x92>
    3196:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
    319a:	f100 0918 	add.w	r9, r0, #24
		while (count--) {
    319e:	b196      	cbz	r6, 31c6 <bt_recv_prio+0xf2>
	__asm__ volatile(
    31a0:	f04f 0320 	mov.w	r3, #32
    31a4:	f3ef 8011 	mrs	r0, BASEPRI
    31a8:	f383 8811 	msr	BASEPRI, r3
    31ac:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    31ae:	b129      	cbz	r1, 31bc <bt_recv_prio+0xe8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    31b0:	696a      	ldr	r2, [r5, #20]
	return node->next;
    31b2:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    31b4:	612b      	str	r3, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    31b6:	4291      	cmp	r1, r2
	list->tail = node;
    31b8:	bf08      	it	eq
    31ba:	616b      	streq	r3, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    31bc:	f380 8811 	msr	BASEPRI, r0
    31c0:	3e01      	subs	r6, #1
    31c2:	b2b6      	uxth	r6, r6
			if (!node) {
    31c4:	b919      	cbnz	r1, 31ce <bt_recv_prio+0xfa>
		bt_conn_unref(conn);
    31c6:	4628      	mov	r0, r5
    31c8:	f000 fc36 	bl	3a38 <bt_conn_unref>
    31cc:	e7e1      	b.n	3192 <bt_recv_prio+0xbe>
			k_fifo_put(&conn->tx_notify, node);
    31ce:	4648      	mov	r0, r9
    31d0:	f00e f848 	bl	11264 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    31d4:	4628      	mov	r0, r5
    31d6:	f000 f943 	bl	3460 <bt_conn_get_pkts>
    31da:	f00e fb08 	bl	117ee <_impl_k_sem_give>
    31de:	e7de      	b.n	319e <bt_recv_prio+0xca>
		net_buf_unref(buf);
    31e0:	4620      	mov	r0, r4
    31e2:	f00d fa7b 	bl	106dc <net_buf_unref>
    31e6:	e77c      	b.n	30e2 <bt_recv_prio+0xe>
    31e8:	20003520 	.word	0x20003520

000031ec <bt_hci_driver_register>:
	if (bt_dev.drv) {
    31ec:	4a08      	ldr	r2, [pc, #32]	; (3210 <bt_hci_driver_register+0x24>)
    31ee:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    31f2:	b93b      	cbnz	r3, 3204 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    31f4:	68c1      	ldr	r1, [r0, #12]
    31f6:	b141      	cbz	r1, 320a <bt_hci_driver_register+0x1e>
    31f8:	6901      	ldr	r1, [r0, #16]
    31fa:	b131      	cbz	r1, 320a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    31fc:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    3200:	4618      	mov	r0, r3
    3202:	4770      	bx	lr
		return -EALREADY;
    3204:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3208:	4770      	bx	lr
		return -EINVAL;
    320a:	f06f 0015 	mvn.w	r0, #21
}
    320e:	4770      	bx	lr
    3210:	20003478 	.word	0x20003478

00003214 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3214:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3216:	4c20      	ldr	r4, [pc, #128]	; (3298 <bt_enable+0x84>)
    3218:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
{
    321c:	b086      	sub	sp, #24
    321e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3220:	2b00      	cmp	r3, #0
    3222:	d033      	beq.n	328c <bt_enable+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3224:	2101      	movs	r1, #1
    3226:	f104 0070 	add.w	r0, r4, #112	; 0x70
    322a:	f7fe fe0f 	bl	1e4c <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    322e:	f010 0001 	ands.w	r0, r0, #1
    3232:	d12e      	bne.n	3292 <bt_enable+0x7e>
		if (err) {
			return err;
		}
	}

	ready_cb = cb;
    3234:	4b19      	ldr	r3, [pc, #100]	; (329c <bt_enable+0x88>)

    3236:	491a      	ldr	r1, [pc, #104]	; (32a0 <bt_enable+0x8c>)
    3238:	601e      	str	r6, [r3, #0]
    323a:	f06f 0308 	mvn.w	r3, #8
    323e:	9005      	str	r0, [sp, #20]
    3240:	9004      	str	r0, [sp, #16]
    3242:	9303      	str	r3, [sp, #12]
    3244:	9002      	str	r0, [sp, #8]
    3246:	9001      	str	r0, [sp, #4]
    3248:	9000      	str	r0, [sp, #0]
    324a:	4b16      	ldr	r3, [pc, #88]	; (32a4 <bt_enable+0x90>)
    324c:	4816      	ldr	r0, [pc, #88]	; (32a8 <bt_enable+0x94>)
    324e:	f44f 7220 	mov.w	r2, #640	; 0x280
    3252:	f00e fcc9 	bl	11be8 <_impl_k_thread_create>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    3256:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    325a:	68db      	ldr	r3, [r3, #12]
    325c:	4798      	blx	r3
	if (err) {
    325e:	4605      	mov	r5, r0
    3260:	b988      	cbnz	r0, 3286 <bt_enable+0x72>
		BT_ERR("HCI driver open failed (%d)", err);
		return err;
	}

	if (!cb) {
    3262:	b926      	cbnz	r6, 326e <bt_enable+0x5a>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3264:	b006      	add	sp, #24
    3266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    326a:	f7ff b859 	b.w	2320 <bt_init>
    326e:	2101      	movs	r1, #1
    3270:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3274:	f7fe fdea 	bl	1e4c <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3278:	07c3      	lsls	r3, r0, #31
    327a:	d404      	bmi.n	3286 <bt_enable+0x72>
		k_queue_append(&work_q->queue, work);
    327c:	f104 0164 	add.w	r1, r4, #100	; 0x64
    3280:	480a      	ldr	r0, [pc, #40]	; (32ac <bt_enable+0x98>)
    3282:	f00d ffef 	bl	11264 <k_queue_append>
}
    3286:	4628      	mov	r0, r5
    3288:	b006      	add	sp, #24
    328a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    328c:	f06f 0512 	mvn.w	r5, #18
    3290:	e7f9      	b.n	3286 <bt_enable+0x72>
		return -EALREADY;
    3292:	f06f 0544 	mvn.w	r5, #68	; 0x44
    3296:	e7f6      	b.n	3286 <bt_enable+0x72>
    3298:	20003478 	.word	0x20003478
    329c:	20000070 	.word	0x20000070
    32a0:	200017a8 	.word	0x200017a8
    32a4:	00002a35 	.word	0x00002a35
    32a8:	20000078 	.word	0x20000078
    32ac:	20001728 	.word	0x20001728

000032b0 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    32b0:	2000      	movs	r0, #0
    32b2:	4770      	bx	lr

000032b4 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    32b4:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    32b6:	7803      	ldrb	r3, [r0, #0]
    32b8:	2b01      	cmp	r3, #1
{
    32ba:	4605      	mov	r5, r0
    32bc:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    32be:	d810      	bhi.n	32e2 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    32c0:	7843      	ldrb	r3, [r0, #1]
    32c2:	2b01      	cmp	r3, #1
    32c4:	d80d      	bhi.n	32e2 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    32c6:	8841      	ldrh	r1, [r0, #2]
    32c8:	1f0b      	subs	r3, r1, #4
    32ca:	b29b      	uxth	r3, r3
    32cc:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    32d0:	4283      	cmp	r3, r0
    32d2:	d806      	bhi.n	32e2 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    32d4:	88aa      	ldrh	r2, [r5, #4]
    32d6:	1f13      	subs	r3, r2, #4
    32d8:	b29b      	uxth	r3, r3
    32da:	4283      	cmp	r3, r0
    32dc:	d801      	bhi.n	32e2 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    32de:	4291      	cmp	r1, r2
    32e0:	d22b      	bcs.n	333a <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    32e2:	f06f 0415 	mvn.w	r4, #21
    32e6:	e00e      	b.n	3306 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    32e8:	2108      	movs	r1, #8
    32ea:	4819      	ldr	r0, [pc, #100]	; (3350 <bt_le_scan_start+0x9c>)
    32ec:	f7fe fe06 	bl	1efc <atomic_test_bit>
    32f0:	b158      	cbz	r0, 330a <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    32f2:	4610      	mov	r0, r2
    32f4:	f7fe fe7e 	bl	1ff4 <set_le_scan_enable>
		if (err) {
    32f8:	4604      	mov	r4, r0
    32fa:	b130      	cbz	r0, 330a <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32fc:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3300:	4813      	ldr	r0, [pc, #76]	; (3350 <bt_le_scan_start+0x9c>)
    3302:	f7fe fdb4 	bl	1e6e <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3306:	4620      	mov	r0, r4
    3308:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    330a:	786b      	ldrb	r3, [r5, #1]
    330c:	b17b      	cbz	r3, 332e <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    330e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3312:	480f      	ldr	r0, [pc, #60]	; (3350 <bt_le_scan_start+0x9c>)
    3314:	f7fe fd9a 	bl	1e4c <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3318:	88aa      	ldrh	r2, [r5, #4]
    331a:	8869      	ldrh	r1, [r5, #2]
    331c:	7828      	ldrb	r0, [r5, #0]
    331e:	f7fe ff7d 	bl	221c <start_le_scan>
	if (err) {
    3322:	4604      	mov	r4, r0
    3324:	2800      	cmp	r0, #0
    3326:	d1e9      	bne.n	32fc <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3328:	4b0a      	ldr	r3, [pc, #40]	; (3354 <bt_le_scan_start+0xa0>)
    332a:	601e      	str	r6, [r3, #0]
	return 0;
    332c:	e7eb      	b.n	3306 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    332e:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3332:	4807      	ldr	r0, [pc, #28]	; (3350 <bt_le_scan_start+0x9c>)
    3334:	f7fe fd9b 	bl	1e6e <atomic_and>
    3338:	e7ee      	b.n	3318 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    333a:	f44f 7100 	mov.w	r1, #512	; 0x200
    333e:	4804      	ldr	r0, [pc, #16]	; (3350 <bt_le_scan_start+0x9c>)
    3340:	f7fe fd84 	bl	1e4c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3344:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3348:	d0ce      	beq.n	32e8 <bt_le_scan_start+0x34>
		return -EALREADY;
    334a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    334e:	e7da      	b.n	3306 <bt_le_scan_start+0x52>
    3350:	200034e8 	.word	0x200034e8
    3354:	20000074 	.word	0x20000074

00003358 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3358:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    335a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    335e:	4807      	ldr	r0, [pc, #28]	; (337c <bt_le_scan_stop+0x24>)
    3360:	f7fe fd85 	bl	1e6e <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3364:	0583      	lsls	r3, r0, #22
    3366:	d506      	bpl.n	3376 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3368:	4b05      	ldr	r3, [pc, #20]	; (3380 <bt_le_scan_stop+0x28>)
    336a:	2000      	movs	r0, #0
    336c:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    336e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3372:	f7fe bfa3 	b.w	22bc <bt_le_scan_update>
}
    3376:	f06f 0044 	mvn.w	r0, #68	; 0x44
    337a:	bd08      	pop	{r3, pc}
    337c:	200034e8 	.word	0x200034e8
    3380:	20000074 	.word	0x20000074

00003384 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3384:	b538      	push	{r3, r4, r5, lr}
    3386:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3388:	4805      	ldr	r0, [pc, #20]	; (33a0 <bt_buf_get_rx+0x1c>)
    338a:	f00d f977 	bl	1067c <net_buf_alloc_fixed>
#endif

	if (buf) {
    338e:	4604      	mov	r4, r0
    3390:	b120      	cbz	r0, 339c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3392:	2100      	movs	r1, #0
    3394:	3008      	adds	r0, #8
    3396:	f00d f990 	bl	106ba <net_buf_simple_reserve>
    339a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    339c:	4620      	mov	r0, r4
    339e:	bd38      	pop	{r3, r4, r5, pc}
    33a0:	200039a4 	.word	0x200039a4

000033a4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    33a4:	b510      	push	{r4, lr}
    33a6:	4601      	mov	r1, r0
	__asm__ volatile(
    33a8:	f04f 0320 	mov.w	r3, #32
    33ac:	f3ef 8011 	mrs	r0, BASEPRI
    33b0:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    33b4:	4a0b      	ldr	r2, [pc, #44]	; (33e4 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    33b6:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    33b8:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    33bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    33c0:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    33c4:	b924      	cbnz	r4, 33d0 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    33c6:	2001      	movs	r0, #1
}
    33c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    33cc:	f7ff bfda 	b.w	3384 <bt_buf_get_rx>
    33d0:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    33d2:	f104 0008 	add.w	r0, r4, #8
    33d6:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    33d8:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    33da:	4619      	mov	r1, r3
    33dc:	f00d f96d 	bl	106ba <net_buf_simple_reserve>
}
    33e0:	4620      	mov	r0, r4
    33e2:	bd10      	pop	{r4, pc}
    33e4:	20003478 	.word	0x20003478

000033e8 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    33e8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    33ea:	4b06      	ldr	r3, [pc, #24]	; (3404 <notify_connected+0x1c>)
    33ec:	681c      	ldr	r4, [r3, #0]
{
    33ee:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    33f0:	b904      	cbnz	r4, 33f4 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    33f2:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    33f4:	6823      	ldr	r3, [r4, #0]
    33f6:	b113      	cbz	r3, 33fe <notify_connected+0x16>
			cb->connected(conn, conn->err);
    33f8:	7a29      	ldrb	r1, [r5, #8]
    33fa:	4628      	mov	r0, r5
    33fc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    33fe:	6924      	ldr	r4, [r4, #16]
    3400:	e7f6      	b.n	33f0 <notify_connected+0x8>
    3402:	bf00      	nop
    3404:	200000e8 	.word	0x200000e8

00003408 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3408:	f3bf 8f5b 	dmb	ish
    340c:	6800      	ldr	r0, [r0, #0]
    340e:	f3bf 8f5b 	dmb	ish
}
    3412:	4770      	bx	lr

00003414 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3414:	8943      	ldrh	r3, [r0, #10]
{
    3416:	b510      	push	{r4, lr}
    3418:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    341a:	b12b      	cbz	r3, 3428 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    341c:	68c0      	ldr	r0, [r0, #12]
    341e:	f00d f95d 	bl	106dc <net_buf_unref>
	conn->rx = NULL;
    3422:	2300      	movs	r3, #0
    3424:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3426:	8163      	strh	r3, [r4, #10]
    3428:	bd10      	pop	{r4, pc}

0000342a <atomic_dec>:
}
    342a:	f3bf 8f5b 	dmb	ish
    342e:	e850 3f00 	ldrex	r3, [r0]
    3432:	1e5a      	subs	r2, r3, #1
    3434:	e840 2100 	strex	r1, r2, [r0]
    3438:	2900      	cmp	r1, #0
    343a:	d1f8      	bne.n	342e <atomic_dec+0x4>
    343c:	f3bf 8f5b 	dmb	ish
    3440:	4618      	mov	r0, r3
    3442:	4770      	bx	lr

00003444 <atomic_inc>:
}
    3444:	f3bf 8f5b 	dmb	ish
    3448:	e850 3f00 	ldrex	r3, [r0]
    344c:	1c5a      	adds	r2, r3, #1
    344e:	e840 2100 	strex	r1, r2, [r0]
    3452:	2900      	cmp	r1, #0
    3454:	d1f8      	bne.n	3448 <atomic_inc+0x4>
    3456:	f3bf 8f5b 	dmb	ish
    345a:	4618      	mov	r0, r3
    345c:	4770      	bx	lr
	...

00003460 <bt_conn_get_pkts>:
}
    3460:	4800      	ldr	r0, [pc, #0]	; (3464 <bt_conn_get_pkts+0x4>)
    3462:	4770      	bx	lr
    3464:	20003504 	.word	0x20003504

00003468 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3468:	4b08      	ldr	r3, [pc, #32]	; (348c <notify_le_param_updated+0x24>)
{
    346a:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    346c:	681c      	ldr	r4, [r3, #0]
{
    346e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3470:	b904      	cbnz	r4, 3474 <notify_le_param_updated+0xc>
}
    3472:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3474:	68e6      	ldr	r6, [r4, #12]
    3476:	b13e      	cbz	r6, 3488 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3478:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    347c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    3480:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    3484:	4628      	mov	r0, r5
    3486:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3488:	6924      	ldr	r4, [r4, #16]
    348a:	e7f1      	b.n	3470 <notify_le_param_updated+0x8>
    348c:	200000e8 	.word	0x200000e8

00003490 <le_param_req>:
{
    3490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3492:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3494:	4608      	mov	r0, r1
{
    3496:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3498:	f7fe fe4c 	bl	2134 <bt_le_conn_params_valid>
    349c:	4605      	mov	r5, r0
    349e:	b910      	cbnz	r0, 34a6 <le_param_req+0x16>
		return false;
    34a0:	2500      	movs	r5, #0
}
    34a2:	4628      	mov	r0, r5
    34a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    34a6:	4b09      	ldr	r3, [pc, #36]	; (34cc <le_param_req+0x3c>)
    34a8:	681c      	ldr	r4, [r3, #0]
    34aa:	2c00      	cmp	r4, #0
    34ac:	d0f9      	beq.n	34a2 <le_param_req+0x12>
		if (!cb->le_param_req) {
    34ae:	68a3      	ldr	r3, [r4, #8]
    34b0:	b90b      	cbnz	r3, 34b6 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    34b2:	6924      	ldr	r4, [r4, #16]
    34b4:	e7f9      	b.n	34aa <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    34b6:	4631      	mov	r1, r6
    34b8:	4638      	mov	r0, r7
    34ba:	4798      	blx	r3
    34bc:	2800      	cmp	r0, #0
    34be:	d0ef      	beq.n	34a0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    34c0:	4630      	mov	r0, r6
    34c2:	f7fe fe37 	bl	2134 <bt_le_conn_params_valid>
    34c6:	2800      	cmp	r0, #0
    34c8:	d1f3      	bne.n	34b2 <le_param_req+0x22>
    34ca:	e7e9      	b.n	34a0 <le_param_req+0x10>
    34cc:	200000e8 	.word	0x200000e8

000034d0 <bt_conn_cb_register>:
	cb->_next = callback_list;
    34d0:	4b02      	ldr	r3, [pc, #8]	; (34dc <bt_conn_cb_register+0xc>)
    34d2:	681a      	ldr	r2, [r3, #0]
    34d4:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    34d6:	6018      	str	r0, [r3, #0]
    34d8:	4770      	bx	lr
    34da:	bf00      	nop
    34dc:	200000e8 	.word	0x200000e8

000034e0 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    34e0:	2a01      	cmp	r2, #1
{
    34e2:	b570      	push	{r4, r5, r6, lr}
    34e4:	4605      	mov	r5, r0
    34e6:	460c      	mov	r4, r1
	switch (flags) {
    34e8:	d00f      	beq.n	350a <bt_conn_recv+0x2a>
    34ea:	2a02      	cmp	r2, #2
    34ec:	d110      	bne.n	3510 <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    34ee:	688b      	ldr	r3, [r1, #8]
    34f0:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    34f2:	8943      	ldrh	r3, [r0, #10]
    34f4:	b10b      	cbz	r3, 34fa <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
    34f6:	f7ff ff8d 	bl	3414 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    34fa:	89a3      	ldrh	r3, [r4, #12]
    34fc:	1af3      	subs	r3, r6, r3
    34fe:	3304      	adds	r3, #4
    3500:	b29b      	uxth	r3, r3
    3502:	816b      	strh	r3, [r5, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    3504:	b333      	cbz	r3, 3554 <bt_conn_recv+0x74>
			conn->rx = buf;
    3506:	60ec      	str	r4, [r5, #12]
			return;
    3508:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    350a:	8943      	ldrh	r3, [r0, #10]
    350c:	b93b      	cbnz	r3, 351e <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
    350e:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
    3510:	f7ff ff80 	bl	3414 <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
    3514:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    351a:	f00d b8df 	b.w	106dc <net_buf_unref>
		if (buf->len > conn->rx_len) {
    351e:	898e      	ldrh	r6, [r1, #12]
    3520:	42b3      	cmp	r3, r6
    3522:	d3f4      	bcc.n	350e <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3524:	68c0      	ldr	r0, [r0, #12]
    3526:	3008      	adds	r0, #8
    3528:	f00d f945 	bl	107b6 <net_buf_simple_tailroom>
    352c:	4286      	cmp	r6, r0
    352e:	d8ee      	bhi.n	350e <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3530:	68e8      	ldr	r0, [r5, #12]
    3532:	89a2      	ldrh	r2, [r4, #12]
    3534:	68a1      	ldr	r1, [r4, #8]
    3536:	3008      	adds	r0, #8
    3538:	f00d f908 	bl	1074c <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    353c:	896b      	ldrh	r3, [r5, #10]
    353e:	89a2      	ldrh	r2, [r4, #12]
    3540:	1a9b      	subs	r3, r3, r2
    3542:	816b      	strh	r3, [r5, #10]
		net_buf_unref(buf);
    3544:	4620      	mov	r0, r4
    3546:	f00d f8c9 	bl	106dc <net_buf_unref>
		if (conn->rx_len) {
    354a:	896b      	ldrh	r3, [r5, #10]
    354c:	b973      	cbnz	r3, 356c <bt_conn_recv+0x8c>
		buf = conn->rx;
    354e:	68ec      	ldr	r4, [r5, #12]
		conn->rx_len = 0;
    3550:	816b      	strh	r3, [r5, #10]
		conn->rx = NULL;
    3552:	60eb      	str	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3554:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3556:	89a2      	ldrh	r2, [r4, #12]
    3558:	881b      	ldrh	r3, [r3, #0]
    355a:	3304      	adds	r3, #4
    355c:	4293      	cmp	r3, r2
    355e:	d1d9      	bne.n	3514 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
    3560:	4621      	mov	r1, r4
    3562:	4628      	mov	r0, r5
}
    3564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    3568:	f000 be45 	b.w	41f6 <bt_l2cap_recv>
    356c:	bd70      	pop	{r4, r5, r6, pc}

0000356e <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    356e:	b510      	push	{r4, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    3570:	7a44      	ldrb	r4, [r0, #9]
    3572:	2c03      	cmp	r4, #3
    3574:	d005      	beq.n	3582 <bt_conn_send_cb+0x14>
		BT_ERR("not connected!");
		net_buf_unref(buf);
    3576:	4608      	mov	r0, r1
    3578:	f00d f8b0 	bl	106dc <net_buf_unref>
		return -ENOTCONN;
    357c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    3580:	bd10      	pop	{r4, pc}
	}

	conn_tx(buf)->cb = cb;
    3582:	614a      	str	r2, [r1, #20]

	net_buf_put(&conn->tx_queue, buf);
    3584:	3028      	adds	r0, #40	; 0x28
    3586:	f00d f89c 	bl	106c2 <net_buf_put>
	return 0;
    358a:	2000      	movs	r0, #0
}
    358c:	bd10      	pop	{r4, pc}
	...

00003590 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3594:	4d0d      	ldr	r5, [pc, #52]	; (35cc <bt_conn_notify_tx+0x3c>)
    3596:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3598:	f100 0718 	add.w	r7, r0, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    359c:	f04f 0800 	mov.w	r8, #0
    35a0:	2100      	movs	r1, #0
    35a2:	4638      	mov	r0, r7
    35a4:	f00d fe82 	bl	112ac <_impl_k_queue_get>
    35a8:	4604      	mov	r4, r0
    35aa:	b908      	cbnz	r0, 35b0 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    35ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    35b0:	6863      	ldr	r3, [r4, #4]
    35b2:	b10b      	cbz	r3, 35b8 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    35b4:	4630      	mov	r0, r6
    35b6:	4798      	blx	r3
    35b8:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    35ba:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    35bc:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    35be:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    35c2:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    35c4:	2b00      	cmp	r3, #0
    35c6:	d1eb      	bne.n	35a0 <bt_conn_notify_tx+0x10>
	list->tail = node;
    35c8:	606c      	str	r4, [r5, #4]
    35ca:	e7e7      	b.n	359c <bt_conn_notify_tx+0xc>
    35cc:	20000194 	.word	0x20000194

000035d0 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    35d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35d4:	4605      	mov	r5, r0
    35d6:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    35d8:	483e      	ldr	r0, [pc, #248]	; (36d4 <send_frag+0x104>)
    35da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    35de:	4698      	mov	r8, r3
    35e0:	4614      	mov	r4, r2
    35e2:	f00e f92c 	bl	1183e <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    35e6:	4b3c      	ldr	r3, [pc, #240]	; (36d8 <send_frag+0x108>)
    35e8:	f103 0040 	add.w	r0, r3, #64	; 0x40
    35ec:	f7ff ff0c 	bl	3408 <atomic_get>
    35f0:	b130      	cbz	r0, 3600 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    35f2:	7a5a      	ldrb	r2, [r3, #9]
    35f4:	3a03      	subs	r2, #3
    35f6:	2a01      	cmp	r2, #1
    35f8:	d802      	bhi.n	3600 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    35fa:	4618      	mov	r0, r3
    35fc:	f7ff ffc8 	bl	3590 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3600:	7a6b      	ldrb	r3, [r5, #9]
    3602:	2b03      	cmp	r3, #3
    3604:	d149      	bne.n	369a <send_frag+0xca>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    3606:	2104      	movs	r1, #4
    3608:	f107 0008 	add.w	r0, r7, #8
    360c:	f00d f8af 	bl	1076e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3610:	882a      	ldrh	r2, [r5, #0]
    3612:	4e32      	ldr	r6, [pc, #200]	; (36dc <send_frag+0x10c>)
    3614:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3618:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    361a:	89bb      	ldrh	r3, [r7, #12]
    361c:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    361e:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    3620:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3622:	3b04      	subs	r3, #4
    3624:	8043      	strh	r3, [r0, #2]
    3626:	2302      	movs	r3, #2
    3628:	753b      	strb	r3, [r7, #20]
	return node->next;
    362a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    362c:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    362e:	428c      	cmp	r4, r1
	list->tail = node;
    3630:	bf08      	it	eq
    3632:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    3634:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    3636:	f04f 0320 	mov.w	r3, #32
    363a:	f3ef 8211 	mrs	r2, BASEPRI
    363e:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    3642:	2300      	movs	r3, #0
    3644:	6023      	str	r3, [r4, #0]
    3646:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    3648:	2b00      	cmp	r3, #0
    364a:	d134      	bne.n	36b6 <send_frag+0xe6>
	list->tail = node;
    364c:	616c      	str	r4, [r5, #20]
	list->head = node;
    364e:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3650:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    3654:	4638      	mov	r0, r7
    3656:	f7fe fdb7 	bl	21c8 <bt_send>
	if (err) {
    365a:	2800      	cmp	r0, #0
    365c:	d037      	beq.n	36ce <send_frag+0xfe>
	__asm__ volatile(
    365e:	f04f 0320 	mov.w	r3, #32
    3662:	f3ef 8111 	mrs	r1, BASEPRI
    3666:	f383 8811 	msr	BASEPRI, r3
    366a:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    366c:	2200      	movs	r2, #0
    366e:	b153      	cbz	r3, 3686 <send_frag+0xb6>
    3670:	429c      	cmp	r4, r3
    3672:	d129      	bne.n	36c8 <send_frag+0xf8>
    3674:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    3676:	bb0a      	cbnz	r2, 36bc <send_frag+0xec>
    3678:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    367a:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    367c:	4294      	cmp	r4, r2
    367e:	d100      	bne.n	3682 <send_frag+0xb2>
	list->tail = node;
    3680:	616b      	str	r3, [r5, #20]
	parent->next = child;
    3682:	2300      	movs	r3, #0
    3684:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3686:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    368a:	2300      	movs	r3, #0
    368c:	6063      	str	r3, [r4, #4]
    368e:	6833      	ldr	r3, [r6, #0]
    3690:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3692:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    3694:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    3696:	b903      	cbnz	r3, 369a <send_frag+0xca>
	list->tail = node;
    3698:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    369a:	480e      	ldr	r0, [pc, #56]	; (36d4 <send_frag+0x104>)
    369c:	f00e f8a7 	bl	117ee <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    36a0:	f1b8 0f00 	cmp.w	r8, #0
    36a4:	d004      	beq.n	36b0 <send_frag+0xe0>
		net_buf_unref(buf);
    36a6:	4638      	mov	r0, r7
    36a8:	f00d f818 	bl	106dc <net_buf_unref>
	}
	return false;
    36ac:	f04f 0800 	mov.w	r8, #0
}
    36b0:	4640      	mov	r0, r8
    36b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    36b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    36b8:	616c      	str	r4, [r5, #20]
    36ba:	e7c9      	b.n	3650 <send_frag+0x80>
	parent->next = child;
    36bc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    36be:	696b      	ldr	r3, [r5, #20]
    36c0:	429c      	cmp	r4, r3
	list->tail = node;
    36c2:	bf08      	it	eq
    36c4:	616a      	streq	r2, [r5, #20]
    36c6:	e7dc      	b.n	3682 <send_frag+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    36c8:	461a      	mov	r2, r3
    36ca:	681b      	ldr	r3, [r3, #0]
    36cc:	e7cf      	b.n	366e <send_frag+0x9e>
	return true;
    36ce:	f04f 0801 	mov.w	r8, #1
    36d2:	e7ed      	b.n	36b0 <send_frag+0xe0>
    36d4:	20003504 	.word	0x20003504
    36d8:	200000fc 	.word	0x200000fc
    36dc:	20000194 	.word	0x20000194

000036e0 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    36e0:	b538      	push	{r3, r4, r5, lr}
    36e2:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    36e4:	f100 0528 	add.w	r5, r0, #40	; 0x28
    36e8:	2100      	movs	r1, #0
    36ea:	4628      	mov	r0, r5
    36ec:	f00c ffcc 	bl	10688 <net_buf_get>
    36f0:	b958      	cbnz	r0, 370a <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    36f2:	4620      	mov	r0, r4
    36f4:	f7ff ff4c 	bl	3590 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    36f8:	4620      	mov	r0, r4
    36fa:	f7ff fe8b 	bl	3414 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    36fe:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    3702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    3706:	f7ff be90 	b.w	342a <atomic_dec>
		net_buf_unref(buf);
    370a:	f00c ffe7 	bl	106dc <net_buf_unref>
    370e:	e7eb      	b.n	36e8 <conn_cleanup+0x8>

00003710 <bt_conn_prepare_events>:
{
    3710:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    3712:	4b1f      	ldr	r3, [pc, #124]	; (3790 <bt_conn_prepare_events+0x80>)
    3714:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3716:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    3718:	609a      	str	r2, [r3, #8]
{
    371a:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    371c:	f00e fc95 	bl	1204a <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    3720:	4b1c      	ldr	r3, [pc, #112]	; (3794 <bt_conn_prepare_events+0x84>)
    3722:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3726:	f7ff fe6f 	bl	3408 <atomic_get>
    372a:	4619      	mov	r1, r3
    372c:	b908      	cbnz	r0, 3732 <bt_conn_prepare_events+0x22>
			continue;
    372e:	2001      	movs	r0, #1
    3730:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    3732:	7a5a      	ldrb	r2, [r3, #9]
    3734:	b99a      	cbnz	r2, 375e <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3736:	f3bf 8f5b 	dmb	ish
    373a:	1d1a      	adds	r2, r3, #4
    373c:	e852 0f00 	ldrex	r0, [r2]
    3740:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    3744:	e842 4e00 	strex	lr, r4, [r2]
    3748:	f1be 0f00 	cmp.w	lr, #0
    374c:	d1f6      	bne.n	373c <bt_conn_prepare_events+0x2c>
    374e:	f3bf 8f5b 	dmb	ish
    3752:	0642      	lsls	r2, r0, #25
    3754:	d503      	bpl.n	375e <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    3756:	4618      	mov	r0, r3
    3758:	f7ff ffc2 	bl	36e0 <conn_cleanup>
    375c:	e7e7      	b.n	372e <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    375e:	7a4c      	ldrb	r4, [r1, #9]
    3760:	2c03      	cmp	r4, #3
    3762:	d1e4      	bne.n	372e <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    3764:	f105 0014 	add.w	r0, r5, #20
    3768:	4b0b      	ldr	r3, [pc, #44]	; (3798 <bt_conn_prepare_events+0x88>)
    376a:	2200      	movs	r2, #0
    376c:	2104      	movs	r1, #4
    376e:	f00e fc6c 	bl	1204a <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    3772:	2301      	movs	r3, #1
    3774:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    3778:	f105 0028 	add.w	r0, r5, #40	; 0x28
    377c:	4b07      	ldr	r3, [pc, #28]	; (379c <bt_conn_prepare_events+0x8c>)
    377e:	2200      	movs	r2, #0
    3780:	2104      	movs	r1, #4
    3782:	f00e fc62 	bl	1204a <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    3786:	2302      	movs	r3, #2
    3788:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    378c:	4620      	mov	r0, r4
}
    378e:	bd38      	pop	{r3, r4, r5, pc}
    3790:	200035a0 	.word	0x200035a0
    3794:	200000fc 	.word	0x200000fc
    3798:	20000114 	.word	0x20000114
    379c:	20000124 	.word	0x20000124

000037a0 <bt_conn_add_le>:
{
    37a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    37a2:	4c17      	ldr	r4, [pc, #92]	; (3800 <bt_conn_add_le+0x60>)
    37a4:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    37a8:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    37aa:	4630      	mov	r0, r6
    37ac:	f7ff fe2c 	bl	3408 <atomic_get>
    37b0:	4605      	mov	r5, r0
    37b2:	b108      	cbz	r0, 37b8 <bt_conn_add_le+0x18>
		return NULL;
    37b4:	2000      	movs	r0, #0
    37b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    37b8:	4601      	mov	r1, r0
    37ba:	2298      	movs	r2, #152	; 0x98
    37bc:	4620      	mov	r0, r4
    37be:	f7fe fa6f 	bl	1ca0 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    37c2:	f3bf 8f5b 	dmb	ish
    37c6:	2301      	movs	r3, #1
    37c8:	e856 2f00 	ldrex	r2, [r6]
    37cc:	e846 3100 	strex	r1, r3, [r6]
    37d0:	2900      	cmp	r1, #0
    37d2:	d1f9      	bne.n	37c8 <bt_conn_add_le+0x28>
    37d4:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    37d8:	2207      	movs	r2, #7
    37da:	4639      	mov	r1, r7
    37dc:	f104 0044 	add.w	r0, r4, #68	; 0x44
    37e0:	f7fe fa32 	bl	1c48 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    37e4:	2318      	movs	r3, #24
    37e6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    37ea:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    37ec:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    37f0:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    37f2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    37f6:	4903      	ldr	r1, [pc, #12]	; (3804 <bt_conn_add_le+0x64>)
    37f8:	f00e fae0 	bl	11dbc <k_delayed_work_init>
			conn = &conns[i];
    37fc:	4620      	mov	r0, r4
}
    37fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3800:	200000fc 	.word	0x200000fc
    3804:	00003cf1 	.word	0x00003cf1

00003808 <bt_conn_set_state>:
{
    3808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
    380a:	7a45      	ldrb	r5, [r0, #9]
    380c:	428d      	cmp	r5, r1
{
    380e:	4604      	mov	r4, r0
	if (conn->state == state) {
    3810:	f000 8099 	beq.w	3946 <bt_conn_set_state+0x13e>
	conn->state = state;
    3814:	7241      	strb	r1, [r0, #9]
	switch (old_state) {
    3816:	b19d      	cbz	r5, 3840 <bt_conn_set_state+0x38>
    3818:	2d02      	cmp	r5, #2
    381a:	d015      	beq.n	3848 <bt_conn_set_state+0x40>
	switch (conn->state) {
    381c:	7a63      	ldrb	r3, [r4, #9]
    381e:	2b02      	cmp	r3, #2
    3820:	f000 8086 	beq.w	3930 <bt_conn_set_state+0x128>
    3824:	2b03      	cmp	r3, #3
    3826:	d016      	beq.n	3856 <bt_conn_set_state+0x4e>
    3828:	2b00      	cmp	r3, #0
    382a:	f040 808c 	bne.w	3946 <bt_conn_set_state+0x13e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    382e:	78a3      	ldrb	r3, [r4, #2]
    3830:	2b02      	cmp	r3, #2
    3832:	d12a      	bne.n	388a <bt_conn_set_state+0x82>
	atomic_dec(&conn->ref);
    3834:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    3838:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    383c:	f7ff bdf5 	b.w	342a <atomic_dec>
	atomic_inc(&conn->ref);
    3840:	3040      	adds	r0, #64	; 0x40
    3842:	f7ff fdff 	bl	3444 <atomic_inc>
    3846:	e7e9      	b.n	381c <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3848:	7883      	ldrb	r3, [r0, #2]
    384a:	2b00      	cmp	r3, #0
    384c:	d1e6      	bne.n	381c <bt_conn_set_state+0x14>
			k_delayed_work_cancel(&conn->le.update_work);
    384e:	3070      	adds	r0, #112	; 0x70
    3850:	f00e fac4 	bl	11ddc <k_delayed_work_cancel>
    3854:	e7e2      	b.n	381c <bt_conn_set_state+0x14>
		if (conn->type == BT_CONN_TYPE_SCO) {
    3856:	78a3      	ldrb	r3, [r4, #2]
    3858:	2b02      	cmp	r3, #2
    385a:	d074      	beq.n	3946 <bt_conn_set_state+0x13e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    385c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3860:	f00d fcf8 	bl	11254 <_impl_k_queue_init>
    3864:	f104 0018 	add.w	r0, r4, #24
    3868:	f00d fcf4 	bl	11254 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    386c:	2100      	movs	r1, #0
    386e:	4836      	ldr	r0, [pc, #216]	; (3948 <bt_conn_set_state+0x140>)
    3870:	f00e fc8e 	bl	12190 <_impl_k_poll_signal>
	list->head = NULL;
    3874:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    3876:	4620      	mov	r0, r4
    3878:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    387a:	63e3      	str	r3, [r4, #60]	; 0x3c
    387c:	f000 fbb2 	bl	3fe4 <bt_l2cap_connected>
		notify_connected(conn);
    3880:	4620      	mov	r0, r4
}
    3882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    3886:	f7ff bdaf 	b.w	33e8 <notify_connected>
		if (old_state == BT_CONN_CONNECTED ||
    388a:	1eeb      	subs	r3, r5, #3
    388c:	2b01      	cmp	r3, #1
    388e:	d843      	bhi.n	3918 <bt_conn_set_state+0x110>
			bt_l2cap_disconnected(conn);
    3890:	4620      	mov	r0, r4
    3892:	f000 fbe1 	bl	4058 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    3896:	4b2d      	ldr	r3, [pc, #180]	; (394c <bt_conn_set_state+0x144>)
    3898:	681d      	ldr	r5, [r3, #0]
    389a:	b9ed      	cbnz	r5, 38d8 <bt_conn_set_state+0xd0>
    389c:	4e2c      	ldr	r6, [pc, #176]	; (3950 <bt_conn_set_state+0x148>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    389e:	4f2d      	ldr	r7, [pc, #180]	; (3954 <bt_conn_set_state+0x14c>)
	__asm__ volatile(
    38a0:	f04f 0320 	mov.w	r3, #32
    38a4:	f3ef 8111 	mrs	r1, BASEPRI
    38a8:	f383 8811 	msr	BASEPRI, r3
    38ac:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    38ae:	b12b      	cbz	r3, 38bc <bt_conn_set_state+0xb4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    38b0:	6960      	ldr	r0, [r4, #20]
	return node->next;
    38b2:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    38b4:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    38b6:	4283      	cmp	r3, r0
	list->tail = node;
    38b8:	bf08      	it	eq
    38ba:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    38bc:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    38c0:	b18b      	cbz	r3, 38e6 <bt_conn_set_state+0xde>
    38c2:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    38c4:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    38c6:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    38c8:	605d      	str	r5, [r3, #4]
	list->head = node;
    38ca:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    38cc:	b902      	cbnz	r2, 38d0 <bt_conn_set_state+0xc8>
	list->tail = node;
    38ce:	6073      	str	r3, [r6, #4]
    38d0:	4638      	mov	r0, r7
    38d2:	f00d ff8c 	bl	117ee <_impl_k_sem_give>
    38d6:	e7e3      	b.n	38a0 <bt_conn_set_state+0x98>
		if (cb->disconnected) {
    38d8:	686b      	ldr	r3, [r5, #4]
    38da:	b113      	cbz	r3, 38e2 <bt_conn_set_state+0xda>
			cb->disconnected(conn, conn->err);
    38dc:	7a21      	ldrb	r1, [r4, #8]
    38de:	4620      	mov	r0, r4
    38e0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    38e2:	692d      	ldr	r5, [r5, #16]
    38e4:	e7d9      	b.n	389a <bt_conn_set_state+0x92>
			if (conn->type == BT_CONN_TYPE_LE) {
    38e6:	78a3      	ldrb	r3, [r4, #2]
    38e8:	b91b      	cbnz	r3, 38f2 <bt_conn_set_state+0xea>
				k_delayed_work_cancel(&conn->le.update_work);
    38ea:	f104 0070 	add.w	r0, r4, #112	; 0x70
    38ee:	f00e fa75 	bl	11ddc <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    38f2:	f3bf 8f5b 	dmb	ish
    38f6:	3404      	adds	r4, #4
    38f8:	e854 3f00 	ldrex	r3, [r4]
    38fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3900:	e844 3200 	strex	r2, r3, [r4]
    3904:	2a00      	cmp	r2, #0
    3906:	d1f7      	bne.n	38f8 <bt_conn_set_state+0xf0>
    3908:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    390c:	2100      	movs	r1, #0
    390e:	480e      	ldr	r0, [pc, #56]	; (3948 <bt_conn_set_state+0x140>)
}
    3910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3914:	f00e bc3c 	b.w	12190 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    3918:	2d02      	cmp	r5, #2
    391a:	d103      	bne.n	3924 <bt_conn_set_state+0x11c>
			notify_connected(conn);
    391c:	4620      	mov	r0, r4
    391e:	f7ff fd63 	bl	33e8 <notify_connected>
    3922:	e787      	b.n	3834 <bt_conn_set_state+0x2c>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    3924:	2d01      	cmp	r5, #1
    3926:	d10e      	bne.n	3946 <bt_conn_set_state+0x13e>
			if (conn->err) {
    3928:	7a23      	ldrb	r3, [r4, #8]
    392a:	2b00      	cmp	r3, #0
    392c:	d082      	beq.n	3834 <bt_conn_set_state+0x2c>
    392e:	e7f5      	b.n	391c <bt_conn_set_state+0x114>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3930:	78a3      	ldrb	r3, [r4, #2]
    3932:	b943      	cbnz	r3, 3946 <bt_conn_set_state+0x13e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    3934:	f104 0170 	add.w	r1, r4, #112	; 0x70
    3938:	f640 32b8 	movw	r2, #3000	; 0xbb8
    393c:	4806      	ldr	r0, [pc, #24]	; (3958 <bt_conn_set_state+0x150>)
}
    393e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3942:	f00e baaf 	b.w	11ea4 <k_delayed_work_submit_to_queue>
    3946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3948:	200035a0 	.word	0x200035a0
    394c:	200000e8 	.word	0x200000e8
    3950:	20000194 	.word	0x20000194
    3954:	20003504 	.word	0x20003504
    3958:	20001728 	.word	0x20001728

0000395c <bt_conn_lookup_handle>:
{
    395c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    395e:	4c0b      	ldr	r4, [pc, #44]	; (398c <bt_conn_lookup_handle+0x30>)
{
    3960:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    3962:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3966:	f7ff fd4f 	bl	3408 <atomic_get>
    396a:	b168      	cbz	r0, 3988 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    396c:	7a63      	ldrb	r3, [r4, #9]
    396e:	3b03      	subs	r3, #3
    3970:	2b01      	cmp	r3, #1
    3972:	d808      	bhi.n	3986 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    3974:	8823      	ldrh	r3, [r4, #0]
    3976:	4293      	cmp	r3, r2
    3978:	d105      	bne.n	3986 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    397a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    397e:	f7ff fd61 	bl	3444 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    3982:	4620      	mov	r0, r4
    3984:	bd10      	pop	{r4, pc}
	return NULL;
    3986:	2000      	movs	r0, #0
}
    3988:	bd10      	pop	{r4, pc}
    398a:	bf00      	nop
    398c:	200000fc 	.word	0x200000fc

00003990 <bt_conn_addr_le_cmp>:
{
    3990:	b538      	push	{r3, r4, r5, lr}
    3992:	460d      	mov	r5, r1
    3994:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    3996:	f100 0144 	add.w	r1, r0, #68	; 0x44
    399a:	2207      	movs	r2, #7
    399c:	4628      	mov	r0, r5
    399e:	f7fe f93e 	bl	1c1e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    39a2:	b160      	cbz	r0, 39be <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    39a4:	78e3      	ldrb	r3, [r4, #3]
    39a6:	2207      	movs	r2, #7
    39a8:	b933      	cbnz	r3, 39b8 <bt_conn_addr_le_cmp+0x28>
    39aa:	f104 0152 	add.w	r1, r4, #82	; 0x52
    39ae:	4628      	mov	r0, r5
}
    39b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    39b4:	f7fe b933 	b.w	1c1e <memcmp>
    39b8:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    39bc:	e7f7      	b.n	39ae <bt_conn_addr_le_cmp+0x1e>
    39be:	bd38      	pop	{r3, r4, r5, pc}

000039c0 <bt_conn_lookup_addr_le>:
{
    39c0:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    39c2:	4c0b      	ldr	r4, [pc, #44]	; (39f0 <bt_conn_lookup_addr_le+0x30>)
{
    39c4:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    39c6:	f104 0040 	add.w	r0, r4, #64	; 0x40
    39ca:	f7ff fd1d 	bl	3408 <atomic_get>
    39ce:	b908      	cbnz	r0, 39d4 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    39d0:	2000      	movs	r0, #0
    39d2:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    39d4:	78a3      	ldrb	r3, [r4, #2]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d1fa      	bne.n	39d0 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    39da:	4620      	mov	r0, r4
    39dc:	f7ff ffd8 	bl	3990 <bt_conn_addr_le_cmp>
    39e0:	2800      	cmp	r0, #0
    39e2:	d1f5      	bne.n	39d0 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    39e4:	f104 0040 	add.w	r0, r4, #64	; 0x40
    39e8:	f7ff fd2c 	bl	3444 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    39ec:	4620      	mov	r0, r4
}
    39ee:	bd10      	pop	{r4, pc}
    39f0:	200000fc 	.word	0x200000fc

000039f4 <bt_conn_lookup_state_le>:
{
    39f4:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    39f6:	4c0e      	ldr	r4, [pc, #56]	; (3a30 <bt_conn_lookup_state_le+0x3c>)
{
    39f8:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    39fa:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    39fe:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    3a00:	f7ff fd02 	bl	3408 <atomic_get>
    3a04:	b908      	cbnz	r0, 3a0a <bt_conn_lookup_state_le+0x16>
	return NULL;
    3a06:	2000      	movs	r0, #0
    3a08:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    3a0a:	78a2      	ldrb	r2, [r4, #2]
    3a0c:	2a00      	cmp	r2, #0
    3a0e:	d1fa      	bne.n	3a06 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    3a10:	b93b      	cbnz	r3, 3a22 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    3a12:	7a63      	ldrb	r3, [r4, #9]
    3a14:	42ab      	cmp	r3, r5
    3a16:	d1f6      	bne.n	3a06 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    3a18:	4806      	ldr	r0, [pc, #24]	; (3a34 <bt_conn_lookup_state_le+0x40>)
    3a1a:	f7ff fd13 	bl	3444 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    3a1e:	4804      	ldr	r0, [pc, #16]	; (3a30 <bt_conn_lookup_state_le+0x3c>)
}
    3a20:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    3a22:	4619      	mov	r1, r3
    3a24:	4620      	mov	r0, r4
    3a26:	f7ff ffb3 	bl	3990 <bt_conn_addr_le_cmp>
    3a2a:	2800      	cmp	r0, #0
    3a2c:	d1eb      	bne.n	3a06 <bt_conn_lookup_state_le+0x12>
    3a2e:	e7f0      	b.n	3a12 <bt_conn_lookup_state_le+0x1e>
    3a30:	200000fc 	.word	0x200000fc
    3a34:	2000013c 	.word	0x2000013c

00003a38 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    3a38:	3040      	adds	r0, #64	; 0x40
    3a3a:	f7ff bcf6 	b.w	342a <atomic_dec>

00003a3e <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    3a3e:	3044      	adds	r0, #68	; 0x44
    3a40:	4770      	bx	lr
	...

00003a44 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    3a44:	b570      	push	{r4, r5, r6, lr}
    3a46:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    3a48:	4608      	mov	r0, r1
{
    3a4a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    3a4c:	f7fe fb72 	bl	2134 <bt_le_conn_params_valid>
    3a50:	b908      	cbnz	r0, 3a56 <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    3a52:	2400      	movs	r4, #0
    3a54:	e01d      	b.n	3a92 <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3a56:	481e      	ldr	r0, [pc, #120]	; (3ad0 <bt_conn_create_le+0x8c>)
    3a58:	f7ff fcd6 	bl	3408 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3a5c:	0583      	lsls	r3, r0, #22
    3a5e:	d4f8      	bmi.n	3a52 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    3a60:	4630      	mov	r0, r6
    3a62:	f7ff ffad 	bl	39c0 <bt_conn_lookup_addr_le>
	if (conn) {
    3a66:	4604      	mov	r4, r0
    3a68:	b1a8      	cbz	r0, 3a96 <bt_conn_create_le+0x52>
		switch (conn->state) {
    3a6a:	7a43      	ldrb	r3, [r0, #9]
    3a6c:	2b01      	cmp	r3, #1
    3a6e:	d007      	beq.n	3a80 <bt_conn_create_le+0x3c>
    3a70:	d301      	bcc.n	3a76 <bt_conn_create_le+0x32>
    3a72:	2b03      	cmp	r3, #3
    3a74:	d90d      	bls.n	3a92 <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    3a76:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3a7a:	f7ff fcd6 	bl	342a <atomic_dec>
    3a7e:	e7e8      	b.n	3a52 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    3a80:	886b      	ldrh	r3, [r5, #2]
    3a82:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    3a86:	88ab      	ldrh	r3, [r5, #4]
    3a88:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3a8c:	88eb      	ldrh	r3, [r5, #6]
    3a8e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    3a92:	4620      	mov	r0, r4
    3a94:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    3a96:	4630      	mov	r0, r6
    3a98:	f7ff fe82 	bl	37a0 <bt_conn_add_le>
	if (!conn) {
    3a9c:	4604      	mov	r4, r0
    3a9e:	2800      	cmp	r0, #0
    3aa0:	d0f7      	beq.n	3a92 <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    3aa2:	2207      	movs	r2, #7
    3aa4:	4631      	mov	r1, r6
    3aa6:	3052      	adds	r0, #82	; 0x52
    3aa8:	f7fe f8ce 	bl	1c48 <memcpy>
	conn->le.interval_max = param->interval_max;
    3aac:	886b      	ldrh	r3, [r5, #2]
    3aae:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    3ab2:	88ab      	ldrh	r3, [r5, #4]
    3ab4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3ab8:	88eb      	ldrh	r3, [r5, #6]
    3aba:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3abe:	4620      	mov	r0, r4
    3ac0:	2101      	movs	r1, #1
    3ac2:	f7ff fea1 	bl	3808 <bt_conn_set_state>
	bt_le_scan_update(true);
    3ac6:	2001      	movs	r0, #1
    3ac8:	f7fe fbf8 	bl	22bc <bt_le_scan_update>
	return conn;
    3acc:	e7e1      	b.n	3a92 <bt_conn_create_le+0x4e>
    3ace:	bf00      	nop
    3ad0:	200034e8 	.word	0x200034e8

00003ad4 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    3ad4:	b570      	push	{r4, r5, r6, lr}
    3ad6:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    3ad8:	460d      	mov	r5, r1
    3ada:	2900      	cmp	r1, #0
    3adc:	d13d      	bne.n	3b5a <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    3ade:	4630      	mov	r0, r6
    3ae0:	f7ff ff6e 	bl	39c0 <bt_conn_lookup_addr_le>
	if (!conn) {
    3ae4:	4604      	mov	r4, r0
    3ae6:	b928      	cbnz	r0, 3af4 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    3ae8:	4630      	mov	r0, r6
    3aea:	f7ff fe59 	bl	37a0 <bt_conn_add_le>
		if (!conn) {
    3aee:	4604      	mov	r4, r0
    3af0:	2800      	cmp	r0, #0
    3af2:	d053      	beq.n	3b9c <bt_le_set_auto_conn+0xc8>
    3af4:	1d23      	adds	r3, r4, #4
    3af6:	f104 0640 	add.w	r6, r4, #64	; 0x40
			return -ENOMEM;
		}
	}

	if (param) {
    3afa:	2d00      	cmp	r5, #0
    3afc:	d035      	beq.n	3b6a <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    3afe:	886a      	ldrh	r2, [r5, #2]
    3b00:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    3b04:	88aa      	ldrh	r2, [r5, #4]
    3b06:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3b0a:	88ea      	ldrh	r2, [r5, #6]
    3b0c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3b10:	f3bf 8f5b 	dmb	ish
    3b14:	e853 2f00 	ldrex	r2, [r3]
    3b18:	f042 0101 	orr.w	r1, r2, #1
    3b1c:	e843 1000 	strex	r0, r1, [r3]
    3b20:	2800      	cmp	r0, #0
    3b22:	d1f7      	bne.n	3b14 <bt_le_set_auto_conn+0x40>
    3b24:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    3b28:	07d1      	lsls	r1, r2, #31
    3b2a:	d402      	bmi.n	3b32 <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    3b2c:	4630      	mov	r0, r6
    3b2e:	f7ff fc89 	bl	3444 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    3b32:	7a63      	ldrb	r3, [r4, #9]
    3b34:	b963      	cbnz	r3, 3b50 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3b36:	481b      	ldr	r0, [pc, #108]	; (3ba4 <bt_le_set_auto_conn+0xd0>)
    3b38:	f7ff fc66 	bl	3408 <atomic_get>
    3b3c:	0783      	lsls	r3, r0, #30
    3b3e:	d507      	bpl.n	3b50 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    3b40:	b11d      	cbz	r5, 3b4a <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3b42:	2101      	movs	r1, #1
    3b44:	4620      	mov	r0, r4
    3b46:	f7ff fe5f 	bl	3808 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    3b4a:	2000      	movs	r0, #0
    3b4c:	f7fe fbb6 	bl	22bc <bt_le_scan_update>
	atomic_dec(&conn->ref);
    3b50:	4630      	mov	r0, r6
    3b52:	f7ff fc6a 	bl	342a <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    3b56:	2000      	movs	r0, #0
    3b58:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    3b5a:	4608      	mov	r0, r1
    3b5c:	f7fe faea 	bl	2134 <bt_le_conn_params_valid>
    3b60:	2800      	cmp	r0, #0
    3b62:	d1bc      	bne.n	3ade <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    3b64:	f06f 0015 	mvn.w	r0, #21
    3b68:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b6a:	f3bf 8f5b 	dmb	ish
    3b6e:	e853 2f00 	ldrex	r2, [r3]
    3b72:	f022 0101 	bic.w	r1, r2, #1
    3b76:	e843 1000 	strex	r0, r1, [r3]
    3b7a:	2800      	cmp	r0, #0
    3b7c:	d1f7      	bne.n	3b6e <bt_le_set_auto_conn+0x9a>
    3b7e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    3b82:	07d2      	lsls	r2, r2, #31
    3b84:	d5d5      	bpl.n	3b32 <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    3b86:	4630      	mov	r0, r6
    3b88:	f7ff fc4f 	bl	342a <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    3b8c:	7a63      	ldrb	r3, [r4, #9]
    3b8e:	2b01      	cmp	r3, #1
    3b90:	d1cf      	bne.n	3b32 <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3b92:	4629      	mov	r1, r5
    3b94:	4620      	mov	r0, r4
    3b96:	f7ff fe37 	bl	3808 <bt_conn_set_state>
    3b9a:	e7ca      	b.n	3b32 <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    3b9c:	f06f 000b 	mvn.w	r0, #11
}
    3ba0:	bd70      	pop	{r4, r5, r6, pc}
    3ba2:	bf00      	nop
    3ba4:	200034e8 	.word	0x200034e8

00003ba8 <bt_conn_disconnect>:
{
    3ba8:	b570      	push	{r4, r5, r6, lr}
    3baa:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3bac:	7881      	ldrb	r1, [r0, #2]
{
    3bae:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3bb0:	b911      	cbnz	r1, 3bb8 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    3bb2:	3044      	adds	r0, #68	; 0x44
    3bb4:	f7ff ff8e 	bl	3ad4 <bt_le_set_auto_conn>
	switch (conn->state) {
    3bb8:	7a63      	ldrb	r3, [r4, #9]
    3bba:	3b01      	subs	r3, #1
    3bbc:	2b03      	cmp	r3, #3
    3bbe:	d803      	bhi.n	3bc8 <bt_conn_disconnect+0x20>
    3bc0:	e8df f003 	tbb	[pc, r3]
    3bc4:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    3bc8:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    3bcc:	4628      	mov	r0, r5
    3bce:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3bd0:	4620      	mov	r0, r4
		conn->err = reason;
    3bd2:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3bd4:	2100      	movs	r1, #0
    3bd6:	f7ff fe17 	bl	3808 <bt_conn_set_state>
		bt_le_scan_update(false);
    3bda:	2000      	movs	r0, #0
    3bdc:	f7fe fb6e 	bl	22bc <bt_le_scan_update>
		return 0;
    3be0:	2500      	movs	r5, #0
    3be2:	e7f3      	b.n	3bcc <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    3be4:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3be8:	f00e f8f8 	bl	11ddc <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    3bec:	2100      	movs	r1, #0
    3bee:	f242 000e 	movw	r0, #8206	; 0x200e
}
    3bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    3bf6:	f7fe baef 	b.w	21d8 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    3bfa:	2103      	movs	r1, #3
    3bfc:	f240 4006 	movw	r0, #1030	; 0x406
    3c00:	f7fe f98a 	bl	1f18 <bt_hci_cmd_create>
	if (!buf) {
    3c04:	4605      	mov	r5, r0
    3c06:	b198      	cbz	r0, 3c30 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    3c08:	2103      	movs	r1, #3
    3c0a:	3008      	adds	r0, #8
    3c0c:	f00c fd98 	bl	10740 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    3c10:	8823      	ldrh	r3, [r4, #0]
    3c12:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    3c14:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    3c16:	4629      	mov	r1, r5
    3c18:	f240 4006 	movw	r0, #1030	; 0x406
    3c1c:	f7fe fadc 	bl	21d8 <bt_hci_cmd_send>
	if (err) {
    3c20:	4605      	mov	r5, r0
    3c22:	2800      	cmp	r0, #0
    3c24:	d1d2      	bne.n	3bcc <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    3c26:	2104      	movs	r1, #4
    3c28:	4620      	mov	r0, r4
    3c2a:	f7ff fded 	bl	3808 <bt_conn_set_state>
    3c2e:	e7cd      	b.n	3bcc <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    3c30:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3c34:	e7ca      	b.n	3bcc <bt_conn_disconnect+0x24>

00003c36 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    3c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c38:	4607      	mov	r7, r0
    3c3a:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    3c3c:	f242 0013 	movw	r0, #8211	; 0x2013
    3c40:	210e      	movs	r1, #14
    3c42:	f7fe f969 	bl	1f18 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    3c46:	4606      	mov	r6, r0
    3c48:	b1c8      	cbz	r0, 3c7e <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    3c4a:	210e      	movs	r1, #14
    3c4c:	3008      	adds	r0, #8
    3c4e:	f00c fd77 	bl	10740 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    3c52:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    3c54:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    3c56:	220e      	movs	r2, #14
    3c58:	f7fe f822 	bl	1ca0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    3c5c:	883b      	ldrh	r3, [r7, #0]
    3c5e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    3c60:	882b      	ldrh	r3, [r5, #0]
    3c62:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    3c64:	886b      	ldrh	r3, [r5, #2]
    3c66:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    3c68:	88ab      	ldrh	r3, [r5, #4]
    3c6a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    3c6c:	88eb      	ldrh	r3, [r5, #6]
    3c6e:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3c70:	4631      	mov	r1, r6
    3c72:	f242 0013 	movw	r0, #8211	; 0x2013
}
    3c76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3c7a:	f7fe baad 	b.w	21d8 <bt_hci_cmd_send>
}
    3c7e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003c84 <bt_conn_le_param_update>:
{
    3c84:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    3c86:	880a      	ldrh	r2, [r1, #0]
    3c88:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    3c8c:	429a      	cmp	r2, r3
{
    3c8e:	4604      	mov	r4, r0
    3c90:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    3c92:	d80c      	bhi.n	3cae <bt_conn_le_param_update+0x2a>
    3c94:	884a      	ldrh	r2, [r1, #2]
    3c96:	429a      	cmp	r2, r3
    3c98:	d309      	bcc.n	3cae <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    3c9a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    3c9e:	888b      	ldrh	r3, [r1, #4]
    3ca0:	429a      	cmp	r2, r3
    3ca2:	d104      	bne.n	3cae <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    3ca4:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    3ca8:	88cb      	ldrh	r3, [r1, #6]
    3caa:	429a      	cmp	r2, r3
    3cac:	d01a      	beq.n	3ce4 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    3cae:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3cb2:	f00e f893 	bl	11ddc <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    3cb6:	4b0d      	ldr	r3, [pc, #52]	; (3cec <bt_conn_le_param_update+0x68>)
    3cb8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3cbc:	079a      	lsls	r2, r3, #30
    3cbe:	d503      	bpl.n	3cc8 <bt_conn_le_param_update+0x44>
    3cc0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    3cc4:	079b      	lsls	r3, r3, #30
    3cc6:	d401      	bmi.n	3ccc <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    3cc8:	78e3      	ldrb	r3, [r4, #3]
    3cca:	b92b      	cbnz	r3, 3cd8 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    3ccc:	4629      	mov	r1, r5
    3cce:	4620      	mov	r0, r4
}
    3cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    3cd4:	f7ff bfaf 	b.w	3c36 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    3cd8:	4629      	mov	r1, r5
    3cda:	4620      	mov	r0, r4
}
    3cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    3ce0:	f000 baa6 	b.w	4230 <bt_l2cap_update_conn_param>
}
    3ce4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3ce8:	bd38      	pop	{r3, r4, r5, pc}
    3cea:	bf00      	nop
    3cec:	20003478 	.word	0x20003478

00003cf0 <le_conn_update>:
{
    3cf0:	4603      	mov	r3, r0
    3cf2:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3cf4:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    3cf8:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    3cfa:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3cfe:	d105      	bne.n	3d0c <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    3d00:	2113      	movs	r1, #19
    3d02:	f7ff ff51 	bl	3ba8 <bt_conn_disconnect>
}
    3d06:	b003      	add	sp, #12
    3d08:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3d0c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    3d10:	f8ad 2000 	strh.w	r2, [sp]
    3d14:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    3d18:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    3d1c:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3d1e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    3d22:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    3d26:	f8ad 2004 	strh.w	r2, [sp, #4]
    3d2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    3d2e:	f7ff ffa9 	bl	3c84 <bt_conn_le_param_update>
    3d32:	e7e8      	b.n	3d06 <le_conn_update+0x16>

00003d34 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    3d34:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    3d36:	4b08      	ldr	r3, [pc, #32]	; (3d58 <bt_conn_create_pdu+0x24>)
{
    3d38:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    3d3a:	2800      	cmp	r0, #0
    3d3c:	bf08      	it	eq
    3d3e:	4618      	moveq	r0, r3
    3d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3d44:	f00c fc9a 	bl	1067c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    3d48:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    3d4a:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    3d4c:	3008      	adds	r0, #8
    3d4e:	f00c fcb4 	bl	106ba <net_buf_simple_reserve>

	return buf;
}
    3d52:	4620      	mov	r0, r4
    3d54:	bd38      	pop	{r3, r4, r5, pc}
    3d56:	bf00      	nop
    3d58:	20003944 	.word	0x20003944

00003d5c <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    3d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d60:	4606      	mov	r6, r0
    3d62:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    3d64:	4816      	ldr	r0, [pc, #88]	; (3dc0 <create_frag.isra.8+0x64>)
    3d66:	2100      	movs	r1, #0
    3d68:	f7ff ffe4 	bl	3d34 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    3d6c:	7833      	ldrb	r3, [r6, #0]
    3d6e:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    3d70:	4605      	mov	r5, r0
    3d72:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    3d76:	d005      	beq.n	3d84 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    3d78:	f00c fcb0 	bl	106dc <net_buf_unref>
		return NULL;
    3d7c:	4635      	mov	r5, r6
}
    3d7e:	4628      	mov	r0, r5
    3d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    3d84:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3d86:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    3d8a:	4e0e      	ldr	r6, [pc, #56]	; (3dc4 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3d8c:	4638      	mov	r0, r7
    3d8e:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    3d92:	f00c fd10 	bl	107b6 <net_buf_simple_tailroom>
    3d96:	4580      	cmp	r8, r0
    3d98:	d20c      	bcs.n	3db4 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    3d9a:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    3d9e:	f854 1f08 	ldr.w	r1, [r4, #8]!
    3da2:	4632      	mov	r2, r6
    3da4:	4638      	mov	r0, r7
    3da6:	f00c fcd1 	bl	1074c <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    3daa:	4631      	mov	r1, r6
    3dac:	4620      	mov	r0, r4
    3dae:	f00c fce6 	bl	1077e <net_buf_simple_pull>
    3db2:	e7e4      	b.n	3d7e <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3db4:	4638      	mov	r0, r7
    3db6:	f00c fcfe 	bl	107b6 <net_buf_simple_tailroom>
    3dba:	b286      	uxth	r6, r0
    3dbc:	e7ef      	b.n	3d9e <create_frag.isra.8+0x42>
    3dbe:	bf00      	nop
    3dc0:	20003964 	.word	0x20003964
    3dc4:	20003478 	.word	0x20003478

00003dc8 <bt_conn_process_tx>:
{
    3dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    3dca:	7a43      	ldrb	r3, [r0, #9]
{
    3dcc:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    3dce:	b993      	cbnz	r3, 3df6 <bt_conn_process_tx+0x2e>
    3dd0:	f3bf 8f5b 	dmb	ish
    3dd4:	1d03      	adds	r3, r0, #4
    3dd6:	e853 2f00 	ldrex	r2, [r3]
    3dda:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    3dde:	e843 1400 	strex	r4, r1, [r3]
    3de2:	2c00      	cmp	r4, #0
    3de4:	d1f7      	bne.n	3dd6 <bt_conn_process_tx+0xe>
    3de6:	f3bf 8f5b 	dmb	ish
    3dea:	0653      	lsls	r3, r2, #25
    3dec:	d503      	bpl.n	3df6 <bt_conn_process_tx+0x2e>
}
    3dee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    3df2:	f7ff bc75 	b.w	36e0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    3df6:	2100      	movs	r1, #0
    3df8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3dfc:	f00c fc44 	bl	10688 <net_buf_get>
	BT_ASSERT(buf);
    3e00:	4604      	mov	r4, r0
    3e02:	b928      	cbnz	r0, 3e10 <bt_conn_process_tx+0x48>
    3e04:	4040      	eors	r0, r0
    3e06:	f380 8811 	msr	BASEPRI, r0
    3e0a:	f04f 0004 	mov.w	r0, #4
    3e0e:	df02      	svc	2
	return bt_dev.le.mtu;
    3e10:	4e19      	ldr	r6, [pc, #100]	; (3e78 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    3e12:	8981      	ldrh	r1, [r0, #12]
    3e14:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    3e18:	4291      	cmp	r1, r2
    3e1a:	d807      	bhi.n	3e2c <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    3e1c:	2300      	movs	r3, #0
    3e1e:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    3e20:	4621      	mov	r1, r4
    3e22:	4628      	mov	r0, r5
    3e24:	f7ff fbd4 	bl	35d0 <send_frag>
	if (!send_buf(conn, buf)) {
    3e28:	b140      	cbz	r0, 3e3c <bt_conn_process_tx+0x74>
}
    3e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e2c:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
    3e30:	4601      	mov	r1, r0
    3e32:	4638      	mov	r0, r7
    3e34:	f7ff ff92 	bl	3d5c <create_frag.isra.8>
	if (!frag) {
    3e38:	4601      	mov	r1, r0
    3e3a:	b920      	cbnz	r0, 3e46 <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    3e3c:	4620      	mov	r0, r4
}
    3e3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    3e42:	f00c bc4b 	b.w	106dc <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    3e46:	2301      	movs	r3, #1
    3e48:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3e4a:	4628      	mov	r0, r5
    3e4c:	f7ff fbc0 	bl	35d0 <send_frag>
    3e50:	2800      	cmp	r0, #0
    3e52:	d0f3      	beq.n	3e3c <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    3e54:	89a2      	ldrh	r2, [r4, #12]
    3e56:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    3e5a:	429a      	cmp	r2, r3
    3e5c:	d802      	bhi.n	3e64 <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    3e5e:	2300      	movs	r3, #0
    3e60:	2201      	movs	r2, #1
    3e62:	e7dd      	b.n	3e20 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    3e64:	4621      	mov	r1, r4
    3e66:	4638      	mov	r0, r7
    3e68:	f7ff ff78 	bl	3d5c <create_frag.isra.8>
		if (!frag) {
    3e6c:	4601      	mov	r1, r0
    3e6e:	2800      	cmp	r0, #0
    3e70:	d0e4      	beq.n	3e3c <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3e72:	2301      	movs	r3, #1
    3e74:	461a      	mov	r2, r3
    3e76:	e7e8      	b.n	3e4a <bt_conn_process_tx+0x82>
    3e78:	20003478 	.word	0x20003478

00003e7c <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    3e7c:	4b03      	ldr	r3, [pc, #12]	; (3e8c <bt_conn_get_id+0x10>)
    3e7e:	1ac0      	subs	r0, r0, r3
    3e80:	4b03      	ldr	r3, [pc, #12]	; (3e90 <bt_conn_get_id+0x14>)
    3e82:	10c0      	asrs	r0, r0, #3
    3e84:	4358      	muls	r0, r3
}
    3e86:	b2c0      	uxtb	r0, r0
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop
    3e8c:	200000fc 	.word	0x200000fc
    3e90:	286bca1b 	.word	0x286bca1b

00003e94 <bt_conn_init>:
	parent->next = child;
    3e94:	4b12      	ldr	r3, [pc, #72]	; (3ee0 <bt_conn_init+0x4c>)
    3e96:	4a13      	ldr	r2, [pc, #76]	; (3ee4 <bt_conn_init+0x50>)
    3e98:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    3e9a:	b510      	push	{r4, lr}
    3e9c:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    3e9e:	6859      	ldr	r1, [r3, #4]
    3ea0:	b901      	cbnz	r1, 3ea4 <bt_conn_init+0x10>
	list->tail = node;
    3ea2:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    3ea4:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    3ea6:	6092      	str	r2, [r2, #8]
	list->head = node;
    3ea8:	4a0f      	ldr	r2, [pc, #60]	; (3ee8 <bt_conn_init+0x54>)
    3eaa:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    3eac:	b901      	cbnz	r1, 3eb0 <bt_conn_init+0x1c>
	list->tail = node;
    3eae:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    3eb0:	f001 f9b6 	bl	5220 <bt_att_init>

	err = bt_smp_init();
    3eb4:	f001 fe38 	bl	5b28 <bt_smp_init>
	if (err) {
    3eb8:	4604      	mov	r4, r0
    3eba:	b970      	cbnz	r0, 3eda <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    3ebc:	f000 f9e0 	bl	4280 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    3ec0:	480a      	ldr	r0, [pc, #40]	; (3eec <bt_conn_init+0x58>)
    3ec2:	f7ff faa1 	bl	3408 <atomic_get>
    3ec6:	b140      	cbz	r0, 3eda <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3ec8:	4809      	ldr	r0, [pc, #36]	; (3ef0 <bt_conn_init+0x5c>)
    3eca:	f7ff fa9d 	bl	3408 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    3ece:	07c3      	lsls	r3, r0, #31
    3ed0:	d503      	bpl.n	3eda <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3ed2:	2101      	movs	r1, #1
    3ed4:	4807      	ldr	r0, [pc, #28]	; (3ef4 <bt_conn_init+0x60>)
    3ed6:	f7ff fc97 	bl	3808 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    3eda:	4620      	mov	r0, r4
    3edc:	bd10      	pop	{r4, pc}
    3ede:	bf00      	nop
    3ee0:	20000194 	.word	0x20000194
    3ee4:	200000ec 	.word	0x200000ec
    3ee8:	200000f4 	.word	0x200000f4
    3eec:	2000013c 	.word	0x2000013c
    3ef0:	20000100 	.word	0x20000100
    3ef4:	200000fc 	.word	0x200000fc

00003ef8 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    3ef8:	4770      	bx	lr
	...

00003efc <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    3efc:	4b04      	ldr	r3, [pc, #16]	; (3f10 <l2cap_accept+0x14>)
    3efe:	6818      	ldr	r0, [r3, #0]
    3f00:	b918      	cbnz	r0, 3f0a <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    3f02:	4a04      	ldr	r2, [pc, #16]	; (3f14 <l2cap_accept+0x18>)
    3f04:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    3f06:	600b      	str	r3, [r1, #0]

		return 0;
    3f08:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    3f0a:	f06f 000b 	mvn.w	r0, #11
}
    3f0e:	4770      	bx	lr
    3f10:	2000019c 	.word	0x2000019c
    3f14:	200035bc 	.word	0x200035bc

00003f18 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    3f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f1a:	4607      	mov	r7, r0
    3f1c:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3f1e:	2000      	movs	r0, #0
    3f20:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    3f22:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3f24:	f7ff ff06 	bl	3d34 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    3f28:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3f2a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    3f2c:	3008      	adds	r0, #8
    3f2e:	f00c fc07 	bl	10740 <net_buf_simple_add>
	hdr->code = code;
    3f32:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    3f34:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    3f36:	8045      	strh	r5, [r0, #2]
}
    3f38:	4620      	mov	r0, r4
    3f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003f3c <l2cap_connected>:
    3f3c:	4770      	bx	lr
	...

00003f40 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    3f40:	2300      	movs	r3, #0
    3f42:	6083      	str	r3, [r0, #8]
    3f44:	4b05      	ldr	r3, [pc, #20]	; (3f5c <bt_l2cap_le_fixed_chan_register+0x1c>)
    3f46:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    3f48:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    3f4c:	b911      	cbnz	r1, 3f54 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    3f4e:	605a      	str	r2, [r3, #4]
	list->head = node;
    3f50:	601a      	str	r2, [r3, #0]
    3f52:	4770      	bx	lr
	parent->next = child;
    3f54:	600a      	str	r2, [r1, #0]
	list->tail = node;
    3f56:	605a      	str	r2, [r3, #4]
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop
    3f5c:	20000234 	.word	0x20000234

00003f60 <bt_l2cap_chan_remove>:
{
    3f60:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3f62:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3f64:	b113      	cbz	r3, 3f6c <bt_l2cap_chan_remove+0xc>
    3f66:	3b08      	subs	r3, #8
    3f68:	2200      	movs	r2, #0
    3f6a:	b903      	cbnz	r3, 3f6e <bt_l2cap_chan_remove+0xe>
    3f6c:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    3f6e:	428b      	cmp	r3, r1
    3f70:	f103 0408 	add.w	r4, r3, #8
    3f74:	d10f      	bne.n	3f96 <bt_l2cap_chan_remove+0x36>
    3f76:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    3f78:	b93a      	cbnz	r2, 3f8a <bt_l2cap_chan_remove+0x2a>
    3f7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    3f7c:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    3f7e:	4294      	cmp	r4, r2
    3f80:	d100      	bne.n	3f84 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    3f82:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    3f84:	2200      	movs	r2, #0
    3f86:	609a      	str	r2, [r3, #8]
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    3f8c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    3f8e:	428c      	cmp	r4, r1
	list->tail = node;
    3f90:	bf08      	it	eq
    3f92:	63c2      	streq	r2, [r0, #60]	; 0x3c
    3f94:	e7f6      	b.n	3f84 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    3f96:	4622      	mov	r2, r4
    3f98:	2c00      	cmp	r4, #0
    3f9a:	d0e7      	beq.n	3f6c <bt_l2cap_chan_remove+0xc>
	return node->next;
    3f9c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d0e4      	beq.n	3f6c <bt_l2cap_chan_remove+0xc>
    3fa2:	3b08      	subs	r3, #8
    3fa4:	e7e1      	b.n	3f6a <bt_l2cap_chan_remove+0xa>

00003fa6 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    3fa6:	6803      	ldr	r3, [r0, #0]
{
    3fa8:	b510      	push	{r4, lr}
    3faa:	4604      	mov	r4, r0
	if (!chan->conn) {
    3fac:	b12b      	cbz	r3, 3fba <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    3fae:	6843      	ldr	r3, [r0, #4]
    3fb0:	685b      	ldr	r3, [r3, #4]
    3fb2:	b103      	cbz	r3, 3fb6 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    3fb4:	4798      	blx	r3
	chan->conn = NULL;
    3fb6:	2300      	movs	r3, #0
    3fb8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    3fba:	68e3      	ldr	r3, [r4, #12]
    3fbc:	b11b      	cbz	r3, 3fc6 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    3fbe:	4620      	mov	r0, r4
}
    3fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    3fc4:	4718      	bx	r3
    3fc6:	bd10      	pop	{r4, pc}

00003fc8 <l2cap_rtx_timeout>:
{
    3fc8:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    3fca:	f1a0 0410 	sub.w	r4, r0, #16
    3fce:	4621      	mov	r1, r4
    3fd0:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3fd4:	f7ff ffc4 	bl	3f60 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    3fd8:	4620      	mov	r0, r4
}
    3fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
    3fde:	f7ff bfe2 	b.w	3fa6 <bt_l2cap_chan_del>
	...

00003fe4 <bt_l2cap_connected>:
{
    3fe4:	4b1a      	ldr	r3, [pc, #104]	; (4050 <bt_l2cap_connected+0x6c>)
    3fe6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3fea:	681c      	ldr	r4, [r3, #0]
    3fec:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    3fee:	b12c      	cbz	r4, 3ffc <bt_l2cap_connected+0x18>
	parent->next = child;
    3ff0:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    3ff2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4054 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    3ff6:	3c08      	subs	r4, #8
    3ff8:	46b9      	mov	r9, r7
    3ffa:	b914      	cbnz	r4, 4002 <bt_l2cap_connected+0x1e>
}
    3ffc:	b003      	add	sp, #12
    3ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4002:	6863      	ldr	r3, [r4, #4]
    4004:	a901      	add	r1, sp, #4
    4006:	4630      	mov	r0, r6
    4008:	4798      	blx	r3
    400a:	2800      	cmp	r0, #0
    400c:	db18      	blt.n	4040 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    400e:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4010:	8823      	ldrh	r3, [r4, #0]
    4012:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4014:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4018:	4641      	mov	r1, r8
    401a:	f105 0010 	add.w	r0, r5, #16
    401e:	f00d fecd 	bl	11dbc <k_delayed_work_init>
    4022:	60af      	str	r7, [r5, #8]
    4024:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    4026:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    402a:	b972      	cbnz	r2, 404a <bt_l2cap_connected+0x66>
	list->tail = node;
    402c:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    402e:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    4030:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4032:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4034:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    4036:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	b103      	cbz	r3, 4040 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    403e:	4798      	blx	r3
	return node->next;
    4040:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4042:	2c00      	cmp	r4, #0
    4044:	d0da      	beq.n	3ffc <bt_l2cap_connected+0x18>
    4046:	3c08      	subs	r4, #8
    4048:	e7d7      	b.n	3ffa <bt_l2cap_connected+0x16>
	parent->next = child;
    404a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    404c:	63f3      	str	r3, [r6, #60]	; 0x3c
    404e:	e7ef      	b.n	4030 <bt_l2cap_connected+0x4c>
    4050:	20000234 	.word	0x20000234
    4054:	00003fc9 	.word	0x00003fc9

00004058 <bt_l2cap_disconnected>:
{
    4058:	6b83      	ldr	r3, [r0, #56]	; 0x38
    405a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    405c:	b1a3      	cbz	r3, 4088 <bt_l2cap_disconnected+0x30>
    405e:	f1b3 0008 	subs.w	r0, r3, #8
    4062:	d10a      	bne.n	407a <bt_l2cap_disconnected+0x22>
    4064:	bd10      	pop	{r4, pc}
    4066:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    4068:	f7ff ff9d 	bl	3fa6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    406c:	b164      	cbz	r4, 4088 <bt_l2cap_disconnected+0x30>
	return node->next;
    406e:	68a3      	ldr	r3, [r4, #8]
    4070:	b103      	cbz	r3, 4074 <bt_l2cap_disconnected+0x1c>
    4072:	3b08      	subs	r3, #8
{
    4074:	4620      	mov	r0, r4
    4076:	461c      	mov	r4, r3
    4078:	e7f6      	b.n	4068 <bt_l2cap_disconnected+0x10>
    407a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    407c:	2c00      	cmp	r4, #0
    407e:	d1f2      	bne.n	4066 <bt_l2cap_disconnected+0xe>
}
    4080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    4084:	f7ff bf8f 	b.w	3fa6 <bt_l2cap_chan_del>
    4088:	bd10      	pop	{r4, pc}

0000408a <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    408a:	3104      	adds	r1, #4
    408c:	f7ff be52 	b.w	3d34 <bt_conn_create_pdu>

00004090 <bt_l2cap_send_cb>:
{
    4090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4092:	4614      	mov	r4, r2
    4094:	4605      	mov	r5, r0
    4096:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    4098:	f102 0008 	add.w	r0, r2, #8
    409c:	2104      	movs	r1, #4
{
    409e:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    40a0:	f00c fb65 	bl	1076e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    40a4:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    40a6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    40a8:	3904      	subs	r1, #4
    40aa:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    40ac:	4632      	mov	r2, r6
    40ae:	4621      	mov	r1, r4
    40b0:	4628      	mov	r0, r5
}
    40b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    40b6:	f7ff ba5a 	b.w	356e <bt_conn_send_cb>

000040ba <l2cap_recv>:
{
    40ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    40bc:	898b      	ldrh	r3, [r1, #12]
    40be:	2b03      	cmp	r3, #3
{
    40c0:	4606      	mov	r6, r0
    40c2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    40c4:	d912      	bls.n	40ec <l2cap_recv+0x32>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    40c6:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    40c8:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    40ca:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    40ce:	8867      	ldrh	r7, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    40d0:	f00c fb55 	bl	1077e <net_buf_simple_pull>
	if (buf->len != len) {
    40d4:	89aa      	ldrh	r2, [r5, #12]
    40d6:	42ba      	cmp	r2, r7
    40d8:	d108      	bne.n	40ec <l2cap_recv+0x32>
	if (!hdr->ident) {
    40da:	7861      	ldrb	r1, [r4, #1]
    40dc:	b131      	cbz	r1, 40ec <l2cap_recv+0x32>
	switch (hdr->code) {
    40de:	7823      	ldrb	r3, [r4, #0]
    40e0:	2b12      	cmp	r3, #18
    40e2:	d005      	beq.n	40f0 <l2cap_recv+0x36>
    40e4:	2b13      	cmp	r3, #19
    40e6:	d001      	beq.n	40ec <l2cap_recv+0x32>
    40e8:	2b01      	cmp	r3, #1
    40ea:	d154      	bne.n	4196 <l2cap_recv+0xdc>
}
    40ec:	b003      	add	sp, #12
    40ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
    40f0:	2a07      	cmp	r2, #7
    40f2:	d9fb      	bls.n	40ec <l2cap_recv+0x32>
    40f4:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    40f6:	78e6      	ldrb	r6, [r4, #3]
    40f8:	b18e      	cbz	r6, 411e <l2cap_recv+0x64>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    40fa:	2202      	movs	r2, #2
    40fc:	2001      	movs	r0, #1
    40fe:	f7ff ff0b 	bl	3f18 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4102:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4104:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4106:	3008      	adds	r0, #8
    4108:	f00c fb1a 	bl	10740 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    410c:	2300      	movs	r3, #0
    410e:	7003      	strb	r3, [r0, #0]
    4110:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4112:	462a      	mov	r2, r5
    4114:	2105      	movs	r1, #5
    4116:	4620      	mov	r0, r4
    4118:	f7ff ffba 	bl	4090 <bt_l2cap_send_cb>
    411c:	e7e6      	b.n	40ec <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    411e:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4120:	7858      	ldrb	r0, [r3, #1]
    4122:	781a      	ldrb	r2, [r3, #0]
    4124:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4128:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    412c:	78d8      	ldrb	r0, [r3, #3]
    412e:	789a      	ldrb	r2, [r3, #2]
    4130:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4134:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(req->latency);
    4138:	7958      	ldrb	r0, [r3, #5]
    413a:	791a      	ldrb	r2, [r3, #4]
    413c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4140:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(req->timeout);
    4144:	799a      	ldrb	r2, [r3, #6]
    4146:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4148:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    414a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    414e:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4150:	f8ad 3006 	strh.w	r3, [sp, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4154:	f7ff fee0 	bl	3f18 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    4158:	4669      	mov	r1, sp
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    415a:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    415c:	4620      	mov	r0, r4
    415e:	f7ff f997 	bl	3490 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4162:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4164:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    4166:	f107 0008 	add.w	r0, r7, #8
    416a:	f00c fae9 	bl	10740 <net_buf_simple_add>
	if (accepted) {
    416e:	b175      	cbz	r5, 418e <l2cap_recv+0xd4>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    4170:	7006      	strb	r6, [r0, #0]
    4172:	7046      	strb	r6, [r0, #1]
    4174:	2300      	movs	r3, #0
    4176:	463a      	mov	r2, r7
    4178:	2105      	movs	r1, #5
    417a:	4620      	mov	r0, r4
    417c:	f7ff ff88 	bl	4090 <bt_l2cap_send_cb>
	if (accepted) {
    4180:	2d00      	cmp	r5, #0
    4182:	d0b3      	beq.n	40ec <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
    4184:	4669      	mov	r1, sp
    4186:	4620      	mov	r0, r4
    4188:	f7ff fd55 	bl	3c36 <bt_conn_le_conn_update>
    418c:	e7ae      	b.n	40ec <l2cap_recv+0x32>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    418e:	2301      	movs	r3, #1
    4190:	7003      	strb	r3, [r0, #0]
    4192:	7045      	strb	r5, [r0, #1]
    4194:	e7ee      	b.n	4174 <l2cap_recv+0xba>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4196:	2202      	movs	r2, #2
    4198:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    419a:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    419c:	f7ff febc 	bl	3f18 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    41a0:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    41a2:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    41a4:	3008      	adds	r0, #8
    41a6:	f00c facb 	bl	10740 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    41aa:	2300      	movs	r3, #0
    41ac:	7003      	strb	r3, [r0, #0]
    41ae:	7043      	strb	r3, [r0, #1]
    41b0:	4622      	mov	r2, r4
    41b2:	2105      	movs	r1, #5
    41b4:	4628      	mov	r0, r5
    41b6:	e7af      	b.n	4118 <l2cap_recv+0x5e>

000041b8 <bt_l2cap_le_lookup_tx_cid>:
{
    41b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    41ba:	b100      	cbz	r0, 41be <bt_l2cap_le_lookup_tx_cid+0x6>
    41bc:	3808      	subs	r0, #8
    41be:	b900      	cbnz	r0, 41c2 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    41c0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    41c2:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    41c6:	428b      	cmp	r3, r1
    41c8:	d0fa      	beq.n	41c0 <bt_l2cap_le_lookup_tx_cid+0x8>
    41ca:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    41cc:	2000      	movs	r0, #0
    41ce:	2b00      	cmp	r3, #0
    41d0:	d0f6      	beq.n	41c0 <bt_l2cap_le_lookup_tx_cid+0x8>
    41d2:	f1a3 0008 	sub.w	r0, r3, #8
    41d6:	e7f2      	b.n	41be <bt_l2cap_le_lookup_tx_cid+0x6>

000041d8 <bt_l2cap_le_lookup_rx_cid>:
{
    41d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    41da:	b100      	cbz	r0, 41de <bt_l2cap_le_lookup_rx_cid+0x6>
    41dc:	3808      	subs	r0, #8
    41de:	b900      	cbnz	r0, 41e2 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    41e0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    41e2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    41e4:	428b      	cmp	r3, r1
    41e6:	d0fb      	beq.n	41e0 <bt_l2cap_le_lookup_rx_cid+0x8>
    41e8:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    41ea:	2000      	movs	r0, #0
    41ec:	2b00      	cmp	r3, #0
    41ee:	d0f7      	beq.n	41e0 <bt_l2cap_le_lookup_rx_cid+0x8>
    41f0:	f1a3 0008 	sub.w	r0, r3, #8
    41f4:	e7f3      	b.n	41de <bt_l2cap_le_lookup_rx_cid+0x6>

000041f6 <bt_l2cap_recv>:
{
    41f6:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    41f8:	898b      	ldrh	r3, [r1, #12]
    41fa:	2b03      	cmp	r3, #3
{
    41fc:	4605      	mov	r5, r0
    41fe:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    4200:	d804      	bhi.n	420c <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
    4202:	4620      	mov	r0, r4
}
    4204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    4208:	f00c ba68 	b.w	106dc <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    420c:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    420e:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    4210:	f850 3f08 	ldr.w	r3, [r0, #8]!
    4214:	885e      	ldrh	r6, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4216:	f00c fab2 	bl	1077e <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    421a:	4631      	mov	r1, r6
    421c:	4628      	mov	r0, r5
    421e:	f7ff ffdb 	bl	41d8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4222:	2800      	cmp	r0, #0
    4224:	d0ed      	beq.n	4202 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
    4226:	6843      	ldr	r3, [r0, #4]
    4228:	4621      	mov	r1, r4
    422a:	691b      	ldr	r3, [r3, #16]
    422c:	4798      	blx	r3
    422e:	e7e8      	b.n	4202 <bt_l2cap_recv+0xc>

00004230 <bt_l2cap_update_conn_param>:
{
    4230:	b570      	push	{r4, r5, r6, lr}
	ident++;
    4232:	4b12      	ldr	r3, [pc, #72]	; (427c <bt_l2cap_update_conn_param+0x4c>)
    4234:	781a      	ldrb	r2, [r3, #0]
    4236:	3201      	adds	r2, #1
	if (!ident) {
    4238:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    423c:	bf08      	it	eq
    423e:	2201      	moveq	r2, #1
    4240:	701a      	strb	r2, [r3, #0]
{
    4242:	460c      	mov	r4, r1
    4244:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4246:	7819      	ldrb	r1, [r3, #0]
    4248:	2208      	movs	r2, #8
    424a:	2012      	movs	r0, #18
    424c:	f7ff fe64 	bl	3f18 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    4250:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4252:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    4254:	4408      	add	r0, r1
    4256:	f00c fa73 	bl	10740 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    425a:	8823      	ldrh	r3, [r4, #0]
    425c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    425e:	8863      	ldrh	r3, [r4, #2]
    4260:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4262:	88a3      	ldrh	r3, [r4, #4]
    4264:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4266:	88e3      	ldrh	r3, [r4, #6]
    4268:	80c3      	strh	r3, [r0, #6]
    426a:	4632      	mov	r2, r6
    426c:	4628      	mov	r0, r5
    426e:	2300      	movs	r3, #0
    4270:	2105      	movs	r1, #5
    4272:	f7ff ff0d 	bl	4090 <bt_l2cap_send_cb>
}
    4276:	2000      	movs	r0, #0
    4278:	bd70      	pop	{r4, r5, r6, pc}
    427a:	bf00      	nop
    427c:	20000230 	.word	0x20000230

00004280 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4280:	4801      	ldr	r0, [pc, #4]	; (4288 <bt_l2cap_init+0x8>)
    4282:	f7ff be5d 	b.w	3f40 <bt_l2cap_le_fixed_chan_register>
    4286:	bf00      	nop
    4288:	200035b0 	.word	0x200035b0

0000428c <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    428c:	2006      	movs	r0, #6
    428e:	4770      	bx	lr

00004290 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4290:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    4292:	4a0a      	ldr	r2, [pc, #40]	; (42bc <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4294:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    4296:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    429a:	4284      	cmp	r4, r0
    429c:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    42a0:	d102      	bne.n	42a8 <att_op_get_type+0x18>
			return handlers[i].type;
    42a2:	440a      	add	r2, r1
    42a4:	7890      	ldrb	r0, [r2, #2]
    42a6:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    42a8:	3301      	adds	r3, #1
    42aa:	2b1b      	cmp	r3, #27
    42ac:	d1f3      	bne.n	4296 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    42ae:	f010 0f40 	tst.w	r0, #64	; 0x40
    42b2:	bf14      	ite	ne
    42b4:	2000      	movne	r0, #0
    42b6:	2006      	moveq	r0, #6
}
    42b8:	bd10      	pop	{r4, pc}
    42ba:	bf00      	nop
    42bc:	000128f4 	.word	0x000128f4

000042c0 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    42c0:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    42c2:	4d0b      	ldr	r5, [pc, #44]	; (42f0 <bt_att_accept+0x30>)
    42c4:	682c      	ldr	r4, [r5, #0]
{
    42c6:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    42c8:	b97c      	cbnz	r4, 42ea <bt_att_accept+0x2a>
			continue;
		}

		memset(att, 0, sizeof(*att));
    42ca:	4621      	mov	r1, r4
    42cc:	22e4      	movs	r2, #228	; 0xe4
    42ce:	4628      	mov	r0, r5
    42d0:	f7fd fce6 	bl	1ca0 <memset>
		att->chan.chan.ops = &ops;
    42d4:	4b07      	ldr	r3, [pc, #28]	; (42f4 <bt_att_accept+0x34>)
    42d6:	606b      	str	r3, [r5, #4]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    42d8:	2202      	movs	r2, #2
    42da:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    42de:	4611      	mov	r1, r2
    42e0:	f00d fa7c 	bl	117dc <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    42e4:	6035      	str	r5, [r6, #0]

		return 0;
    42e6:	4620      	mov	r0, r4
    42e8:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    42ea:	f06f 000b 	mvn.w	r0, #11
}
    42ee:	bd70      	pop	{r4, r5, r6, pc}
    42f0:	2000023c 	.word	0x2000023c
    42f4:	200035dc 	.word	0x200035dc

000042f8 <att_req_destroy>:
{
    42f8:	b510      	push	{r4, lr}
    42fa:	4604      	mov	r4, r0
	if (req->buf) {
    42fc:	6900      	ldr	r0, [r0, #16]
    42fe:	b108      	cbz	r0, 4304 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    4300:	f00c f9ec 	bl	106dc <net_buf_unref>
	if (req->destroy) {
    4304:	68a3      	ldr	r3, [r4, #8]
    4306:	b10b      	cbz	r3, 430c <att_req_destroy+0x14>
		req->destroy(req);
    4308:	4620      	mov	r0, r4
    430a:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    430c:	4620      	mov	r0, r4
    430e:	2214      	movs	r2, #20
    4310:	2100      	movs	r1, #0
}
    4312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    4316:	f7fd bcc3 	b.w	1ca0 <memset>

0000431a <att_notify>:
{
    431a:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    431c:	f101 0008 	add.w	r0, r1, #8
    4320:	f00c fa3d 	bl	1079e <net_buf_simple_pull_le16>
}
    4324:	2000      	movs	r0, #0
    4326:	bd08      	pop	{r3, pc}

00004328 <read_group_cb>:
{
    4328:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    432c:	680d      	ldr	r5, [r1, #0]
{
    432e:	4606      	mov	r6, r0
    4330:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4332:	f04f 0800 	mov.w	r8, #0
    4336:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    433a:	a902      	add	r1, sp, #8
    433c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    433e:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4340:	f88d 8008 	strb.w	r8, [sp, #8]
    4344:	f8ad 300a 	strh.w	r3, [sp, #10]
    4348:	f7fd fd52 	bl	1df0 <bt_uuid_cmp>
    434c:	b198      	cbz	r0, 4376 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    434e:	f642 0301 	movw	r3, #10241	; 0x2801
    4352:	a903      	add	r1, sp, #12
    4354:	6830      	ldr	r0, [r6, #0]
    4356:	f88d 800c 	strb.w	r8, [sp, #12]
    435a:	f8ad 300e 	strh.w	r3, [sp, #14]
    435e:	f7fd fd47 	bl	1df0 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4362:	b140      	cbz	r0, 4376 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    4364:	6923      	ldr	r3, [r4, #16]
    4366:	b123      	cbz	r3, 4372 <read_group_cb+0x4a>
    4368:	8a32      	ldrh	r2, [r6, #16]
    436a:	8859      	ldrh	r1, [r3, #2]
    436c:	4291      	cmp	r1, r2
    436e:	d200      	bcs.n	4372 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4370:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    4372:	2001      	movs	r0, #1
    4374:	e012      	b.n	439c <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4376:	6861      	ldr	r1, [r4, #4]
    4378:	6830      	ldr	r0, [r6, #0]
    437a:	f7fd fd39 	bl	1df0 <bt_uuid_cmp>
    437e:	b110      	cbz	r0, 4386 <read_group_cb+0x5e>
		data->group = NULL;
    4380:	2300      	movs	r3, #0
    4382:	6123      	str	r3, [r4, #16]
    4384:	e7f5      	b.n	4372 <read_group_cb+0x4a>
	if (data->rsp->len &&
    4386:	68e3      	ldr	r3, [r4, #12]
    4388:	68a0      	ldr	r0, [r4, #8]
    438a:	781a      	ldrb	r2, [r3, #0]
    438c:	b14a      	cbz	r2, 43a2 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    438e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    4392:	8981      	ldrh	r1, [r0, #12]
    4394:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    4396:	4293      	cmp	r3, r2
    4398:	da03      	bge.n	43a2 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    439a:	2000      	movs	r0, #0
}
    439c:	b004      	add	sp, #16
    439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    43a2:	2104      	movs	r1, #4
    43a4:	3008      	adds	r0, #8
    43a6:	f00c f9cb 	bl	10740 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    43aa:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    43ac:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    43ae:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    43b0:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    43b2:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    43b4:	898a      	ldrh	r2, [r1, #12]
    43b6:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    43ba:	6889      	ldr	r1, [r1, #8]
    43bc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    43c0:	1a9b      	subs	r3, r3, r2
    43c2:	2500      	movs	r5, #0
    43c4:	440a      	add	r2, r1
    43c6:	9500      	str	r5, [sp, #0]
    43c8:	4631      	mov	r1, r6
    43ca:	b29b      	uxth	r3, r3
    43cc:	4638      	mov	r0, r7
    43ce:	47c0      	blx	r8
	if (read < 0) {
    43d0:	1e01      	subs	r1, r0, #0
    43d2:	dbe2      	blt.n	439a <read_group_cb+0x72>
	if (!data->rsp->len) {
    43d4:	68e0      	ldr	r0, [r4, #12]
    43d6:	7802      	ldrb	r2, [r0, #0]
    43d8:	1d0b      	adds	r3, r1, #4
    43da:	b92a      	cbnz	r2, 43e8 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    43dc:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    43de:	68a0      	ldr	r0, [r4, #8]
    43e0:	3008      	adds	r0, #8
    43e2:	f00c f9ad 	bl	10740 <net_buf_simple_add>
    43e6:	e7c4      	b.n	4372 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    43e8:	429a      	cmp	r2, r3
    43ea:	d0f8      	beq.n	43de <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    43ec:	68a2      	ldr	r2, [r4, #8]
    43ee:	8993      	ldrh	r3, [r2, #12]
    43f0:	3b04      	subs	r3, #4
    43f2:	8193      	strh	r3, [r2, #12]
    43f4:	e7d1      	b.n	439a <read_group_cb+0x72>

000043f6 <find_info_cb>:
	if (!data->rsp) {
    43f6:	688b      	ldr	r3, [r1, #8]
{
    43f8:	b570      	push	{r4, r5, r6, lr}
    43fa:	4605      	mov	r5, r0
    43fc:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    43fe:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    4400:	b963      	cbnz	r3, 441c <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4402:	6848      	ldr	r0, [r1, #4]
    4404:	2101      	movs	r1, #1
    4406:	3008      	adds	r0, #8
    4408:	f00c f99a 	bl	10740 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    440c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    440e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4410:	781b      	ldrb	r3, [r3, #0]
    4412:	2b00      	cmp	r3, #0
    4414:	bf0c      	ite	eq
    4416:	2301      	moveq	r3, #1
    4418:	2302      	movne	r3, #2
    441a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    441c:	68a3      	ldr	r3, [r4, #8]
    441e:	781b      	ldrb	r3, [r3, #0]
    4420:	2b01      	cmp	r3, #1
    4422:	d003      	beq.n	442c <find_info_cb+0x36>
    4424:	2b02      	cmp	r3, #2
    4426:	d01a      	beq.n	445e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    4428:	2000      	movs	r0, #0
}
    442a:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    442c:	682b      	ldr	r3, [r5, #0]
    442e:	781b      	ldrb	r3, [r3, #0]
    4430:	2b00      	cmp	r3, #0
    4432:	d1f9      	bne.n	4428 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    4434:	6860      	ldr	r0, [r4, #4]
    4436:	2104      	movs	r1, #4
    4438:	3008      	adds	r0, #8
    443a:	f00c f981 	bl	10740 <net_buf_simple_add>
    443e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    4440:	8a2b      	ldrh	r3, [r5, #16]
    4442:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    4444:	682b      	ldr	r3, [r5, #0]
    4446:	885b      	ldrh	r3, [r3, #2]
    4448:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    444a:	6863      	ldr	r3, [r4, #4]
    444c:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4450:	899b      	ldrh	r3, [r3, #12]
    4452:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4454:	2804      	cmp	r0, #4
    4456:	bf94      	ite	ls
    4458:	2000      	movls	r0, #0
    445a:	2001      	movhi	r0, #1
    445c:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    445e:	682b      	ldr	r3, [r5, #0]
    4460:	781b      	ldrb	r3, [r3, #0]
    4462:	2b02      	cmp	r3, #2
    4464:	d1e0      	bne.n	4428 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    4466:	6860      	ldr	r0, [r4, #4]
    4468:	2112      	movs	r1, #18
    446a:	3008      	adds	r0, #8
    446c:	f00c f968 	bl	10740 <net_buf_simple_add>
    4470:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4472:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    4474:	8a2b      	ldrh	r3, [r5, #16]
    4476:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    447a:	2210      	movs	r2, #16
    447c:	3101      	adds	r1, #1
    447e:	f7fd fbe3 	bl	1c48 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    4482:	6863      	ldr	r3, [r4, #4]
    4484:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4488:	899b      	ldrh	r3, [r3, #12]
    448a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    448c:	2812      	cmp	r0, #18
    448e:	e7e2      	b.n	4456 <find_info_cb+0x60>

00004490 <find_type_cb>:
{
    4490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    4494:	680e      	ldr	r6, [r1, #0]
{
    4496:	b088      	sub	sp, #32
    4498:	4605      	mov	r5, r0
    449a:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    449c:	2700      	movs	r7, #0
    449e:	f642 0301 	movw	r3, #10241	; 0x2801
    44a2:	a902      	add	r1, sp, #8
    44a4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    44a6:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    44aa:	f88d 7008 	strb.w	r7, [sp, #8]
    44ae:	f8ad 300a 	strh.w	r3, [sp, #10]
    44b2:	f7fd fc9d 	bl	1df0 <bt_uuid_cmp>
    44b6:	b928      	cbnz	r0, 44c4 <find_type_cb+0x34>
		data->group = NULL;
    44b8:	2300      	movs	r3, #0
    44ba:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    44bc:	2001      	movs	r0, #1
}
    44be:	b008      	add	sp, #32
    44c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    44c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    44c8:	a903      	add	r1, sp, #12
    44ca:	6828      	ldr	r0, [r5, #0]
    44cc:	f88d 700c 	strb.w	r7, [sp, #12]
    44d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    44d4:	f7fd fc8c 	bl	1df0 <bt_uuid_cmp>
    44d8:	b140      	cbz	r0, 44ec <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    44da:	68a3      	ldr	r3, [r4, #8]
    44dc:	2b00      	cmp	r3, #0
    44de:	d0ed      	beq.n	44bc <find_type_cb+0x2c>
    44e0:	8a2a      	ldrh	r2, [r5, #16]
    44e2:	8859      	ldrh	r1, [r3, #2]
    44e4:	4291      	cmp	r1, r2
    44e6:	d2e9      	bcs.n	44bc <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    44e8:	805a      	strh	r2, [r3, #2]
    44ea:	e7e7      	b.n	44bc <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    44ec:	6862      	ldr	r2, [r4, #4]
    44ee:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    44f2:	8992      	ldrh	r2, [r2, #12]
    44f4:	1a9b      	subs	r3, r3, r2
    44f6:	2b03      	cmp	r3, #3
    44f8:	d9e1      	bls.n	44be <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    44fa:	2310      	movs	r3, #16
    44fc:	9000      	str	r0, [sp, #0]
    44fe:	eb0d 0203 	add.w	r2, sp, r3
    4502:	686e      	ldr	r6, [r5, #4]
    4504:	4629      	mov	r1, r5
    4506:	4640      	mov	r0, r8
    4508:	47b0      	blx	r6
	if (read < 0) {
    450a:	1e02      	subs	r2, r0, #0
    450c:	dbd4      	blt.n	44b8 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    450e:	7c23      	ldrb	r3, [r4, #16]
    4510:	429a      	cmp	r2, r3
    4512:	d1d1      	bne.n	44b8 <find_type_cb+0x28>
    4514:	a904      	add	r1, sp, #16
    4516:	68e0      	ldr	r0, [r4, #12]
    4518:	f7fd fb81 	bl	1c1e <memcmp>
    451c:	2800      	cmp	r0, #0
    451e:	d1cb      	bne.n	44b8 <find_type_cb+0x28>
	data->err = 0x00;
    4520:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4522:	6860      	ldr	r0, [r4, #4]
    4524:	2104      	movs	r1, #4
    4526:	3008      	adds	r0, #8
    4528:	f00c f90a 	bl	10740 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    452c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    452e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4530:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4532:	8043      	strh	r3, [r0, #2]
    4534:	e7c2      	b.n	44bc <find_type_cb+0x2c>
	...

00004538 <bt_att_connected>:
{
    4538:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    453a:	2317      	movs	r3, #23
{
    453c:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    453e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4542:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    4544:	4906      	ldr	r1, [pc, #24]	; (4560 <bt_att_connected+0x28>)
    4546:	30a4      	adds	r0, #164	; 0xa4
    4548:	f00d fc38 	bl	11dbc <k_delayed_work_init>
	list->head = NULL;
    454c:	2300      	movs	r3, #0
    454e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    4552:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    4556:	6820      	ldr	r0, [r4, #0]
}
    4558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    455c:	f001 baa2 	b.w	5aa4 <bt_gatt_connected>
    4560:	000049db 	.word	0x000049db

00004564 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    4564:	f011 0f01 	tst.w	r1, #1
    4568:	7c83      	ldrb	r3, [r0, #18]
    456a:	d004      	beq.n	4576 <check_perm.isra.5+0x12>
    456c:	f013 0f15 	tst.w	r3, #21
    4570:	d012      	beq.n	4598 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    4572:	6842      	ldr	r2, [r0, #4]
    4574:	b182      	cbz	r2, 4598 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    4576:	078a      	lsls	r2, r1, #30
    4578:	d504      	bpl.n	4584 <check_perm.isra.5+0x20>
    457a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    457e:	d00d      	beq.n	459c <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    4580:	6882      	ldr	r2, [r0, #8]
    4582:	b15a      	cbz	r2, 459c <check_perm.isra.5+0x38>
	mask &= attr->perm;
    4584:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    4586:	f011 0f30 	tst.w	r1, #48	; 0x30
    458a:	d109      	bne.n	45a0 <check_perm.isra.5+0x3c>
	return 0;
    458c:	f011 0f0c 	tst.w	r1, #12
    4590:	bf14      	ite	ne
    4592:	200f      	movne	r0, #15
    4594:	2000      	moveq	r0, #0
    4596:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    4598:	2002      	movs	r0, #2
    459a:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    459c:	2003      	movs	r0, #3
    459e:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    45a0:	2005      	movs	r0, #5
}
    45a2:	4770      	bx	lr

000045a4 <read_type_cb>:
{
    45a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    45a8:	680f      	ldr	r7, [r1, #0]
{
    45aa:	4606      	mov	r6, r0
    45ac:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    45ae:	6800      	ldr	r0, [r0, #0]
    45b0:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    45b2:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    45b6:	f7fd fc1b 	bl	1df0 <bt_uuid_cmp>
    45ba:	4680      	mov	r8, r0
    45bc:	2800      	cmp	r0, #0
    45be:	d14d      	bne.n	465c <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    45c0:	2115      	movs	r1, #21
    45c2:	4630      	mov	r0, r6
    45c4:	f7ff ffce 	bl	4564 <check_perm.isra.5>
    45c8:	4605      	mov	r5, r0
    45ca:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    45cc:	b148      	cbz	r0, 45e2 <read_type_cb+0x3e>
		if (data->rsp->len) {
    45ce:	68e3      	ldr	r3, [r4, #12]
    45d0:	781d      	ldrb	r5, [r3, #0]
    45d2:	b115      	cbz	r5, 45da <read_type_cb+0x36>
			data->err = 0x00;
    45d4:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    45d8:	4645      	mov	r5, r8
}
    45da:	4628      	mov	r0, r5
    45dc:	b003      	add	sp, #12
    45de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    45e2:	68a0      	ldr	r0, [r4, #8]
    45e4:	2102      	movs	r1, #2
    45e6:	3008      	adds	r0, #8
    45e8:	f00c f8aa 	bl	10740 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    45ec:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    45ee:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    45f0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    45f2:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    45f4:	898a      	ldrh	r2, [r1, #12]
    45f6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    45fa:	6889      	ldr	r1, [r1, #8]
    45fc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    4600:	9500      	str	r5, [sp, #0]
    4602:	1a9b      	subs	r3, r3, r2
    4604:	b29b      	uxth	r3, r3
    4606:	440a      	add	r2, r1
    4608:	4648      	mov	r0, r9
    460a:	4631      	mov	r1, r6
    460c:	47c0      	blx	r8
	if (read < 0) {
    460e:	1e01      	subs	r1, r0, #0
    4610:	da08      	bge.n	4624 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    4612:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    4616:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    4618:	bf9a      	itte	ls
    461a:	4249      	negls	r1, r1
    461c:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    461e:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    4620:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    4622:	e7da      	b.n	45da <read_type_cb+0x36>
	if (!data->rsp->len) {
    4624:	68e0      	ldr	r0, [r4, #12]
    4626:	7802      	ldrb	r2, [r0, #0]
    4628:	1c8b      	adds	r3, r1, #2
    462a:	b982      	cbnz	r2, 464e <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    462c:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    462e:	68a0      	ldr	r0, [r4, #8]
    4630:	3008      	adds	r0, #8
    4632:	f00c f885 	bl	10740 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    4636:	68a3      	ldr	r3, [r4, #8]
    4638:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    463c:	899b      	ldrh	r3, [r3, #12]
    463e:	1aed      	subs	r5, r5, r3
    4640:	68e3      	ldr	r3, [r4, #12]
    4642:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    4644:	429d      	cmp	r5, r3
    4646:	bfd4      	ite	le
    4648:	2500      	movle	r5, #0
    464a:	2501      	movgt	r5, #1
    464c:	e7c5      	b.n	45da <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    464e:	429a      	cmp	r2, r3
    4650:	d0ed      	beq.n	462e <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    4652:	68a2      	ldr	r2, [r4, #8]
    4654:	8993      	ldrh	r3, [r2, #12]
    4656:	3b02      	subs	r3, #2
    4658:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    465a:	e7be      	b.n	45da <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    465c:	2501      	movs	r5, #1
    465e:	e7bc      	b.n	45da <read_type_cb+0x36>

00004660 <uuid_create>:
{
    4660:	b510      	push	{r4, lr}
	switch (buf->len) {
    4662:	898a      	ldrh	r2, [r1, #12]
    4664:	2a02      	cmp	r2, #2
{
    4666:	4604      	mov	r4, r0
	switch (buf->len) {
    4668:	d003      	beq.n	4672 <uuid_create+0x12>
    466a:	2a10      	cmp	r2, #16
    466c:	d00a      	beq.n	4684 <uuid_create+0x24>
	return false;
    466e:	2000      	movs	r0, #0
}
    4670:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    4672:	2300      	movs	r3, #0
    4674:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    4676:	f101 0008 	add.w	r0, r1, #8
    467a:	f00c f890 	bl	1079e <net_buf_simple_pull_le16>
    467e:	8060      	strh	r0, [r4, #2]
		return true;
    4680:	2001      	movs	r0, #1
    4682:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    4684:	2302      	movs	r3, #2
    4686:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    468a:	6889      	ldr	r1, [r1, #8]
    468c:	f7fd fadc 	bl	1c48 <memcpy>
    4690:	e7f6      	b.n	4680 <uuid_create+0x20>
	...

00004694 <att_req_sent>:
{
    4694:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4696:	2104      	movs	r1, #4
    4698:	f7ff fd8e 	bl	41b8 <bt_l2cap_le_lookup_tx_cid>
    469c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    469e:	30cc      	adds	r0, #204	; 0xcc
    46a0:	f00d f8a5 	bl	117ee <_impl_k_sem_give>
	if (att->req) {
    46a4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    46a8:	b143      	cbz	r3, 46bc <att_req_sent+0x28>
    46aa:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    46ae:	f247 5230 	movw	r2, #30000	; 0x7530
    46b2:	4803      	ldr	r0, [pc, #12]	; (46c0 <att_req_sent+0x2c>)
}
    46b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46b8:	f00d bbf4 	b.w	11ea4 <k_delayed_work_submit_to_queue>
    46bc:	bd10      	pop	{r4, pc}
    46be:	bf00      	nop
    46c0:	20001728 	.word	0x20001728

000046c4 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    46c4:	6803      	ldr	r3, [r0, #0]
    46c6:	7a5b      	ldrb	r3, [r3, #9]
    46c8:	2b03      	cmp	r3, #3
    46ca:	d10a      	bne.n	46e2 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    46cc:	f3bf 8f5b 	dmb	ish
    46d0:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    46d4:	f3bf 8f5b 	dmb	ish
    46d8:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    46dc:	f000 0001 	and.w	r0, r0, #1
    46e0:	4770      	bx	lr
    46e2:	2001      	movs	r0, #1
}
    46e4:	4770      	bx	lr

000046e6 <att_prepare_write_req>:
    46e6:	2006      	movs	r0, #6
    46e8:	4770      	bx	lr

000046ea <att_chan_get>:
{
    46ea:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    46ec:	7a43      	ldrb	r3, [r0, #9]
    46ee:	2b03      	cmp	r3, #3
    46f0:	d001      	beq.n	46f6 <att_chan_get+0xc>
		return NULL;
    46f2:	2000      	movs	r0, #0
    46f4:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    46f6:	2104      	movs	r1, #4
    46f8:	f7ff fd6e 	bl	41d8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    46fc:	2800      	cmp	r0, #0
    46fe:	d0f8      	beq.n	46f2 <att_chan_get+0x8>
    4700:	f3bf 8f5b 	dmb	ish
    4704:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    4708:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    470c:	075b      	lsls	r3, r3, #29
    470e:	d4f0      	bmi.n	46f2 <att_chan_get+0x8>
}
    4710:	bd08      	pop	{r3, pc}

00004712 <att_pdu_sent>:
{
    4712:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4714:	2104      	movs	r1, #4
    4716:	f7ff fd4f 	bl	41b8 <bt_l2cap_le_lookup_tx_cid>
}
    471a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    471e:	30cc      	adds	r0, #204	; 0xcc
    4720:	f00d b865 	b.w	117ee <_impl_k_sem_give>

00004724 <att_cfm_sent>:
{
    4724:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4726:	2104      	movs	r1, #4
    4728:	f7ff fd46 	bl	41b8 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    472c:	f3bf 8f5b 	dmb	ish
    4730:	f100 0394 	add.w	r3, r0, #148	; 0x94
    4734:	e853 2f00 	ldrex	r2, [r3]
    4738:	f022 0202 	bic.w	r2, r2, #2
    473c:	e843 2100 	strex	r1, r2, [r3]
    4740:	2900      	cmp	r1, #0
    4742:	d1f7      	bne.n	4734 <att_cfm_sent+0x10>
    4744:	f3bf 8f5b 	dmb	ish
    4748:	30cc      	adds	r0, #204	; 0xcc
}
    474a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    474e:	f00d b84e 	b.w	117ee <_impl_k_sem_give>

00004752 <att_rsp_sent>:
{
    4752:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4754:	2104      	movs	r1, #4
    4756:	f7ff fd2f 	bl	41b8 <bt_l2cap_le_lookup_tx_cid>
    475a:	f3bf 8f5b 	dmb	ish
    475e:	f100 0394 	add.w	r3, r0, #148	; 0x94
    4762:	e853 2f00 	ldrex	r2, [r3]
    4766:	f022 0201 	bic.w	r2, r2, #1
    476a:	e843 2100 	strex	r1, r2, [r3]
    476e:	2900      	cmp	r1, #0
    4770:	d1f7      	bne.n	4762 <att_rsp_sent+0x10>
    4772:	f3bf 8f5b 	dmb	ish
    4776:	30cc      	adds	r0, #204	; 0xcc
}
    4778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    477c:	f00d b837 	b.w	117ee <_impl_k_sem_give>

00004780 <write_cb>:
{
    4780:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4784:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4786:	f8d1 8000 	ldr.w	r8, [r1]
    478a:	212a      	movs	r1, #42	; 0x2a
{
    478c:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    478e:	f7ff fee9 	bl	4564 <check_perm.isra.5>
    4792:	4605      	mov	r5, r0
    4794:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4796:	b9e0      	cbnz	r0, 47d2 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    4798:	8a62      	ldrh	r2, [r4, #18]
    479a:	9001      	str	r0, [sp, #4]
    479c:	9200      	str	r2, [sp, #0]
    479e:	7c23      	ldrb	r3, [r4, #16]
    47a0:	68b7      	ldr	r7, [r6, #8]
    47a2:	68e2      	ldr	r2, [r4, #12]
    47a4:	4631      	mov	r1, r6
    47a6:	4640      	mov	r0, r8
    47a8:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    47aa:	2800      	cmp	r0, #0
    47ac:	db02      	blt.n	47b4 <write_cb+0x34>
    47ae:	7c23      	ldrb	r3, [r4, #16]
    47b0:	4298      	cmp	r0, r3
    47b2:	d00b      	beq.n	47cc <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    47b4:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    47b8:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    47ba:	bf9a      	itte	ls
    47bc:	4240      	negls	r0, r0
    47be:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    47c0:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    47c2:	7520      	strb	r0, [r4, #20]
}
    47c4:	4628      	mov	r0, r5
    47c6:	b002      	add	sp, #8
    47c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    47cc:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    47ce:	2501      	movs	r5, #1
    47d0:	e7f8      	b.n	47c4 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    47d2:	2500      	movs	r5, #0
    47d4:	e7f6      	b.n	47c4 <write_cb+0x44>
	...

000047d8 <att_send_req>:
{
    47d8:	b570      	push	{r4, r5, r6, lr}
    47da:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    47dc:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    47e0:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    47e4:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    47e6:	4630      	mov	r0, r6
    47e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    47ec:	f00d f827 	bl	1183e <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    47f0:	4628      	mov	r0, r5
    47f2:	f7ff ff67 	bl	46c4 <att_is_connected>
    47f6:	b928      	cbnz	r0, 4804 <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    47f8:	4630      	mov	r0, r6
    47fa:	f00c fff8 	bl	117ee <_impl_k_sem_give>
		return -ENOTCONN;
    47fe:	f06f 0038 	mvn.w	r0, #56	; 0x38
    4802:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    4804:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    4806:	f106 0008 	add.w	r0, r6, #8
    480a:	f00b ffd0 	bl	107ae <net_buf_simple_headroom>
	state->len = buf->len;
    480e:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    4810:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    4812:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    4814:	6920      	ldr	r0, [r4, #16]
    4816:	682d      	ldr	r5, [r5, #0]
    4818:	f00b ff8e 	bl	10738 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    481c:	6923      	ldr	r3, [r4, #16]
    481e:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    4820:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    4822:	7818      	ldrb	r0, [r3, #0]
    4824:	f7ff fd34 	bl	4290 <att_op_get_type>
    4828:	3801      	subs	r0, #1
    482a:	b2c0      	uxtb	r0, r0
    482c:	2804      	cmp	r0, #4
    482e:	bf96      	itet	ls
    4830:	4b05      	ldrls	r3, [pc, #20]	; (4848 <att_send_req+0x70>)
    4832:	4b06      	ldrhi	r3, [pc, #24]	; (484c <att_send_req+0x74>)
    4834:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    4838:	4632      	mov	r2, r6
    483a:	4628      	mov	r0, r5
    483c:	2104      	movs	r1, #4
    483e:	f7ff fc27 	bl	4090 <bt_l2cap_send_cb>
	return 0;
    4842:	2000      	movs	r0, #0
}
    4844:	bd70      	pop	{r4, r5, r6, pc}
    4846:	bf00      	nop
    4848:	000128e0 	.word	0x000128e0
    484c:	00004713 	.word	0x00004713

00004850 <att_handle_rsp>:
{
    4850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4854:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    4856:	30a4      	adds	r0, #164	; 0xa4
{
    4858:	461e      	mov	r6, r3
    485a:	460f      	mov	r7, r1
    485c:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    485e:	f00d fabd 	bl	11ddc <k_delayed_work_cancel>
	if (!att->req) {
    4862:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4866:	b1db      	cbz	r3, 48a0 <att_handle_rsp+0x50>
	if (att->req->buf) {
    4868:	6918      	ldr	r0, [r3, #16]
    486a:	b128      	cbz	r0, 4878 <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
    486c:	f00b ff36 	bl	106dc <net_buf_unref>
		att->req->buf = NULL;
    4870:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4874:	2200      	movs	r2, #0
    4876:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    4878:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    487c:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    487e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    4882:	2500      	movs	r5, #0
    4884:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    4886:	463a      	mov	r2, r7
    4888:	9300      	str	r3, [sp, #0]
    488a:	4631      	mov	r1, r6
    488c:	4643      	mov	r3, r8
    488e:	47c8      	blx	r9
	if (!att->req->func) {
    4890:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    4894:	6843      	ldr	r3, [r0, #4]
    4896:	b90b      	cbnz	r3, 489c <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
    4898:	f7ff fd2e 	bl	42f8 <att_req_destroy>
	att->req = NULL;
    489c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    48a0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    48a4:	b159      	cbz	r1, 48be <att_handle_rsp+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    48a6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    48aa:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    48ac:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    48b0:	4291      	cmp	r1, r2
	list->tail = node;
    48b2:	bf08      	it	eq
    48b4:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    48b8:	4620      	mov	r0, r4
    48ba:	f7ff ff8d 	bl	47d8 <att_send_req>
}
    48be:	2000      	movs	r0, #0
    48c0:	b003      	add	sp, #12
    48c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000048c6 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    48c6:	898a      	ldrh	r2, [r1, #12]
    48c8:	6889      	ldr	r1, [r1, #8]
    48ca:	2300      	movs	r3, #0
    48cc:	f7ff bfc0 	b.w	4850 <att_handle_rsp>

000048d0 <att_handle_exec_write_rsp>:
    48d0:	f7ff bff9 	b.w	48c6 <att_confirm>

000048d4 <att_handle_prepare_write_rsp>:
    48d4:	f7ff bff7 	b.w	48c6 <att_confirm>

000048d8 <att_handle_write_rsp>:
    48d8:	f7ff bff5 	b.w	48c6 <att_confirm>

000048dc <att_handle_read_mult_rsp>:
    48dc:	f7ff bff3 	b.w	48c6 <att_confirm>

000048e0 <att_handle_read_blob_rsp>:
    48e0:	f7ff bff1 	b.w	48c6 <att_confirm>

000048e4 <att_handle_read_rsp>:
    48e4:	f7ff bfef 	b.w	48c6 <att_confirm>

000048e8 <att_handle_read_type_rsp>:
    48e8:	f7ff bfed 	b.w	48c6 <att_confirm>

000048ec <att_handle_find_type_rsp>:
    48ec:	f7ff bfeb 	b.w	48c6 <att_confirm>

000048f0 <att_handle_find_info_rsp>:
    48f0:	f7ff bfe9 	b.w	48c6 <att_confirm>

000048f4 <att_mtu_rsp>:
{
    48f4:	b410      	push	{r4}
    48f6:	460a      	mov	r2, r1
	if (!att) {
    48f8:	4603      	mov	r3, r0
    48fa:	b180      	cbz	r0, 491e <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    48fc:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    48fe:	880c      	ldrh	r4, [r1, #0]
    4900:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    4902:	bf83      	ittte	hi
    4904:	2417      	movhi	r4, #23
    4906:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    4908:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    490c:	2200      	movls	r2, #0
    490e:	bf99      	ittee	ls
    4910:	2304      	movls	r3, #4
    4912:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    4914:	2300      	movhi	r3, #0
    4916:	8992      	ldrhhi	r2, [r2, #12]
}
    4918:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    491a:	f7ff bf99 	b.w	4850 <att_handle_rsp>
}
    491e:	bc10      	pop	{r4}
    4920:	4770      	bx	lr

00004922 <att_error_rsp>:
{
    4922:	b430      	push	{r4, r5}
	if (!att->req) {
    4924:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    4928:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    492a:	b16a      	cbz	r2, 4948 <att_error_rsp+0x26>
	if (att->req->buf) {
    492c:	6913      	ldr	r3, [r2, #16]
    492e:	b12b      	cbz	r3, 493c <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    4930:	8995      	ldrh	r5, [r2, #12]
    4932:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    4934:	89d2      	ldrh	r2, [r2, #14]
    4936:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    4938:	4429      	add	r1, r5
    493a:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    493c:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    493e:	2200      	movs	r2, #0
    4940:	4611      	mov	r1, r2
}
    4942:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    4944:	f7ff bf84 	b.w	4850 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    4948:	230e      	movs	r3, #14
    494a:	e7f8      	b.n	493e <att_error_rsp+0x1c>

0000494c <att_reset>:
{
    494c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    494e:	f100 0394 	add.w	r3, r0, #148	; 0x94
    4952:	4605      	mov	r5, r0
    4954:	f3bf 8f5b 	dmb	ish
    4958:	e853 2f00 	ldrex	r2, [r3]
    495c:	f042 0204 	orr.w	r2, r2, #4
    4960:	e843 2100 	strex	r1, r2, [r3]
    4964:	2900      	cmp	r1, #0
    4966:	d1f7      	bne.n	4958 <att_reset+0xc>
    4968:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    496c:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    4970:	4620      	mov	r0, r4
    4972:	f00c ff3c 	bl	117ee <_impl_k_sem_give>
    4976:	4620      	mov	r0, r4
    4978:	f00c ff39 	bl	117ee <_impl_k_sem_give>
    497c:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4980:	b98c      	cbnz	r4, 49a6 <att_reset+0x5a>
	if (!att->req) {
    4982:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    4986:	2200      	movs	r2, #0
    4988:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    498c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    4990:	b90b      	cbnz	r3, 4996 <att_reset+0x4a>
}
    4992:	b003      	add	sp, #12
    4994:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    4996:	230e      	movs	r3, #14
    4998:	4611      	mov	r1, r2
    499a:	4628      	mov	r0, r5
}
    499c:	b003      	add	sp, #12
    499e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    49a2:	f7ff bf55 	b.w	4850 <att_handle_rsp>
	return node->next;
    49a6:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    49a8:	6867      	ldr	r7, [r4, #4]
    49aa:	b12f      	cbz	r7, 49b8 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    49ac:	2300      	movs	r3, #0
    49ae:	9400      	str	r4, [sp, #0]
    49b0:	461a      	mov	r2, r3
    49b2:	210e      	movs	r1, #14
    49b4:	4618      	mov	r0, r3
    49b6:	47b8      	blx	r7
		att_req_destroy(req);
    49b8:	4620      	mov	r0, r4
    49ba:	f7ff fc9d 	bl	42f8 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    49be:	2e00      	cmp	r6, #0
    49c0:	d0df      	beq.n	4982 <att_reset+0x36>
    49c2:	4634      	mov	r4, r6
    49c4:	6836      	ldr	r6, [r6, #0]
    49c6:	e7ef      	b.n	49a8 <att_reset+0x5c>

000049c8 <bt_att_disconnected>:
{
    49c8:	b510      	push	{r4, lr}
    49ca:	4604      	mov	r4, r0
	att_reset(att);
    49cc:	f7ff ffbe 	bl	494c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    49d0:	6820      	ldr	r0, [r4, #0]
}
    49d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    49d6:	f001 b86f 	b.w	5ab8 <bt_gatt_disconnected>

000049da <att_timeout>:
{
    49da:	b510      	push	{r4, lr}
    49dc:	4604      	mov	r4, r0
	att_reset(att);
    49de:	38a4      	subs	r0, #164	; 0xa4
    49e0:	f7ff ffb4 	bl	494c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    49e4:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    49e8:	f001 f866 	bl	5ab8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    49ec:	2300      	movs	r3, #0
    49ee:	f844 3ca4 	str.w	r3, [r4, #-164]
    49f2:	bd10      	pop	{r4, pc}

000049f4 <read_cb>:
{
    49f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    49f8:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    49fa:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    49fc:	f8d1 9000 	ldr.w	r9, [r1]
{
    4a00:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4a02:	3008      	adds	r0, #8
    4a04:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    4a06:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4a0a:	f00b fe99 	bl	10740 <net_buf_simple_add>
	data->err = 0x00;
    4a0e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4a10:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    4a12:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4a14:	2115      	movs	r1, #21
    4a16:	4630      	mov	r0, r6
    4a18:	f7ff fda4 	bl	4564 <check_perm.isra.5>
    4a1c:	4605      	mov	r5, r0
    4a1e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    4a20:	bb08      	cbnz	r0, 4a66 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4a22:	68a1      	ldr	r1, [r4, #8]
    4a24:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    4a28:	898a      	ldrh	r2, [r1, #12]
    4a2a:	6889      	ldr	r1, [r1, #8]
    4a2c:	88a0      	ldrh	r0, [r4, #4]
    4a2e:	9000      	str	r0, [sp, #0]
    4a30:	1a9b      	subs	r3, r3, r2
    4a32:	6877      	ldr	r7, [r6, #4]
    4a34:	440a      	add	r2, r1
    4a36:	b29b      	uxth	r3, r3
    4a38:	4631      	mov	r1, r6
    4a3a:	4640      	mov	r0, r8
    4a3c:	47b8      	blx	r7
	if (read < 0) {
    4a3e:	1e01      	subs	r1, r0, #0
    4a40:	da0b      	bge.n	4a5a <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    4a42:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    4a46:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    4a48:	bf9a      	itte	ls
    4a4a:	4249      	negls	r1, r1
    4a4c:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    4a4e:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    4a50:	7421      	strb	r1, [r4, #16]
}
    4a52:	4628      	mov	r0, r5
    4a54:	b003      	add	sp, #12
    4a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    4a5a:	68a0      	ldr	r0, [r4, #8]
    4a5c:	3008      	adds	r0, #8
    4a5e:	f00b fe6f 	bl	10740 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    4a62:	2501      	movs	r5, #1
    4a64:	e7f5      	b.n	4a52 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    4a66:	463d      	mov	r5, r7
    4a68:	e7f3      	b.n	4a52 <read_cb+0x5e>

00004a6a <bt_att_create_pdu>:
{
    4a6a:	b538      	push	{r3, r4, r5, lr}
    4a6c:	460d      	mov	r5, r1
    4a6e:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    4a70:	f7ff fe3b 	bl	46ea <att_chan_get>
	if (!att) {
    4a74:	b180      	cbz	r0, 4a98 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    4a76:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    4a7a:	3401      	adds	r4, #1
    4a7c:	429c      	cmp	r4, r3
    4a7e:	d80b      	bhi.n	4a98 <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
    4a80:	2100      	movs	r1, #0
    4a82:	4608      	mov	r0, r1
    4a84:	f7ff fb01 	bl	408a <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4a88:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    4a8a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4a8c:	3008      	adds	r0, #8
    4a8e:	f00b fe57 	bl	10740 <net_buf_simple_add>
	hdr->code = op;
    4a92:	7005      	strb	r5, [r0, #0]
}
    4a94:	4620      	mov	r0, r4
    4a96:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    4a98:	2400      	movs	r4, #0
    4a9a:	e7fb      	b.n	4a94 <bt_att_create_pdu+0x2a>

00004a9c <att_indicate>:
{
    4a9c:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4a9e:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    4aa0:	f101 0008 	add.w	r0, r1, #8
    4aa4:	f00b fe7b 	bl	1079e <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    4aa8:	2200      	movs	r2, #0
    4aaa:	211e      	movs	r1, #30
    4aac:	4620      	mov	r0, r4
    4aae:	f7ff ffdc 	bl	4a6a <bt_att_create_pdu>
	if (!buf) {
    4ab2:	4602      	mov	r2, r0
    4ab4:	b120      	cbz	r0, 4ac0 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    4ab6:	4b03      	ldr	r3, [pc, #12]	; (4ac4 <att_indicate+0x28>)
    4ab8:	2104      	movs	r1, #4
    4aba:	4620      	mov	r0, r4
    4abc:	f7ff fae8 	bl	4090 <bt_l2cap_send_cb>
}
    4ac0:	2000      	movs	r0, #0
    4ac2:	bd10      	pop	{r4, pc}
    4ac4:	00004725 	.word	0x00004725

00004ac8 <att_mtu_req>:
{
    4ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    4acc:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    4ace:	881b      	ldrh	r3, [r3, #0]
    4ad0:	2b16      	cmp	r3, #22
{
    4ad2:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    4ad4:	d91c      	bls.n	4b10 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    4ad6:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    4ada:	2202      	movs	r2, #2
    4adc:	2103      	movs	r1, #3
    4ade:	4640      	mov	r0, r8
    4ae0:	f7ff ffc3 	bl	4a6a <bt_att_create_pdu>
	if (!pdu) {
    4ae4:	4607      	mov	r7, r0
    4ae6:	b1b0      	cbz	r0, 4b16 <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    4ae8:	2102      	movs	r1, #2
    4aea:	3008      	adds	r0, #8
    4aec:	f00b fe28 	bl	10740 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    4af0:	2617      	movs	r6, #23
    4af2:	2400      	movs	r4, #0
    4af4:	7006      	strb	r6, [r0, #0]
    4af6:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    4af8:	4b08      	ldr	r3, [pc, #32]	; (4b1c <att_mtu_req+0x54>)
    4afa:	4640      	mov	r0, r8
    4afc:	463a      	mov	r2, r7
    4afe:	2104      	movs	r1, #4
    4b00:	f7ff fac6 	bl	4090 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    4b04:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    4b06:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    4b0a:	4620      	mov	r0, r4
    4b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    4b10:	2004      	movs	r0, #4
    4b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    4b16:	200e      	movs	r0, #14
}
    4b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b1c:	00004753 	.word	0x00004753

00004b20 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b24:	4688      	mov	r8, r1
    4b26:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4b28:	2101      	movs	r1, #1
    4b2a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4b2c:	4605      	mov	r5, r0
    4b2e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4b30:	f7ff ff9b 	bl	4a6a <bt_att_create_pdu>
	if (!buf) {
    4b34:	4604      	mov	r4, r0
    4b36:	b180      	cbz	r0, 4b5a <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4b38:	2104      	movs	r1, #4
    4b3a:	3008      	adds	r0, #8
    4b3c:	f00b fe00 	bl	10740 <net_buf_simple_add>
	rsp->request = req;
    4b40:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    4b44:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    4b46:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    4b4a:	4622      	mov	r2, r4
    4b4c:	4628      	mov	r0, r5
    4b4e:	4b04      	ldr	r3, [pc, #16]	; (4b60 <send_err_rsp.part.11+0x40>)
    4b50:	2104      	movs	r1, #4
}
    4b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    4b56:	f7ff ba9b 	b.w	4090 <bt_l2cap_send_cb>
    4b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b5e:	bf00      	nop
    4b60:	00004753 	.word	0x00004753

00004b64 <bt_att_recv>:
{
    4b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    4b68:	898b      	ldrh	r3, [r1, #12]
{
    4b6a:	4604      	mov	r4, r0
    4b6c:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    4b6e:	2b00      	cmp	r3, #0
    4b70:	d05e      	beq.n	4c30 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
    4b72:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4b74:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    4b76:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    4b7a:	f00b fe00 	bl	1077e <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    4b7e:	4a2d      	ldr	r2, [pc, #180]	; (4c34 <bt_att_recv+0xd0>)
    4b80:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4b82:	2300      	movs	r3, #0
    4b84:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    4b86:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
    4b8a:	45ae      	cmp	lr, r5
    4b8c:	ea4f 00c3 	mov.w	r0, r3, lsl #3
    4b90:	d118      	bne.n	4bc4 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    4b92:	4402      	add	r2, r0
    4b94:	7895      	ldrb	r5, [r2, #2]
    4b96:	2d01      	cmp	r5, #1
    4b98:	d024      	beq.n	4be4 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    4b9a:	2d05      	cmp	r5, #5
    4b9c:	d133      	bne.n	4c06 <bt_att_recv+0xa2>
    4b9e:	f3bf 8f5b 	dmb	ish
    4ba2:	f104 0294 	add.w	r2, r4, #148	; 0x94
    4ba6:	e852 3f00 	ldrex	r3, [r2]
    4baa:	f043 0e02 	orr.w	lr, r3, #2
    4bae:	e842 ec00 	strex	ip, lr, [r2]
    4bb2:	f1bc 0f00 	cmp.w	ip, #0
    4bb6:	d1f6      	bne.n	4ba6 <bt_att_recv+0x42>
    4bb8:	f3bf 8f5b 	dmb	ish
    4bbc:	079b      	lsls	r3, r3, #30
    4bbe:	d522      	bpl.n	4c06 <bt_att_recv+0xa2>
    4bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4bc4:	3301      	adds	r3, #1
    4bc6:	2b1b      	cmp	r3, #27
    4bc8:	d1dd      	bne.n	4b86 <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    4bca:	4628      	mov	r0, r5
    4bcc:	f7ff fb60 	bl	4290 <att_op_get_type>
    4bd0:	b370      	cbz	r0, 4c30 <bt_att_recv+0xcc>
	if (!req) {
    4bd2:	b36d      	cbz	r5, 4c30 <bt_att_recv+0xcc>
    4bd4:	2306      	movs	r3, #6
    4bd6:	2200      	movs	r2, #0
    4bd8:	4629      	mov	r1, r5
    4bda:	6820      	ldr	r0, [r4, #0]
}
    4bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4be0:	f7ff bf9e 	b.w	4b20 <send_err_rsp.part.11>
    4be4:	f104 0294 	add.w	r2, r4, #148	; 0x94
    4be8:	f3bf 8f5b 	dmb	ish
    4bec:	e852 3f00 	ldrex	r3, [r2]
    4bf0:	f043 0e01 	orr.w	lr, r3, #1
    4bf4:	e842 ec00 	strex	ip, lr, [r2]
    4bf8:	f1bc 0f00 	cmp.w	ip, #0
    4bfc:	d1f6      	bne.n	4bec <bt_att_recv+0x88>
    4bfe:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    4c02:	07da      	lsls	r2, r3, #31
    4c04:	d414      	bmi.n	4c30 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
    4c06:	180b      	adds	r3, r1, r0
    4c08:	89b1      	ldrh	r1, [r6, #12]
    4c0a:	785a      	ldrb	r2, [r3, #1]
    4c0c:	4291      	cmp	r1, r2
    4c0e:	d30d      	bcc.n	4c2c <bt_att_recv+0xc8>
		err = handler->func(att, buf);
    4c10:	685b      	ldr	r3, [r3, #4]
    4c12:	4631      	mov	r1, r6
    4c14:	4620      	mov	r0, r4
    4c16:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    4c18:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    4c1a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    4c1c:	d108      	bne.n	4c30 <bt_att_recv+0xcc>
    4c1e:	b138      	cbz	r0, 4c30 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    4c20:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    4c22:	b129      	cbz	r1, 4c30 <bt_att_recv+0xcc>
    4c24:	2200      	movs	r2, #0
    4c26:	e7d8      	b.n	4bda <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
    4c28:	2304      	movs	r3, #4
    4c2a:	e7f9      	b.n	4c20 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
    4c2c:	2d01      	cmp	r5, #1
    4c2e:	d0fb      	beq.n	4c28 <bt_att_recv+0xc4>
    4c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c34:	000128f4 	.word	0x000128f4

00004c38 <att_read_group_req>:
{
    4c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4c3c:	898b      	ldrh	r3, [r1, #12]
    4c3e:	2b06      	cmp	r3, #6
{
    4c40:	b08d      	sub	sp, #52	; 0x34
    4c42:	4680      	mov	r8, r0
    4c44:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4c46:	d001      	beq.n	4c4c <att_read_group_req+0x14>
    4c48:	2b14      	cmp	r3, #20
    4c4a:	d168      	bne.n	4d1e <att_read_group_req+0xe6>
	req = (void *)buf->data;
    4c4c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    4c4e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    4c50:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    4c54:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    4c58:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4c5a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    4c5c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    4c5e:	f00b fd8e 	bl	1077e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    4c62:	4621      	mov	r1, r4
    4c64:	4638      	mov	r0, r7
    4c66:	f7ff fcfb 	bl	4660 <uuid_create>
    4c6a:	2800      	cmp	r0, #0
    4c6c:	d059      	beq.n	4d22 <att_read_group_req+0xea>
	if (!start || !end) {
    4c6e:	2d00      	cmp	r5, #0
    4c70:	d05a      	beq.n	4d28 <att_read_group_req+0xf0>
    4c72:	2400      	movs	r4, #0
    4c74:	2e00      	cmp	r6, #0
    4c76:	d056      	beq.n	4d26 <att_read_group_req+0xee>
	if (start > end) {
    4c78:	42b5      	cmp	r5, r6
    4c7a:	d855      	bhi.n	4d28 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    4c7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4c80:	4669      	mov	r1, sp
    4c82:	4638      	mov	r0, r7
    4c84:	f88d 4000 	strb.w	r4, [sp]
    4c88:	f8ad 3002 	strh.w	r3, [sp, #2]
    4c8c:	f7fd f8b0 	bl	1df0 <bt_uuid_cmp>
    4c90:	bb38      	cbnz	r0, 4ce2 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    4c92:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    4c96:	2214      	movs	r2, #20
    4c98:	2100      	movs	r1, #0
    4c9a:	a807      	add	r0, sp, #28
    4c9c:	f7fd f800 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    4ca0:	2201      	movs	r2, #1
    4ca2:	2111      	movs	r1, #17
    4ca4:	4648      	mov	r0, r9
    4ca6:	f7ff fee0 	bl	4a6a <bt_att_create_pdu>
    4caa:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    4cac:	2800      	cmp	r0, #0
    4cae:	d038      	beq.n	4d22 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4cb0:	2101      	movs	r1, #1
    4cb2:	3008      	adds	r0, #8
	data.uuid = uuid;
    4cb4:	9708      	str	r7, [sp, #32]
	data.att = att;
    4cb6:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4cba:	f00b fd41 	bl	10740 <net_buf_simple_add>
	data.rsp->len = 0;
    4cbe:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4cc0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4cc2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    4cc4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4cc6:	4a1c      	ldr	r2, [pc, #112]	; (4d38 <att_read_group_req+0x100>)
	data.group = NULL;
    4cc8:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4cca:	4631      	mov	r1, r6
    4ccc:	4628      	mov	r0, r5
    4cce:	f000 fe1f 	bl	5910 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    4cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4cd4:	781c      	ldrb	r4, [r3, #0]
    4cd6:	b9d4      	cbnz	r4, 4d0e <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    4cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
    4cda:	f00b fcff 	bl	106dc <net_buf_unref>
    4cde:	230a      	movs	r3, #10
    4ce0:	e00c      	b.n	4cfc <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    4ce2:	f642 0301 	movw	r3, #10241	; 0x2801
    4ce6:	a901      	add	r1, sp, #4
    4ce8:	4638      	mov	r0, r7
    4cea:	f88d 4004 	strb.w	r4, [sp, #4]
    4cee:	f8ad 3006 	strh.w	r3, [sp, #6]
    4cf2:	f7fd f87d 	bl	1df0 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    4cf6:	2800      	cmp	r0, #0
    4cf8:	d0cb      	beq.n	4c92 <att_read_group_req+0x5a>
    4cfa:	2310      	movs	r3, #16
    4cfc:	462a      	mov	r2, r5
    4cfe:	2110      	movs	r1, #16
    4d00:	4648      	mov	r0, r9
    4d02:	f7ff ff0d 	bl	4b20 <send_err_rsp.part.11>
}
    4d06:	4620      	mov	r0, r4
    4d08:	b00d      	add	sp, #52	; 0x34
    4d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4d0e:	4b0b      	ldr	r3, [pc, #44]	; (4d3c <att_read_group_req+0x104>)
    4d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4d12:	2104      	movs	r1, #4
    4d14:	4648      	mov	r0, r9
    4d16:	f7ff f9bb 	bl	4090 <bt_l2cap_send_cb>
		return 0;
    4d1a:	2400      	movs	r4, #0
    4d1c:	e7f3      	b.n	4d06 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    4d1e:	2404      	movs	r4, #4
    4d20:	e7f1      	b.n	4d06 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    4d22:	240e      	movs	r4, #14
    4d24:	e7ef      	b.n	4d06 <att_read_group_req+0xce>
			*err = 0;
    4d26:	4635      	mov	r5, r6
    4d28:	2301      	movs	r3, #1
    4d2a:	462a      	mov	r2, r5
    4d2c:	2110      	movs	r1, #16
    4d2e:	4648      	mov	r0, r9
    4d30:	f7ff fef6 	bl	4b20 <send_err_rsp.part.11>
    4d34:	e7f1      	b.n	4d1a <att_read_group_req+0xe2>
    4d36:	bf00      	nop
    4d38:	00004329 	.word	0x00004329
    4d3c:	00004753 	.word	0x00004753

00004d40 <att_read_mult_req>:
{
    4d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4d44:	6804      	ldr	r4, [r0, #0]
{
    4d46:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    4d48:	2214      	movs	r2, #20
{
    4d4a:	4606      	mov	r6, r0
    4d4c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    4d4e:	a801      	add	r0, sp, #4
    4d50:	2100      	movs	r1, #0
    4d52:	f7fc ffa5 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    4d56:	2200      	movs	r2, #0
    4d58:	210f      	movs	r1, #15
    4d5a:	4620      	mov	r0, r4
    4d5c:	f7ff fe85 	bl	4a6a <bt_att_create_pdu>
    4d60:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    4d62:	b368      	cbz	r0, 4dc0 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d64:	f8df 9060 	ldr.w	r9, [pc, #96]	; 4dc8 <att_read_mult_req+0x88>
	data.att = att;
    4d68:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    4d6a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    4d6e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    4d72:	89ab      	ldrh	r3, [r5, #12]
    4d74:	2b01      	cmp	r3, #1
    4d76:	d806      	bhi.n	4d86 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4d78:	4b12      	ldr	r3, [pc, #72]	; (4dc4 <att_read_mult_req+0x84>)
    4d7a:	9a03      	ldr	r2, [sp, #12]
    4d7c:	2104      	movs	r1, #4
    4d7e:	4620      	mov	r0, r4
    4d80:	f7ff f986 	bl	4090 <bt_l2cap_send_cb>
    4d84:	e018      	b.n	4db8 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    4d86:	4638      	mov	r0, r7
    4d88:	f00b fd09 	bl	1079e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d8c:	ab01      	add	r3, sp, #4
    4d8e:	464a      	mov	r2, r9
    4d90:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    4d92:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    4d94:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d98:	f000 fdba 	bl	5910 <bt_gatt_foreach_attr>
		if (data.err) {
    4d9c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4da0:	2b00      	cmp	r3, #0
    4da2:	d0e6      	beq.n	4d72 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    4da4:	9803      	ldr	r0, [sp, #12]
    4da6:	f00b fc99 	bl	106dc <net_buf_unref>
    4daa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4dae:	4632      	mov	r2, r6
    4db0:	210e      	movs	r1, #14
    4db2:	4620      	mov	r0, r4
    4db4:	f7ff feb4 	bl	4b20 <send_err_rsp.part.11>
	return 0;
    4db8:	2000      	movs	r0, #0
}
    4dba:	b007      	add	sp, #28
    4dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    4dc0:	200e      	movs	r0, #14
    4dc2:	e7fa      	b.n	4dba <att_read_mult_req+0x7a>
    4dc4:	00004753 	.word	0x00004753
    4dc8:	000049f5 	.word	0x000049f5

00004dcc <att_read_rsp>:
{
    4dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dd0:	4607      	mov	r7, r0
    4dd2:	b086      	sub	sp, #24
    4dd4:	460c      	mov	r4, r1
    4dd6:	4690      	mov	r8, r2
	if (!handle) {
    4dd8:	461d      	mov	r5, r3
    4dda:	b3a3      	cbz	r3, 4e46 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    4ddc:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    4dde:	2214      	movs	r2, #20
    4de0:	2100      	movs	r1, #0
    4de2:	a801      	add	r0, sp, #4
    4de4:	f7fc ff5c 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    4de8:	2200      	movs	r2, #0
    4dea:	4641      	mov	r1, r8
    4dec:	4630      	mov	r0, r6
    4dee:	f7ff fe3c 	bl	4a6a <bt_att_create_pdu>
    4df2:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    4df4:	b348      	cbz	r0, 4e4a <att_read_rsp+0x7e>
	data.offset = offset;
    4df6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    4dfa:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    4dfe:	2301      	movs	r3, #1
    4e00:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4e04:	4a12      	ldr	r2, [pc, #72]	; (4e50 <att_read_rsp+0x84>)
	data.att = att;
    4e06:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4e08:	ab01      	add	r3, sp, #4
    4e0a:	4629      	mov	r1, r5
    4e0c:	4628      	mov	r0, r5
    4e0e:	f000 fd7f 	bl	5910 <bt_gatt_foreach_attr>
	if (data.err) {
    4e12:	f89d 7014 	ldrb.w	r7, [sp, #20]
    4e16:	b17f      	cbz	r7, 4e38 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    4e18:	9803      	ldr	r0, [sp, #12]
    4e1a:	f00b fc5f 	bl	106dc <net_buf_unref>
	if (!req) {
    4e1e:	b13c      	cbz	r4, 4e30 <att_read_rsp+0x64>
    4e20:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4e24:	462a      	mov	r2, r5
    4e26:	4621      	mov	r1, r4
    4e28:	4630      	mov	r0, r6
    4e2a:	f7ff fe79 	bl	4b20 <send_err_rsp.part.11>
		return 0;
    4e2e:	2400      	movs	r4, #0
}
    4e30:	4620      	mov	r0, r4
    4e32:	b006      	add	sp, #24
    4e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4e38:	4b06      	ldr	r3, [pc, #24]	; (4e54 <att_read_rsp+0x88>)
    4e3a:	9a03      	ldr	r2, [sp, #12]
    4e3c:	2104      	movs	r1, #4
    4e3e:	4630      	mov	r0, r6
    4e40:	f7ff f926 	bl	4090 <bt_l2cap_send_cb>
    4e44:	e7f3      	b.n	4e2e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    4e46:	2401      	movs	r4, #1
    4e48:	e7f2      	b.n	4e30 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    4e4a:	240e      	movs	r4, #14
    4e4c:	e7f0      	b.n	4e30 <att_read_rsp+0x64>
    4e4e:	bf00      	nop
    4e50:	000049f5 	.word	0x000049f5
    4e54:	00004753 	.word	0x00004753

00004e58 <att_read_blob_req>:
{
    4e58:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    4e5a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    4e5c:	8813      	ldrh	r3, [r2, #0]
    4e5e:	8852      	ldrh	r2, [r2, #2]
    4e60:	9200      	str	r2, [sp, #0]
    4e62:	210c      	movs	r1, #12
    4e64:	220d      	movs	r2, #13
    4e66:	f7ff ffb1 	bl	4dcc <att_read_rsp>
}
    4e6a:	b003      	add	sp, #12
    4e6c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e70 <att_read_req>:
{
    4e70:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    4e72:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    4e74:	2200      	movs	r2, #0
    4e76:	881b      	ldrh	r3, [r3, #0]
    4e78:	9200      	str	r2, [sp, #0]
    4e7a:	210a      	movs	r1, #10
    4e7c:	220b      	movs	r2, #11
    4e7e:	f7ff ffa5 	bl	4dcc <att_read_rsp>
}
    4e82:	b003      	add	sp, #12
    4e84:	f85d fb04 	ldr.w	pc, [sp], #4

00004e88 <att_read_type_req>:
{
    4e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4e8c:	898b      	ldrh	r3, [r1, #12]
    4e8e:	2b06      	cmp	r3, #6
{
    4e90:	b08d      	sub	sp, #52	; 0x34
    4e92:	4607      	mov	r7, r0
    4e94:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4e96:	d001      	beq.n	4e9c <att_read_type_req+0x14>
    4e98:	2b14      	cmp	r3, #20
    4e9a:	d152      	bne.n	4f42 <att_read_type_req+0xba>
	req = (void *)buf->data;
    4e9c:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    4e9e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    4ea0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    4ea4:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    4ea8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4eaa:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    4eac:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    4eb0:	f00b fc65 	bl	1077e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    4eb4:	4631      	mov	r1, r6
    4eb6:	4640      	mov	r0, r8
    4eb8:	f7ff fbd2 	bl	4660 <uuid_create>
    4ebc:	b198      	cbz	r0, 4ee6 <att_read_type_req+0x5e>
	if (!start || !end) {
    4ebe:	2d00      	cmp	r5, #0
    4ec0:	d042      	beq.n	4f48 <att_read_type_req+0xc0>
    4ec2:	2c00      	cmp	r4, #0
    4ec4:	d03f      	beq.n	4f46 <att_read_type_req+0xbe>
	if (start > end) {
    4ec6:	42a5      	cmp	r5, r4
    4ec8:	d83e      	bhi.n	4f48 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    4eca:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    4ecc:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    4ece:	2100      	movs	r1, #0
    4ed0:	eb0d 0002 	add.w	r0, sp, r2
    4ed4:	f7fc fee4 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    4ed8:	2201      	movs	r2, #1
    4eda:	2109      	movs	r1, #9
    4edc:	4630      	mov	r0, r6
    4ede:	f7ff fdc4 	bl	4a6a <bt_att_create_pdu>
    4ee2:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    4ee4:	b908      	cbnz	r0, 4eea <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    4ee6:	240e      	movs	r4, #14
    4ee8:	e027      	b.n	4f3a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4eea:	2101      	movs	r1, #1
    4eec:	3008      	adds	r0, #8
	data.att = att;
    4eee:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    4ef0:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4ef4:	f00b fc24 	bl	10740 <net_buf_simple_add>
	data.rsp->len = 0;
    4ef8:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4efa:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4efc:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4efe:	4621      	mov	r1, r4
	data.rsp->len = 0;
    4f00:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4f02:	4a14      	ldr	r2, [pc, #80]	; (4f54 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4f04:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4f08:	4628      	mov	r0, r5
    4f0a:	ab06      	add	r3, sp, #24
    4f0c:	f000 fd00 	bl	5910 <bt_gatt_foreach_attr>
	if (data.err) {
    4f10:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    4f14:	b15c      	cbz	r4, 4f2e <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    4f16:	9808      	ldr	r0, [sp, #32]
    4f18:	f00b fbe0 	bl	106dc <net_buf_unref>
    4f1c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    4f20:	462a      	mov	r2, r5
    4f22:	2108      	movs	r1, #8
    4f24:	4630      	mov	r0, r6
    4f26:	f7ff fdfb 	bl	4b20 <send_err_rsp.part.11>
		return 0;
    4f2a:	2400      	movs	r4, #0
    4f2c:	e005      	b.n	4f3a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4f2e:	4b0a      	ldr	r3, [pc, #40]	; (4f58 <att_read_type_req+0xd0>)
    4f30:	9a08      	ldr	r2, [sp, #32]
    4f32:	2104      	movs	r1, #4
    4f34:	4630      	mov	r0, r6
    4f36:	f7ff f8ab 	bl	4090 <bt_l2cap_send_cb>
}
    4f3a:	4620      	mov	r0, r4
    4f3c:	b00d      	add	sp, #52	; 0x34
    4f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    4f42:	2404      	movs	r4, #4
    4f44:	e7f9      	b.n	4f3a <att_read_type_req+0xb2>
			*err = 0;
    4f46:	4625      	mov	r5, r4
    4f48:	2301      	movs	r3, #1
    4f4a:	462a      	mov	r2, r5
    4f4c:	2108      	movs	r1, #8
    4f4e:	4648      	mov	r0, r9
    4f50:	e7e9      	b.n	4f26 <att_read_type_req+0x9e>
    4f52:	bf00      	nop
    4f54:	000045a5 	.word	0x000045a5
    4f58:	00004753 	.word	0x00004753

00004f5c <att_find_type_req>:
{
    4f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4f60:	f8d0 9000 	ldr.w	r9, [r0]
{
    4f64:	4680      	mov	r8, r0
	req = (void *)buf->data;
    4f66:	4608      	mov	r0, r1
{
    4f68:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    4f6a:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    4f6e:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    4f70:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    4f72:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4f74:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    4f76:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    4f78:	f00b fc01 	bl	1077e <net_buf_simple_pull>
    4f7c:	4682      	mov	sl, r0
	if (!start || !end) {
    4f7e:	2d00      	cmp	r5, #0
    4f80:	d057      	beq.n	5032 <att_find_type_req+0xd6>
    4f82:	2400      	movs	r4, #0
    4f84:	2f00      	cmp	r7, #0
    4f86:	d053      	beq.n	5030 <att_find_type_req+0xd4>
	if (start > end) {
    4f88:	42bd      	cmp	r5, r7
    4f8a:	d852      	bhi.n	5032 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    4f8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4f90:	a902      	add	r1, sp, #8
    4f92:	a801      	add	r0, sp, #4
    4f94:	f8ad 6006 	strh.w	r6, [sp, #6]
    4f98:	f88d 4004 	strb.w	r4, [sp, #4]
    4f9c:	f88d 4008 	strb.w	r4, [sp, #8]
    4fa0:	f8ad 300a 	strh.w	r3, [sp, #10]
    4fa4:	f7fc ff24 	bl	1df0 <bt_uuid_cmp>
    4fa8:	4606      	mov	r6, r0
    4faa:	b148      	cbz	r0, 4fc0 <att_find_type_req+0x64>
    4fac:	230a      	movs	r3, #10
    4fae:	462a      	mov	r2, r5
    4fb0:	2106      	movs	r1, #6
    4fb2:	4648      	mov	r0, r9
    4fb4:	f7ff fdb4 	bl	4b20 <send_err_rsp.part.11>
}
    4fb8:	4620      	mov	r0, r4
    4fba:	b009      	add	sp, #36	; 0x24
    4fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    4fc0:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    4fc4:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    4fc8:	2214      	movs	r2, #20
    4fca:	4631      	mov	r1, r6
    4fcc:	a803      	add	r0, sp, #12
    4fce:	f7fc fe67 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    4fd2:	4632      	mov	r2, r6
    4fd4:	2107      	movs	r1, #7
    4fd6:	4648      	mov	r0, r9
    4fd8:	f7ff fd47 	bl	4a6a <bt_att_create_pdu>
    4fdc:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    4fde:	b328      	cbz	r0, 502c <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4fe0:	230a      	movs	r3, #10
    4fe2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4fe6:	4a14      	ldr	r2, [pc, #80]	; (5038 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    4fe8:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4fec:	ab03      	add	r3, sp, #12
    4fee:	4639      	mov	r1, r7
    4ff0:	4628      	mov	r0, r5
	data.att = att;
    4ff2:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    4ff6:	9605      	str	r6, [sp, #20]
	data.value = value;
    4ff8:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4ffc:	f000 fc88 	bl	5910 <bt_gatt_foreach_attr>
	if (data.err) {
    5000:	f89d 401d 	ldrb.w	r4, [sp, #29]
    5004:	b15c      	cbz	r4, 501e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    5006:	9804      	ldr	r0, [sp, #16]
    5008:	f00b fb68 	bl	106dc <net_buf_unref>
    500c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    5010:	462a      	mov	r2, r5
    5012:	2106      	movs	r1, #6
    5014:	4648      	mov	r0, r9
    5016:	f7ff fd83 	bl	4b20 <send_err_rsp.part.11>
		return 0;
    501a:	2400      	movs	r4, #0
    501c:	e7cc      	b.n	4fb8 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    501e:	4b07      	ldr	r3, [pc, #28]	; (503c <att_find_type_req+0xe0>)
    5020:	9a04      	ldr	r2, [sp, #16]
    5022:	2104      	movs	r1, #4
    5024:	4648      	mov	r0, r9
    5026:	f7ff f833 	bl	4090 <bt_l2cap_send_cb>
    502a:	e7c5      	b.n	4fb8 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    502c:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    502e:	e7c3      	b.n	4fb8 <att_find_type_req+0x5c>
			*err = 0;
    5030:	463d      	mov	r5, r7
    5032:	2301      	movs	r3, #1
    5034:	e7ec      	b.n	5010 <att_find_type_req+0xb4>
    5036:	bf00      	nop
    5038:	00004491 	.word	0x00004491
    503c:	00004753 	.word	0x00004753

00005040 <att_find_info_req>:
{
    5040:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    5042:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    5044:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5046:	881d      	ldrh	r5, [r3, #0]
{
    5048:	b085      	sub	sp, #20
    504a:	4607      	mov	r7, r0
	if (!start || !end) {
    504c:	b375      	cbz	r5, 50ac <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    504e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    5050:	b35c      	cbz	r4, 50aa <att_find_info_req+0x6a>
	if (start > end) {
    5052:	42a5      	cmp	r5, r4
    5054:	d82a      	bhi.n	50ac <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    5056:	2210      	movs	r2, #16
    5058:	2100      	movs	r1, #0
    505a:	4668      	mov	r0, sp
    505c:	f7fc fe20 	bl	1ca0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    5060:	2200      	movs	r2, #0
    5062:	2105      	movs	r1, #5
    5064:	4630      	mov	r0, r6
    5066:	f7ff fd00 	bl	4a6a <bt_att_create_pdu>
    506a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    506c:	b910      	cbnz	r0, 5074 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    506e:	200e      	movs	r0, #14
}
    5070:	b005      	add	sp, #20
    5072:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5074:	4621      	mov	r1, r4
    5076:	466b      	mov	r3, sp
    5078:	4a0d      	ldr	r2, [pc, #52]	; (50b0 <att_find_info_req+0x70>)
	data.att = att;
    507a:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    507c:	4628      	mov	r0, r5
    507e:	f000 fc47 	bl	5910 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    5082:	9c02      	ldr	r4, [sp, #8]
    5084:	b94c      	cbnz	r4, 509a <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    5086:	9801      	ldr	r0, [sp, #4]
    5088:	f00b fb28 	bl	106dc <net_buf_unref>
    508c:	230a      	movs	r3, #10
    508e:	462a      	mov	r2, r5
    5090:	2104      	movs	r1, #4
    5092:	4630      	mov	r0, r6
    5094:	f7ff fd44 	bl	4b20 <send_err_rsp.part.11>
    5098:	e005      	b.n	50a6 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    509a:	4b06      	ldr	r3, [pc, #24]	; (50b4 <att_find_info_req+0x74>)
    509c:	9a01      	ldr	r2, [sp, #4]
    509e:	2104      	movs	r1, #4
    50a0:	4630      	mov	r0, r6
    50a2:	f7fe fff5 	bl	4090 <bt_l2cap_send_cb>
		return 0;
    50a6:	2000      	movs	r0, #0
    50a8:	e7e2      	b.n	5070 <att_find_info_req+0x30>
			*err = 0;
    50aa:	4625      	mov	r5, r4
    50ac:	2301      	movs	r3, #1
    50ae:	e7ee      	b.n	508e <att_find_info_req+0x4e>
    50b0:	000043f7 	.word	0x000043f7
    50b4:	00004753 	.word	0x00004753

000050b8 <att_write_rsp.part.12.constprop.16>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    50b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50bc:	b086      	sub	sp, #24
    50be:	4690      	mov	r8, r2
    50c0:	4605      	mov	r5, r0
    50c2:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    50c4:	2218      	movs	r2, #24
    50c6:	2100      	movs	r1, #0
    50c8:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    50ca:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    50cc:	f7fc fde8 	bl	1ca0 <memset>
	if (rsp) {
    50d0:	f1b8 0f00 	cmp.w	r8, #0
    50d4:	d11f      	bne.n	5116 <att_write_rsp.part.12.constprop.16+0x5e>
	data.offset = offset;
    50d6:	2300      	movs	r3, #0
    50d8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    50dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    50de:	9303      	str	r3, [sp, #12]
	data.len = len;
    50e0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    50e4:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    50e8:	2301      	movs	r3, #1
    50ea:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    50ee:	4a1b      	ldr	r2, [pc, #108]	; (515c <att_write_rsp.part.12.constprop.16+0xa4>)
	data.conn = conn;
    50f0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    50f2:	466b      	mov	r3, sp
    50f4:	4639      	mov	r1, r7
    50f6:	4638      	mov	r0, r7
	data.op = op;
    50f8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    50fc:	f000 fc08 	bl	5910 <bt_gatt_foreach_attr>
	if (data.err) {
    5100:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5104:	b98c      	cbnz	r4, 512a <att_write_rsp.part.12.constprop.16+0x72>
	if (data.buf) {
    5106:	9a01      	ldr	r2, [sp, #4]
    5108:	b1b2      	cbz	r2, 5138 <att_write_rsp.part.12.constprop.16+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    510a:	4b15      	ldr	r3, [pc, #84]	; (5160 <att_write_rsp.part.12.constprop.16+0xa8>)
    510c:	2104      	movs	r1, #4
    510e:	4628      	mov	r0, r5
    5110:	f7fe ffbe 	bl	4090 <bt_l2cap_send_cb>
    5114:	e011      	b.n	513a <att_write_rsp.part.12.constprop.16+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    5116:	2200      	movs	r2, #0
    5118:	4641      	mov	r1, r8
    511a:	4628      	mov	r0, r5
    511c:	f7ff fca5 	bl	4a6a <bt_att_create_pdu>
    5120:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    5122:	2800      	cmp	r0, #0
    5124:	d1d7      	bne.n	50d6 <att_write_rsp.part.12.constprop.16+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    5126:	240e      	movs	r4, #14
    5128:	e007      	b.n	513a <att_write_rsp.part.12.constprop.16+0x82>
		if (rsp) {
    512a:	f1b8 0f00 	cmp.w	r8, #0
    512e:	d00f      	beq.n	5150 <att_write_rsp.part.12.constprop.16+0x98>
			net_buf_unref(data.buf);
    5130:	9801      	ldr	r0, [sp, #4]
    5132:	f00b fad3 	bl	106dc <net_buf_unref>
	if (!req) {
    5136:	b926      	cbnz	r6, 5142 <att_write_rsp.part.12.constprop.16+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5138:	2400      	movs	r4, #0
}
    513a:	4620      	mov	r0, r4
    513c:	b006      	add	sp, #24
    513e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5142:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5146:	463a      	mov	r2, r7
    5148:	4631      	mov	r1, r6
    514a:	4628      	mov	r0, r5
    514c:	f7ff fce8 	bl	4b20 <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5150:	2e18      	cmp	r6, #24
    5152:	d1f1      	bne.n	5138 <att_write_rsp.part.12.constprop.16+0x80>
    5154:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5158:	e7ef      	b.n	513a <att_write_rsp.part.12.constprop.16+0x82>
    515a:	bf00      	nop
    515c:	00004781 	.word	0x00004781
    5160:	00004753 	.word	0x00004753

00005164 <att_signed_write_cmd>:
{
    5164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    5168:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    516a:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    516c:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    5170:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5172:	4620      	mov	r0, r4
    5174:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    5176:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    517a:	f00b faf8 	bl	1076e <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    517e:	4629      	mov	r1, r5
    5180:	4630      	mov	r0, r6
    5182:	f000 fcce 	bl	5b22 <bt_smp_sign_verify>
	if (err) {
    5186:	4607      	mov	r7, r0
    5188:	b9c8      	cbnz	r0, 51be <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    518a:	2101      	movs	r1, #1
    518c:	4620      	mov	r0, r4
    518e:	f00b faf6 	bl	1077e <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    5192:	2102      	movs	r1, #2
    5194:	4620      	mov	r0, r4
    5196:	f00b faf2 	bl	1077e <net_buf_simple_pull>
	if (!handle) {
    519a:	f1b8 0f00 	cmp.w	r8, #0
    519e:	d010      	beq.n	51c2 <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    51a0:	7b2b      	ldrb	r3, [r5, #12]
    51a2:	3b0c      	subs	r3, #12
    51a4:	b2db      	uxtb	r3, r3
    51a6:	9301      	str	r3, [sp, #4]
    51a8:	68ab      	ldr	r3, [r5, #8]
    51aa:	9300      	str	r3, [sp, #0]
    51ac:	463a      	mov	r2, r7
    51ae:	4643      	mov	r3, r8
    51b0:	4639      	mov	r1, r7
    51b2:	4630      	mov	r0, r6
    51b4:	f7ff ff80 	bl	50b8 <att_write_rsp.part.12.constprop.16>
}
    51b8:	b002      	add	sp, #8
    51ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    51be:	2000      	movs	r0, #0
    51c0:	e7fa      	b.n	51b8 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    51c2:	2001      	movs	r0, #1
    51c4:	e7f8      	b.n	51b8 <att_signed_write_cmd+0x54>

000051c6 <att_write_cmd>:
{
    51c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    51c8:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    51ca:	f101 0008 	add.w	r0, r1, #8
{
    51ce:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    51d0:	f00b fae5 	bl	1079e <net_buf_simple_pull_le16>
	if (!handle) {
    51d4:	4603      	mov	r3, r0
    51d6:	b150      	cbz	r0, 51ee <att_write_cmd+0x28>
    51d8:	7b22      	ldrb	r2, [r4, #12]
    51da:	9201      	str	r2, [sp, #4]
    51dc:	68a2      	ldr	r2, [r4, #8]
    51de:	9200      	str	r2, [sp, #0]
    51e0:	2200      	movs	r2, #0
    51e2:	4611      	mov	r1, r2
    51e4:	4628      	mov	r0, r5
    51e6:	f7ff ff67 	bl	50b8 <att_write_rsp.part.12.constprop.16>
}
    51ea:	b003      	add	sp, #12
    51ec:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    51ee:	2001      	movs	r0, #1
    51f0:	e7fb      	b.n	51ea <att_write_cmd+0x24>

000051f2 <att_write_req>:
{
    51f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    51f4:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    51f6:	f101 0008 	add.w	r0, r1, #8
{
    51fa:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    51fc:	f00b facf 	bl	1079e <net_buf_simple_pull_le16>
	if (!handle) {
    5200:	4603      	mov	r3, r0
    5202:	b150      	cbz	r0, 521a <att_write_req+0x28>
    5204:	7b22      	ldrb	r2, [r4, #12]
    5206:	9201      	str	r2, [sp, #4]
    5208:	68a2      	ldr	r2, [r4, #8]
    520a:	9200      	str	r2, [sp, #0]
    520c:	2112      	movs	r1, #18
    520e:	2213      	movs	r2, #19
    5210:	4628      	mov	r0, r5
    5212:	f7ff ff51 	bl	50b8 <att_write_rsp.part.12.constprop.16>
}
    5216:	b003      	add	sp, #12
    5218:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    521a:	2001      	movs	r0, #1
    521c:	e7fb      	b.n	5216 <att_write_req+0x24>
	...

00005220 <bt_att_init>:

void bt_att_init(void)
{
    5220:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5222:	4803      	ldr	r0, [pc, #12]	; (5230 <bt_att_init+0x10>)
    5224:	f7fe fe8c 	bl	3f40 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    5228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    522c:	f000 bb5a 	b.w	58e4 <bt_gatt_init>
    5230:	200035d0 	.word	0x200035d0

00005234 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    5234:	b510      	push	{r4, lr}
    5236:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    5238:	b1d8      	cbz	r0, 5272 <bt_att_req_send+0x3e>
    523a:	b1d1      	cbz	r1, 5272 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    523c:	f7ff fa55 	bl	46ea <att_chan_get>
	if (!att) {
    5240:	4603      	mov	r3, r0
    5242:	b1c8      	cbz	r0, 5278 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    5244:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    5248:	b172      	cbz	r2, 5268 <bt_att_req_send+0x34>
	parent->next = child;
    524a:	2000      	movs	r0, #0
    524c:	6020      	str	r0, [r4, #0]
    524e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    5252:	b92a      	cbnz	r2, 5260 <bt_att_req_send+0x2c>
	list->tail = node;
    5254:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    5258:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    525c:	4610      	mov	r0, r2
    525e:	bd10      	pop	{r4, pc}
	parent->next = child;
    5260:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5262:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    5266:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    5268:	4621      	mov	r1, r4
}
    526a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    526e:	f7ff bab3 	b.w	47d8 <att_send_req>
		return -EINVAL;
    5272:	f06f 0015 	mvn.w	r0, #21
    5276:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    5278:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    527c:	bd10      	pop	{r4, pc}

0000527e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    527e:	4770      	bx	lr

00005280 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    5280:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    5282:	2000      	movs	r0, #0
    5284:	4770      	bx	lr

00005286 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    5286:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    5288:	2300      	movs	r3, #0
    528a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    528c:	461a      	mov	r2, r3
    528e:	42aa      	cmp	r2, r5
    5290:	d107      	bne.n	52a2 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    5292:	890a      	ldrh	r2, [r1, #8]
    5294:	429a      	cmp	r2, r3
    5296:	d00d      	beq.n	52b4 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    5298:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    529a:	68ca      	ldr	r2, [r1, #12]
	}
}
    529c:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    529e:	4619      	mov	r1, r3
    52a0:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    52a2:	680c      	ldr	r4, [r1, #0]
    52a4:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    52a8:	3201      	adds	r2, #1
    52aa:	8924      	ldrh	r4, [r4, #8]
    52ac:	42a3      	cmp	r3, r4
    52ae:	bf38      	it	cc
    52b0:	4623      	movcc	r3, r4
    52b2:	e7ec      	b.n	528e <gatt_ccc_changed+0x8>
}
    52b4:	bc30      	pop	{r4, r5}
    52b6:	4770      	bx	lr

000052b8 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    52b8:	b410      	push	{r4}
    52ba:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    52bc:	699c      	ldr	r4, [r3, #24]
    52be:	460a      	mov	r2, r1
    52c0:	6959      	ldr	r1, [r3, #20]
    52c2:	4623      	mov	r3, r4
}
    52c4:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    52c6:	4718      	bx	r3

000052c8 <gatt_notify>:
{
    52c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52cc:	468a      	mov	sl, r1
    52ce:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    52d0:	211b      	movs	r1, #27
    52d2:	1c9a      	adds	r2, r3, #2
{
    52d4:	4680      	mov	r8, r0
    52d6:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    52d8:	f7ff fbc7 	bl	4a6a <bt_att_create_pdu>
	if (!buf) {
    52dc:	4604      	mov	r4, r0
    52de:	b1d0      	cbz	r0, 5316 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    52e0:	f100 0708 	add.w	r7, r0, #8
    52e4:	2102      	movs	r1, #2
    52e6:	4638      	mov	r0, r7
    52e8:	f00b fa2a 	bl	10740 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    52ec:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    52ee:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    52f0:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    52f4:	4638      	mov	r0, r7
    52f6:	f00b fa23 	bl	10740 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    52fa:	4632      	mov	r2, r6
    52fc:	4649      	mov	r1, r9
    52fe:	4628      	mov	r0, r5
    5300:	f7fc fca2 	bl	1c48 <memcpy>
    5304:	4640      	mov	r0, r8
    5306:	2300      	movs	r3, #0
    5308:	4622      	mov	r2, r4
    530a:	2104      	movs	r1, #4
    530c:	f7fe fec0 	bl	4090 <bt_l2cap_send_cb>
	return 0;
    5310:	2000      	movs	r0, #0
    5312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    5316:	f06f 000b 	mvn.w	r0, #11
}
    531a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00005320 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    5320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    5324:	694b      	ldr	r3, [r1, #20]
{
    5326:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    5328:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    532a:	6818      	ldr	r0, [r3, #0]
    532c:	2300      	movs	r3, #0
{
    532e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    5330:	f88d 3004 	strb.w	r3, [sp, #4]
    5334:	a901      	add	r1, sp, #4
    5336:	f642 0303 	movw	r3, #10243	; 0x2803
    533a:	f8ad 3006 	strh.w	r3, [sp, #6]
    533e:	f7fc fd57 	bl	1df0 <bt_uuid_cmp>
    5342:	b930      	cbnz	r0, 5352 <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    5344:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    5346:	68db      	ldr	r3, [r3, #12]
    5348:	791b      	ldrb	r3, [r3, #4]
    534a:	069b      	lsls	r3, r3, #26
    534c:	d52d      	bpl.n	53aa <gatt_indicate+0x8a>
			return -EINVAL;
		}

		value_handle += 1;
    534e:	3501      	adds	r5, #1
    5350:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    5352:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    5354:	211d      	movs	r1, #29
    5356:	3202      	adds	r2, #2
    5358:	4648      	mov	r0, r9
    535a:	f7ff fb86 	bl	4a6a <bt_att_create_pdu>
	if (!buf) {
    535e:	4606      	mov	r6, r0
    5360:	b330      	cbz	r0, 53b0 <gatt_indicate+0x90>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, value_handle);

	ind = net_buf_add(buf, sizeof(*ind));
    5362:	f100 0708 	add.w	r7, r0, #8
    5366:	2102      	movs	r1, #2
    5368:	4638      	mov	r0, r7
    536a:	f00b f9e9 	bl	10740 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    536e:	4680      	mov	r8, r0

	net_buf_add(buf, params->len);
    5370:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    5372:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    5376:	4638      	mov	r0, r7
    5378:	f00b f9e2 	bl	10740 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    537c:	8c22      	ldrh	r2, [r4, #32]
    537e:	69e1      	ldr	r1, [r4, #28]
    5380:	4640      	mov	r0, r8
    5382:	f7fc fc61 	bl	1c48 <memcpy>
		req->func = func;
    5386:	4b0c      	ldr	r3, [pc, #48]	; (53b8 <gatt_indicate+0x98>)
    5388:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    538a:	2300      	movs	r3, #0
		req->buf = buf;
    538c:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    538e:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    5390:	4621      	mov	r1, r4
    5392:	4648      	mov	r0, r9
    5394:	f7ff ff4e 	bl	5234 <bt_att_req_send>
	if (err) {
    5398:	4604      	mov	r4, r0
    539a:	b110      	cbz	r0, 53a2 <gatt_indicate+0x82>
		net_buf_unref(buf);
    539c:	4630      	mov	r0, r6
    539e:	f00b f99d 	bl	106dc <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    53a2:	4620      	mov	r0, r4
    53a4:	b003      	add	sp, #12
    53a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    53aa:	f06f 0415 	mvn.w	r4, #21
    53ae:	e7f8      	b.n	53a2 <gatt_indicate+0x82>
		return -ENOMEM;
    53b0:	f06f 040b 	mvn.w	r4, #11
    53b4:	e7f5      	b.n	53a2 <gatt_indicate+0x82>
    53b6:	bf00      	nop
    53b8:	000052b9 	.word	0x000052b9

000053bc <gatt_register>:
	if (sys_slist_is_empty(&db)) {
    53bc:	4a18      	ldr	r2, [pc, #96]	; (5420 <gatt_register+0x64>)
    53be:	6813      	ldr	r3, [r2, #0]
{
    53c0:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    53c2:	e890 0012 	ldmia.w	r0, {r1, r4}
	if (sys_slist_is_empty(&db)) {
    53c6:	b143      	cbz	r3, 53da <gatt_register+0x1e>
    53c8:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    53ca:	b33b      	cbz	r3, 541c <gatt_register+0x60>
	handle = last->attrs[last->attr_count - 1].handle;
    53cc:	e913 0028 	ldmdb	r3, {r3, r5}
    53d0:	2614      	movs	r6, #20
    53d2:	fb06 3305 	mla	r3, r6, r5, r3
    53d6:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    53da:	b2a4      	uxth	r4, r4
    53dc:	2514      	movs	r5, #20
    53de:	fb05 1404 	mla	r4, r5, r4, r1
	for (; attrs && count; attrs++, count--) {
    53e2:	b109      	cbz	r1, 53e8 <gatt_register+0x2c>
    53e4:	42a1      	cmp	r1, r4
    53e6:	d108      	bne.n	53fa <gatt_register+0x3e>
	parent->next = child;
    53e8:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    53ea:	f100 0108 	add.w	r1, r0, #8
    53ee:	6083      	str	r3, [r0, #8]
    53f0:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    53f2:	b978      	cbnz	r0, 5414 <gatt_register+0x58>
	list->tail = node;
    53f4:	6051      	str	r1, [r2, #4]
	list->head = node;
    53f6:	6011      	str	r1, [r2, #0]
    53f8:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    53fa:	8a0d      	ldrh	r5, [r1, #16]
    53fc:	b92d      	cbnz	r5, 540a <gatt_register+0x4e>
			attrs->handle = ++handle;
    53fe:	3301      	adds	r3, #1
    5400:	b29d      	uxth	r5, r3
    5402:	820d      	strh	r5, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    5404:	3114      	adds	r1, #20
    5406:	462b      	mov	r3, r5
    5408:	e7eb      	b.n	53e2 <gatt_register+0x26>
		} else if (attrs->handle > handle) {
    540a:	42ab      	cmp	r3, r5
    540c:	d3fa      	bcc.n	5404 <gatt_register+0x48>
			return -EINVAL;
    540e:	f06f 0015 	mvn.w	r0, #21
    5412:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    5414:	6001      	str	r1, [r0, #0]
	list->tail = node;
    5416:	6051      	str	r1, [r2, #4]
	return 0;
    5418:	4618      	mov	r0, r3
    541a:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
    541c:	681b      	ldr	r3, [r3, #0]
    541e:	deff      	udf	#255	; 0xff
    5420:	20000320 	.word	0x20000320

00005424 <sc_indicate.constprop.16>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    5424:	b510      	push	{r4, lr}
    5426:	4b17      	ldr	r3, [pc, #92]	; (5484 <sc_indicate.constprop.16+0x60>)
    5428:	f3bf 8f5b 	dmb	ish
    542c:	f103 0250 	add.w	r2, r3, #80	; 0x50
    5430:	e852 4f00 	ldrex	r4, [r2]
    5434:	f044 0e01 	orr.w	lr, r4, #1
    5438:	e842 ec00 	strex	ip, lr, [r2]
    543c:	f1bc 0f00 	cmp.w	ip, #0
    5440:	d1f6      	bne.n	5430 <sc_indicate.constprop.16+0xc>
    5442:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    5446:	07e2      	lsls	r2, r4, #31
    5448:	d402      	bmi.n	5450 <sc_indicate.constprop.16+0x2c>
		sc->start = start;
    544a:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    544c:	84d9      	strh	r1, [r3, #38]	; 0x26
    544e:	e00a      	b.n	5466 <sc_indicate.constprop.16+0x42>
	if (new_start >= *start && new_end <= *end) {
    5450:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    5452:	4282      	cmp	r2, r0
    5454:	d803      	bhi.n	545e <sc_indicate.constprop.16+0x3a>
    5456:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    5458:	428a      	cmp	r2, r1
    545a:	d301      	bcc.n	5460 <sc_indicate.constprop.16+0x3c>
    545c:	bd10      	pop	{r4, pc}
		*start = new_start;
    545e:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    5460:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    5462:	428a      	cmp	r2, r1
    5464:	d3f2      	bcc.n	544c <sc_indicate.constprop.16+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5466:	f3bf 8f5b 	dmb	ish
    546a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    546c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    5470:	079b      	lsls	r3, r3, #30
    5472:	d406      	bmi.n	5482 <sc_indicate.constprop.16+0x5e>
    5474:	220a      	movs	r2, #10
    5476:	4904      	ldr	r1, [pc, #16]	; (5488 <sc_indicate.constprop.16+0x64>)
    5478:	4804      	ldr	r0, [pc, #16]	; (548c <sc_indicate.constprop.16+0x68>)
}
    547a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    547e:	f00c bd11 	b.w	11ea4 <k_delayed_work_submit_to_queue>
    5482:	bd10      	pop	{r4, pc}
    5484:	20000328 	.word	0x20000328
    5488:	20000350 	.word	0x20000350
    548c:	20001728 	.word	0x20001728

00005490 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5490:	6882      	ldr	r2, [r0, #8]
    5492:	4b19      	ldr	r3, [pc, #100]	; (54f8 <connected_cb+0x68>)
    5494:	429a      	cmp	r2, r3
{
    5496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    549a:	4607      	mov	r7, r0
    549c:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    549e:	d125      	bne.n	54ec <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    54a0:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    54a2:	2600      	movs	r6, #0
    54a4:	686b      	ldr	r3, [r5, #4]
    54a6:	429e      	cmp	r6, r3
    54a8:	d220      	bcs.n	54ec <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    54aa:	6829      	ldr	r1, [r5, #0]
    54ac:	ea4f 1806 	mov.w	r8, r6, lsl #4
    54b0:	4441      	add	r1, r8
    54b2:	4620      	mov	r0, r4
    54b4:	f7fe fa6c 	bl	3990 <bt_conn_addr_le_cmp>
    54b8:	b9d8      	cbnz	r0, 54f2 <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    54ba:	682b      	ldr	r3, [r5, #0]
    54bc:	4443      	add	r3, r8
    54be:	891b      	ldrh	r3, [r3, #8]
    54c0:	b1bb      	cbz	r3, 54f2 <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    54c2:	4629      	mov	r1, r5
    54c4:	4638      	mov	r0, r7
    54c6:	f7ff fede 	bl	5286 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    54ca:	682c      	ldr	r4, [r5, #0]
    54cc:	4b0b      	ldr	r3, [pc, #44]	; (54fc <connected_cb+0x6c>)
    54ce:	429c      	cmp	r4, r3
    54d0:	d10c      	bne.n	54ec <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    54d2:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    54d4:	89a0      	ldrh	r0, [r4, #12]
    54d6:	89e1      	ldrh	r1, [r4, #14]
    54d8:	b900      	cbnz	r0, 54dc <connected_cb+0x4c>
    54da:	b139      	cbz	r1, 54ec <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    54dc:	f7ff ffa2 	bl	5424 <sc_indicate.constprop.16>
	memset(cfg->data, 0, sizeof(cfg->data));
    54e0:	2204      	movs	r2, #4
    54e2:	2100      	movs	r1, #0
    54e4:	f104 000c 	add.w	r0, r4, #12
    54e8:	f7fc fbda 	bl	1ca0 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    54ec:	2001      	movs	r0, #1
    54ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    54f2:	3601      	adds	r6, #1
    54f4:	e7d6      	b.n	54a4 <connected_cb+0x14>
    54f6:	bf00      	nop
    54f8:	000056c9 	.word	0x000056c9
    54fc:	2000037c 	.word	0x2000037c

00005500 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5500:	490d      	ldr	r1, [pc, #52]	; (5538 <sc_indicate_rsp+0x38>)
    5502:	f3bf 8f5b 	dmb	ish
    5506:	f101 0350 	add.w	r3, r1, #80	; 0x50
    550a:	e853 2f00 	ldrex	r2, [r3]
    550e:	f022 0202 	bic.w	r2, r2, #2
    5512:	e843 2000 	strex	r0, r2, [r3]
    5516:	2800      	cmp	r0, #0
    5518:	d1f7      	bne.n	550a <sc_indicate_rsp+0xa>
    551a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    551e:	f3bf 8f5b 	dmb	ish
    5522:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    5524:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    5528:	07db      	lsls	r3, r3, #31
    552a:	d504      	bpl.n	5536 <sc_indicate_rsp+0x36>
    552c:	2200      	movs	r2, #0
    552e:	3128      	adds	r1, #40	; 0x28
    5530:	4802      	ldr	r0, [pc, #8]	; (553c <sc_indicate_rsp+0x3c>)
    5532:	f00c bcb7 	b.w	11ea4 <k_delayed_work_submit_to_queue>
    5536:	4770      	bx	lr
    5538:	20000328 	.word	0x20000328
    553c:	20001728 	.word	0x20001728

00005540 <read_appearance>:
{
    5540:	b513      	push	{r0, r1, r4, lr}
    5542:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    5546:	4610      	mov	r0, r2
	if (offset > value_len) {
    5548:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    554a:	f04f 0200 	mov.w	r2, #0
    554e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    5552:	d80d      	bhi.n	5570 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    5554:	f1c1 0402 	rsb	r4, r1, #2
    5558:	429c      	cmp	r4, r3
    555a:	bfa8      	it	ge
    555c:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    555e:	f10d 0306 	add.w	r3, sp, #6
    5562:	4622      	mov	r2, r4
    5564:	4419      	add	r1, r3
    5566:	f7fc fb6f 	bl	1c48 <memcpy>
}
    556a:	4620      	mov	r0, r4
    556c:	b002      	add	sp, #8
    556e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5570:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    5574:	e7f9      	b.n	556a <read_appearance+0x2a>
	...

00005578 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5578:	6882      	ldr	r2, [r0, #8]
    557a:	4b27      	ldr	r3, [pc, #156]	; (5618 <disconnected_cb+0xa0>)
    557c:	429a      	cmp	r2, r3
{
    557e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    5582:	4680      	mov	r8, r0
    5584:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    5586:	d127      	bne.n	55d8 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    5588:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    558a:	8923      	ldrh	r3, [r4, #8]
    558c:	b323      	cbz	r3, 55d8 <disconnected_cb+0x60>
    558e:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    5590:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    5594:	6863      	ldr	r3, [r4, #4]
    5596:	429e      	cmp	r6, r3
    5598:	d30b      	bcc.n	55b2 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    559a:	2202      	movs	r2, #2
    559c:	2100      	movs	r1, #0
    559e:	f104 0008 	add.w	r0, r4, #8
    55a2:	f7fc fb7d 	bl	1ca0 <memset>
	if (ccc->cfg_changed) {
    55a6:	68e3      	ldr	r3, [r4, #12]
    55a8:	b1b3      	cbz	r3, 55d8 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    55aa:	8921      	ldrh	r1, [r4, #8]
    55ac:	4640      	mov	r0, r8
    55ae:	4798      	blx	r3
    55b0:	e012      	b.n	55d8 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    55b2:	6821      	ldr	r1, [r4, #0]
    55b4:	0135      	lsls	r5, r6, #4
    55b6:	4429      	add	r1, r5
    55b8:	890b      	ldrh	r3, [r1, #8]
    55ba:	b19b      	cbz	r3, 55e4 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    55bc:	4648      	mov	r0, r9
    55be:	f7fe f9e7 	bl	3990 <bt_conn_addr_le_cmp>
    55c2:	b188      	cbz	r0, 55e8 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    55c4:	6820      	ldr	r0, [r4, #0]
    55c6:	4428      	add	r0, r5
    55c8:	f7fe f9fa 	bl	39c0 <bt_conn_lookup_addr_le>
			if (tmp) {
    55cc:	b150      	cbz	r0, 55e4 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    55ce:	7a43      	ldrb	r3, [r0, #9]
    55d0:	2b03      	cmp	r3, #3
    55d2:	d105      	bne.n	55e0 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    55d4:	f7fe fa30 	bl	3a38 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    55d8:	2001      	movs	r0, #1
    55da:	b002      	add	sp, #8
    55dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    55e0:	f7fe fa2a 	bl	3a38 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    55e4:	3601      	adds	r6, #1
    55e6:	e7d5      	b.n	5594 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    55e8:	4650      	mov	r0, sl
    55ea:	f7fd fe61 	bl	32b0 <bt_addr_le_is_bonded>
    55ee:	4607      	mov	r7, r0
    55f0:	6820      	ldr	r0, [r4, #0]
    55f2:	b95f      	cbnz	r7, 560c <disconnected_cb+0x94>
    55f4:	4428      	add	r0, r5
    55f6:	2207      	movs	r2, #7
    55f8:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    55fa:	9700      	str	r7, [sp, #0]
    55fc:	f8cd 7003 	str.w	r7, [sp, #3]
    5600:	f7fc fb22 	bl	1c48 <memcpy>
				ccc->cfg[i].value = 0;
    5604:	6823      	ldr	r3, [r4, #0]
    5606:	441d      	add	r5, r3
    5608:	812f      	strh	r7, [r5, #8]
    560a:	e7eb      	b.n	55e4 <disconnected_cb+0x6c>
    560c:	2207      	movs	r2, #7
    560e:	4651      	mov	r1, sl
    5610:	4428      	add	r0, r5
    5612:	f7fc fb19 	bl	1c48 <memcpy>
    5616:	e7e5      	b.n	55e4 <disconnected_cb+0x6c>
    5618:	000056c9 	.word	0x000056c9

0000561c <read_name>:
{
    561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    5620:	4e0d      	ldr	r6, [pc, #52]	; (5658 <read_name+0x3c>)
{
    5622:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    5626:	4630      	mov	r0, r6
{
    5628:	4698      	mov	r8, r3
    562a:	4617      	mov	r7, r2
				 strlen(gap_name));
    562c:	f7fc fae2 	bl	1bf4 <strlen>
	if (offset > value_len) {
    5630:	b283      	uxth	r3, r0
    5632:	42ab      	cmp	r3, r5
    5634:	d30d      	bcc.n	5652 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    5636:	1b5c      	subs	r4, r3, r5
    5638:	4544      	cmp	r4, r8
    563a:	4623      	mov	r3, r4
    563c:	bfa8      	it	ge
    563e:	4643      	movge	r3, r8
    5640:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    5642:	4622      	mov	r2, r4
    5644:	1971      	adds	r1, r6, r5
    5646:	4638      	mov	r0, r7
    5648:	f7fc fafe 	bl	1c48 <memcpy>
}
    564c:	4620      	mov	r0, r4
    564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5652:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    5656:	e7f9      	b.n	564c <read_name+0x30>
    5658:	000129cc 	.word	0x000129cc

0000565c <bt_gatt_attr_read_ccc>:
{
    565c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    5660:	68ce      	ldr	r6, [r1, #12]
{
    5662:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    5666:	4604      	mov	r4, r0
    5668:	4690      	mov	r8, r2
    566a:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    566c:	2500      	movs	r5, #0
    566e:	6873      	ldr	r3, [r6, #4]
    5670:	429d      	cmp	r5, r3
    5672:	d20e      	bcs.n	5692 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5674:	6831      	ldr	r1, [r6, #0]
    5676:	ea4f 1905 	mov.w	r9, r5, lsl #4
    567a:	4449      	add	r1, r9
    567c:	4620      	mov	r0, r4
    567e:	f7fe f987 	bl	3990 <bt_conn_addr_le_cmp>
    5682:	b108      	cbz	r0, 5688 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    5684:	3501      	adds	r5, #1
    5686:	e7f2      	b.n	566e <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    5688:	6832      	ldr	r2, [r6, #0]
    568a:	444a      	add	r2, r9
    568c:	8913      	ldrh	r3, [r2, #8]
    568e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    5692:	6873      	ldr	r3, [r6, #4]
    5694:	429d      	cmp	r5, r3
		value = 0x0000;
    5696:	bf04      	itt	eq
    5698:	2300      	moveq	r3, #0
    569a:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    569e:	2f02      	cmp	r7, #2
    56a0:	d80f      	bhi.n	56c2 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    56a2:	f1c7 0402 	rsb	r4, r7, #2
    56a6:	4554      	cmp	r4, sl
    56a8:	bfa8      	it	ge
    56aa:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    56ac:	f10d 0306 	add.w	r3, sp, #6
    56b0:	4622      	mov	r2, r4
    56b2:	19d9      	adds	r1, r3, r7
    56b4:	4640      	mov	r0, r8
    56b6:	f7fc fac7 	bl	1c48 <memcpy>
}
    56ba:	4620      	mov	r0, r4
    56bc:	b002      	add	sp, #8
    56be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    56c2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    56c6:	e7f8      	b.n	56ba <bt_gatt_attr_read_ccc+0x5e>

000056c8 <bt_gatt_attr_write_ccc>:
{
    56c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56cc:	b085      	sub	sp, #20
    56ce:	4688      	mov	r8, r1
    56d0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
    56d4:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    56d8:	2902      	cmp	r1, #2
{
    56da:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    56dc:	d853      	bhi.n	5786 <bt_gatt_attr_write_ccc+0xbe>
	if (offset + len > sizeof(u16_t)) {
    56de:	4419      	add	r1, r3
    56e0:	2902      	cmp	r1, #2
    56e2:	461f      	mov	r7, r3
    56e4:	dc52      	bgt.n	578c <bt_gatt_attr_write_ccc+0xc4>
	return ((u16_t)src[1] << 8) | src[0];
    56e6:	7853      	ldrb	r3, [r2, #1]
    56e8:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    56ea:	2400      	movs	r4, #0
    56ec:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    56f0:	686b      	ldr	r3, [r5, #4]
    56f2:	429c      	cmp	r4, r3
    56f4:	d206      	bcs.n	5704 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    56f6:	6829      	ldr	r1, [r5, #0]
    56f8:	4648      	mov	r0, r9
    56fa:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    56fe:	f7fe f947 	bl	3990 <bt_conn_addr_le_cmp>
    5702:	b9c0      	cbnz	r0, 5736 <bt_gatt_attr_write_ccc+0x6e>
	if (i == ccc->cfg_len) {
    5704:	686b      	ldr	r3, [r5, #4]
    5706:	429c      	cmp	r4, r3
    5708:	d121      	bne.n	574e <bt_gatt_attr_write_ccc+0x86>
		if (!value) {
    570a:	2e00      	cmp	r6, #0
    570c:	d037      	beq.n	577e <bt_gatt_attr_write_ccc+0xb6>
    570e:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    5710:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    5712:	686b      	ldr	r3, [r5, #4]
    5714:	429c      	cmp	r4, r3
    5716:	d217      	bcs.n	5748 <bt_gatt_attr_write_ccc+0x80>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    5718:	6828      	ldr	r0, [r5, #0]
    571a:	f8cd a000 	str.w	sl, [sp]
    571e:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    5722:	2207      	movs	r2, #7
    5724:	4669      	mov	r1, sp
    5726:	4458      	add	r0, fp
    5728:	f8cd a003 	str.w	sl, [sp, #3]
    572c:	f7fc fa77 	bl	1c1e <memcmp>
    5730:	b118      	cbz	r0, 573a <bt_gatt_attr_write_ccc+0x72>
		for (i = 0; i < ccc->cfg_len; i++) {
    5732:	3401      	adds	r4, #1
    5734:	e7ed      	b.n	5712 <bt_gatt_attr_write_ccc+0x4a>
	for (i = 0; i < ccc->cfg_len; i++) {
    5736:	3401      	adds	r4, #1
    5738:	e7da      	b.n	56f0 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    573a:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    573c:	2207      	movs	r2, #7
    573e:	f109 0144 	add.w	r1, r9, #68	; 0x44
    5742:	4458      	add	r0, fp
    5744:	f7fc fa80 	bl	1c48 <memcpy>
		if (i == ccc->cfg_len) {
    5748:	686b      	ldr	r3, [r5, #4]
    574a:	429c      	cmp	r4, r3
    574c:	d021      	beq.n	5792 <bt_gatt_attr_write_ccc+0xca>
	ccc->cfg[i].value = value;
    574e:	682b      	ldr	r3, [r5, #0]
    5750:	0124      	lsls	r4, r4, #4
    5752:	4423      	add	r3, r4
    5754:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    5756:	892b      	ldrh	r3, [r5, #8]
    5758:	42b3      	cmp	r3, r6
    575a:	d003      	beq.n	5764 <bt_gatt_attr_write_ccc+0x9c>
		gatt_ccc_changed(attr, ccc);
    575c:	4629      	mov	r1, r5
    575e:	4640      	mov	r0, r8
    5760:	f7ff fd91 	bl	5286 <gatt_ccc_changed>
	if (!value) {
    5764:	b95e      	cbnz	r6, 577e <bt_gatt_attr_write_ccc+0xb6>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    5766:	6828      	ldr	r0, [r5, #0]
    5768:	9602      	str	r6, [sp, #8]
    576a:	4420      	add	r0, r4
    576c:	2207      	movs	r2, #7
    576e:	a902      	add	r1, sp, #8
    5770:	f8cd 600b 	str.w	r6, [sp, #11]
    5774:	f7fc fa68 	bl	1c48 <memcpy>
		ccc->cfg[i].value = 0;
    5778:	682b      	ldr	r3, [r5, #0]
    577a:	441c      	add	r4, r3
    577c:	8126      	strh	r6, [r4, #8]
}
    577e:	4638      	mov	r0, r7
    5780:	b005      	add	sp, #20
    5782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5786:	f06f 0706 	mvn.w	r7, #6
    578a:	e7f8      	b.n	577e <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    578c:	f06f 070c 	mvn.w	r7, #12
    5790:	e7f5      	b.n	577e <bt_gatt_attr_write_ccc+0xb6>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    5792:	f06f 0710 	mvn.w	r7, #16
    5796:	e7f2      	b.n	577e <bt_gatt_attr_write_ccc+0xb6>

00005798 <bt_gatt_attr_read_service>:
{
    5798:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    579a:	68c9      	ldr	r1, [r1, #12]
{
    579c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    57a0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    57a2:	780a      	ldrb	r2, [r1, #0]
    57a4:	b992      	cbnz	r2, 57cc <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    57a6:	884a      	ldrh	r2, [r1, #2]
    57a8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    57ac:	2d02      	cmp	r5, #2
    57ae:	d819      	bhi.n	57e4 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    57b0:	f1c5 0402 	rsb	r4, r5, #2
    57b4:	429c      	cmp	r4, r3
    57b6:	bfa8      	it	ge
    57b8:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    57ba:	f10d 0306 	add.w	r3, sp, #6
    57be:	4622      	mov	r2, r4
    57c0:	1959      	adds	r1, r3, r5
    57c2:	f7fc fa41 	bl	1c48 <memcpy>
}
    57c6:	4620      	mov	r0, r4
    57c8:	b003      	add	sp, #12
    57ca:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    57cc:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    57ce:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    57d2:	d807      	bhi.n	57e4 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    57d4:	f1c5 0410 	rsb	r4, r5, #16
    57d8:	429c      	cmp	r4, r3
    57da:	bfa8      	it	ge
    57dc:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    57de:	4622      	mov	r2, r4
    57e0:	4429      	add	r1, r5
    57e2:	e7ee      	b.n	57c2 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    57e4:	f06f 0406 	mvn.w	r4, #6
    57e8:	e7ed      	b.n	57c6 <bt_gatt_attr_read_service+0x2e>
	...

000057ec <notify_cb>:
{
    57ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    57f0:	f642 1302 	movw	r3, #10498	; 0x2902
{
    57f4:	4605      	mov	r5, r0
    57f6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    57f8:	2400      	movs	r4, #0
    57fa:	4669      	mov	r1, sp
    57fc:	6800      	ldr	r0, [r0, #0]
    57fe:	f88d 4000 	strb.w	r4, [sp]
    5802:	f8ad 3002 	strh.w	r3, [sp, #2]
    5806:	f7fc faf3 	bl	1df0 <bt_uuid_cmp>
    580a:	b178      	cbz	r0, 582c <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    580c:	f642 0303 	movw	r3, #10243	; 0x2803
    5810:	6828      	ldr	r0, [r5, #0]
    5812:	f88d 4004 	strb.w	r4, [sp, #4]
    5816:	a901      	add	r1, sp, #4
    5818:	f8ad 3006 	strh.w	r3, [sp, #6]
    581c:	f7fc fae8 	bl	1df0 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    5820:	1b00      	subs	r0, r0, r4
    5822:	bf18      	it	ne
    5824:	2001      	movne	r0, #1
}
    5826:	b003      	add	sp, #12
    5828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    582c:	68aa      	ldr	r2, [r5, #8]
    582e:	4b2b      	ldr	r3, [pc, #172]	; (58dc <notify_cb+0xf0>)
    5830:	429a      	cmp	r2, r3
    5832:	d001      	beq.n	5838 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    5834:	2001      	movs	r0, #1
    5836:	e7f6      	b.n	5826 <notify_cb+0x3a>
	ccc = attr->user_data;
    5838:	68ef      	ldr	r7, [r5, #12]
    583a:	4d29      	ldr	r5, [pc, #164]	; (58e0 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    583c:	4604      	mov	r4, r0
    583e:	46a8      	mov	r8, r5
    5840:	4681      	mov	r9, r0
    5842:	687b      	ldr	r3, [r7, #4]
    5844:	429c      	cmp	r4, r3
    5846:	d2f5      	bcs.n	5834 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    5848:	6838      	ldr	r0, [r7, #0]
    584a:	88b3      	ldrh	r3, [r6, #4]
    584c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    5850:	8902      	ldrh	r2, [r0, #8]
    5852:	429a      	cmp	r2, r3
    5854:	d114      	bne.n	5880 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    5856:	f7fe f8b3 	bl	39c0 <bt_conn_lookup_addr_le>
		if (!conn) {
    585a:	4683      	mov	fp, r0
    585c:	b9f8      	cbnz	r0, 589e <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    585e:	683b      	ldr	r3, [r7, #0]
    5860:	4543      	cmp	r3, r8
    5862:	d10d      	bne.n	5880 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    5864:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    5866:	a801      	add	r0, sp, #4
    5868:	8c1a      	ldrh	r2, [r3, #32]
    586a:	69d9      	ldr	r1, [r3, #28]
    586c:	f7fc f9ec 	bl	1c48 <memcpy>
	if (!stored->start && !stored->end) {
    5870:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    5872:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5876:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    5878:	b928      	cbnz	r0, 5886 <notify_cb+0x9a>
    587a:	b942      	cbnz	r2, 588e <notify_cb+0xa2>
		*stored = data;
    587c:	9801      	ldr	r0, [sp, #4]
    587e:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    5880:	3401      	adds	r4, #1
    5882:	3510      	adds	r5, #16
    5884:	e7dd      	b.n	5842 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    5886:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    588a:	4281      	cmp	r1, r0
    588c:	d305      	bcc.n	589a <notify_cb+0xae>
    588e:	429a      	cmp	r2, r3
    5890:	d2f6      	bcs.n	5880 <notify_cb+0x94>
	if (*end < new_end) {
    5892:	429a      	cmp	r2, r3
    5894:	d2f4      	bcs.n	5880 <notify_cb+0x94>
		*end = new_end;
    5896:	81eb      	strh	r3, [r5, #14]
    5898:	e7f2      	b.n	5880 <notify_cb+0x94>
		*start = new_start;
    589a:	81a9      	strh	r1, [r5, #12]
    589c:	e7f9      	b.n	5892 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    589e:	7a43      	ldrb	r3, [r0, #9]
    58a0:	2b03      	cmp	r3, #3
    58a2:	d002      	beq.n	58aa <notify_cb+0xbe>
			bt_conn_unref(conn);
    58a4:	f7fe f8c8 	bl	3a38 <bt_conn_unref>
    58a8:	e7ea      	b.n	5880 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    58aa:	88b3      	ldrh	r3, [r6, #4]
    58ac:	2b02      	cmp	r3, #2
    58ae:	d10c      	bne.n	58ca <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    58b0:	6971      	ldr	r1, [r6, #20]
    58b2:	f7ff fd35 	bl	5320 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    58b6:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    58b8:	4658      	mov	r0, fp
    58ba:	f7fe f8bd 	bl	3a38 <bt_conn_unref>
		if (err < 0) {
    58be:	f1ba 0f00 	cmp.w	sl, #0
    58c2:	db09      	blt.n	58d8 <notify_cb+0xec>
		data->err = 0;
    58c4:	f8c6 9000 	str.w	r9, [r6]
    58c8:	e7da      	b.n	5880 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    58ca:	68b1      	ldr	r1, [r6, #8]
    58cc:	8a33      	ldrh	r3, [r6, #16]
    58ce:	68f2      	ldr	r2, [r6, #12]
    58d0:	8a09      	ldrh	r1, [r1, #16]
    58d2:	f7ff fcf9 	bl	52c8 <gatt_notify>
    58d6:	e7ee      	b.n	58b6 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    58d8:	2000      	movs	r0, #0
    58da:	e7a4      	b.n	5826 <notify_cb+0x3a>
    58dc:	000056c9 	.word	0x000056c9
    58e0:	2000037c 	.word	0x2000037c

000058e4 <bt_gatt_init>:
{
    58e4:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    58e6:	4806      	ldr	r0, [pc, #24]	; (5900 <bt_gatt_init+0x1c>)
    58e8:	f7ff fd68 	bl	53bc <gatt_register>
	gatt_register(&gatt_svc);
    58ec:	4805      	ldr	r0, [pc, #20]	; (5904 <bt_gatt_init+0x20>)
    58ee:	f7ff fd65 	bl	53bc <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    58f2:	4905      	ldr	r1, [pc, #20]	; (5908 <bt_gatt_init+0x24>)
    58f4:	4805      	ldr	r0, [pc, #20]	; (590c <bt_gatt_init+0x28>)
}
    58f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    58fa:	f00c ba5f 	b.w	11dbc <k_delayed_work_init>
    58fe:	bf00      	nop
    5900:	200036b4 	.word	0x200036b4
    5904:	20003710 	.word	0x20003710
    5908:	00005991 	.word	0x00005991
    590c:	20000350 	.word	0x20000350

00005910 <bt_gatt_foreach_attr>:
{
    5910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5914:	4699      	mov	r9, r3
    5916:	4b12      	ldr	r3, [pc, #72]	; (5960 <bt_gatt_foreach_attr+0x50>)
    5918:	681c      	ldr	r4, [r3, #0]
    591a:	4606      	mov	r6, r0
    591c:	460f      	mov	r7, r1
    591e:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5920:	b1dc      	cbz	r4, 595a <bt_gatt_foreach_attr+0x4a>
    5922:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    5924:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5928:	b1bc      	cbz	r4, 595a <bt_gatt_foreach_attr+0x4a>
    592a:	2500      	movs	r5, #0
    592c:	e006      	b.n	593c <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    592e:	6820      	ldr	r0, [r4, #0]
    5930:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    5934:	8a03      	ldrh	r3, [r0, #16]
    5936:	42b3      	cmp	r3, r6
    5938:	d207      	bcs.n	594a <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    593a:	3501      	adds	r5, #1
    593c:	6863      	ldr	r3, [r4, #4]
    593e:	42ab      	cmp	r3, r5
    5940:	d8f5      	bhi.n	592e <bt_gatt_foreach_attr+0x1e>
	return node->next;
    5942:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5944:	b14c      	cbz	r4, 595a <bt_gatt_foreach_attr+0x4a>
    5946:	3c08      	subs	r4, #8
    5948:	e7ee      	b.n	5928 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    594a:	42bb      	cmp	r3, r7
    594c:	d8f5      	bhi.n	593a <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    594e:	4649      	mov	r1, r9
    5950:	47c0      	blx	r8
    5952:	2800      	cmp	r0, #0
    5954:	d1f1      	bne.n	593a <bt_gatt_foreach_attr+0x2a>
    5956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    595a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    595e:	bf00      	nop
    5960:	20000320 	.word	0x20000320

00005964 <bt_gatt_indicate.part.9>:
int bt_gatt_indicate(struct bt_conn *conn,
    5964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    5966:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    596a:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    596c:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    596e:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    5970:	2302      	movs	r3, #2
    5972:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    5976:	4a05      	ldr	r2, [pc, #20]	; (598c <bt_gatt_indicate.part.9+0x28>)
    5978:	8a00      	ldrh	r0, [r0, #16]
    597a:	466b      	mov	r3, sp
    597c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5980:	f7ff ffc6 	bl	5910 <bt_gatt_foreach_attr>
}
    5984:	9800      	ldr	r0, [sp, #0]
    5986:	b007      	add	sp, #28
    5988:	f85d fb04 	ldr.w	pc, [sp], #4
    598c:	000057ed 	.word	0x000057ed

00005990 <sc_process>:
{
    5990:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    5992:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    5996:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    599a:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    599c:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    59a0:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    59a4:	3828      	subs	r0, #40	; 0x28
    59a6:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    59aa:	f3bf 8f5b 	dmb	ish
    59ae:	e854 2f00 	ldrex	r2, [r4]
    59b2:	f022 0201 	bic.w	r2, r2, #1
    59b6:	e844 2100 	strex	r1, r2, [r4]
    59ba:	2900      	cmp	r1, #0
    59bc:	d1f7      	bne.n	59ae <sc_process+0x1e>
    59be:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    59c2:	2200      	movs	r2, #0
    59c4:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    59c8:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    59cc:	4a0e      	ldr	r2, [pc, #56]	; (5a08 <sc_process+0x78>)
    59ce:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    59d2:	4a0e      	ldr	r2, [pc, #56]	; (5a0c <sc_process+0x7c>)
    59d4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    59d8:	aa01      	add	r2, sp, #4
    59da:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    59de:	2204      	movs	r2, #4
    59e0:	f823 2c08 	strh.w	r2, [r3, #-8]
    59e4:	f7ff ffbe 	bl	5964 <bt_gatt_indicate.part.9>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    59e8:	b958      	cbnz	r0, 5a02 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    59ea:	f3bf 8f5b 	dmb	ish
    59ee:	e854 3f00 	ldrex	r3, [r4]
    59f2:	f043 0302 	orr.w	r3, r3, #2
    59f6:	e844 3200 	strex	r2, r3, [r4]
    59fa:	2a00      	cmp	r2, #0
    59fc:	d1f7      	bne.n	59ee <sc_process+0x5e>
    59fe:	f3bf 8f5b 	dmb	ish
}
    5a02:	b002      	add	sp, #8
    5a04:	bd10      	pop	{r4, pc}
    5a06:	bf00      	nop
    5a08:	200036e8 	.word	0x200036e8
    5a0c:	00005501 	.word	0x00005501

00005a10 <bt_gatt_attr_next>:
{
    5a10:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    5a12:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    5a14:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    5a16:	3101      	adds	r1, #1
    5a18:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    5a1a:	2200      	movs	r2, #0
    5a1c:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    5a20:	4608      	mov	r0, r1
    5a22:	4a03      	ldr	r2, [pc, #12]	; (5a30 <bt_gatt_attr_next+0x20>)
    5a24:	f7ff ff74 	bl	5910 <bt_gatt_foreach_attr>
}
    5a28:	9801      	ldr	r0, [sp, #4]
    5a2a:	b003      	add	sp, #12
    5a2c:	f85d fb04 	ldr.w	pc, [sp], #4
    5a30:	00005281 	.word	0x00005281

00005a34 <bt_gatt_attr_read_chrc>:
{
    5a34:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    5a36:	68cf      	ldr	r7, [r1, #12]
{
    5a38:	b087      	sub	sp, #28
    5a3a:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    5a3c:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    5a3e:	793b      	ldrb	r3, [r7, #4]
{
    5a40:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    5a44:	f88d 3004 	strb.w	r3, [sp, #4]
{
    5a48:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    5a4a:	f7ff ffe1 	bl	5a10 <bt_gatt_attr_next>
	if (!next) {
    5a4e:	b9d0      	cbnz	r0, 5a86 <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
    5a50:	f88d 0005 	strb.w	r0, [sp, #5]
    5a54:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    5a58:	6839      	ldr	r1, [r7, #0]
    5a5a:	780b      	ldrb	r3, [r1, #0]
    5a5c:	b9bb      	cbnz	r3, 5a8e <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    5a5e:	884b      	ldrh	r3, [r1, #2]
    5a60:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    5a64:	2305      	movs	r3, #5
	if (offset > value_len) {
    5a66:	42ab      	cmp	r3, r5
    5a68:	d319      	bcc.n	5a9e <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
    5a6a:	1b5b      	subs	r3, r3, r5
    5a6c:	42a3      	cmp	r3, r4
    5a6e:	bfa8      	it	ge
    5a70:	4623      	movge	r3, r4
    5a72:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    5a74:	ab01      	add	r3, sp, #4
    5a76:	4622      	mov	r2, r4
    5a78:	1959      	adds	r1, r3, r5
    5a7a:	4630      	mov	r0, r6
    5a7c:	f7fc f8e4 	bl	1c48 <memcpy>
}
    5a80:	4620      	mov	r0, r4
    5a82:	b007      	add	sp, #28
    5a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    5a86:	8a03      	ldrh	r3, [r0, #16]
    5a88:	f8ad 3005 	strh.w	r3, [sp, #5]
    5a8c:	e7e4      	b.n	5a58 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    5a8e:	2210      	movs	r2, #16
    5a90:	3101      	adds	r1, #1
    5a92:	f10d 0007 	add.w	r0, sp, #7
    5a96:	f7fc f8d7 	bl	1c48 <memcpy>
		value_len += 16;
    5a9a:	2313      	movs	r3, #19
    5a9c:	e7e3      	b.n	5a66 <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5a9e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    5aa2:	e7ed      	b.n	5a80 <bt_gatt_attr_read_chrc+0x4c>

00005aa4 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    5aa4:	4603      	mov	r3, r0
    5aa6:	4a03      	ldr	r2, [pc, #12]	; (5ab4 <bt_gatt_connected+0x10>)
    5aa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5aac:	2001      	movs	r0, #1
    5aae:	f7ff bf2f 	b.w	5910 <bt_gatt_foreach_attr>
    5ab2:	bf00      	nop
    5ab4:	00005491 	.word	0x00005491

00005ab8 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    5ab8:	4603      	mov	r3, r0
    5aba:	4a03      	ldr	r2, [pc, #12]	; (5ac8 <bt_gatt_disconnected+0x10>)
    5abc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5ac0:	2001      	movs	r0, #1
    5ac2:	f7ff bf25 	b.w	5910 <bt_gatt_foreach_attr>
    5ac6:	bf00      	nop
    5ac8:	00005579 	.word	0x00005579

00005acc <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    5acc:	4b04      	ldr	r3, [pc, #16]	; (5ae0 <bt_smp_accept+0x14>)
    5ace:	6818      	ldr	r0, [r3, #0]
    5ad0:	b918      	cbnz	r0, 5ada <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    5ad2:	4a04      	ldr	r2, [pc, #16]	; (5ae4 <bt_smp_accept+0x18>)
    5ad4:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    5ad6:	600b      	str	r3, [r1, #0]

		return 0;
    5ad8:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    5ada:	f06f 000b 	mvn.w	r0, #11
}
    5ade:	4770      	bx	lr
    5ae0:	2000038c 	.word	0x2000038c
    5ae4:	20003728 	.word	0x20003728

00005ae8 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    5ae8:	2100      	movs	r1, #0
{
    5aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    5aee:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    5af0:	4608      	mov	r0, r1
    5af2:	f7fe faca 	bl	408a <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5af6:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    5afa:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5afc:	2101      	movs	r1, #1
    5afe:	4630      	mov	r0, r6
    5b00:	f00a fe1e 	bl	10740 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    5b04:	2505      	movs	r5, #5
    5b06:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    5b08:	2101      	movs	r1, #1
    5b0a:	4630      	mov	r0, r6
    5b0c:	f00a fe18 	bl	10740 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    5b10:	7005      	strb	r5, [r0, #0]
    5b12:	4622      	mov	r2, r4
    5b14:	4638      	mov	r0, r7
    5b16:	2300      	movs	r3, #0
    5b18:	2106      	movs	r1, #6
}
    5b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b1e:	f7fe bab7 	b.w	4090 <bt_l2cap_send_cb>

00005b22 <bt_smp_sign_verify>:
    5b22:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5b26:	4770      	bx	lr

00005b28 <bt_smp_init>:

int bt_smp_init(void)
{
    5b28:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5b2a:	4802      	ldr	r0, [pc, #8]	; (5b34 <bt_smp_init+0xc>)
    5b2c:	f7fe fa08 	bl	3f40 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    5b30:	2000      	movs	r0, #0
    5b32:	bd08      	pop	{r3, pc}
    5b34:	2000371c 	.word	0x2000371c

00005b38 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    5b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    5b3a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5b3c:	1dc3      	adds	r3, r0, #7
{
    5b3e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5b40:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5b44:	1e50      	subs	r0, r2, #1
{
    5b46:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5b48:	b280      	uxth	r0, r0
{
    5b4a:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5b4c:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5b4e:	2100      	movs	r1, #0
    5b50:	2204      	movs	r2, #4
    5b52:	fb06 5000 	mla	r0, r6, r0, r5
    5b56:	f7fc f8a3 	bl	1ca0 <memset>
    5b5a:	3c02      	subs	r4, #2
    5b5c:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    5b5e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    5b62:	42bc      	cmp	r4, r7
    5b64:	d101      	bne.n	5b6a <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    5b66:	b003      	add	sp, #12
    5b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    5b6a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    5b6e:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    5b70:	2204      	movs	r2, #4
    5b72:	1b80      	subs	r0, r0, r6
    5b74:	eb0d 0102 	add.w	r1, sp, r2
    5b78:	4428      	add	r0, r5
    5b7a:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    5b7c:	9301      	str	r3, [sp, #4]
    5b7e:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    5b80:	f7fc f862 	bl	1c48 <memcpy>
    5b84:	e7ed      	b.n	5b62 <mem_init+0x2a>

00005b86 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    5b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    5b88:	6805      	ldr	r5, [r0, #0]
{
    5b8a:	4606      	mov	r6, r0
	if (*mem_head) {
    5b8c:	b195      	cbz	r5, 5bb4 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5b8e:	1deb      	adds	r3, r5, #7
    5b90:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    5b94:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5b96:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    5b98:	4629      	mov	r1, r5
    5b9a:	eb0d 0002 	add.w	r0, sp, r2
    5b9e:	f7fc f853 	bl	1c48 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    5ba2:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    5ba4:	3c01      	subs	r4, #1
    5ba6:	b2a4      	uxth	r4, r4
		if (head) {
    5ba8:	b11b      	cbz	r3, 5bb2 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    5baa:	1dda      	adds	r2, r3, #7
    5bac:	f022 0203 	bic.w	r2, r2, #3
    5bb0:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    5bb2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    5bb4:	4628      	mov	r0, r5
    5bb6:	b002      	add	sp, #8
    5bb8:	bd70      	pop	{r4, r5, r6, pc}

00005bba <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    5bba:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    5bbc:	680c      	ldr	r4, [r1, #0]
{
    5bbe:	4606      	mov	r6, r0
    5bc0:	460d      	mov	r5, r1
	if (*mem_head) {
    5bc2:	b11c      	cbz	r4, 5bcc <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5bc4:	1de3      	adds	r3, r4, #7
    5bc6:	f023 0303 	bic.w	r3, r3, #3
    5bca:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    5bcc:	2204      	movs	r2, #4
    5bce:	4629      	mov	r1, r5
    5bd0:	4630      	mov	r0, r6
    5bd2:	f7fc f839 	bl	1c48 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    5bd6:	1df2      	adds	r2, r6, #7
    5bd8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    5bdc:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    5bde:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    5be0:	602e      	str	r6, [r5, #0]
    5be2:	bd70      	pop	{r4, r5, r6, pc}

00005be4 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    5be4:	b118      	cbz	r0, 5bee <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    5be6:	3007      	adds	r0, #7
    5be8:	f020 0003 	bic.w	r0, r0, #3
    5bec:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    5bee:	4770      	bx	lr

00005bf0 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    5bf0:	fb02 0001 	mla	r0, r2, r1, r0
    5bf4:	4770      	bx	lr

00005bf6 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    5bf6:	1a40      	subs	r0, r0, r1
    5bf8:	b280      	uxth	r0, r0
}
    5bfa:	fbb0 f0f2 	udiv	r0, r0, r2
    5bfe:	4770      	bx	lr

00005c00 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    5c00:	b510      	push	{r4, lr}
	src += len;
    5c02:	4411      	add	r1, r2
    5c04:	3801      	subs	r0, #1
	while (len--) {
    5c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5c0a:	3a01      	subs	r2, #1
    5c0c:	b292      	uxth	r2, r2
    5c0e:	429a      	cmp	r2, r3
    5c10:	d100      	bne.n	5c14 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    5c12:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    5c14:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    5c18:	f800 4f01 	strb.w	r4, [r0, #1]!
    5c1c:	e7f5      	b.n	5c0a <mem_rcopy+0xa>

00005c1e <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    5c1e:	4401      	add	r1, r0
	while (len--) {
    5c20:	4288      	cmp	r0, r1
    5c22:	d101      	bne.n	5c28 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    5c24:	2000      	movs	r0, #0
    5c26:	4770      	bx	lr
		if (*src++) {
    5c28:	f810 3b01 	ldrb.w	r3, [r0], #1
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	d0f7      	beq.n	5c20 <mem_nz+0x2>
			return 1;
    5c30:	2001      	movs	r0, #1
}
    5c32:	4770      	bx	lr

00005c34 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    5c34:	6010      	str	r0, [r2, #0]
    5c36:	6008      	str	r0, [r1, #0]

	return link;
}
    5c38:	4770      	bx	lr

00005c3a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    5c3a:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    5c3c:	6814      	ldr	r4, [r2, #0]
    5c3e:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    5c40:	6814      	ldr	r4, [r2, #0]
    5c42:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    5c44:	6010      	str	r0, [r2, #0]

	return link;
}
    5c46:	bd10      	pop	{r4, pc}

00005c48 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    5c48:	4288      	cmp	r0, r1
    5c4a:	d003      	beq.n	5c54 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    5c4c:	b11a      	cbz	r2, 5c56 <memq_peek+0xe>
		*mem = head->mem;
    5c4e:	6843      	ldr	r3, [r0, #4]
    5c50:	6013      	str	r3, [r2, #0]
    5c52:	4770      	bx	lr
		return NULL;
    5c54:	2000      	movs	r0, #0
	}

	return head;
}
    5c56:	4770      	bx	lr

00005c58 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    5c58:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    5c5a:	4283      	cmp	r3, r0
    5c5c:	d009      	beq.n	5c72 <memq_dequeue+0x1a>
	if (mem) {
    5c5e:	b122      	cbz	r2, 5c6a <memq_dequeue+0x12>
		*mem = head->mem;
    5c60:	6858      	ldr	r0, [r3, #4]
    5c62:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    5c64:	681a      	ldr	r2, [r3, #0]
    5c66:	600a      	str	r2, [r1, #0]

	return link;
    5c68:	e001      	b.n	5c6e <memq_dequeue+0x16>
	if (!link) {
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d1fa      	bne.n	5c64 <memq_dequeue+0xc>
}
    5c6e:	4618      	mov	r0, r3
    5c70:	4770      	bx	lr
		return NULL;
    5c72:	2300      	movs	r3, #0
    5c74:	e7fb      	b.n	5c6e <memq_dequeue+0x16>
	...

00005c78 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    5c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    5c7c:	4f11      	ldr	r7, [pc, #68]	; (5cc4 <mayfly_init+0x4c>)
    5c7e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 5cc8 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    5c82:	2604      	movs	r6, #4
	while (callee_id--) {
    5c84:	3e01      	subs	r6, #1
    5c86:	b2f6      	uxtb	r6, r6
    5c88:	2eff      	cmp	r6, #255	; 0xff
    5c8a:	d019      	beq.n	5cc0 <mayfly_init+0x48>
    5c8c:	b233      	sxth	r3, r6
    5c8e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    5c92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5c96:	011d      	lsls	r5, r3, #4
    5c98:	2404      	movs	r4, #4
    5c9a:	f04f 0a0c 	mov.w	sl, #12
    5c9e:	e00a      	b.n	5cb6 <mayfly_init+0x3e>
    5ca0:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    5ca4:	1d0a      	adds	r2, r1, #4
    5ca6:	eb04 0008 	add.w	r0, r4, r8
    5caa:	443a      	add	r2, r7
    5cac:	4439      	add	r1, r7
    5cae:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    5cb2:	f7ff ffbf 	bl	5c34 <memq_init>
		while (caller_id--) {
    5cb6:	3c01      	subs	r4, #1
    5cb8:	b2e4      	uxtb	r4, r4
    5cba:	2cff      	cmp	r4, #255	; 0xff
    5cbc:	d1f0      	bne.n	5ca0 <mayfly_init+0x28>
    5cbe:	e7e1      	b.n	5c84 <mayfly_init+0xc>
    5cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cc4:	200004a0 	.word	0x200004a0
    5cc8:	20000420 	.word	0x20000420

00005ccc <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    5ccc:	b4f0      	push	{r4, r5, r6, r7}
    5cce:	4b12      	ldr	r3, [pc, #72]	; (5d18 <mayfly_enable+0x4c>)
    5cd0:	4605      	mov	r5, r0
    5cd2:	460f      	mov	r7, r1
    5cd4:	260c      	movs	r6, #12
    5cd6:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    5cd8:	b172      	cbz	r2, 5cf8 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    5cda:	4361      	muls	r1, r4
    5cdc:	fb06 1400 	mla	r4, r6, r0, r1
    5ce0:	4423      	add	r3, r4
    5ce2:	7a59      	ldrb	r1, [r3, #9]
    5ce4:	7a18      	ldrb	r0, [r3, #8]
    5ce6:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    5ce8:	bf04      	itt	eq
    5cea:	3101      	addeq	r1, #1
    5cec:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    5cee:	4628      	mov	r0, r5
    5cf0:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    5cf2:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    5cf4:	f00a bb9a 	b.w	1042c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    5cf8:	434c      	muls	r4, r1
    5cfa:	fb06 4400 	mla	r4, r6, r0, r4
    5cfe:	4423      	add	r3, r4
    5d00:	7a9c      	ldrb	r4, [r3, #10]
    5d02:	7ada      	ldrb	r2, [r3, #11]
    5d04:	42a2      	cmp	r2, r4
    5d06:	d104      	bne.n	5d12 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    5d08:	3201      	adds	r2, #1
    5d0a:	729a      	strb	r2, [r3, #10]
}
    5d0c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    5d0e:	f00a bbbb 	b.w	10488 <mayfly_pend>
}
    5d12:	bcf0      	pop	{r4, r5, r6, r7}
    5d14:	4770      	bx	lr
    5d16:	bf00      	nop
    5d18:	200004a0 	.word	0x200004a0

00005d1c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    5d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d1e:	4605      	mov	r5, r0
    5d20:	460e      	mov	r6, r1
    5d22:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    5d24:	b18a      	cbz	r2, 5d4a <mayfly_enqueue+0x2e>
    5d26:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    5d28:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    5d2a:	7820      	ldrb	r0, [r4, #0]
    5d2c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    5d2e:	f010 0703 	ands.w	r7, r0, #3
    5d32:	d029      	beq.n	5d88 <mayfly_enqueue+0x6c>
		if (chain) {
    5d34:	b303      	cbz	r3, 5d78 <mayfly_enqueue+0x5c>
			if (state != 1) {
    5d36:	2f01      	cmp	r7, #1
    5d38:	d039      	beq.n	5dae <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    5d3a:	3201      	adds	r2, #1
    5d3c:	b2d2      	uxtb	r2, r2
    5d3e:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    5d40:	4631      	mov	r1, r6
    5d42:	4628      	mov	r0, r5
    5d44:	f00a fba0 	bl	10488 <mayfly_pend>
    5d48:	e01c      	b.n	5d84 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    5d4a:	f00a fb8b 	bl	10464 <mayfly_prio_is_equal>
    5d4e:	2800      	cmp	r0, #0
    5d50:	d0e9      	beq.n	5d26 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    5d52:	4631      	mov	r1, r6
    5d54:	4628      	mov	r0, r5
    5d56:	f00a fb77 	bl	10448 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    5d5a:	2800      	cmp	r0, #0
    5d5c:	d0e3      	beq.n	5d26 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    5d5e:	2330      	movs	r3, #48	; 0x30
    5d60:	220c      	movs	r2, #12
    5d62:	4373      	muls	r3, r6
    5d64:	fb02 3305 	mla	r3, r2, r5, r3
    5d68:	4a12      	ldr	r2, [pc, #72]	; (5db4 <mayfly_enqueue+0x98>)
    5d6a:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    5d6c:	7a93      	ldrb	r3, [r2, #10]
    5d6e:	7ad2      	ldrb	r2, [r2, #11]
    5d70:	1a9b      	subs	r3, r3, r2
    5d72:	bf18      	it	ne
    5d74:	2301      	movne	r3, #1
    5d76:	e7d7      	b.n	5d28 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    5d78:	3202      	adds	r2, #2
    5d7a:	b2d2      	uxtb	r2, r2
    5d7c:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    5d7e:	68e3      	ldr	r3, [r4, #12]
    5d80:	68a0      	ldr	r0, [r4, #8]
    5d82:	4798      	blx	r3
		return 0;
    5d84:	2000      	movs	r0, #0
    5d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    5d88:	2b00      	cmp	r3, #0
    5d8a:	d0f8      	beq.n	5d7e <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    5d8c:	3201      	adds	r2, #1
    5d8e:	b2d2      	uxtb	r2, r2
    5d90:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    5d92:	2304      	movs	r3, #4
    5d94:	2230      	movs	r2, #48	; 0x30
    5d96:	fb12 3206 	smlabb	r2, r2, r6, r3
    5d9a:	230c      	movs	r3, #12
    5d9c:	fb13 2305 	smlabb	r3, r3, r5, r2
    5da0:	4a04      	ldr	r2, [pc, #16]	; (5db4 <mayfly_enqueue+0x98>)
    5da2:	6860      	ldr	r0, [r4, #4]
    5da4:	441a      	add	r2, r3
    5da6:	4621      	mov	r1, r4
    5da8:	f7ff ff47 	bl	5c3a <memq_enqueue>
    5dac:	e7c8      	b.n	5d40 <mayfly_enqueue+0x24>
			return 1;
    5dae:	4638      	mov	r0, r7

	return 0;
}
    5db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5db2:	bf00      	nop
    5db4:	200004a0 	.word	0x200004a0

00005db8 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    5db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dbc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    5dc0:	b089      	sub	sp, #36	; 0x24
    5dc2:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    5dc4:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    5dc8:	4e43      	ldr	r6, [pc, #268]	; (5ed8 <mayfly_run+0x120>)
    5dca:	9304      	str	r3, [sp, #16]
{
    5dcc:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    5dce:	2404      	movs	r4, #4
	u8_t disable = 0;
    5dd0:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    5dd4:	3c01      	subs	r4, #1
    5dd6:	b2e4      	uxtb	r4, r4
    5dd8:	2cff      	cmp	r4, #255	; 0xff
    5dda:	d10b      	bne.n	5df4 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    5ddc:	9b01      	ldr	r3, [sp, #4]
    5dde:	2b00      	cmp	r3, #0
    5de0:	d076      	beq.n	5ed0 <mayfly_run+0x118>
    5de2:	f1b8 0f00 	cmp.w	r8, #0
    5de6:	d173      	bne.n	5ed0 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    5de8:	4642      	mov	r2, r8
    5dea:	4629      	mov	r1, r5
    5dec:	4628      	mov	r0, r5
    5dee:	f00a fb1d 	bl	1042c <mayfly_enable_cb>
    5df2:	e06d      	b.n	5ed0 <mayfly_run+0x118>
		struct mayfly *m = 0;
    5df4:	f10d 0b20 	add.w	fp, sp, #32
    5df8:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    5dfa:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    5dfc:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    5e00:	f04f 0930 	mov.w	r9, #48	; 0x30
    5e04:	fb07 f304 	mul.w	r3, r7, r4
    5e08:	fb09 3005 	mla	r0, r9, r5, r3
    5e0c:	1831      	adds	r1, r6, r0
    5e0e:	465a      	mov	r2, fp
    5e10:	6849      	ldr	r1, [r1, #4]
    5e12:	5830      	ldr	r0, [r6, r0]
    5e14:	9302      	str	r3, [sp, #8]
    5e16:	f7ff ff17 	bl	5c48 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    5e1a:	9b04      	ldr	r3, [sp, #16]
    5e1c:	fb17 3704 	smlabb	r7, r7, r4, r3
    5e20:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    5e22:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    5e24:	9303      	str	r3, [sp, #12]
		while (link) {
    5e26:	f1ba 0f00 	cmp.w	sl, #0
    5e2a:	d119      	bne.n	5e60 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    5e2c:	2230      	movs	r2, #48	; 0x30
    5e2e:	230c      	movs	r3, #12
    5e30:	436a      	muls	r2, r5
    5e32:	fb03 2204 	mla	r2, r3, r4, r2
    5e36:	4432      	add	r2, r6
    5e38:	7a91      	ldrb	r1, [r2, #10]
    5e3a:	7ad0      	ldrb	r0, [r2, #11]
    5e3c:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    5e3e:	bf1e      	ittt	ne
    5e40:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    5e42:	2201      	movne	r2, #1
    5e44:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    5e46:	2230      	movs	r2, #48	; 0x30
    5e48:	436a      	muls	r2, r5
    5e4a:	fb03 2304 	mla	r3, r3, r4, r2
    5e4e:	4433      	add	r3, r6
    5e50:	7a1a      	ldrb	r2, [r3, #8]
    5e52:	7a59      	ldrb	r1, [r3, #9]
    5e54:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    5e56:	bf1c      	itt	ne
    5e58:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    5e5a:	f04f 0801 	movne.w	r8, #1
    5e5e:	e7b9      	b.n	5dd4 <mayfly_run+0x1c>
			req = m->_req;
    5e60:	9b07      	ldr	r3, [sp, #28]
    5e62:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    5e64:	785a      	ldrb	r2, [r3, #1]
    5e66:	1abf      	subs	r7, r7, r2
    5e68:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    5e6c:	2f01      	cmp	r7, #1
    5e6e:	d104      	bne.n	5e7a <mayfly_run+0xc2>
				m->_ack--;
    5e70:	3a01      	subs	r2, #1
    5e72:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    5e74:	6898      	ldr	r0, [r3, #8]
    5e76:	68da      	ldr	r2, [r3, #12]
    5e78:	4790      	blx	r2
			req = m->_req;
    5e7a:	9a07      	ldr	r2, [sp, #28]
    5e7c:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    5e7e:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    5e80:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    5e82:	1a9a      	subs	r2, r3, r2
    5e84:	f002 0203 	and.w	r2, r2, #3
    5e88:	2a01      	cmp	r2, #1
    5e8a:	9305      	str	r3, [sp, #20]
    5e8c:	d00d      	beq.n	5eaa <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    5e8e:	9b02      	ldr	r3, [sp, #8]
    5e90:	9903      	ldr	r1, [sp, #12]
    5e92:	fb09 3005 	mla	r0, r9, r5, r3
    5e96:	4430      	add	r0, r6
    5e98:	2200      	movs	r2, #0
    5e9a:	6840      	ldr	r0, [r0, #4]
    5e9c:	f7ff fedc 	bl	5c58 <memq_dequeue>
				m->_link = link;
    5ea0:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    5ea2:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    5ea4:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    5ea8:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    5eaa:	9b02      	ldr	r3, [sp, #8]
    5eac:	fb09 3305 	mla	r3, r9, r5, r3
    5eb0:	18f1      	adds	r1, r6, r3
    5eb2:	465a      	mov	r2, fp
    5eb4:	6849      	ldr	r1, [r1, #4]
    5eb6:	58f0      	ldr	r0, [r6, r3]
    5eb8:	f7ff fec6 	bl	5c48 <memq_peek>
			if (state == 1) {
    5ebc:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    5ebe:	4682      	mov	sl, r0
			if (state == 1) {
    5ec0:	d1b1      	bne.n	5e26 <mayfly_run+0x6e>
				if (caller_id || link) {
    5ec2:	b90c      	cbnz	r4, 5ec8 <mayfly_run+0x110>
    5ec4:	2800      	cmp	r0, #0
    5ec6:	d0b1      	beq.n	5e2c <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    5ec8:	4629      	mov	r1, r5
    5eca:	4628      	mov	r0, r5
    5ecc:	f00a fadc 	bl	10488 <mayfly_pend>
	}
}
    5ed0:	b009      	add	sp, #36	; 0x24
    5ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ed6:	bf00      	nop
    5ed8:	200004a0 	.word	0x200004a0

00005edc <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    5edc:	b510      	push	{r4, lr}
    5ede:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    5ee0:	2000      	movs	r0, #0

	while (octets_len--) {
    5ee2:	3901      	subs	r1, #1
    5ee4:	b2c9      	uxtb	r1, r1
    5ee6:	29ff      	cmp	r1, #255	; 0xff
    5ee8:	d100      	bne.n	5eec <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    5eea:	bd10      	pop	{r4, pc}
		bite = *octets;
    5eec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d0f6      	beq.n	5ee2 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    5ef4:	1e5c      	subs	r4, r3, #1
			one_count++;
    5ef6:	3001      	adds	r0, #1
			bite &= (bite - 1);
    5ef8:	4023      	ands	r3, r4
			one_count++;
    5efa:	b2c0      	uxtb	r0, r0
    5efc:	e7f8      	b.n	5ef0 <util_ones_count_get+0x14>

00005efe <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    5efe:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    5f00:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    5f02:	6805      	ldr	r5, [r0, #0]
	current = previous;
    5f04:	461a      	mov	r2, r3
	total = 0;
    5f06:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    5f08:	2aff      	cmp	r2, #255	; 0xff
    5f0a:	d101      	bne.n	5f10 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    5f0c:	2000      	movs	r0, #0
    5f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    5f10:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    5f14:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    5f16:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    5f1a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    5f1e:	d004      	beq.n	5f2a <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    5f20:	68b3      	ldr	r3, [r6, #8]
    5f22:	441c      	add	r4, r3
		current = ticker_current->next;
    5f24:	4613      	mov	r3, r2
    5f26:	463a      	mov	r2, r7
    5f28:	e7ee      	b.n	5f08 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    5f2a:	4293      	cmp	r3, r2
    5f2c:	d100      	bne.n	5f30 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    5f2e:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    5f30:	b21b      	sxth	r3, r3
    5f32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5f36:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    5f38:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    5f3a:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    5f3e:	7833      	ldrb	r3, [r6, #0]
    5f40:	2bff      	cmp	r3, #255	; 0xff
    5f42:	d006      	beq.n	5f52 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    5f44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5f48:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    5f4c:	689a      	ldr	r2, [r3, #8]
    5f4e:	4402      	add	r2, r0
    5f50:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    5f52:	4420      	add	r0, r4
    5f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f56 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    5f56:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    5f58:	1a55      	subs	r5, r2, r1
    5f5a:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    5f5e:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    5f60:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    5f62:	d109      	bne.n	5f78 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5f64:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    5f68:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    5f6a:	42a2      	cmp	r2, r4
    5f6c:	d90e      	bls.n	5f8c <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    5f6e:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    5f70:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    5f72:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    5f74:	6144      	str	r4, [r0, #20]
    5f76:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5f78:	1a8a      	subs	r2, r1, r2
    5f7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    5f7e:	4293      	cmp	r3, r2
    5f80:	d901      	bls.n	5f86 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    5f82:	1a9a      	subs	r2, r3, r2
    5f84:	e7f1      	b.n	5f6a <ticks_to_expire_prep+0x14>
    5f86:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    5f88:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    5f8a:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    5f8c:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    5f8e:	2200      	movs	r2, #0
    5f90:	e7ef      	b.n	5f72 <ticks_to_expire_prep+0x1c>

00005f92 <ticker_job_op_cb>:
{
    5f92:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    5f94:	2200      	movs	r2, #0
    5f96:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    5f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    5f9a:	6259      	str	r1, [r3, #36]	; 0x24
{
    5f9c:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    5f9e:	b10a      	cbz	r2, 5fa4 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    5fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5fa2:	4710      	bx	r2
    5fa4:	4770      	bx	lr

00005fa6 <ticker_worker>:
{
    5fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    5faa:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    5fac:	2301      	movs	r3, #1
{
    5fae:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    5fb0:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    5fb2:	2d00      	cmp	r5, #0
    5fb4:	d14c      	bne.n	6050 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    5fb6:	7f43      	ldrb	r3, [r0, #29]
    5fb8:	2bff      	cmp	r3, #255	; 0xff
    5fba:	d102      	bne.n	5fc2 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    5fbc:	77c5      	strb	r5, [r0, #31]
		return;
    5fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    5fc2:	f009 fd9d 	bl	fb00 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5fc6:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    5fc8:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    5fca:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5fce:	1bc7      	subs	r7, r0, r7
    5fd0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    5fd4:	2eff      	cmp	r6, #255	; 0xff
    5fd6:	d006      	beq.n	5fe6 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    5fd8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    5fdc:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    5fe0:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    5fe2:	429f      	cmp	r7, r3
    5fe4:	d218      	bcs.n	6018 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    5fe6:	7aa2      	ldrb	r2, [r4, #10]
    5fe8:	7ae3      	ldrb	r3, [r4, #11]
    5fea:	4293      	cmp	r3, r2
    5fec:	d105      	bne.n	5ffa <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    5fee:	3301      	adds	r3, #1
    5ff0:	b2db      	uxtb	r3, r3
			last = 0;
    5ff2:	2b02      	cmp	r3, #2
    5ff4:	bf08      	it	eq
    5ff6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    5ff8:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    5ffa:	7ae3      	ldrb	r3, [r4, #11]
    5ffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6000:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    6002:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    6004:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6006:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    6008:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    600a:	46ac      	mov	ip, r5
    600c:	4623      	mov	r3, r4
    600e:	2104      	movs	r1, #4
    6010:	2003      	movs	r0, #3
}
    6012:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    6016:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    6018:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    601a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    601c:	788a      	ldrb	r2, [r1, #2]
    601e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    6020:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    6024:	1a9b      	subs	r3, r3, r2
    6026:	b2db      	uxtb	r3, r3
    6028:	2b01      	cmp	r3, #1
    602a:	d1d3      	bne.n	5fd4 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    602c:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    6030:	3a01      	subs	r2, #1
    6032:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    6034:	f1b9 0f00 	cmp.w	r9, #0
    6038:	d0cc      	beq.n	5fd4 <ticker_worker+0x2e>
					   ticks_expired -
    603a:	6948      	ldr	r0, [r1, #20]
    603c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    603e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    6040:	1a28      	subs	r0, r5, r0
    6042:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    6044:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6048:	690b      	ldr	r3, [r1, #16]
    604a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    604c:	47c8      	blx	r9
    604e:	e7c1      	b.n	5fd4 <ticker_worker+0x2e>
    6050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006054 <ticker_job>:
{
    6054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    6058:	7fc2      	ldrb	r2, [r0, #31]
{
    605a:	b093      	sub	sp, #76	; 0x4c
    605c:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    605e:	2a00      	cmp	r2, #0
    6060:	f040 83b5 	bne.w	67ce <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    6064:	6943      	ldr	r3, [r0, #20]
    6066:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    6068:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    606a:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    606c:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    606e:	7ac0      	ldrb	r0, [r0, #11]
    6070:	4298      	cmp	r0, r3
    6072:	f000 808f 	beq.w	6194 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    6076:	440b      	add	r3, r1
    6078:	b2db      	uxtb	r3, r3
			first = 0;
    607a:	2b02      	cmp	r3, #2
    607c:	bf08      	it	eq
    607e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    6080:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    6084:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    6088:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    608a:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    608e:	9b05      	ldr	r3, [sp, #20]
    6090:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    6092:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6096:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    609a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    609e:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    60a0:	f8db 3000 	ldr.w	r3, [fp]
    60a4:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    60a6:	f8db 3004 	ldr.w	r3, [fp, #4]
    60aa:	930b      	str	r3, [sp, #44]	; 0x2c
    60ac:	f89b 3009 	ldrb.w	r3, [fp, #9]
    60b0:	3b01      	subs	r3, #1
    60b2:	b2db      	uxtb	r3, r3
    60b4:	9302      	str	r3, [sp, #8]
	pending = 0;
    60b6:	2300      	movs	r3, #0
    60b8:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    60ba:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    60be:	9b02      	ldr	r3, [sp, #8]
    60c0:	2bff      	cmp	r3, #255	; 0xff
    60c2:	d16a      	bne.n	619a <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    60c4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    60c8:	9a03      	ldr	r2, [sp, #12]
    60ca:	1a9b      	subs	r3, r3, r2
    60cc:	bf18      	it	ne
    60ce:	2301      	movne	r3, #1
    60d0:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    60d2:	9b01      	ldr	r3, [sp, #4]
    60d4:	b1e3      	cbz	r3, 6110 <ticker_job+0xbc>
	node = &instance->node[0];
    60d6:	f8db 3000 	ldr.w	r3, [fp]
    60da:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    60dc:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    60e0:	f89b 601d 	ldrb.w	r6, [fp, #29]
    60e4:	2eff      	cmp	r6, #255	; 0xff
    60e6:	d00c      	beq.n	6102 <ticker_job+0xae>
		ticker = &node[id_expired];
    60e8:	b237      	sxth	r7, r6
    60ea:	9b04      	ldr	r3, [sp, #16]
    60ec:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    60f0:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    60f4:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    60f6:	4545      	cmp	r5, r8
    60f8:	f240 8136 	bls.w	6368 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    60fc:	eba5 0508 	sub.w	r5, r5, r8
    6100:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    6102:	9b02      	ldr	r3, [sp, #8]
    6104:	9a01      	ldr	r2, [sp, #4]
    6106:	9903      	ldr	r1, [sp, #12]
    6108:	42b1      	cmp	r1, r6
    610a:	bf18      	it	ne
    610c:	4613      	movne	r3, r2
    610e:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    6110:	f8db 3000 	ldr.w	r3, [fp]
    6114:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    6116:	f8db 3004 	ldr.w	r3, [fp, #4]
    611a:	9310      	str	r3, [sp, #64]	; 0x40
    611c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    6120:	3b01      	subs	r3, #1
    6122:	b2db      	uxtb	r3, r3
    6124:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    6126:	9b01      	ldr	r3, [sp, #4]
    6128:	2bff      	cmp	r3, #255	; 0xff
    612a:	f040 8170 	bne.w	640e <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    612e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6132:	9a03      	ldr	r2, [sp, #12]
    6134:	4293      	cmp	r3, r2
	if (!pending) {
    6136:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    6138:	f040 8340 	bne.w	67bc <ticker_job+0x768>
	if (!pending) {
    613c:	b95b      	cbnz	r3, 6156 <ticker_job+0x102>
    613e:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    6142:	f8db 3004 	ldr.w	r3, [fp, #4]
    6146:	9301      	str	r3, [sp, #4]
    6148:	3c01      	subs	r4, #1
    614a:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    614c:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    6150:	2cff      	cmp	r4, #255	; 0xff
    6152:	f040 82a0 	bne.w	6696 <ticker_job+0x642>
	instance->job_guard = 0;
    6156:	2300      	movs	r3, #0
    6158:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    615c:	9b02      	ldr	r3, [sp, #8]
    615e:	b14b      	cbz	r3, 6174 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    6160:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6164:	2bff      	cmp	r3, #255	; 0xff
    6166:	f040 82e9 	bne.w	673c <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    616a:	f009 fcb1 	bl	fad0 <cntr_stop>
    616e:	b908      	cbnz	r0, 6174 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    6170:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    6174:	f89b 301f 	ldrb.w	r3, [fp, #31]
    6178:	2b00      	cmp	r3, #0
    617a:	f000 8328 	beq.w	67ce <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    617e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    6182:	465b      	mov	r3, fp
    6184:	2201      	movs	r2, #1
    6186:	2103      	movs	r1, #3
    6188:	2004      	movs	r0, #4
    618a:	46a4      	mov	ip, r4
}
    618c:	b013      	add	sp, #76	; 0x4c
    618e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    6192:	4760      	bx	ip
		flag_elapsed = 0;
    6194:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    6196:	4690      	mov	r8, r2
    6198:	e77f      	b.n	609a <ticker_job+0x46>
		user = &users[count_user];
    619a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    619c:	9a02      	ldr	r2, [sp, #8]
    619e:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    61a6:	78f9      	ldrb	r1, [r7, #3]
    61a8:	78be      	ldrb	r6, [r7, #2]
    61aa:	428e      	cmp	r6, r1
    61ac:	f000 80d7 	beq.w	635e <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    61b0:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    61b2:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    61b4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    61b8:	0112      	lsls	r2, r2, #4
    61ba:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    61bc:	1c73      	adds	r3, r6, #1
    61be:	b2db      	uxtb	r3, r3
				middle = 0;
    61c0:	4298      	cmp	r0, r3
    61c2:	bf08      	it	eq
    61c4:	2300      	moveq	r3, #0
			user->middle = middle;
    61c6:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    61c8:	9b06      	ldr	r3, [sp, #24]
    61ca:	5c9a      	ldrb	r2, [r3, r2]
    61cc:	2a03      	cmp	r2, #3
    61ce:	d9eb      	bls.n	61a8 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    61d0:	2a05      	cmp	r2, #5
    61d2:	d817      	bhi.n	6204 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    61d4:	7869      	ldrb	r1, [r5, #1]
    61d6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    61da:	930a      	str	r3, [sp, #40]	; 0x28
    61dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    61de:	9b04      	ldr	r3, [sp, #16]
    61e0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    61e4:	7863      	ldrb	r3, [r4, #1]
    61e6:	78a0      	ldrb	r0, [r4, #2]
    61e8:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    61ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    61ee:	d009      	beq.n	6204 <ticker_job+0x1b0>
			    (state == 0) ||
    61f0:	2a04      	cmp	r2, #4
    61f2:	d10c      	bne.n	620e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    61f4:	686a      	ldr	r2, [r5, #4]
    61f6:	b952      	cbnz	r2, 620e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    61f8:	68aa      	ldr	r2, [r5, #8]
    61fa:	b942      	cbnz	r2, 620e <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    61fc:	68ea      	ldr	r2, [r5, #12]
    61fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    6202:	d104      	bne.n	620e <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    6204:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    6206:	4628      	mov	r0, r5
    6208:	f7ff fec3 	bl	5f92 <ticker_job_op_cb>
    620c:	e7cb      	b.n	61a6 <ticker_job+0x152>
			if (state == 1) {
    620e:	2b01      	cmp	r3, #1
    6210:	f040 809b 	bne.w	634a <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    6214:	4658      	mov	r0, fp
    6216:	f7ff fe72 	bl	5efe <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    621a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    621c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    621e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    6220:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    6222:	f040 8084 	bne.w	632e <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    6226:	f8db 3014 	ldr.w	r3, [fp, #20]
    622a:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    622c:	f009 fc68 	bl	fb00 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6230:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    6232:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6234:	1ac3      	subs	r3, r0, r3
    6236:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    623a:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    623c:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    623e:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    6240:	bf9e      	ittt	ls
    6242:	6962      	ldrls	r2, [r4, #20]
    6244:	1b92      	subls	r2, r2, r6
    6246:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    6248:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    624a:	bf96      	itet	ls
    624c:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    624e:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    6250:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    6252:	b18a      	cbz	r2, 6278 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    6254:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    6256:	b179      	cbz	r1, 6278 <ticker_job+0x224>
		user_op->params.update.lazy--;
    6258:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    625c:	fa1f fe8e 	uxth.w	lr, lr
    6260:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6264:	429a      	cmp	r2, r3
    6266:	d32b      	bcc.n	62c0 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    6268:	f8df 9324 	ldr.w	r9, [pc, #804]	; 6590 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    626c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    6270:	45e6      	cmp	lr, ip
    6272:	d847      	bhi.n	6304 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    6274:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    6278:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    627a:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    627c:	4413      	add	r3, r2
    627e:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    6280:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    6282:	6963      	ldr	r3, [r4, #20]
    6284:	4413      	add	r3, r2
    6286:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    6288:	9a09      	ldr	r2, [sp, #36]	; 0x24
    628a:	4620      	mov	r0, r4
    628c:	f7ff fe63 	bl	5f56 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    6290:	69a2      	ldr	r2, [r4, #24]
    6292:	892b      	ldrh	r3, [r5, #8]
    6294:	4413      	add	r3, r2
    6296:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    6298:	896a      	ldrh	r2, [r5, #10]
    629a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    629c:	bf8c      	ite	hi
    629e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    62a0:	2300      	movls	r3, #0
    62a2:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    62a4:	7bab      	ldrb	r3, [r5, #14]
    62a6:	b103      	cbz	r3, 62aa <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    62a8:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    62aa:	9b04      	ldr	r3, [sp, #16]
    62ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    62ae:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    62b2:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    62b4:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    62b8:	3301      	adds	r3, #1
    62ba:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    62bc:	2100      	movs	r1, #0
    62be:	e7a2      	b.n	6206 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    62c0:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    62c4:	45e6      	cmp	lr, ip
    62c6:	d2cf      	bcs.n	6268 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    62c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    62ca:	4eaf      	ldr	r6, [pc, #700]	; (6588 <ticker_job+0x534>)
    62cc:	48af      	ldr	r0, [pc, #700]	; (658c <ticker_job+0x538>)
    62ce:	198e      	adds	r6, r1, r6
    62d0:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    62d2:	bf81      	itttt	hi
    62d4:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    62d8:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    62dc:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    62e0:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    62e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    62e4:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    62e6:	bf8c      	ite	hi
    62e8:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    62ec:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    62f0:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    62f2:	4491      	add	r9, r2
			ticker->lazy_current--;
    62f4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    62f8:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    62fa:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    62fe:	f8a4 c01e 	strh.w	ip, [r4, #30]
    6302:	e7af      	b.n	6264 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    6304:	6a66      	ldr	r6, [r4, #36]	; 0x24
    6306:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    6308:	48a0      	ldr	r0, [pc, #640]	; (658c <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    630a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    630c:	499e      	ldr	r1, [pc, #632]	; (6588 <ticker_job+0x534>)
    630e:	1871      	adds	r1, r6, r1
    6310:	4281      	cmp	r1, r0
	return 0;
    6312:	bf8e      	itee	hi
    6314:	2100      	movhi	r1, #0
		return 1;
    6316:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    6318:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    631a:	4411      	add	r1, r2
			ticker->lazy_current++;
    631c:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    6320:	bf8c      	ite	hi
    6322:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    6324:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    6326:	440b      	add	r3, r1
			ticker->lazy_current++;
    6328:	f8a4 c01e 	strh.w	ip, [r4, #30]
    632c:	e79e      	b.n	626c <ticker_job+0x218>
		ticker->req = ticker->ack;
    632e:	78a3      	ldrb	r3, [r4, #2]
    6330:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    6332:	786b      	ldrb	r3, [r5, #1]
    6334:	f89b 201c 	ldrb.w	r2, [fp, #28]
    6338:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    633a:	bf01      	itttt	eq
    633c:	23ff      	moveq	r3, #255	; 0xff
    633e:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    6342:	2300      	moveq	r3, #0
    6344:	f8cb 3018 	streq.w	r3, [fp, #24]
    6348:	e7b8      	b.n	62bc <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    634a:	2104      	movs	r1, #4
    634c:	465b      	mov	r3, fp
    634e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    6352:	2201      	movs	r2, #1
    6354:	4608      	mov	r0, r1
    6356:	47a0      	blx	r4
				pending = 1;
    6358:	2301      	movs	r3, #1
				user->middle = prev;
    635a:	70be      	strb	r6, [r7, #2]
				pending = 1;
    635c:	9307      	str	r3, [sp, #28]
    635e:	9b02      	ldr	r3, [sp, #8]
    6360:	3b01      	subs	r3, #1
    6362:	b2db      	uxtb	r3, r3
    6364:	9302      	str	r3, [sp, #8]
    6366:	e6aa      	b.n	60be <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    6368:	f8db 3018 	ldr.w	r3, [fp, #24]
    636c:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    636e:	bf29      	itett	cs
    6370:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    6372:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    6374:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    6378:	2300      	movcs	r3, #0
    637a:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    637e:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    6380:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    6382:	b11b      	cbz	r3, 638c <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    6384:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    6388:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    638c:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    638e:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    6390:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    6392:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    6396:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    639a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    639e:	f1be 0f00 	cmp.w	lr, #0
    63a2:	d030      	beq.n	6406 <ticker_job+0x3b2>
    63a4:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    63a6:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 658c <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    63aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    63ac:	6a21      	ldr	r1, [r4, #32]
    63ae:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    63b0:	4975      	ldr	r1, [pc, #468]	; (6588 <ticker_job+0x534>)
    63b2:	1859      	adds	r1, r3, r1
    63b4:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    63b6:	bf9f      	itttt	ls
    63b8:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    63bc:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    63c0:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    63c4:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    63c6:	bf92      	itee	ls
    63c8:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    63ca:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    63cc:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    63ce:	4473      	add	r3, lr
			while (count--) {
    63d0:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    63d4:	441a      	add	r2, r3
			while (count--) {
    63d6:	d2e8      	bcs.n	63aa <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    63d8:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    63da:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    63dc:	f8db 1014 	ldr.w	r1, [fp, #20]
    63e0:	eb03 0209 	add.w	r2, r3, r9
    63e4:	4620      	mov	r0, r4
    63e6:	f7ff fdb6 	bl	5f56 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    63ea:	8ba3      	ldrh	r3, [r4, #28]
    63ec:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    63ee:	2300      	movs	r3, #0
    63f0:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    63f2:	9b04      	ldr	r3, [sp, #16]
    63f4:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    63f8:	7863      	ldrb	r3, [r4, #1]
    63fa:	3301      	adds	r3, #1
    63fc:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    63fe:	eba8 0805 	sub.w	r8, r8, r5
    6402:	46b2      	mov	sl, r6
    6404:	e66c      	b.n	60e0 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    6406:	78a3      	ldrb	r3, [r4, #2]
    6408:	7063      	strb	r3, [r4, #1]
    640a:	4656      	mov	r6, sl
    640c:	e7f7      	b.n	63fe <ticker_job+0x3aa>
		user = &users[count_user];
    640e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6410:	9a01      	ldr	r2, [sp, #4]
    6412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6416:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    6418:	685b      	ldr	r3, [r3, #4]
    641a:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    641c:	9b04      	ldr	r3, [sp, #16]
    641e:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    6422:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    6426:	f000 808e 	beq.w	6546 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    642a:	fa0f f38a 	sxth.w	r3, sl
    642e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6432:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    6434:	46d0      	mov	r8, sl
    6436:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    643a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    643e:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    6440:	f8db 3000 	ldr.w	r3, [fp]
    6444:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    6446:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    6448:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    644a:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    644c:	8be3      	ldrh	r3, [r4, #30]
    644e:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    6450:	bf86      	itte	hi
    6452:	1a9b      	subhi	r3, r3, r2
    6454:	b29b      	uxthhi	r3, r3
		skip = 0;
    6456:	2300      	movls	r3, #0
    6458:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    645a:	fa0f f388 	sxth.w	r3, r8
    645e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6462:	00db      	lsls	r3, r3, #3
    6464:	9311      	str	r3, [sp, #68]	; 0x44
    6466:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    6468:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    646c:	f8db 0018 	ldr.w	r0, [fp, #24]
    6470:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    6472:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    6476:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    6478:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    647c:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    6480:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    6482:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    6484:	2bff      	cmp	r3, #255	; 0xff
    6486:	d007      	beq.n	6498 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    6488:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    648c:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    6490:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    6492:	4281      	cmp	r1, r0
    6494:	f200 80a9 	bhi.w	65ea <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    6498:	f8de 0018 	ldr.w	r0, [lr, #24]
    649c:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    649e:	eb01 0c00 	add.w	ip, r1, r0
    64a2:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    64a4:	2eff      	cmp	r6, #255	; 0xff
    64a6:	f040 80ae 	bne.w	6606 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    64aa:	980d      	ldr	r0, [sp, #52]	; 0x34
    64ac:	b130      	cbz	r0, 64bc <ticker_job+0x468>
    64ae:	9805      	ldr	r0, [sp, #20]
    64b0:	4281      	cmp	r1, r0
    64b2:	f0c0 80bf 	bcc.w	6634 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    64b6:	2eff      	cmp	r6, #255	; 0xff
    64b8:	f040 8185 	bne.w	67c6 <ticker_job+0x772>
		if (previous == current) {
    64bc:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    64be:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    64c2:	4283      	cmp	r3, r0
			node[previous].next = id;
    64c4:	bf18      	it	ne
    64c6:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    64ca:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    64ce:	bf16      	itet	ne
    64d0:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    64d4:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    64d8:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    64dc:	2bff      	cmp	r3, #255	; 0xff
    64de:	d006      	beq.n	64ee <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    64e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    64e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    64e8:	689a      	ldr	r2, [r3, #8]
    64ea:	1a51      	subs	r1, r2, r1
    64ec:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    64ee:	78a3      	ldrb	r3, [r4, #2]
    64f0:	3301      	adds	r3, #1
    64f2:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    64f4:	2100      	movs	r1, #0
			if (user_op) {
    64f6:	2d00      	cmp	r5, #0
    64f8:	d093      	beq.n	6422 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    64fa:	4628      	mov	r0, r5
    64fc:	f7ff fd49 	bl	5f92 <ticker_job_op_cb>
    6500:	e78f      	b.n	6422 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    6502:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    6506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6508:	011b      	lsls	r3, r3, #4
    650a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    650c:	f109 0201 	add.w	r2, r9, #1
    6510:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    6514:	9a04      	ldr	r2, [sp, #16]
    6516:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    6518:	454a      	cmp	r2, r9
    651a:	bf08      	it	eq
    651c:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    6520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6522:	5cd3      	ldrb	r3, [r2, r3]
    6524:	2b03      	cmp	r3, #3
    6526:	d10e      	bne.n	6546 <ticker_job+0x4f2>
				id_insert = user_op->id;
    6528:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    652c:	9b08      	ldr	r3, [sp, #32]
    652e:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    6532:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    6536:	7862      	ldrb	r2, [r4, #1]
    6538:	78a3      	ldrb	r3, [r4, #2]
    653a:	429a      	cmp	r2, r3
    653c:	d009      	beq.n	6552 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    653e:	2101      	movs	r1, #1
    6540:	4628      	mov	r0, r5
    6542:	f7ff fd26 	bl	5f92 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    6546:	9b04      	ldr	r3, [sp, #16]
    6548:	789b      	ldrb	r3, [r3, #2]
    654a:	454b      	cmp	r3, r9
    654c:	d1d9      	bne.n	6502 <ticker_job+0x4ae>
    654e:	9b01      	ldr	r3, [sp, #4]
    6550:	e5e6      	b.n	6120 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    6552:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    6554:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    6558:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    655a:	692b      	ldr	r3, [r5, #16]
    655c:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    655e:	8aab      	ldrh	r3, [r5, #20]
    6560:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    6562:	69ab      	ldr	r3, [r5, #24]
    6564:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    6566:	69eb      	ldr	r3, [r5, #28]
    6568:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    656a:	6a2b      	ldr	r3, [r5, #32]
    656c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    656e:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    6570:	68ab      	ldr	r3, [r5, #8]
    6572:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    6574:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    6576:	686a      	ldr	r2, [r5, #4]
    6578:	4620      	mov	r0, r4
    657a:	f7ff fcec 	bl	5f56 <ticks_to_expire_prep>
	ticker->force = 1;
    657e:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    6580:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    6582:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    6584:	70e3      	strb	r3, [r4, #3]
    6586:	e75b      	b.n	6440 <ticker_job+0x3ec>
    6588:	ff172b5a 	.word	0xff172b5a
    658c:	7f172b59 	.word	0x7f172b59
    6590:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    6594:	6860      	ldr	r0, [r4, #4]
    6596:	2800      	cmp	r0, #0
    6598:	d07b      	beq.n	6692 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    659a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    659c:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    659e:	4b8d      	ldr	r3, [pc, #564]	; (67d4 <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    65a0:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    65a2:	498d      	ldr	r1, [pc, #564]	; (67d8 <ticker_job+0x784>)
    65a4:	18d3      	adds	r3, r2, r3
    65a6:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    65a8:	bf9c      	itt	ls
    65aa:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    65ae:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    65b2:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    65b4:	bf8b      	itete	hi
    65b6:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    65b8:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    65bc:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    65be:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    65c0:	4403      	add	r3, r0
		return 1;
    65c2:	bf98      	it	ls
    65c4:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    65c6:	4413      	add	r3, r2
			ticker->lazy_current++;
    65c8:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    65ca:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    65cc:	3201      	adds	r2, #1
    65ce:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    65d0:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    65d2:	4293      	cmp	r3, r2
    65d4:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    65d8:	bf89      	itett	hi
    65da:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    65dc:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    65de:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    65e0:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    65e2:	bf9c      	itt	ls
    65e4:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    65e6:	60a1      	strls	r1, [r4, #8]
    65e8:	e73d      	b.n	6466 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    65ea:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    65ec:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    65ee:	b946      	cbnz	r6, 6602 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    65f0:	9f05      	ldr	r7, [sp, #20]
    65f2:	42b8      	cmp	r0, r7
    65f4:	d200      	bcs.n	65f8 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    65f6:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    65f8:	9309      	str	r3, [sp, #36]	; 0x24
    65fa:	9605      	str	r6, [sp, #20]
    65fc:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    6600:	e740      	b.n	6484 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    6602:	9306      	str	r3, [sp, #24]
    6604:	e7f8      	b.n	65f8 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    6606:	b230      	sxth	r0, r6
    6608:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    660c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    6610:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    6612:	68bf      	ldr	r7, [r7, #8]
    6614:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    6616:	4567      	cmp	r7, ip
    6618:	d20a      	bcs.n	6630 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    661a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    661c:	69bf      	ldr	r7, [r7, #24]
    661e:	2f00      	cmp	r7, #0
    6620:	f47f af43 	bne.w	64aa <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    6624:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    6626:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    662a:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    662e:	e739      	b.n	64a4 <ticker_job+0x450>
			return TICKER_NULL;
    6630:	26ff      	movs	r6, #255	; 0xff
    6632:	e73a      	b.n	64aa <ticker_job+0x456>
	while (id_insert !=
    6634:	9b06      	ldr	r3, [sp, #24]
    6636:	4598      	cmp	r8, r3
    6638:	f43f af59 	beq.w	64ee <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    663c:	9b06      	ldr	r3, [sp, #24]
    663e:	2bff      	cmp	r3, #255	; 0xff
    6640:	d0a8      	beq.n	6594 <ticker_job+0x540>
    6642:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    6644:	b233      	sxth	r3, r6
    6646:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    664a:	9305      	str	r3, [sp, #20]
    664c:	9a05      	ldr	r2, [sp, #20]
    664e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6650:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    6654:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    6656:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    6658:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    665a:	bf88      	it	hi
    665c:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    665e:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    6660:	bf8c      	ite	hi
    6662:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    6664:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    6666:	2a00      	cmp	r2, #0
    6668:	d094      	beq.n	6594 <ticker_job+0x540>
    666a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    666c:	4293      	cmp	r3, r2
    666e:	d891      	bhi.n	6594 <ticker_job+0x540>
			    skip_collide <= skip &&
    6670:	78fa      	ldrb	r2, [r7, #3]
    6672:	78e3      	ldrb	r3, [r4, #3]
    6674:	429a      	cmp	r2, r3
    6676:	d28d      	bcs.n	6594 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    6678:	4631      	mov	r1, r6
    667a:	4658      	mov	r0, fp
    667c:	f7ff fc3f 	bl	5efe <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    6680:	78bb      	ldrb	r3, [r7, #2]
    6682:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    6684:	9a05      	ldr	r2, [sp, #20]
    6686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    6688:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    668a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    668e:	46b2      	mov	sl, r6
    6690:	e6e9      	b.n	6466 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    6692:	2101      	movs	r1, #1
    6694:	e72f      	b.n	64f6 <ticker_job+0x4a2>
		user = &users[count_user];
    6696:	9b01      	ldr	r3, [sp, #4]
    6698:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    669c:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    669e:	786b      	ldrb	r3, [r5, #1]
    66a0:	78ea      	ldrb	r2, [r5, #3]
    66a2:	429a      	cmp	r2, r3
    66a4:	d102      	bne.n	66ac <ticker_job+0x658>
    66a6:	3c01      	subs	r4, #1
    66a8:	b2e4      	uxtb	r4, r4
    66aa:	e551      	b.n	6150 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    66ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    66b0:	011b      	lsls	r3, r3, #4
    66b2:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    66b4:	5cf3      	ldrb	r3, [r6, r3]
    66b6:	2b01      	cmp	r3, #1
    66b8:	d025      	beq.n	6706 <ticker_job+0x6b2>
    66ba:	2b02      	cmp	r3, #2
    66bc:	d12a      	bne.n	6714 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    66be:	f8d2 c004 	ldr.w	ip, [r2, #4]
    66c2:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    66c4:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    66c8:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    66cc:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    66d0:	28ff      	cmp	r0, #255	; 0xff
    66d2:	d004      	beq.n	66de <ticker_job+0x68a>
    66d4:	6819      	ldr	r1, [r3, #0]
    66d6:	f8db 7014 	ldr.w	r7, [fp, #20]
    66da:	42b9      	cmp	r1, r7
    66dc:	d023      	beq.n	6726 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    66de:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    66e2:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    66e6:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    66e8:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    66ea:	29ff      	cmp	r1, #255	; 0xff
    66ec:	d007      	beq.n	66fe <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    66ee:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    66f2:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    66f6:	6987      	ldr	r7, [r0, #24]
    66f8:	6880      	ldr	r0, [r0, #8]
    66fa:	b1df      	cbz	r7, 6734 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    66fc:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    66fe:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    6702:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    6706:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    6708:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    670c:	b113      	cbz	r3, 6714 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    670e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    6710:	2000      	movs	r0, #0
    6712:	4798      	blx	r3
			first = user->first + 1;
    6714:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    6716:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    6718:	3301      	adds	r3, #1
    671a:	b2db      	uxtb	r3, r3
				first = 0;
    671c:	429a      	cmp	r2, r3
    671e:	bf08      	it	eq
    6720:	2300      	moveq	r3, #0
			user->first = first;
    6722:	706b      	strb	r3, [r5, #1]
    6724:	e7bb      	b.n	669e <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    6726:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    672a:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    672e:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    6732:	e7da      	b.n	66ea <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    6734:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    6736:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    673a:	e7d6      	b.n	66ea <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    673c:	9b03      	ldr	r3, [sp, #12]
    673e:	2bff      	cmp	r3, #255	; 0xff
    6740:	d107      	bne.n	6752 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    6742:	f009 f9dd 	bl	fb00 <cntr_cnt_get>
    6746:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    6748:	f009 f9b4 	bl	fab4 <cntr_start>
    674c:	b908      	cbnz	r0, 6752 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    674e:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    6752:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    6756:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    675a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    675e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6762:	260a      	movs	r6, #10
    6764:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    6766:	f009 f9cb 	bl	fb00 <cntr_cnt_get>
		cc = instance->ticks_current;
    676a:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    676e:	1b03      	subs	r3, r0, r4
    6770:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    6774:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    6776:	42ab      	cmp	r3, r5
    6778:	bf2c      	ite	cs
    677a:	18e4      	addcs	r4, r4, r3
    677c:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    677e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    6782:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    6784:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    6788:	4620      	mov	r0, r4
    678a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    678c:	f009 f9b8 	bl	fb00 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6790:	1bc0      	subs	r0, r0, r7
    6792:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6796:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    6798:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    679a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    679e:	42a0      	cmp	r0, r4
    67a0:	f67f ace8 	bls.w	6174 <ticker_job+0x120>
		LL_ASSERT(i);
    67a4:	3e01      	subs	r6, #1
    67a6:	d1de      	bne.n	6766 <ticker_job+0x712>
    67a8:	4040      	eors	r0, r0
    67aa:	f380 8811 	msr	BASEPRI, r0
    67ae:	f04f 0004 	mov.w	r0, #4
    67b2:	df02      	svc	2
	instance->job_guard = 0;
    67b4:	2300      	movs	r3, #0
    67b6:	f88b 301e 	strb.w	r3, [fp, #30]
    67ba:	e4d1      	b.n	6160 <ticker_job+0x10c>
	if (!pending) {
    67bc:	2b00      	cmp	r3, #0
    67be:	d1f9      	bne.n	67b4 <ticker_job+0x760>
		flag_compare_update = 1;
    67c0:	2301      	movs	r3, #1
    67c2:	9302      	str	r3, [sp, #8]
    67c4:	e4bb      	b.n	613e <ticker_job+0xea>
	while (id_insert !=
    67c6:	45b0      	cmp	r8, r6
    67c8:	f47f af3c 	bne.w	6644 <ticker_job+0x5f0>
    67cc:	e68f      	b.n	64ee <ticker_job+0x49a>
}
    67ce:	b013      	add	sp, #76	; 0x4c
    67d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67d4:	ff172b5a 	.word	0xff172b5a
    67d8:	7f172b59 	.word	0x7f172b59

000067dc <ticker_init>:
{
    67dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    67de:	4d1a      	ldr	r5, [pc, #104]	; (6848 <ticker_init+0x6c>)
{
    67e0:	9f05      	ldr	r7, [sp, #20]
    67e2:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    67e6:	262c      	movs	r6, #44	; 0x2c
    67e8:	4346      	muls	r6, r0
    67ea:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    67ee:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    67f0:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    67f4:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    67f6:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    67fa:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    67fe:	3b01      	subs	r3, #1
    6800:	b2db      	uxtb	r3, r3
    6802:	2bff      	cmp	r3, #255	; 0xff
    6804:	d111      	bne.n	682a <ticker_init+0x4e>
	if (count_op) {
    6806:	b9ec      	cbnz	r4, 6844 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    6808:	222c      	movs	r2, #44	; 0x2c
    680a:	fb02 5200 	mla	r2, r2, r0, r5
    680e:	9908      	ldr	r1, [sp, #32]
    6810:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    6812:	9909      	ldr	r1, [sp, #36]	; 0x24
    6814:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    6816:	990a      	ldr	r1, [sp, #40]	; 0x28
    6818:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    681a:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    681c:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    681e:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    6820:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    6822:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    6824:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    6826:	4620      	mov	r0, r4
    6828:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    682a:	b21a      	sxth	r2, r3
    682c:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    6830:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    6832:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    6836:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    683a:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    683c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    6840:	b2e4      	uxtb	r4, r4
    6842:	e7dc      	b.n	67fe <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    6844:	2001      	movs	r0, #1
}
    6846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6848:	20000560 	.word	0x20000560

0000684c <ticker_trigger>:
	instance = &_instance[instance_index];
    684c:	4a07      	ldr	r2, [pc, #28]	; (686c <ticker_trigger+0x20>)
    684e:	212c      	movs	r1, #44	; 0x2c
    6850:	fb00 2301 	mla	r3, r0, r1, r2
{
    6854:	b410      	push	{r4}
	if (instance->sched_cb) {
    6856:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    6858:	b12c      	cbz	r4, 6866 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    685a:	46a4      	mov	ip, r4
    685c:	2201      	movs	r2, #1
    685e:	2103      	movs	r1, #3
    6860:	2002      	movs	r0, #2
}
    6862:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    6864:	4760      	bx	ip
}
    6866:	bc10      	pop	{r4}
    6868:	4770      	bx	lr
    686a:	bf00      	nop
    686c:	20000560 	.word	0x20000560

00006870 <ticker_start>:
{
    6870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6874:	4f25      	ldr	r7, [pc, #148]	; (690c <ticker_start+0x9c>)
    6876:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    687a:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    687c:	fb08 7000 	mla	r0, r8, r0, r7
    6880:	fa0f fc81 	sxth.w	ip, r1
    6884:	f8d0 e004 	ldr.w	lr, [r0, #4]
    6888:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    688c:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    6890:	78f4      	ldrb	r4, [r6, #3]
    6892:	1c65      	adds	r5, r4, #1
    6894:	b2ed      	uxtb	r5, r5
		last = 0;
    6896:	45ae      	cmp	lr, r5
    6898:	bf98      	it	ls
    689a:	2500      	movls	r5, #0
	if (last == user->first) {
    689c:	f896 e001 	ldrb.w	lr, [r6, #1]
    68a0:	45ae      	cmp	lr, r5
    68a2:	d02f      	beq.n	6904 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    68a4:	f8d6 c004 	ldr.w	ip, [r6, #4]
    68a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    68ac:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    68b0:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    68b4:	f04f 0a03 	mov.w	sl, #3
    68b8:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    68bc:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    68be:	9b08      	ldr	r3, [sp, #32]
    68c0:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    68c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    68c4:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    68c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    68c8:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    68ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    68cc:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    68ce:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    68d2:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    68d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    68d6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    68d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    68da:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    68dc:	2302      	movs	r3, #2
    68de:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    68e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    68e2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    68e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    68e6:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    68e8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    68ea:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    68ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
    68ee:	6a03      	ldr	r3, [r0, #32]
    68f0:	4608      	mov	r0, r1
    68f2:	4798      	blx	r3
    68f4:	fb09 7308 	mla	r3, r9, r8, r7
    68f8:	2200      	movs	r2, #0
    68fa:	2104      	movs	r1, #4
    68fc:	47a8      	blx	r5
	return user_op->status;
    68fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6904:	2001      	movs	r0, #1
}
    6906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    690a:	bf00      	nop
    690c:	20000560 	.word	0x20000560

00006910 <ticker_update>:
{
    6910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6914:	f8df 8090 	ldr.w	r8, [pc, #144]	; 69a8 <ticker_update+0x98>
    6918:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    691c:	fb0a 8e00 	mla	lr, sl, r0, r8
    6920:	b20f      	sxth	r7, r1
    6922:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    6926:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    6928:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    692c:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    6930:	78c4      	ldrb	r4, [r0, #3]
    6932:	1c66      	adds	r6, r4, #1
    6934:	b2f6      	uxtb	r6, r6
		last = 0;
    6936:	42b5      	cmp	r5, r6
    6938:	bf98      	it	ls
    693a:	2600      	movls	r6, #0
	if (last == user->first) {
    693c:	7845      	ldrb	r5, [r0, #1]
    693e:	42b5      	cmp	r5, r6
    6940:	d02f      	beq.n	69a2 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    6942:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6946:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    694a:	0125      	lsls	r5, r4, #4
    694c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    6950:	2704      	movs	r7, #4
    6952:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    6956:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    6958:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    695c:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    695e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    6962:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    6964:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6968:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    696a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    696e:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    6970:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    6974:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    6976:	2302      	movs	r3, #2
    6978:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    697a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    697c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    697e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    6980:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    6982:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    6984:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6986:	f8de 3020 	ldr.w	r3, [lr, #32]
    698a:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    698e:	4608      	mov	r0, r1
    6990:	4798      	blx	r3
    6992:	fb09 830a 	mla	r3, r9, sl, r8
    6996:	2200      	movs	r2, #0
    6998:	4639      	mov	r1, r7
    699a:	47a8      	blx	r5
	return user_op->status;
    699c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    69a2:	2001      	movs	r0, #1
}
    69a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    69a8:	20000560 	.word	0x20000560

000069ac <ticker_stop>:
{
    69ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    69b0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 6a20 <ticker_stop+0x74>
    69b4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    69b8:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    69bc:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    69be:	f8de 0004 	ldr.w	r0, [lr, #4]
    69c2:	b20e      	sxth	r6, r1
    69c4:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    69c8:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    69cc:	78fc      	ldrb	r4, [r7, #3]
    69ce:	1c65      	adds	r5, r4, #1
    69d0:	b2ed      	uxtb	r5, r5
		last = 0;
    69d2:	42a8      	cmp	r0, r5
    69d4:	bf98      	it	ls
    69d6:	2500      	movls	r5, #0
	if (last == user->first) {
    69d8:	7878      	ldrb	r0, [r7, #1]
    69da:	42a8      	cmp	r0, r5
    69dc:	d01d      	beq.n	6a1a <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    69de:	6878      	ldr	r0, [r7, #4]
    69e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    69e4:	0124      	lsls	r4, r4, #4
    69e6:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    69e8:	f04f 0c05 	mov.w	ip, #5
    69ec:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    69f0:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    69f2:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    69f4:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    69f6:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    69f8:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    69fa:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    69fc:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    69fe:	f8de 3020 	ldr.w	r3, [lr, #32]
    6a02:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    6a06:	4608      	mov	r0, r1
    6a08:	4798      	blx	r3
    6a0a:	fb08 930a 	mla	r3, r8, sl, r9
    6a0e:	2200      	movs	r2, #0
    6a10:	2104      	movs	r1, #4
    6a12:	47a0      	blx	r4
	return user_op->status;
    6a14:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6a1a:	2001      	movs	r0, #1
}
    6a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a20:	20000560 	.word	0x20000560

00006a24 <ticker_next_slot_get>:
{
    6a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6a28:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6aa4 <ticker_next_slot_get+0x80>
    6a2c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    6a30:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    6a32:	fb0a 8000 	mla	r0, sl, r0, r8
    6a36:	fa0f fe81 	sxth.w	lr, r1
    6a3a:	6845      	ldr	r5, [r0, #4]
    6a3c:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    6a40:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    6a44:	78fc      	ldrb	r4, [r7, #3]
    6a46:	1c66      	adds	r6, r4, #1
    6a48:	b2f6      	uxtb	r6, r6
		last = 0;
    6a4a:	42b5      	cmp	r5, r6
    6a4c:	bf98      	it	ls
    6a4e:	2600      	movls	r6, #0
	if (last == user->first) {
    6a50:	787d      	ldrb	r5, [r7, #1]
    6a52:	42b5      	cmp	r5, r6
    6a54:	d023      	beq.n	6a9e <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    6a56:	f8d7 c004 	ldr.w	ip, [r7, #4]
    6a5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6a5e:	0125      	lsls	r5, r4, #4
    6a60:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    6a64:	f04f 0e02 	mov.w	lr, #2
    6a68:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    6a6c:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    6a6e:	9b08      	ldr	r3, [sp, #32]
    6a70:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    6a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a74:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    6a76:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    6a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    6a7a:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    6a7c:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    6a7e:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    6a82:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    6a84:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6a86:	6a45      	ldr	r5, [r0, #36]	; 0x24
    6a88:	6a03      	ldr	r3, [r0, #32]
    6a8a:	4608      	mov	r0, r1
    6a8c:	4798      	blx	r3
    6a8e:	fb09 830a 	mla	r3, r9, sl, r8
    6a92:	2200      	movs	r2, #0
    6a94:	2104      	movs	r1, #4
    6a96:	47a8      	blx	r5
	return user_op->status;
    6a98:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6a9e:	2001      	movs	r0, #1
}
    6aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6aa4:	20000560 	.word	0x20000560

00006aa8 <ticker_job_idle_get>:
{
    6aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6aac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 6b1c <ticker_job_idle_get+0x74>
    6ab0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    6ab4:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    6ab8:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    6aba:	f8de 0004 	ldr.w	r0, [lr, #4]
    6abe:	b20e      	sxth	r6, r1
    6ac0:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    6ac4:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    6ac8:	78fc      	ldrb	r4, [r7, #3]
    6aca:	1c65      	adds	r5, r4, #1
    6acc:	b2ed      	uxtb	r5, r5
		last = 0;
    6ace:	42a8      	cmp	r0, r5
    6ad0:	bf98      	it	ls
    6ad2:	2500      	movls	r5, #0
	if (last == user->first) {
    6ad4:	7878      	ldrb	r0, [r7, #1]
    6ad6:	42a8      	cmp	r0, r5
    6ad8:	d01d      	beq.n	6b16 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    6ada:	6878      	ldr	r0, [r7, #4]
    6adc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6ae0:	0124      	lsls	r4, r4, #4
    6ae2:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    6ae4:	f04f 0c01 	mov.w	ip, #1
    6ae8:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    6aec:	20ff      	movs	r0, #255	; 0xff
    6aee:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    6af0:	2002      	movs	r0, #2
    6af2:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    6af4:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    6af6:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    6af8:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6afa:	f8de 3020 	ldr.w	r3, [lr, #32]
    6afe:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    6b02:	4608      	mov	r0, r1
    6b04:	4798      	blx	r3
    6b06:	fb08 930a 	mla	r3, r8, sl, r9
    6b0a:	2200      	movs	r2, #0
    6b0c:	2104      	movs	r1, #4
    6b0e:	47a0      	blx	r4
	return user_op->status;
    6b10:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6b16:	2001      	movs	r0, #1
}
    6b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b1c:	20000560 	.word	0x20000560

00006b20 <ticker_job_sched>:
{
    6b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6b24:	4c08      	ldr	r4, [pc, #32]	; (6b48 <ticker_job_sched+0x28>)
    6b26:	252c      	movs	r5, #44	; 0x2c
    6b28:	fb05 4300 	mla	r3, r5, r0, r4
{
    6b2c:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6b2e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    6b30:	6a1b      	ldr	r3, [r3, #32]
    6b32:	4608      	mov	r0, r1
    6b34:	4798      	blx	r3
    6b36:	fb06 4305 	mla	r3, r6, r5, r4
    6b3a:	46bc      	mov	ip, r7
    6b3c:	2200      	movs	r2, #0
    6b3e:	2104      	movs	r1, #4
}
    6b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6b44:	4760      	bx	ip
    6b46:	bf00      	nop
    6b48:	20000560 	.word	0x20000560

00006b4c <ticker_ticks_now_get>:
	return cntr_cnt_get();
    6b4c:	f008 bfd8 	b.w	fb00 <cntr_cnt_get>

00006b50 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6b50:	1a40      	subs	r0, r0, r1
}
    6b52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6b56:	4770      	bx	lr

00006b58 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    6b58:	b508      	push	{r3, lr}
    6b5a:	4603      	mov	r3, r0
	if (addr_type > 1) {
    6b5c:	2b01      	cmp	r3, #1
{
    6b5e:	4608      	mov	r0, r1
	if (addr_type > 1) {
    6b60:	d80e      	bhi.n	6b80 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    6b62:	b133      	cbz	r3, 6b72 <ll_addr_get+0x1a>
		if (bdaddr) {
    6b64:	b119      	cbz	r1, 6b6e <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    6b66:	2206      	movs	r2, #6
    6b68:	4906      	ldr	r1, [pc, #24]	; (6b84 <ll_addr_get+0x2c>)
    6b6a:	f7fb f86d 	bl	1c48 <memcpy>
		}

		return rnd_addr;
    6b6e:	4805      	ldr	r0, [pc, #20]	; (6b84 <ll_addr_get+0x2c>)
    6b70:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    6b72:	b119      	cbz	r1, 6b7c <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    6b74:	2206      	movs	r2, #6
    6b76:	4904      	ldr	r1, [pc, #16]	; (6b88 <ll_addr_get+0x30>)
    6b78:	f7fb f866 	bl	1c48 <memcpy>
	}

	return pub_addr;
    6b7c:	4802      	ldr	r0, [pc, #8]	; (6b88 <ll_addr_get+0x30>)
}
    6b7e:	bd08      	pop	{r3, pc}
		return NULL;
    6b80:	2000      	movs	r0, #0
    6b82:	bd08      	pop	{r3, pc}
    6b84:	200005be 	.word	0x200005be
    6b88:	200005b8 	.word	0x200005b8

00006b8c <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    6b8c:	b570      	push	{r4, r5, r6, lr}
    6b8e:	4606      	mov	r6, r0
    6b90:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    6b92:	f007 f9c1 	bl	df18 <ll_adv_is_enabled>
    6b96:	4604      	mov	r4, r0
    6b98:	b110      	cbz	r0, 6ba0 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    6b9a:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    6b9c:	4620      	mov	r0, r4
    6b9e:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    6ba0:	f007 f9ce 	bl	df40 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    6ba4:	f010 0f06 	tst.w	r0, #6
    6ba8:	d1f7      	bne.n	6b9a <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    6baa:	2206      	movs	r2, #6
    6bac:	4629      	mov	r1, r5
	if (addr_type) {
    6bae:	b11e      	cbz	r6, 6bb8 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    6bb0:	4802      	ldr	r0, [pc, #8]	; (6bbc <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    6bb2:	f7fb f849 	bl	1c48 <memcpy>
    6bb6:	e7f1      	b.n	6b9c <ll_addr_set+0x10>
    6bb8:	4801      	ldr	r0, [pc, #4]	; (6bc0 <ll_addr_set+0x34>)
    6bba:	e7fa      	b.n	6bb2 <ll_addr_set+0x26>
    6bbc:	200005be 	.word	0x200005be
    6bc0:	200005b8 	.word	0x200005b8

00006bc4 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    6bc4:	2300      	movs	r3, #0
    6bc6:	7003      	strb	r3, [r0, #0]
	*max = 0;
    6bc8:	700b      	strb	r3, [r1, #0]
    6bca:	4770      	bx	lr

00006bcc <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    6bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6bce:	4607      	mov	r7, r0
    6bd0:	460e      	mov	r6, r1
	while (len) {
    6bd2:	460c      	mov	r4, r1
    6bd4:	1b35      	subs	r5, r6, r4
    6bd6:	443d      	add	r5, r7
    6bd8:	b18c      	cbz	r4, 6bfe <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    6bda:	f7fa fa05 	bl	fe8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    6bde:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    6be0:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    6be2:	d907      	bls.n	6bf4 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    6be4:	2204      	movs	r2, #4
    6be6:	eb0d 0102 	add.w	r1, sp, r2
    6bea:	4628      	mov	r0, r5
    6bec:	f7fb f82c 	bl	1c48 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    6bf0:	3c04      	subs	r4, #4
    6bf2:	e7ef      	b.n	6bd4 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    6bf4:	4622      	mov	r2, r4
    6bf6:	a901      	add	r1, sp, #4
    6bf8:	4628      	mov	r0, r5
    6bfa:	f7fb f825 	bl	1c48 <memcpy>
			break;
		}
	}

	return 0;
}
    6bfe:	2000      	movs	r0, #0
    6c00:	b003      	add	sp, #12
    6c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006c04 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    6c04:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    6c06:	2300      	movs	r3, #0
    6c08:	f008 ffae 	bl	fb68 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    6c0c:	2000      	movs	r0, #0
    6c0e:	bd08      	pop	{r3, pc}

00006c10 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    6c10:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    6c12:	4802      	ldr	r0, [pc, #8]	; (6c1c <_hci_driver_init+0xc>)
    6c14:	f7fc faea 	bl	31ec <bt_hci_driver_register>

	return 0;
}
    6c18:	2000      	movs	r0, #0
    6c1a:	bd08      	pop	{r3, pc}
    6c1c:	000129d4 	.word	0x000129d4

00006c20 <hci_driver_send>:
{
    6c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
    6c22:	8983      	ldrh	r3, [r0, #12]
{
    6c24:	4605      	mov	r5, r0
	if (!buf->len) {
    6c26:	b323      	cbz	r3, 6c72 <hci_driver_send+0x52>
	switch (type) {
    6c28:	7d03      	ldrb	r3, [r0, #20]
    6c2a:	b18b      	cbz	r3, 6c50 <hci_driver_send+0x30>
    6c2c:	2b02      	cmp	r3, #2
    6c2e:	d120      	bne.n	6c72 <hci_driver_send+0x52>
	err = hci_acl_handle(buf, &evt);
    6c30:	a901      	add	r1, sp, #4
    6c32:	f000 ffc9 	bl	7bc8 <hci_acl_handle>
    6c36:	4604      	mov	r4, r0
	if (evt) {
    6c38:	9801      	ldr	r0, [sp, #4]
    6c3a:	b108      	cbz	r0, 6c40 <hci_driver_send+0x20>
		bt_recv_prio(evt);
    6c3c:	f7fc fa4a 	bl	30d4 <bt_recv_prio>
	if (!err) {
    6c40:	b91c      	cbnz	r4, 6c4a <hci_driver_send+0x2a>
		net_buf_unref(buf);
    6c42:	4628      	mov	r0, r5
    6c44:	f009 fd4a 	bl	106dc <net_buf_unref>
    6c48:	2400      	movs	r4, #0
}
    6c4a:	4620      	mov	r0, r4
    6c4c:	b003      	add	sp, #12
    6c4e:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf);
    6c50:	f000 fa70 	bl	7134 <hci_cmd_handle>
	if (evt) {
    6c54:	4602      	mov	r2, r0
    6c56:	2800      	cmp	r0, #0
    6c58:	d0f3      	beq.n	6c42 <hci_driver_send+0x22>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    6c5a:	6883      	ldr	r3, [r0, #8]
    6c5c:	7819      	ldrb	r1, [r3, #0]
    6c5e:	2913      	cmp	r1, #19
    6c60:	d80a      	bhi.n	6c78 <hci_driver_send+0x58>
    6c62:	2301      	movs	r3, #1
    6c64:	408b      	lsls	r3, r1
    6c66:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    6c6a:	d005      	beq.n	6c78 <hci_driver_send+0x58>
			bt_recv_prio(evt);
    6c6c:	f7fc fa32 	bl	30d4 <bt_recv_prio>
    6c70:	e7e7      	b.n	6c42 <hci_driver_send+0x22>
		return -EINVAL;
    6c72:	f06f 0415 	mvn.w	r4, #21
    6c76:	e7e8      	b.n	6c4a <hci_driver_send+0x2a>
			bt_recv(evt);
    6c78:	4610      	mov	r0, r2
    6c7a:	f7fb ff53 	bl	2b24 <bt_recv>
    6c7e:	e7e0      	b.n	6c42 <hci_driver_send+0x22>

00006c80 <recv_thread>:
{
    6c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    6c82:	4d23      	ldr	r5, [pc, #140]	; (6d10 <recv_thread+0x90>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    6c84:	2600      	movs	r6, #0
    6c86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6c8a:	4628      	mov	r0, r5
    6c8c:	f00a fb0e 	bl	112ac <_impl_k_queue_get>
		if (node_rx && !buf) {
    6c90:	4604      	mov	r4, r0
    6c92:	b368      	cbz	r0, 6cf0 <recv_thread+0x70>
	s8_t class = hci_get_class(node_rx);
    6c94:	f001 fb6c 	bl	8370 <hci_get_class>
	switch (class) {
    6c98:	1e03      	subs	r3, r0, #0
    6c9a:	9401      	str	r4, [sp, #4]
    6c9c:	db03      	blt.n	6ca6 <recv_thread+0x26>
    6c9e:	2b02      	cmp	r3, #2
    6ca0:	dd07      	ble.n	6cb2 <recv_thread+0x32>
    6ca2:	2b03      	cmp	r3, #3
    6ca4:	d027      	beq.n	6cf6 <recv_thread+0x76>
		LL_ASSERT(0);
    6ca6:	4040      	eors	r0, r0
    6ca8:	f380 8811 	msr	BASEPRI, r0
    6cac:	f04f 0004 	mov.w	r0, #4
    6cb0:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    6cb2:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    6cb4:	bf0e      	itee	eq
    6cb6:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6cb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6cbc:	2001      	movne	r0, #1
    6cbe:	f7fc fb61 	bl	3384 <bt_buf_get_rx>
    6cc2:	4604      	mov	r4, r0
		if (buf) {
    6cc4:	b118      	cbz	r0, 6cce <recv_thread+0x4e>
			hci_evt_encode(node_rx, buf);
    6cc6:	4601      	mov	r1, r0
    6cc8:	9801      	ldr	r0, [sp, #4]
    6cca:	f001 f807 	bl	7cdc <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    6cce:	9b01      	ldr	r3, [sp, #4]
    6cd0:	2100      	movs	r1, #0
    6cd2:	88d8      	ldrh	r0, [r3, #6]
    6cd4:	f007 fd74 	bl	e7c0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    6cd8:	a802      	add	r0, sp, #8
    6cda:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    6cde:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    6ce0:	f007 fd0c 	bl	e6fc <ll_rx_mem_release>
		if (buf) {
    6ce4:	b124      	cbz	r4, 6cf0 <recv_thread+0x70>
			if (buf->len) {
    6ce6:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    6ce8:	4620      	mov	r0, r4
			if (buf->len) {
    6cea:	b173      	cbz	r3, 6d0a <recv_thread+0x8a>
				bt_recv(buf);
    6cec:	f7fb ff1a 	bl	2b24 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6cf0:	f00a fd3e 	bl	11770 <_impl_k_yield>
    6cf4:	e7c7      	b.n	6c86 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    6cf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6cfa:	f7fc fb43 	bl	3384 <bt_buf_get_rx>
    6cfe:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    6d00:	4601      	mov	r1, r0
    6d02:	9801      	ldr	r0, [sp, #4]
    6d04:	f000 ffbe 	bl	7c84 <hci_acl_encode>
    6d08:	e7e1      	b.n	6cce <recv_thread+0x4e>
				net_buf_unref(buf);
    6d0a:	f009 fce7 	bl	106dc <net_buf_unref>
    6d0e:	e7ef      	b.n	6cf0 <recv_thread+0x70>
    6d10:	20003934 	.word	0x20003934

00006d14 <prio_recv_thread>:
{
    6d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6d16:	4d14      	ldr	r5, [pc, #80]	; (6d68 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    6d18:	4e14      	ldr	r6, [pc, #80]	; (6d6c <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    6d1a:	f10d 0102 	add.w	r1, sp, #2
    6d1e:	a801      	add	r0, sp, #4
    6d20:	f007 fcb4 	bl	e68c <ll_rx_get>
    6d24:	4604      	mov	r4, r0
    6d26:	b940      	cbnz	r0, 6d3a <prio_recv_thread+0x26>
		if (node_rx) {
    6d28:	9b01      	ldr	r3, [sp, #4]
    6d2a:	b1bb      	cbz	r3, 6d5c <prio_recv_thread+0x48>
			ll_rx_dequeue();
    6d2c:	f007 ff5e 	bl	ebec <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    6d30:	9901      	ldr	r1, [sp, #4]
    6d32:	4630      	mov	r0, r6
    6d34:	f00a fa96 	bl	11264 <k_queue_append>
    6d38:	e7ef      	b.n	6d1a <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6d3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6d3e:	2001      	movs	r0, #1
    6d40:	f7fc fb20 	bl	3384 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    6d44:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6d46:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    6d48:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6d4c:	f001 fafc 	bl	8348 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    6d50:	4638      	mov	r0, r7
    6d52:	f7fc f9bf 	bl	30d4 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6d56:	f00a fd0b 	bl	11770 <_impl_k_yield>
    6d5a:	e7de      	b.n	6d1a <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6d60:	4628      	mov	r0, r5
    6d62:	f00a fd6c 	bl	1183e <_impl_k_sem_take>
    6d66:	e7d8      	b.n	6d1a <prio_recv_thread+0x6>
    6d68:	2000391c 	.word	0x2000391c
    6d6c:	20003934 	.word	0x20003934

00006d70 <hci_driver_open>:
{
    6d70:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    6d72:	4814      	ldr	r0, [pc, #80]	; (6dc4 <hci_driver_open+0x54>)
{
    6d74:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    6d76:	f007 ffdd 	bl	ed34 <ll_init>
	if (err) {
    6d7a:	4604      	mov	r4, r0
    6d7c:	b9f8      	cbnz	r0, 6dbe <hci_driver_open+0x4e>
	hci_init(NULL);
    6d7e:	f001 fb0f 	bl	83a0 <hci_init>

    6d82:	f06f 0309 	mvn.w	r3, #9
    6d86:	9303      	str	r3, [sp, #12]
    6d88:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    6d8c:	4b0e      	ldr	r3, [pc, #56]	; (6dc8 <hci_driver_open+0x58>)
    6d8e:	490f      	ldr	r1, [pc, #60]	; (6dcc <hci_driver_open+0x5c>)
    6d90:	9405      	str	r4, [sp, #20]
    6d92:	9404      	str	r4, [sp, #16]
    6d94:	9402      	str	r4, [sp, #8]
    6d96:	9401      	str	r4, [sp, #4]
    6d98:	9400      	str	r4, [sp, #0]
    6d9a:	480d      	ldr	r0, [pc, #52]	; (6dd0 <hci_driver_open+0x60>)
    6d9c:	f00a ff24 	bl	11be8 <_impl_k_thread_create>
    6da0:	f06f 0307 	mvn.w	r3, #7
    6da4:	9303      	str	r3, [sp, #12]
    6da6:	9405      	str	r4, [sp, #20]
    6da8:	9404      	str	r4, [sp, #16]
    6daa:	9402      	str	r4, [sp, #8]
    6dac:	9401      	str	r4, [sp, #4]
    6dae:	9400      	str	r4, [sp, #0]
    6db0:	4b08      	ldr	r3, [pc, #32]	; (6dd4 <hci_driver_open+0x64>)
    6db2:	4909      	ldr	r1, [pc, #36]	; (6dd8 <hci_driver_open+0x68>)
    6db4:	4809      	ldr	r0, [pc, #36]	; (6ddc <hci_driver_open+0x6c>)
    6db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6dba:	f00a ff15 	bl	11be8 <_impl_k_thread_create>
}
    6dbe:	4620      	mov	r0, r4
    6dc0:	b006      	add	sp, #24
    6dc2:	bd10      	pop	{r4, pc}
    6dc4:	2000391c 	.word	0x2000391c
    6dc8:	00006d15 	.word	0x00006d15
    6dcc:	20001d38 	.word	0x20001d38
    6dd0:	20001640 	.word	0x20001640
    6dd4:	00006c81 	.word	0x00006c81
    6dd8:	20001ef8 	.word	0x20001ef8
    6ddc:	200015d0 	.word	0x200015d0

00006de0 <sys_put_le32>:
	dst[1] = val >> 8;
    6de0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    6de4:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    6de6:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    6de8:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    6dea:	0a00      	lsrs	r0, r0, #8
    6dec:	704b      	strb	r3, [r1, #1]
    6dee:	70c8      	strb	r0, [r1, #3]
    6df0:	4770      	bx	lr

00006df2 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    6df2:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    6df4:	3008      	adds	r0, #8
{
    6df6:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    6df8:	2102      	movs	r1, #2
{
    6dfa:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    6dfc:	f009 fca0 	bl	10740 <net_buf_simple_add>
	hdr->evt = evt;
    6e00:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    6e02:	7044      	strb	r4, [r0, #1]
    6e04:	bd38      	pop	{r3, r4, r5, pc}
	...

00006e08 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    6e08:	b538      	push	{r3, r4, r5, lr}
    6e0a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    6e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6e10:	f7fc fac8 	bl	33a4 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    6e14:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    6e16:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    6e18:	210f      	movs	r1, #15
    6e1a:	f7ff ffea 	bl	6df2 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    6e1e:	2104      	movs	r1, #4
    6e20:	f104 0008 	add.w	r0, r4, #8
    6e24:	f009 fc8c 	bl	10740 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    6e28:	2301      	movs	r3, #1
    6e2a:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    6e2c:	4b02      	ldr	r3, [pc, #8]	; (6e38 <cmd_status+0x30>)
	cs->status = status;
    6e2e:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    6e30:	881b      	ldrh	r3, [r3, #0]
    6e32:	8043      	strh	r3, [r0, #2]

	return buf;
}
    6e34:	4620      	mov	r0, r4
    6e36:	bd38      	pop	{r3, r4, r5, pc}
    6e38:	200005c4 	.word	0x200005c4

00006e3c <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    6e3c:	b570      	push	{r4, r5, r6, lr}
    6e3e:	4604      	mov	r4, r0
    6e40:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    6e42:	3201      	adds	r2, #1
{
    6e44:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    6e46:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    6e48:	b2d2      	uxtb	r2, r2
    6e4a:	213e      	movs	r1, #62	; 0x3e
    6e4c:	f7ff ffd1 	bl	6df2 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    6e50:	2101      	movs	r1, #1
    6e52:	4620      	mov	r0, r4
    6e54:	f009 fc74 	bl	10740 <net_buf_simple_add>
	me->subevent = subevt;
    6e58:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    6e5a:	4629      	mov	r1, r5
    6e5c:	4620      	mov	r0, r4
}
    6e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    6e62:	f009 bc6d 	b.w	10740 <net_buf_simple_add>
	...

00006e68 <cmd_complete>:
{
    6e68:	b538      	push	{r3, r4, r5, lr}
    6e6a:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    6e70:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6e72:	f7fc fa97 	bl	33a4 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    6e76:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6e78:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    6e7a:	b2d2      	uxtb	r2, r2
    6e7c:	210e      	movs	r1, #14
    6e7e:	f7ff ffb8 	bl	6df2 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    6e82:	6820      	ldr	r0, [r4, #0]
    6e84:	2103      	movs	r1, #3
    6e86:	3008      	adds	r0, #8
    6e88:	f009 fc5a 	bl	10740 <net_buf_simple_add>
	cc->ncmd = 1;
    6e8c:	2301      	movs	r3, #1
    6e8e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    6e90:	4b05      	ldr	r3, [pc, #20]	; (6ea8 <cmd_complete+0x40>)
    6e92:	881b      	ldrh	r3, [r3, #0]
    6e94:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    6e98:	6820      	ldr	r0, [r4, #0]
    6e9a:	4629      	mov	r1, r5
    6e9c:	3008      	adds	r0, #8
}
    6e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    6ea2:	f009 bc4d 	b.w	10740 <net_buf_simple_add>
    6ea6:	bf00      	nop
    6ea8:	200005c4 	.word	0x200005c4

00006eac <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    6eac:	4b0e      	ldr	r3, [pc, #56]	; (6ee8 <encrypt_change+0x3c>)
{
    6eae:	b570      	push	{r4, r5, r6, lr}
    6eb0:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    6eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    6eb6:	2300      	movs	r3, #0
    6eb8:	f002 0280 	and.w	r2, r2, #128	; 0x80
    6ebc:	4313      	orrs	r3, r2
{
    6ebe:	4604      	mov	r4, r0
    6ec0:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    6ec2:	d010      	beq.n	6ee6 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    6ec4:	2204      	movs	r2, #4
    6ec6:	2108      	movs	r1, #8
    6ec8:	4628      	mov	r0, r5
    6eca:	f7ff ff92 	bl	6df2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    6ece:	2104      	movs	r1, #4
    6ed0:	f105 0008 	add.w	r0, r5, #8
    6ed4:	f009 fc34 	bl	10740 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    6ed8:	fab4 f384 	clz	r3, r4
    6edc:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    6ede:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    6ee0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    6ee4:	70c3      	strb	r3, [r0, #3]
    6ee6:	bd70      	pop	{r4, r5, r6, pc}
    6ee8:	20003740 	.word	0x20003740

00006eec <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    6eec:	b570      	push	{r4, r5, r6, lr}
    6eee:	4604      	mov	r4, r0
    6ef0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6ef2:	4b13      	ldr	r3, [pc, #76]	; (6f40 <le_remote_feat_complete+0x54>)
{
    6ef4:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
    6efa:	2200      	movs	r2, #0
    6efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    6f00:	4313      	orrs	r3, r2
{
    6f02:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6f04:	d01b      	beq.n	6f3e <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    6f06:	4b0f      	ldr	r3, [pc, #60]	; (6f44 <le_remote_feat_complete+0x58>)
    6f08:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f0c:	2300      	movs	r3, #0
    6f0e:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6f12:	4313      	orrs	r3, r2
    6f14:	d013      	beq.n	6f3e <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    6f16:	220b      	movs	r2, #11
    6f18:	2104      	movs	r1, #4
    6f1a:	f7ff ff8f 	bl	6e3c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    6f1e:	2208      	movs	r2, #8
	sep->status = status;
    6f20:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    6f22:	f8a0 6001 	strh.w	r6, [r0, #1]
    6f26:	3003      	adds	r0, #3
	if (!status) {
    6f28:	b924      	cbnz	r4, 6f34 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    6f2a:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    6f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    6f30:	f7fa be8a 	b.w	1c48 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    6f34:	2100      	movs	r1, #0
}
    6f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    6f3a:	f7fa beb1 	b.w	1ca0 <memset>
    6f3e:	bd70      	pop	{r4, r5, r6, pc}
    6f40:	20003740 	.word	0x20003740
    6f44:	20003748 	.word	0x20003748

00006f48 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    6f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f4c:	4605      	mov	r5, r0
    6f4e:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6f50:	4b46      	ldr	r3, [pc, #280]	; (706c <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    6f52:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6f54:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f58:	f240 2801 	movw	r8, #513	; 0x201
    6f5c:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    6f60:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6f64:	ea03 0309 	and.w	r3, r3, r9
    6f68:	ea02 0208 	and.w	r2, r2, r8
    6f6c:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    6f6e:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    6f70:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6f74:	d077      	beq.n	7066 <le_conn_complete.part.39+0x11e>
	if (!status) {
    6f76:	2d00      	cmp	r5, #0
    6f78:	d150      	bne.n	701c <le_conn_complete.part.39+0xd4>
		conn_count++;
    6f7a:	4a3d      	ldr	r2, [pc, #244]	; (7070 <le_conn_complete.part.39+0x128>)
    6f7c:	6813      	ldr	r3, [r2, #0]
    6f7e:	3301      	adds	r3, #1
    6f80:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    6f82:	ea5a 030b 	orrs.w	r3, sl, fp
    6f86:	f101 0803 	add.w	r8, r1, #3
    6f8a:	d151      	bne.n	7030 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    6f8c:	2212      	movs	r2, #18
    6f8e:	2101      	movs	r1, #1
    6f90:	f7ff ff54 	bl	6e3c <meta_evt>
	lecc->status = 0x00;
    6f94:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    6f96:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    6f9a:	7863      	ldrb	r3, [r4, #1]
    6f9c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    6f9e:	78a3      	ldrb	r3, [r4, #2]
    6fa0:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    6fa2:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    6fa4:	2206      	movs	r2, #6
    6fa6:	4641      	mov	r1, r8
    6fa8:	3005      	adds	r0, #5
    6faa:	f7fa fe4d 	bl	1c48 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    6fae:	8ae3      	ldrh	r3, [r4, #22]
    6fb0:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    6fb4:	8b23      	ldrh	r3, [r4, #24]
    6fb6:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    6fba:	8b63      	ldrh	r3, [r4, #26]
    6fbc:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    6fc0:	7f23      	ldrb	r3, [r4, #28]
    6fc2:	747b      	strb	r3, [r7, #17]
    6fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    6fc8:	221e      	movs	r2, #30
    6fca:	210a      	movs	r1, #10
    6fcc:	f7ff ff36 	bl	6e3c <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    6fd0:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    6fd2:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    6fd4:	2100      	movs	r1, #0
    6fd6:	f7fa fe63 	bl	1ca0 <memset>
		lecc->status = status;
    6fda:	7025      	strb	r5, [r4, #0]
    6fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    6fe0:	7d63      	ldrb	r3, [r4, #21]
    6fe2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6fe6:	2b40      	cmp	r3, #64	; 0x40
    6fe8:	d138      	bne.n	705c <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    6fea:	2206      	movs	r2, #6
    6fec:	f104 0110 	add.w	r1, r4, #16
    6ff0:	f7fa fe2a 	bl	1c48 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    6ff4:	2206      	movs	r2, #6
    6ff6:	f104 0109 	add.w	r1, r4, #9
    6ffa:	f107 0011 	add.w	r0, r7, #17
    6ffe:	f7fa fe23 	bl	1c48 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    7002:	8ae3      	ldrh	r3, [r4, #22]
    7004:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    7008:	8b23      	ldrh	r3, [r4, #24]
    700a:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    700e:	8b63      	ldrh	r3, [r4, #26]
    7010:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    7014:	7f23      	ldrb	r3, [r4, #28]
    7016:	777b      	strb	r3, [r7, #29]
    7018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    701c:	ea5a 030b 	orrs.w	r3, sl, fp
    7020:	d1d2      	bne.n	6fc8 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    7022:	2212      	movs	r2, #18
    7024:	2101      	movs	r1, #1
    7026:	f7ff ff09 	bl	6e3c <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    702a:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    702c:	4604      	mov	r4, r0
    702e:	e7d1      	b.n	6fd4 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7030:	221e      	movs	r2, #30
    7032:	210a      	movs	r1, #10
    7034:	f7ff ff02 	bl	6e3c <meta_evt>
		leecc->status = 0x00;
    7038:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    703a:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    703e:	7863      	ldrb	r3, [r4, #1]
    7040:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    7042:	78a3      	ldrb	r3, [r4, #2]
    7044:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7046:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    7048:	2206      	movs	r2, #6
    704a:	4641      	mov	r1, r8
    704c:	3005      	adds	r0, #5
    704e:	f7fa fdfb 	bl	1c48 <memcpy>
		if ((radio_cc->own_addr_type) &&
    7052:	7be3      	ldrb	r3, [r4, #15]
    7054:	f107 000b 	add.w	r0, r7, #11
    7058:	2b00      	cmp	r3, #0
    705a:	d1c1      	bne.n	6fe0 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    705c:	2206      	movs	r2, #6
    705e:	2100      	movs	r1, #0
    7060:	f7fa fe1e 	bl	1ca0 <memset>
    7064:	e7c6      	b.n	6ff4 <le_conn_complete.part.39+0xac>
    7066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    706a:	bf00      	nop
    706c:	20003748 	.word	0x20003748
    7070:	200005c8 	.word	0x200005c8

00007074 <bt_addr_le_to_str.constprop.71>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7074:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    7076:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7078:	b08a      	sub	sp, #40	; 0x28
    707a:	4604      	mov	r4, r0
    707c:	460e      	mov	r6, r1
    707e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    7080:	2b03      	cmp	r3, #3
    7082:	d820      	bhi.n	70c6 <bt_addr_le_to_str.constprop.71+0x52>
    7084:	e8df f003 	tbb	[pc, r3]
    7088:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    708c:	4911      	ldr	r1, [pc, #68]	; (70d4 <bt_addr_le_to_str.constprop.71+0x60>)
		strcpy(type, "random");
    708e:	4628      	mov	r0, r5
    7090:	f7fa fda6 	bl	1be0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7094:	7862      	ldrb	r2, [r4, #1]
    7096:	9204      	str	r2, [sp, #16]
    7098:	78a2      	ldrb	r2, [r4, #2]
    709a:	9203      	str	r2, [sp, #12]
    709c:	78e2      	ldrb	r2, [r4, #3]
    709e:	9202      	str	r2, [sp, #8]
    70a0:	7922      	ldrb	r2, [r4, #4]
    70a2:	9201      	str	r2, [sp, #4]
    70a4:	7962      	ldrb	r2, [r4, #5]
    70a6:	9200      	str	r2, [sp, #0]
    70a8:	79a3      	ldrb	r3, [r4, #6]
    70aa:	9505      	str	r5, [sp, #20]
    70ac:	4a0a      	ldr	r2, [pc, #40]	; (70d8 <bt_addr_le_to_str.constprop.71+0x64>)
    70ae:	211b      	movs	r1, #27
    70b0:	4630      	mov	r0, r6
    70b2:	f7f9 ff79 	bl	fa8 <snprintk>
}
    70b6:	b00a      	add	sp, #40	; 0x28
    70b8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    70ba:	4908      	ldr	r1, [pc, #32]	; (70dc <bt_addr_le_to_str.constprop.71+0x68>)
    70bc:	e7e7      	b.n	708e <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "public id");
    70be:	4908      	ldr	r1, [pc, #32]	; (70e0 <bt_addr_le_to_str.constprop.71+0x6c>)
    70c0:	e7e5      	b.n	708e <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "random id");
    70c2:	4908      	ldr	r1, [pc, #32]	; (70e4 <bt_addr_le_to_str.constprop.71+0x70>)
    70c4:	e7e3      	b.n	708e <bt_addr_le_to_str.constprop.71+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    70c6:	4a08      	ldr	r2, [pc, #32]	; (70e8 <bt_addr_le_to_str.constprop.71+0x74>)
    70c8:	210a      	movs	r1, #10
    70ca:	4628      	mov	r0, r5
    70cc:	f7f9 ff6c 	bl	fa8 <snprintk>
    70d0:	e7e0      	b.n	7094 <bt_addr_le_to_str.constprop.71+0x20>
    70d2:	bf00      	nop
    70d4:	000122a1 	.word	0x000122a1
    70d8:	000122ca 	.word	0x000122ca
    70dc:	000122a8 	.word	0x000122a8
    70e0:	000122af 	.word	0x000122af
    70e4:	000122b9 	.word	0x000122b9
    70e8:	000122c3 	.word	0x000122c3

000070ec <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    70ec:	b510      	push	{r4, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    70ee:	7803      	ldrb	r3, [r0, #0]
    70f0:	f003 020f 	and.w	r2, r3, #15
    70f4:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    70f6:	b08a      	sub	sp, #40	; 0x28
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    70f8:	d116      	bne.n	7128 <le_adv_ext_report.isra.66+0x3c>
    70fa:	7842      	ldrb	r2, [r0, #1]
    70fc:	b1a2      	cbz	r2, 7128 <le_adv_ext_report.isra.66+0x3c>
		if (!p->ext_hdr_len) {
    70fe:	7882      	ldrb	r2, [r0, #2]
    7100:	0691      	lsls	r1, r2, #26
    7102:	d011      	beq.n	7128 <le_adv_ext_report.isra.66+0x3c>
		if (h->adv_addr) {
    7104:	78c2      	ldrb	r2, [r0, #3]
    7106:	07d2      	lsls	r2, r2, #31
    7108:	d50e      	bpl.n	7128 <le_adv_ext_report.isra.66+0x3c>
			addr.type = adv->tx_addr;
    710a:	ac0a      	add	r4, sp, #40	; 0x28
    710c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7110:	f804 3d24 	strb.w	r3, [r4, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    7114:	1d01      	adds	r1, r0, #4
    7116:	2206      	movs	r2, #6
    7118:	f10d 0005 	add.w	r0, sp, #5
    711c:	f7fa fd94 	bl	1c48 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    7120:	a903      	add	r1, sp, #12
    7122:	4620      	mov	r0, r4
    7124:	f7ff ffa6 	bl	7074 <bt_addr_le_to_str.constprop.71>
}
    7128:	b00a      	add	sp, #40	; 0x28
    712a:	bd10      	pop	{r4, pc}

0000712c <sys_get_le64>:
{
    712c:	4603      	mov	r3, r0
}
    712e:	6800      	ldr	r0, [r0, #0]
    7130:	6859      	ldr	r1, [r3, #4]
    7132:	4770      	bx	lr

00007134 <hci_cmd_handle>:
{
    7134:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    7136:	8981      	ldrh	r1, [r0, #12]
{
    7138:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    713a:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    713c:	2902      	cmp	r1, #2
{
    713e:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    7140:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    7142:	d802      	bhi.n	714a <hci_cmd_handle+0x16>
		return NULL;
    7144:	2000      	movs	r0, #0
}
    7146:	b013      	add	sp, #76	; 0x4c
    7148:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    714a:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    714c:	4eba      	ldr	r6, [pc, #744]	; (7438 <hci_cmd_handle+0x304>)
    714e:	781a      	ldrb	r2, [r3, #0]
    7150:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    7152:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    7154:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    7158:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    715a:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    715c:	d8f2      	bhi.n	7144 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    715e:	2103      	movs	r1, #3
    7160:	f104 0008 	add.w	r0, r4, #8
    7164:	f009 fb0b 	bl	1077e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    7168:	8833      	ldrh	r3, [r6, #0]
    716a:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    716e:	0a9b      	lsrs	r3, r3, #10
    7170:	2b04      	cmp	r3, #4
    7172:	f000 80bd 	beq.w	72f0 <hci_cmd_handle+0x1bc>
    7176:	d809      	bhi.n	718c <hci_cmd_handle+0x58>
    7178:	2b01      	cmp	r3, #1
    717a:	d027      	beq.n	71cc <hci_cmd_handle+0x98>
    717c:	2b03      	cmp	r3, #3
    717e:	d03c      	beq.n	71fa <hci_cmd_handle+0xc6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    7180:	2101      	movs	r1, #1
    7182:	a807      	add	r0, sp, #28
    7184:	f7ff fe70 	bl	6e68 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    7188:	2301      	movs	r3, #1
    718a:	e28d      	b.n	76a8 <hci_cmd_handle+0x574>
	switch (BT_OGF(_opcode)) {
    718c:	2b08      	cmp	r3, #8
    718e:	f000 815d 	beq.w	744c <hci_cmd_handle+0x318>
    7192:	2b3f      	cmp	r3, #63	; 0x3f
    7194:	d1f4      	bne.n	7180 <hci_cmd_handle+0x4c>
	switch (ocf) {
    7196:	3a01      	subs	r2, #1
    7198:	2a09      	cmp	r2, #9
    719a:	d8f1      	bhi.n	7180 <hci_cmd_handle+0x4c>
    719c:	a301      	add	r3, pc, #4	; (adr r3, 71a4 <hci_cmd_handle+0x70>)
    719e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    71a2:	bf00      	nop
    71a4:	000079df 	.word	0x000079df
    71a8:	00007a0f 	.word	0x00007a0f
    71ac:	00007a39 	.word	0x00007a39
    71b0:	00007181 	.word	0x00007181
    71b4:	00007181 	.word	0x00007181
    71b8:	00007a7f 	.word	0x00007a7f
    71bc:	00007181 	.word	0x00007181
    71c0:	00007a51 	.word	0x00007a51
    71c4:	00007a8b 	.word	0x00007a8b
    71c8:	00007af9 	.word	0x00007af9
	switch (ocf) {
    71cc:	2a06      	cmp	r2, #6
    71ce:	d006      	beq.n	71de <hci_cmd_handle+0xaa>
    71d0:	2a1d      	cmp	r2, #29
    71d2:	d1d5      	bne.n	7180 <hci_cmd_handle+0x4c>
	handle = sys_le16_to_cpu(cmd->handle);
    71d4:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    71d6:	8818      	ldrh	r0, [r3, #0]
    71d8:	f007 f96d 	bl	e4b6 <ll_version_ind_send>
    71dc:	e004      	b.n	71e8 <hci_cmd_handle+0xb4>
    71de:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    71e0:	7899      	ldrb	r1, [r3, #2]
    71e2:	8818      	ldrh	r0, [r3, #0]
    71e4:	f007 f97b 	bl	e4de <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    71e8:	2800      	cmp	r0, #0
    71ea:	bf14      	ite	ne
    71ec:	200c      	movne	r0, #12
    71ee:	2000      	moveq	r0, #0
    71f0:	f7ff fe0a 	bl	6e08 <cmd_status>
    71f4:	9007      	str	r0, [sp, #28]
	return evt;
    71f6:	9807      	ldr	r0, [sp, #28]
    71f8:	e7a5      	b.n	7146 <hci_cmd_handle+0x12>
	switch (ocf) {
    71fa:	2a2d      	cmp	r2, #45	; 0x2d
    71fc:	d03a      	beq.n	7274 <hci_cmd_handle+0x140>
    71fe:	d820      	bhi.n	7242 <hci_cmd_handle+0x10e>
    7200:	2a01      	cmp	r2, #1
    7202:	d02b      	beq.n	725c <hci_cmd_handle+0x128>
    7204:	2a03      	cmp	r2, #3
    7206:	d1bb      	bne.n	7180 <hci_cmd_handle+0x4c>
	dup_count = -1;
    7208:	4b8c      	ldr	r3, [pc, #560]	; (743c <hci_cmd_handle+0x308>)
    720a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    720e:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    7210:	4b8b      	ldr	r3, [pc, #556]	; (7440 <hci_cmd_handle+0x30c>)
    7212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7216:	f641 71ff 	movw	r1, #8191	; 0x1fff
    721a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    721e:	4b89      	ldr	r3, [pc, #548]	; (7444 <hci_cmd_handle+0x310>)
    7220:	2000      	movs	r0, #0
    7222:	2100      	movs	r1, #0
    7224:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    7228:	4b87      	ldr	r3, [pc, #540]	; (7448 <hci_cmd_handle+0x314>)
    722a:	201f      	movs	r0, #31
    722c:	2100      	movs	r1, #0
    722e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    7232:	f006 fe21 	bl	de78 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    7236:	2101      	movs	r1, #1
    7238:	a807      	add	r0, sp, #28
    723a:	f7ff fe15 	bl	6e68 <cmd_complete>
	ccst->status = 0x00;
    723e:	2300      	movs	r3, #0
    7240:	e232      	b.n	76a8 <hci_cmd_handle+0x574>
	switch (ocf) {
    7242:	2a7b      	cmp	r2, #123	; 0x7b
    7244:	d02c      	beq.n	72a0 <hci_cmd_handle+0x16c>
    7246:	2a7c      	cmp	r2, #124	; 0x7c
    7248:	d041      	beq.n	72ce <hci_cmd_handle+0x19a>
    724a:	2a63      	cmp	r2, #99	; 0x63
    724c:	d198      	bne.n	7180 <hci_cmd_handle+0x4c>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    724e:	68a0      	ldr	r0, [r4, #8]
    7250:	f7ff ff6c 	bl	712c <sys_get_le64>
    7254:	4b7b      	ldr	r3, [pc, #492]	; (7444 <hci_cmd_handle+0x310>)
	le_event_mask = sys_get_le64(cmd->events);
    7256:	e9c3 0100 	strd	r0, r1, [r3]
    725a:	e7ec      	b.n	7236 <hci_cmd_handle+0x102>
	event_mask = sys_get_le64(cmd->events);
    725c:	68a0      	ldr	r0, [r4, #8]
    725e:	f7ff ff65 	bl	712c <sys_get_le64>
    7262:	4b77      	ldr	r3, [pc, #476]	; (7440 <hci_cmd_handle+0x30c>)
    7264:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    7268:	4611      	mov	r1, r2
    726a:	a807      	add	r0, sp, #28
    726c:	f7ff fdfc 	bl	6e68 <cmd_complete>
	ccst->status = 0x00;
    7270:	7005      	strb	r5, [r0, #0]
    7272:	e7c0      	b.n	71f6 <hci_cmd_handle+0xc2>
    7274:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    7276:	2104      	movs	r1, #4
    7278:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    727a:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    727c:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    727e:	f7ff fdf3 	bl	6e68 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    7282:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    7284:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    7286:	1cc2      	adds	r2, r0, #3
    7288:	4639      	mov	r1, r7
    728a:	4630      	mov	r0, r6
    728c:	f007 f93b 	bl	e506 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    7290:	2800      	cmp	r0, #0
    7292:	bf14      	ite	ne
    7294:	2302      	movne	r3, #2
    7296:	2300      	moveq	r3, #0
    7298:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    729a:	f8a4 5001 	strh.w	r5, [r4, #1]
    729e:	e7aa      	b.n	71f6 <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
    72a0:	68a3      	ldr	r3, [r4, #8]
    72a2:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    72a4:	a908      	add	r1, sp, #32
    72a6:	b2a0      	uxth	r0, r4
    72a8:	f007 f937 	bl	e51a <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    72ac:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    72ae:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    72b0:	a807      	add	r0, sp, #28
    72b2:	f7ff fdd9 	bl	6e68 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    72b6:	2d00      	cmp	r5, #0
    72b8:	bf14      	ite	ne
    72ba:	230c      	movne	r3, #12
    72bc:	2300      	moveq	r3, #0
    72be:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    72c0:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    72c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    72c8:	f8a0 3003 	strh.w	r3, [r0, #3]
    72cc:	e793      	b.n	71f6 <hci_cmd_handle+0xc2>
    72ce:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    72d0:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    72d2:	8859      	ldrh	r1, [r3, #2]
    72d4:	b2a0      	uxth	r0, r4
    72d6:	f007 f934 	bl	e542 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    72da:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    72dc:	2103      	movs	r1, #3
    72de:	a807      	add	r0, sp, #28
    72e0:	f7ff fdc2 	bl	6e68 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    72e4:	2d00      	cmp	r5, #0
    72e6:	bf14      	ite	ne
    72e8:	230c      	movne	r3, #12
    72ea:	2300      	moveq	r3, #0
    72ec:	7003      	strb	r3, [r0, #0]
    72ee:	e271      	b.n	77d4 <hci_cmd_handle+0x6a0>
	switch (ocf) {
    72f0:	3a01      	subs	r2, #1
    72f2:	2a08      	cmp	r2, #8
    72f4:	f63f af44 	bhi.w	7180 <hci_cmd_handle+0x4c>
    72f8:	a301      	add	r3, pc, #4	; (adr r3, 7300 <hci_cmd_handle+0x1cc>)
    72fa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    72fe:	bf00      	nop
    7300:	00007325 	.word	0x00007325
    7304:	0000734f 	.word	0x0000734f
    7308:	00007403 	.word	0x00007403
    730c:	00007181 	.word	0x00007181
    7310:	00007181 	.word	0x00007181
    7314:	00007181 	.word	0x00007181
    7318:	00007181 	.word	0x00007181
    731c:	00007181 	.word	0x00007181
    7320:	0000741f 	.word	0x0000741f
	rp = cmd_complete(evt, sizeof(*rp));
    7324:	2109      	movs	r1, #9
    7326:	a807      	add	r0, sp, #28
    7328:	f7ff fd9e 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    732c:	2300      	movs	r3, #0
    732e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    7330:	7083      	strb	r3, [r0, #2]
    7332:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    7334:	f06f 030e 	mvn.w	r3, #14
    7338:	7143      	strb	r3, [r0, #5]
    733a:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    733c:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    733e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    7340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    7344:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    7346:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    7348:	71c3      	strb	r3, [r0, #7]
    734a:	7203      	strb	r3, [r0, #8]
    734c:	e753      	b.n	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    734e:	2141      	movs	r1, #65	; 0x41
    7350:	a807      	add	r0, sp, #28
    7352:	f7ff fd89 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7356:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7358:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    735a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    735c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7360:	f7fa fc9e 	bl	1ca0 <memset>
	rp->commands[2] |= BIT(7);
    7364:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    7366:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    7368:	f063 037f 	orn	r3, r3, #127	; 0x7f
    736c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    736e:	79a3      	ldrb	r3, [r4, #6]
    7370:	f063 033f 	orn	r3, r3, #63	; 0x3f
    7374:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    7376:	7ae3      	ldrb	r3, [r4, #11]
    7378:	f043 0304 	orr.w	r3, r3, #4
    737c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    737e:	7be3      	ldrb	r3, [r4, #15]
    7380:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    7384:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    7386:	7c23      	ldrb	r3, [r4, #16]
    7388:	f043 0302 	orr.w	r3, r3, #2
    738c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    738e:	7de3      	ldrb	r3, [r4, #23]
    7390:	f043 0304 	orr.w	r3, r3, #4
    7394:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    7396:	7ea3      	ldrb	r3, [r4, #26]
    7398:	f043 0317 	orr.w	r3, r3, #23
    739c:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    739e:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    73a0:	f043 0309 	orr.w	r3, r3, #9
    73a4:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    73a6:	7863      	ldrb	r3, [r4, #1]
    73a8:	f043 0320 	orr.w	r3, r3, #32
    73ac:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    73ae:	23ff      	movs	r3, #255	; 0xff
    73b0:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    73b2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    73b6:	f063 030f 	orn	r3, r3, #15
    73ba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    73be:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    73c2:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    73c6:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    73ca:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    73cc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    73d0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    73d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    73d8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    73dc:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    73e0:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    73e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    73e8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    73ec:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    73f0:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    73f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    73f8:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    73fc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    7400:	e6f9      	b.n	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7402:	2109      	movs	r1, #9
    7404:	a807      	add	r0, sp, #28
    7406:	f7ff fd2f 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    740a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    740c:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    740e:	2208      	movs	r2, #8
	rp->status = 0x00;
    7410:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7414:	f7fa fc44 	bl	1ca0 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    7418:	2360      	movs	r3, #96	; 0x60
    741a:	7163      	strb	r3, [r4, #5]
    741c:	e6eb      	b.n	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    741e:	2107      	movs	r1, #7
    7420:	a807      	add	r0, sp, #28
    7422:	f7ff fd21 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7426:	4601      	mov	r1, r0
    7428:	2300      	movs	r3, #0
    742a:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    742e:	4618      	mov	r0, r3
    7430:	f7ff fb92 	bl	6b58 <ll_addr_get>
    7434:	e6df      	b.n	71f6 <hci_cmd_handle+0xc2>
    7436:	bf00      	nop
    7438:	200005c4 	.word	0x200005c4
    743c:	200005cc 	.word	0x200005cc
    7440:	20003740 	.word	0x20003740
    7444:	20000658 	.word	0x20000658
    7448:	20003748 	.word	0x20003748
	switch (ocf) {
    744c:	3a01      	subs	r2, #1
    744e:	2a4d      	cmp	r2, #77	; 0x4d
    7450:	f63f ae96 	bhi.w	7180 <hci_cmd_handle+0x4c>
    7454:	a301      	add	r3, pc, #4	; (adr r3, 745c <hci_cmd_handle+0x328>)
    7456:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    745a:	bf00      	nop
    745c:	00007595 	.word	0x00007595
    7460:	0000759f 	.word	0x0000759f
    7464:	000075b7 	.word	0x000075b7
    7468:	00007181 	.word	0x00007181
    746c:	000075db 	.word	0x000075db
    7470:	00007181 	.word	0x00007181
    7474:	00007181 	.word	0x00007181
    7478:	00007181 	.word	0x00007181
    747c:	00007181 	.word	0x00007181
    7480:	00007181 	.word	0x00007181
    7484:	0000767f 	.word	0x0000767f
    7488:	000076ad 	.word	0x000076ad
    748c:	000076cd 	.word	0x000076cd
    7490:	000076f7 	.word	0x000076f7
    7494:	000075e7 	.word	0x000075e7
    7498:	000075fd 	.word	0x000075fd
    749c:	0000760f 	.word	0x0000760f
    74a0:	00007617 	.word	0x00007617
    74a4:	00007797 	.word	0x00007797
    74a8:	00007757 	.word	0x00007757
    74ac:	00007773 	.word	0x00007773
    74b0:	0000778d 	.word	0x0000778d
    74b4:	0000761f 	.word	0x0000761f
    74b8:	00007645 	.word	0x00007645
    74bc:	0000775f 	.word	0x0000775f
    74c0:	00007181 	.word	0x00007181
    74c4:	00007181 	.word	0x00007181
    74c8:	0000765b 	.word	0x0000765b
    74cc:	00007181 	.word	0x00007181
    74d0:	00007181 	.word	0x00007181
    74d4:	00007181 	.word	0x00007181
    74d8:	000077b1 	.word	0x000077b1
    74dc:	000077db 	.word	0x000077db
    74e0:	000077e9 	.word	0x000077e9
    74e4:	000077f9 	.word	0x000077f9
    74e8:	00007811 	.word	0x00007811
    74ec:	00007181 	.word	0x00007181
    74f0:	00007181 	.word	0x00007181
    74f4:	00007929 	.word	0x00007929
    74f8:	00007937 	.word	0x00007937
    74fc:	0000793f 	.word	0x0000793f
    7500:	0000794f 	.word	0x0000794f
    7504:	00007961 	.word	0x00007961
    7508:	0000797f 	.word	0x0000797f
    750c:	0000799d 	.word	0x0000799d
    7510:	000079b3 	.word	0x000079b3
    7514:	0000782d 	.word	0x0000782d
    7518:	00007859 	.word	0x00007859
    751c:	000078af 	.word	0x000078af
    7520:	000078cd 	.word	0x000078cd
    7524:	00007181 	.word	0x00007181
    7528:	00007181 	.word	0x00007181
    752c:	00007181 	.word	0x00007181
    7530:	00007181 	.word	0x00007181
    7534:	00007181 	.word	0x00007181
    7538:	00007181 	.word	0x00007181
    753c:	00007181 	.word	0x00007181
    7540:	00007181 	.word	0x00007181
    7544:	00007181 	.word	0x00007181
    7548:	00007181 	.word	0x00007181
    754c:	00007181 	.word	0x00007181
    7550:	00007181 	.word	0x00007181
    7554:	00007181 	.word	0x00007181
    7558:	00007181 	.word	0x00007181
    755c:	00007181 	.word	0x00007181
    7560:	00007181 	.word	0x00007181
    7564:	00007181 	.word	0x00007181
    7568:	00007181 	.word	0x00007181
    756c:	00007181 	.word	0x00007181
    7570:	00007181 	.word	0x00007181
    7574:	00007181 	.word	0x00007181
    7578:	00007181 	.word	0x00007181
    757c:	00007181 	.word	0x00007181
    7580:	00007181 	.word	0x00007181
    7584:	000079c7 	.word	0x000079c7
    7588:	00007181 	.word	0x00007181
    758c:	00007181 	.word	0x00007181
    7590:	000079bd 	.word	0x000079bd
	le_event_mask = sys_get_le64(cmd->events);
    7594:	68a0      	ldr	r0, [r4, #8]
    7596:	f7ff fdc9 	bl	712c <sys_get_le64>
    759a:	4baa      	ldr	r3, [pc, #680]	; (7844 <hci_cmd_handle+0x710>)
    759c:	e65b      	b.n	7256 <hci_cmd_handle+0x122>
	rp = cmd_complete(evt, sizeof(*rp));
    759e:	2104      	movs	r1, #4
    75a0:	a807      	add	r0, sp, #28
    75a2:	f7ff fc61 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    75a6:	2300      	movs	r3, #0
    75a8:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    75aa:	221b      	movs	r2, #27
    75ac:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    75ae:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    75b0:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    75b2:	70c3      	strb	r3, [r0, #3]
    75b4:	e61f      	b.n	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    75b6:	2109      	movs	r1, #9
    75b8:	a807      	add	r0, sp, #28
    75ba:	f7ff fc55 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    75be:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    75c0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    75c2:	2208      	movs	r2, #8
	rp->status = 0x00;
    75c4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    75c8:	f7fa fb6a 	bl	1ca0 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    75cc:	23ff      	movs	r3, #255	; 0xff
    75ce:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    75d0:	2341      	movs	r3, #65	; 0x41
    75d2:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    75d4:	2301      	movs	r3, #1
    75d6:	70e3      	strb	r3, [r4, #3]
    75d8:	e60d      	b.n	71f6 <hci_cmd_handle+0xc2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    75da:	68a1      	ldr	r1, [r4, #8]
    75dc:	2001      	movs	r0, #1
    75de:	f7ff fad5 	bl	6b8c <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    75e2:	4604      	mov	r4, r0
    75e4:	e0af      	b.n	7746 <hci_cmd_handle+0x612>
	rp = cmd_complete(evt, sizeof(*rp));
    75e6:	2102      	movs	r1, #2
    75e8:	a807      	add	r0, sp, #28
    75ea:	f7ff fc3d 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    75ee:	2300      	movs	r3, #0
    75f0:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    75f2:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    75f4:	f007 fdec 	bl	f1d0 <ll_wl_size_get>
    75f8:	7060      	strb	r0, [r4, #1]
    75fa:	e5fc      	b.n	71f6 <hci_cmd_handle+0xc2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    75fc:	2101      	movs	r1, #1
    75fe:	a807      	add	r0, sp, #28
    7600:	f7ff fc32 	bl	6e68 <cmd_complete>
    7604:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    7606:	f007 fde5 	bl	f1d4 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    760a:	7020      	strb	r0, [r4, #0]
    760c:	e5f3      	b.n	71f6 <hci_cmd_handle+0xc2>
	status = ll_wl_add(&cmd->addr);
    760e:	68a0      	ldr	r0, [r4, #8]
    7610:	f007 fe8c 	bl	f32c <ll_wl_add>
    7614:	e7e5      	b.n	75e2 <hci_cmd_handle+0x4ae>
	status = ll_wl_remove(&cmd->addr);
    7616:	68a0      	ldr	r0, [r4, #8]
    7618:	f007 fdfc 	bl	f214 <ll_wl_remove>
    761c:	e7e1      	b.n	75e2 <hci_cmd_handle+0x4ae>
    761e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    7620:	2300      	movs	r3, #0
    7622:	aa08      	add	r2, sp, #32
    7624:	f100 0110 	add.w	r1, r0, #16
    7628:	f008 fa9e 	bl	fb68 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    762c:	2111      	movs	r1, #17
    762e:	a807      	add	r0, sp, #28
    7630:	f7ff fc1a 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7634:	2300      	movs	r3, #0
    7636:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    763a:	2210      	movs	r2, #16
    763c:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    763e:	f7fa fb03 	bl	1c48 <memcpy>
    7642:	e5d8      	b.n	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7644:	2109      	movs	r1, #9
    7646:	a807      	add	r0, sp, #28
    7648:	f7ff fc0e 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    764c:	2300      	movs	r3, #0
    764e:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    7652:	2108      	movs	r1, #8
    7654:	f7ff faba 	bl	6bcc <bt_rand>
    7658:	e5cd      	b.n	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    765a:	2109      	movs	r1, #9
    765c:	a807      	add	r0, sp, #28
    765e:	f7ff fc03 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7662:	4601      	mov	r1, r0
    7664:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7666:	4602      	mov	r2, r0
	rp->status = 0x00;
    7668:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    766c:	4876      	ldr	r0, [pc, #472]	; (7848 <hci_cmd_handle+0x714>)
    766e:	f7ff fbb7 	bl	6de0 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    7672:	f240 203f 	movw	r0, #575	; 0x23f
    7676:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    7678:	f7ff fbb2 	bl	6de0 <sys_put_le32>
    767c:	e5bb      	b.n	71f6 <hci_cmd_handle+0xc2>
    767e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    7680:	7963      	ldrb	r3, [r4, #5]
    7682:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    7686:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    768a:	7820      	ldrb	r0, [r4, #0]
    768c:	79a4      	ldrb	r4, [r4, #6]
    768e:	9400      	str	r4, [sp, #0]
    7690:	f007 fbd6 	bl	ee40 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    7694:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    7696:	2101      	movs	r1, #1
    7698:	a807      	add	r0, sp, #28
    769a:	f7ff fbe5 	bl	6e68 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    769e:	2c00      	cmp	r4, #0
    76a0:	bf18      	it	ne
    76a2:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    76a4:	bf08      	it	eq
    76a6:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    76a8:	7003      	strb	r3, [r0, #0]
    76aa:	e5a4      	b.n	71f6 <hci_cmd_handle+0xc2>
    76ac:	68a2      	ldr	r2, [r4, #8]
    76ae:	4b67      	ldr	r3, [pc, #412]	; (784c <hci_cmd_handle+0x718>)
	if (cmd->enable && cmd->filter_dup) {
    76b0:	7810      	ldrb	r0, [r2, #0]
    76b2:	b140      	cbz	r0, 76c6 <hci_cmd_handle+0x592>
    76b4:	7852      	ldrb	r2, [r2, #1]
    76b6:	b132      	cbz	r2, 76c6 <hci_cmd_handle+0x592>
		dup_count = 0;
    76b8:	2200      	movs	r2, #0
    76ba:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    76bc:	4b64      	ldr	r3, [pc, #400]	; (7850 <hci_cmd_handle+0x71c>)
		dup_count = -1;
    76be:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    76c0:	f007 fbde 	bl	ee80 <ll_scan_enable>
    76c4:	e7e6      	b.n	7694 <hci_cmd_handle+0x560>
		dup_count = -1;
    76c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    76ca:	e7f8      	b.n	76be <hci_cmd_handle+0x58a>
    76cc:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    76ce:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    76d2:	7963      	ldrb	r3, [r4, #5]
    76d4:	7922      	ldrb	r2, [r4, #4]
    76d6:	8861      	ldrh	r1, [r4, #2]
    76d8:	8820      	ldrh	r0, [r4, #0]
    76da:	9504      	str	r5, [sp, #16]
    76dc:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    76e0:	9503      	str	r5, [sp, #12]
    76e2:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    76e6:	9502      	str	r5, [sp, #8]
    76e8:	7b25      	ldrb	r5, [r4, #12]
    76ea:	9501      	str	r5, [sp, #4]
    76ec:	3406      	adds	r4, #6
    76ee:	9400      	str	r4, [sp, #0]
    76f0:	f007 fc00 	bl	eef4 <ll_create_connection>
    76f4:	e578      	b.n	71e8 <hci_cmd_handle+0xb4>
	status = ll_connect_disable();
    76f6:	f007 fa6f 	bl	ebd8 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    76fa:	4606      	mov	r6, r0
    76fc:	bb48      	cbnz	r0, 7752 <hci_cmd_handle+0x61e>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    76fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7702:	2001      	movs	r0, #1
    7704:	f7fb fe3e 	bl	3384 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7708:	4a52      	ldr	r2, [pc, #328]	; (7854 <hci_cmd_handle+0x720>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    770a:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    770c:	e9d2 4500 	ldrd	r4, r5, [r2]
    7710:	2400      	movs	r4, #0
    7712:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    7716:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    771a:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    771c:	d004      	beq.n	7728 <hci_cmd_handle+0x5f4>
    771e:	4632      	mov	r2, r6
    7720:	4631      	mov	r1, r6
    7722:	2002      	movs	r0, #2
    7724:	f7ff fc10 	bl	6f48 <le_conn_complete.part.39>
		if ((*evt)->len) {
    7728:	9807      	ldr	r0, [sp, #28]
    772a:	8984      	ldrh	r4, [r0, #12]
    772c:	b14c      	cbz	r4, 7742 <hci_cmd_handle+0x60e>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    772e:	2101      	movs	r1, #1
    7730:	a808      	add	r0, sp, #32
    7732:	f7ff fb99 	bl	6e68 <cmd_complete>
			ccst->status = cmd_status;
    7736:	2300      	movs	r3, #0
    7738:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    773a:	9808      	ldr	r0, [sp, #32]
    773c:	f7fb fcca 	bl	30d4 <bt_recv_prio>
    7740:	e559      	b.n	71f6 <hci_cmd_handle+0xc2>
			net_buf_unref(*evt);
    7742:	f008 ffcb 	bl	106dc <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    7746:	2101      	movs	r1, #1
    7748:	a807      	add	r0, sp, #28
    774a:	f7ff fb8d 	bl	6e68 <cmd_complete>
	ccst->status = status;
    774e:	7004      	strb	r4, [r0, #0]
    7750:	e551      	b.n	71f6 <hci_cmd_handle+0xc2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    7752:	240c      	movs	r4, #12
    7754:	e7f7      	b.n	7746 <hci_cmd_handle+0x612>
	status = ll_chm_update(&cmd->ch_map[0]);
    7756:	68a0      	ldr	r0, [r4, #8]
    7758:	f006 fe42 	bl	e3e0 <ll_chm_update>
    775c:	e79a      	b.n	7694 <hci_cmd_handle+0x560>
    775e:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    7760:	f100 030c 	add.w	r3, r0, #12
    7764:	f100 020a 	add.w	r2, r0, #10
    7768:	1c81      	adds	r1, r0, #2
    776a:	8800      	ldrh	r0, [r0, #0]
    776c:	f007 f8bc 	bl	e8e8 <ll_enc_req_send>
    7770:	e53a      	b.n	71e8 <hci_cmd_handle+0xb4>
	handle = sys_le16_to_cpu(cmd->handle);
    7772:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    7774:	2108      	movs	r1, #8
    7776:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    7778:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    777a:	f7ff fb75 	bl	6e68 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    777e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    7780:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    7782:	1cc1      	adds	r1, r0, #3
    7784:	4630      	mov	r0, r6
    7786:	f006 fe6d 	bl	e464 <ll_chm_get>
    778a:	e581      	b.n	7290 <hci_cmd_handle+0x15c>
	handle = sys_le16_to_cpu(cmd->handle);
    778c:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    778e:	8818      	ldrh	r0, [r3, #0]
    7790:	f006 fe7d 	bl	e48e <ll_feature_req_send>
    7794:	e528      	b.n	71e8 <hci_cmd_handle+0xb4>
    7796:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    7798:	8911      	ldrh	r1, [r2, #8]
    779a:	8893      	ldrh	r3, [r2, #4]
    779c:	8810      	ldrh	r0, [r2, #0]
    779e:	9101      	str	r1, [sp, #4]
    77a0:	88d2      	ldrh	r2, [r2, #6]
    77a2:	9200      	str	r2, [sp, #0]
    77a4:	2200      	movs	r2, #0
    77a6:	4611      	mov	r1, r2
    77a8:	f006 fda2 	bl	e2f0 <ll_conn_update>
	*evt = cmd_status(status);
    77ac:	b2c0      	uxtb	r0, r0
    77ae:	e51f      	b.n	71f0 <hci_cmd_handle+0xbc>
    77b0:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    77b2:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    77b4:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    77b6:	8893      	ldrh	r3, [r2, #4]
    77b8:	9101      	str	r1, [sp, #4]
    77ba:	88d2      	ldrh	r2, [r2, #6]
    77bc:	9200      	str	r2, [sp, #0]
    77be:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    77c0:	2102      	movs	r1, #2
    77c2:	b2a0      	uxth	r0, r4
    77c4:	f006 fd94 	bl	e2f0 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    77c8:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    77ca:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    77cc:	a807      	add	r0, sp, #28
    77ce:	f7ff fb4b 	bl	6e68 <cmd_complete>
	rp->status = status;
    77d2:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    77d4:	f8a0 4001 	strh.w	r4, [r0, #1]
    77d8:	e50d      	b.n	71f6 <hci_cmd_handle+0xc2>
    77da:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    77dc:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    77de:	789a      	ldrb	r2, [r3, #2]
    77e0:	2300      	movs	r3, #0
    77e2:	9301      	str	r3, [sp, #4]
    77e4:	9300      	str	r3, [sp, #0]
    77e6:	e7eb      	b.n	77c0 <hci_cmd_handle+0x68c>
    77e8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    77ea:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    77ec:	889a      	ldrh	r2, [r3, #4]
    77ee:	8859      	ldrh	r1, [r3, #2]
    77f0:	b2a0      	uxth	r0, r4
    77f2:	f006 febc 	bl	e56e <ll_length_req_send>
    77f6:	e570      	b.n	72da <hci_cmd_handle+0x1a6>
	rp = cmd_complete(evt, sizeof(*rp));
    77f8:	2105      	movs	r1, #5
    77fa:	a807      	add	r0, sp, #28
    77fc:	f7ff fb34 	bl	6e68 <cmd_complete>
    7800:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    7802:	1cc1      	adds	r1, r0, #3
    7804:	3001      	adds	r0, #1
    7806:	f006 fed5 	bl	e5b4 <ll_length_default_get>
	rp->status = 0x00;
    780a:	2300      	movs	r3, #0
    780c:	7023      	strb	r3, [r4, #0]
    780e:	e4f2      	b.n	71f6 <hci_cmd_handle+0xc2>
    7810:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    7812:	8859      	ldrh	r1, [r3, #2]
    7814:	8818      	ldrh	r0, [r3, #0]
    7816:	f006 fed7 	bl	e5c8 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    781a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    781c:	2101      	movs	r1, #1
    781e:	a807      	add	r0, sp, #28
    7820:	f7ff fb22 	bl	6e68 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    7824:	2c00      	cmp	r4, #0
    7826:	bf18      	it	ne
    7828:	231e      	movne	r3, #30
    782a:	e73b      	b.n	76a4 <hci_cmd_handle+0x570>
	rp = cmd_complete(evt, sizeof(*rp));
    782c:	2109      	movs	r1, #9
    782e:	a807      	add	r0, sp, #28
    7830:	f7ff fb1a 	bl	6e68 <cmd_complete>
    7834:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    7836:	1dc3      	adds	r3, r0, #7
    7838:	1d42      	adds	r2, r0, #5
    783a:	1cc1      	adds	r1, r0, #3
    783c:	3001      	adds	r0, #1
    783e:	f006 fecd 	bl	e5dc <ll_length_max_get>
    7842:	e7e2      	b.n	780a <hci_cmd_handle+0x6d6>
    7844:	20003748 	.word	0x20003748
    7848:	130f3370 	.word	0x130f3370
    784c:	200005cc 	.word	0x200005cc
    7850:	200005d0 	.word	0x200005d0
    7854:	20003740 	.word	0x20003740
	handle = sys_le16_to_cpu(cmd->handle);
    7858:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    785a:	2105      	movs	r1, #5
    785c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    785e:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    7860:	f7ff fb02 	bl	6e68 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    7864:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    7866:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    7868:	1d02      	adds	r2, r0, #4
    786a:	1cc1      	adds	r1, r0, #3
    786c:	4630      	mov	r0, r6
    786e:	f006 febe 	bl	e5ee <ll_phy_get>
	return __builtin_ffs(op);
    7872:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    7874:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    7878:	2800      	cmp	r0, #0
    787a:	bf14      	ite	ne
    787c:	230c      	movne	r3, #12
    787e:	2300      	moveq	r3, #0
    7880:	7023      	strb	r3, [r4, #0]
    7882:	2a00      	cmp	r2, #0
    7884:	fa92 f3a2 	rbit	r3, r2
    7888:	fab3 f383 	clz	r3, r3
    788c:	7922      	ldrb	r2, [r4, #4]
    788e:	bf08      	it	eq
    7890:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7894:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    7896:	70e3      	strb	r3, [r4, #3]
    7898:	2a00      	cmp	r2, #0
    789a:	fa92 f3a2 	rbit	r3, r2
    789e:	fab3 f383 	clz	r3, r3
    78a2:	bf08      	it	eq
    78a4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    78a8:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    78aa:	7123      	strb	r3, [r4, #4]
    78ac:	e4a3      	b.n	71f6 <hci_cmd_handle+0xc2>
    78ae:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    78b0:	781a      	ldrb	r2, [r3, #0]
    78b2:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    78b4:	bf44      	itt	mi
    78b6:	2107      	movmi	r1, #7
    78b8:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    78ba:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    78bc:	bf44      	itt	mi
    78be:	2207      	movmi	r2, #7
    78c0:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    78c2:	7899      	ldrb	r1, [r3, #2]
    78c4:	7858      	ldrb	r0, [r3, #1]
    78c6:	f006 fea7 	bl	e618 <ll_phy_default_set>
    78ca:	e7a6      	b.n	781a <hci_cmd_handle+0x6e6>
    78cc:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    78ce:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    78d0:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    78d2:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    78d6:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    78d8:	bf44      	itt	mi
    78da:	2103      	movmi	r1, #3
    78dc:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    78de:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    78e0:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    78e2:	bf44      	itt	mi
    78e4:	2203      	movmi	r2, #3
    78e6:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    78e8:	074d      	lsls	r5, r1, #29
    78ea:	d002      	beq.n	78f2 <hci_cmd_handle+0x7be>
	    !(cmd->rx_phys & 0x07)) {
    78ec:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    78ee:	075a      	lsls	r2, r3, #29
    78f0:	d105      	bne.n	78fe <hci_cmd_handle+0x7ca>
		ccst = cmd_complete(evt, sizeof(*ccst));
    78f2:	2101      	movs	r1, #1
    78f4:	a807      	add	r0, sp, #28
    78f6:	f7ff fab7 	bl	6e68 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    78fa:	2312      	movs	r3, #18
    78fc:	e6d4      	b.n	76a8 <hci_cmd_handle+0x574>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    78fe:	ea41 0203 	orr.w	r2, r1, r3
    7902:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    7906:	d005      	beq.n	7914 <hci_cmd_handle+0x7e0>
		ccst = cmd_complete(evt, sizeof(*ccst));
    7908:	2101      	movs	r1, #1
    790a:	a807      	add	r0, sp, #28
    790c:	f7ff faac 	bl	6e68 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    7910:	2311      	movs	r3, #17
    7912:	e6c9      	b.n	76a8 <hci_cmd_handle+0x574>
	if (phy_opts & 0x03) {
    7914:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    7918:	bf1c      	itt	ne
    791a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    791e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    7922:	f006 fe83 	bl	e62c <ll_phy_req_send>
    7926:	e45f      	b.n	71e8 <hci_cmd_handle+0xb4>
    7928:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    792a:	f100 0217 	add.w	r2, r0, #23
    792e:	1dc1      	adds	r1, r0, #7
    7930:	f007 fec0 	bl	f6b4 <ll_rl_add>
    7934:	e655      	b.n	75e2 <hci_cmd_handle+0x4ae>
	status = ll_rl_remove(&cmd->peer_id_addr);
    7936:	68a0      	ldr	r0, [r4, #8]
    7938:	f007 ff5e 	bl	f7f8 <ll_rl_remove>
    793c:	e651      	b.n	75e2 <hci_cmd_handle+0x4ae>
	ccst = cmd_complete(evt, sizeof(*ccst));
    793e:	2101      	movs	r1, #1
    7940:	a807      	add	r0, sp, #28
    7942:	f7ff fa91 	bl	6e68 <cmd_complete>
    7946:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    7948:	f007 fe9a 	bl	f680 <ll_rl_clear>
    794c:	e65d      	b.n	760a <hci_cmd_handle+0x4d6>
	rp = cmd_complete(evt, sizeof(*rp));
    794e:	2102      	movs	r1, #2
    7950:	a807      	add	r0, sp, #28
    7952:	f7ff fa89 	bl	6e68 <cmd_complete>
    7956:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    7958:	f007 fe90 	bl	f67c <ll_rl_size_get>
    795c:	7060      	strb	r0, [r4, #1]
    795e:	e754      	b.n	780a <hci_cmd_handle+0x6d6>
    7960:	2207      	movs	r2, #7
    7962:	68a1      	ldr	r1, [r4, #8]
    7964:	a808      	add	r0, sp, #32
    7966:	f7fa f96f 	bl	1c48 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    796a:	2107      	movs	r1, #7
    796c:	a807      	add	r0, sp, #28
    796e:	f7ff fa7b 	bl	6e68 <cmd_complete>
    7972:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    7974:	1c41      	adds	r1, r0, #1
    7976:	a808      	add	r0, sp, #32
    7978:	f007 ffcc 	bl	f914 <ll_rl_crpa_get>
    797c:	e645      	b.n	760a <hci_cmd_handle+0x4d6>
    797e:	2207      	movs	r2, #7
    7980:	68a1      	ldr	r1, [r4, #8]
    7982:	a808      	add	r0, sp, #32
    7984:	f7fa f960 	bl	1c48 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    7988:	2107      	movs	r1, #7
    798a:	a807      	add	r0, sp, #28
    798c:	f7ff fa6c 	bl	6e68 <cmd_complete>
    7990:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    7992:	1c41      	adds	r1, r0, #1
    7994:	a808      	add	r0, sp, #32
    7996:	f007 ffdd 	bl	f954 <ll_rl_lrpa_get>
    799a:	e636      	b.n	760a <hci_cmd_handle+0x4d6>
	u8_t enable = cmd->enable;
    799c:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    799e:	2101      	movs	r1, #1
    79a0:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    79a2:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    79a4:	f7ff fa60 	bl	6e68 <cmd_complete>
    79a8:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    79aa:	4628      	mov	r0, r5
    79ac:	f007 ffea 	bl	f984 <ll_rl_enable>
    79b0:	e62b      	b.n	760a <hci_cmd_handle+0x4d6>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    79b2:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    79b4:	8818      	ldrh	r0, [r3, #0]
    79b6:	f007 fff7 	bl	f9a8 <ll_rl_timeout_set>
    79ba:	e43c      	b.n	7236 <hci_cmd_handle+0x102>
    79bc:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    79be:	79c1      	ldrb	r1, [r0, #7]
    79c0:	f007 fffa 	bl	f9b8 <ll_priv_mode_set>
    79c4:	e60d      	b.n	75e2 <hci_cmd_handle+0x4ae>
	rp = cmd_complete(evt, sizeof(*rp));
    79c6:	2103      	movs	r1, #3
    79c8:	a807      	add	r0, sp, #28
    79ca:	f7ff fa4d 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    79ce:	4601      	mov	r1, r0
    79d0:	2300      	movs	r3, #0
    79d2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    79d6:	3001      	adds	r0, #1
    79d8:	f7ff f8f4 	bl	6bc4 <ll_tx_pwr_get>
    79dc:	e40b      	b.n	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    79de:	210d      	movs	r1, #13
    79e0:	a807      	add	r0, sp, #28
    79e2:	f7ff fa41 	bl	6e68 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    79e6:	2202      	movs	r2, #2
    79e8:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    79ea:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    79ec:	2201      	movs	r2, #1
    79ee:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    79f0:	220c      	movs	r2, #12
	rp->status = 0x00;
    79f2:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    79f4:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    79f6:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    79f8:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    79fa:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    79fc:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    79fe:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    7a00:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    7a02:	7242      	strb	r2, [r0, #9]
    7a04:	7283      	strb	r3, [r0, #10]
    7a06:	72c3      	strb	r3, [r0, #11]
    7a08:	7303      	strb	r3, [r0, #12]
    7a0a:	f7ff bbf4 	b.w	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7a0e:	2141      	movs	r1, #65	; 0x41
    7a10:	a807      	add	r0, sp, #28
    7a12:	f7ff fa29 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7a16:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7a18:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7a1a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    7a1c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7a20:	f7fa f93e 	bl	1ca0 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    7a24:	7863      	ldrb	r3, [r4, #1]
    7a26:	f063 0358 	orn	r3, r3, #88	; 0x58
    7a2a:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    7a2c:	78a3      	ldrb	r3, [r4, #2]
    7a2e:	f043 0303 	orr.w	r3, r3, #3
    7a32:	70a3      	strb	r3, [r4, #2]
    7a34:	f7ff bbdf 	b.w	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7a38:	2109      	movs	r1, #9
    7a3a:	a807      	add	r0, sp, #28
    7a3c:	f7ff fa14 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7a40:	2100      	movs	r1, #0
    7a42:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7a46:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    7a48:	f7fa f92a 	bl	1ca0 <memset>
    7a4c:	f7ff bbd3 	b.w	71f6 <hci_cmd_handle+0xc2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    7a50:	4b5c      	ldr	r3, [pc, #368]	; (7bc4 <hci_cmd_handle+0xa90>)
    7a52:	aa08      	add	r2, sp, #32
    7a54:	f103 0628 	add.w	r6, r3, #40	; 0x28
    7a58:	4615      	mov	r5, r2
    7a5a:	6818      	ldr	r0, [r3, #0]
    7a5c:	6859      	ldr	r1, [r3, #4]
    7a5e:	4614      	mov	r4, r2
    7a60:	c403      	stmia	r4!, {r0, r1}
    7a62:	3308      	adds	r3, #8
    7a64:	42b3      	cmp	r3, r6
    7a66:	4622      	mov	r2, r4
    7a68:	d1f7      	bne.n	7a5a <hci_cmd_handle+0x926>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    7a6a:	2129      	movs	r1, #41	; 0x29
    7a6c:	a807      	add	r0, sp, #28
    7a6e:	f7ff f9fb 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7a72:	2300      	movs	r3, #0
    7a74:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    7a78:	2228      	movs	r2, #40	; 0x28
    7a7a:	4629      	mov	r1, r5
    7a7c:	e5df      	b.n	763e <hci_cmd_handle+0x50a>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    7a7e:	68a1      	ldr	r1, [r4, #8]
    7a80:	2000      	movs	r0, #0
    7a82:	f7ff f883 	bl	6b8c <ll_addr_set>
    7a86:	f7ff bbd6 	b.w	7236 <hci_cmd_handle+0x102>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7a8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7a8e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    7a92:	3201      	adds	r2, #1
    7a94:	d106      	bne.n	7aa4 <hci_cmd_handle+0x970>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7a96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7a9e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7aa0:	4293      	cmp	r3, r2
    7aa2:	d020      	beq.n	7ae6 <hci_cmd_handle+0x9b2>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    7aa4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7aa8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7aac:	07db      	lsls	r3, r3, #31
    7aae:	d51a      	bpl.n	7ae6 <hci_cmd_handle+0x9b2>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    7ab0:	2118      	movs	r1, #24
    7ab2:	a807      	add	r0, sp, #28
    7ab4:	f7ff f9d8 	bl	6e68 <cmd_complete>
		rp->status = 0x00;
    7ab8:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    7aba:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    7abc:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    7abe:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    7ac0:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    7ac2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    7ac6:	1ca1      	adds	r1, r4, #2
    7ac8:	f7ff f98a 	bl	6de0 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    7acc:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    7ad0:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    7ad2:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    7ad6:	f063 033f 	orn	r3, r3, #63	; 0x3f
    7ada:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    7adc:	2210      	movs	r2, #16
    7ade:	4631      	mov	r1, r6
    7ae0:	f104 0008 	add.w	r0, r4, #8
    7ae4:	e7b0      	b.n	7a48 <hci_cmd_handle+0x914>
	rp = cmd_complete(evt, sizeof(*rp));
    7ae6:	2102      	movs	r1, #2
    7ae8:	a807      	add	r0, sp, #28
    7aea:	f7ff f9bd 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7aee:	2300      	movs	r3, #0
    7af0:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    7af2:	7043      	strb	r3, [r0, #1]
    7af4:	f7ff bb7f 	b.w	71f6 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7af8:	2121      	movs	r1, #33	; 0x21
    7afa:	a807      	add	r0, sp, #28
    7afc:	f7ff f9b4 	bl	6e68 <cmd_complete>
	rp->status = 0x00;
    7b00:	4603      	mov	r3, r0
    7b02:	2200      	movs	r2, #0
    7b04:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    7b0c:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7b0e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    7b12:	3101      	adds	r1, #1
    7b14:	d04b      	beq.n	7bae <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    7b16:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7b1a:	3101      	adds	r1, #1
    7b1c:	d047      	beq.n	7bae <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    7b1e:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    7b22:	3101      	adds	r1, #1
    7b24:	d043      	beq.n	7bae <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    7b26:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    7b2a:	3101      	adds	r1, #1
    7b2c:	d03f      	beq.n	7bae <hci_cmd_handle+0xa7a>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    7b2e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    7b32:	4619      	mov	r1, r3
    7b34:	f7ff f954 	bl	6de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    7b38:	1d61      	adds	r1, r4, #5
    7b3a:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    7b3e:	f7ff f94f 	bl	6de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    7b42:	f104 0109 	add.w	r1, r4, #9
    7b46:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    7b4a:	f7ff f949 	bl	6de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    7b4e:	f104 010d 	add.w	r1, r4, #13
    7b52:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    7b56:	f7ff f943 	bl	6de0 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    7b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7b5e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    7b62:	3301      	adds	r3, #1
    7b64:	f104 0311 	add.w	r3, r4, #17
    7b68:	d027      	beq.n	7bba <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    7b6a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    7b6e:	3101      	adds	r1, #1
    7b70:	d023      	beq.n	7bba <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    7b72:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    7b76:	3101      	adds	r1, #1
    7b78:	d01f      	beq.n	7bba <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    7b7a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    7b7e:	3101      	adds	r1, #1
    7b80:	d01b      	beq.n	7bba <hci_cmd_handle+0xa86>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    7b82:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    7b86:	4619      	mov	r1, r3
    7b88:	f7ff f92a 	bl	6de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    7b8c:	f104 0115 	add.w	r1, r4, #21
    7b90:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    7b94:	f7ff f924 	bl	6de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    7b98:	f104 0119 	add.w	r1, r4, #25
    7b9c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    7ba0:	f7ff f91e 	bl	6de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    7ba4:	f104 011d 	add.w	r1, r4, #29
    7ba8:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    7bac:	e564      	b.n	7678 <hci_cmd_handle+0x544>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    7bae:	2210      	movs	r2, #16
    7bb0:	2100      	movs	r1, #0
    7bb2:	4618      	mov	r0, r3
    7bb4:	f7fa f874 	bl	1ca0 <memset>
    7bb8:	e7cf      	b.n	7b5a <hci_cmd_handle+0xa26>
		memset(rp->er, 0x00, sizeof(rp->er));
    7bba:	2210      	movs	r2, #16
    7bbc:	2100      	movs	r1, #0
    7bbe:	4618      	mov	r0, r3
    7bc0:	e742      	b.n	7a48 <hci_cmd_handle+0x914>
    7bc2:	bf00      	nop
    7bc4:	000129fe 	.word	0x000129fe

00007bc8 <hci_acl_handle>:
{
    7bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    7bcc:	2300      	movs	r3, #0
    7bce:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    7bd0:	8983      	ldrh	r3, [r0, #12]
    7bd2:	2b03      	cmp	r3, #3
{
    7bd4:	4606      	mov	r6, r0
    7bd6:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    7bd8:	d803      	bhi.n	7be2 <hci_acl_handle+0x1a>
		return -EINVAL;
    7bda:	f06f 0015 	mvn.w	r0, #21
    7bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    7be2:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    7be6:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    7be8:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    7bea:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    7bec:	f008 fdc7 	bl	1077e <net_buf_simple_pull>
	if (buf->len < len) {
    7bf0:	89b3      	ldrh	r3, [r6, #12]
    7bf2:	42bb      	cmp	r3, r7
    7bf4:	d3f1      	bcc.n	7bda <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    7bf6:	f006 fe0f 	bl	e818 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    7bfa:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    7bfe:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    7c00:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    7c04:	b9f0      	cbnz	r0, 7c44 <hci_acl_handle+0x7c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    7c06:	4b1e      	ldr	r3, [pc, #120]	; (7c80 <hci_acl_handle+0xb8>)
    7c08:	e9d3 2300 	ldrd	r2, r3, [r3]
    7c0c:	2300      	movs	r3, #0
    7c0e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    7c12:	4313      	orrs	r3, r2
    7c14:	d012      	beq.n	7c3c <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7c16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7c1a:	2001      	movs	r0, #1
    7c1c:	f7fb fbb2 	bl	3384 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    7c20:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7c22:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    7c26:	211a      	movs	r1, #26
    7c28:	f7ff f8e3 	bl	6df2 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    7c2c:	f8d8 0000 	ldr.w	r0, [r8]
    7c30:	2101      	movs	r1, #1
    7c32:	3008      	adds	r0, #8
    7c34:	f008 fd84 	bl	10740 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    7c38:	2301      	movs	r3, #1
    7c3a:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    7c3c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    7c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7c44:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    7c46:	f1b9 0f00 	cmp.w	r9, #0
    7c4a:	d002      	beq.n	7c52 <hci_acl_handle+0x8a>
    7c4c:	f1b9 0f02 	cmp.w	r9, #2
    7c50:	d113      	bne.n	7c7a <hci_acl_handle+0xb2>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    7c52:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7c54:	f362 0301 	bfi	r3, r2, #0, #2
    7c58:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    7c5a:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    7c5c:	68b1      	ldr	r1, [r6, #8]
    7c5e:	463a      	mov	r2, r7
    7c60:	1de0      	adds	r0, r4, #7
    7c62:	f7f9 fff1 	bl	1c48 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    7c66:	4621      	mov	r1, r4
    7c68:	4628      	mov	r0, r5
    7c6a:	f006 fde1 	bl	e830 <ll_tx_mem_enqueue>
    7c6e:	2800      	cmp	r0, #0
    7c70:	d0e6      	beq.n	7c40 <hci_acl_handle+0x78>
		ll_tx_mem_release(node_tx);
    7c72:	4620      	mov	r0, r4
    7c74:	f006 fdd6 	bl	e824 <ll_tx_mem_release>
    7c78:	e7af      	b.n	7bda <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7c7a:	2201      	movs	r2, #1
    7c7c:	e7ea      	b.n	7c54 <hci_acl_handle+0x8c>
    7c7e:	bf00      	nop
    7c80:	20003740 	.word	0x20003740

00007c84 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    7c84:	7a03      	ldrb	r3, [r0, #8]
    7c86:	f003 0303 	and.w	r3, r3, #3
    7c8a:	3b01      	subs	r3, #1
    7c8c:	2b01      	cmp	r3, #1
{
    7c8e:	b570      	push	{r4, r5, r6, lr}
    7c90:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    7c92:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    7c94:	d81b      	bhi.n	7cce <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    7c96:	f101 0608 	add.w	r6, r1, #8
    7c9a:	4630      	mov	r0, r6
    7c9c:	2104      	movs	r1, #4
    7c9e:	f008 fd4f 	bl	10740 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    7ca2:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    7ca4:	7a61      	ldrb	r1, [r4, #9]
    7ca6:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    7ca8:	f003 0303 	and.w	r3, r3, #3
    7cac:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    7cae:	bf0c      	ite	eq
    7cb0:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    7cb4:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    7cb8:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    7cba:	4630      	mov	r0, r6
    7cbc:	f008 fd40 	bl	10740 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    7cc0:	7a62      	ldrb	r2, [r4, #9]
    7cc2:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    7cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    7cca:	f7f9 bfbd 	b.w	1c48 <memcpy>
		LL_ASSERT(0);
    7cce:	4040      	eors	r0, r0
    7cd0:	f380 8811 	msr	BASEPRI, r0
    7cd4:	f04f 0004 	mov.w	r0, #4
    7cd8:	df02      	svc	2
	...

00007cdc <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    7cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7ce0:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    7ce2:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7ce4:	2b01      	cmp	r3, #1
{
    7ce6:	b08f      	sub	sp, #60	; 0x3c
    7ce8:	4604      	mov	r4, r0
    7cea:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    7cec:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7cf0:	f000 824f 	beq.w	8192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x192>
	switch (node_rx->hdr.type) {
    7cf4:	3b02      	subs	r3, #2
    7cf6:	2b0a      	cmp	r3, #10
    7cf8:	f200 80be 	bhi.w	7e78 <hci_evt_encode+0x19c>
    7cfc:	e8df f013 	tbh	[pc, r3, lsl #1]
    7d00:	012b000b 	.word	0x012b000b
    7d04:	012f012b 	.word	0x012f012b
    7d08:	017e0163 	.word	0x017e0163
    7d0c:	01cf01aa 	.word	0x01cf01aa
    7d10:	01fc01e7 	.word	0x01fc01e7
    7d14:	0217      	.short	0x0217
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7d16:	2301      	movs	r3, #1
    7d18:	f88d 301d 	strb.w	r3, [sp, #29]
    7d1c:	2303      	movs	r3, #3
    7d1e:	f88d 301e 	strb.w	r3, [sp, #30]
    7d22:	23ff      	movs	r3, #255	; 0xff
    7d24:	f88d 301f 	strb.w	r3, [sp, #31]
    7d28:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    7d2c:	2302      	movs	r3, #2
    7d2e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7d32:	7a43      	ldrb	r3, [r0, #9]
    7d34:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7d36:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7d38:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    7d3c:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7d3e:	f88d 101c 	strb.w	r1, [sp, #28]
    7d42:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    7d44:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7d46:	f88d 2020 	strb.w	r2, [sp, #32]
	if (adv->tx_addr) {
    7d4a:	d505      	bpl.n	7d58 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    7d4c:	f104 030a 	add.w	r3, r4, #10
    7d50:	464a      	mov	r2, r9
    7d52:	4608      	mov	r0, r1
    7d54:	f007 fdbc 	bl	f8d0 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    7d58:	4bb7      	ldr	r3, [pc, #732]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d5e:	2200      	movs	r2, #0
    7d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    7d64:	4313      	orrs	r3, r2
    7d66:	f000 80b0 	beq.w	7eca <hci_evt_encode+0x1ee>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7d6a:	7a63      	ldrb	r3, [r4, #9]
    7d6c:	4423      	add	r3, r4
    7d6e:	f893 a00c 	ldrb.w	sl, [r3, #12]
    7d72:	4bb2      	ldr	r3, [pc, #712]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    7d74:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d78:	f1ba 0f00 	cmp.w	sl, #0
    7d7c:	d13d      	bne.n	7dfa <hci_evt_encode+0x11e>
    7d7e:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    7d82:	2300      	movs	r3, #0
    7d84:	4313      	orrs	r3, r2
    7d86:	f000 80a0 	beq.w	7eca <hci_evt_encode+0x1ee>
	if (dup_count >= 0) {
    7d8a:	4bad      	ldr	r3, [pc, #692]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    7d8c:	681a      	ldr	r2, [r3, #0]
    7d8e:	2a00      	cmp	r2, #0
    7d90:	4698      	mov	r8, r3
    7d92:	db54      	blt.n	7e3e <hci_evt_encode+0x162>
    7d94:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>
    7d98:	2600      	movs	r6, #0
    7d9a:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    7d9e:	f8d8 2000 	ldr.w	r2, [r8]
    7da2:	4296      	cmp	r6, r2
    7da4:	db2c      	blt.n	7e00 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    7da6:	4ea7      	ldr	r6, [pc, #668]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7da8:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
    7dac:	6830      	ldr	r0, [r6, #0]
    7dae:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    7db2:	4619      	mov	r1, r3
    7db4:	2206      	movs	r2, #6
    7db6:	3002      	adds	r0, #2
    7db8:	f7f9 ff46 	bl	1c48 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    7dbc:	6832      	ldr	r2, [r6, #0]
    7dbe:	7a23      	ldrb	r3, [r4, #8]
    7dc0:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    7dc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7dc8:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    7dca:	7a23      	ldrb	r3, [r4, #8]
    7dcc:	f003 010f 	and.w	r1, r3, #15
    7dd0:	2301      	movs	r3, #1
    7dd2:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7dd4:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    7dd8:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7ddc:	290f      	cmp	r1, #15
			dup_count++;
    7dde:	bfd5      	itete	le
    7de0:	3101      	addle	r1, #1
			dup_curr++;
    7de2:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    7de4:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    7de6:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7de8:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    7dea:	bfd8      	it	le
    7dec:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7df0:	2a10      	cmp	r2, #16
    7df2:	d124      	bne.n	7e3e <hci_evt_encode+0x162>
			dup_curr = 0;
    7df4:	2200      	movs	r2, #0
    7df6:	6032      	str	r2, [r6, #0]
    7df8:	e021      	b.n	7e3e <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    7dfa:	f002 020b 	and.w	r2, r2, #11
    7dfe:	e7c0      	b.n	7d82 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    7e00:	4618      	mov	r0, r3
    7e02:	2206      	movs	r2, #6
    7e04:	4659      	mov	r1, fp
    7e06:	9303      	str	r3, [sp, #12]
    7e08:	f7f9 ff09 	bl	1c1e <memcmp>
    7e0c:	9b03      	ldr	r3, [sp, #12]
    7e0e:	bb00      	cbnz	r0, 7e52 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    7e10:	7a21      	ldrb	r1, [r4, #8]
    7e12:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    7e16:	460a      	mov	r2, r1
    7e18:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    7e1c:	4281      	cmp	r1, r0
    7e1e:	d118      	bne.n	7e52 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    7e20:	4889      	ldr	r0, [pc, #548]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    7e22:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    7e26:	f002 020f 	and.w	r2, r2, #15
    7e2a:	fa23 f102 	lsr.w	r1, r3, r2
    7e2e:	07c9      	lsls	r1, r1, #31
    7e30:	d44b      	bmi.n	7eca <hci_evt_encode+0x1ee>
				dup_filter[i].mask |= BIT(adv->type);
    7e32:	2101      	movs	r1, #1
    7e34:	fa01 f202 	lsl.w	r2, r1, r2
    7e38:	4313      	orrs	r3, r2
    7e3a:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    7e3e:	f894 b008 	ldrb.w	fp, [r4, #8]
    7e42:	7a63      	ldrb	r3, [r4, #9]
    7e44:	f00b 0b0f 	and.w	fp, fp, #15
    7e48:	f1bb 0f01 	cmp.w	fp, #1
    7e4c:	d105      	bne.n	7e5a <hci_evt_encode+0x17e>
		data_len = 0;
    7e4e:	2600      	movs	r6, #0
    7e50:	e005      	b.n	7e5e <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    7e52:	3601      	adds	r6, #1
    7e54:	f10b 0b08 	add.w	fp, fp, #8
    7e58:	e7a1      	b.n	7d9e <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    7e5a:	1f9e      	subs	r6, r3, #6
    7e5c:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7e5e:	4423      	add	r3, r4
    7e60:	f893 800a 	ldrb.w	r8, [r3, #10]
    7e64:	f1c8 0800 	rsb	r8, r8, #0
    7e68:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    7e6c:	f1ba 0f00 	cmp.w	sl, #0
    7e70:	d038      	beq.n	7ee4 <hci_evt_encode+0x208>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    7e72:	f1bb 0f01 	cmp.w	fp, #1
    7e76:	d005      	beq.n	7e84 <hci_evt_encode+0x1a8>
		LL_ASSERT(0);
    7e78:	4040      	eors	r0, r0
    7e7a:	f380 8811 	msr	BASEPRI, r0
    7e7e:	f04f 0004 	mov.w	r0, #4
    7e82:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    7e84:	2211      	movs	r2, #17
    7e86:	210b      	movs	r1, #11
    7e88:	4628      	mov	r0, r5
    7e8a:	f7fe ffd7 	bl	6e3c <meta_evt>
		drp->num_reports = 1;
    7e8e:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    7e92:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    7e96:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    7e98:	f007 fbf0 	bl	f67c <ll_rl_size_get>
    7e9c:	4581      	cmp	r9, r0
    7e9e:	f105 0003 	add.w	r0, r5, #3
    7ea2:	d215      	bcs.n	7ed0 <hci_evt_encode+0x1f4>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    7ea4:	4602      	mov	r2, r0
    7ea6:	1ca9      	adds	r1, r5, #2
    7ea8:	4648      	mov	r0, r9
    7eaa:	f007 fab5 	bl	f418 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    7eae:	78ab      	ldrb	r3, [r5, #2]
    7eb0:	3302      	adds	r3, #2
    7eb2:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    7eb4:	2301      	movs	r3, #1
    7eb6:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    7eb8:	2206      	movs	r2, #6
    7eba:	f107 0108 	add.w	r1, r7, #8
    7ebe:	f105 000a 	add.w	r0, r5, #10
    7ec2:	f7f9 fec1 	bl	1c48 <memcpy>
		dir_info->rssi = rssi;
    7ec6:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    7eca:	b00f      	add	sp, #60	; 0x3c
    7ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    7ed0:	7a23      	ldrb	r3, [r4, #8]
    7ed2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7ed6:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    7ed8:	2206      	movs	r2, #6
    7eda:	f104 010a 	add.w	r1, r4, #10
    7ede:	f7f9 feb3 	bl	1c48 <memcpy>
    7ee2:	e7e7      	b.n	7eb4 <hci_evt_encode+0x1d8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    7ee4:	f106 020b 	add.w	r2, r6, #11
    7ee8:	b2d2      	uxtb	r2, r2
    7eea:	2102      	movs	r1, #2
    7eec:	4628      	mov	r0, r5
    7eee:	f7fe ffa5 	bl	6e3c <meta_evt>
	sep->num_reports = 1;
    7ef2:	2301      	movs	r3, #1
    7ef4:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    7ef6:	7a23      	ldrb	r3, [r4, #8]
    7ef8:	aa0e      	add	r2, sp, #56	; 0x38
    7efa:	f003 030f 	and.w	r3, r3, #15
    7efe:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    7f00:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    7f02:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    7f06:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7f08:	7a63      	ldrb	r3, [r4, #9]
    7f0a:	4423      	add	r3, r4
    7f0c:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    7f10:	f007 fbb4 	bl	f67c <ll_rl_size_get>
    7f14:	4581      	cmp	r9, r0
    7f16:	f105 0003 	add.w	r0, r5, #3
    7f1a:	d212      	bcs.n	7f42 <hci_evt_encode+0x266>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    7f1c:	4602      	mov	r2, r0
    7f1e:	1ca9      	adds	r1, r5, #2
    7f20:	4648      	mov	r0, r9
    7f22:	f007 fa79 	bl	f418 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    7f26:	78ab      	ldrb	r3, [r5, #2]
    7f28:	3302      	adds	r3, #2
    7f2a:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    7f2c:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    7f2e:	350a      	adds	r5, #10
    7f30:	4632      	mov	r2, r6
    7f32:	f107 0108 	add.w	r1, r7, #8
    7f36:	4628      	mov	r0, r5
    7f38:	f7f9 fe86 	bl	1c48 <memcpy>
	*prssi = rssi;
    7f3c:	f805 8006 	strb.w	r8, [r5, r6]
    7f40:	e7c3      	b.n	7eca <hci_evt_encode+0x1ee>
		adv_info->addr.type = adv->tx_addr;
    7f42:	7a23      	ldrb	r3, [r4, #8]
    7f44:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7f48:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    7f4a:	2206      	movs	r2, #6
    7f4c:	f104 010a 	add.w	r1, r4, #10
    7f50:	f7f9 fe7a 	bl	1c48 <memcpy>
    7f54:	e7ea      	b.n	7f2c <hci_evt_encode+0x250>
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    7f56:	4638      	mov	r0, r7
    7f58:	f7ff f8c8 	bl	70ec <le_adv_ext_report.isra.66>
    7f5c:	e7b5      	b.n	7eca <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7f5e:	4b36      	ldr	r3, [pc, #216]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7f60:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f64:	2200      	movs	r2, #0
    7f66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    7f6a:	4313      	orrs	r3, r2
    7f6c:	f100 060a 	add.w	r6, r0, #10
    7f70:	d007      	beq.n	7f82 <hci_evt_encode+0x2a6>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    7f72:	4b32      	ldr	r3, [pc, #200]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    7f74:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f78:	2300      	movs	r3, #0
    7f7a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7f7e:	4313      	orrs	r3, r2
    7f80:	d110      	bne.n	7fa4 <hci_evt_encode+0x2c8>
		addr.type = adv->tx_addr;
    7f82:	7a23      	ldrb	r3, [r4, #8]
    7f84:	ac0e      	add	r4, sp, #56	; 0x38
    7f86:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7f8a:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    7f8e:	4631      	mov	r1, r6
    7f90:	2206      	movs	r2, #6
    7f92:	f10d 0015 	add.w	r0, sp, #21
    7f96:	f7f9 fe57 	bl	1c48 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    7f9a:	a907      	add	r1, sp, #28
    7f9c:	4620      	mov	r0, r4
    7f9e:	f7ff f869 	bl	7074 <bt_addr_le_to_str.constprop.71>
    7fa2:	e792      	b.n	7eca <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    7fa4:	2208      	movs	r2, #8
    7fa6:	2113      	movs	r1, #19
    7fa8:	4628      	mov	r0, r5
    7faa:	f7fe ff47 	bl	6e3c <meta_evt>
	sep->handle = 0;
    7fae:	2300      	movs	r3, #0
    7fb0:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    7fb2:	7a23      	ldrb	r3, [r4, #8]
    7fb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7fb8:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    7fba:	2206      	movs	r2, #6
    7fbc:	4631      	mov	r1, r6
    7fbe:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    7fc0:	f7f9 fe42 	bl	1c48 <memcpy>
    7fc4:	e781      	b.n	7eca <hci_evt_encode+0x1ee>
			le_conn_complete(cc->status, cc, handle, buf);
    7fc6:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    7fc8:	b93f      	cbnz	r7, 7fda <hci_evt_encode+0x2fe>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    7fca:	f100 0314 	add.w	r3, r0, #20
    7fce:	f100 010e 	add.w	r1, r0, #14
    7fd2:	22ff      	movs	r2, #255	; 0xff
    7fd4:	7b40      	ldrb	r0, [r0, #13]
    7fd6:	f007 fc7b 	bl	f8d0 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7fda:	4b17      	ldr	r3, [pc, #92]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fe0:	2200      	movs	r2, #0
    7fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    7fe6:	4313      	orrs	r3, r2
    7fe8:	f43f af6f 	beq.w	7eca <hci_evt_encode+0x1ee>
    7fec:	462b      	mov	r3, r5
    7fee:	4632      	mov	r2, r6
    7ff0:	f104 010b 	add.w	r1, r4, #11
    7ff4:	4638      	mov	r0, r7
    7ff6:	f7fe ffa7 	bl	6f48 <le_conn_complete.part.39>
    7ffa:	e766      	b.n	7eca <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    7ffc:	4b0e      	ldr	r3, [pc, #56]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
    8002:	2300      	movs	r3, #0
    8004:	f002 0210 	and.w	r2, r2, #16
    8008:	4313      	orrs	r3, r2
    800a:	f43f af5e 	beq.w	7eca <hci_evt_encode+0x1ee>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    800e:	2204      	movs	r2, #4
    8010:	2105      	movs	r1, #5
    8012:	4628      	mov	r0, r5
    8014:	f7fe feed 	bl	6df2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8018:	2104      	movs	r1, #4
    801a:	f105 0008 	add.w	r0, r5, #8
    801e:	f008 fb8f 	bl	10740 <net_buf_simple_add>
	ep->status = 0x00;
    8022:	2300      	movs	r3, #0
	conn_count--;
    8024:	4a09      	ldr	r2, [pc, #36]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
	ep->status = 0x00;
    8026:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8028:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    802c:	7a23      	ldrb	r3, [r4, #8]
    802e:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    8030:	6813      	ldr	r3, [r2, #0]
    8032:	3b01      	subs	r3, #1
    8034:	6013      	str	r3, [r2, #0]
    8036:	e748      	b.n	7eca <hci_evt_encode+0x1ee>
    8038:	20003740 	.word	0x20003740
    803c:	20003748 	.word	0x20003748
    8040:	200005cc 	.word	0x200005cc
    8044:	200005d0 	.word	0x200005d0
    8048:	200005d4 	.word	0x200005d4
    804c:	200005c8 	.word	0x200005c8
    8050:	200005d6 	.word	0x200005d6
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8054:	4bb9      	ldr	r3, [pc, #740]	; (833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>)
    8056:	e9d3 2300 	ldrd	r2, r3, [r3]
    805a:	2200      	movs	r2, #0
    805c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8060:	4313      	orrs	r3, r2
    8062:	f43f af32 	beq.w	7eca <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    8066:	4bb6      	ldr	r3, [pc, #728]	; (8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>)
    8068:	e9d3 2300 	ldrd	r2, r3, [r3]
    806c:	2300      	movs	r3, #0
    806e:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8072:	4313      	orrs	r3, r2
    8074:	f43f af29 	beq.w	7eca <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    8078:	2209      	movs	r2, #9
    807a:	2103      	movs	r1, #3
    807c:	4628      	mov	r0, r5
    807e:	f7fe fedd 	bl	6e3c <meta_evt>
	sep->status = radio_cu->status;
    8082:	7ae3      	ldrb	r3, [r4, #11]
    8084:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    8086:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    8088:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    808c:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    8090:	89e3      	ldrh	r3, [r4, #14]
    8092:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    8096:	8a23      	ldrh	r3, [r4, #16]
    8098:	f8a0 3007 	strh.w	r3, [r0, #7]
    809c:	e715      	b.n	7eca <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    809e:	4ba7      	ldr	r3, [pc, #668]	; (833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>)
    80a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    80a4:	2200      	movs	r2, #0
    80a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    80aa:	4313      	orrs	r3, r2
    80ac:	f43f af0d 	beq.w	7eca <hci_evt_encode+0x1ee>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    80b0:	2203      	movs	r2, #3
    80b2:	2130      	movs	r1, #48	; 0x30
    80b4:	4628      	mov	r0, r5
    80b6:	f7fe fe9c 	bl	6df2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    80ba:	2103      	movs	r1, #3
    80bc:	f105 0008 	add.w	r0, r5, #8
    80c0:	f008 fb3e 	bl	10740 <net_buf_simple_add>
	ep->status = 0x00;
    80c4:	2300      	movs	r3, #0
    80c6:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    80c8:	f8a0 6001 	strh.w	r6, [r0, #1]
    80cc:	e6fd      	b.n	7eca <hci_evt_encode+0x1ee>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    80ce:	4b9d      	ldr	r3, [pc, #628]	; (8344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x344>)
    80d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    80d4:	2300      	movs	r3, #0
    80d6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    80da:	4313      	orrs	r3, r2
    80dc:	f43f aef5 	beq.w	7eca <hci_evt_encode+0x1ee>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    80e0:	2202      	movs	r2, #2
    80e2:	2157      	movs	r1, #87	; 0x57
    80e4:	4628      	mov	r0, r5
    80e6:	f7fe fe84 	bl	6df2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    80ea:	2102      	movs	r1, #2
    80ec:	f105 0008 	add.w	r0, r5, #8
    80f0:	f008 fb26 	bl	10740 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    80f4:	8006      	strh	r6, [r0, #0]
    80f6:	e6e8      	b.n	7eca <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80f8:	4b90      	ldr	r3, [pc, #576]	; (833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>)
    80fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    80fe:	2200      	movs	r2, #0
    8100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8104:	4313      	orrs	r3, r2
    8106:	f43f aee0 	beq.w	7eca <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    810a:	4b8d      	ldr	r3, [pc, #564]	; (8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>)
    810c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8110:	2300      	movs	r3, #0
    8112:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8116:	4313      	orrs	r3, r2
    8118:	f43f aed7 	beq.w	7eca <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    811c:	2203      	movs	r2, #3
    811e:	2114      	movs	r1, #20
    8120:	4628      	mov	r0, r5
    8122:	f7fe fe8b 	bl	6e3c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    8126:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    8128:	7ae3      	ldrb	r3, [r4, #11]
    812a:	7083      	strb	r3, [r0, #2]
    812c:	e6cd      	b.n	7eca <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    812e:	4b83      	ldr	r3, [pc, #524]	; (833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>)
    8130:	e9d3 2300 	ldrd	r2, r3, [r3]
    8134:	2200      	movs	r2, #0
    8136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    813a:	4313      	orrs	r3, r2
    813c:	f43f aec5 	beq.w	7eca <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    8140:	4b7f      	ldr	r3, [pc, #508]	; (8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>)
    8142:	e9d3 2300 	ldrd	r2, r3, [r3]
    8146:	2300      	movs	r3, #0
    8148:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    814c:	4313      	orrs	r3, r2
    814e:	f43f aebc 	beq.w	7eca <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    8152:	2205      	movs	r2, #5
    8154:	210c      	movs	r1, #12
    8156:	4628      	mov	r0, r5
    8158:	f7fe fe70 	bl	6e3c <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    815c:	7ae3      	ldrb	r3, [r4, #11]
    815e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8160:	f8a0 6001 	strh.w	r6, [r0, #1]
    8164:	7b22      	ldrb	r2, [r4, #12]
    8166:	2a00      	cmp	r2, #0
    8168:	fa92 f3a2 	rbit	r3, r2
    816c:	fab3 f383 	clz	r3, r3
    8170:	bf08      	it	eq
    8172:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8176:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    8178:	70c3      	strb	r3, [r0, #3]
    817a:	7b62      	ldrb	r2, [r4, #13]
    817c:	fa92 f3a2 	rbit	r3, r2
    8180:	2a00      	cmp	r2, #0
    8182:	fab3 f383 	clz	r3, r3
    8186:	bf08      	it	eq
    8188:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    818c:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    818e:	7103      	strb	r3, [r0, #4]
    8190:	e69b      	b.n	7eca <hci_evt_encode+0x1ee>
	switch (pdu_data->llctrl.opcode) {
    8192:	7ac3      	ldrb	r3, [r0, #11]
    8194:	3b03      	subs	r3, #3
    8196:	2b12      	cmp	r3, #18
    8198:	f63f ae6e 	bhi.w	7e78 <hci_evt_encode+0x19c>
    819c:	a201      	add	r2, pc, #4	; (adr r2, 81a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a4>)
    819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    81a2:	bf00      	nop
    81a4:	000081f1 	.word	0x000081f1
    81a8:	00007e79 	.word	0x00007e79
    81ac:	00007e79 	.word	0x00007e79
    81b0:	0000823b 	.word	0x0000823b
    81b4:	0000832b 	.word	0x0000832b
    81b8:	00007e79 	.word	0x00007e79
    81bc:	00008247 	.word	0x00008247
    81c0:	00007e79 	.word	0x00007e79
    81c4:	00007e79 	.word	0x00007e79
    81c8:	00008255 	.word	0x00008255
    81cc:	00008293 	.word	0x00008293
    81d0:	00007e79 	.word	0x00007e79
    81d4:	0000829b 	.word	0x0000829b
    81d8:	00007e79 	.word	0x00007e79
    81dc:	00007e79 	.word	0x00007e79
    81e0:	00007e79 	.word	0x00007e79
    81e4:	00007e79 	.word	0x00007e79
    81e8:	000082eb 	.word	0x000082eb
    81ec:	000082eb 	.word	0x000082eb
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    81f0:	4b52      	ldr	r3, [pc, #328]	; (833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>)
    81f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    81f6:	2200      	movs	r2, #0
    81f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    81fc:	4313      	orrs	r3, r2
    81fe:	f43f ae64 	beq.w	7eca <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    8202:	4b4f      	ldr	r3, [pc, #316]	; (8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>)
    8204:	e9d3 2300 	ldrd	r2, r3, [r3]
    8208:	2300      	movs	r3, #0
    820a:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    820e:	4313      	orrs	r3, r2
    8210:	f43f ae5b 	beq.w	7eca <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    8214:	220c      	movs	r2, #12
    8216:	2105      	movs	r1, #5
    8218:	4628      	mov	r0, r5
    821a:	f7fe fe0f 	bl	6e3c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    821e:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    8220:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    8222:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    8226:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    822a:	f7f9 fd0d 	bl	1c48 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    822e:	2202      	movs	r2, #2
    8230:	f104 0114 	add.w	r1, r4, #20
    8234:	f105 000a 	add.w	r0, r5, #10
    8238:	e6c2      	b.n	7fc0 <hci_evt_encode+0x2e4>
		encrypt_change(0x00, handle, buf);
    823a:	460a      	mov	r2, r1
    823c:	2000      	movs	r0, #0
    823e:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    8240:	f7fe fe34 	bl	6eac <encrypt_change>
    8244:	e641      	b.n	7eca <hci_evt_encode+0x1ee>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    8246:	460b      	mov	r3, r1
    8248:	4632      	mov	r2, r6
    824a:	4639      	mov	r1, r7
    824c:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    824e:	f7fe fe4d 	bl	6eec <le_remote_feat_complete>
    8252:	e63a      	b.n	7eca <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    8254:	4b39      	ldr	r3, [pc, #228]	; (833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>)
    8256:	e9d3 2300 	ldrd	r2, r3, [r3]
    825a:	2300      	movs	r3, #0
    825c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    8260:	4313      	orrs	r3, r2
    8262:	f43f ae32 	beq.w	7eca <hci_evt_encode+0x1ee>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    8266:	2208      	movs	r2, #8
    8268:	210c      	movs	r1, #12
    826a:	4628      	mov	r0, r5
    826c:	f7fe fdc1 	bl	6df2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8270:	2108      	movs	r1, #8
    8272:	1868      	adds	r0, r5, r1
    8274:	f008 fa64 	bl	10740 <net_buf_simple_add>
	ep->status = 0x00;
    8278:	2300      	movs	r3, #0
    827a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    827c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    8280:	7b23      	ldrb	r3, [r4, #12]
    8282:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    8284:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    8288:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    828a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    828e:	80c3      	strh	r3, [r0, #6]
    8290:	e61b      	b.n	7eca <hci_evt_encode+0x1ee>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    8292:	460a      	mov	r2, r1
    8294:	7b00      	ldrb	r0, [r0, #12]
    8296:	4631      	mov	r1, r6
    8298:	e7d2      	b.n	8240 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x240>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    829a:	4b28      	ldr	r3, [pc, #160]	; (833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>)
    829c:	e9d3 2300 	ldrd	r2, r3, [r3]
    82a0:	2200      	movs	r2, #0
    82a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    82a6:	4313      	orrs	r3, r2
    82a8:	d007      	beq.n	82ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    82aa:	4b25      	ldr	r3, [pc, #148]	; (8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>)
    82ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    82b0:	2300      	movs	r3, #0
    82b2:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    82b6:	4313      	orrs	r3, r2
    82b8:	d108      	bne.n	82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    82ba:	2300      	movs	r3, #0
    82bc:	9301      	str	r3, [sp, #4]
    82be:	9300      	str	r3, [sp, #0]
    82c0:	221a      	movs	r2, #26
    82c2:	2102      	movs	r1, #2
    82c4:	4630      	mov	r0, r6
    82c6:	f006 f813 	bl	e2f0 <ll_conn_update>
    82ca:	e5fe      	b.n	7eca <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    82cc:	220a      	movs	r2, #10
    82ce:	2106      	movs	r1, #6
    82d0:	4628      	mov	r0, r5
    82d2:	f7fe fdb3 	bl	6e3c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    82d6:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    82d8:	89a3      	ldrh	r3, [r4, #12]
    82da:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    82dc:	89e3      	ldrh	r3, [r4, #14]
    82de:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    82e0:	8a23      	ldrh	r3, [r4, #16]
    82e2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    82e4:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    82e6:	8103      	strh	r3, [r0, #8]
    82e8:	e5ef      	b.n	7eca <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    82ea:	4b14      	ldr	r3, [pc, #80]	; (833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>)
    82ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    82f0:	2200      	movs	r2, #0
    82f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    82f6:	4313      	orrs	r3, r2
    82f8:	f43f ade7 	beq.w	7eca <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    82fc:	4b10      	ldr	r3, [pc, #64]	; (8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>)
    82fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    8302:	2300      	movs	r3, #0
    8304:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8308:	4313      	orrs	r3, r2
    830a:	f43f adde 	beq.w	7eca <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    830e:	220a      	movs	r2, #10
    8310:	2107      	movs	r1, #7
    8312:	4628      	mov	r0, r5
    8314:	f7fe fd92 	bl	6e3c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    8318:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    831a:	8a23      	ldrh	r3, [r4, #16]
    831c:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    831e:	8a63      	ldrh	r3, [r4, #18]
    8320:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    8322:	89a3      	ldrh	r3, [r4, #12]
    8324:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    8326:	89e3      	ldrh	r3, [r4, #14]
    8328:	e7dd      	b.n	82e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e6>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    832a:	7b03      	ldrb	r3, [r0, #12]
    832c:	2b0e      	cmp	r3, #14
    832e:	f47f adcc 	bne.w	7eca <hci_evt_encode+0x1ee>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    8332:	460b      	mov	r3, r1
    8334:	4632      	mov	r2, r6
    8336:	2100      	movs	r1, #0
    8338:	201a      	movs	r0, #26
    833a:	e788      	b.n	824e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24e>
    833c:	20003740 	.word	0x20003740
    8340:	20003748 	.word	0x20003748
    8344:	20000658 	.word	0x20000658

00008348 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    8348:	b570      	push	{r4, r5, r6, lr}
    834a:	4606      	mov	r6, r0
    834c:	460d      	mov	r5, r1
    834e:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    8350:	2113      	movs	r1, #19
    8352:	2205      	movs	r2, #5
    8354:	f7fe fd4d 	bl	6df2 <evt_create>

	ep = net_buf_add(buf, len);
    8358:	2105      	movs	r1, #5
    835a:	f106 0008 	add.w	r0, r6, #8
    835e:	f008 f9ef 	bl	10740 <net_buf_simple_add>
	ep->num_handles = num_handles;
    8362:	2301      	movs	r3, #1
    8364:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    8366:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    836a:	f8a0 4003 	strh.w	r4, [r0, #3]
    836e:	bd70      	pop	{r4, r5, r6, pc}

00008370 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8370:	7903      	ldrb	r3, [r0, #4]
    8372:	2b01      	cmp	r3, #1
    8374:	d006      	beq.n	8384 <hci_get_class+0x14>
    8376:	3b02      	subs	r3, #2
    8378:	b2db      	uxtb	r3, r3
    837a:	2b0a      	cmp	r3, #10
    837c:	d80a      	bhi.n	8394 <hci_get_class+0x24>
    837e:	4a07      	ldr	r2, [pc, #28]	; (839c <hci_get_class+0x2c>)
    8380:	56d0      	ldrsb	r0, [r2, r3]
    8382:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    8384:	7a03      	ldrb	r3, [r0, #8]
    8386:	f003 0303 	and.w	r3, r3, #3
    838a:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    838c:	bf0c      	ite	eq
    838e:	2002      	moveq	r0, #2
    8390:	2003      	movne	r0, #3
    8392:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    8398:	4770      	bx	lr
    839a:	bf00      	nop
    839c:	000129f3 	.word	0x000129f3

000083a0 <hci_init>:
	dup_count = -1;
    83a0:	4b0a      	ldr	r3, [pc, #40]	; (83cc <hci_init+0x2c>)
    83a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    83a6:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    83a8:	4b09      	ldr	r3, [pc, #36]	; (83d0 <hci_init+0x30>)
    83aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    83ae:	f641 71ff 	movw	r1, #8191	; 0x1fff
    83b2:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    83b6:	4b07      	ldr	r3, [pc, #28]	; (83d4 <hci_init+0x34>)
    83b8:	2000      	movs	r0, #0
    83ba:	2100      	movs	r1, #0
    83bc:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    83c0:	4b05      	ldr	r3, [pc, #20]	; (83d8 <hci_init+0x38>)
    83c2:	201f      	movs	r0, #31
    83c4:	2100      	movs	r1, #0
    83c6:	e9c3 0100 	strd	r0, r1, [r3]
    83ca:	4770      	bx	lr
    83cc:	200005cc 	.word	0x200005cc
    83d0:	20003740 	.word	0x20003740
    83d4:	20000658 	.word	0x20000658
    83d8:	20003748 	.word	0x20003748

000083dc <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    83dc:	bf20      	wfe
	__SEV();
    83de:	bf40      	sev
	__WFE();
    83e0:	bf20      	wfe
    83e2:	4770      	bx	lr

000083e4 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    83e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    83e6:	4b0d      	ldr	r3, [pc, #52]	; (841c <pdu_len_cmp+0x38>)
{
    83e8:	b089      	sub	sp, #36	; 0x24
    83ea:	4605      	mov	r5, r0
    83ec:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    83ee:	aa01      	add	r2, sp, #4
    83f0:	f103 0718 	add.w	r7, r3, #24
    83f4:	6818      	ldr	r0, [r3, #0]
    83f6:	6859      	ldr	r1, [r3, #4]
    83f8:	4614      	mov	r4, r2
    83fa:	c403      	stmia	r4!, {r0, r1}
    83fc:	3308      	adds	r3, #8
    83fe:	42bb      	cmp	r3, r7
    8400:	4622      	mov	r2, r4
    8402:	d1f7      	bne.n	83f4 <pdu_len_cmp+0x10>
    8404:	881b      	ldrh	r3, [r3, #0]
    8406:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    8408:	ab08      	add	r3, sp, #32
    840a:	441d      	add	r5, r3
    840c:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    8410:	1b83      	subs	r3, r0, r6
    8412:	4258      	negs	r0, r3
    8414:	4158      	adcs	r0, r3
    8416:	b009      	add	sp, #36	; 0x24
    8418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    841a:	bf00      	nop
    841c:	00012287 	.word	0x00012287

00008420 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    8420:	6008      	str	r0, [r1, #0]
    8422:	4770      	bx	lr

00008424 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    8424:	b918      	cbnz	r0, 842e <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    8426:	680b      	ldr	r3, [r1, #0]
    8428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    842c:	600b      	str	r3, [r1, #0]
    842e:	4770      	bx	lr

00008430 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    8430:	b918      	cbnz	r0, 843a <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    8432:	680b      	ldr	r3, [r1, #0]
    8434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8438:	600b      	str	r3, [r1, #0]
    843a:	4770      	bx	lr

0000843c <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    843c:	b570      	push	{r4, r5, r6, lr}
    843e:	1d03      	adds	r3, r0, #4
    8440:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    8442:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    8444:	429d      	cmp	r5, r3
    8446:	d101      	bne.n	844c <chan_sel_remap+0x10>
    8448:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    844a:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    844c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    8450:	2200      	movs	r2, #0
    8452:	18a0      	adds	r0, r4, r2
    8454:	2a08      	cmp	r2, #8
    8456:	b2c0      	uxtb	r0, r0
    8458:	d101      	bne.n	845e <chan_sel_remap+0x22>
    845a:	4604      	mov	r4, r0
    845c:	e7f2      	b.n	8444 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    845e:	f016 0f01 	tst.w	r6, #1
    8462:	d003      	beq.n	846c <chan_sel_remap+0x30>
				if (chan_index == 0) {
    8464:	2900      	cmp	r1, #0
    8466:	d0f0      	beq.n	844a <chan_sel_remap+0xe>
				chan_index--;
    8468:	3901      	subs	r1, #1
    846a:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    846c:	0876      	lsrs	r6, r6, #1
    846e:	3201      	adds	r2, #1
    8470:	e7ef      	b.n	8452 <chan_sel_remap+0x16>
	...

00008474 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    8474:	4b09      	ldr	r3, [pc, #36]	; (849c <packet_rx_acquired_count_get+0x28>)
    8476:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    847a:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    847e:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    8480:	bf3b      	ittet	cc
    8482:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    8486:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    848a:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    848e:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    8490:	bf2c      	ite	cs
    8492:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    8494:	1a80      	subcc	r0, r0, r2
    8496:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    8498:	4770      	bx	lr
    849a:	bf00      	nop
    849c:	20000660 	.word	0x20000660

000084a0 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    84a0:	b508      	push	{r3, lr}
    84a2:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    84a4:	f7ff ffe6 	bl	8474 <packet_rx_acquired_count_get>
    84a8:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    84aa:	bf21      	itttt	cs
    84ac:	4b04      	ldrcs	r3, [pc, #16]	; (84c0 <packet_rx_reserve_get+0x20>)
    84ae:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    84b2:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    84b6:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    84ba:	bf38      	it	cc
    84bc:	2000      	movcc	r0, #0
}
    84be:	bd08      	pop	{r3, pc}
    84c0:	20000660 	.word	0x20000660

000084c4 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    84c4:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    84c6:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    84ca:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    84ce:	429c      	cmp	r4, r3
    84d0:	d15a      	bne.n	8588 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    84d2:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    84d6:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    84da:	428b      	cmp	r3, r1
    84dc:	d154      	bne.n	8588 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    84de:	f990 301d 	ldrsb.w	r3, [r0, #29]
    84e2:	2b00      	cmp	r3, #0
    84e4:	db25      	blt.n	8532 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    84e6:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    84e8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    84ea:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    84ee:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    84f0:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    84f4:	4351      	muls	r1, r2
					      conn->supervision_reload *
    84f6:	227d      	movs	r2, #125	; 0x7d
    84f8:	434a      	muls	r2, r1
					      125 / 1000;
    84fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    84fe:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    8502:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    8506:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    850a:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    850c:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    8510:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    8512:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    8514:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    8518:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    851a:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    851e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    8522:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    8526:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    852a:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    852e:	4618      	mov	r0, r3
    8530:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    8532:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    8536:	06dc      	lsls	r4, r3, #27
    8538:	d428      	bmi.n	858c <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    853a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    853e:	069a      	lsls	r2, r3, #26
    8540:	d503      	bpl.n	854a <conn_update_req+0x86>
		    (conn->llcp_features &
    8542:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    8546:	079b      	lsls	r3, r3, #30
    8548:	d520      	bpl.n	858c <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    854a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    854c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    854e:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    8552:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    8554:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    8558:	4354      	muls	r4, r2
						conn->supervision_reload *
    855a:	227d      	movs	r2, #125	; 0x7d
    855c:	4362      	muls	r2, r4
						125 / 1000;
    855e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    8562:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    8566:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    856a:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    856e:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    8570:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    8574:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    8578:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    857a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    857e:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    8582:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    8586:	e7d2      	b.n	852e <conn_update_req+0x6a>
		return 1;
    8588:	2001      	movs	r0, #1
    858a:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    858c:	2002      	movs	r0, #2
}
    858e:	bd30      	pop	{r4, r5, pc}

00008590 <packet_rx_allocate>:
{
    8590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    8594:	4d22      	ldr	r5, [pc, #136]	; (8620 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    8596:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    859a:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    859e:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    85a2:	3401      	adds	r4, #1
    85a4:	4581      	cmp	r9, r0
    85a6:	b2e4      	uxtb	r4, r4
    85a8:	bf28      	it	cs
    85aa:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    85ac:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    85b0:	42a3      	cmp	r3, r4
    85b2:	bf08      	it	eq
    85b4:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    85b6:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    85ba:	f1b9 0f00 	cmp.w	r9, #0
    85be:	d003      	beq.n	85c8 <packet_rx_allocate+0x38>
    85c0:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    85c4:	429c      	cmp	r4, r3
    85c6:	d101      	bne.n	85cc <packet_rx_allocate+0x3c>
    85c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    85cc:	4638      	mov	r0, r7
    85ce:	f7fd fada 	bl	5b86 <mem_acquire>
		if (!link) {
    85d2:	4606      	mov	r6, r0
    85d4:	2800      	cmp	r0, #0
    85d6:	d0f7      	beq.n	85c8 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    85d8:	4640      	mov	r0, r8
    85da:	f7fd fad4 	bl	5b86 <mem_acquire>
		if (!node_rx) {
    85de:	b928      	cbnz	r0, 85ec <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    85e0:	4630      	mov	r0, r6
    85e2:	4910      	ldr	r1, [pc, #64]	; (8624 <packet_rx_allocate+0x94>)
}
    85e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    85e8:	f7fd bae7 	b.w	5bba <mem_release>
		node_rx->hdr.onion.link = link;
    85ec:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    85ee:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    85f2:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    85f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    85fa:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    85fe:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    8602:	3401      	adds	r4, #1
    8604:	b2e4      	uxtb	r4, r4
			acquire = 0;
    8606:	42a3      	cmp	r3, r4
    8608:	bf08      	it	eq
    860a:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    860c:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    8610:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    8614:	3b01      	subs	r3, #1
    8616:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    861a:	fa5f f989 	uxtb.w	r9, r9
    861e:	e7cc      	b.n	85ba <packet_rx_allocate+0x2a>
    8620:	20000660 	.word	0x20000660
    8624:	200007a8 	.word	0x200007a8

00008628 <common_init>:
{
    8628:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    862a:	4c34      	ldr	r4, [pc, #208]	; (86fc <common_init+0xd4>)
    862c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    8630:	2a00      	cmp	r2, #0
    8632:	d037      	beq.n	86a4 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    8634:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    8638:	f44f 71aa 	mov.w	r1, #340	; 0x154
    863c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8640:	f7fd fa7a 	bl	5b38 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    8644:	4b2e      	ldr	r3, [pc, #184]	; (8700 <common_init+0xd8>)
    8646:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    864a:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    864e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8652:	f7fd fa71 	bl	5b38 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    8656:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    865a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    865e:	4b29      	ldr	r3, [pc, #164]	; (8704 <common_init+0xdc>)
    8660:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    8664:	440a      	add	r2, r1
    8666:	2108      	movs	r1, #8
    8668:	f7fd fa66 	bl	5b38 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    866c:	4b26      	ldr	r3, [pc, #152]	; (8708 <common_init+0xe0>)
    866e:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    8672:	2202      	movs	r2, #2
    8674:	2124      	movs	r1, #36	; 0x24
    8676:	f7fd fa5f 	bl	5b38 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    867a:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    867e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    8682:	4b22      	ldr	r3, [pc, #136]	; (870c <common_init+0xe4>)
    8684:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    8688:	3a01      	subs	r2, #1
    868a:	b292      	uxth	r2, r2
    868c:	f7fd fa54 	bl	5b38 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    8690:	481c      	ldr	r0, [pc, #112]	; (8704 <common_init+0xdc>)
    8692:	f7fd fa78 	bl	5b86 <mem_acquire>
	LL_ASSERT(link);
    8696:	b940      	cbnz	r0, 86aa <common_init+0x82>
    8698:	4040      	eors	r0, r0
    869a:	f380 8811 	msr	BASEPRI, r0
    869e:	f04f 0004 	mov.w	r0, #4
    86a2:	df02      	svc	2
		_radio.conn_free = NULL;
    86a4:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    86a8:	e7cc      	b.n	8644 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    86aa:	4a19      	ldr	r2, [pc, #100]	; (8710 <common_init+0xe8>)
    86ac:	1f11      	subs	r1, r2, #4
    86ae:	f7fd fac1 	bl	5c34 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    86b2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    86b6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    86ba:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    86be:	231f      	movs	r3, #31
    86c0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    86c4:	2325      	movs	r3, #37	; 0x25
    86c6:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    86ca:	231b      	movs	r3, #27
    86cc:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    86d0:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    86d4:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    86d6:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    86da:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    86dc:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    86e0:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    86e4:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    86e8:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    86ec:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    86f0:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    86f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    86f8:	f7ff bf4a 	b.w	8590 <packet_rx_allocate>
    86fc:	20000660 	.word	0x20000660
    8700:	20000790 	.word	0x20000790
    8704:	200007a8 	.word	0x200007a8
    8708:	200007bc 	.word	0x200007bc
    870c:	200007c4 	.word	0x200007c4
    8710:	200007b0 	.word	0x200007b0

00008714 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    8714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    8718:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    871a:	4294      	cmp	r4, r2
{
    871c:	4681      	mov	r9, r0
    871e:	460f      	mov	r7, r1
    8720:	4690      	mov	r8, r2
	if (_first == last) {
    8722:	d03d      	beq.n	87a0 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    8724:	4e1f      	ldr	r6, [pc, #124]	; (87a4 <tx_cmplt_get+0x90>)
    8726:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    872a:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    872e:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    8730:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    8732:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    8736:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    873a:	b222      	sxth	r2, r4
    873c:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    8740:	f8b9 e000 	ldrh.w	lr, [r9]
    8744:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    8748:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    874c:	4596      	cmp	lr, r2
    874e:	d120      	bne.n	8792 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    8750:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    8752:	2801      	cmp	r0, #1
    8754:	f020 0303 	bic.w	r3, r0, #3
    8758:	d90a      	bls.n	8770 <tx_cmplt_get+0x5c>
    875a:	b1f3      	cbz	r3, 879a <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    875c:	1d02      	adds	r2, r0, #4
    875e:	d01c      	beq.n	879a <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    8760:	7942      	ldrb	r2, [r0, #5]
    8762:	b1d2      	cbz	r2, 879a <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    8764:	7902      	ldrb	r2, [r0, #4]
    8766:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    876a:	3a01      	subs	r2, #1
    876c:	2a01      	cmp	r2, #1
    876e:	d814      	bhi.n	879a <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    8770:	2201      	movs	r2, #1
			cmplt++;
    8772:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    8774:	604a      	str	r2, [r1, #4]
			cmplt++;
    8776:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    8778:	b113      	cbz	r3, 8780 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    877a:	4651      	mov	r1, sl
    877c:	f7fd fa1d 	bl	5bba <mem_release>
		}

		_first = _first + 1;
    8780:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    8782:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    8786:	b2e4      	uxtb	r4, r4
			_first = 0;
    8788:	42a2      	cmp	r2, r4
    878a:	bf08      	it	eq
    878c:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    878e:	4544      	cmp	r4, r8
    8790:	d1d3      	bne.n	873a <tx_cmplt_get+0x26>

	*first = _first;
    8792:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    8794:	4628      	mov	r0, r5
    8796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    879a:	f8c1 b004 	str.w	fp, [r1, #4]
    879e:	e7eb      	b.n	8778 <tx_cmplt_get+0x64>
		return 0;
    87a0:	2500      	movs	r5, #0
    87a2:	e7f7      	b.n	8794 <tx_cmplt_get+0x80>
    87a4:	20000660 	.word	0x20000660

000087a8 <connection_get>:
{
    87a8:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    87aa:	4b09      	ldr	r3, [pc, #36]	; (87d0 <connection_get+0x28>)
    87ac:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    87b0:	4282      	cmp	r2, r0
{
    87b2:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    87b4:	d90a      	bls.n	87cc <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    87b6:	4602      	mov	r2, r0
    87b8:	f44f 71aa 	mov.w	r1, #340	; 0x154
    87bc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    87c0:	f7fd fa16 	bl	5bf0 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    87c4:	b110      	cbz	r0, 87cc <connection_get+0x24>
    87c6:	8c03      	ldrh	r3, [r0, #32]
    87c8:	42a3      	cmp	r3, r4
    87ca:	d000      	beq.n	87ce <connection_get+0x26>
	return 0;
    87cc:	2000      	movs	r0, #0
}
    87ce:	bd10      	pop	{r4, pc}
    87d0:	20000660 	.word	0x20000660

000087d4 <role_disable>:
{
    87d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87d8:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    87da:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    87dc:	2805      	cmp	r0, #5
{
    87de:	4605      	mov	r5, r0
    87e0:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    87e2:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    87e4:	d00e      	beq.n	8804 <role_disable+0x30>
    87e6:	2806      	cmp	r0, #6
    87e8:	f000 808e 	beq.w	8908 <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    87ec:	f240 8086 	bls.w	88fc <role_disable+0x128>
			conn_handle = ticker_id_primary -
    87f0:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    87f2:	b280      	uxth	r0, r0
    87f4:	f7ff ffd8 	bl	87a8 <connection_get>
			if (!conn) {
    87f8:	2800      	cmp	r0, #0
    87fa:	f000 80d9 	beq.w	89b0 <role_disable+0x1dc>
			ticks_active_to_start =
    87fe:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    8802:	e010      	b.n	8826 <role_disable+0x52>
		ticks_xtal_to_start =
    8804:	4b6b      	ldr	r3, [pc, #428]	; (89b4 <role_disable+0x1e0>)
    8806:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    8808:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    880c:	ab02      	add	r3, sp, #8
    880e:	9300      	str	r3, [sp, #0]
    8810:	460a      	mov	r2, r1
    8812:	4b69      	ldr	r3, [pc, #420]	; (89b8 <role_disable+0x1e4>)
    8814:	2103      	movs	r1, #3
    8816:	2000      	movs	r0, #0
    8818:	f7fe f8c8 	bl	69ac <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    881c:	2802      	cmp	r0, #2
    881e:	d066      	beq.n	88ee <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    8820:	9b02      	ldr	r3, [sp, #8]
    8822:	2b00      	cmp	r3, #0
    8824:	d167      	bne.n	88f6 <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    8826:	4c63      	ldr	r4, [pc, #396]	; (89b4 <role_disable+0x1e0>)
    8828:	7ca3      	ldrb	r3, [r4, #18]
    882a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    882e:	2b00      	cmp	r3, #0
    8830:	d164      	bne.n	88fc <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    8832:	ab06      	add	r3, sp, #24
    8834:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    8836:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    8838:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    883c:	2103      	movs	r1, #3
    883e:	9300      	str	r3, [sp, #0]
    8840:	462a      	mov	r2, r5
    8842:	4b5d      	ldr	r3, [pc, #372]	; (89b8 <role_disable+0x1e4>)
    8844:	f7fe f8b2 	bl	69ac <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    8848:	2802      	cmp	r0, #2
    884a:	d063      	beq.n	8914 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    884c:	9b02      	ldr	r3, [sp, #8]
    884e:	2b00      	cmp	r3, #0
    8850:	d145      	bne.n	88de <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    8852:	7c23      	ldrb	r3, [r4, #16]
    8854:	429d      	cmp	r5, r3
    8856:	d002      	beq.n	885e <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    8858:	7c63      	ldrb	r3, [r4, #17]
    885a:	429d      	cmp	r5, r3
    885c:	d13b      	bne.n	88d6 <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    885e:	ab06      	add	r3, sp, #24
    8860:	2202      	movs	r2, #2
    8862:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8866:	2200      	movs	r2, #0
    8868:	9300      	str	r3, [sp, #0]
    886a:	2103      	movs	r1, #3
    886c:	4b52      	ldr	r3, [pc, #328]	; (89b8 <role_disable+0x1e4>)
    886e:	4610      	mov	r0, r2
    8870:	f7fe f89c 	bl	69ac <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    8874:	2802      	cmp	r0, #2
    8876:	d107      	bne.n	8888 <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8878:	2201      	movs	r2, #1
    887a:	4611      	mov	r1, r2
    887c:	2003      	movs	r0, #3
    887e:	f7fd fa25 	bl	5ccc <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    8882:	9b03      	ldr	r3, [sp, #12]
    8884:	2b02      	cmp	r3, #2
    8886:	d039      	beq.n	88fc <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    8888:	9803      	ldr	r0, [sp, #12]
    888a:	2800      	cmp	r0, #0
    888c:	d15e      	bne.n	894c <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    888e:	2302      	movs	r3, #2
    8890:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    8892:	7c23      	ldrb	r3, [r4, #16]
    8894:	2b00      	cmp	r3, #0
    8896:	d031      	beq.n	88fc <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8898:	ab04      	add	r3, sp, #16
    889a:	9300      	str	r3, [sp, #0]
    889c:	2201      	movs	r2, #1
    889e:	4b46      	ldr	r3, [pc, #280]	; (89b8 <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    88a0:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    88a2:	2103      	movs	r1, #3
    88a4:	f7fe f882 	bl	69ac <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    88a8:	2802      	cmp	r0, #2
    88aa:	d107      	bne.n	88bc <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    88ac:	2201      	movs	r2, #1
    88ae:	4611      	mov	r1, r2
    88b0:	2003      	movs	r0, #3
    88b2:	f7fd fa0b 	bl	5ccc <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    88b6:	9b04      	ldr	r3, [sp, #16]
    88b8:	2b02      	cmp	r3, #2
    88ba:	d01f      	beq.n	88fc <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    88bc:	9a04      	ldr	r2, [sp, #16]
    88be:	2a00      	cmp	r2, #0
    88c0:	d136      	bne.n	8930 <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    88c2:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    88c6:	45b0      	cmp	r8, r6
    88c8:	d93e      	bls.n	8948 <role_disable+0x174>
				ret = mayfly_enqueue(
    88ca:	4b3c      	ldr	r3, [pc, #240]	; (89bc <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    88cc:	4611      	mov	r1, r2
    88ce:	2003      	movs	r0, #3
    88d0:	f7fd fa24 	bl	5d1c <mayfly_enqueue>
			LL_ASSERT(!ret);
    88d4:	b990      	cbnz	r0, 88fc <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    88d6:	7ca3      	ldrb	r3, [r4, #18]
    88d8:	b90b      	cbnz	r3, 88de <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    88da:	2301      	movs	r3, #1
    88dc:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    88de:	2300      	movs	r3, #0
    88e0:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    88e2:	9802      	ldr	r0, [sp, #8]
}
    88e4:	b006      	add	sp, #24
    88e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    88ea:	f7ff fd77 	bl	83dc <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    88ee:	9b02      	ldr	r3, [sp, #8]
    88f0:	2b02      	cmp	r3, #2
    88f2:	d0fa      	beq.n	88ea <role_disable+0x116>
    88f4:	e794      	b.n	8820 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    88f6:	9b02      	ldr	r3, [sp, #8]
    88f8:	2b01      	cmp	r3, #1
    88fa:	d094      	beq.n	8826 <role_disable+0x52>
		LL_ASSERT(0);
    88fc:	4040      	eors	r0, r0
    88fe:	f380 8811 	msr	BASEPRI, r0
    8902:	f04f 0004 	mov.w	r0, #4
    8906:	df02      	svc	2
		ticks_xtal_to_start =
    8908:	4b2a      	ldr	r3, [pc, #168]	; (89b4 <role_disable+0x1e0>)
    890a:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    890e:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    8912:	e788      	b.n	8826 <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    8914:	7c63      	ldrb	r3, [r4, #17]
    8916:	429d      	cmp	r5, r3
    8918:	d104      	bne.n	8924 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    891a:	2201      	movs	r2, #1
    891c:	4611      	mov	r1, r2
    891e:	2003      	movs	r0, #3
    8920:	f7fd f9d4 	bl	5ccc <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    8924:	9b02      	ldr	r3, [sp, #8]
    8926:	2b02      	cmp	r3, #2
    8928:	d190      	bne.n	884c <role_disable+0x78>
			cpu_sleep();
    892a:	f7ff fd57 	bl	83dc <cpu_sleep>
    892e:	e7f9      	b.n	8924 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    8930:	9b04      	ldr	r3, [sp, #16]
    8932:	2b01      	cmp	r3, #1
    8934:	d1e2      	bne.n	88fc <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8936:	2200      	movs	r2, #0
    8938:	4611      	mov	r1, r2
    893a:	4b20      	ldr	r3, [pc, #128]	; (89bc <role_disable+0x1e8>)
    893c:	2003      	movs	r0, #3
    893e:	f7fd f9ed 	bl	5d1c <mayfly_enqueue>
			LL_ASSERT(!ret);
    8942:	4602      	mov	r2, r0
    8944:	2800      	cmp	r0, #0
    8946:	d1d9      	bne.n	88fc <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8948:	4b1d      	ldr	r3, [pc, #116]	; (89c0 <role_disable+0x1ec>)
    894a:	e7bf      	b.n	88cc <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    894c:	9d03      	ldr	r5, [sp, #12]
    894e:	2d01      	cmp	r5, #1
    8950:	d1d4      	bne.n	88fc <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    8952:	2fff      	cmp	r7, #255	; 0xff
    8954:	d019      	beq.n	898a <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    8956:	ab06      	add	r3, sp, #24
    8958:	2202      	movs	r2, #2
    895a:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    895e:	2103      	movs	r1, #3
    8960:	9300      	str	r3, [sp, #0]
    8962:	463a      	mov	r2, r7
    8964:	4b14      	ldr	r3, [pc, #80]	; (89b8 <role_disable+0x1e4>)
    8966:	2000      	movs	r0, #0
    8968:	f7fe f820 	bl	69ac <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    896c:	2802      	cmp	r0, #2
    896e:	d107      	bne.n	8980 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8970:	462a      	mov	r2, r5
    8972:	4629      	mov	r1, r5
    8974:	2003      	movs	r0, #3
    8976:	f7fd f9a9 	bl	5ccc <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    897a:	9b05      	ldr	r3, [sp, #20]
    897c:	2b02      	cmp	r3, #2
    897e:	d0bd      	beq.n	88fc <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    8980:	9b05      	ldr	r3, [sp, #20]
    8982:	b113      	cbz	r3, 898a <role_disable+0x1b6>
    8984:	9b05      	ldr	r3, [sp, #20]
    8986:	2b01      	cmp	r3, #1
    8988:	d1b8      	bne.n	88fc <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    898a:	7ce3      	ldrb	r3, [r4, #19]
    898c:	2b00      	cmp	r3, #0
    898e:	d0a2      	beq.n	88d6 <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    8990:	4b0c      	ldr	r3, [pc, #48]	; (89c4 <role_disable+0x1f0>)
    8992:	2204      	movs	r2, #4
    8994:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8996:	2200      	movs	r2, #0
    8998:	4611      	mov	r1, r2
    899a:	2003      	movs	r0, #3
    899c:	f7fd f9be 	bl	5d1c <mayfly_enqueue>
			LL_ASSERT(!ret);
    89a0:	2800      	cmp	r0, #0
    89a2:	d1ab      	bne.n	88fc <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    89a4:	7ce3      	ldrb	r3, [r4, #19]
    89a6:	2b00      	cmp	r3, #0
    89a8:	d095      	beq.n	88d6 <role_disable+0x102>
				cpu_sleep();
    89aa:	f7ff fd17 	bl	83dc <cpu_sleep>
    89ae:	e7f9      	b.n	89a4 <role_disable+0x1d0>
				return 1;
    89b0:	2001      	movs	r0, #1
    89b2:	e797      	b.n	88e4 <role_disable+0x110>
    89b4:	20000660 	.word	0x20000660
    89b8:	00008421 	.word	0x00008421
    89bc:	20003770 	.word	0x20003770
    89c0:	20003810 	.word	0x20003810
    89c4:	20003790 	.word	0x20003790

000089c8 <rx_packet_set>:
{
    89c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    89ca:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    89ce:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    89d0:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    89d2:	f004 0407 	and.w	r4, r4, #7
{
    89d6:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    89d8:	4620      	mov	r0, r4
    89da:	2100      	movs	r1, #0
    89dc:	f007 f9ba 	bl	fd54 <radio_phy_set>
	if (conn->enc_rx) {
    89e0:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    89e4:	f013 0f10 	tst.w	r3, #16
    89e8:	ea4f 0244 	mov.w	r2, r4, lsl #1
    89ec:	d010      	beq.n	8a10 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    89ee:	1d29      	adds	r1, r5, #4
    89f0:	f042 0201 	orr.w	r2, r2, #1
    89f4:	b2c9      	uxtb	r1, r1
    89f6:	2008      	movs	r0, #8
    89f8:	f007 f9f2 	bl	fde0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    89fc:	463a      	mov	r2, r7
    89fe:	4621      	mov	r1, r4
    8a00:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    8a04:	f007 fc30 	bl	10268 <radio_ccm_rx_pkt_set>
}
    8a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    8a0c:	f007 ba16 	b.w	fe3c <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    8a10:	2008      	movs	r0, #8
    8a12:	f042 0201 	orr.w	r2, r2, #1
    8a16:	b2e9      	uxtb	r1, r5
    8a18:	f007 f9e2 	bl	fde0 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    8a1c:	4638      	mov	r0, r7
    8a1e:	e7f3      	b.n	8a08 <rx_packet_set+0x40>

00008a20 <tx_packet_set>:
{
    8a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a22:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    8a24:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    8a28:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    8a2a:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    8a2e:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    8a30:	09c9      	lsrs	r1, r1, #7
    8a32:	4620      	mov	r0, r4
    8a34:	f007 f98e 	bl	fd54 <radio_phy_set>
	if (conn->enc_tx) {
    8a38:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    8a3c:	f013 0f20 	tst.w	r3, #32
    8a40:	ea4f 0244 	mov.w	r2, r4, lsl #1
    8a44:	d00f      	beq.n	8a66 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    8a46:	1d29      	adds	r1, r5, #4
    8a48:	b2c9      	uxtb	r1, r1
    8a4a:	2008      	movs	r0, #8
    8a4c:	f042 0201 	orr.w	r2, r2, #1
    8a50:	f007 f9c6 	bl	fde0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    8a54:	4639      	mov	r1, r7
    8a56:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    8a5a:	f007 fc41 	bl	102e0 <radio_ccm_tx_pkt_set>
}
    8a5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    8a62:	f007 b9f1 	b.w	fe48 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    8a66:	2008      	movs	r0, #8
    8a68:	f042 0201 	orr.w	r2, r2, #1
    8a6c:	b2e9      	uxtb	r1, r5
    8a6e:	f007 f9b7 	bl	fde0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    8a72:	4638      	mov	r0, r7
    8a74:	e7f3      	b.n	8a5e <tx_packet_set+0x3e>
	...

00008a78 <sched_free_win_offset_calc>:
{
    8a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a7c:	b08f      	sub	sp, #60	; 0x3c
    8a7e:	4692      	mov	sl, r2
    8a80:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8a82:	6803      	ldr	r3, [r0, #0]
{
    8a84:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8a86:	2b00      	cmp	r3, #0
{
    8a88:	4680      	mov	r8, r0
    8a8a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8a8c:	da31      	bge.n	8af2 <sched_free_win_offset_calc+0x7a>
		u32_t ticks_prepare_to_start =
    8a8e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    8a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    8a94:	4291      	cmp	r1, r2
    8a96:	bf2c      	ite	cs
    8a98:	1a5a      	subcs	r2, r3, r1
    8a9a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    8a9c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    8a9e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    8aa2:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8aa4:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8aa6:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    8aa8:	18d3      	adds	r3, r2, r3
    8aaa:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8aac:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8ab0:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    8ab4:	940c      	str	r4, [sp, #48]	; 0x30
    8ab6:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8ab8:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8aba:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    8abc:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    8abe:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8ac0:	2302      	movs	r3, #2
    8ac2:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8ac4:	ab0d      	add	r3, sp, #52	; 0x34
    8ac6:	9302      	str	r3, [sp, #8]
    8ac8:	4b77      	ldr	r3, [pc, #476]	; (8ca8 <sched_free_win_offset_calc+0x230>)
    8aca:	9301      	str	r3, [sp, #4]
    8acc:	ab0b      	add	r3, sp, #44	; 0x2c
    8ace:	9300      	str	r3, [sp, #0]
    8ad0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    8ad4:	ab0c      	add	r3, sp, #48	; 0x30
    8ad6:	2101      	movs	r1, #1
    8ad8:	2000      	movs	r0, #0
    8ada:	f7fd ffa3 	bl	6a24 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    8ade:	2802      	cmp	r0, #2
    8ae0:	d010      	beq.n	8b04 <sched_free_win_offset_calc+0x8c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8ae4:	b193      	cbz	r3, 8b0c <sched_free_win_offset_calc+0x94>
			LL_ASSERT(0);
    8ae6:	4040      	eors	r0, r0
    8ae8:	f380 8811 	msr	BASEPRI, r0
    8aec:	f04f 0004 	mov.w	r0, #4
    8af0:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    8af2:	4293      	cmp	r3, r2
    8af4:	bf38      	it	cc
    8af6:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    8af8:	2200      	movs	r2, #0
    8afa:	e7cf      	b.n	8a9c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    8afc:	2101      	movs	r1, #1
    8afe:	2000      	movs	r0, #0
    8b00:	f7fe f80e 	bl	6b20 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8b06:	2b02      	cmp	r3, #2
    8b08:	d0f8      	beq.n	8afc <sched_free_win_offset_calc+0x84>
    8b0a:	e7ea      	b.n	8ae2 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    8b0c:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    8b10:	2aff      	cmp	r2, #255	; 0xff
    8b12:	d05d      	beq.n	8bd0 <sched_free_win_offset_calc+0x158>
		if ((ticker_id_prev != 0xff) &&
    8b14:	2fff      	cmp	r7, #255	; 0xff
    8b16:	d002      	beq.n	8b1e <sched_free_win_offset_calc+0xa6>
    8b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8b1a:	4599      	cmp	r9, r3
    8b1c:	d1e3      	bne.n	8ae6 <sched_free_win_offset_calc+0x6e>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    8b1e:	2a05      	cmp	r2, #5
    8b20:	d951      	bls.n	8bc6 <sched_free_win_offset_calc+0x14e>
				  _radio.connection_count)) {
    8b22:	4862      	ldr	r0, [pc, #392]	; (8cac <sched_free_win_offset_calc+0x234>)
    8b24:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8b28:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    8b2a:	429a      	cmp	r2, r3
    8b2c:	da4b      	bge.n	8bc6 <sched_free_win_offset_calc+0x14e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    8b2e:	2a06      	cmp	r2, #6
    8b30:	f000 8092 	beq.w	8c58 <sched_free_win_offset_calc+0x1e0>
		if (ticker_id_other != 0xFF) {
    8b34:	9b06      	ldr	r3, [sp, #24]
    8b36:	2bff      	cmp	r3, #255	; 0xff
    8b38:	d14a      	bne.n	8bd0 <sched_free_win_offset_calc+0x158>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8b3a:	3a07      	subs	r2, #7
    8b3c:	b292      	uxth	r2, r2
    8b3e:	f44f 71aa 	mov.w	r1, #340	; 0x154
    8b42:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    8b46:	f7fd f853 	bl	5bf0 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    8b4a:	4580      	cmp	r8, r0
    8b4c:	d03b      	beq.n	8bc6 <sched_free_win_offset_calc+0x14e>
    8b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b50:	b91b      	cbnz	r3, 8b5a <sched_free_win_offset_calc+0xe2>
    8b52:	f990 301d 	ldrsb.w	r3, [r0, #29]
    8b56:	2b00      	cmp	r3, #0
    8b58:	db35      	blt.n	8bc6 <sched_free_win_offset_calc+0x14e>
			u32_t ticks_to_expire_normal =
    8b5a:	9b05      	ldr	r3, [sp, #20]
    8b5c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8b5e:	6841      	ldr	r1, [r0, #4]
    8b60:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8b62:	6803      	ldr	r3, [r0, #0]
    8b64:	2b00      	cmp	r3, #0
    8b66:	da4e      	bge.n	8c06 <sched_free_win_offset_calc+0x18e>
				u32_t ticks_prepare_to_start =
    8b68:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    8b6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8b6e:	428a      	cmp	r2, r1
    8b70:	bf2c      	ite	cs
    8b72:	18b6      	addcs	r6, r6, r2
    8b74:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    8b76:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    8b78:	68c2      	ldr	r2, [r0, #12]
    8b7a:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    8b7e:	444b      	add	r3, r9
    8b80:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    8b82:	f8da 3000 	ldr.w	r3, [sl]
    8b86:	429e      	cmp	r6, r3
    8b88:	d916      	bls.n	8bb8 <sched_free_win_offset_calc+0x140>
    8b8a:	429d      	cmp	r5, r3
    8b8c:	bf38      	it	cc
    8b8e:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    8b90:	9b07      	ldr	r3, [sp, #28]
    8b92:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    8b96:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8b98:	781b      	ldrb	r3, [r3, #0]
    8b9a:	42a3      	cmp	r3, r4
    8b9c:	d905      	bls.n	8baa <sched_free_win_offset_calc+0x132>
				       (ticker_ticks_diff_get(
    8b9e:	4629      	mov	r1, r5
    8ba0:	4630      	mov	r0, r6
    8ba2:	f7fd ffd5 	bl	6b50 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    8ba6:	42b8      	cmp	r0, r7
    8ba8:	d231      	bcs.n	8c0e <sched_free_win_offset_calc+0x196>
				if (_win_offset >= conn_interval) {
    8baa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    8bae:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    8bb0:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    8bb4:	4293      	cmp	r3, r2
    8bb6:	d20b      	bcs.n	8bd0 <sched_free_win_offset_calc+0x158>
			ticks_anchor_prev = ticks_anchor;
    8bb8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    8bbc:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    8bc0:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    8bc4:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    8bc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8bc8:	781b      	ldrb	r3, [r3, #0]
    8bca:	42a3      	cmp	r3, r4
    8bcc:	f63f af78 	bhi.w	8ac0 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    8bd0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    8bd4:	2bff      	cmp	r3, #255	; 0xff
    8bd6:	d111      	bne.n	8bfc <sched_free_win_offset_calc+0x184>
    8bd8:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8cb0 <sched_free_win_offset_calc+0x238>
    8be0:	a72f      	add	r7, pc, #188	; (adr r7, 8ca0 <sched_free_win_offset_calc+0x228>)
    8be2:	e9d7 6700 	ldrd	r6, r7, [r7]
    8be6:	429d      	cmp	r5, r3
    8be8:	bf38      	it	cc
    8bea:	461d      	movcc	r5, r3
    8bec:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    8bf0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8bf2:	781b      	ldrb	r3, [r3, #0]
    8bf4:	42a3      	cmp	r3, r4
    8bf6:	d831      	bhi.n	8c5c <sched_free_win_offset_calc+0x1e4>
		*ticks_to_offset_next = ticks_to_expire_prev;
    8bf8:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    8bfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8bfe:	701c      	strb	r4, [r3, #0]
}
    8c00:	b00f      	add	sp, #60	; 0x3c
    8c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    8c06:	428b      	cmp	r3, r1
    8c08:	bf38      	it	cc
    8c0a:	460b      	movcc	r3, r1
    8c0c:	e7b4      	b.n	8b78 <sched_free_win_offset_calc+0x100>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8c0e:	4a28      	ldr	r2, [pc, #160]	; (8cb0 <sched_free_win_offset_calc+0x238>)
    8c10:	eb05 030b 	add.w	r3, r5, fp
    8c14:	fba3 0102 	umull	r0, r1, r3, r2
    8c18:	2207      	movs	r2, #7
    8c1a:	fb02 1103 	mla	r1, r2, r3, r1
    8c1e:	a320      	add	r3, pc, #128	; (adr r3, 8ca0 <sched_free_win_offset_calc+0x228>)
    8c20:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c24:	f7f7 faf6 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    8c28:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8c2c:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    8c30:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8c32:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    8c34:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8c36:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    8c3a:	d20b      	bcs.n	8c54 <sched_free_win_offset_calc+0x1dc>
					memcpy(win_offset +
    8c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8c3e:	2202      	movs	r2, #2
    8c40:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    8c44:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    8c48:	3401      	adds	r4, #1
					memcpy(win_offset +
    8c4a:	f7f8 fffd 	bl	1c48 <memcpy>
					offset_index++;
    8c4e:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    8c50:	3528      	adds	r5, #40	; 0x28
    8c52:	e7a0      	b.n	8b96 <sched_free_win_offset_calc+0x11e>
						ticks_to_expire_prev = 0;
    8c54:	2500      	movs	r5, #0
    8c56:	e7a8      	b.n	8baa <sched_free_win_offset_calc+0x132>
    8c58:	9206      	str	r2, [sp, #24]
    8c5a:	e7b4      	b.n	8bc6 <sched_free_win_offset_calc+0x14e>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8c5c:	eb05 030b 	add.w	r3, r5, fp
    8c60:	fba3 0108 	umull	r0, r1, r3, r8
    8c64:	fb09 1103 	mla	r1, r9, r3, r1
    8c68:	4632      	mov	r2, r6
    8c6a:	463b      	mov	r3, r7
    8c6c:	f7f7 fad2 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    8c70:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8c74:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    8c78:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8c7a:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    8c7c:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8c7e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    8c82:	d90b      	bls.n	8c9c <sched_free_win_offset_calc+0x224>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    8c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8c86:	2202      	movs	r2, #2
    8c88:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    8c8c:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    8c90:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    8c92:	f7f8 ffd9 	bl	1c48 <memcpy>
			offset_index++;
    8c96:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    8c98:	3528      	adds	r5, #40	; 0x28
    8c9a:	e7a9      	b.n	8bf0 <sched_free_win_offset_calc+0x178>
				ticks_to_expire_prev = 0;
    8c9c:	2500      	movs	r5, #0
    8c9e:	e7ab      	b.n	8bf8 <sched_free_win_offset_calc+0x180>
    8ca0:	3b9aca00 	.word	0x3b9aca00
    8ca4:	00000000 	.word	0x00000000
    8ca8:	00008421 	.word	0x00008421
    8cac:	20000660 	.word	0x20000660
    8cb0:	1afd498d 	.word	0x1afd498d

00008cb4 <mayfly_sched_free_win_offset_calc>:
{
    8cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    8cb6:	2300      	movs	r3, #0
    8cb8:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    8cba:	2306      	movs	r3, #6
    8cbc:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    8cc0:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8cc4:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    8cc8:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    8cca:	bfbe      	ittt	lt
    8ccc:	4602      	movlt	r2, r0
    8cce:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    8cd0:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8cd4:	9101      	str	r1, [sp, #4]
    8cd6:	f10d 010b 	add.w	r1, sp, #11
    8cda:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    8cdc:	bfa8      	it	ge
    8cde:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8ce0:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    8ce4:	2100      	movs	r1, #0
    8ce6:	f7ff fec7 	bl	8a78 <sched_free_win_offset_calc>
}
    8cea:	b005      	add	sp, #20
    8cec:	f85d fb04 	ldr.w	pc, [sp], #4

00008cf0 <mayfly_sched_win_offset_select>:
{
    8cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8cf4:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    8cf8:	b089      	sub	sp, #36	; 0x24
    8cfa:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8cfc:	4840      	ldr	r0, [pc, #256]	; (8e00 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    8cfe:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    8d00:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8d02:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    8d06:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8d0a:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    8d0e:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8d10:	fb03 1102 	mla	r1, r3, r2, r1
    8d14:	a338      	add	r3, pc, #224	; (adr r3, 8df8 <mayfly_sched_win_offset_select+0x108>)
    8d16:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    8d1a:	9505      	str	r5, [sp, #20]
    8d1c:	6075      	str	r5, [r6, #4]
    8d1e:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8d20:	f7f7 fa78 	bl	214 <__aeabi_uldivmod>
    8d24:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    8d26:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8d2a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    8d2e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    8d32:	9100      	str	r1, [sp, #0]
    8d34:	9601      	str	r6, [sp, #4]
    8d36:	2101      	movs	r1, #1
    8d38:	4620      	mov	r0, r4
    8d3a:	f7ff fe9d 	bl	8a78 <sched_free_win_offset_calc>
    8d3e:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    8d42:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    8d46:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    8d4a:	2202      	movs	r2, #2
    8d4c:	4639      	mov	r1, r7
    8d4e:	f10d 000e 	add.w	r0, sp, #14
    8d52:	f7f8 ff79 	bl	1c48 <memcpy>
		while (offset_index_m < offset_m_max) {
    8d56:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    8d5a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    8d5e:	2300      	movs	r3, #0
    8d60:	b2d9      	uxtb	r1, r3
    8d62:	4288      	cmp	r0, r1
    8d64:	d811      	bhi.n	8d8a <mayfly_sched_win_offset_select+0x9a>
    8d66:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    8d68:	4547      	cmp	r7, r8
    8d6a:	d1ee      	bne.n	8d4a <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    8d6c:	b9b5      	cbnz	r5, 8d9c <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    8d6e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    8d72:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8d76:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    8d78:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    8d7c:	2202      	movs	r2, #2
    8d7e:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    8d80:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    8d84:	f7f8 ff60 	bl	1c48 <memcpy>
    8d88:	e027      	b.n	8dda <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    8d8a:	454a      	cmp	r2, r9
    8d8c:	d004      	beq.n	8d98 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    8d8e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    8d92:	4291      	cmp	r1, r2
    8d94:	d024      	beq.n	8de0 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    8d96:	2501      	movs	r5, #1
    8d98:	3301      	adds	r3, #1
    8d9a:	e7e1      	b.n	8d60 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    8d9c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    8da0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    8da4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    8da8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    8dac:	4b15      	ldr	r3, [pc, #84]	; (8e04 <mayfly_sched_win_offset_select+0x114>)
    8dae:	2200      	movs	r2, #0
    8db0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    8db4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8db8:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    8dbc:	f042 0203 	orr.w	r2, r2, #3
    8dc0:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    8dc4:	2203      	movs	r2, #3
    8dc6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    8dca:	2211      	movs	r2, #17
    8dcc:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    8dd0:	220f      	movs	r2, #15
    8dd2:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    8dd6:	2220      	movs	r2, #32
    8dd8:	701a      	strb	r2, [r3, #0]
}
    8dda:	b009      	add	sp, #36	; 0x24
    8ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    8de0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8de4:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    8de6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    8dea:	2202      	movs	r2, #2
    8dec:	f10d 010e 	add.w	r1, sp, #14
    8df0:	e7c6      	b.n	8d80 <mayfly_sched_win_offset_select+0x90>
    8df2:	bf00      	nop
    8df4:	f3af 8000 	nop.w
    8df8:	1afd498d 	.word	0x1afd498d
    8dfc:	00000007 	.word	0x00000007
    8e00:	09ce5400 	.word	0x09ce5400
    8e04:	20000660 	.word	0x20000660

00008e08 <sched_after_mstr_free_slot_get>:
{
    8e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e0c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    8e0e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    8e10:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    8e12:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8f28 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    8e16:	f88d 501f 	strb.w	r5, [sp, #31]
{
    8e1a:	4680      	mov	r8, r0
    8e1c:	4693      	mov	fp, r2
    8e1e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    8e20:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    8e24:	601c      	str	r4, [r3, #0]
    8e26:	9408      	str	r4, [sp, #32]
    8e28:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8e2a:	2302      	movs	r3, #2
    8e2c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8e2e:	ab09      	add	r3, sp, #36	; 0x24
    8e30:	9302      	str	r3, [sp, #8]
    8e32:	4b3b      	ldr	r3, [pc, #236]	; (8f20 <sched_after_mstr_free_slot_get+0x118>)
    8e34:	9301      	str	r3, [sp, #4]
    8e36:	ab08      	add	r3, sp, #32
    8e38:	9300      	str	r3, [sp, #0]
    8e3a:	f10d 021f 	add.w	r2, sp, #31
    8e3e:	465b      	mov	r3, fp
    8e40:	4641      	mov	r1, r8
    8e42:	2000      	movs	r0, #0
    8e44:	f7fd fdee 	bl	6a24 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    8e48:	2802      	cmp	r0, #2
    8e4a:	d00b      	beq.n	8e64 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e4e:	b16b      	cbz	r3, 8e6c <sched_after_mstr_free_slot_get+0x64>
    8e50:	4040      	eors	r0, r0
    8e52:	f380 8811 	msr	BASEPRI, r0
    8e56:	f04f 0004 	mov.w	r0, #4
    8e5a:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    8e5c:	4641      	mov	r1, r8
    8e5e:	2000      	movs	r0, #0
    8e60:	f7fd fe5e 	bl	6b20 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e66:	2b02      	cmp	r3, #2
    8e68:	d0f8      	beq.n	8e5c <sched_after_mstr_free_slot_get+0x54>
    8e6a:	e7ef      	b.n	8e4c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    8e6c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8e70:	2aff      	cmp	r2, #255	; 0xff
    8e72:	d04e      	beq.n	8f12 <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    8e74:	2a06      	cmp	r2, #6
    8e76:	d9d8      	bls.n	8e2a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    8e78:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8e7c:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    8e7e:	429a      	cmp	r2, r3
    8e80:	dad3      	bge.n	8e2a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8e82:	3a07      	subs	r2, #7
    8e84:	b292      	uxth	r2, r2
    8e86:	f44f 71aa 	mov.w	r1, #340	; 0x154
    8e8a:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    8e8e:	f7fc feaf 	bl	5bf0 <mem_get>
		if (conn && !conn->role) {
    8e92:	2800      	cmp	r0, #0
    8e94:	d0c9      	beq.n	8e2a <sched_after_mstr_free_slot_get+0x22>
    8e96:	f990 301d 	ldrsb.w	r3, [r0, #29]
    8e9a:	2b00      	cmp	r3, #0
    8e9c:	dbc5      	blt.n	8e2a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8e9e:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    8ea0:	9a08      	ldr	r2, [sp, #32]
    8ea2:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8ea6:	2b00      	cmp	r3, #0
    8ea8:	da12      	bge.n	8ed0 <sched_after_mstr_free_slot_get+0xc8>
    8eaa:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    8eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8eb0:	4571      	cmp	r1, lr
    8eb2:	bf2c      	ite	cs
    8eb4:	1852      	addcs	r2, r2, r1
    8eb6:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    8eb8:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    8eba:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    8ebc:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    8ebe:	f101 0104 	add.w	r1, r1, #4
    8ec2:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    8ec4:	d108      	bne.n	8ed8 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    8ec6:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    8eca:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    8ecc:	4616      	mov	r6, r2
    8ece:	e7ac      	b.n	8e2a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    8ed0:	4573      	cmp	r3, lr
    8ed2:	bf38      	it	cc
    8ed4:	4673      	movcc	r3, lr
    8ed6:	e7f0      	b.n	8eba <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    8ed8:	4631      	mov	r1, r6
    8eda:	4610      	mov	r0, r2
    8edc:	9305      	str	r3, [sp, #20]
    8ede:	9204      	str	r2, [sp, #16]
    8ee0:	f7fd fe36 	bl	6b50 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    8ee4:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    8ee8:	4288      	cmp	r0, r1
    8eea:	9a04      	ldr	r2, [sp, #16]
    8eec:	9b05      	ldr	r3, [sp, #20]
    8eee:	d9ea      	bls.n	8ec6 <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    8ef0:	480c      	ldr	r0, [pc, #48]	; (8f24 <sched_after_mstr_free_slot_get+0x11c>)
    8ef2:	4434      	add	r4, r6
    8ef4:	fba4 0100 	umull	r0, r1, r4, r0
    8ef8:	2307      	movs	r3, #7
    8efa:	fb03 1104 	mla	r1, r3, r4, r1
    8efe:	a306      	add	r3, pc, #24	; (adr r3, 8f18 <sched_after_mstr_free_slot_get+0x110>)
    8f00:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f04:	f7f7 f986 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    8f08:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    8f0a:	6038      	str	r0, [r7, #0]
}
    8f0c:	b00b      	add	sp, #44	; 0x2c
    8f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    8f12:	2dff      	cmp	r5, #255	; 0xff
    8f14:	d1ec      	bne.n	8ef0 <sched_after_mstr_free_slot_get+0xe8>
    8f16:	e7f9      	b.n	8f0c <sched_after_mstr_free_slot_get+0x104>
    8f18:	3b9aca00 	.word	0x3b9aca00
    8f1c:	00000000 	.word	0x00000000
    8f20:	00008421 	.word	0x00008421
    8f24:	1afd498d 	.word	0x1afd498d
    8f28:	20000660 	.word	0x20000660

00008f2c <isr_adv_ci_adva_check>:
{
    8f2c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    8f2e:	7804      	ldrb	r4, [r0, #0]
    8f30:	780a      	ldrb	r2, [r1, #0]
    8f32:	f3c4 1380 	ubfx	r3, r4, #6, #1
    8f36:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8f3a:	d119      	bne.n	8f70 <isr_adv_ci_adva_check+0x44>
    8f3c:	f004 040f 	and.w	r4, r4, #15
    8f40:	2c01      	cmp	r4, #1
    8f42:	f101 0608 	add.w	r6, r1, #8
    8f46:	f100 0502 	add.w	r5, r0, #2
    8f4a:	d008      	beq.n	8f5e <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    8f4c:	2206      	movs	r2, #6
    8f4e:	4631      	mov	r1, r6
    8f50:	4628      	mov	r0, r5
    8f52:	f7f8 fe64 	bl	1c1e <memcmp>
			 BDADDR_SIZE)) ||
    8f56:	fab0 f080 	clz	r0, r0
    8f5a:	0940      	lsrs	r0, r0, #5
    8f5c:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    8f5e:	2206      	movs	r2, #6
    8f60:	4631      	mov	r1, r6
    8f62:	4628      	mov	r0, r5
    8f64:	f7f8 fe5b 	bl	1c1e <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    8f68:	2800      	cmp	r0, #0
    8f6a:	d1ef      	bne.n	8f4c <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    8f6c:	4620      	mov	r0, r4
    8f6e:	bd70      	pop	{r4, r5, r6, pc}
    8f70:	2000      	movs	r0, #0
}
    8f72:	bd70      	pop	{r4, r5, r6, pc}

00008f74 <isr_scan_tgta_check>:
{
    8f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f78:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    8f7a:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    8f7c:	f101 0808 	add.w	r8, r1, #8
{
    8f80:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    8f82:	09c0      	lsrs	r0, r0, #7
    8f84:	4641      	mov	r1, r8
{
    8f86:	4691      	mov	r9, r2
    8f88:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    8f8a:	f006 faa1 	bl	f4d0 <ctrl_rl_addr_resolve>
    8f8e:	4604      	mov	r4, r0
    8f90:	b9d8      	cbnz	r0, 8fca <isr_scan_tgta_check+0x56>
    8f92:	4f1c      	ldr	r7, [pc, #112]	; (9004 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    8f94:	f1ba 0f00 	cmp.w	sl, #0
    8f98:	d10e      	bne.n	8fb8 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    8f9a:	782b      	ldrb	r3, [r5, #0]
    8f9c:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    8fa0:	09db      	lsrs	r3, r3, #7
    8fa2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8fa6:	d113      	bne.n	8fd0 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    8fa8:	2206      	movs	r2, #6
    8faa:	4641      	mov	r1, r8
    8fac:	4816      	ldr	r0, [pc, #88]	; (9008 <isr_scan_tgta_check+0x94>)
    8fae:	f7f8 fe36 	bl	1c1e <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    8fb2:	b968      	cbnz	r0, 8fd0 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    8fb4:	2001      	movs	r0, #1
    8fb6:	e012      	b.n	8fde <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    8fb8:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    8fbc:	07db      	lsls	r3, r3, #31
    8fbe:	d5ec      	bpl.n	8f9a <isr_scan_tgta_check+0x26>
    8fc0:	4648      	mov	r0, r9
    8fc2:	f006 f889 	bl	f0d8 <ctrl_lrpa_get>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	d0e7      	beq.n	8f9a <isr_scan_tgta_check+0x26>
}
    8fca:	4620      	mov	r0, r4
    8fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    8fd0:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    8fd4:	f3c0 1001 	ubfx	r0, r0, #4, #2
    8fd8:	f010 0002 	ands.w	r0, r0, #2
    8fdc:	d101      	bne.n	8fe2 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    8fde:	4604      	mov	r4, r0
    8fe0:	e7f3      	b.n	8fca <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    8fe2:	f995 3000 	ldrsb.w	r3, [r5]
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	da09      	bge.n	8ffe <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    8fea:	7b6b      	ldrb	r3, [r5, #13]
    8fec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8ff0:	2b40      	cmp	r3, #64	; 0x40
    8ff2:	d104      	bne.n	8ffe <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    8ff4:	2e00      	cmp	r6, #0
    8ff6:	d0dd      	beq.n	8fb4 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    8ff8:	2001      	movs	r0, #1
    8ffa:	7030      	strb	r0, [r6, #0]
    8ffc:	e7ef      	b.n	8fde <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    8ffe:	2000      	movs	r0, #0
    9000:	e7ed      	b.n	8fde <isr_scan_tgta_check+0x6a>
    9002:	bf00      	nop
    9004:	20000660 	.word	0x20000660
    9008:	20000744 	.word	0x20000744

0000900c <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    900c:	4a0b      	ldr	r2, [pc, #44]	; (903c <rx_fc_lock+0x30>)
    900e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    9012:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    9016:	4299      	cmp	r1, r3
    9018:	d10e      	bne.n	9038 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    901a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    901e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    9022:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    9026:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    902a:	3301      	adds	r3, #1
    902c:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    902e:	2b03      	cmp	r3, #3
    9030:	bf08      	it	eq
    9032:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    9034:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    9038:	4770      	bx	lr
    903a:	bf00      	nop
    903c:	20000660 	.word	0x20000660

00009040 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    9040:	4b04      	ldr	r3, [pc, #16]	; (9054 <ticker_job_disable+0x14>)
    9042:	7d1b      	ldrb	r3, [r3, #20]
    9044:	b123      	cbz	r3, 9050 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    9046:	2101      	movs	r1, #1
    9048:	2200      	movs	r2, #0
    904a:	4608      	mov	r0, r1
    904c:	f7fc be3e 	b.w	5ccc <mayfly_enable>
    9050:	4770      	bx	lr
    9052:	bf00      	nop
    9054:	20000660 	.word	0x20000660

00009058 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9058:	2806      	cmp	r0, #6
{
    905a:	b510      	push	{r4, lr}
    905c:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    905e:	d90a      	bls.n	9076 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9060:	4b09      	ldr	r3, [pc, #36]	; (9088 <hdr_conn_get+0x30>)
    9062:	1fc2      	subs	r2, r0, #7
    9064:	b292      	uxth	r2, r2
    9066:	f44f 71aa 	mov.w	r1, #340	; 0x154
    906a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    906e:	f7fc fdbf 	bl	5bf0 <mem_get>
    9072:	6020      	str	r0, [r4, #0]
    9074:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    9076:	2805      	cmp	r0, #5
    9078:	d004      	beq.n	9084 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    907a:	2806      	cmp	r0, #6
	return NULL;
    907c:	4803      	ldr	r0, [pc, #12]	; (908c <hdr_conn_get+0x34>)
    907e:	bf18      	it	ne
    9080:	2000      	movne	r0, #0
    9082:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    9084:	4802      	ldr	r0, [pc, #8]	; (9090 <hdr_conn_get+0x38>)
}
    9086:	bd10      	pop	{r4, pc}
    9088:	20000660 	.word	0x20000660
    908c:	20000730 	.word	0x20000730
    9090:	20000678 	.word	0x20000678

00009094 <mayfly_xtal_retain.part.13>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    9094:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    9096:	4b0a      	ldr	r3, [pc, #40]	; (90c0 <mayfly_xtal_retain.part.13+0x2c>)
    9098:	2200      	movs	r2, #0
    909a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    909c:	b168      	cbz	r0, 90ba <mayfly_xtal_retain.part.13+0x26>
    909e:	2801      	cmp	r0, #1
    90a0:	d105      	bne.n	90ae <mayfly_xtal_retain.part.13+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    90a2:	4b08      	ldr	r3, [pc, #32]	; (90c4 <mayfly_xtal_retain.part.13+0x30>)
			retval = mayfly_enqueue(caller_id,
    90a4:	2200      	movs	r2, #0
    90a6:	4611      	mov	r1, r2
    90a8:	f7fc fe38 	bl	5d1c <mayfly_enqueue>
			LL_ASSERT(!retval);
    90ac:	b138      	cbz	r0, 90be <mayfly_xtal_retain.part.13+0x2a>
    90ae:	4040      	eors	r0, r0
    90b0:	f380 8811 	msr	BASEPRI, r0
    90b4:	f04f 0004 	mov.w	r0, #4
    90b8:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    90ba:	4b03      	ldr	r3, [pc, #12]	; (90c8 <mayfly_xtal_retain.part.13+0x34>)
    90bc:	e7f2      	b.n	90a4 <mayfly_xtal_retain.part.13+0x10>
    90be:	bd08      	pop	{r3, pc}
    90c0:	20000860 	.word	0x20000860
    90c4:	20003800 	.word	0x20003800
    90c8:	200037f0 	.word	0x200037f0

000090cc <chan_set.part.19>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    90cc:	4040      	eors	r0, r0
    90ce:	f380 8811 	msr	BASEPRI, r0
    90d2:	f04f 0004 	mov.w	r0, #4
    90d6:	df02      	svc	2

000090d8 <prepare_normal_set>:
{
    90d8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    90da:	6804      	ldr	r4, [r0, #0]
    90dc:	2c00      	cmp	r4, #0
{
    90de:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    90e0:	da19      	bge.n	9116 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    90e2:	6843      	ldr	r3, [r0, #4]
    90e4:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    90e6:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    90e8:	429d      	cmp	r5, r3
    90ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    90ee:	bf34      	ite	cc
    90f0:	1ae4      	subcc	r4, r4, r3
    90f2:	1b64      	subcs	r4, r4, r5
		ticker_status =
    90f4:	4b09      	ldr	r3, [pc, #36]	; (911c <prepare_normal_set+0x44>)
    90f6:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    90f8:	b2a4      	uxth	r4, r4
		ticker_status =
    90fa:	2300      	movs	r3, #0
    90fc:	9304      	str	r3, [sp, #16]
    90fe:	9303      	str	r3, [sp, #12]
    9100:	9302      	str	r3, [sp, #8]
    9102:	4618      	mov	r0, r3
    9104:	9401      	str	r4, [sp, #4]
    9106:	9400      	str	r4, [sp, #0]
    9108:	f7fd fc02 	bl	6910 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    910c:	f030 0302 	bics.w	r3, r0, #2
    9110:	d001      	beq.n	9116 <prepare_normal_set+0x3e>
    9112:	f7ff ffdb 	bl	90cc <chan_set.part.19>
}
    9116:	b009      	add	sp, #36	; 0x24
    9118:	bd30      	pop	{r4, r5, pc}
    911a:	bf00      	nop
    911c:	00008431 	.word	0x00008431

00009120 <terminate_ind_rx_enqueue>:
{
    9120:	b510      	push	{r4, lr}
    9122:	4603      	mov	r3, r0
    9124:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    9126:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    912a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    912e:	b908      	cbnz	r0, 9134 <terminate_ind_rx_enqueue+0x14>
    9130:	f7ff ffcc 	bl	90cc <chan_set.part.19>
	node_rx->hdr.handle = conn->handle;
    9134:	8c1c      	ldrh	r4, [r3, #32]
    9136:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    913a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    913e:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9140:	4a0a      	ldr	r2, [pc, #40]	; (916c <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    9142:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9146:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    914a:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    914e:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    9152:	f7fc fd72 	bl	5c3a <memq_enqueue>
	LL_ASSERT(link);
    9156:	b928      	cbnz	r0, 9164 <terminate_ind_rx_enqueue+0x44>
    9158:	4040      	eors	r0, r0
    915a:	f380 8811 	msr	BASEPRI, r0
    915e:	f04f 0004 	mov.w	r0, #4
    9162:	df02      	svc	2
}
    9164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    9168:	f005 bdde 	b.w	ed28 <radio_event_callback>
    916c:	20000660 	.word	0x20000660

00009170 <packet_rx_enqueue>:
{
    9170:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    9172:	4a16      	ldr	r2, [pc, #88]	; (91cc <packet_rx_enqueue+0x5c>)
    9174:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    9178:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    917c:	4299      	cmp	r1, r3
    917e:	d101      	bne.n	9184 <packet_rx_enqueue+0x14>
    9180:	f7ff ffa4 	bl	90cc <chan_set.part.19>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    9184:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    9188:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    918c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9190:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    9194:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9196:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    9198:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    919c:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    91a0:	3301      	adds	r3, #1
    91a2:	b2db      	uxtb	r3, r3
		last = 0;
    91a4:	429c      	cmp	r4, r3
    91a6:	bf08      	it	eq
    91a8:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    91aa:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    91ae:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    91b2:	f7fc fd42 	bl	5c3a <memq_enqueue>
	LL_ASSERT(link);
    91b6:	b928      	cbnz	r0, 91c4 <packet_rx_enqueue+0x54>
    91b8:	4040      	eors	r0, r0
    91ba:	f380 8811 	msr	BASEPRI, r0
    91be:	f04f 0004 	mov.w	r0, #4
    91c2:	df02      	svc	2
}
    91c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    91c8:	f005 bdae 	b.w	ed28 <radio_event_callback>
    91cc:	20000660 	.word	0x20000660

000091d0 <isr_rx_scan_report>:
{
    91d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    91d4:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    91d6:	2003      	movs	r0, #3
{
    91d8:	460f      	mov	r7, r1
    91da:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    91dc:	f7ff f960 	bl	84a0 <packet_rx_reserve_get>
	if (node_rx == 0) {
    91e0:	4604      	mov	r4, r0
    91e2:	b3a0      	cbz	r0, 924e <isr_rx_scan_report+0x7e>
	node_rx->hdr.handle = 0xffff;
    91e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    91e8:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    91ea:	4b1a      	ldr	r3, [pc, #104]	; (9254 <isr_rx_scan_report+0x84>)
    91ec:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    91f0:	075a      	lsls	r2, r3, #29
    91f2:	d028      	beq.n	9246 <isr_rx_scan_report+0x76>
		switch (_radio.scanner.phy) {
    91f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    91f8:	b2da      	uxtb	r2, r3
    91fa:	2a01      	cmp	r2, #1
    91fc:	d007      	beq.n	920e <isr_rx_scan_report+0x3e>
    91fe:	2a04      	cmp	r2, #4
    9200:	d006      	beq.n	9210 <isr_rx_scan_report+0x40>
			LL_ASSERT(0);
    9202:	4040      	eors	r0, r0
    9204:	f380 8811 	msr	BASEPRI, r0
    9208:	f04f 0004 	mov.w	r0, #4
    920c:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    920e:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    9210:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    9214:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    9216:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    921a:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    921e:	f1b9 0f00 	cmp.w	r9, #0
    9222:	d012      	beq.n	924a <isr_rx_scan_report+0x7a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    9224:	f006 feb8 	bl	ff98 <radio_rssi_get>
			     pdu_adv_rx->len] =
    9228:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    922c:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    9230:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    9232:	442b      	add	r3, r5
    9234:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    9236:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    9238:	441d      	add	r5, r3
    923a:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    923c:	f7ff ff98 	bl	9170 <packet_rx_enqueue>
	return 0;
    9240:	2000      	movs	r0, #0
    9242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    9246:	2302      	movs	r3, #2
    9248:	e7e2      	b.n	9210 <isr_rx_scan_report+0x40>
			     pdu_adv_rx->len] =
    924a:	207f      	movs	r0, #127	; 0x7f
    924c:	e7ee      	b.n	922c <isr_rx_scan_report+0x5c>
		return 1;
    924e:	2001      	movs	r0, #1
}
    9250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9254:	20000660 	.word	0x20000660

00009258 <sched_after_mstr_free_offset_get>:
{
    9258:	b573      	push	{r0, r1, r4, r5, r6, lr}
    925a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    925c:	aa02      	add	r2, sp, #8
{
    925e:	461c      	mov	r4, r3
    9260:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    9262:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    9266:	3127      	adds	r1, #39	; 0x27
    9268:	2001      	movs	r0, #1
    926a:	f7ff fdcd 	bl	8e08 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    926e:	6823      	ldr	r3, [r4, #0]
    9270:	b1fb      	cbz	r3, 92b2 <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    9272:	9801      	ldr	r0, [sp, #4]
    9274:	1b83      	subs	r3, r0, r6
    9276:	021b      	lsls	r3, r3, #8
    9278:	d501      	bpl.n	927e <sched_after_mstr_free_offset_get+0x26>
    927a:	f7ff ff27 	bl	90cc <chan_set.part.19>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    927e:	4631      	mov	r1, r6
    9280:	f7fd fc66 	bl	6b50 <ticker_ticks_diff_get>
    9284:	4602      	mov	r2, r0
    9286:	4810      	ldr	r0, [pc, #64]	; (92c8 <sched_after_mstr_free_offset_get+0x70>)
    9288:	2307      	movs	r3, #7
    928a:	fba2 0100 	umull	r0, r1, r2, r0
    928e:	fb03 1102 	mla	r1, r3, r2, r1
    9292:	a30b      	add	r3, pc, #44	; (adr r3, 92c0 <sched_after_mstr_free_offset_get+0x68>)
    9294:	e9d3 2300 	ldrd	r2, r3, [r3]
    9298:	f7f6 ffbc 	bl	214 <__aeabi_uldivmod>
    929c:	6823      	ldr	r3, [r4, #0]
    929e:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    92a0:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    92a2:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    92a4:	db05      	blt.n	92b2 <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    92a6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    92aa:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    92ac:	6823      	ldr	r3, [r4, #0]
    92ae:	4298      	cmp	r0, r3
    92b0:	d301      	bcc.n	92b6 <sched_after_mstr_free_offset_get+0x5e>
}
    92b2:	b002      	add	sp, #8
    92b4:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    92b6:	1a1b      	subs	r3, r3, r0
    92b8:	6023      	str	r3, [r4, #0]
    92ba:	e7f7      	b.n	92ac <sched_after_mstr_free_offset_get+0x54>
    92bc:	f3af 8000 	nop.w
    92c0:	3b9aca00 	.word	0x3b9aca00
    92c4:	00000000 	.word	0x00000000
    92c8:	1afd498d 	.word	0x1afd498d

000092cc <mayfly_sched_win_offset_use>:
{
    92cc:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    92ce:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    92d2:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    92d4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    92d8:	68c1      	ldr	r1, [r0, #12]
    92da:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    92dc:	f7ff ffbc 	bl	9258 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    92e0:	a902      	add	r1, sp, #8
    92e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    92e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    92ea:	f240 42e2 	movw	r2, #1250	; 0x4e2
    92ee:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    92f2:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    92f4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    92f8:	f7f8 fca6 	bl	1c48 <memcpy>
}
    92fc:	b002      	add	sp, #8
    92fe:	bd10      	pop	{r4, pc}

00009300 <mayfly_sched_after_mstr_free_offset_get>:
{
    9300:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    9302:	4c05      	ldr	r4, [pc, #20]	; (9318 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    9304:	4602      	mov	r2, r0
    9306:	f504 7382 	add.w	r3, r4, #260	; 0x104
    930a:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    930e:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    9312:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    9314:	f7ff bfa0 	b.w	9258 <sched_after_mstr_free_offset_get>
    9318:	20000660 	.word	0x20000660

0000931c <chan_set>:
	switch (chan) {
    931c:	2826      	cmp	r0, #38	; 0x26
{
    931e:	b510      	push	{r4, lr}
    9320:	4604      	mov	r4, r0
	switch (chan) {
    9322:	d00b      	beq.n	933c <chan_set+0x20>
    9324:	2827      	cmp	r0, #39	; 0x27
    9326:	d00b      	beq.n	9340 <chan_set+0x24>
    9328:	2825      	cmp	r0, #37	; 0x25
    932a:	d10b      	bne.n	9344 <chan_set+0x28>
		radio_freq_chan_set(2);
    932c:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    932e:	f006 fd27 	bl	fd80 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    9332:	4620      	mov	r0, r4
}
    9334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    9338:	f006 bd28 	b.w	fd8c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    933c:	201a      	movs	r0, #26
    933e:	e7f6      	b.n	932e <chan_set+0x12>
		radio_freq_chan_set(80);
    9340:	2050      	movs	r0, #80	; 0x50
    9342:	e7f4      	b.n	932e <chan_set+0x12>
		if (chan < 11) {
    9344:	280a      	cmp	r0, #10
    9346:	d802      	bhi.n	934e <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
    9348:	3002      	adds	r0, #2
    934a:	0040      	lsls	r0, r0, #1
    934c:	e7ef      	b.n	932e <chan_set+0x12>
		} else if (chan < 40) {
    934e:	2827      	cmp	r0, #39	; 0x27
    9350:	d801      	bhi.n	9356 <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    9352:	3003      	adds	r0, #3
    9354:	e7f9      	b.n	934a <chan_set+0x2e>
    9356:	f7ff feb9 	bl	90cc <chan_set.part.19>
	...

0000935c <adv_setup>:
{
    935c:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    935e:	4c31      	ldr	r4, [pc, #196]	; (9424 <adv_setup+0xc8>)
    9360:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    9364:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    9368:	429a      	cmp	r2, r3
    936a:	d051      	beq.n	9410 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    936c:	3301      	adds	r3, #1
    936e:	b2db      	uxtb	r3, r3
			first = 0;
    9370:	2b02      	cmp	r3, #2
    9372:	bf08      	it	eq
    9374:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    9376:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    937a:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    937c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    9380:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    9384:	4299      	cmp	r1, r3
    9386:	d007      	beq.n	9398 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    9388:	3301      	adds	r3, #1
    938a:	b2db      	uxtb	r3, r3
			first = 0;
    938c:	2b02      	cmp	r3, #2
    938e:	bf08      	it	eq
    9390:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    9392:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    9396:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    9398:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    939c:	2327      	movs	r3, #39	; 0x27
    939e:	212b      	movs	r1, #43	; 0x2b
    93a0:	fb13 1505 	smlabb	r5, r3, r5, r1
    93a4:	1966      	adds	r6, r4, r5
	if (upd) {
    93a6:	b142      	cbz	r2, 93ba <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    93a8:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    93ac:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    93b0:	2206      	movs	r2, #6
    93b2:	1cb1      	adds	r1, r6, #2
    93b4:	307d      	adds	r0, #125	; 0x7d
    93b6:	f7f8 fc47 	bl	1c48 <memcpy>
	radio_pkt_tx_set(pdu);
    93ba:	4630      	mov	r0, r6
    93bc:	f006 fd44 	bl	fe48 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    93c0:	5d63      	ldrb	r3, [r4, r5]
    93c2:	f003 030f 	and.w	r3, r3, #15
    93c6:	2b02      	cmp	r3, #2
    93c8:	d024      	beq.n	9414 <adv_setup+0xb8>
    93ca:	2b07      	cmp	r3, #7
    93cc:	d022      	beq.n	9414 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    93ce:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    93d0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    93d2:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    93d4:	f006 fe4e 	bl	10074 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    93d8:	2000      	movs	r0, #0
    93da:	f006 fdaf 	bl	ff3c <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    93de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    93e2:	f3c3 0202 	ubfx	r2, r3, #0, #3
    93e6:	b2d3      	uxtb	r3, r2
    93e8:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    93ea:	2000      	movs	r0, #0
    93ec:	07ce      	lsls	r6, r1, #31
    93ee:	f100 0501 	add.w	r5, r0, #1
    93f2:	d514      	bpl.n	941e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    93f4:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    93f6:	4013      	ands	r3, r2
    93f8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    93fc:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    93fe:	f363 0202 	bfi	r2, r3, #0, #3
    9402:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    9406:	3025      	adds	r0, #37	; 0x25
}
    9408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    940c:	f7ff bf86 	b.w	931c <chan_set>
	u8_t upd = 0;
    9410:	2200      	movs	r2, #0
    9412:	e7b3      	b.n	937c <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    9414:	2303      	movs	r3, #3
    9416:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    9418:	f006 fda6 	bl	ff68 <radio_switch_complete_and_disable>
    941c:	e7df      	b.n	93de <adv_setup+0x82>
		bitmap >>= 1;
    941e:	0849      	lsrs	r1, r1, #1
    9420:	4628      	mov	r0, r5
    9422:	e7e3      	b.n	93ec <adv_setup+0x90>
    9424:	20000660 	.word	0x20000660

00009428 <pdu_node_tx_release>:
{
    9428:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    942a:	4a10      	ldr	r2, [pc, #64]	; (946c <pdu_node_tx_release+0x44>)
    942c:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    9430:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    9434:	3301      	adds	r3, #1
    9436:	b2db      	uxtb	r3, r3
		last = 0;
    9438:	429c      	cmp	r4, r3
    943a:	bf08      	it	eq
    943c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    943e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    9442:	429c      	cmp	r4, r3
    9444:	d101      	bne.n	944a <pdu_node_tx_release+0x22>
    9446:	f7ff fe41 	bl	90cc <chan_set.part.19>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    944a:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    944e:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    9452:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    9456:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    945a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    945e:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    9460:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    9464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    9468:	f005 bc5e 	b.w	ed28 <radio_event_callback>
    946c:	20000660 	.word	0x20000660

00009470 <packet_tx_enqueue>:
{
    9470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    9474:	4c24      	ldr	r4, [pc, #144]	; (9508 <packet_tx_enqueue+0x98>)
{
    9476:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    9478:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    947a:	b12e      	cbz	r6, 9488 <packet_tx_enqueue+0x18>
    947c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    9480:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    9484:	429a      	cmp	r2, r3
    9486:	d101      	bne.n	948c <packet_tx_enqueue+0x1c>
    9488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    948c:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    9490:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9494:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9498:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    949c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    94a0:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    94a4:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    94a6:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    94a8:	f7fc fba2 	bl	5bf0 <mem_get>
    94ac:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    94ae:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    94b2:	8c1a      	ldrh	r2, [r3, #32]
    94b4:	4282      	cmp	r2, r0
    94b6:	d11f      	bne.n	94f8 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    94b8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    94bc:	b942      	cbnz	r2, 94d0 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    94be:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    94c2:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    94c6:	b91a      	cbnz	r2, 94d0 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    94c8:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    94cc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    94d0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    94d4:	b102      	cbz	r2, 94d8 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    94d6:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    94d8:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    94dc:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    94e0:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    94e4:	3301      	adds	r3, #1
    94e6:	b2db      	uxtb	r3, r3
			first = 0;
    94e8:	429a      	cmp	r2, r3
    94ea:	bf08      	it	eq
    94ec:	2300      	moveq	r3, #0
    94ee:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    94f0:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    94f4:	b2f6      	uxtb	r6, r6
    94f6:	e7c0      	b.n	947a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    94f8:	792b      	ldrb	r3, [r5, #4]
    94fa:	f367 0301 	bfi	r3, r7, #0, #2
    94fe:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    9500:	4629      	mov	r1, r5
    9502:	f7ff ff91 	bl	9428 <pdu_node_tx_release>
    9506:	e7e9      	b.n	94dc <packet_tx_enqueue+0x6c>
    9508:	20000660 	.word	0x20000660

0000950c <connection_release>:
{
    950c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    950e:	2201      	movs	r2, #1
{
    9510:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    9512:	4611      	mov	r1, r2
    9514:	2000      	movs	r0, #0
    9516:	f7fc fbd9 	bl	5ccc <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    951a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    951e:	2100      	movs	r1, #0
    9520:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9524:	3207      	adds	r2, #7
	ticker_status =
    9526:	9300      	str	r3, [sp, #0]
    9528:	4608      	mov	r0, r1
    952a:	4b3a      	ldr	r3, [pc, #232]	; (9614 <connection_release+0x108>)
    952c:	b2d2      	uxtb	r2, r2
    952e:	f7fd fa3d 	bl	69ac <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9532:	f030 0102 	bics.w	r1, r0, #2
    9536:	d005      	beq.n	9544 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9538:	4040      	eors	r0, r0
    953a:	f380 8811 	msr	BASEPRI, r0
    953e:	f04f 0004 	mov.w	r0, #4
    9542:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    9544:	4b34      	ldr	r3, [pc, #208]	; (9618 <connection_release+0x10c>)
    9546:	7d1a      	ldrb	r2, [r3, #20]
    9548:	2a05      	cmp	r2, #5
    954a:	461d      	mov	r5, r3
    954c:	d11b      	bne.n	9586 <connection_release+0x7a>
					  conn->handle))) {
    954e:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    9550:	7c18      	ldrb	r0, [r3, #16]
    9552:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    9554:	4290      	cmp	r0, r2
    9556:	d116      	bne.n	9586 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    9558:	7419      	strb	r1, [r3, #16]
		ticker_status =
    955a:	f242 23fb 	movw	r3, #8955	; 0x22fb
    955e:	9300      	str	r3, [sp, #0]
    9560:	2201      	movs	r2, #1
    9562:	4b2c      	ldr	r3, [pc, #176]	; (9614 <connection_release+0x108>)
    9564:	4608      	mov	r0, r1
    9566:	f7fd fa21 	bl	69ac <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    956a:	f030 0202 	bics.w	r2, r0, #2
    956e:	d1e3      	bne.n	9538 <connection_release+0x2c>
		ticker_status =
    9570:	f242 3302 	movw	r3, #8962	; 0x2302
    9574:	9300      	str	r3, [sp, #0]
    9576:	4611      	mov	r1, r2
    9578:	4b26      	ldr	r3, [pc, #152]	; (9614 <connection_release+0x108>)
    957a:	4610      	mov	r0, r2
    957c:	f7fd fa16 	bl	69ac <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9580:	f030 0302 	bics.w	r3, r0, #2
    9584:	d1d8      	bne.n	9538 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    9586:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    958a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    958e:	4299      	cmp	r1, r3
    9590:	d003      	beq.n	959a <connection_release+0x8e>
    9592:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    9596:	4299      	cmp	r1, r3
    9598:	d101      	bne.n	959e <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    959a:	4e20      	ldr	r6, [pc, #128]	; (961c <connection_release+0x110>)
    959c:	e012      	b.n	95c4 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    959e:	790b      	ldrb	r3, [r1, #4]
    95a0:	f36f 0301 	bfc	r3, #0, #2
    95a4:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    95a6:	680b      	ldr	r3, [r1, #0]
    95a8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    95ac:	8c20      	ldrh	r0, [r4, #32]
    95ae:	f7ff ff3b 	bl	9428 <pdu_node_tx_release>
    95b2:	e7e8      	b.n	9586 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    95b4:	6803      	ldr	r3, [r0, #0]
    95b6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    95ba:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    95be:	4631      	mov	r1, r6
    95c0:	f7fc fafb 	bl	5bba <mem_release>
	while ((conn->pkt_tx_head) &&
    95c4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    95c8:	b118      	cbz	r0, 95d2 <connection_release+0xc6>
    95ca:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    95ce:	4298      	cmp	r0, r3
    95d0:	d1f0      	bne.n	95b4 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    95d2:	2300      	movs	r3, #0
    95d4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    95d8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    95dc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    95e0:	b951      	cbnz	r1, 95f8 <connection_release+0xec>
	conn->handle = 0xffff;
    95e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    95e6:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    95e8:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    95ec:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    95ee:	bf08      	it	eq
    95f0:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    95f4:	b002      	add	sp, #8
    95f6:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    95f8:	790b      	ldrb	r3, [r1, #4]
    95fa:	f36f 0301 	bfc	r3, #0, #2
    95fe:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    9600:	680b      	ldr	r3, [r1, #0]
    9602:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    9606:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    960a:	8c20      	ldrh	r0, [r4, #32]
    960c:	f7ff ff0c 	bl	9428 <pdu_node_tx_release>
    9610:	e7e4      	b.n	95dc <connection_release+0xd0>
    9612:	bf00      	nop
    9614:	0000978d 	.word	0x0000978d
    9618:	20000660 	.word	0x20000660
    961c:	200007bc 	.word	0x200007bc

00009620 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    9620:	b2c0      	uxtb	r0, r0
{
    9622:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    9624:	1f03      	subs	r3, r0, #4
    9626:	2b01      	cmp	r3, #1
    9628:	d901      	bls.n	962e <mayfly_radio_stop+0xe>
    962a:	f7ff fd4f 	bl	90cc <chan_set.part.19>
	radio_used = ((_radio.state != STATE_NONE) &&
    962e:	4a08      	ldr	r2, [pc, #32]	; (9650 <mayfly_radio_stop+0x30>)
    9630:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    9632:	b13b      	cbz	r3, 9644 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    9634:	3b04      	subs	r3, #4
    9636:	2b01      	cmp	r3, #1
    9638:	d904      	bls.n	9644 <mayfly_radio_stop+0x24>
			_radio.state = state;
    963a:	7510      	strb	r0, [r2, #20]
}
    963c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    9640:	f006 bc22 	b.w	fe88 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    9644:	f006 fc52 	bl	feec <radio_is_idle>
    9648:	2800      	cmp	r0, #0
    964a:	d0f7      	beq.n	963c <mayfly_radio_stop+0x1c>
}
    964c:	bd08      	pop	{r3, pc}
    964e:	bf00      	nop
    9650:	20000660 	.word	0x20000660

00009654 <mayfly_radio_active>:
{
    9654:	b508      	push	{r3, lr}
    9656:	4a0a      	ldr	r2, [pc, #40]	; (9680 <mayfly_radio_active+0x2c>)
		if (s_active++) {
    9658:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    965a:	b138      	cbz	r0, 966c <mayfly_radio_active+0x18>
		if (s_active++) {
    965c:	1c59      	adds	r1, r3, #1
    965e:	7011      	strb	r1, [r2, #0]
    9660:	b963      	cbnz	r3, 967c <mayfly_radio_active+0x28>
		radio_active_callback(1);
    9662:	2001      	movs	r0, #1
}
    9664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    9668:	f005 bb5c 	b.w	ed24 <radio_active_callback>
		LL_ASSERT(s_active);
    966c:	b90b      	cbnz	r3, 9672 <mayfly_radio_active+0x1e>
    966e:	f7ff fd2d 	bl	90cc <chan_set.part.19>
		if (--s_active) {
    9672:	3b01      	subs	r3, #1
    9674:	b2db      	uxtb	r3, r3
    9676:	7013      	strb	r3, [r2, #0]
    9678:	2b00      	cmp	r3, #0
    967a:	d0f3      	beq.n	9664 <mayfly_radio_active+0x10>
    967c:	bd08      	pop	{r3, pc}
    967e:	bf00      	nop
    9680:	20000804 	.word	0x20000804

00009684 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    9684:	2000      	movs	r0, #0
    9686:	f7ff bfe5 	b.w	9654 <mayfly_radio_active>
	...

0000968c <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    968c:	2200      	movs	r2, #0
{
    968e:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9690:	4611      	mov	r1, r2
    9692:	4b04      	ldr	r3, [pc, #16]	; (96a4 <event_xtal+0x18>)
    9694:	4610      	mov	r0, r2
    9696:	f7fc fb41 	bl	5d1c <mayfly_enqueue>
	LL_ASSERT(!retval);
    969a:	b108      	cbz	r0, 96a0 <event_xtal+0x14>
    969c:	f7ff fd16 	bl	90cc <chan_set.part.19>
    96a0:	bd08      	pop	{r3, pc}
    96a2:	bf00      	nop
    96a4:	200037d0 	.word	0x200037d0

000096a8 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    96a8:	2200      	movs	r2, #0
{
    96aa:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    96ac:	4611      	mov	r1, r2
    96ae:	4b04      	ldr	r3, [pc, #16]	; (96c0 <event_active+0x18>)
    96b0:	4610      	mov	r0, r2
    96b2:	f7fc fb33 	bl	5d1c <mayfly_enqueue>
	LL_ASSERT(!retval);
    96b6:	b108      	cbz	r0, 96bc <event_active+0x14>
    96b8:	f7ff fd08 	bl	90cc <chan_set.part.19>
    96bc:	bd08      	pop	{r3, pc}
    96be:	bf00      	nop
    96c0:	20003750 	.word	0x20003750

000096c4 <event_stop>:
	s_mfy_radio_stop.param = context;
    96c4:	4a06      	ldr	r2, [pc, #24]	; (96e0 <event_stop+0x1c>)
{
    96c6:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    96c8:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    96ca:	4613      	mov	r3, r2
    96cc:	2200      	movs	r2, #0
    96ce:	4611      	mov	r1, r2
    96d0:	4610      	mov	r0, r2
    96d2:	f7fc fb23 	bl	5d1c <mayfly_enqueue>
	LL_ASSERT(!retval);
    96d6:	b108      	cbz	r0, 96dc <event_stop+0x18>
    96d8:	f7ff fcf8 	bl	90cc <chan_set.part.19>
    96dc:	bd08      	pop	{r3, pc}
    96de:	bf00      	nop
    96e0:	20003780 	.word	0x20003780

000096e4 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    96e4:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    96e6:	b108      	cbz	r0, 96ec <ticker_op_latency_cancelled+0x8>
    96e8:	f7ff fcf0 	bl	90cc <chan_set.part.19>

	conn->slave.latency_cancel = 0;
    96ec:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    96f0:	f360 0341 	bfi	r3, r0, #1, #1
    96f4:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    96f8:	bd08      	pop	{r3, pc}
	...

000096fc <ticker_update_slave_assert>:
{
    96fc:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    96fe:	b130      	cbz	r0, 970e <ticker_update_slave_assert+0x12>
    9700:	4b03      	ldr	r3, [pc, #12]	; (9710 <ticker_update_slave_assert+0x14>)
    9702:	7c9b      	ldrb	r3, [r3, #18]
    9704:	b2c9      	uxtb	r1, r1
    9706:	4299      	cmp	r1, r3
    9708:	d001      	beq.n	970e <ticker_update_slave_assert+0x12>
    970a:	f7ff fcdf 	bl	90cc <chan_set.part.19>
    970e:	bd08      	pop	{r3, pc}
    9710:	20000660 	.word	0x20000660

00009714 <ticker_update_adv_assert>:
{
    9714:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    9716:	b128      	cbz	r0, 9724 <ticker_update_adv_assert+0x10>
    9718:	4b03      	ldr	r3, [pc, #12]	; (9728 <ticker_update_adv_assert+0x14>)
    971a:	7c9b      	ldrb	r3, [r3, #18]
    971c:	2b05      	cmp	r3, #5
    971e:	d001      	beq.n	9724 <ticker_update_adv_assert+0x10>
    9720:	f7ff fcd4 	bl	90cc <chan_set.part.19>
    9724:	bd08      	pop	{r3, pc}
    9726:	bf00      	nop
    9728:	20000660 	.word	0x20000660

0000972c <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    972c:	2801      	cmp	r0, #1
{
    972e:	b508      	push	{r3, lr}
    9730:	4b09      	ldr	r3, [pc, #36]	; (9758 <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    9732:	d107      	bne.n	9744 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    9734:	7c9a      	ldrb	r2, [r3, #18]
    9736:	2a06      	cmp	r2, #6
    9738:	d102      	bne.n	9740 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    973a:	2200      	movs	r2, #0
    973c:	749a      	strb	r2, [r3, #18]
    973e:	bd08      	pop	{r3, pc}
    9740:	f7ff fcc4 	bl	90cc <chan_set.part.19>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    9744:	7c1b      	ldrb	r3, [r3, #16]
    9746:	2b06      	cmp	r3, #6
    9748:	d105      	bne.n	9756 <ticker_stop_scan_assert+0x2a>
    974a:	4040      	eors	r0, r0
    974c:	f380 8811 	msr	BASEPRI, r0
    9750:	f04f 0004 	mov.w	r0, #4
    9754:	df02      	svc	2
    9756:	bd08      	pop	{r3, pc}
    9758:	20000660 	.word	0x20000660

0000975c <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    975c:	2801      	cmp	r0, #1
{
    975e:	b508      	push	{r3, lr}
    9760:	4b09      	ldr	r3, [pc, #36]	; (9788 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    9762:	d107      	bne.n	9774 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    9764:	7c9a      	ldrb	r2, [r3, #18]
    9766:	2a05      	cmp	r2, #5
    9768:	d102      	bne.n	9770 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    976a:	2200      	movs	r2, #0
    976c:	749a      	strb	r2, [r3, #18]
    976e:	bd08      	pop	{r3, pc}
    9770:	f7ff fcac 	bl	90cc <chan_set.part.19>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    9774:	7c1b      	ldrb	r3, [r3, #16]
    9776:	2b05      	cmp	r3, #5
    9778:	d105      	bne.n	9786 <ticker_stop_adv_assert+0x2a>
    977a:	4040      	eors	r0, r0
    977c:	f380 8811 	msr	BASEPRI, r0
    9780:	f04f 0004 	mov.w	r0, #4
    9784:	df02      	svc	2
    9786:	bd08      	pop	{r3, pc}
    9788:	20000660 	.word	0x20000660

0000978c <ticker_success_assert>:
{
    978c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    978e:	b108      	cbz	r0, 9794 <ticker_success_assert+0x8>
    9790:	f7ff fc9c 	bl	90cc <chan_set.part.19>
    9794:	bd08      	pop	{r3, pc}
	...

00009798 <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    9798:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    979a:	ad02      	add	r5, sp, #8
    979c:	4b10      	ldr	r3, [pc, #64]	; (97e0 <adv_scan_configure.constprop.32+0x48>)
    979e:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    97a2:	4604      	mov	r4, r0
	radio_reset();
    97a4:	f006 fabc 	bl	fd20 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    97a8:	2000      	movs	r0, #0
    97aa:	f006 fae3 	bl	fd74 <radio_tx_power_set>
	radio_isr_set(isr);
    97ae:	480d      	ldr	r0, [pc, #52]	; (97e4 <adv_scan_configure.constprop.32+0x4c>)
    97b0:	f006 fa80 	bl	fcb4 <radio_isr_set>
	radio_phy_set(phy, flags);
    97b4:	2101      	movs	r1, #1
    97b6:	4620      	mov	r0, r4
    97b8:	f006 facc 	bl	fd54 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    97bc:	4628      	mov	r0, r5
    97be:	f006 faf7 	bl	fdb0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    97c2:	0062      	lsls	r2, r4, #1
    97c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    97c8:	2125      	movs	r1, #37	; 0x25
    97ca:	2008      	movs	r0, #8
    97cc:	f006 fb08 	bl	fde0 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    97d0:	4905      	ldr	r1, [pc, #20]	; (97e8 <adv_scan_configure.constprop.32+0x50>)
    97d2:	f240 605b 	movw	r0, #1627	; 0x65b
    97d6:	f006 fb93 	bl	ff00 <radio_crc_configure>
}
    97da:	b003      	add	sp, #12
    97dc:	bd30      	pop	{r4, r5, pc}
    97de:	bf00      	nop
    97e0:	8e89bed6 	.word	0x8e89bed6
    97e4:	0000c601 	.word	0x0000c601
    97e8:	00555555 	.word	0x00555555

000097ec <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    97ec:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    97ee:	4b05      	ldr	r3, [pc, #20]	; (9804 <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    97f0:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    97f2:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    97f4:	4611      	mov	r1, r2
    97f6:	4610      	mov	r0, r2
    97f8:	f7fc fa90 	bl	5d1c <mayfly_enqueue>
	LL_ASSERT(!retval);
    97fc:	b108      	cbz	r0, 9802 <event_stop.constprop.33+0x16>
    97fe:	f7ff fc65 	bl	90cc <chan_set.part.19>
    9802:	bd08      	pop	{r3, pc}
    9804:	20003780 	.word	0x20003780

00009808 <event_common_prepare>:
{
    9808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    980c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    980e:	681d      	ldr	r5, [r3, #0]
{
    9810:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    9812:	2c00      	cmp	r4, #0
{
    9814:	4681      	mov	r9, r0
    9816:	910b      	str	r1, [sp, #44]	; 0x2c
    9818:	4690      	mov	r8, r2
    981a:	469b      	mov	fp, r3
    981c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    9820:	da03      	bge.n	982a <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    9822:	9c16      	ldr	r4, [sp, #88]	; 0x58
    9824:	42ac      	cmp	r4, r5
    9826:	bf38      	it	cc
    9828:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    982a:	42ac      	cmp	r4, r5
    982c:	4f4e      	ldr	r7, [pc, #312]	; (9968 <event_common_prepare+0x160>)
    982e:	d91b      	bls.n	9868 <event_common_prepare+0x60>
		ticker_status =
    9830:	f241 5374 	movw	r3, #5492	; 0x1574
    9834:	9308      	str	r3, [sp, #32]
    9836:	4b4d      	ldr	r3, [pc, #308]	; (996c <event_common_prepare+0x164>)
    9838:	9305      	str	r3, [sp, #20]
    983a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    983c:	1b63      	subs	r3, r4, r5
		ticker_status =
    983e:	9300      	str	r3, [sp, #0]
    9840:	9707      	str	r7, [sp, #28]
    9842:	464b      	mov	r3, r9
    9844:	9106      	str	r1, [sp, #24]
    9846:	9104      	str	r1, [sp, #16]
    9848:	9103      	str	r1, [sp, #12]
    984a:	9102      	str	r1, [sp, #8]
    984c:	9101      	str	r1, [sp, #4]
    984e:	2201      	movs	r2, #1
    9850:	4608      	mov	r0, r1
    9852:	f7fd f80d 	bl	6870 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9856:	f030 0302 	bics.w	r3, r0, #2
    985a:	d02b      	beq.n	98b4 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    985c:	4040      	eors	r0, r0
    985e:	f380 8811 	msr	BASEPRI, r0
    9862:	f04f 0004 	mov.w	r0, #4
    9866:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    9868:	d21d      	bcs.n	98a6 <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    986a:	2300      	movs	r3, #0
    986c:	461a      	mov	r2, r3
    986e:	4619      	mov	r1, r3
    9870:	4618      	mov	r0, r3
    9872:	f7ff ff19 	bl	96a8 <event_active>
		ticker_status =
    9876:	f241 5389 	movw	r3, #5513	; 0x1589
    987a:	2100      	movs	r1, #0
    987c:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    987e:	1b2c      	subs	r4, r5, r4
		ticker_status =
    9880:	4b3b      	ldr	r3, [pc, #236]	; (9970 <event_common_prepare+0x168>)
    9882:	9305      	str	r3, [sp, #20]
    9884:	9707      	str	r7, [sp, #28]
    9886:	464b      	mov	r3, r9
    9888:	9106      	str	r1, [sp, #24]
    988a:	9104      	str	r1, [sp, #16]
    988c:	9103      	str	r1, [sp, #12]
    988e:	9102      	str	r1, [sp, #8]
    9890:	9101      	str	r1, [sp, #4]
    9892:	9400      	str	r4, [sp, #0]
    9894:	2201      	movs	r2, #1
    9896:	4608      	mov	r0, r1
    9898:	f7fc ffea 	bl	6870 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    989c:	f030 0302 	bics.w	r3, r0, #2
    98a0:	d1dc      	bne.n	985c <event_common_prepare+0x54>
    98a2:	462c      	mov	r4, r5
    98a4:	e00b      	b.n	98be <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    98a6:	2300      	movs	r3, #0
    98a8:	461a      	mov	r2, r3
    98aa:	4619      	mov	r1, r3
    98ac:	4618      	mov	r0, r3
    98ae:	f7ff fefb 	bl	96a8 <event_active>
		event_xtal(0, 0, 0, NULL);
    98b2:	2300      	movs	r3, #0
    98b4:	461a      	mov	r2, r3
    98b6:	4619      	mov	r1, r3
    98b8:	4618      	mov	r0, r3
    98ba:	f7ff fee7 	bl	968c <event_xtal>
	_radio.remainder_anchor = remainder;
    98be:	4e2d      	ldr	r6, [pc, #180]	; (9974 <event_common_prepare+0x16c>)
    98c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    98c2:	60f3      	str	r3, [r6, #12]
	ticker_status =
    98c4:	f241 53a1 	movw	r3, #5537	; 0x15a1
    98c8:	9308      	str	r3, [sp, #32]
    98ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
    98cc:	9306      	str	r3, [sp, #24]
    98ce:	2200      	movs	r2, #0
    98d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    98d2:	9305      	str	r3, [sp, #20]
    98d4:	9707      	str	r7, [sp, #28]
    98d6:	464b      	mov	r3, r9
    98d8:	9204      	str	r2, [sp, #16]
    98da:	9203      	str	r2, [sp, #12]
    98dc:	9202      	str	r2, [sp, #8]
    98de:	9201      	str	r2, [sp, #4]
    98e0:	9400      	str	r4, [sp, #0]
    98e2:	4611      	mov	r1, r2
    98e4:	4610      	mov	r0, r2
    98e6:	f7fc ffc3 	bl	6870 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    98ea:	f030 0302 	bics.w	r3, r0, #2
    98ee:	d1b5      	bne.n	985c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    98f0:	2005      	movs	r0, #5
    98f2:	f7ff ff7b 	bl	97ec <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    98f6:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    98fa:	429d      	cmp	r5, r3
    98fc:	d023      	beq.n	9946 <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    98fe:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    9902:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    9906:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    9908:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    990a:	bfbc      	itt	lt
    990c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9910:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    9914:	f8d8 2000 	ldr.w	r2, [r8]
    9918:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    991c:	428a      	cmp	r2, r1
    991e:	bf38      	it	cc
    9920:	460a      	movcc	r2, r1
		ticker_status =
    9922:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    9926:	b2a3      	uxth	r3, r4
    9928:	b292      	uxth	r2, r2
		ticker_status =
    992a:	9106      	str	r1, [sp, #24]
    992c:	2100      	movs	r1, #0
    992e:	9302      	str	r3, [sp, #8]
    9930:	9201      	str	r2, [sp, #4]
    9932:	9200      	str	r2, [sp, #0]
    9934:	9104      	str	r1, [sp, #16]
    9936:	9103      	str	r1, [sp, #12]
    9938:	4652      	mov	r2, sl
    993a:	4608      	mov	r0, r1
    993c:	f7fc ffe8 	bl	6910 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9940:	f030 0302 	bics.w	r3, r0, #2
    9944:	d18a      	bne.n	985c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    9946:	20ff      	movs	r0, #255	; 0xff
    9948:	f7ff fd92 	bl	9470 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    994c:	4b0a      	ldr	r3, [pc, #40]	; (9978 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    994e:	2201      	movs	r2, #1
    9950:	4611      	mov	r1, r2
    9952:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    9954:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9958:	f7fc f9e0 	bl	5d1c <mayfly_enqueue>
		LL_ASSERT(!retval);
    995c:	2800      	cmp	r0, #0
    995e:	f47f af7d 	bne.w	985c <event_common_prepare+0x54>
}
    9962:	b00d      	add	sp, #52	; 0x34
    9964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9968:	0000978d 	.word	0x0000978d
    996c:	000096a9 	.word	0x000096a9
    9970:	0000968d 	.word	0x0000968d
    9974:	20000660 	.word	0x20000660
    9978:	20003820 	.word	0x20003820

0000997c <event_scan_prepare>:
{
    997c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    997e:	4c1d      	ldr	r4, [pc, #116]	; (99f4 <event_scan_prepare+0x78>)
    9980:	7c23      	ldrb	r3, [r4, #16]
{
    9982:	b085      	sub	sp, #20
    9984:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    9986:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    998a:	b12b      	cbz	r3, 9998 <event_scan_prepare+0x1c>
		LL_ASSERT(!retval);
    998c:	4040      	eors	r0, r0
    998e:	f380 8811 	msr	BASEPRI, r0
    9992:	f04f 0004 	mov.w	r0, #4
    9996:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    9998:	2306      	movs	r3, #6
    999a:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    999c:	9203      	str	r2, [sp, #12]
    999e:	9301      	str	r3, [sp, #4]
    99a0:	4a15      	ldr	r2, [pc, #84]	; (99f8 <event_scan_prepare+0x7c>)
    99a2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    99a6:	9202      	str	r2, [sp, #8]
    99a8:	9300      	str	r3, [sp, #0]
    99aa:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    99ae:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    99b2:	f7ff ff29 	bl	9808 <event_common_prepare>
	if (_radio.scanner.conn) {
    99b6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    99ba:	b1cb      	cbz	r3, 99f0 <event_scan_prepare+0x74>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    99bc:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    99c0:	2b00      	cmp	r3, #0
    99c2:	da0c      	bge.n	99de <event_scan_prepare+0x62>
			u32_t ticks_prepare_to_start =
    99c4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    99c8:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    99cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    99d0:	4291      	cmp	r1, r2
    99d2:	bf2c      	ite	cs
    99d4:	ebc3 0301 	rsbcs	r3, r3, r1
    99d8:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    99dc:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    99de:	4b07      	ldr	r3, [pc, #28]	; (99fc <event_scan_prepare+0x80>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    99e0:	2201      	movs	r2, #1
    99e2:	4611      	mov	r1, r2
    99e4:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    99e6:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    99e8:	f7fc f998 	bl	5d1c <mayfly_enqueue>
		LL_ASSERT(!retval);
    99ec:	2800      	cmp	r0, #0
    99ee:	d1cd      	bne.n	998c <event_scan_prepare+0x10>
}
    99f0:	b005      	add	sp, #20
    99f2:	bd30      	pop	{r4, r5, pc}
    99f4:	20000660 	.word	0x20000660
    99f8:	00009aed 	.word	0x00009aed
    99fc:	200037a0 	.word	0x200037a0

00009a00 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    9a00:	4b02      	ldr	r3, [pc, #8]	; (9a0c <mayfly_xtal_start+0xc>)
    9a02:	6818      	ldr	r0, [r3, #0]
    9a04:	6843      	ldr	r3, [r0, #4]
    9a06:	2100      	movs	r1, #0
    9a08:	681b      	ldr	r3, [r3, #0]
    9a0a:	4718      	bx	r3
    9a0c:	20000660 	.word	0x20000660

00009a10 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    9a10:	4b02      	ldr	r3, [pc, #8]	; (9a1c <mayfly_xtal_stop+0xc>)
    9a12:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    9a14:	6843      	ldr	r3, [r0, #4]
    9a16:	2100      	movs	r1, #0
    9a18:	685b      	ldr	r3, [r3, #4]
    9a1a:	4718      	bx	r3
    9a1c:	20000660 	.word	0x20000660

00009a20 <chan_sel_2>:
{
    9a20:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    9a22:	4048      	eors	r0, r1
    9a24:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    9a26:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    9a2a:	2608      	movs	r6, #8
	o = 0;
    9a2c:	2400      	movs	r4, #0
		o |= (i & 1);
    9a2e:	f00e 0501 	and.w	r5, lr, #1
    9a32:	3e01      	subs	r6, #1
    9a34:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    9a38:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    9a3c:	b2ec      	uxtb	r4, r5
		i >>= 1;
    9a3e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    9a42:	d1f4      	bne.n	9a2e <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    9a44:	0225      	lsls	r5, r4, #8
    9a46:	b22d      	sxth	r5, r5
    9a48:	b2c0      	uxtb	r0, r0
    9a4a:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    9a4e:	4634      	mov	r4, r6
		o |= (i & 1);
    9a50:	f000 0601 	and.w	r6, r0, #1
    9a54:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    9a58:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    9a5c:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    9a60:	b2e4      	uxtb	r4, r4
		i >>= 1;
    9a62:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    9a66:	d1f3      	bne.n	9a50 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    9a68:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    9a6a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    9a6e:	3f01      	subs	r7, #1
    9a70:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    9a72:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    9a76:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    9a78:	d1d5      	bne.n	9a26 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    9a7a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    9a7c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    9a7e:	fbb1 f0f4 	udiv	r0, r1, r4
    9a82:	fb04 1010 	mls	r0, r4, r0, r1
    9a86:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9a88:	08c4      	lsrs	r4, r0, #3
    9a8a:	f000 0507 	and.w	r5, r0, #7
    9a8e:	5d14      	ldrb	r4, [r2, r4]
    9a90:	412c      	asrs	r4, r5
    9a92:	07e4      	lsls	r4, r4, #31
    9a94:	d407      	bmi.n	9aa6 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    9a96:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    9a98:	f3c1 4107 	ubfx	r1, r1, #16, #8
    9a9c:	4610      	mov	r0, r2
}
    9a9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    9aa2:	f7fe bccb 	b.w	843c <chan_sel_remap>
}
    9aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009aa8 <preempt_calc>:
{
    9aa8:	b570      	push	{r4, r5, r6, lr}
    9aaa:	4614      	mov	r4, r2
    9aac:	460e      	mov	r6, r1
    9aae:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    9ab0:	f7fd f84c 	bl	6b4c <ticker_ticks_now_get>
	u32_t diff =
    9ab4:	4621      	mov	r1, r4
    9ab6:	f7fd f84b 	bl	6b50 <ticker_ticks_diff_get>
	diff += 3;
    9aba:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    9abc:	2c09      	cmp	r4, #9
    9abe:	d911      	bls.n	9ae4 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    9ac0:	4b09      	ldr	r3, [pc, #36]	; (9ae8 <preempt_calc+0x40>)
    9ac2:	781b      	ldrb	r3, [r3, #0]
    9ac4:	b113      	cbz	r3, 9acc <preempt_calc+0x24>
    9ac6:	2000      	movs	r0, #0
    9ac8:	f7ff fae4 	bl	9094 <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    9acc:	4632      	mov	r2, r6
    9ace:	2100      	movs	r1, #0
    9ad0:	4628      	mov	r0, r5
    9ad2:	f7ff fb01 	bl	90d8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    9ad6:	68ab      	ldr	r3, [r5, #8]
    9ad8:	441c      	add	r4, r3
		if (diff <
    9ada:	2c26      	cmp	r4, #38	; 0x26
    9adc:	d800      	bhi.n	9ae0 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    9ade:	60ac      	str	r4, [r5, #8]
		return 1;
    9ae0:	2001      	movs	r0, #1
}
    9ae2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    9ae4:	2000      	movs	r0, #0
    9ae6:	bd70      	pop	{r4, r5, r6, pc}
    9ae8:	20000860 	.word	0x20000860

00009aec <event_scan>:
{
    9aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    9aee:	4b56      	ldr	r3, [pc, #344]	; (9c48 <event_scan+0x15c>)
    9af0:	7cda      	ldrb	r2, [r3, #19]
{
    9af2:	b08d      	sub	sp, #52	; 0x34
    9af4:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    9af6:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    9afa:	461c      	mov	r4, r3
    9afc:	b12a      	cbz	r2, 9b0a <event_scan+0x1e>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9afe:	4040      	eors	r0, r0
    9b00:	f380 8811 	msr	BASEPRI, r0
    9b04:	f04f 0004 	mov.w	r0, #4
    9b08:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    9b0a:	7c1b      	ldrb	r3, [r3, #16]
    9b0c:	b2db      	uxtb	r3, r3
    9b0e:	2b06      	cmp	r3, #6
    9b10:	d1f5      	bne.n	9afe <event_scan+0x12>
	_radio.role = ROLE_SCAN;
    9b12:	2202      	movs	r2, #2
    9b14:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    9b16:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    9b18:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9b1a:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    9b1e:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    9b20:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    9b24:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    9b26:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9b2a:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    9b2e:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    9b30:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9b34:	f7ff fe30 	bl	9798 <adv_scan_configure.constprop.32>
	chan_set(37 + _radio.scanner.chan++);
    9b38:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9b3c:	f3c3 0081 	ubfx	r0, r3, #2, #2
    9b40:	1c42      	adds	r2, r0, #1
    9b42:	f362 0383 	bfi	r3, r2, #2, #2
    9b46:	3025      	adds	r0, #37	; 0x25
    9b48:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    9b4c:	f7ff fbe6 	bl	931c <chan_set>
	if (_radio.scanner.chan == 3) {
    9b50:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9b54:	f003 020c 	and.w	r2, r3, #12
    9b58:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    9b5a:	bf08      	it	eq
    9b5c:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    9b60:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    9b64:	bf08      	it	eq
    9b66:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    9b6a:	f006 fa83 	bl	10074 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    9b6e:	2300      	movs	r3, #0
    9b70:	4619      	mov	r1, r3
    9b72:	461a      	mov	r2, r3
    9b74:	4618      	mov	r0, r3
    9b76:	f006 f9ed 	bl	ff54 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    9b7a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    9b7e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    9b82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9b86:	3008      	adds	r0, #8
    9b88:	f006 f958 	bl	fe3c <radio_pkt_rx_set>
	radio_rssi_measure();
    9b8c:	f006 f9fa 	bl	ff84 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    9b90:	f005 fcbe 	bl	f510 <ctrl_rl_enabled>
    9b94:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9b98:	b340      	cbz	r0, 9bec <event_scan+0x100>
		struct ll_filter *filter =
    9b9a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    9b9e:	f005 fb0b 	bl	f1b8 <ctrl_filter_get>
    9ba2:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    9ba4:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    9ba8:	f005 faaa 	bl	f100 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    9bac:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    9bae:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    9bb0:	1cb2      	adds	r2, r6, #2
    9bb2:	7830      	ldrb	r0, [r6, #0]
    9bb4:	f006 fa08 	bl	ffc8 <radio_filter_configure>
		radio_ar_configure(count, irks);
    9bb8:	4639      	mov	r1, r7
    9bba:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    9bbe:	f006 fbdd 	bl	1037c <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    9bc2:	68e2      	ldr	r2, [r4, #12]
    9bc4:	f105 0109 	add.w	r1, r5, #9
    9bc8:	2000      	movs	r0, #0
    9bca:	f006 fa5f 	bl	1008c <radio_tmr_start>
	radio_tmr_end_capture();
    9bce:	f006 fb2d 	bl	1022c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    9bd2:	2106      	movs	r1, #6
    9bd4:	462a      	mov	r2, r5
    9bd6:	481d      	ldr	r0, [pc, #116]	; (9c4c <event_scan+0x160>)
    9bd8:	f7ff ff66 	bl	9aa8 <preempt_calc>
    9bdc:	4601      	mov	r1, r0
    9bde:	b188      	cbz	r0, 9c04 <event_scan+0x118>
		_radio.state = STATE_STOP;
    9be0:	2304      	movs	r3, #4
    9be2:	7523      	strb	r3, [r4, #20]
		radio_disable();
    9be4:	f006 f950 	bl	fe88 <radio_disable>
}
    9be8:	b00d      	add	sp, #52	; 0x34
    9bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    9bec:	f013 0f30 	tst.w	r3, #48	; 0x30
    9bf0:	d0e7      	beq.n	9bc2 <event_scan+0xd6>
		struct ll_filter *wl = ctrl_filter_get(true);
    9bf2:	2001      	movs	r0, #1
    9bf4:	f005 fae0 	bl	f1b8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    9bf8:	1c82      	adds	r2, r0, #2
    9bfa:	7841      	ldrb	r1, [r0, #1]
    9bfc:	7800      	ldrb	r0, [r0, #0]
    9bfe:	f006 f9e3 	bl	ffc8 <radio_filter_configure>
    9c02:	e7de      	b.n	9bc2 <event_scan+0xd6>
		ret = ticker_start(
    9c04:	f641 1336 	movw	r3, #6454	; 0x1936
    9c08:	9308      	str	r3, [sp, #32]
    9c0a:	4b11      	ldr	r3, [pc, #68]	; (9c50 <event_scan+0x164>)
    9c0c:	9307      	str	r3, [sp, #28]
    9c0e:	2204      	movs	r2, #4
    9c10:	4b10      	ldr	r3, [pc, #64]	; (9c54 <event_scan+0x168>)
    9c12:	9206      	str	r2, [sp, #24]
    9c14:	9305      	str	r3, [sp, #20]
    9c16:	9004      	str	r0, [sp, #16]
    9c18:	9003      	str	r0, [sp, #12]
    9c1a:	9002      	str	r0, [sp, #8]
    9c1c:	9001      	str	r0, [sp, #4]
    9c1e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    9c22:	3309      	adds	r3, #9
    9c24:	9300      	str	r3, [sp, #0]
    9c26:	462b      	mov	r3, r5
    9c28:	f7fc fe22 	bl	6870 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9c2c:	f030 0302 	bics.w	r3, r0, #2
    9c30:	f47f af65 	bne.w	9afe <event_scan+0x12>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    9c34:	4619      	mov	r1, r3
    9c36:	4618      	mov	r0, r3
    9c38:	4a07      	ldr	r2, [pc, #28]	; (9c58 <event_scan+0x16c>)
    9c3a:	f7fc ff35 	bl	6aa8 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9c3e:	f030 0302 	bics.w	r3, r0, #2
    9c42:	f47f af5c 	bne.w	9afe <event_scan+0x12>
    9c46:	e7cf      	b.n	9be8 <event_scan+0xfc>
    9c48:	20000660 	.word	0x20000660
    9c4c:	20000730 	.word	0x20000730
    9c50:	0000978d 	.word	0x0000978d
    9c54:	000096c5 	.word	0x000096c5
    9c58:	00009041 	.word	0x00009041

00009c5c <ctrl_tx_enqueue>:
{
    9c5c:	b510      	push	{r4, lr}
	    !conn->empty &&
    9c5e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    9c62:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    9c66:	f014 0f80 	tst.w	r4, #128	; 0x80
    9c6a:	d118      	bne.n	9c9e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    9c6c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    9c70:	b1ab      	cbz	r3, 9c9e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    9c72:	0724      	lsls	r4, r4, #28
    9c74:	d413      	bmi.n	9c9e <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    9c76:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    9c7a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    9c7c:	bf04      	itt	eq
    9c7e:	681c      	ldreq	r4, [r3, #0]
    9c80:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    9c84:	b992      	cbnz	r2, 9cac <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    9c86:	681a      	ldr	r2, [r3, #0]
    9c88:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    9c8a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    9c8c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    9c90:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    9c94:	680b      	ldr	r3, [r1, #0]
    9c96:	b90b      	cbnz	r3, 9c9c <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    9c98:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    9c9c:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    9c9e:	b92a      	cbnz	r2, 9cac <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    9ca0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    9ca4:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    9ca6:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    9caa:	e7ef      	b.n	9c8c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    9cac:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    9cb0:	681a      	ldr	r2, [r3, #0]
    9cb2:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    9cb4:	6019      	str	r1, [r3, #0]
    9cb6:	e7eb      	b.n	9c90 <ctrl_tx_enqueue+0x34>

00009cb8 <ctrl_tx_sec_enqueue>:
{
    9cb8:	b410      	push	{r4}
	if (conn->pause_tx) {
    9cba:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    9cbe:	0724      	lsls	r4, r4, #28
{
    9cc0:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    9cc2:	d50f      	bpl.n	9ce4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    9cc4:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    9cc8:	b931      	cbnz	r1, 9cd8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    9cca:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    9cce:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    9cd0:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    9cd4:	bc10      	pop	{r4}
    9cd6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    9cd8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    9cdc:	6819      	ldr	r1, [r3, #0]
    9cde:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    9ce0:	601a      	str	r2, [r3, #0]
    9ce2:	e7f7      	b.n	9cd4 <ctrl_tx_sec_enqueue+0x1c>
}
    9ce4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    9ce6:	f7ff bfb9 	b.w	9c5c <ctrl_tx_enqueue>
	...

00009cec <feature_rsp_send>:
{
    9cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9cee:	4f21      	ldr	r7, [pc, #132]	; (9d74 <feature_rsp_send+0x88>)
{
    9cf0:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9cf2:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    9cf6:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9cf8:	f7fb ff45 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    9cfc:	4604      	mov	r4, r0
    9cfe:	b3b0      	cbz	r0, 9d6e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9d00:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    9d02:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    9d04:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    9d0c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    9d10:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    9d14:	f043 0310 	orr.w	r3, r3, #16
    9d18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    9d1c:	79b1      	ldrb	r1, [r6, #6]
    9d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    9d22:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    9d26:	f3c1 0110 	ubfx	r1, r1, #0, #17
    9d2a:	400b      	ands	r3, r1
    9d2c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    9d30:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    9d34:	f043 0320 	orr.w	r3, r3, #32
    9d38:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9d3c:	7903      	ldrb	r3, [r0, #4]
    9d3e:	f043 0303 	orr.w	r3, r3, #3
    9d42:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    9d44:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    9d46:	2309      	movs	r3, #9
    9d48:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    9d4a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    9d4c:	2100      	movs	r1, #0
    9d4e:	4410      	add	r0, r2
    9d50:	f7f7 ffa6 	bl	1ca0 <memset>
		conn->llcp_features & 0xFF;
    9d54:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    9d58:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    9d5a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    9d5c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    9d5e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    9d60:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    9d62:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    9d64:	4621      	mov	r1, r4
    9d66:	f7ff ffa7 	bl	9cb8 <ctrl_tx_sec_enqueue>
	return 0;
    9d6a:	2000      	movs	r0, #0
    9d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    9d6e:	2001      	movs	r0, #1
}
    9d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d72:	bf00      	nop
    9d74:	20000660 	.word	0x20000660

00009d78 <start_enc_rsp_send>:
{
    9d78:	b510      	push	{r4, lr}
    9d7a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    9d7c:	b9c9      	cbnz	r1, 9db2 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9d7e:	480f      	ldr	r0, [pc, #60]	; (9dbc <start_enc_rsp_send+0x44>)
    9d80:	f7fb ff01 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    9d84:	b1b8      	cbz	r0, 9db6 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    9d86:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    9d88:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    9d8c:	f043 0320 	orr.w	r3, r3, #32
    9d90:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9d94:	780b      	ldrb	r3, [r1, #0]
    9d96:	f043 0303 	orr.w	r3, r3, #3
    9d9a:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    9d9c:	2301      	movs	r3, #1
    9d9e:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    9da0:	2306      	movs	r3, #6
    9da2:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    9da4:	b140      	cbz	r0, 9db8 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    9da6:	4601      	mov	r1, r0
    9da8:	4620      	mov	r0, r4
    9daa:	f7ff ff57 	bl	9c5c <ctrl_tx_enqueue>
	return 0;
    9dae:	2000      	movs	r0, #0
    9db0:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    9db2:	2000      	movs	r0, #0
    9db4:	e7e8      	b.n	9d88 <start_enc_rsp_send+0x10>
			return 1;
    9db6:	2001      	movs	r0, #1
}
    9db8:	bd10      	pop	{r4, pc}
    9dba:	bf00      	nop
    9dbc:	200007bc 	.word	0x200007bc

00009dc0 <reject_ext_ind_send>:
{
    9dc0:	b570      	push	{r4, r5, r6, lr}
    9dc2:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9dc4:	480b      	ldr	r0, [pc, #44]	; (9df4 <reject_ext_ind_send+0x34>)
{
    9dc6:	460e      	mov	r6, r1
    9dc8:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9dca:	f7fb fedc 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    9dce:	b178      	cbz	r0, 9df0 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9dd0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    9dd2:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9dd4:	f043 0303 	orr.w	r3, r3, #3
    9dd8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    9dda:	2303      	movs	r3, #3
    9ddc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    9dde:	2311      	movs	r3, #17
    9de0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    9de2:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    9de4:	4601      	mov	r1, r0
    9de6:	4620      	mov	r0, r4
    9de8:	f7ff ff38 	bl	9c5c <ctrl_tx_enqueue>
	return 0;
    9dec:	2000      	movs	r0, #0
    9dee:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    9df0:	2001      	movs	r0, #1
}
    9df2:	bd70      	pop	{r4, r5, r6, pc}
    9df4:	200007bc 	.word	0x200007bc

00009df8 <event_connection_prepare>:
{
    9df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    9dfc:	4dc5      	ldr	r5, [pc, #788]	; (a114 <event_connection_prepare+0x31c>)
{
    9dfe:	b08f      	sub	sp, #60	; 0x3c
    9e00:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    9e02:	7c2b      	ldrb	r3, [r5, #16]
{
    9e04:	910c      	str	r1, [sp, #48]	; 0x30
    9e06:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    9e08:	b12b      	cbz	r3, 9e16 <event_connection_prepare+0x1e>
		LL_ASSERT(0);
    9e0a:	4040      	eors	r0, r0
    9e0c:	f380 8811 	msr	BASEPRI, r0
    9e10:	f04f 0004 	mov.w	r0, #4
    9e14:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    9e16:	f894 3020 	ldrb.w	r3, [r4, #32]
    9e1a:	3307      	adds	r3, #7
    9e1c:	b2db      	uxtb	r3, r3
    9e1e:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    9e20:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9e24:	2b00      	cmp	r3, #0
    9e26:	da09      	bge.n	9e3c <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    9e28:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    9e2a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    9e2c:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    9e30:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    9e32:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    9e34:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    9e36:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    9e38:	bf88      	it	hi
    9e3a:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    9e3c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    9e3e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    9e42:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    9e44:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    9e46:	b292      	uxth	r2, r2
    9e48:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    9e4a:	4432      	add	r2, r6
    9e4c:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    9e4e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    9e52:	429a      	cmp	r2, r3
    9e54:	f040 819d 	bne.w	a192 <event_connection_prepare+0x39a>
    9e58:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    9e5c:	075f      	lsls	r7, r3, #29
    9e5e:	f100 8281 	bmi.w	a364 <event_connection_prepare+0x56c>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    9e62:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    9e66:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    9e6a:	429a      	cmp	r2, r3
    9e6c:	d06e      	beq.n	9f4c <event_connection_prepare+0x154>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    9e6e:	2005      	movs	r0, #5
    9e70:	f7ff fcbc 	bl	97ec <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
    9e74:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    9e78:	b10b      	cbz	r3, 9e7e <event_connection_prepare+0x86>
    9e7a:	429c      	cmp	r4, r3
    9e7c:	d166      	bne.n	9f4c <event_connection_prepare+0x154>
	switch (conn->llcp_conn_param.state) {
    9e7e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    9e82:	f003 0307 	and.w	r3, r3, #7
    9e86:	2b05      	cmp	r3, #5
    9e88:	d8bf      	bhi.n	9e0a <event_connection_prepare+0x12>
    9e8a:	e8df f013 	tbh	[pc, r3, lsl #1]
    9e8e:	0006      	.short	0x0006
    9e90:	01180076 	.word	0x01180076
    9e94:	005f005f 	.word	0x005f005f
    9e98:	005f      	.short	0x005f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9e9a:	489f      	ldr	r0, [pc, #636]	; (a118 <event_connection_prepare+0x320>)
    9e9c:	f7fb fe73 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    9ea0:	4607      	mov	r7, r0
    9ea2:	2800      	cmp	r0, #0
    9ea4:	d052      	beq.n	9f4c <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    9ea6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    9eaa:	2204      	movs	r2, #4
    9eac:	f362 0302 	bfi	r3, r2, #0, #3
    9eb0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9eb4:	7903      	ldrb	r3, [r0, #4]
    9eb6:	f043 0303 	orr.w	r3, r3, #3
    9eba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    9ebc:	2318      	movs	r3, #24
    9ebe:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    9ec0:	230f      	movs	r3, #15
    9ec2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    9ec4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    9ec8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    9eca:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    9ecc:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    9ed0:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    9ed2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    9ed6:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    9ed8:	2300      	movs	r3, #0
    9eda:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    9edc:	74c3      	strb	r3, [r0, #19]
    9ede:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    9ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9ee4:	7543      	strb	r3, [r0, #21]
    9ee6:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    9ee8:	75c3      	strb	r3, [r0, #23]
    9eea:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    9eec:	7643      	strb	r3, [r0, #25]
    9eee:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    9ef0:	76c3      	strb	r3, [r0, #27]
    9ef2:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    9ef4:	7743      	strb	r3, [r0, #29]
    9ef6:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    9ef8:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    9efc:	4601      	mov	r1, r0
    9efe:	4620      	mov	r0, r4
    9f00:	f7ff feac 	bl	9c5c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9f04:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    9f06:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    9f0a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9f0e:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    9f10:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    9f14:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9f18:	da0b      	bge.n	9f32 <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    9f1a:	68a3      	ldr	r3, [r4, #8]
    9f1c:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    9f1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    9f22:	428b      	cmp	r3, r1
    9f24:	bf2c      	ite	cs
    9f26:	4443      	addcs	r3, r8
    9f28:	eb08 0301 	addcc.w	r3, r8, r1
    9f2c:	1a9b      	subs	r3, r3, r2
    9f2e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    9f32:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    9f34:	4b79      	ldr	r3, [pc, #484]	; (a11c <event_connection_prepare+0x324>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    9f36:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9f3a:	2201      	movs	r2, #1
    9f3c:	4611      	mov	r1, r2
    9f3e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    9f40:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9f42:	f7fb feeb 	bl	5d1c <mayfly_enqueue>
		LL_ASSERT(!retval);
    9f46:	2800      	cmp	r0, #0
    9f48:	f47f af5f 	bne.w	9e0a <event_connection_prepare+0x12>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    9f4c:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    9f50:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    9f54:	429a      	cmp	r2, r3
    9f56:	f000 8115 	beq.w	a184 <event_connection_prepare+0x38c>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    9f5a:	2005      	movs	r0, #5
    9f5c:	f7ff fc46 	bl	97ec <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
    9f60:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    9f64:	f003 0203 	and.w	r2, r3, #3
    9f68:	2a03      	cmp	r2, #3
    9f6a:	f63f af4e 	bhi.w	9e0a <event_connection_prepare+0x12>
    9f6e:	e8df f012 	tbh	[pc, r2, lsl #1]
    9f72:	00d7      	.short	0x00d7
    9f74:	01090109 	.word	0x01090109
    9f78:	012d      	.short	0x012d
	if (conn->llcp_conn_param.status) {
    9f7a:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    9f7e:	b1ef      	cbz	r7, 9fbc <event_connection_prepare+0x1c4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9f80:	4865      	ldr	r0, [pc, #404]	; (a118 <event_connection_prepare+0x320>)
    9f82:	f7fb fe00 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    9f86:	4601      	mov	r1, r0
    9f88:	2800      	cmp	r0, #0
    9f8a:	d0df      	beq.n	9f4c <event_connection_prepare+0x154>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    9f8c:	7903      	ldrb	r3, [r0, #4]
    9f8e:	f043 0303 	orr.w	r3, r3, #3
    9f92:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    9f94:	2311      	movs	r3, #17
    9f96:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    9f98:	2303      	movs	r3, #3
    9f9a:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    9f9c:	230f      	movs	r3, #15
    9f9e:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    9fa0:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    9fa4:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    9fa6:	4620      	mov	r0, r4
    9fa8:	f7ff fe58 	bl	9c5c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    9fac:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    9fb0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    9fb4:	2300      	movs	r3, #0
    9fb6:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
    9fba:	e7c7      	b.n	9f4c <event_connection_prepare+0x154>
	if (!conn->role) {
    9fbc:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	db3b      	blt.n	a03c <event_connection_prepare+0x244>
		if (conn->llcp_req != conn->llcp_ack) {
    9fc4:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    9fc8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    9fcc:	428b      	cmp	r3, r1
    9fce:	d1bd      	bne.n	9f4c <event_connection_prepare+0x154>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    9fd0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    9fd4:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    9fd8:	2205      	movs	r2, #5
    9fda:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    9fde:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    9fe2:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    9fe6:	2301      	movs	r3, #1
    9fe8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    9fec:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    9ff0:	b122      	cbz	r2, 9ffc <event_connection_prepare+0x204>
				((conn->llcp_conn_param.interval /
    9ff2:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    9ff6:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    9ff8:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    9ffc:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    a000:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a004:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    a008:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a00c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    a010:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a014:	2202      	movs	r2, #2
    a016:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    a01a:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    a01e:	f082 0208 	eor.w	r2, r2, #8
    a022:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    a026:	f362 0382 	bfi	r3, r2, #2, #1
    a02a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    a02e:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    a030:	2301      	movs	r3, #1
    a032:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    a036:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    a03a:	e787      	b.n	9f4c <event_connection_prepare+0x154>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a03c:	4836      	ldr	r0, [pc, #216]	; (a118 <event_connection_prepare+0x320>)
    a03e:	f7fb fda2 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    a042:	4601      	mov	r1, r0
    a044:	2800      	cmp	r0, #0
    a046:	d081      	beq.n	9f4c <event_connection_prepare+0x154>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    a048:	7903      	ldrb	r3, [r0, #4]
    a04a:	f043 0303 	orr.w	r3, r3, #3
    a04e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    a050:	2318      	movs	r3, #24
    a052:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    a054:	2310      	movs	r3, #16
    a056:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    a058:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a05c:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    a05e:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    a060:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a064:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    a066:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a06a:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    a06c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    a070:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    a072:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    a076:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    a07a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    a07e:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    a082:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    a086:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    a08a:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    a08e:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    a092:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    a096:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    a09a:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    a09e:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    a0a2:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    a0a6:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    a0aa:	4620      	mov	r0, r4
    a0ac:	f7ff fdd6 	bl	9c5c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a0b0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a0b4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    a0b8:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    a0bc:	e746      	b.n	9f4c <event_connection_prepare+0x154>
	if (conn->pause_tx) {
    a0be:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    a0c2:	0718      	lsls	r0, r3, #28
    a0c4:	f53f af42 	bmi.w	9f4c <event_connection_prepare+0x154>
	node_rx = packet_rx_reserve_get(2);
    a0c8:	2002      	movs	r0, #2
    a0ca:	f7fe f9e9 	bl	84a0 <packet_rx_reserve_get>
	if (!node_rx) {
    a0ce:	2800      	cmp	r0, #0
    a0d0:	f43f af3c 	beq.w	9f4c <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    a0d4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    a0d8:	2203      	movs	r2, #3
    a0da:	f362 0302 	bfi	r3, r2, #0, #3
    a0de:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    a0e2:	8c23      	ldrh	r3, [r4, #32]
    a0e4:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    a0e6:	2301      	movs	r3, #1
    a0e8:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    a0ea:	7a03      	ldrb	r3, [r0, #8]
    a0ec:	4313      	orrs	r3, r2
    a0ee:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    a0f0:	2318      	movs	r3, #24
    a0f2:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    a0f4:	230f      	movs	r3, #15
    a0f6:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    a0f8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a0fc:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    a0fe:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    a100:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a104:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    a106:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a10a:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    a10c:	f7ff f830 	bl	9170 <packet_rx_enqueue>
    a110:	e71c      	b.n	9f4c <event_connection_prepare+0x154>
    a112:	bf00      	nop
    a114:	20000660 	.word	0x20000660
    a118:	200007bc 	.word	0x200007bc
    a11c:	200037c0 	.word	0x200037c0
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a120:	48af      	ldr	r0, [pc, #700]	; (a3e0 <event_connection_prepare+0x5e8>)
    a122:	f7fb fd30 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    a126:	4601      	mov	r1, r0
    a128:	b360      	cbz	r0, a184 <event_connection_prepare+0x38c>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    a12a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a12e:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    a132:	2201      	movs	r2, #1
    a134:	f362 0301 	bfi	r3, r2, #0, #2
    a138:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a13c:	b2db      	uxtb	r3, r3
    a13e:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a142:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a146:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a14a:	f363 07c5 	bfi	r7, r3, #3, #3
    a14e:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    a152:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a156:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    a15a:	f367 1286 	bfi	r2, r7, #6, #1
    a15e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a162:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    a164:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a166:	f042 0203 	orr.w	r2, r2, #3
    a16a:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    a16c:	2203      	movs	r2, #3
    a16e:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    a170:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    a172:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    a174:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    a176:	4620      	mov	r0, r4
    a178:	f7ff fd70 	bl	9c5c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    a17c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    a180:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    a184:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    a188:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a18c:	429a      	cmp	r2, r3
    a18e:	f000 80e9 	beq.w	a364 <event_connection_prepare+0x56c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a192:	2005      	movs	r0, #5
    a194:	f7ff fb2a 	bl	97ec <event_stop.constprop.33>
		switch (conn->llcp_type) {
    a198:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    a19c:	3b01      	subs	r3, #1
    a19e:	2b07      	cmp	r3, #7
    a1a0:	f63f ae33 	bhi.w	9e0a <event_connection_prepare+0x12>
    a1a4:	a201      	add	r2, pc, #4	; (adr r2, a1ac <event_connection_prepare+0x3b4>)
    a1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a1aa:	bf00      	nop
    a1ac:	0000a28b 	.word	0x0000a28b
    a1b0:	0000a721 	.word	0x0000a721
    a1b4:	0000a7dd 	.word	0x0000a7dd
    a1b8:	0000aa11 	.word	0x0000aa11
    a1bc:	0000aa71 	.word	0x0000aa71
    a1c0:	00009e0b 	.word	0x00009e0b
    a1c4:	0000ab11 	.word	0x0000ab11
    a1c8:	0000ab41 	.word	0x0000ab41
		conn->llcp_phy.ack = conn->llcp_phy.req;
    a1cc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    a1d0:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    a1d4:	f3c3 0282 	ubfx	r2, r3, #2, #3
    a1d8:	0791      	lsls	r1, r2, #30
    a1da:	d544      	bpl.n	a266 <event_connection_prepare+0x46e>
			conn->llcp_phy.tx = BIT(1);
    a1dc:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    a1de:	f362 0384 	bfi	r3, r2, #2, #3
    a1e2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    a1e6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    a1ea:	095a      	lsrs	r2, r3, #5
    a1ec:	0790      	lsls	r0, r2, #30
    a1ee:	d543      	bpl.n	a278 <event_connection_prepare+0x480>
			conn->llcp_phy.rx = BIT(1);
    a1f0:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    a1f2:	f362 1347 	bfi	r3, r2, #5, #3
    a1f6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    a1fa:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    a1fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    a202:	f3c2 0182 	ubfx	r1, r2, #2, #3
    a206:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    a20a:	428b      	cmp	r3, r1
    a20c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    a210:	bf14      	ite	ne
    a212:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    a216:	f36f 0384 	bfceq	r3, #2, #3
    a21a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    a21e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    a222:	0952      	lsrs	r2, r2, #5
    a224:	f003 0307 	and.w	r3, r3, #7
    a228:	4293      	cmp	r3, r2
    a22a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    a22e:	bf14      	ite	ne
    a230:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    a234:	f36f 1347 	bfceq	r3, #5, #3
    a238:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    a23c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    a240:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    a244:	f043 0301 	orr.w	r3, r3, #1
    a248:	f3c2 0240 	ubfx	r2, r2, #1, #1
    a24c:	f362 0341 	bfi	r3, r2, #1, #1
    a250:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    a254:	2308      	movs	r3, #8
    a256:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    a25a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    a25e:	3b01      	subs	r3, #1
    a260:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    a264:	e78e      	b.n	a184 <event_connection_prepare+0x38c>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    a266:	07d7      	lsls	r7, r2, #31
    a268:	d501      	bpl.n	a26e <event_connection_prepare+0x476>
			conn->llcp_phy.tx = BIT(0);
    a26a:	2201      	movs	r2, #1
    a26c:	e7b7      	b.n	a1de <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    a26e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    a272:	bf18      	it	ne
    a274:	2204      	movne	r2, #4
    a276:	e7b2      	b.n	a1de <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    a278:	07d1      	lsls	r1, r2, #31
    a27a:	d501      	bpl.n	a280 <event_connection_prepare+0x488>
			conn->llcp_phy.rx = BIT(0);
    a27c:	2201      	movs	r2, #1
    a27e:	e7b8      	b.n	a1f2 <event_connection_prepare+0x3fa>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    a280:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    a284:	bf18      	it	ne
    a286:	2204      	movne	r2, #4
    a288:	e7b3      	b.n	a1f2 <event_connection_prepare+0x3fa>
	if (!conn_upd) {
    a28a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    a28e:	b90b      	cbnz	r3, a294 <event_connection_prepare+0x49c>
		_radio.conn_upd = conn;
    a290:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    a294:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a298:	f013 0303 	ands.w	r3, r3, #3
    a29c:	f000 80a8 	beq.w	a3f0 <event_connection_prepare+0x5f8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a2a0:	484f      	ldr	r0, [pc, #316]	; (a3e0 <event_connection_prepare+0x5e8>)
    a2a2:	f7fb fc70 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    a2a6:	4607      	mov	r7, r0
    a2a8:	2800      	cmp	r0, #0
    a2aa:	d05b      	beq.n	a364 <event_connection_prepare+0x56c>
		switch (conn->llcp.conn_upd.state) {
    a2ac:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a2b0:	f003 0303 	and.w	r3, r3, #3
    a2b4:	2b01      	cmp	r3, #1
    a2b6:	f000 8091 	beq.w	a3dc <event_connection_prepare+0x5e4>
    a2ba:	2b02      	cmp	r3, #2
    a2bc:	f47f ada5 	bne.w	9e0a <event_connection_prepare+0x12>
			fp_mayfly_select_or_use =
    a2c0:	4a48      	ldr	r2, [pc, #288]	; (a3e4 <event_connection_prepare+0x5ec>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    a2c2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a2c6:	f36f 0301 	bfc	r3, #0, #2
    a2ca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    a2ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a2d0:	3306      	adds	r3, #6
    a2d2:	4433      	add	r3, r6
    a2d4:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    a2d6:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a2da:	7939      	ldrb	r1, [r7, #4]
    a2dc:	f041 0103 	orr.w	r1, r1, #3
    a2e0:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    a2e2:	210c      	movs	r1, #12
    a2e4:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    a2e6:	2100      	movs	r1, #0
    a2e8:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    a2ea:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    a2ee:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    a2f0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    a2f4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    a2f8:	fbb1 f1f0 	udiv	r1, r1, r0
    a2fc:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    a300:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    a304:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    a308:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    a30c:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    a310:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    a314:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    a318:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a31c:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    a31e:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a322:	2900      	cmp	r1, #0
    a324:	da0b      	bge.n	a33e <event_connection_prepare+0x546>
			u32_t ticks_prepare_to_start =
    a326:	68a3      	ldr	r3, [r4, #8]
    a328:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    a32a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    a32e:	4283      	cmp	r3, r0
    a330:	bf2c      	ite	cs
    a332:	4443      	addcs	r3, r8
    a334:	eb08 0300 	addcc.w	r3, r8, r0
    a338:	1a5b      	subs	r3, r3, r1
    a33a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    a33e:	f107 0309 	add.w	r3, r7, #9
    a342:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    a346:	4b28      	ldr	r3, [pc, #160]	; (a3e8 <event_connection_prepare+0x5f0>)
    a348:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a34a:	2201      	movs	r2, #1
    a34c:	4611      	mov	r1, r2
    a34e:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    a350:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a352:	f7fb fce3 	bl	5d1c <mayfly_enqueue>
		LL_ASSERT(!retval);
    a356:	2800      	cmp	r0, #0
    a358:	f47f ad57 	bne.w	9e0a <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    a35c:	4639      	mov	r1, r7
    a35e:	4620      	mov	r0, r4
    a360:	f7ff fc7c 	bl	9c5c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    a364:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    a368:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    a36c:	429a      	cmp	r2, r3
    a36e:	d01e      	beq.n	a3ae <event_connection_prepare+0x5b6>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a370:	2005      	movs	r0, #5
    a372:	f7ff fa3b 	bl	97ec <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a376:	481a      	ldr	r0, [pc, #104]	; (a3e0 <event_connection_prepare+0x5e8>)
    a378:	f7fb fc05 	bl	5b86 <mem_acquire>
		if (node_tx) {
    a37c:	4601      	mov	r1, r0
    a37e:	b1b0      	cbz	r0, a3ae <event_connection_prepare+0x5b6>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    a380:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    a384:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a388:	7903      	ldrb	r3, [r0, #4]
    a38a:	f043 0303 	orr.w	r3, r3, #3
    a38e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    a390:	2302      	movs	r3, #2
    a392:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    a394:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    a396:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    a39a:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    a39c:	4620      	mov	r0, r4
    a39e:	f7ff fc5d 	bl	9c5c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    a3a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    a3a4:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    a3a6:	bf98      	it	ls
    a3a8:	3301      	addls	r3, #1
    a3aa:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    a3ae:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    a3b2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    a3b6:	429a      	cmp	r2, r3
    a3b8:	f000 84a6 	beq.w	ad08 <event_connection_prepare+0xf10>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a3bc:	2005      	movs	r0, #5
    a3be:	f7ff fa15 	bl	97ec <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
    a3c2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    a3c6:	f003 0303 	and.w	r3, r3, #3
    a3ca:	2b03      	cmp	r3, #3
    a3cc:	f63f ad1d 	bhi.w	9e0a <event_connection_prepare+0x12>
    a3d0:	e8df f013 	tbh	[pc, r3, lsl #1]
    a3d4:	049a0460 	.word	0x049a0460
    a3d8:	04b6049a 	.word	0x04b6049a
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    a3dc:	4a03      	ldr	r2, [pc, #12]	; (a3ec <event_connection_prepare+0x5f4>)
    a3de:	e770      	b.n	a2c2 <event_connection_prepare+0x4ca>
    a3e0:	200007bc 	.word	0x200007bc
    a3e4:	00008cf1 	.word	0x00008cf1
    a3e8:	200037b0 	.word	0x200037b0
    a3ec:	000092cd 	.word	0x000092cd
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    a3f0:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    a3f4:	1bf7      	subs	r7, r6, r7
    a3f6:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    a3f8:	043a      	lsls	r2, r7, #16
    a3fa:	d4b3      	bmi.n	a364 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    a3fc:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    a400:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    a404:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    a408:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    a40c:	428a      	cmp	r2, r1
    a40e:	d009      	beq.n	a424 <event_connection_prepare+0x62c>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    a410:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    a414:	f002 0207 	and.w	r2, r2, #7
    a418:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a41a:	bf04      	itt	eq
    a41c:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    a420:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    a424:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    a428:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    a42a:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    a42c:	bf08      	it	eq
    a42e:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    a432:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    a434:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a436:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    a43a:	429a      	cmp	r2, r3
    a43c:	d114      	bne.n	a468 <event_connection_prepare+0x670>
		     conn->conn_interval) ||
    a43e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    a442:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a444:	4299      	cmp	r1, r3
    a446:	d10f      	bne.n	a468 <event_connection_prepare+0x670>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    a448:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a44c:	435a      	muls	r2, r3
    a44e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a452:	f242 7110 	movw	r1, #10000	; 0x2710
    a456:	fb01 2303 	mla	r3, r1, r3, r2
    a45a:	3b01      	subs	r3, #1
    a45c:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    a460:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a462:	b29b      	uxth	r3, r3
    a464:	429a      	cmp	r2, r3
    a466:	d016      	beq.n	a496 <event_connection_prepare+0x69e>
			node_rx = packet_rx_reserve_get(2);
    a468:	2002      	movs	r0, #2
    a46a:	f7fe f819 	bl	84a0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    a46e:	2800      	cmp	r0, #0
    a470:	f43f accb 	beq.w	9e0a <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    a474:	8c23      	ldrh	r3, [r4, #32]
    a476:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    a478:	2308      	movs	r3, #8
    a47a:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    a47c:	2300      	movs	r3, #0
    a47e:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    a480:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    a484:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    a486:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    a48a:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    a48c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a490:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    a492:	f7fe fe6d 	bl	9170 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a496:	6823      	ldr	r3, [r4, #0]
    a498:	6866      	ldr	r6, [r4, #4]
    a49a:	2b00      	cmp	r3, #0
    a49c:	da09      	bge.n	a4b2 <event_connection_prepare+0x6ba>
			u32_t ticks_prepare_to_start =
    a49e:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    a4a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    a4a4:	42b0      	cmp	r0, r6
    a4a6:	bf2c      	ite	cs
    a4a8:	4480      	addcs	r8, r0
    a4aa:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    a4ac:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    a4ae:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    a4b2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    a4b4:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    a4b8:	49bd      	ldr	r1, [pc, #756]	; (a7b0 <event_connection_prepare+0x9b8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    a4ba:	fb13 f307 	smulbb	r3, r3, r7
    a4be:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    a4c0:	fbb3 f2fa 	udiv	r2, r3, sl
    a4c4:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    a4c8:	fb1a f009 	smulbb	r0, sl, r9
    a4cc:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    a4ce:	4283      	cmp	r3, r0
    a4d0:	f080 8108 	bcs.w	a6e4 <event_connection_prepare+0x8ec>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    a4d4:	1ac0      	subs	r0, r0, r3
    a4d6:	f240 1223 	movw	r2, #291	; 0x123
    a4da:	4342      	muls	r2, r0
    a4dc:	17c3      	asrs	r3, r0, #31
    a4de:	fb01 2303 	mla	r3, r1, r3, r2
    a4e2:	fba0 0101 	umull	r0, r1, r0, r1
    a4e6:	4419      	add	r1, r3
    a4e8:	a3af      	add	r3, pc, #700	; (adr r3, a7a8 <event_connection_prepare+0x9b0>)
    a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4ee:	f7f5 fe91 	bl	214 <__aeabi_uldivmod>
    a4f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a4f6:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a4fa:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    a4fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    a4fe:	f8df b2d8 	ldr.w	fp, [pc, #728]	; a7d8 <event_connection_prepare+0x9e0>
    a502:	1bdb      	subs	r3, r3, r7
    a504:	444b      	add	r3, r9
    a506:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    a508:	6823      	ldr	r3, [r4, #0]
    a50a:	42b3      	cmp	r3, r6
    a50c:	bf38      	it	cc
    a50e:	4633      	movcc	r3, r6
    a510:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    a512:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    a516:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    a51a:	2b00      	cmp	r3, #0
    a51c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    a520:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    a522:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    a526:	f280 80ee 	bge.w	a706 <event_connection_prepare+0x90e>
				conn->slave.window_widening_periodic_us *
    a52a:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    a52c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    a52e:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    a532:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    a536:	4a9f      	ldr	r2, [pc, #636]	; (a7b4 <event_connection_prepare+0x9bc>)
    a538:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    a53c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    a540:	f3c3 0382 	ubfx	r3, r3, #2, #3
    a544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    a548:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    a54c:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    a54e:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    a550:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    a554:	4b98      	ldr	r3, [pc, #608]	; (a7b8 <event_connection_prepare+0x9c0>)
				conn->llcp.conn_upd.win_size * 1250;
    a556:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    a55a:	f205 253f 	addw	r5, r5, #575	; 0x23f
    a55e:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    a562:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    a564:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    a568:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    a56a:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    a56c:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    a56e:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    a570:	429f      	cmp	r7, r3
    a572:	bf94      	ite	ls
    a574:	65e7      	strls	r7, [r4, #92]	; 0x5c
    a576:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    a578:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    a57a:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    a57c:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a57e:	fba0 010b 	umull	r0, r1, r0, fp
    a582:	a389      	add	r3, pc, #548	; (adr r3, a7a8 <event_connection_prepare+0x9b0>)
    a584:	e9d3 2300 	ldrd	r2, r3, [r3]
    a588:	f7f5 fe44 	bl	214 <__aeabi_uldivmod>
    a58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a58e:	1a1b      	subs	r3, r3, r0
    a590:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a594:	fbb3 f0f8 	udiv	r0, r3, r8
    a598:	fb08 f000 	mul.w	r0, r8, r0
    a59c:	a382      	add	r3, pc, #520	; (adr r3, a7a8 <event_connection_prepare+0x9b0>)
    a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5a2:	fba0 010b 	umull	r0, r1, r0, fp
    a5a6:	f7f5 fe35 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    a5aa:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a5ac:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    a5b0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    a5b4:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    a5b8:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    a5ba:	f242 7110 	movw	r1, #10000	; 0x2710
    a5be:	fb01 6303 	mla	r3, r1, r3, r6
    a5c2:	3b01      	subs	r3, #1
    a5c4:	fbb3 f3f6 	udiv	r3, r3, r6
    a5c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    a5ca:	4b7c      	ldr	r3, [pc, #496]	; (a7bc <event_connection_prepare+0x9c4>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    a5cc:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    a5d0:	4433      	add	r3, r6
    a5d2:	fbb3 f3f6 	udiv	r3, r3, r6
    a5d6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a5da:	4b79      	ldr	r3, [pc, #484]	; (a7c0 <event_connection_prepare+0x9c8>)
    a5dc:	4433      	add	r3, r6
    a5de:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a5e2:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a5e4:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a5e6:	4299      	cmp	r1, r3
    a5e8:	bfc4      	itt	gt
    a5ea:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    a5ee:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a5f0:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a5f4:	bfc8      	it	gt
    a5f6:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    a5f8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a5fc:	bfc8      	it	gt
    a5fe:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    a600:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    a604:	bf08      	it	eq
    a606:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a60a:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    a60e:	2000      	movs	r0, #0
    a610:	2101      	movs	r1, #1
    a612:	f005 ff19 	bl	10448 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a616:	2200      	movs	r2, #0
    a618:	2101      	movs	r1, #1
		mayfly_was_enabled =
    a61a:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a61c:	4610      	mov	r0, r2
    a61e:	f7fb fb55 	bl	5ccc <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a622:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    a626:	f641 2385 	movw	r3, #6789	; 0x1a85
    a62a:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a62c:	3207      	adds	r2, #7
		ticker_status =
    a62e:	9300      	str	r3, [sp, #0]
    a630:	b2d2      	uxtb	r2, r2
    a632:	4b64      	ldr	r3, [pc, #400]	; (a7c4 <event_connection_prepare+0x9cc>)
    a634:	4608      	mov	r0, r1
    a636:	f7fc f9b9 	bl	69ac <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a63a:	f030 0802 	bics.w	r8, r0, #2
    a63e:	f47f abe4 	bne.w	9e0a <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    a642:	fba5 ab0b 	umull	sl, fp, r5, fp
    a646:	a358      	add	r3, pc, #352	; (adr r3, a7a8 <event_connection_prepare+0x9b0>)
    a648:	e9d3 2300 	ldrd	r2, r3, [r3]
    a64c:	4650      	mov	r0, sl
    a64e:	4659      	mov	r1, fp
    a650:	f7f5 fde0 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    a654:	4a5c      	ldr	r2, [pc, #368]	; (a7c8 <event_connection_prepare+0x9d0>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a656:	f894 6020 	ldrb.w	r6, [r4, #32]
    a65a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    a65e:	2307      	movs	r3, #7
    a660:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a664:	2100      	movs	r1, #0
    a666:	4343      	muls	r3, r0
    a668:	fb02 3301 	mla	r3, r2, r1, r3
    a66c:	fba0 0102 	umull	r0, r1, r0, r2
    a670:	ebba 0000 	subs.w	r0, sl, r0
    a674:	4419      	add	r1, r3
    a676:	eb6b 0101 	sbc.w	r1, fp, r1
    a67a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a67e:	2300      	movs	r3, #0
    a680:	f7f5 fdc8 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a684:	68e3      	ldr	r3, [r4, #12]
    a686:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a688:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    a68c:	494f      	ldr	r1, [pc, #316]	; (a7cc <event_connection_prepare+0x9d4>)
		ticker_status =
    a68e:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a690:	441a      	add	r2, r3
    a692:	4613      	mov	r3, r2
    a694:	4a4e      	ldr	r2, [pc, #312]	; (a7d0 <event_connection_prepare+0x9d8>)
		ticker_status =
    a696:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a698:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    a69c:	bf38      	it	cc
    a69e:	460a      	movcc	r2, r1
    a6a0:	3607      	adds	r6, #7
		ticker_status =
    a6a2:	f641 2195 	movw	r1, #6805	; 0x1a95
    a6a6:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a6a8:	b2f6      	uxtb	r6, r6
		ticker_status =
    a6aa:	4946      	ldr	r1, [pc, #280]	; (a7c4 <event_connection_prepare+0x9cc>)
    a6ac:	9107      	str	r1, [sp, #28]
    a6ae:	9205      	str	r2, [sp, #20]
    a6b0:	9406      	str	r4, [sp, #24]
    a6b2:	f8cd 800c 	str.w	r8, [sp, #12]
    a6b6:	9501      	str	r5, [sp, #4]
    a6b8:	9700      	str	r7, [sp, #0]
    a6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a6bc:	4632      	mov	r2, r6
    a6be:	4641      	mov	r1, r8
    a6c0:	4640      	mov	r0, r8
    a6c2:	f7fc f8d5 	bl	6870 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a6c6:	f030 0002 	bics.w	r0, r0, #2
    a6ca:	f47f ab9e 	bne.w	9e0a <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    a6ce:	f1b9 0f00 	cmp.w	r9, #0
    a6d2:	f000 8332 	beq.w	ad3a <event_connection_prepare+0xf42>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a6d6:	2201      	movs	r2, #1
    a6d8:	4611      	mov	r1, r2
}
    a6da:	b00f      	add	sp, #60	; 0x3c
    a6dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a6e0:	f7fb baf4 	b.w	5ccc <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a6e4:	fb0a 3212 	mls	r2, sl, r2, r3
    a6e8:	b292      	uxth	r2, r2
    a6ea:	fba2 0101 	umull	r0, r1, r2, r1
    a6ee:	f240 1323 	movw	r3, #291	; 0x123
    a6f2:	fb03 1102 	mla	r1, r3, r2, r1
    a6f6:	a32c      	add	r3, pc, #176	; (adr r3, a7a8 <event_connection_prepare+0x9b0>)
    a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6fc:	f7f5 fd8a 	bl	214 <__aeabi_uldivmod>
    a700:	eba8 0300 	sub.w	r3, r8, r0
    a704:	e6f9      	b.n	a4fa <event_connection_prepare+0x702>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a706:	990c      	ldr	r1, [sp, #48]	; 0x30
    a708:	a327      	add	r3, pc, #156	; (adr r3, a7a8 <event_connection_prepare+0x9b0>)
    a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a70e:	fba1 010b 	umull	r0, r1, r1, fp
    a712:	f7f5 fd7f 	bl	214 <__aeabi_uldivmod>
    a716:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    a71a:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    a71c:	4635      	mov	r5, r6
    a71e:	e747      	b.n	a5b0 <event_connection_prepare+0x7b8>
	if (conn->llcp.chan_map.initiate) {
    a720:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a724:	b30b      	cbz	r3, a76a <event_connection_prepare+0x972>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a726:	482b      	ldr	r0, [pc, #172]	; (a7d4 <event_connection_prepare+0x9dc>)
    a728:	f7fb fa2d 	bl	5b86 <mem_acquire>
		if (node_tx) {
    a72c:	4607      	mov	r7, r0
    a72e:	2800      	cmp	r0, #0
    a730:	f43f ae18 	beq.w	a364 <event_connection_prepare+0x56c>
			conn->llcp.chan_map.initiate = 0;
    a734:	2300      	movs	r3, #0
    a736:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    a73a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a73c:	3306      	adds	r3, #6
    a73e:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    a740:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a744:	7903      	ldrb	r3, [r0, #4]
    a746:	f043 0303 	orr.w	r3, r3, #3
    a74a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    a74c:	2308      	movs	r3, #8
    a74e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    a750:	2301      	movs	r3, #1
    a752:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    a754:	2205      	movs	r2, #5
    a756:	f104 0179 	add.w	r1, r4, #121	; 0x79
    a75a:	3008      	adds	r0, #8
    a75c:	f7f7 fa74 	bl	1c48 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    a760:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a764:	f8a7 300d 	strh.w	r3, [r7, #13]
    a768:	e5f8      	b.n	a35c <event_connection_prepare+0x564>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    a76a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a76e:	1af3      	subs	r3, r6, r3
    a770:	041f      	lsls	r7, r3, #16
    a772:	f53f adf7 	bmi.w	a364 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    a776:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a77a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    a77e:	f104 0717 	add.w	r7, r4, #23
    a782:	2205      	movs	r2, #5
    a784:	f104 0179 	add.w	r1, r4, #121	; 0x79
    a788:	4638      	mov	r0, r7
    a78a:	f7f7 fa5d 	bl	1c48 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    a78e:	2105      	movs	r1, #5
    a790:	4638      	mov	r0, r7
    a792:	f7fb fba3 	bl	5edc <util_ones_count_get>
		conn->data_chan_count =
    a796:	7f63      	ldrb	r3, [r4, #29]
    a798:	f360 0305 	bfi	r3, r0, #0, #6
    a79c:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    a79e:	2301      	movs	r3, #1
    a7a0:	7723      	strb	r3, [r4, #28]
    a7a2:	e5df      	b.n	a364 <event_connection_prepare+0x56c>
    a7a4:	f3af 8000 	nop.w
    a7a8:	1afd498d 	.word	0x1afd498d
    a7ac:	00000007 	.word	0x00000007
    a7b0:	09ce5400 	.word	0x09ce5400
    a7b4:	00012a26 	.word	0x00012a26
    a7b8:	000f4240 	.word	0x000f4240
    a7bc:	026259ff 	.word	0x026259ff
    a7c0:	01c9c37f 	.word	0x01c9c37f
    a7c4:	0000978d 	.word	0x0000978d
    a7c8:	1afd498d 	.word	0x1afd498d
    a7cc:	0000aea1 	.word	0x0000aea1
    a7d0:	0000aea5 	.word	0x0000aea5
    a7d4:	200007bc 	.word	0x200007bc
    a7d8:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.encryption.initiate) {
    a7dc:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    a7e0:	f1b9 0f00 	cmp.w	r9, #0
    a7e4:	f47f adbe 	bne.w	a364 <event_connection_prepare+0x56c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a7e8:	48d3      	ldr	r0, [pc, #844]	; (ab38 <event_connection_prepare+0xd40>)
    a7ea:	f7fb f9cc 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    a7ee:	4607      	mov	r7, r0
    a7f0:	2800      	cmp	r0, #0
    a7f2:	f43f adb7 	beq.w	a364 <event_connection_prepare+0x56c>
	if (!conn->role) {
    a7f6:	f994 301d 	ldrsb.w	r3, [r4, #29]
    a7fa:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    a7fc:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    a800:	db4d      	blt.n	a89e <event_connection_prepare+0xaa6>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    a802:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    a806:	465b      	mov	r3, fp
    a808:	464a      	mov	r2, r9
    a80a:	f104 0194 	add.w	r1, r4, #148	; 0x94
    a80e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    a812:	f005 f9a9 	bl	fb68 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    a816:	2210      	movs	r2, #16
    a818:	4659      	mov	r1, fp
    a81a:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    a81e:	f7f7 fa13 	bl	1c48 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    a822:	f504 7189 	add.w	r1, r4, #274	; 0x112
    a826:	2208      	movs	r2, #8
    a828:	f204 1033 	addw	r0, r4, #307	; 0x133
    a82c:	f7f7 fa0c 	bl	1c48 <memcpy>
		conn->ccm_rx.direction = 0;
    a830:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    a834:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    a838:	f369 0300 	bfi	r3, r9, #0, #1
    a83c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    a840:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    a844:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    a848:	f043 0301 	orr.w	r3, r3, #1
    a84c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    a850:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    a854:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    a858:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    a85c:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    a860:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    a864:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    a868:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    a86c:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    a870:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    a874:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    a878:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    a87c:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    a880:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    a884:	4651      	mov	r1, sl
    a886:	4620      	mov	r0, r4
    a888:	f7ff fa76 	bl	9d78 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    a88c:	4639      	mov	r1, r7
    a88e:	4620      	mov	r0, r4
    a890:	f7ff f9e4 	bl	9c5c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    a894:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a898:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    a89c:	e562      	b.n	a364 <event_connection_prepare+0x56c>
	else if (!conn->pause_tx || conn->refresh) {
    a89e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    a8a2:	f003 0348 	and.w	r3, r3, #72	; 0x48
    a8a6:	2b08      	cmp	r3, #8
    a8a8:	f000 80a2 	beq.w	a9f0 <event_connection_prepare+0xbf8>
		if (conn->llcp.encryption.error_code) {
    a8ac:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    a8b0:	f1b9 0f00 	cmp.w	r9, #0
    a8b4:	d020      	beq.n	a8f8 <event_connection_prepare+0xb00>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    a8b6:	7903      	ldrb	r3, [r0, #4]
    a8b8:	f043 0303 	orr.w	r3, r3, #3
    a8bc:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    a8be:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    a8c2:	0698      	lsls	r0, r3, #26
    a8c4:	d512      	bpl.n	a8ec <event_connection_prepare+0xaf4>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    a8c6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    a8ca:	0759      	lsls	r1, r3, #29
    a8cc:	d50e      	bpl.n	a8ec <event_connection_prepare+0xaf4>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    a8ce:	2311      	movs	r3, #17
    a8d0:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    a8d2:	2303      	movs	r3, #3
    a8d4:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    a8d6:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    a8da:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    a8dc:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    a8de:	797b      	ldrb	r3, [r7, #5]
    a8e0:	3301      	adds	r3, #1
    a8e2:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    a8e4:	2300      	movs	r3, #0
    a8e6:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    a8ea:	e7cf      	b.n	a88c <event_connection_prepare+0xa94>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    a8ec:	230d      	movs	r3, #13
    a8ee:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    a8f0:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    a8f4:	2301      	movs	r3, #1
    a8f6:	e7f1      	b.n	a8dc <event_connection_prepare+0xae4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a8f8:	488f      	ldr	r0, [pc, #572]	; (ab38 <event_connection_prepare+0xd40>)
    a8fa:	f7fb f944 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    a8fe:	4682      	mov	sl, r0
    a900:	2800      	cmp	r0, #0
    a902:	f000 82bd 	beq.w	ae80 <event_connection_prepare+0x1088>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a906:	7903      	ldrb	r3, [r0, #4]
    a908:	f043 0303 	orr.w	r3, r3, #3
    a90c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    a90e:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    a912:	230d      	movs	r3, #13
    a914:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    a916:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    a91a:	f100 0308 	add.w	r3, r0, #8
    a91e:	4619      	mov	r1, r3
    a920:	2208      	movs	r2, #8
    a922:	6868      	ldr	r0, [r5, #4]
    a924:	930d      	str	r3, [sp, #52]	; 0x34
    a926:	f006 fa5f 	bl	10de8 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    a92a:	f10a 0310 	add.w	r3, sl, #16
    a92e:	4619      	mov	r1, r3
    a930:	465a      	mov	r2, fp
    a932:	6868      	ldr	r0, [r5, #4]
    a934:	930b      	str	r3, [sp, #44]	; 0x2c
    a936:	f006 fa57 	bl	10de8 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    a93a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a93c:	2208      	movs	r2, #8
    a93e:	4619      	mov	r1, r3
    a940:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a944:	f7f7 f980 	bl	1c48 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    a948:	465a      	mov	r2, fp
    a94a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a94c:	f504 708b 	add.w	r0, r4, #278	; 0x116
    a950:	f7f7 f97a 	bl	1c48 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    a954:	4651      	mov	r1, sl
    a956:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    a958:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    a95c:	f7ff f97e 	bl	9c5c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    a960:	4653      	mov	r3, sl
    a962:	464a      	mov	r2, r9
    a964:	f104 0194 	add.w	r1, r4, #148	; 0x94
    a968:	f104 0084 	add.w	r0, r4, #132	; 0x84
    a96c:	f005 f8fc 	bl	fb68 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    a970:	2210      	movs	r2, #16
    a972:	4651      	mov	r1, sl
    a974:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    a978:	f7f7 f966 	bl	1c48 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    a97c:	2208      	movs	r2, #8
    a97e:	f504 7189 	add.w	r1, r4, #274	; 0x112
    a982:	f204 1033 	addw	r0, r4, #307	; 0x133
    a986:	f7f7 f95f 	bl	1c48 <memcpy>
			conn->ccm_rx.direction = 1;
    a98a:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    a98e:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    a992:	f043 0301 	orr.w	r3, r3, #1
    a996:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    a99a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    a99e:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    a9a2:	f369 0300 	bfi	r3, r9, #0, #1
    a9a6:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    a9aa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    a9ae:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    a9b2:	f043 0310 	orr.w	r3, r3, #16
    a9b6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a9ba:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    a9bc:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a9c0:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    a9c4:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    a9c8:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    a9cc:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    a9d0:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    a9d4:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    a9d8:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    a9dc:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    a9e0:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a9e4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    a9e6:	2301      	movs	r3, #1
    a9e8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    a9ea:	2305      	movs	r3, #5
    a9ec:	71fb      	strb	r3, [r7, #7]
    a9ee:	e74d      	b.n	a88c <event_connection_prepare+0xa94>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    a9f0:	4651      	mov	r1, sl
    a9f2:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    a9f6:	f7ff f9bf 	bl	9d78 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    a9fa:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    a9fe:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    aa02:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    aa06:	f369 03c3 	bfi	r3, r9, #3, #1
    aa0a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    aa0e:	e73d      	b.n	a88c <event_connection_prepare+0xa94>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    aa10:	4849      	ldr	r0, [pc, #292]	; (ab38 <event_connection_prepare+0xd40>)
    aa12:	f7fb f8b8 	bl	5b86 <mem_acquire>
	if (node_tx) {
    aa16:	4607      	mov	r7, r0
    aa18:	2800      	cmp	r0, #0
    aa1a:	f43f aca3 	beq.w	a364 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    aa1e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    aa22:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    aa26:	4b45      	ldr	r3, [pc, #276]	; (ab3c <event_connection_prepare+0xd44>)
    aa28:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    aa2c:	7903      	ldrb	r3, [r0, #4]
    aa2e:	f043 0303 	orr.w	r3, r3, #3
    aa32:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    aa34:	2309      	movs	r3, #9
    aa36:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    aa38:	f994 301d 	ldrsb.w	r3, [r4, #29]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	bfac      	ite	ge
    aa40:	2308      	movge	r3, #8
    aa42:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    aa44:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    aa46:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    aa48:	2100      	movs	r1, #0
    aa4a:	4410      	add	r0, r2
    aa4c:	f7f7 f928 	bl	1ca0 <memset>
			conn->llcp_features & 0xFF;
    aa50:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    aa54:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    aa56:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    aa58:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    aa5a:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    aa5c:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    aa5e:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    aa60:	4620      	mov	r0, r4
    aa62:	f7ff f8fb 	bl	9c5c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    aa66:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    aa6a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    aa6e:	e479      	b.n	a364 <event_connection_prepare+0x56c>
	if (conn->llcp_version.tx == 0) {
    aa70:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aa74:	07da      	lsls	r2, r3, #31
    aa76:	d424      	bmi.n	aac2 <event_connection_prepare+0xcca>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    aa78:	482f      	ldr	r0, [pc, #188]	; (ab38 <event_connection_prepare+0xd40>)
    aa7a:	f7fb f884 	bl	5b86 <mem_acquire>
		if (node_tx) {
    aa7e:	4601      	mov	r1, r0
    aa80:	2800      	cmp	r0, #0
    aa82:	f43f ac6f 	beq.w	a364 <event_connection_prepare+0x56c>
			conn->llcp_ack = conn->llcp_req;
    aa86:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    aa8a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    aa8e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aa92:	f043 0301 	orr.w	r3, r3, #1
    aa96:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    aa9a:	7903      	ldrb	r3, [r0, #4]
    aa9c:	f043 0303 	orr.w	r3, r3, #3
    aaa0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    aaa2:	2306      	movs	r3, #6
    aaa4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    aaa6:	230c      	movs	r3, #12
    aaa8:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    aaaa:	2309      	movs	r3, #9
    aaac:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    aaae:	f06f 030e 	mvn.w	r3, #14
    aab2:	7243      	strb	r3, [r0, #9]
    aab4:	2305      	movs	r3, #5
    aab6:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    aab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aabc:	72c3      	strb	r3, [r0, #11]
    aabe:	7303      	strb	r3, [r0, #12]
    aac0:	e7ce      	b.n	aa60 <event_connection_prepare+0xc68>
	} else if (conn->llcp_version.rx != 0) {
    aac2:	079b      	lsls	r3, r3, #30
    aac4:	f57f a9a1 	bpl.w	9e0a <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    aac8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    aacc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    aad0:	2002      	movs	r0, #2
    aad2:	f7fd fce5 	bl	84a0 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    aad6:	2800      	cmp	r0, #0
    aad8:	f43f a997 	beq.w	9e0a <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    aadc:	8c23      	ldrh	r3, [r4, #32]
    aade:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    aae0:	2301      	movs	r3, #1
    aae2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    aae4:	7a03      	ldrb	r3, [r0, #8]
    aae6:	f043 0303 	orr.w	r3, r3, #3
    aaea:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    aaec:	2306      	movs	r3, #6
    aaee:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    aaf0:	230c      	movs	r3, #12
    aaf2:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    aaf4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    aaf8:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    aafa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    aafe:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    ab02:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    ab06:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    ab0a:	f7fe fb31 	bl	9170 <packet_rx_enqueue>
    ab0e:	e429      	b.n	a364 <event_connection_prepare+0x56c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ab10:	4809      	ldr	r0, [pc, #36]	; (ab38 <event_connection_prepare+0xd40>)
    ab12:	f7fb f838 	bl	5b86 <mem_acquire>
	if (node_tx) {
    ab16:	4601      	mov	r1, r0
    ab18:	2800      	cmp	r0, #0
    ab1a:	f43f ac23 	beq.w	a364 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    ab1e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ab22:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ab26:	7903      	ldrb	r3, [r0, #4]
    ab28:	f043 0303 	orr.w	r3, r3, #3
    ab2c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    ab2e:	2301      	movs	r3, #1
    ab30:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    ab32:	2312      	movs	r3, #18
    ab34:	71c3      	strb	r3, [r0, #7]
    ab36:	e793      	b.n	aa60 <event_connection_prepare+0xc68>
    ab38:	200007bc 	.word	0x200007bc
    ab3c:	000141ff 	.word	0x000141ff
	if (conn->llcp.phy_upd_ind.initiate) {
    ab40:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    ab44:	07d7      	lsls	r7, r2, #31
    ab46:	d54f      	bpl.n	abe8 <event_connection_prepare+0xdf0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ab48:	48d0      	ldr	r0, [pc, #832]	; (ae8c <event_connection_prepare+0x1094>)
    ab4a:	f7fb f81c 	bl	5b86 <mem_acquire>
		if (node_tx) {
    ab4e:	4607      	mov	r7, r0
    ab50:	2800      	cmp	r0, #0
    ab52:	f43f ac07 	beq.w	a364 <event_connection_prepare+0x56c>
			conn->llcp.phy_upd_ind.initiate = 0;
    ab56:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ab5a:	f36f 0300 	bfc	r3, #0, #1
    ab5e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    ab62:	b2db      	uxtb	r3, r3
    ab64:	f3c3 0982 	ubfx	r9, r3, #2, #3
    ab68:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    ab6c:	d136      	bne.n	abdc <event_connection_prepare+0xde4>
				conn->llcp_ack = conn->llcp_req;
    ab6e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    ab72:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    ab76:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    ab78:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    ab7c:	d517      	bpl.n	abae <event_connection_prepare+0xdb6>
					node_rx = packet_rx_reserve_get(2);
    ab7e:	2002      	movs	r0, #2
    ab80:	f7fd fc8e 	bl	84a0 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    ab84:	2800      	cmp	r0, #0
    ab86:	f43f a940 	beq.w	9e0a <event_connection_prepare+0x12>
					node_rx->hdr.handle = conn->handle;
    ab8a:	8c23      	ldrh	r3, [r4, #32]
    ab8c:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    ab8e:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    ab92:	230c      	movs	r3, #12
    ab94:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    ab96:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ab9a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ab9e:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    aba0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    aba4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aba8:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    abaa:	f7fe fae1 	bl	9170 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    abae:	793b      	ldrb	r3, [r7, #4]
    abb0:	f043 0303 	orr.w	r3, r3, #3
    abb4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    abb6:	2305      	movs	r3, #5
    abb8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    abba:	2318      	movs	r3, #24
    abbc:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    abbe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    abc2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    abc6:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    abc8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    abcc:	f3c3 1342 	ubfx	r3, r3, #5, #3
    abd0:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    abd2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    abd6:	817b      	strh	r3, [r7, #10]
    abd8:	f7ff bbc0 	b.w	a35c <event_connection_prepare+0x564>
								 conn->latency +
    abdc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    abde:	3306      	adds	r3, #6
    abe0:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    abe2:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    abe6:	e7e2      	b.n	abae <event_connection_prepare+0xdb6>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    abe8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    abec:	1af3      	subs	r3, r6, r3
    abee:	0419      	lsls	r1, r3, #16
    abf0:	f53f abb8 	bmi.w	a364 <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    abf4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    abf8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    abfc:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    ac00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    ac04:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    ac08:	bf18      	it	ne
    ac0a:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    ac0e:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    ac12:	bf1c      	itt	ne
    ac14:	f367 03c5 	bfine	r3, r7, #3, #3
    ac18:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    ac1c:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    ac20:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    ac24:	d008      	beq.n	ac38 <event_connection_prepare+0xe40>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    ac26:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ac2a:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    ac2e:	095b      	lsrs	r3, r3, #5
    ac30:	f363 0702 	bfi	r7, r3, #0, #3
    ac34:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    ac38:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ac3c:	461f      	mov	r7, r3
    ac3e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ac42:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    ac46:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    ac48:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    ac4c:	d40b      	bmi.n	ac66 <event_connection_prepare+0xe6e>
    ac4e:	b2fb      	uxtb	r3, r7
    ac50:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ac54:	4283      	cmp	r3, r0
    ac56:	d106      	bne.n	ac66 <event_connection_prepare+0xe6e>
		    (conn->phy_rx == old_rx)) {
    ac58:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    ac5c:	f003 0307 	and.w	r3, r3, #7
    ac60:	428b      	cmp	r3, r1
    ac62:	f43f ab7f 	beq.w	a364 <event_connection_prepare+0x56c>
		node_rx = packet_rx_reserve_get(2);
    ac66:	2002      	movs	r0, #2
    ac68:	f7fd fc1a 	bl	84a0 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    ac6c:	2800      	cmp	r0, #0
    ac6e:	f43f a8cc 	beq.w	9e0a <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    ac72:	8c23      	ldrh	r3, [r4, #32]
    ac74:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ac76:	230c      	movs	r3, #12
    ac78:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    ac7a:	2300      	movs	r3, #0
    ac7c:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    ac7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ac82:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ac86:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    ac88:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ac8c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ac90:	7343      	strb	r3, [r0, #13]
    ac92:	e73a      	b.n	ab0a <event_connection_prepare+0xd12>
		free_count_rx = packet_rx_acquired_count_get() +
    ac94:	f7fd fbee 	bl	8474 <packet_rx_acquired_count_get>
    ac98:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ac9a:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ac9e:	f7fa ffa1 	bl	5be4 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    aca2:	4438      	add	r0, r7
    aca4:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    aca6:	28ff      	cmp	r0, #255	; 0xff
    aca8:	f63f a8af 	bhi.w	9e0a <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    acac:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    acb0:	4283      	cmp	r3, r0
    acb2:	d129      	bne.n	ad08 <event_connection_prepare+0xf10>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    acb4:	4875      	ldr	r0, [pc, #468]	; (ae8c <event_connection_prepare+0x1094>)
    acb6:	f7fa ff66 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    acba:	4601      	mov	r1, r0
    acbc:	b320      	cbz	r0, ad08 <event_connection_prepare+0xf10>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    acbe:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    acc2:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    acc6:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    acca:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    accc:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    acce:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    acd0:	f365 0301 	bfi	r3, r5, #0, #2
    acd4:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    acd8:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    acda:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    acdc:	f043 0303 	orr.w	r3, r3, #3
    ace0:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    ace2:	2309      	movs	r3, #9
    ace4:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    ace6:	2314      	movs	r3, #20
    ace8:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    acea:	231b      	movs	r3, #27
    acec:	720b      	strb	r3, [r1, #8]
    acee:	2300      	movs	r3, #0
    acf0:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    acf2:	2348      	movs	r3, #72	; 0x48
    acf4:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    acf6:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    acf8:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    acfa:	4620      	mov	r0, r4
    acfc:	f7fe ffae 	bl	9c5c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ad00:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ad04:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    ad08:	f894 3020 	ldrb.w	r3, [r4, #32]
    ad0c:	f994 501d 	ldrsb.w	r5, [r4, #29]
    ad10:	485f      	ldr	r0, [pc, #380]	; (ae90 <event_connection_prepare+0x1098>)
    ad12:	4960      	ldr	r1, [pc, #384]	; (ae94 <event_connection_prepare+0x109c>)
    ad14:	68a2      	ldr	r2, [r4, #8]
    ad16:	9403      	str	r4, [sp, #12]
    ad18:	3307      	adds	r3, #7
    ad1a:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    ad1e:	bf38      	it	cc
    ad20:	4601      	movcc	r1, r0
    ad22:	b2db      	uxtb	r3, r3
    ad24:	e88d 000c 	stmia.w	sp, {r2, r3}
    ad28:	9102      	str	r1, [sp, #8]
    ad2a:	1d23      	adds	r3, r4, #4
    ad2c:	4622      	mov	r2, r4
    ad2e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ad30:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    ad32:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    ad34:	f7fe fd68 	bl	9808 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    ad38:	8466      	strh	r6, [r4, #34]	; 0x22
}
    ad3a:	b00f      	add	sp, #60	; 0x3c
    ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    ad40:	f7fd fb98 	bl	8474 <packet_rx_acquired_count_get>
    ad44:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ad46:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ad4a:	f7fa ff4b 	bl	5be4 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ad4e:	4438      	add	r0, r7
    ad50:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    ad52:	28ff      	cmp	r0, #255	; 0xff
    ad54:	f63f a859 	bhi.w	9e0a <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    ad58:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    ad5c:	4283      	cmp	r3, r0
    ad5e:	f47f a854 	bne.w	9e0a <event_connection_prepare+0x12>
		conn->llcp_length.ack = conn->llcp_length.req;
    ad62:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ad66:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    ad6a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    ad6e:	2100      	movs	r1, #0
    ad70:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    ad74:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ad78:	f361 02c3 	bfi	r2, r1, #3, #1
    ad7c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    ad80:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    ad84:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    ad86:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    ad8a:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    ad8c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    ad90:	f7fa ff28 	bl	5be4 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    ad94:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    ad98:	b10b      	cbz	r3, ad9e <event_connection_prepare+0xfa6>
			free_count_conn++;
    ad9a:	3001      	adds	r0, #1
    ad9c:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    ad9e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    ada2:	b10b      	cbz	r3, ada8 <event_connection_prepare+0xfb0>
			free_count_conn++;
    ada4:	3001      	adds	r0, #1
    ada6:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ada8:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    adaa:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    adae:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    adb0:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    adb2:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    adb6:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    adb8:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    adba:	d05e      	beq.n	ae7a <event_connection_prepare+0x1082>
    adbc:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    adc0:	42bb      	cmp	r3, r7
    adc2:	d35a      	bcc.n	ae7a <event_connection_prepare+0x1082>
		node_rx = packet_rx_reserve_get(2);
    adc4:	2002      	movs	r0, #2
    adc6:	f7fd fb6b 	bl	84a0 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    adca:	2800      	cmp	r0, #0
    adcc:	f43f a81d 	beq.w	9e0a <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    add0:	8c23      	ldrh	r3, [r4, #32]
    add2:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    add4:	2301      	movs	r3, #1
    add6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    add8:	7a03      	ldrb	r3, [r0, #8]
    adda:	f043 0303 	orr.w	r3, r3, #3
    adde:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    ade0:	2309      	movs	r3, #9
    ade2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    ade4:	2315      	movs	r3, #21
    ade6:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    ade8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    adea:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    adec:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    adee:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    adf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    adf2:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    adf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    adf6:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    adf8:	f7fe f9ba 	bl	9170 <packet_rx_enqueue>
    adfc:	e784      	b.n	ad08 <event_connection_prepare+0xf10>
				if (_radio.packet_rx_acquire == 0) {
    adfe:	b90b      	cbnz	r3, ae04 <event_connection_prepare+0x100c>
						_radio.packet_rx_count - 1;
    ae00:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    ae04:	3b01      	subs	r3, #1
    ae06:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    ae0a:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    ae0e:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    ae12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ae16:	4649      	mov	r1, r9
    ae18:	6818      	ldr	r0, [r3, #0]
    ae1a:	f7fa fece 	bl	5bba <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    ae1e:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    ae22:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    ae26:	3a01      	subs	r2, #1
    ae28:	4293      	cmp	r3, r2
    ae2a:	f6be afee 	bge.w	9e0a <event_connection_prepare+0x12>
				_radio.link_rx_data_quota++;
    ae2e:	3301      	adds	r3, #1
    ae30:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    ae34:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    ae38:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    ae3c:	4293      	cmp	r3, r2
    ae3e:	d1de      	bne.n	adfe <event_connection_prepare+0x1006>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    ae40:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    ae42:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    ae46:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    ae48:	bf9a      	itte	ls
    ae4a:	2334      	movls	r3, #52	; 0x34
    ae4c:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    ae50:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    ae54:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    ae58:	fbb2 f2f1 	udiv	r2, r2, r1
    ae5c:	b2d2      	uxtb	r2, r2
    ae5e:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    ae62:	2a00      	cmp	r2, #0
    ae64:	f43e afd1 	beq.w	9e0a <event_connection_prepare+0x12>
			mem_init(_radio.pkt_rx_data_pool,
    ae68:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    ae6c:	4b0a      	ldr	r3, [pc, #40]	; (ae98 <event_connection_prepare+0x10a0>)
    ae6e:	f7fa fe63 	bl	5b38 <mem_init>
			packet_rx_allocate(4);
    ae72:	2004      	movs	r0, #4
    ae74:	f7fd fb8c 	bl	8590 <packet_rx_allocate>
    ae78:	e7a4      	b.n	adc4 <event_connection_prepare+0xfcc>
				mem_release(node_rx->hdr.onion.link,
    ae7a:	f8df 9020 	ldr.w	r9, [pc, #32]	; ae9c <event_connection_prepare+0x10a4>
    ae7e:	e7d9      	b.n	ae34 <event_connection_prepare+0x103c>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ae80:	4902      	ldr	r1, [pc, #8]	; (ae8c <event_connection_prepare+0x1094>)
    ae82:	4638      	mov	r0, r7
    ae84:	f7fa fe99 	bl	5bba <mem_release>
    ae88:	f7ff ba6c 	b.w	a364 <event_connection_prepare+0x56c>
    ae8c:	200007bc 	.word	0x200007bc
    ae90:	0000b379 	.word	0x0000b379
    ae94:	0000aee5 	.word	0x0000aee5
    ae98:	20000790 	.word	0x20000790
    ae9c:	200007a8 	.word	0x200007a8

0000aea0 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    aea0:	f7fe bfaa 	b.w	9df8 <event_connection_prepare>

0000aea4 <event_slave_prepare>:
    aea4:	f7fe bfa8 	b.w	9df8 <event_connection_prepare>

0000aea8 <connection_configure>:
{
    aea8:	b510      	push	{r4, lr}
    aeaa:	4604      	mov	r4, r0
	radio_reset();
    aeac:	f004 ff38 	bl	fd20 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    aeb0:	2000      	movs	r0, #0
    aeb2:	f004 ff5f 	bl	fd74 <radio_tx_power_set>
	radio_isr_set(isr);
    aeb6:	480a      	ldr	r0, [pc, #40]	; (aee0 <connection_configure+0x38>)
    aeb8:	f004 fefc 	bl	fcb4 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    aebc:	f104 0010 	add.w	r0, r4, #16
    aec0:	f004 ff76 	bl	fdb0 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    aec4:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    aec6:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    aec8:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    aeca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    aece:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    aed0:	f240 605b 	movw	r0, #1627	; 0x65b
    aed4:	4319      	orrs	r1, r3
}
    aed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    aeda:	f005 b811 	b.w	ff00 <radio_crc_configure>
    aede:	bf00      	nop
    aee0:	0000c601 	.word	0x0000c601

0000aee4 <event_slave>:
{
    aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aee8:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    aeea:	4b65      	ldr	r3, [pc, #404]	; (b080 <event_slave+0x19c>)
    aeec:	7cda      	ldrb	r2, [r3, #19]
{
    aeee:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    aef0:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    aef4:	461d      	mov	r5, r3
    aef6:	b12a      	cbz	r2, af04 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    aef8:	4040      	eors	r0, r0
    aefa:	f380 8811 	msr	BASEPRI, r0
    aefe:	f04f 0004 	mov.w	r0, #4
    af02:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    af04:	7c1b      	ldrb	r3, [r3, #16]
    af06:	8c22      	ldrh	r2, [r4, #32]
    af08:	b2db      	uxtb	r3, r3
    af0a:	3207      	adds	r2, #7
    af0c:	4293      	cmp	r3, r2
    af0e:	d1f3      	bne.n	aef8 <event_slave+0x14>
	_radio.packet_counter = 0;
    af10:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    af14:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    af18:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    af1a:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    af1c:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    af1e:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    af20:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    af22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    af24:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    af28:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    af2a:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    af2c:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    af2e:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    af30:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    af32:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    af34:	f7ff ffb8 	bl	aea8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    af38:	2096      	movs	r0, #150	; 0x96
    af3a:	f005 f89b 	bl	10074 <radio_tmr_tifs_set>
				     conn->phy_flags);
    af3e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    af42:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    af46:	09d3      	lsrs	r3, r2, #7
    af48:	4631      	mov	r1, r6
    af4a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    af4e:	f000 0007 	and.w	r0, r0, #7
    af52:	f004 ffff 	bl	ff54 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    af56:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    af5a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    af5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    af62:	4620      	mov	r0, r4
    af64:	3108      	adds	r1, #8
    af66:	f7fd fd2f 	bl	89c8 <rx_packet_set>
	if (conn->data_chan_sel) {
    af6a:	7f63      	ldrb	r3, [r4, #29]
    af6c:	f013 0f40 	tst.w	r3, #64	; 0x40
    af70:	f104 0217 	add.w	r2, r4, #23
    af74:	d059      	beq.n	b02a <event_slave+0x146>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    af76:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    af78:	8be1      	ldrh	r1, [r4, #30]
    af7a:	3801      	subs	r0, #1
    af7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    af80:	b280      	uxth	r0, r0
    af82:	f7fe fd4d 	bl	9a20 <chan_sel_2>
	chan_set(data_chan_use);
    af86:	f7fe f9c9 	bl	931c <chan_set>
	conn->slave.window_widening_event_us +=
    af8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    af8c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    af8e:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    af90:	2200      	movs	r2, #0
    af92:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    af94:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    af96:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    af98:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    af9a:	bf88      	it	hi
    af9c:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    af9e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    afa0:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    afa2:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    afa4:	4413      	add	r3, r2
    afa6:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    afa8:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    afaa:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    afac:	f107 0109 	add.w	r1, r7, #9
    afb0:	4630      	mov	r0, r6
    afb2:	f005 f86b 	bl	1008c <radio_tmr_start>
    afb6:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    afb8:	f005 f904 	bl	101c4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    afbc:	4630      	mov	r0, r6
    afbe:	f005 f923 	bl	10208 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    afc2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    afc4:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    afc6:	f103 0650 	add.w	r6, r3, #80	; 0x50
    afca:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    afce:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    afd2:	2101      	movs	r1, #1
    afd4:	f000 0007 	and.w	r0, r0, #7
    afd8:	f004 ff43 	bl	fe62 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    afdc:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    afde:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    afe0:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    afe4:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    afe8:	2802      	cmp	r0, #2
    afea:	d03e      	beq.n	b06a <event_slave+0x186>
		return 40;
    afec:	2804      	cmp	r0, #4
    afee:	bf0c      	ite	eq
    aff0:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    aff4:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    aff6:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    aff8:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    affa:	f004 ff34 	bl	fe66 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    affe:	4430      	add	r0, r6
    b000:	f005 f8c2 	bl	10188 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    b004:	f894 1020 	ldrb.w	r1, [r4, #32]
    b008:	3107      	adds	r1, #7
    b00a:	463a      	mov	r2, r7
    b00c:	b2c9      	uxtb	r1, r1
    b00e:	4620      	mov	r0, r4
    b010:	f7fe fd4a 	bl	9aa8 <preempt_calc>
    b014:	4603      	mov	r3, r0
    b016:	b350      	cbz	r0, b06e <event_slave+0x18a>
		_radio.state = STATE_STOP;
    b018:	2304      	movs	r3, #4
    b01a:	752b      	strb	r3, [r5, #20]
		radio_disable();
    b01c:	f004 ff34 	bl	fe88 <radio_disable>
	packet_tx_enqueue(2);
    b020:	2002      	movs	r0, #2
}
    b022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    b026:	f7fe ba23 	b.w	9470 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    b02a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    b02c:	7fa6      	ldrb	r6, [r4, #30]
    b02e:	fb01 6606 	mla	r6, r1, r6, r6
    b032:	7fe1      	ldrb	r1, [r4, #31]
    b034:	2025      	movs	r0, #37	; 0x25
    b036:	440e      	add	r6, r1
    b038:	fb96 f1f0 	sdiv	r1, r6, r0
    b03c:	fb00 6611 	mls	r6, r0, r1, r6
    b040:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b042:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    b044:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b046:	5c51      	ldrb	r1, [r2, r1]
    b048:	f006 0607 	and.w	r6, r6, #7
    b04c:	fa41 f606 	asr.w	r6, r1, r6
    b050:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    b052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b056:	d496      	bmi.n	af86 <event_slave+0xa2>
		chan_index = chan_next % chan_count;
    b058:	fbb0 f1f3 	udiv	r1, r0, r3
    b05c:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    b060:	b2c9      	uxtb	r1, r1
    b062:	4610      	mov	r0, r2
    b064:	f7fd f9ea 	bl	843c <chan_sel_remap>
    b068:	e78d      	b.n	af86 <event_slave+0xa2>
		return 24;
    b06a:	2318      	movs	r3, #24
    b06c:	e7c3      	b.n	aff6 <event_slave+0x112>
		ticker_status =
    b06e:	4a05      	ldr	r2, [pc, #20]	; (b084 <event_slave+0x1a0>)
    b070:	4601      	mov	r1, r0
    b072:	f7fb fd19 	bl	6aa8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b076:	f030 0302 	bics.w	r3, r0, #2
    b07a:	f47f af3d 	bne.w	aef8 <event_slave+0x14>
    b07e:	e7cf      	b.n	b020 <event_slave+0x13c>
    b080:	20000660 	.word	0x20000660
    b084:	00009041 	.word	0x00009041

0000b088 <prepare_pdu_data_tx>:
	    conn->empty ||
    b088:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    b08c:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b092:	4604      	mov	r4, r0
    b094:	460e      	mov	r6, r1
	if (/* empty packet */
    b096:	d109      	bne.n	b0ac <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    b098:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    b09c:	b131      	cbz	r1, b0ac <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    b09e:	f01c 0f08 	tst.w	ip, #8
    b0a2:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    b0a6:	d022      	beq.n	b0ee <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    b0a8:	4571      	cmp	r1, lr
    b0aa:	d020      	beq.n	b0ee <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    b0ac:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b0b4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    b0b8:	f004 ff38 	bl	ff2c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b0bc:	7803      	ldrb	r3, [r0, #0]
    b0be:	2201      	movs	r2, #1
    b0c0:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    b0c4:	2200      	movs	r2, #0
    b0c6:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    b0c8:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b0cc:	7003      	strb	r3, [r0, #0]
    b0ce:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    b0d0:	b152      	cbz	r2, b0e8 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    b0d2:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    b0d6:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    b0d8:	7803      	ldrb	r3, [r0, #0]
    b0da:	f36f 1347 	bfc	r3, #5, #3
    b0de:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    b0e0:	2300      	movs	r3, #0
    b0e2:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    b0e4:	6030      	str	r0, [r6, #0]
    b0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    b0e8:	f362 1304 	bfi	r3, r2, #4, #1
    b0ec:	e7f3      	b.n	b0d6 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    b0ee:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    b0f2:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    b0f6:	1d0d      	adds	r5, r1, #4
    b0f8:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    b0fa:	b913      	cbnz	r3, b102 <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    b0fc:	7843      	ldrb	r3, [r0, #1]
    b0fe:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    b102:	b122      	cbz	r2, b10e <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b104:	5cab      	ldrb	r3, [r5, r2]
    b106:	2701      	movs	r7, #1
    b108:	f367 0301 	bfi	r3, r7, #0, #2
    b10c:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    b10e:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    b112:	1abf      	subs	r7, r7, r2
    b114:	b2ff      	uxtb	r7, r7
    b116:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    b118:	5cab      	ldrb	r3, [r5, r2]
    b11a:	f36f 1304 	bfc	r3, #4, #1
    b11e:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    b120:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    b124:	f003 0307 	and.w	r3, r3, #7
    b128:	2b02      	cmp	r3, #2
    b12a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    b12c:	bf15      	itete	ne
    b12e:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    b130:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    b132:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    b134:	3b0b      	subeq	r3, #11
    b136:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    b138:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    b13c:	bf18      	it	ne
    b13e:	3b04      	subne	r3, #4
    b140:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    b144:	bf18      	it	ne
    b146:	b29b      	uxthne	r3, r3
    b148:	4563      	cmp	r3, ip
    b14a:	bf28      	it	cs
    b14c:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    b14e:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    b150:	bf81      	itttt	hi
    b152:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    b154:	5cab      	ldrbhi	r3, [r5, r2]
    b156:	f043 0310 	orrhi.w	r3, r3, #16
    b15a:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    b15c:	680b      	ldr	r3, [r1, #0]
    b15e:	b11b      	cbz	r3, b168 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    b160:	5cab      	ldrb	r3, [r5, r2]
    b162:	f043 0310 	orr.w	r3, r3, #16
    b166:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    b168:	f1be 0f00 	cmp.w	lr, #0
    b16c:	d1b4      	bne.n	b0d8 <prepare_pdu_data_tx+0x50>
    b16e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b172:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    b174:	bf1c      	itt	ne
    b176:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    b17a:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    b17e:	e7ab      	b.n	b0d8 <prepare_pdu_data_tx+0x50>

0000b180 <mayfly_xtal_stop_calc>:
{
    b180:	b5f0      	push	{r4, r5, r6, r7, lr}
    b182:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b184:	2302      	movs	r3, #2
    b186:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b188:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b18a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b18c:	4e74      	ldr	r6, [pc, #464]	; (b360 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    b18e:	4d75      	ldr	r5, [pc, #468]	; (b364 <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
    b190:	930a      	str	r3, [sp, #40]	; 0x28
{
    b192:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b194:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b196:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b19a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b19c:	ab09      	add	r3, sp, #36	; 0x24
    b19e:	9302      	str	r3, [sp, #8]
    b1a0:	ab0c      	add	r3, sp, #48	; 0x30
    b1a2:	9300      	str	r3, [sp, #0]
    b1a4:	9601      	str	r6, [sp, #4]
    b1a6:	ab0d      	add	r3, sp, #52	; 0x34
    b1a8:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b1ac:	2101      	movs	r1, #1
    b1ae:	2000      	movs	r0, #0
    b1b0:	f7fb fc38 	bl	6a24 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b1b4:	2802      	cmp	r0, #2
    b1b6:	d00b      	beq.n	b1d0 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b1ba:	b16b      	cbz	r3, b1d8 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b1bc:	4040      	eors	r0, r0
    b1be:	f380 8811 	msr	BASEPRI, r0
    b1c2:	f04f 0004 	mov.w	r0, #4
    b1c6:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b1c8:	2101      	movs	r1, #1
    b1ca:	2000      	movs	r0, #0
    b1cc:	f7fb fca8 	bl	6b20 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b1d2:	2b02      	cmp	r3, #2
    b1d4:	d0f8      	beq.n	b1c8 <mayfly_xtal_stop_calc+0x48>
    b1d6:	e7ef      	b.n	b1b8 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b1d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b1dc:	2bff      	cmp	r3, #255	; 0xff
    b1de:	d004      	beq.n	b1ea <mayfly_xtal_stop_calc+0x6a>
    b1e0:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b1e4:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b1e6:	4293      	cmp	r3, r2
    b1e8:	dad8      	bge.n	b19c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b1ea:	1f5a      	subs	r2, r3, #5
    b1ec:	b2d2      	uxtb	r2, r2
    b1ee:	2af9      	cmp	r2, #249	; 0xf9
    b1f0:	4f5d      	ldr	r7, [pc, #372]	; (b368 <mayfly_xtal_stop_calc+0x1e8>)
    b1f2:	d805      	bhi.n	b200 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
    b1f4:	4a5b      	ldr	r2, [pc, #364]	; (b364 <mayfly_xtal_stop_calc+0x1e4>)
    b1f6:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b1fa:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b1fc:	4293      	cmp	r3, r2
    b1fe:	db06      	blt.n	b20e <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
    b200:	783b      	ldrb	r3, [r7, #0]
    b202:	b113      	cbz	r3, b20a <mayfly_xtal_stop_calc+0x8a>
    b204:	2001      	movs	r0, #1
    b206:	f7fd ff45 	bl	9094 <mayfly_xtal_retain.part.13>
}
    b20a:	b00f      	add	sp, #60	; 0x3c
    b20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b20e:	a90a      	add	r1, sp, #40	; 0x28
    b210:	b2e0      	uxtb	r0, r4
    b212:	f7fd ff21 	bl	9058 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b216:	2800      	cmp	r0, #0
    b218:	d0d0      	beq.n	b1bc <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b21a:	6803      	ldr	r3, [r0, #0]
    b21c:	6844      	ldr	r4, [r0, #4]
    b21e:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b220:	bfb8      	it	lt
    b222:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b224:	429c      	cmp	r4, r3
    b226:	bf38      	it	cc
    b228:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b22a:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b22c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b230:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b232:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b234:	f7fd ff10 	bl	9058 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b238:	4605      	mov	r5, r0
    b23a:	2800      	cmp	r0, #0
    b23c:	d0be      	beq.n	b1bc <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next =
    b23e:	6886      	ldr	r6, [r0, #8]
    b240:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b242:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b244:	429e      	cmp	r6, r3
    b246:	bf38      	it	cc
    b248:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b24a:	2a00      	cmp	r2, #0
    b24c:	da05      	bge.n	b25a <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
    b24e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b250:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b254:	4433      	add	r3, r6
    b256:	1a9b      	subs	r3, r3, r2
    b258:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b25a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b25c:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b260:	4293      	cmp	r3, r2
    b262:	d20b      	bcs.n	b27c <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
    b264:	783b      	ldrb	r3, [r7, #0]
    b266:	b113      	cbz	r3, b26e <mayfly_xtal_stop_calc+0xee>
    b268:	2001      	movs	r0, #1
    b26a:	f7fd ff13 	bl	9094 <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b26e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b272:	2101      	movs	r1, #1
    b274:	4628      	mov	r0, r5
    b276:	f7fd ff2f 	bl	90d8 <prepare_normal_set>
    b27a:	e7c6      	b.n	b20a <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
    b27c:	783a      	ldrb	r2, [r7, #0]
    b27e:	b93a      	cbnz	r2, b290 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
    b280:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    b282:	4b3a      	ldr	r3, [pc, #232]	; (b36c <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    b284:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    b286:	4611      	mov	r1, r2
    b288:	f7fa fd48 	bl	5d1c <mayfly_enqueue>
			LL_ASSERT(!retval);
    b28c:	2800      	cmp	r0, #0
    b28e:	d195      	bne.n	b1bc <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b290:	682b      	ldr	r3, [r5, #0]
    b292:	2b00      	cmp	r3, #0
    b294:	db15      	blt.n	b2c2 <mayfly_xtal_stop_calc+0x142>
    b296:	429e      	cmp	r6, r3
    b298:	d213      	bcs.n	b2c2 <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b29a:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b29c:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b29e:	b29b      	uxth	r3, r3
			ticker_status =
    b2a0:	4933      	ldr	r1, [pc, #204]	; (b370 <mayfly_xtal_stop_calc+0x1f0>)
    b2a2:	9105      	str	r1, [sp, #20]
    b2a4:	9302      	str	r3, [sp, #8]
    b2a6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b2aa:	9506      	str	r5, [sp, #24]
    b2ac:	9004      	str	r0, [sp, #16]
    b2ae:	9003      	str	r0, [sp, #12]
    b2b0:	9001      	str	r0, [sp, #4]
    b2b2:	9000      	str	r0, [sp, #0]
    b2b4:	2101      	movs	r1, #1
    b2b6:	f7fb fb2b 	bl	6910 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b2ba:	f030 0302 	bics.w	r3, r0, #2
    b2be:	f47f af7d 	bne.w	b1bc <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
    b2c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b2c4:	2e00      	cmp	r6, #0
    b2c6:	d0a0      	beq.n	b20a <mayfly_xtal_stop_calc+0x8a>
    b2c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b2ca:	2d00      	cmp	r5, #0
    b2cc:	d09d      	beq.n	b20a <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b2ce:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b2d0:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b2d2:	429a      	cmp	r2, r3
    b2d4:	d199      	bne.n	b20a <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b2d6:	4827      	ldr	r0, [pc, #156]	; (b374 <mayfly_xtal_stop_calc+0x1f4>)
    b2d8:	b292      	uxth	r2, r2
    b2da:	fba2 0100 	umull	r0, r1, r2, r0
    b2de:	f240 1323 	movw	r3, #291	; 0x123
    b2e2:	fb03 1102 	mla	r1, r3, r2, r1
    b2e6:	a31c      	add	r3, pc, #112	; (adr r3, b358 <mayfly_xtal_stop_calc+0x1d8>)
    b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2ec:	f7f4 ff92 	bl	214 <__aeabi_uldivmod>
    b2f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b2f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b2f6:	2200      	movs	r2, #0
    b2f8:	4298      	cmp	r0, r3
    b2fa:	d318      	bcc.n	b32e <mayfly_xtal_stop_calc+0x1ae>
    b2fc:	b102      	cbz	r2, b300 <mayfly_xtal_stop_calc+0x180>
    b2fe:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b300:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b304:	2a00      	cmp	r2, #0
    b306:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b30a:	da13      	bge.n	b334 <mayfly_xtal_stop_calc+0x1b4>
    b30c:	2a00      	cmp	r2, #0
    b30e:	f6ff af7c 	blt.w	b20a <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
    b312:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b314:	429c      	cmp	r4, r3
    b316:	f67f af78 	bls.w	b20a <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
    b31a:	4630      	mov	r0, r6
    b31c:	f7fd f8d2 	bl	84c4 <conn_update_req>
				if (status == 2) {
    b320:	2802      	cmp	r0, #2
    b322:	f47f af72 	bne.w	b20a <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
    b326:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b328:	f7fd f8cc 	bl	84c4 <conn_update_req>
    b32c:	e76d      	b.n	b20a <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
    b32e:	1a1b      	subs	r3, r3, r0
    b330:	2201      	movs	r2, #1
    b332:	e7e1      	b.n	b2f8 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
    b334:	2a00      	cmp	r2, #0
    b336:	f6bf af68 	bge.w	b20a <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
    b33a:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b33c:	429c      	cmp	r4, r3
    b33e:	f67f af64 	bls.w	b20a <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
    b342:	4628      	mov	r0, r5
    b344:	f7fd f8be 	bl	84c4 <conn_update_req>
				if (status == 2) {
    b348:	2802      	cmp	r0, #2
    b34a:	f47f af5e 	bne.w	b20a <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
    b34e:	980a      	ldr	r0, [sp, #40]	; 0x28
    b350:	e7ea      	b.n	b328 <mayfly_xtal_stop_calc+0x1a8>
    b352:	bf00      	nop
    b354:	f3af 8000 	nop.w
    b358:	1afd498d 	.word	0x1afd498d
    b35c:	00000007 	.word	0x00000007
    b360:	00008421 	.word	0x00008421
    b364:	20000660 	.word	0x20000660
    b368:	20000860 	.word	0x20000860
    b36c:	200037e0 	.word	0x200037e0
    b370:	00008425 	.word	0x00008425
    b374:	09ce5400 	.word	0x09ce5400

0000b378 <event_master>:
{
    b378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b37a:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    b37c:	4b4a      	ldr	r3, [pc, #296]	; (b4a8 <event_master+0x130>)
    b37e:	7cd9      	ldrb	r1, [r3, #19]
{
    b380:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b382:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    b386:	461d      	mov	r5, r3
    b388:	b129      	cbz	r1, b396 <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b38a:	4040      	eors	r0, r0
    b38c:	f380 8811 	msr	BASEPRI, r0
    b390:	f04f 0004 	mov.w	r0, #4
    b394:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    b396:	7c1b      	ldrb	r3, [r3, #16]
    b398:	8c21      	ldrh	r1, [r4, #32]
    b39a:	b2db      	uxtb	r3, r3
    b39c:	3107      	adds	r1, #7
    b39e:	428b      	cmp	r3, r1
    b3a0:	d1f3      	bne.n	b38a <event_master+0x12>
	_radio.packet_counter = 0;
    b3a2:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    b3a6:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    b3aa:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    b3ac:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    b3ae:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    b3b0:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    b3b2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    b3b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    b3b6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    b3ba:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    b3bc:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    b3be:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    b3c0:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    b3c2:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    b3c4:	f7fe f854 	bl	9470 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    b3c8:	a901      	add	r1, sp, #4
    b3ca:	4620      	mov	r0, r4
    b3cc:	f7ff fe5c 	bl	b088 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    b3d0:	9901      	ldr	r1, [sp, #4]
    b3d2:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    b3d6:	780b      	ldrb	r3, [r1, #0]
    b3d8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    b3dc:	f3c2 0240 	ubfx	r2, r2, #1, #1
    b3e0:	f362 0382 	bfi	r3, r2, #2, #1
    b3e4:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    b3e6:	4620      	mov	r0, r4
    b3e8:	f7ff fd5e 	bl	aea8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    b3ec:	2096      	movs	r0, #150	; 0x96
    b3ee:	f004 fe41 	bl	10074 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    b3f2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    b3f6:	f000 0007 	and.w	r0, r0, #7
    b3fa:	f004 fd9f 	bl	ff3c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    b3fe:	9901      	ldr	r1, [sp, #4]
    b400:	4620      	mov	r0, r4
    b402:	f7fd fb0d 	bl	8a20 <tx_packet_set>
	if (conn->data_chan_sel) {
    b406:	7f63      	ldrb	r3, [r4, #29]
    b408:	f013 0f40 	tst.w	r3, #64	; 0x40
    b40c:	f104 0217 	add.w	r2, r4, #23
    b410:	d021      	beq.n	b456 <event_master+0xde>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    b412:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    b414:	8be1      	ldrh	r1, [r4, #30]
    b416:	3801      	subs	r0, #1
    b418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b41c:	b280      	uxth	r0, r0
    b41e:	f7fe faff 	bl	9a20 <chan_sel_2>
	chan_set(data_chan_use);
    b422:	f7fd ff7b 	bl	931c <chan_set>
		remainder_us = radio_tmr_start(1,
    b426:	68ea      	ldr	r2, [r5, #12]
    b428:	f107 0109 	add.w	r1, r7, #9
    b42c:	2001      	movs	r0, #1
    b42e:	f004 fe2d 	bl	1008c <radio_tmr_start>
		radio_tmr_end_capture();
    b432:	f004 fefb 	bl	1022c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    b436:	f894 1020 	ldrb.w	r1, [r4, #32]
    b43a:	3107      	adds	r1, #7
    b43c:	463a      	mov	r2, r7
    b43e:	b2c9      	uxtb	r1, r1
    b440:	4620      	mov	r0, r4
    b442:	f7fe fb31 	bl	9aa8 <preempt_calc>
	if (0 !=
    b446:	4603      	mov	r3, r0
    b448:	b328      	cbz	r0, b496 <event_master+0x11e>
		_radio.state = STATE_STOP;
    b44a:	2304      	movs	r3, #4
    b44c:	752b      	strb	r3, [r5, #20]
		radio_disable();
    b44e:	f004 fd1b 	bl	fe88 <radio_disable>
}
    b452:	b003      	add	sp, #12
    b454:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    b456:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    b458:	7fa6      	ldrb	r6, [r4, #30]
    b45a:	fb01 6606 	mla	r6, r1, r6, r6
    b45e:	7fe1      	ldrb	r1, [r4, #31]
    b460:	2025      	movs	r0, #37	; 0x25
    b462:	440e      	add	r6, r1
    b464:	fb96 f1f0 	sdiv	r1, r6, r0
    b468:	fb00 6611 	mls	r6, r0, r1, r6
    b46c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b46e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    b470:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b472:	5c51      	ldrb	r1, [r2, r1]
    b474:	f006 0607 	and.w	r6, r6, #7
    b478:	fa41 f606 	asr.w	r6, r1, r6
    b47c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    b47e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b482:	d4ce      	bmi.n	b422 <event_master+0xaa>
		chan_index = chan_next % chan_count;
    b484:	fbb0 f1f3 	udiv	r1, r0, r3
    b488:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    b48c:	b2c9      	uxtb	r1, r1
    b48e:	4610      	mov	r0, r2
    b490:	f7fc ffd4 	bl	843c <chan_sel_remap>
    b494:	e7c5      	b.n	b422 <event_master+0xaa>
		ticker_status =
    b496:	4a05      	ldr	r2, [pc, #20]	; (b4ac <event_master+0x134>)
    b498:	4601      	mov	r1, r0
    b49a:	f7fb fb05 	bl	6aa8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b49e:	f030 0302 	bics.w	r3, r0, #2
    b4a2:	f47f af72 	bne.w	b38a <event_master+0x12>
    b4a6:	e7d4      	b.n	b452 <event_master+0xda>
    b4a8:	20000660 	.word	0x20000660
    b4ac:	00009041 	.word	0x00009041

0000b4b0 <isr_rx_conn_pkt_ctrl>:
{
    b4b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    b4b4:	7ac7      	ldrb	r7, [r0, #11]
{
    b4b6:	4604      	mov	r4, r0
    b4b8:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    b4ba:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    b4be:	2f19      	cmp	r7, #25
    b4c0:	f201 8071 	bhi.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
    b4c4:	e8df f017 	tbh	[pc, r7, lsl #1]
    b4c8:	0080001a 	.word	0x0080001a
    b4cc:	00c600b6 	.word	0x00c600b6
    b4d0:	011c00f4 	.word	0x011c00f4
    b4d4:	05800141 	.word	0x05800141
    b4d8:	019e017e 	.word	0x019e017e
    b4dc:	01fb01d0 	.word	0x01fb01d0
    b4e0:	0295022c 	.word	0x0295022c
    b4e4:	02ae0193 	.word	0x02ae0193
    b4e8:	047d03f9 	.word	0x047d03f9
    b4ec:	05720558 	.word	0x05720558
    b4f0:	05f805f8 	.word	0x05f805f8
    b4f4:	078006c1 	.word	0x078006c1
    b4f8:	083c07b7 	.word	0x083c07b7
		if (!_radio.conn_curr->role ||
    b4fc:	4ed9      	ldr	r6, [pc, #868]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b4fe:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    b502:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b506:	2b00      	cmp	r3, #0
    b508:	f281 804d 	bge.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    b50c:	7a41      	ldrb	r1, [r0, #9]
    b50e:	2000      	movs	r0, #0
    b510:	f7fc ff68 	bl	83e4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b514:	2800      	cmp	r0, #0
    b516:	f001 8046 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    b51a:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    b51e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    b520:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    b522:	041b      	lsls	r3, r3, #16
    b524:	f101 8055 	bmi.w	c5d2 <isr_rx_conn_pkt_ctrl+0x1122>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b528:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    b52c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    b530:	429a      	cmp	r2, r3
    b532:	d005      	beq.n	b540 <isr_rx_conn_pkt_ctrl+0x90>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b534:	4040      	eors	r0, r0
    b536:	f380 8811 	msr	BASEPRI, r0
    b53a:	f04f 0004 	mov.w	r0, #4
    b53e:	df02      	svc	2
	if (_radio.conn_upd == 0) {
    b540:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    b544:	b90a      	cbnz	r2, b54a <isr_rx_conn_pkt_ctrl+0x9a>
		_radio.conn_upd = conn;
    b546:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    b54a:	7b22      	ldrb	r2, [r4, #12]
    b54c:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    b550:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    b554:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b558:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    b55a:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    b55e:	7c20      	ldrb	r0, [r4, #16]
    b560:	7be2      	ldrb	r2, [r4, #15]
    b562:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    b566:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    b56a:	7ca0      	ldrb	r0, [r4, #18]
    b56c:	7c62      	ldrb	r2, [r4, #17]
    b56e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    b572:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    b576:	7ce2      	ldrb	r2, [r4, #19]
    b578:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    b57a:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    b57e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    b582:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    b586:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    b58a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    b58e:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    b592:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    b594:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    b598:	2201      	movs	r2, #1
    b59a:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    b59e:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    b5a2:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    b5a6:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    b5aa:	4293      	cmp	r3, r2
    b5ac:	d007      	beq.n	b5be <isr_rx_conn_pkt_ctrl+0x10e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    b5ae:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    b5b2:	f003 0307 	and.w	r3, r3, #7
    b5b6:	2b04      	cmp	r3, #4
    b5b8:	d101      	bne.n	b5be <isr_rx_conn_pkt_ctrl+0x10e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b5ba:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    b5be:	2000      	movs	r0, #0
    b5c0:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    b5c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    b5c8:	4ba6      	ldr	r3, [pc, #664]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b5ca:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b5ce:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	f280 87e7 	bge.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    b5d8:	7a41      	ldrb	r1, [r0, #9]
    b5da:	2001      	movs	r0, #1
    b5dc:	f7fc ff02 	bl	83e4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b5e0:	2800      	cmp	r0, #0
    b5e2:	f000 87e0 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    b5e6:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    b5ea:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    b5ec:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    b5ee:	041f      	lsls	r7, r3, #16
    b5f0:	f100 87ef 	bmi.w	c5d2 <isr_rx_conn_pkt_ctrl+0x1122>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b5f4:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    b5f8:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    b5fc:	429a      	cmp	r2, r3
    b5fe:	d199      	bne.n	b534 <isr_rx_conn_pkt_ctrl+0x84>
	memcpy(&conn->llcp.chan_map.chm[0],
    b600:	2205      	movs	r2, #5
    b602:	f104 010c 	add.w	r1, r4, #12
    b606:	f105 0079 	add.w	r0, r5, #121	; 0x79
    b60a:	f7f6 fb1d 	bl	1c48 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    b60e:	7c63      	ldrb	r3, [r4, #17]
    b610:	7ca2      	ldrb	r2, [r4, #18]
    b612:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    b616:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    b61a:	2302      	movs	r3, #2
    b61c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    b620:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    b624:	2000      	movs	r0, #0
	conn->llcp_ack--;
    b626:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    b628:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    b62c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    b630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    b634:	7a41      	ldrb	r1, [r0, #9]
    b636:	2002      	movs	r0, #2
    b638:	f7fc fed4 	bl	83e4 <pdu_len_cmp>
    b63c:	2800      	cmp	r0, #0
    b63e:	f000 87b2 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->llcp_terminate.reason_peer =
    b642:	4b88      	ldr	r3, [pc, #544]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b644:	7b22      	ldrb	r2, [r4, #12]
    b646:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    b64a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    b64e:	2000      	movs	r0, #0
}
    b650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    b654:	4e83      	ldr	r6, [pc, #524]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b656:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    b65a:	f998 301d 	ldrsb.w	r3, [r8, #29]
    b65e:	2b00      	cmp	r3, #0
    b660:	f280 87a1 	bge.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    b664:	7a41      	ldrb	r1, [r0, #9]
    b666:	2003      	movs	r0, #3
    b668:	f7fc febc 	bl	83e4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b66c:	2800      	cmp	r0, #0
    b66e:	f000 879a 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    b672:	2208      	movs	r2, #8
    b674:	f104 0116 	add.w	r1, r4, #22
    b678:	f108 0094 	add.w	r0, r8, #148	; 0x94
    b67c:	f7f6 fae4 	bl	1c48 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    b680:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    b684:	2204      	movs	r2, #4
    b686:	f104 011e 	add.w	r1, r4, #30
    b68a:	f500 7089 	add.w	r0, r0, #274	; 0x112
    b68e:	f7f6 fadb 	bl	1c48 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    b692:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    b696:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    b69a:	f042 0204 	orr.w	r2, r2, #4
    b69e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    b6a2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    b6a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    b6aa:	2301      	movs	r3, #1
    b6ac:	702b      	strb	r3, [r5, #0]
    b6ae:	e7ce      	b.n	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
    b6b0:	4d6c      	ldr	r5, [pc, #432]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b6b2:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    b6b6:	f996 301d 	ldrsb.w	r3, [r6, #29]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	f2c0 8773 	blt.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    b6c0:	7a41      	ldrb	r1, [r0, #9]
    b6c2:	2004      	movs	r0, #4
    b6c4:	f7fc fe8e 	bl	83e4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    b6c8:	2800      	cmp	r0, #0
    b6ca:	f000 876c 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    b6ce:	2208      	movs	r2, #8
    b6d0:	f104 010c 	add.w	r1, r4, #12
    b6d4:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    b6d8:	f7f6 fab6 	bl	1c48 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    b6dc:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    b6e0:	2204      	movs	r2, #4
    b6e2:	f104 0114 	add.w	r1, r4, #20
    b6e6:	f500 708b 	add.w	r0, r0, #278	; 0x116
    b6ea:	f7f6 faad 	bl	1c48 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    b6ee:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    b6f2:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    b6f6:	f043 0304 	orr.w	r3, r3, #4
    b6fa:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    b6fe:	e7a6      	b.n	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    b700:	4b58      	ldr	r3, [pc, #352]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b702:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b706:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    b70a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    b70e:	42b3      	cmp	r3, r6
    b710:	d004      	beq.n	b71c <isr_rx_conn_pkt_ctrl+0x26c>
    b712:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    b716:	2b03      	cmp	r3, #3
    b718:	f47f af0c 	bne.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
		if (_radio.conn_curr->role ||
    b71c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b720:	2b00      	cmp	r3, #0
    b722:	f2c0 8740 	blt.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    b726:	7a61      	ldrb	r1, [r4, #9]
    b728:	2005      	movs	r0, #5
    b72a:	f7fc fe5b 	bl	83e4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    b72e:	2800      	cmp	r0, #0
    b730:	f000 8739 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    b734:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_ack--;
    b736:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b738:	2303      	movs	r3, #3
		_radio.conn_curr->llcp.encryption.initiate = 0;
    b73a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_ack--;
    b73e:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b742:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		break;
    b746:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    b74a:	7a41      	ldrb	r1, [r0, #9]
    b74c:	2006      	movs	r0, #6
    b74e:	f7fc fe49 	bl	83e4 <pdu_len_cmp>
    b752:	2800      	cmp	r0, #0
    b754:	f000 8727 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.role == ROLE_SLAVE) {
    b758:	4b42      	ldr	r3, [pc, #264]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b75a:	7cda      	ldrb	r2, [r3, #19]
    b75c:	2a03      	cmp	r2, #3
    b75e:	4619      	mov	r1, r3
    b760:	d125      	bne.n	b7ae <isr_rx_conn_pkt_ctrl+0x2fe>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    b762:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    b766:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    b76a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    b76e:	4290      	cmp	r0, r2
    b770:	d004      	beq.n	b77c <isr_rx_conn_pkt_ctrl+0x2cc>
    b772:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    b776:	2803      	cmp	r0, #3
    b778:	f47f aedc 	bne.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    b77c:	2000      	movs	r0, #0
    b77e:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    b782:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b784:	2003      	movs	r0, #3
    b786:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    b78a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    b78e:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    b792:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    b796:	065e      	lsls	r6, r3, #25
    b798:	d505      	bpl.n	b7a6 <isr_rx_conn_pkt_ctrl+0x2f6>
			_radio.conn_curr->refresh = 0;
    b79a:	f36f 1386 	bfc	r3, #6, #1
    b79e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    b7a2:	2309      	movs	r3, #9
    b7a4:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    b7a6:	2301      	movs	r3, #1
    b7a8:	702b      	strb	r3, [r5, #0]
				break;
    b7aa:	f000 bc81 	b.w	c0b0 <isr_rx_conn_pkt_ctrl+0xc00>
			_radio.conn_curr->pause_rx = 0;
    b7ae:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    b7b2:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    b7b6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    b7ba:	f36f 03c3 	bfc	r3, #3, #1
    b7be:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    b7c2:	e7e4      	b.n	b78e <isr_rx_conn_pkt_ctrl+0x2de>
		if (!_radio.conn_curr->role ||
    b7c4:	4b27      	ldr	r3, [pc, #156]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b7c6:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b7ca:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b7ce:	2b00      	cmp	r3, #0
    b7d0:	f280 86e9 	bge.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    b7d4:	7a41      	ldrb	r1, [r0, #9]
    b7d6:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    b7d8:	f7fc fe04 	bl	83e4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    b7dc:	2800      	cmp	r0, #0
    b7de:	f000 86e2 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    b7e2:	4631      	mov	r1, r6
    b7e4:	4628      	mov	r0, r5
}
    b7e6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    b7ea:	f7fe ba7f 	b.w	9cec <feature_rsp_send>
		if (_radio.conn_curr->role ||
    b7ee:	4b1d      	ldr	r3, [pc, #116]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
    b7f0:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b7f4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	f2c0 86d4 	blt.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    b7fe:	7a41      	ldrb	r1, [r0, #9]
    b800:	200e      	movs	r0, #14
    b802:	e7e9      	b.n	b7d8 <isr_rx_conn_pkt_ctrl+0x328>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    b804:	7a41      	ldrb	r1, [r0, #9]
    b806:	2009      	movs	r0, #9
    b808:	f7fc fdec 	bl	83e4 <pdu_len_cmp>
    b80c:	2800      	cmp	r0, #0
    b80e:	f000 86ca 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b812:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    b814:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    b816:	4813      	ldr	r0, [pc, #76]	; (b864 <isr_rx_conn_pkt_ctrl+0x3b4>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b81c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    b820:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    b824:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    b828:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b82c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    b830:	7ba1      	ldrb	r1, [r4, #14]
    b832:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    b836:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    b83a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    b83e:	400b      	ands	r3, r1
    b840:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    b844:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    b848:	f043 0320 	orr.w	r3, r3, #32
    b84c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    b850:	2301      	movs	r3, #1
    b852:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    b854:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    b858:	2000      	movs	r0, #0
    b85a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    b85e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b862:	bf00      	nop
    b864:	20000660 	.word	0x20000660
		if (!_radio.conn_curr->role ||
    b868:	4ed1      	ldr	r6, [pc, #836]	; (bbb0 <isr_rx_conn_pkt_ctrl+0x700>)
    b86a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    b86e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b872:	2b00      	cmp	r3, #0
    b874:	f280 8697 	bge.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    b878:	7a41      	ldrb	r1, [r0, #9]
    b87a:	200a      	movs	r0, #10
    b87c:	f7fc fdb2 	bl	83e4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b880:	2800      	cmp	r0, #0
    b882:	f000 8690 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b886:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    b88a:	f7fa f97c 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    b88e:	4601      	mov	r1, r0
    b890:	b910      	cbnz	r0, b898 <isr_rx_conn_pkt_ctrl+0x3e8>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    b892:	2001      	movs	r0, #1
    b894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->refresh = 1;
    b898:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    b89c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    b8a0:	f36f 1304 	bfc	r3, #4, #1
    b8a4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b8a8:	7903      	ldrb	r3, [r0, #4]
    b8aa:	f043 0303 	orr.w	r3, r3, #3
    b8ae:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b8b0:	2301      	movs	r3, #1
    b8b2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    b8b4:	230b      	movs	r3, #11
    b8b6:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    b8b8:	4628      	mov	r0, r5
    b8ba:	f000 bc9d 	b.w	c1f8 <isr_rx_conn_pkt_ctrl+0xd48>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    b8be:	7a41      	ldrb	r1, [r0, #9]
    b8c0:	200b      	movs	r0, #11
    b8c2:	f7fc fd8f 	bl	83e4 <pdu_len_cmp>
    b8c6:	2800      	cmp	r0, #0
    b8c8:	f000 866d 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    b8cc:	48b8      	ldr	r0, [pc, #736]	; (bbb0 <isr_rx_conn_pkt_ctrl+0x700>)
    b8ce:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    b8d2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	db1b      	blt.n	b912 <isr_rx_conn_pkt_ctrl+0x462>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8da:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    b8de:	f7fa f952 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    b8e2:	4601      	mov	r1, r0
    b8e4:	2800      	cmp	r0, #0
    b8e6:	d0d4      	beq.n	b892 <isr_rx_conn_pkt_ctrl+0x3e2>
		conn->enc_tx = 0;
    b8e8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    b8ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    b8f0:	f043 0304 	orr.w	r3, r3, #4
    b8f4:	f36f 1304 	bfc	r3, #4, #1
    b8f8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b8fc:	7903      	ldrb	r3, [r0, #4]
    b8fe:	f043 0303 	orr.w	r3, r3, #3
    b902:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b904:	2301      	movs	r3, #1
    b906:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    b908:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    b90a:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    b90c:	4620      	mov	r0, r4
    b90e:	f000 bc73 	b.w	c1f8 <isr_rx_conn_pkt_ctrl+0xd48>
		conn->enc_tx = 0;
    b912:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b916:	f36f 1345 	bfc	r3, #5, #1
    b91a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    b91e:	e696      	b.n	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    b920:	7a41      	ldrb	r1, [r0, #9]
    b922:	200c      	movs	r0, #12
    b924:	f7fc fd5e 	bl	83e4 <pdu_len_cmp>
    b928:	2800      	cmp	r0, #0
    b92a:	f000 863c 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    b92e:	48a0      	ldr	r0, [pc, #640]	; (bbb0 <isr_rx_conn_pkt_ctrl+0x700>)
    b930:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    b934:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    b938:	f013 0701 	ands.w	r7, r3, #1
    b93c:	d150      	bne.n	b9e0 <isr_rx_conn_pkt_ctrl+0x530>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b93e:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    b942:	f7fa f920 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    b946:	4601      	mov	r1, r0
    b948:	2800      	cmp	r0, #0
    b94a:	d0a2      	beq.n	b892 <isr_rx_conn_pkt_ctrl+0x3e2>
		conn->llcp_version.tx = 1;
    b94c:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    b950:	f043 0301 	orr.w	r3, r3, #1
    b954:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b958:	7903      	ldrb	r3, [r0, #4]
    b95a:	f043 0303 	orr.w	r3, r3, #3
    b95e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    b960:	2306      	movs	r3, #6
    b962:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    b964:	230c      	movs	r3, #12
    b966:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    b968:	2309      	movs	r3, #9
    b96a:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    b96c:	f06f 030e 	mvn.w	r3, #14
    b970:	7243      	strb	r3, [r0, #9]
    b972:	2305      	movs	r3, #5
    b974:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    b976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b97a:	72c3      	strb	r3, [r0, #11]
    b97c:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    b97e:	4630      	mov	r0, r6
    b980:	f7fe f99a 	bl	9cb8 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    b984:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    b988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b98c:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    b990:	f004 facc 	bl	ff2c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b994:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    b996:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b998:	2201      	movs	r2, #1
    b99a:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    b99e:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b9a2:	7003      	strb	r3, [r0, #0]
    b9a4:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    b9a6:	b1c2      	cbz	r2, b9da <isr_rx_conn_pkt_ctrl+0x52a>
		pdu_data_tx->md = 1;
    b9a8:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    b9ac:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    b9ae:	7b23      	ldrb	r3, [r4, #12]
    b9b0:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    b9b4:	7ba2      	ldrb	r2, [r4, #14]
    b9b6:	7b63      	ldrb	r3, [r4, #13]
    b9b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b9bc:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    b9c0:	7be3      	ldrb	r3, [r4, #15]
    b9c2:	7c22      	ldrb	r2, [r4, #16]
    b9c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b9c8:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    b9cc:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    b9d0:	f043 0302 	orr.w	r3, r3, #2
    b9d4:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    b9d8:	e639      	b.n	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		pdu_data_tx->md = 0;
    b9da:	f362 1304 	bfi	r3, r2, #4, #1
    b9de:	e7e5      	b.n	b9ac <isr_rx_conn_pkt_ctrl+0x4fc>
	} else if (!conn->llcp_version.rx) {
    b9e0:	f013 0302 	ands.w	r3, r3, #2
    b9e4:	f47f ae33 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		conn->procedure_expire = 0;
    b9e8:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    b9ec:	2301      	movs	r3, #1
    b9ee:	702b      	strb	r3, [r5, #0]
    b9f0:	e7dd      	b.n	b9ae <isr_rx_conn_pkt_ctrl+0x4fe>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    b9f2:	7a41      	ldrb	r1, [r0, #9]
    b9f4:	200d      	movs	r0, #13
    b9f6:	f7fc fcf5 	bl	83e4 <pdu_len_cmp>
    b9fa:	2800      	cmp	r0, #0
    b9fc:	f000 85d3 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->pause_rx = 0;
    ba00:	4b6b      	ldr	r3, [pc, #428]	; (bbb0 <isr_rx_conn_pkt_ctrl+0x700>)
    ba02:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    ba06:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    ba0a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ba0e:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    ba12:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    ba14:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    ba18:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    ba1c:	2301      	movs	r3, #1
    ba1e:	702b      	strb	r3, [r5, #0]
    ba20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    ba24:	7a41      	ldrb	r1, [r0, #9]
    ba26:	200f      	movs	r0, #15
    ba28:	f7fc fcdc 	bl	83e4 <pdu_len_cmp>
    ba2c:	2800      	cmp	r0, #0
    ba2e:	f000 85ba 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    ba32:	4b5f      	ldr	r3, [pc, #380]	; (bbb0 <isr_rx_conn_pkt_ctrl+0x700>)
    ba34:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    ba38:	461a      	mov	r2, r3
    ba3a:	b149      	cbz	r1, ba50 <isr_rx_conn_pkt_ctrl+0x5a0>
    ba3c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    ba40:	4281      	cmp	r1, r0
    ba42:	d005      	beq.n	ba50 <isr_rx_conn_pkt_ctrl+0x5a0>
			nack = reject_ext_ind_send(_radio.conn_curr,
    ba44:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    ba46:	210f      	movs	r1, #15
}
    ba48:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    ba4c:	f7fe b9b8 	b.w	9dc0 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    ba50:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    ba54:	f990 301d 	ldrsb.w	r3, [r0, #29]
    ba58:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    ba5c:	2b00      	cmp	r3, #0
    ba5e:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    ba62:	f2c0 80a7 	blt.w	bbb4 <isr_rx_conn_pkt_ctrl+0x704>
			if ((conn->llcp_conn_param.req !=
    ba66:	4299      	cmp	r1, r3
    ba68:	d009      	beq.n	ba7e <isr_rx_conn_pkt_ctrl+0x5ce>
			    ((conn->llcp_conn_param.state ==
    ba6a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    ba6e:	f013 0307 	ands.w	r3, r3, #7
    ba72:	d002      	beq.n	ba7a <isr_rx_conn_pkt_ctrl+0x5ca>
			      LLCP_CPR_STATE_REQ) ||
    ba74:	3b04      	subs	r3, #4
    ba76:	2b01      	cmp	r3, #1
    ba78:	d801      	bhi.n	ba7e <isr_rx_conn_pkt_ctrl+0x5ce>
				nack = reject_ext_ind_send(_radio.conn_curr,
    ba7a:	2223      	movs	r2, #35	; 0x23
    ba7c:	e7e3      	b.n	ba46 <isr_rx_conn_pkt_ctrl+0x596>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    ba7e:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    ba82:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    ba86:	4299      	cmp	r1, r3
    ba88:	d003      	beq.n	ba92 <isr_rx_conn_pkt_ctrl+0x5e2>
    ba8a:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    ba8e:	2b03      	cmp	r3, #3
    ba90:	d105      	bne.n	ba9e <isr_rx_conn_pkt_ctrl+0x5ee>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    ba92:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    ba96:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    ba9a:	4299      	cmp	r1, r3
    ba9c:	d001      	beq.n	baa2 <isr_rx_conn_pkt_ctrl+0x5f2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    ba9e:	222a      	movs	r2, #42	; 0x2a
    baa0:	e7d1      	b.n	ba46 <isr_rx_conn_pkt_ctrl+0x596>
				if ((cpr->interval_min < 6) ||
    baa2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    baa6:	4643      	mov	r3, r8
    baa8:	2b05      	cmp	r3, #5
    baaa:	d91b      	bls.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->interval_max > 3200) ||
    baac:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    baae:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    bab2:	d817      	bhi.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->interval_max > 3200) ||
    bab4:	45b8      	cmp	r8, r7
    bab6:	d815      	bhi.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->latency > 499) ||
    bab8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    babc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    bac0:	d210      	bcs.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->timeout < 10) ||
    bac2:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    bac6:	f1ae 060a 	sub.w	r6, lr, #10
    baca:	b2b6      	uxth	r6, r6
    bacc:	f640 4976 	movw	r9, #3190	; 0xc76
    bad0:	454e      	cmp	r6, r9
    bad2:	d807      	bhi.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
				     ((cpr->latency + 1) *
    bad4:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    bad8:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    badc:	da02      	bge.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->preferred_periodicity >
    bade:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    bae0:	428f      	cmp	r7, r1
    bae2:	d201      	bcs.n	bae8 <isr_rx_conn_pkt_ctrl+0x638>
				nack = reject_ext_ind_send(conn,
    bae4:	221e      	movs	r2, #30
    bae6:	e7ae      	b.n	ba46 <isr_rx_conn_pkt_ctrl+0x596>
				conn->llcp_conn_param.interval = cpr->interval_min;
    bae8:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    baec:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    baf0:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    baf4:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    baf8:	7da6      	ldrb	r6, [r4, #22]
    bafa:	7d61      	ldrb	r1, [r4, #21]
    bafc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    bb00:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    bb04:	7e26      	ldrb	r6, [r4, #24]
    bb06:	7de1      	ldrb	r1, [r4, #23]
    bb08:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bb0c:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    bb10:	7ea6      	ldrb	r6, [r4, #26]
    bb12:	7e61      	ldrb	r1, [r4, #25]
    bb14:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bb18:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    bb1c:	7f26      	ldrb	r6, [r4, #28]
    bb1e:	7ee1      	ldrb	r1, [r4, #27]
    bb20:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bb24:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    bb28:	7fa6      	ldrb	r6, [r4, #30]
    bb2a:	7f61      	ldrb	r1, [r4, #29]
    bb2c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bb30:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    bb34:	7fe1      	ldrb	r1, [r4, #31]
    bb36:	f894 6020 	ldrb.w	r6, [r4, #32]
    bb3a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bb3e:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    bb42:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    bb46:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    bb4a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    bb4e:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    bb52:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    bb56:	6a41      	ldr	r1, [r0, #36]	; 0x24
    bb58:	428c      	cmp	r4, r1
    bb5a:	d10f      	bne.n	bb7c <isr_rx_conn_pkt_ctrl+0x6cc>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    bb5c:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    bb5e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bb62:	4361      	muls	r1, r4
    bb64:	f242 7410 	movw	r4, #10000	; 0x2710
    bb68:	fb04 130e 	mla	r3, r4, lr, r1
    bb6c:	3b01      	subs	r3, #1
    bb6e:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    bb72:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    bb74:	b29b      	uxth	r3, r3
    bb76:	4299      	cmp	r1, r3
    bb78:	f000 8096 	beq.w	bca8 <isr_rx_conn_pkt_ctrl+0x7f8>
					if (conn->pause_tx) {
    bb7c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    bb80:	071c      	lsls	r4, r3, #28
    bb82:	f140 808b 	bpl.w	bc9c <isr_rx_conn_pkt_ctrl+0x7ec>
						conn->llcp_conn_param.state =
    bb86:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    bb8a:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    bb8c:	f361 0302 	bfi	r3, r1, #0, #3
    bb90:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    bb94:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    bb98:	3b01      	subs	r3, #1
    bb9a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    bb9e:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    bba2:	2b00      	cmp	r3, #0
    bba4:	f47f ad53 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
				_radio.conn_upd = conn;
    bba8:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    bbac:	e54f      	b.n	b64e <isr_rx_conn_pkt_ctrl+0x19e>
    bbae:	bf00      	nop
    bbb0:	20000660 	.word	0x20000660
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    bbb4:	4299      	cmp	r1, r3
    bbb6:	d004      	beq.n	bbc2 <isr_rx_conn_pkt_ctrl+0x712>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    bbb8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    bbbc:	0799      	lsls	r1, r3, #30
    bbbe:	f47f acb9 	bne.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
			if ((cpr->interval_min < 6) ||
    bbc2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    bbc6:	4643      	mov	r3, r8
    bbc8:	2b05      	cmp	r3, #5
    bbca:	d98b      	bls.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->interval_max > 3200) ||
    bbcc:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    bbce:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    bbd2:	d887      	bhi.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->interval_max > 3200) ||
    bbd4:	45b8      	cmp	r8, r7
    bbd6:	d885      	bhi.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->latency > 499) ||
    bbd8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    bbdc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    bbe0:	d280      	bcs.n	bae4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bbe2:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    bbe6:	f1ae 060a 	sub.w	r6, lr, #10
    bbea:	b2b6      	uxth	r6, r6
    bbec:	f640 4976 	movw	r9, #3190	; 0xc76
    bbf0:	454e      	cmp	r6, r9
    bbf2:	f63f af77 	bhi.w	bae4 <isr_rx_conn_pkt_ctrl+0x634>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    bbf6:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bbfa:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    bbfe:	f6bf af71 	bge.w	bae4 <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    bc02:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    bc04:	428f      	cmp	r7, r1
    bc06:	f4ff af6d 	bcc.w	bae4 <isr_rx_conn_pkt_ctrl+0x634>
			conn->llcp_conn_param.interval = cpr->interval_min;
    bc0a:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    bc0e:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    bc12:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    bc16:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    bc1a:	7da6      	ldrb	r6, [r4, #22]
    bc1c:	7d61      	ldrb	r1, [r4, #21]
    bc1e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    bc22:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    bc26:	7e26      	ldrb	r6, [r4, #24]
    bc28:	7de1      	ldrb	r1, [r4, #23]
    bc2a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bc2e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    bc32:	7ea6      	ldrb	r6, [r4, #26]
    bc34:	7e61      	ldrb	r1, [r4, #25]
    bc36:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bc3a:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    bc3e:	7f26      	ldrb	r6, [r4, #28]
    bc40:	7ee1      	ldrb	r1, [r4, #27]
    bc42:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bc46:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    bc4a:	7fa6      	ldrb	r6, [r4, #30]
    bc4c:	7f61      	ldrb	r1, [r4, #29]
    bc4e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bc52:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    bc56:	7fe1      	ldrb	r1, [r4, #31]
    bc58:	f894 6020 	ldrb.w	r6, [r4, #32]
    bc5c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bc60:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    bc64:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    bc68:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    bc6c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    bc70:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    bc74:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    bc78:	6a41      	ldr	r1, [r0, #36]	; 0x24
    bc7a:	428c      	cmp	r4, r1
    bc7c:	d10e      	bne.n	bc9c <isr_rx_conn_pkt_ctrl+0x7ec>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    bc7e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    bc80:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bc84:	4361      	muls	r1, r4
    bc86:	f242 7410 	movw	r4, #10000	; 0x2710
    bc8a:	fb04 130e 	mla	r3, r4, lr, r1
    bc8e:	3b01      	subs	r3, #1
    bc90:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    bc94:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    bc96:	b29b      	uxth	r3, r3
    bc98:	4299      	cmp	r1, r3
    bc9a:	d005      	beq.n	bca8 <isr_rx_conn_pkt_ctrl+0x7f8>
				*rx_enqueue = 1;
    bc9c:	2301      	movs	r3, #1
    bc9e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    bca0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    bca4:	2103      	movs	r1, #3
    bca6:	e771      	b.n	bb8c <isr_rx_conn_pkt_ctrl+0x6dc>
				conn->llcp_conn_param.status = 0;
    bca8:	2300      	movs	r3, #0
    bcaa:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    bcae:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    bcb2:	2101      	movs	r1, #1
    bcb4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    bcb8:	e768      	b.n	bb8c <isr_rx_conn_pkt_ctrl+0x6dc>
		if (_radio.conn_curr->role ||
    bcba:	4bc2      	ldr	r3, [pc, #776]	; (bfc4 <isr_rx_conn_pkt_ctrl+0xb14>)
    bcbc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    bcc0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    bcc4:	2b00      	cmp	r3, #0
    bcc6:	f2c0 846e 	blt.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    bcca:	7a41      	ldrb	r1, [r0, #9]
    bccc:	2010      	movs	r0, #16
    bcce:	f7fc fb89 	bl	83e4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    bcd2:	2800      	cmp	r0, #0
    bcd4:	f000 8467 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		if (!_radio.conn_curr->role &&
    bcd8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    bcdc:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    bce0:	429a      	cmp	r2, r3
    bce2:	f43f acb4 	beq.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_conn_param.state ==
    bce6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    bcea:	f003 0307 	and.w	r3, r3, #7
    bcee:	2b04      	cmp	r3, #4
    bcf0:	f47f acad 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
			if ((cpr->interval_min < 6) ||
    bcf4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    bcf8:	fa1f f28e 	uxth.w	r2, lr
    bcfc:	2a05      	cmp	r2, #5
    bcfe:	d91b      	bls.n	bd38 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->interval_max > 3200) ||
    bd00:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    bd02:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    bd06:	d817      	bhi.n	bd38 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->interval_max > 3200) ||
    bd08:	429a      	cmp	r2, r3
    bd0a:	d815      	bhi.n	bd38 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->latency > 499) ||
    bd0c:	8a27      	ldrh	r7, [r4, #16]
    bd0e:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    bd10:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    bd14:	d210      	bcs.n	bd38 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bd16:	8a66      	ldrh	r6, [r4, #18]
    bd18:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    bd1a:	f1a0 010a 	sub.w	r1, r0, #10
    bd1e:	b289      	uxth	r1, r1
    bd20:	f640 4c76 	movw	ip, #3190	; 0xc76
    bd24:	4561      	cmp	r1, ip
    bd26:	d807      	bhi.n	bd38 <isr_rx_conn_pkt_ctrl+0x888>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    bd28:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bd2c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    bd30:	da02      	bge.n	bd38 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    bd32:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    bd34:	4293      	cmp	r3, r2
    bd36:	d203      	bcs.n	bd40 <isr_rx_conn_pkt_ctrl+0x890>
				nack = reject_ext_ind_send(conn,
    bd38:	221e      	movs	r2, #30
    bd3a:	2110      	movs	r1, #16
    bd3c:	4628      	mov	r0, r5
    bd3e:	e683      	b.n	ba48 <isr_rx_conn_pkt_ctrl+0x598>
			_radio.conn_curr->procedure_expire = 0;
    bd40:	2000      	movs	r0, #0
    bd42:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    bd46:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    bd4a:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    bd4e:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    bd52:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    bd56:	7da2      	ldrb	r2, [r4, #22]
    bd58:	7d63      	ldrb	r3, [r4, #21]
    bd5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    bd5e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    bd62:	7e22      	ldrb	r2, [r4, #24]
    bd64:	7de3      	ldrb	r3, [r4, #23]
    bd66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd6a:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    bd6e:	7ea2      	ldrb	r2, [r4, #26]
    bd70:	7e63      	ldrb	r3, [r4, #25]
    bd72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd76:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    bd7a:	7f22      	ldrb	r2, [r4, #28]
    bd7c:	7ee3      	ldrb	r3, [r4, #27]
    bd7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd82:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    bd86:	7fa2      	ldrb	r2, [r4, #30]
    bd88:	7f63      	ldrb	r3, [r4, #29]
    bd8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd8e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    bd92:	f894 2020 	ldrb.w	r2, [r4, #32]
    bd96:	7fe3      	ldrb	r3, [r4, #31]
    bd98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd9c:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    bda0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    bda4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    bda8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bdac:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    bdb0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    bdb4:	2201      	movs	r2, #1
    bdb6:	f362 0302 	bfi	r3, r2, #0, #3
    bdba:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    bdbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    bdc2:	7a41      	ldrb	r1, [r0, #9]
    bdc4:	2011      	movs	r0, #17
    bdc6:	f7fc fb0d 	bl	83e4 <pdu_len_cmp>
    bdca:	2800      	cmp	r0, #0
    bdcc:	f000 83eb 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    bdd0:	4a7c      	ldr	r2, [pc, #496]	; (bfc4 <isr_rx_conn_pkt_ctrl+0xb14>)
    bdd2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    bdd6:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    bdda:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    bdde:	4281      	cmp	r1, r0
    bde0:	7b21      	ldrb	r1, [r4, #12]
    bde2:	d027      	beq.n	be34 <isr_rx_conn_pkt_ctrl+0x984>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    bde4:	2916      	cmp	r1, #22
    bde6:	f47f ac32 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		if (rej_ext_ind->error_code != 0x23) {
    bdea:	7b61      	ldrb	r1, [r4, #13]
    bdec:	2923      	cmp	r1, #35	; 0x23
    bdee:	d00e      	beq.n	be0e <isr_rx_conn_pkt_ctrl+0x95e>
				_radio.conn_curr->phy_tx;
    bdf0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    bdf4:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    bdf8:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    bdfc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    be00:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    be04:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    be06:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    be0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    be0e:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    be12:	0792      	lsls	r2, r2, #30
    be14:	f57f ac1b 	bpl.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    be18:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    be1a:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    be1c:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    be1e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    be22:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    be26:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    be28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    be2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    be30:	7363      	strb	r3, [r4, #13]
    be32:	e43a      	b.n	b6aa <isr_rx_conn_pkt_ctrl+0x1fa>
		   _radio.conn_curr->llcp_conn_param.req) {
    be34:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    be38:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    be3c:	42b8      	cmp	r0, r7
    be3e:	d067      	beq.n	bf10 <isr_rx_conn_pkt_ctrl+0xa60>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    be40:	290f      	cmp	r1, #15
    be42:	f47f ac04 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
    be46:	f993 001d 	ldrsb.w	r0, [r3, #29]
    be4a:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    be4c:	2800      	cmp	r0, #0
    be4e:	db34      	blt.n	beba <isr_rx_conn_pkt_ctrl+0xa0a>
    be50:	291a      	cmp	r1, #26
    be52:	d132      	bne.n	beba <isr_rx_conn_pkt_ctrl+0xa0a>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    be54:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    be58:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    be5c:	4294      	cmp	r4, r2
    be5e:	f47f ab69 	bne.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
				conn->llcp_conn_param.state =
    be62:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    be66:	2105      	movs	r1, #5
    be68:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    be6c:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    be70:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    be74:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    be78:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    be7c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    be80:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    be84:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    be88:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    be8c:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    be8e:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    be92:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    be96:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    be9a:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    be9c:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    bea0:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    bea2:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    bea6:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    beaa:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_ack--;
    beae:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				conn->llcp_type = LLCP_CONN_UPD;
    beb2:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				break;
    beb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (rej_ext_ind->error_code != 0x23) {
    beba:	2923      	cmp	r1, #35	; 0x23
    bebc:	d011      	beq.n	bee2 <isr_rx_conn_pkt_ctrl+0xa32>
		LL_ASSERT(_radio.conn_upd == conn);
    bebe:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    bec2:	42b3      	cmp	r3, r6
    bec4:	f47f ab36 	bne.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
		_radio.conn_upd = NULL;
    bec8:	2600      	movs	r6, #0
		if (conn->role) {
    beca:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    becc:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    bed0:	bfb8      	it	lt
    bed2:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    bed6:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    beda:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    bede:	bfb8      	it	lt
    bee0:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    bee2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    bee6:	0717      	lsls	r7, r2, #28
    bee8:	f57f abb1 	bpl.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
	cp->status = rej_ext_ind->error_code;
    beec:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    beee:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    bef0:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    bef2:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    bef4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    bef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    bef8:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    befa:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    befc:	237d      	movs	r3, #125	; 0x7d
    befe:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    bf00:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    bf02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bf06:	fb93 f3f2 	sdiv	r3, r3, r2
    bf0a:	8223      	strh	r3, [r4, #16]
    bf0c:	f7ff bbcd 	b.w	b6aa <isr_rx_conn_pkt_ctrl+0x1fa>
		   _radio.conn_curr->llcp_length.req) {
    bf10:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    bf14:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    bf18:	4290      	cmp	r0, r2
    bf1a:	d01a      	beq.n	bf52 <isr_rx_conn_pkt_ctrl+0xaa2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    bf1c:	2914      	cmp	r1, #20
    bf1e:	f47f ab96 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		conn->llcp_length.ack = conn->llcp_length.req;
    bf22:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    bf26:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    bf2a:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    bf2c:	f360 02c3 	bfi	r2, r0, #3, #1
    bf30:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    bf34:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    bf36:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    bf3a:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bf3c:	2215      	movs	r2, #21
    bf3e:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    bf40:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    bf42:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    bf44:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    bf46:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    bf48:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    bf4a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    bf4c:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    bf4e:	8263      	strh	r3, [r4, #18]
    bf50:	e564      	b.n	ba1c <isr_rx_conn_pkt_ctrl+0x56c>
		switch (rej_ext_ind->reject_opcode) {
    bf52:	2903      	cmp	r1, #3
    bf54:	f47f ab7b 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->pause_rx = 0;
    bf58:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    bf5c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    bf60:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    bf64:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    bf66:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    bf6a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    bf6e:	230d      	movs	r3, #13
    bf70:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    bf72:	7b63      	ldrb	r3, [r4, #13]
    bf74:	7323      	strb	r3, [r4, #12]
    bf76:	e551      	b.n	ba1c <isr_rx_conn_pkt_ctrl+0x56c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    bf78:	7a41      	ldrb	r1, [r0, #9]
    bf7a:	2012      	movs	r0, #18
    bf7c:	f7fc fa32 	bl	83e4 <pdu_len_cmp>
    bf80:	2800      	cmp	r0, #0
    bf82:	f000 8310 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = ping_resp_send(_radio.conn_curr);
    bf86:	480f      	ldr	r0, [pc, #60]	; (bfc4 <isr_rx_conn_pkt_ctrl+0xb14>)
    bf88:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bf8c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    bf90:	f7f9 fdf9 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    bf94:	4601      	mov	r1, r0
    bf96:	2800      	cmp	r0, #0
    bf98:	f43f ac7b 	beq.w	b892 <isr_rx_conn_pkt_ctrl+0x3e2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf9c:	7903      	ldrb	r3, [r0, #4]
    bf9e:	f043 0303 	orr.w	r3, r3, #3
    bfa2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    bfa4:	2301      	movs	r3, #1
    bfa6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    bfa8:	2313      	movs	r3, #19
    bfaa:	e4ae      	b.n	b90a <isr_rx_conn_pkt_ctrl+0x45a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    bfac:	7a41      	ldrb	r1, [r0, #9]
    bfae:	2013      	movs	r0, #19
    bfb0:	f7fc fa18 	bl	83e4 <pdu_len_cmp>
    bfb4:	2800      	cmp	r0, #0
    bfb6:	f000 82f6 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->procedure_expire = 0;
    bfba:	4b02      	ldr	r3, [pc, #8]	; (bfc4 <isr_rx_conn_pkt_ctrl+0xb14>)
    bfbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    bfc0:	e44a      	b.n	b858 <isr_rx_conn_pkt_ctrl+0x3a8>
    bfc2:	bf00      	nop
    bfc4:	20000660 	.word	0x20000660
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    bfc8:	7a41      	ldrb	r1, [r0, #9]
    bfca:	2007      	movs	r0, #7
    bfcc:	f7fc fa0a 	bl	83e4 <pdu_len_cmp>
    bfd0:	2800      	cmp	r0, #0
    bfd2:	f000 82e8 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    bfd6:	4ace      	ldr	r2, [pc, #824]	; (c310 <isr_rx_conn_pkt_ctrl+0xe60>)
    bfd8:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    bfdc:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    bfe0:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    bfe4:	42b1      	cmp	r1, r6
    bfe6:	4611      	mov	r1, r2
    bfe8:	d02c      	beq.n	c044 <isr_rx_conn_pkt_ctrl+0xb94>
			conn->llcp_conn_param.disabled = 1;
    bfea:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    bfee:	f040 0010 	orr.w	r0, r0, #16
    bff2:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    bff6:	f993 001d 	ldrsb.w	r0, [r3, #29]
    bffa:	2800      	cmp	r0, #0
    bffc:	f6bf af2a 	bge.w	be54 <isr_rx_conn_pkt_ctrl+0x9a4>
			LL_ASSERT(_radio.conn_upd == conn);
    c000:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    c004:	4293      	cmp	r3, r2
    c006:	f47f aa95 	bne.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_upd = NULL;
    c00a:	2200      	movs	r2, #0
    c00c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    c010:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c014:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    c018:	0716      	lsls	r6, r2, #28
    c01a:	f57f ab18 	bpl.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c01e:	2208      	movs	r2, #8
    c020:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    c022:	221a      	movs	r2, #26
    c024:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    c026:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    c028:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    c02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    c02c:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    c02e:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    c030:	237d      	movs	r3, #125	; 0x7d
    c032:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    c034:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    c036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c03a:	fb93 f3f2 	sdiv	r3, r3, r2
    c03e:	8223      	strh	r3, [r4, #16]
    c040:	f7ff bbb1 	b.w	b7a6 <isr_rx_conn_pkt_ctrl+0x2f6>
		} else if (_radio.conn_curr->llcp_length.req !=
    c044:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    c048:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    c04c:	4290      	cmp	r0, r2
    c04e:	d009      	beq.n	c064 <isr_rx_conn_pkt_ctrl+0xbb4>
			_radio.conn_curr->llcp_length.ack =
    c050:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    c054:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    c058:	f36f 02c3 	bfc	r2, #3, #1
    c05c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    c060:	f7ff bba1 	b.w	b7a6 <isr_rx_conn_pkt_ctrl+0x2f6>
		} else if (_radio.conn_curr->llcp_phy.req !=
    c064:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    c068:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    c06c:	4290      	cmp	r0, r2
    c06e:	d01b      	beq.n	c0a8 <isr_rx_conn_pkt_ctrl+0xbf8>
			_radio.conn_curr->llcp_phy.ack =
    c070:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    c074:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    c078:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    c07c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    c080:	f362 0002 	bfi	r0, r2, #0, #3
    c084:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    c088:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    c08c:	0780      	lsls	r0, r0, #30
    c08e:	d50f      	bpl.n	c0b0 <isr_rx_conn_pkt_ctrl+0xc00>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c090:	200c      	movs	r0, #12
    c092:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    c094:	2000      	movs	r0, #0
    c096:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    c098:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    c09a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    c09e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c0a2:	7363      	strb	r3, [r4, #13]
    c0a4:	f7ff bb7f 	b.w	b7a6 <isr_rx_conn_pkt_ctrl+0x2f6>
			switch (llctrl->unknown_rsp.type) {
    c0a8:	7b23      	ldrb	r3, [r4, #12]
    c0aa:	2b12      	cmp	r3, #18
    c0ac:	f47f ab7b 	bne.w	b7a6 <isr_rx_conn_pkt_ctrl+0x2f6>
		_radio.conn_curr->procedure_expire = 0;
    c0b0:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    c0b4:	f7ff bbd0 	b.w	b858 <isr_rx_conn_pkt_ctrl+0x3a8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    c0b8:	7a41      	ldrb	r1, [r0, #9]
    c0ba:	2014      	movs	r0, #20
    c0bc:	f7fc f992 	bl	83e4 <pdu_len_cmp>
    c0c0:	2800      	cmp	r0, #0
    c0c2:	f000 8270 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    c0c6:	2f14      	cmp	r7, #20
    c0c8:	d123      	bne.n	c112 <isr_rx_conn_pkt_ctrl+0xc62>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c0ca:	4892      	ldr	r0, [pc, #584]	; (c314 <isr_rx_conn_pkt_ctrl+0xe64>)
    c0cc:	f7f9 fd5b 	bl	5b86 <mem_acquire>
		if (!node_tx) {
    c0d0:	4606      	mov	r6, r0
    c0d2:	2800      	cmp	r0, #0
    c0d4:	f43f abdd 	beq.w	b892 <isr_rx_conn_pkt_ctrl+0x3e2>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c0d8:	4f8d      	ldr	r7, [pc, #564]	; (c310 <isr_rx_conn_pkt_ctrl+0xe60>)
    c0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    c0de:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    c0e2:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c0e6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c0e8:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    c0ea:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c0ec:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    c0f0:	45e0      	cmp	r8, ip
    c0f2:	46b9      	mov	r9, r7
    c0f4:	f894 800b 	ldrb.w	r8, [r4, #11]
    c0f8:	d10d      	bne.n	c116 <isr_rx_conn_pkt_ctrl+0xc66>
	      _radio.conn_curr->llcp_length.ack) &&
    c0fa:	f1b8 0f14 	cmp.w	r8, #20
    c0fe:	d016      	beq.n	c12e <isr_rx_conn_pkt_ctrl+0xc7e>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    c100:	f1b8 0f15 	cmp.w	r8, #21
    c104:	f47f aa16 	bne.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c108:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    c10a:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c10c:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c10e:	4693      	mov	fp, r2
    c110:	e05d      	b.n	c1ce <isr_rx_conn_pkt_ctrl+0xd1e>
	struct radio_pdu_node_tx *node_tx = NULL;
    c112:	2600      	movs	r6, #0
    c114:	e7e0      	b.n	c0d8 <isr_rx_conn_pkt_ctrl+0xc28>
		 LLCP_LENGTH_STATE_REQ) ||
    c116:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    c11a:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    c11e:	2f01      	cmp	r7, #1
    c120:	d9eb      	bls.n	c0fa <isr_rx_conn_pkt_ctrl+0xc4a>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    c122:	2f02      	cmp	r7, #2
    c124:	d1ec      	bne.n	c100 <isr_rx_conn_pkt_ctrl+0xc50>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    c126:	f1a8 0714 	sub.w	r7, r8, #20
    c12a:	2f01      	cmp	r7, #1
    c12c:	d8e8      	bhi.n	c100 <isr_rx_conn_pkt_ctrl+0xc50>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    c12e:	89a7      	ldrh	r7, [r4, #12]
    c130:	2f1a      	cmp	r7, #26
    c132:	d965      	bls.n	c200 <isr_rx_conn_pkt_ctrl+0xd50>
			eff_tx_octets = min(lr->max_rx_octets,
    c134:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    c138:	4547      	cmp	r7, r8
    c13a:	bf28      	it	cs
    c13c:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    c13e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    c142:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    c146:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    c14a:	bf34      	ite	cc
    c14c:	4693      	movcc	fp, r2
    c14e:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    c152:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    c156:	d355      	bcc.n	c204 <isr_rx_conn_pkt_ctrl+0xd54>
			eff_tx_time = min(lr->max_rx_time,
    c158:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    c15c:	45d0      	cmp	r8, sl
    c15e:	bf28      	it	cs
    c160:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    c162:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    c166:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    c16a:	bf34      	ite	cc
    c16c:	4682      	movcc	sl, r0
    c16e:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    c172:	455a      	cmp	r2, fp
    c174:	d048      	beq.n	c208 <isr_rx_conn_pkt_ctrl+0xd58>
			free_count_rx = packet_rx_acquired_count_get() +
    c176:	f7fc f97d 	bl	8474 <packet_rx_acquired_count_get>
    c17a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    c17c:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    c180:	f7f9 fd30 	bl	5be4 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    c184:	4420      	add	r0, r4
    c186:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    c188:	28ff      	cmp	r0, #255	; 0xff
    c18a:	f63f a9d3 	bhi.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
			if (_radio.packet_rx_data_count == free_count_rx) {
    c18e:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    c192:	4283      	cmp	r3, r0
    c194:	f040 8222 	bne.w	c5dc <isr_rx_conn_pkt_ctrl+0x112c>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c198:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    c19c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c1a0:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    c1a2:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    c1a4:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    c1a8:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    c1ac:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    c1b0:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    c1b4:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    c1b8:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    c1bc:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    c1c0:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    c1c4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    c1c8:	2303      	movs	r3, #3
    c1ca:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    c1ce:	2e00      	cmp	r6, #0
    c1d0:	f43f aa3d 	beq.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c1d4:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    c1d6:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    c1da:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c1de:	f043 0303 	orr.w	r3, r3, #3
    c1e2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    c1e4:	2309      	movs	r3, #9
    c1e6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c1e8:	2315      	movs	r3, #21
    c1ea:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    c1ec:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    c1ee:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    c1f2:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    c1f6:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    c1f8:	f7fd fd30 	bl	9c5c <ctrl_tx_enqueue>
    c1fc:	f7ff ba27 	b.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c200:	460f      	mov	r7, r1
    c202:	e79c      	b.n	c13e <isr_rx_conn_pkt_ctrl+0xc8e>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c204:	46f0      	mov	r8, lr
    c206:	e7ac      	b.n	c162 <isr_rx_conn_pkt_ctrl+0xcb2>
			_radio.conn_curr->pause_tx = 0;
    c208:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    c20c:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    c210:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    c214:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    c218:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    c21a:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    c21e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    c222:	d103      	bne.n	c22c <isr_rx_conn_pkt_ctrl+0xd7c>
    c224:	45c6      	cmp	lr, r8
    c226:	d101      	bne.n	c22c <isr_rx_conn_pkt_ctrl+0xd7c>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    c228:	4550      	cmp	r0, sl
    c22a:	d0d0      	beq.n	c1ce <isr_rx_conn_pkt_ctrl+0xd1e>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c22c:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    c22e:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    c232:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    c236:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    c238:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    c23c:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    c23e:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    c242:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    c246:	702b      	strb	r3, [r5, #0]
    c248:	e7c1      	b.n	c1ce <isr_rx_conn_pkt_ctrl+0xd1e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    c24a:	7a41      	ldrb	r1, [r0, #9]
    c24c:	2016      	movs	r0, #22
    c24e:	f7fc f8c9 	bl	83e4 <pdu_len_cmp>
    c252:	2800      	cmp	r0, #0
    c254:	f000 81a7 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.role == ROLE_MASTER) {
    c258:	482d      	ldr	r0, [pc, #180]	; (c310 <isr_rx_conn_pkt_ctrl+0xe60>)
    c25a:	7cc3      	ldrb	r3, [r0, #19]
    c25c:	2b04      	cmp	r3, #4
    c25e:	d15b      	bne.n	c318 <isr_rx_conn_pkt_ctrl+0xe68>
			if ((_radio.conn_curr->llcp_phy.ack !=
    c260:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    c264:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    c268:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    c26c:	428b      	cmp	r3, r1
    c26e:	d00a      	beq.n	c286 <isr_rx_conn_pkt_ctrl+0xdd6>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    c270:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    c274:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    c278:	3a01      	subs	r2, #1
    c27a:	2a02      	cmp	r2, #2
    c27c:	d803      	bhi.n	c286 <isr_rx_conn_pkt_ctrl+0xdd6>
				nack = reject_ext_ind_send(_radio.conn_curr,
    c27e:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    c280:	2116      	movs	r1, #22
    c282:	f7ff bbe1 	b.w	ba48 <isr_rx_conn_pkt_ctrl+0x598>
			} else if (((_radio.conn_curr->llcp_req !=
    c286:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    c28a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    c28e:	4295      	cmp	r5, r2
    c290:	d003      	beq.n	c29a <isr_rx_conn_pkt_ctrl+0xdea>
				     _radio.conn_curr->llcp_ack) &&
    c292:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    c296:	2a03      	cmp	r2, #3
    c298:	d105      	bne.n	c2a6 <isr_rx_conn_pkt_ctrl+0xdf6>
				     LLCP_ENCRYPTION)) ||
    c29a:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    c29e:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    c2a2:	4295      	cmp	r5, r2
    c2a4:	d001      	beq.n	c2aa <isr_rx_conn_pkt_ctrl+0xdfa>
				nack = reject_ext_ind_send(_radio.conn_curr,
    c2a6:	222a      	movs	r2, #42	; 0x2a
    c2a8:	e7ea      	b.n	c280 <isr_rx_conn_pkt_ctrl+0xdd0>
				_radio.conn_curr->llcp_phy.state =
    c2aa:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    c2ae:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    c2b0:	f042 0203 	orr.w	r2, r2, #3
    c2b4:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    c2b8:	d116      	bne.n	c2e8 <isr_rx_conn_pkt_ctrl+0xe38>
					_radio.conn_curr->llcp_phy.ack--;
    c2ba:	3b01      	subs	r3, #1
    c2bc:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    c2c0:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    c2c4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    c2c8:	f36f 0341 	bfc	r3, #1, #1
    c2cc:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    c2d0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    c2d4:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    c2d8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    c2dc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c2e0:	f362 1347 	bfi	r3, r2, #5, #3
    c2e4:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    c2e8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    c2ec:	7b62      	ldrb	r2, [r4, #13]
    c2ee:	f3c3 0182 	ubfx	r1, r3, #2, #3
    c2f2:	400a      	ands	r2, r1
    c2f4:	f362 0384 	bfi	r3, r2, #2, #3
    c2f8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    c2fc:	7b22      	ldrb	r2, [r4, #12]
    c2fe:	b2db      	uxtb	r3, r3
    c300:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c304:	f362 1347 	bfi	r3, r2, #5, #3
    c308:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    c30c:	f7ff b99f 	b.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
    c310:	20000660 	.word	0x20000660
    c314:	200007bc 	.word	0x200007bc
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    c318:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c31c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    c320:	f7f9 fc31 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    c324:	4601      	mov	r1, r0
    c326:	2800      	cmp	r0, #0
    c328:	f43f aab3 	beq.w	b892 <isr_rx_conn_pkt_ctrl+0x3e2>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    c32c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c330:	2202      	movs	r2, #2
    c332:	f362 0301 	bfi	r3, r2, #0, #2
    c336:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    c33a:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    c33e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    c342:	4293      	cmp	r3, r2
    c344:	d11a      	bne.n	c37c <isr_rx_conn_pkt_ctrl+0xecc>
		conn->llcp_phy.ack--;
    c346:	3b01      	subs	r3, #1
    c348:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    c34c:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    c350:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    c354:	f36f 0341 	bfc	r3, #1, #1
    c358:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    c35c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c360:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    c364:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    c368:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c36c:	f362 1347 	bfi	r3, r2, #5, #3
    c370:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    c374:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    c378:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    c37c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c380:	7b62      	ldrb	r2, [r4, #13]
    c382:	f3c3 0082 	ubfx	r0, r3, #2, #3
    c386:	4002      	ands	r2, r0
    c388:	f362 0384 	bfi	r3, r2, #2, #3
    c38c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    c390:	7b22      	ldrb	r2, [r4, #12]
    c392:	b2db      	uxtb	r3, r3
    c394:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c398:	f362 1347 	bfi	r3, r2, #5, #3
    c39c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c3a0:	790b      	ldrb	r3, [r1, #4]
    c3a2:	f043 0303 	orr.w	r3, r3, #3
    c3a6:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    c3a8:	2303      	movs	r3, #3
    c3aa:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    c3ac:	2317      	movs	r3, #23
    c3ae:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    c3b0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    c3b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c3b8:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    c3ba:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    c3be:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c3c2:	724b      	strb	r3, [r1, #9]
    c3c4:	f7ff ba78 	b.w	b8b8 <isr_rx_conn_pkt_ctrl+0x408>
		if (_radio.conn_curr->role ||
    c3c8:	4e8b      	ldr	r6, [pc, #556]	; (c5f8 <isr_rx_conn_pkt_ctrl+0x1148>)
    c3ca:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    c3ce:	f995 301d 	ldrsb.w	r3, [r5, #29]
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	f2c0 80e7 	blt.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    c3d8:	7a41      	ldrb	r1, [r0, #9]
    c3da:	2017      	movs	r0, #23
    c3dc:	f7fc f802 	bl	83e4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    c3e0:	2800      	cmp	r0, #0
    c3e2:	f000 80e0 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		if ((_radio.role == ROLE_MASTER) &&
    c3e6:	7cf3      	ldrb	r3, [r6, #19]
    c3e8:	2b04      	cmp	r3, #4
    c3ea:	f47f a930 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
    c3ee:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    c3f2:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    c3f6:	429a      	cmp	r2, r3
    c3f8:	f43f a929 	beq.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_phy.state ==
    c3fc:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    c400:	f003 0203 	and.w	r2, r3, #3
    c404:	2a02      	cmp	r2, #2
    c406:	f47f a922 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    c40a:	f043 0303 	orr.w	r3, r3, #3
    c40e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    c412:	7b62      	ldrb	r2, [r4, #13]
    c414:	f3c3 0182 	ubfx	r1, r3, #2, #3
    c418:	400a      	ands	r2, r1
    c41a:	f362 0384 	bfi	r3, r2, #2, #3
    c41e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    c422:	7b22      	ldrb	r2, [r4, #12]
    c424:	b2db      	uxtb	r3, r3
    c426:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c42a:	f362 1347 	bfi	r3, r2, #5, #3
    c42e:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    c432:	f7ff b8c4 	b.w	b5be <isr_rx_conn_pkt_ctrl+0x10e>
		if (!_radio.conn_curr->role ||
    c436:	4b70      	ldr	r3, [pc, #448]	; (c5f8 <isr_rx_conn_pkt_ctrl+0x1148>)
    c438:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    c43c:	f996 301d 	ldrsb.w	r3, [r6, #29]
    c440:	2b00      	cmp	r3, #0
    c442:	f280 80b0 	bge.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    c446:	7a41      	ldrb	r1, [r0, #9]
    c448:	2018      	movs	r0, #24
    c44a:	f7fb ffcb 	bl	83e4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    c44e:	2800      	cmp	r0, #0
    c450:	f000 80a9 	beq.w	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    c454:	7b27      	ldrb	r7, [r4, #12]
    c456:	7b62      	ldrb	r2, [r4, #13]
    c458:	ea47 0002 	orr.w	r0, r7, r2
    c45c:	f010 0007 	ands.w	r0, r0, #7
    c460:	d125      	bne.n	c4ae <isr_rx_conn_pkt_ctrl+0xffe>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    c462:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    c466:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    c46a:	4293      	cmp	r3, r2
    c46c:	f43f a8ef 	beq.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    c470:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    c474:	f003 0303 	and.w	r3, r3, #3
    c478:	2b02      	cmp	r3, #2
    c47a:	f47f a8e8 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		if (!conn->llcp_phy.cmd) {
    c47e:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c482:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    c486:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    c488:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    c48c:	f57f a8df 	bpl.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c490:	230c      	movs	r3, #12
		upd->status = 0;
    c492:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c494:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    c496:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    c49a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c49e:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    c4a0:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    c4a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c4a8:	7363      	strb	r3, [r4, #13]
    c4aa:	f7ff bab7 	b.w	ba1c <isr_rx_conn_pkt_ctrl+0x56c>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    c4ae:	89e0      	ldrh	r0, [r4, #14]
    c4b0:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    c4b2:	1ac3      	subs	r3, r0, r3
    c4b4:	041b      	lsls	r3, r3, #16
    c4b6:	f100 809a 	bmi.w	c5ee <isr_rx_conn_pkt_ctrl+0x113e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    c4ba:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    c4be:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    c4c2:	428b      	cmp	r3, r1
    c4c4:	f47f a836 	bne.w	b534 <isr_rx_conn_pkt_ctrl+0x84>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    c4c8:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    c4cc:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    c4d0:	42a3      	cmp	r3, r4
    c4d2:	d014      	beq.n	c4fe <isr_rx_conn_pkt_ctrl+0x104e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    c4d4:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    c4d8:	f003 0303 	and.w	r3, r3, #3
    c4dc:	2b02      	cmp	r3, #2
    c4de:	d10e      	bne.n	c4fe <isr_rx_conn_pkt_ctrl+0x104e>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c4e0:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c4e4:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c4e8:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    c4ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
    c4f0:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    c4f4:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c4f6:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    c4fa:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    c4fe:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    c502:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    c506:	f002 0207 	and.w	r2, r2, #7
    c50a:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    c50e:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    c512:	f36f 0300 	bfc	r3, #0, #1
    c516:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    c51a:	2008      	movs	r0, #8
	conn->llcp_ack--;
    c51c:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    c51e:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    c522:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    c526:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    c52a:	2b00      	cmp	r3, #0
    c52c:	f43f a88f 	beq.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    c530:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    c534:	f362 0302 	bfi	r3, r2, #0, #3
    c538:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    c53c:	f7ff b887 	b.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
    c540:	4e2d      	ldr	r6, [pc, #180]	; (c5f8 <isr_rx_conn_pkt_ctrl+0x1148>)
    c542:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    c546:	f995 301d 	ldrsb.w	r3, [r5, #29]
    c54a:	2b00      	cmp	r3, #0
    c54c:	db2b      	blt.n	c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    c54e:	7a41      	ldrb	r1, [r0, #9]
    c550:	2019      	movs	r0, #25
    c552:	f7fb ff47 	bl	83e4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    c556:	b330      	cbz	r0, c5a6 <isr_rx_conn_pkt_ctrl+0x10f6>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    c558:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    c55c:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    c560:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    c564:	7b22      	ldrb	r2, [r4, #12]
    c566:	f003 0307 	and.w	r3, r3, #7
    c56a:	4213      	tst	r3, r2
    c56c:	f43f a86f 	beq.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
			if (conn->llcp_req != conn->llcp_ack) {
    c570:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    c574:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    c578:	429a      	cmp	r2, r3
    c57a:	f47f a868 	bne.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
			memcpy(&conn->llcp.chan_map.chm[0],
    c57e:	2205      	movs	r2, #5
    c580:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    c584:	f105 0079 	add.w	r0, r5, #121	; 0x79
    c588:	f7f5 fb5e 	bl	1c48 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    c58c:	2301      	movs	r3, #1
    c58e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    c592:	2302      	movs	r3, #2
    c594:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    c598:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    c59c:	3b01      	subs	r3, #1
    c59e:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    c5a2:	f7ff b854 	b.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
		nack = unknown_rsp_send(_radio.conn_curr,
    c5a6:	4814      	ldr	r0, [pc, #80]	; (c5f8 <isr_rx_conn_pkt_ctrl+0x1148>)
    c5a8:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c5ac:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    c5b0:	f7f9 fae9 	bl	5b86 <mem_acquire>
	if (!node_tx) {
    c5b4:	4601      	mov	r1, r0
    c5b6:	2800      	cmp	r0, #0
    c5b8:	f43f a96b 	beq.w	b892 <isr_rx_conn_pkt_ctrl+0x3e2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c5bc:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    c5be:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c5c0:	f043 0303 	orr.w	r3, r3, #3
    c5c4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    c5c6:	2302      	movs	r3, #2
    c5c8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    c5ca:	2307      	movs	r3, #7
    c5cc:	71c3      	strb	r3, [r0, #7]
    c5ce:	f7ff b99d 	b.w	b90c <isr_rx_conn_pkt_ctrl+0x45c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    c5d2:	2328      	movs	r3, #40	; 0x28
    c5d4:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    c5d8:	f7ff b839 	b.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
	if (node_tx) {
    c5dc:	2e00      	cmp	r6, #0
    c5de:	f43f a958 	beq.w	b892 <isr_rx_conn_pkt_ctrl+0x3e2>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    c5e2:	4906      	ldr	r1, [pc, #24]	; (c5fc <isr_rx_conn_pkt_ctrl+0x114c>)
    c5e4:	4630      	mov	r0, r6
    c5e6:	f7f9 fae8 	bl	5bba <mem_release>
    c5ea:	f7ff b952 	b.w	b892 <isr_rx_conn_pkt_ctrl+0x3e2>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    c5ee:	2328      	movs	r3, #40	; 0x28
    c5f0:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    c5f4:	f7ff b82b 	b.w	b64e <isr_rx_conn_pkt_ctrl+0x19e>
    c5f8:	20000660 	.word	0x20000660
    c5fc:	200007bc 	.word	0x200007bc

0000c600 <isr>:
{
    c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c604:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    c606:	f003 fc67 	bl	fed8 <radio_is_done>
    c60a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    c60c:	b35e      	cbz	r6, c666 <isr+0x66>
		crc_ok = radio_crc_is_valid();
    c60e:	f003 fc83 	bl	ff18 <radio_crc_is_valid>
    c612:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    c614:	f003 fd04 	bl	10020 <radio_filter_has_match>
    c618:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    c61c:	f003 fd0a 	bl	10034 <radio_filter_match_get>
    c620:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    c624:	f003 feee 	bl	10404 <radio_ar_has_match>
    c628:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    c62c:	f003 fed8 	bl	103e0 <radio_ar_match_get>
    c630:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    c634:	f003 fcbe 	bl	ffb4 <radio_rssi_is_ready>
    c638:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    c63a:	4cac      	ldr	r4, [pc, #688]	; (c8ec <isr+0x2ec>)
	radio_status_reset();
    c63c:	f003 fc36 	bl	feac <radio_status_reset>
	radio_tmr_status_reset();
    c640:	f003 fd0a 	bl	10058 <radio_tmr_status_reset>
	radio_filter_status_reset();
    c644:	f003 fce4 	bl	10010 <radio_filter_status_reset>
	radio_ar_status_reset();
    c648:	f003 fed0 	bl	103ec <radio_ar_status_reset>
	radio_rssi_status_reset();
    c64c:	f003 fcaa 	bl	ffa4 <radio_rssi_status_reset>
	switch (_radio.state) {
    c650:	7d23      	ldrb	r3, [r4, #20]
    c652:	2b05      	cmp	r3, #5
    c654:	d82c      	bhi.n	c6b0 <isr+0xb0>
    c656:	e8df f013 	tbh	[pc, r3, lsl #1]
    c65a:	0079      	.short	0x0079
    c65c:	000e00c2 	.word	0x000e00c2
    c660:	09880988 	.word	0x09880988
    c664:	0988      	.short	0x0988
		devmatch_id = irkmatch_id = 0xFF;
    c666:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    c66a:	4635      	mov	r5, r6
    c66c:	46b2      	mov	sl, r6
    c66e:	46b1      	mov	r9, r6
    c670:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    c672:	46d8      	mov	r8, fp
    c674:	e7e1      	b.n	c63a <isr+0x3a>
	_radio.state = STATE_RX;
    c676:	2301      	movs	r3, #1
    c678:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    c67a:	f003 fdef 	bl	1025c <radio_tmr_tifs_base_get>
    c67e:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    c680:	2096      	movs	r0, #150	; 0x96
    c682:	f003 fcf7 	bl	10074 <radio_tmr_tifs_set>
	switch (_radio.role) {
    c686:	7ce3      	ldrb	r3, [r4, #19]
    c688:	3b01      	subs	r3, #1
    c68a:	2b03      	cmp	r3, #3
    c68c:	d810      	bhi.n	c6b0 <isr+0xb0>
    c68e:	e8df f003 	tbb	[pc, r3]
    c692:	3002      	.short	0x3002
    c694:	6060      	.short	0x6060
		radio_switch_complete_and_tx(0, 0, 0, 0);
    c696:	2300      	movs	r3, #0
    c698:	461a      	mov	r2, r3
    c69a:	4619      	mov	r1, r3
    c69c:	4618      	mov	r0, r3
    c69e:	f003 fc59 	bl	ff54 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    c6a2:	f003 fc47 	bl	ff34 <radio_pkt_scratch_get>
    c6a6:	f003 fbc9 	bl	fe3c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    c6aa:	f003 fc0b 	bl	fec4 <radio_is_ready>
    c6ae:	b128      	cbz	r0, c6bc <isr+0xbc>
		LL_ASSERT(0);
    c6b0:	4040      	eors	r0, r0
    c6b2:	f380 8811 	msr	BASEPRI, r0
    c6b6:	f04f 0004 	mov.w	r0, #4
    c6ba:	df02      	svc	2
		if (ctrl_rl_enabled()) {
    c6bc:	f002 ff28 	bl	f510 <ctrl_rl_enabled>
    c6c0:	b138      	cbz	r0, c6d2 <isr+0xd2>
			u8_t count, *irks = ctrl_irks_get(&count);
    c6c2:	a810      	add	r0, sp, #64	; 0x40
    c6c4:	f002 fd1c 	bl	f100 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    c6c8:	4601      	mov	r1, r0
    c6ca:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c6ce:	f003 fe55 	bl	1037c <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    c6d2:	2100      	movs	r1, #0
    c6d4:	4608      	mov	r0, r1
    c6d6:	f003 fbc6 	bl	fe66 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    c6da:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    c6dc:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    c6de:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    c6e0:	4608      	mov	r0, r1
    c6e2:	f003 fbbc 	bl	fe5e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    c6e6:	1a28      	subs	r0, r5, r0
    c6e8:	f003 fd4e 	bl	10188 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    c6ec:	f003 fd9e 	bl	1022c <radio_tmr_end_capture>
    c6f0:	e02c      	b.n	c74c <isr+0x14c>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    c6f2:	2300      	movs	r3, #0
    c6f4:	461a      	mov	r2, r3
    c6f6:	4619      	mov	r1, r3
    c6f8:	4618      	mov	r0, r3
    c6fa:	f003 fc2b 	bl	ff54 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    c6fe:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c702:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    c706:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c70a:	3008      	adds	r0, #8
    c70c:	f003 fb96 	bl	fe3c <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    c710:	f003 fbd8 	bl	fec4 <radio_is_ready>
    c714:	2800      	cmp	r0, #0
    c716:	d1cb      	bne.n	c6b0 <isr+0xb0>
		if (ctrl_rl_enabled()) {
    c718:	f002 fefa 	bl	f510 <ctrl_rl_enabled>
    c71c:	b138      	cbz	r0, c72e <isr+0x12e>
			u8_t count, *irks = ctrl_irks_get(&count);
    c71e:	a810      	add	r0, sp, #64	; 0x40
    c720:	f002 fcee 	bl	f100 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    c724:	4601      	mov	r1, r0
    c726:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c72a:	f003 fe27 	bl	1037c <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    c72e:	2100      	movs	r1, #0
    c730:	4608      	mov	r0, r1
    c732:	f003 fb98 	bl	fe66 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    c736:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    c738:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    c73a:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    c73c:	4608      	mov	r0, r1
    c73e:	f003 fb8e 	bl	fe5e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    c742:	1a28      	subs	r0, r5, r0
    c744:	f003 fd20 	bl	10188 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    c748:	f003 fc1c 	bl	ff84 <radio_rssi_measure>
}
    c74c:	b013      	add	sp, #76	; 0x4c
    c74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    c752:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    c756:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    c75a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    c75e:	2100      	movs	r1, #0
    c760:	09d3      	lsrs	r3, r2, #7
    c762:	f000 0007 	and.w	r0, r0, #7
    c766:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c76a:	f003 fbf3 	bl	ff54 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c76e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c772:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    c776:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c77a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    c77e:	3108      	adds	r1, #8
    c780:	f7fc f922 	bl	89c8 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    c784:	f003 fb9e 	bl	fec4 <radio_is_ready>
    c788:	2800      	cmp	r0, #0
    c78a:	d191      	bne.n	c6b0 <isr+0xb0>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    c78c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    c790:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    c794:	2101      	movs	r1, #1
    c796:	f000 0007 	and.w	r0, r0, #7
    c79a:	f003 fb64 	bl	fe66 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    c79e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    c7a2:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    c7a6:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    c7aa:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    c7ac:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    c7ae:	4405      	add	r5, r0
	switch (phy) {
    c7b0:	d013      	beq.n	c7da <isr+0x1da>
		return 40;
    c7b2:	2b04      	cmp	r3, #4
    c7b4:	bf0c      	ite	eq
    c7b6:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    c7ba:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    c7bc:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    c7be:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    c7c2:	09c1      	lsrs	r1, r0, #7
    c7c4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    c7c8:	f003 fb49 	bl	fe5e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    c7cc:	1a28      	subs	r0, r5, r0
    c7ce:	f003 fcdb 	bl	10188 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    c7d2:	2001      	movs	r0, #1
    c7d4:	f7fc fe4c 	bl	9470 <packet_tx_enqueue>
    c7d8:	e7b8      	b.n	c74c <isr+0x14c>
		return 24;
    c7da:	2018      	movs	r0, #24
    c7dc:	e7ee      	b.n	c7bc <isr+0x1bc>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    c7de:	b926      	cbnz	r6, c7ea <isr+0x1ea>
		_radio.state = STATE_CLOSE;
    c7e0:	2303      	movs	r3, #3
    c7e2:	7523      	strb	r3, [r4, #20]
		radio_disable();
    c7e4:	f003 fb50 	bl	fe88 <radio_disable>
    c7e8:	e7b0      	b.n	c74c <isr+0x14c>
	switch (_radio.role) {
    c7ea:	7ce3      	ldrb	r3, [r4, #19]
    c7ec:	3b01      	subs	r3, #1
    c7ee:	2b03      	cmp	r3, #3
    c7f0:	f63f af5e 	bhi.w	c6b0 <isr+0xb0>
    c7f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    c7f8:	02920004 	.word	0x02920004
    c7fc:	05940594 	.word	0x05940594
		if (crc_ok) {
    c800:	2f00      	cmp	r7, #0
    c802:	d0ed      	beq.n	c7e0 <isr+0x1e0>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    c804:	f1ba 0f00 	cmp.w	sl, #0
    c808:	d039      	beq.n	c87e <isr+0x27e>
    c80a:	4658      	mov	r0, fp
    c80c:	f002 fca2 	bl	f154 <ctrl_rl_irk_idx>
    c810:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    c814:	f003 fb8e 	bl	ff34 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    c818:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    c81c:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    c81e:	232b      	movs	r3, #43	; 0x2b
    c820:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    c822:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    c824:	fb11 3302 	smlabb	r3, r1, r2, r3
    c828:	930a      	str	r3, [sp, #40]	; 0x28
    c82a:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    c82c:	f000 030f 	and.w	r3, r0, #15
    c830:	2b03      	cmp	r3, #3
    c832:	d10a      	bne.n	c84a <isr+0x24a>
    c834:	7873      	ldrb	r3, [r6, #1]
    c836:	2b0c      	cmp	r3, #12
    c838:	d107      	bne.n	c84a <isr+0x24a>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    c83a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    c83e:	065f      	lsls	r7, r3, #25
    c840:	d51f      	bpl.n	c882 <isr+0x282>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    c842:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    c846:	0658      	lsls	r0, r3, #25
    c848:	d445      	bmi.n	c8d6 <isr+0x2d6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    c84a:	7830      	ldrb	r0, [r6, #0]
    c84c:	f000 030f 	and.w	r3, r0, #15
    c850:	2b05      	cmp	r3, #5
    c852:	d1c5      	bne.n	c7e0 <isr+0x1e0>
    c854:	7873      	ldrb	r3, [r6, #1]
    c856:	2b22      	cmp	r3, #34	; 0x22
    c858:	d1c2      	bne.n	c7e0 <isr+0x1e0>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    c85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c85c:	5ce3      	ldrb	r3, [r4, r3]
    c85e:	f003 030f 	and.w	r3, r3, #15
    c862:	2b01      	cmp	r3, #1
    c864:	f040 8216 	bne.w	cc94 <isr+0x694>
					    ci->connect_ind.init_addr,
    c868:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    c86a:	aa10      	add	r2, sp, #64	; 0x40
    c86c:	4639      	mov	r1, r7
    c86e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    c872:	f002 fdf1 	bl	f458 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    c876:	2800      	cmp	r0, #0
    c878:	d13a      	bne.n	c8f0 <isr+0x2f0>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    c87a:	2000      	movs	r0, #0
    c87c:	e048      	b.n	c910 <isr+0x310>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    c87e:	20ff      	movs	r0, #255	; 0xff
    c880:	e7c6      	b.n	c810 <isr+0x210>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    c882:	aa10      	add	r2, sp, #64	; 0x40
    c884:	1cb1      	adds	r1, r6, #2
    c886:	f3c0 1080 	ubfx	r0, r0, #6, #1
    c88a:	f002 fde5 	bl	f458 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    c88e:	2800      	cmp	r0, #0
    c890:	d0d7      	beq.n	c842 <isr+0x242>
	return (adv->tx_addr == sr->rx_addr) &&
    c892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c894:	7832      	ldrb	r2, [r6, #0]
    c896:	5ce3      	ldrb	r3, [r4, r3]
    c898:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c89c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    c8a0:	d1d3      	bne.n	c84a <isr+0x24a>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    c8a2:	2206      	movs	r2, #6
    c8a4:	f106 0108 	add.w	r1, r6, #8
    c8a8:	1ca8      	adds	r0, r5, #2
    c8aa:	f7f5 f9b8 	bl	1c1e <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    c8ae:	2800      	cmp	r0, #0
    c8b0:	d1cb      	bne.n	c84a <isr+0x24a>
		_radio.state = STATE_CLOSE;
    c8b2:	2303      	movs	r3, #3
    c8b4:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    c8b6:	f003 fb57 	bl	ff68 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    c8ba:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    c8be:	2327      	movs	r3, #39	; 0x27
    c8c0:	fb03 4000 	mla	r0, r3, r0, r4
    c8c4:	307b      	adds	r0, #123	; 0x7b
    c8c6:	f003 fabf 	bl	fe48 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    c8ca:	f003 fafb 	bl	fec4 <radio_is_ready>
    c8ce:	2800      	cmp	r0, #0
    c8d0:	f43f af3c 	beq.w	c74c <isr+0x14c>
    c8d4:	e6ec      	b.n	c6b0 <isr+0xb0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    c8d6:	f1b9 0f00 	cmp.w	r9, #0
    c8da:	d1da      	bne.n	c892 <isr+0x292>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    c8dc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c8e0:	f002 fc54 	bl	f18c <ctrl_irk_whitelisted>
    c8e4:	2800      	cmp	r0, #0
    c8e6:	d1d4      	bne.n	c892 <isr+0x292>
    c8e8:	e7af      	b.n	c84a <isr+0x24a>
    c8ea:	bf00      	nop
    c8ec:	20000660 	.word	0x20000660
		       isr_adv_ci_adva_check(adv, ci) &&
    c8f0:	4631      	mov	r1, r6
    c8f2:	4628      	mov	r0, r5
    c8f4:	f7fc fb1a 	bl	8f2c <isr_adv_ci_adva_check>
					    rl_idx) &&
    c8f8:	2800      	cmp	r0, #0
    c8fa:	d0be      	beq.n	c87a <isr+0x27a>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    c8fc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    c900:	2bff      	cmp	r3, #255	; 0xff
    c902:	f000 81b4 	beq.w	cc6e <isr+0x66e>
		return rl_idx == _radio.advertiser.rl_idx;
    c906:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    c90a:	1ac1      	subs	r1, r0, r3
    c90c:	4248      	negs	r0, r1
    c90e:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    c910:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    c914:	2800      	cmp	r0, #0
    c916:	f43f af63 	beq.w	c7e0 <isr+0x1e0>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    c91a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    c91e:	b133      	cbz	r3, c92e <isr+0x32e>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    c920:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    c924:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    c928:	429a      	cmp	r2, r3
    c92a:	f47f af59 	bne.w	c7e0 <isr+0x1e0>
    c92e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    c932:	2b00      	cmp	r3, #0
    c934:	f43f af54 	beq.w	c7e0 <isr+0x1e0>
			node_rx = packet_rx_reserve_get(4);
    c938:	2004      	movs	r0, #4
    c93a:	f7fb fdb1 	bl	84a0 <packet_rx_reserve_get>
		if (!node_rx) {
    c93e:	4607      	mov	r7, r0
    c940:	2800      	cmp	r0, #0
    c942:	f43f af4d 	beq.w	c7e0 <isr+0x1e0>
		_radio.state = STATE_STOP;
    c946:	f04f 0904 	mov.w	r9, #4
    c94a:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    c94e:	f003 fa9b 	bl	fe88 <radio_disable>
		conn = _radio.advertiser.conn;
    c952:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c956:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    c95a:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c95c:	f44f 72aa 	mov.w	r2, #340	; 0x154
    c960:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    c962:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c966:	f7f9 f946 	bl	5bf6 <mem_index_get>
		memcpy(&conn->access_addr[0],
    c96a:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c96e:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    c970:	2203      	movs	r2, #3
    c972:	f106 0112 	add.w	r1, r6, #18
    c976:	f105 0014 	add.w	r0, r5, #20
    c97a:	f7f5 f965 	bl	1c48 <memcpy>
		memcpy(&conn->data_chan_map[0],
    c97e:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    c982:	464a      	mov	r2, r9
    c984:	f106 010e 	add.w	r1, r6, #14
    c988:	4650      	mov	r0, sl
    c98a:	f7f5 f95d 	bl	1c48 <memcpy>
		memcpy(&conn->data_chan_map[0],
    c98e:	2205      	movs	r2, #5
    c990:	f106 011e 	add.w	r1, r6, #30
    c994:	4640      	mov	r0, r8
    c996:	f7f5 f957 	bl	1c48 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c99a:	2105      	movs	r1, #5
    c99c:	4640      	mov	r0, r8
    c99e:	f7f9 fa9d 	bl	5edc <util_ones_count_get>
		conn->data_chan_count =
    c9a2:	7f6b      	ldrb	r3, [r5, #29]
    c9a4:	f360 0305 	bfi	r3, r0, #0, #6
    c9a8:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    c9aa:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    c9ae:	f3c3 0304 	ubfx	r3, r3, #0, #5
    c9b2:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    c9b4:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    c9b6:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    c9b8:	f240 48e2 	movw	r8, #1250	; 0x4e2
    c9bc:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    c9c0:	7ef2      	ldrb	r2, [r6, #27]
    c9c2:	7eb3      	ldrb	r3, [r6, #26]
    c9c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    c9c8:	4651      	mov	r1, sl
    c9ca:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    c9cc:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    c9ce:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    c9d2:	f7f5 f939 	bl	1c48 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    c9d6:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c9d8:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    c9da:	f242 7210 	movw	r2, #10000	; 0x2710
    c9de:	fb02 8303 	mla	r3, r2, r3, r8
    c9e2:	3b01      	subs	r3, #1
    c9e4:	fbb3 f3f8 	udiv	r3, r3, r8
    c9e8:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    c9ea:	4bc3      	ldr	r3, [pc, #780]	; (ccf8 <isr+0x6f8>)
    c9ec:	4443      	add	r3, r8
    c9ee:	fbb3 f3f8 	udiv	r3, r3, r8
    c9f2:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c9f6:	4bc1      	ldr	r3, [pc, #772]	; (ccfc <isr+0x6fc>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c9f8:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c9fa:	4443      	add	r3, r8
    c9fc:	fbb3 f3f8 	udiv	r3, r3, r8
    ca00:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ca02:	4282      	cmp	r2, r0
    ca04:	4613      	mov	r3, r2
    ca06:	bfc4      	itt	gt
    ca08:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    ca0c:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ca0e:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ca12:	bfc4      	itt	gt
    ca14:	18d2      	addgt	r2, r2, r3
    ca16:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    ca18:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ca1a:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ca1e:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    ca20:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    ca22:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    ca24:	2300      	movs	r3, #0
    ca26:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    ca28:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ca2a:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    ca2e:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ca30:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ca34:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    ca38:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ca3a:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ca3e:	464a      	mov	r2, r9
    ca40:	f107 001b 	add.w	r0, r7, #27
    ca44:	f7f5 f900 	bl	1c48 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    ca48:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ca4c:	f107 030e 	add.w	r3, r7, #14
    ca50:	28ff      	cmp	r0, #255	; 0xff
    ca52:	930b      	str	r3, [sp, #44]	; 0x2c
    ca54:	f106 0a02 	add.w	sl, r6, #2
    ca58:	f107 0b14 	add.w	fp, r7, #20
    ca5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca5e:	f000 8138 	beq.w	ccd2 <isr+0x6d2>
			ll_rl_id_addr_get(rl_idx,
    ca62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca64:	f107 010d 	add.w	r1, r7, #13
    ca68:	f002 fcd6 	bl	f418 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ca6c:	7b7b      	ldrb	r3, [r7, #13]
    ca6e:	3302      	adds	r3, #2
    ca70:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ca72:	464a      	mov	r2, r9
    ca74:	4651      	mov	r1, sl
    ca76:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ca78:	f7f5 f8e6 	bl	1c48 <memcpy>
			pdu_adv->connect_ind.interval;
    ca7c:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    ca7e:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    ca82:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    ca84:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    ca88:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    ca8a:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    ca8e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ca92:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ca96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ca9a:	8c28      	ldrh	r0, [r5, #32]
    ca9c:	f7fc fab6 	bl	900c <rx_fc_lock>
		packet_rx_enqueue();
    caa0:	f7fc fb66 	bl	9170 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    caa4:	2003      	movs	r0, #3
    caa6:	f7fb fcfb 	bl	84a0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    caaa:	2800      	cmp	r0, #0
    caac:	f43f ae00 	beq.w	c6b0 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    cab0:	8c2b      	ldrh	r3, [r5, #32]
    cab2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    cab4:	230b      	movs	r3, #11
    cab6:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    cab8:	7833      	ldrb	r3, [r6, #0]
    caba:	f013 0320 	ands.w	r3, r3, #32
    cabe:	d00e      	beq.n	cade <isr+0x4de>
					((u16_t)conn->access_addr[1] << 8) |
    cac0:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    cac2:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    cac4:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    cac6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    caca:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    cacc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    cad0:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    cad2:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    cad4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    cad8:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    cada:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    cadc:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    cade:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    cae0:	f7fc fb46 	bl	9170 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    cae4:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    cae8:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    caec:	4984      	ldr	r1, [pc, #528]	; (cd00 <isr+0x700>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    caee:	0952      	lsrs	r2, r2, #5
    caf0:	f362 0384 	bfi	r3, r2, #2, #3
    caf4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    caf8:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    cafc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    cb00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    cb04:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    cb06:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    cb0a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    cb0e:	4a7d      	ldr	r2, [pc, #500]	; (cd04 <isr+0x704>)
    cb10:	f203 233f 	addw	r3, r3, #575	; 0x23f
    cb14:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    cb18:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    cb1a:	ea4f 0358 	mov.w	r3, r8, lsr #1
    cb1e:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    cb20:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    cb22:	7d73      	ldrb	r3, [r6, #21]
    cb24:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    cb28:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    cb2a:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    cb2e:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    cb30:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    cb32:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    cb34:	4638      	mov	r0, r7
    cb36:	f003 f994 	bl	fe62 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    cb3a:	4973      	ldr	r1, [pc, #460]	; (cd08 <isr+0x708>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    cb3c:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    cb3e:	f200 4052 	addw	r0, r0, #1106	; 0x452
    cb42:	a36b      	add	r3, pc, #428	; (adr r3, ccf0 <isr+0x6f0>)
    cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb48:	fba0 0101 	umull	r0, r1, r0, r1
    cb4c:	f7f3 fb62 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    cb50:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    cb54:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    cb56:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    cb58:	4293      	cmp	r3, r2
    cb5a:	bf38      	it	cc
    cb5c:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    cb5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    cb62:	469a      	mov	sl, r3
		conn_interval_us -=
    cb64:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    cb66:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    cb68:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    cb6a:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    cb6c:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    cb70:	f003 fb6e 	bl	10250 <radio_tmr_end_get>
    cb74:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    cb76:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cb78:	4639      	mov	r1, r7
		conn_offset_us +=
    cb7a:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cb7e:	4638      	mov	r0, r7
    cb80:	f003 f96d 	bl	fe5e <radio_tx_chain_delay_get>
    cb84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb86:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    cb8a:	4499      	add	r9, r3
    cb8c:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    cb90:	eba9 030b 	sub.w	r3, r9, fp
    cb94:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb96:	f240 4383 	movw	r3, #1155	; 0x483
    cb9a:	9300      	str	r3, [sp, #0]
    cb9c:	2205      	movs	r2, #5
    cb9e:	4b5b      	ldr	r3, [pc, #364]	; (cd0c <isr+0x70c>)
    cba0:	f8df b164 	ldr.w	fp, [pc, #356]	; cd08 <isr+0x708>
    cba4:	4639      	mov	r1, r7
    cba6:	4638      	mov	r0, r7
    cba8:	f7f9 ff00 	bl	69ac <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    cbac:	f240 4184 	movw	r1, #1156	; 0x484
    cbb0:	f7fc fdd4 	bl	975c <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    cbb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbb6:	5ce3      	ldrb	r3, [r4, r3]
    cbb8:	f003 030f 	and.w	r3, r3, #15
    cbbc:	2b01      	cmp	r3, #1
    cbbe:	d106      	bne.n	cbce <isr+0x5ce>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbc0:	9700      	str	r7, [sp, #0]
    cbc2:	463b      	mov	r3, r7
    cbc4:	2203      	movs	r2, #3
    cbc6:	4639      	mov	r1, r7
    cbc8:	4638      	mov	r0, r7
    cbca:	f7f9 feef 	bl	69ac <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    cbce:	fba8 890b 	umull	r8, r9, r8, fp
    cbd2:	a347      	add	r3, pc, #284	; (adr r3, ccf0 <isr+0x6f0>)
    cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cbd8:	4640      	mov	r0, r8
    cbda:	4649      	mov	r1, r9
    cbdc:	f7f3 fb1a 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbe0:	f895 3020 	ldrb.w	r3, [r5, #32]
    cbe4:	68a4      	ldr	r4, [r4, #8]
    cbe6:	9506      	str	r5, [sp, #24]
    cbe8:	3307      	adds	r3, #7
    cbea:	b2db      	uxtb	r3, r3
    cbec:	930a      	str	r3, [sp, #40]	; 0x28
    cbee:	f240 439b 	movw	r3, #1179	; 0x49b
    cbf2:	9308      	str	r3, [sp, #32]
    cbf4:	4b46      	ldr	r3, [pc, #280]	; (cd10 <isr+0x710>)
    cbf6:	9307      	str	r3, [sp, #28]
    cbf8:	4b46      	ldr	r3, [pc, #280]	; (cd14 <isr+0x714>)
    cbfa:	9305      	str	r3, [sp, #20]
    cbfc:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    cbfe:	4a46      	ldr	r2, [pc, #280]	; (cd18 <isr+0x718>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc00:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    cc02:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc04:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    cc06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cc0a:	2307      	movs	r3, #7
    cc0c:	2100      	movs	r1, #0
    cc0e:	4343      	muls	r3, r0
    cc10:	fb02 3301 	mla	r3, r2, r1, r3
    cc14:	fba0 1202 	umull	r1, r2, r0, r2
    cc18:	441a      	add	r2, r3
    cc1a:	4608      	mov	r0, r1
    cc1c:	ebb8 0000 	subs.w	r0, r8, r0
    cc20:	4611      	mov	r1, r2
    cc22:	f04f 0300 	mov.w	r3, #0
    cc26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cc2a:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc2e:	2500      	movs	r5, #0
    cc30:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    cc32:	f7f3 faef 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cc36:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc38:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cc3a:	a32d      	add	r3, pc, #180	; (adr r3, ccf0 <isr+0x6f0>)
    cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc40:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cc44:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc48:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cc4a:	f7f3 fae3 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc4e:	eba4 040a 	sub.w	r4, r4, sl
    cc52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cc56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc58:	9000      	str	r0, [sp, #0]
    cc5a:	4623      	mov	r3, r4
		ticker_status =
    cc5c:	4629      	mov	r1, r5
    cc5e:	4628      	mov	r0, r5
    cc60:	f7f9 fe06 	bl	6870 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cc64:	f030 0302 	bics.w	r3, r0, #2
    cc68:	f47f ad22 	bne.w	c6b0 <isr+0xb0>
    cc6c:	e56e      	b.n	c74c <isr+0x14c>
	return (adv->rx_addr == ci->tx_addr) &&
    cc6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc70:	5ce2      	ldrb	r2, [r4, r3]
    cc72:	7833      	ldrb	r3, [r6, #0]
    cc74:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cc78:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    cc7c:	f47f adfd 	bne.w	c87a <isr+0x27a>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    cc80:	2206      	movs	r2, #6
    cc82:	4639      	mov	r1, r7
    cc84:	f105 0008 	add.w	r0, r5, #8
    cc88:	f7f4 ffc9 	bl	1c1e <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    cc8c:	fab0 f080 	clz	r0, r0
    cc90:	0940      	lsrs	r0, r0, #5
    cc92:	e63d      	b.n	c910 <isr+0x310>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    cc94:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cc98:	09db      	lsrs	r3, r3, #7
    cc9a:	d00d      	beq.n	ccb8 <isr+0x6b8>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    cc9c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    cca0:	09db      	lsrs	r3, r3, #7
    cca2:	f43f adea 	beq.w	c87a <isr+0x27a>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    cca6:	f1b9 0f00 	cmp.w	r9, #0
    ccaa:	d10d      	bne.n	ccc8 <isr+0x6c8>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ccac:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ccb0:	f002 fa6c 	bl	f18c <ctrl_irk_whitelisted>
    ccb4:	b940      	cbnz	r0, ccc8 <isr+0x6c8>
    ccb6:	e5e0      	b.n	c87a <isr+0x27a>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    ccb8:	aa10      	add	r2, sp, #64	; 0x40
    ccba:	1cb1      	adds	r1, r6, #2
    ccbc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ccc0:	f002 fbca 	bl	f458 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    ccc4:	2800      	cmp	r0, #0
    ccc6:	d0e9      	beq.n	cc9c <isr+0x69c>
	       isr_adv_ci_adva_check(adv, ci);
    ccc8:	4631      	mov	r1, r6
    ccca:	4628      	mov	r0, r5
    cccc:	f7fc f92e 	bl	8f2c <isr_adv_ci_adva_check>
    ccd0:	e61e      	b.n	c910 <isr+0x310>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    ccd2:	4619      	mov	r1, r3
    ccd4:	464a      	mov	r2, r9
    ccd6:	4658      	mov	r0, fp
    ccd8:	f7f4 ffe2 	bl	1ca0 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    ccdc:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ccde:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    cce0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cce4:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cce6:	464a      	mov	r2, r9
    cce8:	4651      	mov	r1, sl
    ccea:	e6c5      	b.n	ca78 <isr+0x478>
    ccec:	f3af 8000 	nop.w
    ccf0:	1afd498d 	.word	0x1afd498d
    ccf4:	00000007 	.word	0x00000007
    ccf8:	026259ff 	.word	0x026259ff
    ccfc:	01c9c37f 	.word	0x01c9c37f
    cd00:	00012a26 	.word	0x00012a26
    cd04:	000f4240 	.word	0x000f4240
    cd08:	3b9aca00 	.word	0x3b9aca00
    cd0c:	0000975d 	.word	0x0000975d
    cd10:	0000978d 	.word	0x0000978d
    cd14:	0000aea5 	.word	0x0000aea5
    cd18:	1afd498d 	.word	0x1afd498d
		rl_idx = devmatch_ok ?
    cd1c:	f1b9 0f00 	cmp.w	r9, #0
    cd20:	d01c      	beq.n	cd5c <isr+0x75c>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    cd22:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    cd26:	4641      	mov	r1, r8
    cd28:	f3c0 1000 	ubfx	r0, r0, #4, #1
    cd2c:	f002 f9f2 	bl	f114 <ctrl_rl_idx>
    cd30:	4680      	mov	r8, r0
		if (crc_ok &&
    cd32:	b147      	cbz	r7, cd46 <isr+0x746>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    cd34:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    cd38:	06da      	lsls	r2, r3, #27
    cd3a:	d519      	bpl.n	cd70 <isr+0x770>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    cd3c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    cd40:	06db      	lsls	r3, r3, #27
    cd42:	f100 81c9 	bmi.w	d0d8 <isr+0xad8>
			_radio.state = STATE_CLOSE;
    cd46:	2303      	movs	r3, #3
    cd48:	7523      	strb	r3, [r4, #20]
			radio_disable();
    cd4a:	f003 f89d 	bl	fe88 <radio_disable>
			_radio.scanner.state = 0;
    cd4e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    cd52:	f36f 0341 	bfc	r3, #1, #1
    cd56:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    cd5a:	e4f7      	b.n	c74c <isr+0x14c>
		rl_idx = devmatch_ok ?
    cd5c:	f1ba 0f00 	cmp.w	sl, #0
    cd60:	d003      	beq.n	cd6a <isr+0x76a>
    cd62:	4658      	mov	r0, fp
    cd64:	f002 f9f6 	bl	f154 <ctrl_rl_irk_idx>
    cd68:	e7e2      	b.n	cd30 <isr+0x730>
    cd6a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    cd6e:	e7e0      	b.n	cd32 <isr+0x732>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    cd70:	f1b9 0f00 	cmp.w	r9, #0
    cd74:	d005      	beq.n	cd82 <isr+0x782>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    cd76:	4641      	mov	r1, r8
    cd78:	4650      	mov	r0, sl
    cd7a:	f002 fb2f 	bl	f3dc <ctrl_rl_idx_allowed>
    cd7e:	2800      	cmp	r0, #0
    cd80:	d0dc      	beq.n	cd3c <isr+0x73c>
	bool dir_report = false;
    cd82:	2300      	movs	r3, #0
    cd84:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    cd88:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    cd8c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    cd90:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    cd94:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    cd98:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    cd9c:	2b00      	cmp	r3, #0
    cd9e:	f000 81c7 	beq.w	d130 <isr+0xb30>
    cda2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    cda6:	b133      	cbz	r3, cdb6 <isr+0x7b6>
				      (_radio.fc_req == _radio.fc_ack)) &&
    cda8:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    cdac:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    cdb0:	429a      	cmp	r2, r3
    cdb2:	f040 81bd 	bne.w	d130 <isr+0xb30>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    cdb6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    cdba:	f3c3 1000 	ubfx	r0, r3, #4, #1
    cdbe:	2800      	cmp	r0, #0
    cdc0:	f000 81a8 	beq.w	d114 <isr+0xb14>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    cdc4:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    cdc8:	f010 000f 	ands.w	r0, r0, #15
    cdcc:	f040 8221 	bne.w	d212 <isr+0xc12>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    cdd0:	f003 fa3e 	bl	10250 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    cdd4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    cdd8:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    cddc:	48c8      	ldr	r0, [pc, #800]	; (d100 <isr+0xb00>)
    cdde:	2207      	movs	r2, #7
    cde0:	fba3 0100 	umull	r0, r1, r3, r0
    cde4:	fb02 1103 	mla	r1, r2, r3, r1
    cde8:	a3c1      	add	r3, pc, #772	; (adr r3, d0f0 <isr+0xaf0>)
    cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
    cdee:	f7f3 fa11 	bl	214 <__aeabi_uldivmod>
    cdf2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    cdf6:	4287      	cmp	r7, r0
    cdf8:	f080 819a 	bcs.w	d130 <isr+0xb30>
			node_rx = packet_rx_reserve_get(4);
    cdfc:	2004      	movs	r0, #4
    cdfe:	f7fb fb4f 	bl	84a0 <packet_rx_reserve_get>
		if (node_rx == 0) {
    ce02:	4607      	mov	r7, r0
    ce04:	2800      	cmp	r0, #0
    ce06:	d09e      	beq.n	cd46 <isr+0x746>
		_radio.state = STATE_STOP;
    ce08:	2304      	movs	r3, #4
    ce0a:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    ce0c:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    ce0e:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    ce12:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ce16:	f003 f88d 	bl	ff34 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    ce1a:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    ce1c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    ce20:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    ce24:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ce26:	f899 3008 	ldrb.w	r3, [r9, #8]
    ce2a:	7802      	ldrb	r2, [r0, #0]
    ce2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ce30:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    ce34:	2322      	movs	r3, #34	; 0x22
    ce36:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ce38:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ce3a:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    ce3c:	4640      	mov	r0, r8
    ce3e:	f002 f94b 	bl	f0d8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ce42:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    ce46:	4601      	mov	r1, r0
    ce48:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ce4a:	f013 0f01 	tst.w	r3, #1
    ce4e:	f810 3b02 	ldrb.w	r3, [r0], #2
    ce52:	f000 81e8 	beq.w	d226 <isr+0xc26>
    ce56:	2900      	cmp	r1, #0
    ce58:	f000 81e5 	beq.w	d226 <isr+0xc26>
			pdu_adv_tx->tx_addr = 1;
    ce5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ce60:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ce62:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ce64:	f7f4 fef0 	bl	1c48 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    ce68:	f105 0308 	add.w	r3, r5, #8
    ce6c:	4618      	mov	r0, r3
    ce6e:	2206      	movs	r2, #6
    ce70:	f109 010a 	add.w	r1, r9, #10
    ce74:	930a      	str	r3, [sp, #40]	; 0x28
    ce76:	f7f4 fee7 	bl	1c48 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    ce7a:	2204      	movs	r2, #4
    ce7c:	f106 0110 	add.w	r1, r6, #16
    ce80:	f105 000e 	add.w	r0, r5, #14
    ce84:	f7f4 fee0 	bl	1c48 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    ce88:	2203      	movs	r2, #3
    ce8a:	f106 0114 	add.w	r1, r6, #20
    ce8e:	f105 0012 	add.w	r0, r5, #18
    ce92:	f7f4 fed9 	bl	1c48 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    ce96:	2301      	movs	r3, #1
    ce98:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    ce9a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    ce9e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    cea2:	4353      	muls	r3, r2
    cea4:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    cea6:	f003 f9d3 	bl	10250 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    ceaa:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    ceac:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    ceb0:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ceb2:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    ceb6:	bfd8      	it	le
    ceb8:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    cebc:	f1bb 0f00 	cmp.w	fp, #0
    cec0:	f040 81bc 	bne.w	d23c <isr+0xc3c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    cec4:	f885 b016 	strb.w	fp, [r5, #22]
    cec8:	f885 b017 	strb.w	fp, [r5, #23]
    cecc:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    cece:	2100      	movs	r1, #0
    ced0:	4608      	mov	r0, r1
    ced2:	f002 ffbf 	bl	fe54 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ced6:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ced8:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    cedc:	4608      	mov	r0, r1
    cede:	f002 ffbe 	bl	fe5e <radio_tx_chain_delay_get>
    cee2:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    cee6:	f100 031e 	add.w	r3, r0, #30
    ceea:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    ceec:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    cef0:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    cef2:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    cef6:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    cef8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    cefc:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    cefe:	f106 0117 	add.w	r1, r6, #23
    cf02:	2205      	movs	r2, #5
    cf04:	f105 001e 	add.w	r0, r5, #30
    cf08:	f7f4 fe9e 	bl	1c48 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    cf0c:	7fb2      	ldrb	r2, [r6, #30]
    cf0e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    cf12:	f362 0304 	bfi	r3, r2, #0, #5
    cf16:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    cf1a:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    cf1e:	f362 1347 	bfi	r3, r2, #5, #3
    cf22:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    cf26:	f003 f81f 	bl	ff68 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    cf2a:	4628      	mov	r0, r5
    cf2c:	f002 ff8c 	bl	fe48 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    cf30:	f002 ffc8 	bl	fec4 <radio_is_ready>
    cf34:	4683      	mov	fp, r0
    cf36:	2800      	cmp	r0, #0
    cf38:	f47f abba 	bne.w	c6b0 <isr+0xb0>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cf3c:	f44f 72aa 	mov.w	r2, #340	; 0x154
    cf40:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    cf44:	4630      	mov	r0, r6
    cf46:	f7f8 fe56 	bl	5bf6 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    cf4a:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cf4c:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cf4e:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    cf52:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    cf56:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cf5a:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    cf5c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    cf60:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    cf62:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cf66:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    cf68:	2206      	movs	r2, #6
    cf6a:	f107 001b 	add.w	r0, r7, #27
    cf6e:	f7f4 fe6b 	bl	1c48 <memcpy>
    cf72:	f107 0b0e 	add.w	fp, r7, #14
    cf76:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    cf7a:	f1ba 0f00 	cmp.w	sl, #0
    cf7e:	f000 816d 	beq.w	d25c <isr+0xc5c>
    cf82:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    cf86:	f000 8169 	beq.w	d25c <isr+0xc5c>
			ll_rl_id_addr_get(rl_idx,
    cf8a:	465a      	mov	r2, fp
    cf8c:	f107 010d 	add.w	r1, r7, #13
    cf90:	4640      	mov	r0, r8
    cf92:	930d      	str	r3, [sp, #52]	; 0x34
    cf94:	f002 fa40 	bl	f418 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    cf98:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    cf9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf9c:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    cf9e:	3202      	adds	r2, #2
    cfa0:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    cfa2:	4618      	mov	r0, r3
    cfa4:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cfa6:	f7f4 fe4f 	bl	1c48 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    cfaa:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    cfae:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    cfb2:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    cfb6:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    cfba:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    cfbe:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    cfc2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    cfc6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    cfca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    cfce:	8c30      	ldrh	r0, [r6, #32]
    cfd0:	f7fc f81c 	bl	900c <rx_fc_lock>
		packet_rx_enqueue();
    cfd4:	f7fc f8cc 	bl	9170 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    cfd8:	2003      	movs	r0, #3
    cfda:	f7fb fa61 	bl	84a0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    cfde:	2800      	cmp	r0, #0
    cfe0:	f43f ab66 	beq.w	c6b0 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    cfe4:	8c33      	ldrh	r3, [r6, #32]
    cfe6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    cfe8:	230b      	movs	r3, #11
    cfea:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    cfec:	f899 3008 	ldrb.w	r3, [r9, #8]
    cff0:	f013 0320 	ands.w	r3, r3, #32
    cff4:	d00e      	beq.n	d014 <isr+0xa14>
					((u16_t)conn->access_addr[1] << 8) |
    cff6:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    cff8:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    cffa:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    cffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    d000:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    d002:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    d006:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    d008:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    d00a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    d00e:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    d010:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    d012:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    d014:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    d016:	f7fc f8ab 	bl	9170 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    d01a:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    d01c:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    d020:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    d022:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    d026:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    d028:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d02a:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    d02e:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    d030:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d032:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    d036:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d038:	4629      	mov	r1, r5
    d03a:	9300      	str	r3, [sp, #0]
    d03c:	4628      	mov	r0, r5
    d03e:	4b31      	ldr	r3, [pc, #196]	; (d104 <isr+0xb04>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d040:	f8df a0cc 	ldr.w	sl, [pc, #204]	; d110 <isr+0xb10>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    d044:	bf38      	it	cc
    d046:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d048:	f7f9 fcb0 	bl	69ac <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    d04c:	f240 6139 	movw	r1, #1593	; 0x639
    d050:	f7fc fb6c 	bl	972c <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d054:	462b      	mov	r3, r5
    d056:	2204      	movs	r2, #4
    d058:	4629      	mov	r1, r5
    d05a:	9500      	str	r5, [sp, #0]
    d05c:	4628      	mov	r0, r5
    d05e:	f7f9 fca5 	bl	69ac <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d064:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d068:	68a3      	ldr	r3, [r4, #8]
    d06a:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    d06e:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d070:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    d074:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    d078:	9308      	str	r3, [sp, #32]
    d07a:	4b23      	ldr	r3, [pc, #140]	; (d108 <isr+0xb08>)
    d07c:	9307      	str	r3, [sp, #28]
    d07e:	4b23      	ldr	r3, [pc, #140]	; (d10c <isr+0xb0c>)
    d080:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d082:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    d084:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d086:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d088:	4640      	mov	r0, r8
    d08a:	a31b      	add	r3, pc, #108	; (adr r3, d0f8 <isr+0xaf8>)
    d08c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d090:	4649      	mov	r1, r9
		ticker_status =
    d092:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d094:	f7f3 f8be 	bl	214 <__aeabi_uldivmod>
    d098:	4610      	mov	r0, r2
    d09a:	4619      	mov	r1, r3
    d09c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d0a0:	2300      	movs	r3, #0
    d0a2:	f7f3 f8b7 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d0a6:	a314      	add	r3, pc, #80	; (adr r3, d0f8 <isr+0xaf8>)
    d0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d0ac:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d0ae:	4649      	mov	r1, r9
    d0b0:	4640      	mov	r0, r8
    d0b2:	f7f3 f8af 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    d0b6:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d0b8:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    d0ba:	a30f      	add	r3, pc, #60	; (adr r3, d0f8 <isr+0xaf8>)
    d0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0c0:	fba1 010a 	umull	r0, r1, r1, sl
    d0c4:	f7f3 f8a6 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d0c8:	3407      	adds	r4, #7
		ticker_status =
    d0ca:	b2e4      	uxtb	r4, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d0cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    d0d0:	9000      	str	r0, [sp, #0]
    d0d2:	465b      	mov	r3, fp
    d0d4:	4622      	mov	r2, r4
    d0d6:	e5c1      	b.n	cc5c <isr+0x65c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    d0d8:	f1b9 0f00 	cmp.w	r9, #0
    d0dc:	f47f ae51 	bne.w	cd82 <isr+0x782>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    d0e0:	4640      	mov	r0, r8
    d0e2:	f002 f853 	bl	f18c <ctrl_irk_whitelisted>
		if (crc_ok &&
    d0e6:	2800      	cmp	r0, #0
    d0e8:	f43f ae2d 	beq.w	cd46 <isr+0x746>
    d0ec:	e649      	b.n	cd82 <isr+0x782>
    d0ee:	bf00      	nop
    d0f0:	3b9aca00 	.word	0x3b9aca00
    d0f4:	00000000 	.word	0x00000000
    d0f8:	1afd498d 	.word	0x1afd498d
    d0fc:	00000007 	.word	0x00000007
    d100:	1afd498d 	.word	0x1afd498d
    d104:	0000972d 	.word	0x0000972d
    d108:	0000978d 	.word	0x0000978d
    d10c:	0000aea1 	.word	0x0000aea1
    d110:	3b9aca00 	.word	0x3b9aca00
	if (rl_idx != FILTER_IDX_NONE) {
    d114:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    d118:	d069      	beq.n	d1ee <isr+0xbee>
		return (rl_idx == _radio.scanner.rl_idx);
    d11a:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    d11e:	eba0 0e08 	sub.w	lr, r0, r8
    d122:	f1de 0000 	rsbs	r0, lr, #0
    d126:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    d12a:	2800      	cmp	r0, #0
    d12c:	f47f ae4a 	bne.w	cdc4 <isr+0x7c4>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d130:	f899 0008 	ldrb.w	r0, [r9, #8]
    d134:	f010 000f 	ands.w	r0, r0, #15
    d138:	d002      	beq.n	d140 <isr+0xb40>
    d13a:	2806      	cmp	r0, #6
    d13c:	f040 80ba 	bne.w	d2b4 <isr+0xcb4>
		 (_radio.scanner.type != 0) &&
    d140:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    d144:	071f      	lsls	r7, r3, #28
    d146:	f140 809f 	bpl.w	d288 <isr+0xc88>
		 (_radio.scanner.type != 0) &&
    d14a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    d14e:	2a00      	cmp	r2, #0
    d150:	f040 809a 	bne.w	d288 <isr+0xc88>
		err = isr_rx_scan_report(rssi_ready,
    d154:	f1ba 0f00 	cmp.w	sl, #0
    d158:	bf14      	ite	ne
    d15a:	4641      	movne	r1, r8
    d15c:	21ff      	moveq	r1, #255	; 0xff
    d15e:	4628      	mov	r0, r5
    d160:	f7fc f836 	bl	91d0 <isr_rx_scan_report>
		if (err) {
    d164:	2800      	cmp	r0, #0
    d166:	f47f adee 	bne.w	cd46 <isr+0x746>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    d16a:	f002 fee3 	bl	ff34 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    d16e:	7803      	ldrb	r3, [r0, #0]
    d170:	2203      	movs	r2, #3
    d172:	f362 0303 	bfi	r3, r2, #0, #4
    d176:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d178:	f899 3008 	ldrb.w	r3, [r9, #8]
    d17c:	7802      	ldrb	r2, [r0, #0]
    d17e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d182:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    d186:	230c      	movs	r3, #12
    d188:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    d18a:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d18c:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    d18e:	4640      	mov	r0, r8
    d190:	f001 ffa2 	bl	f0d8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    d194:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    d198:	4601      	mov	r1, r0
    d19a:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    d19c:	f013 0f01 	tst.w	r3, #1
    d1a0:	f810 3b02 	ldrb.w	r3, [r0], #2
    d1a4:	d067      	beq.n	d276 <isr+0xc76>
    d1a6:	2900      	cmp	r1, #0
    d1a8:	d065      	beq.n	d276 <isr+0xc76>
			pdu_adv_tx->tx_addr = 1;
    d1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d1ae:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d1b0:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d1b2:	f7f4 fd49 	bl	1c48 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    d1b6:	2206      	movs	r2, #6
    d1b8:	f109 010a 	add.w	r1, r9, #10
    d1bc:	f105 0008 	add.w	r0, r5, #8
    d1c0:	f7f4 fd42 	bl	1c48 <memcpy>
		_radio.scanner.state = 1;
    d1c4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    d1c8:	f043 0302 	orr.w	r3, r3, #2
    d1cc:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    d1d0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    d1d2:	2302      	movs	r3, #2
    d1d4:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    d1d6:	f002 ff4d 	bl	10074 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    d1da:	2000      	movs	r0, #0
    d1dc:	f002 feae 	bl	ff3c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    d1e0:	4628      	mov	r0, r5
    d1e2:	f002 fe31 	bl	fe48 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    d1e6:	f003 f821 	bl	1022c <radio_tmr_end_capture>
    d1ea:	f7ff bb6e 	b.w	c8ca <isr+0x2ca>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    d1ee:	f899 2008 	ldrb.w	r2, [r9, #8]
    d1f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d1f6:	f3c2 1280 	ubfx	r2, r2, #6, #1
    d1fa:	4293      	cmp	r3, r2
    d1fc:	d195      	bne.n	d12a <isr+0xb2a>
		(memcmp(&_radio.scanner.adv_addr[0],
    d1fe:	2206      	movs	r2, #6
    d200:	f109 010a 	add.w	r1, r9, #10
    d204:	48c9      	ldr	r0, [pc, #804]	; (d52c <isr+0xf2c>)
    d206:	f7f4 fd0a 	bl	1c1e <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    d20a:	fab0 f080 	clz	r0, r0
    d20e:	0940      	lsrs	r0, r0, #5
    d210:	e78b      	b.n	d12a <isr+0xb2a>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    d212:	2801      	cmp	r0, #1
    d214:	d191      	bne.n	d13a <isr+0xb3a>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    d216:	2300      	movs	r3, #0
    d218:	4642      	mov	r2, r8
    d21a:	4631      	mov	r1, r6
    d21c:	f7fb feaa 	bl	8f74 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    d220:	2800      	cmp	r0, #0
    d222:	d085      	beq.n	d130 <isr+0xb30>
    d224:	e5d4      	b.n	cdd0 <isr+0x7d0>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d226:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    d22a:	49c1      	ldr	r1, [pc, #772]	; (d530 <isr+0xf30>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d22c:	09d2      	lsrs	r2, r2, #7
    d22e:	f362 1386 	bfi	r3, r2, #6, #1
    d232:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    d234:	2206      	movs	r2, #6
    d236:	e615      	b.n	ce64 <isr+0x864>
				conn_space_us += conn_interval_us;
    d238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d23a:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    d23c:	f1bb 0f00 	cmp.w	fp, #0
    d240:	dbfa      	blt.n	d238 <isr+0xc38>
    d242:	459b      	cmp	fp, r3
    d244:	d3f8      	bcc.n	d238 <isr+0xc38>
				(conn_space_us - conn_offset_us) / 1250;
    d246:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    d24a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d24e:	fbb3 f3f2 	udiv	r3, r3, r2
    d252:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    d254:	7d6b      	ldrb	r3, [r5, #21]
    d256:	3301      	adds	r3, #1
    d258:	756b      	strb	r3, [r5, #21]
    d25a:	e638      	b.n	cece <isr+0x8ce>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    d25c:	2206      	movs	r2, #6
    d25e:	2100      	movs	r1, #0
    d260:	4618      	mov	r0, r3
    d262:	f7f4 fd1d 	bl	1ca0 <memset>
				pdu_adv_tx->rx_addr;
    d266:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d268:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    d26a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    d26e:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d270:	2206      	movs	r2, #6
    d272:	4658      	mov	r0, fp
    d274:	e697      	b.n	cfa6 <isr+0x9a6>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d276:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d27a:	49ad      	ldr	r1, [pc, #692]	; (d530 <isr+0xf30>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d27c:	09d2      	lsrs	r2, r2, #7
    d27e:	f362 1386 	bfi	r3, r2, #6, #1
    d282:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d284:	2206      	movs	r2, #6
    d286:	e794      	b.n	d1b2 <isr+0xbb2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d288:	b9a0      	cbnz	r0, d2b4 <isr+0xcb4>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    d28a:	f899 3009 	ldrb.w	r3, [r9, #9]
    d28e:	2b00      	cmp	r3, #0
    d290:	f43f ad59 	beq.w	cd46 <isr+0x746>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    d294:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    d298:	2b00      	cmp	r3, #0
    d29a:	f47f ad54 	bne.w	cd46 <isr+0x746>
		err = isr_rx_scan_report(rssi_ready,
    d29e:	f1ba 0f00 	cmp.w	sl, #0
    d2a2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    d2a6:	bf14      	ite	ne
    d2a8:	4641      	movne	r1, r8
    d2aa:	21ff      	moveq	r1, #255	; 0xff
    d2ac:	4628      	mov	r0, r5
    d2ae:	f7fb ff8f 	bl	91d0 <isr_rx_scan_report>
    d2b2:	e548      	b.n	cd46 <isr+0x746>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d2b4:	2801      	cmp	r0, #1
    d2b6:	d00e      	beq.n	d2d6 <isr+0xcd6>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    d2b8:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    d2bc:	f003 020b 	and.w	r2, r3, #11
    d2c0:	2a02      	cmp	r2, #2
    d2c2:	d0e2      	beq.n	d28a <isr+0xc8a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    d2c4:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    d2c8:	2b07      	cmp	r3, #7
    d2ca:	d10d      	bne.n	d2e8 <isr+0xce8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    d2cc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    d2d0:	0758      	lsls	r0, r3, #29
    d2d2:	d1da      	bne.n	d28a <isr+0xc8a>
    d2d4:	e537      	b.n	cd46 <isr+0x746>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    d2d6:	ab10      	add	r3, sp, #64	; 0x40
    d2d8:	4642      	mov	r2, r8
    d2da:	4631      	mov	r1, r6
    d2dc:	2000      	movs	r0, #0
    d2de:	f7fb fe49 	bl	8f74 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    d2e2:	2800      	cmp	r0, #0
    d2e4:	d1d1      	bne.n	d28a <isr+0xc8a>
    d2e6:	e7e7      	b.n	d2b8 <isr+0xcb8>
		   (_radio.scanner.phy)) ||
    d2e8:	2b04      	cmp	r3, #4
    d2ea:	f47f ad2c 	bne.w	cd46 <isr+0x746>
		   (_radio.scanner.state != 0) &&
    d2ee:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    d2f2:	0799      	lsls	r1, r3, #30
    d2f4:	f57f ad27 	bpl.w	cd46 <isr+0x746>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    d2f8:	f002 fe1c 	bl	ff34 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    d2fc:	f899 3008 	ldrb.w	r3, [r9, #8]
    d300:	7802      	ldrb	r2, [r0, #0]
    d302:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d306:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    d30a:	f47f ad1c 	bne.w	cd46 <isr+0x746>
		(memcmp(&sreq->scan_req.adv_addr[0],
    d30e:	2206      	movs	r2, #6
    d310:	f109 010a 	add.w	r1, r9, #10
    d314:	3008      	adds	r0, #8
    d316:	f7f4 fc82 	bl	1c1e <memcmp>
		   (_radio.scanner.state != 0) &&
    d31a:	2800      	cmp	r0, #0
    d31c:	d0b5      	beq.n	d28a <isr+0xc8a>
    d31e:	e512      	b.n	cd46 <isr+0x746>
	_radio.packet_counter++;
    d320:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d324:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    d328:	3301      	adds	r3, #1
    d32a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    d32e:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d330:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    d334:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d338:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d33c:	2301      	movs	r3, #1
    d33e:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    d342:	2f00      	cmp	r7, #0
    d344:	f000 82a2 	beq.w	d88c <isr+0x128c>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    d348:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    d34c:	f898 1008 	ldrb.w	r1, [r8, #8]
    d350:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d354:	f3c1 0180 	ubfx	r1, r1, #2, #1
    d358:	f003 0201 	and.w	r2, r3, #1
    d35c:	4291      	cmp	r1, r2
    d35e:	f000 8187 	beq.w	d670 <isr+0x1070>
		_radio.conn_curr->sn++;
    d362:	f082 0201 	eor.w	r2, r2, #1
    d366:	f362 0300 	bfi	r3, r2, #0, #1
    d36a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    d36e:	7ce3      	ldrb	r3, [r4, #19]
    d370:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    d372:	bf02      	ittt	eq
    d374:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    d378:	f043 0301 	orreq.w	r3, r3, #1
    d37c:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    d380:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d384:	061a      	lsls	r2, r3, #24
    d386:	f100 816e 	bmi.w	d666 <isr+0x1066>
			node_tx = _radio.conn_curr->pkt_tx_head;
    d38a:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    d38e:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    d392:	1d30      	adds	r0, r6, #4
    d394:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    d398:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    d39c:	f1b9 0f00 	cmp.w	r9, #0
    d3a0:	f000 808e 	beq.w	d4c0 <isr+0xec0>
				if (_radio.conn_curr->enc_tx) {
    d3a4:	069b      	lsls	r3, r3, #26
    d3a6:	d50b      	bpl.n	d3c0 <isr+0xdc0>
					_radio.conn_curr->ccm_tx.counter++;
    d3a8:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    d3ac:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    d3b0:	f11b 0201 	adds.w	r2, fp, #1
    d3b4:	f14c 0300 	adc.w	r3, ip, #0
    d3b8:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    d3bc:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    d3c0:	5c43      	ldrb	r3, [r0, r1]
    d3c2:	f003 0303 	and.w	r3, r3, #3
    d3c6:	2b03      	cmp	r3, #3
    d3c8:	d17a      	bne.n	d4c0 <isr+0xec0>
	switch (pdu_data_tx->llctrl.opcode) {
    d3ca:	f89a 3003 	ldrb.w	r3, [sl, #3]
    d3ce:	3b02      	subs	r3, #2
    d3d0:	2b16      	cmp	r3, #22
    d3d2:	d875      	bhi.n	d4c0 <isr+0xec0>
    d3d4:	e8df f013 	tbh	[pc, r3, lsl #1]
    d3d8:	00580017 	.word	0x00580017
    d3dc:	007400b0 	.word	0x007400b0
    d3e0:	00740074 	.word	0x00740074
    d3e4:	00740074 	.word	0x00740074
    d3e8:	00810076 	.word	0x00810076
    d3ec:	00b70074 	.word	0x00b70074
    d3f0:	00740074 	.word	0x00740074
    d3f4:	00740074 	.word	0x00740074
    d3f8:	00740074 	.word	0x00740074
    d3fc:	007400c1 	.word	0x007400c1
    d400:	00e000d9 	.word	0x00e000d9
    d404:	010b      	.short	0x010b
		_radio.state = STATE_CLOSE;
    d406:	2303      	movs	r3, #3
    d408:	7523      	strb	r3, [r4, #20]
		radio_disable();
    d40a:	f002 fd3d 	bl	fe88 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    d40e:	f002 fd59 	bl	fec4 <radio_is_ready>
    d412:	2800      	cmp	r0, #0
    d414:	f47f a94c 	bne.w	c6b0 <isr+0xb0>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    d418:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    d41c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d420:	2913      	cmp	r1, #19
    d422:	bf08      	it	eq
    d424:	2116      	moveq	r1, #22
    d426:	f7fb fe7b 	bl	9120 <terminate_ind_rx_enqueue>
		terminate = 1;
    d42a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d42c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d430:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    d434:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    d436:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d43a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    d43e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d440:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    d444:	d11e      	bne.n	d484 <isr+0xe84>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d446:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    d44a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    d44e:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d450:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    d452:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    d456:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d45a:	f040 80cf 	bne.w	d5fc <isr+0xffc>
		if (node_tx) {
    d45e:	b18e      	cbz	r6, d484 <isr+0xe84>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    d460:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    d464:	f8d3 e000 	ldr.w	lr, [r3]
    d468:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    d46c:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    d46e:	bf06      	itte	eq
    d470:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    d474:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    d478:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d47c:	492d      	ldr	r1, [pc, #180]	; (d534 <isr+0xf34>)
    d47e:	4630      	mov	r0, r6
    d480:	f7f8 fb9b 	bl	5bba <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    d484:	2600      	movs	r6, #0
    d486:	e0c2      	b.n	d60e <isr+0x100e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d488:	2208      	movs	r2, #8
    d48a:	f10a 010e 	add.w	r1, sl, #14
    d48e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    d492:	f7f4 fbd9 	bl	1c48 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d496:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d49a:	2204      	movs	r2, #4
    d49c:	f10a 0116 	add.w	r1, sl, #22
    d4a0:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d4a4:	f7f4 fbd0 	bl	1c48 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    d4a8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d4ac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d4b0:	f042 0208 	orr.w	r2, r2, #8
    d4b4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d4b8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d4bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    d4c0:	2500      	movs	r5, #0
    d4c2:	e7b3      	b.n	d42c <isr+0xe2c>
		_radio.conn_curr->pause_tx = 1;
    d4c4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    d4c8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    d4cc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d4d0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    d4d4:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    d4d8:	e7f2      	b.n	d4c0 <isr+0xec0>
		if (_radio.role == ROLE_MASTER) {
    d4da:	f894 a013 	ldrb.w	sl, [r4, #19]
    d4de:	fa5f fa8a 	uxtb.w	sl, sl
    d4e2:	f1ba 0f04 	cmp.w	sl, #4
    d4e6:	d127      	bne.n	d538 <isr+0xf38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d4e8:	7933      	ldrb	r3, [r6, #4]
    d4ea:	f043 0303 	orr.w	r3, r3, #3
    d4ee:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    d4f0:	2317      	movs	r3, #23
    d4f2:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d4f4:	2303      	movs	r3, #3
    d4f6:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    d4f8:	2208      	movs	r2, #8
    d4fa:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    d4fe:	3004      	adds	r0, #4
    d500:	f7f4 fba2 	bl	1c48 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    d504:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    d508:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    d50a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    d50e:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    d510:	f106 0112 	add.w	r1, r6, #18
    d514:	2208      	movs	r2, #8
    d516:	6860      	ldr	r0, [r4, #4]
    d518:	f003 fc66 	bl	10de8 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    d51c:	f106 011a 	add.w	r1, r6, #26
    d520:	4652      	mov	r2, sl
    d522:	6860      	ldr	r0, [r4, #4]
    d524:	f003 fc60 	bl	10de8 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    d528:	2600      	movs	r6, #0
    d52a:	e7c9      	b.n	d4c0 <isr+0xec0>
    d52c:	2000074a 	.word	0x2000074a
    d530:	20000744 	.word	0x20000744
    d534:	200007bc 	.word	0x200007bc
			_radio.conn_curr->pause_tx = 1;
    d538:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d53c:	f043 0308 	orr.w	r3, r3, #8
    d540:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    d544:	e7bc      	b.n	d4c0 <isr+0xec0>
		_radio.conn_curr->pause_rx = 0;
    d546:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d54a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d54e:	f36f 03c3 	bfc	r3, #3, #1
    d552:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d556:	2300      	movs	r3, #0
    d558:	e7bc      	b.n	d4d4 <isr+0xed4>
		if ((_radio.conn_curr->llcp_length.req !=
    d55a:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    d55e:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    d562:	429a      	cmp	r2, r3
    d564:	d0ac      	beq.n	d4c0 <isr+0xec0>
		    (_radio.conn_curr->llcp_length.state ==
    d566:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    d56a:	f003 0203 	and.w	r2, r3, #3
    d56e:	2a01      	cmp	r2, #1
    d570:	d1a6      	bne.n	d4c0 <isr+0xec0>
			_radio.conn_curr->pause_tx = 1;
    d572:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    d576:	f042 0208 	orr.w	r2, r2, #8
    d57a:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    d57e:	2202      	movs	r2, #2
    d580:	f362 0301 	bfi	r3, r2, #0, #2
    d584:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    d588:	e79a      	b.n	d4c0 <isr+0xec0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    d58a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    d58e:	2202      	movs	r2, #2
    d590:	f362 0301 	bfi	r3, r2, #0, #2
    d594:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    d598:	7ce3      	ldrb	r3, [r4, #19]
    d59a:	2b03      	cmp	r3, #3
    d59c:	d190      	bne.n	d4c0 <isr+0xec0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    d59e:	2301      	movs	r3, #1
    d5a0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    d5a4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    d5a8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d5ac:	2202      	movs	r2, #2
    d5ae:	2304      	movs	r3, #4
    d5b0:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    d5b4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    d5b8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    d5bc:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    d5c0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    d5c4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    d5c8:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    d5cc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d5d0:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    d5d4:	f003 0307 	and.w	r3, r3, #7
    d5d8:	aa12      	add	r2, sp, #72	; 0x48
    d5da:	4413      	add	r3, r2
    d5dc:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    d5e0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    d5e4:	f363 0202 	bfi	r2, r3, #0, #3
    d5e8:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    d5ec:	e768      	b.n	d4c0 <isr+0xec0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    d5ee:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    d5f2:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    d5f6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d5fa:	e7f3      	b.n	d5e4 <isr+0xfe4>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    d5fc:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    d600:	4293      	cmp	r3, r2
    d602:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    d604:	bf08      	it	eq
    d606:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    d60a:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    d60e:	b37d      	cbz	r5, d670 <isr+0x1070>
		connection_release(_radio.conn_curr);
    d610:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d614:	f7fb ff7a 	bl	950c <connection_release>
		_radio.conn_curr = NULL;
    d618:	2300      	movs	r3, #0
    d61a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    d61e:	f002 fdf9 	bl	10214 <radio_tmr_aa_restore>
    d622:	b918      	cbnz	r0, d62c <isr+0x102c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    d624:	f002 fdea 	bl	101fc <radio_tmr_aa_get>
    d628:	f002 fdee 	bl	10208 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    d62c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d630:	2b00      	cmp	r3, #0
    d632:	f43f a88b 	beq.w	c74c <isr+0x14c>
	if (tx_release) {
    d636:	b11e      	cbz	r6, d640 <isr+0x1040>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    d638:	4631      	mov	r1, r6
    d63a:	8c18      	ldrh	r0, [r3, #32]
    d63c:	f7fb fef4 	bl	9428 <pdu_node_tx_release>
	if (rx_enqueue) {
    d640:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    d644:	2b00      	cmp	r3, #0
    d646:	f43f a881 	beq.w	c74c <isr+0x14c>
		rx_fc_lock(_radio.conn_curr->handle);
    d64a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d64e:	8c18      	ldrh	r0, [r3, #32]
    d650:	f7fb fcdc 	bl	900c <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    d654:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d658:	8c1b      	ldrh	r3, [r3, #32]
    d65a:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    d65e:	f7fb fd87 	bl	9170 <packet_rx_enqueue>
    d662:	f7ff b873 	b.w	c74c <isr+0x14c>
			_radio.conn_curr->empty = 0;
    d666:	f36f 13c7 	bfc	r3, #7, #1
    d66a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    d66e:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    d670:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d674:	f898 2008 	ldrb.w	r2, [r8, #8]
    d678:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    d67c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d680:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d684:	429a      	cmp	r2, r3
    d686:	f040 80d1 	bne.w	d82c <isr+0x122c>
	    (packet_rx_reserve_get(3) != 0) &&
    d68a:	2003      	movs	r0, #3
    d68c:	f7fa ff08 	bl	84a0 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    d690:	2800      	cmp	r0, #0
    d692:	f000 80cb 	beq.w	d82c <isr+0x122c>
	    (packet_rx_reserve_get(3) != 0) &&
    d696:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    d69a:	b393      	cbz	r3, d702 <isr+0x1102>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    d69c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    d6a0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    d6a4:	4293      	cmp	r3, r2
    d6a6:	d105      	bne.n	d6b4 <isr+0x10b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
    d6a8:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    d6ac:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    d6b0:	4291      	cmp	r1, r2
    d6b2:	d026      	beq.n	d702 <isr+0x1102>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    d6b4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    d6b8:	4293      	cmp	r3, r2
    d6ba:	f000 80b7 	beq.w	d82c <isr+0x122c>
	      (_radio.fc_req != _radio.fc_ack) &&
    d6be:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    d6c2:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    d6c6:	429a      	cmp	r2, r3
    d6c8:	f000 80b0 	beq.w	d82c <isr+0x122c>
		(((_radio.fc_req == 0) &&
    d6cc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    d6d0:	b933      	cbnz	r3, d6e0 <isr+0x10e0>
		   _radio.conn_curr->handle)) ||
    d6d2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    d6d6:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    d6da:	8c1b      	ldrh	r3, [r3, #32]
    d6dc:	429a      	cmp	r2, r3
    d6de:	d010      	beq.n	d702 <isr+0x1102>
		 ((_radio.fc_req != 0) &&
    d6e0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    d6e4:	2b00      	cmp	r3, #0
    d6e6:	f000 80a1 	beq.w	d82c <isr+0x122c>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d6ea:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    d6ee:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d6f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    d6f6:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    d6fa:	8c0b      	ldrh	r3, [r1, #32]
    d6fc:	429a      	cmp	r2, r3
    d6fe:	f040 8095 	bne.w	d82c <isr+0x122c>
		if (pdu_data_rx->len != 0) {
    d702:	f898 5009 	ldrb.w	r5, [r8, #9]
    d706:	2d00      	cmp	r5, #0
    d708:	f000 8099 	beq.w	d83e <isr+0x123e>
			if (_radio.conn_curr->enc_rx) {
    d70c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d710:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    d714:	f015 0510 	ands.w	r5, r5, #16
    d718:	d005      	beq.n	d726 <isr+0x1126>
				done = radio_ccm_is_done();
    d71a:	f002 fe07 	bl	1032c <radio_ccm_is_done>
				LL_ASSERT(done);
    d71e:	2800      	cmp	r0, #0
    d720:	f43e afc6 	beq.w	c6b0 <isr+0xb0>
				ccm_rx_increment = 1;
    d724:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    d726:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d72a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    d72e:	06d9      	lsls	r1, r3, #27
    d730:	d42c      	bmi.n	d78c <isr+0x118c>
			    (_radio.conn_curr->pause_rx &&
    d732:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d736:	f898 3008 	ldrb.w	r3, [r8, #8]
    d73a:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    d73e:	f012 0f04 	tst.w	r2, #4
    d742:	d13d      	bne.n	d7c0 <isr+0x11c0>
			_radio.conn_curr->appto_expire = 0;
    d744:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    d746:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    d74a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    d74e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    d752:	d004      	beq.n	d75e <isr+0x115e>
    d754:	2b02      	cmp	r3, #2
    d756:	d862      	bhi.n	d81e <isr+0x121e>
				*rx_enqueue = 1;
    d758:	2301      	movs	r3, #1
    d75a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    d75e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d762:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d766:	f082 0202 	eor.w	r2, r2, #2
    d76a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    d76e:	2d00      	cmp	r5, #0
    d770:	d05c      	beq.n	d82c <isr+0x122c>
				_radio.conn_curr->ccm_rx.counter++;
    d772:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    d776:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    d77a:	f119 0001 	adds.w	r0, r9, #1
    d77e:	f14a 0100 	adc.w	r1, sl, #0
    d782:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    d786:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    d78a:	e04f      	b.n	d82c <isr+0x122c>
			     !radio_ccm_mic_is_valid()) ||
    d78c:	f002 fdec 	bl	10368 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    d790:	2800      	cmp	r0, #0
    d792:	d1ce      	bne.n	d732 <isr+0x1132>
				_radio.state = STATE_CLOSE;
    d794:	2303      	movs	r3, #3
    d796:	7523      	strb	r3, [r4, #20]
				radio_disable();
    d798:	f002 fb76 	bl	fe88 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    d79c:	f002 fb92 	bl	fec4 <radio_is_ready>
    d7a0:	4605      	mov	r5, r0
    d7a2:	2800      	cmp	r0, #0
    d7a4:	f47e af84 	bne.w	c6b0 <isr+0xb0>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    d7a8:	213d      	movs	r1, #61	; 0x3d
    d7aa:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d7ae:	f7fb fcb7 	bl	9120 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    d7b2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d7b6:	f7fb fea9 	bl	950c <connection_release>
				_radio.conn_curr = NULL;
    d7ba:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    d7be:	e72e      	b.n	d61e <isr+0x101e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    d7c0:	f003 0103 	and.w	r1, r3, #3
    d7c4:	2903      	cmp	r1, #3
    d7c6:	d1e5      	bne.n	d794 <isr+0x1194>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    d7c8:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    d7cc:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    d7d0:	f1be 0f00 	cmp.w	lr, #0
    d7d4:	f002 0240 	and.w	r2, r2, #64	; 0x40
    d7d8:	db15      	blt.n	d806 <isr+0x1206>
	       (!conn->role &&
    d7da:	b922      	cbnz	r2, d7e6 <isr+0x11e6>
		((!conn->refresh &&
    d7dc:	2902      	cmp	r1, #2
    d7de:	d0b1      	beq.n	d744 <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d7e0:	2911      	cmp	r1, #17
    d7e2:	d8d7      	bhi.n	d794 <isr+0x1194>
    d7e4:	e009      	b.n	d7fa <isr+0x11fa>
		 (conn->refresh &&
    d7e6:	1e8a      	subs	r2, r1, #2
    d7e8:	b2d2      	uxtb	r2, r2
    d7ea:	2a09      	cmp	r2, #9
    d7ec:	d8f8      	bhi.n	d7e0 <isr+0x11e0>
    d7ee:	f240 2e05 	movw	lr, #517	; 0x205
    d7f2:	fa2e f202 	lsr.w	r2, lr, r2
    d7f6:	07d2      	lsls	r2, r2, #31
    d7f8:	d4a4      	bmi.n	d744 <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d7fa:	4abd      	ldr	r2, [pc, #756]	; (daf0 <isr+0x14f0>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d7fc:	fa22 f101 	lsr.w	r1, r2, r1
    d800:	07ca      	lsls	r2, r1, #31
    d802:	d5c7      	bpl.n	d794 <isr+0x1194>
    d804:	e79e      	b.n	d744 <isr+0x1144>
	       (conn->role &&
    d806:	b92a      	cbnz	r2, d814 <isr+0x1214>
		((!conn->refresh &&
    d808:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    d80a:	d09b      	beq.n	d744 <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d80c:	2911      	cmp	r1, #17
    d80e:	d8c1      	bhi.n	d794 <isr+0x1194>
    d810:	4ab8      	ldr	r2, [pc, #736]	; (daf4 <isr+0x14f4>)
    d812:	e7f3      	b.n	d7fc <isr+0x11fc>
		 (conn->refresh &&
    d814:	1e8a      	subs	r2, r1, #2
    d816:	2a01      	cmp	r2, #1
    d818:	d994      	bls.n	d744 <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    d81a:	290b      	cmp	r1, #11
    d81c:	e7f5      	b.n	d80a <isr+0x120a>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    d81e:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    d822:	4640      	mov	r0, r8
    d824:	f7fd fe44 	bl	b4b0 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    d828:	2800      	cmp	r0, #0
    d82a:	d098      	beq.n	d75e <isr+0x115e>
		_radio.conn_curr->supervision_expire = 0;
    d82c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    d830:	2300      	movs	r3, #0
    d832:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    d836:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    d838:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    d83c:	e03d      	b.n	d8ba <isr+0x12ba>
		} else if ((_radio.conn_curr->enc_rx) ||
    d83e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    d842:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d846:	f013 0f14 	tst.w	r3, #20
    d84a:	d088      	beq.n	d75e <isr+0x115e>
					    (conn->latency + 6)) ?
    d84c:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    d84e:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    d852:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    d854:	4299      	cmp	r1, r3
    d856:	bfc4      	itt	gt
    d858:	1f8b      	subgt	r3, r1, #6
    d85a:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    d85c:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    d860:	bfcc      	ite	gt
    d862:	b29b      	uxthgt	r3, r3
    d864:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    d866:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    d868:	bf1e      	ittt	ne
    d86a:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    d86e:	2300      	movne	r3, #0
    d870:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    d874:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    d878:	2b00      	cmp	r3, #0
    d87a:	f47f af70 	bne.w	d75e <isr+0x115e>
				conn->appto_expire = conn->appto_reload;
    d87e:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    d882:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    d886:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    d88a:	e768      	b.n	d75e <isr+0x115e>
		if (_radio.crc_expire == 0) {
    d88c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    d890:	b913      	cbnz	r3, d898 <isr+0x1298>
			_radio.crc_expire = 2;
    d892:	2302      	movs	r3, #2
    d894:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    d898:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    d89c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    d8a0:	3b01      	subs	r3, #1
    d8a2:	b2db      	uxtb	r3, r3
    d8a4:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    d8a8:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    d8ac:	fab3 f583 	clz	r5, r3
    d8b0:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    d8b2:	bb86      	cbnz	r6, d916 <isr+0x1316>
			_radio.conn_curr->supervision_expire =
    d8b4:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    d8b6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    d8ba:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    d8be:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    d8c0:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    d8c4:	f7fd fbe0 	bl	b088 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d8c8:	7d23      	ldrb	r3, [r4, #20]
    d8ca:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    d8cc:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d8d0:	d010      	beq.n	d8f4 <isr+0x12f4>
    d8d2:	bb15      	cbnz	r5, d91a <isr+0x131a>
    d8d4:	b137      	cbz	r7, d8e4 <isr+0x12e4>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    d8d6:	f898 3008 	ldrb.w	r3, [r8, #8]
    d8da:	06d8      	lsls	r0, r3, #27
    d8dc:	d402      	bmi.n	d8e4 <isr+0x12e4>
			 (pdu_data_tx->len == 0)) ||
    d8de:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    d8e0:	785b      	ldrb	r3, [r3, #1]
    d8e2:	b1d3      	cbz	r3, d91a <isr+0x131a>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    d8e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    d8e8:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	bf0c      	ite	eq
    d8f0:	2302      	moveq	r3, #2
    d8f2:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    d8f4:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d8f6:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    d8f8:	d129      	bne.n	d94e <isr+0x134e>
		if (_radio.role == ROLE_MASTER) {
    d8fa:	7ce3      	ldrb	r3, [r4, #19]
    d8fc:	2b04      	cmp	r3, #4
    d8fe:	d10e      	bne.n	d91e <isr+0x131e>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    d900:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d904:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d908:	f369 12c7 	bfi	r2, r9, #7, #1
    d90c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    d910:	f002 faba 	bl	fe88 <radio_disable>
    d914:	e683      	b.n	d61e <isr+0x101e>
	struct radio_pdu_node_tx *tx_release = NULL;
    d916:	2600      	movs	r6, #0
    d918:	e7cf      	b.n	d8ba <isr+0x12ba>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d91a:	2303      	movs	r3, #3
    d91c:	e7ea      	b.n	d8f4 <isr+0x12f4>
			radio_switch_complete_and_disable();
    d91e:	f002 fb23 	bl	ff68 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    d922:	9910      	ldr	r1, [sp, #64]	; 0x40
    d924:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d928:	780b      	ldrb	r3, [r1, #0]
    d92a:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    d92e:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    d932:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d936:	f362 0382 	bfi	r3, r2, #2, #1
    d93a:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    d93c:	f7fb f870 	bl	8a20 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    d940:	f002 fac0 	bl	fec4 <radio_is_ready>
    d944:	2800      	cmp	r0, #0
    d946:	f43f ae6a 	beq.w	d61e <isr+0x101e>
    d94a:	f7fe beb1 	b.w	c6b0 <isr+0xb0>
		radio_tmr_tifs_set(RADIO_TIFS);
    d94e:	2096      	movs	r0, #150	; 0x96
    d950:	f002 fb90 	bl	10074 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    d954:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d958:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    d95c:	f000 0007 	and.w	r0, r0, #7
    d960:	f002 faec 	bl	ff3c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    d964:	f002 fc62 	bl	1022c <radio_tmr_end_capture>
    d968:	e7db      	b.n	d922 <isr+0x1322>
	switch (_radio.role) {
    d96a:	7ce2      	ldrb	r2, [r4, #19]
    d96c:	2a04      	cmp	r2, #4
    d96e:	f63e ae9f 	bhi.w	c6b0 <isr+0xb0>
    d972:	e8df f012 	tbh	[pc, r2, lsl #1]
    d976:	01f1      	.short	0x01f1
    d978:	004f0005 	.word	0x004f0005
    d97c:	009e009e 	.word	0x009e009e
	if ((_radio.state == STATE_CLOSE) &&
    d980:	2b03      	cmp	r3, #3
    d982:	d109      	bne.n	d998 <isr+0x1398>
	    (_radio.advertiser.chan_map_current != 0)) {
    d984:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    d988:	0759      	lsls	r1, r3, #29
    d98a:	d005      	beq.n	d998 <isr+0x1398>
		adv_setup();
    d98c:	f7fb fce6 	bl	935c <adv_setup>
		radio_tx_enable();
    d990:	f002 fa74 	bl	fe7c <radio_tx_enable>
    d994:	f7fe beaa 	b.w	c6ec <isr+0xec>
		radio_filter_disable();
    d998:	f002 fb30 	bl	fffc <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    d99c:	7d23      	ldrb	r3, [r4, #20]
    d99e:	2b03      	cmp	r3, #3
    d9a0:	d16b      	bne.n	da7a <isr+0x147a>
		    (!_radio.advertiser.is_hdcd)) {
    d9a2:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    d9a6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    d9aa:	d166      	bne.n	da7a <isr+0x147a>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    d9ac:	2201      	movs	r2, #1
    d9ae:	a910      	add	r1, sp, #64	; 0x40
    d9b0:	6860      	ldr	r0, [r4, #4]
    d9b2:	f003 fa19 	bl	10de8 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    d9b6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    d9ba:	484f      	ldr	r0, [pc, #316]	; (daf8 <isr+0x14f8>)
			random_delay %= 10;
    d9bc:	230a      	movs	r3, #10
    d9be:	fbb1 f2f3 	udiv	r2, r1, r3
    d9c2:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    d9c6:	3201      	adds	r2, #1
    d9c8:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    d9ca:	b2d6      	uxtb	r6, r2
    d9cc:	fba6 0100 	umull	r0, r1, r6, r0
    d9d0:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    d9d2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    d9d6:	fb03 1106 	mla	r1, r3, r6, r1
    d9da:	a343      	add	r3, pc, #268	; (adr r3, dae8 <isr+0x14e8>)
    d9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    d9e0:	f7f2 fc18 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    d9e4:	f640 734b 	movw	r3, #3915	; 0xf4b
    d9e8:	9306      	str	r3, [sp, #24]
    d9ea:	4b44      	ldr	r3, [pc, #272]	; (dafc <isr+0x14fc>)
    d9ec:	9305      	str	r3, [sp, #20]
    d9ee:	9504      	str	r5, [sp, #16]
    d9f0:	b283      	uxth	r3, r0
    d9f2:	9503      	str	r5, [sp, #12]
    d9f4:	9502      	str	r5, [sp, #8]
    d9f6:	9501      	str	r5, [sp, #4]
    d9f8:	9500      	str	r5, [sp, #0]
    d9fa:	2205      	movs	r2, #5
    d9fc:	4629      	mov	r1, r5
    d9fe:	4628      	mov	r0, r5
    da00:	f7f8 ff86 	bl	6910 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    da04:	f030 0302 	bics.w	r3, r0, #2
    da08:	d037      	beq.n	da7a <isr+0x147a>
    da0a:	7ca3      	ldrb	r3, [r4, #18]
    da0c:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    da0e:	d034      	beq.n	da7a <isr+0x147a>
    da10:	f7fe be4e 	b.w	c6b0 <isr+0xb0>
	if (_radio.state == STATE_CLOSE) {
    da14:	2b03      	cmp	r3, #3
    da16:	d124      	bne.n	da62 <isr+0x1462>
		radio_tmr_tifs_set(RADIO_TIFS);
    da18:	2096      	movs	r0, #150	; 0x96
    da1a:	f002 fb2b 	bl	10074 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    da1e:	2300      	movs	r3, #0
    da20:	4619      	mov	r1, r3
    da22:	461a      	mov	r2, r3
    da24:	4618      	mov	r0, r3
    da26:	f002 fa95 	bl	ff54 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    da2a:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    da2e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    da32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    da36:	3008      	adds	r0, #8
    da38:	f002 fa00 	bl	fe3c <radio_pkt_rx_set>
		radio_rssi_measure();
    da3c:	f002 faa2 	bl	ff84 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    da40:	f001 fd66 	bl	f510 <ctrl_rl_enabled>
    da44:	b138      	cbz	r0, da56 <isr+0x1456>
			u8_t count, *irks = ctrl_irks_get(&count);
    da46:	a810      	add	r0, sp, #64	; 0x40
    da48:	f001 fb5a 	bl	f100 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    da4c:	4601      	mov	r1, r0
    da4e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    da52:	f002 fc93 	bl	1037c <radio_ar_configure>
		_radio.state = STATE_RX;
    da56:	2301      	movs	r3, #1
    da58:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    da5a:	f002 fa09 	bl	fe70 <radio_rx_enable>
    da5e:	f7fe be45 	b.w	c6ec <isr+0xec>
		radio_filter_disable();
    da62:	f002 facb 	bl	fffc <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    da66:	7d23      	ldrb	r3, [r4, #20]
    da68:	2b05      	cmp	r3, #5
    da6a:	d106      	bne.n	da7a <isr+0x147a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    da6c:	2300      	movs	r3, #0
    da6e:	9300      	str	r3, [sp, #0]
    da70:	2204      	movs	r2, #4
    da72:	4619      	mov	r1, r3
    da74:	4618      	mov	r0, r3
    da76:	f7f8 ff99 	bl	69ac <ticker_stop>
	_radio.role = ROLE_NONE;
    da7a:	2500      	movs	r5, #0
    da7c:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    da7e:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    da80:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    da82:	f002 fb75 	bl	10170 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    da86:	462a      	mov	r2, r5
    da88:	4629      	mov	r1, r5
    da8a:	4628      	mov	r0, r5
    da8c:	4b1c      	ldr	r3, [pc, #112]	; (db00 <isr+0x1500>)
    da8e:	f7f8 f945 	bl	5d1c <mayfly_enqueue>
	LL_ASSERT(!retval);
    da92:	4605      	mov	r5, r0
    da94:	2800      	cmp	r0, #0
    da96:	f47e ae0b 	bne.w	c6b0 <isr+0xb0>
	clock_control_off(_radio.hf_clock, NULL);
    da9a:	6820      	ldr	r0, [r4, #0]
    da9c:	6843      	ldr	r3, [r0, #4]
    da9e:	4629      	mov	r1, r5
    daa0:	685b      	ldr	r3, [r3, #4]
    daa2:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    daa4:	2201      	movs	r2, #1
    daa6:	4611      	mov	r1, r2
    daa8:	4628      	mov	r0, r5
    daaa:	f7f8 f90f 	bl	5ccc <mayfly_enable>
    daae:	f7fe be4d 	b.w	c74c <isr+0x14c>
	if (_radio.conn_curr == 0) {
    dab2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    dab6:	2800      	cmp	r0, #0
    dab8:	d0df      	beq.n	da7a <isr+0x147a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    daba:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    dabe:	b309      	cbz	r1, db04 <isr+0x1504>
    dac0:	7ce3      	ldrb	r3, [r4, #19]
    dac2:	2b03      	cmp	r3, #3
    dac4:	d003      	beq.n	dace <isr+0x14ce>
    dac6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    daca:	07da      	lsls	r2, r3, #31
    dacc:	d51a      	bpl.n	db04 <isr+0x1504>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    dace:	f7fb fb27 	bl	9120 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    dad2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    dad6:	f7fb fd19 	bl	950c <connection_release>
			_radio.conn_curr = NULL;
    dada:	2300      	movs	r3, #0
    dadc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    dae0:	e7cb      	b.n	da7a <isr+0x147a>
    dae2:	bf00      	nop
    dae4:	f3af 8000 	nop.w
    dae8:	1afd498d 	.word	0x1afd498d
    daec:	00000007 	.word	0x00000007
    daf0:	00022060 	.word	0x00022060
    daf4:	00022040 	.word	0x00022040
    daf8:	d4a51000 	.word	0xd4a51000
    dafc:	00009715 	.word	0x00009715
    db00:	20003760 	.word	0x20003760
	latency_event = _radio.conn_curr->latency_event;
    db04:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    db08:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    db0c:	f10b 0601 	add.w	r6, fp, #1
    db10:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    db12:	2f00      	cmp	r7, #0
    db14:	f000 8084 	beq.w	dc20 <isr+0x1620>
		if (_radio.role == ROLE_SLAVE) {
    db18:	7ce3      	ldrb	r3, [r4, #19]
    db1a:	2b03      	cmp	r3, #3
    db1c:	d173      	bne.n	dc06 <isr+0x1606>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    db1e:	f002 fb79 	bl	10214 <radio_tmr_aa_restore>
    db22:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    db24:	f002 fb7c 	bl	10220 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    db28:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    db2c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    db30:	f003 0307 	and.w	r3, r3, #7
    db34:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    db36:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    db3a:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    db3c:	d052      	beq.n	dbe4 <isr+0x15e4>
		return 40;
    db3e:	2b04      	cmp	r3, #4
    db40:	bf0c      	ite	eq
    db42:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    db46:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    db4a:	f100 0330 	add.w	r3, r0, #48	; 0x30
    db4e:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    db50:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    db52:	930a      	str	r3, [sp, #40]	; 0x28
    db54:	f8df a21c 	ldr.w	sl, [pc, #540]	; dd74 <isr+0x1774>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    db58:	a384      	add	r3, pc, #528	; (adr r3, dd6c <isr+0x176c>)
    db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    db5e:	d844      	bhi.n	dbea <isr+0x15ea>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    db60:	fba0 010a 	umull	r0, r1, r0, sl
    db64:	f7f2 fb56 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    db68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    db6a:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    db6c:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    db70:	a37e      	add	r3, pc, #504	; (adr r3, dd6c <isr+0x176c>)
    db72:	e9d3 2300 	ldrd	r2, r3, [r3]
    db76:	fba0 010a 	umull	r0, r1, r0, sl
    db7a:	f7f2 fb4b 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    db7e:	2300      	movs	r3, #0
    db80:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    db82:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    db84:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    db88:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    db8c:	b3ab      	cbz	r3, dbfa <isr+0x15fa>
				if (pdu_data_tx->len ||
    db8e:	795b      	ldrb	r3, [r3, #5]
    db90:	b913      	cbnz	r3, db98 <isr+0x1598>
    db92:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    db96:	b10b      	cbz	r3, db9c <isr+0x159c>
					_radio.conn_curr->latency_event = 0;
    db98:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    db9a:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    db9c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    dba0:	2200      	movs	r2, #0
    dba2:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    dba4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    dba8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    dbac:	b1c3      	cbz	r3, dbe0 <isr+0x15e0>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    dbae:	429e      	cmp	r6, r3
    dbb0:	f080 80a6 	bcs.w	dd00 <isr+0x1700>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    dbb4:	1b9b      	subs	r3, r3, r6
    dbb6:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    dbb8:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    dbba:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    dbbc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    dbc0:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    dbc2:	f240 809f 	bls.w	dd04 <isr+0x1704>
			else if (_radio.role == ROLE_SLAVE) {
    dbc6:	7ce3      	ldrb	r3, [r4, #19]
    dbc8:	2b03      	cmp	r3, #3
    dbca:	d109      	bne.n	dbe0 <isr+0x15e0>
				if (latency_event != 0) {
    dbcc:	f1bb 0f00 	cmp.w	fp, #0
    dbd0:	f040 8098 	bne.w	dd04 <isr+0x1704>
					force = _radio.conn_curr->slave.force & 0x01;
    dbd4:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    dbd6:	087b      	lsrs	r3, r7, #1
					if (force) {
    dbd8:	f017 0701 	ands.w	r7, r7, #1
    dbdc:	d13d      	bne.n	dc5a <isr+0x165a>
					_radio.conn_curr->slave.force >>= 1;
    dbde:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    dbe0:	2700      	movs	r7, #0
    dbe2:	e03d      	b.n	dc60 <isr+0x1660>
		return 24;
    dbe4:	f04f 0818 	mov.w	r8, #24
    dbe8:	e7af      	b.n	db4a <isr+0x154a>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    dbea:	fba9 010a 	umull	r0, r1, r9, sl
    dbee:	f7f2 fb11 	bl	214 <__aeabi_uldivmod>
    dbf2:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    dbf4:	f108 0030 	add.w	r0, r8, #48	; 0x30
    dbf8:	e7ba      	b.n	db70 <isr+0x1570>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    dbfa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    dbfe:	07db      	lsls	r3, r3, #31
    dc00:	d5cc      	bpl.n	db9c <isr+0x159c>
				_radio.conn_curr->latency_event =
    dc02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    dc04:	e7c9      	b.n	db9a <isr+0x159a>
		} else if (reason_peer) {
    dc06:	b149      	cbz	r1, dc1c <isr+0x161c>
			_radio.conn_curr->master.terminate_ack = 1;
    dc08:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    dc0c:	f043 0301 	orr.w	r3, r3, #1
    dc10:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    dc14:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    dc18:	4645      	mov	r5, r8
    dc1a:	e7bf      	b.n	db9c <isr+0x159c>
	ticks_drift_minus = 0;
    dc1c:	4688      	mov	r8, r1
    dc1e:	e7fb      	b.n	dc18 <isr+0x1618>
	else if (_radio.conn_curr->connect_expire) {
    dc20:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    dc22:	b185      	cbz	r5, dc46 <isr+0x1646>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    dc24:	42ae      	cmp	r6, r5
    dc26:	d204      	bcs.n	dc32 <isr+0x1632>
			_radio.conn_curr->connect_expire -= elapsed_event;
    dc28:	1bad      	subs	r5, r5, r6
    dc2a:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    dc2c:	463d      	mov	r5, r7
    dc2e:	46a8      	mov	r8, r5
    dc30:	e7b8      	b.n	dba4 <isr+0x15a4>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    dc32:	213e      	movs	r1, #62	; 0x3e
    dc34:	f7fb fa74 	bl	9120 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    dc38:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    dc3c:	f7fb fc66 	bl	950c <connection_release>
			_radio.conn_curr = NULL;
    dc40:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    dc44:	e719      	b.n	da7a <isr+0x147a>
		if (!_radio.conn_curr->supervision_expire) {
    dc46:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    dc4a:	f1b8 0f00 	cmp.w	r8, #0
    dc4e:	d1ee      	bne.n	dc2e <isr+0x162e>
			_radio.conn_curr->supervision_expire =
    dc50:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    dc52:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    dc56:	4645      	mov	r5, r8
    dc58:	e7a4      	b.n	dba4 <isr+0x15a4>
						_radio.conn_curr->slave.force |=
    dc5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dc5e:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    dc60:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    dc64:	b123      	cbz	r3, dc70 <isr+0x1670>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    dc66:	429e      	cmp	r6, r3
    dc68:	d24e      	bcs.n	dd08 <isr+0x1708>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    dc6a:	1b9b      	subs	r3, r3, r6
    dc6c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    dc70:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    dc74:	b123      	cbz	r3, dc80 <isr+0x1680>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    dc76:	429e      	cmp	r6, r3
    dc78:	d248      	bcs.n	dd0c <isr+0x170c>
			_radio.conn_curr->apto_expire -= elapsed_event;
    dc7a:	1b9b      	subs	r3, r3, r6
    dc7c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    dc80:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    dc84:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    dc88:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    dc8c:	b123      	cbz	r3, dc98 <isr+0x1698>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    dc8e:	429e      	cmp	r6, r3
    dc90:	d24e      	bcs.n	dd30 <isr+0x1730>
			_radio.conn_curr->appto_expire -= elapsed_event;
    dc92:	1b9e      	subs	r6, r3, r6
    dc94:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    dc98:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    dc9c:	428b      	cmp	r3, r1
    dc9e:	d006      	beq.n	dcae <isr+0x16ae>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    dca0:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    dca4:	3b01      	subs	r3, #1
    dca6:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    dca8:	bf9c      	itt	ls
    dcaa:	2300      	movls	r3, #0
    dcac:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    dcae:	b917      	cbnz	r7, dcb6 <isr+0x16b6>
    dcb0:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    dcb2:	455b      	cmp	r3, fp
    dcb4:	d04e      	beq.n	dd54 <isr+0x1754>
		lazy = _radio.conn_curr->latency_event + 1;
    dcb6:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    dcb8:	3301      	adds	r3, #1
    dcba:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    dcbc:	b935      	cbnz	r5, dccc <isr+0x16cc>
    dcbe:	f1b8 0f00 	cmp.w	r8, #0
    dcc2:	d103      	bne.n	dccc <isr+0x16cc>
    dcc4:	b913      	cbnz	r3, dccc <isr+0x16cc>
	    (lazy != 0) || (force != 0)) {
    dcc6:	2f00      	cmp	r7, #0
    dcc8:	f43f aed7 	beq.w	da7a <isr+0x147a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dccc:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    dcd0:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dcd2:	3207      	adds	r2, #7
		ticker_status =
    dcd4:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dcd6:	b2d6      	uxtb	r6, r2
		ticker_status =
    dcd8:	4a23      	ldr	r2, [pc, #140]	; (dd68 <isr+0x1768>)
    dcda:	9205      	str	r2, [sp, #20]
    dcdc:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    dcde:	9606      	str	r6, [sp, #24]
		ticker_status =
    dce0:	9704      	str	r7, [sp, #16]
    dce2:	9102      	str	r1, [sp, #8]
    dce4:	9101      	str	r1, [sp, #4]
    dce6:	f8cd 8000 	str.w	r8, [sp]
    dcea:	4632      	mov	r2, r6
    dcec:	4608      	mov	r0, r1
    dcee:	f7f8 fe0f 	bl	6910 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    dcf2:	f030 0302 	bics.w	r3, r0, #2
    dcf6:	f43f aec0 	beq.w	da7a <isr+0x147a>
    dcfa:	7ca3      	ldrb	r3, [r4, #18]
    dcfc:	429e      	cmp	r6, r3
    dcfe:	e686      	b.n	da0e <isr+0x140e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    dd00:	2108      	movs	r1, #8
    dd02:	e6e4      	b.n	dace <isr+0x14ce>
				force = 1;
    dd04:	2701      	movs	r7, #1
    dd06:	e7ab      	b.n	dc60 <isr+0x1660>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    dd08:	2122      	movs	r1, #34	; 0x22
    dd0a:	e6e0      	b.n	dace <isr+0x14ce>
			_radio.conn_curr->apto_expire = 0;
    dd0c:	2300      	movs	r3, #0
    dd0e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    dd12:	2002      	movs	r0, #2
    dd14:	f7fa fbc4 	bl	84a0 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    dd18:	2800      	cmp	r0, #0
    dd1a:	f43e acc9 	beq.w	c6b0 <isr+0xb0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    dd1e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    dd22:	8c1b      	ldrh	r3, [r3, #32]
    dd24:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    dd26:	230a      	movs	r3, #10
    dd28:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    dd2a:	f7fb fa21 	bl	9170 <packet_rx_enqueue>
    dd2e:	e7a7      	b.n	dc80 <isr+0x1680>
			_radio.conn_curr->appto_expire = 0;
    dd30:	2300      	movs	r3, #0
    dd32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    dd36:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d1ac      	bne.n	dc98 <isr+0x1698>
    dd3e:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    dd42:	428b      	cmp	r3, r1
    dd44:	d1ac      	bne.n	dca0 <isr+0x16a0>
				_radio.conn_curr->llcp_type = LLCP_PING;
    dd46:	2307      	movs	r3, #7
    dd48:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    dd4c:	1e4b      	subs	r3, r1, #1
    dd4e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    dd52:	e7a1      	b.n	dc98 <isr+0x1698>
	lazy = 0;
    dd54:	463b      	mov	r3, r7
    dd56:	e7b1      	b.n	dcbc <isr+0x16bc>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    dd58:	3b04      	subs	r3, #4
    dd5a:	2b01      	cmp	r3, #1
    dd5c:	f63e aca8 	bhi.w	c6b0 <isr+0xb0>
		_radio.state = STATE_NONE;
    dd60:	2300      	movs	r3, #0
    dd62:	7523      	strb	r3, [r4, #20]
    dd64:	f7fe bcf2 	b.w	c74c <isr+0x14c>
    dd68:	000096fd 	.word	0x000096fd
    dd6c:	1afd498d 	.word	0x1afd498d
    dd70:	00000007 	.word	0x00000007
    dd74:	3b9aca00 	.word	0x3b9aca00

0000dd78 <radio_init>:
{
    dd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    dd7c:	4e3d      	ldr	r6, [pc, #244]	; (de74 <radio_init+0xfc>)
{
    dd7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    dd80:	f89d c01c 	ldrb.w	ip, [sp, #28]
    dd84:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    dd88:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    dd8c:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    dd90:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    dd92:	f44f 70aa 	mov.w	r0, #340	; 0x154
    dd96:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    dd9a:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    dd9e:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    dda2:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    dda4:	f10c 0401 	add.w	r4, ip, #1
    dda8:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    ddaa:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    ddac:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    ddb0:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    ddb4:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    ddb6:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    ddb8:	bf98      	it	ls
    ddba:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    ddbe:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    ddc2:	bf88      	it	hi
    ddc4:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    ddc8:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    ddcc:	bf8c      	ite	hi
    ddce:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    ddd2:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    ddd6:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    ddda:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    ddde:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    dde2:	bf8c      	ite	hi
    dde4:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    dde8:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    ddea:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    ddee:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
    ddf2:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
    ddf6:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    ddfa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    ddfe:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    de02:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
    de06:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    de0a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    de0c:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
    de0e:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    de12:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    de14:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    de18:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    de1c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    de20:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    de22:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    de26:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    de2a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    de2e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    de32:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    de36:	340a      	adds	r4, #10
    de38:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    de3c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    de3e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    de40:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    de44:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    de48:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    de4a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    de4e:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    de52:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    de56:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
    de5a:	d003      	beq.n	de64 <radio_init+0xec>
		return (retcode + mem_size);
    de5c:	442c      	add	r4, r5
}
    de5e:	4620      	mov	r0, r4
    de60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    de64:	2301      	movs	r3, #1
    de66:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
    de6a:	f7fa fbdd 	bl	8628 <common_init>
	radio_setup();
    de6e:	f001 ff35 	bl	fcdc <radio_setup>
	return retcode;
    de72:	e7f4      	b.n	de5e <radio_init+0xe6>
    de74:	20000660 	.word	0x20000660

0000de78 <ll_reset>:
{
    de78:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    de7a:	2103      	movs	r1, #3
    de7c:	2005      	movs	r0, #5
    de7e:	f7fa fca9 	bl	87d4 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    de82:	2104      	movs	r1, #4
    de84:	2006      	movs	r0, #6
    de86:	f7fa fca5 	bl	87d4 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    de8a:	4c22      	ldr	r4, [pc, #136]	; (df14 <ll_reset+0x9c>)
    de8c:	2500      	movs	r5, #0
    de8e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    de92:	b2ab      	uxth	r3, r5
    de94:	429a      	cmp	r2, r3
    de96:	f105 0501 	add.w	r5, r5, #1
    de9a:	d834      	bhi.n	df06 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    de9c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    dea0:	f36f 13c7 	bfc	r3, #7, #1
    dea4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    dea8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    deac:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    deae:	f360 0300 	bfi	r3, r0, #0, #1
    deb2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    deb6:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    deb8:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    debc:	fbb3 f3f2 	udiv	r3, r3, r2
    dec0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    dec4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
    dec8:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    decc:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    dece:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
    ded2:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    ded6:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    deda:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    dede:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    dee2:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    dee6:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
    deea:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
    deee:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
    def2:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
    def6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
    defa:	f001 fd85 	bl	fa08 <ll_filter_reset>
}
    defe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    df02:	f7fa bb91 	b.w	8628 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    df06:	1da8      	adds	r0, r5, #6
    df08:	21ff      	movs	r1, #255	; 0xff
    df0a:	b2c0      	uxtb	r0, r0
    df0c:	f7fa fc62 	bl	87d4 <role_disable>
    df10:	e7bd      	b.n	de8e <ll_reset+0x16>
    df12:	bf00      	nop
    df14:	20000660 	.word	0x20000660

0000df18 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    df18:	4b02      	ldr	r3, [pc, #8]	; (df24 <ll_adv_is_enabled+0xc>)
    df1a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    df1e:	09c0      	lsrs	r0, r0, #7
    df20:	4770      	bx	lr
    df22:	bf00      	nop
    df24:	20000660 	.word	0x20000660

0000df28 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    df28:	4b04      	ldr	r3, [pc, #16]	; (df3c <radio_adv_filter_pol_get+0x14>)
    df2a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    df2e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    df30:	bfba      	itte	lt
    df32:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    df36:	0980      	lsrlt	r0, r0, #6
    df38:	2000      	movge	r0, #0
}
    df3a:	4770      	bx	lr
    df3c:	20000660 	.word	0x20000660

0000df40 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    df40:	4a09      	ldr	r2, [pc, #36]	; (df68 <ll_scan_is_enabled+0x28>)
    df42:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    df46:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    df4a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    df4e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    df52:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    df54:	f003 0301 	and.w	r3, r3, #1
    df58:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    df5c:	bf14      	ite	ne
    df5e:	2004      	movne	r0, #4
    df60:	2000      	moveq	r0, #0
}
    df62:	4318      	orrs	r0, r3
    df64:	4770      	bx	lr
    df66:	bf00      	nop
    df68:	20000660 	.word	0x20000660

0000df6c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    df6c:	4b05      	ldr	r3, [pc, #20]	; (df84 <radio_scan_filter_pol_get+0x18>)
    df6e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    df72:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    df76:	bf1c      	itt	ne
    df78:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    df7c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    df80:	4770      	bx	lr
    df82:	bf00      	nop
    df84:	20000660 	.word	0x20000660

0000df88 <radio_connect_enable>:
{
    df88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    df8c:	f8df 8358 	ldr.w	r8, [pc, #856]	; e2e8 <radio_connect_enable+0x360>
{
    df90:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
    df92:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
    df96:	9301      	str	r3, [sp, #4]
    df98:	4683      	mov	fp, r0
    df9a:	468a      	mov	sl, r1
    df9c:	4691      	mov	r9, r2
    df9e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
    dfa0:	2e00      	cmp	r6, #0
    dfa2:	f040 8193 	bne.w	e2cc <radio_connect_enable+0x344>
	link = mem_acquire(&_radio.link_rx_free);
    dfa6:	f508 70a4 	add.w	r0, r8, #328	; 0x148
    dfaa:	f7f7 fdec 	bl	5b86 <mem_acquire>
	if (!link) {
    dfae:	4607      	mov	r7, r0
    dfb0:	b150      	cbz	r0, dfc8 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
    dfb2:	f508 7086 	add.w	r0, r8, #268	; 0x10c
    dfb6:	f7f7 fde6 	bl	5b86 <mem_acquire>
	if (!conn) {
    dfba:	4604      	mov	r4, r0
    dfbc:	b930      	cbnz	r0, dfcc <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
    dfbe:	f508 71a4 	add.w	r1, r8, #328	; 0x148
    dfc2:	4638      	mov	r0, r7
    dfc4:	f7f7 fdf9 	bl	5bba <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    dfc8:	2007      	movs	r0, #7
    dfca:	e15c      	b.n	e286 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
    dfcc:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
    dfd0:	f36b 1386 	bfi	r3, fp, #6, #1
    dfd4:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    dfd8:	2206      	movs	r2, #6
    dfda:	4651      	mov	r1, sl
    dfdc:	f108 00ea 	add.w	r0, r8, #234	; 0xea
    dfe0:	f7f3 fe32 	bl	1c48 <memcpy>
	_radio.scanner.conn_latency = latency;
    dfe4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dfe8:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    dfec:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    dfee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
    dff2:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    dff6:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    dff8:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    dffc:	f001 ff2a 	bl	fe54 <radio_tx_ready_delay_get>
    e000:	49b5      	ldr	r1, [pc, #724]	; (e2d8 <radio_connect_enable+0x350>)
    e002:	f200 4052 	addw	r0, r0, #1106	; 0x452
    e006:	a3b2      	add	r3, pc, #712	; (adr r3, e2d0 <radio_connect_enable+0x348>)
    e008:	e9d3 2300 	ldrd	r2, r3, [r3]
    e00c:	fba0 0101 	umull	r0, r1, r0, r1
    e010:	f7f2 f900 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
    e014:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    e018:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e01c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
    e020:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    e022:	f8df 82c8 	ldr.w	r8, [pc, #712]	; e2ec <radio_connect_enable+0x364>
	conn->llcp_features = RADIO_BLE_FEAT;
    e026:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
    e02a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    e02e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
    e030:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
    e034:	2104      	movs	r1, #4
    e036:	a803      	add	r0, sp, #12
    e038:	f7f8 fdc8 	bl	6bcc <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    e03c:	f8dd c00c 	ldr.w	ip, [sp, #12]
    e040:	2000      	movs	r0, #0
    e042:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
    e046:	231f      	movs	r3, #31
	transitions = 0;
    e048:	4602      	mov	r2, r0
	consecutive_cnt = 1;
    e04a:	2101      	movs	r1, #1
	while (bit_idx--) {
    e04c:	3b01      	subs	r3, #1
    e04e:	b2db      	uxtb	r3, r3
    e050:	2bff      	cmp	r3, #255	; 0xff
    e052:	d103      	bne.n	e05c <radio_connect_enable+0xd4>
    e054:	b3d0      	cbz	r0, e0cc <radio_connect_enable+0x144>
    e056:	f8cd c00c 	str.w	ip, [sp, #12]
    e05a:	e037      	b.n	e0cc <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
    e05c:	fa2c fe03 	lsr.w	lr, ip, r3
    e060:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
    e064:	45d6      	cmp	lr, sl
    e066:	d11a      	bne.n	e09e <radio_connect_enable+0x116>
			consecutive_cnt++;
    e068:	3101      	adds	r1, #1
    e06a:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
    e06c:	2906      	cmp	r1, #6
    e06e:	d807      	bhi.n	e080 <radio_connect_enable+0xf8>
    e070:	2b1b      	cmp	r3, #27
    e072:	d81a      	bhi.n	e0aa <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
    e074:	b122      	cbz	r2, e080 <radio_connect_enable+0xf8>
    e076:	2b1b      	cmp	r3, #27
    e078:	d017      	beq.n	e0aa <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
    e07a:	2a01      	cmp	r2, #1
    e07c:	d815      	bhi.n	e0aa <radio_connect_enable+0x122>
    e07e:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
    e080:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
    e084:	f1be 0f00 	cmp.w	lr, #0
    e088:	f000 8100 	beq.w	e28c <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
    e08c:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
    e090:	f04f 0e00 	mov.w	lr, #0
			transitions++;
    e094:	3201      	adds	r2, #1
    e096:	2001      	movs	r0, #1
    e098:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    e09a:	4601      	mov	r1, r0
    e09c:	e005      	b.n	e0aa <radio_connect_enable+0x122>
			transitions++;
    e09e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
    e0a0:	2b1b      	cmp	r3, #27
			transitions++;
    e0a2:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    e0a4:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
    e0a8:	d9e5      	bls.n	e076 <radio_connect_enable+0xee>
		if (transitions > 24) {
    e0aa:	2a18      	cmp	r2, #24
    e0ac:	f240 80f6 	bls.w	e29c <radio_connect_enable+0x314>
    e0b0:	b108      	cbz	r0, e0b6 <radio_connect_enable+0x12e>
    e0b2:	f8cd c00c 	str.w	ip, [sp, #12]
    e0b6:	3301      	adds	r3, #1
    e0b8:	9a03      	ldr	r2, [sp, #12]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    e0ba:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
    e0be:	f1be 0f00 	cmp.w	lr, #0
    e0c2:	f000 80e8 	beq.w	e296 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    e0c6:	425b      	negs	r3, r3
    e0c8:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
    e0ca:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    e0cc:	9b03      	ldr	r3, [sp, #12]
    e0ce:	a804      	add	r0, sp, #16
    e0d0:	ea83 0308 	eor.w	r3, r3, r8
    e0d4:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    e0d8:	2104      	movs	r1, #4
    e0da:	f7f7 feff 	bl	5edc <util_ones_count_get>
    e0de:	2801      	cmp	r0, #1
    e0e0:	f240 80e3 	bls.w	e2aa <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    e0e4:	9b03      	ldr	r3, [sp, #12]
    e0e6:	b29a      	uxth	r2, r3
    e0e8:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    e0ec:	f000 80d8 	beq.w	e2a0 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    e0f0:	2204      	movs	r2, #4
    e0f2:	a903      	add	r1, sp, #12
    e0f4:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
    e0f8:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    e0fa:	f7f3 fda5 	bl	1c48 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
    e0fe:	2103      	movs	r1, #3
    e100:	f104 0014 	add.w	r0, r4, #20
    e104:	f7f8 fd62 	bl	6bcc <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
    e108:	2205      	movs	r2, #5
    e10a:	4974      	ldr	r1, [pc, #464]	; (e2dc <radio_connect_enable+0x354>)
    e10c:	f104 0017 	add.w	r0, r4, #23
    e110:	f7f3 fd9a 	bl	1c48 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
    e114:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
    e118:	7f63      	ldrb	r3, [r4, #29]
    e11a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
    e11e:	f36f 1386 	bfc	r3, #6, #1
    e122:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
    e124:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
    e126:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
    e128:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
    e12a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
    e12c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
    e130:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
    e134:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
    e138:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    e13a:	211b      	movs	r1, #27
    e13c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    e13e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
    e140:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
    e144:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e146:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
    e14a:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e14e:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e150:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
    e152:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
    e156:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
    e158:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
    e15c:	2601      	movs	r6, #1
    e15e:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
    e162:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    e166:	f363 11c7 	bfi	r1, r3, #7, #1
    e16a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
    e16e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
    e172:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
    e176:	f366 0102 	bfi	r1, r6, #0, #3
    e17a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
    e17e:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
    e182:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
    e184:	b2c9      	uxtb	r1, r1
    e186:	f36c 01c5 	bfi	r1, ip, #3, #3
    e18a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
    e18e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
    e192:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
    e194:	f366 0102 	bfi	r1, r6, #0, #3
    e198:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
    e19c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
    e19e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
    e1a0:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
    e1a4:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
    e1a6:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
    e1a8:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
    e1ac:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    e1b0:	f363 0100 	bfi	r1, r3, #0, #1
    e1b4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
    e1b8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e1bc:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e1c0:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
    e1c4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e1c8:	1e56      	subs	r6, r2, #1
    e1ca:	f242 7e10 	movw	lr, #10000	; 0x2710
    e1ce:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
    e1d2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e1d6:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e1da:	4b41      	ldr	r3, [pc, #260]	; (e2e0 <radio_connect_enable+0x358>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e1dc:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e1de:	4941      	ldr	r1, [pc, #260]	; (e2e4 <radio_connect_enable+0x35c>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e1e0:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e1e2:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e1e4:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e1e8:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e1ec:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e1ee:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e1f2:	1d81      	adds	r1, r0, #6
    e1f4:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e1f6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e1fa:	dc61      	bgt.n	e2c0 <radio_connect_enable+0x338>
	conn->llcp_version.tx = 0;
    e1fc:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e200:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
    e204:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
    e206:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    e20a:	f360 0341 	bfi	r3, r0, #1, #1
    e20e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
    e212:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
    e216:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
    e21a:	f360 1304 	bfi	r3, r0, #4, #1
    e21e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
    e222:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
    e226:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
    e22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e22e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
    e232:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
    e236:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
    e23a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
    e23e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
    e242:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    e246:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
    e24a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
    e24e:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
    e252:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
    e256:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
    e25a:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
    e25e:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
    e262:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
    e266:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
    e26a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    e26e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
    e272:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
    e276:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
    e27a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    e27e:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
    e282:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
    e286:	b005      	add	sp, #20
    e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
    e28c:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
    e290:	f04f 0e01 	mov.w	lr, #1
    e294:	e6fe      	b.n	e094 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
    e296:	3b01      	subs	r3, #1
    e298:	4313      	orrs	r3, r2
    e29a:	e716      	b.n	e0ca <radio_connect_enable+0x142>
		if (transitions > 24) {
    e29c:	46f2      	mov	sl, lr
    e29e:	e6d5      	b.n	e04c <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
    e2a0:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    e2a2:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
    e2a6:	f47f af23 	bne.w	e0f0 <radio_connect_enable+0x168>
    e2aa:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
    e2ac:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    e2b0:	f47f aec0 	bne.w	e034 <radio_connect_enable+0xac>
    e2b4:	4040      	eors	r0, r0
    e2b6:	f380 8811 	msr	BASEPRI, r0
    e2ba:	f04f 0004 	mov.w	r0, #4
    e2be:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e2c0:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    e2c4:	33fa      	adds	r3, #250	; 0xfa
    e2c6:	441a      	add	r2, r3
    e2c8:	b292      	uxth	r2, r2
    e2ca:	e797      	b.n	e1fc <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e2cc:	200c      	movs	r0, #12
    e2ce:	e7da      	b.n	e286 <radio_connect_enable+0x2fe>
    e2d0:	1afd498d 	.word	0x1afd498d
    e2d4:	00000007 	.word	0x00000007
    e2d8:	3b9aca00 	.word	0x3b9aca00
    e2dc:	2000077a 	.word	0x2000077a
    e2e0:	01c9c37f 	.word	0x01c9c37f
    e2e4:	026259ff 	.word	0x026259ff
    e2e8:	20000660 	.word	0x20000660
    e2ec:	8e89bed6 	.word	0x8e89bed6

0000e2f0 <ll_conn_update>:
{
    e2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2f4:	460c      	mov	r4, r1
    e2f6:	4690      	mov	r8, r2
    e2f8:	461d      	mov	r5, r3
    e2fa:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e2fe:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
    e302:	f7fa fa51 	bl	87a8 <connection_get>
	if (!conn) {
    e306:	b330      	cbz	r0, e356 <ll_conn_update+0x66>
	if (!cmd) {
    e308:	2c00      	cmp	r4, #0
    e30a:	d14a      	bne.n	e3a2 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
    e30c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e310:	06d9      	lsls	r1, r3, #27
    e312:	d407      	bmi.n	e324 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
    e314:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
    e318:	069a      	lsls	r2, r3, #26
    e31a:	d541      	bpl.n	e3a0 <ll_conn_update+0xb0>
		     (conn->llcp_features &
    e31c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
    e320:	079b      	lsls	r3, r3, #30
    e322:	d43d      	bmi.n	e3a0 <ll_conn_update+0xb0>
		} else if (conn->role) {
    e324:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e328:	2b00      	cmp	r3, #0
    e32a:	da17      	bge.n	e35c <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e32c:	201a      	movs	r0, #26
    e32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
    e332:	428b      	cmp	r3, r1
    e334:	d00f      	beq.n	e356 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
    e336:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
    e33a:	f003 0207 	and.w	r2, r3, #7
    e33e:	2a03      	cmp	r2, #3
    e340:	d109      	bne.n	e356 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    e342:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    e346:	b2db      	uxtb	r3, r3
    e348:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
    e34c:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
    e350:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    e354:	e021      	b.n	e39a <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e356:	200c      	movs	r0, #12
    e358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
    e35c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    e360:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e364:	429a      	cmp	r2, r3
    e366:	d1f6      	bne.n	e356 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e368:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
    e36c:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
    e370:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
    e372:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e374:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
    e378:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
    e37c:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
    e37e:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    e382:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
    e386:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
    e38a:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
    e38e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    e392:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
    e396:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
    e39a:	2000      	movs	r0, #0
    e39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
    e3a0:	2401      	movs	r4, #1
		cmd--;
    e3a2:	3c01      	subs	r4, #1
		if (cmd) {
    e3a4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    e3a8:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    e3ac:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    e3b0:	d1bf      	bne.n	e332 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
    e3b2:	4299      	cmp	r1, r3
    e3b4:	d1cf      	bne.n	e356 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    e3b6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
    e3ba:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
    e3be:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    e3c2:	b2db      	uxtb	r3, r3
    e3c4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
    e3c8:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
    e3ca:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
    e3ce:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
    e3d2:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
    e3d6:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
    e3da:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
    e3de:	e7dc      	b.n	e39a <ll_conn_update+0xaa>

0000e3e0 <ll_chm_update>:
{
    e3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
    e3e4:	4c1e      	ldr	r4, [pc, #120]	; (e460 <ll_chm_update+0x80>)
    e3e6:	4601      	mov	r1, r0
    e3e8:	2205      	movs	r2, #5
{
    e3ea:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
    e3ec:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    e3f0:	f7f3 fc2a 	bl	1c48 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
    e3f4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    e3f8:	2105      	movs	r1, #5
    e3fa:	f7f7 fd6f 	bl	5edc <util_ones_count_get>
	_radio.data_chan_count =
    e3fe:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
    e402:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
    e406:	3c01      	subs	r4, #1
    e408:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
    e40a:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    e40c:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
    e410:	2cff      	cmp	r4, #255	; 0xff
    e412:	d102      	bne.n	e41a <ll_chm_update+0x3a>
	return 0;
    e414:	2000      	movs	r0, #0
    e416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
    e41a:	4620      	mov	r0, r4
    e41c:	f7fa f9c4 	bl	87a8 <connection_get>
		if (!conn || conn->role) {
    e420:	4606      	mov	r6, r0
    e422:	b1b8      	cbz	r0, e454 <ll_chm_update+0x74>
    e424:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e428:	2b00      	cmp	r3, #0
    e42a:	db13      	blt.n	e454 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
    e42c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e430:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e434:	429a      	cmp	r2, r3
    e436:	d110      	bne.n	e45a <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
    e438:	2205      	movs	r2, #5
    e43a:	4629      	mov	r1, r5
    e43c:	3079      	adds	r0, #121	; 0x79
    e43e:	f7f3 fc03 	bl	1c48 <memcpy>
		conn->llcp_req++;
    e442:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
    e446:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
    e44a:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    e44c:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
    e450:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
    e454:	3c01      	subs	r4, #1
    e456:	b2e4      	uxtb	r4, r4
    e458:	e7da      	b.n	e410 <ll_chm_update+0x30>
			return 1;
    e45a:	2001      	movs	r0, #1
}
    e45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e460:	20000660 	.word	0x20000660

0000e464 <ll_chm_get>:
{
    e464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e466:	460d      	mov	r5, r1
	conn = connection_get(handle);
    e468:	f7fa f99e 	bl	87a8 <connection_get>
	if (!conn) {
    e46c:	4604      	mov	r4, r0
    e46e:	b160      	cbz	r0, e48a <ll_chm_get+0x26>
		conn->chm_update = 0;
    e470:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    e472:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
    e476:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    e478:	2205      	movs	r2, #5
    e47a:	4631      	mov	r1, r6
    e47c:	4628      	mov	r0, r5
    e47e:	f7f3 fbe3 	bl	1c48 <memcpy>
	} while (conn->chm_update);
    e482:	7f20      	ldrb	r0, [r4, #28]
    e484:	2800      	cmp	r0, #0
    e486:	d1f6      	bne.n	e476 <ll_chm_get+0x12>
    e488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    e48a:	2001      	movs	r0, #1
}
    e48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e48e <ll_feature_req_send>:
{
    e48e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    e490:	f7fa f98a 	bl	87a8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e494:	b168      	cbz	r0, e4b2 <ll_feature_req_send+0x24>
    e496:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e49a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e49e:	4293      	cmp	r3, r2
    e4a0:	d107      	bne.n	e4b2 <ll_feature_req_send+0x24>
	conn->llcp_req++;
    e4a2:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    e4a4:	2204      	movs	r2, #4
	conn->llcp_req++;
    e4a6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    e4aa:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    e4ae:	2000      	movs	r0, #0
    e4b0:	bd08      	pop	{r3, pc}
		return 1;
    e4b2:	2001      	movs	r0, #1
}
    e4b4:	bd08      	pop	{r3, pc}

0000e4b6 <ll_version_ind_send>:
{
    e4b6:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    e4b8:	f7fa f976 	bl	87a8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e4bc:	b168      	cbz	r0, e4da <ll_version_ind_send+0x24>
    e4be:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e4c2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e4c6:	4293      	cmp	r3, r2
    e4c8:	d107      	bne.n	e4da <ll_version_ind_send+0x24>
	conn->llcp_req++;
    e4ca:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    e4cc:	2205      	movs	r2, #5
	conn->llcp_req++;
    e4ce:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    e4d2:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    e4d6:	2000      	movs	r0, #0
    e4d8:	bd08      	pop	{r3, pc}
		return 1;
    e4da:	2001      	movs	r0, #1
}
    e4dc:	bd08      	pop	{r3, pc}

0000e4de <ll_terminate_ind_send>:
{
    e4de:	b510      	push	{r4, lr}
    e4e0:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e4e2:	f7fa f961 	bl	87a8 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    e4e6:	b160      	cbz	r0, e502 <ll_terminate_ind_send+0x24>
    e4e8:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
    e4ec:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
    e4f0:	4293      	cmp	r3, r2
    e4f2:	d106      	bne.n	e502 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
    e4f4:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
    e4f6:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
    e4fa:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
    e4fe:	2000      	movs	r0, #0
    e500:	bd10      	pop	{r4, pc}
		return 1;
    e502:	2001      	movs	r0, #1
}
    e504:	bd10      	pop	{r4, pc}

0000e506 <ll_tx_pwr_lvl_get>:
{
    e506:	b510      	push	{r4, lr}
    e508:	4614      	mov	r4, r2
	conn = connection_get(handle);
    e50a:	f7fa f94d 	bl	87a8 <connection_get>
	if (!conn) {
    e50e:	b110      	cbz	r0, e516 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    e510:	2000      	movs	r0, #0
    e512:	7020      	strb	r0, [r4, #0]
	return 0;
    e514:	bd10      	pop	{r4, pc}
		return 1;
    e516:	2001      	movs	r0, #1
}
    e518:	bd10      	pop	{r4, pc}

0000e51a <ll_apto_get>:
{
    e51a:	b510      	push	{r4, lr}
    e51c:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e51e:	f7fa f943 	bl	87a8 <connection_get>
	if (!conn) {
    e522:	b160      	cbz	r0, e53e <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    e524:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    e526:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    e52a:	435a      	muls	r2, r3
    e52c:	237d      	movs	r3, #125	; 0x7d
    e52e:	4353      	muls	r3, r2
	return 0;
    e530:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    e532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e536:	fb93 f3f2 	sdiv	r3, r3, r2
    e53a:	8023      	strh	r3, [r4, #0]
	return 0;
    e53c:	bd10      	pop	{r4, pc}
		return 1;
    e53e:	2001      	movs	r0, #1
}
    e540:	bd10      	pop	{r4, pc}

0000e542 <ll_apto_set>:
{
    e542:	b510      	push	{r4, lr}
    e544:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e546:	f7fa f92f 	bl	87a8 <connection_get>
	if (!conn) {
    e54a:	b170      	cbz	r0, e56a <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
    e54c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    e54e:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e552:	4353      	muls	r3, r2
    e554:	f242 7110 	movw	r1, #10000	; 0x2710
    e558:	fb01 3404 	mla	r4, r1, r4, r3
    e55c:	3c01      	subs	r4, #1
    e55e:	fb94 f4f3 	sdiv	r4, r4, r3
    e562:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
    e566:	2000      	movs	r0, #0
    e568:	bd10      	pop	{r4, pc}
		return 1;
    e56a:	2001      	movs	r0, #1
}
    e56c:	bd10      	pop	{r4, pc}

0000e56e <ll_length_req_send>:
{
    e56e:	b570      	push	{r4, r5, r6, lr}
    e570:	460e      	mov	r6, r1
    e572:	4615      	mov	r5, r2
	conn = connection_get(handle);
    e574:	f7fa f918 	bl	87a8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e578:	b1d0      	cbz	r0, e5b0 <ll_length_req_send+0x42>
    e57a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e57e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e582:	429a      	cmp	r2, r3
    e584:	d114      	bne.n	e5b0 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
    e586:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e58a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    e58e:	4293      	cmp	r3, r2
    e590:	d10e      	bne.n	e5b0 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e592:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
    e596:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
    e59a:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e59c:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
    e5a0:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e5a4:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
    e5a8:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
    e5ac:	2000      	movs	r0, #0
    e5ae:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    e5b0:	2001      	movs	r0, #1
}
    e5b2:	bd70      	pop	{r4, r5, r6, pc}

0000e5b4 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
    e5b4:	4b03      	ldr	r3, [pc, #12]	; (e5c4 <ll_length_default_get+0x10>)
    e5b6:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
    e5ba:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    e5bc:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
    e5c0:	800b      	strh	r3, [r1, #0]
    e5c2:	4770      	bx	lr
    e5c4:	20000660 	.word	0x20000660

0000e5c8 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
    e5c8:	4b03      	ldr	r3, [pc, #12]	; (e5d8 <ll_length_default_set+0x10>)
    e5ca:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
    e5ce:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
    e5d2:	2000      	movs	r0, #0
    e5d4:	4770      	bx	lr
    e5d6:	bf00      	nop
    e5d8:	20000660 	.word	0x20000660

0000e5dc <ll_length_max_get>:
{
    e5dc:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e5de:	241b      	movs	r4, #27
    e5e0:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    e5e2:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e5e6:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e5e8:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    e5ea:	8018      	strh	r0, [r3, #0]
    e5ec:	bd10      	pop	{r4, pc}

0000e5ee <ll_phy_get>:
{
    e5ee:	b538      	push	{r3, r4, r5, lr}
    e5f0:	460d      	mov	r5, r1
    e5f2:	4614      	mov	r4, r2
	conn = connection_get(handle);
    e5f4:	f7fa f8d8 	bl	87a8 <connection_get>
	if (!conn) {
    e5f8:	b158      	cbz	r0, e612 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
    e5fa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    e5fe:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e602:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
    e604:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    e608:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e60c:	7023      	strb	r3, [r4, #0]
	return 0;
    e60e:	2000      	movs	r0, #0
    e610:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
    e612:	2001      	movs	r0, #1
}
    e614:	bd38      	pop	{r3, r4, r5, pc}
	...

0000e618 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
    e618:	4b03      	ldr	r3, [pc, #12]	; (e628 <ll_phy_default_set+0x10>)
    e61a:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
    e61e:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
    e622:	2000      	movs	r0, #0
    e624:	4770      	bx	lr
    e626:	bf00      	nop
    e628:	20000660 	.word	0x20000660

0000e62c <ll_phy_req_send>:
{
    e62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e630:	4689      	mov	r9, r1
    e632:	4690      	mov	r8, r2
    e634:	461f      	mov	r7, r3
	conn = connection_get(handle);
    e636:	f7fa f8b7 	bl	87a8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e63a:	b320      	cbz	r0, e686 <ll_phy_req_send+0x5a>
    e63c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e640:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e644:	429a      	cmp	r2, r3
    e646:	d11e      	bne.n	e686 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    e648:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e64c:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
    e650:	429d      	cmp	r5, r3
    e652:	d118      	bne.n	e686 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    e654:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
    e658:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
    e65c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
    e660:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
    e664:	f046 0102 	orr.w	r1, r6, #2
    e668:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
    e66c:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
    e66e:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
    e670:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
    e674:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
    e678:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
    e67c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
    e680:	2000      	movs	r0, #0
    e682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
    e686:	2001      	movs	r0, #1
}
    e688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e68c <ll_rx_get>:
{
    e68c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e690:	4605      	mov	r5, r0
    e692:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    e694:	4918      	ldr	r1, [pc, #96]	; (e6f8 <ll_rx_get+0x6c>)
    e696:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    e69a:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
    e69e:	4293      	cmp	r3, r2
    e6a0:	460f      	mov	r7, r1
    e6a2:	d01f      	beq.n	e6e4 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    e6a4:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    e6a8:	f201 1177 	addw	r1, r1, #375	; 0x177
    e6ac:	f898 2000 	ldrb.w	r2, [r8]
    e6b0:	f7fa f830 	bl	8714 <tx_cmplt_get>
		if (!cmplt) {
    e6b4:	4604      	mov	r4, r0
    e6b6:	b9e0      	cbnz	r0, e6f2 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    e6b8:	ae02      	add	r6, sp, #8
    e6ba:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
    e6be:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    e6c2:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
    e6c6:	4631      	mov	r1, r6
    e6c8:	f10d 0006 	add.w	r0, sp, #6
    e6cc:	f7fa f822 	bl	8714 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    e6d0:	b934      	cbnz	r4, e6e0 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    e6d2:	b928      	cbnz	r0, e6e0 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    e6d4:	f8c5 8000 	str.w	r8, [r5]
}
    e6d8:	4620      	mov	r0, r4
    e6da:	b002      	add	sp, #8
    e6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    e6e0:	4604      	mov	r4, r0
    e6e2:	e7ee      	b.n	e6c2 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    e6e4:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
    e6e8:	f201 1177 	addw	r1, r1, #375	; 0x177
    e6ec:	f7fa f812 	bl	8714 <tx_cmplt_get>
    e6f0:	4604      	mov	r4, r0
		*node_rx = NULL;
    e6f2:	2300      	movs	r3, #0
    e6f4:	602b      	str	r3, [r5, #0]
    e6f6:	e7ef      	b.n	e6d8 <ll_rx_get+0x4c>
    e6f8:	20000660 	.word	0x20000660

0000e6fc <ll_rx_mem_release>:
{
    e6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    e700:	4c17      	ldr	r4, [pc, #92]	; (e760 <ll_rx_mem_release+0x64>)
{
    e702:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    e704:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e706:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
    e70a:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
    e70e:	b928      	cbnz	r0, e71c <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
    e710:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
    e712:	20ff      	movs	r0, #255	; 0xff
}
    e714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    e718:	f7f9 bf3a 	b.w	8590 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
    e71c:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    e71e:	f8d0 8000 	ldr.w	r8, [r0]
    e722:	2a0c      	cmp	r2, #12
    e724:	d807      	bhi.n	e736 <ll_rx_mem_release+0x3a>
    e726:	2301      	movs	r3, #1
    e728:	4093      	lsls	r3, r2
    e72a:	f641 727e 	movw	r2, #8062	; 0x1f7e
    e72e:	4213      	tst	r3, r2
    e730:	d107      	bne.n	e742 <ll_rx_mem_release+0x46>
    e732:	061b      	lsls	r3, r3, #24
    e734:	d40a      	bmi.n	e74c <ll_rx_mem_release+0x50>
			LL_ASSERT(0);
    e736:	4040      	eors	r0, r0
    e738:	f380 8811 	msr	BASEPRI, r0
    e73c:	f04f 0004 	mov.w	r0, #4
    e740:	df02      	svc	2
			mem_release(_node_rx_free,
    e742:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    e744:	f7f7 fa39 	bl	5bba <mem_release>
{
    e748:	4640      	mov	r0, r8
    e74a:	e7e0      	b.n	e70e <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e74c:	88c2      	ldrh	r2, [r0, #6]
    e74e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    e752:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e756:	f7f7 fa4b 	bl	5bf0 <mem_get>
			mem_release(conn, &_radio.conn_free);
    e75a:	4639      	mov	r1, r7
    e75c:	e7f2      	b.n	e744 <ll_rx_mem_release+0x48>
    e75e:	bf00      	nop
    e760:	20000790 	.word	0x20000790

0000e764 <do_radio_rx_fc_set>:
	if (req == ack) {
    e764:	4291      	cmp	r1, r2
{
    e766:	b510      	push	{r4, lr}
    e768:	4b14      	ldr	r3, [pc, #80]	; (e7bc <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    e76a:	d119      	bne.n	e7a0 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    e76c:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    e770:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
    e774:	4294      	cmp	r4, r2
    e776:	d111      	bne.n	e79c <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
    e778:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    e77a:	bf14      	ite	ne
    e77c:	460a      	movne	r2, r1
    e77e:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
    e780:	3a01      	subs	r2, #1
    e782:	b2d2      	uxtb	r2, r2
    e784:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    e788:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
    e78c:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
    e790:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
    e794:	4291      	cmp	r1, r2
    e796:	d00f      	beq.n	e7b8 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    e798:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
    e79c:	2001      	movs	r0, #1
    e79e:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
    e7a0:	b929      	cbnz	r1, e7ae <do_radio_rx_fc_set+0x4a>
    e7a2:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
    e7a6:	1a18      	subs	r0, r3, r0
    e7a8:	bf18      	it	ne
    e7aa:	2001      	movne	r0, #1
    e7ac:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    e7ae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    e7b2:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
    e7b6:	e7f6      	b.n	e7a6 <do_radio_rx_fc_set+0x42>
	return 0;
    e7b8:	2000      	movs	r0, #0
}
    e7ba:	bd10      	pop	{r4, pc}
    e7bc:	20000660 	.word	0x20000660

0000e7c0 <radio_rx_fc_set>:
{
    e7c0:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    e7c2:	4b14      	ldr	r3, [pc, #80]	; (e814 <radio_rx_fc_set+0x54>)
    e7c4:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
    e7c8:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    e7ca:	b302      	cbz	r2, e80e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    e7cc:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
    e7d0:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    e7d2:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
    e7d6:	b135      	cbz	r5, e7e6 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    e7d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e7dc:	4298      	cmp	r0, r3
    e7de:	d016      	beq.n	e80e <radio_rx_fc_set+0x4e>
}
    e7e0:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    e7e2:	f7ff bfbf 	b.w	e764 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    e7e6:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
    e7ea:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
    e7ee:	42a0      	cmp	r0, r4
    e7f0:	d10d      	bne.n	e80e <radio_rx_fc_set+0x4e>
    e7f2:	4291      	cmp	r1, r2
    e7f4:	d00b      	beq.n	e80e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e7f6:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
    e7fa:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e7fe:	42a0      	cmp	r0, r4
    e800:	d005      	beq.n	e80e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    e802:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e806:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    e808:	bf08      	it	eq
    e80a:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
    e80e:	2000      	movs	r0, #0
    e810:	bc30      	pop	{r4, r5}
    e812:	4770      	bx	lr
    e814:	20000660 	.word	0x20000660

0000e818 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
    e818:	4801      	ldr	r0, [pc, #4]	; (e820 <ll_tx_mem_acquire+0x8>)
    e81a:	f7f7 b9b4 	b.w	5b86 <mem_acquire>
    e81e:	bf00      	nop
    e820:	200007c4 	.word	0x200007c4

0000e824 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    e824:	4901      	ldr	r1, [pc, #4]	; (e82c <ll_tx_mem_release+0x8>)
    e826:	f7f7 b9c8 	b.w	5bba <mem_release>
    e82a:	bf00      	nop
    e82c:	200007c4 	.word	0x200007c4

0000e830 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
    e830:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    e832:	4d2b      	ldr	r5, [pc, #172]	; (e8e0 <ll_tx_mem_enqueue+0xb0>)
    e834:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
    e838:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
    e83c:	3401      	adds	r4, #1
{
    e83e:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
    e840:	b2e4      	uxtb	r4, r4
{
    e842:	4607      	mov	r7, r0
    e844:	460e      	mov	r6, r1
		last = 0;
    e846:	42a3      	cmp	r3, r4
    e848:	bf08      	it	eq
    e84a:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
    e84c:	f7f9 ffac 	bl	87a8 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
    e850:	2800      	cmp	r0, #0
    e852:	d042      	beq.n	e8da <ll_tx_mem_enqueue+0xaa>
    e854:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
    e858:	429c      	cmp	r4, r3
    e85a:	d03e      	beq.n	e8da <ll_tx_mem_enqueue+0xaa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
    e85c:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    e860:	7972      	ldrb	r2, [r6, #5]
    e862:	3b07      	subs	r3, #7
    e864:	429a      	cmp	r2, r3
    e866:	d905      	bls.n	e874 <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e868:	4040      	eors	r0, r0
    e86a:	f380 8811 	msr	BASEPRI, r0
    e86e:	f04f 0004 	mov.w	r0, #4
    e872:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
    e874:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
    e878:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
    e87c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    e880:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
    e884:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
    e886:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    e88a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e88e:	2b00      	cmp	r3, #0
    e890:	db02      	blt.n	e898 <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
    e892:	2000      	movs	r0, #0
}
    e894:	b009      	add	sp, #36	; 0x24
    e896:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    e898:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e89a:	2b00      	cmp	r3, #0
    e89c:	d0f9      	beq.n	e892 <ll_tx_mem_enqueue+0x62>
    e89e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e8a2:	f012 0302 	ands.w	r3, r2, #2
    e8a6:	d1f4      	bne.n	e892 <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1;
    e8a8:	f042 0202 	orr.w	r2, r2, #2
    e8ac:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    e8b0:	f890 2020 	ldrb.w	r2, [r0, #32]
    e8b4:	490b      	ldr	r1, [pc, #44]	; (e8e4 <ll_tx_mem_enqueue+0xb4>)
    e8b6:	9105      	str	r1, [sp, #20]
    e8b8:	3207      	adds	r2, #7
    e8ba:	2101      	movs	r1, #1
    e8bc:	9006      	str	r0, [sp, #24]
    e8be:	9304      	str	r3, [sp, #16]
    e8c0:	9103      	str	r1, [sp, #12]
    e8c2:	9302      	str	r3, [sp, #8]
    e8c4:	9301      	str	r3, [sp, #4]
    e8c6:	9300      	str	r3, [sp, #0]
    e8c8:	4618      	mov	r0, r3
    e8ca:	b2d2      	uxtb	r2, r2
    e8cc:	2103      	movs	r1, #3
    e8ce:	f7f8 f81f 	bl	6910 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e8d2:	f030 0302 	bics.w	r3, r0, #2
    e8d6:	d1c7      	bne.n	e868 <ll_tx_mem_enqueue+0x38>
    e8d8:	e7db      	b.n	e892 <ll_tx_mem_enqueue+0x62>
		return 1;
    e8da:	2001      	movs	r0, #1
    e8dc:	e7da      	b.n	e894 <ll_tx_mem_enqueue+0x64>
    e8de:	bf00      	nop
    e8e0:	20000660 	.word	0x20000660
    e8e4:	000096e5 	.word	0x000096e5

0000e8e8 <ll_enc_req_send>:
{
    e8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e8ec:	4607      	mov	r7, r0
    e8ee:	4688      	mov	r8, r1
    e8f0:	4616      	mov	r6, r2
    e8f2:	4699      	mov	r9, r3
	conn = connection_get(handle);
    e8f4:	f7f9 ff58 	bl	87a8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e8f8:	4605      	mov	r5, r0
    e8fa:	b910      	cbnz	r0, e902 <ll_enc_req_send+0x1a>
			return 1;
    e8fc:	2001      	movs	r0, #1
    e8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e902:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e906:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e90a:	429a      	cmp	r2, r3
    e90c:	d1f6      	bne.n	e8fc <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
    e90e:	f7ff ff83 	bl	e818 <ll_tx_mem_acquire>
	if (node_tx) {
    e912:	4604      	mov	r4, r0
    e914:	2800      	cmp	r0, #0
    e916:	d0f1      	beq.n	e8fc <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    e918:	2210      	movs	r2, #16
    e91a:	4649      	mov	r1, r9
    e91c:	f105 0084 	add.w	r0, r5, #132	; 0x84
    e920:	f7f3 f992 	bl	1c48 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
    e924:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    e928:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    e92c:	d124      	bne.n	e978 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    e92e:	7923      	ldrb	r3, [r4, #4]
    e930:	f043 0303 	orr.w	r3, r3, #3
    e934:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
    e936:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    e938:	2208      	movs	r2, #8
			pdu_data_tx->len =
    e93a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
    e93c:	2303      	movs	r3, #3
    e93e:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    e940:	4641      	mov	r1, r8
    e942:	18a0      	adds	r0, r4, r2
    e944:	f7f3 f980 	bl	1c48 <memcpy>
			enc_req->ediv[0] = ediv[0];
    e948:	7833      	ldrb	r3, [r6, #0]
    e94a:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
    e94c:	7873      	ldrb	r3, [r6, #1]
    e94e:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
    e950:	2108      	movs	r1, #8
    e952:	f104 0012 	add.w	r0, r4, #18
    e956:	f7f8 f939 	bl	6bcc <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
    e95a:	2104      	movs	r1, #4
    e95c:	f104 001a 	add.w	r0, r4, #26
    e960:	f7f8 f934 	bl	6bcc <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
    e964:	4621      	mov	r1, r4
    e966:	4638      	mov	r0, r7
    e968:	f7ff ff62 	bl	e830 <ll_tx_mem_enqueue>
    e96c:	2601      	movs	r6, #1
    e96e:	b1d0      	cbz	r0, e9a6 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
    e970:	4620      	mov	r0, r4
    e972:	f7ff ff57 	bl	e824 <ll_tx_mem_release>
    e976:	e7c1      	b.n	e8fc <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
    e978:	2b30      	cmp	r3, #48	; 0x30
    e97a:	d1f9      	bne.n	e970 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
    e97c:	2208      	movs	r2, #8
    e97e:	4641      	mov	r1, r8
    e980:	f105 007a 	add.w	r0, r5, #122	; 0x7a
    e984:	f7f3 f960 	bl	1c48 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
    e988:	7833      	ldrb	r3, [r6, #0]
    e98a:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
    e98e:	7873      	ldrb	r3, [r6, #1]
    e990:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    e994:	7923      	ldrb	r3, [r4, #4]
    e996:	f043 0303 	orr.w	r3, r3, #3
    e99a:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    e99c:	2301      	movs	r3, #1
    e99e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
    e9a0:	230a      	movs	r3, #10
    e9a2:	71e3      	strb	r3, [r4, #7]
    e9a4:	e7de      	b.n	e964 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
    e9a6:	2303      	movs	r3, #3
    e9a8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
    e9ac:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
    e9b0:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
    e9b4:	3301      	adds	r3, #1
    e9b6:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
    e9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000e9c0 <radio_scan_enable>:
{
    e9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
    e9c4:	4c68      	ldr	r4, [pc, #416]	; (eb68 <radio_scan_enable+0x1a8>)
    e9c6:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
    e9ca:	b08e      	sub	sp, #56	; 0x38
    e9cc:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
    e9ce:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e9d2:	f04f 0302 	mov.w	r3, #2
{
    e9d6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e9d8:	930b      	str	r3, [sp, #44]	; 0x2c
{
    e9da:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    e9dc:	d003      	beq.n	e9e6 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e9de:	200c      	movs	r0, #12
}
    e9e0:	b00e      	add	sp, #56	; 0x38
    e9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    e9e6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
    e9ea:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
    e9ee:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
    e9f2:	0840      	lsrs	r0, r0, #1
    e9f4:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
    e9f8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    e9fc:	f360 0200 	bfi	r2, r0, #0, #1
    ea00:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
    ea04:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
    ea08:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
    ea0c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    ea10:	2206      	movs	r2, #6
    ea12:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
    ea16:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    ea1a:	4e54      	ldr	r6, [pc, #336]	; (eb6c <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    ea1c:	f7f3 f914 	bl	1c48 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    ea20:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    ea24:	f04f 0991 	mov.w	r9, #145	; 0x91
    ea28:	fba2 0106 	umull	r0, r1, r2, r6
    ea2c:	fb09 1102 	mla	r1, r9, r2, r1
    ea30:	a34b      	add	r3, pc, #300	; (adr r3, eb60 <radio_scan_enable+0x1a0>)
    ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea36:	f7f1 fbed 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    ea3a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    ea3e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
    ea42:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    ea46:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
    ea4a:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ea4e:	b2ba      	uxth	r2, r7
    ea50:	fba2 6706 	umull	r6, r7, r2, r6
    ea54:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
    ea58:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
    ea5c:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
    ea5e:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
    ea62:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
    ea66:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
    ea6a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ea6e:	a33c      	add	r3, pc, #240	; (adr r3, eb60 <radio_scan_enable+0x1a0>)
    ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea74:	4630      	mov	r0, r6
    ea76:	4639      	mov	r1, r7
    ea78:	f7f1 fbcc 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
    ea7c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
    ea80:	459a      	cmp	sl, r3
    ea82:	bf94      	ite	ls
    ea84:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
    ea88:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
    ea8c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ea90:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
    ea92:	bf38      	it	cc
    ea94:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
    ea98:	f7f8 f858 	bl	6b4c <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
    ea9c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
    eaa0:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
    eaa2:	2b00      	cmp	r3, #0
    eaa4:	d045      	beq.n	eb32 <radio_scan_enable+0x172>
		us_offset = 0;
    eaa6:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    eaa8:	980c      	ldr	r0, [sp, #48]	; 0x30
    eaaa:	4931      	ldr	r1, [pc, #196]	; (eb70 <radio_scan_enable+0x1b0>)
    eaac:	a32c      	add	r3, pc, #176	; (adr r3, eb60 <radio_scan_enable+0x1a0>)
    eaae:	e9d3 2300 	ldrd	r2, r3, [r3]
    eab2:	fba0 0101 	umull	r0, r1, r0, r1
    eab6:	f7f1 fbad 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaba:	ab0b      	add	r3, sp, #44	; 0x2c
    eabc:	9308      	str	r3, [sp, #32]
    eabe:	4b2d      	ldr	r3, [pc, #180]	; (eb74 <radio_scan_enable+0x1b4>)
    eac0:	9307      	str	r3, [sp, #28]
    eac2:	4b2d      	ldr	r3, [pc, #180]	; (eb78 <radio_scan_enable+0x1b8>)
    eac4:	9305      	str	r3, [sp, #20]
    eac6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    eaca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eace:	4443      	add	r3, r8
    ead0:	2500      	movs	r5, #0
    ead2:	4482      	add	sl, r0
    ead4:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    ead6:	4630      	mov	r0, r6
    ead8:	a321      	add	r3, pc, #132	; (adr r3, eb60 <radio_scan_enable+0x1a0>)
    eada:	e9d3 2300 	ldrd	r2, r3, [r3]
    eade:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eae0:	9506      	str	r5, [sp, #24]
    eae2:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    eae4:	f7f1 fb96 	bl	214 <__aeabi_uldivmod>
    eae8:	4610      	mov	r0, r2
    eaea:	4619      	mov	r1, r3
    eaec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eaf0:	2300      	movs	r3, #0
    eaf2:	f7f1 fb8f 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaf6:	e88d 0220 	stmia.w	sp, {r5, r9}
    eafa:	9002      	str	r0, [sp, #8]
    eafc:	4653      	mov	r3, sl
    eafe:	2206      	movs	r2, #6
    eb00:	2103      	movs	r1, #3
    eb02:	4628      	mov	r0, r5
    eb04:	f7f7 feb4 	bl	6870 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    eb08:	2802      	cmp	r0, #2
    eb0a:	d023      	beq.n	eb54 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    eb0c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    eb0e:	2d00      	cmp	r5, #0
    eb10:	f47f af65 	bne.w	e9de <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
    eb14:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    eb18:	f043 0301 	orr.w	r3, r3, #1
    eb1c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
    eb20:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    eb24:	2b00      	cmp	r3, #0
    eb26:	db02      	blt.n	eb2e <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
    eb28:	2002      	movs	r0, #2
    eb2a:	f000 fd8f 	bl	f64c <ll_adv_scan_state_cb>
	return 0;
    eb2e:	4628      	mov	r0, r5
    eb30:	e756      	b.n	e9e0 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    eb32:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
    eb36:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    eb38:	aa0d      	add	r2, sp, #52	; 0x34
    eb3a:	ab0c      	add	r3, sp, #48	; 0x30
    eb3c:	4441      	add	r1, r8
    eb3e:	2003      	movs	r0, #3
    eb40:	f7fa f962 	bl	8e08 <sched_after_mstr_free_slot_get>
		if (us_offset) {
    eb44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eb46:	2b00      	cmp	r3, #0
    eb48:	d0ae      	beq.n	eaa8 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
    eb4a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    eb4e:	e7ab      	b.n	eaa8 <radio_scan_enable+0xe8>
			cpu_sleep();
    eb50:	f7f9 fc44 	bl	83dc <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    eb54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eb56:	2b02      	cmp	r3, #2
    eb58:	d0fa      	beq.n	eb50 <radio_scan_enable+0x190>
    eb5a:	e7d7      	b.n	eb0c <radio_scan_enable+0x14c>
    eb5c:	f3af 8000 	nop.w
    eb60:	1afd498d 	.word	0x1afd498d
    eb64:	00000007 	.word	0x00000007
    eb68:	20000660 	.word	0x20000660
    eb6c:	84e72a00 	.word	0x84e72a00
    eb70:	3b9aca00 	.word	0x3b9aca00
    eb74:	00008421 	.word	0x00008421
    eb78:	0000997d 	.word	0x0000997d

0000eb7c <radio_scan_disable>:
{
    eb7c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
    eb7e:	2104      	movs	r1, #4
    eb80:	2006      	movs	r0, #6
    eb82:	f7f9 fe27 	bl	87d4 <role_disable>
	if (!status) {
    eb86:	4605      	mov	r5, r0
    eb88:	b9e8      	cbnz	r0, ebc6 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
    eb8a:	4c10      	ldr	r4, [pc, #64]	; (ebcc <radio_scan_disable+0x50>)
    eb8c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    eb90:	f360 0200 	bfi	r2, r0, #0, #1
    eb94:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
    eb98:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
    eb9c:	2a00      	cmp	r2, #0
    eb9e:	db01      	blt.n	eba4 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
    eba0:	f000 fd54 	bl	f64c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
    eba4:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
    eba8:	b15e      	cbz	r6, ebc2 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
    ebaa:	2300      	movs	r3, #0
    ebac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
    ebb0:	4907      	ldr	r1, [pc, #28]	; (ebd0 <radio_scan_disable+0x54>)
    ebb2:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    ebb6:	f7f7 f800 	bl	5bba <mem_release>
			mem_release(conn, &_radio.conn_free);
    ebba:	4906      	ldr	r1, [pc, #24]	; (ebd4 <radio_scan_disable+0x58>)
    ebbc:	4630      	mov	r0, r6
    ebbe:	f7f6 fffc 	bl	5bba <mem_release>
}
    ebc2:	4628      	mov	r0, r5
    ebc4:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    ebc6:	250c      	movs	r5, #12
    ebc8:	e7fb      	b.n	ebc2 <radio_scan_disable+0x46>
    ebca:	bf00      	nop
    ebcc:	20000660 	.word	0x20000660
    ebd0:	200007a8 	.word	0x200007a8
    ebd4:	2000076c 	.word	0x2000076c

0000ebd8 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
    ebd8:	4b03      	ldr	r3, [pc, #12]	; (ebe8 <ll_connect_disable+0x10>)
    ebda:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    ebde:	b10b      	cbz	r3, ebe4 <ll_connect_disable+0xc>
	status = radio_scan_disable();
    ebe0:	f7ff bfcc 	b.w	eb7c <radio_scan_disable>
}
    ebe4:	200c      	movs	r0, #12
    ebe6:	4770      	bx	lr
    ebe8:	20000660 	.word	0x20000660

0000ebec <ll_rx_dequeue>:
{
    ebec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    ebee:	4d34      	ldr	r5, [pc, #208]	; (ecc0 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    ebf0:	aa02      	add	r2, sp, #8
    ebf2:	2300      	movs	r3, #0
    ebf4:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    ebf8:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
    ebfc:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
    ec00:	f7f7 f82a 	bl	5c58 <memq_dequeue>
    ec04:	462c      	mov	r4, r5
	LL_ASSERT(link);
    ec06:	b928      	cbnz	r0, ec14 <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    ec08:	4040      	eors	r0, r0
    ec0a:	f380 8811 	msr	BASEPRI, r0
    ec0e:	f04f 0004 	mov.w	r0, #4
    ec12:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    ec14:	f505 71a4 	add.w	r1, r5, #328	; 0x148
    ec18:	f7f6 ffcf 	bl	5bba <mem_release>
	switch (node_rx->hdr.type) {
    ec1c:	9a01      	ldr	r2, [sp, #4]
    ec1e:	7911      	ldrb	r1, [r2, #4]
    ec20:	290c      	cmp	r1, #12
    ec22:	d8f1      	bhi.n	ec08 <ll_rx_dequeue+0x1c>
    ec24:	2301      	movs	r3, #1
    ec26:	408b      	lsls	r3, r1
    ec28:	f641 707e 	movw	r0, #8062	; 0x1f7e
    ec2c:	4203      	tst	r3, r0
    ec2e:	d111      	bne.n	ec54 <ll_rx_dequeue+0x68>
    ec30:	0618      	lsls	r0, r3, #24
    ec32:	d5e9      	bpl.n	ec08 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    ec34:	2906      	cmp	r1, #6
    ec36:	d134      	bne.n	eca2 <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    ec38:	7ad3      	ldrb	r3, [r2, #11]
    ec3a:	2b3c      	cmp	r3, #60	; 0x3c
    ec3c:	d015      	beq.n	ec6a <ll_rx_dequeue+0x7e>
    ec3e:	7b12      	ldrb	r2, [r2, #12]
    ec40:	bb8a      	cbnz	r2, eca6 <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    ec42:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ec46:	07d9      	lsls	r1, r3, #31
    ec48:	d5de      	bpl.n	ec08 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    ec4a:	f362 0300 	bfi	r3, r2, #0, #1
    ec4e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    ec52:	e01a      	b.n	ec8a <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    ec54:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
    ec58:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    ec5c:	3801      	subs	r0, #1
    ec5e:	4283      	cmp	r3, r0
    ec60:	dad2      	bge.n	ec08 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    ec62:	3301      	adds	r3, #1
    ec64:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		break;
    ec68:	e7e4      	b.n	ec34 <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    ec6a:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    ec6c:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
    ec70:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
    ec74:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    ec78:	2b00      	cmp	r3, #0
    ec7a:	dac5      	bge.n	ec08 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    ec7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ec80:	f36f 13c7 	bfc	r3, #7, #1
    ec84:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    ec88:	b97d      	cbnz	r5, ecaa <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    ec8a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
    ec8e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    ec92:	f000 0001 	and.w	r0, r0, #1
    ec96:	0040      	lsls	r0, r0, #1
		if (!bm) {
    ec98:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    ec9c:	d101      	bne.n	eca2 <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
    ec9e:	f000 fcd5 	bl	f64c <ll_adv_scan_state_cb>
}
    eca2:	b003      	add	sp, #12
    eca4:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    eca6:	2500      	movs	r5, #0
    eca8:	e7e4      	b.n	ec74 <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    ecaa:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
    ecae:	4905      	ldr	r1, [pc, #20]	; (ecc4 <ll_rx_dequeue+0xd8>)
    ecb0:	f7f6 ff83 	bl	5bba <mem_release>
			mem_release(conn, &_radio.conn_free);
    ecb4:	4904      	ldr	r1, [pc, #16]	; (ecc8 <ll_rx_dequeue+0xdc>)
    ecb6:	4628      	mov	r0, r5
    ecb8:	f7f6 ff7f 	bl	5bba <mem_release>
    ecbc:	e7e5      	b.n	ec8a <ll_rx_dequeue+0x9e>
    ecbe:	bf00      	nop
    ecc0:	20000660 	.word	0x20000660
    ecc4:	200007a8 	.word	0x200007a8
    ecc8:	2000076c 	.word	0x2000076c

0000eccc <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    eccc:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    ecce:	4c0b      	ldr	r4, [pc, #44]	; (ecfc <rtc0_nrf5_isr+0x30>)
    ecd0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    ecd4:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    ecd8:	b122      	cbz	r2, ece4 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    ecda:	2000      	movs	r0, #0
    ecdc:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    ece0:	f7f7 fdb4 	bl	684c <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    ece4:	b12d      	cbz	r5, ecf2 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    ece6:	2300      	movs	r3, #0
    ece8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    ecec:	2001      	movs	r0, #1
    ecee:	f7f7 fdad 	bl	684c <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    ecf2:	2000      	movs	r0, #0
}
    ecf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    ecf8:	f7f7 b85e 	b.w	5db8 <mayfly_run>
    ecfc:	4000b000 	.word	0x4000b000

0000ed00 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    ed00:	2001      	movs	r0, #1
    ed02:	f7f7 b859 	b.w	5db8 <mayfly_run>

0000ed06 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    ed06:	4668      	mov	r0, sp
    ed08:	f020 0107 	bic.w	r1, r0, #7
    ed0c:	468d      	mov	sp, r1
    ed0e:	b501      	push	{r0, lr}
	isr_radio();
    ed10:	f000 ffc8 	bl	fca4 <isr_radio>
	ISR_DIRECT_PM();
    ed14:	f7f2 fdee 	bl	18f4 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    ed18:	f7f2 fbd8 	bl	14cc <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    ed1c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    ed20:	4685      	mov	sp, r0
    ed22:	4770      	bx	lr

0000ed24 <radio_active_callback>:
{
    ed24:	4770      	bx	lr
	...

0000ed28 <radio_event_callback>:
	k_sem_give(sem_recv);
    ed28:	4b01      	ldr	r3, [pc, #4]	; (ed30 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    ed2a:	6818      	ldr	r0, [r3, #0]
    ed2c:	f002 bd5f 	b.w	117ee <_impl_k_sem_give>
    ed30:	20000f90 	.word	0x20000f90

0000ed34 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    ed34:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    ed36:	4b37      	ldr	r3, [pc, #220]	; (ee14 <ll_init+0xe0>)
{
    ed38:	b087      	sub	sp, #28
	sem_recv = sem_rx;
    ed3a:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    ed3c:	4836      	ldr	r0, [pc, #216]	; (ee18 <ll_init+0xe4>)
    ed3e:	f002 f86f 	bl	10e20 <device_get_binding>
	if (!clk_k32) {
    ed42:	b918      	cbnz	r0, ed4c <ll_init+0x18>
		return -ENODEV;
    ed44:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    ed48:	b007      	add	sp, #28
    ed4a:	bd30      	pop	{r4, r5, pc}
	return api->on(dev, sys);
    ed4c:	6843      	ldr	r3, [r0, #4]
    ed4e:	2101      	movs	r1, #1
    ed50:	681b      	ldr	r3, [r3, #0]
    ed52:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    ed54:	4831      	ldr	r0, [pc, #196]	; (ee1c <ll_init+0xe8>)
    ed56:	f002 f863 	bl	10e20 <device_get_binding>
	if (!entropy) {
    ed5a:	4604      	mov	r4, r0
    ed5c:	2800      	cmp	r0, #0
    ed5e:	d0f1      	beq.n	ed44 <ll_init+0x10>
	cntr_init();
    ed60:	f000 fe9a 	bl	fa98 <cntr_init>
	mayfly_init();
    ed64:	f7f6 ff88 	bl	5c78 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    ed68:	4b2d      	ldr	r3, [pc, #180]	; (ee20 <ll_init+0xec>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    ed6a:	2203      	movs	r2, #3
    ed6c:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    ed6e:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed70:	4a2c      	ldr	r2, [pc, #176]	; (ee24 <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    ed72:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    ed74:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    ed76:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    ed78:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    ed7a:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed7c:	9205      	str	r2, [sp, #20]
    ed7e:	4a2a      	ldr	r2, [pc, #168]	; (ee28 <ll_init+0xf4>)
    ed80:	9204      	str	r2, [sp, #16]
    ed82:	4a2a      	ldr	r2, [pc, #168]	; (ee2c <ll_init+0xf8>)
    ed84:	9203      	str	r2, [sp, #12]
    ed86:	4a2a      	ldr	r2, [pc, #168]	; (ee30 <ll_init+0xfc>)
    ed88:	9202      	str	r2, [sp, #8]
    ed8a:	220d      	movs	r2, #13
    ed8c:	9201      	str	r2, [sp, #4]
    ed8e:	9300      	str	r3, [sp, #0]
    ed90:	4a28      	ldr	r2, [pc, #160]	; (ee34 <ll_init+0x100>)
    ed92:	2304      	movs	r3, #4
    ed94:	f7f7 fd22 	bl	67dc <ticker_init>
	LL_ASSERT(!err);
    ed98:	b128      	cbz	r0, eda6 <ll_init+0x72>
    ed9a:	4040      	eors	r0, r0
    ed9c:	f380 8811 	msr	BASEPRI, r0
    eda0:	f04f 0004 	mov.w	r0, #4
    eda4:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    eda6:	4824      	ldr	r0, [pc, #144]	; (ee38 <ll_init+0x104>)
    eda8:	f002 f83a 	bl	10e20 <device_get_binding>
	if (!clk_m16) {
    edac:	2800      	cmp	r0, #0
    edae:	d0c9      	beq.n	ed44 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    edb0:	f44f 7357 	mov.w	r3, #860	; 0x35c
    edb4:	9305      	str	r3, [sp, #20]
    edb6:	4b21      	ldr	r3, [pc, #132]	; (ee3c <ll_init+0x108>)
    edb8:	9304      	str	r3, [sp, #16]
    edba:	9501      	str	r5, [sp, #4]
    edbc:	231b      	movs	r3, #27
    edbe:	2501      	movs	r5, #1
    edc0:	9303      	str	r3, [sp, #12]
    edc2:	9302      	str	r3, [sp, #8]
    edc4:	4622      	mov	r2, r4
    edc6:	9500      	str	r5, [sp, #0]
    edc8:	462b      	mov	r3, r5
    edca:	2107      	movs	r1, #7
    edcc:	f7fe ffd4 	bl	dd78 <radio_init>
	if (err) {
    edd0:	4604      	mov	r4, r0
    edd2:	b9e0      	cbnz	r0, ee0e <ll_init+0xda>
	ll_filter_reset(true);
    edd4:	4628      	mov	r0, r5
    edd6:	f000 fe17 	bl	fa08 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    edda:	4622      	mov	r2, r4
    eddc:	4621      	mov	r1, r4
    edde:	4628      	mov	r0, r5
    ede0:	f7f2 fd6e 	bl	18c0 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    ede4:	4622      	mov	r2, r4
    ede6:	4621      	mov	r1, r4
    ede8:	200b      	movs	r0, #11
    edea:	f7f2 fd69 	bl	18c0 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    edee:	4622      	mov	r2, r4
    edf0:	4621      	mov	r1, r4
    edf2:	2018      	movs	r0, #24
    edf4:	f7f2 fd64 	bl	18c0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    edf8:	4628      	mov	r0, r5
    edfa:	f7f2 fd2f 	bl	185c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    edfe:	200b      	movs	r0, #11
    ee00:	f7f2 fd2c 	bl	185c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    ee04:	2018      	movs	r0, #24
    ee06:	f7f2 fd29 	bl	185c <_arch_irq_enable>
	return 0;
    ee0a:	4620      	mov	r0, r4
    ee0c:	e79c      	b.n	ed48 <ll_init+0x14>
		return -ENOMEM;
    ee0e:	f06f 000b 	mvn.w	r0, #11
    ee12:	e799      	b.n	ed48 <ll_init+0x14>
    ee14:	20000f90 	.word	0x20000f90
    ee18:	00012408 	.word	0x00012408
    ee1c:	000123dc 	.word	0x000123dc
    ee20:	20000f70 	.word	0x20000f70
    ee24:	00010549 	.word	0x00010549
    ee28:	000104d1 	.word	0x000104d1
    ee2c:	000104b1 	.word	0x000104b1
    ee30:	20000d00 	.word	0x20000d00
    ee34:	20000bc0 	.word	0x20000bc0
    ee38:	00012413 	.word	0x00012413
    ee3c:	20000864 	.word	0x20000864

0000ee40 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
    ee40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee44:	4681      	mov	r9, r0
    ee46:	4688      	mov	r8, r1
    ee48:	4617      	mov	r7, r2
    ee4a:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
    ee4c:	f7ff f878 	bl	df40 <ll_scan_is_enabled>
    ee50:	b988      	cbnz	r0, ee76 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
    ee52:	4d0a      	ldr	r5, [pc, #40]	; (ee7c <ll_scan_params_set+0x3c>)
    ee54:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
    ee56:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
    ee5a:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
    ee5e:	4622      	mov	r2, r4
    ee60:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
    ee64:	4613      	mov	r3, r2
    ee66:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
    ee6a:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
    ee6c:	f362 1387 	bfi	r3, r2, #6, #2
    ee70:	712b      	strb	r3, [r5, #4]

	return 0;
    ee72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    ee76:	200c      	movs	r0, #12
}
    ee78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ee7c:	20000f94 	.word	0x20000f94

0000ee80 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
    ee80:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee82:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
    ee84:	b920      	cbnz	r0, ee90 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
    ee86:	b005      	add	sp, #20
    ee88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
    ee8c:	f7ff be76 	b.w	eb7c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
    ee90:	f7ff f856 	bl	df40 <ll_scan_is_enabled>
    ee94:	4606      	mov	r6, r0
    ee96:	bb40      	cbnz	r0, eeea <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
    ee98:	4c15      	ldr	r4, [pc, #84]	; (eef0 <ll_scan_enable+0x70>)
    ee9a:	7920      	ldrb	r0, [r4, #4]
    ee9c:	0980      	lsrs	r0, r0, #6
    ee9e:	f000 f9ef 	bl	f280 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
    eea2:	7923      	ldrb	r3, [r4, #4]
    eea4:	f013 0501 	ands.w	r5, r3, #1
    eea8:	d006      	beq.n	eeb8 <ll_scan_enable+0x38>
    eeaa:	f013 0520 	ands.w	r5, r3, #32
    eeae:	d003      	beq.n	eeb8 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
    eeb0:	4630      	mov	r0, r6
    eeb2:	f000 fb35 	bl	f520 <ll_rl_rpa_update>
		rpa_gen = 1;
    eeb6:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    eeb8:	7926      	ldrb	r6, [r4, #4]
    eeba:	f006 070f 	and.w	r7, r6, #15
    eebe:	f3c6 1600 	ubfx	r6, r6, #4, #1
    eec2:	2100      	movs	r1, #0
    eec4:	4630      	mov	r0, r6
    eec6:	f7f7 fe47 	bl	6b58 <ll_addr_get>
    eeca:	22ff      	movs	r2, #255	; 0xff
    eecc:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
    eece:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    eed0:	8823      	ldrh	r3, [r4, #0]
    eed2:	9502      	str	r5, [sp, #8]
    eed4:	0992      	lsrs	r2, r2, #6
    eed6:	9201      	str	r2, [sp, #4]
    eed8:	8862      	ldrh	r2, [r4, #2]
    eeda:	9200      	str	r2, [sp, #0]
    eedc:	4631      	mov	r1, r6
    eede:	4602      	mov	r2, r0
    eee0:	4638      	mov	r0, r7
    eee2:	f7ff fd6d 	bl	e9c0 <radio_scan_enable>
}
    eee6:	b005      	add	sp, #20
    eee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    eeea:	2000      	movs	r0, #0
    eeec:	e7fb      	b.n	eee6 <ll_scan_enable+0x66>
    eeee:	bf00      	nop
    eef0:	20000f94 	.word	0x20000f94

0000eef4 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
    eef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eef8:	b085      	sub	sp, #20
    eefa:	461e      	mov	r6, r3
    eefc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    ef00:	9303      	str	r3, [sp, #12]
    ef02:	4680      	mov	r8, r0
    ef04:	4689      	mov	r9, r1
    ef06:	4615      	mov	r5, r2
    ef08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ef0a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
    ef0e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
    ef12:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
    ef16:	f7ff f813 	bl	df40 <ll_scan_is_enabled>
    ef1a:	9b03      	ldr	r3, [sp, #12]
    ef1c:	bba0      	cbnz	r0, ef88 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
    ef1e:	9300      	str	r3, [sp, #0]
    ef20:	4652      	mov	r2, sl
    ef22:	465b      	mov	r3, fp
    ef24:	4639      	mov	r1, r7
    ef26:	4630      	mov	r0, r6
    ef28:	f7ff f82e 	bl	df88 <radio_connect_enable>
				      latency, timeout);

	if (status) {
    ef2c:	bb68      	cbnz	r0, ef8a <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
    ef2e:	4628      	mov	r0, r5
    ef30:	f000 f9a6 	bl	f280 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
    ef34:	b1dd      	cbz	r5, ef6e <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
    ef36:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    ef38:	1ea3      	subs	r3, r4, #2
    ef3a:	2b01      	cmp	r3, #1
    ef3c:	d822      	bhi.n	ef84 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
    ef3e:	2000      	movs	r0, #0
    ef40:	f000 faee 	bl	f520 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
    ef44:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
    ef48:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
    ef4a:	2100      	movs	r1, #0
    ef4c:	4620      	mov	r0, r4
    ef4e:	f7f7 fe03 	bl	6b58 <ll_addr_get>
    ef52:	4643      	mov	r3, r8
    ef54:	4602      	mov	r2, r0
    ef56:	4621      	mov	r1, r4
    ef58:	2000      	movs	r0, #0
    ef5a:	9711      	str	r7, [sp, #68]	; 0x44
    ef5c:	9610      	str	r6, [sp, #64]	; 0x40
    ef5e:	950f      	str	r5, [sp, #60]	; 0x3c
    ef60:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
    ef64:	b005      	add	sp, #20
    ef66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
    ef6a:	f7ff bd29 	b.w	e9c0 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
    ef6e:	f000 facf 	bl	f510 <ctrl_rl_enabled>
    ef72:	2800      	cmp	r0, #0
    ef74:	d0df      	beq.n	ef36 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
    ef76:	4639      	mov	r1, r7
    ef78:	462a      	mov	r2, r5
    ef7a:	4630      	mov	r0, r6
    ef7c:	f000 f9a2 	bl	f2c4 <ll_rl_find>
    ef80:	4607      	mov	r7, r0
    ef82:	e7d9      	b.n	ef38 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
    ef84:	2600      	movs	r6, #0
    ef86:	e7e0      	b.n	ef4a <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ef88:	200c      	movs	r0, #12
}
    ef8a:	b005      	add	sp, #20
    ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ef90 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
    ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef94:	4688      	mov	r8, r1
	int i;

	if (free) {
    ef96:	4615      	mov	r5, r2
    ef98:	b10a      	cbz	r2, ef9e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
    ef9a:	23ff      	movs	r3, #255	; 0xff
    ef9c:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    ef9e:	4e14      	ldr	r6, [pc, #80]	; (eff0 <wl_find+0x60>)
{
    efa0:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    efa2:	f000 0701 	and.w	r7, r0, #1
    efa6:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    efaa:	07da      	lsls	r2, r3, #31
    efac:	d51d      	bpl.n	efea <wl_find+0x5a>
    efae:	f3c3 0340 	ubfx	r3, r3, #1, #1
    efb2:	42bb      	cmp	r3, r7
    efb4:	d113      	bne.n	efde <wl_find+0x4e>
    efb6:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
    efba:	2206      	movs	r2, #6
    efbc:	4641      	mov	r1, r8
    efbe:	3002      	adds	r0, #2
    efc0:	f7f2 fe2d 	bl	1c1e <memcmp>
    efc4:	b910      	cbnz	r0, efcc <wl_find+0x3c>
			return i;
    efc6:	b2e0      	uxtb	r0, r4
    efc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    efcc:	b13d      	cbz	r5, efde <wl_find+0x4e>
    efce:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    efd2:	07db      	lsls	r3, r3, #31
    efd4:	d403      	bmi.n	efde <wl_find+0x4e>
    efd6:	782b      	ldrb	r3, [r5, #0]
    efd8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    efda:	bf08      	it	eq
    efdc:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
    efde:	3401      	adds	r4, #1
    efe0:	2c08      	cmp	r4, #8
    efe2:	d1e0      	bne.n	efa6 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
    efe4:	20ff      	movs	r0, #255	; 0xff
    efe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    efea:	2d00      	cmp	r5, #0
    efec:	d1f3      	bne.n	efd6 <wl_find+0x46>
    efee:	e7f6      	b.n	efde <wl_find+0x4e>
    eff0:	200011c7 	.word	0x200011c7

0000eff4 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
    eff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eff8:	4d1a      	ldr	r5, [pc, #104]	; (f064 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    effa:	f8df 8074 	ldr.w	r8, [pc, #116]	; f070 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
    effe:	1eae      	subs	r6, r5, #2
{
    f000:	2400      	movs	r4, #0
    f002:	4637      	mov	r7, r6
		if (!wl[i].taken) {
    f004:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    f008:	07d9      	lsls	r1, r3, #31
    f00a:	d524      	bpl.n	f056 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    f00c:	f898 3000 	ldrb.w	r3, [r8]
    f010:	b15b      	cbz	r3, f02a <filter_wl_update+0x36>
		j = wl[i].rl_idx;
    f012:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    f016:	2a07      	cmp	r2, #7
    f018:	d807      	bhi.n	f02a <filter_wl_update+0x36>
    f01a:	2328      	movs	r3, #40	; 0x28
    f01c:	4353      	muls	r3, r2
    f01e:	4a12      	ldr	r2, [pc, #72]	; (f068 <filter_wl_update+0x74>)
    f020:	5cd3      	ldrb	r3, [r2, r3]
    f022:	075a      	lsls	r2, r3, #29
    f024:	d501      	bpl.n	f02a <filter_wl_update+0x36>
    f026:	06db      	lsls	r3, r3, #27
    f028:	d515      	bpl.n	f056 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
    f02a:	4810      	ldr	r0, [pc, #64]	; (f06c <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    f02c:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
    f030:	2201      	movs	r2, #1
    f032:	fa02 f104 	lsl.w	r1, r2, r4
    f036:	7802      	ldrb	r2, [r0, #0]
    f038:	430a      	orrs	r2, r1
    f03a:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    f03c:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f040:	7842      	ldrb	r2, [r0, #1]
    f042:	40a3      	lsls	r3, r4
    f044:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f046:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f048:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f04a:	fb02 0004 	mla	r0, r2, r4, r0
    f04e:	4629      	mov	r1, r5
    f050:	3002      	adds	r0, #2
    f052:	f7f2 fdf9 	bl	1c48 <memcpy>
    f056:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
    f058:	2c08      	cmp	r4, #8
    f05a:	f105 0508 	add.w	r5, r5, #8
    f05e:	d1d1      	bne.n	f004 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
    f060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f064:	200011c9 	.word	0x200011c9
    f068:	20001054 	.word	0x20001054
    f06c:	20001207 	.word	0x20001207
    f070:	20001194 	.word	0x20001194

0000f074 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
    f074:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
    f076:	f7fe ff4f 	bl	df18 <ll_adv_is_enabled>
    f07a:	b928      	cbnz	r0, f088 <rl_access_check.constprop.1+0x14>
    f07c:	f7fe ff60 	bl	df40 <ll_scan_is_enabled>
    f080:	fab0 f080 	clz	r0, r0
    f084:	0940      	lsrs	r0, r0, #5
    f086:	bd08      	pop	{r3, pc}
    f088:	2000      	movs	r0, #0
}
    f08a:	bd08      	pop	{r3, pc}

0000f08c <filter_rl_update>:
{
    f08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
    f08e:	4e10      	ldr	r6, [pc, #64]	; (f0d0 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
    f090:	4d10      	ldr	r5, [pc, #64]	; (f0d4 <filter_rl_update+0x48>)
{
    f092:	2400      	movs	r4, #0
		if (rl[i].taken) {
    f094:	2728      	movs	r7, #40	; 0x28
    f096:	fb07 f104 	mul.w	r1, r7, r4
    f09a:	5c73      	ldrb	r3, [r6, r1]
    f09c:	07da      	lsls	r2, r3, #31
    f09e:	d513      	bpl.n	f0c8 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
    f0a0:	2201      	movs	r2, #1
    f0a2:	fa02 f004 	lsl.w	r0, r2, r4
    f0a6:	782a      	ldrb	r2, [r5, #0]
    f0a8:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    f0aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
    f0ae:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f0b0:	786a      	ldrb	r2, [r5, #1]
    f0b2:	40a3      	lsls	r3, r4
    f0b4:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f0b6:	2206      	movs	r2, #6
    f0b8:	3101      	adds	r1, #1
    f0ba:	fb02 5004 	mla	r0, r2, r4, r5
    f0be:	4431      	add	r1, r6
    f0c0:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f0c2:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f0c4:	f7f2 fdc0 	bl	1c48 <memcpy>
    f0c8:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f0ca:	2c08      	cmp	r4, #8
    f0cc:	d1e3      	bne.n	f096 <filter_rl_update+0xa>
}
    f0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0d0:	20001054 	.word	0x20001054
    f0d4:	20001195 	.word	0x20001195

0000f0d8 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
    f0d8:	2807      	cmp	r0, #7
    f0da:	d80c      	bhi.n	f0f6 <ctrl_lrpa_get+0x1e>
    f0dc:	2328      	movs	r3, #40	; 0x28
    f0de:	4358      	muls	r0, r3
    f0e0:	4a06      	ldr	r2, [pc, #24]	; (f0fc <ctrl_lrpa_get+0x24>)
    f0e2:	5c13      	ldrb	r3, [r2, r0]
    f0e4:	1811      	adds	r1, r2, r0
    f0e6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    f0ea:	b128      	cbz	r0, f0f8 <ctrl_lrpa_get+0x20>
    f0ec:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f0f0:	b110      	cbz	r0, f0f8 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
    f0f2:	6a48      	ldr	r0, [r1, #36]	; 0x24
    f0f4:	4770      	bx	lr
		return NULL;
    f0f6:	2000      	movs	r0, #0
}
    f0f8:	4770      	bx	lr
    f0fa:	bf00      	nop
    f0fc:	20001054 	.word	0x20001054

0000f100 <ctrl_irks_get>:
	*count = peer_irk_count;
    f100:	4b02      	ldr	r3, [pc, #8]	; (f10c <ctrl_irks_get+0xc>)
    f102:	781b      	ldrb	r3, [r3, #0]
    f104:	7003      	strb	r3, [r0, #0]
}
    f106:	4802      	ldr	r0, [pc, #8]	; (f110 <ctrl_irks_get+0x10>)
    f108:	4770      	bx	lr
    f10a:	bf00      	nop
    f10c:	20000fca 	.word	0x20000fca
    f110:	20000fd3 	.word	0x20000fd3

0000f114 <ctrl_rl_idx>:
	if (whitelist) {
    f114:	b188      	cbz	r0, f13a <ctrl_rl_idx+0x26>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
    f116:	2907      	cmp	r1, #7
    f118:	d905      	bls.n	f126 <ctrl_rl_idx+0x12>
		LL_ASSERT(rl[i].taken);
    f11a:	4040      	eors	r0, r0
    f11c:	f380 8811 	msr	BASEPRI, r0
    f120:	f04f 0004 	mov.w	r0, #4
    f124:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
    f126:	4b09      	ldr	r3, [pc, #36]	; (f14c <ctrl_rl_idx+0x38>)
    f128:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
    f12c:	07d2      	lsls	r2, r2, #31
    f12e:	d5f4      	bpl.n	f11a <ctrl_rl_idx+0x6>
		i = wl[devmatch_id].rl_idx;
    f130:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    f134:	7849      	ldrb	r1, [r1, #1]
}
    f136:	4608      	mov	r0, r1
    f138:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    f13a:	2907      	cmp	r1, #7
    f13c:	d8ed      	bhi.n	f11a <ctrl_rl_idx+0x6>
		LL_ASSERT(rl[i].taken);
    f13e:	2328      	movs	r3, #40	; 0x28
    f140:	434b      	muls	r3, r1
    f142:	4a03      	ldr	r2, [pc, #12]	; (f150 <ctrl_rl_idx+0x3c>)
    f144:	5cd3      	ldrb	r3, [r2, r3]
    f146:	07db      	lsls	r3, r3, #31
    f148:	d4f5      	bmi.n	f136 <ctrl_rl_idx+0x22>
    f14a:	e7e6      	b.n	f11a <ctrl_rl_idx+0x6>
    f14c:	200011c7 	.word	0x200011c7
    f150:	20001054 	.word	0x20001054

0000f154 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
    f154:	4b0a      	ldr	r3, [pc, #40]	; (f180 <ctrl_rl_irk_idx+0x2c>)
    f156:	781b      	ldrb	r3, [r3, #0]
    f158:	4283      	cmp	r3, r0
    f15a:	d805      	bhi.n	f168 <ctrl_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
    f15c:	4040      	eors	r0, r0
    f15e:	f380 8811 	msr	BASEPRI, r0
    f162:	f04f 0004 	mov.w	r0, #4
    f166:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
    f168:	4b06      	ldr	r3, [pc, #24]	; (f184 <ctrl_rl_irk_idx+0x30>)
    f16a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    f16c:	2807      	cmp	r0, #7
    f16e:	d8f5      	bhi.n	f15c <ctrl_rl_irk_idx+0x8>
	LL_ASSERT(rl[i].taken);
    f170:	2328      	movs	r3, #40	; 0x28
    f172:	4343      	muls	r3, r0
    f174:	4a04      	ldr	r2, [pc, #16]	; (f188 <ctrl_rl_irk_idx+0x34>)
    f176:	5cd3      	ldrb	r3, [r2, r3]
    f178:	07db      	lsls	r3, r3, #31
    f17a:	d5ef      	bpl.n	f15c <ctrl_rl_irk_idx+0x8>
}
    f17c:	4770      	bx	lr
    f17e:	bf00      	nop
    f180:	20000fca 	.word	0x20000fca
    f184:	20000fcb 	.word	0x20000fcb
    f188:	20001054 	.word	0x20001054

0000f18c <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
    f18c:	2807      	cmp	r0, #7
    f18e:	d80e      	bhi.n	f1ae <ctrl_irk_whitelisted+0x22>
	LL_ASSERT(rl[rl_idx].taken);
    f190:	2328      	movs	r3, #40	; 0x28
    f192:	4358      	muls	r0, r3
    f194:	4b07      	ldr	r3, [pc, #28]	; (f1b4 <ctrl_irk_whitelisted+0x28>)
    f196:	5c18      	ldrb	r0, [r3, r0]
    f198:	07c3      	lsls	r3, r0, #31
    f19a:	d405      	bmi.n	f1a8 <ctrl_irk_whitelisted+0x1c>
    f19c:	4040      	eors	r0, r0
    f19e:	f380 8811 	msr	BASEPRI, r0
    f1a2:	f04f 0004 	mov.w	r0, #4
    f1a6:	df02      	svc	2
	return rl[rl_idx].wl;
    f1a8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f1ac:	4770      	bx	lr
		return false;
    f1ae:	2000      	movs	r0, #0
}
    f1b0:	4770      	bx	lr
    f1b2:	bf00      	nop
    f1b4:	20001054 	.word	0x20001054

0000f1b8 <ctrl_filter_get>:
}
    f1b8:	4b03      	ldr	r3, [pc, #12]	; (f1c8 <ctrl_filter_get+0x10>)
    f1ba:	4a04      	ldr	r2, [pc, #16]	; (f1cc <ctrl_filter_get+0x14>)
    f1bc:	2800      	cmp	r0, #0
    f1be:	bf14      	ite	ne
    f1c0:	4610      	movne	r0, r2
    f1c2:	4618      	moveq	r0, r3
    f1c4:	4770      	bx	lr
    f1c6:	bf00      	nop
    f1c8:	20001195 	.word	0x20001195
    f1cc:	20001207 	.word	0x20001207

0000f1d0 <ll_wl_size_get>:
    f1d0:	2008      	movs	r0, #8
    f1d2:	4770      	bx	lr

0000f1d4 <ll_wl_clear>:
{
    f1d4:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f1d6:	f7fe fea7 	bl	df28 <radio_adv_filter_pol_get>
    f1da:	4604      	mov	r4, r0
    f1dc:	b110      	cbz	r0, f1e4 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f1de:	240c      	movs	r4, #12
}
    f1e0:	4620      	mov	r0, r4
    f1e2:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f1e4:	f7fe fec2 	bl	df6c <radio_scan_filter_pol_get>
    f1e8:	07c3      	lsls	r3, r0, #31
    f1ea:	d4f8      	bmi.n	f1de <ll_wl_clear+0xa>
		wl[i].taken = 0;
    f1ec:	4a07      	ldr	r2, [pc, #28]	; (f20c <ll_wl_clear+0x38>)
    f1ee:	4623      	mov	r3, r4
    f1f0:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    f1f4:	f36f 0100 	bfc	r1, #0, #1
    f1f8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    f1fc:	3301      	adds	r3, #1
    f1fe:	2b08      	cmp	r3, #8
    f200:	d1f6      	bne.n	f1f0 <ll_wl_clear+0x1c>
	wl_anon = 0;
    f202:	4b03      	ldr	r3, [pc, #12]	; (f210 <ll_wl_clear+0x3c>)
    f204:	2200      	movs	r2, #0
    f206:	701a      	strb	r2, [r3, #0]
	return 0;
    f208:	e7ea      	b.n	f1e0 <ll_wl_clear+0xc>
    f20a:	bf00      	nop
    f20c:	200011c7 	.word	0x200011c7
    f210:	200016b8 	.word	0x200016b8

0000f214 <ll_wl_remove>:
{
    f214:	b538      	push	{r3, r4, r5, lr}
    f216:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f218:	f7fe fe86 	bl	df28 <radio_adv_filter_pol_get>
    f21c:	4604      	mov	r4, r0
    f21e:	b110      	cbz	r0, f226 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f220:	240c      	movs	r4, #12
}
    f222:	4620      	mov	r0, r4
    f224:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f226:	f7fe fea1 	bl	df6c <radio_scan_filter_pol_get>
    f22a:	07c3      	lsls	r3, r0, #31
    f22c:	d4f8      	bmi.n	f220 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    f22e:	7828      	ldrb	r0, [r5, #0]
    f230:	28ff      	cmp	r0, #255	; 0xff
    f232:	d102      	bne.n	f23a <ll_wl_remove+0x26>
		wl_anon = 0;
    f234:	4b0f      	ldr	r3, [pc, #60]	; (f274 <ll_wl_remove+0x60>)
    f236:	701c      	strb	r4, [r3, #0]
		return 0;
    f238:	e7f3      	b.n	f222 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
    f23a:	4622      	mov	r2, r4
    f23c:	1c69      	adds	r1, r5, #1
    f23e:	f7ff fea7 	bl	ef90 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    f242:	2807      	cmp	r0, #7
    f244:	d813      	bhi.n	f26e <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
    f246:	4b0c      	ldr	r3, [pc, #48]	; (f278 <ll_wl_remove+0x64>)
    f248:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    f24c:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
    f24e:	2d07      	cmp	r5, #7
    f250:	d806      	bhi.n	f260 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
    f252:	2228      	movs	r2, #40	; 0x28
    f254:	4909      	ldr	r1, [pc, #36]	; (f27c <ll_wl_remove+0x68>)
    f256:	436a      	muls	r2, r5
    f258:	5c8d      	ldrb	r5, [r1, r2]
    f25a:	f364 1545 	bfi	r5, r4, #5, #1
    f25e:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
    f260:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
    f264:	f36f 0200 	bfc	r2, #0, #1
    f268:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
    f26c:	e7d9      	b.n	f222 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f26e:	2402      	movs	r4, #2
    f270:	e7d7      	b.n	f222 <ll_wl_remove+0xe>
    f272:	bf00      	nop
    f274:	200016b8 	.word	0x200016b8
    f278:	200011c7 	.word	0x200011c7
    f27c:	20001054 	.word	0x20001054

0000f280 <ll_filters_scan_update>:
{
    f280:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
    f282:	4b0d      	ldr	r3, [pc, #52]	; (f2b8 <ll_filters_scan_update+0x38>)
    f284:	2200      	movs	r2, #0
    f286:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
    f288:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
    f28a:	07c3      	lsls	r3, r0, #31
    f28c:	d504      	bpl.n	f298 <ll_filters_scan_update+0x18>
    f28e:	f7fe fe4b 	bl	df28 <radio_adv_filter_pol_get>
    f292:	b908      	cbnz	r0, f298 <ll_filters_scan_update+0x18>
		filter_wl_update();
    f294:	f7ff feae 	bl	eff4 <filter_wl_update>
	filter->enable_bitmask = 0;
    f298:	4b08      	ldr	r3, [pc, #32]	; (f2bc <ll_filters_scan_update+0x3c>)
    f29a:	2200      	movs	r2, #0
    f29c:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
    f29e:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
    f2a0:	4b07      	ldr	r3, [pc, #28]	; (f2c0 <ll_filters_scan_update+0x40>)
    f2a2:	781b      	ldrb	r3, [r3, #0]
    f2a4:	b133      	cbz	r3, f2b4 <ll_filters_scan_update+0x34>
    f2a6:	f7fe fe37 	bl	df18 <ll_adv_is_enabled>
    f2aa:	b918      	cbnz	r0, f2b4 <ll_filters_scan_update+0x34>
}
    f2ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
    f2b0:	f7ff beec 	b.w	f08c <filter_rl_update>
    f2b4:	bd08      	pop	{r3, pc}
    f2b6:	bf00      	nop
    f2b8:	20001207 	.word	0x20001207
    f2bc:	20001195 	.word	0x20001195
    f2c0:	20001194 	.word	0x20001194

0000f2c4 <ll_rl_find>:
{
    f2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f2c8:	468a      	mov	sl, r1
	if (free) {
    f2ca:	4614      	mov	r4, r2
    f2cc:	b10a      	cbz	r2, f2d2 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
    f2ce:	23ff      	movs	r3, #255	; 0xff
    f2d0:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f2d2:	f8df 8054 	ldr.w	r8, [pc, #84]	; f328 <ll_rl_find+0x64>
{
    f2d6:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f2d8:	f000 0901 	and.w	r9, r0, #1
    f2dc:	2628      	movs	r6, #40	; 0x28
    f2de:	436e      	muls	r6, r5
    f2e0:	b2ef      	uxtb	r7, r5
    f2e2:	f818 3006 	ldrb.w	r3, [r8, r6]
    f2e6:	07da      	lsls	r2, r3, #31
    f2e8:	d51a      	bpl.n	f320 <ll_rl_find+0x5c>
    f2ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f2ee:	454b      	cmp	r3, r9
    f2f0:	d10f      	bne.n	f312 <ll_rl_find+0x4e>
    f2f2:	1c70      	adds	r0, r6, #1
    f2f4:	2206      	movs	r2, #6
    f2f6:	4651      	mov	r1, sl
    f2f8:	4440      	add	r0, r8
    f2fa:	f7f2 fc90 	bl	1c1e <memcmp>
    f2fe:	b160      	cbz	r0, f31a <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    f300:	b13c      	cbz	r4, f312 <ll_rl_find+0x4e>
    f302:	f818 3006 	ldrb.w	r3, [r8, r6]
    f306:	07db      	lsls	r3, r3, #31
    f308:	d403      	bmi.n	f312 <ll_rl_find+0x4e>
    f30a:	7823      	ldrb	r3, [r4, #0]
    f30c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    f30e:	bf08      	it	eq
    f310:	7027      	strbeq	r7, [r4, #0]
    f312:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f314:	2d08      	cmp	r5, #8
    f316:	d1e1      	bne.n	f2dc <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
    f318:	27ff      	movs	r7, #255	; 0xff
}
    f31a:	4638      	mov	r0, r7
    f31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    f320:	2c00      	cmp	r4, #0
    f322:	d1f2      	bne.n	f30a <ll_rl_find+0x46>
    f324:	e7f5      	b.n	f312 <ll_rl_find+0x4e>
    f326:	bf00      	nop
    f328:	20001054 	.word	0x20001054

0000f32c <ll_wl_add>:
{
    f32c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f330:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f332:	f7fe fdf9 	bl	df28 <radio_adv_filter_pol_get>
    f336:	4605      	mov	r5, r0
    f338:	b120      	cbz	r0, f344 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f33a:	250c      	movs	r5, #12
}
    f33c:	4628      	mov	r0, r5
    f33e:	b002      	add	sp, #8
    f340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f344:	f7fe fe12 	bl	df6c <radio_scan_filter_pol_get>
    f348:	07c3      	lsls	r3, r0, #31
    f34a:	d4f6      	bmi.n	f33a <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    f34c:	7838      	ldrb	r0, [r7, #0]
    f34e:	28ff      	cmp	r0, #255	; 0xff
    f350:	d103      	bne.n	f35a <ll_wl_add+0x2e>
		wl_anon = 1;
    f352:	4b1f      	ldr	r3, [pc, #124]	; (f3d0 <ll_wl_add+0xa4>)
    f354:	2201      	movs	r2, #1
    f356:	701a      	strb	r2, [r3, #0]
		return 0;
    f358:	e7f0      	b.n	f33c <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
    f35a:	f107 0801 	add.w	r8, r7, #1
    f35e:	f10d 0207 	add.w	r2, sp, #7
    f362:	4641      	mov	r1, r8
    f364:	f7ff fe14 	bl	ef90 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    f368:	2807      	cmp	r0, #7
    f36a:	d92d      	bls.n	f3c8 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
    f36c:	f89d 6007 	ldrb.w	r6, [sp, #7]
    f370:	2e07      	cmp	r6, #7
    f372:	d82b      	bhi.n	f3cc <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
    f374:	4c17      	ldr	r4, [pc, #92]	; (f3d4 <ll_wl_add+0xa8>)
    f376:	783a      	ldrb	r2, [r7, #0]
    f378:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
    f37c:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
    f380:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
    f384:	4641      	mov	r1, r8
    f386:	2206      	movs	r2, #6
    f388:	3002      	adds	r0, #2
    f38a:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    f38e:	f7f2 fc5b 	bl	1c48 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f392:	462a      	mov	r2, r5
    f394:	4641      	mov	r1, r8
    f396:	7838      	ldrb	r0, [r7, #0]
    f398:	f7ff ff94 	bl	f2c4 <ll_rl_find>
    f39c:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
    f39e:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
    f3a0:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
    f3a2:	d80e      	bhi.n	f3c2 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
    f3a4:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
    f3a6:	2328      	movs	r3, #40	; 0x28
    f3a8:	4a0b      	ldr	r2, [pc, #44]	; (f3d8 <ll_wl_add+0xac>)
    f3aa:	4358      	muls	r0, r3
    f3ac:	5c13      	ldrb	r3, [r2, r0]
    f3ae:	f043 0320 	orr.w	r3, r3, #32
    f3b2:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
    f3b4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
    f3b8:	f043 0301 	orr.w	r3, r3, #1
    f3bc:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    f3c0:	e7bc      	b.n	f33c <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
    f3c2:	22ff      	movs	r2, #255	; 0xff
    f3c4:	705a      	strb	r2, [r3, #1]
    f3c6:	e7f5      	b.n	f3b4 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
    f3c8:	2512      	movs	r5, #18
    f3ca:	e7b7      	b.n	f33c <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    f3cc:	2507      	movs	r5, #7
	return wl_add(addr);
    f3ce:	e7b5      	b.n	f33c <ll_wl_add+0x10>
    f3d0:	200016b8 	.word	0x200016b8
    f3d4:	200011c7 	.word	0x200011c7
    f3d8:	20001054 	.word	0x20001054

0000f3dc <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    f3dc:	4b0c      	ldr	r3, [pc, #48]	; (f410 <ctrl_rl_idx_allowed+0x34>)
    f3de:	781b      	ldrb	r3, [r3, #0]
    f3e0:	b19b      	cbz	r3, f40a <ctrl_rl_idx_allowed+0x2e>
    f3e2:	2907      	cmp	r1, #7
    f3e4:	d811      	bhi.n	f40a <ctrl_rl_idx_allowed+0x2e>
    f3e6:	b980      	cbnz	r0, f40a <ctrl_rl_idx_allowed+0x2e>
	LL_ASSERT(rl[rl_idx].taken);
    f3e8:	2328      	movs	r3, #40	; 0x28
    f3ea:	4359      	muls	r1, r3
    f3ec:	4b09      	ldr	r3, [pc, #36]	; (f414 <ctrl_rl_idx_allowed+0x38>)
    f3ee:	5c58      	ldrb	r0, [r3, r1]
    f3f0:	07c2      	lsls	r2, r0, #31
    f3f2:	d405      	bmi.n	f400 <ctrl_rl_idx_allowed+0x24>
    f3f4:	4040      	eors	r0, r0
    f3f6:	f380 8811 	msr	BASEPRI, r0
    f3fa:	f04f 0004 	mov.w	r0, #4
    f3fe:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    f400:	0743      	lsls	r3, r0, #29
    f402:	d502      	bpl.n	f40a <ctrl_rl_idx_allowed+0x2e>
    f404:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f408:	4770      	bx	lr
		return true;
    f40a:	2001      	movs	r0, #1
}
    f40c:	4770      	bx	lr
    f40e:	bf00      	nop
    f410:	20001194 	.word	0x20001194
    f414:	20001054 	.word	0x20001054

0000f418 <ll_rl_id_addr_get>:
{
    f418:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f41a:	2b07      	cmp	r3, #7
{
    f41c:	b430      	push	{r4, r5}
    f41e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f420:	d905      	bls.n	f42e <ll_rl_id_addr_get+0x16>
	LL_ASSERT(rl[rl_idx].taken);
    f422:	4040      	eors	r0, r0
    f424:	f380 8811 	msr	BASEPRI, r0
    f428:	f04f 0004 	mov.w	r0, #4
    f42c:	df02      	svc	2
    f42e:	2528      	movs	r5, #40	; 0x28
    f430:	4c08      	ldr	r4, [pc, #32]	; (f454 <ll_rl_id_addr_get+0x3c>)
    f432:	fb05 f203 	mul.w	r2, r5, r3
    f436:	5ca2      	ldrb	r2, [r4, r2]
    f438:	f012 0f01 	tst.w	r2, #1
    f43c:	d0f1      	beq.n	f422 <ll_rl_id_addr_get+0xa>
	*id_addr_type = rl[rl_idx].id_addr_type;
    f43e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    f442:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f444:	fb05 4103 	mla	r1, r5, r3, r4
    f448:	2206      	movs	r2, #6
    f44a:	3101      	adds	r1, #1
}
    f44c:	bc30      	pop	{r4, r5}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f44e:	f7f2 bbfb 	b.w	1c48 <memcpy>
    f452:	bf00      	nop
    f454:	20001054 	.word	0x20001054

0000f458 <ctrl_rl_addr_allowed>:
{
    f458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
    f45c:	4b1a      	ldr	r3, [pc, #104]	; (f4c8 <ctrl_rl_addr_allowed+0x70>)
    f45e:	781b      	ldrb	r3, [r3, #0]
    f460:	b37b      	cbz	r3, f4c2 <ctrl_rl_addr_allowed+0x6a>
    f462:	7813      	ldrb	r3, [r2, #0]
    f464:	2bff      	cmp	r3, #255	; 0xff
    f466:	d12c      	bne.n	f4c2 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    f468:	4e18      	ldr	r6, [pc, #96]	; (f4cc <ctrl_rl_addr_allowed+0x74>)
    f46a:	2400      	movs	r4, #0
    f46c:	f04f 0828 	mov.w	r8, #40	; 0x28
    f470:	46b6      	mov	lr, r6
    f472:	fb08 f304 	mul.w	r3, r8, r4
    f476:	fa5f fc84 	uxtb.w	ip, r4
    f47a:	5cf7      	ldrb	r7, [r6, r3]
    f47c:	f017 0f01 	tst.w	r7, #1
    f480:	eb06 0503 	add.w	r5, r6, r3
    f484:	d01a      	beq.n	f4bc <ctrl_rl_addr_allowed+0x64>
    f486:	f3c7 1780 	ubfx	r7, r7, #6, #1
    f48a:	4287      	cmp	r7, r0
    f48c:	d116      	bne.n	f4bc <ctrl_rl_addr_allowed+0x64>
    f48e:	3306      	adds	r3, #6
    f490:	1e4f      	subs	r7, r1, #1
    f492:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
    f494:	f815 af01 	ldrb.w	sl, [r5, #1]!
    f498:	f817 9f01 	ldrb.w	r9, [r7, #1]!
    f49c:	45ca      	cmp	sl, r9
    f49e:	d10d      	bne.n	f4bc <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
    f4a0:	429d      	cmp	r5, r3
    f4a2:	d1f7      	bne.n	f494 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
    f4a4:	2328      	movs	r3, #40	; 0x28
    f4a6:	435c      	muls	r4, r3
				*rl_idx = i;
    f4a8:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
    f4ac:	f81e 0004 	ldrb.w	r0, [lr, r4]
    f4b0:	0743      	lsls	r3, r0, #29
    f4b2:	d506      	bpl.n	f4c2 <ctrl_rl_addr_allowed+0x6a>
    f4b4:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f4bc:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f4be:	2c08      	cmp	r4, #8
    f4c0:	d1d7      	bne.n	f472 <ctrl_rl_addr_allowed+0x1a>
    f4c2:	2001      	movs	r0, #1
}
    f4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f4c8:	20001194 	.word	0x20001194
    f4cc:	20001054 	.word	0x20001054

0000f4d0 <ctrl_rl_addr_resolve>:
{
    f4d0:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
    f4d2:	4c0d      	ldr	r4, [pc, #52]	; (f508 <ctrl_rl_addr_resolve+0x38>)
    f4d4:	7824      	ldrb	r4, [r4, #0]
    f4d6:	b1a4      	cbz	r4, f502 <ctrl_rl_addr_resolve+0x32>
    f4d8:	2a07      	cmp	r2, #7
    f4da:	d812      	bhi.n	f502 <ctrl_rl_addr_resolve+0x32>
    f4dc:	2528      	movs	r5, #40	; 0x28
    f4de:	4c0b      	ldr	r4, [pc, #44]	; (f50c <ctrl_rl_addr_resolve+0x3c>)
    f4e0:	fb05 f602 	mul.w	r6, r5, r2
    f4e4:	5da6      	ldrb	r6, [r4, r6]
    f4e6:	0736      	lsls	r6, r6, #28
    f4e8:	d50b      	bpl.n	f502 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
    f4ea:	b150      	cbz	r0, f502 <ctrl_rl_addr_resolve+0x32>
    f4ec:	794b      	ldrb	r3, [r1, #5]
    f4ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f4f2:	2b40      	cmp	r3, #64	; 0x40
    f4f4:	d105      	bne.n	f502 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    f4f6:	fb05 4202 	mla	r2, r5, r2, r4
    f4fa:	1dd0      	adds	r0, r2, #7
}
    f4fc:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    f4fe:	f7f2 bc0f 	b.w	1d20 <bt_rpa_irk_matches>
}
    f502:	2000      	movs	r0, #0
    f504:	bc70      	pop	{r4, r5, r6}
    f506:	4770      	bx	lr
    f508:	20001194 	.word	0x20001194
    f50c:	20001054 	.word	0x20001054

0000f510 <ctrl_rl_enabled>:
	return rl_enable;
    f510:	4b02      	ldr	r3, [pc, #8]	; (f51c <ctrl_rl_enabled+0xc>)
    f512:	7818      	ldrb	r0, [r3, #0]
}
    f514:	3000      	adds	r0, #0
    f516:	bf18      	it	ne
    f518:	2001      	movne	r0, #1
    f51a:	4770      	bx	lr
    f51c:	20001194 	.word	0x20001194

0000f520 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
    f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f524:	b087      	sub	sp, #28
    f526:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    f528:	f002 f9be 	bl	118a8 <_impl_k_uptime_get>
    f52c:	4680      	mov	r8, r0
    f52e:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
    f530:	2c00      	cmp	r4, #0
    f532:	d141      	bne.n	f5b8 <ll_rl_rpa_update+0x98>
    f534:	4b37      	ldr	r3, [pc, #220]	; (f614 <ll_rl_rpa_update+0xf4>)
    f536:	e9d3 2300 	ldrd	r2, r3, [r3]
    f53a:	1c5c      	adds	r4, r3, #1
    f53c:	bf08      	it	eq
    f53e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    f542:	d039      	beq.n	f5b8 <ll_rl_rpa_update+0x98>
		   (now - rpa_last_ms >= rpa_timeout_ms);
    f544:	1a82      	subs	r2, r0, r2
    f546:	eb61 0303 	sbc.w	r3, r1, r3
    f54a:	4933      	ldr	r1, [pc, #204]	; (f618 <ll_rl_rpa_update+0xf8>)
    f54c:	6808      	ldr	r0, [r1, #0]
    f54e:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
    f550:	4282      	cmp	r2, r0
    f552:	418b      	sbcs	r3, r1
    f554:	bfac      	ite	ge
    f556:	2601      	movge	r6, #1
    f558:	2600      	movlt	r6, #0
    f55a:	4d30      	ldr	r5, [pc, #192]	; (f61c <ll_rl_rpa_update+0xfc>)
    f55c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; f624 <ll_rl_rpa_update+0x104>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    f560:	f1a5 0a07 	sub.w	sl, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
    f564:	2400      	movs	r4, #0
    f566:	4657      	mov	r7, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    f568:	2328      	movs	r3, #40	; 0x28
    f56a:	4363      	muls	r3, r4
    f56c:	f81a 3003 	ldrb.w	r3, [sl, r3]
    f570:	07d8      	lsls	r0, r3, #31
    f572:	d542      	bpl.n	f5fa <ll_rl_rpa_update+0xda>
    f574:	b90e      	cbnz	r6, f57a <ll_rl_rpa_update+0x5a>
    f576:	0799      	lsls	r1, r3, #30
    f578:	d43f      	bmi.n	f5fa <ll_rl_rpa_update+0xda>

			if (rl[i].pirk) {
    f57a:	2328      	movs	r3, #40	; 0x28
    f57c:	4363      	muls	r3, r4
    f57e:	5cfb      	ldrb	r3, [r7, r3]
    f580:	075a      	lsls	r2, r3, #29
    f582:	d51b      	bpl.n	f5bc <ll_rl_rpa_update+0x9c>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
    f584:	7c2a      	ldrb	r2, [r5, #16]
    f586:	4b26      	ldr	r3, [pc, #152]	; (f620 <ll_rl_rpa_update+0x100>)
    f588:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    f58c:	f103 0210 	add.w	r2, r3, #16
    f590:	f10d 0107 	add.w	r1, sp, #7
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
    f594:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    f598:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
    f59c:	429a      	cmp	r2, r3
    f59e:	d1f9      	bne.n	f594 <ll_rl_rpa_update+0x74>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
    f5a0:	f105 0117 	add.w	r1, r5, #23
    f5a4:	a802      	add	r0, sp, #8
    f5a6:	f7f2 fbce 	bl	1d46 <bt_rpa_create>
				LL_ASSERT(!err);
    f5aa:	b138      	cbz	r0, f5bc <ll_rl_rpa_update+0x9c>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
    f5ac:	4040      	eors	r0, r0
    f5ae:	f380 8811 	msr	BASEPRI, r0
    f5b2:	f04f 0004 	mov.w	r0, #4
    f5b6:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
    f5b8:	2601      	movs	r6, #1
    f5ba:	e7ce      	b.n	f55a <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
    f5bc:	2328      	movs	r3, #40	; 0x28
    f5be:	4363      	muls	r3, r4
    f5c0:	5cfb      	ldrb	r3, [r7, r3]
    f5c2:	071b      	lsls	r3, r3, #28
    f5c4:	d513      	bpl.n	f5ee <ll_rl_rpa_update+0xce>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
    f5c6:	a902      	add	r1, sp, #8
    f5c8:	4628      	mov	r0, r5
    f5ca:	f7f2 fbbc 	bl	1d46 <bt_rpa_create>
				LL_ASSERT(!err);
    f5ce:	2800      	cmp	r0, #0
    f5d0:	d1ec      	bne.n	f5ac <ll_rl_rpa_update+0x8c>
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
    f5d2:	ab02      	add	r3, sp, #8
    f5d4:	2206      	movs	r2, #6
    f5d6:	f8c5 301d 	str.w	r3, [r5, #29]
    f5da:	fb02 b304 	mla	r3, r2, r4, fp
    f5de:	4618      	mov	r0, r3
    f5e0:	a902      	add	r1, sp, #8
    f5e2:	9301      	str	r3, [sp, #4]
    f5e4:	f7f2 fb30 	bl	1c48 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
    f5ee:	2328      	movs	r3, #40	; 0x28
    f5f0:	4363      	muls	r3, r4
    f5f2:	5cfa      	ldrb	r2, [r7, r3]
    f5f4:	f042 0202 	orr.w	r2, r2, #2
    f5f8:	54fa      	strb	r2, [r7, r3]
    f5fa:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f5fc:	2c08      	cmp	r4, #8
    f5fe:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f602:	d1b1      	bne.n	f568 <ll_rl_rpa_update+0x48>
		}
	}

	if (all) {
    f604:	b116      	cbz	r6, f60c <ll_rl_rpa_update+0xec>
		rpa_last_ms = now;
    f606:	4b03      	ldr	r3, [pc, #12]	; (f614 <ll_rl_rpa_update+0xf4>)
    f608:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
    f60c:	b007      	add	sp, #28
    f60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f612:	bf00      	nop
    f614:	200016b0 	.word	0x200016b0
    f618:	200016e4 	.word	0x200016e4
    f61c:	2000105b 	.word	0x2000105b
    f620:	20000fd3 	.word	0x20000fd3
    f624:	20000f9a 	.word	0x20000f9a

0000f628 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
    f628:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
    f62a:	2001      	movs	r0, #1
    f62c:	f7ff ff78 	bl	f520 <ll_rl_rpa_update>
    f630:	4b03      	ldr	r3, [pc, #12]	; (f640 <rpa_timeout+0x18>)
    f632:	4904      	ldr	r1, [pc, #16]	; (f644 <rpa_timeout+0x1c>)
    f634:	681a      	ldr	r2, [r3, #0]
    f636:	4804      	ldr	r0, [pc, #16]	; (f648 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
    f638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f63c:	f002 bc32 	b.w	11ea4 <k_delayed_work_submit_to_queue>
    f640:	200016e4 	.word	0x200016e4
    f644:	200016bc 	.word	0x200016bc
    f648:	20001728 	.word	0x20001728

0000f64c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
    f64c:	4b07      	ldr	r3, [pc, #28]	; (f66c <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
    f64e:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
    f650:	b130      	cbz	r0, f660 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
    f652:	b14b      	cbz	r3, f668 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    f654:	4b06      	ldr	r3, [pc, #24]	; (f670 <ll_adv_scan_state_cb+0x24>)
    f656:	4907      	ldr	r1, [pc, #28]	; (f674 <ll_adv_scan_state_cb+0x28>)
    f658:	681a      	ldr	r2, [r3, #0]
    f65a:	4807      	ldr	r0, [pc, #28]	; (f678 <ll_adv_scan_state_cb+0x2c>)
    f65c:	f002 bc22 	b.w	11ea4 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
    f660:	b113      	cbz	r3, f668 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
    f662:	4804      	ldr	r0, [pc, #16]	; (f674 <ll_adv_scan_state_cb+0x28>)
    f664:	f002 bbba 	b.w	11ddc <k_delayed_work_cancel>
    f668:	4770      	bx	lr
    f66a:	bf00      	nop
    f66c:	20001194 	.word	0x20001194
    f670:	200016e4 	.word	0x200016e4
    f674:	200016bc 	.word	0x200016bc
    f678:	20001728 	.word	0x20001728

0000f67c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
    f67c:	2008      	movs	r0, #8
    f67e:	4770      	bx	lr

0000f680 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
    f680:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
    f682:	f7ff fcf7 	bl	f074 <rl_access_check.constprop.1>
    f686:	b178      	cbz	r0, f6a8 <ll_rl_clear+0x28>
		rl[i].taken = 0;
    f688:	4908      	ldr	r1, [pc, #32]	; (f6ac <ll_rl_clear+0x2c>)
    f68a:	2300      	movs	r3, #0
    f68c:	2428      	movs	r4, #40	; 0x28
    f68e:	fb04 f203 	mul.w	r2, r4, r3
    f692:	3301      	adds	r3, #1
    f694:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f696:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
    f698:	f36f 0000 	bfc	r0, #0, #1
    f69c:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f69e:	d1f6      	bne.n	f68e <ll_rl_clear+0xe>
	peer_irk_count = 0;
    f6a0:	4b03      	ldr	r3, [pc, #12]	; (f6b0 <ll_rl_clear+0x30>)
    f6a2:	2000      	movs	r0, #0
    f6a4:	7018      	strb	r0, [r3, #0]
    f6a6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f6a8:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
    f6aa:	bd10      	pop	{r4, pc}
    f6ac:	20001054 	.word	0x20001054
    f6b0:	20000fca 	.word	0x20000fca

0000f6b4 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
    f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6b8:	b085      	sub	sp, #20
    f6ba:	4607      	mov	r7, r0
    f6bc:	4689      	mov	r9, r1
    f6be:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
    f6c0:	f7ff fcd8 	bl	f074 <rl_access_check.constprop.1>
    f6c4:	2800      	cmp	r0, #0
    f6c6:	f000 8086 	beq.w	f7d6 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
    f6ca:	f107 0801 	add.w	r8, r7, #1
    f6ce:	f10d 020f 	add.w	r2, sp, #15
    f6d2:	4641      	mov	r1, r8
    f6d4:	7838      	ldrb	r0, [r7, #0]
    f6d6:	f7ff fdf5 	bl	f2c4 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
    f6da:	2807      	cmp	r0, #7
    f6dc:	d97d      	bls.n	f7da <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
    f6de:	f89d 500f 	ldrb.w	r5, [sp, #15]
    f6e2:	2d07      	cmp	r5, #7
    f6e4:	d87b      	bhi.n	f7de <ll_rl_add+0x12a>
    f6e6:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    f6ea:	4c3e      	ldr	r4, [pc, #248]	; (f7e4 <ll_rl_add+0x130>)
    f6ec:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
    f6f0:	2628      	movs	r6, #40	; 0x28
    f6f2:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    f6f4:	f10b 0001 	add.w	r0, fp, #1
    f6f8:	2206      	movs	r2, #6
    f6fa:	4641      	mov	r1, r8
    f6fc:	4420      	add	r0, r4
    f6fe:	f7f2 faa3 	bl	1c48 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
    f702:	7839      	ldrb	r1, [r7, #0]
    f704:	5da3      	ldrb	r3, [r4, r6]
    f706:	19a2      	adds	r2, r4, r6
    f708:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f70c:	4648      	mov	r0, r9
    f70e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
    f710:	9201      	str	r2, [sp, #4]
    f712:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f714:	f7f6 fa83 	bl	5c1e <mem_nz>
    f718:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f71a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f71c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f720:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f722:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f724:	f7f6 fa7b 	bl	5c1e <mem_nz>
    f728:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
    f72a:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f72c:	f000 0001 	and.w	r0, r0, #1
    f730:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
    f734:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f738:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
    f73a:	d138      	bne.n	f7ae <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
    f73c:	b158      	cbz	r0, f756 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
    f73e:	f10b 0007 	add.w	r0, fp, #7
    f742:	2210      	movs	r2, #16
    f744:	4651      	mov	r1, sl
    f746:	4420      	add	r0, r4
    f748:	f7f2 fa7e 	bl	1c48 <memcpy>
		rl[i].local_rpa = NULL;
    f74c:	2328      	movs	r3, #40	; 0x28
    f74e:	fb03 4305 	mla	r3, r3, r5, r4
    f752:	2200      	movs	r2, #0
    f754:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
    f756:	2628      	movs	r6, #40	; 0x28
    f758:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
    f75a:	f10b 0018 	add.w	r0, fp, #24
    f75e:	2206      	movs	r2, #6
    f760:	2100      	movs	r1, #0
    f762:	4420      	add	r0, r4
    f764:	f7f2 fa9c 	bl	1ca0 <memset>
	rl[i].rpas_ready = 0;
    f768:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
    f76a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    f76e:	f36f 1304 	bfc	r3, #4, #1
    f772:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
    f774:	2200      	movs	r2, #0
    f776:	4641      	mov	r1, r8
    f778:	7838      	ldrb	r0, [r7, #0]
    f77a:	f7ff fc09 	bl	ef90 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
    f77e:	2807      	cmp	r0, #7
    f780:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
    f782:	bf9d      	ittte	ls
    f784:	4a18      	ldrls	r2, [pc, #96]	; (f7e8 <ll_rl_add+0x134>)
		rl[i].wl = 1;
    f786:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
    f78a:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
    f78e:	f36f 1345 	bfchi	r3, #5, #1
    f792:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
    f794:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
    f798:	bf98      	it	ls
    f79a:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
    f79c:	435d      	muls	r5, r3

	return 0;
    f79e:	2000      	movs	r0, #0
	rl[i].taken = 1;
    f7a0:	5d63      	ldrb	r3, [r4, r5]
    f7a2:	f043 0301 	orr.w	r3, r3, #1
    f7a6:	5563      	strb	r3, [r4, r5]
}
    f7a8:	b005      	add	sp, #20
    f7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
    f7ae:	4b0f      	ldr	r3, [pc, #60]	; (f7ec <ll_rl_add+0x138>)
    f7b0:	7819      	ldrb	r1, [r3, #0]
    f7b2:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
    f7b4:	4a0e      	ldr	r2, [pc, #56]	; (f7f0 <ll_rl_add+0x13c>)
    f7b6:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
    f7b8:	1c4a      	adds	r2, r1, #1
    f7ba:	701a      	strb	r2, [r3, #0]
    f7bc:	4b0d      	ldr	r3, [pc, #52]	; (f7f4 <ll_rl_add+0x140>)
    f7be:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    f7c2:	f109 0210 	add.w	r2, r9, #16
    f7c6:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
    f7c8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    f7cc:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
    f7d0:	454a      	cmp	r2, r9
    f7d2:	d1f9      	bne.n	f7c8 <ll_rl_add+0x114>
    f7d4:	e7b2      	b.n	f73c <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f7d6:	200c      	movs	r0, #12
    f7d8:	e7e6      	b.n	f7a8 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
    f7da:	2012      	movs	r0, #18
    f7dc:	e7e4      	b.n	f7a8 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    f7de:	2007      	movs	r0, #7
    f7e0:	e7e2      	b.n	f7a8 <ll_rl_add+0xf4>
    f7e2:	bf00      	nop
    f7e4:	20001054 	.word	0x20001054
    f7e8:	200011c7 	.word	0x200011c7
    f7ec:	20000fca 	.word	0x20000fca
    f7f0:	20000fcb 	.word	0x20000fcb
    f7f4:	20000fd3 	.word	0x20000fd3

0000f7f8 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
    f7f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7fc:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
    f7fe:	f7ff fc39 	bl	f074 <rl_access_check.constprop.1>
    f802:	2800      	cmp	r0, #0
    f804:	d053      	beq.n	f8ae <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f806:	f109 0a01 	add.w	sl, r9, #1
    f80a:	2200      	movs	r2, #0
    f80c:	4651      	mov	r1, sl
    f80e:	f899 0000 	ldrb.w	r0, [r9]
    f812:	f7ff fd57 	bl	f2c4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f816:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f818:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
    f81a:	d84b      	bhi.n	f8b4 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
    f81c:	f04f 0b28 	mov.w	fp, #40	; 0x28
    f820:	4c26      	ldr	r4, [pc, #152]	; (f8bc <ll_rl_remove+0xc4>)
    f822:	fb0b f300 	mul.w	r3, fp, r0
    f826:	18e2      	adds	r2, r4, r3
    f828:	5ce3      	ldrb	r3, [r4, r3]
    f82a:	075b      	lsls	r3, r3, #29
    f82c:	d524      	bpl.n	f878 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    f82e:	4e24      	ldr	r6, [pc, #144]	; (f8c0 <ll_rl_remove+0xc8>)
    f830:	7835      	ldrb	r5, [r6, #0]
    f832:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
    f834:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    f838:	d01b      	beq.n	f872 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    f83a:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
    f83c:	42af      	cmp	r7, r5
    f83e:	d018      	beq.n	f872 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
    f840:	4820      	ldr	r0, [pc, #128]	; (f8c4 <ll_rl_remove+0xcc>)
    f842:	2210      	movs	r2, #16
    f844:	eb00 1105 	add.w	r1, r0, r5, lsl #4
    f848:	eb00 1007 	add.w	r0, r0, r7, lsl #4
    f84c:	f7f2 f9fc 	bl	1c48 <memcpy>
    f850:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    f852:	fb0b f103 	mul.w	r1, fp, r3
    f856:	1862      	adds	r2, r4, r1
    f858:	5c61      	ldrb	r1, [r4, r1]
    f85a:	f011 0f01 	tst.w	r1, #1
    f85e:	b2d8      	uxtb	r0, r3
    f860:	d021      	beq.n	f8a6 <ll_rl_remove+0xae>
    f862:	0749      	lsls	r1, r1, #29
    f864:	d51f      	bpl.n	f8a6 <ll_rl_remove+0xae>
    f866:	7dd1      	ldrb	r1, [r2, #23]
    f868:	42a9      	cmp	r1, r5
    f86a:	d11c      	bne.n	f8a6 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
    f86c:	4b16      	ldr	r3, [pc, #88]	; (f8c8 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
    f86e:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
    f870:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
    f872:	7833      	ldrb	r3, [r6, #0]
    f874:	3b01      	subs	r3, #1
    f876:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
    f878:	2200      	movs	r2, #0
    f87a:	4651      	mov	r1, sl
    f87c:	f899 0000 	ldrb.w	r0, [r9]
    f880:	f7ff fb86 	bl	ef90 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
    f884:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
    f886:	bf9f      	itttt	ls
    f888:	4b10      	ldrls	r3, [pc, #64]	; (f8cc <ll_rl_remove+0xd4>)
    f88a:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
    f88e:	23ff      	movls	r3, #255	; 0xff
    f890:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
    f892:	2028      	movs	r0, #40	; 0x28
    f894:	fb00 f008 	mul.w	r0, r0, r8
    f898:	5c23      	ldrb	r3, [r4, r0]
    f89a:	f36f 0300 	bfc	r3, #0, #1
    f89e:	5423      	strb	r3, [r4, r0]
		return 0;
    f8a0:	2000      	movs	r0, #0
    f8a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8a6:	3301      	adds	r3, #1
				for (k = 0;
    f8a8:	2b08      	cmp	r3, #8
    f8aa:	d1d2      	bne.n	f852 <ll_rl_remove+0x5a>
    f8ac:	e7e1      	b.n	f872 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f8ae:	200c      	movs	r0, #12
    f8b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f8b4:	2002      	movs	r0, #2
}
    f8b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8ba:	bf00      	nop
    f8bc:	20001054 	.word	0x20001054
    f8c0:	20000fca 	.word	0x20000fca
    f8c4:	20000fd3 	.word	0x20000fd3
    f8c8:	20000fcb 	.word	0x20000fcb
    f8cc:	200011c7 	.word	0x200011c7

0000f8d0 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
    f8d0:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
    f8d2:	795c      	ldrb	r4, [r3, #5]
    f8d4:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    f8d8:	2c40      	cmp	r4, #64	; 0x40
{
    f8da:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
    f8dc:	d117      	bne.n	f90e <ll_rl_crpa_set+0x3e>

		if (id_addr) {
    f8de:	b119      	cbz	r1, f8e8 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
    f8e0:	2200      	movs	r2, #0
    f8e2:	f7ff fcef 	bl	f2c4 <ll_rl_find>
    f8e6:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
    f8e8:	2a07      	cmp	r2, #7
    f8ea:	d810      	bhi.n	f90e <ll_rl_crpa_set+0x3e>
    f8ec:	2128      	movs	r1, #40	; 0x28
    f8ee:	4c08      	ldr	r4, [pc, #32]	; (f910 <ll_rl_crpa_set+0x40>)
    f8f0:	fb01 f302 	mul.w	r3, r1, r2
    f8f4:	5ce3      	ldrb	r3, [r4, r3]
    f8f6:	07db      	lsls	r3, r3, #31
    f8f8:	d509      	bpl.n	f90e <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    f8fa:	2018      	movs	r0, #24
    f8fc:	fb11 0002 	smlabb	r0, r1, r2, r0
    f900:	4420      	add	r0, r4
    f902:	4629      	mov	r1, r5
    f904:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
    f906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    f90a:	f7f2 b99d 	b.w	1c48 <memcpy>
    f90e:	bd70      	pop	{r4, r5, r6, pc}
    f910:	20001054 	.word	0x20001054

0000f914 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
    f914:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f916:	2200      	movs	r2, #0
{
    f918:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f91a:	1c41      	adds	r1, r0, #1
    f91c:	7800      	ldrb	r0, [r0, #0]
    f91e:	f7ff fcd1 	bl	f2c4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
    f922:	2807      	cmp	r0, #7
    f924:	d901      	bls.n	f92a <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f926:	2002      	movs	r0, #2
    f928:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
    f92a:	2428      	movs	r4, #40	; 0x28
    f92c:	2318      	movs	r3, #24
    f92e:	fb14 3000 	smlabb	r0, r4, r0, r3
    f932:	4c07      	ldr	r4, [pc, #28]	; (f950 <ll_rl_crpa_get+0x3c>)
    f934:	4404      	add	r4, r0
    f936:	2106      	movs	r1, #6
    f938:	4620      	mov	r0, r4
    f93a:	f7f6 f970 	bl	5c1e <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
    f93e:	2800      	cmp	r0, #0
    f940:	d0f1      	beq.n	f926 <ll_rl_crpa_get+0x12>
    f942:	2206      	movs	r2, #6
    f944:	4621      	mov	r1, r4
    f946:	4628      	mov	r0, r5
    f948:	f7f2 f97e 	bl	1c48 <memcpy>
			return 0;
    f94c:	2000      	movs	r0, #0
}
    f94e:	bd38      	pop	{r3, r4, r5, pc}
    f950:	20001054 	.word	0x20001054

0000f954 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
    f954:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f956:	2200      	movs	r2, #0
{
    f958:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f95a:	1c41      	adds	r1, r0, #1
    f95c:	7800      	ldrb	r0, [r0, #0]
    f95e:	f7ff fcb1 	bl	f2c4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f962:	2807      	cmp	r0, #7
    f964:	d80a      	bhi.n	f97c <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
    f966:	4b06      	ldr	r3, [pc, #24]	; (f980 <ll_rl_lrpa_get+0x2c>)
    f968:	2228      	movs	r2, #40	; 0x28
    f96a:	fb02 3000 	mla	r0, r2, r0, r3
    f96e:	2206      	movs	r2, #6
    f970:	6a41      	ldr	r1, [r0, #36]	; 0x24
    f972:	4620      	mov	r0, r4
    f974:	f7f2 f968 	bl	1c48 <memcpy>
		return 0;
    f978:	2000      	movs	r0, #0
    f97a:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f97c:	2002      	movs	r0, #2
}
    f97e:	bd10      	pop	{r4, pc}
    f980:	20001054 	.word	0x20001054

0000f984 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
    f984:	b510      	push	{r4, lr}
    f986:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
    f988:	f7ff fb74 	bl	f074 <rl_access_check.constprop.1>
    f98c:	b140      	cbz	r0, f9a0 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
    f98e:	b11c      	cbz	r4, f998 <ll_rl_enable+0x14>
    f990:	2c01      	cmp	r4, #1
    f992:	d001      	beq.n	f998 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
    f994:	2012      	movs	r0, #18
	}

	return 0;
}
    f996:	bd10      	pop	{r4, pc}
		rl_enable = 1;
    f998:	4b02      	ldr	r3, [pc, #8]	; (f9a4 <ll_rl_enable+0x20>)
    f99a:	701c      	strb	r4, [r3, #0]
	return 0;
    f99c:	2000      	movs	r0, #0
		break;
    f99e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f9a0:	200c      	movs	r0, #12
    f9a2:	bd10      	pop	{r4, pc}
    f9a4:	20001194 	.word	0x20001194

0000f9a8 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
    f9a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f9ac:	4358      	muls	r0, r3
    f9ae:	4b01      	ldr	r3, [pc, #4]	; (f9b4 <ll_rl_timeout_set+0xc>)
    f9b0:	6018      	str	r0, [r3, #0]
    f9b2:	4770      	bx	lr
    f9b4:	200016e4 	.word	0x200016e4

0000f9b8 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
    f9b8:	b538      	push	{r3, r4, r5, lr}
    f9ba:	4605      	mov	r5, r0
    f9bc:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
    f9be:	f7ff fb59 	bl	f074 <rl_access_check.constprop.1>
    f9c2:	b1d8      	cbz	r0, f9fc <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f9c4:	2200      	movs	r2, #0
    f9c6:	1c69      	adds	r1, r5, #1
    f9c8:	7828      	ldrb	r0, [r5, #0]
    f9ca:	f7ff fc7b 	bl	f2c4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f9ce:	2807      	cmp	r0, #7
    f9d0:	d816      	bhi.n	fa00 <ll_priv_mode_set+0x48>
		switch (mode) {
    f9d2:	b11c      	cbz	r4, f9dc <ll_priv_mode_set+0x24>
    f9d4:	2c01      	cmp	r4, #1
    f9d6:	d00a      	beq.n	f9ee <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
    f9d8:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
    f9da:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
    f9dc:	2328      	movs	r3, #40	; 0x28
    f9de:	4a09      	ldr	r2, [pc, #36]	; (fa04 <ll_priv_mode_set+0x4c>)
    f9e0:	4358      	muls	r0, r3
    f9e2:	5c13      	ldrb	r3, [r2, r0]
    f9e4:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
    f9e8:	5413      	strb	r3, [r2, r0]
	return 0;
    f9ea:	2000      	movs	r0, #0
			break;
    f9ec:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
    f9ee:	2328      	movs	r3, #40	; 0x28
    f9f0:	4a04      	ldr	r2, [pc, #16]	; (fa04 <ll_priv_mode_set+0x4c>)
    f9f2:	4358      	muls	r0, r3
    f9f4:	5c13      	ldrb	r3, [r2, r0]
    f9f6:	f043 0310 	orr.w	r3, r3, #16
    f9fa:	e7f5      	b.n	f9e8 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f9fc:	200c      	movs	r0, #12
    f9fe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fa00:	2002      	movs	r0, #2
    fa02:	bd38      	pop	{r3, r4, r5, pc}
    fa04:	20001054 	.word	0x20001054

0000fa08 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    fa08:	4a19      	ldr	r2, [pc, #100]	; (fa70 <ll_filter_reset+0x68>)
    fa0a:	2300      	movs	r3, #0
{
    fa0c:	b430      	push	{r4, r5}
	wl_anon = 0;
    fa0e:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
    fa10:	4a18      	ldr	r2, [pc, #96]	; (fa74 <ll_filter_reset+0x6c>)
    fa12:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    fa16:	f36f 0100 	bfc	r1, #0, #1
    fa1a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    fa1e:	3301      	adds	r3, #1
    fa20:	2b08      	cmp	r3, #8
    fa22:	d1f6      	bne.n	fa12 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
    fa24:	4a14      	ldr	r2, [pc, #80]	; (fa78 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    fa26:	4915      	ldr	r1, [pc, #84]	; (fa7c <ll_filter_reset+0x74>)
	rl_enable = 0;
    fa28:	2300      	movs	r3, #0
    fa2a:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    fa2c:	4a14      	ldr	r2, [pc, #80]	; (fa80 <ll_filter_reset+0x78>)
    fa2e:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
    fa30:	4a14      	ldr	r2, [pc, #80]	; (fa84 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
    fa32:	4915      	ldr	r1, [pc, #84]	; (fa88 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
    fa34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    fa38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    fa3c:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
    fa40:	2528      	movs	r5, #40	; 0x28
    fa42:	fb05 f203 	mul.w	r2, r5, r3
    fa46:	3301      	adds	r3, #1
    fa48:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fa4a:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
    fa4c:	f36f 0400 	bfc	r4, #0, #1
    fa50:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fa52:	d1f6      	bne.n	fa42 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
    fa54:	4b0d      	ldr	r3, [pc, #52]	; (fa8c <ll_filter_reset+0x84>)
    fa56:	2200      	movs	r2, #0
    fa58:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
    fa5a:	b120      	cbz	r0, fa66 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
    fa5c:	490c      	ldr	r1, [pc, #48]	; (fa90 <ll_filter_reset+0x88>)
    fa5e:	480d      	ldr	r0, [pc, #52]	; (fa94 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    fa60:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
    fa62:	f002 b9ab 	b.w	11dbc <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
    fa66:	480b      	ldr	r0, [pc, #44]	; (fa94 <ll_filter_reset+0x8c>)
}
    fa68:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
    fa6a:	f002 b9b7 	b.w	11ddc <k_delayed_work_cancel>
    fa6e:	bf00      	nop
    fa70:	200016b8 	.word	0x200016b8
    fa74:	200011c7 	.word	0x200011c7
    fa78:	20001194 	.word	0x20001194
    fa7c:	000dbba0 	.word	0x000dbba0
    fa80:	200016e4 	.word	0x200016e4
    fa84:	200016b0 	.word	0x200016b0
    fa88:	20001054 	.word	0x20001054
    fa8c:	20000fca 	.word	0x20000fca
    fa90:	0000f629 	.word	0x0000f629
    fa94:	200016bc 	.word	0x200016bc

0000fa98 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    fa98:	4b05      	ldr	r3, [pc, #20]	; (fab0 <cntr_init+0x18>)
    fa9a:	2200      	movs	r2, #0
    fa9c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    faa0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    faa4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    faa8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    faac:	4770      	bx	lr
    faae:	bf00      	nop
    fab0:	4000b000 	.word	0x4000b000

0000fab4 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    fab4:	4a04      	ldr	r2, [pc, #16]	; (fac8 <cntr_start+0x14>)
    fab6:	7813      	ldrb	r3, [r2, #0]
    fab8:	1c59      	adds	r1, r3, #1
    faba:	7011      	strb	r1, [r2, #0]
    fabc:	2001      	movs	r0, #1
    fabe:	b913      	cbnz	r3, fac6 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    fac0:	4a02      	ldr	r2, [pc, #8]	; (facc <cntr_start+0x18>)
    fac2:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    fac4:	4618      	mov	r0, r3
}
    fac6:	4770      	bx	lr
    fac8:	20001239 	.word	0x20001239
    facc:	4000b000 	.word	0x4000b000

0000fad0 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    fad0:	4b09      	ldr	r3, [pc, #36]	; (faf8 <cntr_stop+0x28>)
    fad2:	7818      	ldrb	r0, [r3, #0]
    fad4:	b928      	cbnz	r0, fae2 <cntr_stop+0x12>
    fad6:	4040      	eors	r0, r0
    fad8:	f380 8811 	msr	BASEPRI, r0
    fadc:	f04f 0004 	mov.w	r0, #4
    fae0:	df02      	svc	2

	if (--_refcount) {
    fae2:	3801      	subs	r0, #1
    fae4:	b2c0      	uxtb	r0, r0
    fae6:	7018      	strb	r0, [r3, #0]
    fae8:	2301      	movs	r3, #1
    faea:	b910      	cbnz	r0, faf2 <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    faec:	4a03      	ldr	r2, [pc, #12]	; (fafc <cntr_stop+0x2c>)
    faee:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    faf0:	4770      	bx	lr
		return 1;
    faf2:	4618      	mov	r0, r3
}
    faf4:	4770      	bx	lr
    faf6:	bf00      	nop
    faf8:	20001239 	.word	0x20001239
    fafc:	4000b000 	.word	0x4000b000

0000fb00 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    fb00:	4b01      	ldr	r3, [pc, #4]	; (fb08 <cntr_cnt_get+0x8>)
    fb02:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    fb06:	4770      	bx	lr
    fb08:	4000b000 	.word	0x4000b000

0000fb0c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    fb0c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    fb10:	4b01      	ldr	r3, [pc, #4]	; (fb18 <cntr_cmp_set+0xc>)
    fb12:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    fb16:	4770      	bx	lr
    fb18:	4000b000 	.word	0x4000b000

0000fb1c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    fb1c:	4b11      	ldr	r3, [pc, #68]	; (fb64 <do_ecb+0x48>)
{
    fb1e:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    fb20:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    fb22:	2500      	movs	r5, #0
    fb24:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    fb26:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    fb28:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    fb2c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    fb30:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    fb34:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    fb36:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    fb3a:	b934      	cbnz	r4, fb4a <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fb3c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    fb40:	b91c      	cbnz	r4, fb4a <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    fb42:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fb46:	2c00      	cmp	r4, #0
    fb48:	d1f5      	bne.n	fb36 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    fb4a:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    fb4c:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    fb50:	2c00      	cmp	r4, #0
    fb52:	d1e8      	bne.n	fb26 <do_ecb+0xa>
    fb54:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    fb58:	2e00      	cmp	r6, #0
    fb5a:	d0e4      	beq.n	fb26 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    fb5c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    fb60:	bd70      	pop	{r4, r5, r6, pc}
    fb62:	bf00      	nop
    fb64:	4000e000 	.word	0x4000e000

0000fb68 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    fb68:	b570      	push	{r4, r5, r6, lr}
    fb6a:	b08c      	sub	sp, #48	; 0x30
    fb6c:	460e      	mov	r6, r1
    fb6e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    fb70:	4601      	mov	r1, r0
    fb72:	2210      	movs	r2, #16
    fb74:	4668      	mov	r0, sp
{
    fb76:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    fb78:	f7f6 f842 	bl	5c00 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    fb7c:	2210      	movs	r2, #16
    fb7e:	eb0d 0002 	add.w	r0, sp, r2
    fb82:	4631      	mov	r1, r6
    fb84:	f7f6 f83c 	bl	5c00 <mem_rcopy>

	do_ecb(&ecb);
    fb88:	4668      	mov	r0, sp
    fb8a:	f7ff ffc7 	bl	fb1c <do_ecb>

	if (cipher_text_le) {
    fb8e:	b125      	cbz	r5, fb9a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    fb90:	2210      	movs	r2, #16
    fb92:	a908      	add	r1, sp, #32
    fb94:	4628      	mov	r0, r5
    fb96:	f7f6 f833 	bl	5c00 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    fb9a:	b124      	cbz	r4, fba6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    fb9c:	2210      	movs	r2, #16
    fb9e:	a908      	add	r1, sp, #32
    fba0:	4620      	mov	r0, r4
    fba2:	f7f2 f851 	bl	1c48 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    fba6:	b00c      	add	sp, #48	; 0x30
    fba8:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fbac <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    fbac:	4b07      	ldr	r3, [pc, #28]	; (fbcc <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    fbae:	4a08      	ldr	r2, [pc, #32]	; (fbd0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    fbb0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    fbb4:	4907      	ldr	r1, [pc, #28]	; (fbd4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    fbb6:	4a08      	ldr	r2, [pc, #32]	; (fbd8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    fbb8:	2800      	cmp	r0, #0
    fbba:	bf14      	ite	ne
    fbbc:	4610      	movne	r0, r2
    fbbe:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    fbc0:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    fbc2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    fbc6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fbca:	4770      	bx	lr
    fbcc:	4001f000 	.word	0x4001f000
    fbd0:	40008140 	.word	0x40008140
    fbd4:	40001004 	.word	0x40001004
    fbd8:	40001000 	.word	0x40001000

0000fbdc <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    fbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fbde:	4e2c      	ldr	r6, [pc, #176]	; (fc90 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    fbe0:	4f2c      	ldr	r7, [pc, #176]	; (fc94 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fbe2:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    fbe4:	4b2c      	ldr	r3, [pc, #176]	; (fc98 <sw_switch.isra.9+0xbc>)
    fbe6:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    fbea:	b22b      	sxth	r3, r5
    fbec:	00dc      	lsls	r4, r3, #3
    fbee:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    fbf2:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    fbf6:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fbfa:	f105 040b 	add.w	r4, r5, #11
    fbfe:	b2e4      	uxtb	r4, r4
    fc00:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    fc02:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    fc06:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    fc0a:	3fc0      	subs	r7, #192	; 0xc0
    fc0c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    fc10:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    fc14:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    fc18:	2800      	cmp	r0, #0
    fc1a:	d034      	beq.n	fc86 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
    fc1c:	f24a 075a 	movw	r7, #41050	; 0xa05a
    fc20:	f649 4040 	movw	r0, #40000	; 0x9c40
    fc24:	2a02      	cmp	r2, #2
    fc26:	bf0c      	ite	eq
    fc28:	4602      	moveq	r2, r0
    fc2a:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
    fc2c:	f242 47b8 	movw	r7, #9400	; 0x24b8
    fc30:	f241 504a 	movw	r0, #5450	; 0x154a
    fc34:	2902      	cmp	r1, #2
    fc36:	bf18      	it	ne
    fc38:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    fc3a:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    fc3e:	4401      	add	r1, r0
    fc40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc44:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    fc48:	4a14      	ldr	r2, [pc, #80]	; (fc9c <sw_switch.isra.9+0xc0>)
    fc4a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    fc4e:	009b      	lsls	r3, r3, #2
    fc50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fc54:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    fc58:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    fc5c:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    fc5e:	bf8b      	itete	hi
    fc60:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    fc64:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    fc66:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    fc68:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    fc6c:	bf88      	it	hi
    fc6e:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    fc72:	4b08      	ldr	r3, [pc, #32]	; (fc94 <sw_switch.isra.9+0xb8>)
    fc74:	f44f 6290 	mov.w	r2, #1152	; 0x480
    fc78:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    fc7c:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    fc7e:	f003 0301 	and.w	r3, r3, #1
    fc82:	7033      	strb	r3, [r6, #0]
    fc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    fc86:	4a06      	ldr	r2, [pc, #24]	; (fca0 <sw_switch.isra.9+0xc4>)
    fc88:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    fc8c:	212d      	movs	r1, #45	; 0x2d
    fc8e:	e7de      	b.n	fc4e <sw_switch.isra.9+0x72>
    fc90:	2000145c 	.word	0x2000145c
    fc94:	4001f000 	.word	0x4001f000
    fc98:	4000110c 	.word	0x4000110c
    fc9c:	40001000 	.word	0x40001000
    fca0:	40001004 	.word	0x40001004

0000fca4 <isr_radio>:
	if (sfp_radio_isr) {
    fca4:	4b02      	ldr	r3, [pc, #8]	; (fcb0 <isr_radio+0xc>)
    fca6:	681b      	ldr	r3, [r3, #0]
    fca8:	b103      	cbz	r3, fcac <isr_radio+0x8>
		sfp_radio_isr();
    fcaa:	4718      	bx	r3
    fcac:	4770      	bx	lr
    fcae:	bf00      	nop
    fcb0:	20001458 	.word	0x20001458

0000fcb4 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    fcb4:	4b06      	ldr	r3, [pc, #24]	; (fcd0 <radio_isr_set+0x1c>)
    fcb6:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    fcb8:	4b06      	ldr	r3, [pc, #24]	; (fcd4 <radio_isr_set+0x20>)
    fcba:	2210      	movs	r2, #16
    fcbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fcc0:	4b05      	ldr	r3, [pc, #20]	; (fcd8 <radio_isr_set+0x24>)
    fcc2:	2202      	movs	r2, #2
    fcc4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    fcc8:	2001      	movs	r0, #1
    fcca:	f7f1 bdc7 	b.w	185c <_arch_irq_enable>
    fcce:	bf00      	nop
    fcd0:	20001458 	.word	0x20001458
    fcd4:	40001000 	.word	0x40001000
    fcd8:	e000e100 	.word	0xe000e100

0000fcdc <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    fcdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    fce4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    fce6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    fcea:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    fcee:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    fcf2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    fcf6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    fcfa:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    fcfe:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    fd02:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    fd06:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    fd0a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    fd0e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    fd12:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    fd16:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    fd1a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    fd1e:	4770      	bx	lr

0000fd20 <radio_reset>:
{
    fd20:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    fd22:	2001      	movs	r0, #1
    fd24:	f7f1 fdaa 	bl	187c <_arch_irq_disable>
	NRF_RADIO->POWER =
    fd28:	4b08      	ldr	r3, [pc, #32]	; (fd4c <radio_reset+0x2c>)
    fd2a:	2200      	movs	r2, #0
    fd2c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    fd30:	2201      	movs	r2, #1
    fd32:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    fd36:	4a06      	ldr	r2, [pc, #24]	; (fd50 <radio_reset+0x30>)
    fd38:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    fd3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    fd3e:	f023 0301 	bic.w	r3, r3, #1
    fd42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    fd46:	6013      	str	r3, [r2, #0]
    fd48:	bd08      	pop	{r3, pc}
    fd4a:	bf00      	nop
    fd4c:	40001000 	.word	0x40001000
    fd50:	40001774 	.word	0x40001774

0000fd54 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    fd54:	4b06      	ldr	r3, [pc, #24]	; (fd70 <radio_phy_set+0x1c>)
	switch (phy) {
    fd56:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    fd58:	bf0c      	ite	eq
    fd5a:	2204      	moveq	r2, #4
    fd5c:	2203      	movne	r2, #3
    fd5e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    fd62:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    fd66:	f042 0201 	orr.w	r2, r2, #1
    fd6a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    fd6e:	4770      	bx	lr
    fd70:	40001000 	.word	0x40001000

0000fd74 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    fd74:	4b01      	ldr	r3, [pc, #4]	; (fd7c <radio_tx_power_set+0x8>)
    fd76:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    fd7a:	4770      	bx	lr
    fd7c:	40001000 	.word	0x40001000

0000fd80 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    fd80:	4b01      	ldr	r3, [pc, #4]	; (fd88 <radio_freq_chan_set+0x8>)
    fd82:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    fd86:	4770      	bx	lr
    fd88:	40001000 	.word	0x40001000

0000fd8c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    fd8c:	4b07      	ldr	r3, [pc, #28]	; (fdac <radio_whiten_iv_set+0x20>)
    fd8e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    fd92:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fd96:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    fd9a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    fd9e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fda2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    fda6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    fdaa:	4770      	bx	lr
    fdac:	40001000 	.word	0x40001000

0000fdb0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    fdb0:	4a0a      	ldr	r2, [pc, #40]	; (fddc <radio_aa_set+0x2c>)
    fdb2:	2300      	movs	r3, #0
    fdb4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    fdb8:	2301      	movs	r3, #1
    fdba:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    fdbe:	78c3      	ldrb	r3, [r0, #3]
    fdc0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    fdc4:	7843      	ldrb	r3, [r0, #1]
    fdc6:	7881      	ldrb	r1, [r0, #2]
    fdc8:	041b      	lsls	r3, r3, #16
    fdca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    fdce:	7801      	ldrb	r1, [r0, #0]
    fdd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    fdd4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    fdd8:	4770      	bx	lr
    fdda:	bf00      	nop
    fddc:	40001000 	.word	0x40001000

0000fde0 <radio_pkt_configure>:
	switch (phy) {
    fde0:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    fde4:	2b02      	cmp	r3, #2
{
    fde6:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    fde8:	bf0c      	ite	eq
    fdea:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    fdee:	2400      	movne	r4, #0
	if (dc) {
    fdf0:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    fdf2:	f1c0 0308 	rsb	r3, r0, #8
    fdf6:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    fdfa:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    fdfe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    fe02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    fe06:	4a0b      	ldr	r2, [pc, #44]	; (fe34 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    fe08:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    fe0c:	bf48      	it	mi
    fe0e:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    fe12:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    fe14:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    fe18:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    fe1c:	4b06      	ldr	r3, [pc, #24]	; (fe38 <radio_pkt_configure+0x58>)
    fe1e:	4003      	ands	r3, r0
    fe20:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    fe24:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    fe28:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    fe2c:	4319      	orrs	r1, r3
    fe2e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    fe32:	bd10      	pop	{r4, pc}
    fe34:	40001000 	.word	0x40001000
    fe38:	fef80000 	.word	0xfef80000

0000fe3c <radio_pkt_rx_set>:
    fe3c:	4b01      	ldr	r3, [pc, #4]	; (fe44 <radio_pkt_rx_set+0x8>)
    fe3e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    fe42:	4770      	bx	lr
    fe44:	40001000 	.word	0x40001000

0000fe48 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    fe48:	4b01      	ldr	r3, [pc, #4]	; (fe50 <radio_pkt_tx_set+0x8>)
    fe4a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    fe4e:	4770      	bx	lr
    fe50:	40001000 	.word	0x40001000

0000fe54 <radio_tx_ready_delay_get>:
	switch (phy) {
    fe54:	2802      	cmp	r0, #2
}
    fe56:	bf0c      	ite	eq
    fe58:	2028      	moveq	r0, #40	; 0x28
    fe5a:	2029      	movne	r0, #41	; 0x29
    fe5c:	4770      	bx	lr

0000fe5e <radio_tx_chain_delay_get>:
}
    fe5e:	2001      	movs	r0, #1
    fe60:	4770      	bx	lr

0000fe62 <radio_rx_ready_delay_get>:
}
    fe62:	2029      	movs	r0, #41	; 0x29
    fe64:	4770      	bx	lr

0000fe66 <radio_rx_chain_delay_get>:
	switch (phy) {
    fe66:	2802      	cmp	r0, #2
}
    fe68:	bf0c      	ite	eq
    fe6a:	2006      	moveq	r0, #6
    fe6c:	200a      	movne	r0, #10
    fe6e:	4770      	bx	lr

0000fe70 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    fe70:	4b01      	ldr	r3, [pc, #4]	; (fe78 <radio_rx_enable+0x8>)
    fe72:	2201      	movs	r2, #1
    fe74:	605a      	str	r2, [r3, #4]
    fe76:	4770      	bx	lr
    fe78:	40001000 	.word	0x40001000

0000fe7c <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    fe7c:	4b01      	ldr	r3, [pc, #4]	; (fe84 <radio_tx_enable+0x8>)
    fe7e:	2201      	movs	r2, #1
    fe80:	601a      	str	r2, [r3, #0]
    fe82:	4770      	bx	lr
    fe84:	40001000 	.word	0x40001000

0000fe88 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    fe88:	4a07      	ldr	r2, [pc, #28]	; (fea8 <radio_disable+0x20>)
    fe8a:	f44f 6390 	mov.w	r3, #1152	; 0x480
    fe8e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    fe92:	2301      	movs	r3, #1
    fe94:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    fe96:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    fe98:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    fe9c:	2100      	movs	r1, #0
    fe9e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    fea2:	6113      	str	r3, [r2, #16]
    fea4:	4770      	bx	lr
    fea6:	bf00      	nop
    fea8:	4001f000 	.word	0x4001f000

0000feac <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    feac:	4b04      	ldr	r3, [pc, #16]	; (fec0 <radio_status_reset+0x14>)
    feae:	2200      	movs	r2, #0
    feb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    feb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    feb8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    febc:	4770      	bx	lr
    febe:	bf00      	nop
    fec0:	40001000 	.word	0x40001000

0000fec4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    fec4:	4b03      	ldr	r3, [pc, #12]	; (fed4 <radio_is_ready+0x10>)
    fec6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    feca:	3000      	adds	r0, #0
    fecc:	bf18      	it	ne
    fece:	2001      	movne	r0, #1
    fed0:	4770      	bx	lr
    fed2:	bf00      	nop
    fed4:	40001000 	.word	0x40001000

0000fed8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    fed8:	4b03      	ldr	r3, [pc, #12]	; (fee8 <radio_is_done+0x10>)
    feda:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    fede:	3000      	adds	r0, #0
    fee0:	bf18      	it	ne
    fee2:	2001      	movne	r0, #1
    fee4:	4770      	bx	lr
    fee6:	bf00      	nop
    fee8:	40001000 	.word	0x40001000

0000feec <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    feec:	4b03      	ldr	r3, [pc, #12]	; (fefc <radio_is_idle+0x10>)
    feee:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    fef2:	fab0 f080 	clz	r0, r0
    fef6:	0940      	lsrs	r0, r0, #5
    fef8:	4770      	bx	lr
    fefa:	bf00      	nop
    fefc:	40001000 	.word	0x40001000

0000ff00 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    ff00:	4b04      	ldr	r3, [pc, #16]	; (ff14 <radio_crc_configure+0x14>)
    ff02:	f240 1203 	movw	r2, #259	; 0x103
    ff06:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    ff0a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    ff0e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    ff12:	4770      	bx	lr
    ff14:	40001000 	.word	0x40001000

0000ff18 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    ff18:	4b03      	ldr	r3, [pc, #12]	; (ff28 <radio_crc_is_valid+0x10>)
    ff1a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ff1e:	3000      	adds	r0, #0
    ff20:	bf18      	it	ne
    ff22:	2001      	movne	r0, #1
    ff24:	4770      	bx	lr
    ff26:	bf00      	nop
    ff28:	40001000 	.word	0x40001000

0000ff2c <radio_pkt_empty_get>:
}
    ff2c:	4800      	ldr	r0, [pc, #0]	; (ff30 <radio_pkt_empty_get+0x4>)
    ff2e:	4770      	bx	lr
    ff30:	2000134c 	.word	0x2000134c

0000ff34 <radio_pkt_scratch_get>:
}
    ff34:	4800      	ldr	r0, [pc, #0]	; (ff38 <radio_pkt_scratch_get+0x4>)
    ff36:	4770      	bx	lr
    ff38:	20001350 	.word	0x20001350

0000ff3c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ff3c:	4b04      	ldr	r3, [pc, #16]	; (ff50 <radio_switch_complete_and_rx+0x14>)
    ff3e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    ff40:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ff42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    ff46:	4602      	mov	r2, r0
    ff48:	4608      	mov	r0, r1
    ff4a:	f7ff be47 	b.w	fbdc <sw_switch.isra.9>
    ff4e:	bf00      	nop
    ff50:	40001000 	.word	0x40001000

0000ff54 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ff54:	4b03      	ldr	r3, [pc, #12]	; (ff64 <radio_switch_complete_and_tx+0x10>)
    ff56:	2103      	movs	r1, #3
    ff58:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    ff5c:	4601      	mov	r1, r0
    ff5e:	2001      	movs	r0, #1
    ff60:	f7ff be3c 	b.w	fbdc <sw_switch.isra.9>
    ff64:	40001000 	.word	0x40001000

0000ff68 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    ff68:	4b05      	ldr	r3, [pc, #20]	; (ff80 <radio_switch_complete_and_disable+0x18>)
    ff6a:	2203      	movs	r2, #3
    ff6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    ff70:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    ff74:	f44f 6290 	mov.w	r2, #1152	; 0x480
    ff78:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ff7c:	4770      	bx	lr
    ff7e:	bf00      	nop
    ff80:	40001000 	.word	0x40001000

0000ff84 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    ff84:	4a03      	ldr	r2, [pc, #12]	; (ff94 <radio_rssi_measure+0x10>)
    ff86:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ff8a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    ff8e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ff92:	4770      	bx	lr
    ff94:	40001000 	.word	0x40001000

0000ff98 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    ff98:	4b01      	ldr	r3, [pc, #4]	; (ffa0 <radio_rssi_get+0x8>)
    ff9a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ff9e:	4770      	bx	lr
    ffa0:	40001000 	.word	0x40001000

0000ffa4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    ffa4:	4b02      	ldr	r3, [pc, #8]	; (ffb0 <radio_rssi_status_reset+0xc>)
    ffa6:	2200      	movs	r2, #0
    ffa8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    ffac:	4770      	bx	lr
    ffae:	bf00      	nop
    ffb0:	40001000 	.word	0x40001000

0000ffb4 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    ffb4:	4b03      	ldr	r3, [pc, #12]	; (ffc4 <radio_rssi_is_ready+0x10>)
    ffb6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    ffba:	3000      	adds	r0, #0
    ffbc:	bf18      	it	ne
    ffbe:	2001      	movne	r0, #1
    ffc0:	4770      	bx	lr
    ffc2:	bf00      	nop
    ffc4:	40001000 	.word	0x40001000

0000ffc8 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ffc8:	b530      	push	{r4, r5, lr}
    ffca:	2400      	movs	r4, #0
    ffcc:	00a3      	lsls	r3, r4, #2
    ffce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ffd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    ffd6:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ffd8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    ffdc:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ffde:	8895      	ldrh	r5, [r2, #4]
    ffe0:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    ffe4:	2c08      	cmp	r4, #8
		bdaddr += 6;
    ffe6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    ffea:	d1ef      	bne.n	ffcc <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    ffec:	4b02      	ldr	r3, [pc, #8]	; (fff8 <radio_filter_configure+0x30>)
    ffee:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    fff2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    fff6:	bd30      	pop	{r4, r5, pc}
    fff8:	40001000 	.word	0x40001000

0000fffc <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    fffc:	4a03      	ldr	r2, [pc, #12]	; (1000c <__kernel_ram_size+0xc>)
    fffe:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   10002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   10006:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   1000a:	4770      	bx	lr
   1000c:	40001000 	.word	0x40001000

00010010 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   10010:	4b02      	ldr	r3, [pc, #8]	; (1001c <radio_filter_status_reset+0xc>)
   10012:	2200      	movs	r2, #0
   10014:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   10018:	4770      	bx	lr
   1001a:	bf00      	nop
   1001c:	40001000 	.word	0x40001000

00010020 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   10020:	4b03      	ldr	r3, [pc, #12]	; (10030 <radio_filter_has_match+0x10>)
   10022:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   10026:	3000      	adds	r0, #0
   10028:	bf18      	it	ne
   1002a:	2001      	movne	r0, #1
   1002c:	4770      	bx	lr
   1002e:	bf00      	nop
   10030:	40001000 	.word	0x40001000

00010034 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   10034:	4b01      	ldr	r3, [pc, #4]	; (1003c <radio_filter_match_get+0x8>)
   10036:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1003a:	4770      	bx	lr
   1003c:	40001000 	.word	0x40001000

00010040 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   10040:	4b04      	ldr	r3, [pc, #16]	; (10054 <radio_bc_configure+0x14>)
   10042:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   10046:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1004a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1004e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   10052:	4770      	bx	lr
   10054:	40001000 	.word	0x40001000

00010058 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   10058:	4b05      	ldr	r3, [pc, #20]	; (10070 <radio_tmr_status_reset+0x18>)
   1005a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1005e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   10062:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   10066:	227f      	movs	r2, #127	; 0x7f
   10068:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1006c:	4770      	bx	lr
   1006e:	bf00      	nop
   10070:	4000b000 	.word	0x4000b000

00010074 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   10074:	4b03      	ldr	r3, [pc, #12]	; (10084 <radio_tmr_tifs_set+0x10>)
   10076:	4a04      	ldr	r2, [pc, #16]	; (10088 <radio_tmr_tifs_set+0x14>)
   10078:	781b      	ldrb	r3, [r3, #0]
   1007a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1007e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   10082:	4770      	bx	lr
   10084:	2000145c 	.word	0x2000145c
   10088:	40009000 	.word	0x40009000

0001008c <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1008c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   10090:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   10094:	4c30      	ldr	r4, [pc, #192]	; (10158 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   10096:	4d31      	ldr	r5, [pc, #196]	; (1015c <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   10098:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1009c:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   1009e:	bf88      	it	hi
   100a0:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   100a4:	4b2e      	ldr	r3, [pc, #184]	; (10160 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   100a6:	4c2f      	ldr	r4, [pc, #188]	; (10164 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   100a8:	bf82      	ittt	hi
   100aa:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   100ae:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   100b2:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   100b6:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   100b8:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   100bc:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   100be:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   100c0:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   100c4:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   100c6:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   100ca:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   100ce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   100d2:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   100d6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   100da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   100de:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   100e2:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   100e6:	4920      	ldr	r1, [pc, #128]	; (10168 <radio_tmr_start+0xdc>)
   100e8:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   100ec:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   100f0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   100f4:	f7ff fd5a 	bl	fbac <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   100f8:	4b1c      	ldr	r3, [pc, #112]	; (1016c <radio_tmr_start+0xe0>)
   100fa:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   100fc:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   10100:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   10104:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   10108:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   1010a:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1010e:	3b74      	subs	r3, #116	; 0x74
   10110:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   10114:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   10118:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1011c:	f503 739a 	add.w	r3, r3, #308	; 0x134
   10120:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   10124:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   10128:	33c4      	adds	r3, #196	; 0xc4
   1012a:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1012e:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   10132:	3bc0      	subs	r3, #192	; 0xc0
   10134:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   10138:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1013c:	33c8      	adds	r3, #200	; 0xc8
   1013e:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   10142:	f44f 6310 	mov.w	r3, #2304	; 0x900
   10146:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1014a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1014e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   10152:	4628      	mov	r0, r5
   10154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10158:	7ff0bdbf 	.word	0x7ff0bdbf
   1015c:	000f4240 	.word	0x000f4240
   10160:	40008000 	.word	0x40008000
   10164:	4000b000 	.word	0x4000b000
   10168:	4000b148 	.word	0x4000b148
   1016c:	40009000 	.word	0x40009000

00010170 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   10170:	4a04      	ldr	r2, [pc, #16]	; (10184 <radio_tmr_stop+0x14>)
   10172:	2301      	movs	r3, #1
   10174:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   10176:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   10178:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1017c:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   1017e:	6113      	str	r3, [r2, #16]
   10180:	4770      	bx	lr
   10182:	bf00      	nop
   10184:	40008000 	.word	0x40008000

00010188 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   10188:	4b0c      	ldr	r3, [pc, #48]	; (101bc <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1018a:	4a0d      	ldr	r2, [pc, #52]	; (101c0 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   1018c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   10190:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   10194:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   10198:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1019c:	3240      	adds	r2, #64	; 0x40
   1019e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   101a2:	f502 7280 	add.w	r2, r2, #256	; 0x100
   101a6:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   101aa:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   101ae:	3a34      	subs	r2, #52	; 0x34
   101b0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   101b4:	2218      	movs	r2, #24
   101b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   101ba:	4770      	bx	lr
   101bc:	40008000 	.word	0x40008000
   101c0:	40001104 	.word	0x40001104

000101c4 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   101c4:	4b0b      	ldr	r3, [pc, #44]	; (101f4 <radio_tmr_aa_capture+0x30>)
   101c6:	4a0c      	ldr	r2, [pc, #48]	; (101f8 <radio_tmr_aa_capture+0x34>)
   101c8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   101cc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   101d0:	3240      	adds	r2, #64	; 0x40
   101d2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   101d6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   101da:	3a3c      	subs	r2, #60	; 0x3c
   101dc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   101e0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   101e4:	3240      	adds	r2, #64	; 0x40
   101e6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   101ea:	220c      	movs	r2, #12
   101ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   101f0:	4770      	bx	lr
   101f2:	bf00      	nop
   101f4:	4001f000 	.word	0x4001f000
   101f8:	40001100 	.word	0x40001100

000101fc <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   101fc:	4b01      	ldr	r3, [pc, #4]	; (10204 <radio_tmr_aa_get+0x8>)
   101fe:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   10202:	4770      	bx	lr
   10204:	40008000 	.word	0x40008000

00010208 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   10208:	4b01      	ldr	r3, [pc, #4]	; (10210 <radio_tmr_aa_save+0x8>)
   1020a:	6018      	str	r0, [r3, #0]
   1020c:	4770      	bx	lr
   1020e:	bf00      	nop
   10210:	20001454 	.word	0x20001454

00010214 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   10214:	4b01      	ldr	r3, [pc, #4]	; (1021c <radio_tmr_aa_restore+0x8>)
   10216:	6818      	ldr	r0, [r3, #0]
   10218:	4770      	bx	lr
   1021a:	bf00      	nop
   1021c:	20001454 	.word	0x20001454

00010220 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   10220:	4b01      	ldr	r3, [pc, #4]	; (10228 <radio_tmr_ready_get+0x8>)
   10222:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   10226:	4770      	bx	lr
   10228:	40008000 	.word	0x40008000

0001022c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   1022c:	4b06      	ldr	r3, [pc, #24]	; (10248 <radio_tmr_end_capture+0x1c>)
   1022e:	4a07      	ldr	r2, [pc, #28]	; (1024c <radio_tmr_end_capture+0x20>)
   10230:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   10234:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   10238:	323c      	adds	r2, #60	; 0x3c
   1023a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   1023e:	2220      	movs	r2, #32
   10240:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   10244:	4770      	bx	lr
   10246:	bf00      	nop
   10248:	4001f000 	.word	0x4001f000
   1024c:	4000110c 	.word	0x4000110c

00010250 <radio_tmr_end_get>:
   10250:	4b01      	ldr	r3, [pc, #4]	; (10258 <radio_tmr_end_get+0x8>)
   10252:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   10256:	4770      	bx	lr
   10258:	40008000 	.word	0x40008000

0001025c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1025c:	4b01      	ldr	r3, [pc, #4]	; (10264 <radio_tmr_tifs_base_get+0x8>)
   1025e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   10262:	4770      	bx	lr
   10264:	40008000 	.word	0x40008000

00010268 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   10268:	4b16      	ldr	r3, [pc, #88]	; (102c4 <radio_ccm_rx_pkt_set+0x5c>)
{
   1026a:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1026c:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1026e:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   10270:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   10274:	4e14      	ldr	r6, [pc, #80]	; (102c8 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   10276:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1027a:	4d14      	ldr	r5, [pc, #80]	; (102cc <radio_ccm_rx_pkt_set+0x64>)
   1027c:	2902      	cmp	r1, #2
   1027e:	bf0c      	ite	eq
   10280:	4629      	moveq	r1, r5
   10282:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   10284:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   10288:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1028c:	4810      	ldr	r0, [pc, #64]	; (102d0 <radio_ccm_rx_pkt_set+0x68>)
   1028e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   10292:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   10296:	4a0f      	ldr	r2, [pc, #60]	; (102d4 <radio_ccm_rx_pkt_set+0x6c>)
   10298:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   1029c:	490e      	ldr	r1, [pc, #56]	; (102d8 <radio_ccm_rx_pkt_set+0x70>)
   1029e:	4a0f      	ldr	r2, [pc, #60]	; (102dc <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   102a0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   102a4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   102a8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   102ac:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   102b0:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   102b4:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   102b8:	2140      	movs	r1, #64	; 0x40
   102ba:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   102be:	2201      	movs	r2, #1
   102c0:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   102c2:	bd70      	pop	{r4, r5, r6, pc}
   102c4:	4000f000 	.word	0x4000f000
   102c8:	01000001 	.word	0x01000001
   102cc:	01010001 	.word	0x01010001
   102d0:	20001350 	.word	0x20001350
   102d4:	20001240 	.word	0x20001240
   102d8:	40001104 	.word	0x40001104
   102dc:	4001f000 	.word	0x4001f000

000102e0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   102e0:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   102e2:	4b0e      	ldr	r3, [pc, #56]	; (1031c <radio_ccm_tx_pkt_set+0x3c>)
   102e4:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   102e6:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   102e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   102ec:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   102f0:	4c0b      	ldr	r4, [pc, #44]	; (10320 <radio_ccm_tx_pkt_set+0x40>)
   102f2:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   102f6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   102fa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   102fe:	4809      	ldr	r0, [pc, #36]	; (10324 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   10300:	4909      	ldr	r1, [pc, #36]	; (10328 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   10302:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   10306:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1030a:	2101      	movs	r1, #1
   1030c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   10310:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   10314:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   10318:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1031a:	bd10      	pop	{r4, pc}
   1031c:	4000f000 	.word	0x4000f000
   10320:	01010000 	.word	0x01010000
   10324:	20001350 	.word	0x20001350
   10328:	20001240 	.word	0x20001240

0001032c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   1032c:	4b0c      	ldr	r3, [pc, #48]	; (10360 <radio_ccm_is_done+0x34>)
   1032e:	2202      	movs	r2, #2
   10330:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   10334:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   10338:	b16a      	cbz	r2, 10356 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1033a:	2202      	movs	r2, #2
   1033c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   10340:	4a08      	ldr	r2, [pc, #32]	; (10364 <radio_ccm_is_done+0x38>)
   10342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10346:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1034a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1034e:	fab0 f080 	clz	r0, r0
   10352:	0940      	lsrs	r0, r0, #5
   10354:	4770      	bx	lr
		__WFE();
   10356:	bf20      	wfe
		__SEV();
   10358:	bf40      	sev
		__WFE();
   1035a:	bf20      	wfe
   1035c:	e7ea      	b.n	10334 <radio_ccm_is_done+0x8>
   1035e:	bf00      	nop
   10360:	4000f000 	.word	0x4000f000
   10364:	e000e100 	.word	0xe000e100

00010368 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   10368:	4b03      	ldr	r3, [pc, #12]	; (10378 <radio_ccm_mic_is_valid+0x10>)
   1036a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1036e:	3000      	adds	r0, #0
   10370:	bf18      	it	ne
   10372:	2001      	movne	r0, #1
   10374:	4770      	bx	lr
   10376:	bf00      	nop
   10378:	4000f000 	.word	0x4000f000

0001037c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   1037c:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1037e:	4c13      	ldr	r4, [pc, #76]	; (103cc <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   10380:	4d13      	ldr	r5, [pc, #76]	; (103d0 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   10382:	2303      	movs	r3, #3
   10384:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   10388:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   1038c:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   10390:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   10394:	3b01      	subs	r3, #1
   10396:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   1039a:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   1039c:	4b0d      	ldr	r3, [pc, #52]	; (103d4 <radio_ar_configure+0x58>)
   1039e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   103a2:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   103a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   103a8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   103ac:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   103b0:	f7ff fe46 	bl	10040 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   103b4:	4b08      	ldr	r3, [pc, #32]	; (103d8 <radio_ar_configure+0x5c>)
   103b6:	4a09      	ldr	r2, [pc, #36]	; (103dc <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   103b8:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   103bc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   103c0:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   103c2:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   103c6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   103ca:	bd38      	pop	{r3, r4, r5, pc}
   103cc:	4000f000 	.word	0x4000f000
   103d0:	40001000 	.word	0x40001000
   103d4:	2000123c 	.word	0x2000123c
   103d8:	4001f000 	.word	0x4001f000
   103dc:	40001128 	.word	0x40001128

000103e0 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   103e0:	4b01      	ldr	r3, [pc, #4]	; (103e8 <radio_ar_match_get+0x8>)
   103e2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   103e6:	4770      	bx	lr
   103e8:	4000f000 	.word	0x4000f000

000103ec <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   103ec:	4a04      	ldr	r2, [pc, #16]	; (10400 <radio_ar_status_reset+0x14>)
   103ee:	2300      	movs	r3, #0
   103f0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   103f4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   103f8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   103fc:	4770      	bx	lr
   103fe:	bf00      	nop
   10400:	40001000 	.word	0x40001000

00010404 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   10404:	4b08      	ldr	r3, [pc, #32]	; (10428 <radio_ar_has_match+0x24>)
   10406:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1040a:	b160      	cbz	r0, 10426 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1040c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   10410:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   10414:	b138      	cbz	r0, 10426 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   10416:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1041a:	b120      	cbz	r0, 10426 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1041c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   10420:	fab0 f080 	clz	r0, r0
   10424:	0940      	lsrs	r0, r0, #5
}
   10426:	4770      	bx	lr
   10428:	40001000 	.word	0x40001000

0001042c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1042c:	2901      	cmp	r1, #1
   1042e:	d005      	beq.n	1043c <mayfly_enable_cb+0x10>
   10430:	4040      	eors	r0, r0
   10432:	f380 8811 	msr	BASEPRI, r0
   10436:	f04f 0004 	mov.w	r0, #4
   1043a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   1043c:	2018      	movs	r0, #24
	if (enable) {
   1043e:	b10a      	cbz	r2, 10444 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
   10440:	f7f1 ba0c 	b.w	185c <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
   10444:	f7f1 ba1a 	b.w	187c <_arch_irq_disable>

00010448 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   10448:	b139      	cbz	r1, 1045a <mayfly_is_enabled+0x12>
   1044a:	2901      	cmp	r1, #1
   1044c:	d008      	beq.n	10460 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   1044e:	4040      	eors	r0, r0
   10450:	f380 8811 	msr	BASEPRI, r0
   10454:	f04f 0004 	mov.w	r0, #4
   10458:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1045a:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
   1045c:	f7f1 ba22 	b.w	18a4 <_arch_irq_is_enabled>
   10460:	2018      	movs	r0, #24
   10462:	e7fb      	b.n	1045c <mayfly_is_enabled+0x14>

00010464 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   10464:	4288      	cmp	r0, r1
   10466:	d00a      	beq.n	1047e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   10468:	b918      	cbnz	r0, 10472 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1046a:	1e4b      	subs	r3, r1, #1
   1046c:	4258      	negs	r0, r3
   1046e:	4158      	adcs	r0, r3
   10470:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   10472:	2801      	cmp	r0, #1
   10474:	d105      	bne.n	10482 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   10476:	fab1 f081 	clz	r0, r1
   1047a:	0940      	lsrs	r0, r0, #5
   1047c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1047e:	2001      	movs	r0, #1
   10480:	4770      	bx	lr
   10482:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   10484:	4770      	bx	lr
	...

00010488 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   10488:	4b08      	ldr	r3, [pc, #32]	; (104ac <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
   1048a:	b139      	cbz	r1, 1049c <mayfly_pend+0x14>
   1048c:	2901      	cmp	r1, #1
   1048e:	d00a      	beq.n	104a6 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   10490:	4040      	eors	r0, r0
   10492:	f380 8811 	msr	BASEPRI, r0
   10496:	f04f 0004 	mov.w	r0, #4
   1049a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1049c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   104a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   104a4:	4770      	bx	lr
   104a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   104aa:	e7f9      	b.n	104a0 <mayfly_pend+0x18>
   104ac:	e000e100 	.word	0xe000e100

000104b0 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   104b0:	2803      	cmp	r0, #3
   104b2:	d905      	bls.n	104c0 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   104b4:	4040      	eors	r0, r0
   104b6:	f380 8811 	msr	BASEPRI, r0
   104ba:	f04f 0004 	mov.w	r0, #4
   104be:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   104c0:	4b02      	ldr	r3, [pc, #8]	; (104cc <hal_ticker_instance0_caller_id_get+0x1c>)
   104c2:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   104c4:	2800      	cmp	r0, #0
   104c6:	d0f5      	beq.n	104b4 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
   104c8:	4770      	bx	lr
   104ca:	bf00      	nop
   104cc:	00012a36 	.word	0x00012a36

000104d0 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   104d0:	3802      	subs	r0, #2
{
   104d2:	b410      	push	{r4}
   104d4:	461c      	mov	r4, r3
	switch (caller_id) {
   104d6:	2803      	cmp	r0, #3
   104d8:	d816      	bhi.n	10508 <hal_ticker_instance0_sched+0x38>
   104da:	e8df f000 	tbb	[pc, r0]
   104de:	0b02      	.short	0x0b02
   104e0:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   104e2:	2903      	cmp	r1, #3
   104e4:	d110      	bne.n	10508 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   104e6:	4b13      	ldr	r3, [pc, #76]	; (10534 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   104e8:	2100      	movs	r1, #0
			m.param = instance;
   104ea:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   104ec:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   104ee:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   104f0:	f7f5 bc14 	b.w	5d1c <mayfly_enqueue>
		switch (callee_id) {
   104f4:	2904      	cmp	r1, #4
   104f6:	d107      	bne.n	10508 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   104f8:	4b0f      	ldr	r3, [pc, #60]	; (10538 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   104fa:	2101      	movs	r1, #1
			m.param = instance;
   104fc:	609c      	str	r4, [r3, #8]
   104fe:	e7f5      	b.n	104ec <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   10500:	2903      	cmp	r1, #3
   10502:	d007      	beq.n	10514 <hal_ticker_instance0_sched+0x44>
   10504:	2904      	cmp	r1, #4
   10506:	d00a      	beq.n	1051e <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
   10508:	4040      	eors	r0, r0
   1050a:	f380 8811 	msr	BASEPRI, r0
   1050e:	f04f 0004 	mov.w	r0, #4
   10512:	df02      	svc	2
			m.param = instance;
   10514:	4b09      	ldr	r3, [pc, #36]	; (1053c <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   10516:	2100      	movs	r1, #0
			m.param = instance;
   10518:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1051a:	2001      	movs	r0, #1
   1051c:	e7e7      	b.n	104ee <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   1051e:	4b08      	ldr	r3, [pc, #32]	; (10540 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   10520:	2101      	movs	r1, #1
			m.param = instance;
   10522:	609c      	str	r4, [r3, #8]
   10524:	e7f9      	b.n	1051a <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   10526:	2904      	cmp	r1, #4
   10528:	d1ee      	bne.n	10508 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   1052a:	4b06      	ldr	r3, [pc, #24]	; (10544 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1052c:	2101      	movs	r1, #1
			m.param = instance;
   1052e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   10530:	2003      	movs	r0, #3
   10532:	e7dc      	b.n	104ee <hal_ticker_instance0_sched+0x1e>
   10534:	20003830 	.word	0x20003830
   10538:	20003840 	.word	0x20003840
   1053c:	20003850 	.word	0x20003850
   10540:	20003860 	.word	0x20003860
   10544:	20003870 	.word	0x20003870

00010548 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   10548:	4601      	mov	r1, r0
   1054a:	2000      	movs	r0, #0
   1054c:	f7ff bade 	b.w	fb0c <cntr_cmp_set>

00010550 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   10550:	4770      	bx	lr
	...

00010554 <net_buf_pool_get>:
}
   10554:	4b01      	ldr	r3, [pc, #4]	; (1055c <net_buf_pool_get+0x8>)
   10556:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1055a:	4770      	bx	lr
   1055c:	20003944 	.word	0x20003944

00010560 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10560:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   10562:	4b04      	ldr	r3, [pc, #16]	; (10574 <net_buf_id+0x14>)
   10564:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   10568:	69db      	ldr	r3, [r3, #28]
   1056a:	1ac0      	subs	r0, r0, r3
}
   1056c:	4b02      	ldr	r3, [pc, #8]	; (10578 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1056e:	10c0      	asrs	r0, r0, #3
}
   10570:	4358      	muls	r0, r3
   10572:	4770      	bx	lr
   10574:	20003944 	.word	0x20003944
   10578:	aaaaaaab 	.word	0xaaaaaaab

0001057c <fixed_data_alloc>:
{
   1057c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1057e:	4b09      	ldr	r3, [pc, #36]	; (105a4 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10580:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10582:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   10586:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10588:	699b      	ldr	r3, [r3, #24]
   1058a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   1058c:	6823      	ldr	r3, [r4, #0]
   1058e:	429a      	cmp	r2, r3
   10590:	bf94      	ite	ls
   10592:	600a      	strls	r2, [r1, #0]
   10594:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   10596:	f7ff ffe3 	bl	10560 <net_buf_id>
   1059a:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   1059e:	fb02 3000 	mla	r0, r2, r0, r3
   105a2:	bd10      	pop	{r4, pc}
   105a4:	20003944 	.word	0x20003944

000105a8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   105a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   105ac:	4605      	mov	r5, r0
   105ae:	9101      	str	r1, [sp, #4]
   105b0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   105b2:	f001 f961 	bl	11878 <_impl_k_uptime_get_32>
   105b6:	4607      	mov	r7, r0
	__asm__ volatile(
   105b8:	f04f 0320 	mov.w	r3, #32
   105bc:	f3ef 8811 	mrs	r8, BASEPRI
   105c0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   105c4:	8a6b      	ldrh	r3, [r5, #18]
   105c6:	2b00      	cmp	r3, #0
   105c8:	d03d      	beq.n	10646 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   105ca:	8a2a      	ldrh	r2, [r5, #16]
   105cc:	429a      	cmp	r2, r3
   105ce:	d92a      	bls.n	10626 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   105d0:	2100      	movs	r1, #0
   105d2:	4628      	mov	r0, r5
   105d4:	f000 fe6a 	bl	112ac <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   105d8:	b328      	cbz	r0, 10626 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   105da:	f388 8811 	msr	BASEPRI, r8
   105de:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   105e0:	9b01      	ldr	r3, [sp, #4]
   105e2:	2b00      	cmp	r3, #0
   105e4:	d03c      	beq.n	10660 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   105e6:	1c73      	adds	r3, r6, #1
   105e8:	2b01      	cmp	r3, #1
   105ea:	d906      	bls.n	105fa <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   105ec:	f001 f944 	bl	11878 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   105f0:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   105f2:	42b0      	cmp	r0, r6
   105f4:	bf94      	ite	ls
   105f6:	1a36      	subls	r6, r6, r0
   105f8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   105fa:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   105fc:	4f1e      	ldr	r7, [pc, #120]	; (10678 <net_buf_alloc_len+0xd0>)
   105fe:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   10602:	4632      	mov	r2, r6
   10604:	699b      	ldr	r3, [r3, #24]
   10606:	681b      	ldr	r3, [r3, #0]
   10608:	a901      	add	r1, sp, #4
   1060a:	681b      	ldr	r3, [r3, #0]
   1060c:	4620      	mov	r0, r4
   1060e:	4798      	blx	r3
   10610:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   10612:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   10614:	bb28      	cbnz	r0, 10662 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   10616:	79a0      	ldrb	r0, [r4, #6]
   10618:	4621      	mov	r1, r4
   1061a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1061e:	f000 fe26 	bl	1126e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   10622:	462c      	mov	r4, r5
   10624:	e018      	b.n	10658 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   10626:	8a68      	ldrh	r0, [r5, #18]
   10628:	1e43      	subs	r3, r0, #1
   1062a:	826b      	strh	r3, [r5, #18]
   1062c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   10630:	8a2c      	ldrh	r4, [r5, #16]
   10632:	1a24      	subs	r4, r4, r0
   10634:	69e8      	ldr	r0, [r5, #28]
   10636:	2318      	movs	r3, #24
   10638:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1063c:	4b0e      	ldr	r3, [pc, #56]	; (10678 <net_buf_alloc_len+0xd0>)
   1063e:	1aed      	subs	r5, r5, r3
   10640:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   10642:	71a5      	strb	r5, [r4, #6]
		goto success;
   10644:	e7cc      	b.n	105e0 <net_buf_alloc_len+0x38>
   10646:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1064a:	4631      	mov	r1, r6
   1064c:	4628      	mov	r0, r5
   1064e:	f000 fe2d 	bl	112ac <_impl_k_queue_get>
		return NULL;
   10652:	4604      	mov	r4, r0
	if (!buf) {
   10654:	2800      	cmp	r0, #0
   10656:	d1c3      	bne.n	105e0 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   10658:	4620      	mov	r0, r4
   1065a:	b002      	add	sp, #8
   1065c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   10660:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   10662:	2301      	movs	r3, #1
   10664:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   10666:	2300      	movs	r3, #0
	buf->frags = NULL;
   10668:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   1066a:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   1066c:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   1066e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   10670:	6923      	ldr	r3, [r4, #16]
   10672:	81e2      	strh	r2, [r4, #14]
   10674:	60a3      	str	r3, [r4, #8]
	return buf;
   10676:	e7ef      	b.n	10658 <net_buf_alloc_len+0xb0>
   10678:	20003944 	.word	0x20003944

0001067c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1067c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1067e:	685b      	ldr	r3, [r3, #4]
   10680:	460a      	mov	r2, r1
   10682:	6819      	ldr	r1, [r3, #0]
   10684:	f7ff bf90 	b.w	105a8 <net_buf_alloc_len>

00010688 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   10688:	b570      	push	{r4, r5, r6, lr}
   1068a:	4606      	mov	r6, r0
   1068c:	f000 fe0e 	bl	112ac <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   10690:	4605      	mov	r5, r0
   10692:	b128      	cbz	r0, 106a0 <net_buf_get+0x18>
   10694:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   10696:	7963      	ldrb	r3, [r4, #5]
   10698:	f013 0301 	ands.w	r3, r3, #1
   1069c:	d102      	bne.n	106a4 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1069e:	6023      	str	r3, [r4, #0]

	return buf;
}
   106a0:	4628      	mov	r0, r5
   106a2:	bd70      	pop	{r4, r5, r6, pc}
   106a4:	2100      	movs	r1, #0
   106a6:	4630      	mov	r0, r6
   106a8:	f000 fe00 	bl	112ac <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   106ac:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   106ae:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   106b0:	f023 0301 	bic.w	r3, r3, #1
   106b4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   106b6:	4604      	mov	r4, r0
   106b8:	e7ed      	b.n	10696 <net_buf_get+0xe>

000106ba <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   106ba:	6883      	ldr	r3, [r0, #8]
   106bc:	4419      	add	r1, r3
   106be:	6001      	str	r1, [r0, #0]
   106c0:	4770      	bx	lr

000106c2 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   106c2:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   106c4:	460a      	mov	r2, r1
   106c6:	6814      	ldr	r4, [r2, #0]
   106c8:	b914      	cbnz	r4, 106d0 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   106ca:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   106cc:	f000 bdd4 	b.w	11278 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   106d0:	7953      	ldrb	r3, [r2, #5]
   106d2:	f043 0301 	orr.w	r3, r3, #1
   106d6:	7153      	strb	r3, [r2, #5]
   106d8:	4622      	mov	r2, r4
   106da:	e7f4      	b.n	106c6 <net_buf_put+0x4>

000106dc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   106dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106de:	4d15      	ldr	r5, [pc, #84]	; (10734 <net_buf_unref+0x58>)
   106e0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   106e2:	2600      	movs	r6, #0
	while (buf) {
   106e4:	b904      	cbnz	r4, 106e8 <net_buf_unref+0xc>
   106e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   106e8:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   106ea:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   106ec:	3b01      	subs	r3, #1
   106ee:	b2db      	uxtb	r3, r3
   106f0:	7123      	strb	r3, [r4, #4]
   106f2:	2b00      	cmp	r3, #0
   106f4:	d1f7      	bne.n	106e6 <net_buf_unref+0xa>
		if (buf->__buf) {
   106f6:	6921      	ldr	r1, [r4, #16]
   106f8:	b159      	cbz	r1, 10712 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   106fa:	7963      	ldrb	r3, [r4, #5]
   106fc:	079b      	lsls	r3, r3, #30
   106fe:	d407      	bmi.n	10710 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10700:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   10702:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   10706:	4620      	mov	r0, r4
   10708:	699b      	ldr	r3, [r3, #24]
   1070a:	681b      	ldr	r3, [r3, #0]
   1070c:	689b      	ldr	r3, [r3, #8]
   1070e:	4798      	blx	r3
			buf->__buf = NULL;
   10710:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   10712:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   10714:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   10716:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   1071a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1071c:	695b      	ldr	r3, [r3, #20]
   1071e:	b11b      	cbz	r3, 10728 <net_buf_unref+0x4c>
			pool->destroy(buf);
   10720:	4620      	mov	r0, r4
   10722:	4798      	blx	r3
{
   10724:	463c      	mov	r4, r7
   10726:	e7dd      	b.n	106e4 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   10728:	4621      	mov	r1, r4
   1072a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1072e:	f000 fd9e 	bl	1126e <k_queue_prepend>
   10732:	e7f7      	b.n	10724 <net_buf_unref+0x48>
   10734:	20003944 	.word	0x20003944

00010738 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   10738:	7903      	ldrb	r3, [r0, #4]
   1073a:	3301      	adds	r3, #1
   1073c:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1073e:	4770      	bx	lr

00010740 <net_buf_simple_add>:
	return buf->data + buf->len;
   10740:	8883      	ldrh	r3, [r0, #4]
   10742:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   10744:	4419      	add	r1, r3
   10746:	8081      	strh	r1, [r0, #4]
	return tail;
}
   10748:	18d0      	adds	r0, r2, r3
   1074a:	4770      	bx	lr

0001074c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1074c:	b430      	push	{r4, r5}
   1074e:	8883      	ldrh	r3, [r0, #4]
   10750:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   10752:	189d      	adds	r5, r3, r2
   10754:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   10756:	18e0      	adds	r0, r4, r3
}
   10758:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1075a:	f7f1 ba75 	b.w	1c48 <memcpy>

0001075e <net_buf_simple_add_u8>:
   1075e:	8883      	ldrh	r3, [r0, #4]
   10760:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   10762:	b510      	push	{r4, lr}
	buf->len += len;
   10764:	1c5c      	adds	r4, r3, #1
   10766:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   10768:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1076a:	18d0      	adds	r0, r2, r3
   1076c:	bd10      	pop	{r4, pc}

0001076e <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1076e:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   10770:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   10772:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   10774:	4411      	add	r1, r2
	buf->data -= len;
   10776:	6003      	str	r3, [r0, #0]
	buf->len += len;
   10778:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1077a:	4618      	mov	r0, r3
   1077c:	4770      	bx	lr

0001077e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1077e:	8883      	ldrh	r3, [r0, #4]
   10780:	1a5b      	subs	r3, r3, r1
   10782:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   10784:	6803      	ldr	r3, [r0, #0]
   10786:	4419      	add	r1, r3
   10788:	6001      	str	r1, [r0, #0]
}
   1078a:	4608      	mov	r0, r1
   1078c:	4770      	bx	lr

0001078e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1078e:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   10790:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   10792:	2101      	movs	r1, #1
	val = buf->data[0];
   10794:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   10796:	f7ff fff2 	bl	1077e <net_buf_simple_pull>

	return val;
}
   1079a:	4610      	mov	r0, r2
   1079c:	bd08      	pop	{r3, pc}

0001079e <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1079e:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   107a0:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   107a2:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   107a4:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   107a6:	f7ff ffea 	bl	1077e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   107aa:	4610      	mov	r0, r2
   107ac:	bd08      	pop	{r3, pc}

000107ae <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   107ae:	6802      	ldr	r2, [r0, #0]
   107b0:	6880      	ldr	r0, [r0, #8]
}
   107b2:	1a10      	subs	r0, r2, r0
   107b4:	4770      	bx	lr

000107b6 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   107b6:	6802      	ldr	r2, [r0, #0]
   107b8:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   107ba:	88c3      	ldrh	r3, [r0, #6]
   107bc:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   107be:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   107c0:	1a9b      	subs	r3, r3, r2
}
   107c2:	1a18      	subs	r0, r3, r0
   107c4:	4770      	bx	lr

000107c6 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   107c6:	6800      	ldr	r0, [r0, #0]
   107c8:	6880      	ldr	r0, [r0, #8]
   107ca:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   107cc:	b941      	cbnz	r1, 107e0 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   107ce:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   107d2:	fa21 f202 	lsr.w	r2, r1, r2
   107d6:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   107da:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   107dc:	2000      	movs	r0, #0
   107de:	4770      	bx	lr
		*value = gpio->IN;
   107e0:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   107e4:	e7f9      	b.n	107da <gpio_nrf5_read+0x14>

000107e6 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   107e6:	6800      	ldr	r0, [r0, #0]
   107e8:	6880      	ldr	r0, [r0, #8]
   107ea:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   107ec:	b949      	cbnz	r1, 10802 <gpio_nrf5_write+0x1c>
   107ee:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   107f0:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   107f2:	b11b      	cbz	r3, 107fc <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   107f4:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   107f8:	2000      	movs	r0, #0
   107fa:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   107fc:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   10800:	e7fa      	b.n	107f8 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   10802:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   10806:	e7f7      	b.n	107f8 <gpio_nrf5_write+0x12>

00010808 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   10808:	6883      	ldr	r3, [r0, #8]
   1080a:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   1080c:	b172      	cbz	r2, 1082c <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   1080e:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   10810:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   10812:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   10814:	b902      	cbnz	r2, 10818 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   10816:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   10818:	2000      	movs	r0, #0
   1081a:	4770      	bx	lr
	parent->next = child;
   1081c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   1081e:	6858      	ldr	r0, [r3, #4]
   10820:	4281      	cmp	r1, r0
	list->tail = node;
   10822:	bf08      	it	eq
   10824:	605a      	streq	r2, [r3, #4]
   10826:	e00d      	b.n	10844 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   10828:	4602      	mov	r2, r0
   1082a:	6800      	ldr	r0, [r0, #0]
   1082c:	2800      	cmp	r0, #0
   1082e:	d0f3      	beq.n	10818 <gpio_nrf5_manage_callback+0x10>
   10830:	4281      	cmp	r1, r0
   10832:	d1f9      	bne.n	10828 <gpio_nrf5_manage_callback+0x20>
   10834:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   10836:	2a00      	cmp	r2, #0
   10838:	d1f0      	bne.n	1081c <gpio_nrf5_manage_callback+0x14>
   1083a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1083c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   1083e:	4291      	cmp	r1, r2
   10840:	d100      	bne.n	10844 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   10842:	6058      	str	r0, [r3, #4]
	parent->next = child;
   10844:	2300      	movs	r3, #0
   10846:	600b      	str	r3, [r1, #0]
   10848:	e7e6      	b.n	10818 <gpio_nrf5_manage_callback+0x10>
	...

0001084c <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   1084c:	4b0c      	ldr	r3, [pc, #48]	; (10880 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   1084e:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   10850:	4d0c      	ldr	r5, [pc, #48]	; (10884 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   10852:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10854:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   10856:	fa24 f203 	lsr.w	r2, r4, r3
   1085a:	07d2      	lsls	r2, r2, #31
   1085c:	d508      	bpl.n	10870 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1085e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10862:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   10866:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   1086a:	4282      	cmp	r2, r0
   1086c:	d100      	bne.n	10870 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1086e:	b121      	cbz	r1, 1087a <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10870:	3301      	adds	r3, #1
   10872:	2b08      	cmp	r3, #8
   10874:	d1ef      	bne.n	10856 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   10876:	f06f 0312 	mvn.w	r3, #18
}
   1087a:	4618      	mov	r0, r3
   1087c:	bd30      	pop	{r4, r5, pc}
   1087e:	bf00      	nop
   10880:	20001494 	.word	0x20001494
   10884:	40006000 	.word	0x40006000

00010888 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   10888:	b570      	push	{r4, r5, r6, lr}
   1088a:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   1088c:	460d      	mov	r5, r1
   1088e:	b9c9      	cbnz	r1, 108c4 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   10890:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   10892:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   10894:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   10896:	4610      	mov	r0, r2
   10898:	7919      	ldrb	r1, [r3, #4]
   1089a:	f7ff ffd7 	bl	1084c <gpiote_find_channel.isra.4>
		if (i < 0) {
   1089e:	2800      	cmp	r0, #0
   108a0:	db12      	blt.n	108c8 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   108a2:	68b2      	ldr	r2, [r6, #8]
   108a4:	2301      	movs	r3, #1
   108a6:	fa03 f404 	lsl.w	r4, r3, r4
   108aa:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   108ac:	f100 0140 	add.w	r1, r0, #64	; 0x40
   108b0:	4a06      	ldr	r2, [pc, #24]	; (108cc <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   108b2:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   108b4:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   108b8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   108bc:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   108c0:	4628      	mov	r0, r5
   108c2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   108c4:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   108c8:	bd70      	pop	{r4, r5, r6, pc}
   108ca:	bf00      	nop
   108cc:	40006000 	.word	0x40006000

000108d0 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   108d0:	b570      	push	{r4, r5, r6, lr}
   108d2:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   108d4:	460d      	mov	r5, r1
   108d6:	b9b1      	cbnz	r1, 10906 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   108d8:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   108da:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   108dc:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   108de:	4610      	mov	r0, r2
   108e0:	7919      	ldrb	r1, [r3, #4]
   108e2:	f7ff ffb3 	bl	1084c <gpiote_find_channel.isra.4>
		if (i < 0) {
   108e6:	2800      	cmp	r0, #0
   108e8:	db0f      	blt.n	1090a <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   108ea:	68b2      	ldr	r2, [r6, #8]
   108ec:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   108ee:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   108f2:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   108f6:	4b05      	ldr	r3, [pc, #20]	; (1090c <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   108f8:	ea22 0404 	bic.w	r4, r2, r4
   108fc:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   108fe:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   10902:	4628      	mov	r0, r5
   10904:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   10906:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   1090a:	bd70      	pop	{r4, r5, r6, pc}
   1090c:	40006000 	.word	0x40006000

00010910 <gpio_nrf5_config>:
{
   10910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   10914:	6806      	ldr	r6, [r0, #0]
{
   10916:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   10918:	68b2      	ldr	r2, [r6, #8]
   1091a:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   1091c:	b119      	cbz	r1, 10926 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   1091e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   10926:	f403 7240 	and.w	r2, r3, #768	; 0x300
   1092a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   1092e:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   10932:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   10936:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   1093a:	d058      	beq.n	109ee <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   1093c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10940:	bf0c      	ite	eq
   10942:	2204      	moveq	r2, #4
   10944:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   10946:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1094a:	bf08      	it	eq
   1094c:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   1094e:	f013 0f01 	tst.w	r3, #1
   10952:	ea4f 0180 	mov.w	r1, r0, lsl #2
   10956:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 10a24 <gpio_nrf5_config+0x114>
   1095a:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   1095e:	d04f      	beq.n	10a00 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   10960:	2a0c      	cmp	r2, #12
   10962:	d146      	bne.n	109f2 <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   10964:	2701      	movs	r7, #1
   10966:	40a7      	lsls	r7, r4
   10968:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   1096c:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   1096e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   10972:	f041 0103 	orr.w	r1, r1, #3
   10976:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   10978:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   1097c:	f013 0002 	ands.w	r0, r3, #2
   10980:	d049      	beq.n	10a16 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   10982:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   10984:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   10986:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   1098a:	d5c8      	bpl.n	1091e <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   1098c:	065a      	lsls	r2, r3, #25
   1098e:	d43d      	bmi.n	10a0c <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   10990:	f013 0f04 	tst.w	r3, #4
   10994:	bf14      	ite	ne
   10996:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   1099a:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   1099e:	4e1f      	ldr	r6, [pc, #124]	; (10a1c <gpio_nrf5_config+0x10c>)
   109a0:	6837      	ldr	r7, [r6, #0]
   109a2:	4638      	mov	r0, r7
   109a4:	f7ef fc4e 	bl	244 <__popcountsi2>
   109a8:	2808      	cmp	r0, #8
   109aa:	d032      	beq.n	10a12 <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   109ac:	4641      	mov	r1, r8
   109ae:	4620      	mov	r0, r4
   109b0:	f7ff ff4c 	bl	1084c <gpiote_find_channel.isra.4>
		if (i < 0) {
   109b4:	2800      	cmp	r0, #0
   109b6:	da08      	bge.n	109ca <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   109b8:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   109ba:	fa93 f0a3 	rbit	r0, r3
   109be:	2b00      	cmp	r3, #0
   109c0:	fab0 f080 	clz	r0, r0
   109c4:	bf08      	it	eq
   109c6:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   109ca:	2301      	movs	r3, #1
   109cc:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   109ce:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   109d0:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   109d2:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   109d6:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   109d8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   109dc:	4b10      	ldr	r3, [pc, #64]	; (10a20 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   109de:	f044 0401 	orr.w	r4, r4, #1
   109e2:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   109e4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   109e8:	2000      	movs	r0, #0
   109ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   109ee:	220c      	movs	r2, #12
   109f0:	e7a9      	b.n	10946 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   109f2:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   109f4:	bf02      	ittt	eq
   109f6:	2701      	moveq	r7, #1
   109f8:	40a7      	lsleq	r7, r4
   109fa:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   109fe:	e7b5      	b.n	1096c <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   10a00:	4461      	add	r1, ip
   10a02:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   10a06:	430a      	orrs	r2, r1
   10a08:	433a      	orrs	r2, r7
   10a0a:	e7b5      	b.n	10978 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   10a0c:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   10a10:	e7c5      	b.n	1099e <gpio_nrf5_config+0x8e>
			return -EIO;
   10a12:	f06f 0004 	mvn.w	r0, #4
}
   10a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a1a:	bf00      	nop
   10a1c:	20001494 	.word	0x20001494
   10a20:	40006000 	.word	0x40006000
   10a24:	00012a48 	.word	0x00012a48

00010a28 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   10a28:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   10a2a:	2200      	movs	r2, #0
   10a2c:	2105      	movs	r1, #5
   10a2e:	2006      	movs	r0, #6
   10a30:	f7f0 ff46 	bl	18c0 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   10a34:	2006      	movs	r0, #6
   10a36:	f7f0 ff11 	bl	185c <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   10a3a:	2000      	movs	r0, #0
   10a3c:	bd08      	pop	{r3, pc}
	...

00010a40 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10a40:	2100      	movs	r1, #0
{
   10a42:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   10a44:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   10a46:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   10a48:	2501      	movs	r5, #1
   10a4a:	008b      	lsls	r3, r1, #2
   10a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10a50:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   10a54:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   10a58:	b140      	cbz	r0, 10a6c <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   10a5a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   10a5e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   10a62:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   10a66:	fa05 f303 	lsl.w	r3, r5, r3
   10a6a:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10a6c:	3101      	adds	r1, #1
   10a6e:	2908      	cmp	r1, #8
   10a70:	d1eb      	bne.n	10a4a <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   10a72:	4e08      	ldr	r6, [pc, #32]	; (10a94 <gpio_nrf5_port_isr+0x54>)
   10a74:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   10a76:	689d      	ldr	r5, [r3, #8]
   10a78:	681c      	ldr	r4, [r3, #0]
   10a7a:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   10a7c:	b14c      	cbz	r4, 10a92 <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   10a7e:	68a3      	ldr	r3, [r4, #8]
   10a80:	421d      	tst	r5, r3
   10a82:	d004      	beq.n	10a8e <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   10a84:	6863      	ldr	r3, [r4, #4]
   10a86:	462a      	mov	r2, r5
   10a88:	4621      	mov	r1, r4
   10a8a:	4630      	mov	r0, r6
   10a8c:	4798      	blx	r3
	return node->next;
   10a8e:	6824      	ldr	r4, [r4, #0]
   10a90:	e7f4      	b.n	10a7c <gpio_nrf5_port_isr+0x3c>
   10a92:	bd70      	pop	{r4, r5, r6, pc}
   10a94:	200038ec 	.word	0x200038ec

00010a98 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10a98:	4b03      	ldr	r3, [pc, #12]	; (10aa8 <uart_nrfx_err_check+0x10>)
   10a9a:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   10a9c:	b118      	cbz	r0, 10aa6 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   10a9e:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   10aa2:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   10aa6:	4770      	bx	lr
   10aa8:	40002124 	.word	0x40002124

00010aac <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10aac:	4b07      	ldr	r3, [pc, #28]	; (10acc <uart_nrfx_poll_out+0x20>)
   10aae:	2200      	movs	r2, #0
   10ab0:	601a      	str	r2, [r3, #0]
{
   10ab2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10ab4:	681a      	ldr	r2, [r3, #0]
   10ab6:	9201      	str	r2, [sp, #4]
    (void)dummy;
   10ab8:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   10aba:	4a05      	ldr	r2, [pc, #20]	; (10ad0 <uart_nrfx_poll_out+0x24>)
   10abc:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10ac0:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   10ac2:	2a00      	cmp	r2, #0
   10ac4:	d0fc      	beq.n	10ac0 <uart_nrfx_poll_out+0x14>
}
   10ac6:	4608      	mov	r0, r1
   10ac8:	b002      	add	sp, #8
   10aca:	4770      	bx	lr
   10acc:	4000211c 	.word	0x4000211c
   10ad0:	40002000 	.word	0x40002000

00010ad4 <uart_nrfx_poll_in>:
   10ad4:	4b08      	ldr	r3, [pc, #32]	; (10af8 <uart_nrfx_poll_in+0x24>)
   10ad6:	681a      	ldr	r2, [r3, #0]
{
   10ad8:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   10ada:	b152      	cbz	r2, 10af2 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10adc:	2000      	movs	r0, #0
   10ade:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10ae0:	681b      	ldr	r3, [r3, #0]
   10ae2:	9301      	str	r3, [sp, #4]
    (void)dummy;
   10ae4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   10ae6:	4b05      	ldr	r3, [pc, #20]	; (10afc <uart_nrfx_poll_in+0x28>)
   10ae8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   10aec:	700b      	strb	r3, [r1, #0]
}
   10aee:	b002      	add	sp, #8
   10af0:	4770      	bx	lr
		return -1;
   10af2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10af6:	e7fa      	b.n	10aee <uart_nrfx_poll_in+0x1a>
   10af8:	40002108 	.word	0x40002108
   10afc:	40002000 	.word	0x40002000

00010b00 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   10b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   10b02:	4819      	ldr	r0, [pc, #100]	; (10b68 <uart_nrfx_init+0x68>)
   10b04:	f000 f98c 	bl	10e20 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   10b08:	6843      	ldr	r3, [r0, #4]
   10b0a:	4604      	mov	r4, r0
   10b0c:	681d      	ldr	r5, [r3, #0]
   10b0e:	2206      	movs	r2, #6
   10b10:	f240 1301 	movw	r3, #257	; 0x101
   10b14:	2100      	movs	r1, #0
   10b16:	47a8      	blx	r5
   10b18:	6863      	ldr	r3, [r4, #4]
   10b1a:	681d      	ldr	r5, [r3, #0]
   10b1c:	2300      	movs	r3, #0
   10b1e:	4619      	mov	r1, r3
   10b20:	2208      	movs	r2, #8
   10b22:	4620      	mov	r0, r4
   10b24:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   10b26:	4b11      	ldr	r3, [pc, #68]	; (10b6c <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10b28:	4911      	ldr	r1, [pc, #68]	; (10b70 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   10b2a:	2208      	movs	r2, #8
   10b2c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   10b30:	2206      	movs	r2, #6
   10b32:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10b36:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10b38:	4a0e      	ldr	r2, [pc, #56]	; (10b74 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10b3a:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   10b3e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   10b42:	2204      	movs	r2, #4
   10b44:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10b48:	4a0b      	ldr	r2, [pc, #44]	; (10b78 <uart_nrfx_init+0x78>)
   10b4a:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10b4c:	6812      	ldr	r2, [r2, #0]
   10b4e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   10b50:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10b52:	4a0a      	ldr	r2, [pc, #40]	; (10b7c <uart_nrfx_init+0x7c>)
   10b54:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10b56:	6812      	ldr	r2, [r2, #0]
   10b58:	9200      	str	r2, [sp, #0]
    (void)dummy;
   10b5a:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10b5c:	2201      	movs	r2, #1
   10b5e:	600a      	str	r2, [r1, #0]
   10b60:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   10b62:	b003      	add	sp, #12
   10b64:	bd30      	pop	{r4, r5, pc}
   10b66:	bf00      	nop
   10b68:	00012aac 	.word	0x00012aac
   10b6c:	40002000 	.word	0x40002000
   10b70:	40002008 	.word	0x40002008
   10b74:	01d7e000 	.word	0x01d7e000
   10b78:	4000211c 	.word	0x4000211c
   10b7c:	40002108 	.word	0x40002108

00010b80 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   10b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   10b84:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   10b86:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   10b88:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   10b8a:	42a3      	cmp	r3, r4
	d = &rand[octets];
   10b8c:	440a      	add	r2, r1
	s = &rng->rand[first];
   10b8e:	4406      	add	r6, r0
	if (first <= last) {
   10b90:	d81f      	bhi.n	10bd2 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   10b92:	1ae4      	subs	r4, r4, r3
   10b94:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10b96:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   10b98:	bf3e      	ittt	cc
   10b9a:	1a64      	subcc	r4, r4, r1
   10b9c:	b2e7      	uxtbcc	r7, r4
   10b9e:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   10ba0:	4423      	add	r3, r4
		octets -= avail;
   10ba2:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   10ba6:	bf28      	it	cs
   10ba8:	2700      	movcs	r7, #0
		first += avail;
   10baa:	b2db      	uxtb	r3, r3
		octets -= avail;
   10bac:	b2c9      	uxtb	r1, r1
   10bae:	4434      	add	r4, r6

		while (avail--) {
   10bb0:	42a6      	cmp	r6, r4
   10bb2:	d109      	bne.n	10bc8 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   10bb4:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   10bb6:	7843      	ldrb	r3, [r0, #1]
   10bb8:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   10bba:	bf82      	ittt	hi
   10bbc:	4b20      	ldrhi	r3, [pc, #128]	; (10c40 <get+0xc0>)
   10bbe:	2201      	movhi	r2, #1
   10bc0:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   10bc2:	4608      	mov	r0, r1
   10bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   10bc8:	f816 5b01 	ldrb.w	r5, [r6], #1
   10bcc:	f802 5d01 	strb.w	r5, [r2, #-1]!
   10bd0:	e7ee      	b.n	10bb0 <get+0x30>
		avail = rng->count - first;
   10bd2:	7805      	ldrb	r5, [r0, #0]
   10bd4:	1aed      	subs	r5, r5, r3
   10bd6:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   10bd8:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   10bda:	bf3f      	itttt	cc
   10bdc:	1a67      	subcc	r7, r4, r1
   10bde:	19ed      	addcc	r5, r5, r7
   10be0:	b2ef      	uxtbcc	r7, r5
   10be2:	460d      	movcc	r5, r1
			first += avail;
   10be4:	bf38      	it	cc
   10be6:	185b      	addcc	r3, r3, r1
		octets -= avail;
   10be8:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   10bec:	bf32      	itee	cc
   10bee:	b2db      	uxtbcc	r3, r3
   10bf0:	4627      	movcs	r7, r4
			first = 0;
   10bf2:	2300      	movcs	r3, #0
		octets -= avail;
   10bf4:	b2c9      	uxtb	r1, r1
   10bf6:	4696      	mov	lr, r2
   10bf8:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   10bfc:	4566      	cmp	r6, ip
   10bfe:	d119      	bne.n	10c34 <get+0xb4>
   10c00:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   10c02:	2900      	cmp	r1, #0
   10c04:	d0d6      	beq.n	10bb4 <get+0x34>
   10c06:	2c00      	cmp	r4, #0
   10c08:	d0d4      	beq.n	10bb4 <get+0x34>
			if (octets < last) {
   10c0a:	428c      	cmp	r4, r1
   10c0c:	bf8a      	itet	hi
   10c0e:	460b      	movhi	r3, r1
   10c10:	4623      	movls	r3, r4
				remaining = last - octets;
   10c12:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   10c14:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   10c18:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   10c1c:	bf8c      	ite	hi
   10c1e:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   10c20:	2700      	movls	r7, #0
			octets -= last;
   10c22:	b2c9      	uxtb	r1, r1
   10c24:	18f4      	adds	r4, r6, r3
			while (last--) {
   10c26:	42a6      	cmp	r6, r4
   10c28:	d0c4      	beq.n	10bb4 <get+0x34>
				*(--d) = *s++;
   10c2a:	f816 5b01 	ldrb.w	r5, [r6], #1
   10c2e:	f802 5d01 	strb.w	r5, [r2, #-1]!
   10c32:	e7f8      	b.n	10c26 <get+0xa6>
			*(--d) = *s++;
   10c34:	f816 8b01 	ldrb.w	r8, [r6], #1
   10c38:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   10c3c:	e7de      	b.n	10bfc <get+0x7c>
   10c3e:	bf00      	nop
   10c40:	4000d000 	.word	0x4000d000

00010c44 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   10c44:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   10c46:	b1d0      	cbz	r0, 10c7e <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   10c48:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   10c4a:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   10c4c:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   10c4e:	1c53      	adds	r3, r2, #1
   10c50:	b2db      	uxtb	r3, r3
		last = 0;
   10c52:	42ab      	cmp	r3, r5
   10c54:	bf08      	it	eq
   10c56:	2300      	moveq	r3, #0
	if (last == rng->first) {
   10c58:	42a3      	cmp	r3, r4
   10c5a:	d010      	beq.n	10c7e <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   10c5c:	b161      	cbz	r1, 10c78 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   10c5e:	490a      	ldr	r1, [pc, #40]	; (10c88 <isr+0x44>)
   10c60:	4402      	add	r2, r0
   10c62:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   10c66:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   10c68:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   10c6a:	3301      	adds	r3, #1
   10c6c:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   10c6e:	429d      	cmp	r5, r3
   10c70:	bf08      	it	eq
   10c72:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   10c74:	42a3      	cmp	r3, r4
   10c76:	d005      	beq.n	10c84 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   10c78:	f06f 000f 	mvn.w	r0, #15
   10c7c:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   10c7e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10c82:	bd30      	pop	{r4, r5, pc}
		return 0;
   10c84:	2000      	movs	r0, #0
}
   10c86:	bd30      	pop	{r4, r5, pc}
   10c88:	4000d000 	.word	0x4000d000

00010c8c <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   10c8c:	07db      	lsls	r3, r3, #31
{
   10c8e:	b570      	push	{r4, r5, r6, lr}
   10c90:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   10c92:	d507      	bpl.n	10ca4 <entropy_nrf5_get_entropy_isr+0x18>
   10c94:	4613      	mov	r3, r2
   10c96:	4a0d      	ldr	r2, [pc, #52]	; (10ccc <entropy_nrf5_get_entropy_isr+0x40>)
   10c98:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   10c9a:	2500      	movs	r5, #0
	while (len) {
   10c9c:	b94b      	cbnz	r3, 10cb2 <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   10c9e:	6050      	str	r0, [r2, #4]

	return cnt;
   10ca0:	4620      	mov	r0, r4
}
   10ca2:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   10ca4:	6880      	ldr	r0, [r0, #8]
   10ca6:	460a      	mov	r2, r1
   10ca8:	303c      	adds	r0, #60	; 0x3c
   10caa:	b2e1      	uxtb	r1, r4
   10cac:	f7ff ff68 	bl	10b80 <get>
   10cb0:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   10cb2:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   10cb6:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   10cb8:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   10cbc:	2e00      	cmp	r6, #0
   10cbe:	d0fb      	beq.n	10cb8 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   10cc0:	3b01      	subs	r3, #1
   10cc2:	b29b      	uxth	r3, r3
   10cc4:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   10cc8:	54ce      	strb	r6, [r1, r3]
   10cca:	e7e7      	b.n	10c9c <entropy_nrf5_get_entropy_isr+0x10>
   10ccc:	4000d000 	.word	0x4000d000

00010cd0 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   10cd0:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   10cd2:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   10cd4:	2201      	movs	r2, #1
   10cd6:	4611      	mov	r1, r2
   10cd8:	4620      	mov	r0, r4
   10cda:	f000 fd7f 	bl	117dc <_impl_k_sem_init>
   10cde:	f104 0018 	add.w	r0, r4, #24
   10ce2:	2201      	movs	r2, #1
   10ce4:	2100      	movs	r1, #0
   10ce6:	f000 fd79 	bl	117dc <_impl_k_sem_init>
	rng->threshold = threshold;
   10cea:	2304      	movs	r3, #4
   10cec:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   10cf0:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   10cf2:	2500      	movs	r5, #0
	rng->threshold = threshold;
   10cf4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   10cf8:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   10cfa:	4b11      	ldr	r3, [pc, #68]	; (10d40 <entropy_nrf5_init+0x70>)
	rng->count = len;
   10cfc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   10d00:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   10d02:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   10d06:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   10d0a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   10d0e:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   10d12:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   10d16:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   10d1a:	f042 0201 	orr.w	r2, r2, #1
   10d1e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   10d22:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   10d24:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   10d28:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   10d2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   10d2e:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   10d30:	462a      	mov	r2, r5
   10d32:	f7f0 fdc5 	bl	18c0 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   10d36:	4630      	mov	r0, r6
   10d38:	f7f0 fd90 	bl	185c <_arch_irq_enable>

	return 0;
}
   10d3c:	4628      	mov	r0, r5
   10d3e:	bd70      	pop	{r4, r5, r6, pc}
   10d40:	4000d000 	.word	0x4000d000

00010d44 <isr_rand>:
{
   10d44:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   10d46:	4b12      	ldr	r3, [pc, #72]	; (10d90 <isr_rand+0x4c>)
   10d48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10d4c:	b1fb      	cbz	r3, 10d8e <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   10d4e:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   10d50:	2101      	movs	r1, #1
   10d52:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   10d56:	f7ff ff75 	bl	10c44 <isr>
		if (ret != -EBUSY) {
   10d5a:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   10d5e:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   10d60:	d00d      	beq.n	10d7e <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   10d62:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   10d66:	bf14      	ite	ne
   10d68:	2100      	movne	r1, #0
   10d6a:	2101      	moveq	r1, #1
   10d6c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   10d70:	f7ff ff68 	bl	10c44 <isr>
   10d74:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10d76:	f105 0018 	add.w	r0, r5, #24
   10d7a:	f000 fd38 	bl	117ee <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   10d7e:	4b04      	ldr	r3, [pc, #16]	; (10d90 <isr_rand+0x4c>)
   10d80:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   10d82:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   10d84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   10d88:	bf1c      	itt	ne
   10d8a:	2201      	movne	r2, #1
   10d8c:	605a      	strne	r2, [r3, #4]
   10d8e:	bd38      	pop	{r3, r4, r5, pc}
   10d90:	4000d000 	.word	0x4000d000

00010d94 <entropy_nrf5_get_entropy>:
{
   10d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   10d98:	6885      	ldr	r5, [r0, #8]
{
   10d9a:	460f      	mov	r7, r1
   10d9c:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   10d9e:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   10da2:	b914      	cbnz	r4, 10daa <entropy_nrf5_get_entropy+0x16>
}
   10da4:	4620      	mov	r0, r4
   10da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10daa:	2cff      	cmp	r4, #255	; 0xff
   10dac:	4623      	mov	r3, r4
   10dae:	bf28      	it	cs
   10db0:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   10db2:	1ae4      	subs	r4, r4, r3
   10db4:	b2de      	uxtb	r6, r3
   10db6:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   10db8:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   10dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10dc0:	4628      	mov	r0, r5
   10dc2:	f000 fd3c 	bl	1183e <_impl_k_sem_take>
   10dc6:	4631      	mov	r1, r6
   10dc8:	463a      	mov	r2, r7
   10dca:	4648      	mov	r0, r9
   10dcc:	f7ff fed8 	bl	10b80 <get>
   10dd0:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10dd2:	4628      	mov	r0, r5
   10dd4:	f000 fd0b 	bl	117ee <_impl_k_sem_give>
			if (len8) {
   10dd8:	2e00      	cmp	r6, #0
   10dda:	d0e2      	beq.n	10da2 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   10ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10de0:	4640      	mov	r0, r8
   10de2:	f000 fd2c 	bl	1183e <_impl_k_sem_take>
   10de6:	e7e9      	b.n	10dbc <entropy_nrf5_get_entropy+0x28>

00010de8 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   10de8:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   10dea:	4802      	ldr	r0, [pc, #8]	; (10df4 <entropy_nrf_get_entropy_isr+0xc>)
   10dec:	460a      	mov	r2, r1
   10dee:	4619      	mov	r1, r3
   10df0:	f7ff bec6 	b.w	10b80 <get>
   10df4:	200014d4 	.word	0x200014d4

00010df8 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   10df8:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   10dfa:	4b08      	ldr	r3, [pc, #32]	; (10e1c <_sys_device_do_config_level+0x24>)
   10dfc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   10e00:	3001      	adds	r0, #1
   10e02:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   10e06:	4620      	mov	r0, r4
   10e08:	42a8      	cmp	r0, r5
   10e0a:	f104 040c 	add.w	r4, r4, #12
   10e0e:	d300      	bcc.n	10e12 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   10e10:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   10e12:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   10e16:	685b      	ldr	r3, [r3, #4]
   10e18:	4798      	blx	r3
   10e1a:	e7f4      	b.n	10e06 <_sys_device_do_config_level+0xe>
   10e1c:	00012ac8 	.word	0x00012ac8

00010e20 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   10e20:	4b10      	ldr	r3, [pc, #64]	; (10e64 <device_get_binding+0x44>)
{
   10e22:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   10e24:	4c10      	ldr	r4, [pc, #64]	; (10e68 <device_get_binding+0x48>)
{
   10e26:	4605      	mov	r5, r0
   10e28:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   10e2a:	429c      	cmp	r4, r3
   10e2c:	d104      	bne.n	10e38 <device_get_binding+0x18>
   10e2e:	4c0e      	ldr	r4, [pc, #56]	; (10e68 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   10e30:	42b4      	cmp	r4, r6
   10e32:	d109      	bne.n	10e48 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   10e34:	2400      	movs	r4, #0
   10e36:	e012      	b.n	10e5e <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   10e38:	6862      	ldr	r2, [r4, #4]
   10e3a:	b11a      	cbz	r2, 10e44 <device_get_binding+0x24>
   10e3c:	6822      	ldr	r2, [r4, #0]
   10e3e:	6812      	ldr	r2, [r2, #0]
   10e40:	42aa      	cmp	r2, r5
   10e42:	d00c      	beq.n	10e5e <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   10e44:	340c      	adds	r4, #12
   10e46:	e7f0      	b.n	10e2a <device_get_binding+0xa>
		if (!info->driver_api) {
   10e48:	6863      	ldr	r3, [r4, #4]
   10e4a:	b90b      	cbnz	r3, 10e50 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   10e4c:	340c      	adds	r4, #12
   10e4e:	e7ef      	b.n	10e30 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   10e50:	6823      	ldr	r3, [r4, #0]
   10e52:	4628      	mov	r0, r5
   10e54:	6819      	ldr	r1, [r3, #0]
   10e56:	f7f0 fed5 	bl	1c04 <strcmp>
   10e5a:	2800      	cmp	r0, #0
   10e5c:	d1f6      	bne.n	10e4c <device_get_binding+0x2c>
}
   10e5e:	4620      	mov	r0, r4
   10e60:	bd70      	pop	{r4, r5, r6, pc}
   10e62:	bf00      	nop
   10e64:	2000391c 	.word	0x2000391c
   10e68:	2000388c 	.word	0x2000388c

00010e6c <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   10e6c:	1c43      	adds	r3, r0, #1
   10e6e:	d003      	beq.n	10e78 <_sys_power_save_idle_exit+0xc>
   10e70:	4b03      	ldr	r3, [pc, #12]	; (10e80 <_sys_power_save_idle_exit+0x14>)
   10e72:	681b      	ldr	r3, [r3, #0]
   10e74:	4298      	cmp	r0, r3
   10e76:	db01      	blt.n	10e7c <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   10e78:	f7f0 bab8 	b.w	13ec <_timer_idle_exit>
   10e7c:	4770      	bx	lr
   10e7e:	bf00      	nop
   10e80:	20003880 	.word	0x20003880

00010e84 <idle>:
	return list->head == list;
   10e84:	4d0f      	ldr	r5, [pc, #60]	; (10ec4 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   10e86:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   10e88:	4f0f      	ldr	r7, [pc, #60]	; (10ec8 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e8a:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   10e8e:	f04f 0220 	mov.w	r2, #32
   10e92:	f3ef 8311 	mrs	r3, BASEPRI
   10e96:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   10e9a:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e9c:	42b3      	cmp	r3, r6
   10e9e:	d00a      	beq.n	10eb6 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   10ea0:	b14b      	cbz	r3, 10eb6 <idle+0x32>
   10ea2:	691c      	ldr	r4, [r3, #16]
   10ea4:	1c63      	adds	r3, r4, #1
   10ea6:	d008      	beq.n	10eba <idle+0x36>
   10ea8:	683b      	ldr	r3, [r7, #0]
   10eaa:	42a3      	cmp	r3, r4
   10eac:	dd05      	ble.n	10eba <idle+0x36>
	_kernel.idle = ticks;
   10eae:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   10eb0:	f7f0 fd5c 	bl	196c <k_cpu_idle>
   10eb4:	e7eb      	b.n	10e8e <idle+0xa>
   10eb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   10eba:	4620      	mov	r0, r4
   10ebc:	f7f0 fa78 	bl	13b0 <_timer_idle_enter>
   10ec0:	e7f5      	b.n	10eae <idle+0x2a>
   10ec2:	bf00      	nop
   10ec4:	200016e8 	.word	0x200016e8
   10ec8:	20003880 	.word	0x20003880

00010ecc <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   10ecc:	4802      	ldr	r0, [pc, #8]	; (10ed8 <_bss_zero+0xc>)
   10ece:	4a03      	ldr	r2, [pc, #12]	; (10edc <_bss_zero+0x10>)
   10ed0:	2100      	movs	r1, #0
   10ed2:	1a12      	subs	r2, r2, r0
   10ed4:	f7f0 bee4 	b.w	1ca0 <memset>
   10ed8:	20000000 	.word	0x20000000
   10edc:	200017a8 	.word	0x200017a8

00010ee0 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   10ee0:	4802      	ldr	r0, [pc, #8]	; (10eec <_data_copy+0xc>)
   10ee2:	4a03      	ldr	r2, [pc, #12]	; (10ef0 <_data_copy+0x10>)
   10ee4:	4903      	ldr	r1, [pc, #12]	; (10ef4 <_data_copy+0x14>)
   10ee6:	1a12      	subs	r2, r2, r0
   10ee8:	f7f0 beae 	b.w	1c48 <memcpy>
   10eec:	20003438 	.word	0x20003438
   10ef0:	200039c4 	.word	0x200039c4
   10ef4:	00012b18 	.word	0x00012b18

00010ef8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   10ef8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10efa:	2002      	movs	r0, #2
   10efc:	f7ff ff7c 	bl	10df8 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   10f00:	4807      	ldr	r0, [pc, #28]	; (10f20 <bg_thread_main+0x28>)
   10f02:	f7f0 f843 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   10f06:	2003      	movs	r0, #3
   10f08:	f7ff ff76 	bl	10df8 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   10f0c:	f000 feaa 	bl	11c64 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   10f10:	f7ef fbd6 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   10f14:	4a03      	ldr	r2, [pc, #12]	; (10f24 <bg_thread_main+0x2c>)
   10f16:	7a13      	ldrb	r3, [r2, #8]
   10f18:	f023 0301 	bic.w	r3, r3, #1
   10f1c:	7213      	strb	r3, [r2, #8]
   10f1e:	bd08      	pop	{r3, pc}
   10f20:	00012ae4 	.word	0x00012ae4
   10f24:	20001558 	.word	0x20001558

00010f28 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   10f28:	b580      	push	{r7, lr}
   10f2a:	b086      	sub	sp, #24
   10f2c:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   10f2e:	f7f0 fae1 	bl	14f4 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   10f32:	4b30      	ldr	r3, [pc, #192]	; (10ff4 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   10f34:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10f38:	4b2f      	ldr	r3, [pc, #188]	; (10ff8 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   10f3a:	4d30      	ldr	r5, [pc, #192]	; (10ffc <_Cstart+0xd4>)
   10f3c:	4e30      	ldr	r6, [pc, #192]	; (11000 <_Cstart+0xd8>)
   10f3e:	2400      	movs	r4, #0
   10f40:	22e0      	movs	r2, #224	; 0xe0
   10f42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   10f46:	77dc      	strb	r4, [r3, #31]
   10f48:	761c      	strb	r4, [r3, #24]
   10f4a:	765c      	strb	r4, [r3, #25]
   10f4c:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   10f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10f50:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   10f54:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   10f56:	f7f0 fc79 	bl	184c <_FaultInit>
	_CpuIdleInit();
   10f5a:	f7f0 fd01 	bl	1960 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10f5e:	4620      	mov	r0, r4
   10f60:	f7ff ff4a 	bl	10df8 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10f64:	2001      	movs	r0, #1
   10f66:	f7ff ff47 	bl	10df8 <_sys_device_do_config_level>
	_sched_init();
   10f6a:	f000 fbf9 	bl	11760 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   10f6e:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   10f70:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   10f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10f76:	9304      	str	r3, [sp, #16]
   10f78:	9403      	str	r4, [sp, #12]
   10f7a:	9402      	str	r4, [sp, #8]
   10f7c:	9401      	str	r4, [sp, #4]
   10f7e:	9400      	str	r4, [sp, #0]
   10f80:	4b20      	ldr	r3, [pc, #128]	; (11004 <_Cstart+0xdc>)
   10f82:	4921      	ldr	r1, [pc, #132]	; (11008 <_Cstart+0xe0>)
   10f84:	4628      	mov	r0, r5
   10f86:	f000 fe15 	bl	11bb4 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10f8a:	7a6b      	ldrb	r3, [r5, #9]
   10f8c:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   10f90:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10f94:	726a      	strb	r2, [r5, #9]
   10f96:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   10f98:	d102      	bne.n	10fa0 <_Cstart+0x78>
   10f9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10f9c:	3301      	adds	r3, #1
   10f9e:	d024      	beq.n	10fea <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   10fa0:	2301      	movs	r3, #1
   10fa2:	4e1a      	ldr	r6, [pc, #104]	; (1100c <_Cstart+0xe4>)
   10fa4:	9304      	str	r3, [sp, #16]
   10fa6:	230f      	movs	r3, #15
   10fa8:	9303      	str	r3, [sp, #12]
   10faa:	2300      	movs	r3, #0
   10fac:	9302      	str	r3, [sp, #8]
   10fae:	9301      	str	r3, [sp, #4]
   10fb0:	9300      	str	r3, [sp, #0]
   10fb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   10fb6:	4b16      	ldr	r3, [pc, #88]	; (11010 <_Cstart+0xe8>)
   10fb8:	4916      	ldr	r1, [pc, #88]	; (11014 <_Cstart+0xec>)
   10fba:	4630      	mov	r0, r6
   10fbc:	f000 fdfa 	bl	11bb4 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10fc0:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   10fc2:	60e6      	str	r6, [r4, #12]
   10fc4:	f023 0304 	bic.w	r3, r3, #4
   10fc8:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   10fca:	4b13      	ldr	r3, [pc, #76]	; (11018 <_Cstart+0xf0>)
   10fcc:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   10fce:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   10fd0:	4b12      	ldr	r3, [pc, #72]	; (1101c <_Cstart+0xf4>)

	_current = main_thread;
   10fd2:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   10fd4:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   10fd8:	4c11      	ldr	r4, [pc, #68]	; (11020 <_Cstart+0xf8>)
   10fda:	4a0a      	ldr	r2, [pc, #40]	; (11004 <_Cstart+0xdc>)
   10fdc:	f383 8809 	msr	PSP, r3
   10fe0:	2100      	movs	r1, #0
   10fe2:	f381 8811 	msr	BASEPRI, r1
   10fe6:	4610      	mov	r0, r2
   10fe8:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   10fea:	4628      	mov	r0, r5
   10fec:	f000 fab4 	bl	11558 <_add_thread_to_ready_q>
   10ff0:	e7d6      	b.n	10fa0 <_Cstart+0x78>
   10ff2:	bf00      	nop
   10ff4:	20003038 	.word	0x20003038
   10ff8:	e000ed00 	.word	0xe000ed00
   10ffc:	20001558 	.word	0x20001558
   11000:	200016e8 	.word	0x200016e8
   11004:	00010ef9 	.word	0x00010ef9
   11008:	200022f8 	.word	0x200022f8
   1100c:	200014e8 	.word	0x200014e8
   11010:	00010e85 	.word	0x00010e85
   11014:	200026f8 	.word	0x200026f8
   11018:	200016fc 	.word	0x200016fc
   1101c:	200026f8 	.word	0x200026f8
   11020:	00000899 	.word	0x00000899

00011024 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   11024:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   11026:	4c07      	ldr	r4, [pc, #28]	; (11044 <init_static_pools+0x20>)
   11028:	4d07      	ldr	r5, [pc, #28]	; (11048 <init_static_pools+0x24>)
   1102a:	42ac      	cmp	r4, r5
   1102c:	d301      	bcc.n	11032 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1102e:	2000      	movs	r0, #0
   11030:	bd38      	pop	{r3, r4, r5, pc}
   11032:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   11036:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   11038:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   1103a:	4620      	mov	r0, r4
   1103c:	f7ef fc67 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   11040:	341c      	adds	r4, #28
   11042:	e7f2      	b.n	1102a <init_static_pools+0x6>
   11044:	2000391c 	.word	0x2000391c
   11048:	2000391c 	.word	0x2000391c

0001104c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   11050:	1e1d      	subs	r5, r3, #0
{
   11052:	b085      	sub	sp, #20
   11054:	4607      	mov	r7, r0
   11056:	460c      	mov	r4, r1
   11058:	4692      	mov	sl, r2
	if (timeout > 0) {
   1105a:	dd4c      	ble.n	110f6 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   1105c:	f000 fc16 	bl	1188c <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   11060:	f105 0309 	add.w	r3, r5, #9
   11064:	220a      	movs	r2, #10
   11066:	fbb3 f3f2 	udiv	r3, r3, r2
   1106a:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   1106e:	4b23      	ldr	r3, [pc, #140]	; (110fc <k_mem_pool_alloc+0xb0>)
   11070:	4e23      	ldr	r6, [pc, #140]	; (11100 <k_mem_pool_alloc+0xb4>)
   11072:	1afb      	subs	r3, r7, r3
   11074:	109b      	asrs	r3, r3, #2
   11076:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   11078:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1107a:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1107e:	9400      	str	r4, [sp, #0]
   11080:	ab03      	add	r3, sp, #12
   11082:	aa02      	add	r2, sp, #8
   11084:	4651      	mov	r1, sl
   11086:	4638      	mov	r0, r7
   11088:	f7ef fc8c 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   1108c:	f110 0f0b 	cmn.w	r0, #11
   11090:	d10b      	bne.n	110aa <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   11092:	9400      	str	r4, [sp, #0]
   11094:	ab03      	add	r3, sp, #12
   11096:	aa02      	add	r2, sp, #8
   11098:	4651      	mov	r1, sl
   1109a:	4638      	mov	r0, r7
   1109c:	f7ef fc82 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   110a0:	f110 0f0b 	cmn.w	r0, #11
   110a4:	bf08      	it	eq
   110a6:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   110aa:	7963      	ldrb	r3, [r4, #5]
   110ac:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   110ae:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   110b0:	f362 0303 	bfi	r3, r2, #0, #4
   110b4:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   110b6:	6863      	ldr	r3, [r4, #4]
   110b8:	9a03      	ldr	r2, [sp, #12]
   110ba:	f362 331f 	bfi	r3, r2, #12, #20
   110be:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   110c0:	b1b0      	cbz	r0, 110f0 <k_mem_pool_alloc+0xa4>
   110c2:	b1ad      	cbz	r5, 110f0 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   110c4:	f110 0f0c 	cmn.w	r0, #12
   110c8:	d112      	bne.n	110f0 <k_mem_pool_alloc+0xa4>
   110ca:	f04f 0320 	mov.w	r3, #32
   110ce:	f3ef 8011 	mrs	r0, BASEPRI
   110d2:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   110d6:	462a      	mov	r2, r5
   110d8:	4659      	mov	r1, fp
   110da:	f000 faeb 	bl	116b4 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   110de:	1c6b      	adds	r3, r5, #1
   110e0:	d0cd      	beq.n	1107e <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   110e2:	f000 fbd3 	bl	1188c <_tick_get>

			if (timeout < 0) {
   110e6:	ebb8 0500 	subs.w	r5, r8, r0
   110ea:	d5c8      	bpl.n	1107e <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   110ec:	f06f 000a 	mvn.w	r0, #10
}
   110f0:	b005      	add	sp, #20
   110f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   110f6:	f04f 0800 	mov.w	r8, #0
   110fa:	e7b8      	b.n	1106e <k_mem_pool_alloc+0x22>
   110fc:	2000391c 	.word	0x2000391c
   11100:	b6db6db7 	.word	0xb6db6db7

00011104 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   11104:	b570      	push	{r4, r5, r6, lr}
   11106:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   11108:	6802      	ldr	r2, [r0, #0]
   1110a:	7841      	ldrb	r1, [r0, #1]
   1110c:	4e13      	ldr	r6, [pc, #76]	; (1115c <k_mem_pool_free_id+0x58>)
   1110e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   11112:	00a4      	lsls	r4, r4, #2
   11114:	0b12      	lsrs	r2, r2, #12
   11116:	f001 010f 	and.w	r1, r1, #15
   1111a:	1930      	adds	r0, r6, r4
   1111c:	f7ef fcf4 	bl	b08 <_sys_mem_pool_block_free>
   11120:	f04f 0320 	mov.w	r3, #32
   11124:	f3ef 8511 	mrs	r5, BASEPRI
   11128:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   1112c:	f104 0014 	add.w	r0, r4, #20
   11130:	4430      	add	r0, r6
   11132:	f000 fb05 	bl	11740 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   11136:	b140      	cbz	r0, 1114a <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11138:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   1113c:	2b0d      	cmp	r3, #13
   1113e:	d804      	bhi.n	1114a <k_mem_pool_free_id+0x46>
   11140:	b133      	cbz	r3, 11150 <k_mem_pool_free_id+0x4c>
   11142:	4b07      	ldr	r3, [pc, #28]	; (11160 <k_mem_pool_free_id+0x5c>)
   11144:	685b      	ldr	r3, [r3, #4]
   11146:	051b      	lsls	r3, r3, #20
   11148:	d402      	bmi.n	11150 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1114a:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1114e:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   11150:	4628      	mov	r0, r5
}
   11152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   11156:	f000 b9a7 	b.w	114a8 <_reschedule>
   1115a:	bf00      	nop
   1115c:	2000391c 	.word	0x2000391c
   11160:	e000ed00 	.word	0xe000ed00

00011164 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   11164:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   11166:	1d0a      	adds	r2, r1, #4
   11168:	d204      	bcs.n	11174 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1116a:	2300      	movs	r3, #0
   1116c:	4669      	mov	r1, sp
   1116e:	f7ff ff6d 	bl	1104c <k_mem_pool_alloc>
   11172:	b118      	cbz	r0, 1117c <k_mem_pool_malloc+0x18>
		return NULL;
   11174:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   11176:	b003      	add	sp, #12
   11178:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1117c:	2204      	movs	r2, #4
   1117e:	eb0d 0102 	add.w	r1, sp, r2
   11182:	9800      	ldr	r0, [sp, #0]
   11184:	f7f0 fd60 	bl	1c48 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   11188:	9800      	ldr	r0, [sp, #0]
   1118a:	3004      	adds	r0, #4
   1118c:	e7f3      	b.n	11176 <k_mem_pool_malloc+0x12>

0001118e <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   1118e:	b110      	cbz	r0, 11196 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   11190:	3804      	subs	r0, #4
   11192:	f7ff bfb7 	b.w	11104 <k_mem_pool_free_id>
   11196:	4770      	bx	lr

00011198 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   11198:	4b03      	ldr	r3, [pc, #12]	; (111a8 <z_thread_malloc+0x10>)
   1119a:	689b      	ldr	r3, [r3, #8]
{
   1119c:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   1119e:	6e58      	ldr	r0, [r3, #100]	; 0x64
   111a0:	b108      	cbz	r0, 111a6 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   111a2:	f7ff bfdf 	b.w	11164 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   111a6:	4770      	bx	lr
   111a8:	200016e8 	.word	0x200016e8

000111ac <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   111ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111ae:	4605      	mov	r5, r0
   111b0:	460f      	mov	r7, r1
   111b2:	4614      	mov	r4, r2
	__asm__ volatile(
   111b4:	f04f 0220 	mov.w	r2, #32
   111b8:	f3ef 8611 	mrs	r6, BASEPRI
   111bc:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   111c0:	b1a3      	cbz	r3, 111ec <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   111c2:	2008      	movs	r0, #8
   111c4:	f7ff ffe8 	bl	11198 <z_thread_malloc>
		if (!anode) {
   111c8:	2800      	cmp	r0, #0
   111ca:	d034      	beq.n	11236 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   111cc:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   111ce:	6044      	str	r4, [r0, #4]
   111d0:	6003      	str	r3, [r0, #0]
   111d2:	4604      	mov	r4, r0
   111d4:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   111d6:	b95f      	cbnz	r7, 111f0 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   111d8:	682a      	ldr	r2, [r5, #0]
   111da:	f003 0303 	and.w	r3, r3, #3
   111de:	4313      	orrs	r3, r2
   111e0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   111e2:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   111e4:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   111e6:	b973      	cbnz	r3, 11206 <queue_insert+0x5a>
	list->tail = node;
   111e8:	606c      	str	r4, [r5, #4]
   111ea:	e00c      	b.n	11206 <queue_insert+0x5a>
	node->next_and_flags = flags;
   111ec:	6023      	str	r3, [r4, #0]
   111ee:	e7f1      	b.n	111d4 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   111f0:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   111f2:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   111f6:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   111fa:	d114      	bne.n	11226 <queue_insert+0x7a>
   111fc:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   111fe:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   11200:	b95a      	cbnz	r2, 1121a <queue_insert+0x6e>
	list->tail = node;
   11202:	606c      	str	r4, [r5, #4]
	list->head = node;
   11204:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   11206:	2104      	movs	r1, #4
   11208:	f105 0008 	add.w	r0, r5, #8
   1120c:	f000 ffb4 	bl	12178 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   11210:	4630      	mov	r0, r6
   11212:	f000 f949 	bl	114a8 <_reschedule>
	return 0;
   11216:	2000      	movs	r0, #0
   11218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1121a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1121c:	f003 0303 	and.w	r3, r3, #3
   11220:	4323      	orrs	r3, r4
   11222:	6013      	str	r3, [r2, #0]
   11224:	e7e0      	b.n	111e8 <queue_insert+0x3c>
   11226:	4313      	orrs	r3, r2
   11228:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1122a:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1122c:	f002 0203 	and.w	r2, r2, #3
   11230:	4314      	orrs	r4, r2
   11232:	603c      	str	r4, [r7, #0]
   11234:	e7e7      	b.n	11206 <queue_insert+0x5a>
			return -ENOMEM;
   11236:	f06f 000b 	mvn.w	r0, #11
}
   1123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001123c <z_queue_node_peek>:
{
   1123c:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   1123e:	4604      	mov	r4, r0
   11240:	b130      	cbz	r0, 11250 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11242:	6802      	ldr	r2, [r0, #0]
   11244:	0793      	lsls	r3, r2, #30
   11246:	d003      	beq.n	11250 <z_queue_node_peek+0x14>
		ret = anode->data;
   11248:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1124a:	b109      	cbz	r1, 11250 <z_queue_node_peek+0x14>
			k_free(anode);
   1124c:	f7ff ff9f 	bl	1118e <k_free>
}
   11250:	4620      	mov	r0, r4
   11252:	bd10      	pop	{r4, pc}

00011254 <_impl_k_queue_init>:
	list->head = NULL;
   11254:	2300      	movs	r3, #0
   11256:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   11258:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   1125a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1125e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   11260:	60c3      	str	r3, [r0, #12]
   11262:	4770      	bx	lr

00011264 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   11264:	460a      	mov	r2, r1
   11266:	2300      	movs	r3, #0
   11268:	6841      	ldr	r1, [r0, #4]
   1126a:	f7ff bf9f 	b.w	111ac <queue_insert>

0001126e <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   1126e:	2300      	movs	r3, #0
   11270:	460a      	mov	r2, r1
   11272:	4619      	mov	r1, r3
   11274:	f7ff bf9a 	b.w	111ac <queue_insert>

00011278 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   11278:	b538      	push	{r3, r4, r5, lr}
   1127a:	f04f 0320 	mov.w	r3, #32
   1127e:	f3ef 8511 	mrs	r5, BASEPRI
   11282:	f383 8811 	msr	BASEPRI, r3
   11286:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   11288:	b953      	cbnz	r3, 112a0 <k_queue_append_list+0x28>
	list->head = node;
   1128a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1128c:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   1128e:	2104      	movs	r1, #4
   11290:	3008      	adds	r0, #8
   11292:	f000 ff71 	bl	12178 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   11296:	4628      	mov	r0, r5
}
   11298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   1129c:	f000 b904 	b.w	114a8 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   112a0:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   112a2:	f004 0403 	and.w	r4, r4, #3
   112a6:	4321      	orrs	r1, r4
   112a8:	6019      	str	r1, [r3, #0]
   112aa:	e7ef      	b.n	1128c <k_queue_append_list+0x14>

000112ac <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   112ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112b0:	4604      	mov	r4, r0
   112b2:	b086      	sub	sp, #24
   112b4:	460d      	mov	r5, r1
   112b6:	f04f 0320 	mov.w	r3, #32
   112ba:	f3ef 8711 	mrs	r7, BASEPRI
   112be:	f383 8811 	msr	BASEPRI, r3
   112c2:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   112c4:	b182      	cbz	r2, 112e8 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   112c6:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   112c8:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   112ca:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   112ce:	428a      	cmp	r2, r1
	list->head = node;
   112d0:	6003      	str	r3, [r0, #0]
	list->tail = node;
   112d2:	bf08      	it	eq
   112d4:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   112d6:	2101      	movs	r1, #1
   112d8:	4610      	mov	r0, r2
   112da:	f7ff ffaf 	bl	1123c <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   112de:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   112e2:	b006      	add	sp, #24
   112e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   112e8:	b919      	cbnz	r1, 112f2 <_impl_k_queue_get+0x46>
   112ea:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   112ee:	2000      	movs	r0, #0
   112f0:	e7f7      	b.n	112e2 <_impl_k_queue_get+0x36>
   112f2:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   112f6:	2104      	movs	r1, #4
   112f8:	4603      	mov	r3, r0
   112fa:	eb0d 0001 	add.w	r0, sp, r1
   112fe:	f000 fea4 	bl	1204a <k_poll_event_init>
	if (timeout != K_FOREVER) {
   11302:	1c6a      	adds	r2, r5, #1
   11304:	d002      	beq.n	1130c <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   11306:	f000 fab7 	bl	11878 <_impl_k_uptime_get_32>
   1130a:	4606      	mov	r6, r0
{
   1130c:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1130e:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   11312:	1bea      	subs	r2, r5, r7
   11314:	f36f 1307 	bfc	r3, #4, #4
   11318:	2101      	movs	r1, #1
   1131a:	a801      	add	r0, sp, #4
   1131c:	f88d 3011 	strb.w	r3, [sp, #17]
   11320:	f000 fea6 	bl	12070 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   11324:	b108      	cbz	r0, 1132a <_impl_k_queue_get+0x7e>
   11326:	300b      	adds	r0, #11
   11328:	d1e1      	bne.n	112ee <_impl_k_queue_get+0x42>
	__asm__ volatile(
   1132a:	f04f 0320 	mov.w	r3, #32
   1132e:	f3ef 8811 	mrs	r8, BASEPRI
   11332:	f383 8811 	msr	BASEPRI, r3
   11336:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   11338:	b138      	cbz	r0, 1134a <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1133a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1133c:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1133e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   11342:	4290      	cmp	r0, r2
	list->head = node;
   11344:	6023      	str	r3, [r4, #0]
	list->tail = node;
   11346:	bf08      	it	eq
   11348:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1134a:	2101      	movs	r1, #1
   1134c:	f7ff ff76 	bl	1123c <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11350:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   11354:	2800      	cmp	r0, #0
   11356:	d1c4      	bne.n	112e2 <_impl_k_queue_get+0x36>
   11358:	1c6b      	adds	r3, r5, #1
   1135a:	d0d8      	beq.n	1130e <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1135c:	f000 fa8c 	bl	11878 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   11360:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   11362:	42bd      	cmp	r5, r7
   11364:	dad3      	bge.n	1130e <_impl_k_queue_get+0x62>
   11366:	e7c2      	b.n	112ee <_impl_k_queue_get+0x42>

00011368 <sys_dlist_remove>:
	node->prev->next = node->next;
   11368:	e890 000c 	ldmia.w	r0, {r2, r3}
   1136c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1136e:	6802      	ldr	r2, [r0, #0]
   11370:	6053      	str	r3, [r2, #4]
   11372:	4770      	bx	lr

00011374 <_abort_timeout>:
{
   11374:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11376:	6900      	ldr	r0, [r0, #16]
{
   11378:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1137a:	1c43      	adds	r3, r0, #1
   1137c:	d00e      	beq.n	1139c <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1137e:	4b08      	ldr	r3, [pc, #32]	; (113a0 <_abort_timeout+0x2c>)
   11380:	699b      	ldr	r3, [r3, #24]
   11382:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   11384:	bf1f      	itttt	ne
   11386:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11388:	6913      	ldrne	r3, [r2, #16]
   1138a:	18c0      	addne	r0, r0, r3
   1138c:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   1138e:	4608      	mov	r0, r1
   11390:	f7ff ffea 	bl	11368 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   11394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11398:	610b      	str	r3, [r1, #16]
	return 0;
   1139a:	2000      	movs	r0, #0
}
   1139c:	bd08      	pop	{r3, pc}
   1139e:	bf00      	nop
   113a0:	200016e8 	.word	0x200016e8

000113a4 <k_spin_lock.isra.11>:
	__asm__ volatile(
   113a4:	f04f 0320 	mov.w	r3, #32
   113a8:	f3ef 8011 	mrs	r0, BASEPRI
   113ac:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   113b0:	4770      	bx	lr
	...

000113b4 <update_cache>:
	return list->head == list;
   113b4:	4b0d      	ldr	r3, [pc, #52]	; (113ec <update_cache+0x38>)
   113b6:	4619      	mov	r1, r3
   113b8:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   113bc:	428a      	cmp	r2, r1
   113be:	d000      	beq.n	113c2 <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   113c0:	b902      	cbnz	r2, 113c4 <update_cache+0x10>
   113c2:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   113c4:	b970      	cbnz	r0, 113e4 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   113c6:	6899      	ldr	r1, [r3, #8]
   113c8:	b161      	cbz	r1, 113e4 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   113ca:	7a48      	ldrb	r0, [r1, #9]
   113cc:	06c0      	lsls	r0, r0, #27
   113ce:	d109      	bne.n	113e4 <update_cache+0x30>
   113d0:	6a48      	ldr	r0, [r1, #36]	; 0x24
   113d2:	3001      	adds	r0, #1
   113d4:	d106      	bne.n	113e4 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   113d6:	8948      	ldrh	r0, [r1, #10]
   113d8:	287f      	cmp	r0, #127	; 0x7f
   113da:	d903      	bls.n	113e4 <update_cache+0x30>
	return thread == _idle_thread;
   113dc:	4804      	ldr	r0, [pc, #16]	; (113f0 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   113de:	6800      	ldr	r0, [r0, #0]
   113e0:	4281      	cmp	r1, r0
   113e2:	d101      	bne.n	113e8 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   113e4:	621a      	str	r2, [r3, #32]
   113e6:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   113e8:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   113ea:	4770      	bx	lr
   113ec:	200016e8 	.word	0x200016e8
   113f0:	00012ae0 	.word	0x00012ae0

000113f4 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   113f4:	f990 000a 	ldrsb.w	r0, [r0, #10]
   113f8:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   113fc:	4298      	cmp	r0, r3
   113fe:	bfac      	ite	ge
   11400:	2000      	movge	r0, #0
   11402:	2001      	movlt	r0, #1
   11404:	4770      	bx	lr
	...

00011408 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   11408:	b510      	push	{r4, lr}
   1140a:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   1140c:	f7ff ffca 	bl	113a4 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   11410:	7a4b      	ldrb	r3, [r1, #9]
   11412:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   11414:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   11416:	d50d      	bpl.n	11434 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   11418:	4608      	mov	r0, r1
   1141a:	f7ff ffa5 	bl	11368 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   1141e:	7a4b      	ldrb	r3, [r1, #9]
   11420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   11424:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   11426:	4b05      	ldr	r3, [pc, #20]	; (1143c <_remove_thread_from_ready_q+0x34>)
   11428:	6898      	ldr	r0, [r3, #8]
   1142a:	1a43      	subs	r3, r0, r1
   1142c:	4258      	negs	r0, r3
   1142e:	4158      	adcs	r0, r3
   11430:	f7ff ffc0 	bl	113b4 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11434:	f384 8811 	msr	BASEPRI, r4
   11438:	bd10      	pop	{r4, pc}
   1143a:	bf00      	nop
   1143c:	200016e8 	.word	0x200016e8

00011440 <_find_first_thread_to_unpend>:
{
   11440:	b508      	push	{r3, lr}
   11442:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   11444:	f7ff ffae 	bl	113a4 <k_spin_lock.isra.11>
	return list->head == list;
   11448:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1144a:	429a      	cmp	r2, r3
   1144c:	bf08      	it	eq
   1144e:	2300      	moveq	r3, #0
   11450:	f380 8811 	msr	BASEPRI, r0
}
   11454:	4618      	mov	r0, r3
   11456:	bd08      	pop	{r3, pc}

00011458 <_unpend_thread_no_timeout>:
{
   11458:	b510      	push	{r4, lr}
   1145a:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   1145c:	f7ff ffa2 	bl	113a4 <k_spin_lock.isra.11>
   11460:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   11462:	4608      	mov	r0, r1
   11464:	f7ff ff80 	bl	11368 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11468:	7a4b      	ldrb	r3, [r1, #9]
   1146a:	f023 0302 	bic.w	r3, r3, #2
   1146e:	724b      	strb	r3, [r1, #9]
   11470:	f384 8811 	msr	BASEPRI, r4
   11474:	bd10      	pop	{r4, pc}

00011476 <_unpend_first_thread>:
{
   11476:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   11478:	2100      	movs	r1, #0
   1147a:	f7ff ffe1 	bl	11440 <_find_first_thread_to_unpend>

	if (thread) {
   1147e:	4604      	mov	r4, r0
   11480:	b128      	cbz	r0, 1148e <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   11482:	f7ff ffe9 	bl	11458 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   11486:	f104 0014 	add.w	r0, r4, #20
   1148a:	f7ff ff73 	bl	11374 <_abort_timeout>
}
   1148e:	4620      	mov	r0, r4
   11490:	bd10      	pop	{r4, pc}

00011492 <_unpend_thread>:
{
   11492:	b510      	push	{r4, lr}
   11494:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   11496:	f7ff ffdf 	bl	11458 <_unpend_thread_no_timeout>
   1149a:	f104 0014 	add.w	r0, r4, #20
}
   1149e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114a2:	f7ff bf67 	b.w	11374 <_abort_timeout>
	...

000114a8 <_reschedule>:
   114a8:	f3ef 8305 	mrs	r3, IPSR
   114ac:	2b0d      	cmp	r3, #13
   114ae:	d809      	bhi.n	114c4 <_reschedule+0x1c>
   114b0:	b11b      	cbz	r3, 114ba <_reschedule+0x12>
   114b2:	4b09      	ldr	r3, [pc, #36]	; (114d8 <_reschedule+0x30>)
   114b4:	685b      	ldr	r3, [r3, #4]
   114b6:	051b      	lsls	r3, r3, #20
   114b8:	d504      	bpl.n	114c4 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   114ba:	4b08      	ldr	r3, [pc, #32]	; (114dc <_reschedule+0x34>)
   114bc:	689a      	ldr	r2, [r3, #8]
   114be:	6a1b      	ldr	r3, [r3, #32]
   114c0:	429a      	cmp	r2, r3
   114c2:	d103      	bne.n	114cc <_reschedule+0x24>
   114c4:	f380 8811 	msr	BASEPRI, r0
}
   114c8:	2000      	movs	r0, #0
   114ca:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   114cc:	4b04      	ldr	r3, [pc, #16]	; (114e0 <_reschedule+0x38>)
   114ce:	2200      	movs	r2, #0
   114d0:	601a      	str	r2, [r3, #0]
   114d2:	f7f0 b81b 	b.w	150c <__swap>
   114d6:	bf00      	nop
   114d8:	e000ed00 	.word	0xe000ed00
   114dc:	200016e8 	.word	0x200016e8
   114e0:	2000171c 	.word	0x2000171c

000114e4 <k_sched_unlock>:
{
   114e4:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   114e6:	f7ff ff5d 	bl	113a4 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   114ea:	4b0a      	ldr	r3, [pc, #40]	; (11514 <k_sched_unlock+0x30>)
   114ec:	689a      	ldr	r2, [r3, #8]
   114ee:	7ad3      	ldrb	r3, [r2, #11]
   114f0:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   114f2:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   114f4:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   114f6:	2001      	movs	r0, #1
   114f8:	f7ff ff5c 	bl	113b4 <update_cache>
   114fc:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   11500:	f04f 0320 	mov.w	r3, #32
   11504:	f3ef 8011 	mrs	r0, BASEPRI
   11508:	f383 8811 	msr	BASEPRI, r3
}
   1150c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   11510:	f7ff bfca 	b.w	114a8 <_reschedule>
   11514:	200016e8 	.word	0x200016e8

00011518 <_priq_dumb_add>:
{
   11518:	b510      	push	{r4, lr}
	return list->head == list;
   1151a:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1151c:	4298      	cmp	r0, r3
   1151e:	bf08      	it	eq
   11520:	2300      	moveq	r3, #0
   11522:	b193      	cbz	r3, 1154a <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   11524:	f991 400a 	ldrsb.w	r4, [r1, #10]
   11528:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1152c:	4294      	cmp	r4, r2
   1152e:	da06      	bge.n	1153e <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   11530:	685a      	ldr	r2, [r3, #4]
   11532:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   11534:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   11536:	685a      	ldr	r2, [r3, #4]
   11538:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   1153a:	6059      	str	r1, [r3, #4]
   1153c:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   1153e:	6842      	ldr	r2, [r0, #4]
   11540:	4293      	cmp	r3, r2
   11542:	d002      	beq.n	1154a <_priq_dumb_add+0x32>
   11544:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11546:	2b00      	cmp	r3, #0
   11548:	d1eb      	bne.n	11522 <_priq_dumb_add+0xa>
	node->next = list;
   1154a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   1154c:	6843      	ldr	r3, [r0, #4]
   1154e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   11550:	6843      	ldr	r3, [r0, #4]
   11552:	6019      	str	r1, [r3, #0]
	list->tail = node;
   11554:	6041      	str	r1, [r0, #4]
   11556:	bd10      	pop	{r4, pc}

00011558 <_add_thread_to_ready_q>:
{
   11558:	b538      	push	{r3, r4, r5, lr}
   1155a:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   1155c:	f7ff ff22 	bl	113a4 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   11560:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   11562:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   11564:	4806      	ldr	r0, [pc, #24]	; (11580 <_add_thread_to_ready_q+0x28>)
   11566:	f7ff ffd7 	bl	11518 <_priq_dumb_add>
	thread->base.thread_state |= states;
   1156a:	7a63      	ldrb	r3, [r4, #9]
   1156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11570:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   11572:	2000      	movs	r0, #0
   11574:	f7ff ff1e 	bl	113b4 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11578:	f385 8811 	msr	BASEPRI, r5
   1157c:	bd38      	pop	{r3, r4, r5, pc}
   1157e:	bf00      	nop
   11580:	2000170c 	.word	0x2000170c

00011584 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   11584:	7a42      	ldrb	r2, [r0, #9]
   11586:	06d2      	lsls	r2, r2, #27
   11588:	d104      	bne.n	11594 <_ready_thread+0x10>
   1158a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1158c:	3301      	adds	r3, #1
   1158e:	d101      	bne.n	11594 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   11590:	f7ff bfe2 	b.w	11558 <_add_thread_to_ready_q>
   11594:	4770      	bx	lr
	...

00011598 <_add_timeout>:
{
   11598:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1159a:	610b      	str	r3, [r1, #16]
{
   1159c:	4604      	mov	r4, r0
   1159e:	461d      	mov	r5, r3
	timeout->thread = thread;
   115a0:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   115a2:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   115a4:	bb03      	cbnz	r3, 115e8 <_add_timeout+0x50>
	__asm__ volatile(
   115a6:	f04f 0320 	mov.w	r3, #32
   115aa:	f3ef 8611 	mrs	r6, BASEPRI
   115ae:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   115b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115b6:	610b      	str	r3, [r1, #16]
	if (thread) {
   115b8:	b170      	cbz	r0, 115d8 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   115ba:	68cb      	ldr	r3, [r1, #12]
   115bc:	b113      	cbz	r3, 115c4 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   115be:	f7ff ff4b 	bl	11458 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   115c2:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   115c4:	7a63      	ldrb	r3, [r4, #9]
   115c6:	f023 0304 	bic.w	r3, r3, #4
   115ca:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   115cc:	4620      	mov	r0, r4
   115ce:	f7ff ffd9 	bl	11584 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   115d2:	f386 8811 	msr	BASEPRI, r6
   115d6:	bd70      	pop	{r4, r5, r6, pc}
   115d8:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   115dc:	694b      	ldr	r3, [r1, #20]
   115de:	b32b      	cbz	r3, 1162c <_add_timeout+0x94>
			timeout->func(timeout);
   115e0:	4608      	mov	r0, r1
}
   115e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   115e6:	4718      	bx	r3
	return list->head == list;
   115e8:	4a11      	ldr	r2, [pc, #68]	; (11630 <_add_timeout+0x98>)
   115ea:	4610      	mov	r0, r2
   115ec:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   115f0:	4283      	cmp	r3, r0
   115f2:	d10c      	bne.n	1160e <_add_timeout+0x76>
	node->next = list;
   115f4:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   115f6:	6993      	ldr	r3, [r2, #24]
   115f8:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   115fa:	6993      	ldr	r3, [r2, #24]
   115fc:	6019      	str	r1, [r3, #0]
	list->tail = node;
   115fe:	6191      	str	r1, [r2, #24]
   11600:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   11602:	1b64      	subs	r4, r4, r5
   11604:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   11606:	6994      	ldr	r4, [r2, #24]
   11608:	42a3      	cmp	r3, r4
   1160a:	d0f3      	beq.n	115f4 <_add_timeout+0x5c>
   1160c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1160e:	2b00      	cmp	r3, #0
   11610:	d0f0      	beq.n	115f4 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   11612:	690c      	ldr	r4, [r1, #16]
   11614:	691d      	ldr	r5, [r3, #16]
   11616:	42ac      	cmp	r4, r5
   11618:	dcf3      	bgt.n	11602 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   1161a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1161c:	1b2c      	subs	r4, r5, r4
   1161e:	611c      	str	r4, [r3, #16]
   11620:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   11622:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   11624:	685a      	ldr	r2, [r3, #4]
   11626:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   11628:	6059      	str	r1, [r3, #4]
   1162a:	bd70      	pop	{r4, r5, r6, pc}
   1162c:	bd70      	pop	{r4, r5, r6, pc}
   1162e:	bf00      	nop
   11630:	200016e8 	.word	0x200016e8

00011634 <_move_thread_to_end_of_prio_q>:
{
   11634:	b538      	push	{r3, r4, r5, lr}
   11636:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   11638:	f7ff feb4 	bl	113a4 <k_spin_lock.isra.11>
   1163c:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1163e:	4620      	mov	r0, r4
   11640:	f7ff fe92 	bl	11368 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   11644:	4621      	mov	r1, r4
   11646:	4806      	ldr	r0, [pc, #24]	; (11660 <_move_thread_to_end_of_prio_q+0x2c>)
   11648:	f7ff ff66 	bl	11518 <_priq_dumb_add>
	thread->base.thread_state |= states;
   1164c:	7a63      	ldrb	r3, [r4, #9]
   1164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11652:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   11654:	2000      	movs	r0, #0
   11656:	f7ff fead 	bl	113b4 <update_cache>
   1165a:	f385 8811 	msr	BASEPRI, r5
   1165e:	bd38      	pop	{r3, r4, r5, pc}
   11660:	2000170c 	.word	0x2000170c

00011664 <pend>:
{
   11664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11666:	4605      	mov	r5, r0
   11668:	4614      	mov	r4, r2
   1166a:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   1166c:	f7ff fecc 	bl	11408 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   11670:	7a6b      	ldrb	r3, [r5, #9]
   11672:	f043 0302 	orr.w	r3, r3, #2
   11676:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   11678:	1c63      	adds	r3, r4, #1
   1167a:	d012      	beq.n	116a2 <pend+0x3e>
	__asm__ volatile(
   1167c:	f04f 0320 	mov.w	r3, #32
   11680:	f3ef 8711 	mrs	r7, BASEPRI
   11684:	f383 8811 	msr	BASEPRI, r3
   11688:	230a      	movs	r3, #10
   1168a:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   1168c:	4632      	mov	r2, r6
   1168e:	fbb4 f3f3 	udiv	r3, r4, r3
   11692:	f105 0114 	add.w	r1, r5, #20
   11696:	3301      	adds	r3, #1
   11698:	4628      	mov	r0, r5
   1169a:	f7ff ff7d 	bl	11598 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1169e:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   116a2:	b12e      	cbz	r6, 116b0 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   116a4:	4629      	mov	r1, r5
   116a6:	4630      	mov	r0, r6
}
   116a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   116ac:	f7ff bf34 	b.w	11518 <_priq_dumb_add>
   116b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000116b4 <_pend_current_thread>:
{
   116b4:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   116b6:	4b06      	ldr	r3, [pc, #24]	; (116d0 <_pend_current_thread+0x1c>)
{
   116b8:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   116ba:	6898      	ldr	r0, [r3, #8]
   116bc:	f7ff ffd2 	bl	11664 <pend>
	_time_slice_elapsed = 0;
   116c0:	4b04      	ldr	r3, [pc, #16]	; (116d4 <_pend_current_thread+0x20>)
   116c2:	2200      	movs	r2, #0
   116c4:	4620      	mov	r0, r4
}
   116c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   116ca:	601a      	str	r2, [r3, #0]
   116cc:	f7ef bf1e 	b.w	150c <__swap>
   116d0:	200016e8 	.word	0x200016e8
   116d4:	2000171c 	.word	0x2000171c

000116d8 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   116d8:	4b13      	ldr	r3, [pc, #76]	; (11728 <_is_thread_time_slicing+0x50>)
   116da:	681b      	ldr	r3, [r3, #0]
   116dc:	2b00      	cmp	r3, #0
{
   116de:	b510      	push	{r4, lr}
   116e0:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   116e2:	dd1f      	ble.n	11724 <_is_thread_time_slicing+0x4c>
   116e4:	8943      	ldrh	r3, [r0, #10]
   116e6:	2b7f      	cmp	r3, #127	; 0x7f
   116e8:	d81c      	bhi.n	11724 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   116ea:	4b10      	ldr	r3, [pc, #64]	; (1172c <_is_thread_time_slicing+0x54>)
   116ec:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   116f0:	681b      	ldr	r3, [r3, #0]
   116f2:	4299      	cmp	r1, r3
   116f4:	db16      	blt.n	11724 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   116f6:	f7ff fe55 	bl	113a4 <k_spin_lock.isra.11>
	return list->head == list;
   116fa:	490d      	ldr	r1, [pc, #52]	; (11730 <_is_thread_time_slicing+0x58>)
   116fc:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11700:	428b      	cmp	r3, r1
   11702:	4604      	mov	r4, r0
   11704:	d00a      	beq.n	1171c <_is_thread_time_slicing+0x44>
		if (next) {
   11706:	b15b      	cbz	r3, 11720 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   11708:	f992 000a 	ldrsb.w	r0, [r2, #10]
   1170c:	f993 300a 	ldrsb.w	r3, [r3, #10]
   11710:	1ac3      	subs	r3, r0, r3
   11712:	4258      	negs	r0, r3
   11714:	4158      	adcs	r0, r3
   11716:	f384 8811 	msr	BASEPRI, r4
	return ret;
   1171a:	bd10      	pop	{r4, pc}
   1171c:	2000      	movs	r0, #0
   1171e:	e7fa      	b.n	11716 <_is_thread_time_slicing+0x3e>
   11720:	4618      	mov	r0, r3
   11722:	e7f8      	b.n	11716 <_is_thread_time_slicing+0x3e>
		return 0;
   11724:	2000      	movs	r0, #0
}
   11726:	bd10      	pop	{r4, pc}
   11728:	200015c8 	.word	0x200015c8
   1172c:	200015cc 	.word	0x200015cc
   11730:	200016e8 	.word	0x200016e8

00011734 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   11734:	4b01      	ldr	r3, [pc, #4]	; (1173c <_update_time_slice_before_swap+0x8>)
   11736:	2200      	movs	r2, #0
   11738:	601a      	str	r2, [r3, #0]
   1173a:	4770      	bx	lr
   1173c:	2000171c 	.word	0x2000171c

00011740 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   11740:	b538      	push	{r3, r4, r5, lr}
   11742:	4605      	mov	r5, r0
	int need_sched = 0;
   11744:	2000      	movs	r0, #0
	return list->head == list;
   11746:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11748:	42a5      	cmp	r5, r4
   1174a:	d000      	beq.n	1174e <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   1174c:	b904      	cbnz	r4, 11750 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   1174e:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   11750:	4620      	mov	r0, r4
   11752:	f7ff fe9e 	bl	11492 <_unpend_thread>
		_ready_thread(th);
   11756:	4620      	mov	r0, r4
   11758:	f7ff ff14 	bl	11584 <_ready_thread>
		need_sched = 1;
   1175c:	2001      	movs	r0, #1
   1175e:	e7f2      	b.n	11746 <_unpend_all+0x6>

00011760 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   11760:	4b02      	ldr	r3, [pc, #8]	; (1176c <_sched_init+0xc>)
   11762:	f103 0224 	add.w	r2, r3, #36	; 0x24
   11766:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   11768:	629a      	str	r2, [r3, #40]	; 0x28
   1176a:	4770      	bx	lr
   1176c:	200016e8 	.word	0x200016e8

00011770 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   11770:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   11772:	4c14      	ldr	r4, [pc, #80]	; (117c4 <_impl_k_yield+0x54>)
   11774:	4b14      	ldr	r3, [pc, #80]	; (117c8 <_impl_k_yield+0x58>)
   11776:	68a2      	ldr	r2, [r4, #8]
   11778:	681b      	ldr	r3, [r3, #0]
   1177a:	429a      	cmp	r2, r3
   1177c:	d00f      	beq.n	1179e <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   1177e:	f7ff fe11 	bl	113a4 <k_spin_lock.isra.11>
   11782:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   11784:	68a0      	ldr	r0, [r4, #8]
   11786:	f7ff fdef 	bl	11368 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1178a:	68a1      	ldr	r1, [r4, #8]
   1178c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11790:	f7ff fec2 	bl	11518 <_priq_dumb_add>
			update_cache(1);
   11794:	2001      	movs	r0, #1
   11796:	f7ff fe0d 	bl	113b4 <update_cache>
   1179a:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   1179e:	6a22      	ldr	r2, [r4, #32]
   117a0:	68a3      	ldr	r3, [r4, #8]
   117a2:	429a      	cmp	r2, r3
   117a4:	d00c      	beq.n	117c0 <_impl_k_yield+0x50>
	__asm__ volatile(
   117a6:	f04f 0320 	mov.w	r3, #32
   117aa:	f3ef 8011 	mrs	r0, BASEPRI
   117ae:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   117b2:	4b06      	ldr	r3, [pc, #24]	; (117cc <_impl_k_yield+0x5c>)
   117b4:	2200      	movs	r2, #0
   117b6:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   117b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   117bc:	f7ef bea6 	b.w	150c <__swap>
   117c0:	bd38      	pop	{r3, r4, r5, pc}
   117c2:	bf00      	nop
   117c4:	200016e8 	.word	0x200016e8
   117c8:	00012ae0 	.word	0x00012ae0
   117cc:	2000171c 	.word	0x2000171c

000117d0 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   117d0:	4b01      	ldr	r3, [pc, #4]	; (117d8 <_impl_k_current_get+0x8>)
   117d2:	6898      	ldr	r0, [r3, #8]
   117d4:	4770      	bx	lr
   117d6:	bf00      	nop
   117d8:	200016e8 	.word	0x200016e8

000117dc <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   117dc:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   117e0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   117e2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   117e4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   117e6:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   117e8:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   117ea:	6143      	str	r3, [r0, #20]
   117ec:	4770      	bx	lr

000117ee <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   117ee:	b570      	push	{r4, r5, r6, lr}
   117f0:	4604      	mov	r4, r0
   117f2:	f04f 0320 	mov.w	r3, #32
   117f6:	f3ef 8611 	mrs	r6, BASEPRI
   117fa:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   117fe:	f7ff fe3a 	bl	11476 <_unpend_first_thread>
	if (thread) {
   11802:	4605      	mov	r5, r0
   11804:	b160      	cbz	r0, 11820 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   11806:	7a43      	ldrb	r3, [r0, #9]
   11808:	06db      	lsls	r3, r3, #27
   1180a:	d102      	bne.n	11812 <_impl_k_sem_give+0x24>
   1180c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1180e:	3301      	adds	r3, #1
   11810:	d012      	beq.n	11838 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   11812:	2300      	movs	r3, #0
   11814:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   11816:	4630      	mov	r0, r6
}
   11818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   1181c:	f7ff be44 	b.w	114a8 <_reschedule>
	sem->count += (sem->count != sem->limit);
   11820:	68a3      	ldr	r3, [r4, #8]
   11822:	68e2      	ldr	r2, [r4, #12]
   11824:	429a      	cmp	r2, r3
   11826:	bf18      	it	ne
   11828:	3301      	addne	r3, #1
   1182a:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1182c:	2102      	movs	r1, #2
   1182e:	f104 0010 	add.w	r0, r4, #16
   11832:	f000 fca1 	bl	12178 <_handle_obj_poll_events>
   11836:	e7ee      	b.n	11816 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   11838:	f7ff fe8e 	bl	11558 <_add_thread_to_ready_q>
   1183c:	e7e9      	b.n	11812 <_impl_k_sem_give+0x24>

0001183e <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1183e:	b410      	push	{r4}
   11840:	460a      	mov	r2, r1
   11842:	4604      	mov	r4, r0
   11844:	f04f 0320 	mov.w	r3, #32
   11848:	f3ef 8011 	mrs	r0, BASEPRI
   1184c:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   11850:	68a3      	ldr	r3, [r4, #8]
   11852:	b133      	cbz	r3, 11862 <_impl_k_sem_take+0x24>
		sem->count--;
   11854:	3b01      	subs	r3, #1
   11856:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11858:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   1185c:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   1185e:	bc10      	pop	{r4}
   11860:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   11862:	b921      	cbnz	r1, 1186e <_impl_k_sem_take+0x30>
   11864:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   11868:	f06f 000f 	mvn.w	r0, #15
   1186c:	e7f7      	b.n	1185e <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   1186e:	4621      	mov	r1, r4
}
   11870:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   11872:	f7ff bf1f 	b.w	116b4 <_pend_current_thread>
	...

00011878 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   11878:	4b03      	ldr	r3, [pc, #12]	; (11888 <_impl_k_uptime_get_32+0x10>)
   1187a:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   1187e:	230a      	movs	r3, #10
   11880:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   11884:	4770      	bx	lr
   11886:	bf00      	nop
   11888:	20001720 	.word	0x20001720

0001188c <_tick_get>:
	__asm__ volatile(
   1188c:	f04f 0220 	mov.w	r2, #32
   11890:	f3ef 8311 	mrs	r3, BASEPRI
   11894:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   11898:	4a02      	ldr	r2, [pc, #8]	; (118a4 <_tick_get+0x18>)
   1189a:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1189e:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   118a2:	4770      	bx	lr
   118a4:	20001720 	.word	0x20001720

000118a8 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   118a8:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   118aa:	f7ff ffef 	bl	1188c <_tick_get>
   118ae:	240a      	movs	r4, #10
   118b0:	fba0 2304 	umull	r2, r3, r0, r4
   118b4:	fb04 3301 	mla	r3, r4, r1, r3
}
   118b8:	4610      	mov	r0, r2
   118ba:	4619      	mov	r1, r3
   118bc:	bd10      	pop	{r4, pc}
	...

000118c0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   118c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c4:	4607      	mov	r7, r0
   118c6:	b085      	sub	sp, #20
	__asm__ volatile(
   118c8:	f04f 0320 	mov.w	r3, #32
   118cc:	f3ef 8011 	mrs	r0, BASEPRI
   118d0:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   118d4:	4961      	ldr	r1, [pc, #388]	; (11a5c <_nano_sys_clock_tick_announce+0x19c>)
   118d6:	e9d1 4500 	ldrd	r4, r5, [r1]
   118da:	19e2      	adds	r2, r4, r7
   118dc:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   118e0:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   118e4:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   118e8:	ae02      	add	r6, sp, #8
   118ea:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   118ec:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   118ee:	f04f 0320 	mov.w	r3, #32
   118f2:	f3ef 8011 	mrs	r0, BASEPRI
   118f6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   118fa:	4c59      	ldr	r4, [pc, #356]	; (11a60 <_nano_sys_clock_tick_announce+0x1a0>)
   118fc:	4621      	mov	r1, r4
   118fe:	4602      	mov	r2, r0
   11900:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11904:	428b      	cmp	r3, r1
   11906:	d000      	beq.n	1190a <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   11908:	b9fb      	cbnz	r3, 1194a <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1190a:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   1190e:	68a0      	ldr	r0, [r4, #8]
   11910:	f7ff fee2 	bl	116d8 <_is_thread_time_slicing>
   11914:	b1b0      	cbz	r0, 11944 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   11916:	4a53      	ldr	r2, [pc, #332]	; (11a64 <_nano_sys_clock_tick_announce+0x1a4>)
   11918:	6811      	ldr	r1, [r2, #0]
   1191a:	230a      	movs	r3, #10
   1191c:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   11920:	4b51      	ldr	r3, [pc, #324]	; (11a68 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   11922:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   11924:	681b      	ldr	r3, [r3, #0]
   11926:	429f      	cmp	r7, r3
   11928:	db0c      	blt.n	11944 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   1192a:	2300      	movs	r3, #0
   1192c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1192e:	f04f 0320 	mov.w	r3, #32
   11932:	f3ef 8511 	mrs	r5, BASEPRI
   11936:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   1193a:	68a0      	ldr	r0, [r4, #8]
   1193c:	f7ff fe7a 	bl	11634 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11940:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   11944:	b005      	add	sp, #20
   11946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   1194a:	4d48      	ldr	r5, [pc, #288]	; (11a6c <_nano_sys_clock_tick_announce+0x1ac>)
   1194c:	9501      	str	r5, [sp, #4]
   1194e:	2101      	movs	r1, #1
   11950:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   11952:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   11956:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   11958:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   1195c:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   1195e:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   11960:	bfaa      	itet	ge
   11962:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   11966:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   1196a:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   1196e:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   11970:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   11972:	691d      	ldr	r5, [r3, #16]
   11974:	4298      	cmp	r0, r3
   11976:	bf14      	ite	ne
   11978:	6818      	ldrne	r0, [r3, #0]
   1197a:	2000      	moveq	r0, #0
   1197c:	b9d5      	cbnz	r5, 119b4 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   1197e:	e893 0220 	ldmia.w	r3, {r5, r9}
   11982:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   11986:	681d      	ldr	r5, [r3, #0]
   11988:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   1198c:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   1198e:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   11992:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   11994:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   11996:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   11998:	f8c3 c010 	str.w	ip, [r3, #16]
   1199c:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   119a0:	f04f 0320 	mov.w	r3, #32
   119a4:	f3ef 8211 	mrs	r2, BASEPRI
   119a8:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   119ac:	4603      	mov	r3, r0
   119ae:	2800      	cmp	r0, #0
   119b0:	d1d4      	bne.n	1195c <_nano_sys_clock_tick_announce+0x9c>
   119b2:	e001      	b.n	119b8 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   119b4:	2900      	cmp	r1, #0
   119b6:	dcf1      	bgt.n	1199c <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   119b8:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   119bc:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   119be:	42b0      	cmp	r0, r6
   119c0:	d103      	bne.n	119ca <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   119c2:	9a01      	ldr	r2, [sp, #4]
   119c4:	2300      	movs	r3, #0
   119c6:	6013      	str	r3, [r2, #0]
   119c8:	e7a1      	b.n	1190e <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   119ca:	2800      	cmp	r0, #0
   119cc:	d0f9      	beq.n	119c2 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   119ce:	9b03      	ldr	r3, [sp, #12]
   119d0:	4298      	cmp	r0, r3
   119d2:	d102      	bne.n	119da <_nano_sys_clock_tick_announce+0x11a>
   119d4:	f04f 0b00 	mov.w	fp, #0
   119d8:	e001      	b.n	119de <_nano_sys_clock_tick_announce+0x11e>
   119da:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   119de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   119e2:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   119e6:	e890 000c 	ldmia.w	r0, {r2, r3}
   119ea:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   119ec:	6802      	ldr	r2, [r0, #0]
   119ee:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   119f0:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   119f2:	f04f 0320 	mov.w	r3, #32
   119f6:	f3ef 8811 	mrs	r8, BASEPRI
   119fa:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   119fe:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   11a02:	b1d6      	cbz	r6, 11a3a <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   11a04:	68c3      	ldr	r3, [r0, #12]
   11a06:	b123      	cbz	r3, 11a12 <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   11a08:	4630      	mov	r0, r6
   11a0a:	f7ff fd25 	bl	11458 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   11a0e:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11a12:	7a73      	ldrb	r3, [r6, #9]
   11a14:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   11a18:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11a1c:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   11a1e:	d102      	bne.n	11a26 <_nano_sys_clock_tick_announce+0x166>
   11a20:	6a73      	ldr	r3, [r6, #36]	; 0x24
   11a22:	3301      	adds	r3, #1
   11a24:	d015      	beq.n	11a52 <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11a26:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   11a2a:	f1bb 0f00 	cmp.w	fp, #0
   11a2e:	d0c8      	beq.n	119c2 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   11a30:	9b03      	ldr	r3, [sp, #12]
   11a32:	455b      	cmp	r3, fp
   11a34:	d108      	bne.n	11a48 <_nano_sys_clock_tick_announce+0x188>
   11a36:	2300      	movs	r3, #0
   11a38:	e008      	b.n	11a4c <_nano_sys_clock_tick_announce+0x18c>
   11a3a:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   11a3e:	6943      	ldr	r3, [r0, #20]
   11a40:	2b00      	cmp	r3, #0
   11a42:	d0f2      	beq.n	11a2a <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   11a44:	4798      	blx	r3
   11a46:	e7f0      	b.n	11a2a <_nano_sys_clock_tick_announce+0x16a>
   11a48:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   11a4c:	4658      	mov	r0, fp
   11a4e:	469b      	mov	fp, r3
   11a50:	e7c9      	b.n	119e6 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   11a52:	4630      	mov	r0, r6
   11a54:	f7ff fd80 	bl	11558 <_add_thread_to_ready_q>
   11a58:	e7e5      	b.n	11a26 <_nano_sys_clock_tick_announce+0x166>
   11a5a:	bf00      	nop
   11a5c:	20001720 	.word	0x20001720
   11a60:	200016e8 	.word	0x200016e8
   11a64:	2000171c 	.word	0x2000171c
   11a68:	200015c8 	.word	0x200015c8
   11a6c:	20001718 	.word	0x20001718

00011a70 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   11a70:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   11a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a7a:	4903      	ldr	r1, [pc, #12]	; (11a88 <k_sys_work_q_init+0x18>)
   11a7c:	4803      	ldr	r0, [pc, #12]	; (11a8c <k_sys_work_q_init+0x1c>)
   11a7e:	f000 f983 	bl	11d88 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   11a82:	2000      	movs	r0, #0
   11a84:	bd08      	pop	{r3, pc}
   11a86:	bf00      	nop
   11a88:	20003038 	.word	0x20003038
   11a8c:	20001728 	.word	0x20001728

00011a90 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11a90:	6903      	ldr	r3, [r0, #16]
   11a92:	1c5a      	adds	r2, r3, #1
   11a94:	d011      	beq.n	11aba <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11a96:	4a0a      	ldr	r2, [pc, #40]	; (11ac0 <_abort_timeout+0x30>)
   11a98:	6992      	ldr	r2, [r2, #24]
   11a9a:	4290      	cmp	r0, r2
   11a9c:	bf1f      	itttt	ne
   11a9e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11aa0:	690a      	ldrne	r2, [r1, #16]
   11aa2:	189b      	addne	r3, r3, r2
   11aa4:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   11aa6:	e890 000c 	ldmia.w	r0, {r2, r3}
   11aaa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11aac:	6802      	ldr	r2, [r0, #0]
   11aae:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   11ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ab4:	6103      	str	r3, [r0, #16]
	return 0;
   11ab6:	2000      	movs	r0, #0
   11ab8:	4770      	bx	lr
		return _INACTIVE;
   11aba:	4618      	mov	r0, r3
}
   11abc:	4770      	bx	lr
   11abe:	bf00      	nop
   11ac0:	200016e8 	.word	0x200016e8

00011ac4 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   11ac4:	7a42      	ldrb	r2, [r0, #9]
   11ac6:	06d2      	lsls	r2, r2, #27
   11ac8:	d104      	bne.n	11ad4 <_ready_thread+0x10>
   11aca:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11acc:	3301      	adds	r3, #1
   11ace:	d101      	bne.n	11ad4 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   11ad0:	f7ff bd42 	b.w	11558 <_add_thread_to_ready_q>
   11ad4:	4770      	bx	lr
	...

00011ad8 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   11ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   11ada:	f04f 0320 	mov.w	r3, #32
   11ade:	f3ef 8611 	mrs	r6, BASEPRI
   11ae2:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   11ae6:	4a19      	ldr	r2, [pc, #100]	; (11b4c <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   11ae8:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   11aea:	230a      	movs	r3, #10
   11aec:	3109      	adds	r1, #9
   11aee:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   11af2:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11af4:	6241      	str	r1, [r0, #36]	; 0x24
   11af6:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   11af8:	2300      	movs	r3, #0
   11afa:	6203      	str	r3, [r0, #32]
   11afc:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b00:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   11b02:	f100 0514 	add.w	r5, r0, #20
   11b06:	d108      	bne.n	11b1a <schedule_new_thread.part.11+0x42>
	node->next = list;
   11b08:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   11b0a:	6993      	ldr	r3, [r2, #24]
   11b0c:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   11b0e:	6993      	ldr	r3, [r2, #24]
   11b10:	601d      	str	r5, [r3, #0]
	list->tail = node;
   11b12:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11b14:	f386 8811 	msr	BASEPRI, r6
   11b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11b1a:	2b00      	cmp	r3, #0
   11b1c:	d0f4      	beq.n	11b08 <schedule_new_thread.part.11+0x30>
   11b1e:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   11b22:	6a44      	ldr	r4, [r0, #36]	; 0x24
   11b24:	691f      	ldr	r7, [r3, #16]
   11b26:	42bc      	cmp	r4, r7
   11b28:	dc08      	bgt.n	11b3c <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   11b2a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   11b2c:	1b3c      	subs	r4, r7, r4
   11b2e:	611c      	str	r4, [r3, #16]
   11b30:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   11b32:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   11b34:	685a      	ldr	r2, [r3, #4]
   11b36:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   11b38:	605d      	str	r5, [r3, #4]
   11b3a:	e7eb      	b.n	11b14 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   11b3c:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   11b3e:	4573      	cmp	r3, lr
   11b40:	6244      	str	r4, [r0, #36]	; 0x24
   11b42:	d0e1      	beq.n	11b08 <schedule_new_thread.part.11+0x30>
   11b44:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11b46:	2b00      	cmp	r3, #0
   11b48:	d1eb      	bne.n	11b22 <schedule_new_thread.part.11+0x4a>
   11b4a:	e7dd      	b.n	11b08 <schedule_new_thread.part.11+0x30>
   11b4c:	200016e8 	.word	0x200016e8

00011b50 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   11b50:	4770      	bx	lr
	...

00011b54 <k_is_in_isr>:
   11b54:	f3ef 8005 	mrs	r0, IPSR
   11b58:	280d      	cmp	r0, #13
   11b5a:	d807      	bhi.n	11b6c <k_is_in_isr+0x18>
   11b5c:	b138      	cbz	r0, 11b6e <k_is_in_isr+0x1a>
   11b5e:	4b04      	ldr	r3, [pc, #16]	; (11b70 <k_is_in_isr+0x1c>)
   11b60:	6858      	ldr	r0, [r3, #4]
   11b62:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   11b66:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   11b6a:	4770      	bx	lr
   11b6c:	2001      	movs	r0, #1
}
   11b6e:	4770      	bx	lr
   11b70:	e000ed00 	.word	0xe000ed00

00011b74 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   11b74:	4b02      	ldr	r3, [pc, #8]	; (11b80 <_is_thread_essential+0xc>)
   11b76:	689b      	ldr	r3, [r3, #8]
   11b78:	7a18      	ldrb	r0, [r3, #8]
}
   11b7a:	f000 0001 	and.w	r0, r0, #1
   11b7e:	4770      	bx	lr
   11b80:	200016e8 	.word	0x200016e8

00011b84 <_impl_k_thread_start>:
{
   11b84:	b510      	push	{r4, lr}
	__asm__ volatile(
   11b86:	f04f 0320 	mov.w	r3, #32
   11b8a:	f3ef 8411 	mrs	r4, BASEPRI
   11b8e:	f383 8811 	msr	BASEPRI, r3
   11b92:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   11b94:	0759      	lsls	r1, r3, #29
   11b96:	d402      	bmi.n	11b9e <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11b98:	f384 8811 	msr	BASEPRI, r4
   11b9c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11b9e:	f023 0304 	bic.w	r3, r3, #4
   11ba2:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   11ba4:	f7ff ff8e 	bl	11ac4 <_ready_thread>
	_reschedule(key);
   11ba8:	4620      	mov	r0, r4
}
   11baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   11bae:	f7ff bc7b 	b.w	114a8 <_reschedule>
	...

00011bb4 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   11bb4:	b530      	push	{r4, r5, lr}
   11bb6:	b087      	sub	sp, #28
   11bb8:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11bba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   11bbc:	9504      	str	r5, [sp, #16]
   11bbe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   11bc0:	9503      	str	r5, [sp, #12]
   11bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11bc4:	9502      	str	r5, [sp, #8]
   11bc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11bc8:	9501      	str	r5, [sp, #4]
   11bca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11bcc:	9500      	str	r5, [sp, #0]
   11bce:	f7ef fe9f 	bl	1910 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   11bd2:	4b04      	ldr	r3, [pc, #16]	; (11be4 <_setup_new_thread+0x30>)
   11bd4:	689b      	ldr	r3, [r3, #8]
   11bd6:	b913      	cbnz	r3, 11bde <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   11bd8:	6663      	str	r3, [r4, #100]	; 0x64
}
   11bda:	b007      	add	sp, #28
   11bdc:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   11bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11be0:	e7fa      	b.n	11bd8 <_setup_new_thread+0x24>
   11be2:	bf00      	nop
   11be4:	200016e8 	.word	0x200016e8

00011be8 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   11be8:	b570      	push	{r4, r5, r6, lr}
   11bea:	b086      	sub	sp, #24
   11bec:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11bee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   11bf0:	9604      	str	r6, [sp, #16]
   11bf2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11bf4:	9603      	str	r6, [sp, #12]
   11bf6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11bf8:	9602      	str	r6, [sp, #8]
   11bfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   11bfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11bfe:	9601      	str	r6, [sp, #4]
   11c00:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   11c02:	9600      	str	r6, [sp, #0]
   11c04:	f7ff ffd6 	bl	11bb4 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   11c08:	1c6b      	adds	r3, r5, #1
   11c0a:	d003      	beq.n	11c14 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   11c0c:	b92d      	cbnz	r5, 11c1a <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   11c0e:	4620      	mov	r0, r4
   11c10:	f7ff ffb8 	bl	11b84 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   11c14:	4620      	mov	r0, r4
   11c16:	b006      	add	sp, #24
   11c18:	bd70      	pop	{r4, r5, r6, pc}
   11c1a:	4629      	mov	r1, r5
   11c1c:	4620      	mov	r0, r4
   11c1e:	f7ff ff5b 	bl	11ad8 <schedule_new_thread.part.11>
   11c22:	e7f7      	b.n	11c14 <_impl_k_thread_create+0x2c>

00011c24 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   11c24:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   11c26:	b510      	push	{r4, lr}
   11c28:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   11c2a:	b103      	cbz	r3, 11c2e <_k_thread_single_abort+0xa>
		thread->fn_abort();
   11c2c:	4798      	blx	r3
   11c2e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   11c30:	06da      	lsls	r2, r3, #27
   11c32:	d106      	bne.n	11c42 <_k_thread_single_abort+0x1e>
   11c34:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11c36:	3201      	adds	r2, #1
   11c38:	d103      	bne.n	11c42 <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   11c3a:	4620      	mov	r0, r4
   11c3c:	f7ff fbe4 	bl	11408 <_remove_thread_from_ready_q>
   11c40:	e00b      	b.n	11c5a <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   11c42:	079b      	lsls	r3, r3, #30
   11c44:	d502      	bpl.n	11c4c <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   11c46:	4620      	mov	r0, r4
   11c48:	f7ff fc06 	bl	11458 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   11c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11c4e:	3301      	adds	r3, #1
   11c50:	d003      	beq.n	11c5a <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   11c52:	f104 0014 	add.w	r0, r4, #20
   11c56:	f7ff ff1b 	bl	11a90 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   11c5a:	7a63      	ldrb	r3, [r4, #9]
   11c5c:	f043 0308 	orr.w	r3, r3, #8
   11c60:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   11c62:	bd10      	pop	{r4, pc}

00011c64 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   11c64:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   11c66:	4f21      	ldr	r7, [pc, #132]	; (11cec <_init_static_threads+0x88>)
   11c68:	4d21      	ldr	r5, [pc, #132]	; (11cf0 <_init_static_threads+0x8c>)
{
   11c6a:	b087      	sub	sp, #28
   11c6c:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   11c6e:	42bd      	cmp	r5, r7
   11c70:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   11c74:	d314      	bcc.n	11ca0 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   11c76:	4b1f      	ldr	r3, [pc, #124]	; (11cf4 <_init_static_threads+0x90>)
   11c78:	689a      	ldr	r2, [r3, #8]
   11c7a:	7ad3      	ldrb	r3, [r2, #11]
   11c7c:	3b01      	subs	r3, #1
   11c7e:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   11c80:	f04f 0320 	mov.w	r3, #32
   11c84:	f3ef 8511 	mrs	r5, BASEPRI
   11c88:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   11c8c:	4c18      	ldr	r4, [pc, #96]	; (11cf0 <_init_static_threads+0x8c>)
   11c8e:	42b4      	cmp	r4, r6
   11c90:	d31f      	bcc.n	11cd2 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11c92:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   11c96:	b007      	add	sp, #28
   11c98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   11c9c:	f7ff bc22 	b.w	114e4 <k_sched_unlock>
		_setup_new_thread(
   11ca0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   11ca4:	9304      	str	r3, [sp, #16]
   11ca6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   11caa:	9303      	str	r3, [sp, #12]
   11cac:	f854 3c14 	ldr.w	r3, [r4, #-20]
   11cb0:	9302      	str	r3, [sp, #8]
   11cb2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   11cb6:	9301      	str	r3, [sp, #4]
   11cb8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   11cbc:	9300      	str	r3, [sp, #0]
   11cbe:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   11cc2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   11cc4:	f7ff ff76 	bl	11bb4 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   11cc8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   11ccc:	651d      	str	r5, [r3, #80]	; 0x50
   11cce:	4625      	mov	r5, r4
   11cd0:	e7cd      	b.n	11c6e <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   11cd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11cd4:	1c4b      	adds	r3, r1, #1
   11cd6:	d003      	beq.n	11ce0 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   11cd8:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   11cda:	b919      	cbnz	r1, 11ce4 <_init_static_threads+0x80>
   11cdc:	f7ff ff52 	bl	11b84 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   11ce0:	342c      	adds	r4, #44	; 0x2c
   11ce2:	e7d4      	b.n	11c8e <_init_static_threads+0x2a>
   11ce4:	f7ff fef8 	bl	11ad8 <schedule_new_thread.part.11>
   11ce8:	e7fa      	b.n	11ce0 <_init_static_threads+0x7c>
   11cea:	bf00      	nop
   11cec:	2000391c 	.word	0x2000391c
   11cf0:	2000391c 	.word	0x2000391c
   11cf4:	200016e8 	.word	0x200016e8

00011cf8 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   11cf8:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   11cfa:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   11cfc:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   11cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   11d02:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   11d04:	72c3      	strb	r3, [r0, #11]
   11d06:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   11d08:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   11d0a:	61c3      	str	r3, [r0, #28]
	t->func = func;
   11d0c:	6283      	str	r3, [r0, #40]	; 0x28
   11d0e:	4770      	bx	lr

00011d10 <k_work_submit_to_queue>:
{
   11d10:	b500      	push	{lr}
   11d12:	f101 0308 	add.w	r3, r1, #8
   11d16:	f3bf 8f5b 	dmb	ish
   11d1a:	e853 2f00 	ldrex	r2, [r3]
   11d1e:	f042 0e01 	orr.w	lr, r2, #1
   11d22:	e843 ec00 	strex	ip, lr, [r3]
   11d26:	f1bc 0f00 	cmp.w	ip, #0
   11d2a:	d1f6      	bne.n	11d1a <k_work_submit_to_queue+0xa>
   11d2c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11d30:	07d3      	lsls	r3, r2, #31
   11d32:	d403      	bmi.n	11d3c <k_work_submit_to_queue+0x2c>
}
   11d34:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   11d38:	f7ff ba94 	b.w	11264 <k_queue_append>
   11d3c:	f85d fb04 	ldr.w	pc, [sp], #4

00011d40 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   11d40:	f1a0 010c 	sub.w	r1, r0, #12
   11d44:	6980      	ldr	r0, [r0, #24]
   11d46:	f7ff bfe3 	b.w	11d10 <k_work_submit_to_queue>

00011d4a <work_q_main>:
{
   11d4a:	b510      	push	{r4, lr}
   11d4c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   11d4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11d52:	4620      	mov	r0, r4
   11d54:	f7ff faaa 	bl	112ac <_impl_k_queue_get>
		if (!work) {
   11d58:	4603      	mov	r3, r0
   11d5a:	2800      	cmp	r0, #0
   11d5c:	d0f7      	beq.n	11d4e <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11d5e:	3308      	adds	r3, #8
		handler = work->handler;
   11d60:	6842      	ldr	r2, [r0, #4]
   11d62:	f3bf 8f5b 	dmb	ish
   11d66:	e853 1f00 	ldrex	r1, [r3]
   11d6a:	f021 0e01 	bic.w	lr, r1, #1
   11d6e:	e843 ec00 	strex	ip, lr, [r3]
   11d72:	f1bc 0f00 	cmp.w	ip, #0
   11d76:	d1f6      	bne.n	11d66 <work_q_main+0x1c>
   11d78:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   11d7c:	07cb      	lsls	r3, r1, #31
   11d7e:	d500      	bpl.n	11d82 <work_q_main+0x38>
			handler(work);
   11d80:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   11d82:	f7ff fcf5 	bl	11770 <_impl_k_yield>
   11d86:	e7e2      	b.n	11d4e <work_q_main+0x4>

00011d88 <k_work_q_start>:
{
   11d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d8a:	b087      	sub	sp, #28
   11d8c:	4604      	mov	r4, r0
   11d8e:	461f      	mov	r7, r3
   11d90:	460d      	mov	r5, r1
   11d92:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   11d94:	f7ff fa5e 	bl	11254 <_impl_k_queue_init>

   11d98:	2000      	movs	r0, #0
   11d9a:	9005      	str	r0, [sp, #20]
   11d9c:	9004      	str	r0, [sp, #16]
   11d9e:	9002      	str	r0, [sp, #8]
   11da0:	9001      	str	r0, [sp, #4]
   11da2:	9703      	str	r7, [sp, #12]
   11da4:	9400      	str	r4, [sp, #0]
   11da6:	4b04      	ldr	r3, [pc, #16]	; (11db8 <k_work_q_start+0x30>)
   11da8:	4632      	mov	r2, r6
   11daa:	4629      	mov	r1, r5
   11dac:	f104 0010 	add.w	r0, r4, #16
   11db0:	f7ff ff1a 	bl	11be8 <_impl_k_thread_create>
}
   11db4:	b007      	add	sp, #28
   11db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11db8:	00011d4b 	.word	0x00011d4b

00011dbc <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   11dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   11dc0:	2300      	movs	r3, #0
   11dc2:	61c2      	str	r2, [r0, #28]
	t->func = func;
   11dc4:	4a04      	ldr	r2, [pc, #16]	; (11dd8 <k_delayed_work_init+0x1c>)
   11dc6:	6003      	str	r3, [r0, #0]
   11dc8:	6041      	str	r1, [r0, #4]
   11dca:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   11dcc:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   11dce:	6143      	str	r3, [r0, #20]
	t->func = func;
   11dd0:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   11dd2:	6243      	str	r3, [r0, #36]	; 0x24
   11dd4:	4770      	bx	lr
   11dd6:	bf00      	nop
   11dd8:	00011d41 	.word	0x00011d41

00011ddc <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   11ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   11dde:	f04f 0320 	mov.w	r3, #32
   11de2:	f3ef 8411 	mrs	r4, BASEPRI
   11de6:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   11dea:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11dec:	b923      	cbnz	r3, 11df8 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11dee:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   11df2:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   11df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11df8:	f3bf 8f5b 	dmb	ish
   11dfc:	6883      	ldr	r3, [r0, #8]
   11dfe:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   11e02:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   11e04:	f100 0508 	add.w	r5, r0, #8
   11e08:	d533      	bpl.n	11e72 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   11e0a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   11e0c:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   11e0e:	2100      	movs	r1, #0
   11e10:	2b00      	cmp	r3, #0
   11e12:	d0ec      	beq.n	11dee <k_delayed_work_cancel+0x12>
   11e14:	4298      	cmp	r0, r3
   11e16:	d127      	bne.n	11e68 <k_delayed_work_cancel+0x8c>
   11e18:	6803      	ldr	r3, [r0, #0]
   11e1a:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   11e1c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   11e20:	b9c9      	cbnz	r1, 11e56 <k_delayed_work_cancel+0x7a>
   11e22:	42b8      	cmp	r0, r7
	list->head = node;
   11e24:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   11e26:	d100      	bne.n	11e2a <k_delayed_work_cancel+0x4e>
	list->tail = node;
   11e28:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11e2a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11e2c:	f003 0303 	and.w	r3, r3, #3
   11e30:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   11e32:	2300      	movs	r3, #0
   11e34:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11e36:	f3bf 8f5b 	dmb	ish
   11e3a:	e855 2f00 	ldrex	r2, [r5]
   11e3e:	f022 0201 	bic.w	r2, r2, #1
   11e42:	e845 2100 	strex	r1, r2, [r5]
   11e46:	2900      	cmp	r1, #0
   11e48:	d1f7      	bne.n	11e3a <k_delayed_work_cancel+0x5e>
   11e4a:	f3bf 8f5b 	dmb	ish
   11e4e:	f384 8811 	msr	BASEPRI, r4
	return 0;
   11e52:	4618      	mov	r0, r3
   11e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11e56:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11e58:	f006 0603 	and.w	r6, r6, #3
   11e5c:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   11e5e:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   11e60:	600b      	str	r3, [r1, #0]
	list->tail = node;
   11e62:	bf08      	it	eq
   11e64:	6051      	streq	r1, [r2, #4]
   11e66:	e7e0      	b.n	11e2a <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   11e68:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   11e6a:	4619      	mov	r1, r3
   11e6c:	f026 0303 	bic.w	r3, r6, #3
   11e70:	e7ce      	b.n	11e10 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11e72:	69c1      	ldr	r1, [r0, #28]
   11e74:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   11e76:	f100 020c 	add.w	r2, r0, #12
   11e7a:	d0da      	beq.n	11e32 <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11e7c:	4b08      	ldr	r3, [pc, #32]	; (11ea0 <k_delayed_work_cancel+0xc4>)
   11e7e:	699b      	ldr	r3, [r3, #24]
   11e80:	429a      	cmp	r2, r3
   11e82:	bf1f      	itttt	ne
   11e84:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11e86:	6913      	ldrne	r3, [r2, #16]
   11e88:	185b      	addne	r3, r3, r1
   11e8a:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   11e8c:	6903      	ldr	r3, [r0, #16]
   11e8e:	68c2      	ldr	r2, [r0, #12]
   11e90:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11e92:	68c2      	ldr	r2, [r0, #12]
   11e94:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   11e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e9a:	61c3      	str	r3, [r0, #28]
   11e9c:	e7c9      	b.n	11e32 <k_delayed_work_cancel+0x56>
   11e9e:	bf00      	nop
   11ea0:	200016e8 	.word	0x200016e8

00011ea4 <k_delayed_work_submit_to_queue>:
{
   11ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ea6:	4607      	mov	r7, r0
   11ea8:	460c      	mov	r4, r1
   11eaa:	4615      	mov	r5, r2
	__asm__ volatile(
   11eac:	f04f 0320 	mov.w	r3, #32
   11eb0:	f3ef 8611 	mrs	r6, BASEPRI
   11eb4:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   11eb8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   11eba:	b123      	cbz	r3, 11ec6 <k_delayed_work_submit_to_queue+0x22>
   11ebc:	4283      	cmp	r3, r0
   11ebe:	d00b      	beq.n	11ed8 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   11ec0:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   11ec4:	e00d      	b.n	11ee2 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   11ec6:	b138      	cbz	r0, 11ed8 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   11ec8:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   11eca:	b96d      	cbnz	r5, 11ee8 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   11ecc:	4621      	mov	r1, r4
   11ece:	4638      	mov	r0, r7
   11ed0:	f7ff ff1e 	bl	11d10 <k_work_submit_to_queue>
	err = 0;
   11ed4:	2000      	movs	r0, #0
   11ed6:	e004      	b.n	11ee2 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   11ed8:	4620      	mov	r0, r4
   11eda:	f7ff ff7f 	bl	11ddc <k_delayed_work_cancel>
		if (err < 0) {
   11ede:	2800      	cmp	r0, #0
   11ee0:	daf2      	bge.n	11ec8 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11ee2:	f386 8811 	msr	BASEPRI, r6
}
   11ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   11ee8:	220a      	movs	r2, #10
   11eea:	3509      	adds	r5, #9
   11eec:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   11ef0:	4a16      	ldr	r2, [pc, #88]	; (11f4c <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   11ef2:	2300      	movs	r3, #0
   11ef4:	4611      	mov	r1, r2
   11ef6:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   11ef8:	61a3      	str	r3, [r4, #24]
   11efa:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   11efe:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11f00:	428b      	cmp	r3, r1
   11f02:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11f06:	61e5      	str	r5, [r4, #28]
   11f08:	d106      	bne.n	11f18 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   11f0a:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   11f0c:	6993      	ldr	r3, [r2, #24]
   11f0e:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   11f10:	6993      	ldr	r3, [r2, #24]
   11f12:	601f      	str	r7, [r3, #0]
	list->tail = node;
   11f14:	6197      	str	r7, [r2, #24]
   11f16:	e7dd      	b.n	11ed4 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11f18:	2b00      	cmp	r3, #0
   11f1a:	d0f6      	beq.n	11f0a <k_delayed_work_submit_to_queue+0x66>
   11f1c:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   11f20:	69e0      	ldr	r0, [r4, #28]
   11f22:	691d      	ldr	r5, [r3, #16]
   11f24:	42a8      	cmp	r0, r5
   11f26:	dc08      	bgt.n	11f3a <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   11f28:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   11f2a:	1a28      	subs	r0, r5, r0
   11f2c:	6118      	str	r0, [r3, #16]
   11f2e:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   11f30:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   11f32:	685a      	ldr	r2, [r3, #4]
   11f34:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   11f36:	605f      	str	r7, [r3, #4]
   11f38:	e7cc      	b.n	11ed4 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   11f3a:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   11f3c:	4573      	cmp	r3, lr
   11f3e:	61e0      	str	r0, [r4, #28]
   11f40:	d0e3      	beq.n	11f0a <k_delayed_work_submit_to_queue+0x66>
   11f42:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11f44:	2b00      	cmp	r3, #0
   11f46:	d1eb      	bne.n	11f20 <k_delayed_work_submit_to_queue+0x7c>
   11f48:	e7df      	b.n	11f0a <k_delayed_work_submit_to_queue+0x66>
   11f4a:	bf00      	nop
   11f4c:	200016e8 	.word	0x200016e8

00011f50 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   11f50:	2314      	movs	r3, #20
   11f52:	b530      	push	{r4, r5, lr}
   11f54:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   11f58:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   11f5a:	2900      	cmp	r1, #0
   11f5c:	da00      	bge.n	11f60 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   11f5e:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   11f60:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   11f62:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   11f64:	f003 030f 	and.w	r3, r3, #15
   11f68:	2b02      	cmp	r3, #2
   11f6a:	d003      	beq.n	11f74 <clear_event_registrations+0x24>
   11f6c:	2b04      	cmp	r3, #4
   11f6e:	d001      	beq.n	11f74 <clear_event_registrations+0x24>
   11f70:	2b01      	cmp	r3, #1
   11f72:	d104      	bne.n	11f7e <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   11f74:	6843      	ldr	r3, [r0, #4]
   11f76:	6805      	ldr	r5, [r0, #0]
   11f78:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   11f7a:	6805      	ldr	r5, [r0, #0]
   11f7c:	606b      	str	r3, [r5, #4]
   11f7e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   11f82:	f04f 0320 	mov.w	r3, #32
   11f86:	f3ef 8211 	mrs	r2, BASEPRI
   11f8a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   11f8e:	3901      	subs	r1, #1
   11f90:	3814      	subs	r0, #20
   11f92:	e7e2      	b.n	11f5a <clear_event_registrations+0xa>

00011f94 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   11f94:	6883      	ldr	r3, [r0, #8]
{
   11f96:	b570      	push	{r4, r5, r6, lr}
   11f98:	4605      	mov	r5, r0
   11f9a:	460e      	mov	r6, r1
	if (!event->poller) {
   11f9c:	b1d3      	cbz	r3, 11fd4 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   11f9e:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   11fa0:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   11fa2:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   11fa4:	7a63      	ldrb	r3, [r4, #9]
   11fa6:	079a      	lsls	r2, r3, #30
   11fa8:	d514      	bpl.n	11fd4 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   11faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11fac:	3302      	adds	r3, #2
   11fae:	d01a      	beq.n	11fe6 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   11fb0:	4620      	mov	r0, r4
   11fb2:	f7ff fa6e 	bl	11492 <_unpend_thread>
	_set_thread_return_value(thread,
   11fb6:	2e00      	cmp	r6, #0
   11fb8:	bf0c      	ite	eq
   11fba:	f06f 0303 	mvneq.w	r3, #3
   11fbe:	2300      	movne	r3, #0
   11fc0:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   11fc2:	7a63      	ldrb	r3, [r4, #9]
   11fc4:	06db      	lsls	r3, r3, #27
   11fc6:	d105      	bne.n	11fd4 <signal_poll_event+0x40>
   11fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11fca:	3301      	adds	r3, #1
   11fcc:	d102      	bne.n	11fd4 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   11fce:	4620      	mov	r0, r4
   11fd0:	f7ff fac2 	bl	11558 <_add_thread_to_ready_q>
	event->state |= state;
   11fd4:	7b6b      	ldrb	r3, [r5, #13]
   11fd6:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   11fda:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   11fde:	2000      	movs	r0, #0
	event->state |= state;
   11fe0:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   11fe2:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   11fe4:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   11fe6:	f06f 000a 	mvn.w	r0, #10
}
   11fea:	bd70      	pop	{r4, r5, r6, pc}

00011fec <add_event>:
{
   11fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   11fee:	6803      	ldr	r3, [r0, #0]
   11ff0:	4298      	cmp	r0, r3
   11ff2:	4604      	mov	r4, r0
   11ff4:	460e      	mov	r6, r1
   11ff6:	4617      	mov	r7, r2
   11ff8:	d106      	bne.n	12008 <add_event+0x1c>
	node->next = list;
   11ffa:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   11ffc:	6863      	ldr	r3, [r4, #4]
   11ffe:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   12000:	6863      	ldr	r3, [r4, #4]
   12002:	601e      	str	r6, [r3, #0]
	list->tail = node;
   12004:	6066      	str	r6, [r4, #4]
   12006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   12008:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   1200a:	2b00      	cmp	r3, #0
   1200c:	d0f5      	beq.n	11ffa <add_event+0xe>
   1200e:	689b      	ldr	r3, [r3, #8]
   12010:	6811      	ldr	r1, [r2, #0]
   12012:	6818      	ldr	r0, [r3, #0]
   12014:	f7ff f9ee 	bl	113f4 <_is_t1_higher_prio_than_t2>
   12018:	2800      	cmp	r0, #0
   1201a:	d1ee      	bne.n	11ffa <add_event+0xe>
	return list->head == list;
   1201c:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1201e:	42ac      	cmp	r4, r5
   12020:	d0eb      	beq.n	11ffa <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   12022:	2d00      	cmp	r5, #0
   12024:	d0e9      	beq.n	11ffa <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   12026:	68ab      	ldr	r3, [r5, #8]
   12028:	6838      	ldr	r0, [r7, #0]
   1202a:	6819      	ldr	r1, [r3, #0]
   1202c:	f7ff f9e2 	bl	113f4 <_is_t1_higher_prio_than_t2>
   12030:	b130      	cbz	r0, 12040 <add_event+0x54>
		node->prev = insert_point->prev;
   12032:	686b      	ldr	r3, [r5, #4]
   12034:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   12036:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   12038:	686b      	ldr	r3, [r5, #4]
   1203a:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   1203c:	606e      	str	r6, [r5, #4]
   1203e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   12040:	6863      	ldr	r3, [r4, #4]
   12042:	429d      	cmp	r5, r3
   12044:	d0d9      	beq.n	11ffa <add_event+0xe>
   12046:	682d      	ldr	r5, [r5, #0]
   12048:	e7eb      	b.n	12022 <add_event+0x36>

0001204a <k_poll_event_init>:
{
   1204a:	b530      	push	{r4, r5, lr}
	event->type = type;
   1204c:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   1204e:	6103      	str	r3, [r0, #16]
	event->type = type;
   12050:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   12054:	7b81      	ldrb	r1, [r0, #14]
   12056:	f362 0100 	bfi	r1, r2, #0, #1
   1205a:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   1205c:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   1205e:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   12060:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   12064:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   12068:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1206a:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   1206c:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   1206e:	bd30      	pop	{r4, r5, pc}

00012070 <_impl_k_poll>:
{
   12070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   12074:	4b3f      	ldr	r3, [pc, #252]	; (12174 <_impl_k_poll+0x104>)
{
   12076:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   12078:	689b      	ldr	r3, [r3, #8]
   1207a:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   1207c:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1207e:	2301      	movs	r3, #1
{
   12080:	4607      	mov	r7, r0
   12082:	468a      	mov	sl, r1
   12084:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   12086:	9301      	str	r3, [sp, #4]
   12088:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1208a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   1208e:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   12090:	4556      	cmp	r6, sl
   12092:	db10      	blt.n	120b6 <_impl_k_poll+0x46>
   12094:	f04f 0320 	mov.w	r3, #32
   12098:	f3ef 8611 	mrs	r6, BASEPRI
   1209c:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   120a0:	9c01      	ldr	r4, [sp, #4]
   120a2:	2c00      	cmp	r4, #0
   120a4:	d13f      	bne.n	12126 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   120a6:	4632      	mov	r2, r6
   120a8:	4629      	mov	r1, r5
   120aa:	4638      	mov	r0, r7
   120ac:	f7ff ff50 	bl	11f50 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   120b0:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   120b4:	e040      	b.n	12138 <_impl_k_poll+0xc8>
	__asm__ volatile(
   120b6:	f04f 0320 	mov.w	r3, #32
   120ba:	f3ef 8b11 	mrs	fp, BASEPRI
   120be:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   120c2:	7b62      	ldrb	r2, [r4, #13]
   120c4:	f002 030f 	and.w	r3, r2, #15
   120c8:	2b02      	cmp	r3, #2
   120ca:	d003      	beq.n	120d4 <_impl_k_poll+0x64>
   120cc:	2b04      	cmp	r3, #4
   120ce:	d004      	beq.n	120da <_impl_k_poll+0x6a>
   120d0:	2b01      	cmp	r3, #1
   120d2:	d106      	bne.n	120e2 <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   120d4:	6921      	ldr	r1, [r4, #16]
   120d6:	6889      	ldr	r1, [r1, #8]
   120d8:	e001      	b.n	120de <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   120da:	6921      	ldr	r1, [r4, #16]
   120dc:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   120de:	2900      	cmp	r1, #0
   120e0:	d13d      	bne.n	1215e <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   120e2:	f1b8 0f00 	cmp.w	r8, #0
   120e6:	d014      	beq.n	12112 <_impl_k_poll+0xa2>
   120e8:	9a01      	ldr	r2, [sp, #4]
   120ea:	b192      	cbz	r2, 12112 <_impl_k_poll+0xa2>
	switch (event->type) {
   120ec:	2b02      	cmp	r3, #2
   120ee:	d007      	beq.n	12100 <_impl_k_poll+0x90>
   120f0:	2b04      	cmp	r3, #4
   120f2:	d013      	beq.n	1211c <_impl_k_poll+0xac>
   120f4:	2b01      	cmp	r3, #1
   120f6:	d109      	bne.n	1210c <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   120f8:	466a      	mov	r2, sp
   120fa:	4621      	mov	r1, r4
   120fc:	6920      	ldr	r0, [r4, #16]
   120fe:	e003      	b.n	12108 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   12100:	6920      	ldr	r0, [r4, #16]
   12102:	466a      	mov	r2, sp
   12104:	4621      	mov	r1, r4
   12106:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   12108:	f7ff ff70 	bl	11fec <add_event>
	event->poller = poller;
   1210c:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   12110:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12112:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   12116:	3601      	adds	r6, #1
   12118:	3414      	adds	r4, #20
   1211a:	e7b9      	b.n	12090 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   1211c:	6920      	ldr	r0, [r4, #16]
   1211e:	466a      	mov	r2, sp
   12120:	4621      	mov	r1, r4
   12122:	3008      	adds	r0, #8
   12124:	e7f0      	b.n	12108 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   12126:	2300      	movs	r3, #0
   12128:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   1212a:	f1b8 0f00 	cmp.w	r8, #0
   1212e:	d107      	bne.n	12140 <_impl_k_poll+0xd0>
   12130:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   12134:	f06f 040a 	mvn.w	r4, #10
}
   12138:	4620      	mov	r0, r4
   1213a:	b005      	add	sp, #20
   1213c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   12140:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   12142:	4642      	mov	r2, r8
   12144:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   12146:	9102      	str	r1, [sp, #8]
   12148:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1214a:	f7ff fab3 	bl	116b4 <_pend_current_thread>
   1214e:	4604      	mov	r4, r0
	__asm__ volatile(
   12150:	f04f 0320 	mov.w	r3, #32
   12154:	f3ef 8611 	mrs	r6, BASEPRI
   12158:	f383 8811 	msr	BASEPRI, r3
   1215c:	e7a3      	b.n	120a6 <_impl_k_poll+0x36>
	event->state |= state;
   1215e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   12162:	f363 1207 	bfi	r2, r3, #4, #4
   12166:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   12168:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   1216c:	f8cd 9004 	str.w	r9, [sp, #4]
   12170:	e7cf      	b.n	12112 <_impl_k_poll+0xa2>
   12172:	bf00      	nop
   12174:	200016e8 	.word	0x200016e8

00012178 <_handle_obj_poll_events>:
	return list->head == list;
   12178:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   1217a:	4298      	cmp	r0, r3
   1217c:	d007      	beq.n	1218e <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   1217e:	e893 0005 	ldmia.w	r3, {r0, r2}
   12182:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   12184:	6818      	ldr	r0, [r3, #0]
   12186:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   12188:	4618      	mov	r0, r3
   1218a:	f7ff bf03 	b.w	11f94 <signal_poll_event>
   1218e:	4770      	bx	lr

00012190 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   12190:	b538      	push	{r3, r4, r5, lr}
   12192:	f04f 0320 	mov.w	r3, #32
   12196:	f3ef 8511 	mrs	r5, BASEPRI
   1219a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1219e:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   121a0:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   121a2:	4298      	cmp	r0, r3
	signal->signaled = 1;
   121a4:	f04f 0101 	mov.w	r1, #1
   121a8:	6081      	str	r1, [r0, #8]
   121aa:	d00d      	beq.n	121c8 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   121ac:	e893 0005 	ldmia.w	r3, {r0, r2}
   121b0:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   121b2:	6818      	ldr	r0, [r3, #0]
   121b4:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   121b6:	4618      	mov	r0, r3
   121b8:	f7ff feec 	bl	11f94 <signal_poll_event>
   121bc:	4604      	mov	r4, r0

	_reschedule(key);
   121be:	4628      	mov	r0, r5
   121c0:	f7ff f972 	bl	114a8 <_reschedule>
	return rc;
}
   121c4:	4620      	mov	r0, r4
   121c6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   121c8:	f385 8811 	msr	BASEPRI, r5
		return 0;
   121cc:	2400      	movs	r4, #0
   121ce:	e7f9      	b.n	121c4 <_impl_k_poll_signal+0x34>

000121d0 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   121d0:	4770      	bx	lr
