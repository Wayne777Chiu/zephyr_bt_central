
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce0 	.word	0x20002ce0

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001cb5 	.word	0x00001cb5
       8:	00001d09 	.word	0x00001d09
       c:	00001b25 	.word	0x00001b25
      10:	00001b25 	.word	0x00001b25
      14:	00001b25 	.word	0x00001b25
      18:	00001b25 	.word	0x00001b25
      1c:	00001b25 	.word	0x00001b25
      20:	00001b25 	.word	0x00001b25
      24:	00001b25 	.word	0x00001b25
      28:	00001b25 	.word	0x00001b25
      2c:	000016b5 	.word	0x000016b5
      30:	00001b25 	.word	0x00001b25
      34:	00001b25 	.word	0x00001b25
      38:	00001671 	.word	0x00001671
      3c:	00001b25 	.word	0x00001b25

00000040 <_irq_vector_table>:
      40:	00001c79 0001151b 00001c79 00001c79     y.......y...y...
      50:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      60:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      70:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      80:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      90:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      a0:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      b0:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      c0:	00001c79 00001c79 00001c79 00001c79     y...y...y...y...
      d0:	00001c79 00001c79 00001c79              y...y...y...

000000dc <_sw_isr_table>:
      dc:	00000000 00001229 00000000 00001a51     ....).......Q...
      ec:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
      fc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     10c:	00000000 0001365d 00000000 00001a51     ....]6......Q...
     11c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     12c:	00000000 00001a51 00000000 000114e1     ....Q...........
     13c:	00000000 00001a51 20003eb0 000138a9     ....Q....>. .8..
     14c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     15c:	00000000 00001a51 00000000 000014d5     ....Q...........
     16c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     17c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     18c:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     19c:	00000000 00011515 00000000 00001a51     ............Q...
     1ac:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1bc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1cc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1dc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1ec:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     1fc:	00000000 00001a51 00000000 00001a51     ....Q.......Q...
     20c:	00000000 00001a51                       ....Q...

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fc28 	bl	1dbc <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00015481 	.word	0x00015481
     5b0:	000154aa 	.word	0x000154aa
     5b4:	00015488 	.word	0x00015488
     5b8:	0001548f 	.word	0x0001548f
     5bc:	00015499 	.word	0x00015499
     5c0:	000154a3 	.word	0x000154a3

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 f9ee 	bl	49ac <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fa87 	bl	4b0c <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	000154cd 	.word	0x000154cd
     604:	20000000 	.word	0x20000000
     608:	000154eb 	.word	0x000154eb

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 f9c7 	bl	49ac <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 ffde 	bl	45f0 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fb7e 	bl	3d48 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00015516 	.word	0x00015516
     664:	00015424 	.word	0x00015424
     668:	00000671 	.word	0x00000671
     66c:	00015534 	.word	0x00015534

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fba9 	bl	3dec <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 f981 	bl	49b0 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	000154fa 	.word	0x000154fa
     6bc:	0001542a 	.word	0x0001542a

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 facc 	bl	3c60 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fc3e 	bl	3f60 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 fb28 	bl	3d48 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00015557 	.word	0x00015557
     70c:	00015577 	.word	0x00015577
     710:	20003a20 	.word	0x20003a20
     714:	00015432 	.word	0x00015432
     718:	00000671 	.word	0x00000671
     71c:	00015534 	.word	0x00015534
     720:	0001558e 	.word	0x0001558e

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a54 	.word	0x20003a54
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 fec0 	bl	14628 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f9ac 	bl	1c04 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a58 	.word	0x20003a58

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a58 	.word	0x20003a58

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr

00000fe2 <syslog_hook_default>:
 */

#include <logging/sys_log.h>

void syslog_hook_default(const char *fmt, ...)
{
     fe2:	b40f      	push	{r0, r1, r2, r3}
	(void)(fmt);  /* Prevent warning about unused argument */
}
     fe4:	b004      	add	sp, #16
     fe6:	4770      	bx	lr

00000fe8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fea:	4c1c      	ldr	r4, [pc, #112]	; (105c <sys_rand32_get+0x74>)
     fec:	f3bf 8f5b 	dmb	ish
     ff0:	6820      	ldr	r0, [r4, #0]
     ff2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff6:	b9c0      	cbnz	r0, 102a <sys_rand32_get+0x42>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff8:	4819      	ldr	r0, [pc, #100]	; (1060 <sys_rand32_get+0x78>)
     ffa:	f012 fd59 	bl	13ab0 <device_get_binding>
		__ASSERT((dev != NULL),
     ffe:	b950      	cbnz	r0, 1016 <sys_rand32_get+0x2e>
    1000:	4918      	ldr	r1, [pc, #96]	; (1064 <sys_rand32_get+0x7c>)
    1002:	4a19      	ldr	r2, [pc, #100]	; (1068 <sys_rand32_get+0x80>)
    1004:	4819      	ldr	r0, [pc, #100]	; (106c <sys_rand32_get+0x84>)
    1006:	231b      	movs	r3, #27
    1008:	f7ff ffc0 	bl	f8c <printk>
    100c:	4914      	ldr	r1, [pc, #80]	; (1060 <sys_rand32_get+0x78>)
    100e:	4818      	ldr	r0, [pc, #96]	; (1070 <sys_rand32_get+0x88>)
    1010:	f7ff ffbc 	bl	f8c <printk>
    1014:	e7fe      	b.n	1014 <sys_rand32_get+0x2c>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1016:	f3bf 8f5b 	dmb	ish
    101a:	e854 3f00 	ldrex	r3, [r4]
    101e:	e844 0200 	strex	r2, r0, [r4]
    1022:	2a00      	cmp	r2, #0
    1024:	d1f9      	bne.n	101a <sys_rand32_get+0x32>
    1026:	f3bf 8f5b 	dmb	ish
					    u8_t *buffer,
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
    102a:	6843      	ldr	r3, [r0, #4]
    102c:	681b      	ldr	r3, [r3, #0]
    102e:	b94b      	cbnz	r3, 1044 <sys_rand32_get+0x5c>
    1030:	234a      	movs	r3, #74	; 0x4a
    1032:	4a10      	ldr	r2, [pc, #64]	; (1074 <sys_rand32_get+0x8c>)
    1034:	4910      	ldr	r1, [pc, #64]	; (1078 <sys_rand32_get+0x90>)
    1036:	480d      	ldr	r0, [pc, #52]	; (106c <sys_rand32_get+0x84>)
    1038:	f7ff ffa8 	bl	f8c <printk>
    103c:	480f      	ldr	r0, [pc, #60]	; (107c <sys_rand32_get+0x94>)
    103e:	f7ff ffa5 	bl	f8c <printk>
    1042:	e7fe      	b.n	1042 <sys_rand32_get+0x5a>
	return api->get_entropy(dev, buffer, length);
    1044:	2204      	movs	r2, #4
    1046:	eb0d 0102 	add.w	r1, sp, r2
    104a:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    104c:	2800      	cmp	r0, #0
    104e:	da02      	bge.n	1056 <sys_rand32_get+0x6e>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1050:	f000 faba 	bl	15c8 <_timer_cycle_get_32>
    1054:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1056:	9801      	ldr	r0, [sp, #4]
    1058:	b002      	add	sp, #8
    105a:	bd10      	pop	{r4, pc}
    105c:	20000004 	.word	0x20000004
    1060:	000155bc 	.word	0x000155bc
    1064:	0001560b 	.word	0x0001560b
    1068:	000155c6 	.word	0x000155c6
    106c:	00015620 	.word	0x00015620
    1070:	0001563f 	.word	0x0001563f
    1074:	00015695 	.word	0x00015695
    1078:	000156c6 	.word	0x000156c6
    107c:	000156d7 	.word	0x000156d7

00001080 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1080:	280a      	cmp	r0, #10
{
    1082:	b538      	push	{r3, r4, r5, lr}
    1084:	4604      	mov	r4, r0
    1086:	4d07      	ldr	r5, [pc, #28]	; (10a4 <console_out+0x24>)
	if ('\n' == c) {
    1088:	d104      	bne.n	1094 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    108a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    108c:	6843      	ldr	r3, [r0, #4]
    108e:	210d      	movs	r1, #13
    1090:	685b      	ldr	r3, [r3, #4]
    1092:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1094:	6828      	ldr	r0, [r5, #0]
    1096:	6843      	ldr	r3, [r0, #4]
    1098:	b2e1      	uxtb	r1, r4
    109a:	685b      	ldr	r3, [r3, #4]
    109c:	4798      	blx	r3

	return c;
}
    109e:	4620      	mov	r0, r4
    10a0:	bd38      	pop	{r3, r4, r5, pc}
    10a2:	bf00      	nop
    10a4:	20000008 	.word	0x20000008

000010a8 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    10a8:	4801      	ldr	r0, [pc, #4]	; (10b0 <uart_console_hook_install+0x8>)
    10aa:	f7ff be29 	b.w	d00 <__printk_hook_install>
    10ae:	bf00      	nop
    10b0:	00001081 	.word	0x00001081

000010b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    10b4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    10b6:	4804      	ldr	r0, [pc, #16]	; (10c8 <uart_console_init+0x14>)
    10b8:	f012 fcfa 	bl	13ab0 <device_get_binding>
    10bc:	4b03      	ldr	r3, [pc, #12]	; (10cc <uart_console_init+0x18>)
    10be:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    10c0:	f7ff fff2 	bl	10a8 <uart_console_hook_install>

	return 0;
}
    10c4:	2000      	movs	r0, #0
    10c6:	bd08      	pop	{r3, pc}
    10c8:	000156fb 	.word	0x000156fb
    10cc:	20000008 	.word	0x20000008

000010d0 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    10d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    10d2:	f04f 0320 	mov.w	r3, #32
    10d6:	f3ef 8211 	mrs	r2, BASEPRI
    10da:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    10de:	4c11      	ldr	r4, [pc, #68]	; (1124 <_m16src_stop+0x54>)
    10e0:	7823      	ldrb	r3, [r4, #0]
    10e2:	b923      	cbnz	r3, 10ee <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10e4:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10e8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10ec:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10ee:	3b01      	subs	r3, #1
    10f0:	b2db      	uxtb	r3, r3
    10f2:	7023      	strb	r3, [r4, #0]
    10f4:	b123      	cbz	r3, 1100 <_m16src_stop+0x30>
    10f6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10fa:	f06f 000f 	mvn.w	r0, #15
    10fe:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    1100:	4b09      	ldr	r3, [pc, #36]	; (1128 <_m16src_stop+0x58>)
    1102:	7818      	ldrb	r0, [r3, #0]
    1104:	2101      	movs	r1, #1
    1106:	b128      	cbz	r0, 1114 <_m16src_stop+0x44>
		m16src_ref++;
    1108:	7021      	strb	r1, [r4, #0]
    110a:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    110e:	f06f 000a 	mvn.w	r0, #10
    1112:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    1114:	7019      	strb	r1, [r3, #0]
    1116:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    111e:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    1120:	7018      	strb	r0, [r3, #0]

	return 0;
}
    1122:	bd10      	pop	{r4, pc}
    1124:	2000000e 	.word	0x2000000e
    1128:	2000000d 	.word	0x2000000d

0000112c <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    112c:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    112e:	2200      	movs	r2, #0
    1130:	4610      	mov	r0, r2
    1132:	2101      	movs	r1, #1
    1134:	f000 fc5e 	bl	19f4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1138:	2000      	movs	r0, #0
    113a:	f000 fc29 	bl	1990 <_arch_irq_enable>

	return 0;
}
    113e:	2000      	movs	r0, #0
    1140:	bd08      	pop	{r3, pc}
	...

00001144 <_m16src_start>:
{
    1144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__asm__ volatile(
    1148:	f04f 0320 	mov.w	r3, #32
    114c:	f3ef 8211 	mrs	r2, BASEPRI
    1150:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    1154:	4b2d      	ldr	r3, [pc, #180]	; (120c <_m16src_start+0xc8>)
    1156:	7818      	ldrb	r0, [r3, #0]
    1158:	1c44      	adds	r4, r0, #1
    115a:	701c      	strb	r4, [r3, #0]
    115c:	4698      	mov	r8, r3
    115e:	b178      	cbz	r0, 1180 <_m16src_start+0x3c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1160:	f382 8811 	msr	BASEPRI, r2
	__ASSERT_NO_MSG(m16src_ref);
    1164:	f898 3000 	ldrb.w	r3, [r8]
    1168:	2b00      	cmp	r3, #0
    116a:	d142      	bne.n	11f2 <_m16src_start+0xae>
    116c:	235e      	movs	r3, #94	; 0x5e
    116e:	4a28      	ldr	r2, [pc, #160]	; (1210 <_m16src_start+0xcc>)
    1170:	4928      	ldr	r1, [pc, #160]	; (1214 <_m16src_start+0xd0>)
    1172:	4829      	ldr	r0, [pc, #164]	; (1218 <_m16src_start+0xd4>)
    1174:	f7ff ff0a 	bl	f8c <printk>
    1178:	4828      	ldr	r0, [pc, #160]	; (121c <_m16src_start+0xd8>)
    117a:	f7ff ff07 	bl	f8c <printk>
    117e:	e7fe      	b.n	117e <_m16src_start+0x3a>
	if (m16src_grd) {
    1180:	4d27      	ldr	r5, [pc, #156]	; (1220 <_m16src_start+0xdc>)
    1182:	782f      	ldrb	r7, [r5, #0]
    1184:	b137      	cbz	r7, 1194 <_m16src_start+0x50>
		m16src_ref--;
    1186:	7018      	strb	r0, [r3, #0]
    1188:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    118c:	f06f 000a 	mvn.w	r0, #10
    1190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	m16src_grd = 1;
    1194:	2601      	movs	r6, #1
    1196:	702e      	strb	r6, [r5, #0]
    1198:	f382 8811 	msr	BASEPRI, r2
    119c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    11a0:	b319      	cbz	r1, 11ea <_m16src_start+0xa6>
		irq_disable(POWER_CLOCK_IRQn);
    11a2:	4638      	mov	r0, r7
    11a4:	f000 fc04 	bl	19b0 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11a8:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    11ac:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    11b0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    11b4:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    11b6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    11ba:	b192      	cbz	r2, 11e2 <_m16src_start+0x9e>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11bc:	2200      	movs	r2, #0
    11be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11c2:	4a18      	ldr	r2, [pc, #96]	; (1224 <_m16src_start+0xe0>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    11c4:	f013 0f01 	tst.w	r3, #1
    11c8:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    11cc:	bf08      	it	eq
    11ce:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    11d2:	2000      	movs	r0, #0
    11d4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    11d8:	f000 fbda 	bl	1990 <_arch_irq_enable>
	m16src_grd = 0;
    11dc:	2300      	movs	r3, #0
    11de:	702b      	strb	r3, [r5, #0]
    11e0:	e7c0      	b.n	1164 <_m16src_start+0x20>
			__WFE();
    11e2:	bf20      	wfe
			__SEV();
    11e4:	bf40      	sev
			__WFE();
    11e6:	bf20      	wfe
    11e8:	e7e5      	b.n	11b6 <_m16src_start+0x72>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    11ee:	6026      	str	r6, [r4, #0]
    11f0:	e7f4      	b.n	11dc <_m16src_start+0x98>
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    11f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    11fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    11fe:	bf14      	ite	ne
    1200:	2000      	movne	r0, #0
    1202:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    120a:	bf00      	nop
    120c:	2000000e 	.word	0x2000000e
    1210:	0001571c 	.word	0x0001571c
    1214:	00015764 	.word	0x00015764
    1218:	00015620 	.word	0x00015620
    121c:	0001563e 	.word	0x0001563e
    1220:	2000000d 	.word	0x2000000d
    1224:	e000e100 	.word	0xe000e100

00001228 <_power_clock_isr>:
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    122a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    122e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1230:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1234:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1238:	f8d3 740c 	ldr.w	r7, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    123c:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1240:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1244:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1248:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    124c:	f002 0201 	and.w	r2, r2, #1
	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);
    1250:	f1be 0f00 	cmp.w	lr, #0
    1254:	d130      	bne.n	12b8 <_power_clock_isr+0x90>
    1256:	b1f6      	cbz	r6, 1296 <_power_clock_isr+0x6e>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    125c:	2600      	movs	r6, #0
    125e:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    1262:	b13a      	cbz	r2, 1274 <_power_clock_isr+0x4c>
    1264:	03fb      	lsls	r3, r7, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1266:	bf41      	itttt	mi
    1268:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    126c:	2201      	movmi	r2, #1
    126e:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    1272:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    1274:	b339      	cbz	r1, 12c6 <_power_clock_isr+0x9e>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    127a:	2200      	movs	r2, #0
    127c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		__ASSERT_NO_MSG(0);
    1280:	492c      	ldr	r1, [pc, #176]	; (1334 <_power_clock_isr+0x10c>)
    1282:	4a2d      	ldr	r2, [pc, #180]	; (1338 <_power_clock_isr+0x110>)
    1284:	482d      	ldr	r0, [pc, #180]	; (133c <_power_clock_isr+0x114>)
    1286:	f240 132f 	movw	r3, #303	; 0x12f
    128a:	f7ff fe7f 	bl	f8c <printk>
    128e:	482c      	ldr	r0, [pc, #176]	; (1340 <_power_clock_isr+0x118>)
    1290:	f7ff fe7c 	bl	f8c <printk>
    1294:	e7fe      	b.n	1294 <_power_clock_isr+0x6c>
	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);
    1296:	2a00      	cmp	r2, #0
    1298:	d1e4      	bne.n	1264 <_power_clock_isr+0x3c>
    129a:	2900      	cmp	r1, #0
    129c:	d1eb      	bne.n	1276 <_power_clock_isr+0x4e>
    129e:	b990      	cbnz	r0, 12c6 <_power_clock_isr+0x9e>
    12a0:	bb44      	cbnz	r4, 12f4 <_power_clock_isr+0xcc>
    12a2:	f240 1317 	movw	r3, #279	; 0x117
    12a6:	4a24      	ldr	r2, [pc, #144]	; (1338 <_power_clock_isr+0x110>)
    12a8:	4926      	ldr	r1, [pc, #152]	; (1344 <_power_clock_isr+0x11c>)
    12aa:	4824      	ldr	r0, [pc, #144]	; (133c <_power_clock_isr+0x114>)
    12ac:	f7ff fe6e 	bl	f8c <printk>
    12b0:	4823      	ldr	r0, [pc, #140]	; (1340 <_power_clock_isr+0x118>)
    12b2:	f7ff fe6b 	bl	f8c <printk>
    12b6:	e7fe      	b.n	12b6 <_power_clock_isr+0x8e>
		NRF_POWER->EVENTS_POFWARN = 0;
    12b8:	f04f 0e00 	mov.w	lr, #0
    12bc:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12c0:	2e00      	cmp	r6, #0
    12c2:	d0ce      	beq.n	1262 <_power_clock_isr+0x3a>
    12c4:	e7c8      	b.n	1258 <_power_clock_isr+0x30>
	if (done) {
    12c6:	b1a8      	cbz	r0, 12f4 <_power_clock_isr+0xcc>
		NRF_CLOCK->EVENTS_DONE = 0;
    12c8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		err = _m16src_stop(dev, NULL);
    12cc:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    12ce:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12d2:	2100      	movs	r1, #0
    12d4:	f7ff fefc 	bl	10d0 <_m16src_stop>
		__ASSERT_NO_MSG(!err);
    12d8:	b150      	cbz	r0, 12f0 <_power_clock_isr+0xc8>
    12da:	f240 1339 	movw	r3, #313	; 0x139
    12de:	4a16      	ldr	r2, [pc, #88]	; (1338 <_power_clock_isr+0x110>)
    12e0:	4919      	ldr	r1, [pc, #100]	; (1348 <_power_clock_isr+0x120>)
    12e2:	4816      	ldr	r0, [pc, #88]	; (133c <_power_clock_isr+0x114>)
    12e4:	f7ff fe52 	bl	f8c <printk>
    12e8:	4815      	ldr	r0, [pc, #84]	; (1340 <_power_clock_isr+0x118>)
    12ea:	f7ff fe4f 	bl	f8c <printk>
    12ee:	e7fe      	b.n	12ee <_power_clock_isr+0xc6>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12f0:	2301      	movs	r3, #1
    12f2:	6173      	str	r3, [r6, #20]
	if (ctto) {
    12f4:	b1e4      	cbz	r4, 1330 <_power_clock_isr+0x108>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12fa:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fc:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12fe:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1302:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1304:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1308:	f7ff ff1c 	bl	1144 <_m16src_start>
		if (!err) {
    130c:	b918      	cbnz	r0, 1316 <_power_clock_isr+0xee>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    130e:	4b0f      	ldr	r3, [pc, #60]	; (134c <_power_clock_isr+0x124>)
    1310:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			__ASSERT_NO_MSG(err == -EINPROGRESS);
    1316:	3044      	adds	r0, #68	; 0x44
    1318:	d00a      	beq.n	1330 <_power_clock_isr+0x108>
    131a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    131e:	4a06      	ldr	r2, [pc, #24]	; (1338 <_power_clock_isr+0x110>)
    1320:	490b      	ldr	r1, [pc, #44]	; (1350 <_power_clock_isr+0x128>)
    1322:	4806      	ldr	r0, [pc, #24]	; (133c <_power_clock_isr+0x114>)
    1324:	f7ff fe32 	bl	f8c <printk>
    1328:	4805      	ldr	r0, [pc, #20]	; (1340 <_power_clock_isr+0x118>)
    132a:	f7ff fe2f 	bl	f8c <printk>
    132e:	e7fe      	b.n	132e <_power_clock_isr+0x106>
    1330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1332:	bf00      	nop
    1334:	00019905 	.word	0x00019905
    1338:	0001571c 	.word	0x0001571c
    133c:	00015620 	.word	0x00015620
    1340:	0001563e 	.word	0x0001563e
    1344:	0001576f 	.word	0x0001576f
    1348:	0001579e 	.word	0x0001579e
    134c:	e000e100 	.word	0xe000e100
    1350:	000157a3 	.word	0x000157a3

00001354 <_k32src_start>:
{
    1354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1356:	4606      	mov	r6, r0
    1358:	460c      	mov	r4, r1
	__asm__ volatile(
    135a:	f04f 0220 	mov.w	r2, #32
    135e:	f3ef 8311 	mrs	r3, BASEPRI
    1362:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    1366:	4a32      	ldr	r2, [pc, #200]	; (1430 <_k32src_start+0xdc>)
    1368:	7815      	ldrb	r5, [r2, #0]
    136a:	b165      	cbz	r5, 1386 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    136c:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    1370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1374:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    1378:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    137c:	bf0c      	ite	eq
    137e:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    1382:	2000      	movne	r0, #0
    1384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1386:	2701      	movs	r7, #1
    1388:	7017      	strb	r7, [r2, #0]
    138a:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    138e:	4628      	mov	r0, r5
    1390:	f000 fb0e 	bl	19b0 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1398:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    139a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    139e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    13a2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    13a6:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    13aa:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    13ac:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    13b0:	b369      	cbz	r1, 140e <_k32src_start+0xba>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    13b2:	0792      	lsls	r2, r2, #30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13b4:	4f1f      	ldr	r7, [pc, #124]	; (1434 <_k32src_start+0xe0>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    13b6:	bf58      	it	pl
    13b8:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    13ba:	f04f 0100 	mov.w	r1, #0
    13be:	f04f 0501 	mov.w	r5, #1
    13c2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    13c6:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    13ca:	bf58      	it	pl
    13cc:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    13d0:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    13d4:	f000 fadc 	bl	1990 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    13d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    13dc:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    13de:	2218      	movs	r2, #24
    13e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    13e4:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    13e8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    13ec:	f014 0103 	ands.w	r1, r4, #3
    13f0:	d1be      	bne.n	1370 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    13f2:	2010      	movs	r0, #16
    13f4:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    13f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    13fc:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    13fe:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1402:	f7ff fe9f 	bl	1144 <_m16src_start>
		if (!err) {
    1406:	b930      	cbnz	r0, 1416 <_k32src_start+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1408:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    140c:	e7b0      	b.n	1370 <_k32src_start+0x1c>
		__WFE();
    140e:	bf20      	wfe
		__SEV();
    1410:	bf40      	sev
		__WFE();
    1412:	bf20      	wfe
    1414:	e7ca      	b.n	13ac <_k32src_start+0x58>
			__ASSERT_NO_MSG(err == -EINPROGRESS);
    1416:	f110 0f44 	cmn.w	r0, #68	; 0x44
    141a:	d0a9      	beq.n	1370 <_k32src_start+0x1c>
    141c:	23e6      	movs	r3, #230	; 0xe6
    141e:	4a06      	ldr	r2, [pc, #24]	; (1438 <_k32src_start+0xe4>)
    1420:	4906      	ldr	r1, [pc, #24]	; (143c <_k32src_start+0xe8>)
    1422:	4807      	ldr	r0, [pc, #28]	; (1440 <_k32src_start+0xec>)
    1424:	f7ff fdb2 	bl	f8c <printk>
    1428:	4806      	ldr	r0, [pc, #24]	; (1444 <_k32src_start+0xf0>)
    142a:	f7ff fdaf 	bl	f8c <printk>
    142e:	e7fe      	b.n	142e <_k32src_start+0xda>
    1430:	2000000c 	.word	0x2000000c
    1434:	e000e100 	.word	0xe000e100
    1438:	0001571c 	.word	0x0001571c
    143c:	000157a3 	.word	0x000157a3
    1440:	00015620 	.word	0x00015620
    1444:	0001563e 	.word	0x0001563e

00001448 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <rtc_compare_set+0x24>)
    144a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    144e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1452:	1ac0      	subs	r0, r0, r3
    1454:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1458:	4b05      	ldr	r3, [pc, #20]	; (1470 <rtc_compare_set+0x28>)
    145a:	3802      	subs	r0, #2
    145c:	4298      	cmp	r0, r3
    145e:	bf82      	ittt	hi
    1460:	4b04      	ldrhi	r3, [pc, #16]	; (1474 <rtc_compare_set+0x2c>)
    1462:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1466:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    146a:	4770      	bx	lr
    146c:	40011000 	.word	0x40011000
    1470:	007ffffd 	.word	0x007ffffd
    1474:	e000e100 	.word	0xe000e100

00001478 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1478:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    147a:	4b11      	ldr	r3, [pc, #68]	; (14c0 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    147c:	4c11      	ldr	r4, [pc, #68]	; (14c4 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    147e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1482:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1484:	4d10      	ldr	r5, [pc, #64]	; (14c8 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1486:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1488:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    148a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    148e:	4298      	cmp	r0, r3
    1490:	d30f      	bcc.n	14b2 <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    1492:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1496:	490d      	ldr	r1, [pc, #52]	; (14cc <rtc_announce_set_next+0x54>)
    1498:	6809      	ldr	r1, [r1, #0]
    149a:	4288      	cmp	r0, r1
    149c:	bf28      	it	cs
    149e:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    14a0:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    14a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    14a8:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    14aa:	4b09      	ldr	r3, [pc, #36]	; (14d0 <rtc_announce_set_next+0x58>)
    14ac:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    14ae:	f013 f977 	bl	147a0 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    14b2:	6820      	ldr	r0, [r4, #0]
    14b4:	682b      	ldr	r3, [r5, #0]
    14b6:	4418      	add	r0, r3
}
    14b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    14bc:	f7ff bfc4 	b.w	1448 <rtc_compare_set>
    14c0:	40011000 	.word	0x40011000
    14c4:	20000014 	.word	0x20000014
    14c8:	20003e70 	.word	0x20003e70
    14cc:	20000010 	.word	0x20000010
    14d0:	20003e6c 	.word	0x20003e6c

000014d4 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    14d4:	4b02      	ldr	r3, [pc, #8]	; (14e0 <rtc1_nrf5_isr+0xc>)
    14d6:	2200      	movs	r2, #0
    14d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    14dc:	f7ff bfcc 	b.w	1478 <rtc_announce_set_next>
    14e0:	40011000 	.word	0x40011000

000014e4 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    14e4:	1e03      	subs	r3, r0, #0
    14e6:	4a0a      	ldr	r2, [pc, #40]	; (1510 <_timer_idle_enter+0x2c>)
    14e8:	480a      	ldr	r0, [pc, #40]	; (1514 <_timer_idle_enter+0x30>)
    14ea:	db04      	blt.n	14f6 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    14ec:	6811      	ldr	r1, [r2, #0]
    14ee:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    14f2:	428b      	cmp	r3, r1
    14f4:	dd02      	ble.n	14fc <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    14f6:	6813      	ldr	r3, [r2, #0]
    14f8:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    14fc:	6810      	ldr	r0, [r2, #0]
    14fe:	4a06      	ldr	r2, [pc, #24]	; (1518 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    1500:	4906      	ldr	r1, [pc, #24]	; (151c <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    1502:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    1504:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    1506:	fb00 2003 	mla	r0, r0, r3, r2
    150a:	f7ff bf9d 	b.w	1448 <rtc_compare_set>
    150e:	bf00      	nop
    1510:	20003e70 	.word	0x20003e70
    1514:	007fffff 	.word	0x007fffff
    1518:	20000014 	.word	0x20000014
    151c:	20000010 	.word	0x20000010

00001520 <_timer_idle_exit>:
{
    1520:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1522:	4b07      	ldr	r3, [pc, #28]	; (1540 <_timer_idle_exit+0x20>)
    1524:	2200      	movs	r2, #0
    1526:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    152a:	4b06      	ldr	r3, [pc, #24]	; (1544 <_timer_idle_exit+0x24>)
    152c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1530:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1534:	f7ff ffa0 	bl	1478 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1538:	4b03      	ldr	r3, [pc, #12]	; (1548 <_timer_idle_exit+0x28>)
    153a:	2201      	movs	r2, #1
    153c:	601a      	str	r2, [r3, #0]
    153e:	bd08      	pop	{r3, pc}
    1540:	40011000 	.word	0x40011000
    1544:	e000e100 	.word	0xe000e100
    1548:	20000010 	.word	0x20000010

0000154c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    154c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    154e:	4818      	ldr	r0, [pc, #96]	; (15b0 <_sys_clock_driver_init+0x64>)
    1550:	f012 faae 	bl	13ab0 <device_get_binding>
	if (!clock) {
    1554:	b348      	cbz	r0, 15aa <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1556:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1558:	4d16      	ldr	r5, [pc, #88]	; (15b4 <_sys_clock_driver_init+0x68>)
    155a:	681b      	ldr	r3, [r3, #0]
    155c:	2101      	movs	r1, #1
    155e:	4798      	blx	r3
	rtc_past = 0;
    1560:	4b15      	ldr	r3, [pc, #84]	; (15b8 <_sys_clock_driver_init+0x6c>)
    1562:	2400      	movs	r4, #0
    1564:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1566:	4b15      	ldr	r3, [pc, #84]	; (15bc <_sys_clock_driver_init+0x70>)
    1568:	2601      	movs	r6, #1
    156a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    156c:	4b14      	ldr	r3, [pc, #80]	; (15c0 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    156e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    157c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1580:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1584:	4b0f      	ldr	r3, [pc, #60]	; (15c4 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1586:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    158a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    158e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1592:	4631      	mov	r1, r6
    1594:	4622      	mov	r2, r4
    1596:	2011      	movs	r0, #17
    1598:	f000 fa2c 	bl	19f4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    159c:	2011      	movs	r0, #17
    159e:	f000 f9f7 	bl	1990 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    15a2:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    15a4:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    15a6:	602e      	str	r6, [r5, #0]
	return 0;
    15a8:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    15aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    15ae:	bd70      	pop	{r4, r5, r6, pc}
    15b0:	000157ae 	.word	0x000157ae
    15b4:	40011000 	.word	0x40011000
    15b8:	20000014 	.word	0x20000014
    15bc:	20000010 	.word	0x20000010
    15c0:	20003e70 	.word	0x20003e70
    15c4:	e000e100 	.word	0xe000e100

000015c8 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    15c8:	4a0a      	ldr	r2, [pc, #40]	; (15f4 <_timer_cycle_get_32+0x2c>)
{
    15ca:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    15cc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    15d0:	4d09      	ldr	r5, [pc, #36]	; (15f8 <_timer_cycle_get_32+0x30>)
    15d2:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    15d6:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    15da:	42a3      	cmp	r3, r4
    15dc:	d107      	bne.n	15ee <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    15de:	4a07      	ldr	r2, [pc, #28]	; (15fc <_timer_cycle_get_32+0x34>)
    15e0:	6812      	ldr	r2, [r2, #0]
    15e2:	4350      	muls	r0, r2
    15e4:	1a1b      	subs	r3, r3, r0
    15e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    15ea:	4418      	add	r0, r3
    15ec:	bd30      	pop	{r4, r5, pc}
    15ee:	4623      	mov	r3, r4
    15f0:	e7ef      	b.n	15d2 <_timer_cycle_get_32+0xa>
    15f2:	bf00      	nop
    15f4:	40011000 	.word	0x40011000
    15f8:	20001980 	.word	0x20001980
    15fc:	20003e70 	.word	0x20003e70

00001600 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1600:	4807      	ldr	r0, [pc, #28]	; (1620 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1602:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    1604:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    1606:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1608:	d008      	beq.n	161c <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    160a:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    160c:	f012 ff9e 	bl	1454c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    1610:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1614:	4903      	ldr	r1, [pc, #12]	; (1624 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    1616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    161a:	600a      	str	r2, [r1, #0]

0000161c <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    161c:	4770      	bx	lr
    161e:	0000      	.short	0x0000
    ldr r0, =_kernel
    1620:	20001948 	.word	0x20001948
    ldr r1, =_SCS_ICSR
    1624:	e000ed04 	.word	0xe000ed04

00001628 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1628:	4804      	ldr	r0, [pc, #16]	; (163c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    162a:	2300      	movs	r3, #0
    162c:	2120      	movs	r1, #32
    162e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1630:	3301      	adds	r3, #1
    1632:	2b27      	cmp	r3, #39	; 0x27
    1634:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1638:	d1f9      	bne.n	162e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    163a:	4770      	bx	lr
    163c:	e000e100 	.word	0xe000e100

00001640 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1640:	4a08      	ldr	r2, [pc, #32]	; (1664 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1642:	4909      	ldr	r1, [pc, #36]	; (1668 <__swap+0x28>)
	_current->arch.basepri = key;
    1644:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1646:	6809      	ldr	r1, [r1, #0]
    1648:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    164a:	4908      	ldr	r1, [pc, #32]	; (166c <__swap+0x2c>)
	_current->arch.basepri = key;
    164c:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    164e:	684b      	ldr	r3, [r1, #4]
    1650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1654:	604b      	str	r3, [r1, #4]
    1656:	2300      	movs	r3, #0
    1658:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    165c:	6893      	ldr	r3, [r2, #8]
}
    165e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1660:	4770      	bx	lr
    1662:	bf00      	nop
    1664:	20001948 	.word	0x20001948
    1668:	000196f0 	.word	0x000196f0
    166c:	e000ed00 	.word	0xe000ed00

00001670 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1670:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1672:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1676:	490d      	ldr	r1, [pc, #52]	; (16ac <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1678:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    167a:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    167c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    167e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1682:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1686:	4f0a      	ldr	r7, [pc, #40]	; (16b0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1688:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    168c:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    168e:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1690:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    1692:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1694:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1696:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1698:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    169c:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    16a0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    16a4:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    16a8:	4770      	bx	lr
    16aa:	0000      	.short	0x0000
    ldr r1, =_kernel
    16ac:	20001948 	.word	0x20001948
    ldr v4, =_SCS_ICSR
    16b0:	e000ed04 	.word	0xe000ed04

000016b4 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    16b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    16b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    16ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    16be:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    16c2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    16c4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    16c8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    16cc:	2902      	cmp	r1, #2
    beq _oops
    16ce:	d0ff      	beq.n	16d0 <_oops>

000016d0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    16d0:	b500      	push	{lr}
    blx _do_kernel_oops
    16d2:	f000 fa67 	bl	1ba4 <_do_kernel_oops>
    pop {pc}
    16d6:	bd00      	pop	{pc}

000016d8 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    16d8:	b510      	push	{r4, lr}
    16da:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    16dc:	f012 ffa4 	bl	14628 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    16e0:	6822      	ldr	r2, [r4, #0]
    16e2:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    16e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    16e8:	4801      	ldr	r0, [pc, #4]	; (16f0 <_FaultThreadShow.isra.2+0x18>)
    16ea:	f7ff bc4f 	b.w	f8c <printk>
    16ee:	bf00      	nop
    16f0:	00015907 	.word	0x00015907

000016f4 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    16f4:	b538      	push	{r3, r4, r5, lr}
    16f6:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    16f8:	481a      	ldr	r0, [pc, #104]	; (1764 <_MpuFault+0x70>)
{
    16fa:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    16fc:	f7ff fc46 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1700:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1704:	4c18      	ldr	r4, [pc, #96]	; (1768 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    1706:	f7ff ffe7 	bl	16d8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    170a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170c:	06d9      	lsls	r1, r3, #27
    170e:	d502      	bpl.n	1716 <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    1710:	4816      	ldr	r0, [pc, #88]	; (176c <_MpuFault+0x78>)
    1712:	f7ff fc3b 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    1716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1718:	071a      	lsls	r2, r3, #28
    171a:	d502      	bpl.n	1722 <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    171c:	4814      	ldr	r0, [pc, #80]	; (1770 <_MpuFault+0x7c>)
    171e:	f7ff fc35 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    1722:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1724:	079b      	lsls	r3, r3, #30
    1726:	d50e      	bpl.n	1746 <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    1728:	4812      	ldr	r0, [pc, #72]	; (1774 <_MpuFault+0x80>)
    172a:	f7ff fc2f 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    172e:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1730:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1732:	0618      	lsls	r0, r3, #24
    1734:	d507      	bpl.n	1746 <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    1736:	4810      	ldr	r0, [pc, #64]	; (1778 <_MpuFault+0x84>)
    1738:	f7ff fc28 	bl	f8c <printk>
			if (fromHardFault) {
    173c:	b11d      	cbz	r5, 1746 <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    173e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1744:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1746:	4c08      	ldr	r4, [pc, #32]	; (1768 <_MpuFault+0x74>)
    1748:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    174a:	07d2      	lsls	r2, r2, #31
    174c:	d502      	bpl.n	1754 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    174e:	480b      	ldr	r0, [pc, #44]	; (177c <_MpuFault+0x88>)
    1750:	f7ff fc1c 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1756:	069b      	lsls	r3, r3, #26
    1758:	d502      	bpl.n	1760 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    175a:	4809      	ldr	r0, [pc, #36]	; (1780 <_MpuFault+0x8c>)
    175c:	f7ff fc16 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1760:	2000      	movs	r0, #0
    1762:	bd38      	pop	{r3, r4, r5, pc}
    1764:	00015951 	.word	0x00015951
    1768:	e000ed00 	.word	0xe000ed00
    176c:	00015968 	.word	0x00015968
    1770:	0001597a 	.word	0x0001597a
    1774:	0001598e 	.word	0x0001598e
    1778:	000159a7 	.word	0x000159a7
    177c:	000159b8 	.word	0x000159b8
    1780:	000159d8 	.word	0x000159d8

00001784 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1784:	b510      	push	{r4, lr}
    1786:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1788:	481a      	ldr	r0, [pc, #104]	; (17f4 <_UsageFault+0x70>)
    178a:	f7ff fbff 	bl	f8c <printk>

	_FaultThreadShow(esf);
    178e:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1792:	4c19      	ldr	r4, [pc, #100]	; (17f8 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1794:	f7ff ffa0 	bl	16d8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    179a:	019a      	lsls	r2, r3, #6
    179c:	d502      	bpl.n	17a4 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    179e:	4817      	ldr	r0, [pc, #92]	; (17fc <_UsageFault+0x78>)
    17a0:	f7ff fbf4 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    17a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17a6:	01db      	lsls	r3, r3, #7
    17a8:	d502      	bpl.n	17b0 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    17aa:	4815      	ldr	r0, [pc, #84]	; (1800 <_UsageFault+0x7c>)
    17ac:	f7ff fbee 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    17b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17b2:	0318      	lsls	r0, r3, #12
    17b4:	d502      	bpl.n	17bc <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    17b6:	4813      	ldr	r0, [pc, #76]	; (1804 <_UsageFault+0x80>)
    17b8:	f7ff fbe8 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    17bc:	4c0e      	ldr	r4, [pc, #56]	; (17f8 <_UsageFault+0x74>)
    17be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17c0:	0359      	lsls	r1, r3, #13
    17c2:	d502      	bpl.n	17ca <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    17c4:	4810      	ldr	r0, [pc, #64]	; (1808 <_UsageFault+0x84>)
    17c6:	f7ff fbe1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    17ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17cc:	039a      	lsls	r2, r3, #14
    17ce:	d502      	bpl.n	17d6 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    17d0:	480e      	ldr	r0, [pc, #56]	; (180c <_UsageFault+0x88>)
    17d2:	f7ff fbdb 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    17d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17d8:	03db      	lsls	r3, r3, #15
    17da:	d502      	bpl.n	17e2 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    17dc:	480c      	ldr	r0, [pc, #48]	; (1810 <_UsageFault+0x8c>)
    17de:	f7ff fbd5 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    17e2:	4a05      	ldr	r2, [pc, #20]	; (17f8 <_UsageFault+0x74>)
    17e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17e6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    17ea:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    17ee:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    17f0:	2000      	movs	r0, #0
    17f2:	bd10      	pop	{r4, pc}
    17f4:	00015a08 	.word	0x00015a08
    17f8:	e000ed00 	.word	0xe000ed00
    17fc:	00015a21 	.word	0x00015a21
    1800:	00015a35 	.word	0x00015a35
    1804:	00015a50 	.word	0x00015a50
    1808:	00015a6f 	.word	0x00015a6f
    180c:	00015a95 	.word	0x00015a95
    1810:	00015ab0 	.word	0x00015ab0

00001814 <_BusFault>:
{
    1814:	b538      	push	{r3, r4, r5, lr}
    1816:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    1818:	481d      	ldr	r0, [pc, #116]	; (1890 <_BusFault+0x7c>)
{
    181a:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    181c:	f7ff fbb6 	bl	f8c <printk>
	_FaultThreadShow(esf);
    1820:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1824:	4c1b      	ldr	r4, [pc, #108]	; (1894 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    1826:	f7ff ff57 	bl	16d8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    182a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    182c:	04d8      	lsls	r0, r3, #19
    182e:	d504      	bpl.n	183a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1830:	4819      	ldr	r0, [pc, #100]	; (1898 <_BusFault+0x84>)
}
    1832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    1836:	f7ff bba9 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    183a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    183c:	0519      	lsls	r1, r3, #20
    183e:	d501      	bpl.n	1844 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1840:	4816      	ldr	r0, [pc, #88]	; (189c <_BusFault+0x88>)
    1842:	e7f6      	b.n	1832 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1846:	059a      	lsls	r2, r3, #22
    1848:	d514      	bpl.n	1874 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    184a:	4815      	ldr	r0, [pc, #84]	; (18a0 <_BusFault+0x8c>)
    184c:	f7ff fb9e 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1850:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1852:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1854:	041b      	lsls	r3, r3, #16
    1856:	d507      	bpl.n	1868 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1858:	4812      	ldr	r0, [pc, #72]	; (18a4 <_BusFault+0x90>)
    185a:	f7ff fb97 	bl	f8c <printk>
			if (fromHardFault) {
    185e:	b11d      	cbz	r5, 1868 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1860:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1862:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1866:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1868:	4b0a      	ldr	r3, [pc, #40]	; (1894 <_BusFault+0x80>)
    186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    186c:	0558      	lsls	r0, r3, #21
    186e:	d50e      	bpl.n	188e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1870:	480d      	ldr	r0, [pc, #52]	; (18a8 <_BusFault+0x94>)
    1872:	e7de      	b.n	1832 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1874:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1876:	0559      	lsls	r1, r3, #21
    1878:	d4fa      	bmi.n	1870 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    187a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    187c:	05da      	lsls	r2, r3, #23
    187e:	d501      	bpl.n	1884 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1880:	480a      	ldr	r0, [pc, #40]	; (18ac <_BusFault+0x98>)
    1882:	e7d6      	b.n	1832 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1884:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1886:	049b      	lsls	r3, r3, #18
    1888:	d501      	bpl.n	188e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    188a:	4809      	ldr	r0, [pc, #36]	; (18b0 <_BusFault+0x9c>)
    188c:	e7d1      	b.n	1832 <_BusFault+0x1e>
    188e:	bd38      	pop	{r3, r4, r5, pc}
    1890:	000157ce 	.word	0x000157ce
    1894:	e000ed00 	.word	0xe000ed00
    1898:	00015968 	.word	0x00015968
    189c:	0001597a 	.word	0x0001597a
    18a0:	000157e5 	.word	0x000157e5
    18a4:	000159a7 	.word	0x000159a7
    18a8:	000157ff 	.word	0x000157ff
    18ac:	0001581b 	.word	0x0001581b
    18b0:	000159d8 	.word	0x000159d8

000018b4 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    18b4:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18b6:	4c27      	ldr	r4, [pc, #156]	; (1954 <_Fault+0xa0>)
    18b8:	6863      	ldr	r3, [r4, #4]
    18ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    18be:	1eda      	subs	r2, r3, #3
{
    18c0:	4605      	mov	r5, r0
	switch (fault) {
    18c2:	2a09      	cmp	r2, #9
    18c4:	d83b      	bhi.n	193e <_Fault+0x8a>
    18c6:	e8df f002 	tbb	[pc, r2]
    18ca:	3405      	.short	0x3405
    18cc:	3a3a3036 	.word	0x3a3a3036
    18d0:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    18d4:	4820      	ldr	r0, [pc, #128]	; (1958 <_Fault+0xa4>)
    18d6:	f7ff fb59 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    18da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    18dc:	079a      	lsls	r2, r3, #30
    18de:	d503      	bpl.n	18e8 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    18e0:	481e      	ldr	r0, [pc, #120]	; (195c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    18e2:	f7ff fb53 	bl	f8c <printk>
    18e6:	e002      	b.n	18ee <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    18e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    18ea:	005b      	lsls	r3, r3, #1
    18ec:	d401      	bmi.n	18f2 <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    18ee:	2000      	movs	r0, #0
    18f0:	e009      	b.n	1906 <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    18f2:	481b      	ldr	r0, [pc, #108]	; (1960 <_Fault+0xac>)
    18f4:	f7ff fb4a 	bl	f8c <printk>
		if (SCB_MMFSR) {
    18f8:	4b1a      	ldr	r3, [pc, #104]	; (1964 <_Fault+0xb0>)
    18fa:	781b      	ldrb	r3, [r3, #0]
    18fc:	b143      	cbz	r3, 1910 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    18fe:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    1900:	4628      	mov	r0, r5
    1902:	f7ff fef7 	bl	16f4 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    1906:	4629      	mov	r1, r5
}
    1908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    190c:	f000 b94e 	b.w	1bac <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    1910:	4b15      	ldr	r3, [pc, #84]	; (1968 <_Fault+0xb4>)
    1912:	781b      	ldrb	r3, [r3, #0]
    1914:	b123      	cbz	r3, 1920 <_Fault+0x6c>
			_BusFault(esf, 1);
    1916:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    1918:	4628      	mov	r0, r5
    191a:	f7ff ff7b 	bl	1814 <_BusFault>
    191e:	e7e6      	b.n	18ee <_Fault+0x3a>
		} else if (SCB_UFSR) {
    1920:	4b12      	ldr	r3, [pc, #72]	; (196c <_Fault+0xb8>)
    1922:	881b      	ldrh	r3, [r3, #0]
    1924:	b29b      	uxth	r3, r3
    1926:	2b00      	cmp	r3, #0
    1928:	d0e1      	beq.n	18ee <_Fault+0x3a>
		reason = _UsageFault(esf);
    192a:	4628      	mov	r0, r5
    192c:	f7ff ff2a 	bl	1784 <_UsageFault>
    1930:	e7e9      	b.n	1906 <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    1932:	2100      	movs	r1, #0
    1934:	e7e4      	b.n	1900 <_Fault+0x4c>
		_BusFault(esf, 0);
    1936:	2100      	movs	r1, #0
    1938:	e7ee      	b.n	1918 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    193a:	480d      	ldr	r0, [pc, #52]	; (1970 <_Fault+0xbc>)
    193c:	e7d1      	b.n	18e2 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    193e:	480d      	ldr	r0, [pc, #52]	; (1974 <_Fault+0xc0>)
    1940:	490d      	ldr	r1, [pc, #52]	; (1978 <_Fault+0xc4>)
    1942:	f1a3 0210 	sub.w	r2, r3, #16
    1946:	2b0f      	cmp	r3, #15
    1948:	bfd8      	it	le
    194a:	4601      	movle	r1, r0
    194c:	480b      	ldr	r0, [pc, #44]	; (197c <_Fault+0xc8>)
    194e:	f7ff fb1d 	bl	f8c <printk>
    1952:	e7cc      	b.n	18ee <_Fault+0x3a>
    1954:	e000ed00 	.word	0xe000ed00
    1958:	00015862 	.word	0x00015862
    195c:	0001587a 	.word	0x0001587a
    1960:	0001589c 	.word	0x0001589c
    1964:	e000ed28 	.word	0xe000ed28
    1968:	e000ed29 	.word	0xe000ed29
    196c:	e000ed2a 	.word	0xe000ed2a
    1970:	000158bc 	.word	0x000158bc
    1974:	00015834 	.word	0x00015834
    1978:	00015849 	.word	0x00015849
    197c:	000158f3 	.word	0x000158f3

00001980 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1980:	4a02      	ldr	r2, [pc, #8]	; (198c <_FaultInit+0xc>)
    1982:	6953      	ldr	r3, [r2, #20]
    1984:	f043 0310 	orr.w	r3, r3, #16
    1988:	6153      	str	r3, [r2, #20]
    198a:	4770      	bx	lr
    198c:	e000ed00 	.word	0xe000ed00

00001990 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1990:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1992:	2b00      	cmp	r3, #0
    1994:	db08      	blt.n	19a8 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1996:	2201      	movs	r2, #1
    1998:	f000 001f 	and.w	r0, r0, #31
    199c:	fa02 f000 	lsl.w	r0, r2, r0
    19a0:	095b      	lsrs	r3, r3, #5
    19a2:	4a02      	ldr	r2, [pc, #8]	; (19ac <_arch_irq_enable+0x1c>)
    19a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    19a8:	4770      	bx	lr
    19aa:	bf00      	nop
    19ac:	e000e100 	.word	0xe000e100

000019b0 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    19b0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    19b2:	2b00      	cmp	r3, #0
    19b4:	db0d      	blt.n	19d2 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19b6:	2201      	movs	r2, #1
    19b8:	095b      	lsrs	r3, r3, #5
    19ba:	f000 001f 	and.w	r0, r0, #31
    19be:	fa02 f000 	lsl.w	r0, r2, r0
    19c2:	3320      	adds	r3, #32
    19c4:	4a03      	ldr	r2, [pc, #12]	; (19d4 <_arch_irq_disable+0x24>)
    19c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    19ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ce:	f3bf 8f6f 	isb	sy
    19d2:	4770      	bx	lr
    19d4:	e000e100 	.word	0xe000e100

000019d8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    19d8:	0942      	lsrs	r2, r0, #5
    19da:	4b05      	ldr	r3, [pc, #20]	; (19f0 <_arch_irq_is_enabled+0x18>)
    19dc:	f000 001f 	and.w	r0, r0, #31
    19e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    19e4:	2301      	movs	r3, #1
    19e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    19ea:	4010      	ands	r0, r2
    19ec:	4770      	bx	lr
    19ee:	bf00      	nop
    19f0:	e000e100 	.word	0xe000e100

000019f4 <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    19f4:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
    19f6:	2b07      	cmp	r3, #7
{
    19f8:	b510      	push	{r4, lr}
    19fa:	460c      	mov	r4, r1
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
    19fc:	d90b      	bls.n	1a16 <_irq_priority_set+0x22>
    19fe:	4a0f      	ldr	r2, [pc, #60]	; (1a3c <_irq_priority_set+0x48>)
    1a00:	490f      	ldr	r1, [pc, #60]	; (1a40 <_irq_priority_set+0x4c>)
    1a02:	4810      	ldr	r0, [pc, #64]	; (1a44 <_irq_priority_set+0x50>)
    1a04:	2372      	movs	r3, #114	; 0x72
    1a06:	f7ff fac1 	bl	f8c <printk>
    1a0a:	2207      	movs	r2, #7
    1a0c:	4621      	mov	r1, r4
    1a0e:	480e      	ldr	r0, [pc, #56]	; (1a48 <_irq_priority_set+0x54>)
    1a10:	f7ff fabc 	bl	f8c <printk>
    1a14:	e7fe      	b.n	1a14 <_irq_priority_set+0x20>
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1a16:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    1a18:	2a00      	cmp	r2, #0
    1a1a:	ea4f 1343 	mov.w	r3, r3, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a1e:	bfad      	iteet	ge
    1a20:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a24:	f000 000f 	andlt.w	r0, r0, #15
    1a28:	4a08      	ldrlt	r2, [pc, #32]	; (1a4c <_irq_priority_set+0x58>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a2a:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a2e:	bfb5      	itete	lt
    1a30:	b2db      	uxtblt	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a32:	b2db      	uxtbge	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a34:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a36:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
    1a3a:	bd10      	pop	{r4, pc}
    1a3c:	00015adc 	.word	0x00015adc
    1a40:	00015b16 	.word	0x00015b16
    1a44:	00015620 	.word	0x00015620
    1a48:	00015b2d 	.word	0x00015b2d
    1a4c:	e000ed14 	.word	0xe000ed14

00001a50 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1a50:	f000 b868 	b.w	1b24 <__bus_fault>

00001a54 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1a54:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    1a56:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <_arch_isr_direct_pm+0x18>)
    1a5a:	69d8      	ldr	r0, [r3, #28]
    1a5c:	b118      	cbz	r0, 1a66 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1a5e:	2200      	movs	r2, #0
    1a60:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    1a62:	f012 f84b 	bl	13afc <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1a66:	b662      	cpsie	i
    1a68:	bd08      	pop	{r3, pc}
    1a6a:	bf00      	nop
    1a6c:	20001948 	.word	0x20001948

00001a70 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a74:	9f09      	ldr	r7, [sp, #36]	; 0x24
	char *pStackMem = K_THREAD_STACK_BUFFER(stack);

	_ASSERT_VALID_PRIO(priority, pEntry);
    1a76:	2f0f      	cmp	r7, #15
{
    1a78:	4605      	mov	r5, r0
    1a7a:	460c      	mov	r4, r1
    1a7c:	4616      	mov	r6, r2
    1a7e:	4698      	mov	r8, r3
	_ASSERT_VALID_PRIO(priority, pEntry);
    1a80:	d125      	bne.n	1ace <_new_thread+0x5e>
    1a82:	4b1c      	ldr	r3, [pc, #112]	; (1af4 <_new_thread+0x84>)
    1a84:	4598      	cmp	r8, r3
    1a86:	d126      	bne.n	1ad6 <_new_thread+0x66>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a8a:	2204      	movs	r2, #4
    1a8c:	4639      	mov	r1, r7
    1a8e:	4628      	mov	r0, r5
    1a90:	f013 f8ec 	bl	14c6c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1a94:	f1a6 0120 	sub.w	r1, r6, #32
    1a98:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1a9a:	4a17      	ldr	r2, [pc, #92]	; (1af8 <_new_thread+0x88>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1a9c:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1a9e:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1aa2:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1aa4:	f022 0201 	bic.w	r2, r2, #1
    1aa8:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1aaa:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1aac:	662e      	str	r6, [r5, #96]	; 0x60
    1aae:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1ab0:	9a06      	ldr	r2, [sp, #24]
    1ab2:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1ab4:	9a07      	ldr	r2, [sp, #28]
    1ab6:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1ab8:	9a08      	ldr	r2, [sp, #32]
    1aba:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1abc:	f8c1 8000 	str.w	r8, [r1]
	pInitCtx->xpsr =
    1ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1ac4:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1ac6:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1ac8:	66ab      	str	r3, [r5, #104]	; 0x68
    1aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_ASSERT_VALID_PRIO(priority, pEntry);
    1ace:	f107 0310 	add.w	r3, r7, #16
    1ad2:	2b1e      	cmp	r3, #30
    1ad4:	d9d8      	bls.n	1a88 <_new_thread+0x18>

    1ad6:	233f      	movs	r3, #63	; 0x3f
    1ad8:	4a08      	ldr	r2, [pc, #32]	; (1afc <_new_thread+0x8c>)
    1ada:	4909      	ldr	r1, [pc, #36]	; (1b00 <_new_thread+0x90>)
    1adc:	4809      	ldr	r0, [pc, #36]	; (1b04 <_new_thread+0x94>)
    1ade:	f7ff fa55 	bl	f8c <printk>
	char *stackEnd = pStackMem + stackSize - MPU_GUARD_ALIGN_AND_SIZE;
    1ae2:	f06f 030f 	mvn.w	r3, #15
    1ae6:	220e      	movs	r2, #14
    1ae8:	4639      	mov	r1, r7
    1aea:	4807      	ldr	r0, [pc, #28]	; (1b08 <_new_thread+0x98>)
    1aec:	f7ff fa4e 	bl	f8c <printk>
    1af0:	e7fe      	b.n	1af0 <_new_thread+0x80>
    1af2:	bf00      	nop
    1af4:	00013b15 	.word	0x00013b15
    1af8:	00000899 	.word	0x00000899
    1afc:	00015b5f 	.word	0x00015b5f
    1b00:	00015b95 	.word	0x00015b95
    1b04:	00015620 	.word	0x00015620
    1b08:	00015c31 	.word	0x00015c31

00001b0c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1b0c:	4901      	ldr	r1, [pc, #4]	; (1b14 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1b0e:	2210      	movs	r2, #16
	str r2, [r1]
    1b10:	600a      	str	r2, [r1, #0]
	bx lr
    1b12:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1b14:	e000ed10 	.word	0xe000ed10

00001b18 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1b18:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1b1a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1b1e:	bf30      	wfi

	bx lr
    1b20:	4770      	bx	lr
    1b22:	bf00      	nop

00001b24 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1b24:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1b26:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1b2a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1b48 <__bus_fault+0x24>
	ldr ip, [ip]
    1b2e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1b32:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1b36:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1b38:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1b3c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1b40:	b500      	push	{lr}
	bl _Fault
    1b42:	f7ff feb7 	bl	18b4 <_Fault>

	pop {pc}
    1b46:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1b48:	e000ed04 	.word	0xe000ed04

00001b4c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    1b4c:	2804      	cmp	r0, #4
{
    1b4e:	b538      	push	{r3, r4, r5, lr}
    1b50:	4604      	mov	r4, r0
    1b52:	460d      	mov	r5, r1
	switch (reason) {
    1b54:	d013      	beq.n	1b7e <_NanoFatalErrorHandler+0x32>
    1b56:	2805      	cmp	r0, #5
    1b58:	d013      	beq.n	1b82 <_NanoFatalErrorHandler+0x36>
    1b5a:	2803      	cmp	r0, #3
    1b5c:	d113      	bne.n	1b86 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1b5e:	480c      	ldr	r0, [pc, #48]	; (1b90 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    1b60:	f7ff fa14 	bl	f8c <printk>
    1b64:	f012 fd60 	bl	14628 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1b68:	69aa      	ldr	r2, [r5, #24]
    1b6a:	4601      	mov	r1, r0
    1b6c:	4809      	ldr	r0, [pc, #36]	; (1b94 <_NanoFatalErrorHandler+0x48>)
    1b6e:	f7ff fa0d 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1b72:	4629      	mov	r1, r5
    1b74:	4620      	mov	r0, r4
}
    1b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1b7a:	f000 b817 	b.w	1bac <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    1b7e:	4806      	ldr	r0, [pc, #24]	; (1b98 <_NanoFatalErrorHandler+0x4c>)
    1b80:	e7ee      	b.n	1b60 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    1b82:	4806      	ldr	r0, [pc, #24]	; (1b9c <_NanoFatalErrorHandler+0x50>)
    1b84:	e7ec      	b.n	1b60 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1b86:	4601      	mov	r1, r0
    1b88:	4805      	ldr	r0, [pc, #20]	; (1ba0 <_NanoFatalErrorHandler+0x54>)
    1b8a:	f7ff f9ff 	bl	f8c <printk>
		break;
    1b8e:	e7e9      	b.n	1b64 <_NanoFatalErrorHandler+0x18>
    1b90:	00015c60 	.word	0x00015c60
    1b94:	00015cde 	.word	0x00015cde
    1b98:	00015c86 	.word	0x00015c86
    1b9c:	00015ca0 	.word	0x00015ca0
    1ba0:	00015cbb 	.word	0x00015cbb

00001ba4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1ba4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1ba6:	6800      	ldr	r0, [r0, #0]
    1ba8:	f7ff bfd0 	b.w	1b4c <_NanoFatalErrorHandler>

00001bac <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1bac:	2805      	cmp	r0, #5
{
    1bae:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1bb0:	d00c      	beq.n	1bcc <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1bb2:	f012 ff3f 	bl	14a34 <k_is_in_isr>
    1bb6:	b160      	cbz	r0, 1bd2 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1bb8:	f012 ff3c 	bl	14a34 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1bbc:	4b0c      	ldr	r3, [pc, #48]	; (1bf0 <_SysFatalErrorHandler+0x44>)
    1bbe:	490d      	ldr	r1, [pc, #52]	; (1bf4 <_SysFatalErrorHandler+0x48>)
    1bc0:	2800      	cmp	r0, #0
    1bc2:	bf08      	it	eq
    1bc4:	4619      	moveq	r1, r3
    1bc6:	480c      	ldr	r0, [pc, #48]	; (1bf8 <_SysFatalErrorHandler+0x4c>)
    1bc8:	f7ff f9e0 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1bcc:	f7ff ffa4 	bl	1b18 <k_cpu_idle>
    1bd0:	e7fc      	b.n	1bcc <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1bd2:	f012 ff3f 	bl	14a54 <_is_thread_essential>
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d1ee      	bne.n	1bb8 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1bda:	4c08      	ldr	r4, [pc, #32]	; (1bfc <_SysFatalErrorHandler+0x50>)
    1bdc:	4808      	ldr	r0, [pc, #32]	; (1c00 <_SysFatalErrorHandler+0x54>)
    1bde:	68a1      	ldr	r1, [r4, #8]
    1be0:	f7ff f9d4 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1be4:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1bea:	f000 b80b 	b.w	1c04 <_impl_k_thread_abort>
    1bee:	bf00      	nop
    1bf0:	00015d1e 	.word	0x00015d1e
    1bf4:	00015d1a 	.word	0x00015d1a
    1bf8:	00015d2f 	.word	0x00015d2f
    1bfc:	20001948 	.word	0x20001948
    1c00:	00015d4f 	.word	0x00015d4f

00001c04 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1c04:	b538      	push	{r3, r4, r5, lr}
    1c06:	4605      	mov	r5, r0
	__asm__ volatile(
    1c08:	f04f 0320 	mov.w	r3, #32
    1c0c:	f3ef 8411 	mrs	r4, BASEPRI
    1c10:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    1c14:	7a03      	ldrb	r3, [r0, #8]
    1c16:	07db      	lsls	r3, r3, #31
    1c18:	d509      	bpl.n	1c2e <_impl_k_thread_abort+0x2a>
    1c1a:	2325      	movs	r3, #37	; 0x25
    1c1c:	4a10      	ldr	r2, [pc, #64]	; (1c60 <_impl_k_thread_abort+0x5c>)
    1c1e:	4911      	ldr	r1, [pc, #68]	; (1c64 <_impl_k_thread_abort+0x60>)
    1c20:	4811      	ldr	r0, [pc, #68]	; (1c68 <_impl_k_thread_abort+0x64>)
    1c22:	f7ff f9b3 	bl	f8c <printk>
    1c26:	4811      	ldr	r0, [pc, #68]	; (1c6c <_impl_k_thread_abort+0x68>)
    1c28:	f7ff f9b0 	bl	f8c <printk>
    1c2c:	e7fe      	b.n	1c2c <_impl_k_thread_abort+0x28>
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1c2e:	f012 ff89 	bl	14b44 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1c32:	4b0f      	ldr	r3, [pc, #60]	; (1c70 <_impl_k_thread_abort+0x6c>)
    1c34:	689b      	ldr	r3, [r3, #8]
    1c36:	429d      	cmp	r5, r3
    1c38:	d10d      	bne.n	1c56 <_impl_k_thread_abort+0x52>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1c3a:	4b0e      	ldr	r3, [pc, #56]	; (1c74 <_impl_k_thread_abort+0x70>)
    1c3c:	685a      	ldr	r2, [r3, #4]
    1c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1c42:	b922      	cbnz	r2, 1c4e <_impl_k_thread_abort+0x4a>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1c44:	f012 fc82 	bl	1454c <_update_time_slice_before_swap>

	return __swap(key);
    1c48:	4620      	mov	r0, r4
    1c4a:	f7ff fcf9 	bl	1640 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1c4e:	685a      	ldr	r2, [r3, #4]
    1c50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1c54:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1c56:	4620      	mov	r0, r4
}
    1c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1c5c:	f012 ba58 	b.w	14110 <_reschedule>
    1c60:	00015d74 	.word	0x00015d74
    1c64:	00015db0 	.word	0x00015db0
    1c68:	00015620 	.word	0x00015620
    1c6c:	00015dd8 	.word	0x00015dd8
    1c70:	20001948 	.word	0x20001948
    1c74:	e000ed00 	.word	0xe000ed00

00001c78 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1c78:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1c7a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1c7c:	4a0b      	ldr	r2, [pc, #44]	; (1cac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1c7e:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1c80:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1c82:	bf1e      	ittt	ne
	movne	r1, #0
    1c84:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1c86:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1c88:	f011 ff38 	blne	13afc <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1c8c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1c8e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1c92:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1c96:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1c9a:	4905      	ldr	r1, [pc, #20]	; (1cb0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1c9c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1c9e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ca0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1ca2:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ca6:	f7ff bcab 	b.w	1600 <_ExcExit>
    1caa:	0000      	.short	0x0000
	ldr r2, =_kernel
    1cac:	20001948 	.word	0x20001948
	ldr r1, =_sw_isr_table
    1cb0:	000000dc 	.word	0x000000dc

00001cb4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1cb4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1cb6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1cba:	4806      	ldr	r0, [pc, #24]	; (1cd4 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1cc0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1cc2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1cc6:	2002      	movs	r0, #2
    msr CONTROL, r0
    1cc8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1ccc:	f3bf 8f6f 	isb	sy

    b _PrepC
    1cd0:	f000 b806 	b.w	1ce0 <_PrepC>
    ldr r0, =_interrupt_stack
    1cd4:	20002e20 	.word	0x20002e20

00001cd8 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1cd8:	bf30      	wfi
    b _SysNmiOnReset
    1cda:	f7ff bffd 	b.w	1cd8 <_SysNmiOnReset>
    1cde:	bf00      	nop

00001ce0 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1ce0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1ce2:	4b07      	ldr	r3, [pc, #28]	; (1d00 <_PrepC+0x20>)
    1ce4:	4a07      	ldr	r2, [pc, #28]	; (1d04 <_PrepC+0x24>)
    1ce6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1cea:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cf0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1cf4:	f011 ff32 	bl	13b5c <_bss_zero>
	_data_copy();
    1cf8:	f011 ff3a 	bl	13b70 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1cfc:	f011 ff5c 	bl	13bb8 <_Cstart>
    1d00:	00000000 	.word	0x00000000
    1d04:	e000ed00 	.word	0xe000ed00

00001d08 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1d08:	b508      	push	{r3, lr}
	handler();
    1d0a:	f7ff ffe5 	bl	1cd8 <_SysNmiOnReset>
	_ExcExit();
}
    1d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1d12:	f7ff bc75 	b.w	1600 <_ExcExit>
	...

00001d18 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1d18:	b538      	push	{r3, r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1d1a:	4c20      	ldr	r4, [pc, #128]	; (1d9c <arm_mpu_init+0x84>)
    1d1c:	6825      	ldr	r5, [r4, #0]
    1d1e:	2d08      	cmp	r5, #8
    1d20:	d90c      	bls.n	1d3c <arm_mpu_init+0x24>
		__ASSERT(0,
    1d22:	4a1f      	ldr	r2, [pc, #124]	; (1da0 <arm_mpu_init+0x88>)
    1d24:	491f      	ldr	r1, [pc, #124]	; (1da4 <arm_mpu_init+0x8c>)
    1d26:	4820      	ldr	r0, [pc, #128]	; (1da8 <arm_mpu_init+0x90>)
    1d28:	f240 13cd 	movw	r3, #461	; 0x1cd
    1d2c:	f7ff f92e 	bl	f8c <printk>
    1d30:	2208      	movs	r2, #8
    1d32:	6821      	ldr	r1, [r4, #0]
    1d34:	481d      	ldr	r0, [pc, #116]	; (1dac <arm_mpu_init+0x94>)
    1d36:	f7ff f929 	bl	f8c <printk>
    1d3a:	e7fe      	b.n	1d3a <arm_mpu_init+0x22>
	ARM_MPU_DEV->ctrl = 0;
    1d3c:	4b1c      	ldr	r3, [pc, #112]	; (1db0 <arm_mpu_init+0x98>)
    1d3e:	6860      	ldr	r0, [r4, #4]
    1d40:	2200      	movs	r2, #0
    1d42:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1d44:	4295      	cmp	r5, r2
    1d46:	f100 000c 	add.w	r0, r0, #12
    1d4a:	d115      	bne.n	1d78 <arm_mpu_init+0x60>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1d4c:	2205      	movs	r2, #5
    1d4e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d54:	f3bf 8f6f 	isb	sy

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1d5e:	2b08      	cmp	r3, #8
    1d60:	d01a      	beq.n	1d98 <arm_mpu_init+0x80>
    1d62:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1d66:	4a0e      	ldr	r2, [pc, #56]	; (1da0 <arm_mpu_init+0x88>)
    1d68:	4912      	ldr	r1, [pc, #72]	; (1db4 <arm_mpu_init+0x9c>)
    1d6a:	480f      	ldr	r0, [pc, #60]	; (1da8 <arm_mpu_init+0x90>)
    1d6c:	f7ff f90e 	bl	f8c <printk>
    1d70:	4811      	ldr	r0, [pc, #68]	; (1db8 <arm_mpu_init+0xa0>)
    1d72:	f7ff f90b 	bl	f8c <printk>
    1d76:	e7fe      	b.n	1d76 <arm_mpu_init+0x5e>
		_region_init(r_index,
    1d78:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1d7c:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1d80:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1d82:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1d86:	f041 0110 	orr.w	r1, r1, #16
    1d8a:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1d8c:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1d90:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1d92:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1d94:	611c      	str	r4, [r3, #16]
    1d96:	e7d5      	b.n	1d44 <arm_mpu_init+0x2c>
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1d98:	2000      	movs	r0, #0
    1d9a:	bd38      	pop	{r3, r4, r5, pc}
    1d9c:	20003a34 	.word	0x20003a34
    1da0:	00015df1 	.word	0x00015df1
    1da4:	00019905 	.word	0x00019905
    1da8:	00015620 	.word	0x00015620
    1dac:	00015e35 	.word	0x00015e35
    1db0:	e000ed90 	.word	0xe000ed90
    1db4:	00015e67 	.word	0x00015e67
    1db8:	00015eab 	.word	0x00015eab

00001dbc <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1dbc:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1dbe:	4603      	mov	r3, r0
    1dc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1dc4:	b90a      	cbnz	r2, 1dca <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1dc6:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1dc8:	4770      	bx	lr
		*d = *s;
    1dca:	f803 2b01 	strb.w	r2, [r3], #1
    1dce:	e7f7      	b.n	1dc0 <strcpy+0x4>

00001dd0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1dd0:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1dd2:	4603      	mov	r3, r0
    1dd4:	1a98      	subs	r0, r3, r2
    1dd6:	f813 1b01 	ldrb.w	r1, [r3], #1
    1dda:	2900      	cmp	r1, #0
    1ddc:	d1fa      	bne.n	1dd4 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1dde:	4770      	bx	lr

00001de0 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1de0:	3801      	subs	r0, #1
    1de2:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1de4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1de8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1dec:	4293      	cmp	r3, r2
    1dee:	d102      	bne.n	1df6 <strcmp+0x16>
    1df0:	2b00      	cmp	r3, #0
    1df2:	d1f7      	bne.n	1de4 <strcmp+0x4>
    1df4:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1df6:	1a98      	subs	r0, r3, r2
    1df8:	4770      	bx	lr

00001dfa <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1dfa:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1dfc:	b182      	cbz	r2, 1e20 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1dfe:	3a01      	subs	r2, #1
    1e00:	460c      	mov	r4, r1
    1e02:	4603      	mov	r3, r0
    1e04:	d103      	bne.n	1e0e <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1e06:	781a      	ldrb	r2, [r3, #0]
    1e08:	7820      	ldrb	r0, [r4, #0]
    1e0a:	1a10      	subs	r0, r2, r0
    1e0c:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1e0e:	781e      	ldrb	r6, [r3, #0]
    1e10:	7825      	ldrb	r5, [r4, #0]
    1e12:	42ae      	cmp	r6, r5
    1e14:	f100 0001 	add.w	r0, r0, #1
    1e18:	f101 0101 	add.w	r1, r1, #1
    1e1c:	d0ef      	beq.n	1dfe <memcmp+0x4>
    1e1e:	e7f2      	b.n	1e06 <memcmp+0xc>
		return 0;
    1e20:	4610      	mov	r0, r2
}
    1e22:	bd70      	pop	{r4, r5, r6, pc}

00001e24 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1e24:	ea81 0300 	eor.w	r3, r1, r0
    1e28:	f013 0f03 	tst.w	r3, #3
{
    1e2c:	b570      	push	{r4, r5, r6, lr}
    1e2e:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1e30:	d00b      	beq.n	1e4a <memcpy+0x26>
    1e32:	3b01      	subs	r3, #1
    1e34:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1e36:	4291      	cmp	r1, r2
    1e38:	d11b      	bne.n	1e72 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1e3a:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1e3c:	2a00      	cmp	r2, #0
    1e3e:	d0fc      	beq.n	1e3a <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1e40:	f811 4b01 	ldrb.w	r4, [r1], #1
    1e44:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1e48:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1e4a:	079c      	lsls	r4, r3, #30
    1e4c:	d1f6      	bne.n	1e3c <memcpy+0x18>
    1e4e:	1f1e      	subs	r6, r3, #4
    1e50:	460d      	mov	r5, r1
    1e52:	1b54      	subs	r4, r2, r5
    1e54:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1e56:	2c03      	cmp	r4, #3
    1e58:	d806      	bhi.n	1e68 <memcpy+0x44>
    1e5a:	f022 0403 	bic.w	r4, r2, #3
    1e5e:	4421      	add	r1, r4
    1e60:	4423      	add	r3, r4
    1e62:	f002 0203 	and.w	r2, r2, #3
    1e66:	e7e4      	b.n	1e32 <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1e68:	f855 4b04 	ldr.w	r4, [r5], #4
    1e6c:	f846 4f04 	str.w	r4, [r6, #4]!
    1e70:	e7ef      	b.n	1e52 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1e72:	f811 4b01 	ldrb.w	r4, [r1], #1
    1e76:	f803 4f01 	strb.w	r4, [r3, #1]!
    1e7a:	e7dc      	b.n	1e36 <memcpy+0x12>

00001e7c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1e7c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1e7e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1e80:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1e82:	079c      	lsls	r4, r3, #30
    1e84:	d111      	bne.n	1eaa <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1e86:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1e8a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1e8e:	461e      	mov	r6, r3
    1e90:	1b95      	subs	r5, r2, r6
    1e92:	441d      	add	r5, r3
    1e94:	2d03      	cmp	r5, #3
    1e96:	d80e      	bhi.n	1eb6 <memset+0x3a>
    1e98:	f022 0403 	bic.w	r4, r2, #3
    1e9c:	4423      	add	r3, r4
    1e9e:	f002 0203 	and.w	r2, r2, #3
    1ea2:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1ea4:	4293      	cmp	r3, r2
    1ea6:	d109      	bne.n	1ebc <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1ea8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1eaa:	2a00      	cmp	r2, #0
    1eac:	d0fc      	beq.n	1ea8 <memset+0x2c>
		*(d_byte++) = c_byte;
    1eae:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1eb2:	3a01      	subs	r2, #1
    1eb4:	e7e5      	b.n	1e82 <memset+0x6>
		*(d_word++) = c_word;
    1eb6:	f846 4b04 	str.w	r4, [r6], #4
    1eba:	e7e9      	b.n	1e90 <memset+0x14>
		*(d_byte++) = c_byte;
    1ebc:	f803 1b01 	strb.w	r1, [r3], #1
    1ec0:	e7f0      	b.n	1ea4 <memset+0x28>
	...

00001ec4 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1ec4:	b570      	push	{r4, r5, r6, lr}
    1ec6:	f04f 0320 	mov.w	r3, #32
    1eca:	f3ef 8511 	mrs	r5, BASEPRI
    1ece:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1ed2:	4c14      	ldr	r4, [pc, #80]	; (1f24 <bt_hex+0x60>)
    1ed4:	4e14      	ldr	r6, [pc, #80]	; (1f28 <bt_hex+0x64>)
    1ed6:	7823      	ldrb	r3, [r4, #0]
    1ed8:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1edc:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1ede:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1ee2:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1ee4:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1ee6:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1eea:	2940      	cmp	r1, #64	; 0x40
    1eec:	bf28      	it	cs
    1eee:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1ef0:	4d0e      	ldr	r5, [pc, #56]	; (1f2c <bt_hex+0x68>)
    1ef2:	3801      	subs	r0, #1
    1ef4:	4613      	mov	r3, r2
    1ef6:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1efa:	42b3      	cmp	r3, r6
    1efc:	d104      	bne.n	1f08 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1efe:	2300      	movs	r3, #0
    1f00:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1f04:	4610      	mov	r0, r2
    1f06:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1f08:	7844      	ldrb	r4, [r0, #1]
    1f0a:	0924      	lsrs	r4, r4, #4
    1f0c:	3302      	adds	r3, #2
    1f0e:	5d2c      	ldrb	r4, [r5, r4]
    1f10:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1f14:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1f18:	f004 040f 	and.w	r4, r4, #15
    1f1c:	5d2c      	ldrb	r4, [r5, r4]
    1f1e:	f803 4c01 	strb.w	r4, [r3, #-1]
    1f22:	e7ea      	b.n	1efa <bt_hex+0x36>
    1f24:	20000074 	.word	0x20000074
    1f28:	20000075 	.word	0x20000075
    1f2c:	00015ee8 	.word	0x00015ee8

00001f30 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1f30:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1f32:	4a0f      	ldr	r2, [pc, #60]	; (1f70 <bt_addr_str+0x40>)
    1f34:	4c0f      	ldr	r4, [pc, #60]	; (1f74 <bt_addr_str+0x44>)
    1f36:	7813      	ldrb	r3, [r2, #0]
    1f38:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1f3c:	3301      	adds	r3, #1
{
    1f3e:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1f40:	f003 0301 	and.w	r3, r3, #1
    1f44:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1f46:	7802      	ldrb	r2, [r0, #0]
    1f48:	7943      	ldrb	r3, [r0, #5]
    1f4a:	9204      	str	r2, [sp, #16]
    1f4c:	7842      	ldrb	r2, [r0, #1]
    1f4e:	9203      	str	r2, [sp, #12]
    1f50:	7882      	ldrb	r2, [r0, #2]
    1f52:	9202      	str	r2, [sp, #8]
    1f54:	78c2      	ldrb	r2, [r0, #3]
    1f56:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1f58:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1f5c:	7902      	ldrb	r2, [r0, #4]
    1f5e:	9200      	str	r2, [sp, #0]
    1f60:	2112      	movs	r1, #18
    1f62:	4a05      	ldr	r2, [pc, #20]	; (1f78 <bt_addr_str+0x48>)
    1f64:	4620      	mov	r0, r4
    1f66:	f7ff f81f 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1f6a:	4620      	mov	r0, r4
    1f6c:	b006      	add	sp, #24
    1f6e:	bd10      	pop	{r4, pc}
    1f70:	20000072 	.word	0x20000072
    1f74:	20000018 	.word	0x20000018
    1f78:	00015eca 	.word	0x00015eca

00001f7c <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1f7c:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1f7e:	4a1d      	ldr	r2, [pc, #116]	; (1ff4 <bt_addr_le_str+0x78>)
    1f80:	491d      	ldr	r1, [pc, #116]	; (1ff8 <bt_addr_le_str+0x7c>)
    1f82:	7813      	ldrb	r3, [r2, #0]
    1f84:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1f88:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1f8a:	f003 0301 	and.w	r3, r3, #1
    1f8e:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1f90:	7803      	ldrb	r3, [r0, #0]
{
    1f92:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1f94:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1f98:	4604      	mov	r4, r0
	str = bufs[cur++];
    1f9a:	440e      	add	r6, r1
    1f9c:	ad07      	add	r5, sp, #28
    1f9e:	2b03      	cmp	r3, #3
    1fa0:	d821      	bhi.n	1fe6 <bt_addr_le_str+0x6a>
    1fa2:	e8df f003 	tbb	[pc, r3]
    1fa6:	1a02      	.short	0x1a02
    1fa8:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1faa:	4914      	ldr	r1, [pc, #80]	; (1ffc <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1fac:	4628      	mov	r0, r5
    1fae:	f7ff ff05 	bl	1dbc <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1fb2:	7862      	ldrb	r2, [r4, #1]
    1fb4:	9204      	str	r2, [sp, #16]
    1fb6:	78a2      	ldrb	r2, [r4, #2]
    1fb8:	9203      	str	r2, [sp, #12]
    1fba:	78e2      	ldrb	r2, [r4, #3]
    1fbc:	9202      	str	r2, [sp, #8]
    1fbe:	7922      	ldrb	r2, [r4, #4]
    1fc0:	9201      	str	r2, [sp, #4]
    1fc2:	7962      	ldrb	r2, [r4, #5]
    1fc4:	9200      	str	r2, [sp, #0]
    1fc6:	79a3      	ldrb	r3, [r4, #6]
    1fc8:	9505      	str	r5, [sp, #20]
    1fca:	4a0d      	ldr	r2, [pc, #52]	; (2000 <bt_addr_le_str+0x84>)
    1fcc:	211b      	movs	r1, #27
    1fce:	4630      	mov	r0, r6
    1fd0:	f7fe ffea 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1fd4:	4630      	mov	r0, r6
    1fd6:	b00a      	add	sp, #40	; 0x28
    1fd8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1fda:	490a      	ldr	r1, [pc, #40]	; (2004 <bt_addr_le_str+0x88>)
    1fdc:	e7e6      	b.n	1fac <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1fde:	490a      	ldr	r1, [pc, #40]	; (2008 <bt_addr_le_str+0x8c>)
    1fe0:	e7e4      	b.n	1fac <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1fe2:	490a      	ldr	r1, [pc, #40]	; (200c <bt_addr_le_str+0x90>)
    1fe4:	e7e2      	b.n	1fac <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1fe6:	4a0a      	ldr	r2, [pc, #40]	; (2010 <bt_addr_le_str+0x94>)
    1fe8:	210a      	movs	r1, #10
    1fea:	4628      	mov	r0, r5
    1fec:	f7fe ffdc 	bl	fa8 <snprintk>
    1ff0:	e7df      	b.n	1fb2 <bt_addr_le_str+0x36>
    1ff2:	bf00      	nop
    1ff4:	20000073 	.word	0x20000073
    1ff8:	2000003c 	.word	0x2000003c
    1ffc:	00015481 	.word	0x00015481
    2000:	000154aa 	.word	0x000154aa
    2004:	00015488 	.word	0x00015488
    2008:	0001548f 	.word	0x0001548f
    200c:	00015499 	.word	0x00015499
    2010:	000154a3 	.word	0x000154a3

00002014 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    2014:	b530      	push	{r4, r5, lr}
    2016:	b085      	sub	sp, #20
    2018:	4604      	mov	r4, r0
    201a:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    201c:	4668      	mov	r0, sp
    201e:	2203      	movs	r2, #3
    2020:	f7ff ff00 	bl	1e24 <memcpy>
	memset(res + 3, 0, 13);
    2024:	220d      	movs	r2, #13
    2026:	2100      	movs	r1, #0
    2028:	f10d 0003 	add.w	r0, sp, #3
    202c:	f7ff ff26 	bl	1e7c <memset>

	err = bt_encrypt_le(irk, res, res);
    2030:	4620      	mov	r0, r4
    2032:	466a      	mov	r2, sp
    2034:	4669      	mov	r1, sp
    2036:	f006 f911 	bl	825c <bt_encrypt_le>
	if (err) {
    203a:	4604      	mov	r4, r0
    203c:	b920      	cbnz	r0, 2048 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    203e:	2203      	movs	r2, #3
    2040:	4669      	mov	r1, sp
    2042:	4628      	mov	r0, r5
    2044:	f7ff feee 	bl	1e24 <memcpy>

	return 0;
}
    2048:	4620      	mov	r0, r4
    204a:	b005      	add	sp, #20
    204c:	bd30      	pop	{r4, r5, pc}

0000204e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    204e:	b513      	push	{r0, r1, r4, lr}
    2050:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    2052:	aa01      	add	r2, sp, #4
    2054:	3103      	adds	r1, #3
    2056:	f7ff ffdd 	bl	2014 <ah>
	if (err) {
    205a:	b948      	cbnz	r0, 2070 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    205c:	2203      	movs	r2, #3
    205e:	a901      	add	r1, sp, #4
    2060:	4620      	mov	r0, r4
    2062:	f7ff feca 	bl	1dfa <memcmp>
    2066:	fab0 f080 	clz	r0, r0
    206a:	0940      	lsrs	r0, r0, #5
}
    206c:	b002      	add	sp, #8
    206e:	bd10      	pop	{r4, pc}
		return false;
    2070:	2000      	movs	r0, #0
    2072:	e7fb      	b.n	206c <bt_rpa_irk_matches+0x1e>

00002074 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    2074:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    2076:	1ccd      	adds	r5, r1, #3
{
    2078:	4606      	mov	r6, r0
    207a:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    207c:	4628      	mov	r0, r5
    207e:	2103      	movs	r1, #3
    2080:	f006 f8d0 	bl	8224 <bt_rand>
	if (err) {
    2084:	b960      	cbnz	r0, 20a0 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    2086:	7963      	ldrb	r3, [r4, #5]
    2088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    208c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2090:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    2092:	4622      	mov	r2, r4
    2094:	4629      	mov	r1, r5
    2096:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    2098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    209c:	f7ff bfba 	b.w	2014 <ah>
}
    20a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000020a4 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    20a4:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    20a6:	7802      	ldrb	r2, [r0, #0]
    20a8:	2a01      	cmp	r2, #1
{
    20aa:	4604      	mov	r4, r0
    20ac:	460b      	mov	r3, r1
	switch (src->type) {
    20ae:	d017      	beq.n	20e0 <uuid_to_uuid128+0x3c>
    20b0:	d303      	bcc.n	20ba <uuid_to_uuid128+0x16>
    20b2:	2a02      	cmp	r2, #2
    20b4:	d02c      	beq.n	2110 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    20b6:	bcf0      	pop	{r4, r5, r6, r7}
    20b8:	4770      	bx	lr
		*dst = uuid128_base;
    20ba:	4a18      	ldr	r2, [pc, #96]	; (211c <uuid_to_uuid128+0x78>)
    20bc:	460d      	mov	r5, r1
    20be:	f102 0710 	add.w	r7, r2, #16
    20c2:	6810      	ldr	r0, [r2, #0]
    20c4:	6851      	ldr	r1, [r2, #4]
    20c6:	462e      	mov	r6, r5
    20c8:	c603      	stmia	r6!, {r0, r1}
    20ca:	3208      	adds	r2, #8
    20cc:	42ba      	cmp	r2, r7
    20ce:	4635      	mov	r5, r6
    20d0:	d1f7      	bne.n	20c2 <uuid_to_uuid128+0x1e>
    20d2:	7812      	ldrb	r2, [r2, #0]
    20d4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    20d6:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    20d8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    20da:	0a12      	lsrs	r2, r2, #8
    20dc:	739a      	strb	r2, [r3, #14]
    20de:	e7ea      	b.n	20b6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    20e0:	4a0e      	ldr	r2, [pc, #56]	; (211c <uuid_to_uuid128+0x78>)
    20e2:	460d      	mov	r5, r1
    20e4:	f102 0710 	add.w	r7, r2, #16
    20e8:	6810      	ldr	r0, [r2, #0]
    20ea:	6851      	ldr	r1, [r2, #4]
    20ec:	462e      	mov	r6, r5
    20ee:	c603      	stmia	r6!, {r0, r1}
    20f0:	3208      	adds	r2, #8
    20f2:	42ba      	cmp	r2, r7
    20f4:	4635      	mov	r5, r6
    20f6:	d1f7      	bne.n	20e8 <uuid_to_uuid128+0x44>
    20f8:	7812      	ldrb	r2, [r2, #0]
    20fa:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    20fc:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    20fe:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    2100:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2104:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    2106:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    2108:	0a12      	lsrs	r2, r2, #8
    210a:	7399      	strb	r1, [r3, #14]
    210c:	741a      	strb	r2, [r3, #16]
    210e:	e7d2      	b.n	20b6 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    2110:	4601      	mov	r1, r0
    2112:	2211      	movs	r2, #17
    2114:	4618      	mov	r0, r3
}
    2116:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    2118:	f7ff be84 	b.w	1e24 <memcpy>
    211c:	00015ef9 	.word	0x00015ef9

00002120 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    2120:	b510      	push	{r4, lr}
    2122:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    2124:	7801      	ldrb	r1, [r0, #0]
    2126:	7822      	ldrb	r2, [r4, #0]
    2128:	428a      	cmp	r2, r1
{
    212a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    212c:	d00e      	beq.n	214c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    212e:	4669      	mov	r1, sp
    2130:	f7ff ffb8 	bl	20a4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    2134:	a905      	add	r1, sp, #20
    2136:	4620      	mov	r0, r4
    2138:	f7ff ffb4 	bl	20a4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    213c:	2210      	movs	r2, #16
    213e:	f10d 0115 	add.w	r1, sp, #21
    2142:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    2146:	f7ff fe58 	bl	1dfa <memcmp>
    214a:	e00a      	b.n	2162 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    214c:	2a01      	cmp	r2, #1
    214e:	d00a      	beq.n	2166 <bt_uuid_cmp+0x46>
    2150:	d304      	bcc.n	215c <bt_uuid_cmp+0x3c>
    2152:	2a02      	cmp	r2, #2
    2154:	d00a      	beq.n	216c <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    2156:	f06f 0015 	mvn.w	r0, #21
    215a:	e002      	b.n	2162 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    215c:	8840      	ldrh	r0, [r0, #2]
    215e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    2160:	1ac0      	subs	r0, r0, r3
}
    2162:	b00a      	add	sp, #40	; 0x28
    2164:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    2166:	6840      	ldr	r0, [r0, #4]
    2168:	6863      	ldr	r3, [r4, #4]
    216a:	e7f9      	b.n	2160 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    216c:	2210      	movs	r2, #16
    216e:	1c61      	adds	r1, r4, #1
    2170:	3001      	adds	r0, #1
    2172:	e7e8      	b.n	2146 <bt_uuid_cmp+0x26>

00002174 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    2174:	4770      	bx	lr
	...

00002178 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    2178:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    217a:	4d0b      	ldr	r5, [pc, #44]	; (21a8 <ver_str+0x30>)
{
    217c:	4606      	mov	r6, r0
	const char * const str[] = {
    217e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2180:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    2182:	466c      	mov	r4, sp
    2184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    218a:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    218e:	2e09      	cmp	r6, #9
	const char * const str[] = {
    2190:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    2194:	bf9b      	ittet	ls
    2196:	ab0a      	addls	r3, sp, #40	; 0x28
    2198:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    219c:	4803      	ldrhi	r0, [pc, #12]	; (21ac <ver_str+0x34>)
		return str[ver];
    219e:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    21a2:	b00a      	add	sp, #40	; 0x28
    21a4:	bd70      	pop	{r4, r5, r6, pc}
    21a6:	bf00      	nop
    21a8:	00015438 	.word	0x00015438
    21ac:	00016a90 	.word	0x00016a90

000021b0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    21b0:	2207      	movs	r2, #7
    21b2:	f7ff be37 	b.w	1e24 <memcpy>

000021b6 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    21b6:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    21b8:	f3bf 8f5b 	dmb	ish
    21bc:	e850 3f00 	ldrex	r3, [r0]
    21c0:	ea43 0201 	orr.w	r2, r3, r1
    21c4:	e840 2e00 	strex	lr, r2, [r0]
    21c8:	f1be 0f00 	cmp.w	lr, #0
    21cc:	d1f6      	bne.n	21bc <atomic_or+0x6>
    21ce:	f3bf 8f5b 	dmb	ish
    21d2:	4618      	mov	r0, r3
    21d4:	f85d fb04 	ldr.w	pc, [sp], #4

000021d8 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    21d8:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    21da:	f3bf 8f5b 	dmb	ish
    21de:	e850 3f00 	ldrex	r3, [r0]
    21e2:	ea03 0201 	and.w	r2, r3, r1
    21e6:	e840 2e00 	strex	lr, r2, [r0]
    21ea:	f1be 0f00 	cmp.w	lr, #0
    21ee:	d1f6      	bne.n	21de <atomic_and+0x6>
    21f0:	f3bf 8f5b 	dmb	ish
    21f4:	4618      	mov	r0, r3
    21f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000021fc <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    21fc:	78c3      	ldrb	r3, [r0, #3]
    21fe:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    2200:	f241 3288 	movw	r2, #5000	; 0x1388
    2204:	f100 0170 	add.w	r1, r0, #112	; 0x70
    2208:	bf08      	it	eq
    220a:	2200      	moveq	r2, #0
    220c:	4801      	ldr	r0, [pc, #4]	; (2214 <update_conn_param+0x18>)
    220e:	f012 be03 	b.w	14e18 <k_delayed_work_submit_to_queue>
    2212:	bf00      	nop
    2214:	20001988 	.word	0x20001988

00002218 <hci_cmd_done>:
{
    2218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    221c:	4606      	mov	r6, r0
    221e:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2220:	7990      	ldrb	r0, [r2, #6]
    2222:	4f28      	ldr	r7, [pc, #160]	; (22c4 <hci_cmd_done+0xac>)
{
    2224:	4688      	mov	r8, r1
    2226:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2228:	f010 ff5c 	bl	130e4 <net_buf_pool_get>
    222c:	4287      	cmp	r7, r0
    222e:	d015      	beq.n	225c <hci_cmd_done+0x44>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    2230:	79ac      	ldrb	r4, [r5, #6]
    2232:	4b25      	ldr	r3, [pc, #148]	; (22c8 <hci_cmd_done+0xb0>)
    2234:	4620      	mov	r0, r4
    2236:	f8d3 8000 	ldr.w	r8, [r3]
    223a:	f010 ff53 	bl	130e4 <net_buf_pool_get>
    223e:	4b23      	ldr	r3, [pc, #140]	; (22cc <hci_cmd_done+0xb4>)
    2240:	9305      	str	r3, [sp, #20]
    2242:	9003      	str	r0, [sp, #12]
    2244:	e88d 0048 	stmia.w	sp, {r3, r6}
    2248:	9704      	str	r7, [sp, #16]
    224a:	9402      	str	r4, [sp, #8]
    224c:	4b20      	ldr	r3, [pc, #128]	; (22d0 <hci_cmd_done+0xb8>)
    224e:	4a21      	ldr	r2, [pc, #132]	; (22d4 <hci_cmd_done+0xbc>)
    2250:	4921      	ldr	r1, [pc, #132]	; (22d8 <hci_cmd_done+0xc0>)
    2252:	4822      	ldr	r0, [pc, #136]	; (22dc <hci_cmd_done+0xc4>)
    2254:	47c0      	blx	r8
}
    2256:	b006      	add	sp, #24
    2258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    225c:	4628      	mov	r0, r5
    225e:	f010 ff47 	bl	130f0 <net_buf_id>
    2262:	4c1f      	ldr	r4, [pc, #124]	; (22e0 <hci_cmd_done+0xc8>)
    2264:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2268:	8843      	ldrh	r3, [r0, #2]
    226a:	42b3      	cmp	r3, r6
    226c:	d011      	beq.n	2292 <hci_cmd_done+0x7a>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    226e:	4b16      	ldr	r3, [pc, #88]	; (22c8 <hci_cmd_done+0xb0>)
    2270:	4628      	mov	r0, r5
    2272:	681f      	ldr	r7, [r3, #0]
    2274:	f010 ff3c 	bl	130f0 <net_buf_id>
    2278:	4b14      	ldr	r3, [pc, #80]	; (22cc <hci_cmd_done+0xb4>)
    227a:	9303      	str	r3, [sp, #12]
    227c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2280:	4915      	ldr	r1, [pc, #84]	; (22d8 <hci_cmd_done+0xc0>)
    2282:	8842      	ldrh	r2, [r0, #2]
    2284:	9202      	str	r2, [sp, #8]
    2286:	e88d 0048 	stmia.w	sp, {r3, r6}
    228a:	4a12      	ldr	r2, [pc, #72]	; (22d4 <hci_cmd_done+0xbc>)
    228c:	4b10      	ldr	r3, [pc, #64]	; (22d0 <hci_cmd_done+0xb8>)
    228e:	4815      	ldr	r0, [pc, #84]	; (22e4 <hci_cmd_done+0xcc>)
    2290:	47b8      	blx	r7
	if (cmd(buf)->sync) {
    2292:	4628      	mov	r0, r5
    2294:	f010 ff2c 	bl	130f0 <net_buf_id>
    2298:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    229c:	6843      	ldr	r3, [r0, #4]
    229e:	2b00      	cmp	r3, #0
    22a0:	d0d9      	beq.n	2256 <hci_cmd_done+0x3e>
		cmd(buf)->status = status;
    22a2:	4628      	mov	r0, r5
    22a4:	f010 ff24 	bl	130f0 <net_buf_id>
    22a8:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    22ac:	4628      	mov	r0, r5
    22ae:	f010 ff1f 	bl	130f0 <net_buf_id>
    22b2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    22b6:	6840      	ldr	r0, [r0, #4]
}
    22b8:	b006      	add	sp, #24
    22ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    22be:	f012 b9e7 	b.w	14690 <_impl_k_sem_give>
    22c2:	bf00      	nop
    22c4:	20003f6c 	.word	0x20003f6c
    22c8:	20003a5c 	.word	0x20003a5c
    22cc:	0001563e 	.word	0x0001563e
    22d0:	00015fd2 	.word	0x00015fd2
    22d4:	00016801 	.word	0x00016801
    22d8:	00016808 	.word	0x00016808
    22dc:	0001680b 	.word	0x0001680b
    22e0:	2000027c 	.word	0x2000027c
    22e4:	00016850 	.word	0x00016850

000022e8 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    22e8:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    22ea:	f3bf 8f5b 	dmb	ish
    22ee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    22f2:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    22f6:	f001 011f 	and.w	r1, r1, #31
    22fa:	4108      	asrs	r0, r1
}
    22fc:	f000 0001 	and.w	r0, r0, #1
    2300:	4770      	bx	lr
	...

00002304 <bt_hci_cmd_create>:
{
    2304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2308:	4680      	mov	r8, r0
    230a:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    230c:	4818      	ldr	r0, [pc, #96]	; (2370 <bt_hci_cmd_create+0x6c>)
    230e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2312:	f010 ff7b 	bl	1320c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    2316:	4604      	mov	r4, r0
    2318:	b948      	cbnz	r0, 232e <bt_hci_cmd_create+0x2a>
    231a:	23c2      	movs	r3, #194	; 0xc2
    231c:	4a15      	ldr	r2, [pc, #84]	; (2374 <bt_hci_cmd_create+0x70>)
    231e:	4916      	ldr	r1, [pc, #88]	; (2378 <bt_hci_cmd_create+0x74>)
    2320:	4816      	ldr	r0, [pc, #88]	; (237c <bt_hci_cmd_create+0x78>)
    2322:	f7fe fe33 	bl	f8c <printk>
    2326:	4816      	ldr	r0, [pc, #88]	; (2380 <bt_hci_cmd_create+0x7c>)
    2328:	f7fe fe30 	bl	f8c <printk>
    232c:	e7fe      	b.n	232c <bt_hci_cmd_create+0x28>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    232e:	f100 0608 	add.w	r6, r0, #8
    2332:	2100      	movs	r1, #0
    2334:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2336:	2700      	movs	r7, #0
    2338:	f010 ff87 	bl	1324a <net_buf_simple_reserve>
    233c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    233e:	4620      	mov	r0, r4
    2340:	f010 fed6 	bl	130f0 <net_buf_id>
    2344:	4d0f      	ldr	r5, [pc, #60]	; (2384 <bt_hci_cmd_create+0x80>)
    2346:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    234a:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    234e:	4620      	mov	r0, r4
    2350:	f010 fece 	bl	130f0 <net_buf_id>
    2354:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2358:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    235a:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    235c:	4630      	mov	r0, r6
    235e:	f010 ffb7 	bl	132d0 <net_buf_simple_add>
	hdr->param_len = param_len;
    2362:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    2366:	f8a0 8000 	strh.w	r8, [r0]
}
    236a:	4620      	mov	r0, r4
    236c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2370:	20003f6c 	.word	0x20003f6c
    2374:	000161d7 	.word	0x000161d7
    2378:	00016217 	.word	0x00016217
    237c:	00015620 	.word	0x00015620
    2380:	0001563e 	.word	0x0001563e
    2384:	2000027c 	.word	0x2000027c

00002388 <bt_hci_cmd_send_sync>:
{
    2388:	b5f0      	push	{r4, r5, r6, r7, lr}
    238a:	4616      	mov	r6, r2
    238c:	b087      	sub	sp, #28
	if (!buf) {
    238e:	460c      	mov	r4, r1
    2390:	b921      	cbnz	r1, 239c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    2392:	f7ff ffb7 	bl	2304 <bt_hci_cmd_create>
		if (!buf) {
    2396:	4604      	mov	r4, r0
    2398:	2800      	cmp	r0, #0
    239a:	d03b      	beq.n	2414 <bt_hci_cmd_send_sync+0x8c>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    239c:	2201      	movs	r2, #1
    239e:	2100      	movs	r1, #0
    23a0:	4668      	mov	r0, sp
    23a2:	f012 f947 	bl	14634 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    23a6:	4620      	mov	r0, r4
    23a8:	f010 fea2 	bl	130f0 <net_buf_id>
    23ac:	4f1b      	ldr	r7, [pc, #108]	; (241c <bt_hci_cmd_send_sync+0x94>)
    23ae:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    23b2:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    23b6:	4620      	mov	r0, r4
    23b8:	f010 ff86 	bl	132c8 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    23bc:	4621      	mov	r1, r4
    23be:	4818      	ldr	r0, [pc, #96]	; (2420 <bt_hci_cmd_send_sync+0x98>)
    23c0:	f010 ff47 	bl	13252 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    23c4:	f242 7110 	movw	r1, #10000	; 0x2710
    23c8:	4668      	mov	r0, sp
    23ca:	f012 f989 	bl	146e0 <_impl_k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);
    23ce:	4605      	mov	r5, r0
    23d0:	b158      	cbz	r0, 23ea <bt_hci_cmd_send_sync+0x62>
    23d2:	4914      	ldr	r1, [pc, #80]	; (2424 <bt_hci_cmd_send_sync+0x9c>)
    23d4:	4a14      	ldr	r2, [pc, #80]	; (2428 <bt_hci_cmd_send_sync+0xa0>)
    23d6:	4815      	ldr	r0, [pc, #84]	; (242c <bt_hci_cmd_send_sync+0xa4>)
    23d8:	f240 130b 	movw	r3, #267	; 0x10b
    23dc:	f7fe fdd6 	bl	f8c <printk>
    23e0:	4629      	mov	r1, r5
    23e2:	4813      	ldr	r0, [pc, #76]	; (2430 <bt_hci_cmd_send_sync+0xa8>)
    23e4:	f7fe fdd2 	bl	f8c <printk>
    23e8:	e7fe      	b.n	23e8 <bt_hci_cmd_send_sync+0x60>
	if (cmd(buf)->status) {
    23ea:	4620      	mov	r0, r4
    23ec:	f010 fe80 	bl	130f0 <net_buf_id>
    23f0:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    23f4:	b13b      	cbz	r3, 2406 <bt_hci_cmd_send_sync+0x7e>
		net_buf_unref(buf);
    23f6:	4620      	mov	r0, r4
    23f8:	f010 ff38 	bl	1326c <net_buf_unref>
		err = -EIO;
    23fc:	f06f 0504 	mvn.w	r5, #4
}
    2400:	4628      	mov	r0, r5
    2402:	b007      	add	sp, #28
    2404:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (rsp) {
    2406:	b10e      	cbz	r6, 240c <bt_hci_cmd_send_sync+0x84>
			*rsp = buf;
    2408:	6034      	str	r4, [r6, #0]
    240a:	e7f9      	b.n	2400 <bt_hci_cmd_send_sync+0x78>
			net_buf_unref(buf);
    240c:	4620      	mov	r0, r4
    240e:	f010 ff2d 	bl	1326c <net_buf_unref>
    2412:	e7f5      	b.n	2400 <bt_hci_cmd_send_sync+0x78>
			return -ENOBUFS;
    2414:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2418:	e7f2      	b.n	2400 <bt_hci_cmd_send_sync+0x78>
    241a:	bf00      	nop
    241c:	2000027c 	.word	0x2000027c
    2420:	20003b24 	.word	0x20003b24
    2424:	0001624d 	.word	0x0001624d
    2428:	000161d7 	.word	0x000161d7
    242c:	00015620 	.word	0x00015620
    2430:	00016256 	.word	0x00016256

00002434 <set_le_scan_enable>:
{
    2434:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2436:	2102      	movs	r1, #2
{
    2438:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    243a:	f242 000c 	movw	r0, #8204	; 0x200c
    243e:	f7ff ff61 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    2442:	4604      	mov	r4, r0
    2444:	b330      	cbz	r0, 2494 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    2446:	2102      	movs	r1, #2
    2448:	3008      	adds	r0, #8
    244a:	f010 ff41 	bl	132d0 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    244e:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2450:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2452:	d116      	bne.n	2482 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    2454:	210b      	movs	r1, #11
    2456:	4811      	ldr	r0, [pc, #68]	; (249c <set_le_scan_enable+0x68>)
    2458:	f7ff ff46 	bl	22e8 <atomic_test_bit>
    245c:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    245e:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2460:	4621      	mov	r1, r4
    2462:	2200      	movs	r2, #0
    2464:	f242 000c 	movw	r0, #8204	; 0x200c
    2468:	f7ff ff8e 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    246c:	4604      	mov	r4, r0
    246e:	b930      	cbnz	r0, 247e <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2470:	2d01      	cmp	r5, #1
    2472:	d109      	bne.n	2488 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2474:	f44f 7180 	mov.w	r1, #256	; 0x100
    2478:	4808      	ldr	r0, [pc, #32]	; (249c <set_le_scan_enable+0x68>)
    247a:	f7ff fe9c 	bl	21b6 <atomic_or>
}
    247e:	4620      	mov	r0, r4
    2480:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2482:	2300      	movs	r3, #0
    2484:	7043      	strb	r3, [r0, #1]
    2486:	e7ea      	b.n	245e <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2488:	f46f 7180 	mvn.w	r1, #256	; 0x100
    248c:	4803      	ldr	r0, [pc, #12]	; (249c <set_le_scan_enable+0x68>)
    248e:	f7ff fea3 	bl	21d8 <atomic_and>
    2492:	e7f4      	b.n	247e <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    2494:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2498:	e7f1      	b.n	247e <set_le_scan_enable+0x4a>
    249a:	bf00      	nop
    249c:	20003ad0 	.word	0x20003ad0

000024a0 <set_random_address>:
{
    24a0:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    24a2:	4d15      	ldr	r5, [pc, #84]	; (24f8 <set_random_address+0x58>)
    24a4:	2206      	movs	r2, #6
    24a6:	f105 0108 	add.w	r1, r5, #8
    24aa:	4606      	mov	r6, r0
    24ac:	f7ff fca5 	bl	1dfa <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    24b0:	4604      	mov	r4, r0
    24b2:	b1d8      	cbz	r0, 24ec <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    24b4:	2106      	movs	r1, #6
    24b6:	f242 0005 	movw	r0, #8197	; 0x2005
    24ba:	f7ff ff23 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    24be:	4604      	mov	r4, r0
    24c0:	b1b0      	cbz	r0, 24f0 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    24c2:	2206      	movs	r2, #6
    24c4:	4631      	mov	r1, r6
    24c6:	3008      	adds	r0, #8
    24c8:	f010 ff08 	bl	132dc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    24cc:	4621      	mov	r1, r4
    24ce:	2200      	movs	r2, #0
    24d0:	f242 0005 	movw	r0, #8197	; 0x2005
    24d4:	f7ff ff58 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    24d8:	4604      	mov	r4, r0
    24da:	b938      	cbnz	r0, 24ec <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    24dc:	2206      	movs	r2, #6
    24de:	4631      	mov	r1, r6
    24e0:	f105 0008 	add.w	r0, r5, #8
    24e4:	f7ff fc9e 	bl	1e24 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    24e8:	2301      	movs	r3, #1
    24ea:	71eb      	strb	r3, [r5, #7]
}
    24ec:	4620      	mov	r0, r4
    24ee:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    24f0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24f4:	e7fa      	b.n	24ec <set_random_address+0x4c>
    24f6:	bf00      	nop
    24f8:	20003a60 	.word	0x20003a60

000024fc <le_set_private_addr>:
{
    24fc:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    24fe:	2106      	movs	r1, #6
    2500:	4668      	mov	r0, sp
    2502:	f005 fe8f 	bl	8224 <bt_rand>
	if (err) {
    2506:	b940      	cbnz	r0, 251a <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2508:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    250c:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    250e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2512:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2516:	f7ff ffc3 	bl	24a0 <set_random_address>
}
    251a:	b003      	add	sp, #12
    251c:	f85d fb04 	ldr.w	pc, [sp], #4

00002520 <set_advertise_enable>:
{
    2520:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2522:	2101      	movs	r1, #1
{
    2524:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2526:	f242 000a 	movw	r0, #8202	; 0x200a
    252a:	f7ff feeb 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    252e:	4604      	mov	r4, r0
    2530:	b1d8      	cbz	r0, 256a <set_advertise_enable+0x4a>
    2532:	3008      	adds	r0, #8
	if (enable) {
    2534:	b18d      	cbz	r5, 255a <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2536:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2538:	f010 fed9 	bl	132ee <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    253c:	4621      	mov	r1, r4
    253e:	2200      	movs	r2, #0
    2540:	f242 000a 	movw	r0, #8202	; 0x200a
    2544:	f7ff ff20 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    2548:	4604      	mov	r4, r0
    254a:	b920      	cbnz	r0, 2556 <set_advertise_enable+0x36>
	if (enable) {
    254c:	b13d      	cbz	r5, 255e <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    254e:	2140      	movs	r1, #64	; 0x40
    2550:	4807      	ldr	r0, [pc, #28]	; (2570 <set_advertise_enable+0x50>)
    2552:	f7ff fe30 	bl	21b6 <atomic_or>
}
    2556:	4620      	mov	r0, r4
    2558:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    255a:	4629      	mov	r1, r5
    255c:	e7ec      	b.n	2538 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    255e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2562:	4803      	ldr	r0, [pc, #12]	; (2570 <set_advertise_enable+0x50>)
    2564:	f7ff fe38 	bl	21d8 <atomic_and>
    2568:	e7f5      	b.n	2556 <set_advertise_enable+0x36>
		return -ENOBUFS;
    256a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    256e:	e7f2      	b.n	2556 <set_advertise_enable+0x36>
    2570:	20003ad0 	.word	0x20003ad0

00002574 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    2574:	8802      	ldrh	r2, [r0, #0]
    2576:	8843      	ldrh	r3, [r0, #2]
    2578:	429a      	cmp	r2, r3
{
    257a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    257c:	d818      	bhi.n	25b0 <bt_le_conn_params_valid+0x3c>
    257e:	2a05      	cmp	r2, #5
    2580:	d916      	bls.n	25b0 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    2582:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    2586:	d813      	bhi.n	25b0 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2588:	8884      	ldrh	r4, [r0, #4]
    258a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    258e:	d20f      	bcs.n	25b0 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2590:	88c1      	ldrh	r1, [r0, #6]
    2592:	f1a1 020a 	sub.w	r2, r1, #10
    2596:	b292      	uxth	r2, r2
    2598:	f640 4076 	movw	r0, #3190	; 0xc76
    259c:	4282      	cmp	r2, r0
    259e:	d807      	bhi.n	25b0 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    25a0:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    25a4:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    25a8:	bfb4      	ite	lt
    25aa:	2001      	movlt	r0, #1
    25ac:	2000      	movge	r0, #0
    25ae:	bd10      	pop	{r4, pc}
		return false;
    25b0:	2000      	movs	r0, #0
}
    25b2:	bd10      	pop	{r4, pc}

000025b4 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    25b4:	2301      	movs	r3, #1
{
    25b6:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    25b8:	2106      	movs	r1, #6
{
    25ba:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    25bc:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    25c0:	f005 fe30 	bl	8224 <bt_rand>
	if (err) {
    25c4:	b918      	cbnz	r0, 25ce <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    25c6:	79a3      	ldrb	r3, [r4, #6]
    25c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    25cc:	71a3      	strb	r3, [r4, #6]
}
    25ce:	bd10      	pop	{r4, pc}

000025d0 <bt_set_static_addr>:
{
    25d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    25d2:	4c12      	ldr	r4, [pc, #72]	; (261c <bt_set_static_addr+0x4c>)
    25d4:	7823      	ldrb	r3, [r4, #0]
    25d6:	2b01      	cmp	r3, #1
    25d8:	d104      	bne.n	25e4 <bt_set_static_addr+0x14>
    25da:	79a3      	ldrb	r3, [r4, #6]
    25dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    25e0:	2bc0      	cmp	r3, #192	; 0xc0
    25e2:	d00e      	beq.n	2602 <bt_set_static_addr+0x32>
		BT_ERR("Only static random address supported as identity");
    25e4:	4b0e      	ldr	r3, [pc, #56]	; (2620 <bt_set_static_addr+0x50>)
    25e6:	9301      	str	r3, [sp, #4]
    25e8:	9300      	str	r3, [sp, #0]
    25ea:	4b0e      	ldr	r3, [pc, #56]	; (2624 <bt_set_static_addr+0x54>)
    25ec:	4a0e      	ldr	r2, [pc, #56]	; (2628 <bt_set_static_addr+0x58>)
    25ee:	681c      	ldr	r4, [r3, #0]
    25f0:	490e      	ldr	r1, [pc, #56]	; (262c <bt_set_static_addr+0x5c>)
    25f2:	4b0f      	ldr	r3, [pc, #60]	; (2630 <bt_set_static_addr+0x60>)
    25f4:	480f      	ldr	r0, [pc, #60]	; (2634 <bt_set_static_addr+0x64>)
    25f6:	47a0      	blx	r4
    25f8:	f06f 0515 	mvn.w	r5, #21
}
    25fc:	4628      	mov	r0, r5
    25fe:	b003      	add	sp, #12
    2600:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    2602:	1c60      	adds	r0, r4, #1
    2604:	f7ff ff4c 	bl	24a0 <set_random_address>
	if (err) {
    2608:	4605      	mov	r5, r0
    260a:	2800      	cmp	r0, #0
    260c:	d1f6      	bne.n	25fc <bt_set_static_addr+0x2c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    260e:	2104      	movs	r1, #4
    2610:	f104 0070 	add.w	r0, r4, #112	; 0x70
    2614:	f7ff fdcf 	bl	21b6 <atomic_or>
	return 0;
    2618:	e7f0      	b.n	25fc <bt_set_static_addr+0x2c>
    261a:	bf00      	nop
    261c:	20003a60 	.word	0x20003a60
    2620:	0001563e 	.word	0x0001563e
    2624:	20003a5c 	.word	0x20003a5c
    2628:	000167b9 	.word	0x000167b9
    262c:	00016808 	.word	0x00016808
    2630:	00016029 	.word	0x00016029
    2634:	000167c0 	.word	0x000167c0

00002638 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    2638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    263c:	4d20      	ldr	r5, [pc, #128]	; (26c0 <bt_dev_show_info+0x88>)
    263e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 26dc <bt_dev_show_info+0xa4>
    2642:	f8df 809c 	ldr.w	r8, [pc, #156]	; 26e0 <bt_dev_show_info+0xa8>
    2646:	f8d9 a000 	ldr.w	sl, [r9]
    264a:	4f1e      	ldr	r7, [pc, #120]	; (26c4 <bt_dev_show_info+0x8c>)
    264c:	4e1e      	ldr	r6, [pc, #120]	; (26c8 <bt_dev_show_info+0x90>)
    264e:	4c1f      	ldr	r4, [pc, #124]	; (26cc <bt_dev_show_info+0x94>)
{
    2650:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2652:	4628      	mov	r0, r5
    2654:	f7ff fc92 	bl	1f7c <bt_addr_le_str>
    2658:	4643      	mov	r3, r8
    265a:	463a      	mov	r2, r7
    265c:	4631      	mov	r1, r6
    265e:	9001      	str	r0, [sp, #4]
    2660:	9402      	str	r4, [sp, #8]
    2662:	9400      	str	r4, [sp, #0]
    2664:	481a      	ldr	r0, [pc, #104]	; (26d0 <bt_dev_show_info+0x98>)
    2666:	47d0      	blx	sl
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2668:	f895 a00e 	ldrb.w	sl, [r5, #14]
    266c:	f8d9 b000 	ldr.w	fp, [r9]
    2670:	4650      	mov	r0, sl
    2672:	f7ff fd81 	bl	2178 <ver_str>
    2676:	8aab      	ldrh	r3, [r5, #20]
    2678:	9304      	str	r3, [sp, #16]
    267a:	8a2b      	ldrh	r3, [r5, #16]
    267c:	9303      	str	r3, [sp, #12]
    267e:	463a      	mov	r2, r7
    2680:	4643      	mov	r3, r8
    2682:	4631      	mov	r1, r6
    2684:	f8cd a008 	str.w	sl, [sp, #8]
    2688:	9001      	str	r0, [sp, #4]
    268a:	9405      	str	r4, [sp, #20]
    268c:	9400      	str	r4, [sp, #0]
    268e:	4811      	ldr	r0, [pc, #68]	; (26d4 <bt_dev_show_info+0x9c>)
    2690:	47d8      	blx	fp
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2692:	f8d9 a000 	ldr.w	sl, [r9]
    2696:	f895 900f 	ldrb.w	r9, [r5, #15]
    269a:	4648      	mov	r0, r9
    269c:	f7ff fd6c 	bl	2178 <ver_str>
    26a0:	8a6b      	ldrh	r3, [r5, #18]
    26a2:	9303      	str	r3, [sp, #12]
    26a4:	9001      	str	r0, [sp, #4]
    26a6:	9404      	str	r4, [sp, #16]
    26a8:	f8cd 9008 	str.w	r9, [sp, #8]
    26ac:	9400      	str	r4, [sp, #0]
    26ae:	4643      	mov	r3, r8
    26b0:	463a      	mov	r2, r7
    26b2:	4631      	mov	r1, r6
    26b4:	4808      	ldr	r0, [pc, #32]	; (26d8 <bt_dev_show_info+0xa0>)
    26b6:	47d0      	blx	sl
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    26b8:	b007      	add	sp, #28
    26ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26be:	bf00      	nop
    26c0:	20003a60 	.word	0x20003a60
    26c4:	000160d9 	.word	0x000160d9
    26c8:	00016808 	.word	0x00016808
    26cc:	0001563e 	.word	0x0001563e
    26d0:	000160e0 	.word	0x000160e0
    26d4:	000160fd 	.word	0x000160fd
    26d8:	0001614b 	.word	0x0001614b
    26dc:	20003a5c 	.word	0x20003a5c
    26e0:	0001604a 	.word	0x0001604a

000026e4 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    26e4:	4b02      	ldr	r3, [pc, #8]	; (26f0 <bt_send+0xc>)
    26e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    26ea:	691b      	ldr	r3, [r3, #16]
    26ec:	4718      	bx	r3
    26ee:	bf00      	nop
    26f0:	20003a60 	.word	0x20003a60

000026f4 <bt_hci_cmd_send>:
{
    26f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    26f6:	4604      	mov	r4, r0
	if (!buf) {
    26f8:	460d      	mov	r5, r1
    26fa:	b919      	cbnz	r1, 2704 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    26fc:	f7ff fe02 	bl	2304 <bt_hci_cmd_create>
		if (!buf) {
    2700:	4605      	mov	r5, r0
    2702:	b1f8      	cbz	r0, 2744 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2704:	f640 4335 	movw	r3, #3125	; 0xc35
    2708:	429c      	cmp	r4, r3
    270a:	d115      	bne.n	2738 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    270c:	4628      	mov	r0, r5
    270e:	f7ff ffe9 	bl	26e4 <bt_send>
		if (err) {
    2712:	4604      	mov	r4, r0
    2714:	b168      	cbz	r0, 2732 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    2716:	4b0d      	ldr	r3, [pc, #52]	; (274c <bt_hci_cmd_send+0x58>)
    2718:	9302      	str	r3, [sp, #8]
    271a:	e88d 0018 	stmia.w	sp, {r3, r4}
    271e:	4b0c      	ldr	r3, [pc, #48]	; (2750 <bt_hci_cmd_send+0x5c>)
    2720:	480c      	ldr	r0, [pc, #48]	; (2754 <bt_hci_cmd_send+0x60>)
    2722:	681e      	ldr	r6, [r3, #0]
    2724:	4a0c      	ldr	r2, [pc, #48]	; (2758 <bt_hci_cmd_send+0x64>)
    2726:	4b0d      	ldr	r3, [pc, #52]	; (275c <bt_hci_cmd_send+0x68>)
    2728:	490d      	ldr	r1, [pc, #52]	; (2760 <bt_hci_cmd_send+0x6c>)
    272a:	47b0      	blx	r6
			net_buf_unref(buf);
    272c:	4628      	mov	r0, r5
    272e:	f010 fd9d 	bl	1326c <net_buf_unref>
}
    2732:	4620      	mov	r0, r4
    2734:	b004      	add	sp, #16
    2736:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2738:	4629      	mov	r1, r5
    273a:	480a      	ldr	r0, [pc, #40]	; (2764 <bt_hci_cmd_send+0x70>)
    273c:	f010 fd89 	bl	13252 <net_buf_put>
	return 0;
    2740:	2400      	movs	r4, #0
    2742:	e7f6      	b.n	2732 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    2744:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2748:	e7f3      	b.n	2732 <bt_hci_cmd_send+0x3e>
    274a:	bf00      	nop
    274c:	0001563e 	.word	0x0001563e
    2750:	20003a5c 	.word	0x20003a5c
    2754:	0001621b 	.word	0x0001621b
    2758:	000167b9 	.word	0x000167b9
    275c:	00015f0a 	.word	0x00015f0a
    2760:	00016808 	.word	0x00016808
    2764:	20003b24 	.word	0x20003b24

00002768 <start_le_scan>:
{
    2768:	b573      	push	{r0, r1, r4, r5, r6, lr}
    276a:	4605      	mov	r5, r0
    276c:	460e      	mov	r6, r1
    276e:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    2770:	2100      	movs	r1, #0
    2772:	2207      	movs	r2, #7
    2774:	4668      	mov	r0, sp
    2776:	f7ff fb81 	bl	1e7c <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    277a:	4821      	ldr	r0, [pc, #132]	; (2800 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    277c:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    2780:	2300      	movs	r3, #0
    2782:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2786:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    2788:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    278a:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    278e:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    2792:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2796:	d10a      	bne.n	27ae <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2798:	2106      	movs	r1, #6
    279a:	3070      	adds	r0, #112	; 0x70
    279c:	f7ff fda4 	bl	22e8 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    27a0:	b928      	cbnz	r0, 27ae <start_le_scan+0x46>
			err = le_set_private_addr();
    27a2:	f7ff feab 	bl	24fc <le_set_private_addr>
			if (err) {
    27a6:	4604      	mov	r4, r0
    27a8:	b9f0      	cbnz	r0, 27e8 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    27aa:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    27ae:	2107      	movs	r1, #7
    27b0:	f242 000b 	movw	r0, #8203	; 0x200b
    27b4:	f7ff fda6 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    27b8:	4604      	mov	r4, r0
    27ba:	b1f0      	cbz	r0, 27fa <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    27bc:	2207      	movs	r2, #7
    27be:	4669      	mov	r1, sp
    27c0:	3008      	adds	r0, #8
    27c2:	f010 fd8b 	bl	132dc <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    27c6:	4621      	mov	r1, r4
    27c8:	f242 000b 	movw	r0, #8203	; 0x200b
    27cc:	f7ff ff92 	bl	26f4 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    27d0:	2001      	movs	r0, #1
    27d2:	f7ff fe2f 	bl	2434 <set_le_scan_enable>
	if (err) {
    27d6:	4604      	mov	r4, r0
    27d8:	b930      	cbnz	r0, 27e8 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    27da:	2d01      	cmp	r5, #1
    27dc:	d107      	bne.n	27ee <start_le_scan+0x86>
    27de:	f44f 6180 	mov.w	r1, #1024	; 0x400
    27e2:	4808      	ldr	r0, [pc, #32]	; (2804 <start_le_scan+0x9c>)
    27e4:	f7ff fce7 	bl	21b6 <atomic_or>
}
    27e8:	4620      	mov	r0, r4
    27ea:	b002      	add	sp, #8
    27ec:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    27ee:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    27f2:	4804      	ldr	r0, [pc, #16]	; (2804 <start_le_scan+0x9c>)
    27f4:	f7ff fcf0 	bl	21d8 <atomic_and>
    27f8:	e7f6      	b.n	27e8 <start_le_scan+0x80>
		return -ENOBUFS;
    27fa:	f06f 0436 	mvn.w	r4, #54	; 0x36
    27fe:	e7f3      	b.n	27e8 <start_le_scan+0x80>
    2800:	20003a60 	.word	0x20003a60
    2804:	20003ad0 	.word	0x20003ad0

00002808 <bt_le_scan_update>:
{
    2808:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    280a:	2109      	movs	r1, #9
{
    280c:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    280e:	4816      	ldr	r0, [pc, #88]	; (2868 <bt_le_scan_update+0x60>)
    2810:	f7ff fd6a 	bl	22e8 <atomic_test_bit>
    2814:	4602      	mov	r2, r0
    2816:	b108      	cbz	r0, 281c <bt_le_scan_update+0x14>
		return 0;
    2818:	2000      	movs	r0, #0
    281a:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    281c:	2108      	movs	r1, #8
    281e:	4812      	ldr	r0, [pc, #72]	; (2868 <bt_le_scan_update+0x60>)
    2820:	f7ff fd62 	bl	22e8 <atomic_test_bit>
    2824:	b9d0      	cbnz	r0, 285c <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    2826:	2101      	movs	r1, #1
    2828:	2000      	movs	r0, #0
    282a:	f001 fec3 	bl	45b4 <bt_conn_lookup_state_le>
		if (!conn) {
    282e:	4604      	mov	r4, r0
    2830:	2800      	cmp	r0, #0
    2832:	d0f1      	beq.n	2818 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2834:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2838:	480b      	ldr	r0, [pc, #44]	; (2868 <bt_le_scan_update+0x60>)
    283a:	f7ff fcbc 	bl	21b6 <atomic_or>
		bt_conn_unref(conn);
    283e:	4620      	mov	r0, r4
    2840:	f001 fed6 	bl	45f0 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    2844:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2846:	bf15      	itete	ne
    2848:	2230      	movne	r2, #48	; 0x30
    284a:	2212      	moveq	r2, #18
    284c:	2160      	movne	r1, #96	; 0x60
    284e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    2852:	2000      	movs	r0, #0
}
    2854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2858:	f7ff bf86 	b.w	2768 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    285c:	4610      	mov	r0, r2
    285e:	f7ff fde9 	bl	2434 <set_le_scan_enable>
		if (err) {
    2862:	2800      	cmp	r0, #0
    2864:	d0df      	beq.n	2826 <bt_le_scan_update+0x1e>
    2866:	bd38      	pop	{r3, r4, r5, pc}
    2868:	20003ad0 	.word	0x20003ad0

0000286c <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2870:	4d4e      	ldr	r5, [pc, #312]	; (29ac <bt_init+0x140>)
    2872:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    2876:	6899      	ldr	r1, [r3, #8]
    2878:	f011 0101 	ands.w	r1, r1, #1
{
    287c:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    287e:	d124      	bne.n	28ca <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2880:	aa0c      	add	r2, sp, #48	; 0x30
    2882:	f640 4003 	movw	r0, #3075	; 0xc03
    2886:	f7ff fd7f 	bl	2388 <bt_hci_cmd_send_sync>
		if (err) {
    288a:	4604      	mov	r4, r0
    288c:	2800      	cmp	r0, #0
    288e:	f040 8089 	bne.w	29a4 <bt_init+0x138>
	u8_t status = buf->data[0];
    2892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2894:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2896:	781b      	ldrb	r3, [r3, #0]
    2898:	b9a3      	cbnz	r3, 28c4 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    289a:	4a45      	ldr	r2, [pc, #276]	; (29b0 <bt_init+0x144>)
    289c:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    289e:	462b      	mov	r3, r5
    28a0:	f3bf 8f5b 	dmb	ish
    28a4:	f853 2f70 	ldr.w	r2, [r3, #112]!
    28a8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    28ac:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    28b0:	f3bf 8f5b 	dmb	ish
    28b4:	e853 1f00 	ldrex	r1, [r3]
    28b8:	e843 2000 	strex	r0, r2, [r3]
    28bc:	2800      	cmp	r0, #0
    28be:	d1f9      	bne.n	28b4 <bt_init+0x48>
    28c0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    28c4:	980c      	ldr	r0, [sp, #48]	; 0x30
    28c6:	f010 fcd1 	bl	1326c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    28ca:	aa0c      	add	r2, sp, #48	; 0x30
    28cc:	2100      	movs	r1, #0
    28ce:	f241 0003 	movw	r0, #4099	; 0x1003
    28d2:	f7ff fd59 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    28d6:	4604      	mov	r4, r0
    28d8:	2800      	cmp	r0, #0
    28da:	d163      	bne.n	29a4 <bt_init+0x138>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    28dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    28de:	4835      	ldr	r0, [pc, #212]	; (29b4 <bt_init+0x148>)
    28e0:	6899      	ldr	r1, [r3, #8]
    28e2:	2208      	movs	r2, #8
    28e4:	3101      	adds	r1, #1
    28e6:	f7ff fa9d 	bl	1e24 <memcpy>
	net_buf_unref(rsp);
    28ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    28ec:	f010 fcbe 	bl	1326c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    28f0:	4621      	mov	r1, r4
    28f2:	aa0c      	add	r2, sp, #48	; 0x30
    28f4:	f241 0001 	movw	r0, #4097	; 0x1001
    28f8:	f7ff fd46 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    28fc:	4604      	mov	r4, r0
    28fe:	2800      	cmp	r0, #0
    2900:	d150      	bne.n	29a4 <bt_init+0x138>
	read_local_ver_complete(rsp);
    2902:	980c      	ldr	r0, [sp, #48]	; 0x30
    2904:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2906:	785a      	ldrb	r2, [r3, #1]
    2908:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    290a:	78d9      	ldrb	r1, [r3, #3]
    290c:	789a      	ldrb	r2, [r3, #2]
    290e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2912:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2914:	791a      	ldrb	r2, [r3, #4]
    2916:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2918:	7a19      	ldrb	r1, [r3, #8]
    291a:	79da      	ldrb	r2, [r3, #7]
    291c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2920:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2922:	795a      	ldrb	r2, [r3, #5]
    2924:	799b      	ldrb	r3, [r3, #6]
    2926:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    292a:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    292c:	f010 fc9e 	bl	1326c <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2930:	2103      	movs	r1, #3
    2932:	4821      	ldr	r0, [pc, #132]	; (29b8 <bt_init+0x14c>)
    2934:	f7ff fcd8 	bl	22e8 <atomic_test_bit>
    2938:	4601      	mov	r1, r0
    293a:	b990      	cbnz	r0, 2962 <bt_init+0xf6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    293c:	aa0c      	add	r2, sp, #48	; 0x30
    293e:	f241 0009 	movw	r0, #4105	; 0x1009
    2942:	f7ff fd21 	bl	2388 <bt_hci_cmd_send_sync>
		if (err) {
    2946:	4604      	mov	r4, r0
    2948:	2800      	cmp	r0, #0
    294a:	d12b      	bne.n	29a4 <bt_init+0x138>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    294c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    294e:	481b      	ldr	r0, [pc, #108]	; (29bc <bt_init+0x150>)
    2950:	6899      	ldr	r1, [r3, #8]
    2952:	2206      	movs	r2, #6
    2954:	3101      	adds	r1, #1
    2956:	f7ff fa65 	bl	1e24 <memcpy>
		net_buf_unref(rsp);
    295a:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    295c:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    295e:	f010 fc85 	bl	1326c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2962:	aa0c      	add	r2, sp, #48	; 0x30
    2964:	2100      	movs	r1, #0
    2966:	f241 0002 	movw	r0, #4098	; 0x1002
    296a:	f7ff fd0d 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    296e:	4604      	mov	r4, r0
    2970:	b9c0      	cbnz	r0, 29a4 <bt_init+0x138>
	memcpy(bt_dev.supported_commands, rp->commands,
    2972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2974:	4812      	ldr	r0, [pc, #72]	; (29c0 <bt_init+0x154>)
    2976:	6899      	ldr	r1, [r3, #8]
    2978:	2240      	movs	r2, #64	; 0x40
    297a:	3101      	adds	r1, #1
    297c:	f7ff fa52 	bl	1e24 <memcpy>
	net_buf_unref(rsp);
    2980:	980c      	ldr	r0, [sp, #48]	; 0x30
    2982:	f010 fc73 	bl	1326c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2986:	7eab      	ldrb	r3, [r5, #26]
    2988:	065a      	lsls	r2, r3, #25
    298a:	d427      	bmi.n	29dc <bt_init+0x170>
		BT_ERR("Non-LE capable controller detected!");
    298c:	4b0d      	ldr	r3, [pc, #52]	; (29c4 <bt_init+0x158>)
    298e:	9301      	str	r3, [sp, #4]
    2990:	9300      	str	r3, [sp, #0]
    2992:	4b0d      	ldr	r3, [pc, #52]	; (29c8 <bt_init+0x15c>)
    2994:	4a0d      	ldr	r2, [pc, #52]	; (29cc <bt_init+0x160>)
    2996:	681c      	ldr	r4, [r3, #0]
    2998:	490d      	ldr	r1, [pc, #52]	; (29d0 <bt_init+0x164>)
    299a:	4b0e      	ldr	r3, [pc, #56]	; (29d4 <bt_init+0x168>)
    299c:	480e      	ldr	r0, [pc, #56]	; (29d8 <bt_init+0x16c>)
    299e:	47a0      	blx	r4
		return -ENODEV;
    29a0:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    29a4:	4620      	mov	r0, r4
    29a6:	b00e      	add	sp, #56	; 0x38
    29a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29ac:	20003a60 	.word	0x20003a60
    29b0:	200002d8 	.word	0x200002d8
    29b4:	20003a76 	.word	0x20003a76
    29b8:	20003ad0 	.word	0x20003ad0
    29bc:	20003a61 	.word	0x20003a61
    29c0:	20003a7e 	.word	0x20003a7e
    29c4:	0001563e 	.word	0x0001563e
    29c8:	20003a5c 	.word	0x20003a5c
    29cc:	000167b9 	.word	0x000167b9
    29d0:	00016808 	.word	0x00016808
    29d4:	00016021 	.word	0x00016021
    29d8:	00016274 	.word	0x00016274
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    29dc:	4621      	mov	r1, r4
    29de:	aa0c      	add	r2, sp, #48	; 0x30
    29e0:	f242 0003 	movw	r0, #8195	; 0x2003
    29e4:	f7ff fcd0 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    29e8:	4604      	mov	r4, r0
    29ea:	2800      	cmp	r0, #0
    29ec:	d1da      	bne.n	29a4 <bt_init+0x138>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    29ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    29f0:	489c      	ldr	r0, [pc, #624]	; (2c64 <bt_init+0x3f8>)
    29f2:	6899      	ldr	r1, [r3, #8]
    29f4:	2208      	movs	r2, #8
    29f6:	3101      	adds	r1, #1
    29f8:	f7ff fa14 	bl	1e24 <memcpy>
	net_buf_unref(rsp);
    29fc:	980c      	ldr	r0, [sp, #48]	; 0x30
    29fe:	f010 fc35 	bl	1326c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2a02:	4621      	mov	r1, r4
    2a04:	aa0c      	add	r2, sp, #48	; 0x30
    2a06:	f242 0002 	movw	r0, #8194	; 0x2002
    2a0a:	f7ff fcbd 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    2a0e:	4604      	mov	r4, r0
    2a10:	2800      	cmp	r0, #0
    2a12:	d1c7      	bne.n	29a4 <bt_init+0x138>
    2a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a16:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2a18:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    2a1c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2a20:	b13a      	cbz	r2, 2a32 <bt_init+0x1c6>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2a22:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2a24:	4890      	ldr	r0, [pc, #576]	; (2c68 <bt_init+0x3fc>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2a26:	2a02      	cmp	r2, #2
    2a28:	bf28      	it	cs
    2a2a:	2202      	movcs	r2, #2
    2a2c:	4611      	mov	r1, r2
    2a2e:	f011 fe01 	bl	14634 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2a32:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a34:	f010 fc1a 	bl	1326c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2a38:	7eac      	ldrb	r4, [r5, #26]
    2a3a:	f014 0420 	ands.w	r4, r4, #32
    2a3e:	f000 80c9 	beq.w	2bd4 <bt_init+0x368>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2a42:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2a46:	071b      	lsls	r3, r3, #28
    2a48:	d513      	bpl.n	2a72 <bt_init+0x206>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2a4a:	aa0c      	add	r2, sp, #48	; 0x30
    2a4c:	2100      	movs	r1, #0
    2a4e:	f242 001c 	movw	r0, #8220	; 0x201c
    2a52:	f7ff fc99 	bl	2388 <bt_hci_cmd_send_sync>
		if (err) {
    2a56:	4604      	mov	r4, r0
    2a58:	2800      	cmp	r0, #0
    2a5a:	d1a3      	bne.n	29a4 <bt_init+0x138>
		le_read_supp_states_complete(rsp);
    2a5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2a5e:	6883      	ldr	r3, [r0, #8]
    2a60:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2a64:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2a66:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2a6a:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2a6e:	f010 fbfd 	bl	1326c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2a72:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2a76:	069f      	lsls	r7, r3, #26
    2a78:	f100 80c8 	bmi.w	2c0c <bt_init+0x3a0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2a7c:	2108      	movs	r1, #8
    2a7e:	f242 0001 	movw	r0, #8193	; 0x2001
    2a82:	f7ff fc3f 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    2a86:	4604      	mov	r4, r0
    2a88:	2800      	cmp	r0, #0
    2a8a:	f000 80aa 	beq.w	2be2 <bt_init+0x376>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2a8e:	2108      	movs	r1, #8
    2a90:	4408      	add	r0, r1
    2a92:	f010 fc1d 	bl	132d0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2a96:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    2a9a:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2a9c:	bf4c      	ite	mi
    2a9e:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2aa0:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2aa2:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2aa4:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2aa8:	bf48      	it	mi
    2aaa:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2aae:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2ab2:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    2ab6:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2aba:	bf18      	it	ne
    2abc:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2ac0:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2ac2:	bf08      	it	eq
    2ac4:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2ac8:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2aca:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2ace:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2ad0:	2200      	movs	r2, #0
    2ad2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2ad4:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2ad6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2ad8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2ada:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2adc:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2ade:	4621      	mov	r1, r4
    2ae0:	f242 0001 	movw	r0, #8193	; 0x2001
    2ae4:	f7ff fc50 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    2ae8:	4604      	mov	r4, r0
    2aea:	2800      	cmp	r0, #0
    2aec:	f47f af5a 	bne.w	29a4 <bt_init+0x138>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2af0:	7eab      	ldrb	r3, [r5, #26]
    2af2:	069a      	lsls	r2, r3, #26
    2af4:	d421      	bmi.n	2b3a <bt_init+0x2ce>
	if (bt_dev.le.mtu) {
    2af6:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    2afa:	b9f1      	cbnz	r1, 2b3a <bt_init+0x2ce>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2afc:	aa0c      	add	r2, sp, #48	; 0x30
    2afe:	f241 0005 	movw	r0, #4101	; 0x1005
    2b02:	f7ff fc41 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    2b06:	4604      	mov	r4, r0
    2b08:	2800      	cmp	r0, #0
    2b0a:	f47f af4b 	bne.w	29a4 <bt_init+0x138>
	if (bt_dev.le.mtu) {
    2b0e:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2b12:	b97b      	cbnz	r3, 2b34 <bt_init+0x2c8>
    2b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b16:	4854      	ldr	r0, [pc, #336]	; (2c68 <bt_init+0x3fc>)
    2b18:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2b1a:	7899      	ldrb	r1, [r3, #2]
    2b1c:	785a      	ldrb	r2, [r3, #1]
    2b1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2b22:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2b26:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2b28:	2a02      	cmp	r2, #2
    2b2a:	bf28      	it	cs
    2b2c:	2202      	movcs	r2, #2
    2b2e:	4611      	mov	r1, r2
    2b30:	f011 fd80 	bl	14634 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2b34:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b36:	f010 fb99 	bl	1326c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2b3a:	2108      	movs	r1, #8
    2b3c:	f640 4001 	movw	r0, #3073	; 0xc01
    2b40:	f7ff fbe0 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    2b44:	4604      	mov	r4, r0
    2b46:	2800      	cmp	r0, #0
    2b48:	d04b      	beq.n	2be2 <bt_init+0x376>
	ev = net_buf_add(buf, sizeof(*ev));
    2b4a:	2108      	movs	r1, #8
    2b4c:	4408      	add	r0, r1
    2b4e:	f010 fbbf 	bl	132d0 <net_buf_simple_add>
	dst[0] = val;
    2b52:	2310      	movs	r3, #16
    2b54:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2b56:	2388      	movs	r3, #136	; 0x88
    2b58:	7043      	strb	r3, [r0, #1]
    2b5a:	2302      	movs	r3, #2
	dst[0] = val;
    2b5c:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2b5e:	70c3      	strb	r3, [r0, #3]
    2b60:	2320      	movs	r3, #32
	dst[0] = val;
    2b62:	7082      	strb	r2, [r0, #2]
    2b64:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2b66:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2b68:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2b6a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2b6c:	4621      	mov	r1, r4
    2b6e:	f640 4001 	movw	r0, #3073	; 0xc01
    2b72:	f7ff fc09 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    2b76:	4604      	mov	r4, r0
    2b78:	2800      	cmp	r0, #0
    2b7a:	f47f af13 	bne.w	29a4 <bt_init+0x138>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2b7e:	4601      	mov	r1, r0
    2b80:	aa0c      	add	r2, sp, #48	; 0x30
    2b82:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2b86:	f7ff fbff 	bl	2388 <bt_hci_cmd_send_sync>
    2b8a:	4f38      	ldr	r7, [pc, #224]	; (2c6c <bt_init+0x400>)
    2b8c:	4e38      	ldr	r6, [pc, #224]	; (2c70 <bt_init+0x404>)
	if (err) {
    2b8e:	2800      	cmp	r0, #0
    2b90:	d07e      	beq.n	2c90 <bt_init+0x424>
		BT_WARN("Vendor HCI extensions not available");
    2b92:	9601      	str	r6, [sp, #4]
    2b94:	9600      	str	r6, [sp, #0]
    2b96:	683c      	ldr	r4, [r7, #0]
    2b98:	4b36      	ldr	r3, [pc, #216]	; (2c74 <bt_init+0x408>)
    2b9a:	4a37      	ldr	r2, [pc, #220]	; (2c78 <bt_init+0x40c>)
    2b9c:	4937      	ldr	r1, [pc, #220]	; (2c7c <bt_init+0x410>)
    2b9e:	4838      	ldr	r0, [pc, #224]	; (2c80 <bt_init+0x414>)
		BT_WARN("Failed to read supported vendor commands");
    2ba0:	47a0      	blx	r4
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2ba2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2ba4:	2207      	movs	r2, #7
    2ba6:	a90c      	add	r1, sp, #48	; 0x30
    2ba8:	4836      	ldr	r0, [pc, #216]	; (2c84 <bt_init+0x418>)
    2baa:	930c      	str	r3, [sp, #48]	; 0x30
    2bac:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2bb0:	f7ff f923 	bl	1dfa <memcmp>
    2bb4:	2800      	cmp	r0, #0
    2bb6:	f040 80ea 	bne.w	2d8e <bt_init+0x522>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2bba:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2bbe:	07db      	lsls	r3, r3, #31
    2bc0:	f100 8106 	bmi.w	2dd0 <bt_init+0x564>
		BT_WARN("Read Static Addresses command not available");
    2bc4:	9601      	str	r6, [sp, #4]
    2bc6:	9600      	str	r6, [sp, #0]
    2bc8:	683c      	ldr	r4, [r7, #0]
    2bca:	4b2f      	ldr	r3, [pc, #188]	; (2c88 <bt_init+0x41c>)
    2bcc:	4a2a      	ldr	r2, [pc, #168]	; (2c78 <bt_init+0x40c>)
    2bce:	492b      	ldr	r1, [pc, #172]	; (2c7c <bt_init+0x410>)
    2bd0:	482e      	ldr	r0, [pc, #184]	; (2c8c <bt_init+0x420>)
    2bd2:	e10b      	b.n	2dec <bt_init+0x580>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2bd4:	2102      	movs	r1, #2
    2bd6:	f640 406d 	movw	r0, #3181	; 0xc6d
    2bda:	f7ff fb93 	bl	2304 <bt_hci_cmd_create>
		if (!buf) {
    2bde:	4606      	mov	r6, r0
    2be0:	b910      	cbnz	r0, 2be8 <bt_init+0x37c>
		return -ENOBUFS;
    2be2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2be6:	e6dd      	b.n	29a4 <bt_init+0x138>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2be8:	2102      	movs	r1, #2
    2bea:	3008      	adds	r0, #8
    2bec:	f010 fb70 	bl	132d0 <net_buf_simple_add>
		cp_le->le = 0x01;
    2bf0:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2bf2:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2bf4:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2bf6:	4622      	mov	r2, r4
    2bf8:	4631      	mov	r1, r6
    2bfa:	f640 406d 	movw	r0, #3181	; 0xc6d
    2bfe:	f7ff fbc3 	bl	2388 <bt_hci_cmd_send_sync>
		if (err) {
    2c02:	4604      	mov	r4, r0
    2c04:	2800      	cmp	r0, #0
    2c06:	f43f af1c 	beq.w	2a42 <bt_init+0x1d6>
    2c0a:	e6cb      	b.n	29a4 <bt_init+0x138>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2c0c:	aa0c      	add	r2, sp, #48	; 0x30
    2c0e:	2100      	movs	r1, #0
    2c10:	f242 002f 	movw	r0, #8239	; 0x202f
    2c14:	f7ff fbb8 	bl	2388 <bt_hci_cmd_send_sync>
		if (err) {
    2c18:	4604      	mov	r4, r0
    2c1a:	2800      	cmp	r0, #0
    2c1c:	f47f aec2 	bne.w	29a4 <bt_init+0x138>
		rp = (void *)rsp->data;
    2c20:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c22:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2c24:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2c28:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    2c2c:	f010 fb1e 	bl	1326c <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2c30:	2104      	movs	r1, #4
    2c32:	f242 0024 	movw	r0, #8228	; 0x2024
    2c36:	f7ff fb65 	bl	2304 <bt_hci_cmd_create>
		if (!buf) {
    2c3a:	4606      	mov	r6, r0
    2c3c:	2800      	cmp	r0, #0
    2c3e:	d0d0      	beq.n	2be2 <bt_init+0x376>
		cp = net_buf_add(buf, sizeof(*cp));
    2c40:	2104      	movs	r1, #4
    2c42:	3008      	adds	r0, #8
    2c44:	f010 fb44 	bl	132d0 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2c48:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2c4a:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2c4e:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2c50:	4631      	mov	r1, r6
    2c52:	f242 0024 	movw	r0, #8228	; 0x2024
    2c56:	f7ff fb97 	bl	2388 <bt_hci_cmd_send_sync>
		if (err) {
    2c5a:	4604      	mov	r4, r0
    2c5c:	2800      	cmp	r0, #0
    2c5e:	f43f af0d 	beq.w	2a7c <bt_init+0x210>
    2c62:	e69f      	b.n	29a4 <bt_init+0x138>
    2c64:	20003ad8 	.word	0x20003ad8
    2c68:	20003aec 	.word	0x20003aec
    2c6c:	20003a5c 	.word	0x20003a5c
    2c70:	0001563e 	.word	0x0001563e
    2c74:	0001605b 	.word	0x0001605b
    2c78:	00016801 	.word	0x00016801
    2c7c:	00016808 	.word	0x00016808
    2c80:	000162a8 	.word	0x000162a8
    2c84:	20003a60 	.word	0x20003a60
    2c88:	0001603c 	.word	0x0001603c
    2c8c:	00016445 	.word	0x00016445
	rp.info = (void *)rsp->data;
    2c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2c92:	f8d7 8000 	ldr.w	r8, [r7]
	rp.info = (void *)rsp->data;
    2c96:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2c98:	4972      	ldr	r1, [pc, #456]	; (2e64 <bt_init+0x5f8>)
    2c9a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2c9e:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2ca0:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2ca2:	bf96      	itet	ls
    2ca4:	4a70      	ldrls	r2, [pc, #448]	; (2e68 <bt_init+0x5fc>)
	return "unknown";
    2ca6:	4a71      	ldrhi	r2, [pc, #452]	; (2e6c <bt_init+0x600>)
		return plat_str[platform];
    2ca8:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2cac:	9201      	str	r2, [sp, #4]
    2cae:	4b70      	ldr	r3, [pc, #448]	; (2e70 <bt_init+0x604>)
    2cb0:	4a70      	ldr	r2, [pc, #448]	; (2e74 <bt_init+0x608>)
    2cb2:	9603      	str	r6, [sp, #12]
    2cb4:	9600      	str	r6, [sp, #0]
    2cb6:	4870      	ldr	r0, [pc, #448]	; (2e78 <bt_init+0x60c>)
    2cb8:	47c0      	blx	r8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2cba:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2cbe:	f8d7 8000 	ldr.w	r8, [r7]
    2cc2:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2cc6:	2b02      	cmp	r3, #2
    2cc8:	d13b      	bne.n	2d42 <bt_init+0x4d6>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2cca:	2a02      	cmp	r2, #2
    2ccc:	d839      	bhi.n	2d42 <bt_init+0x4d6>
		return nordic_str[variant];
    2cce:	4b6b      	ldr	r3, [pc, #428]	; (2e7c <bt_init+0x610>)
    2cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2cd4:	9202      	str	r2, [sp, #8]
    2cd6:	9301      	str	r3, [sp, #4]
    2cd8:	4a66      	ldr	r2, [pc, #408]	; (2e74 <bt_init+0x608>)
    2cda:	4b65      	ldr	r3, [pc, #404]	; (2e70 <bt_init+0x604>)
    2cdc:	4961      	ldr	r1, [pc, #388]	; (2e64 <bt_init+0x5f8>)
    2cde:	4868      	ldr	r0, [pc, #416]	; (2e80 <bt_init+0x614>)
    2ce0:	9603      	str	r6, [sp, #12]
    2ce2:	9600      	str	r6, [sp, #0]
    2ce4:	47c0      	blx	r8
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2ce6:	7963      	ldrb	r3, [r4, #5]
    2ce8:	f8d7 8000 	ldr.w	r8, [r7]
    2cec:	9606      	str	r6, [sp, #24]
    2cee:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2cf2:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2cf4:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2cf6:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2cfa:	bf98      	it	ls
    2cfc:	4a61      	ldrls	r2, [pc, #388]	; (2e84 <bt_init+0x618>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2cfe:	9104      	str	r1, [sp, #16]
    2d00:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2d02:	bf94      	ite	ls
    2d04:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2d08:	4a58      	ldrhi	r2, [pc, #352]	; (2e6c <bt_init+0x600>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d0a:	9103      	str	r1, [sp, #12]
    2d0c:	9302      	str	r3, [sp, #8]
    2d0e:	4955      	ldr	r1, [pc, #340]	; (2e64 <bt_init+0x5f8>)
    2d10:	4b57      	ldr	r3, [pc, #348]	; (2e70 <bt_init+0x604>)
    2d12:	9201      	str	r2, [sp, #4]
    2d14:	485c      	ldr	r0, [pc, #368]	; (2e88 <bt_init+0x61c>)
    2d16:	4a57      	ldr	r2, [pc, #348]	; (2e74 <bt_init+0x608>)
    2d18:	9600      	str	r6, [sp, #0]
    2d1a:	47c0      	blx	r8
	net_buf_unref(rsp);
    2d1c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d1e:	f010 faa5 	bl	1326c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2d22:	aa0c      	add	r2, sp, #48	; 0x30
    2d24:	2100      	movs	r1, #0
    2d26:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2d2a:	f7ff fb2d 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    2d2e:	4604      	mov	r4, r0
    2d30:	b148      	cbz	r0, 2d46 <bt_init+0x4da>
		BT_WARN("Failed to read supported vendor features");
    2d32:	9601      	str	r6, [sp, #4]
    2d34:	9600      	str	r6, [sp, #0]
    2d36:	683c      	ldr	r4, [r7, #0]
    2d38:	4b4d      	ldr	r3, [pc, #308]	; (2e70 <bt_init+0x604>)
    2d3a:	4a54      	ldr	r2, [pc, #336]	; (2e8c <bt_init+0x620>)
    2d3c:	4949      	ldr	r1, [pc, #292]	; (2e64 <bt_init+0x5f8>)
    2d3e:	4854      	ldr	r0, [pc, #336]	; (2e90 <bt_init+0x624>)
    2d40:	e72e      	b.n	2ba0 <bt_init+0x334>
		return "unknown";
    2d42:	4b4a      	ldr	r3, [pc, #296]	; (2e6c <bt_init+0x600>)
    2d44:	e7c6      	b.n	2cd4 <bt_init+0x468>
	rp.cmds = (void *)rsp->data;
    2d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2d48:	4852      	ldr	r0, [pc, #328]	; (2e94 <bt_init+0x628>)
    2d4a:	6899      	ldr	r1, [r3, #8]
    2d4c:	2202      	movs	r2, #2
    2d4e:	3101      	adds	r1, #1
    2d50:	f7ff f868 	bl	1e24 <memcpy>
	net_buf_unref(rsp);
    2d54:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d56:	f010 fa89 	bl	1326c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2d5a:	aa0c      	add	r2, sp, #48	; 0x30
    2d5c:	4621      	mov	r1, r4
    2d5e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2d62:	f7ff fb11 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    2d66:	b138      	cbz	r0, 2d78 <bt_init+0x50c>
		BT_WARN("Failed to read supported vendor commands");
    2d68:	9601      	str	r6, [sp, #4]
    2d6a:	9600      	str	r6, [sp, #0]
    2d6c:	683c      	ldr	r4, [r7, #0]
    2d6e:	4b40      	ldr	r3, [pc, #256]	; (2e70 <bt_init+0x604>)
    2d70:	4a46      	ldr	r2, [pc, #280]	; (2e8c <bt_init+0x620>)
    2d72:	493c      	ldr	r1, [pc, #240]	; (2e64 <bt_init+0x5f8>)
    2d74:	4848      	ldr	r0, [pc, #288]	; (2e98 <bt_init+0x62c>)
    2d76:	e713      	b.n	2ba0 <bt_init+0x334>
	rp.feat = (void *)rsp->data;
    2d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2d7a:	4848      	ldr	r0, [pc, #288]	; (2e9c <bt_init+0x630>)
    2d7c:	6899      	ldr	r1, [r3, #8]
    2d7e:	2201      	movs	r2, #1
    2d80:	4411      	add	r1, r2
    2d82:	f7ff f84f 	bl	1e24 <memcpy>
	net_buf_unref(rsp);
    2d86:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d88:	f010 fa70 	bl	1326c <net_buf_unref>
    2d8c:	e709      	b.n	2ba2 <bt_init+0x336>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2d8e:	4b44      	ldr	r3, [pc, #272]	; (2ea0 <bt_init+0x634>)
    2d90:	6818      	ldr	r0, [r3, #0]
    2d92:	889a      	ldrh	r2, [r3, #4]
    2d94:	900a      	str	r0, [sp, #40]	; 0x28
    2d96:	799b      	ldrb	r3, [r3, #6]
    2d98:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2d9c:	a90a      	add	r1, sp, #40	; 0x28
    2d9e:	2207      	movs	r2, #7
    2da0:	4840      	ldr	r0, [pc, #256]	; (2ea4 <bt_init+0x638>)
    2da2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2da6:	f7ff f828 	bl	1dfa <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2daa:	2800      	cmp	r0, #0
    2dac:	f43f af05 	beq.w	2bba <bt_init+0x34e>
		bt_dev_show_info();
    2db0:	f7ff fc42 	bl	2638 <bt_dev_show_info>
		err = bt_conn_init();
    2db4:	f002 f8b0 	bl	4f18 <bt_conn_init>
		if (err) {
    2db8:	4604      	mov	r4, r0
    2dba:	2800      	cmp	r0, #0
    2dbc:	f47f adf2 	bne.w	29a4 <bt_init+0x138>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2dc0:	2102      	movs	r1, #2
    2dc2:	4839      	ldr	r0, [pc, #228]	; (2ea8 <bt_init+0x63c>)
    2dc4:	f7ff f9f7 	bl	21b6 <atomic_or>
	bt_le_scan_update(false);
    2dc8:	4620      	mov	r0, r4
    2dca:	f7ff fd1d 	bl	2808 <bt_le_scan_update>
    2dce:	e5e9      	b.n	29a4 <bt_init+0x138>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2dd0:	aa09      	add	r2, sp, #36	; 0x24
    2dd2:	2100      	movs	r1, #0
    2dd4:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2dd8:	f7ff fad6 	bl	2388 <bt_hci_cmd_send_sync>
		if (err) {
    2ddc:	b140      	cbz	r0, 2df0 <bt_init+0x584>
			BT_WARN("Failed to read static addresses");
    2dde:	9601      	str	r6, [sp, #4]
    2de0:	9600      	str	r6, [sp, #0]
    2de2:	683c      	ldr	r4, [r7, #0]
    2de4:	4b31      	ldr	r3, [pc, #196]	; (2eac <bt_init+0x640>)
    2de6:	4a29      	ldr	r2, [pc, #164]	; (2e8c <bt_init+0x620>)
    2de8:	491e      	ldr	r1, [pc, #120]	; (2e64 <bt_init+0x5f8>)
    2dea:	4831      	ldr	r0, [pc, #196]	; (2eb0 <bt_init+0x644>)
		BT_WARN("Read Static Addresses command not available");
    2dec:	47a0      	blx	r4
    2dee:	e026      	b.n	2e3e <bt_init+0x5d2>
		rp = (void *)rsp->data;
    2df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2df2:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2df4:	784b      	ldrb	r3, [r1, #1]
    2df6:	b1bb      	cbz	r3, 2e28 <bt_init+0x5bc>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2df8:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2dfa:	2206      	movs	r2, #6
    2dfc:	3102      	adds	r1, #2
    2dfe:	482d      	ldr	r0, [pc, #180]	; (2eb4 <bt_init+0x648>)
    2e00:	702b      	strb	r3, [r5, #0]
    2e02:	f7ff f80f 	bl	1e24 <memcpy>
			net_buf_unref(rsp);
    2e06:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e08:	f010 fa30 	bl	1326c <net_buf_unref>
		return bt_set_static_addr();
    2e0c:	f7ff fbe0 	bl	25d0 <bt_set_static_addr>
    2e10:	4604      	mov	r4, r0
		if (err) {
    2e12:	2800      	cmp	r0, #0
    2e14:	d0cc      	beq.n	2db0 <bt_init+0x544>
			BT_ERR("Unable to set identity address");
    2e16:	9601      	str	r6, [sp, #4]
    2e18:	9600      	str	r6, [sp, #0]
    2e1a:	683d      	ldr	r5, [r7, #0]
    2e1c:	4b26      	ldr	r3, [pc, #152]	; (2eb8 <bt_init+0x64c>)
    2e1e:	4a27      	ldr	r2, [pc, #156]	; (2ebc <bt_init+0x650>)
    2e20:	4910      	ldr	r1, [pc, #64]	; (2e64 <bt_init+0x5f8>)
    2e22:	4827      	ldr	r0, [pc, #156]	; (2ec0 <bt_init+0x654>)
    2e24:	47a8      	blx	r5
    2e26:	e5bd      	b.n	29a4 <bt_init+0x138>
		BT_WARN("No static addresses stored in controller");
    2e28:	9601      	str	r6, [sp, #4]
    2e2a:	9600      	str	r6, [sp, #0]
    2e2c:	4825      	ldr	r0, [pc, #148]	; (2ec4 <bt_init+0x658>)
    2e2e:	683c      	ldr	r4, [r7, #0]
    2e30:	4b1e      	ldr	r3, [pc, #120]	; (2eac <bt_init+0x640>)
    2e32:	4a16      	ldr	r2, [pc, #88]	; (2e8c <bt_init+0x620>)
    2e34:	490b      	ldr	r1, [pc, #44]	; (2e64 <bt_init+0x5f8>)
    2e36:	47a0      	blx	r4
		net_buf_unref(rsp);
    2e38:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e3a:	f010 fa17 	bl	1326c <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2e3e:	4819      	ldr	r0, [pc, #100]	; (2ea4 <bt_init+0x638>)
    2e40:	f7ff fbb8 	bl	25b4 <bt_addr_le_create_static>
		if (err) {
    2e44:	4604      	mov	r4, r0
    2e46:	2800      	cmp	r0, #0
    2e48:	d1e5      	bne.n	2e16 <bt_init+0x5aa>
		BT_WARN("Using temporary static random address %s",
    2e4a:	481a      	ldr	r0, [pc, #104]	; (2eb4 <bt_init+0x648>)
    2e4c:	683c      	ldr	r4, [r7, #0]
    2e4e:	f7ff f86f 	bl	1f30 <bt_addr_str>
    2e52:	9602      	str	r6, [sp, #8]
    2e54:	9001      	str	r0, [sp, #4]
    2e56:	9600      	str	r6, [sp, #0]
    2e58:	4b14      	ldr	r3, [pc, #80]	; (2eac <bt_init+0x640>)
    2e5a:	4a0c      	ldr	r2, [pc, #48]	; (2e8c <bt_init+0x620>)
    2e5c:	4901      	ldr	r1, [pc, #4]	; (2e64 <bt_init+0x5f8>)
    2e5e:	481a      	ldr	r0, [pc, #104]	; (2ec8 <bt_init+0x65c>)
    2e60:	47a0      	blx	r4
    2e62:	e7d3      	b.n	2e0c <bt_init+0x5a0>
    2e64:	00016808 	.word	0x00016808
    2e68:	000169a0 	.word	0x000169a0
    2e6c:	00016a90 	.word	0x00016a90
    2e70:	0001605b 	.word	0x0001605b
    2e74:	000160d9 	.word	0x000160d9
    2e78:	000162dc 	.word	0x000162dc
    2e7c:	00016994 	.word	0x00016994
    2e80:	00016305 	.word	0x00016305
    2e84:	00016a80 	.word	0x00016a80
    2e88:	0001632d 	.word	0x0001632d
    2e8c:	00016801 	.word	0x00016801
    2e90:	0001636a 	.word	0x0001636a
    2e94:	20003abf 	.word	0x20003abf
    2e98:	000163a3 	.word	0x000163a3
    2e9c:	20003abe 	.word	0x20003abe
    2ea0:	00015460 	.word	0x00015460
    2ea4:	20003a60 	.word	0x20003a60
    2ea8:	20003ad0 	.word	0x20003ad0
    2eac:	0001603c 	.word	0x0001603c
    2eb0:	000163dc 	.word	0x000163dc
    2eb4:	20003a61 	.word	0x20003a61
    2eb8:	00016067 	.word	0x00016067
    2ebc:	000167b9 	.word	0x000167b9
    2ec0:	000164ba 	.word	0x000164ba
    2ec4:	0001640c 	.word	0x0001640c
    2ec8:	00016481 	.word	0x00016481

00002ecc <init_work>:

static void init_work(struct k_work *work)
{
    2ecc:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2ece:	f7ff fccd 	bl	286c <bt_init>
	if (ready_cb) {
    2ed2:	4b03      	ldr	r3, [pc, #12]	; (2ee0 <init_work+0x14>)
    2ed4:	681b      	ldr	r3, [r3, #0]
    2ed6:	b113      	cbz	r3, 2ede <init_work+0x12>
		ready_cb(err);
	}
}
    2ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2edc:	4718      	bx	r3
    2ede:	bd10      	pop	{r4, pc}
    2ee0:	200002d4 	.word	0x200002d4

00002ee4 <hci_le_set_phy.isra.29>:
static int hci_le_set_phy(struct bt_conn *conn)
    2ee4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2ee6:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2ee8:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2eea:	f242 0032 	movw	r0, #8242	; 0x2032
    2eee:	f7ff fa09 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    2ef2:	4605      	mov	r5, r0
    2ef4:	b198      	cbz	r0, 2f1e <hci_le_set_phy.isra.29+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2ef6:	2107      	movs	r1, #7
    2ef8:	3008      	adds	r0, #8
    2efa:	f010 f9e9 	bl	132d0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2efe:	8823      	ldrh	r3, [r4, #0]
    2f00:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2f02:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f04:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2f06:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f08:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f0a:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2f0c:	7144      	strb	r4, [r0, #5]
    2f0e:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2f10:	4629      	mov	r1, r5
    2f12:	f242 0032 	movw	r0, #8242	; 0x2032
    2f16:	f7ff fbed 	bl	26f4 <bt_hci_cmd_send>
	return 0;
    2f1a:	4620      	mov	r0, r4
    2f1c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2f1e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2f22:	bd38      	pop	{r3, r4, r5, pc}

00002f24 <hci_le_set_data_len.isra.30>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f26:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2f28:	aa01      	add	r2, sp, #4
    2f2a:	2100      	movs	r1, #0
    2f2c:	f242 002f 	movw	r0, #8239	; 0x202f
    2f30:	f7ff fa2a 	bl	2388 <bt_hci_cmd_send_sync>
	if (err) {
    2f34:	b9d8      	cbnz	r0, 2f6e <hci_le_set_data_len.isra.30+0x4a>
	rp = (void *)rsp->data;
    2f36:	9801      	ldr	r0, [sp, #4]
    2f38:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2f3a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2f3e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2f42:	f010 f993 	bl	1326c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2f46:	2106      	movs	r1, #6
    2f48:	f242 0022 	movw	r0, #8226	; 0x2022
    2f4c:	f7ff f9da 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    2f50:	4604      	mov	r4, r0
    2f52:	b170      	cbz	r0, 2f72 <hci_le_set_data_len.isra.30+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2f54:	2106      	movs	r1, #6
    2f56:	3008      	adds	r0, #8
    2f58:	f010 f9ba 	bl	132d0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2f5c:	883b      	ldrh	r3, [r7, #0]
    2f5e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2f60:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2f62:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2f64:	4621      	mov	r1, r4
    2f66:	f242 0022 	movw	r0, #8226	; 0x2022
    2f6a:	f7ff fbc3 	bl	26f4 <bt_hci_cmd_send>
}
    2f6e:	b003      	add	sp, #12
    2f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2f72:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2f76:	e7fa      	b.n	2f6e <hci_le_set_data_len.isra.30+0x4a>

00002f78 <le_enh_conn_complete>:
{
    2f78:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2f7a:	7803      	ldrb	r3, [r0, #0]
{
    2f7c:	b089      	sub	sp, #36	; 0x24
    2f7e:	4605      	mov	r5, r0
	if (evt->status) {
    2f80:	b17b      	cbz	r3, 2fa2 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2f82:	2102      	movs	r1, #2
    2f84:	2000      	movs	r0, #0
    2f86:	f001 fb15 	bl	45b4 <bt_conn_lookup_state_le>
		if (!conn) {
    2f8a:	4604      	mov	r4, r0
    2f8c:	b138      	cbz	r0, 2f9e <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2f8e:	782b      	ldrb	r3, [r5, #0]
    2f90:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2f92:	2100      	movs	r1, #0
    2f94:	f001 fc00 	bl	4798 <bt_conn_set_state>
		bt_conn_unref(conn);
    2f98:	4620      	mov	r0, r4
    2f9a:	f001 fb29 	bl	45f0 <bt_conn_unref>
}
    2f9e:	b009      	add	sp, #36	; 0x24
    2fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2fa2:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2fa4:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2fa8:	4621      	mov	r1, r4
    2faa:	a806      	add	r0, sp, #24
    2fac:	f7ff f900 	bl	21b0 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2fb0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2fb4:	3b02      	subs	r3, #2
    2fb6:	b2db      	uxtb	r3, r3
    2fb8:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2fba:	b2b7      	uxth	r7, r6
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2fbc:	d82a      	bhi.n	3014 <le_enh_conn_complete+0x9c>
    2fbe:	2206      	movs	r2, #6
    2fc0:	f105 0111 	add.w	r1, r5, #17
    2fc4:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2fc8:	f88d 3018 	strb.w	r3, [sp, #24]
    2fcc:	f7fe ff2a 	bl	1e24 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2fd0:	2301      	movs	r3, #1
    2fd2:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2fd6:	2102      	movs	r1, #2
    2fd8:	a806      	add	r0, sp, #24
    2fda:	f001 faeb 	bl	45b4 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2fde:	78eb      	ldrb	r3, [r5, #3]
    2fe0:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2fe2:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2fe4:	d109      	bne.n	2ffa <le_enh_conn_complete+0x82>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2fe6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2fea:	484a      	ldr	r0, [pc, #296]	; (3114 <le_enh_conn_complete+0x19c>)
    2fec:	f7ff f8f4 	bl	21d8 <atomic_and>
		if (!conn) {
    2ff0:	b9ac      	cbnz	r4, 301e <le_enh_conn_complete+0xa6>
			conn = bt_conn_add_le(&id_addr);
    2ff2:	a806      	add	r0, sp, #24
    2ff4:	f001 fa2e 	bl	4454 <bt_conn_add_le>
    2ff8:	4604      	mov	r4, r0
	if (!conn) {
    2ffa:	b984      	cbnz	r4, 301e <le_enh_conn_complete+0xa6>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2ffc:	4b46      	ldr	r3, [pc, #280]	; (3118 <le_enh_conn_complete+0x1a0>)
    2ffe:	9302      	str	r3, [sp, #8]
    3000:	e88d 0088 	stmia.w	sp, {r3, r7}
    3004:	4b45      	ldr	r3, [pc, #276]	; (311c <le_enh_conn_complete+0x1a4>)
    3006:	4a46      	ldr	r2, [pc, #280]	; (3120 <le_enh_conn_complete+0x1a8>)
    3008:	681c      	ldr	r4, [r3, #0]
    300a:	4946      	ldr	r1, [pc, #280]	; (3124 <le_enh_conn_complete+0x1ac>)
    300c:	4b46      	ldr	r3, [pc, #280]	; (3128 <le_enh_conn_complete+0x1b0>)
    300e:	4847      	ldr	r0, [pc, #284]	; (312c <le_enh_conn_complete+0x1b4>)
    3010:	47a0      	blx	r4
		return;
    3012:	e7c4      	b.n	2f9e <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    3014:	4621      	mov	r1, r4
    3016:	a804      	add	r0, sp, #16
    3018:	f7ff f8ca 	bl	21b0 <bt_addr_le_copy>
    301c:	e7db      	b.n	2fd6 <le_enh_conn_complete+0x5e>
	conn->handle   = handle;
    301e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3020:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    3022:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3026:	f7ff f8c3 	bl	21b0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    302a:	7e2a      	ldrb	r2, [r5, #24]
    302c:	7deb      	ldrb	r3, [r5, #23]
    302e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3032:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3036:	7eaa      	ldrb	r2, [r5, #26]
    3038:	7e6b      	ldrb	r3, [r5, #25]
    303a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    303e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3042:	7eeb      	ldrb	r3, [r5, #27]
    3044:	7f2a      	ldrb	r2, [r5, #28]
    3046:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    304a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    304e:	78ee      	ldrb	r6, [r5, #3]
    3050:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    3052:	2e01      	cmp	r6, #1
    3054:	d11a      	bne.n	308c <le_enh_conn_complete+0x114>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3056:	4f36      	ldr	r7, [pc, #216]	; (3130 <le_enh_conn_complete+0x1b8>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    3058:	a904      	add	r1, sp, #16
    305a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    305e:	f7ff f8a7 	bl	21b0 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3062:	4639      	mov	r1, r7
    3064:	f104 0052 	add.w	r0, r4, #82	; 0x52
    3068:	f7ff f8a2 	bl	21b0 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    306c:	2107      	movs	r1, #7
    306e:	f107 0070 	add.w	r0, r7, #112	; 0x70
    3072:	f7ff f939 	bl	22e8 <atomic_test_bit>
    3076:	b148      	cbz	r0, 308c <le_enh_conn_complete+0x114>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    3078:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    307c:	2200      	movs	r2, #0
    307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3082:	4313      	orrs	r3, r2
    3084:	d002      	beq.n	308c <le_enh_conn_complete+0x114>
			set_advertise_enable(true);
    3086:	4630      	mov	r0, r6
    3088:	f7ff fa4a 	bl	2520 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    308c:	2103      	movs	r1, #3
    308e:	4620      	mov	r0, r4
    3090:	f001 fb82 	bl	4798 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    3094:	7a63      	ldrb	r3, [r4, #9]
    3096:	2b03      	cmp	r3, #3
    3098:	d118      	bne.n	30cc <le_enh_conn_complete+0x154>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    309a:	78eb      	ldrb	r3, [r5, #3]
    309c:	b123      	cbz	r3, 30a8 <le_enh_conn_complete+0x130>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    309e:	4b24      	ldr	r3, [pc, #144]	; (3130 <le_enh_conn_complete+0x1b8>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    30a0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    30a4:	0719      	lsls	r1, r3, #28
    30a6:	d518      	bpl.n	30da <le_enh_conn_complete+0x162>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    30a8:	2102      	movs	r1, #2
    30aa:	f242 0016 	movw	r0, #8214	; 0x2016
    30ae:	f7ff f929 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    30b2:	4605      	mov	r5, r0
    30b4:	b188      	cbz	r0, 30da <le_enh_conn_complete+0x162>
	cp = net_buf_add(buf, sizeof(*cp));
    30b6:	2102      	movs	r1, #2
    30b8:	3008      	adds	r0, #8
    30ba:	f010 f909 	bl	132d0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    30be:	8823      	ldrh	r3, [r4, #0]
    30c0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    30c2:	4629      	mov	r1, r5
    30c4:	f242 0016 	movw	r0, #8214	; 0x2016
    30c8:	f7ff fb14 	bl	26f4 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    30cc:	4620      	mov	r0, r4
    30ce:	f001 fa8f 	bl	45f0 <bt_conn_unref>
	bt_le_scan_update(false);
    30d2:	2000      	movs	r0, #0
    30d4:	f7ff fb98 	bl	2808 <bt_le_scan_update>
    30d8:	e761      	b.n	2f9e <le_enh_conn_complete+0x26>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    30da:	4d15      	ldr	r5, [pc, #84]	; (3130 <le_enh_conn_complete+0x1b8>)
    30dc:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    30e0:	07d2      	lsls	r2, r2, #31
    30e2:	d508      	bpl.n	30f6 <le_enh_conn_complete+0x17e>
		err = hci_le_set_phy(conn);
    30e4:	4620      	mov	r0, r4
    30e6:	f7ff fefd 	bl	2ee4 <hci_le_set_phy.isra.29>
		if (!err) {
    30ea:	b920      	cbnz	r0, 30f6 <le_enh_conn_complete+0x17e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    30ec:	2180      	movs	r1, #128	; 0x80
    30ee:	1d20      	adds	r0, r4, #4
    30f0:	f7ff f861 	bl	21b6 <atomic_or>
    30f4:	e7ea      	b.n	30cc <le_enh_conn_complete+0x154>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    30f6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    30fa:	069b      	lsls	r3, r3, #26
    30fc:	d506      	bpl.n	310c <le_enh_conn_complete+0x194>
		err = hci_le_set_data_len(conn);
    30fe:	4620      	mov	r0, r4
    3100:	f7ff ff10 	bl	2f24 <hci_le_set_data_len.isra.30>
		if (!err) {
    3104:	b910      	cbnz	r0, 310c <le_enh_conn_complete+0x194>
    3106:	f44f 7180 	mov.w	r1, #256	; 0x100
    310a:	e7f0      	b.n	30ee <le_enh_conn_complete+0x176>
	update_conn_param(conn);
    310c:	4620      	mov	r0, r4
    310e:	f7ff f875 	bl	21fc <update_conn_param>
    3112:	e7db      	b.n	30cc <le_enh_conn_complete+0x154>
    3114:	20003ad0 	.word	0x20003ad0
    3118:	0001563e 	.word	0x0001563e
    311c:	20003a5c 	.word	0x20003a5c
    3120:	000167b9 	.word	0x000167b9
    3124:	00016808 	.word	0x00016808
    3128:	00015f51 	.word	0x00015f51
    312c:	0001693e 	.word	0x0001693e
    3130:	20003a60 	.word	0x20003a60

00003134 <le_conn_param_neg_reply>:
{
    3134:	b570      	push	{r4, r5, r6, lr}
    3136:	4606      	mov	r6, r0
    3138:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    313a:	f242 0021 	movw	r0, #8225	; 0x2021
    313e:	2103      	movs	r1, #3
    3140:	f7ff f8e0 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    3144:	4604      	mov	r4, r0
    3146:	b160      	cbz	r0, 3162 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    3148:	2103      	movs	r1, #3
    314a:	3008      	adds	r0, #8
    314c:	f010 f8c0 	bl	132d0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    3150:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    3152:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3154:	4621      	mov	r1, r4
    3156:	f242 0021 	movw	r0, #8225	; 0x2021
}
    315a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    315e:	f7ff bac9 	b.w	26f4 <bt_hci_cmd_send>
}
    3162:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3166:	bd70      	pop	{r4, r5, r6, pc}

00003168 <hci_tx_thread>:
{
    3168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			ev_count += bt_conn_prepare_events(&events[1]);
    316c:	4b55      	ldr	r3, [pc, #340]	; (32c4 <hci_tx_thread+0x15c>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    316e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 32d0 <hci_tx_thread+0x168>
{
    3172:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
    3174:	f103 0814 	add.w	r8, r3, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    3178:	4b52      	ldr	r3, [pc, #328]	; (32c4 <hci_tx_thread+0x15c>)
    317a:	4a52      	ldr	r2, [pc, #328]	; (32c4 <hci_tx_thread+0x15c>)
    317c:	7b5b      	ldrb	r3, [r3, #13]
    317e:	f36f 1307 	bfc	r3, #4, #4
    3182:	7353      	strb	r3, [r2, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3184:	4640      	mov	r0, r8
    3186:	f001 fa91 	bl	46ac <bt_conn_prepare_events>
    318a:	1c46      	adds	r6, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    318c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3190:	4631      	mov	r1, r6
    3192:	484c      	ldr	r0, [pc, #304]	; (32c4 <hci_tx_thread+0x15c>)
    3194:	f011 ffb2 	bl	150fc <_impl_k_poll>
		BT_ASSERT(err == 0);
    3198:	b928      	cbnz	r0, 31a6 <hci_tx_thread+0x3e>
    319a:	4d4a      	ldr	r5, [pc, #296]	; (32c4 <hci_tx_thread+0x15c>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    319c:	4c4a      	ldr	r4, [pc, #296]	; (32c8 <hci_tx_thread+0x160>)
	for (; count; ev++, count--) {
    319e:	b996      	cbnz	r6, 31c6 <hci_tx_thread+0x5e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    31a0:	f011 f9f2 	bl	14588 <_impl_k_yield>
    31a4:	e7e8      	b.n	3178 <hci_tx_thread+0x10>
		BT_ASSERT(err == 0);
    31a6:	4b49      	ldr	r3, [pc, #292]	; (32cc <hci_tx_thread+0x164>)
    31a8:	9301      	str	r3, [sp, #4]
    31aa:	9300      	str	r3, [sp, #0]
    31ac:	4b48      	ldr	r3, [pc, #288]	; (32d0 <hci_tx_thread+0x168>)
    31ae:	4a49      	ldr	r2, [pc, #292]	; (32d4 <hci_tx_thread+0x16c>)
    31b0:	681c      	ldr	r4, [r3, #0]
    31b2:	4949      	ldr	r1, [pc, #292]	; (32d8 <hci_tx_thread+0x170>)
    31b4:	4b49      	ldr	r3, [pc, #292]	; (32dc <hci_tx_thread+0x174>)
    31b6:	484a      	ldr	r0, [pc, #296]	; (32e0 <hci_tx_thread+0x178>)
	BT_ASSERT(buf);
    31b8:	47a0      	blx	r4
    31ba:	4040      	eors	r0, r0
    31bc:	f380 8811 	msr	BASEPRI, r0
    31c0:	f04f 0004 	mov.w	r0, #4
    31c4:	df02      	svc	2
		switch (ev->state) {
    31c6:	7b6b      	ldrb	r3, [r5, #13]
    31c8:	091b      	lsrs	r3, r3, #4
    31ca:	2b01      	cmp	r3, #1
    31cc:	d95a      	bls.n	3284 <hci_tx_thread+0x11c>
    31ce:	2b04      	cmp	r3, #4
    31d0:	d16b      	bne.n	32aa <hci_tx_thread+0x142>
			if (ev->tag == BT_EVENT_CMD_TX) {
    31d2:	f895 b00c 	ldrb.w	fp, [r5, #12]
    31d6:	f1bb 0f00 	cmp.w	fp, #0
    31da:	d156      	bne.n	328a <hci_tx_thread+0x122>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    31dc:	4659      	mov	r1, fp
    31de:	4841      	ldr	r0, [pc, #260]	; (32e4 <hci_tx_thread+0x17c>)
    31e0:	f010 f81a 	bl	13218 <net_buf_get>
	BT_ASSERT(buf);
    31e4:	4682      	mov	sl, r0
    31e6:	b948      	cbnz	r0, 31fc <hci_tx_thread+0x94>
    31e8:	4b38      	ldr	r3, [pc, #224]	; (32cc <hci_tx_thread+0x164>)
    31ea:	9301      	str	r3, [sp, #4]
    31ec:	9300      	str	r3, [sp, #0]
    31ee:	4b38      	ldr	r3, [pc, #224]	; (32d0 <hci_tx_thread+0x168>)
    31f0:	4a38      	ldr	r2, [pc, #224]	; (32d4 <hci_tx_thread+0x16c>)
    31f2:	681c      	ldr	r4, [r3, #0]
    31f4:	4938      	ldr	r1, [pc, #224]	; (32d8 <hci_tx_thread+0x170>)
    31f6:	4b3c      	ldr	r3, [pc, #240]	; (32e8 <hci_tx_thread+0x180>)
    31f8:	483c      	ldr	r0, [pc, #240]	; (32ec <hci_tx_thread+0x184>)
    31fa:	e7dd      	b.n	31b8 <hci_tx_thread+0x50>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    31fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3200:	483b      	ldr	r0, [pc, #236]	; (32f0 <hci_tx_thread+0x188>)
    3202:	f011 fa6d 	bl	146e0 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3206:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    320a:	b17b      	cbz	r3, 322c <hci_tx_thread+0xc4>
		BT_ERR("Uncleared pending sent_cmd");
    320c:	4b2f      	ldr	r3, [pc, #188]	; (32cc <hci_tx_thread+0x164>)
    320e:	9301      	str	r3, [sp, #4]
    3210:	9300      	str	r3, [sp, #0]
    3212:	4a30      	ldr	r2, [pc, #192]	; (32d4 <hci_tx_thread+0x16c>)
    3214:	4b34      	ldr	r3, [pc, #208]	; (32e8 <hci_tx_thread+0x180>)
    3216:	4930      	ldr	r1, [pc, #192]	; (32d8 <hci_tx_thread+0x170>)
    3218:	4836      	ldr	r0, [pc, #216]	; (32f4 <hci_tx_thread+0x18c>)
    321a:	f8d9 7000 	ldr.w	r7, [r9]
    321e:	47b8      	blx	r7
		net_buf_unref(bt_dev.sent_cmd);
    3220:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    3224:	f010 f822 	bl	1326c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3228:	f8c4 b0c0 	str.w	fp, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    322c:	4650      	mov	r0, sl
    322e:	f010 f84b 	bl	132c8 <net_buf_ref>
    3232:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    3236:	4650      	mov	r0, sl
    3238:	f7ff fa54 	bl	26e4 <bt_send>
	if (err) {
    323c:	b310      	cbz	r0, 3284 <hci_tx_thread+0x11c>
		BT_ERR("Unable to send to driver (err %d)", err);
    323e:	4b23      	ldr	r3, [pc, #140]	; (32cc <hci_tx_thread+0x164>)
    3240:	4a24      	ldr	r2, [pc, #144]	; (32d4 <hci_tx_thread+0x16c>)
    3242:	4925      	ldr	r1, [pc, #148]	; (32d8 <hci_tx_thread+0x170>)
    3244:	9302      	str	r3, [sp, #8]
    3246:	9001      	str	r0, [sp, #4]
    3248:	9300      	str	r3, [sp, #0]
    324a:	482b      	ldr	r0, [pc, #172]	; (32f8 <hci_tx_thread+0x190>)
    324c:	4b26      	ldr	r3, [pc, #152]	; (32e8 <hci_tx_thread+0x180>)
    324e:	f8d9 7000 	ldr.w	r7, [r9]
    3252:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3254:	4826      	ldr	r0, [pc, #152]	; (32f0 <hci_tx_thread+0x188>)
    3256:	f011 fa1b 	bl	14690 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    325a:	4650      	mov	r0, sl
    325c:	f00f ff48 	bl	130f0 <net_buf_id>
    3260:	4b26      	ldr	r3, [pc, #152]	; (32fc <hci_tx_thread+0x194>)
    3262:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3266:	2200      	movs	r2, #0
    3268:	211f      	movs	r1, #31
    326a:	8840      	ldrh	r0, [r0, #2]
    326c:	f7fe ffd4 	bl	2218 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    3270:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    3274:	f00f fffa 	bl	1326c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3278:	2300      	movs	r3, #0
		net_buf_unref(buf);
    327a:	4650      	mov	r0, sl
		bt_dev.sent_cmd = NULL;
    327c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    3280:	f00f fff4 	bl	1326c <net_buf_unref>
	for (; count; ev++, count--) {
    3284:	3514      	adds	r5, #20
    3286:	3e01      	subs	r6, #1
    3288:	e789      	b.n	319e <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    328a:	f1bb 0f01 	cmp.w	fp, #1
    328e:	d104      	bne.n	329a <hci_tx_thread+0x132>
					conn = CONTAINER_OF(ev->fifo,
    3290:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    3292:	3818      	subs	r0, #24
    3294:	f000 ffbc 	bl	4210 <bt_conn_notify_tx>
    3298:	e7f4      	b.n	3284 <hci_tx_thread+0x11c>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    329a:	f1bb 0f02 	cmp.w	fp, #2
    329e:	d1f1      	bne.n	3284 <hci_tx_thread+0x11c>
					conn = CONTAINER_OF(ev->fifo,
    32a0:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    32a2:	3828      	subs	r0, #40	; 0x28
    32a4:	f001 fd7e 	bl	4da4 <bt_conn_process_tx>
    32a8:	e7ec      	b.n	3284 <hci_tx_thread+0x11c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    32aa:	4a08      	ldr	r2, [pc, #32]	; (32cc <hci_tx_thread+0x164>)
    32ac:	9202      	str	r2, [sp, #8]
    32ae:	e88d 000c 	stmia.w	sp, {r2, r3}
    32b2:	4909      	ldr	r1, [pc, #36]	; (32d8 <hci_tx_thread+0x170>)
    32b4:	4b12      	ldr	r3, [pc, #72]	; (3300 <hci_tx_thread+0x198>)
    32b6:	4a13      	ldr	r2, [pc, #76]	; (3304 <hci_tx_thread+0x19c>)
    32b8:	4813      	ldr	r0, [pc, #76]	; (3308 <hci_tx_thread+0x1a0>)
    32ba:	f8d9 7000 	ldr.w	r7, [r9]
    32be:	47b8      	blx	r7
    32c0:	e7e0      	b.n	3284 <hci_tx_thread+0x11c>
    32c2:	bf00      	nop
    32c4:	20003b38 	.word	0x20003b38
    32c8:	20003a60 	.word	0x20003a60
    32cc:	0001563e 	.word	0x0001563e
    32d0:	20003a5c 	.word	0x20003a5c
    32d4:	000167b9 	.word	0x000167b9
    32d8:	00016808 	.word	0x00016808
    32dc:	00016013 	.word	0x00016013
    32e0:	00016893 	.word	0x00016893
    32e4:	20003b24 	.word	0x20003b24
    32e8:	00015ffb 	.word	0x00015ffb
    32ec:	000168bd 	.word	0x000168bd
    32f0:	20003b08 	.word	0x20003b08
    32f4:	000168e2 	.word	0x000168e2
    32f8:	0001621b 	.word	0x0001621b
    32fc:	2000027c 	.word	0x2000027c
    3300:	00016004 	.word	0x00016004
    3304:	00016801 	.word	0x00016801
    3308:	0001690d 	.word	0x0001690d

0000330c <bt_recv>:
{
    330c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    3310:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    3312:	2b01      	cmp	r3, #1
{
    3314:	b095      	sub	sp, #84	; 0x54
    3316:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3318:	d042      	beq.n	33a0 <bt_recv+0x94>
    331a:	2b03      	cmp	r3, #3
    331c:	f040 834e 	bne.w	39bc <bt_recv+0x6b0>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3320:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    3322:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3324:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    3326:	f3c6 030b 	ubfx	r3, r6, #0, #12
    332a:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    332c:	23ff      	movs	r3, #255	; 0xff
    332e:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3330:	2104      	movs	r1, #4
    3332:	3008      	adds	r0, #8
    3334:	f00f ffeb 	bl	1330e <net_buf_simple_pull>
	if (buf->len != len) {
    3338:	89a2      	ldrh	r2, [r4, #12]
    333a:	4295      	cmp	r5, r2
    333c:	d00f      	beq.n	335e <bt_recv+0x52>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    333e:	4ba4      	ldr	r3, [pc, #656]	; (35d0 <bt_recv+0x2c4>)
    3340:	9303      	str	r3, [sp, #12]
    3342:	9300      	str	r3, [sp, #0]
    3344:	4ba3      	ldr	r3, [pc, #652]	; (35d4 <bt_recv+0x2c8>)
    3346:	9201      	str	r2, [sp, #4]
    3348:	9502      	str	r5, [sp, #8]
    334a:	681d      	ldr	r5, [r3, #0]
    334c:	4aa2      	ldr	r2, [pc, #648]	; (35d8 <bt_recv+0x2cc>)
    334e:	4ba3      	ldr	r3, [pc, #652]	; (35dc <bt_recv+0x2d0>)
    3350:	49a3      	ldr	r1, [pc, #652]	; (35e0 <bt_recv+0x2d4>)
    3352:	48a4      	ldr	r0, [pc, #656]	; (35e4 <bt_recv+0x2d8>)
    3354:	47a8      	blx	r5
	net_buf_unref(buf);
    3356:	4620      	mov	r0, r4
    3358:	f00f ff88 	bl	1326c <net_buf_unref>
    335c:	e01c      	b.n	3398 <bt_recv+0x8c>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    335e:	8ae0      	ldrh	r0, [r4, #22]
    3360:	f001 f8f8 	bl	4554 <bt_conn_lookup_handle>
	if (!conn) {
    3364:	4605      	mov	r5, r0
    3366:	b960      	cbnz	r0, 3382 <bt_recv+0x76>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3368:	4b99      	ldr	r3, [pc, #612]	; (35d0 <bt_recv+0x2c4>)
    336a:	9302      	str	r3, [sp, #8]
    336c:	8ae2      	ldrh	r2, [r4, #22]
    336e:	9300      	str	r3, [sp, #0]
    3370:	4b98      	ldr	r3, [pc, #608]	; (35d4 <bt_recv+0x2c8>)
    3372:	9201      	str	r2, [sp, #4]
    3374:	681e      	ldr	r6, [r3, #0]
    3376:	4a98      	ldr	r2, [pc, #608]	; (35d8 <bt_recv+0x2cc>)
    3378:	4b98      	ldr	r3, [pc, #608]	; (35dc <bt_recv+0x2d0>)
    337a:	4999      	ldr	r1, [pc, #612]	; (35e0 <bt_recv+0x2d4>)
    337c:	489a      	ldr	r0, [pc, #616]	; (35e8 <bt_recv+0x2dc>)
    337e:	47b0      	blx	r6
    3380:	e7e9      	b.n	3356 <bt_recv+0x4a>
	acl(buf)->id = bt_conn_get_id(conn);
    3382:	f001 fdbd 	bl	4f00 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    3386:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    3388:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    338a:	4621      	mov	r1, r4
    338c:	4628      	mov	r0, r5
    338e:	f000 fdef 	bl	3f70 <bt_conn_recv>
	bt_conn_unref(conn);
    3392:	4628      	mov	r0, r5
    3394:	f001 f92c 	bl	45f0 <bt_conn_unref>
		return 0;
    3398:	2000      	movs	r0, #0
}
    339a:	b015      	add	sp, #84	; 0x54
    339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    33a0:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    33a2:	7832      	ldrb	r2, [r6, #0]
    33a4:	2a13      	cmp	r2, #19
    33a6:	f200 831a 	bhi.w	39de <bt_recv+0x6d2>
    33aa:	4093      	lsls	r3, r2
    33ac:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    33b0:	f000 8315 	beq.w	39de <bt_recv+0x6d2>
    33b4:	4b86      	ldr	r3, [pc, #536]	; (35d0 <bt_recv+0x2c4>)
    33b6:	9301      	str	r3, [sp, #4]
    33b8:	9300      	str	r3, [sp, #0]
    33ba:	4b86      	ldr	r3, [pc, #536]	; (35d4 <bt_recv+0x2c8>)
    33bc:	4a86      	ldr	r2, [pc, #536]	; (35d8 <bt_recv+0x2cc>)
    33be:	681c      	ldr	r4, [r3, #0]
    33c0:	4987      	ldr	r1, [pc, #540]	; (35e0 <bt_recv+0x2d4>)
    33c2:	4b8a      	ldr	r3, [pc, #552]	; (35ec <bt_recv+0x2e0>)
    33c4:	488a      	ldr	r0, [pc, #552]	; (35f0 <bt_recv+0x2e4>)
    33c6:	47a0      	blx	r4
    33c8:	4040      	eors	r0, r0
    33ca:	f380 8811 	msr	BASEPRI, r0
    33ce:	f04f 0004 	mov.w	r0, #4
    33d2:	df02      	svc	2
    33d4:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    33d6:	783e      	ldrb	r6, [r7, #0]
    33d8:	2e00      	cmp	r6, #0
    33da:	d1bc      	bne.n	3356 <bt_recv+0x4a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33dc:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    33e0:	4640      	mov	r0, r8
    33e2:	f001 f8b7 	bl	4554 <bt_conn_lookup_handle>
	if (!conn) {
    33e6:	4605      	mov	r5, r0
    33e8:	b9d0      	cbnz	r0, 3420 <bt_recv+0x114>
		BT_ERR("Unable to look up conn with handle %u", handle);
    33ea:	4b79      	ldr	r3, [pc, #484]	; (35d0 <bt_recv+0x2c4>)
    33ec:	9302      	str	r3, [sp, #8]
    33ee:	e88d 0108 	stmia.w	sp, {r3, r8}
    33f2:	4b78      	ldr	r3, [pc, #480]	; (35d4 <bt_recv+0x2c8>)
    33f4:	4a78      	ldr	r2, [pc, #480]	; (35d8 <bt_recv+0x2cc>)
    33f6:	681d      	ldr	r5, [r3, #0]
    33f8:	4979      	ldr	r1, [pc, #484]	; (35e0 <bt_recv+0x2d4>)
    33fa:	4b7e      	ldr	r3, [pc, #504]	; (35f4 <bt_recv+0x2e8>)
    33fc:	487e      	ldr	r0, [pc, #504]	; (35f8 <bt_recv+0x2ec>)
    33fe:	47a8      	blx	r5
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3400:	2107      	movs	r1, #7
    3402:	487e      	ldr	r0, [pc, #504]	; (35fc <bt_recv+0x2f0>)
    3404:	f7fe ff70 	bl	22e8 <atomic_test_bit>
    3408:	2800      	cmp	r0, #0
    340a:	d0a4      	beq.n	3356 <bt_recv+0x4a>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    340c:	2106      	movs	r1, #6
    340e:	487b      	ldr	r0, [pc, #492]	; (35fc <bt_recv+0x2f0>)
    3410:	f7fe ff6a 	bl	22e8 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3414:	2800      	cmp	r0, #0
    3416:	d19e      	bne.n	3356 <bt_recv+0x4a>
		set_advertise_enable(true);
    3418:	2001      	movs	r0, #1
    341a:	f7ff f881 	bl	2520 <set_advertise_enable>
    341e:	e79a      	b.n	3356 <bt_recv+0x4a>
	conn->err = evt->reason;
    3420:	78fb      	ldrb	r3, [r7, #3]
    3422:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3424:	4976      	ldr	r1, [pc, #472]	; (3600 <bt_recv+0x2f4>)
    3426:	4877      	ldr	r0, [pc, #476]	; (3604 <bt_recv+0x2f8>)
    3428:	f011 fb02 	bl	14a30 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    342c:	4631      	mov	r1, r6
    342e:	4628      	mov	r0, r5
    3430:	f001 f9b2 	bl	4798 <bt_conn_set_state>
	conn->handle = 0;
    3434:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    3436:	78ae      	ldrb	r6, [r5, #2]
    3438:	b10e      	cbz	r6, 343e <bt_recv+0x132>
	bt_conn_unref(conn);
    343a:	4628      	mov	r0, r5
    343c:	e089      	b.n	3552 <bt_recv+0x246>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    343e:	4631      	mov	r1, r6
    3440:	1d28      	adds	r0, r5, #4
    3442:	f7fe ff51 	bl	22e8 <atomic_test_bit>
    3446:	b130      	cbz	r0, 3456 <bt_recv+0x14a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3448:	4628      	mov	r0, r5
    344a:	2101      	movs	r1, #1
    344c:	f001 f9a4 	bl	4798 <bt_conn_set_state>
		bt_le_scan_update(false);
    3450:	4630      	mov	r0, r6
    3452:	f7ff f9d9 	bl	2808 <bt_le_scan_update>
	bt_conn_unref(conn);
    3456:	4628      	mov	r0, r5
    3458:	f001 f8ca 	bl	45f0 <bt_conn_unref>
    345c:	e7d0      	b.n	3400 <bt_recv+0xf4>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    345e:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3460:	2101      	movs	r1, #1
    3462:	4628      	mov	r0, r5
    3464:	f00f ff53 	bl	1330e <net_buf_simple_pull>
	switch (evt->subevent) {
    3468:	7836      	ldrb	r6, [r6, #0]
    346a:	1e73      	subs	r3, r6, #1
    346c:	2b0b      	cmp	r3, #11
    346e:	f200 8292 	bhi.w	3996 <bt_recv+0x68a>
    3472:	e8df f013 	tbh	[pc, r3, lsl #1]
    3476:	000c      	.short	0x000c
    3478:	004301a4 	.word	0x004301a4
    347c:	02900071 	.word	0x02900071
    3480:	012f00d1 	.word	0x012f00d1
    3484:	01950175 	.word	0x01950175
    3488:	02900041 	.word	0x02900041
    348c:	014a      	.short	0x014a
    348e:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    3490:	780b      	ldrb	r3, [r1, #0]
    3492:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    3496:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    349a:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    349e:	78cb      	ldrb	r3, [r1, #3]
    34a0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    34a4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    34a8:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    34ac:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    34b0:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    34b4:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    34b8:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	enh.clock_accuracy = evt->clock_accuracy;
    34bc:	7c4b      	ldrb	r3, [r1, #17]
    34be:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    34c2:	3104      	adds	r1, #4
    34c4:	a80d      	add	r0, sp, #52	; 0x34
    34c6:	f7fe fe73 	bl	21b0 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    34ca:	2500      	movs	r5, #0
    34cc:	2206      	movs	r2, #6
    34ce:	a908      	add	r1, sp, #32
    34d0:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    34d4:	9508      	str	r5, [sp, #32]
    34d6:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    34da:	f7fe fca3 	bl	1e24 <memcpy>
    34de:	2206      	movs	r2, #6
    34e0:	a90a      	add	r1, sp, #40	; 0x28
    34e2:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    34e6:	950a      	str	r5, [sp, #40]	; 0x28
    34e8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    34ec:	f7fe fc9a 	bl	1e24 <memcpy>
	le_enh_conn_complete(&enh);
    34f0:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    34f2:	f7ff fd41 	bl	2f78 <le_enh_conn_complete>
    34f6:	e72e      	b.n	3356 <bt_recv+0x4a>
    34f8:	68a0      	ldr	r0, [r4, #8]
    34fa:	e7fa      	b.n	34f2 <bt_recv+0x1e6>
    34fc:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    34fe:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    3502:	4638      	mov	r0, r7
    3504:	f001 f826 	bl	4554 <bt_conn_lookup_handle>
	if (!conn) {
    3508:	4606      	mov	r6, r0
    350a:	b958      	cbnz	r0, 3524 <bt_recv+0x218>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    350c:	4b30      	ldr	r3, [pc, #192]	; (35d0 <bt_recv+0x2c4>)
    350e:	9302      	str	r3, [sp, #8]
    3510:	e88d 0088 	stmia.w	sp, {r3, r7}
    3514:	4b2f      	ldr	r3, [pc, #188]	; (35d4 <bt_recv+0x2c8>)
    3516:	681d      	ldr	r5, [r3, #0]
    3518:	4b3b      	ldr	r3, [pc, #236]	; (3608 <bt_recv+0x2fc>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    351a:	4a2f      	ldr	r2, [pc, #188]	; (35d8 <bt_recv+0x2cc>)
    351c:	4930      	ldr	r1, [pc, #192]	; (35e0 <bt_recv+0x2d4>)
    351e:	483b      	ldr	r0, [pc, #236]	; (360c <bt_recv+0x300>)
    3520:	47a8      	blx	r5
    3522:	e718      	b.n	3356 <bt_recv+0x4a>
	if (!evt->status) {
    3524:	782b      	ldrb	r3, [r5, #0]
    3526:	b99b      	cbnz	r3, 3550 <bt_recv+0x244>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3528:	792a      	ldrb	r2, [r5, #4]
    352a:	78eb      	ldrb	r3, [r5, #3]
    352c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3530:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3534:	79aa      	ldrb	r2, [r5, #6]
    3536:	796b      	ldrb	r3, [r5, #5]
    3538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    353c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3540:	79eb      	ldrb	r3, [r5, #7]
    3542:	7a2a      	ldrb	r2, [r5, #8]
    3544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3548:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    354c:	f000 fcd4 	bl	3ef8 <notify_le_param_updated>
	bt_conn_unref(conn);
    3550:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    3552:	f001 f84d 	bl	45f0 <bt_conn_unref>
    3556:	e6fe      	b.n	3356 <bt_recv+0x4a>
    3558:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    355a:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    355e:	4638      	mov	r0, r7
    3560:	f000 fff8 	bl	4554 <bt_conn_lookup_handle>
	if (!conn) {
    3564:	4605      	mov	r5, r0
    3566:	b938      	cbnz	r0, 3578 <bt_recv+0x26c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3568:	4b19      	ldr	r3, [pc, #100]	; (35d0 <bt_recv+0x2c4>)
    356a:	9302      	str	r3, [sp, #8]
    356c:	e88d 0088 	stmia.w	sp, {r3, r7}
    3570:	4b18      	ldr	r3, [pc, #96]	; (35d4 <bt_recv+0x2c8>)
    3572:	681d      	ldr	r5, [r3, #0]
    3574:	4b26      	ldr	r3, [pc, #152]	; (3610 <bt_recv+0x304>)
    3576:	e7d0      	b.n	351a <bt_recv+0x20e>
	if (!evt->status) {
    3578:	7833      	ldrb	r3, [r6, #0]
    357a:	b923      	cbnz	r3, 3586 <bt_recv+0x27a>
		memcpy(conn->le.features, evt->features,
    357c:	2208      	movs	r2, #8
    357e:	1cf1      	adds	r1, r6, #3
    3580:	3064      	adds	r0, #100	; 0x64
    3582:	f7fe fc4f 	bl	1e24 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    3586:	4e23      	ldr	r6, [pc, #140]	; (3614 <bt_recv+0x308>)
    3588:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    358c:	07d2      	lsls	r2, r2, #31
    358e:	d50c      	bpl.n	35aa <bt_recv+0x29e>
    3590:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    3594:	07db      	lsls	r3, r3, #31
    3596:	d508      	bpl.n	35aa <bt_recv+0x29e>
		err = hci_le_set_phy(conn);
    3598:	4628      	mov	r0, r5
    359a:	f7ff fca3 	bl	2ee4 <hci_le_set_phy.isra.29>
		if (!err) {
    359e:	b920      	cbnz	r0, 35aa <bt_recv+0x29e>
    35a0:	2180      	movs	r1, #128	; 0x80
    35a2:	1d28      	adds	r0, r5, #4
    35a4:	f7fe fe07 	bl	21b6 <atomic_or>
    35a8:	e747      	b.n	343a <bt_recv+0x12e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    35aa:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    35ae:	069f      	lsls	r7, r3, #26
    35b0:	f140 80a7 	bpl.w	3702 <bt_recv+0x3f6>
    35b4:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    35b8:	069e      	lsls	r6, r3, #26
    35ba:	f140 80a2 	bpl.w	3702 <bt_recv+0x3f6>
		err = hci_le_set_data_len(conn);
    35be:	4628      	mov	r0, r5
    35c0:	f7ff fcb0 	bl	2f24 <hci_le_set_data_len.isra.30>
		if (!err) {
    35c4:	2800      	cmp	r0, #0
    35c6:	f040 809c 	bne.w	3702 <bt_recv+0x3f6>
    35ca:	f44f 7180 	mov.w	r1, #256	; 0x100
    35ce:	e7e8      	b.n	35a2 <bt_recv+0x296>
    35d0:	0001563e 	.word	0x0001563e
    35d4:	20003a5c 	.word	0x20003a5c
    35d8:	000167b9 	.word	0x000167b9
    35dc:	00015f1a 	.word	0x00015f1a
    35e0:	00016808 	.word	0x00016808
    35e4:	000164e9 	.word	0x000164e9
    35e8:	0001651d 	.word	0x0001651d
    35ec:	00015ff1 	.word	0x00015ff1
    35f0:	00016648 	.word	0x00016648
    35f4:	00015f3c 	.word	0x00015f3c
    35f8:	0001654f 	.word	0x0001654f
    35fc:	20003ad0 	.word	0x20003ad0
    3600:	00016585 	.word	0x00016585
    3604:	00002175 	.word	0x00002175
    3608:	00015fba 	.word	0x00015fba
    360c:	00016589 	.word	0x00016589
    3610:	00015f66 	.word	0x00015f66
    3614:	20003a60 	.word	0x20003a60
    3618:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    361a:	78d9      	ldrb	r1, [r3, #3]
    361c:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    361e:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3620:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3624:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3628:	7959      	ldrb	r1, [r3, #5]
    362a:	791a      	ldrb	r2, [r3, #4]
    362c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3630:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    3634:	799a      	ldrb	r2, [r3, #6]
    3636:	79d9      	ldrb	r1, [r3, #7]
    3638:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    363c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3640:	7a1a      	ldrb	r2, [r3, #8]
    3642:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3644:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3646:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    364a:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    364c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    3650:	f000 ff80 	bl	4554 <bt_conn_lookup_handle>
	if (!conn) {
    3654:	4680      	mov	r8, r0
    3656:	b978      	cbnz	r0, 3678 <bt_recv+0x36c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3658:	4bb6      	ldr	r3, [pc, #728]	; (3934 <bt_recv+0x628>)
    365a:	9302      	str	r3, [sp, #8]
    365c:	e88d 0028 	stmia.w	sp, {r3, r5}
    3660:	4bb5      	ldr	r3, [pc, #724]	; (3938 <bt_recv+0x62c>)
    3662:	4ab6      	ldr	r2, [pc, #728]	; (393c <bt_recv+0x630>)
    3664:	681e      	ldr	r6, [r3, #0]
    3666:	49b6      	ldr	r1, [pc, #728]	; (3940 <bt_recv+0x634>)
    3668:	4bb6      	ldr	r3, [pc, #728]	; (3944 <bt_recv+0x638>)
    366a:	48b7      	ldr	r0, [pc, #732]	; (3948 <bt_recv+0x63c>)
    366c:	47b0      	blx	r6
		return le_conn_param_neg_reply(handle,
    366e:	2102      	movs	r1, #2
    3670:	4628      	mov	r0, r5
    3672:	f7ff fd5f 	bl	3134 <le_conn_param_neg_reply>
    3676:	e66e      	b.n	3356 <bt_recv+0x4a>
	if (!le_param_req(conn, &param)) {
    3678:	a90c      	add	r1, sp, #48	; 0x30
    367a:	f000 fc51 	bl	3f20 <le_param_req>
    367e:	b928      	cbnz	r0, 368c <bt_recv+0x380>
		err = le_conn_param_neg_reply(handle,
    3680:	211e      	movs	r1, #30
    3682:	4628      	mov	r0, r5
    3684:	f7ff fd56 	bl	3134 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3688:	4640      	mov	r0, r8
    368a:	e762      	b.n	3552 <bt_recv+0x246>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    368c:	210e      	movs	r1, #14
    368e:	f242 0020 	movw	r0, #8224	; 0x2020
    3692:	f7fe fe37 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    3696:	4606      	mov	r6, r0
    3698:	2800      	cmp	r0, #0
    369a:	d0f5      	beq.n	3688 <bt_recv+0x37c>
	cp = net_buf_add(buf, sizeof(*cp));
    369c:	210e      	movs	r1, #14
    369e:	3008      	adds	r0, #8
    36a0:	f00f fe16 	bl	132d0 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    36a4:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    36a6:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    36a8:	2100      	movs	r1, #0
    36aa:	f7fe fbe7 	bl	1e7c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    36ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    36b2:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    36b4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    36b8:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    36ba:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    36be:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    36c0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    36c4:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    36c6:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    36c8:	4631      	mov	r1, r6
    36ca:	f242 0020 	movw	r0, #8224	; 0x2020
    36ce:	f7ff f811 	bl	26f4 <bt_hci_cmd_send>
    36d2:	e7d9      	b.n	3688 <bt_recv+0x37c>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    36d4:	68a3      	ldr	r3, [r4, #8]
    36d6:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    36d8:	4630      	mov	r0, r6
    36da:	f000 ff3b 	bl	4554 <bt_conn_lookup_handle>
	if (!conn) {
    36de:	4605      	mov	r5, r0
    36e0:	b938      	cbnz	r0, 36f2 <bt_recv+0x3e6>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    36e2:	4b94      	ldr	r3, [pc, #592]	; (3934 <bt_recv+0x628>)
    36e4:	9302      	str	r3, [sp, #8]
    36e6:	e88d 0048 	stmia.w	sp, {r3, r6}
    36ea:	4b93      	ldr	r3, [pc, #588]	; (3938 <bt_recv+0x62c>)
    36ec:	681d      	ldr	r5, [r3, #0]
    36ee:	4b97      	ldr	r3, [pc, #604]	; (394c <bt_recv+0x640>)
    36f0:	e713      	b.n	351a <bt_recv+0x20e>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    36f2:	f46f 7180 	mvn.w	r1, #256	; 0x100
    36f6:	3004      	adds	r0, #4
    36f8:	f7fe fd6e 	bl	21d8 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    36fc:	05c0      	lsls	r0, r0, #23
    36fe:	f57f ae9c 	bpl.w	343a <bt_recv+0x12e>
	update_conn_param(conn);
    3702:	4628      	mov	r0, r5
    3704:	f7fe fd7a 	bl	21fc <update_conn_param>
    3708:	e697      	b.n	343a <bt_recv+0x12e>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    370a:	68a3      	ldr	r3, [r4, #8]
    370c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    3710:	4630      	mov	r0, r6
    3712:	f000 ff1f 	bl	4554 <bt_conn_lookup_handle>
	if (!conn) {
    3716:	4605      	mov	r5, r0
    3718:	b938      	cbnz	r0, 372a <bt_recv+0x41e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    371a:	4b86      	ldr	r3, [pc, #536]	; (3934 <bt_recv+0x628>)
    371c:	9302      	str	r3, [sp, #8]
    371e:	e88d 0048 	stmia.w	sp, {r3, r6}
    3722:	4b85      	ldr	r3, [pc, #532]	; (3938 <bt_recv+0x62c>)
    3724:	681d      	ldr	r5, [r3, #0]
    3726:	4b8a      	ldr	r3, [pc, #552]	; (3950 <bt_recv+0x644>)
    3728:	e6f7      	b.n	351a <bt_recv+0x20e>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    372a:	1d06      	adds	r6, r0, #4
    372c:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3730:	4630      	mov	r0, r6
    3732:	f7fe fd51 	bl	21d8 <atomic_and>
    3736:	0601      	lsls	r1, r0, #24
    3738:	f57f ae7f 	bpl.w	343a <bt_recv+0x12e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    373c:	4b85      	ldr	r3, [pc, #532]	; (3954 <bt_recv+0x648>)
    373e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3742:	069a      	lsls	r2, r3, #26
    3744:	d5dd      	bpl.n	3702 <bt_recv+0x3f6>
    3746:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    374a:	069b      	lsls	r3, r3, #26
    374c:	d5d9      	bpl.n	3702 <bt_recv+0x3f6>
		err = hci_le_set_data_len(conn);
    374e:	4628      	mov	r0, r5
    3750:	f7ff fbe8 	bl	2f24 <hci_le_set_data_len.isra.30>
		if (!err) {
    3754:	2800      	cmp	r0, #0
    3756:	d1d4      	bne.n	3702 <bt_recv+0x3f6>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3758:	f44f 7180 	mov.w	r1, #256	; 0x100
    375c:	4630      	mov	r0, r6
    375e:	e721      	b.n	35a4 <bt_recv+0x298>
    3760:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3762:	487d      	ldr	r0, [pc, #500]	; (3958 <bt_recv+0x64c>)
    3764:	f06f 0120 	mvn.w	r1, #32
    3768:	f7fe fd36 	bl	21d8 <atomic_and>
	if (!evt->status) {
    376c:	7833      	ldrb	r3, [r6, #0]
    376e:	b943      	cbnz	r3, 3782 <bt_recv+0x476>
		memcpy(pub_key, evt->key, 64);
    3770:	1c71      	adds	r1, r6, #1
    3772:	2240      	movs	r2, #64	; 0x40
    3774:	4879      	ldr	r0, [pc, #484]	; (395c <bt_recv+0x650>)
    3776:	f7fe fb55 	bl	1e24 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    377a:	2110      	movs	r1, #16
    377c:	4876      	ldr	r0, [pc, #472]	; (3958 <bt_recv+0x64c>)
    377e:	f7fe fd1a 	bl	21b6 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3782:	4b77      	ldr	r3, [pc, #476]	; (3960 <bt_recv+0x654>)
    3784:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3786:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3788:	2d00      	cmp	r5, #0
    378a:	f43f ade4 	beq.w	3356 <bt_recv+0x4a>
		cb->func(evt->status ? NULL : evt->key);
    378e:	7832      	ldrb	r2, [r6, #0]
    3790:	682b      	ldr	r3, [r5, #0]
    3792:	2a00      	cmp	r2, #0
    3794:	bf0c      	ite	eq
    3796:	4638      	moveq	r0, r7
    3798:	2000      	movne	r0, #0
    379a:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    379c:	686d      	ldr	r5, [r5, #4]
    379e:	e7f3      	b.n	3788 <bt_recv+0x47c>
	if (dh_key_cb) {
    37a0:	4d70      	ldr	r5, [pc, #448]	; (3964 <bt_recv+0x658>)
    37a2:	68a0      	ldr	r0, [r4, #8]
    37a4:	682a      	ldr	r2, [r5, #0]
    37a6:	2a00      	cmp	r2, #0
    37a8:	f43f add5 	beq.w	3356 <bt_recv+0x4a>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    37ac:	7803      	ldrb	r3, [r0, #0]
    37ae:	b923      	cbnz	r3, 37ba <bt_recv+0x4ae>
    37b0:	3001      	adds	r0, #1
    37b2:	4790      	blx	r2
		dh_key_cb = NULL;
    37b4:	2300      	movs	r3, #0
    37b6:	602b      	str	r3, [r5, #0]
    37b8:	e5cd      	b.n	3356 <bt_recv+0x4a>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    37ba:	2000      	movs	r0, #0
    37bc:	e7f9      	b.n	37b2 <bt_recv+0x4a6>
	u8_t num_reports = net_buf_pull_u8(buf);
    37be:	4628      	mov	r0, r5
    37c0:	f00f fdad 	bl	1331e <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    37c4:	f8df 9190 	ldr.w	r9, [pc, #400]	; 3958 <bt_recv+0x64c>
	u8_t num_reports = net_buf_pull_u8(buf);
    37c8:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    37ca:	9b06      	ldr	r3, [sp, #24]
    37cc:	2b00      	cmp	r3, #0
    37ce:	f43f adc2 	beq.w	3356 <bt_recv+0x4a>
		info = (void *)buf->data;
    37d2:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    37d4:	2109      	movs	r1, #9
    37d6:	4628      	mov	r0, r5
    37d8:	f00f fd99 	bl	1330e <net_buf_simple_pull>
		rssi = info->data[info->length];
    37dc:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    37de:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    37e0:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    37e2:	a80c      	add	r0, sp, #48	; 0x30
		rssi = info->data[info->length];
    37e4:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    37e8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    37ec:	3b02      	subs	r3, #2
    37ee:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    37f0:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    37f2:	f200 809b 	bhi.w	392c <bt_recv+0x620>
			bt_addr_le_copy(&id_addr, &info->addr);
    37f6:	f7fe fcdb 	bl	21b0 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    37fa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    37fe:	3b02      	subs	r3, #2
    3800:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    3804:	4b58      	ldr	r3, [pc, #352]	; (3968 <bt_recv+0x65c>)
    3806:	681b      	ldr	r3, [r3, #0]
    3808:	b1bb      	cbz	r3, 383a <bt_recv+0x52e>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    380a:	4628      	mov	r0, r5
    380c:	f00f fd97 	bl	1333e <net_buf_simple_headroom>
	state->len = buf->len;
    3810:	89a3      	ldrh	r3, [r4, #12]
    3812:	9307      	str	r3, [sp, #28]
			buf->len = info->length;
    3814:	7a33      	ldrb	r3, [r6, #8]
    3816:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3818:	4b53      	ldr	r3, [pc, #332]	; (3968 <bt_recv+0x65c>)
    381a:	7832      	ldrb	r2, [r6, #0]
    381c:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    381e:	4682      	mov	sl, r0
    3820:	461f      	mov	r7, r3
    3822:	fa4f f18b 	sxtb.w	r1, fp
    3826:	462b      	mov	r3, r5
    3828:	a80c      	add	r0, sp, #48	; 0x30
    382a:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    382c:	6923      	ldr	r3, [r4, #16]
    382e:	fa13 f38a 	uxtah	r3, r3, sl
    3832:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3834:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3838:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    383a:	2109      	movs	r1, #9
    383c:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    383e:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3840:	f7fe fd52 	bl	22e8 <atomic_test_bit>
    3844:	4682      	mov	sl, r0
    3846:	2800      	cmp	r0, #0
    3848:	d166      	bne.n	3918 <bt_recv+0x60c>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    384a:	2a01      	cmp	r2, #1
    384c:	d864      	bhi.n	3918 <bt_recv+0x60c>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    384e:	2101      	movs	r1, #1
    3850:	a80c      	add	r0, sp, #48	; 0x30
    3852:	f000 feaf 	bl	45b4 <bt_conn_lookup_state_le>
	if (!conn) {
    3856:	4607      	mov	r7, r0
    3858:	2800      	cmp	r0, #0
    385a:	d05d      	beq.n	3918 <bt_recv+0x60c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    385c:	2108      	movs	r1, #8
    385e:	4648      	mov	r0, r9
    3860:	f7fe fd42 	bl	22e8 <atomic_test_bit>
    3864:	2800      	cmp	r0, #0
    3866:	f040 8083 	bne.w	3970 <bt_recv+0x664>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    386a:	2102      	movs	r1, #2
    386c:	4648      	mov	r0, r9
    386e:	f7fe fd3b 	bl	22e8 <atomic_test_bit>
    3872:	b110      	cbz	r0, 387a <bt_recv+0x56e>
			set_random_address(&bt_dev.id_addr.a);
    3874:	483d      	ldr	r0, [pc, #244]	; (396c <bt_recv+0x660>)
    3876:	f7fe fe13 	bl	24a0 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    387a:	4936      	ldr	r1, [pc, #216]	; (3954 <bt_recv+0x648>)
    387c:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3880:	f107 0a52 	add.w	sl, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3884:	f7fe fc94 	bl	21b0 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3888:	4641      	mov	r1, r8
    388a:	4650      	mov	r0, sl
    388c:	f7fe fc90 	bl	21b0 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3890:	2119      	movs	r1, #25
    3892:	f242 000d 	movw	r0, #8205	; 0x200d
    3896:	f7fe fd35 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    389a:	4683      	mov	fp, r0
    389c:	2800      	cmp	r0, #0
    389e:	d06d      	beq.n	397c <bt_recv+0x670>
	cp = net_buf_add(buf, sizeof(*cp));
    38a0:	2119      	movs	r1, #25
    38a2:	3008      	adds	r0, #8
    38a4:	f00f fd14 	bl	132d0 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    38a8:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    38aa:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    38ac:	2100      	movs	r1, #0
    38ae:	f7fe fae5 	bl	1e7c <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    38b2:	2200      	movs	r2, #0
    38b4:	2360      	movs	r3, #96	; 0x60
    38b6:	f888 3000 	strb.w	r3, [r8]
    38ba:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    38be:	f888 3002 	strb.w	r3, [r8, #2]
    38c2:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    38c6:	4651      	mov	r1, sl
    38c8:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    38cc:	9207      	str	r2, [sp, #28]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    38ce:	f7fe fc6f 	bl	21b0 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    38d2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    38d6:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    38da:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    38de:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    38e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    38e6:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    38ea:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    38ee:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    38f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    38f6:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    38fa:	9a07      	ldr	r2, [sp, #28]
    38fc:	4659      	mov	r1, fp
    38fe:	f242 000d 	movw	r0, #8205	; 0x200d
    3902:	f7fe fd41 	bl	2388 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3906:	2800      	cmp	r0, #0
    3908:	d138      	bne.n	397c <bt_recv+0x670>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    390a:	4638      	mov	r0, r7
    390c:	2102      	movs	r1, #2
    390e:	f000 ff43 	bl	4798 <bt_conn_set_state>
	bt_conn_unref(conn);
    3912:	4638      	mov	r0, r7
    3914:	f000 fe6c 	bl	45f0 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3918:	7a31      	ldrb	r1, [r6, #8]
    391a:	4628      	mov	r0, r5
    391c:	3101      	adds	r1, #1
    391e:	f00f fcf6 	bl	1330e <net_buf_simple_pull>
    3922:	9b06      	ldr	r3, [sp, #24]
    3924:	3b01      	subs	r3, #1
    3926:	b2db      	uxtb	r3, r3
    3928:	9306      	str	r3, [sp, #24]
    392a:	e74e      	b.n	37ca <bt_recv+0x4be>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    392c:	f7fe fc40 	bl	21b0 <bt_addr_le_copy>
    3930:	e768      	b.n	3804 <bt_recv+0x4f8>
    3932:	bf00      	nop
    3934:	0001563e 	.word	0x0001563e
    3938:	20003a5c 	.word	0x20003a5c
    393c:	000167b9 	.word	0x000167b9
    3940:	00016808 	.word	0x00016808
    3944:	00015fa8 	.word	0x00015fa8
    3948:	00016589 	.word	0x00016589
    394c:	00015f7e 	.word	0x00015f7e
    3950:	00015f91 	.word	0x00015f91
    3954:	20003a60 	.word	0x20003a60
    3958:	20003ad0 	.word	0x20003ad0
    395c:	20000290 	.word	0x20000290
    3960:	200002d0 	.word	0x200002d0
    3964:	2000028c 	.word	0x2000028c
    3968:	200002d8 	.word	0x200002d8
    396c:	20003a61 	.word	0x20003a61
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3970:	4650      	mov	r0, sl
    3972:	f7fe fd5f 	bl	2434 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3976:	2800      	cmp	r0, #0
    3978:	f43f af77 	beq.w	386a <bt_recv+0x55e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    397c:	231f      	movs	r3, #31
    397e:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3980:	2100      	movs	r1, #0
    3982:	4638      	mov	r0, r7
    3984:	f000 ff08 	bl	4798 <bt_conn_set_state>
	bt_conn_unref(conn);
    3988:	4638      	mov	r0, r7
    398a:	f000 fe31 	bl	45f0 <bt_conn_unref>
	bt_le_scan_update(false);
    398e:	2000      	movs	r0, #0
    3990:	f7fe ff3a 	bl	2808 <bt_le_scan_update>
    3994:	e7c0      	b.n	3918 <bt_recv+0x60c>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3996:	89a5      	ldrh	r5, [r4, #12]
    3998:	4b20      	ldr	r3, [pc, #128]	; (3a1c <bt_recv+0x710>)
    399a:	68a0      	ldr	r0, [r4, #8]
    399c:	681f      	ldr	r7, [r3, #0]
    399e:	4629      	mov	r1, r5
    39a0:	f7fe fa90 	bl	1ec4 <bt_hex>
    39a4:	4b1e      	ldr	r3, [pc, #120]	; (3a20 <bt_recv+0x714>)
    39a6:	9304      	str	r3, [sp, #16]
    39a8:	9003      	str	r0, [sp, #12]
    39aa:	e88d 0048 	stmia.w	sp, {r3, r6}
    39ae:	4a1d      	ldr	r2, [pc, #116]	; (3a24 <bt_recv+0x718>)
    39b0:	4b1d      	ldr	r3, [pc, #116]	; (3a28 <bt_recv+0x71c>)
    39b2:	491e      	ldr	r1, [pc, #120]	; (3a2c <bt_recv+0x720>)
    39b4:	481e      	ldr	r0, [pc, #120]	; (3a30 <bt_recv+0x724>)
    39b6:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    39b8:	47b8      	blx	r7
    39ba:	e4cc      	b.n	3356 <bt_recv+0x4a>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    39bc:	4a18      	ldr	r2, [pc, #96]	; (3a20 <bt_recv+0x714>)
    39be:	9202      	str	r2, [sp, #8]
    39c0:	e88d 000c 	stmia.w	sp, {r2, r3}
    39c4:	4b15      	ldr	r3, [pc, #84]	; (3a1c <bt_recv+0x710>)
    39c6:	4a1b      	ldr	r2, [pc, #108]	; (3a34 <bt_recv+0x728>)
    39c8:	681d      	ldr	r5, [r3, #0]
    39ca:	4918      	ldr	r1, [pc, #96]	; (3a2c <bt_recv+0x720>)
    39cc:	4b1a      	ldr	r3, [pc, #104]	; (3a38 <bt_recv+0x72c>)
    39ce:	481b      	ldr	r0, [pc, #108]	; (3a3c <bt_recv+0x730>)
    39d0:	47a8      	blx	r5
		net_buf_unref(buf);
    39d2:	4620      	mov	r0, r4
    39d4:	f00f fc4a 	bl	1326c <net_buf_unref>
		return -EINVAL;
    39d8:	f06f 0015 	mvn.w	r0, #21
    39dc:	e4dd      	b.n	339a <bt_recv+0x8e>
	net_buf_pull(buf, sizeof(*hdr));
    39de:	f104 0508 	add.w	r5, r4, #8
    39e2:	2102      	movs	r1, #2
    39e4:	4628      	mov	r0, r5
    39e6:	f00f fc92 	bl	1330e <net_buf_simple_pull>
	switch (hdr->evt) {
    39ea:	7836      	ldrb	r6, [r6, #0]
    39ec:	2e05      	cmp	r6, #5
    39ee:	f43f acf1 	beq.w	33d4 <bt_recv+0xc8>
    39f2:	2e3e      	cmp	r6, #62	; 0x3e
    39f4:	f43f ad33 	beq.w	345e <bt_recv+0x152>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    39f8:	89a5      	ldrh	r5, [r4, #12]
    39fa:	4b08      	ldr	r3, [pc, #32]	; (3a1c <bt_recv+0x710>)
    39fc:	68a0      	ldr	r0, [r4, #8]
    39fe:	681f      	ldr	r7, [r3, #0]
    3a00:	4629      	mov	r1, r5
    3a02:	f7fe fa5f 	bl	1ec4 <bt_hex>
    3a06:	4b06      	ldr	r3, [pc, #24]	; (3a20 <bt_recv+0x714>)
    3a08:	9304      	str	r3, [sp, #16]
    3a0a:	9003      	str	r0, [sp, #12]
    3a0c:	e88d 0048 	stmia.w	sp, {r3, r6}
    3a10:	9502      	str	r5, [sp, #8]
    3a12:	4b0b      	ldr	r3, [pc, #44]	; (3a40 <bt_recv+0x734>)
    3a14:	4a03      	ldr	r2, [pc, #12]	; (3a24 <bt_recv+0x718>)
    3a16:	4905      	ldr	r1, [pc, #20]	; (3a2c <bt_recv+0x720>)
    3a18:	480a      	ldr	r0, [pc, #40]	; (3a44 <bt_recv+0x738>)
    3a1a:	e7cd      	b.n	39b8 <bt_recv+0x6ac>
    3a1c:	20003a5c 	.word	0x20003a5c
    3a20:	0001563e 	.word	0x0001563e
    3a24:	00016801 	.word	0x00016801
    3a28:	00015fdf 	.word	0x00015fdf
    3a2c:	00016808 	.word	0x00016808
    3a30:	000165bd 	.word	0x000165bd
    3a34:	000167b9 	.word	0x000167b9
    3a38:	00016070 	.word	0x00016070
    3a3c:	00016624 	.word	0x00016624
    3a40:	00015ff1 	.word	0x00015ff1
    3a44:	000165f2 	.word	0x000165f2

00003a48 <bt_recv_prio>:
{
    3a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3a4c:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3a4e:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3a50:	2b01      	cmp	r3, #1
{
    3a52:	b087      	sub	sp, #28
    3a54:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3a56:	d00f      	beq.n	3a78 <bt_recv_prio+0x30>
    3a58:	4b6a      	ldr	r3, [pc, #424]	; (3c04 <bt_recv_prio+0x1bc>)
    3a5a:	9301      	str	r3, [sp, #4]
    3a5c:	9300      	str	r3, [sp, #0]
    3a5e:	4b6a      	ldr	r3, [pc, #424]	; (3c08 <bt_recv_prio+0x1c0>)
    3a60:	4a6a      	ldr	r2, [pc, #424]	; (3c0c <bt_recv_prio+0x1c4>)
    3a62:	681c      	ldr	r4, [r3, #0]
    3a64:	496a      	ldr	r1, [pc, #424]	; (3c10 <bt_recv_prio+0x1c8>)
    3a66:	4b6b      	ldr	r3, [pc, #428]	; (3c14 <bt_recv_prio+0x1cc>)
    3a68:	486b      	ldr	r0, [pc, #428]	; (3c18 <bt_recv_prio+0x1d0>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3a6a:	47a0      	blx	r4
    3a6c:	4040      	eors	r0, r0
    3a6e:	f380 8811 	msr	BASEPRI, r0
    3a72:	f04f 0004 	mov.w	r0, #4
    3a76:	df02      	svc	2
    3a78:	8982      	ldrh	r2, [r0, #12]
    3a7a:	2a01      	cmp	r2, #1
    3a7c:	d809      	bhi.n	3a92 <bt_recv_prio+0x4a>
    3a7e:	4b61      	ldr	r3, [pc, #388]	; (3c04 <bt_recv_prio+0x1bc>)
    3a80:	9301      	str	r3, [sp, #4]
    3a82:	9300      	str	r3, [sp, #0]
    3a84:	4b60      	ldr	r3, [pc, #384]	; (3c08 <bt_recv_prio+0x1c0>)
    3a86:	4a61      	ldr	r2, [pc, #388]	; (3c0c <bt_recv_prio+0x1c4>)
    3a88:	681c      	ldr	r4, [r3, #0]
    3a8a:	4961      	ldr	r1, [pc, #388]	; (3c10 <bt_recv_prio+0x1c8>)
    3a8c:	4b61      	ldr	r3, [pc, #388]	; (3c14 <bt_recv_prio+0x1cc>)
    3a8e:	4863      	ldr	r0, [pc, #396]	; (3c1c <bt_recv_prio+0x1d4>)
    3a90:	e7eb      	b.n	3a6a <bt_recv_prio+0x22>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3a92:	7832      	ldrb	r2, [r6, #0]
    3a94:	2a13      	cmp	r2, #19
    3a96:	f200 80ab 	bhi.w	3bf0 <bt_recv_prio+0x1a8>
    3a9a:	4093      	lsls	r3, r2
    3a9c:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3aa0:	f000 80a6 	beq.w	3bf0 <bt_recv_prio+0x1a8>
	net_buf_pull(buf, sizeof(*hdr));
    3aa4:	f100 0508 	add.w	r5, r0, #8
    3aa8:	2102      	movs	r1, #2
    3aaa:	4628      	mov	r0, r5
    3aac:	f00f fc2f 	bl	1330e <net_buf_simple_pull>
	switch (hdr->evt) {
    3ab0:	7833      	ldrb	r3, [r6, #0]
    3ab2:	2b0f      	cmp	r3, #15
    3ab4:	d01d      	beq.n	3af2 <bt_recv_prio+0xaa>
    3ab6:	2b13      	cmp	r3, #19
    3ab8:	d02b      	beq.n	3b12 <bt_recv_prio+0xca>
    3aba:	2b0e      	cmp	r3, #14
    3abc:	f040 808b 	bne.w	3bd6 <bt_recv_prio+0x18e>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3ac0:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3ac2:	2103      	movs	r1, #3
    3ac4:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3ac6:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3aca:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    3acc:	f00f fc1f 	bl	1330e <net_buf_simple_pull>
	status = buf->data[0];
    3ad0:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    3ad2:	4622      	mov	r2, r4
    3ad4:	7819      	ldrb	r1, [r3, #0]
    3ad6:	4638      	mov	r0, r7
    3ad8:	f7fe fb9e 	bl	2218 <hci_cmd_done>
	if (ncmd) {
    3adc:	b116      	cbz	r6, 3ae4 <bt_recv_prio+0x9c>
    3ade:	4850      	ldr	r0, [pc, #320]	; (3c20 <bt_recv_prio+0x1d8>)
    3ae0:	f010 fdd6 	bl	14690 <_impl_k_sem_give>
	net_buf_unref(buf);
    3ae4:	4620      	mov	r0, r4
    3ae6:	f00f fbc1 	bl	1326c <net_buf_unref>
}
    3aea:	2000      	movs	r0, #0
    3aec:	b007      	add	sp, #28
    3aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3af2:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3af4:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    3af8:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    3afa:	2104      	movs	r1, #4
    3afc:	4628      	mov	r0, r5
    3afe:	f00f fc06 	bl	1330e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3b02:	4622      	mov	r2, r4
    3b04:	7831      	ldrb	r1, [r6, #0]
    3b06:	4640      	mov	r0, r8
    3b08:	f7fe fb86 	bl	2218 <hci_cmd_done>
	if (ncmd) {
    3b0c:	2f00      	cmp	r7, #0
    3b0e:	d0e9      	beq.n	3ae4 <bt_recv_prio+0x9c>
    3b10:	e7e5      	b.n	3ade <bt_recv_prio+0x96>
    3b12:	f8d4 b008 	ldr.w	fp, [r4, #8]
				BT_ERR("packets count mismatch");
    3b16:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 3c08 <bt_recv_prio+0x1c0>
    3b1a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 3c04 <bt_recv_prio+0x1bc>
	for (i = 0; i < evt->num_handles; i++) {
    3b1e:	2600      	movs	r6, #0
    3b20:	f89b 3000 	ldrb.w	r3, [fp]
    3b24:	429e      	cmp	r6, r3
    3b26:	dadd      	bge.n	3ae4 <bt_recv_prio+0x9c>
    3b28:	eb0b 0386 	add.w	r3, fp, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3b2c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3b30:	f8b3 a003 	ldrh.w	sl, [r3, #3]
	__asm__ volatile(
    3b34:	f04f 0120 	mov.w	r1, #32
    3b38:	f3ef 8711 	mrs	r7, BASEPRI
    3b3c:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    3b40:	4610      	mov	r0, r2
    3b42:	9205      	str	r2, [sp, #20]
    3b44:	f000 fd06 	bl	4554 <bt_conn_lookup_handle>
		if (!conn) {
    3b48:	9a05      	ldr	r2, [sp, #20]
    3b4a:	4605      	mov	r5, r0
    3b4c:	b978      	cbnz	r0, 3b6e <bt_recv_prio+0x126>
			BT_ERR("No connection for handle %u", handle);
    3b4e:	9201      	str	r2, [sp, #4]
    3b50:	f8cd 8008 	str.w	r8, [sp, #8]
    3b54:	f8cd 8000 	str.w	r8, [sp]
    3b58:	f8d9 5000 	ldr.w	r5, [r9]
    3b5c:	4b31      	ldr	r3, [pc, #196]	; (3c24 <bt_recv_prio+0x1dc>)
    3b5e:	4a2b      	ldr	r2, [pc, #172]	; (3c0c <bt_recv_prio+0x1c4>)
    3b60:	492b      	ldr	r1, [pc, #172]	; (3c10 <bt_recv_prio+0x1c8>)
    3b62:	4831      	ldr	r0, [pc, #196]	; (3c28 <bt_recv_prio+0x1e0>)
    3b64:	47a8      	blx	r5
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3b66:	f387 8811 	msr	BASEPRI, r7
	for (i = 0; i < evt->num_handles; i++) {
    3b6a:	3601      	adds	r6, #1
    3b6c:	e7d8      	b.n	3b20 <bt_recv_prio+0xd8>
    3b6e:	f387 8811 	msr	BASEPRI, r7
			k_fifo_put(&conn->tx_notify, node);
    3b72:	f100 0718 	add.w	r7, r0, #24
		while (count--) {
    3b76:	f1ba 0f00 	cmp.w	sl, #0
    3b7a:	d01f      	beq.n	3bbc <bt_recv_prio+0x174>
	__asm__ volatile(
    3b7c:	f04f 0220 	mov.w	r2, #32
    3b80:	f3ef 8e11 	mrs	lr, BASEPRI
    3b84:	f382 8811 	msr	BASEPRI, r2
    3b88:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3b8a:	b129      	cbz	r1, 3b98 <bt_recv_prio+0x150>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3b8c:	696a      	ldr	r2, [r5, #20]
	return node->next;
    3b8e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    3b90:	6128      	str	r0, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3b92:	4291      	cmp	r1, r2
	list->tail = node;
    3b94:	bf08      	it	eq
    3b96:	6168      	streq	r0, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3b98:	f38e 8811 	msr	BASEPRI, lr
    3b9c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    3ba0:	fa1f fa83 	uxth.w	sl, r3
			if (!node) {
    3ba4:	b971      	cbnz	r1, 3bc4 <bt_recv_prio+0x17c>
				BT_ERR("packets count mismatch");
    3ba6:	f8cd 8004 	str.w	r8, [sp, #4]
    3baa:	f8cd 8000 	str.w	r8, [sp]
    3bae:	f8d9 7000 	ldr.w	r7, [r9]
    3bb2:	4b1c      	ldr	r3, [pc, #112]	; (3c24 <bt_recv_prio+0x1dc>)
    3bb4:	4a15      	ldr	r2, [pc, #84]	; (3c0c <bt_recv_prio+0x1c4>)
    3bb6:	4916      	ldr	r1, [pc, #88]	; (3c10 <bt_recv_prio+0x1c8>)
    3bb8:	481c      	ldr	r0, [pc, #112]	; (3c2c <bt_recv_prio+0x1e4>)
    3bba:	47b8      	blx	r7
		bt_conn_unref(conn);
    3bbc:	4628      	mov	r0, r5
    3bbe:	f000 fd17 	bl	45f0 <bt_conn_unref>
    3bc2:	e7d2      	b.n	3b6a <bt_recv_prio+0x122>
			k_fifo_put(&conn->tx_notify, node);
    3bc4:	4638      	mov	r0, r7
    3bc6:	f010 f9b5 	bl	13f34 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3bca:	4628      	mov	r0, r5
    3bcc:	f000 f990 	bl	3ef0 <bt_conn_get_pkts>
    3bd0:	f010 fd5e 	bl	14690 <_impl_k_sem_give>
    3bd4:	e7cf      	b.n	3b76 <bt_recv_prio+0x12e>
		net_buf_unref(buf);
    3bd6:	4620      	mov	r0, r4
    3bd8:	f00f fb48 	bl	1326c <net_buf_unref>
		BT_ASSERT(0);
    3bdc:	4b09      	ldr	r3, [pc, #36]	; (3c04 <bt_recv_prio+0x1bc>)
    3bde:	9301      	str	r3, [sp, #4]
    3be0:	9300      	str	r3, [sp, #0]
    3be2:	4b09      	ldr	r3, [pc, #36]	; (3c08 <bt_recv_prio+0x1c0>)
    3be4:	4a09      	ldr	r2, [pc, #36]	; (3c0c <bt_recv_prio+0x1c4>)
    3be6:	681c      	ldr	r4, [r3, #0]
    3be8:	4909      	ldr	r1, [pc, #36]	; (3c10 <bt_recv_prio+0x1c8>)
    3bea:	4b0a      	ldr	r3, [pc, #40]	; (3c14 <bt_recv_prio+0x1cc>)
    3bec:	4810      	ldr	r0, [pc, #64]	; (3c30 <bt_recv_prio+0x1e8>)
    3bee:	e73c      	b.n	3a6a <bt_recv_prio+0x22>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3bf0:	4b04      	ldr	r3, [pc, #16]	; (3c04 <bt_recv_prio+0x1bc>)
    3bf2:	9301      	str	r3, [sp, #4]
    3bf4:	9300      	str	r3, [sp, #0]
    3bf6:	4b04      	ldr	r3, [pc, #16]	; (3c08 <bt_recv_prio+0x1c0>)
    3bf8:	4a04      	ldr	r2, [pc, #16]	; (3c0c <bt_recv_prio+0x1c4>)
    3bfa:	681c      	ldr	r4, [r3, #0]
    3bfc:	4904      	ldr	r1, [pc, #16]	; (3c10 <bt_recv_prio+0x1c8>)
    3bfe:	4b05      	ldr	r3, [pc, #20]	; (3c14 <bt_recv_prio+0x1cc>)
    3c00:	480c      	ldr	r0, [pc, #48]	; (3c34 <bt_recv_prio+0x1ec>)
    3c02:	e732      	b.n	3a6a <bt_recv_prio+0x22>
    3c04:	0001563e 	.word	0x0001563e
    3c08:	20003a5c 	.word	0x20003a5c
    3c0c:	000167b9 	.word	0x000167b9
    3c10:	00016808 	.word	0x00016808
    3c14:	00016078 	.word	0x00016078
    3c18:	00016687 	.word	0x00016687
    3c1c:	000166cb 	.word	0x000166cb
    3c20:	20003b08 	.word	0x20003b08
    3c24:	00015f22 	.word	0x00015f22
    3c28:	00016705 	.word	0x00016705
    3c2c:	00016731 	.word	0x00016731
    3c30:	00016758 	.word	0x00016758
    3c34:	0001677b 	.word	0x0001677b

00003c38 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    3c38:	4a08      	ldr	r2, [pc, #32]	; (3c5c <bt_hci_driver_register+0x24>)
    3c3a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    3c3e:	b93b      	cbnz	r3, 3c50 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    3c40:	68c1      	ldr	r1, [r0, #12]
    3c42:	b141      	cbz	r1, 3c56 <bt_hci_driver_register+0x1e>
    3c44:	6901      	ldr	r1, [r0, #16]
    3c46:	b131      	cbz	r1, 3c56 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    3c48:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    3c4c:	4618      	mov	r0, r3
    3c4e:	4770      	bx	lr
		return -EALREADY;
    3c50:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3c54:	4770      	bx	lr
		return -EINVAL;
    3c56:	f06f 0015 	mvn.w	r0, #21
}
    3c5a:	4770      	bx	lr
    3c5c:	20003a60 	.word	0x20003a60

00003c60 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3c60:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3c62:	4d2b      	ldr	r5, [pc, #172]	; (3d10 <bt_enable+0xb0>)
    3c64:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    3c68:	b086      	sub	sp, #24
    3c6a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3c6c:	b973      	cbnz	r3, 3c8c <bt_enable+0x2c>
		BT_ERR("No HCI driver registered");
    3c6e:	4b29      	ldr	r3, [pc, #164]	; (3d14 <bt_enable+0xb4>)
    3c70:	9301      	str	r3, [sp, #4]
    3c72:	9300      	str	r3, [sp, #0]
    3c74:	4b28      	ldr	r3, [pc, #160]	; (3d18 <bt_enable+0xb8>)
    3c76:	4a29      	ldr	r2, [pc, #164]	; (3d1c <bt_enable+0xbc>)
    3c78:	681c      	ldr	r4, [r3, #0]
    3c7a:	4929      	ldr	r1, [pc, #164]	; (3d20 <bt_enable+0xc0>)
    3c7c:	4b29      	ldr	r3, [pc, #164]	; (3d24 <bt_enable+0xc4>)
    3c7e:	482a      	ldr	r0, [pc, #168]	; (3d28 <bt_enable+0xc8>)
    3c80:	47a0      	blx	r4
		return -ENODEV;
    3c82:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3c86:	4620      	mov	r0, r4
    3c88:	b006      	add	sp, #24
    3c8a:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3c8c:	2101      	movs	r1, #1
    3c8e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3c92:	f7fe fa90 	bl	21b6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3c96:	f010 0001 	ands.w	r0, r0, #1
    3c9a:	d135      	bne.n	3d08 <bt_enable+0xa8>
	ready_cb = cb;
    3c9c:	4b23      	ldr	r3, [pc, #140]	; (3d2c <bt_enable+0xcc>)

    3c9e:	4924      	ldr	r1, [pc, #144]	; (3d30 <bt_enable+0xd0>)
    3ca0:	601e      	str	r6, [r3, #0]
    3ca2:	f06f 0308 	mvn.w	r3, #8
    3ca6:	9005      	str	r0, [sp, #20]
    3ca8:	9004      	str	r0, [sp, #16]
    3caa:	9303      	str	r3, [sp, #12]
    3cac:	9002      	str	r0, [sp, #8]
    3cae:	9001      	str	r0, [sp, #4]
    3cb0:	9000      	str	r0, [sp, #0]
    3cb2:	4b20      	ldr	r3, [pc, #128]	; (3d34 <bt_enable+0xd4>)
    3cb4:	4820      	ldr	r0, [pc, #128]	; (3d38 <bt_enable+0xd8>)
    3cb6:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    3cba:	f010 ff05 	bl	14ac8 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    3cbe:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    3cc2:	68db      	ldr	r3, [r3, #12]
    3cc4:	4798      	blx	r3
	if (err) {
    3cc6:	4604      	mov	r4, r0
    3cc8:	b158      	cbz	r0, 3ce2 <bt_enable+0x82>
		BT_ERR("HCI driver open failed (%d)", err);
    3cca:	4b12      	ldr	r3, [pc, #72]	; (3d14 <bt_enable+0xb4>)
    3ccc:	9302      	str	r3, [sp, #8]
    3cce:	e88d 0018 	stmia.w	sp, {r3, r4}
    3cd2:	4b11      	ldr	r3, [pc, #68]	; (3d18 <bt_enable+0xb8>)
    3cd4:	4a11      	ldr	r2, [pc, #68]	; (3d1c <bt_enable+0xbc>)
    3cd6:	681d      	ldr	r5, [r3, #0]
    3cd8:	4911      	ldr	r1, [pc, #68]	; (3d20 <bt_enable+0xc0>)
    3cda:	4b12      	ldr	r3, [pc, #72]	; (3d24 <bt_enable+0xc4>)
    3cdc:	4817      	ldr	r0, [pc, #92]	; (3d3c <bt_enable+0xdc>)
    3cde:	47a8      	blx	r5
		return err;
    3ce0:	e7d1      	b.n	3c86 <bt_enable+0x26>
	if (!cb) {
    3ce2:	b926      	cbnz	r6, 3cee <bt_enable+0x8e>
}
    3ce4:	b006      	add	sp, #24
    3ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    3cea:	f7fe bdbf 	b.w	286c <bt_init>
    3cee:	2101      	movs	r1, #1
    3cf0:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3cf4:	f7fe fa5f 	bl	21b6 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3cf8:	07c3      	lsls	r3, r0, #31
    3cfa:	d4c4      	bmi.n	3c86 <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    3cfc:	f105 0164 	add.w	r1, r5, #100	; 0x64
    3d00:	480f      	ldr	r0, [pc, #60]	; (3d40 <bt_enable+0xe0>)
    3d02:	f010 f917 	bl	13f34 <k_queue_append>
    3d06:	e7be      	b.n	3c86 <bt_enable+0x26>
		return -EALREADY;
    3d08:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3d0c:	e7bb      	b.n	3c86 <bt_enable+0x26>
    3d0e:	bf00      	nop
    3d10:	20003a60 	.word	0x20003a60
    3d14:	0001563e 	.word	0x0001563e
    3d18:	20003a5c 	.word	0x20003a5c
    3d1c:	000167b9 	.word	0x000167b9
    3d20:	00016808 	.word	0x00016808
    3d24:	00016085 	.word	0x00016085
    3d28:	00016182 	.word	0x00016182
    3d2c:	200002d4 	.word	0x200002d4
    3d30:	20001a08 	.word	0x20001a08
    3d34:	00003169 	.word	0x00003169
    3d38:	200002dc 	.word	0x200002dc
    3d3c:	000161ab 	.word	0x000161ab
    3d40:	20001988 	.word	0x20001988

00003d44 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    3d44:	2000      	movs	r0, #0
    3d46:	4770      	bx	lr

00003d48 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    3d48:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3d4a:	7803      	ldrb	r3, [r0, #0]
    3d4c:	2b01      	cmp	r3, #1
{
    3d4e:	4605      	mov	r5, r0
    3d50:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3d52:	d810      	bhi.n	3d76 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    3d54:	7843      	ldrb	r3, [r0, #1]
    3d56:	2b01      	cmp	r3, #1
    3d58:	d80d      	bhi.n	3d76 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    3d5a:	8841      	ldrh	r1, [r0, #2]
    3d5c:	1f0b      	subs	r3, r1, #4
    3d5e:	b29b      	uxth	r3, r3
    3d60:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    3d64:	4283      	cmp	r3, r0
    3d66:	d806      	bhi.n	3d76 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3d68:	88aa      	ldrh	r2, [r5, #4]
    3d6a:	1f13      	subs	r3, r2, #4
    3d6c:	b29b      	uxth	r3, r3
    3d6e:	4283      	cmp	r3, r0
    3d70:	d801      	bhi.n	3d76 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3d72:	4291      	cmp	r1, r2
    3d74:	d22b      	bcs.n	3dce <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3d76:	f06f 0415 	mvn.w	r4, #21
    3d7a:	e00e      	b.n	3d9a <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3d7c:	2108      	movs	r1, #8
    3d7e:	4819      	ldr	r0, [pc, #100]	; (3de4 <bt_le_scan_start+0x9c>)
    3d80:	f7fe fab2 	bl	22e8 <atomic_test_bit>
    3d84:	b158      	cbz	r0, 3d9e <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3d86:	4610      	mov	r0, r2
    3d88:	f7fe fb54 	bl	2434 <set_le_scan_enable>
		if (err) {
    3d8c:	4604      	mov	r4, r0
    3d8e:	b130      	cbz	r0, 3d9e <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d90:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3d94:	4813      	ldr	r0, [pc, #76]	; (3de4 <bt_le_scan_start+0x9c>)
    3d96:	f7fe fa1f 	bl	21d8 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3d9a:	4620      	mov	r0, r4
    3d9c:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3d9e:	786b      	ldrb	r3, [r5, #1]
    3da0:	b17b      	cbz	r3, 3dc2 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3da6:	480f      	ldr	r0, [pc, #60]	; (3de4 <bt_le_scan_start+0x9c>)
    3da8:	f7fe fa05 	bl	21b6 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3dac:	88aa      	ldrh	r2, [r5, #4]
    3dae:	8869      	ldrh	r1, [r5, #2]
    3db0:	7828      	ldrb	r0, [r5, #0]
    3db2:	f7fe fcd9 	bl	2768 <start_le_scan>
	if (err) {
    3db6:	4604      	mov	r4, r0
    3db8:	2800      	cmp	r0, #0
    3dba:	d1e9      	bne.n	3d90 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3dbc:	4b0a      	ldr	r3, [pc, #40]	; (3de8 <bt_le_scan_start+0xa0>)
    3dbe:	601e      	str	r6, [r3, #0]
	return 0;
    3dc0:	e7eb      	b.n	3d9a <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3dc2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3dc6:	4807      	ldr	r0, [pc, #28]	; (3de4 <bt_le_scan_start+0x9c>)
    3dc8:	f7fe fa06 	bl	21d8 <atomic_and>
    3dcc:	e7ee      	b.n	3dac <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3dce:	f44f 7100 	mov.w	r1, #512	; 0x200
    3dd2:	4804      	ldr	r0, [pc, #16]	; (3de4 <bt_le_scan_start+0x9c>)
    3dd4:	f7fe f9ef 	bl	21b6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3dd8:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3ddc:	d0ce      	beq.n	3d7c <bt_le_scan_start+0x34>
		return -EALREADY;
    3dde:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3de2:	e7da      	b.n	3d9a <bt_le_scan_start+0x52>
    3de4:	20003ad0 	.word	0x20003ad0
    3de8:	200002d8 	.word	0x200002d8

00003dec <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3dec:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3dee:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3df2:	4807      	ldr	r0, [pc, #28]	; (3e10 <bt_le_scan_stop+0x24>)
    3df4:	f7fe f9f0 	bl	21d8 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3df8:	0583      	lsls	r3, r0, #22
    3dfa:	d506      	bpl.n	3e0a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3dfc:	4b05      	ldr	r3, [pc, #20]	; (3e14 <bt_le_scan_stop+0x28>)
    3dfe:	2000      	movs	r0, #0
    3e00:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3e06:	f7fe bcff 	b.w	2808 <bt_le_scan_update>
}
    3e0a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3e0e:	bd08      	pop	{r3, pc}
    3e10:	20003ad0 	.word	0x20003ad0
    3e14:	200002d8 	.word	0x200002d8

00003e18 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3e18:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    3e1a:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    3e1e:	2b01      	cmp	r3, #1
{
    3e20:	4605      	mov	r5, r0
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
    3e22:	d00a      	beq.n	3e3a <bt_buf_get_rx+0x22>
    3e24:	f241 335a 	movw	r3, #4954	; 0x135a
    3e28:	4a0a      	ldr	r2, [pc, #40]	; (3e54 <bt_buf_get_rx+0x3c>)
    3e2a:	490b      	ldr	r1, [pc, #44]	; (3e58 <bt_buf_get_rx+0x40>)
    3e2c:	480b      	ldr	r0, [pc, #44]	; (3e5c <bt_buf_get_rx+0x44>)
    3e2e:	f7fd f8ad 	bl	f8c <printk>
    3e32:	480b      	ldr	r0, [pc, #44]	; (3e60 <bt_buf_get_rx+0x48>)
    3e34:	f7fd f8aa 	bl	f8c <printk>
    3e38:	e7fe      	b.n	3e38 <bt_buf_get_rx+0x20>
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3e3a:	480a      	ldr	r0, [pc, #40]	; (3e64 <bt_buf_get_rx+0x4c>)
    3e3c:	f00f f9e6 	bl	1320c <net_buf_alloc_fixed>
#endif

	if (buf) {
    3e40:	4604      	mov	r4, r0
    3e42:	b120      	cbz	r0, 3e4e <bt_buf_get_rx+0x36>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3e44:	2100      	movs	r1, #0
    3e46:	3008      	adds	r0, #8
    3e48:	f00f f9ff 	bl	1324a <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3e4c:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3e4e:	4620      	mov	r0, r4
    3e50:	bd38      	pop	{r3, r4, r5, pc}
    3e52:	bf00      	nop
    3e54:	000161d7 	.word	0x000161d7
    3e58:	0001608f 	.word	0x0001608f
    3e5c:	00015620 	.word	0x00015620
    3e60:	000160bb 	.word	0x000160bb
    3e64:	20003f8c 	.word	0x20003f8c

00003e68 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3e68:	b510      	push	{r4, lr}
    3e6a:	4601      	mov	r1, r0
	__asm__ volatile(
    3e6c:	f04f 0320 	mov.w	r3, #32
    3e70:	f3ef 8011 	mrs	r0, BASEPRI
    3e74:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3e78:	4a0b      	ldr	r2, [pc, #44]	; (3ea8 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3e7a:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3e7c:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    3e80:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3e84:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3e88:	b924      	cbnz	r4, 3e94 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3e8a:	2001      	movs	r0, #1
}
    3e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3e90:	f7ff bfc2 	b.w	3e18 <bt_buf_get_rx>
    3e94:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3e96:	f104 0008 	add.w	r0, r4, #8
    3e9a:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3e9c:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3e9e:	4619      	mov	r1, r3
    3ea0:	f00f f9d3 	bl	1324a <net_buf_simple_reserve>
}
    3ea4:	4620      	mov	r0, r4
    3ea6:	bd10      	pop	{r4, pc}
    3ea8:	20003a60 	.word	0x20003a60

00003eac <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3eac:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3eae:	4b06      	ldr	r3, [pc, #24]	; (3ec8 <notify_connected+0x1c>)
    3eb0:	681c      	ldr	r4, [r3, #0]
{
    3eb2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3eb4:	b904      	cbnz	r4, 3eb8 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3eb6:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3eb8:	6823      	ldr	r3, [r4, #0]
    3eba:	b113      	cbz	r3, 3ec2 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3ebc:	7a29      	ldrb	r1, [r5, #8]
    3ebe:	4628      	mov	r0, r5
    3ec0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3ec2:	6924      	ldr	r4, [r4, #16]
    3ec4:	e7f6      	b.n	3eb4 <notify_connected+0x8>
    3ec6:	bf00      	nop
    3ec8:	2000034c 	.word	0x2000034c

00003ecc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3ecc:	f3bf 8f5b 	dmb	ish
    3ed0:	6800      	ldr	r0, [r0, #0]
    3ed2:	f3bf 8f5b 	dmb	ish
}
    3ed6:	4770      	bx	lr

00003ed8 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3ed8:	8943      	ldrh	r3, [r0, #10]
{
    3eda:	b510      	push	{r4, lr}
    3edc:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3ede:	b12b      	cbz	r3, 3eec <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3ee0:	68c0      	ldr	r0, [r0, #12]
    3ee2:	f00f f9c3 	bl	1326c <net_buf_unref>
	conn->rx = NULL;
    3ee6:	2300      	movs	r3, #0
    3ee8:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3eea:	8163      	strh	r3, [r4, #10]
    3eec:	bd10      	pop	{r4, pc}
	...

00003ef0 <bt_conn_get_pkts>:
}
    3ef0:	4800      	ldr	r0, [pc, #0]	; (3ef4 <bt_conn_get_pkts+0x4>)
    3ef2:	4770      	bx	lr
    3ef4:	20003aec 	.word	0x20003aec

00003ef8 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3ef8:	4b08      	ldr	r3, [pc, #32]	; (3f1c <notify_le_param_updated+0x24>)
{
    3efa:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3efc:	681c      	ldr	r4, [r3, #0]
{
    3efe:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3f00:	b904      	cbnz	r4, 3f04 <notify_le_param_updated+0xc>
}
    3f02:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3f04:	68e6      	ldr	r6, [r4, #12]
    3f06:	b13e      	cbz	r6, 3f18 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3f08:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    3f0c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    3f10:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    3f14:	4628      	mov	r0, r5
    3f16:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3f18:	6924      	ldr	r4, [r4, #16]
    3f1a:	e7f1      	b.n	3f00 <notify_le_param_updated+0x8>
    3f1c:	2000034c 	.word	0x2000034c

00003f20 <le_param_req>:
{
    3f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f22:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3f24:	4608      	mov	r0, r1
{
    3f26:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3f28:	f7fe fb24 	bl	2574 <bt_le_conn_params_valid>
    3f2c:	4605      	mov	r5, r0
    3f2e:	b910      	cbnz	r0, 3f36 <le_param_req+0x16>
		return false;
    3f30:	2500      	movs	r5, #0
}
    3f32:	4628      	mov	r0, r5
    3f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3f36:	4b09      	ldr	r3, [pc, #36]	; (3f5c <le_param_req+0x3c>)
    3f38:	681c      	ldr	r4, [r3, #0]
    3f3a:	2c00      	cmp	r4, #0
    3f3c:	d0f9      	beq.n	3f32 <le_param_req+0x12>
		if (!cb->le_param_req) {
    3f3e:	68a3      	ldr	r3, [r4, #8]
    3f40:	b90b      	cbnz	r3, 3f46 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3f42:	6924      	ldr	r4, [r4, #16]
    3f44:	e7f9      	b.n	3f3a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3f46:	4631      	mov	r1, r6
    3f48:	4638      	mov	r0, r7
    3f4a:	4798      	blx	r3
    3f4c:	2800      	cmp	r0, #0
    3f4e:	d0ef      	beq.n	3f30 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3f50:	4630      	mov	r0, r6
    3f52:	f7fe fb0f 	bl	2574 <bt_le_conn_params_valid>
    3f56:	2800      	cmp	r0, #0
    3f58:	d1f3      	bne.n	3f42 <le_param_req+0x22>
    3f5a:	e7e9      	b.n	3f30 <le_param_req+0x10>
    3f5c:	2000034c 	.word	0x2000034c

00003f60 <bt_conn_cb_register>:
	cb->_next = callback_list;
    3f60:	4b02      	ldr	r3, [pc, #8]	; (3f6c <bt_conn_cb_register+0xc>)
    3f62:	681a      	ldr	r2, [r3, #0]
    3f64:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    3f66:	6018      	str	r0, [r3, #0]
    3f68:	4770      	bx	lr
    3f6a:	bf00      	nop
    3f6c:	2000034c 	.word	0x2000034c

00003f70 <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    3f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3f74:	f8df 8208 	ldr.w	r8, [pc, #520]	; 4180 <bt_conn_recv+0x210>
    3f78:	4e71      	ldr	r6, [pc, #452]	; (4140 <bt_conn_recv+0x1d0>)
    3f7a:	f8d8 7000 	ldr.w	r7, [r8]
{
    3f7e:	b086      	sub	sp, #24
    3f80:	4692      	mov	sl, r2
    3f82:	460d      	mov	r5, r1
    3f84:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3f86:	f010 fb4f 	bl	14628 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3f8a:	9605      	str	r6, [sp, #20]
    3f8c:	f8cd a010 	str.w	sl, [sp, #16]
    3f90:	89ab      	ldrh	r3, [r5, #12]
    3f92:	9303      	str	r3, [sp, #12]
    3f94:	8823      	ldrh	r3, [r4, #0]
    3f96:	9302      	str	r3, [sp, #8]
    3f98:	9001      	str	r0, [sp, #4]
    3f9a:	9600      	str	r6, [sp, #0]
    3f9c:	4b69      	ldr	r3, [pc, #420]	; (4144 <bt_conn_recv+0x1d4>)
    3f9e:	4a6a      	ldr	r2, [pc, #424]	; (4148 <bt_conn_recv+0x1d8>)
    3fa0:	496a      	ldr	r1, [pc, #424]	; (414c <bt_conn_recv+0x1dc>)
    3fa2:	486b      	ldr	r0, [pc, #428]	; (4150 <bt_conn_recv+0x1e0>)
    3fa4:	47b8      	blx	r7

	/* Check packet boundary flags */
	switch (flags) {
    3fa6:	f1ba 0f01 	cmp.w	sl, #1
    3faa:	46c1      	mov	r9, r8
    3fac:	4637      	mov	r7, r6
    3fae:	d040      	beq.n	4032 <bt_conn_recv+0xc2>
    3fb0:	f1ba 0f02 	cmp.w	sl, #2
    3fb4:	f040 80a3 	bne.w	40fe <bt_conn_recv+0x18e>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3fb8:	68ab      	ldr	r3, [r5, #8]

		BT_DBG("First, len %u final %u", buf->len, len);
    3fba:	f8d9 6000 	ldr.w	r6, [r9]
		len = sys_le16_to_cpu(hdr->len);
    3fbe:	f8b3 8000 	ldrh.w	r8, [r3]
    3fc2:	f010 fb31 	bl	14628 <_impl_k_current_get>
		BT_DBG("First, len %u final %u", buf->len, len);
    3fc6:	9704      	str	r7, [sp, #16]
    3fc8:	f8cd 800c 	str.w	r8, [sp, #12]
    3fcc:	89ab      	ldrh	r3, [r5, #12]
    3fce:	9302      	str	r3, [sp, #8]
    3fd0:	9001      	str	r0, [sp, #4]
    3fd2:	4b5c      	ldr	r3, [pc, #368]	; (4144 <bt_conn_recv+0x1d4>)
    3fd4:	9700      	str	r7, [sp, #0]
    3fd6:	4a5c      	ldr	r2, [pc, #368]	; (4148 <bt_conn_recv+0x1d8>)
    3fd8:	495c      	ldr	r1, [pc, #368]	; (414c <bt_conn_recv+0x1dc>)
    3fda:	485e      	ldr	r0, [pc, #376]	; (4154 <bt_conn_recv+0x1e4>)
    3fdc:	47b0      	blx	r6

		if (conn->rx_len) {
    3fde:	8963      	ldrh	r3, [r4, #10]
    3fe0:	b15b      	cbz	r3, 3ffa <bt_conn_recv+0x8a>
			BT_ERR("Unexpected first L2CAP frame");
    3fe2:	9701      	str	r7, [sp, #4]
    3fe4:	9700      	str	r7, [sp, #0]
    3fe6:	485c      	ldr	r0, [pc, #368]	; (4158 <bt_conn_recv+0x1e8>)
    3fe8:	f8d9 6000 	ldr.w	r6, [r9]
    3fec:	4b55      	ldr	r3, [pc, #340]	; (4144 <bt_conn_recv+0x1d4>)
    3fee:	4a5b      	ldr	r2, [pc, #364]	; (415c <bt_conn_recv+0x1ec>)
    3ff0:	4956      	ldr	r1, [pc, #344]	; (414c <bt_conn_recv+0x1dc>)
    3ff2:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    3ff4:	4620      	mov	r0, r4
    3ff6:	f7ff ff6f 	bl	3ed8 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3ffa:	89ab      	ldrh	r3, [r5, #12]
		BT_DBG("rx_len %u", conn->rx_len);
    3ffc:	f8d9 6000 	ldr.w	r6, [r9]
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    4000:	eba8 0803 	sub.w	r8, r8, r3
    4004:	f108 0804 	add.w	r8, r8, #4
    4008:	f8a4 800a 	strh.w	r8, [r4, #10]
    400c:	f010 fb0c 	bl	14628 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    4010:	9703      	str	r7, [sp, #12]
    4012:	8963      	ldrh	r3, [r4, #10]
    4014:	9302      	str	r3, [sp, #8]
    4016:	9001      	str	r0, [sp, #4]
    4018:	4b4a      	ldr	r3, [pc, #296]	; (4144 <bt_conn_recv+0x1d4>)
    401a:	9700      	str	r7, [sp, #0]
    401c:	4a4a      	ldr	r2, [pc, #296]	; (4148 <bt_conn_recv+0x1d8>)
    401e:	494b      	ldr	r1, [pc, #300]	; (414c <bt_conn_recv+0x1dc>)
    4020:	484f      	ldr	r0, [pc, #316]	; (4160 <bt_conn_recv+0x1f0>)
    4022:	47b0      	blx	r6
		if (conn->rx_len) {
    4024:	8963      	ldrh	r3, [r4, #10]
    4026:	2b00      	cmp	r3, #0
    4028:	d057      	beq.n	40da <bt_conn_recv+0x16a>
			conn->rx = buf;
    402a:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    402c:	b006      	add	sp, #24
    402e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->rx_len) {
    4032:	8963      	ldrh	r3, [r4, #10]
    4034:	b98b      	cbnz	r3, 405a <bt_conn_recv+0xea>
			BT_ERR("Unexpected L2CAP continuation");
    4036:	9601      	str	r6, [sp, #4]
    4038:	9600      	str	r6, [sp, #0]
    403a:	f8d8 6000 	ldr.w	r6, [r8]
    403e:	4b41      	ldr	r3, [pc, #260]	; (4144 <bt_conn_recv+0x1d4>)
    4040:	4a46      	ldr	r2, [pc, #280]	; (415c <bt_conn_recv+0x1ec>)
    4042:	4942      	ldr	r1, [pc, #264]	; (414c <bt_conn_recv+0x1dc>)
    4044:	4847      	ldr	r0, [pc, #284]	; (4164 <bt_conn_recv+0x1f4>)
			BT_ERR("L2CAP data overflow");
    4046:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    4048:	4620      	mov	r0, r4
    404a:	f7ff ff45 	bl	3ed8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    404e:	4628      	mov	r0, r5
}
    4050:	b006      	add	sp, #24
    4052:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			net_buf_unref(buf);
    4056:	f00f b909 	b.w	1326c <net_buf_unref>
		if (buf->len > conn->rx_len) {
    405a:	89aa      	ldrh	r2, [r5, #12]
    405c:	429a      	cmp	r2, r3
    405e:	d908      	bls.n	4072 <bt_conn_recv+0x102>
			BT_ERR("L2CAP data overflow");
    4060:	9601      	str	r6, [sp, #4]
    4062:	9600      	str	r6, [sp, #0]
    4064:	f8d8 6000 	ldr.w	r6, [r8]
    4068:	4b36      	ldr	r3, [pc, #216]	; (4144 <bt_conn_recv+0x1d4>)
    406a:	4a3c      	ldr	r2, [pc, #240]	; (415c <bt_conn_recv+0x1ec>)
    406c:	4937      	ldr	r1, [pc, #220]	; (414c <bt_conn_recv+0x1dc>)
    406e:	483e      	ldr	r0, [pc, #248]	; (4168 <bt_conn_recv+0x1f8>)
    4070:	e7e9      	b.n	4046 <bt_conn_recv+0xd6>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    4072:	f8d8 a000 	ldr.w	sl, [r8]
    4076:	f010 fad7 	bl	14628 <_impl_k_current_get>
    407a:	9604      	str	r6, [sp, #16]
    407c:	8963      	ldrh	r3, [r4, #10]
    407e:	9303      	str	r3, [sp, #12]
    4080:	89ab      	ldrh	r3, [r5, #12]
    4082:	9302      	str	r3, [sp, #8]
    4084:	9001      	str	r0, [sp, #4]
    4086:	4b2f      	ldr	r3, [pc, #188]	; (4144 <bt_conn_recv+0x1d4>)
    4088:	4a2f      	ldr	r2, [pc, #188]	; (4148 <bt_conn_recv+0x1d8>)
    408a:	4930      	ldr	r1, [pc, #192]	; (414c <bt_conn_recv+0x1dc>)
    408c:	4837      	ldr	r0, [pc, #220]	; (416c <bt_conn_recv+0x1fc>)
    408e:	9600      	str	r6, [sp, #0]
    4090:	47d0      	blx	sl
		if (buf->len > net_buf_tailroom(conn->rx)) {
    4092:	68e0      	ldr	r0, [r4, #12]
    4094:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
    4098:	3008      	adds	r0, #8
    409a:	f00f f954 	bl	13346 <net_buf_simple_tailroom>
    409e:	4582      	cmp	sl, r0
    40a0:	d908      	bls.n	40b4 <bt_conn_recv+0x144>
			BT_ERR("Not enough buffer space for L2CAP data");
    40a2:	9601      	str	r6, [sp, #4]
    40a4:	9600      	str	r6, [sp, #0]
    40a6:	f8d8 6000 	ldr.w	r6, [r8]
    40aa:	4b26      	ldr	r3, [pc, #152]	; (4144 <bt_conn_recv+0x1d4>)
    40ac:	4a2b      	ldr	r2, [pc, #172]	; (415c <bt_conn_recv+0x1ec>)
    40ae:	4927      	ldr	r1, [pc, #156]	; (414c <bt_conn_recv+0x1dc>)
    40b0:	482f      	ldr	r0, [pc, #188]	; (4170 <bt_conn_recv+0x200>)
    40b2:	e7c8      	b.n	4046 <bt_conn_recv+0xd6>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    40b4:	68e0      	ldr	r0, [r4, #12]
    40b6:	89aa      	ldrh	r2, [r5, #12]
    40b8:	68a9      	ldr	r1, [r5, #8]
    40ba:	3008      	adds	r0, #8
    40bc:	f00f f90e 	bl	132dc <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    40c0:	8963      	ldrh	r3, [r4, #10]
    40c2:	89aa      	ldrh	r2, [r5, #12]
    40c4:	1a9b      	subs	r3, r3, r2
    40c6:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    40c8:	4628      	mov	r0, r5
    40ca:	f00f f8cf 	bl	1326c <net_buf_unref>
		if (conn->rx_len) {
    40ce:	8963      	ldrh	r3, [r4, #10]
    40d0:	2b00      	cmp	r3, #0
    40d2:	d1ab      	bne.n	402c <bt_conn_recv+0xbc>
		buf = conn->rx;
    40d4:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    40d6:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    40d8:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    40da:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    40dc:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    40de:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    40e0:	1d19      	adds	r1, r3, #4
    40e2:	4291      	cmp	r1, r2
    40e4:	d016      	beq.n	4114 <bt_conn_recv+0x1a4>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    40e6:	9202      	str	r2, [sp, #8]
    40e8:	9301      	str	r3, [sp, #4]
    40ea:	9703      	str	r7, [sp, #12]
    40ec:	9700      	str	r7, [sp, #0]
    40ee:	f8d9 4000 	ldr.w	r4, [r9]
    40f2:	4b14      	ldr	r3, [pc, #80]	; (4144 <bt_conn_recv+0x1d4>)
    40f4:	4a19      	ldr	r2, [pc, #100]	; (415c <bt_conn_recv+0x1ec>)
    40f6:	4915      	ldr	r1, [pc, #84]	; (414c <bt_conn_recv+0x1dc>)
    40f8:	481e      	ldr	r0, [pc, #120]	; (4174 <bt_conn_recv+0x204>)
    40fa:	47a0      	blx	r4
    40fc:	e7a7      	b.n	404e <bt_conn_recv+0xde>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    40fe:	e88d 0440 	stmia.w	sp, {r6, sl}
    4102:	9602      	str	r6, [sp, #8]
    4104:	f8d8 6000 	ldr.w	r6, [r8]
    4108:	4b0e      	ldr	r3, [pc, #56]	; (4144 <bt_conn_recv+0x1d4>)
    410a:	4a14      	ldr	r2, [pc, #80]	; (415c <bt_conn_recv+0x1ec>)
    410c:	490f      	ldr	r1, [pc, #60]	; (414c <bt_conn_recv+0x1dc>)
    410e:	481a      	ldr	r0, [pc, #104]	; (4178 <bt_conn_recv+0x208>)
    4110:	47b0      	blx	r6
    4112:	e799      	b.n	4048 <bt_conn_recv+0xd8>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    4114:	f8d9 6000 	ldr.w	r6, [r9]
    4118:	f010 fa86 	bl	14628 <_impl_k_current_get>
    411c:	9703      	str	r7, [sp, #12]
    411e:	89ab      	ldrh	r3, [r5, #12]
    4120:	9302      	str	r3, [sp, #8]
    4122:	9001      	str	r0, [sp, #4]
    4124:	9700      	str	r7, [sp, #0]
    4126:	4b07      	ldr	r3, [pc, #28]	; (4144 <bt_conn_recv+0x1d4>)
    4128:	4a07      	ldr	r2, [pc, #28]	; (4148 <bt_conn_recv+0x1d8>)
    412a:	4908      	ldr	r1, [pc, #32]	; (414c <bt_conn_recv+0x1dc>)
    412c:	4813      	ldr	r0, [pc, #76]	; (417c <bt_conn_recv+0x20c>)
    412e:	47b0      	blx	r6
	bt_l2cap_recv(conn, buf);
    4130:	4629      	mov	r1, r5
    4132:	4620      	mov	r0, r4
}
    4134:	b006      	add	sp, #24
    4136:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_l2cap_recv(conn, buf);
    413a:	f001 b933 	b.w	53a4 <bt_l2cap_recv>
    413e:	bf00      	nop
    4140:	0001563e 	.word	0x0001563e
    4144:	00016aac 	.word	0x00016aac
    4148:	00016c76 	.word	0x00016c76
    414c:	00016808 	.word	0x00016808
    4150:	00016c7d 	.word	0x00016c7d
    4154:	00016cae 	.word	0x00016cae
    4158:	00016cda 	.word	0x00016cda
    415c:	000167b9 	.word	0x000167b9
    4160:	00016d07 	.word	0x00016d07
    4164:	00016d26 	.word	0x00016d26
    4168:	00016d54 	.word	0x00016d54
    416c:	00016d78 	.word	0x00016d78
    4170:	00016da4 	.word	0x00016da4
    4174:	00016e09 	.word	0x00016e09
    4178:	00016ddb 	.word	0x00016ddb
    417c:	00016e35 	.word	0x00016e35
    4180:	20003a5c 	.word	0x20003a5c

00004184 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    4188:	f8df 8080 	ldr.w	r8, [pc, #128]	; 420c <bt_conn_send_cb+0x88>
    418c:	4d18      	ldr	r5, [pc, #96]	; (41f0 <bt_conn_send_cb+0x6c>)
    418e:	f8d8 9000 	ldr.w	r9, [r8]
{
    4192:	b087      	sub	sp, #28
    4194:	460c      	mov	r4, r1
    4196:	4606      	mov	r6, r0
    4198:	4617      	mov	r7, r2
    419a:	f010 fa45 	bl	14628 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    419e:	89a3      	ldrh	r3, [r4, #12]
    41a0:	9303      	str	r3, [sp, #12]
    41a2:	8833      	ldrh	r3, [r6, #0]
    41a4:	9302      	str	r3, [sp, #8]
    41a6:	9001      	str	r0, [sp, #4]
    41a8:	4b12      	ldr	r3, [pc, #72]	; (41f4 <bt_conn_send_cb+0x70>)
    41aa:	9505      	str	r5, [sp, #20]
    41ac:	9704      	str	r7, [sp, #16]
    41ae:	9500      	str	r5, [sp, #0]
    41b0:	4a11      	ldr	r2, [pc, #68]	; (41f8 <bt_conn_send_cb+0x74>)
    41b2:	4912      	ldr	r1, [pc, #72]	; (41fc <bt_conn_send_cb+0x78>)
    41b4:	4812      	ldr	r0, [pc, #72]	; (4200 <bt_conn_send_cb+0x7c>)
    41b6:	47c8      	blx	r9

	if (conn->state != BT_CONN_CONNECTED) {
    41b8:	7a73      	ldrb	r3, [r6, #9]
    41ba:	2b03      	cmp	r3, #3
    41bc:	d010      	beq.n	41e0 <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    41be:	9501      	str	r5, [sp, #4]
    41c0:	9500      	str	r5, [sp, #0]
    41c2:	4b0c      	ldr	r3, [pc, #48]	; (41f4 <bt_conn_send_cb+0x70>)
    41c4:	4a0f      	ldr	r2, [pc, #60]	; (4204 <bt_conn_send_cb+0x80>)
    41c6:	490d      	ldr	r1, [pc, #52]	; (41fc <bt_conn_send_cb+0x78>)
    41c8:	480f      	ldr	r0, [pc, #60]	; (4208 <bt_conn_send_cb+0x84>)
    41ca:	f8d8 5000 	ldr.w	r5, [r8]
    41ce:	47a8      	blx	r5
		net_buf_unref(buf);
    41d0:	4620      	mov	r0, r4
    41d2:	f00f f84b 	bl	1326c <net_buf_unref>
		return -ENOTCONN;
    41d6:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    41da:	b007      	add	sp, #28
    41dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_put(&conn->tx_queue, buf);
    41e0:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    41e4:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    41e6:	4621      	mov	r1, r4
    41e8:	f00f f833 	bl	13252 <net_buf_put>
	return 0;
    41ec:	2000      	movs	r0, #0
    41ee:	e7f4      	b.n	41da <bt_conn_send_cb+0x56>
    41f0:	0001563e 	.word	0x0001563e
    41f4:	00016ab9 	.word	0x00016ab9
    41f8:	00016c76 	.word	0x00016c76
    41fc:	00016808 	.word	0x00016808
    4200:	00016e99 	.word	0x00016e99
    4204:	000167b9 	.word	0x000167b9
    4208:	00016ece 	.word	0x00016ece
    420c:	20003a5c 	.word	0x20003a5c

00004210 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    4210:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    4214:	4b15      	ldr	r3, [pc, #84]	; (426c <bt_conn_notify_tx+0x5c>)
    4216:	4d16      	ldr	r5, [pc, #88]	; (4270 <bt_conn_notify_tx+0x60>)
    4218:	681c      	ldr	r4, [r3, #0]
{
    421a:	4606      	mov	r6, r0
    421c:	f010 fa04 	bl	14628 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    4220:	4b14      	ldr	r3, [pc, #80]	; (4274 <bt_conn_notify_tx+0x64>)
    4222:	9303      	str	r3, [sp, #12]
    4224:	9001      	str	r0, [sp, #4]
    4226:	9300      	str	r3, [sp, #0]
    4228:	9602      	str	r6, [sp, #8]
    422a:	4b13      	ldr	r3, [pc, #76]	; (4278 <bt_conn_notify_tx+0x68>)
    422c:	4a13      	ldr	r2, [pc, #76]	; (427c <bt_conn_notify_tx+0x6c>)
    422e:	4914      	ldr	r1, [pc, #80]	; (4280 <bt_conn_notify_tx+0x70>)
    4230:	4814      	ldr	r0, [pc, #80]	; (4284 <bt_conn_notify_tx+0x74>)
    4232:	47a0      	blx	r4

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    4234:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    4238:	f04f 0800 	mov.w	r8, #0
    423c:	2100      	movs	r1, #0
    423e:	4638      	mov	r0, r7
    4240:	f00f feb0 	bl	13fa4 <_impl_k_queue_get>
    4244:	4604      	mov	r4, r0
    4246:	b910      	cbnz	r0, 424e <bt_conn_notify_tx+0x3e>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    4248:	b004      	add	sp, #16
    424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    424e:	6863      	ldr	r3, [r4, #4]
    4250:	b10b      	cbz	r3, 4256 <bt_conn_notify_tx+0x46>
			tx->cb(conn);
    4252:	4630      	mov	r0, r6
    4254:	4798      	blx	r3
    4256:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    4258:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    425a:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    425c:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    4260:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    4262:	2b00      	cmp	r3, #0
    4264:	d1ea      	bne.n	423c <bt_conn_notify_tx+0x2c>
	list->tail = node;
    4266:	606c      	str	r4, [r5, #4]
    4268:	e7e6      	b.n	4238 <bt_conn_notify_tx+0x28>
    426a:	bf00      	nop
    426c:	20003a5c 	.word	0x20003a5c
    4270:	200003f8 	.word	0x200003f8
    4274:	0001563e 	.word	0x0001563e
    4278:	00016ac9 	.word	0x00016ac9
    427c:	00016c76 	.word	0x00016c76
    4280:	00016808 	.word	0x00016808
    4284:	00016bad 	.word	0x00016bad

00004288 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    428c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 4450 <send_frag+0x1c8>
    4290:	4e5f      	ldr	r6, [pc, #380]	; (4410 <send_frag+0x188>)
    4292:	f8d9 8000 	ldr.w	r8, [r9]
{
    4296:	b089      	sub	sp, #36	; 0x24
    4298:	460f      	mov	r7, r1
    429a:	4614      	mov	r4, r2
    429c:	4605      	mov	r5, r0
    429e:	469a      	mov	sl, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    42a0:	f010 f9c2 	bl	14628 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    42a4:	9606      	str	r6, [sp, #24]
    42a6:	9405      	str	r4, [sp, #20]
    42a8:	89bb      	ldrh	r3, [r7, #12]
    42aa:	4a5a      	ldr	r2, [pc, #360]	; (4414 <send_frag+0x18c>)
    42ac:	9304      	str	r3, [sp, #16]
    42ae:	9001      	str	r0, [sp, #4]
    42b0:	4b59      	ldr	r3, [pc, #356]	; (4418 <send_frag+0x190>)
    42b2:	495a      	ldr	r1, [pc, #360]	; (441c <send_frag+0x194>)
    42b4:	485a      	ldr	r0, [pc, #360]	; (4420 <send_frag+0x198>)
    42b6:	9703      	str	r7, [sp, #12]
    42b8:	9502      	str	r5, [sp, #8]
    42ba:	9600      	str	r6, [sp, #0]
    42bc:	47c0      	blx	r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    42be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    42c2:	4858      	ldr	r0, [pc, #352]	; (4424 <send_frag+0x19c>)
    42c4:	f010 fa0c 	bl	146e0 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    42c8:	4b57      	ldr	r3, [pc, #348]	; (4428 <send_frag+0x1a0>)
    42ca:	f103 0040 	add.w	r0, r3, #64	; 0x40
    42ce:	f7ff fdfd 	bl	3ecc <atomic_get>
    42d2:	46b0      	mov	r8, r6
    42d4:	b130      	cbz	r0, 42e4 <send_frag+0x5c>
		if (conns[i].state == BT_CONN_CONNECTED ||
    42d6:	7a5a      	ldrb	r2, [r3, #9]
    42d8:	3a03      	subs	r2, #3
    42da:	2a01      	cmp	r2, #1
    42dc:	d802      	bhi.n	42e4 <send_frag+0x5c>
			bt_conn_notify_tx(&conns[i]);
    42de:	4618      	mov	r0, r3
    42e0:	f7ff ff96 	bl	4210 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    42e4:	7a6b      	ldrb	r3, [r5, #9]
    42e6:	2b03      	cmp	r3, #3
    42e8:	d174      	bne.n	43d4 <send_frag+0x14c>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    42ea:	2104      	movs	r1, #4
    42ec:	f107 0008 	add.w	r0, r7, #8
    42f0:	f00f f805 	bl	132fe <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    42f4:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    42f6:	f8d7 b014 	ldr.w	fp, [r7, #20]
    42fa:	4e4c      	ldr	r6, [pc, #304]	; (442c <send_frag+0x1a4>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    42fc:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    4300:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4302:	89bb      	ldrh	r3, [r7, #12]
	BT_DBG("conn %p cb %p", conn, cb);
    4304:	f8d9 4000 	ldr.w	r4, [r9]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4308:	3b04      	subs	r3, #4
    430a:	8043      	strh	r3, [r0, #2]
    430c:	2302      	movs	r3, #2
    430e:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4310:	f010 f98a 	bl	14628 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    4314:	f8cd 8010 	str.w	r8, [sp, #16]
    4318:	9001      	str	r0, [sp, #4]
    431a:	f8cd b00c 	str.w	fp, [sp, #12]
    431e:	9502      	str	r5, [sp, #8]
    4320:	f8cd 8000 	str.w	r8, [sp]
    4324:	4b42      	ldr	r3, [pc, #264]	; (4430 <send_frag+0x1a8>)
    4326:	4a3b      	ldr	r2, [pc, #236]	; (4414 <send_frag+0x18c>)
    4328:	493c      	ldr	r1, [pc, #240]	; (441c <send_frag+0x194>)
    432a:	4842      	ldr	r0, [pc, #264]	; (4434 <send_frag+0x1ac>)
    432c:	47a0      	blx	r4
    432e:	6834      	ldr	r4, [r6, #0]
	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");
    4330:	b954      	cbnz	r4, 4348 <send_frag+0xc0>
    4332:	f240 436b 	movw	r3, #1131	; 0x46b
    4336:	4a40      	ldr	r2, [pc, #256]	; (4438 <send_frag+0x1b0>)
    4338:	4940      	ldr	r1, [pc, #256]	; (443c <send_frag+0x1b4>)
    433a:	4841      	ldr	r0, [pc, #260]	; (4440 <send_frag+0x1b8>)
    433c:	f7fc fe26 	bl	f8c <printk>
    4340:	4840      	ldr	r0, [pc, #256]	; (4444 <send_frag+0x1bc>)
    4342:	f7fc fe23 	bl	f8c <printk>
    4346:	e7fe      	b.n	4346 <send_frag+0xbe>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4348:	6872      	ldr	r2, [r6, #4]
	return node->next;
    434a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    434c:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    434e:	4294      	cmp	r4, r2
	list->tail = node;
    4350:	bf08      	it	eq
    4352:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    4354:	f8c4 b004 	str.w	fp, [r4, #4]
	__asm__ volatile(
    4358:	f04f 0320 	mov.w	r3, #32
    435c:	f3ef 8211 	mrs	r2, BASEPRI
    4360:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    4364:	2300      	movs	r3, #0
    4366:	6023      	str	r3, [r4, #0]
    4368:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    436a:	2b00      	cmp	r3, #0
    436c:	d141      	bne.n	43f2 <send_frag+0x16a>
	list->tail = node;
    436e:	616c      	str	r4, [r5, #20]
	list->head = node;
    4370:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4372:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    4376:	4638      	mov	r0, r7
    4378:	f7fe f9b4 	bl	26e4 <bt_send>
	if (err) {
    437c:	2800      	cmp	r0, #0
    437e:	d044      	beq.n	440a <send_frag+0x182>
		BT_ERR("Unable to send to driver (err %d)", err);
    4380:	f8cd 8008 	str.w	r8, [sp, #8]
    4384:	9001      	str	r0, [sp, #4]
    4386:	f8cd 8000 	str.w	r8, [sp]
    438a:	4b23      	ldr	r3, [pc, #140]	; (4418 <send_frag+0x190>)
    438c:	f8d9 8000 	ldr.w	r8, [r9]
    4390:	4a2d      	ldr	r2, [pc, #180]	; (4448 <send_frag+0x1c0>)
    4392:	4922      	ldr	r1, [pc, #136]	; (441c <send_frag+0x194>)
    4394:	482d      	ldr	r0, [pc, #180]	; (444c <send_frag+0x1c4>)
    4396:	47c0      	blx	r8
	__asm__ volatile(
    4398:	f04f 0320 	mov.w	r3, #32
    439c:	f3ef 8111 	mrs	r1, BASEPRI
    43a0:	f383 8811 	msr	BASEPRI, r3
    43a4:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    43a6:	2200      	movs	r2, #0
    43a8:	b153      	cbz	r3, 43c0 <send_frag+0x138>
    43aa:	429c      	cmp	r4, r3
    43ac:	d12a      	bne.n	4404 <send_frag+0x17c>
    43ae:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    43b0:	bb12      	cbnz	r2, 43f8 <send_frag+0x170>
    43b2:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    43b4:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    43b6:	4294      	cmp	r4, r2
    43b8:	d100      	bne.n	43bc <send_frag+0x134>
	list->tail = node;
    43ba:	616b      	str	r3, [r5, #20]
	parent->next = child;
    43bc:	2300      	movs	r3, #0
    43be:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    43c0:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    43c4:	2300      	movs	r3, #0
    43c6:	6063      	str	r3, [r4, #4]
    43c8:	6833      	ldr	r3, [r6, #0]
    43ca:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    43cc:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    43ce:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    43d0:	b903      	cbnz	r3, 43d4 <send_frag+0x14c>
	list->tail = node;
    43d2:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    43d4:	4813      	ldr	r0, [pc, #76]	; (4424 <send_frag+0x19c>)
    43d6:	f010 f95b 	bl	14690 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    43da:	f1ba 0f00 	cmp.w	sl, #0
    43de:	d004      	beq.n	43ea <send_frag+0x162>
		net_buf_unref(buf);
    43e0:	4638      	mov	r0, r7
    43e2:	f00e ff43 	bl	1326c <net_buf_unref>
	}
	return false;
    43e6:	f04f 0a00 	mov.w	sl, #0
}
    43ea:	4650      	mov	r0, sl
    43ec:	b009      	add	sp, #36	; 0x24
    43ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
    43f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    43f4:	616c      	str	r4, [r5, #20]
    43f6:	e7bc      	b.n	4372 <send_frag+0xea>
	parent->next = child;
    43f8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    43fa:	696b      	ldr	r3, [r5, #20]
    43fc:	429c      	cmp	r4, r3
	list->tail = node;
    43fe:	bf08      	it	eq
    4400:	616a      	streq	r2, [r5, #20]
    4402:	e7db      	b.n	43bc <send_frag+0x134>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4404:	461a      	mov	r2, r3
    4406:	681b      	ldr	r3, [r3, #0]
    4408:	e7ce      	b.n	43a8 <send_frag+0x120>
	return true;
    440a:	f04f 0a01 	mov.w	sl, #1
    440e:	e7ec      	b.n	43ea <send_frag+0x162>
    4410:	0001563e 	.word	0x0001563e
    4414:	00016c76 	.word	0x00016c76
    4418:	00016aea 	.word	0x00016aea
    441c:	00016808 	.word	0x00016808
    4420:	00016fb8 	.word	0x00016fb8
    4424:	20003aec 	.word	0x20003aec
    4428:	20000360 	.word	0x20000360
    442c:	200003f8 	.word	0x200003f8
    4430:	00016adb 	.word	0x00016adb
    4434:	00016ff0 	.word	0x00016ff0
    4438:	00017013 	.word	0x00017013
    443c:	0001704f 	.word	0x0001704f
    4440:	00015620 	.word	0x00015620
    4444:	0001706d 	.word	0x0001706d
    4448:	000167b9 	.word	0x000167b9
    444c:	0001621b 	.word	0x0001621b
    4450:	20003a5c 	.word	0x20003a5c

00004454 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4456:	4c17      	ldr	r4, [pc, #92]	; (44b4 <bt_conn_add_le+0x60>)
    4458:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    445c:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    445e:	4630      	mov	r0, r6
    4460:	f7ff fd34 	bl	3ecc <atomic_get>
    4464:	4605      	mov	r5, r0
    4466:	b108      	cbz	r0, 446c <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    4468:	2000      	movs	r0, #0
    446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    446c:	4601      	mov	r1, r0
    446e:	2298      	movs	r2, #152	; 0x98
    4470:	4620      	mov	r0, r4
    4472:	f7fd fd03 	bl	1e7c <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4476:	f3bf 8f5b 	dmb	ish
    447a:	2301      	movs	r3, #1
    447c:	e856 2f00 	ldrex	r2, [r6]
    4480:	e846 3100 	strex	r1, r3, [r6]
    4484:	2900      	cmp	r1, #0
    4486:	d1f9      	bne.n	447c <bt_conn_add_le+0x28>
    4488:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    448c:	2207      	movs	r2, #7
    448e:	4639      	mov	r1, r7
    4490:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4494:	f7fd fcc6 	bl	1e24 <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4498:	2318      	movs	r3, #24
    449a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    449e:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    44a0:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    44a4:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    44a6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    44aa:	4903      	ldr	r1, [pc, #12]	; (44b8 <bt_conn_add_le+0x64>)
    44ac:	f010 fc40 	bl	14d30 <k_delayed_work_init>
			conn = &conns[i];
    44b0:	4620      	mov	r0, r4

	return conn;
}
    44b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44b4:	20000360 	.word	0x20000360
    44b8:	00004ca5 	.word	0x00004ca5

000044bc <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    44bc:	b538      	push	{r3, r4, r5, lr}
    44be:	460d      	mov	r5, r1
    44c0:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    44c2:	f100 0144 	add.w	r1, r0, #68	; 0x44
    44c6:	2207      	movs	r2, #7
    44c8:	4628      	mov	r0, r5
    44ca:	f7fd fc96 	bl	1dfa <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    44ce:	b160      	cbz	r0, 44ea <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    44d0:	78e3      	ldrb	r3, [r4, #3]
    44d2:	2207      	movs	r2, #7
    44d4:	b933      	cbnz	r3, 44e4 <bt_conn_addr_le_cmp+0x28>
    44d6:	f104 0152 	add.w	r1, r4, #82	; 0x52
    44da:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    44dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    44e0:	f7fd bc8b 	b.w	1dfa <memcmp>
    44e4:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    44e8:	e7f7      	b.n	44da <bt_conn_addr_le_cmp+0x1e>
    44ea:	bd38      	pop	{r3, r4, r5, pc}

000044ec <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    44ec:	b570      	push	{r4, r5, r6, lr}
    44ee:	4604      	mov	r4, r0
    44f0:	b086      	sub	sp, #24
	atomic_inc(&conn->ref);
    44f2:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    44f6:	f3bf 8f5b 	dmb	ish
    44fa:	e855 3f00 	ldrex	r3, [r5]
    44fe:	3301      	adds	r3, #1
    4500:	e845 3200 	strex	r2, r3, [r5]
    4504:	2a00      	cmp	r2, #0
    4506:	d1f8      	bne.n	44fa <bt_conn_ref+0xe>
    4508:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    450c:	4b0b      	ldr	r3, [pc, #44]	; (453c <bt_conn_ref+0x50>)
    450e:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4510:	f010 f88a 	bl	14628 <_impl_k_current_get>
    4514:	4602      	mov	r2, r0
    4516:	4628      	mov	r0, r5
    4518:	8821      	ldrh	r1, [r4, #0]
    451a:	f7ff fcd7 	bl	3ecc <atomic_get>
    451e:	4b08      	ldr	r3, [pc, #32]	; (4540 <bt_conn_ref+0x54>)
    4520:	9304      	str	r3, [sp, #16]
    4522:	9003      	str	r0, [sp, #12]
    4524:	9102      	str	r1, [sp, #8]
    4526:	9201      	str	r2, [sp, #4]
    4528:	9300      	str	r3, [sp, #0]
    452a:	4a06      	ldr	r2, [pc, #24]	; (4544 <bt_conn_ref+0x58>)
    452c:	4b06      	ldr	r3, [pc, #24]	; (4548 <bt_conn_ref+0x5c>)
    452e:	4907      	ldr	r1, [pc, #28]	; (454c <bt_conn_ref+0x60>)
    4530:	4807      	ldr	r0, [pc, #28]	; (4550 <bt_conn_ref+0x64>)
    4532:	47b0      	blx	r6

	return conn;
}
    4534:	4620      	mov	r0, r4
    4536:	b006      	add	sp, #24
    4538:	bd70      	pop	{r4, r5, r6, pc}
    453a:	bf00      	nop
    453c:	20003a5c 	.word	0x20003a5c
    4540:	0001563e 	.word	0x0001563e
    4544:	00016c76 	.word	0x00016c76
    4548:	00016b39 	.word	0x00016b39
    454c:	00016808 	.word	0x00016808
    4550:	00016e73 	.word	0x00016e73

00004554 <bt_conn_lookup_handle>:
{
    4554:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    4556:	4b0a      	ldr	r3, [pc, #40]	; (4580 <bt_conn_lookup_handle+0x2c>)
{
    4558:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    455a:	f103 0040 	add.w	r0, r3, #64	; 0x40
    455e:	f7ff fcb5 	bl	3ecc <atomic_get>
    4562:	b158      	cbz	r0, 457c <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4564:	7a5a      	ldrb	r2, [r3, #9]
    4566:	3a03      	subs	r2, #3
    4568:	2a01      	cmp	r2, #1
    456a:	d807      	bhi.n	457c <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    456c:	881a      	ldrh	r2, [r3, #0]
    456e:	428a      	cmp	r2, r1
    4570:	d104      	bne.n	457c <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    4572:	4618      	mov	r0, r3
}
    4574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    4578:	f7ff bfb8 	b.w	44ec <bt_conn_ref>
}
    457c:	2000      	movs	r0, #0
    457e:	bd08      	pop	{r3, pc}
    4580:	20000360 	.word	0x20000360

00004584 <bt_conn_lookup_addr_le>:
{
    4584:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4586:	4c0a      	ldr	r4, [pc, #40]	; (45b0 <bt_conn_lookup_addr_le+0x2c>)
{
    4588:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    458a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    458e:	f7ff fc9d 	bl	3ecc <atomic_get>
    4592:	b150      	cbz	r0, 45aa <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4594:	78a3      	ldrb	r3, [r4, #2]
    4596:	b943      	cbnz	r3, 45aa <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4598:	4620      	mov	r0, r4
    459a:	f7ff ff8f 	bl	44bc <bt_conn_addr_le_cmp>
    459e:	b920      	cbnz	r0, 45aa <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    45a0:	4620      	mov	r0, r4
}
    45a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    45a6:	f7ff bfa1 	b.w	44ec <bt_conn_ref>
}
    45aa:	2000      	movs	r0, #0
    45ac:	bd10      	pop	{r4, pc}
    45ae:	bf00      	nop
    45b0:	20000360 	.word	0x20000360

000045b4 <bt_conn_lookup_state_le>:
{
    45b4:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    45b6:	4c0d      	ldr	r4, [pc, #52]	; (45ec <bt_conn_lookup_state_le+0x38>)
{
    45b8:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    45ba:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    45be:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    45c0:	f7ff fc84 	bl	3ecc <atomic_get>
    45c4:	b180      	cbz	r0, 45e8 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    45c6:	78a2      	ldrb	r2, [r4, #2]
    45c8:	b972      	cbnz	r2, 45e8 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    45ca:	b93b      	cbnz	r3, 45dc <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    45cc:	7a63      	ldrb	r3, [r4, #9]
    45ce:	42ab      	cmp	r3, r5
    45d0:	d10a      	bne.n	45e8 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    45d2:	4806      	ldr	r0, [pc, #24]	; (45ec <bt_conn_lookup_state_le+0x38>)
}
    45d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    45d8:	f7ff bf88 	b.w	44ec <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    45dc:	4619      	mov	r1, r3
    45de:	4620      	mov	r0, r4
    45e0:	f7ff ff6c 	bl	44bc <bt_conn_addr_le_cmp>
    45e4:	2800      	cmp	r0, #0
    45e6:	d0f1      	beq.n	45cc <bt_conn_lookup_state_le+0x18>
}
    45e8:	2000      	movs	r0, #0
    45ea:	bd38      	pop	{r3, r4, r5, pc}
    45ec:	20000360 	.word	0x20000360

000045f0 <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    45f0:	b570      	push	{r4, r5, r6, lr}
    45f2:	4605      	mov	r5, r0
    45f4:	b086      	sub	sp, #24
	atomic_dec(&conn->ref);
    45f6:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    45fa:	f3bf 8f5b 	dmb	ish
    45fe:	e854 3f00 	ldrex	r3, [r4]
    4602:	3b01      	subs	r3, #1
    4604:	e844 3200 	strex	r2, r3, [r4]
    4608:	2a00      	cmp	r2, #0
    460a:	d1f8      	bne.n	45fe <bt_conn_unref+0xe>
    460c:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4610:	4b0a      	ldr	r3, [pc, #40]	; (463c <bt_conn_unref+0x4c>)
    4612:	681e      	ldr	r6, [r3, #0]
    4614:	f010 f808 	bl	14628 <_impl_k_current_get>
    4618:	4602      	mov	r2, r0
    461a:	4620      	mov	r0, r4
    461c:	8829      	ldrh	r1, [r5, #0]
    461e:	f7ff fc55 	bl	3ecc <atomic_get>
    4622:	4b07      	ldr	r3, [pc, #28]	; (4640 <bt_conn_unref+0x50>)
    4624:	9304      	str	r3, [sp, #16]
    4626:	9003      	str	r0, [sp, #12]
    4628:	9102      	str	r1, [sp, #8]
    462a:	9201      	str	r2, [sp, #4]
    462c:	9300      	str	r3, [sp, #0]
    462e:	4a05      	ldr	r2, [pc, #20]	; (4644 <bt_conn_unref+0x54>)
    4630:	4b05      	ldr	r3, [pc, #20]	; (4648 <bt_conn_unref+0x58>)
    4632:	4906      	ldr	r1, [pc, #24]	; (464c <bt_conn_unref+0x5c>)
    4634:	4806      	ldr	r0, [pc, #24]	; (4650 <bt_conn_unref+0x60>)
    4636:	47b0      	blx	r6
}
    4638:	b006      	add	sp, #24
    463a:	bd70      	pop	{r4, r5, r6, pc}
    463c:	20003a5c 	.word	0x20003a5c
    4640:	0001563e 	.word	0x0001563e
    4644:	00016c76 	.word	0x00016c76
    4648:	00016b45 	.word	0x00016b45
    464c:	00016808 	.word	0x00016808
    4650:	00016e73 	.word	0x00016e73

00004654 <conn_cleanup>:
{
    4654:	b538      	push	{r3, r4, r5, lr}
    4656:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4658:	f100 0528 	add.w	r5, r0, #40	; 0x28
    465c:	2100      	movs	r1, #0
    465e:	4628      	mov	r0, r5
    4660:	f00e fdda 	bl	13218 <net_buf_get>
    4664:	b960      	cbnz	r0, 4680 <conn_cleanup+0x2c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    4666:	6923      	ldr	r3, [r4, #16]
    4668:	b16b      	cbz	r3, 4686 <conn_cleanup+0x32>
    466a:	f240 530b 	movw	r3, #1291	; 0x50b
    466e:	4a0b      	ldr	r2, [pc, #44]	; (469c <conn_cleanup+0x48>)
    4670:	490b      	ldr	r1, [pc, #44]	; (46a0 <conn_cleanup+0x4c>)
    4672:	480c      	ldr	r0, [pc, #48]	; (46a4 <conn_cleanup+0x50>)
    4674:	f7fc fc8a 	bl	f8c <printk>
    4678:	480b      	ldr	r0, [pc, #44]	; (46a8 <conn_cleanup+0x54>)
    467a:	f7fc fc87 	bl	f8c <printk>
    467e:	e7fe      	b.n	467e <conn_cleanup+0x2a>
		net_buf_unref(buf);
    4680:	f00e fdf4 	bl	1326c <net_buf_unref>
    4684:	e7ea      	b.n	465c <conn_cleanup+0x8>
	bt_conn_notify_tx(conn);
    4686:	4620      	mov	r0, r4
    4688:	f7ff fdc2 	bl	4210 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    468c:	4620      	mov	r0, r4
    468e:	f7ff fc23 	bl	3ed8 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    4692:	4620      	mov	r0, r4
}
    4694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4698:	f7ff bfaa 	b.w	45f0 <bt_conn_unref>
    469c:	00017013 	.word	0x00017013
    46a0:	00016f5f 	.word	0x00016f5f
    46a4:	00015620 	.word	0x00015620
    46a8:	00016f85 	.word	0x00016f85

000046ac <bt_conn_prepare_events>:
{
    46ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	BT_DBG("");
    46b0:	4d2e      	ldr	r5, [pc, #184]	; (476c <bt_conn_prepare_events+0xc0>)
    46b2:	4c2f      	ldr	r4, [pc, #188]	; (4770 <bt_conn_prepare_events+0xc4>)
    46b4:	682f      	ldr	r7, [r5, #0]
{
    46b6:	4606      	mov	r6, r0
    46b8:	f00f ffb6 	bl	14628 <_impl_k_current_get>
	BT_DBG("");
    46bc:	4b2d      	ldr	r3, [pc, #180]	; (4774 <bt_conn_prepare_events+0xc8>)
    46be:	9001      	str	r0, [sp, #4]
    46c0:	4a2d      	ldr	r2, [pc, #180]	; (4778 <bt_conn_prepare_events+0xcc>)
    46c2:	492e      	ldr	r1, [pc, #184]	; (477c <bt_conn_prepare_events+0xd0>)
    46c4:	482e      	ldr	r0, [pc, #184]	; (4780 <bt_conn_prepare_events+0xd4>)
    46c6:	9402      	str	r4, [sp, #8]
    46c8:	9400      	str	r4, [sp, #0]
    46ca:	47b8      	blx	r7
	conn_change.signaled = 0;
    46cc:	4b2d      	ldr	r3, [pc, #180]	; (4784 <bt_conn_prepare_events+0xd8>)
    46ce:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    46d0:	2101      	movs	r1, #1
    46d2:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    46d4:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    46d6:	f010 fccb 	bl	15070 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    46da:	4b2b      	ldr	r3, [pc, #172]	; (4788 <bt_conn_prepare_events+0xdc>)
    46dc:	f103 0040 	add.w	r0, r3, #64	; 0x40
    46e0:	f7ff fbf4 	bl	3ecc <atomic_get>
    46e4:	462a      	mov	r2, r5
    46e6:	461f      	mov	r7, r3
    46e8:	4625      	mov	r5, r4
    46ea:	b918      	cbnz	r0, 46f4 <bt_conn_prepare_events+0x48>
			continue;
    46ec:	2001      	movs	r0, #1
}
    46ee:	b004      	add	sp, #16
    46f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    46f4:	7a59      	ldrb	r1, [r3, #9]
    46f6:	b999      	cbnz	r1, 4720 <bt_conn_prepare_events+0x74>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    46f8:	f3bf 8f5b 	dmb	ish
    46fc:	1d19      	adds	r1, r3, #4
    46fe:	e851 0f00 	ldrex	r0, [r1]
    4702:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    4706:	e841 4e00 	strex	lr, r4, [r1]
    470a:	f1be 0f00 	cmp.w	lr, #0
    470e:	d1f6      	bne.n	46fe <bt_conn_prepare_events+0x52>
    4710:	f3bf 8f5b 	dmb	ish
    4714:	0641      	lsls	r1, r0, #25
    4716:	d503      	bpl.n	4720 <bt_conn_prepare_events+0x74>
			conn_cleanup(conn);
    4718:	4618      	mov	r0, r3
    471a:	f7ff ff9b 	bl	4654 <conn_cleanup>
    471e:	e7e5      	b.n	46ec <bt_conn_prepare_events+0x40>
		if (conn->state != BT_CONN_CONNECTED) {
    4720:	7a7c      	ldrb	r4, [r7, #9]
    4722:	2c03      	cmp	r4, #3
    4724:	d1e2      	bne.n	46ec <bt_conn_prepare_events+0x40>
		BT_DBG("Adding conn %p to poll list", conn);
    4726:	f8d2 8000 	ldr.w	r8, [r2]
    472a:	f00f ff7d 	bl	14628 <_impl_k_current_get>
    472e:	4b11      	ldr	r3, [pc, #68]	; (4774 <bt_conn_prepare_events+0xc8>)
    4730:	9001      	str	r0, [sp, #4]
    4732:	4a11      	ldr	r2, [pc, #68]	; (4778 <bt_conn_prepare_events+0xcc>)
    4734:	4911      	ldr	r1, [pc, #68]	; (477c <bt_conn_prepare_events+0xd0>)
    4736:	4815      	ldr	r0, [pc, #84]	; (478c <bt_conn_prepare_events+0xe0>)
    4738:	9503      	str	r5, [sp, #12]
    473a:	9702      	str	r7, [sp, #8]
    473c:	9500      	str	r5, [sp, #0]
    473e:	47c0      	blx	r8
		k_poll_event_init(&events[ev_count],
    4740:	4b13      	ldr	r3, [pc, #76]	; (4790 <bt_conn_prepare_events+0xe4>)
    4742:	2200      	movs	r2, #0
    4744:	2104      	movs	r1, #4
    4746:	f106 0014 	add.w	r0, r6, #20
    474a:	f010 fc91 	bl	15070 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    474e:	2301      	movs	r3, #1
    4750:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4754:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4758:	4b0e      	ldr	r3, [pc, #56]	; (4794 <bt_conn_prepare_events+0xe8>)
    475a:	2200      	movs	r2, #0
    475c:	2104      	movs	r1, #4
    475e:	f010 fc87 	bl	15070 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4762:	2302      	movs	r3, #2
    4764:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4768:	4620      	mov	r0, r4
	return ev_count;
    476a:	e7c0      	b.n	46ee <bt_conn_prepare_events+0x42>
    476c:	20003a5c 	.word	0x20003a5c
    4770:	0001563e 	.word	0x0001563e
    4774:	00016afd 	.word	0x00016afd
    4778:	00016c76 	.word	0x00016c76
    477c:	00016808 	.word	0x00016808
    4780:	00016bca 	.word	0x00016bca
    4784:	20003b88 	.word	0x20003b88
    4788:	20000360 	.word	0x20000360
    478c:	00016be0 	.word	0x00016be0
    4790:	20000378 	.word	0x20000378
    4794:	20000388 	.word	0x20000388

00004798 <bt_conn_set_state>:
{
    4798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    479c:	4604      	mov	r4, r0
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    479e:	4e73      	ldr	r6, [pc, #460]	; (496c <bt_conn_set_state+0x1d4>)
    47a0:	f8df 8204 	ldr.w	r8, [pc, #516]	; 49a8 <bt_conn_set_state+0x210>
    47a4:	6835      	ldr	r5, [r6, #0]
{
    47a6:	b087      	sub	sp, #28
    47a8:	460f      	mov	r7, r1
    47aa:	f00f ff3d 	bl	14628 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    47ae:	7a63      	ldrb	r3, [r4, #9]
    47b0:	496f      	ldr	r1, [pc, #444]	; (4970 <bt_conn_set_state+0x1d8>)
    47b2:	9001      	str	r0, [sp, #4]
    47b4:	2b04      	cmp	r3, #4
    47b6:	bf96      	itet	ls
    47b8:	4a6e      	ldrls	r2, [pc, #440]	; (4974 <bt_conn_set_state+0x1dc>)
    47ba:	4b6f      	ldrhi	r3, [pc, #444]	; (4978 <bt_conn_set_state+0x1e0>)
    47bc:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    47c0:	9302      	str	r3, [sp, #8]
    47c2:	2f04      	cmp	r7, #4
    47c4:	bf96      	itet	ls
    47c6:	4a6b      	ldrls	r2, [pc, #428]	; (4974 <bt_conn_set_state+0x1dc>)
    47c8:	4a6b      	ldrhi	r2, [pc, #428]	; (4978 <bt_conn_set_state+0x1e0>)
    47ca:	f852 2027 	ldrls.w	r2, [r2, r7, lsl #2]
    47ce:	9203      	str	r2, [sp, #12]
    47d0:	f8cd 8010 	str.w	r8, [sp, #16]
    47d4:	f8cd 8000 	str.w	r8, [sp]
    47d8:	4b68      	ldr	r3, [pc, #416]	; (497c <bt_conn_set_state+0x1e4>)
    47da:	4a69      	ldr	r2, [pc, #420]	; (4980 <bt_conn_set_state+0x1e8>)
    47dc:	4869      	ldr	r0, [pc, #420]	; (4984 <bt_conn_set_state+0x1ec>)
    47de:	47a8      	blx	r5
	if (conn->state == state) {
    47e0:	7a65      	ldrb	r5, [r4, #9]
    47e2:	42af      	cmp	r7, r5
    47e4:	46c1      	mov	r9, r8
    47e6:	d10c      	bne.n	4802 <bt_conn_set_state+0x6a>
		BT_WARN("no transition");
    47e8:	f8cd 8004 	str.w	r8, [sp, #4]
    47ec:	f8cd 8000 	str.w	r8, [sp]
    47f0:	6834      	ldr	r4, [r6, #0]
    47f2:	4b62      	ldr	r3, [pc, #392]	; (497c <bt_conn_set_state+0x1e4>)
    47f4:	4a64      	ldr	r2, [pc, #400]	; (4988 <bt_conn_set_state+0x1f0>)
    47f6:	495e      	ldr	r1, [pc, #376]	; (4970 <bt_conn_set_state+0x1d8>)
    47f8:	4864      	ldr	r0, [pc, #400]	; (498c <bt_conn_set_state+0x1f4>)
    47fa:	47a0      	blx	r4
}
    47fc:	b007      	add	sp, #28
    47fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->state = state;
    4802:	7267      	strb	r7, [r4, #9]
	switch (old_state) {
    4804:	b195      	cbz	r5, 482c <bt_conn_set_state+0x94>
    4806:	2d02      	cmp	r5, #2
    4808:	d014      	beq.n	4834 <bt_conn_set_state+0x9c>
	switch (conn->state) {
    480a:	7a63      	ldrb	r3, [r4, #9]
    480c:	2b04      	cmp	r3, #4
    480e:	f200 80a0 	bhi.w	4952 <bt_conn_set_state+0x1ba>
    4812:	a201      	add	r2, pc, #4	; (adr r2, 4818 <bt_conn_set_state+0x80>)
    4814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4818:	0000487b 	.word	0x0000487b
    481c:	000047fd 	.word	0x000047fd
    4820:	00004937 	.word	0x00004937
    4824:	00004845 	.word	0x00004845
    4828:	000047fd 	.word	0x000047fd
		bt_conn_ref(conn);
    482c:	4620      	mov	r0, r4
    482e:	f7ff fe5d 	bl	44ec <bt_conn_ref>
		break;
    4832:	e7ea      	b.n	480a <bt_conn_set_state+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4834:	78a3      	ldrb	r3, [r4, #2]
    4836:	2b00      	cmp	r3, #0
    4838:	d1e7      	bne.n	480a <bt_conn_set_state+0x72>
			k_delayed_work_cancel(&conn->le.update_work);
    483a:	f104 0070 	add.w	r0, r4, #112	; 0x70
    483e:	f010 fa87 	bl	14d50 <k_delayed_work_cancel>
    4842:	e7e2      	b.n	480a <bt_conn_set_state+0x72>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4844:	78a3      	ldrb	r3, [r4, #2]
    4846:	2b02      	cmp	r3, #2
    4848:	d0d8      	beq.n	47fc <bt_conn_set_state+0x64>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    484a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    484e:	f00f fb69 	bl	13f24 <_impl_k_queue_init>
    4852:	f104 0018 	add.w	r0, r4, #24
    4856:	f00f fb65 	bl	13f24 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    485a:	2100      	movs	r1, #0
    485c:	484c      	ldr	r0, [pc, #304]	; (4990 <bt_conn_set_state+0x1f8>)
    485e:	f010 fd73 	bl	15348 <_impl_k_poll_signal>
	list->head = NULL;
    4862:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    4864:	4620      	mov	r0, r4
    4866:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4868:	63e3      	str	r3, [r4, #60]	; 0x3c
    486a:	f000 fc2f 	bl	50cc <bt_l2cap_connected>
		notify_connected(conn);
    486e:	4620      	mov	r0, r4
}
    4870:	b007      	add	sp, #28
    4872:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		notify_connected(conn);
    4876:	f7ff bb19 	b.w	3eac <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    487a:	78a3      	ldrb	r3, [r4, #2]
    487c:	2b02      	cmp	r3, #2
    487e:	d105      	bne.n	488c <bt_conn_set_state+0xf4>
			bt_conn_unref(conn);
    4880:	4620      	mov	r0, r4
}
    4882:	b007      	add	sp, #28
    4884:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			bt_conn_unref(conn);
    4888:	f7ff beb2 	b.w	45f0 <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    488c:	1eeb      	subs	r3, r5, #3
    488e:	2b01      	cmp	r3, #1
    4890:	d844      	bhi.n	491c <bt_conn_set_state+0x184>
			bt_l2cap_disconnected(conn);
    4892:	4620      	mov	r0, r4
    4894:	f000 fc54 	bl	5140 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4898:	4b3e      	ldr	r3, [pc, #248]	; (4994 <bt_conn_set_state+0x1fc>)
    489a:	681d      	ldr	r5, [r3, #0]
    489c:	b9ed      	cbnz	r5, 48da <bt_conn_set_state+0x142>
    489e:	4e3e      	ldr	r6, [pc, #248]	; (4998 <bt_conn_set_state+0x200>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    48a0:	4f3e      	ldr	r7, [pc, #248]	; (499c <bt_conn_set_state+0x204>)
	__asm__ volatile(
    48a2:	f04f 0320 	mov.w	r3, #32
    48a6:	f3ef 8111 	mrs	r1, BASEPRI
    48aa:	f383 8811 	msr	BASEPRI, r3
    48ae:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    48b0:	b12b      	cbz	r3, 48be <bt_conn_set_state+0x126>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    48b2:	6960      	ldr	r0, [r4, #20]
	return node->next;
    48b4:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    48b6:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    48b8:	4283      	cmp	r3, r0
	list->tail = node;
    48ba:	bf08      	it	eq
    48bc:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    48be:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    48c2:	b18b      	cbz	r3, 48e8 <bt_conn_set_state+0x150>
    48c4:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    48c6:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    48c8:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    48ca:	605d      	str	r5, [r3, #4]
	list->head = node;
    48cc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    48ce:	b902      	cbnz	r2, 48d2 <bt_conn_set_state+0x13a>
	list->tail = node;
    48d0:	6073      	str	r3, [r6, #4]
    48d2:	4638      	mov	r0, r7
    48d4:	f00f fedc 	bl	14690 <_impl_k_sem_give>
    48d8:	e7e3      	b.n	48a2 <bt_conn_set_state+0x10a>
		if (cb->disconnected) {
    48da:	686b      	ldr	r3, [r5, #4]
    48dc:	b113      	cbz	r3, 48e4 <bt_conn_set_state+0x14c>
			cb->disconnected(conn, conn->err);
    48de:	7a21      	ldrb	r1, [r4, #8]
    48e0:	4620      	mov	r0, r4
    48e2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    48e4:	692d      	ldr	r5, [r5, #16]
    48e6:	e7d9      	b.n	489c <bt_conn_set_state+0x104>
			if (conn->type == BT_CONN_TYPE_LE) {
    48e8:	78a3      	ldrb	r3, [r4, #2]
    48ea:	b91b      	cbnz	r3, 48f4 <bt_conn_set_state+0x15c>
				k_delayed_work_cancel(&conn->le.update_work);
    48ec:	f104 0070 	add.w	r0, r4, #112	; 0x70
    48f0:	f010 fa2e 	bl	14d50 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    48f4:	f3bf 8f5b 	dmb	ish
    48f8:	3404      	adds	r4, #4
    48fa:	e854 3f00 	ldrex	r3, [r4]
    48fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4902:	e844 3200 	strex	r2, r3, [r4]
    4906:	2a00      	cmp	r2, #0
    4908:	d1f7      	bne.n	48fa <bt_conn_set_state+0x162>
    490a:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    490e:	4820      	ldr	r0, [pc, #128]	; (4990 <bt_conn_set_state+0x1f8>)
    4910:	2100      	movs	r1, #0
}
    4912:	b007      	add	sp, #28
    4914:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4918:	f010 bd16 	b.w	15348 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    491c:	2d02      	cmp	r5, #2
    491e:	d103      	bne.n	4928 <bt_conn_set_state+0x190>
			notify_connected(conn);
    4920:	4620      	mov	r0, r4
    4922:	f7ff fac3 	bl	3eac <notify_connected>
    4926:	e7ab      	b.n	4880 <bt_conn_set_state+0xe8>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4928:	2d01      	cmp	r5, #1
    492a:	f47f af67 	bne.w	47fc <bt_conn_set_state+0x64>
			if (conn->err) {
    492e:	7a23      	ldrb	r3, [r4, #8]
    4930:	2b00      	cmp	r3, #0
    4932:	d0a5      	beq.n	4880 <bt_conn_set_state+0xe8>
    4934:	e7f4      	b.n	4920 <bt_conn_set_state+0x188>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4936:	78a3      	ldrb	r3, [r4, #2]
    4938:	2b00      	cmp	r3, #0
    493a:	f47f af5f 	bne.w	47fc <bt_conn_set_state+0x64>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    493e:	4818      	ldr	r0, [pc, #96]	; (49a0 <bt_conn_set_state+0x208>)
    4940:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4944:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4948:	b007      	add	sp, #28
    494a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    494e:	f010 ba63 	b.w	14e18 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    4952:	f8cd 9008 	str.w	r9, [sp, #8]
    4956:	9701      	str	r7, [sp, #4]
    4958:	f8cd 9000 	str.w	r9, [sp]
    495c:	6834      	ldr	r4, [r6, #0]
    495e:	4b07      	ldr	r3, [pc, #28]	; (497c <bt_conn_set_state+0x1e4>)
    4960:	4a09      	ldr	r2, [pc, #36]	; (4988 <bt_conn_set_state+0x1f0>)
    4962:	4903      	ldr	r1, [pc, #12]	; (4970 <bt_conn_set_state+0x1d8>)
    4964:	480f      	ldr	r0, [pc, #60]	; (49a4 <bt_conn_set_state+0x20c>)
    4966:	47a0      	blx	r4
		break;
    4968:	e748      	b.n	47fc <bt_conn_set_state+0x64>
    496a:	bf00      	nop
    496c:	20003a5c 	.word	0x20003a5c
    4970:	00016808 	.word	0x00016808
    4974:	00016a98 	.word	0x00016a98
    4978:	00016eed 	.word	0x00016eed
    497c:	00016b27 	.word	0x00016b27
    4980:	00016c76 	.word	0x00016c76
    4984:	00016ef7 	.word	0x00016ef7
    4988:	00016801 	.word	0x00016801
    498c:	00016f15 	.word	0x00016f15
    4990:	20003b88 	.word	0x20003b88
    4994:	2000034c 	.word	0x2000034c
    4998:	200003f8 	.word	0x200003f8
    499c:	20003aec 	.word	0x20003aec
    49a0:	20001988 	.word	0x20001988
    49a4:	00016f33 	.word	0x00016f33
    49a8:	0001563e 	.word	0x0001563e

000049ac <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    49ac:	3044      	adds	r0, #68	; 0x44
    49ae:	4770      	bx	lr

000049b0 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    49b0:	b570      	push	{r4, r5, r6, lr}
    49b2:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    49b4:	4608      	mov	r0, r1
{
    49b6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    49b8:	f7fd fddc 	bl	2574 <bt_le_conn_params_valid>
    49bc:	b908      	cbnz	r0, 49c2 <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    49be:	2400      	movs	r4, #0
    49c0:	e01c      	b.n	49fc <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    49c2:	481d      	ldr	r0, [pc, #116]	; (4a38 <bt_conn_create_le+0x88>)
    49c4:	f7ff fa82 	bl	3ecc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    49c8:	0583      	lsls	r3, r0, #22
    49ca:	d4f8      	bmi.n	49be <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    49cc:	4630      	mov	r0, r6
    49ce:	f7ff fdd9 	bl	4584 <bt_conn_lookup_addr_le>
	if (conn) {
    49d2:	4604      	mov	r4, r0
    49d4:	b1a0      	cbz	r0, 4a00 <bt_conn_create_le+0x50>
		switch (conn->state) {
    49d6:	7a43      	ldrb	r3, [r0, #9]
    49d8:	2b01      	cmp	r3, #1
    49da:	d006      	beq.n	49ea <bt_conn_create_le+0x3a>
    49dc:	d301      	bcc.n	49e2 <bt_conn_create_le+0x32>
    49de:	2b03      	cmp	r3, #3
    49e0:	d90c      	bls.n	49fc <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    49e2:	4620      	mov	r0, r4
    49e4:	f7ff fe04 	bl	45f0 <bt_conn_unref>
    49e8:	e7e9      	b.n	49be <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    49ea:	886b      	ldrh	r3, [r5, #2]
    49ec:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    49f0:	88ab      	ldrh	r3, [r5, #4]
    49f2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    49f6:	88eb      	ldrh	r3, [r5, #6]
    49f8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    49fc:	4620      	mov	r0, r4
    49fe:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4a00:	4630      	mov	r0, r6
    4a02:	f7ff fd27 	bl	4454 <bt_conn_add_le>
	if (!conn) {
    4a06:	4604      	mov	r4, r0
    4a08:	2800      	cmp	r0, #0
    4a0a:	d0f7      	beq.n	49fc <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4a0c:	2207      	movs	r2, #7
    4a0e:	4631      	mov	r1, r6
    4a10:	3052      	adds	r0, #82	; 0x52
    4a12:	f7fd fa07 	bl	1e24 <memcpy>
	conn->le.interval_max = param->interval_max;
    4a16:	886b      	ldrh	r3, [r5, #2]
    4a18:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4a1c:	88ab      	ldrh	r3, [r5, #4]
    4a1e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4a22:	88eb      	ldrh	r3, [r5, #6]
    4a24:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4a28:	4620      	mov	r0, r4
    4a2a:	2101      	movs	r1, #1
    4a2c:	f7ff feb4 	bl	4798 <bt_conn_set_state>
	bt_le_scan_update(true);
    4a30:	2001      	movs	r0, #1
    4a32:	f7fd fee9 	bl	2808 <bt_le_scan_update>
	return conn;
    4a36:	e7e1      	b.n	49fc <bt_conn_create_le+0x4c>
    4a38:	20003ad0 	.word	0x20003ad0

00004a3c <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4a3c:	b570      	push	{r4, r5, r6, lr}
    4a3e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4a40:	460d      	mov	r5, r1
    4a42:	2900      	cmp	r1, #0
    4a44:	d13b      	bne.n	4abe <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    4a46:	4630      	mov	r0, r6
    4a48:	f7ff fd9c 	bl	4584 <bt_conn_lookup_addr_le>
	if (!conn) {
    4a4c:	4604      	mov	r4, r0
    4a4e:	b928      	cbnz	r0, 4a5c <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4a50:	4630      	mov	r0, r6
    4a52:	f7ff fcff 	bl	4454 <bt_conn_add_le>
		if (!conn) {
    4a56:	4604      	mov	r4, r0
    4a58:	2800      	cmp	r0, #0
    4a5a:	d051      	beq.n	4b00 <bt_le_set_auto_conn+0xc4>
    4a5c:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4a5e:	2d00      	cmp	r5, #0
    4a60:	d035      	beq.n	4ace <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    4a62:	886a      	ldrh	r2, [r5, #2]
    4a64:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4a68:	88aa      	ldrh	r2, [r5, #4]
    4a6a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4a6e:	88ea      	ldrh	r2, [r5, #6]
    4a70:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4a74:	f3bf 8f5b 	dmb	ish
    4a78:	e853 2f00 	ldrex	r2, [r3]
    4a7c:	f042 0101 	orr.w	r1, r2, #1
    4a80:	e843 1000 	strex	r0, r1, [r3]
    4a84:	2800      	cmp	r0, #0
    4a86:	d1f7      	bne.n	4a78 <bt_le_set_auto_conn+0x3c>
    4a88:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4a8c:	07d1      	lsls	r1, r2, #31
    4a8e:	d402      	bmi.n	4a96 <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4a90:	4620      	mov	r0, r4
    4a92:	f7ff fd2b 	bl	44ec <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4a96:	7a63      	ldrb	r3, [r4, #9]
    4a98:	b963      	cbnz	r3, 4ab4 <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4a9a:	481b      	ldr	r0, [pc, #108]	; (4b08 <bt_le_set_auto_conn+0xcc>)
    4a9c:	f7ff fa16 	bl	3ecc <atomic_get>
    4aa0:	0783      	lsls	r3, r0, #30
    4aa2:	d507      	bpl.n	4ab4 <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4aa4:	b11d      	cbz	r5, 4aae <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4aa6:	2101      	movs	r1, #1
    4aa8:	4620      	mov	r0, r4
    4aaa:	f7ff fe75 	bl	4798 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    4aae:	2000      	movs	r0, #0
    4ab0:	f7fd feaa 	bl	2808 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    4ab4:	4620      	mov	r0, r4
    4ab6:	f7ff fd9b 	bl	45f0 <bt_conn_unref>

	return 0;
    4aba:	2000      	movs	r0, #0
    4abc:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    4abe:	4608      	mov	r0, r1
    4ac0:	f7fd fd58 	bl	2574 <bt_le_conn_params_valid>
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d1be      	bne.n	4a46 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4ac8:	f06f 0015 	mvn.w	r0, #21
    4acc:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4ace:	f3bf 8f5b 	dmb	ish
    4ad2:	e853 2f00 	ldrex	r2, [r3]
    4ad6:	f022 0101 	bic.w	r1, r2, #1
    4ada:	e843 1000 	strex	r0, r1, [r3]
    4ade:	2800      	cmp	r0, #0
    4ae0:	d1f7      	bne.n	4ad2 <bt_le_set_auto_conn+0x96>
    4ae2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    4ae6:	07d2      	lsls	r2, r2, #31
    4ae8:	d5d5      	bpl.n	4a96 <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    4aea:	4620      	mov	r0, r4
    4aec:	f7ff fd80 	bl	45f0 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4af0:	7a63      	ldrb	r3, [r4, #9]
    4af2:	2b01      	cmp	r3, #1
    4af4:	d1cf      	bne.n	4a96 <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4af6:	4629      	mov	r1, r5
    4af8:	4620      	mov	r0, r4
    4afa:	f7ff fe4d 	bl	4798 <bt_conn_set_state>
    4afe:	e7ca      	b.n	4a96 <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4b00:	f06f 000b 	mvn.w	r0, #11
}
    4b04:	bd70      	pop	{r4, r5, r6, pc}
    4b06:	bf00      	nop
    4b08:	20003ad0 	.word	0x20003ad0

00004b0c <bt_conn_disconnect>:
{
    4b0c:	b570      	push	{r4, r5, r6, lr}
    4b0e:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4b10:	7881      	ldrb	r1, [r0, #2]
{
    4b12:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4b14:	b911      	cbnz	r1, 4b1c <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    4b16:	3044      	adds	r0, #68	; 0x44
    4b18:	f7ff ff90 	bl	4a3c <bt_le_set_auto_conn>
	switch (conn->state) {
    4b1c:	7a63      	ldrb	r3, [r4, #9]
    4b1e:	3b01      	subs	r3, #1
    4b20:	2b03      	cmp	r3, #3
    4b22:	d803      	bhi.n	4b2c <bt_conn_disconnect+0x20>
    4b24:	e8df f003 	tbb	[pc, r3]
    4b28:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4b2c:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4b30:	4628      	mov	r0, r5
    4b32:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4b34:	4620      	mov	r0, r4
		conn->err = reason;
    4b36:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4b38:	2100      	movs	r1, #0
    4b3a:	f7ff fe2d 	bl	4798 <bt_conn_set_state>
		bt_le_scan_update(false);
    4b3e:	2000      	movs	r0, #0
    4b40:	f7fd fe62 	bl	2808 <bt_le_scan_update>
		return 0;
    4b44:	2500      	movs	r5, #0
    4b46:	e7f3      	b.n	4b30 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4b48:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4b4c:	f010 f900 	bl	14d50 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4b50:	2100      	movs	r1, #0
    4b52:	f242 000e 	movw	r0, #8206	; 0x200e
}
    4b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4b5a:	f7fd bdcb 	b.w	26f4 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4b5e:	2103      	movs	r1, #3
    4b60:	f240 4006 	movw	r0, #1030	; 0x406
    4b64:	f7fd fbce 	bl	2304 <bt_hci_cmd_create>
	if (!buf) {
    4b68:	4605      	mov	r5, r0
    4b6a:	b198      	cbz	r0, 4b94 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4b6c:	2103      	movs	r1, #3
    4b6e:	3008      	adds	r0, #8
    4b70:	f00e fbae 	bl	132d0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4b74:	8823      	ldrh	r3, [r4, #0]
    4b76:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4b78:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4b7a:	4629      	mov	r1, r5
    4b7c:	f240 4006 	movw	r0, #1030	; 0x406
    4b80:	f7fd fdb8 	bl	26f4 <bt_hci_cmd_send>
	if (err) {
    4b84:	4605      	mov	r5, r0
    4b86:	2800      	cmp	r0, #0
    4b88:	d1d2      	bne.n	4b30 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4b8a:	2104      	movs	r1, #4
    4b8c:	4620      	mov	r0, r4
    4b8e:	f7ff fe03 	bl	4798 <bt_conn_set_state>
    4b92:	e7cd      	b.n	4b30 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    4b94:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4b98:	e7ca      	b.n	4b30 <bt_conn_disconnect+0x24>

00004b9a <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b9c:	4607      	mov	r7, r0
    4b9e:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4ba0:	f242 0013 	movw	r0, #8211	; 0x2013
    4ba4:	210e      	movs	r1, #14
    4ba6:	f7fd fbad 	bl	2304 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    4baa:	4606      	mov	r6, r0
    4bac:	b1c8      	cbz	r0, 4be2 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4bae:	210e      	movs	r1, #14
    4bb0:	3008      	adds	r0, #8
    4bb2:	f00e fb8d 	bl	132d0 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    4bb6:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4bb8:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4bba:	220e      	movs	r2, #14
    4bbc:	f7fd f95e 	bl	1e7c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4bc0:	883b      	ldrh	r3, [r7, #0]
    4bc2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4bc4:	882b      	ldrh	r3, [r5, #0]
    4bc6:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4bc8:	886b      	ldrh	r3, [r5, #2]
    4bca:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4bcc:	88ab      	ldrh	r3, [r5, #4]
    4bce:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4bd0:	88eb      	ldrh	r3, [r5, #6]
    4bd2:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4bd4:	4631      	mov	r1, r6
    4bd6:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4bda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4bde:	f7fd bd89 	b.w	26f4 <bt_hci_cmd_send>
}
    4be2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004be8 <bt_conn_le_param_update>:
{
    4be8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4bea:	4b27      	ldr	r3, [pc, #156]	; (4c88 <bt_conn_le_param_update+0xa0>)
{
    4bec:	460d      	mov	r5, r1
    4bee:	b08a      	sub	sp, #40	; 0x28
    4bf0:	4604      	mov	r4, r0
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4bf2:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4bf4:	f00f fd18 	bl	14628 <_impl_k_current_get>
    4bf8:	88ea      	ldrh	r2, [r5, #6]
    4bfa:	9207      	str	r2, [sp, #28]
    4bfc:	88aa      	ldrh	r2, [r5, #4]
    4bfe:	9206      	str	r2, [sp, #24]
    4c00:	886a      	ldrh	r2, [r5, #2]
    4c02:	9205      	str	r2, [sp, #20]
    4c04:	882a      	ldrh	r2, [r5, #0]
    4c06:	4b21      	ldr	r3, [pc, #132]	; (4c8c <bt_conn_le_param_update+0xa4>)
    4c08:	9204      	str	r2, [sp, #16]
    4c0a:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    4c0e:	9308      	str	r3, [sp, #32]
    4c10:	9203      	str	r2, [sp, #12]
    4c12:	9001      	str	r0, [sp, #4]
    4c14:	9300      	str	r3, [sp, #0]
    4c16:	4a1e      	ldr	r2, [pc, #120]	; (4c90 <bt_conn_le_param_update+0xa8>)
    4c18:	4b1e      	ldr	r3, [pc, #120]	; (4c94 <bt_conn_le_param_update+0xac>)
    4c1a:	9402      	str	r4, [sp, #8]
    4c1c:	491e      	ldr	r1, [pc, #120]	; (4c98 <bt_conn_le_param_update+0xb0>)
    4c1e:	481f      	ldr	r0, [pc, #124]	; (4c9c <bt_conn_le_param_update+0xb4>)
    4c20:	47b0      	blx	r6
	if (conn->le.interval >= param->interval_min &&
    4c22:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    4c26:	882a      	ldrh	r2, [r5, #0]
    4c28:	429a      	cmp	r2, r3
    4c2a:	d80c      	bhi.n	4c46 <bt_conn_le_param_update+0x5e>
    4c2c:	886a      	ldrh	r2, [r5, #2]
    4c2e:	429a      	cmp	r2, r3
    4c30:	d309      	bcc.n	4c46 <bt_conn_le_param_update+0x5e>
	    conn->le.interval <= param->interval_max &&
    4c32:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    4c36:	88ab      	ldrh	r3, [r5, #4]
    4c38:	429a      	cmp	r2, r3
    4c3a:	d104      	bne.n	4c46 <bt_conn_le_param_update+0x5e>
	    conn->le.latency == param->latency &&
    4c3c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    4c40:	88eb      	ldrh	r3, [r5, #6]
    4c42:	429a      	cmp	r2, r3
    4c44:	d01c      	beq.n	4c80 <bt_conn_le_param_update+0x98>
	k_delayed_work_cancel(&conn->le.update_work);
    4c46:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4c4a:	f010 f881 	bl	14d50 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4c4e:	4b14      	ldr	r3, [pc, #80]	; (4ca0 <bt_conn_le_param_update+0xb8>)
    4c50:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4c54:	079a      	lsls	r2, r3, #30
    4c56:	d503      	bpl.n	4c60 <bt_conn_le_param_update+0x78>
    4c58:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    4c5c:	079b      	lsls	r3, r3, #30
    4c5e:	d401      	bmi.n	4c64 <bt_conn_le_param_update+0x7c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4c60:	78e3      	ldrb	r3, [r4, #3]
    4c62:	b933      	cbnz	r3, 4c72 <bt_conn_le_param_update+0x8a>
		return bt_conn_le_conn_update(conn, param);
    4c64:	4629      	mov	r1, r5
    4c66:	4620      	mov	r0, r4
}
    4c68:	b00a      	add	sp, #40	; 0x28
    4c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_conn_le_conn_update(conn, param);
    4c6e:	f7ff bf94 	b.w	4b9a <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    4c72:	4629      	mov	r1, r5
    4c74:	4620      	mov	r0, r4
}
    4c76:	b00a      	add	sp, #40	; 0x28
    4c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_l2cap_update_conn_param(conn, param);
    4c7c:	f000 bbd6 	b.w	542c <bt_l2cap_update_conn_param>
}
    4c80:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4c84:	b00a      	add	sp, #40	; 0x28
    4c86:	bd70      	pop	{r4, r5, r6, pc}
    4c88:	20003a5c 	.word	0x20003a5c
    4c8c:	0001563e 	.word	0x0001563e
    4c90:	00016c76 	.word	0x00016c76
    4c94:	00016b53 	.word	0x00016b53
    4c98:	00016808 	.word	0x00016808
    4c9c:	00016b6b 	.word	0x00016b6b
    4ca0:	20003a60 	.word	0x20003a60

00004ca4 <le_conn_update>:
{
    4ca4:	4603      	mov	r3, r0
    4ca6:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4ca8:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    4cac:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    4cae:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4cb2:	d105      	bne.n	4cc0 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    4cb4:	2113      	movs	r1, #19
    4cb6:	f7ff ff29 	bl	4b0c <bt_conn_disconnect>
}
    4cba:	b003      	add	sp, #12
    4cbc:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4cc0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    4cc4:	f8ad 2000 	strh.w	r2, [sp]
    4cc8:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    4ccc:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    4cd0:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4cd2:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    4cd6:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    4cda:	f8ad 2004 	strh.w	r2, [sp, #4]
    4cde:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    4ce2:	f7ff ff81 	bl	4be8 <bt_conn_le_param_update>
    4ce6:	e7e8      	b.n	4cba <le_conn_update+0x16>

00004ce8 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4ce8:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4cea:	4b0e      	ldr	r3, [pc, #56]	; (4d24 <bt_conn_create_pdu+0x3c>)
{
    4cec:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    4cee:	2800      	cmp	r0, #0
    4cf0:	bf08      	it	eq
    4cf2:	4618      	moveq	r0, r3
    4cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4cf8:	f00e fa88 	bl	1320c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    4cfc:	4604      	mov	r4, r0
    4cfe:	b950      	cbnz	r0, 4d16 <bt_conn_create_pdu+0x2e>
    4d00:	f44f 63f2 	mov.w	r3, #1936	; 0x790
    4d04:	4a08      	ldr	r2, [pc, #32]	; (4d28 <bt_conn_create_pdu+0x40>)
    4d06:	4909      	ldr	r1, [pc, #36]	; (4d2c <bt_conn_create_pdu+0x44>)
    4d08:	4809      	ldr	r0, [pc, #36]	; (4d30 <bt_conn_create_pdu+0x48>)
    4d0a:	f7fc f93f 	bl	f8c <printk>
    4d0e:	4809      	ldr	r0, [pc, #36]	; (4d34 <bt_conn_create_pdu+0x4c>)
    4d10:	f7fc f93c 	bl	f8c <printk>
    4d14:	e7fe      	b.n	4d14 <bt_conn_create_pdu+0x2c>

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4d16:	1d29      	adds	r1, r5, #4
    4d18:	3008      	adds	r0, #8
    4d1a:	f00e fa96 	bl	1324a <net_buf_simple_reserve>

	return buf;
}
    4d1e:	4620      	mov	r0, r4
    4d20:	bd38      	pop	{r3, r4, r5, pc}
    4d22:	bf00      	nop
    4d24:	20003f2c 	.word	0x20003f2c
    4d28:	00017013 	.word	0x00017013
    4d2c:	00016217 	.word	0x00016217
    4d30:	00015620 	.word	0x00015620
    4d34:	0001563e 	.word	0x0001563e

00004d38 <create_frag.isra.9>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d3c:	4606      	mov	r6, r0
    4d3e:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4d40:	4816      	ldr	r0, [pc, #88]	; (4d9c <create_frag.isra.9+0x64>)
    4d42:	2100      	movs	r1, #0
    4d44:	f7ff ffd0 	bl	4ce8 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    4d48:	7833      	ldrb	r3, [r6, #0]
    4d4a:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4d4c:	4605      	mov	r5, r0
    4d4e:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    4d52:	d005      	beq.n	4d60 <create_frag.isra.9+0x28>
		net_buf_unref(frag);
    4d54:	f00e fa8a 	bl	1326c <net_buf_unref>
		return NULL;
    4d58:	4635      	mov	r5, r6
}
    4d5a:	4628      	mov	r0, r5
    4d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    4d60:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4d62:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    4d66:	4e0e      	ldr	r6, [pc, #56]	; (4da0 <create_frag.isra.9+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4d68:	4638      	mov	r0, r7
    4d6a:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    4d6e:	f00e faea 	bl	13346 <net_buf_simple_tailroom>
    4d72:	4580      	cmp	r8, r0
    4d74:	d20c      	bcs.n	4d90 <create_frag.isra.9+0x58>
	return bt_dev.le.mtu;
    4d76:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    4d7a:	f854 1f08 	ldr.w	r1, [r4, #8]!
    4d7e:	4632      	mov	r2, r6
    4d80:	4638      	mov	r0, r7
    4d82:	f00e faab 	bl	132dc <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4d86:	4631      	mov	r1, r6
    4d88:	4620      	mov	r0, r4
    4d8a:	f00e fac0 	bl	1330e <net_buf_simple_pull>
    4d8e:	e7e4      	b.n	4d5a <create_frag.isra.9+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4d90:	4638      	mov	r0, r7
    4d92:	f00e fad8 	bl	13346 <net_buf_simple_tailroom>
    4d96:	b286      	uxth	r6, r0
    4d98:	e7ef      	b.n	4d7a <create_frag.isra.9+0x42>
    4d9a:	bf00      	nop
    4d9c:	20003f4c 	.word	0x20003f4c
    4da0:	20003a60 	.word	0x20003a60

00004da4 <bt_conn_process_tx>:
{
    4da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("conn %p", conn);
    4da8:	4f49      	ldr	r7, [pc, #292]	; (4ed0 <bt_conn_process_tx+0x12c>)
    4daa:	4d4a      	ldr	r5, [pc, #296]	; (4ed4 <bt_conn_process_tx+0x130>)
    4dac:	683e      	ldr	r6, [r7, #0]
{
    4dae:	b086      	sub	sp, #24
    4db0:	4604      	mov	r4, r0
    4db2:	f00f fc39 	bl	14628 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    4db6:	4b48      	ldr	r3, [pc, #288]	; (4ed8 <bt_conn_process_tx+0x134>)
    4db8:	9001      	str	r0, [sp, #4]
    4dba:	9503      	str	r5, [sp, #12]
    4dbc:	9402      	str	r4, [sp, #8]
    4dbe:	9500      	str	r5, [sp, #0]
    4dc0:	4a46      	ldr	r2, [pc, #280]	; (4edc <bt_conn_process_tx+0x138>)
    4dc2:	4947      	ldr	r1, [pc, #284]	; (4ee0 <bt_conn_process_tx+0x13c>)
    4dc4:	4847      	ldr	r0, [pc, #284]	; (4ee4 <bt_conn_process_tx+0x140>)
    4dc6:	47b0      	blx	r6
	if (conn->state == BT_CONN_DISCONNECTED &&
    4dc8:	7a63      	ldrb	r3, [r4, #9]
    4dca:	46b8      	mov	r8, r7
    4dcc:	462e      	mov	r6, r5
    4dce:	bb0b      	cbnz	r3, 4e14 <bt_conn_process_tx+0x70>
    4dd0:	f3bf 8f5b 	dmb	ish
    4dd4:	1d23      	adds	r3, r4, #4
    4dd6:	e853 2f00 	ldrex	r2, [r3]
    4dda:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4dde:	e843 1000 	strex	r0, r1, [r3]
    4de2:	2800      	cmp	r0, #0
    4de4:	d1f7      	bne.n	4dd6 <bt_conn_process_tx+0x32>
    4de6:	f3bf 8f5b 	dmb	ish
    4dea:	0653      	lsls	r3, r2, #25
    4dec:	d512      	bpl.n	4e14 <bt_conn_process_tx+0x70>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    4dee:	683e      	ldr	r6, [r7, #0]
    4df0:	f00f fc1a 	bl	14628 <_impl_k_current_get>
    4df4:	9503      	str	r5, [sp, #12]
    4df6:	8823      	ldrh	r3, [r4, #0]
    4df8:	9302      	str	r3, [sp, #8]
    4dfa:	9001      	str	r0, [sp, #4]
    4dfc:	9500      	str	r5, [sp, #0]
    4dfe:	4b36      	ldr	r3, [pc, #216]	; (4ed8 <bt_conn_process_tx+0x134>)
    4e00:	4a36      	ldr	r2, [pc, #216]	; (4edc <bt_conn_process_tx+0x138>)
    4e02:	4937      	ldr	r1, [pc, #220]	; (4ee0 <bt_conn_process_tx+0x13c>)
    4e04:	4838      	ldr	r0, [pc, #224]	; (4ee8 <bt_conn_process_tx+0x144>)
    4e06:	47b0      	blx	r6
		conn_cleanup(conn);
    4e08:	4620      	mov	r0, r4
}
    4e0a:	b006      	add	sp, #24
    4e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn);
    4e10:	f7ff bc20 	b.w	4654 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4e14:	2100      	movs	r1, #0
    4e16:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4e1a:	f00e f9fd 	bl	13218 <net_buf_get>
	BT_ASSERT(buf);
    4e1e:	4605      	mov	r5, r0
    4e20:	b970      	cbnz	r0, 4e40 <bt_conn_process_tx+0x9c>
    4e22:	9601      	str	r6, [sp, #4]
    4e24:	9600      	str	r6, [sp, #0]
    4e26:	f8d8 4000 	ldr.w	r4, [r8]
    4e2a:	4b2b      	ldr	r3, [pc, #172]	; (4ed8 <bt_conn_process_tx+0x134>)
    4e2c:	4a2f      	ldr	r2, [pc, #188]	; (4eec <bt_conn_process_tx+0x148>)
    4e2e:	492c      	ldr	r1, [pc, #176]	; (4ee0 <bt_conn_process_tx+0x13c>)
    4e30:	482f      	ldr	r0, [pc, #188]	; (4ef0 <bt_conn_process_tx+0x14c>)
    4e32:	47a0      	blx	r4
    4e34:	4040      	eors	r0, r0
    4e36:	f380 8811 	msr	BASEPRI, r0
    4e3a:	f04f 0004 	mov.w	r0, #4
    4e3e:	df02      	svc	2
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4e40:	f8d8 7000 	ldr.w	r7, [r8]
    4e44:	f00f fbf0 	bl	14628 <_impl_k_current_get>
    4e48:	9605      	str	r6, [sp, #20]
    4e4a:	89ab      	ldrh	r3, [r5, #12]
    4e4c:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    4e4e:	4e29      	ldr	r6, [pc, #164]	; (4ef4 <bt_conn_process_tx+0x150>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4e50:	9304      	str	r3, [sp, #16]
    4e52:	9001      	str	r0, [sp, #4]
    4e54:	4a21      	ldr	r2, [pc, #132]	; (4edc <bt_conn_process_tx+0x138>)
    4e56:	4922      	ldr	r1, [pc, #136]	; (4ee0 <bt_conn_process_tx+0x13c>)
    4e58:	9503      	str	r5, [sp, #12]
    4e5a:	9402      	str	r4, [sp, #8]
    4e5c:	4b26      	ldr	r3, [pc, #152]	; (4ef8 <bt_conn_process_tx+0x154>)
    4e5e:	4827      	ldr	r0, [pc, #156]	; (4efc <bt_conn_process_tx+0x158>)
    4e60:	47b8      	blx	r7
	if (buf->len <= conn_mtu(conn)) {
    4e62:	89a9      	ldrh	r1, [r5, #12]
    4e64:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    4e68:	4291      	cmp	r1, r2
    4e6a:	d809      	bhi.n	4e80 <bt_conn_process_tx+0xdc>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4e6c:	2300      	movs	r3, #0
    4e6e:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4e70:	4629      	mov	r1, r5
    4e72:	4620      	mov	r0, r4
    4e74:	f7ff fa08 	bl	4288 <send_frag>
	if (!send_buf(conn, buf)) {
    4e78:	b150      	cbz	r0, 4e90 <bt_conn_process_tx+0xec>
}
    4e7a:	b006      	add	sp, #24
    4e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e80:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    4e84:	4629      	mov	r1, r5
    4e86:	4638      	mov	r0, r7
    4e88:	f7ff ff56 	bl	4d38 <create_frag.isra.9>
	if (!frag) {
    4e8c:	4601      	mov	r1, r0
    4e8e:	b928      	cbnz	r0, 4e9c <bt_conn_process_tx+0xf8>
		net_buf_unref(buf);
    4e90:	4628      	mov	r0, r5
}
    4e92:	b006      	add	sp, #24
    4e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4e98:	f00e b9e8 	b.w	1326c <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4e9c:	2301      	movs	r3, #1
    4e9e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4ea0:	4620      	mov	r0, r4
    4ea2:	f7ff f9f1 	bl	4288 <send_frag>
    4ea6:	2800      	cmp	r0, #0
    4ea8:	d0f2      	beq.n	4e90 <bt_conn_process_tx+0xec>
	while (buf->len > conn_mtu(conn)) {
    4eaa:	89aa      	ldrh	r2, [r5, #12]
    4eac:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4eb0:	429a      	cmp	r2, r3
    4eb2:	d802      	bhi.n	4eba <bt_conn_process_tx+0x116>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4eb4:	2300      	movs	r3, #0
    4eb6:	2201      	movs	r2, #1
    4eb8:	e7da      	b.n	4e70 <bt_conn_process_tx+0xcc>
		frag = create_frag(conn, buf);
    4eba:	4629      	mov	r1, r5
    4ebc:	4638      	mov	r0, r7
    4ebe:	f7ff ff3b 	bl	4d38 <create_frag.isra.9>
		if (!frag) {
    4ec2:	4601      	mov	r1, r0
    4ec4:	2800      	cmp	r0, #0
    4ec6:	d0e3      	beq.n	4e90 <bt_conn_process_tx+0xec>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4ec8:	2301      	movs	r3, #1
    4eca:	461a      	mov	r2, r3
    4ecc:	e7e8      	b.n	4ea0 <bt_conn_process_tx+0xfc>
    4ece:	bf00      	nop
    4ed0:	20003a5c 	.word	0x20003a5c
    4ed4:	0001563e 	.word	0x0001563e
    4ed8:	00016b14 	.word	0x00016b14
    4edc:	00016c76 	.word	0x00016c76
    4ee0:	00016808 	.word	0x00016808
    4ee4:	00016bad 	.word	0x00016bad
    4ee8:	00016c11 	.word	0x00016c11
    4eec:	000167b9 	.word	0x000167b9
    4ef0:	000168bd 	.word	0x000168bd
    4ef4:	20003a60 	.word	0x20003a60
    4ef8:	00016af4 	.word	0x00016af4
    4efc:	00016c4b 	.word	0x00016c4b

00004f00 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4f00:	4b03      	ldr	r3, [pc, #12]	; (4f10 <bt_conn_get_id+0x10>)
    4f02:	1ac0      	subs	r0, r0, r3
    4f04:	4b03      	ldr	r3, [pc, #12]	; (4f14 <bt_conn_get_id+0x14>)
    4f06:	10c0      	asrs	r0, r0, #3
    4f08:	4358      	muls	r0, r3
}
    4f0a:	b2c0      	uxtb	r0, r0
    4f0c:	4770      	bx	lr
    4f0e:	bf00      	nop
    4f10:	20000360 	.word	0x20000360
    4f14:	286bca1b 	.word	0x286bca1b

00004f18 <bt_conn_init>:
	parent->next = child;
    4f18:	4b12      	ldr	r3, [pc, #72]	; (4f64 <bt_conn_init+0x4c>)
    4f1a:	4a13      	ldr	r2, [pc, #76]	; (4f68 <bt_conn_init+0x50>)
    4f1c:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4f1e:	b510      	push	{r4, lr}
    4f20:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4f22:	6859      	ldr	r1, [r3, #4]
    4f24:	b901      	cbnz	r1, 4f28 <bt_conn_init+0x10>
	list->tail = node;
    4f26:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4f28:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    4f2a:	6092      	str	r2, [r2, #8]
	list->head = node;
    4f2c:	4a0f      	ldr	r2, [pc, #60]	; (4f6c <bt_conn_init+0x54>)
    4f2e:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4f30:	b901      	cbnz	r1, 4f34 <bt_conn_init+0x1c>
	list->tail = node;
    4f32:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4f34:	f001 fb9e 	bl	6674 <bt_att_init>

	err = bt_smp_init();
    4f38:	f002 f90c 	bl	7154 <bt_smp_init>
	if (err) {
    4f3c:	4604      	mov	r4, r0
    4f3e:	b970      	cbnz	r0, 4f5e <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4f40:	f000 fa9c 	bl	547c <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4f44:	480a      	ldr	r0, [pc, #40]	; (4f70 <bt_conn_init+0x58>)
    4f46:	f7fe ffc1 	bl	3ecc <atomic_get>
    4f4a:	b140      	cbz	r0, 4f5e <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4f4c:	4809      	ldr	r0, [pc, #36]	; (4f74 <bt_conn_init+0x5c>)
    4f4e:	f7fe ffbd 	bl	3ecc <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4f52:	07c3      	lsls	r3, r0, #31
    4f54:	d503      	bpl.n	4f5e <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4f56:	2101      	movs	r1, #1
    4f58:	4807      	ldr	r0, [pc, #28]	; (4f78 <bt_conn_init+0x60>)
    4f5a:	f7ff fc1d 	bl	4798 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4f5e:	4620      	mov	r0, r4
    4f60:	bd10      	pop	{r4, pc}
    4f62:	bf00      	nop
    4f64:	200003f8 	.word	0x200003f8
    4f68:	20000350 	.word	0x20000350
    4f6c:	20000358 	.word	0x20000358
    4f70:	200003a0 	.word	0x200003a0
    4f74:	20000364 	.word	0x20000364
    4f78:	20000360 	.word	0x20000360

00004f7c <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4f7c:	4770      	bx	lr
	...

00004f80 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4f82:	4a0b      	ldr	r2, [pc, #44]	; (4fb0 <l2cap_accept+0x30>)
    4f84:	6813      	ldr	r3, [r2, #0]
    4f86:	b92b      	cbnz	r3, 4f94 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4f88:	480a      	ldr	r0, [pc, #40]	; (4fb4 <l2cap_accept+0x34>)
    4f8a:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4f8c:	600a      	str	r2, [r1, #0]

		return 0;
    4f8e:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    4f90:	b004      	add	sp, #16
    4f92:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    4f94:	4b08      	ldr	r3, [pc, #32]	; (4fb8 <l2cap_accept+0x38>)
    4f96:	9302      	str	r3, [sp, #8]
    4f98:	9300      	str	r3, [sp, #0]
    4f9a:	4b08      	ldr	r3, [pc, #32]	; (4fbc <l2cap_accept+0x3c>)
    4f9c:	9001      	str	r0, [sp, #4]
    4f9e:	681c      	ldr	r4, [r3, #0]
    4fa0:	4807      	ldr	r0, [pc, #28]	; (4fc0 <l2cap_accept+0x40>)
    4fa2:	4b08      	ldr	r3, [pc, #32]	; (4fc4 <l2cap_accept+0x44>)
    4fa4:	4a08      	ldr	r2, [pc, #32]	; (4fc8 <l2cap_accept+0x48>)
    4fa6:	4909      	ldr	r1, [pc, #36]	; (4fcc <l2cap_accept+0x4c>)
    4fa8:	47a0      	blx	r4
	return -ENOMEM;
    4faa:	f06f 000b 	mvn.w	r0, #11
    4fae:	e7ef      	b.n	4f90 <l2cap_accept+0x10>
    4fb0:	20000400 	.word	0x20000400
    4fb4:	20003ba4 	.word	0x20003ba4
    4fb8:	0001563e 	.word	0x0001563e
    4fbc:	20003a5c 	.word	0x20003a5c
    4fc0:	00017170 	.word	0x00017170
    4fc4:	00017101 	.word	0x00017101
    4fc8:	000167b9 	.word	0x000167b9
    4fcc:	00016808 	.word	0x00016808

00004fd0 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fd2:	4607      	mov	r7, r0
    4fd4:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4fd6:	2000      	movs	r0, #0
    4fd8:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4fda:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4fdc:	f7ff fe84 	bl	4ce8 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4fe0:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4fe2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4fe4:	3008      	adds	r0, #8
    4fe6:	f00e f973 	bl	132d0 <net_buf_simple_add>
	hdr->code = code;
    4fea:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    4fec:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4fee:	8045      	strh	r5, [r0, #2]
}
    4ff0:	4620      	mov	r0, r4
    4ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004ff4 <l2cap_connected>:
    4ff4:	4770      	bx	lr
	...

00004ff8 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4ff8:	2300      	movs	r3, #0
    4ffa:	6083      	str	r3, [r0, #8]
    4ffc:	4b05      	ldr	r3, [pc, #20]	; (5014 <bt_l2cap_le_fixed_chan_register+0x1c>)
    4ffe:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    5000:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    5004:	b911      	cbnz	r1, 500c <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    5006:	605a      	str	r2, [r3, #4]
	list->head = node;
    5008:	601a      	str	r2, [r3, #0]
    500a:	4770      	bx	lr
	parent->next = child;
    500c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    500e:	605a      	str	r2, [r3, #4]
    5010:	4770      	bx	lr
    5012:	bf00      	nop
    5014:	20000498 	.word	0x20000498

00005018 <bt_l2cap_chan_remove>:
{
    5018:	6b83      	ldr	r3, [r0, #56]	; 0x38
    501a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    501c:	b113      	cbz	r3, 5024 <bt_l2cap_chan_remove+0xc>
    501e:	3b08      	subs	r3, #8
    5020:	2200      	movs	r2, #0
    5022:	b903      	cbnz	r3, 5026 <bt_l2cap_chan_remove+0xe>
    5024:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    5026:	428b      	cmp	r3, r1
    5028:	f103 0408 	add.w	r4, r3, #8
    502c:	d10f      	bne.n	504e <bt_l2cap_chan_remove+0x36>
    502e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    5030:	b93a      	cbnz	r2, 5042 <bt_l2cap_chan_remove+0x2a>
    5032:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    5034:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    5036:	4294      	cmp	r4, r2
    5038:	d100      	bne.n	503c <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    503a:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    503c:	2200      	movs	r2, #0
    503e:	609a      	str	r2, [r3, #8]
    5040:	bd10      	pop	{r4, pc}
    5042:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    5044:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    5046:	428c      	cmp	r4, r1
	list->tail = node;
    5048:	bf08      	it	eq
    504a:	63c2      	streq	r2, [r0, #60]	; 0x3c
    504c:	e7f6      	b.n	503c <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    504e:	4622      	mov	r2, r4
    5050:	2c00      	cmp	r4, #0
    5052:	d0e7      	beq.n	5024 <bt_l2cap_chan_remove+0xc>
	return node->next;
    5054:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5056:	2b00      	cmp	r3, #0
    5058:	d0e4      	beq.n	5024 <bt_l2cap_chan_remove+0xc>
    505a:	3b08      	subs	r3, #8
    505c:	e7e1      	b.n	5022 <bt_l2cap_chan_remove+0xa>

0000505e <bt_l2cap_chan_del>:
	if (!chan->conn) {
    505e:	6803      	ldr	r3, [r0, #0]
{
    5060:	b510      	push	{r4, lr}
    5062:	4604      	mov	r4, r0
	if (!chan->conn) {
    5064:	b12b      	cbz	r3, 5072 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    5066:	6843      	ldr	r3, [r0, #4]
    5068:	685b      	ldr	r3, [r3, #4]
    506a:	b103      	cbz	r3, 506e <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    506c:	4798      	blx	r3
	chan->conn = NULL;
    506e:	2300      	movs	r3, #0
    5070:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    5072:	68e3      	ldr	r3, [r4, #12]
    5074:	b11b      	cbz	r3, 507e <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    5076:	4620      	mov	r0, r4
}
    5078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    507c:	4718      	bx	r3
    507e:	bd10      	pop	{r4, pc}

00005080 <l2cap_rtx_timeout>:
{
    5080:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_ERR("chan %p timeout", chan);
    5082:	4b0c      	ldr	r3, [pc, #48]	; (50b4 <l2cap_rtx_timeout+0x34>)
    5084:	9302      	str	r3, [sp, #8]
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    5086:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    508a:	e88d 0018 	stmia.w	sp, {r3, r4}
    508e:	4b0a      	ldr	r3, [pc, #40]	; (50b8 <l2cap_rtx_timeout+0x38>)
    5090:	4a0a      	ldr	r2, [pc, #40]	; (50bc <l2cap_rtx_timeout+0x3c>)
    5092:	681e      	ldr	r6, [r3, #0]
    5094:	490a      	ldr	r1, [pc, #40]	; (50c0 <l2cap_rtx_timeout+0x40>)
    5096:	4b0b      	ldr	r3, [pc, #44]	; (50c4 <l2cap_rtx_timeout+0x44>)
{
    5098:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    509a:	480b      	ldr	r0, [pc, #44]	; (50c8 <l2cap_rtx_timeout+0x48>)
    509c:	47b0      	blx	r6
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    509e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    50a2:	4621      	mov	r1, r4
    50a4:	f7ff ffb8 	bl	5018 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    50a8:	4620      	mov	r0, r4
}
    50aa:	b004      	add	sp, #16
    50ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_chan_del(&chan->chan);
    50b0:	f7ff bfd5 	b.w	505e <bt_l2cap_chan_del>
    50b4:	0001563e 	.word	0x0001563e
    50b8:	20003a5c 	.word	0x20003a5c
    50bc:	000167b9 	.word	0x000167b9
    50c0:	00016808 	.word	0x00016808
    50c4:	000170ab 	.word	0x000170ab
    50c8:	000172c4 	.word	0x000172c4

000050cc <bt_l2cap_connected>:
{
    50cc:	4b1a      	ldr	r3, [pc, #104]	; (5138 <bt_l2cap_connected+0x6c>)
    50ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    50d2:	681c      	ldr	r4, [r3, #0]
    50d4:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    50d6:	b12c      	cbz	r4, 50e4 <bt_l2cap_connected+0x18>
	parent->next = child;
    50d8:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    50da:	f8df 8060 	ldr.w	r8, [pc, #96]	; 513c <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    50de:	3c08      	subs	r4, #8
    50e0:	46b9      	mov	r9, r7
    50e2:	b914      	cbnz	r4, 50ea <bt_l2cap_connected+0x1e>
}
    50e4:	b003      	add	sp, #12
    50e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    50ea:	6863      	ldr	r3, [r4, #4]
    50ec:	a901      	add	r1, sp, #4
    50ee:	4630      	mov	r0, r6
    50f0:	4798      	blx	r3
    50f2:	2800      	cmp	r0, #0
    50f4:	db18      	blt.n	5128 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    50f6:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    50f8:	8823      	ldrh	r3, [r4, #0]
    50fa:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    50fc:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5100:	4641      	mov	r1, r8
    5102:	f105 0010 	add.w	r0, r5, #16
    5106:	f00f fe13 	bl	14d30 <k_delayed_work_init>
    510a:	60af      	str	r7, [r5, #8]
    510c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    510e:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    5112:	b972      	cbnz	r2, 5132 <bt_l2cap_connected+0x66>
	list->tail = node;
    5114:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    5116:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    5118:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    511a:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    511c:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    511e:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    5122:	681b      	ldr	r3, [r3, #0]
    5124:	b103      	cbz	r3, 5128 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    5126:	4798      	blx	r3
	return node->next;
    5128:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    512a:	2c00      	cmp	r4, #0
    512c:	d0da      	beq.n	50e4 <bt_l2cap_connected+0x18>
    512e:	3c08      	subs	r4, #8
    5130:	e7d7      	b.n	50e2 <bt_l2cap_connected+0x16>
	parent->next = child;
    5132:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5134:	63f3      	str	r3, [r6, #60]	; 0x3c
    5136:	e7ef      	b.n	5118 <bt_l2cap_connected+0x4c>
    5138:	20000498 	.word	0x20000498
    513c:	00005081 	.word	0x00005081

00005140 <bt_l2cap_disconnected>:
{
    5140:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5142:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5144:	b1a3      	cbz	r3, 5170 <bt_l2cap_disconnected+0x30>
    5146:	f1b3 0008 	subs.w	r0, r3, #8
    514a:	d10a      	bne.n	5162 <bt_l2cap_disconnected+0x22>
    514c:	bd10      	pop	{r4, pc}
    514e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    5150:	f7ff ff85 	bl	505e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5154:	b164      	cbz	r4, 5170 <bt_l2cap_disconnected+0x30>
	return node->next;
    5156:	68a3      	ldr	r3, [r4, #8]
    5158:	b103      	cbz	r3, 515c <bt_l2cap_disconnected+0x1c>
    515a:	3b08      	subs	r3, #8
{
    515c:	4620      	mov	r0, r4
    515e:	461c      	mov	r4, r3
    5160:	e7f6      	b.n	5150 <bt_l2cap_disconnected+0x10>
    5162:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5164:	2c00      	cmp	r4, #0
    5166:	d1f2      	bne.n	514e <bt_l2cap_disconnected+0xe>
}
    5168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    516c:	f7ff bf77 	b.w	505e <bt_l2cap_chan_del>
    5170:	bd10      	pop	{r4, pc}

00005172 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5172:	3104      	adds	r1, #4
    5174:	f7ff bdb8 	b.w	4ce8 <bt_conn_create_pdu>

00005178 <bt_l2cap_send_cb>:
{
    5178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    517a:	4614      	mov	r4, r2
    517c:	4605      	mov	r5, r0
    517e:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    5180:	f102 0008 	add.w	r0, r2, #8
    5184:	2104      	movs	r1, #4
{
    5186:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    5188:	f00e f8b9 	bl	132fe <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    518c:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    518e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5190:	3904      	subs	r1, #4
    5192:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    5194:	4632      	mov	r2, r6
    5196:	4621      	mov	r1, r4
    5198:	4628      	mov	r0, r5
}
    519a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    519e:	f7fe bff1 	b.w	4184 <bt_conn_send_cb>
	...

000051a4 <l2cap_recv>:
{
    51a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    51a6:	898b      	ldrh	r3, [r1, #12]
    51a8:	2b03      	cmp	r3, #3
{
    51aa:	b087      	sub	sp, #28
    51ac:	4607      	mov	r7, r0
    51ae:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    51b0:	d80a      	bhi.n	51c8 <l2cap_recv+0x24>
		BT_ERR("Too small L2CAP signaling PDU");
    51b2:	4b5e      	ldr	r3, [pc, #376]	; (532c <l2cap_recv+0x188>)
    51b4:	9301      	str	r3, [sp, #4]
    51b6:	9300      	str	r3, [sp, #0]
    51b8:	4b5d      	ldr	r3, [pc, #372]	; (5330 <l2cap_recv+0x18c>)
    51ba:	4a5e      	ldr	r2, [pc, #376]	; (5334 <l2cap_recv+0x190>)
    51bc:	681c      	ldr	r4, [r3, #0]
    51be:	495e      	ldr	r1, [pc, #376]	; (5338 <l2cap_recv+0x194>)
    51c0:	4b5e      	ldr	r3, [pc, #376]	; (533c <l2cap_recv+0x198>)
    51c2:	485f      	ldr	r0, [pc, #380]	; (5340 <l2cap_recv+0x19c>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    51c4:	47a0      	blx	r4
		return;
    51c6:	e015      	b.n	51f4 <l2cap_recv+0x50>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    51c8:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    51ca:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    51cc:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    51d0:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    51d2:	f00e f89c 	bl	1330e <net_buf_simple_pull>
	if (buf->len != len) {
    51d6:	89aa      	ldrh	r2, [r5, #12]
    51d8:	4296      	cmp	r6, r2
    51da:	d00d      	beq.n	51f8 <l2cap_recv+0x54>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    51dc:	4b53      	ldr	r3, [pc, #332]	; (532c <l2cap_recv+0x188>)
    51de:	9303      	str	r3, [sp, #12]
    51e0:	9300      	str	r3, [sp, #0]
    51e2:	4b53      	ldr	r3, [pc, #332]	; (5330 <l2cap_recv+0x18c>)
    51e4:	9201      	str	r2, [sp, #4]
    51e6:	9602      	str	r6, [sp, #8]
    51e8:	681c      	ldr	r4, [r3, #0]
    51ea:	4a52      	ldr	r2, [pc, #328]	; (5334 <l2cap_recv+0x190>)
    51ec:	4b53      	ldr	r3, [pc, #332]	; (533c <l2cap_recv+0x198>)
    51ee:	4952      	ldr	r1, [pc, #328]	; (5338 <l2cap_recv+0x194>)
    51f0:	4854      	ldr	r0, [pc, #336]	; (5344 <l2cap_recv+0x1a0>)
    51f2:	47a0      	blx	r4
}
    51f4:	b007      	add	sp, #28
    51f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    51f8:	7861      	ldrb	r1, [r4, #1]
    51fa:	b949      	cbnz	r1, 5210 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    51fc:	4b4b      	ldr	r3, [pc, #300]	; (532c <l2cap_recv+0x188>)
    51fe:	9301      	str	r3, [sp, #4]
    5200:	9300      	str	r3, [sp, #0]
    5202:	4b4b      	ldr	r3, [pc, #300]	; (5330 <l2cap_recv+0x18c>)
    5204:	4a4b      	ldr	r2, [pc, #300]	; (5334 <l2cap_recv+0x190>)
    5206:	681c      	ldr	r4, [r3, #0]
    5208:	494b      	ldr	r1, [pc, #300]	; (5338 <l2cap_recv+0x194>)
    520a:	4b4c      	ldr	r3, [pc, #304]	; (533c <l2cap_recv+0x198>)
    520c:	484e      	ldr	r0, [pc, #312]	; (5348 <l2cap_recv+0x1a4>)
    520e:	e7d9      	b.n	51c4 <l2cap_recv+0x20>
	switch (hdr->code) {
    5210:	7823      	ldrb	r3, [r4, #0]
    5212:	2b12      	cmp	r3, #18
    5214:	d02c      	beq.n	5270 <l2cap_recv+0xcc>
    5216:	2b13      	cmp	r3, #19
    5218:	d01e      	beq.n	5258 <l2cap_recv+0xb4>
    521a:	2b01      	cmp	r3, #1
    521c:	d0ea      	beq.n	51f4 <l2cap_recv+0x50>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    521e:	4a43      	ldr	r2, [pc, #268]	; (532c <l2cap_recv+0x188>)
    5220:	9202      	str	r2, [sp, #8]
    5222:	e88d 000c 	stmia.w	sp, {r2, r3}
    5226:	4b42      	ldr	r3, [pc, #264]	; (5330 <l2cap_recv+0x18c>)
    5228:	4a48      	ldr	r2, [pc, #288]	; (534c <l2cap_recv+0x1a8>)
    522a:	681d      	ldr	r5, [r3, #0]
    522c:	4942      	ldr	r1, [pc, #264]	; (5338 <l2cap_recv+0x194>)
    522e:	4b43      	ldr	r3, [pc, #268]	; (533c <l2cap_recv+0x198>)
    5230:	4847      	ldr	r0, [pc, #284]	; (5350 <l2cap_recv+0x1ac>)
    5232:	47a8      	blx	r5
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5234:	2202      	movs	r2, #2
    5236:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    5238:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    523a:	2001      	movs	r0, #1
    523c:	f7ff fec8 	bl	4fd0 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    5240:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5242:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    5244:	3008      	adds	r0, #8
    5246:	f00e f843 	bl	132d0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    524a:	2300      	movs	r3, #0
    524c:	7003      	strb	r3, [r0, #0]
    524e:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    5250:	4622      	mov	r2, r4
    5252:	2105      	movs	r1, #5
    5254:	4628      	mov	r0, r5
    5256:	e029      	b.n	52ac <l2cap_recv+0x108>
	if (buf->len < sizeof(*rsp)) {
    5258:	2e01      	cmp	r6, #1
    525a:	d8cb      	bhi.n	51f4 <l2cap_recv+0x50>
		BT_ERR("Too small LE conn param rsp");
    525c:	4b33      	ldr	r3, [pc, #204]	; (532c <l2cap_recv+0x188>)
    525e:	9301      	str	r3, [sp, #4]
    5260:	9300      	str	r3, [sp, #0]
    5262:	4b33      	ldr	r3, [pc, #204]	; (5330 <l2cap_recv+0x18c>)
    5264:	4a33      	ldr	r2, [pc, #204]	; (5334 <l2cap_recv+0x190>)
    5266:	681c      	ldr	r4, [r3, #0]
    5268:	4933      	ldr	r1, [pc, #204]	; (5338 <l2cap_recv+0x194>)
    526a:	4b3a      	ldr	r3, [pc, #232]	; (5354 <l2cap_recv+0x1b0>)
    526c:	483a      	ldr	r0, [pc, #232]	; (5358 <l2cap_recv+0x1b4>)
    526e:	e7a9      	b.n	51c4 <l2cap_recv+0x20>
	if (buf->len < sizeof(*req)) {
    5270:	2e07      	cmp	r6, #7
    5272:	d809      	bhi.n	5288 <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn update param req");
    5274:	4b2d      	ldr	r3, [pc, #180]	; (532c <l2cap_recv+0x188>)
    5276:	9301      	str	r3, [sp, #4]
    5278:	9300      	str	r3, [sp, #0]
    527a:	4b2d      	ldr	r3, [pc, #180]	; (5330 <l2cap_recv+0x18c>)
    527c:	4a2d      	ldr	r2, [pc, #180]	; (5334 <l2cap_recv+0x190>)
    527e:	681c      	ldr	r4, [r3, #0]
    5280:	492d      	ldr	r1, [pc, #180]	; (5338 <l2cap_recv+0x194>)
    5282:	4b36      	ldr	r3, [pc, #216]	; (535c <l2cap_recv+0x1b8>)
    5284:	4836      	ldr	r0, [pc, #216]	; (5360 <l2cap_recv+0x1bc>)
    5286:	e79d      	b.n	51c4 <l2cap_recv+0x20>
    5288:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    528a:	78e6      	ldrb	r6, [r4, #3]
    528c:	b18e      	cbz	r6, 52b2 <l2cap_recv+0x10e>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    528e:	2202      	movs	r2, #2
    5290:	2001      	movs	r0, #1
    5292:	f7ff fe9d 	bl	4fd0 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    5296:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5298:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    529a:	3008      	adds	r0, #8
    529c:	f00e f818 	bl	132d0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    52a0:	2300      	movs	r3, #0
    52a2:	7003      	strb	r3, [r0, #0]
    52a4:	7043      	strb	r3, [r0, #1]
    52a6:	462a      	mov	r2, r5
    52a8:	2105      	movs	r1, #5
    52aa:	4620      	mov	r0, r4
    52ac:	f7ff ff64 	bl	5178 <bt_l2cap_send_cb>
    52b0:	e7a0      	b.n	51f4 <l2cap_recv+0x50>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    52b2:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    52b4:	7858      	ldrb	r0, [r3, #1]
    52b6:	781a      	ldrb	r2, [r3, #0]
    52b8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    52bc:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    52c0:	78d8      	ldrb	r0, [r3, #3]
    52c2:	789a      	ldrb	r2, [r3, #2]
    52c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    52c8:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    52cc:	7958      	ldrb	r0, [r3, #5]
    52ce:	791a      	ldrb	r2, [r3, #4]
    52d0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    52d4:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    52d8:	799a      	ldrb	r2, [r3, #6]
    52da:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52dc:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    52de:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52e2:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    52e4:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52e8:	f7ff fe72 	bl	4fd0 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    52ec:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52ee:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    52f0:	4620      	mov	r0, r4
    52f2:	f7fe fe15 	bl	3f20 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    52f6:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    52f8:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    52fa:	f107 0008 	add.w	r0, r7, #8
    52fe:	f00d ffe7 	bl	132d0 <net_buf_simple_add>
	if (accepted) {
    5302:	b17d      	cbz	r5, 5324 <l2cap_recv+0x180>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    5304:	7006      	strb	r6, [r0, #0]
    5306:	7046      	strb	r6, [r0, #1]
    5308:	2300      	movs	r3, #0
    530a:	463a      	mov	r2, r7
    530c:	2105      	movs	r1, #5
    530e:	4620      	mov	r0, r4
    5310:	f7ff ff32 	bl	5178 <bt_l2cap_send_cb>
	if (accepted) {
    5314:	2d00      	cmp	r5, #0
    5316:	f43f af6d 	beq.w	51f4 <l2cap_recv+0x50>
		bt_conn_le_conn_update(conn, &param);
    531a:	a904      	add	r1, sp, #16
    531c:	4620      	mov	r0, r4
    531e:	f7ff fc3c 	bl	4b9a <bt_conn_le_conn_update>
    5322:	e767      	b.n	51f4 <l2cap_recv+0x50>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    5324:	2301      	movs	r3, #1
    5326:	7003      	strb	r3, [r0, #0]
    5328:	7045      	strb	r5, [r0, #1]
    532a:	e7ed      	b.n	5308 <l2cap_recv+0x164>
    532c:	0001563e 	.word	0x0001563e
    5330:	20003a5c 	.word	0x20003a5c
    5334:	000167b9 	.word	0x000167b9
    5338:	00016808 	.word	0x00016808
    533c:	000170e8 	.word	0x000170e8
    5340:	000171a7 	.word	0x000171a7
    5344:	000171d5 	.word	0x000171d5
    5348:	00017206 	.word	0x00017206
    534c:	00016801 	.word	0x00016801
    5350:	00017296 	.word	0x00017296
    5354:	000170bd 	.word	0x000170bd
    5358:	00017237 	.word	0x00017237
    535c:	000170cf 	.word	0x000170cf
    5360:	00017263 	.word	0x00017263

00005364 <bt_l2cap_le_lookup_tx_cid>:
{
    5364:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5366:	b100      	cbz	r0, 536a <bt_l2cap_le_lookup_tx_cid+0x6>
    5368:	3808      	subs	r0, #8
    536a:	b900      	cbnz	r0, 536e <bt_l2cap_le_lookup_tx_cid+0xa>
}
    536c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    536e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    5372:	428b      	cmp	r3, r1
    5374:	d0fa      	beq.n	536c <bt_l2cap_le_lookup_tx_cid+0x8>
    5376:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5378:	2000      	movs	r0, #0
    537a:	2b00      	cmp	r3, #0
    537c:	d0f6      	beq.n	536c <bt_l2cap_le_lookup_tx_cid+0x8>
    537e:	f1a3 0008 	sub.w	r0, r3, #8
    5382:	e7f2      	b.n	536a <bt_l2cap_le_lookup_tx_cid+0x6>

00005384 <bt_l2cap_le_lookup_rx_cid>:
{
    5384:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5386:	b100      	cbz	r0, 538a <bt_l2cap_le_lookup_rx_cid+0x6>
    5388:	3808      	subs	r0, #8
    538a:	b900      	cbnz	r0, 538e <bt_l2cap_le_lookup_rx_cid+0xa>
}
    538c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    538e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    5390:	428b      	cmp	r3, r1
    5392:	d0fb      	beq.n	538c <bt_l2cap_le_lookup_rx_cid+0x8>
    5394:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5396:	2000      	movs	r0, #0
    5398:	2b00      	cmp	r3, #0
    539a:	d0f7      	beq.n	538c <bt_l2cap_le_lookup_rx_cid+0x8>
    539c:	f1a3 0008 	sub.w	r0, r3, #8
    53a0:	e7f3      	b.n	538a <bt_l2cap_le_lookup_rx_cid+0x6>
	...

000053a4 <bt_l2cap_recv>:
{
    53a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    53a6:	898b      	ldrh	r3, [r1, #12]
    53a8:	2b03      	cmp	r3, #3
{
    53aa:	4606      	mov	r6, r0
    53ac:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    53ae:	d80f      	bhi.n	53d0 <bt_l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP PDU received");
    53b0:	4b16      	ldr	r3, [pc, #88]	; (540c <bt_l2cap_recv+0x68>)
    53b2:	9301      	str	r3, [sp, #4]
    53b4:	9300      	str	r3, [sp, #0]
    53b6:	4b16      	ldr	r3, [pc, #88]	; (5410 <bt_l2cap_recv+0x6c>)
    53b8:	4a16      	ldr	r2, [pc, #88]	; (5414 <bt_l2cap_recv+0x70>)
    53ba:	681d      	ldr	r5, [r3, #0]
    53bc:	4916      	ldr	r1, [pc, #88]	; (5418 <bt_l2cap_recv+0x74>)
    53be:	4b17      	ldr	r3, [pc, #92]	; (541c <bt_l2cap_recv+0x78>)
    53c0:	4817      	ldr	r0, [pc, #92]	; (5420 <bt_l2cap_recv+0x7c>)
    53c2:	47a8      	blx	r5
	net_buf_unref(buf);
    53c4:	4620      	mov	r0, r4
}
    53c6:	b004      	add	sp, #16
    53c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    53cc:	f00d bf4e 	b.w	1326c <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    53d0:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    53d2:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    53d4:	f850 3f08 	ldr.w	r3, [r0, #8]!
    53d8:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    53da:	f00d ff98 	bl	1330e <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    53de:	4629      	mov	r1, r5
    53e0:	4630      	mov	r0, r6
    53e2:	f7ff ffcf 	bl	5384 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    53e6:	b958      	cbnz	r0, 5400 <bt_l2cap_recv+0x5c>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    53e8:	4b08      	ldr	r3, [pc, #32]	; (540c <bt_l2cap_recv+0x68>)
    53ea:	9302      	str	r3, [sp, #8]
    53ec:	e88d 0028 	stmia.w	sp, {r3, r5}
    53f0:	4b07      	ldr	r3, [pc, #28]	; (5410 <bt_l2cap_recv+0x6c>)
    53f2:	4a0c      	ldr	r2, [pc, #48]	; (5424 <bt_l2cap_recv+0x80>)
    53f4:	681d      	ldr	r5, [r3, #0]
    53f6:	4908      	ldr	r1, [pc, #32]	; (5418 <bt_l2cap_recv+0x74>)
    53f8:	4b08      	ldr	r3, [pc, #32]	; (541c <bt_l2cap_recv+0x78>)
    53fa:	480b      	ldr	r0, [pc, #44]	; (5428 <bt_l2cap_recv+0x84>)
    53fc:	47a8      	blx	r5
    53fe:	e7e1      	b.n	53c4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    5400:	6843      	ldr	r3, [r0, #4]
    5402:	4621      	mov	r1, r4
    5404:	691b      	ldr	r3, [r3, #16]
    5406:	4798      	blx	r3
    5408:	e7dc      	b.n	53c4 <bt_l2cap_recv+0x20>
    540a:	bf00      	nop
    540c:	0001563e 	.word	0x0001563e
    5410:	20003a5c 	.word	0x20003a5c
    5414:	000167b9 	.word	0x000167b9
    5418:	00016808 	.word	0x00016808
    541c:	000170f3 	.word	0x000170f3
    5420:	0001710e 	.word	0x0001710e
    5424:	00016801 	.word	0x00016801
    5428:	0001713b 	.word	0x0001713b

0000542c <bt_l2cap_update_conn_param>:
{
    542c:	b570      	push	{r4, r5, r6, lr}
	ident++;
    542e:	4b12      	ldr	r3, [pc, #72]	; (5478 <bt_l2cap_update_conn_param+0x4c>)
    5430:	781a      	ldrb	r2, [r3, #0]
    5432:	3201      	adds	r2, #1
	if (!ident) {
    5434:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    5438:	bf08      	it	eq
    543a:	2201      	moveq	r2, #1
    543c:	701a      	strb	r2, [r3, #0]
{
    543e:	460c      	mov	r4, r1
    5440:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5442:	7819      	ldrb	r1, [r3, #0]
    5444:	2208      	movs	r2, #8
    5446:	2012      	movs	r0, #18
    5448:	f7ff fdc2 	bl	4fd0 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    544c:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    544e:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5450:	4408      	add	r0, r1
    5452:	f00d ff3d 	bl	132d0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    5456:	8823      	ldrh	r3, [r4, #0]
    5458:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    545a:	8863      	ldrh	r3, [r4, #2]
    545c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    545e:	88a3      	ldrh	r3, [r4, #4]
    5460:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5462:	88e3      	ldrh	r3, [r4, #6]
    5464:	80c3      	strh	r3, [r0, #6]
    5466:	4632      	mov	r2, r6
    5468:	4628      	mov	r0, r5
    546a:	2300      	movs	r3, #0
    546c:	2105      	movs	r1, #5
    546e:	f7ff fe83 	bl	5178 <bt_l2cap_send_cb>
}
    5472:	2000      	movs	r0, #0
    5474:	bd70      	pop	{r4, r5, r6, pc}
    5476:	bf00      	nop
    5478:	20000494 	.word	0x20000494

0000547c <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    547c:	4801      	ldr	r0, [pc, #4]	; (5484 <bt_l2cap_init+0x8>)
    547e:	f7ff bdbb 	b.w	4ff8 <bt_l2cap_le_fixed_chan_register>
    5482:	bf00      	nop
    5484:	20003b98 	.word	0x20003b98

00005488 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5488:	2006      	movs	r0, #6
    548a:	4770      	bx	lr

0000548c <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    548c:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    548e:	4a0a      	ldr	r2, [pc, #40]	; (54b8 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5490:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    5492:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    5496:	4284      	cmp	r4, r0
    5498:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    549c:	d102      	bne.n	54a4 <att_op_get_type+0x18>
			return handlers[i].type;
    549e:	440a      	add	r2, r1
    54a0:	7890      	ldrb	r0, [r2, #2]
    54a2:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    54a4:	3301      	adds	r3, #1
    54a6:	2b1b      	cmp	r3, #27
    54a8:	d1f3      	bne.n	5492 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    54aa:	f010 0f40 	tst.w	r0, #64	; 0x40
    54ae:	bf14      	ite	ne
    54b0:	2000      	movne	r0, #0
    54b2:	2006      	moveq	r0, #6
}
    54b4:	bd10      	pop	{r4, pc}
    54b6:	bf00      	nop
    54b8:	0001760c 	.word	0x0001760c

000054bc <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    54bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    54be:	4d11      	ldr	r5, [pc, #68]	; (5504 <bt_att_accept+0x48>)
    54c0:	682c      	ldr	r4, [r5, #0]
{
    54c2:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    54c4:	b984      	cbnz	r4, 54e8 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    54c6:	22e4      	movs	r2, #228	; 0xe4
    54c8:	4621      	mov	r1, r4
    54ca:	4628      	mov	r0, r5
    54cc:	f7fc fcd6 	bl	1e7c <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    54d0:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    54d2:	4b0d      	ldr	r3, [pc, #52]	; (5508 <bt_att_accept+0x4c>)
    54d4:	606b      	str	r3, [r5, #4]
    54d6:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    54da:	4611      	mov	r1, r2
    54dc:	f00f f8aa 	bl	14634 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    54e0:	6035      	str	r5, [r6, #0]

		return 0;
    54e2:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    54e4:	b004      	add	sp, #16
    54e6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    54e8:	4b08      	ldr	r3, [pc, #32]	; (550c <bt_att_accept+0x50>)
    54ea:	9302      	str	r3, [sp, #8]
    54ec:	9300      	str	r3, [sp, #0]
    54ee:	4b08      	ldr	r3, [pc, #32]	; (5510 <bt_att_accept+0x54>)
    54f0:	9001      	str	r0, [sp, #4]
    54f2:	681c      	ldr	r4, [r3, #0]
    54f4:	4807      	ldr	r0, [pc, #28]	; (5514 <bt_att_accept+0x58>)
    54f6:	4b08      	ldr	r3, [pc, #32]	; (5518 <bt_att_accept+0x5c>)
    54f8:	4a08      	ldr	r2, [pc, #32]	; (551c <bt_att_accept+0x60>)
    54fa:	4909      	ldr	r1, [pc, #36]	; (5520 <bt_att_accept+0x64>)
    54fc:	47a0      	blx	r4
	return -ENOMEM;
    54fe:	f06f 000b 	mvn.w	r0, #11
    5502:	e7ef      	b.n	54e4 <bt_att_accept+0x28>
    5504:	200004a0 	.word	0x200004a0
    5508:	20003bc4 	.word	0x20003bc4
    550c:	0001563e 	.word	0x0001563e
    5510:	20003a5c 	.word	0x20003a5c
    5514:	000174c5 	.word	0x000174c5
    5518:	00017360 	.word	0x00017360
    551c:	000167b9 	.word	0x000167b9
    5520:	00016808 	.word	0x00016808

00005524 <att_req_destroy>:
{
    5524:	b510      	push	{r4, lr}
    5526:	4604      	mov	r4, r0
	if (req->buf) {
    5528:	6900      	ldr	r0, [r0, #16]
    552a:	b108      	cbz	r0, 5530 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    552c:	f00d fe9e 	bl	1326c <net_buf_unref>
	if (req->destroy) {
    5530:	68a3      	ldr	r3, [r4, #8]
    5532:	b10b      	cbz	r3, 5538 <att_req_destroy+0x14>
		req->destroy(req);
    5534:	4620      	mov	r0, r4
    5536:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5538:	4620      	mov	r0, r4
    553a:	2214      	movs	r2, #20
    553c:	2100      	movs	r1, #0
}
    553e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5542:	f7fc bc9b 	b.w	1e7c <memset>

00005546 <att_notify>:
{
    5546:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    5548:	f101 0008 	add.w	r0, r1, #8
    554c:	f00d feef 	bl	1332e <net_buf_simple_pull_le16>
}
    5550:	2000      	movs	r0, #0
    5552:	bd08      	pop	{r3, pc}

00005554 <read_group_cb>:
{
    5554:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5558:	680d      	ldr	r5, [r1, #0]
{
    555a:	4606      	mov	r6, r0
    555c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    555e:	f04f 0800 	mov.w	r8, #0
    5562:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5566:	a902      	add	r1, sp, #8
    5568:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    556a:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    556c:	f88d 8008 	strb.w	r8, [sp, #8]
    5570:	f8ad 300a 	strh.w	r3, [sp, #10]
    5574:	f7fc fdd4 	bl	2120 <bt_uuid_cmp>
    5578:	b198      	cbz	r0, 55a2 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    557a:	f642 0301 	movw	r3, #10241	; 0x2801
    557e:	a903      	add	r1, sp, #12
    5580:	6830      	ldr	r0, [r6, #0]
    5582:	f88d 800c 	strb.w	r8, [sp, #12]
    5586:	f8ad 300e 	strh.w	r3, [sp, #14]
    558a:	f7fc fdc9 	bl	2120 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    558e:	b140      	cbz	r0, 55a2 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5590:	6923      	ldr	r3, [r4, #16]
    5592:	b123      	cbz	r3, 559e <read_group_cb+0x4a>
    5594:	8a32      	ldrh	r2, [r6, #16]
    5596:	8859      	ldrh	r1, [r3, #2]
    5598:	4291      	cmp	r1, r2
    559a:	d200      	bcs.n	559e <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    559c:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    559e:	2001      	movs	r0, #1
    55a0:	e012      	b.n	55c8 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    55a2:	6861      	ldr	r1, [r4, #4]
    55a4:	6830      	ldr	r0, [r6, #0]
    55a6:	f7fc fdbb 	bl	2120 <bt_uuid_cmp>
    55aa:	b110      	cbz	r0, 55b2 <read_group_cb+0x5e>
		data->group = NULL;
    55ac:	2300      	movs	r3, #0
    55ae:	6123      	str	r3, [r4, #16]
    55b0:	e7f5      	b.n	559e <read_group_cb+0x4a>
	if (data->rsp->len &&
    55b2:	68e3      	ldr	r3, [r4, #12]
    55b4:	68a0      	ldr	r0, [r4, #8]
    55b6:	781a      	ldrb	r2, [r3, #0]
    55b8:	b14a      	cbz	r2, 55ce <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    55ba:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    55be:	8981      	ldrh	r1, [r0, #12]
    55c0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    55c2:	4293      	cmp	r3, r2
    55c4:	da03      	bge.n	55ce <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    55c6:	2000      	movs	r0, #0
}
    55c8:	b004      	add	sp, #16
    55ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    55ce:	2104      	movs	r1, #4
    55d0:	3008      	adds	r0, #8
    55d2:	f00d fe7d 	bl	132d0 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    55d6:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    55d8:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    55da:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    55dc:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    55de:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    55e0:	898a      	ldrh	r2, [r1, #12]
    55e2:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    55e6:	6889      	ldr	r1, [r1, #8]
    55e8:	f8d6 8004 	ldr.w	r8, [r6, #4]
    55ec:	1a9b      	subs	r3, r3, r2
    55ee:	2500      	movs	r5, #0
    55f0:	440a      	add	r2, r1
    55f2:	9500      	str	r5, [sp, #0]
    55f4:	4631      	mov	r1, r6
    55f6:	b29b      	uxth	r3, r3
    55f8:	4638      	mov	r0, r7
    55fa:	47c0      	blx	r8
	if (read < 0) {
    55fc:	1e01      	subs	r1, r0, #0
    55fe:	dbe2      	blt.n	55c6 <read_group_cb+0x72>
	if (!data->rsp->len) {
    5600:	68e0      	ldr	r0, [r4, #12]
    5602:	7802      	ldrb	r2, [r0, #0]
    5604:	1d0b      	adds	r3, r1, #4
    5606:	b92a      	cbnz	r2, 5614 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5608:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    560a:	68a0      	ldr	r0, [r4, #8]
    560c:	3008      	adds	r0, #8
    560e:	f00d fe5f 	bl	132d0 <net_buf_simple_add>
    5612:	e7c4      	b.n	559e <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5614:	429a      	cmp	r2, r3
    5616:	d0f8      	beq.n	560a <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5618:	68a2      	ldr	r2, [r4, #8]
    561a:	8993      	ldrh	r3, [r2, #12]
    561c:	3b04      	subs	r3, #4
    561e:	8193      	strh	r3, [r2, #12]
    5620:	e7d1      	b.n	55c6 <read_group_cb+0x72>

00005622 <find_info_cb>:
	if (!data->rsp) {
    5622:	688b      	ldr	r3, [r1, #8]
{
    5624:	b570      	push	{r4, r5, r6, lr}
    5626:	4605      	mov	r5, r0
    5628:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    562a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    562c:	b963      	cbnz	r3, 5648 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    562e:	6848      	ldr	r0, [r1, #4]
    5630:	2101      	movs	r1, #1
    5632:	3008      	adds	r0, #8
    5634:	f00d fe4c 	bl	132d0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5638:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    563a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	2b00      	cmp	r3, #0
    5640:	bf0c      	ite	eq
    5642:	2301      	moveq	r3, #1
    5644:	2302      	movne	r3, #2
    5646:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5648:	68a3      	ldr	r3, [r4, #8]
    564a:	781b      	ldrb	r3, [r3, #0]
    564c:	2b01      	cmp	r3, #1
    564e:	d003      	beq.n	5658 <find_info_cb+0x36>
    5650:	2b02      	cmp	r3, #2
    5652:	d01a      	beq.n	568a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5654:	2000      	movs	r0, #0
}
    5656:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5658:	682b      	ldr	r3, [r5, #0]
    565a:	781b      	ldrb	r3, [r3, #0]
    565c:	2b00      	cmp	r3, #0
    565e:	d1f9      	bne.n	5654 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5660:	6860      	ldr	r0, [r4, #4]
    5662:	2104      	movs	r1, #4
    5664:	3008      	adds	r0, #8
    5666:	f00d fe33 	bl	132d0 <net_buf_simple_add>
    566a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    566c:	8a2b      	ldrh	r3, [r5, #16]
    566e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5670:	682b      	ldr	r3, [r5, #0]
    5672:	885b      	ldrh	r3, [r3, #2]
    5674:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5676:	6863      	ldr	r3, [r4, #4]
    5678:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    567c:	899b      	ldrh	r3, [r3, #12]
    567e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5680:	2804      	cmp	r0, #4
    5682:	bf94      	ite	ls
    5684:	2000      	movls	r0, #0
    5686:	2001      	movhi	r0, #1
    5688:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    568a:	682b      	ldr	r3, [r5, #0]
    568c:	781b      	ldrb	r3, [r3, #0]
    568e:	2b02      	cmp	r3, #2
    5690:	d1e0      	bne.n	5654 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5692:	6860      	ldr	r0, [r4, #4]
    5694:	2112      	movs	r1, #18
    5696:	3008      	adds	r0, #8
    5698:	f00d fe1a 	bl	132d0 <net_buf_simple_add>
    569c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    569e:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    56a0:	8a2b      	ldrh	r3, [r5, #16]
    56a2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    56a6:	2210      	movs	r2, #16
    56a8:	3101      	adds	r1, #1
    56aa:	f7fc fbbb 	bl	1e24 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    56ae:	6863      	ldr	r3, [r4, #4]
    56b0:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    56b4:	899b      	ldrh	r3, [r3, #12]
    56b6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    56b8:	2812      	cmp	r0, #18
    56ba:	e7e2      	b.n	5682 <find_info_cb+0x60>

000056bc <find_type_cb>:
{
    56bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    56c0:	680e      	ldr	r6, [r1, #0]
{
    56c2:	b088      	sub	sp, #32
    56c4:	4605      	mov	r5, r0
    56c6:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    56c8:	2700      	movs	r7, #0
    56ca:	f642 0301 	movw	r3, #10241	; 0x2801
    56ce:	a902      	add	r1, sp, #8
    56d0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    56d2:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    56d6:	f88d 7008 	strb.w	r7, [sp, #8]
    56da:	f8ad 300a 	strh.w	r3, [sp, #10]
    56de:	f7fc fd1f 	bl	2120 <bt_uuid_cmp>
    56e2:	b928      	cbnz	r0, 56f0 <find_type_cb+0x34>
		data->group = NULL;
    56e4:	2300      	movs	r3, #0
    56e6:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    56e8:	2001      	movs	r0, #1
}
    56ea:	b008      	add	sp, #32
    56ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    56f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    56f4:	a903      	add	r1, sp, #12
    56f6:	6828      	ldr	r0, [r5, #0]
    56f8:	f88d 700c 	strb.w	r7, [sp, #12]
    56fc:	f8ad 300e 	strh.w	r3, [sp, #14]
    5700:	f7fc fd0e 	bl	2120 <bt_uuid_cmp>
    5704:	b140      	cbz	r0, 5718 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    5706:	68a3      	ldr	r3, [r4, #8]
    5708:	2b00      	cmp	r3, #0
    570a:	d0ed      	beq.n	56e8 <find_type_cb+0x2c>
    570c:	8a2a      	ldrh	r2, [r5, #16]
    570e:	8859      	ldrh	r1, [r3, #2]
    5710:	4291      	cmp	r1, r2
    5712:	d2e9      	bcs.n	56e8 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5714:	805a      	strh	r2, [r3, #2]
    5716:	e7e7      	b.n	56e8 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5718:	6862      	ldr	r2, [r4, #4]
    571a:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    571e:	8992      	ldrh	r2, [r2, #12]
    5720:	1a9b      	subs	r3, r3, r2
    5722:	2b03      	cmp	r3, #3
    5724:	d9e1      	bls.n	56ea <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5726:	2310      	movs	r3, #16
    5728:	9000      	str	r0, [sp, #0]
    572a:	eb0d 0203 	add.w	r2, sp, r3
    572e:	686e      	ldr	r6, [r5, #4]
    5730:	4629      	mov	r1, r5
    5732:	4640      	mov	r0, r8
    5734:	47b0      	blx	r6
	if (read < 0) {
    5736:	1e02      	subs	r2, r0, #0
    5738:	dbd4      	blt.n	56e4 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    573a:	7c23      	ldrb	r3, [r4, #16]
    573c:	429a      	cmp	r2, r3
    573e:	d1d1      	bne.n	56e4 <find_type_cb+0x28>
    5740:	a904      	add	r1, sp, #16
    5742:	68e0      	ldr	r0, [r4, #12]
    5744:	f7fc fb59 	bl	1dfa <memcmp>
    5748:	2800      	cmp	r0, #0
    574a:	d1cb      	bne.n	56e4 <find_type_cb+0x28>
	data->err = 0x00;
    574c:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    574e:	6860      	ldr	r0, [r4, #4]
    5750:	2104      	movs	r1, #4
    5752:	3008      	adds	r0, #8
    5754:	f00d fdbc 	bl	132d0 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5758:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    575a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    575c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    575e:	8043      	strh	r3, [r0, #2]
    5760:	e7c2      	b.n	56e8 <find_type_cb+0x2c>
	...

00005764 <bt_att_connected>:
{
    5764:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5766:	2317      	movs	r3, #23
{
    5768:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    576a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    576e:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5770:	4906      	ldr	r1, [pc, #24]	; (578c <bt_att_connected+0x28>)
    5772:	30a4      	adds	r0, #164	; 0xa4
    5774:	f00f fadc 	bl	14d30 <k_delayed_work_init>
	list->head = NULL;
    5778:	2300      	movs	r3, #0
    577a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    577e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    5782:	6820      	ldr	r0, [r4, #0]
}
    5784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5788:	f001 bc88 	b.w	709c <bt_gatt_connected>
    578c:	00005ced 	.word	0x00005ced

00005790 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    5790:	f011 0f01 	tst.w	r1, #1
    5794:	7c83      	ldrb	r3, [r0, #18]
    5796:	d004      	beq.n	57a2 <check_perm.isra.5+0x12>
    5798:	f013 0f15 	tst.w	r3, #21
    579c:	d012      	beq.n	57c4 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    579e:	6842      	ldr	r2, [r0, #4]
    57a0:	b182      	cbz	r2, 57c4 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    57a2:	078a      	lsls	r2, r1, #30
    57a4:	d504      	bpl.n	57b0 <check_perm.isra.5+0x20>
    57a6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    57aa:	d00d      	beq.n	57c8 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    57ac:	6882      	ldr	r2, [r0, #8]
    57ae:	b15a      	cbz	r2, 57c8 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    57b0:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    57b2:	f011 0f30 	tst.w	r1, #48	; 0x30
    57b6:	d109      	bne.n	57cc <check_perm.isra.5+0x3c>
	return 0;
    57b8:	f011 0f0c 	tst.w	r1, #12
    57bc:	bf14      	ite	ne
    57be:	200f      	movne	r0, #15
    57c0:	2000      	moveq	r0, #0
    57c2:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    57c4:	2002      	movs	r0, #2
    57c6:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    57c8:	2003      	movs	r0, #3
    57ca:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    57cc:	2005      	movs	r0, #5
}
    57ce:	4770      	bx	lr

000057d0 <read_type_cb>:
{
    57d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    57d4:	680f      	ldr	r7, [r1, #0]
{
    57d6:	4606      	mov	r6, r0
    57d8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    57da:	6800      	ldr	r0, [r0, #0]
    57dc:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    57de:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    57e2:	f7fc fc9d 	bl	2120 <bt_uuid_cmp>
    57e6:	4680      	mov	r8, r0
    57e8:	2800      	cmp	r0, #0
    57ea:	d14d      	bne.n	5888 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    57ec:	2115      	movs	r1, #21
    57ee:	4630      	mov	r0, r6
    57f0:	f7ff ffce 	bl	5790 <check_perm.isra.5>
    57f4:	4605      	mov	r5, r0
    57f6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    57f8:	b148      	cbz	r0, 580e <read_type_cb+0x3e>
		if (data->rsp->len) {
    57fa:	68e3      	ldr	r3, [r4, #12]
    57fc:	781d      	ldrb	r5, [r3, #0]
    57fe:	b115      	cbz	r5, 5806 <read_type_cb+0x36>
			data->err = 0x00;
    5800:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5804:	4645      	mov	r5, r8
}
    5806:	4628      	mov	r0, r5
    5808:	b003      	add	sp, #12
    580a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    580e:	68a0      	ldr	r0, [r4, #8]
    5810:	2102      	movs	r1, #2
    5812:	3008      	adds	r0, #8
    5814:	f00d fd5c 	bl	132d0 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5818:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    581a:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    581c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    581e:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5820:	898a      	ldrh	r2, [r1, #12]
    5822:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    5826:	6889      	ldr	r1, [r1, #8]
    5828:	f8d6 8004 	ldr.w	r8, [r6, #4]
    582c:	9500      	str	r5, [sp, #0]
    582e:	1a9b      	subs	r3, r3, r2
    5830:	b29b      	uxth	r3, r3
    5832:	440a      	add	r2, r1
    5834:	4648      	mov	r0, r9
    5836:	4631      	mov	r1, r6
    5838:	47c0      	blx	r8
	if (read < 0) {
    583a:	1e01      	subs	r1, r0, #0
    583c:	da08      	bge.n	5850 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    583e:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5842:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5844:	bf9a      	itte	ls
    5846:	4249      	negls	r1, r1
    5848:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    584a:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    584c:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    584e:	e7da      	b.n	5806 <read_type_cb+0x36>
	if (!data->rsp->len) {
    5850:	68e0      	ldr	r0, [r4, #12]
    5852:	7802      	ldrb	r2, [r0, #0]
    5854:	1c8b      	adds	r3, r1, #2
    5856:	b982      	cbnz	r2, 587a <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5858:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    585a:	68a0      	ldr	r0, [r4, #8]
    585c:	3008      	adds	r0, #8
    585e:	f00d fd37 	bl	132d0 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5862:	68a3      	ldr	r3, [r4, #8]
    5864:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    5868:	899b      	ldrh	r3, [r3, #12]
    586a:	1aed      	subs	r5, r5, r3
    586c:	68e3      	ldr	r3, [r4, #12]
    586e:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5870:	429d      	cmp	r5, r3
    5872:	bfd4      	ite	le
    5874:	2500      	movle	r5, #0
    5876:	2501      	movgt	r5, #1
    5878:	e7c5      	b.n	5806 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    587a:	429a      	cmp	r2, r3
    587c:	d0ed      	beq.n	585a <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    587e:	68a2      	ldr	r2, [r4, #8]
    5880:	8993      	ldrh	r3, [r2, #12]
    5882:	3b02      	subs	r3, #2
    5884:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5886:	e7be      	b.n	5806 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5888:	2501      	movs	r5, #1
    588a:	e7bc      	b.n	5806 <read_type_cb+0x36>

0000588c <att_get>:
{
    588c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    588e:	2104      	movs	r1, #4
    5890:	f7ff fd68 	bl	5364 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    5894:	b948      	cbnz	r0, 58aa <att_get+0x1e>
    5896:	2376      	movs	r3, #118	; 0x76
    5898:	4a04      	ldr	r2, [pc, #16]	; (58ac <att_get+0x20>)
    589a:	4905      	ldr	r1, [pc, #20]	; (58b0 <att_get+0x24>)
    589c:	4805      	ldr	r0, [pc, #20]	; (58b4 <att_get+0x28>)
    589e:	f7fb fb75 	bl	f8c <printk>
    58a2:	4805      	ldr	r0, [pc, #20]	; (58b8 <att_get+0x2c>)
    58a4:	f7fb fb72 	bl	f8c <printk>
    58a8:	e7fe      	b.n	58a8 <att_get+0x1c>
}
    58aa:	bd08      	pop	{r3, pc}
    58ac:	000173eb 	.word	0x000173eb
    58b0:	00017426 	.word	0x00017426
    58b4:	00015620 	.word	0x00015620
    58b8:	0001742b 	.word	0x0001742b

000058bc <att_rsp_sent>:
{
    58bc:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    58be:	f7ff ffe5 	bl	588c <att_get>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    58c2:	f3bf 8f5b 	dmb	ish
    58c6:	f100 0394 	add.w	r3, r0, #148	; 0x94
    58ca:	e853 2f00 	ldrex	r2, [r3]
    58ce:	f022 0201 	bic.w	r2, r2, #1
    58d2:	e843 2100 	strex	r1, r2, [r3]
    58d6:	2900      	cmp	r1, #0
    58d8:	d1f7      	bne.n	58ca <att_rsp_sent+0xe>
    58da:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    58de:	30cc      	adds	r0, #204	; 0xcc
}
    58e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    58e4:	f00e bed4 	b.w	14690 <_impl_k_sem_give>

000058e8 <att_pdu_sent>:
{
    58e8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    58ea:	f7ff ffcf 	bl	588c <att_get>
}
    58ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    58f2:	30cc      	adds	r0, #204	; 0xcc
    58f4:	f00e becc 	b.w	14690 <_impl_k_sem_give>

000058f8 <uuid_create>:
{
    58f8:	b510      	push	{r4, lr}
	switch (buf->len) {
    58fa:	898a      	ldrh	r2, [r1, #12]
    58fc:	2a02      	cmp	r2, #2
{
    58fe:	4604      	mov	r4, r0
	switch (buf->len) {
    5900:	d003      	beq.n	590a <uuid_create+0x12>
    5902:	2a10      	cmp	r2, #16
    5904:	d00a      	beq.n	591c <uuid_create+0x24>
	return false;
    5906:	2000      	movs	r0, #0
}
    5908:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    590a:	2300      	movs	r3, #0
    590c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    590e:	f101 0008 	add.w	r0, r1, #8
    5912:	f00d fd0c 	bl	1332e <net_buf_simple_pull_le16>
    5916:	8060      	strh	r0, [r4, #2]
		return true;
    5918:	2001      	movs	r0, #1
    591a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    591c:	2302      	movs	r3, #2
    591e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5922:	6889      	ldr	r1, [r1, #8]
    5924:	f7fc fa7e 	bl	1e24 <memcpy>
    5928:	e7f6      	b.n	5918 <uuid_create+0x20>
	...

0000592c <att_req_sent>:
{
    592c:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    592e:	f7ff ffad 	bl	588c <att_get>
    5932:	4604      	mov	r4, r0
    5934:	30cc      	adds	r0, #204	; 0xcc
    5936:	f00e feab 	bl	14690 <_impl_k_sem_give>
	if (att->req) {
    593a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    593e:	b143      	cbz	r3, 5952 <att_req_sent+0x26>
    5940:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    5944:	f247 5230 	movw	r2, #30000	; 0x7530
    5948:	4802      	ldr	r0, [pc, #8]	; (5954 <att_req_sent+0x28>)
}
    594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    594e:	f00f ba63 	b.w	14e18 <k_delayed_work_submit_to_queue>
    5952:	bd10      	pop	{r4, pc}
    5954:	20001988 	.word	0x20001988

00005958 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5958:	6803      	ldr	r3, [r0, #0]
    595a:	7a5b      	ldrb	r3, [r3, #9]
    595c:	2b03      	cmp	r3, #3
    595e:	d10a      	bne.n	5976 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5960:	f3bf 8f5b 	dmb	ish
    5964:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    5968:	f3bf 8f5b 	dmb	ish
    596c:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5970:	f000 0001 	and.w	r0, r0, #1
    5974:	4770      	bx	lr
    5976:	2001      	movs	r0, #1
}
    5978:	4770      	bx	lr

0000597a <att_prepare_write_req>:
    597a:	2006      	movs	r0, #6
    597c:	4770      	bx	lr

0000597e <att_cfm_sent>:
{
    597e:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    5980:	f7ff ff84 	bl	588c <att_get>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5984:	f3bf 8f5b 	dmb	ish
    5988:	f100 0394 	add.w	r3, r0, #148	; 0x94
    598c:	e853 2f00 	ldrex	r2, [r3]
    5990:	f022 0202 	bic.w	r2, r2, #2
    5994:	e843 2100 	strex	r1, r2, [r3]
    5998:	2900      	cmp	r1, #0
    599a:	d1f7      	bne.n	598c <att_cfm_sent+0xe>
    599c:	f3bf 8f5b 	dmb	ish
    59a0:	30cc      	adds	r0, #204	; 0xcc
}
    59a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    59a6:	f00e be73 	b.w	14690 <_impl_k_sem_give>
	...

000059ac <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    59ac:	7a43      	ldrb	r3, [r0, #9]
    59ae:	2b03      	cmp	r3, #3
{
    59b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    59b2:	d00c      	beq.n	59ce <att_chan_get+0x22>
		BT_WARN("Not connected");
    59b4:	4b17      	ldr	r3, [pc, #92]	; (5a14 <att_chan_get+0x68>)
    59b6:	9301      	str	r3, [sp, #4]
    59b8:	9300      	str	r3, [sp, #0]
    59ba:	4b17      	ldr	r3, [pc, #92]	; (5a18 <att_chan_get+0x6c>)
    59bc:	4a17      	ldr	r2, [pc, #92]	; (5a1c <att_chan_get+0x70>)
    59be:	681c      	ldr	r4, [r3, #0]
    59c0:	4917      	ldr	r1, [pc, #92]	; (5a20 <att_chan_get+0x74>)
    59c2:	4b18      	ldr	r3, [pc, #96]	; (5a24 <att_chan_get+0x78>)
    59c4:	4818      	ldr	r0, [pc, #96]	; (5a28 <att_chan_get+0x7c>)
		BT_WARN("ATT context flagged as disconnected");
    59c6:	47a0      	blx	r4
		return NULL;
    59c8:	2000      	movs	r0, #0
}
    59ca:	b003      	add	sp, #12
    59cc:	bd30      	pop	{r4, r5, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    59ce:	2104      	movs	r1, #4
    59d0:	f7ff fcd8 	bl	5384 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    59d4:	4604      	mov	r4, r0
    59d6:	b958      	cbnz	r0, 59f0 <att_chan_get+0x44>
		BT_ERR("Unable to find ATT channel");
    59d8:	4b0e      	ldr	r3, [pc, #56]	; (5a14 <att_chan_get+0x68>)
    59da:	9301      	str	r3, [sp, #4]
    59dc:	9300      	str	r3, [sp, #0]
    59de:	4b0e      	ldr	r3, [pc, #56]	; (5a18 <att_chan_get+0x6c>)
    59e0:	4a12      	ldr	r2, [pc, #72]	; (5a2c <att_chan_get+0x80>)
    59e2:	681d      	ldr	r5, [r3, #0]
    59e4:	490e      	ldr	r1, [pc, #56]	; (5a20 <att_chan_get+0x74>)
    59e6:	4b0f      	ldr	r3, [pc, #60]	; (5a24 <att_chan_get+0x78>)
    59e8:	4811      	ldr	r0, [pc, #68]	; (5a30 <att_chan_get+0x84>)
    59ea:	47a8      	blx	r5
    59ec:	4620      	mov	r0, r4
    59ee:	e7ec      	b.n	59ca <att_chan_get+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    59f0:	f3bf 8f5b 	dmb	ish
    59f4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    59f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    59fc:	075b      	lsls	r3, r3, #29
    59fe:	d5f5      	bpl.n	59ec <att_chan_get+0x40>
		BT_WARN("ATT context flagged as disconnected");
    5a00:	4b04      	ldr	r3, [pc, #16]	; (5a14 <att_chan_get+0x68>)
    5a02:	9301      	str	r3, [sp, #4]
    5a04:	9300      	str	r3, [sp, #0]
    5a06:	4b04      	ldr	r3, [pc, #16]	; (5a18 <att_chan_get+0x6c>)
    5a08:	4a04      	ldr	r2, [pc, #16]	; (5a1c <att_chan_get+0x70>)
    5a0a:	681c      	ldr	r4, [r3, #0]
    5a0c:	4904      	ldr	r1, [pc, #16]	; (5a20 <att_chan_get+0x74>)
    5a0e:	4b05      	ldr	r3, [pc, #20]	; (5a24 <att_chan_get+0x78>)
    5a10:	4808      	ldr	r0, [pc, #32]	; (5a34 <att_chan_get+0x88>)
    5a12:	e7d8      	b.n	59c6 <att_chan_get+0x1a>
    5a14:	0001563e 	.word	0x0001563e
    5a18:	20003a5c 	.word	0x20003a5c
    5a1c:	00016801 	.word	0x00016801
    5a20:	00016808 	.word	0x00016808
    5a24:	00017335 	.word	0x00017335
    5a28:	0001736e 	.word	0x0001736e
    5a2c:	000167b9 	.word	0x000167b9
    5a30:	0001738c 	.word	0x0001738c
    5a34:	000173b7 	.word	0x000173b7

00005a38 <write_cb>:
{
    5a38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5a3c:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5a3e:	f8d1 8000 	ldr.w	r8, [r1]
    5a42:	212a      	movs	r1, #42	; 0x2a
{
    5a44:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5a46:	f7ff fea3 	bl	5790 <check_perm.isra.5>
    5a4a:	4605      	mov	r5, r0
    5a4c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5a4e:	b9e0      	cbnz	r0, 5a8a <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5a50:	8a62      	ldrh	r2, [r4, #18]
    5a52:	9001      	str	r0, [sp, #4]
    5a54:	9200      	str	r2, [sp, #0]
    5a56:	7c23      	ldrb	r3, [r4, #16]
    5a58:	68b7      	ldr	r7, [r6, #8]
    5a5a:	68e2      	ldr	r2, [r4, #12]
    5a5c:	4631      	mov	r1, r6
    5a5e:	4640      	mov	r0, r8
    5a60:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    5a62:	2800      	cmp	r0, #0
    5a64:	db02      	blt.n	5a6c <write_cb+0x34>
    5a66:	7c23      	ldrb	r3, [r4, #16]
    5a68:	4298      	cmp	r0, r3
    5a6a:	d00b      	beq.n	5a84 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5a6c:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5a70:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5a72:	bf9a      	itte	ls
    5a74:	4240      	negls	r0, r0
    5a76:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5a78:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5a7a:	7520      	strb	r0, [r4, #20]
}
    5a7c:	4628      	mov	r0, r5
    5a7e:	b002      	add	sp, #8
    5a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5a84:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5a86:	2501      	movs	r5, #1
    5a88:	e7f8      	b.n	5a7c <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5a8a:	2500      	movs	r5, #0
    5a8c:	e7f6      	b.n	5a7c <write_cb+0x44>
	...

00005a90 <att_send_req>:
{
    5a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5a92:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    5a94:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    5a98:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    5a9c:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5a9e:	4630      	mov	r0, r6
    5aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5aa4:	f00e fe1c 	bl	146e0 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5aa8:	4628      	mov	r0, r5
    5aaa:	f7ff ff55 	bl	5958 <att_is_connected>
    5aae:	b980      	cbnz	r0, 5ad2 <att_send_req+0x42>
		BT_WARN("Disconnected");
    5ab0:	4b18      	ldr	r3, [pc, #96]	; (5b14 <att_send_req+0x84>)
    5ab2:	9301      	str	r3, [sp, #4]
    5ab4:	9300      	str	r3, [sp, #0]
    5ab6:	4b18      	ldr	r3, [pc, #96]	; (5b18 <att_send_req+0x88>)
    5ab8:	4a18      	ldr	r2, [pc, #96]	; (5b1c <att_send_req+0x8c>)
    5aba:	681c      	ldr	r4, [r3, #0]
    5abc:	4918      	ldr	r1, [pc, #96]	; (5b20 <att_send_req+0x90>)
    5abe:	4b19      	ldr	r3, [pc, #100]	; (5b24 <att_send_req+0x94>)
    5ac0:	4819      	ldr	r0, [pc, #100]	; (5b28 <att_send_req+0x98>)
    5ac2:	47a0      	blx	r4
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5ac4:	4630      	mov	r0, r6
    5ac6:	f00e fde3 	bl	14690 <_impl_k_sem_give>
		return -ENOTCONN;
    5aca:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5ace:	b002      	add	sp, #8
    5ad0:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    5ad2:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    5ad4:	f106 0008 	add.w	r0, r6, #8
    5ad8:	f00d fc31 	bl	1333e <net_buf_simple_headroom>
	state->len = buf->len;
    5adc:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    5ade:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    5ae0:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5ae2:	6920      	ldr	r0, [r4, #16]
    5ae4:	682d      	ldr	r5, [r5, #0]
    5ae6:	f00d fbef 	bl	132c8 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    5aea:	6923      	ldr	r3, [r4, #16]
    5aec:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5aee:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    5af0:	7818      	ldrb	r0, [r3, #0]
    5af2:	f7ff fccb 	bl	548c <att_op_get_type>
    5af6:	3801      	subs	r0, #1
    5af8:	b2c0      	uxtb	r0, r0
    5afa:	2804      	cmp	r0, #4
    5afc:	bf96      	itet	ls
    5afe:	4b0b      	ldrls	r3, [pc, #44]	; (5b2c <att_send_req+0x9c>)
    5b00:	4b0b      	ldrhi	r3, [pc, #44]	; (5b30 <att_send_req+0xa0>)
    5b02:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5b06:	4632      	mov	r2, r6
    5b08:	4628      	mov	r0, r5
    5b0a:	2104      	movs	r1, #4
    5b0c:	f7ff fb34 	bl	5178 <bt_l2cap_send_cb>
	return 0;
    5b10:	2000      	movs	r0, #0
    5b12:	e7dc      	b.n	5ace <att_send_req+0x3e>
    5b14:	0001563e 	.word	0x0001563e
    5b18:	20003a5c 	.word	0x20003a5c
    5b1c:	00016801 	.word	0x00016801
    5b20:	00016808 	.word	0x00016808
    5b24:	000172f8 	.word	0x000172f8
    5b28:	00017467 	.word	0x00017467
    5b2c:	000172e4 	.word	0x000172e4
    5b30:	000058e9 	.word	0x000058e9

00005b34 <att_handle_rsp>:
{
    5b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5b38:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5b3a:	30a4      	adds	r0, #164	; 0xa4
{
    5b3c:	461e      	mov	r6, r3
    5b3e:	460f      	mov	r7, r1
    5b40:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    5b42:	f00f f905 	bl	14d50 <k_delayed_work_cancel>
	if (!att->req) {
    5b46:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5b4a:	b9e3      	cbnz	r3, 5b86 <att_handle_rsp+0x52>
		BT_WARN("No pending ATT request");
    5b4c:	4b1c      	ldr	r3, [pc, #112]	; (5bc0 <att_handle_rsp+0x8c>)
    5b4e:	9301      	str	r3, [sp, #4]
    5b50:	9300      	str	r3, [sp, #0]
    5b52:	4b1c      	ldr	r3, [pc, #112]	; (5bc4 <att_handle_rsp+0x90>)
    5b54:	4a1c      	ldr	r2, [pc, #112]	; (5bc8 <att_handle_rsp+0x94>)
    5b56:	681d      	ldr	r5, [r3, #0]
    5b58:	491c      	ldr	r1, [pc, #112]	; (5bcc <att_handle_rsp+0x98>)
    5b5a:	4b1d      	ldr	r3, [pc, #116]	; (5bd0 <att_handle_rsp+0x9c>)
    5b5c:	481d      	ldr	r0, [pc, #116]	; (5bd4 <att_handle_rsp+0xa0>)
    5b5e:	47a8      	blx	r5
    5b60:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    5b64:	b159      	cbz	r1, 5b7e <att_handle_rsp+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5b66:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    5b6a:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5b6c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5b70:	4291      	cmp	r1, r2
	list->tail = node;
    5b72:	bf08      	it	eq
    5b74:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    5b78:	4620      	mov	r0, r4
    5b7a:	f7ff ff89 	bl	5a90 <att_send_req>
}
    5b7e:	2000      	movs	r0, #0
    5b80:	b003      	add	sp, #12
    5b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    5b86:	6918      	ldr	r0, [r3, #16]
    5b88:	b128      	cbz	r0, 5b96 <att_handle_rsp+0x62>
		net_buf_unref(att->req->buf);
    5b8a:	f00d fb6f 	bl	1326c <net_buf_unref>
		att->req->buf = NULL;
    5b8e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5b92:	2200      	movs	r2, #0
    5b94:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    5b96:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5b9a:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    5b9c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5ba0:	2500      	movs	r5, #0
    5ba2:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5ba4:	463a      	mov	r2, r7
    5ba6:	9300      	str	r3, [sp, #0]
    5ba8:	4631      	mov	r1, r6
    5baa:	4643      	mov	r3, r8
    5bac:	47c8      	blx	r9
	if (!att->req->func) {
    5bae:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5bb2:	6843      	ldr	r3, [r0, #4]
    5bb4:	b90b      	cbnz	r3, 5bba <att_handle_rsp+0x86>
		att_req_destroy(att->req);
    5bb6:	f7ff fcb5 	bl	5524 <att_req_destroy>
	att->req = NULL;
    5bba:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    5bbe:	e7cf      	b.n	5b60 <att_handle_rsp+0x2c>
    5bc0:	0001563e 	.word	0x0001563e
    5bc4:	20003a5c 	.word	0x20003a5c
    5bc8:	00016801 	.word	0x00016801
    5bcc:	00016808 	.word	0x00016808
    5bd0:	00017305 	.word	0x00017305
    5bd4:	00017440 	.word	0x00017440

00005bd8 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    5bd8:	898a      	ldrh	r2, [r1, #12]
    5bda:	6889      	ldr	r1, [r1, #8]
    5bdc:	2300      	movs	r3, #0
    5bde:	f7ff bfa9 	b.w	5b34 <att_handle_rsp>

00005be2 <att_handle_exec_write_rsp>:
    5be2:	f7ff bff9 	b.w	5bd8 <att_confirm>

00005be6 <att_handle_prepare_write_rsp>:
    5be6:	f7ff bff7 	b.w	5bd8 <att_confirm>

00005bea <att_handle_write_rsp>:
    5bea:	f7ff bff5 	b.w	5bd8 <att_confirm>

00005bee <att_handle_read_mult_rsp>:
    5bee:	f7ff bff3 	b.w	5bd8 <att_confirm>

00005bf2 <att_handle_read_blob_rsp>:
    5bf2:	f7ff bff1 	b.w	5bd8 <att_confirm>

00005bf6 <att_handle_read_rsp>:
    5bf6:	f7ff bfef 	b.w	5bd8 <att_confirm>

00005bfa <att_handle_read_type_rsp>:
    5bfa:	f7ff bfed 	b.w	5bd8 <att_confirm>

00005bfe <att_handle_find_type_rsp>:
    5bfe:	f7ff bfeb 	b.w	5bd8 <att_confirm>

00005c02 <att_handle_find_info_rsp>:
    5c02:	f7ff bfe9 	b.w	5bd8 <att_confirm>

00005c06 <att_mtu_rsp>:
{
    5c06:	b410      	push	{r4}
    5c08:	460a      	mov	r2, r1
	if (!att) {
    5c0a:	4603      	mov	r3, r0
    5c0c:	b180      	cbz	r0, 5c30 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    5c0e:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5c10:	880c      	ldrh	r4, [r1, #0]
    5c12:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5c14:	bf83      	ittte	hi
    5c16:	2417      	movhi	r4, #23
    5c18:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5c1a:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5c1e:	2200      	movls	r2, #0
    5c20:	bf99      	ittee	ls
    5c22:	2304      	movls	r3, #4
    5c24:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    5c26:	2300      	movhi	r3, #0
    5c28:	8992      	ldrhhi	r2, [r2, #12]
}
    5c2a:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5c2c:	f7ff bf82 	b.w	5b34 <att_handle_rsp>
}
    5c30:	bc10      	pop	{r4}
    5c32:	4770      	bx	lr

00005c34 <att_error_rsp>:
{
    5c34:	b430      	push	{r4, r5}
	if (!att->req) {
    5c36:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    5c3a:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5c3c:	b16a      	cbz	r2, 5c5a <att_error_rsp+0x26>
	if (att->req->buf) {
    5c3e:	6913      	ldr	r3, [r2, #16]
    5c40:	b12b      	cbz	r3, 5c4e <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    5c42:	8995      	ldrh	r5, [r2, #12]
    5c44:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    5c46:	89d2      	ldrh	r2, [r2, #14]
    5c48:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    5c4a:	4429      	add	r1, r5
    5c4c:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5c4e:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5c50:	2200      	movs	r2, #0
    5c52:	4611      	mov	r1, r2
}
    5c54:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    5c56:	f7ff bf6d 	b.w	5b34 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    5c5a:	230e      	movs	r3, #14
    5c5c:	e7f8      	b.n	5c50 <att_error_rsp+0x1c>

00005c5e <att_reset>:
{
    5c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c60:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5c64:	4605      	mov	r5, r0
    5c66:	f3bf 8f5b 	dmb	ish
    5c6a:	e853 2f00 	ldrex	r2, [r3]
    5c6e:	f042 0204 	orr.w	r2, r2, #4
    5c72:	e843 2100 	strex	r1, r2, [r3]
    5c76:	2900      	cmp	r1, #0
    5c78:	d1f7      	bne.n	5c6a <att_reset+0xc>
    5c7a:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5c7e:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    5c82:	4620      	mov	r0, r4
    5c84:	f00e fd04 	bl	14690 <_impl_k_sem_give>
    5c88:	4620      	mov	r0, r4
    5c8a:	f00e fd01 	bl	14690 <_impl_k_sem_give>
    5c8e:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5c92:	b98c      	cbnz	r4, 5cb8 <att_reset+0x5a>
	if (!att->req) {
    5c94:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    5c98:	2200      	movs	r2, #0
    5c9a:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    5c9e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    5ca2:	b90b      	cbnz	r3, 5ca8 <att_reset+0x4a>
}
    5ca4:	b003      	add	sp, #12
    5ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5ca8:	230e      	movs	r3, #14
    5caa:	4611      	mov	r1, r2
    5cac:	4628      	mov	r0, r5
}
    5cae:	b003      	add	sp, #12
    5cb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5cb4:	f7ff bf3e 	b.w	5b34 <att_handle_rsp>
	return node->next;
    5cb8:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    5cba:	6867      	ldr	r7, [r4, #4]
    5cbc:	b12f      	cbz	r7, 5cca <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5cbe:	2300      	movs	r3, #0
    5cc0:	9400      	str	r4, [sp, #0]
    5cc2:	461a      	mov	r2, r3
    5cc4:	210e      	movs	r1, #14
    5cc6:	4618      	mov	r0, r3
    5cc8:	47b8      	blx	r7
		att_req_destroy(req);
    5cca:	4620      	mov	r0, r4
    5ccc:	f7ff fc2a 	bl	5524 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5cd0:	2e00      	cmp	r6, #0
    5cd2:	d0df      	beq.n	5c94 <att_reset+0x36>
    5cd4:	4634      	mov	r4, r6
    5cd6:	6836      	ldr	r6, [r6, #0]
    5cd8:	e7ef      	b.n	5cba <att_reset+0x5c>

00005cda <bt_att_disconnected>:
{
    5cda:	b510      	push	{r4, lr}
    5cdc:	4604      	mov	r4, r0
	att_reset(att);
    5cde:	f7ff ffbe 	bl	5c5e <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5ce2:	6820      	ldr	r0, [r4, #0]
}
    5ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    5ce8:	f001 b9e2 	b.w	70b0 <bt_gatt_disconnected>

00005cec <att_timeout>:
{
    5cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("ATT Timeout");
    5cee:	4b0c      	ldr	r3, [pc, #48]	; (5d20 <att_timeout+0x34>)
    5cf0:	9301      	str	r3, [sp, #4]
    5cf2:	9300      	str	r3, [sp, #0]
    5cf4:	4b0b      	ldr	r3, [pc, #44]	; (5d24 <att_timeout+0x38>)
    5cf6:	4a0c      	ldr	r2, [pc, #48]	; (5d28 <att_timeout+0x3c>)
    5cf8:	490c      	ldr	r1, [pc, #48]	; (5d2c <att_timeout+0x40>)
    5cfa:	681d      	ldr	r5, [r3, #0]
    5cfc:	4b0c      	ldr	r3, [pc, #48]	; (5d30 <att_timeout+0x44>)
{
    5cfe:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    5d00:	480c      	ldr	r0, [pc, #48]	; (5d34 <att_timeout+0x48>)
    5d02:	47a8      	blx	r5
	att_reset(att);
    5d04:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    5d08:	f7ff ffa9 	bl	5c5e <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5d0c:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    5d10:	f001 f9ce 	bl	70b0 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    5d14:	2300      	movs	r3, #0
    5d16:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    5d1a:	b003      	add	sp, #12
    5d1c:	bd30      	pop	{r4, r5, pc}
    5d1e:	bf00      	nop
    5d20:	0001563e 	.word	0x0001563e
    5d24:	20003a5c 	.word	0x20003a5c
    5d28:	000167b9 	.word	0x000167b9
    5d2c:	00016808 	.word	0x00016808
    5d30:	00017354 	.word	0x00017354
    5d34:	000174a9 	.word	0x000174a9

00005d38 <read_cb>:
{
    5d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5d3c:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5d3e:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5d40:	f8d1 9000 	ldr.w	r9, [r1]
{
    5d44:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5d46:	3008      	adds	r0, #8
    5d48:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    5d4a:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5d4e:	f00d fabf 	bl	132d0 <net_buf_simple_add>
	data->err = 0x00;
    5d52:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5d54:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    5d56:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5d58:	2115      	movs	r1, #21
    5d5a:	4630      	mov	r0, r6
    5d5c:	f7ff fd18 	bl	5790 <check_perm.isra.5>
    5d60:	4605      	mov	r5, r0
    5d62:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5d64:	bb08      	cbnz	r0, 5daa <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5d66:	68a1      	ldr	r1, [r4, #8]
    5d68:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    5d6c:	898a      	ldrh	r2, [r1, #12]
    5d6e:	6889      	ldr	r1, [r1, #8]
    5d70:	88a0      	ldrh	r0, [r4, #4]
    5d72:	9000      	str	r0, [sp, #0]
    5d74:	1a9b      	subs	r3, r3, r2
    5d76:	6877      	ldr	r7, [r6, #4]
    5d78:	440a      	add	r2, r1
    5d7a:	b29b      	uxth	r3, r3
    5d7c:	4631      	mov	r1, r6
    5d7e:	4640      	mov	r0, r8
    5d80:	47b8      	blx	r7
	if (read < 0) {
    5d82:	1e01      	subs	r1, r0, #0
    5d84:	da0b      	bge.n	5d9e <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    5d86:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5d8a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5d8c:	bf9a      	itte	ls
    5d8e:	4249      	negls	r1, r1
    5d90:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5d92:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5d94:	7421      	strb	r1, [r4, #16]
}
    5d96:	4628      	mov	r0, r5
    5d98:	b003      	add	sp, #12
    5d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    5d9e:	68a0      	ldr	r0, [r4, #8]
    5da0:	3008      	adds	r0, #8
    5da2:	f00d fa95 	bl	132d0 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    5da6:	2501      	movs	r5, #1
    5da8:	e7f5      	b.n	5d96 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5daa:	463d      	mov	r5, r7
    5dac:	e7f3      	b.n	5d96 <read_cb+0x5e>
	...

00005db0 <bt_att_create_pdu>:
{
    5db0:	b530      	push	{r4, r5, lr}
    5db2:	b085      	sub	sp, #20
    5db4:	460d      	mov	r5, r1
    5db6:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5db8:	f7ff fdf8 	bl	59ac <att_chan_get>
	if (!att) {
    5dbc:	b1f8      	cbz	r0, 5dfe <bt_att_create_pdu+0x4e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    5dbe:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    5dc2:	3401      	adds	r4, #1
    5dc4:	428c      	cmp	r4, r1
    5dc6:	d90f      	bls.n	5de8 <bt_att_create_pdu+0x38>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5dc8:	4b0e      	ldr	r3, [pc, #56]	; (5e04 <bt_att_create_pdu+0x54>)
    5dca:	9303      	str	r3, [sp, #12]
    5dcc:	9300      	str	r3, [sp, #0]
    5dce:	4b0e      	ldr	r3, [pc, #56]	; (5e08 <bt_att_create_pdu+0x58>)
    5dd0:	9101      	str	r1, [sp, #4]
    5dd2:	9402      	str	r4, [sp, #8]
    5dd4:	681c      	ldr	r4, [r3, #0]
    5dd6:	4a0d      	ldr	r2, [pc, #52]	; (5e0c <bt_att_create_pdu+0x5c>)
    5dd8:	4b0d      	ldr	r3, [pc, #52]	; (5e10 <bt_att_create_pdu+0x60>)
    5dda:	490e      	ldr	r1, [pc, #56]	; (5e14 <bt_att_create_pdu+0x64>)
    5ddc:	480e      	ldr	r0, [pc, #56]	; (5e18 <bt_att_create_pdu+0x68>)
    5dde:	47a0      	blx	r4
		return NULL;
    5de0:	2400      	movs	r4, #0
}
    5de2:	4620      	mov	r0, r4
    5de4:	b005      	add	sp, #20
    5de6:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    5de8:	2100      	movs	r1, #0
    5dea:	4608      	mov	r0, r1
    5dec:	f7ff f9c1 	bl	5172 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5df0:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    5df2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5df4:	3008      	adds	r0, #8
    5df6:	f00d fa6b 	bl	132d0 <net_buf_simple_add>
	hdr->code = op;
    5dfa:	7005      	strb	r5, [r0, #0]
	return buf;
    5dfc:	e7f1      	b.n	5de2 <bt_att_create_pdu+0x32>
		return NULL;
    5dfe:	4604      	mov	r4, r0
    5e00:	e7ef      	b.n	5de2 <bt_att_create_pdu+0x32>
    5e02:	bf00      	nop
    5e04:	0001563e 	.word	0x0001563e
    5e08:	20003a5c 	.word	0x20003a5c
    5e0c:	00016801 	.word	0x00016801
    5e10:	00017342 	.word	0x00017342
    5e14:	00016808 	.word	0x00016808
    5e18:	000174fa 	.word	0x000174fa

00005e1c <att_indicate>:
{
    5e1c:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5e1e:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5e20:	f101 0008 	add.w	r0, r1, #8
    5e24:	f00d fa83 	bl	1332e <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5e28:	2200      	movs	r2, #0
    5e2a:	211e      	movs	r1, #30
    5e2c:	4620      	mov	r0, r4
    5e2e:	f7ff ffbf 	bl	5db0 <bt_att_create_pdu>
	if (!buf) {
    5e32:	4602      	mov	r2, r0
    5e34:	b120      	cbz	r0, 5e40 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    5e36:	4b03      	ldr	r3, [pc, #12]	; (5e44 <att_indicate+0x28>)
    5e38:	2104      	movs	r1, #4
    5e3a:	4620      	mov	r0, r4
    5e3c:	f7ff f99c 	bl	5178 <bt_l2cap_send_cb>
}
    5e40:	2000      	movs	r0, #0
    5e42:	bd10      	pop	{r4, pc}
    5e44:	0000597f 	.word	0x0000597f

00005e48 <att_mtu_req>:
{
    5e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5e4c:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5e4e:	881b      	ldrh	r3, [r3, #0]
    5e50:	2b16      	cmp	r3, #22
{
    5e52:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5e54:	d91c      	bls.n	5e90 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    5e56:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5e5a:	2202      	movs	r2, #2
    5e5c:	2103      	movs	r1, #3
    5e5e:	4640      	mov	r0, r8
    5e60:	f7ff ffa6 	bl	5db0 <bt_att_create_pdu>
	if (!pdu) {
    5e64:	4607      	mov	r7, r0
    5e66:	b1b0      	cbz	r0, 5e96 <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5e68:	2102      	movs	r1, #2
    5e6a:	3008      	adds	r0, #8
    5e6c:	f00d fa30 	bl	132d0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5e70:	2617      	movs	r6, #23
    5e72:	2400      	movs	r4, #0
    5e74:	7006      	strb	r6, [r0, #0]
    5e76:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5e78:	4b08      	ldr	r3, [pc, #32]	; (5e9c <att_mtu_req+0x54>)
    5e7a:	4640      	mov	r0, r8
    5e7c:	463a      	mov	r2, r7
    5e7e:	2104      	movs	r1, #4
    5e80:	f7ff f97a 	bl	5178 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5e84:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5e86:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    5e8a:	4620      	mov	r0, r4
    5e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5e90:	2004      	movs	r0, #4
    5e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    5e96:	200e      	movs	r0, #14
}
    5e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e9c:	000058bd 	.word	0x000058bd

00005ea0 <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ea4:	4688      	mov	r8, r1
    5ea6:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5ea8:	2101      	movs	r1, #1
    5eaa:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5eac:	4605      	mov	r5, r0
    5eae:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5eb0:	f7ff ff7e 	bl	5db0 <bt_att_create_pdu>
	if (!buf) {
    5eb4:	4604      	mov	r4, r0
    5eb6:	b180      	cbz	r0, 5eda <send_err_rsp.part.12+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5eb8:	2104      	movs	r1, #4
    5eba:	3008      	adds	r0, #8
    5ebc:	f00d fa08 	bl	132d0 <net_buf_simple_add>
	rsp->request = req;
    5ec0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    5ec4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    5ec6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5eca:	4622      	mov	r2, r4
    5ecc:	4628      	mov	r0, r5
    5ece:	4b04      	ldr	r3, [pc, #16]	; (5ee0 <send_err_rsp.part.12+0x40>)
    5ed0:	2104      	movs	r1, #4
}
    5ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5ed6:	f7ff b94f 	b.w	5178 <bt_l2cap_send_cb>
    5eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ede:	bf00      	nop
    5ee0:	000058bd 	.word	0x000058bd

00005ee4 <bt_att_recv>:
{
    5ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5ee6:	898b      	ldrh	r3, [r1, #12]
{
    5ee8:	b085      	sub	sp, #20
    5eea:	4604      	mov	r4, r0
    5eec:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    5eee:	b95b      	cbnz	r3, 5f08 <bt_att_recv+0x24>
		BT_ERR("Too small ATT PDU received");
    5ef0:	4b4f      	ldr	r3, [pc, #316]	; (6030 <bt_att_recv+0x14c>)
    5ef2:	9301      	str	r3, [sp, #4]
    5ef4:	9300      	str	r3, [sp, #0]
    5ef6:	4b4f      	ldr	r3, [pc, #316]	; (6034 <bt_att_recv+0x150>)
    5ef8:	4a4f      	ldr	r2, [pc, #316]	; (6038 <bt_att_recv+0x154>)
    5efa:	681c      	ldr	r4, [r3, #0]
    5efc:	494f      	ldr	r1, [pc, #316]	; (603c <bt_att_recv+0x158>)
    5efe:	4b50      	ldr	r3, [pc, #320]	; (6040 <bt_att_recv+0x15c>)
    5f00:	4850      	ldr	r0, [pc, #320]	; (6044 <bt_att_recv+0x160>)
			BT_WARN("Ignoring unexpected request");
    5f02:	47a0      	blx	r4
}
    5f04:	b005      	add	sp, #20
    5f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    5f08:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5f0a:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5f0c:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    5f10:	f00d f9fd 	bl	1330e <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    5f14:	4a4c      	ldr	r2, [pc, #304]	; (6048 <bt_att_recv+0x164>)
    5f16:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5f18:	2300      	movs	r3, #0
    5f1a:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5f1c:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    5f20:	4286      	cmp	r6, r0
    5f22:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5f26:	d11e      	bne.n	5f66 <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    5f28:	4472      	add	r2, lr
    5f2a:	7896      	ldrb	r6, [r2, #2]
    5f2c:	2e01      	cmp	r6, #1
    5f2e:	d139      	bne.n	5fa4 <bt_att_recv+0xc0>
    5f30:	f3bf 8f5b 	dmb	ish
    5f34:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5f38:	e852 3f00 	ldrex	r3, [r2]
    5f3c:	f043 0001 	orr.w	r0, r3, #1
    5f40:	e842 0c00 	strex	ip, r0, [r2]
    5f44:	f1bc 0f00 	cmp.w	ip, #0
    5f48:	d1f6      	bne.n	5f38 <bt_att_recv+0x54>
    5f4a:	f3bf 8f5b 	dmb	ish
    5f4e:	07da      	lsls	r2, r3, #31
    5f50:	d545      	bpl.n	5fde <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected request");
    5f52:	4b37      	ldr	r3, [pc, #220]	; (6030 <bt_att_recv+0x14c>)
    5f54:	9301      	str	r3, [sp, #4]
    5f56:	9300      	str	r3, [sp, #0]
    5f58:	4b36      	ldr	r3, [pc, #216]	; (6034 <bt_att_recv+0x150>)
    5f5a:	4a3c      	ldr	r2, [pc, #240]	; (604c <bt_att_recv+0x168>)
    5f5c:	681c      	ldr	r4, [r3, #0]
    5f5e:	4937      	ldr	r1, [pc, #220]	; (603c <bt_att_recv+0x158>)
    5f60:	4b37      	ldr	r3, [pc, #220]	; (6040 <bt_att_recv+0x15c>)
    5f62:	483b      	ldr	r0, [pc, #236]	; (6050 <bt_att_recv+0x16c>)
    5f64:	e7cd      	b.n	5f02 <bt_att_recv+0x1e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5f66:	3301      	adds	r3, #1
    5f68:	2b1b      	cmp	r3, #27
    5f6a:	d1d7      	bne.n	5f1c <bt_att_recv+0x38>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5f6c:	4b30      	ldr	r3, [pc, #192]	; (6030 <bt_att_recv+0x14c>)
    5f6e:	9302      	str	r3, [sp, #8]
    5f70:	9300      	str	r3, [sp, #0]
    5f72:	4b30      	ldr	r3, [pc, #192]	; (6034 <bt_att_recv+0x150>)
    5f74:	9001      	str	r0, [sp, #4]
    5f76:	681e      	ldr	r6, [r3, #0]
    5f78:	4836      	ldr	r0, [pc, #216]	; (6054 <bt_att_recv+0x170>)
    5f7a:	4b31      	ldr	r3, [pc, #196]	; (6040 <bt_att_recv+0x15c>)
    5f7c:	4a33      	ldr	r2, [pc, #204]	; (604c <bt_att_recv+0x168>)
    5f7e:	492f      	ldr	r1, [pc, #188]	; (603c <bt_att_recv+0x158>)
    5f80:	47b0      	blx	r6
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5f82:	782d      	ldrb	r5, [r5, #0]
    5f84:	4628      	mov	r0, r5
    5f86:	f7ff fa81 	bl	548c <att_op_get_type>
    5f8a:	2800      	cmp	r0, #0
    5f8c:	d0ba      	beq.n	5f04 <bt_att_recv+0x20>
	if (!req) {
    5f8e:	2d00      	cmp	r5, #0
    5f90:	d0b8      	beq.n	5f04 <bt_att_recv+0x20>
    5f92:	2306      	movs	r3, #6
    5f94:	2200      	movs	r2, #0
    5f96:	4629      	mov	r1, r5
    5f98:	6820      	ldr	r0, [r4, #0]
}
    5f9a:	b005      	add	sp, #20
    5f9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5fa0:	f7ff bf7e 	b.w	5ea0 <send_err_rsp.part.12>
		} else if (handler->type == ATT_INDICATION &&
    5fa4:	2e05      	cmp	r6, #5
    5fa6:	d11a      	bne.n	5fde <bt_att_recv+0xfa>
    5fa8:	f3bf 8f5b 	dmb	ish
    5fac:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5fb0:	e852 3f00 	ldrex	r3, [r2]
    5fb4:	f043 0002 	orr.w	r0, r3, #2
    5fb8:	e842 0c00 	strex	ip, r0, [r2]
    5fbc:	f1bc 0f00 	cmp.w	ip, #0
    5fc0:	d1f6      	bne.n	5fb0 <bt_att_recv+0xcc>
    5fc2:	f3bf 8f5b 	dmb	ish
    5fc6:	079b      	lsls	r3, r3, #30
    5fc8:	d509      	bpl.n	5fde <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected indication");
    5fca:	4b19      	ldr	r3, [pc, #100]	; (6030 <bt_att_recv+0x14c>)
    5fcc:	9301      	str	r3, [sp, #4]
    5fce:	9300      	str	r3, [sp, #0]
    5fd0:	4b18      	ldr	r3, [pc, #96]	; (6034 <bt_att_recv+0x150>)
    5fd2:	4a1e      	ldr	r2, [pc, #120]	; (604c <bt_att_recv+0x168>)
    5fd4:	681c      	ldr	r4, [r3, #0]
    5fd6:	4919      	ldr	r1, [pc, #100]	; (603c <bt_att_recv+0x158>)
    5fd8:	4b19      	ldr	r3, [pc, #100]	; (6040 <bt_att_recv+0x15c>)
    5fda:	481f      	ldr	r0, [pc, #124]	; (6058 <bt_att_recv+0x174>)
    5fdc:	e791      	b.n	5f02 <bt_att_recv+0x1e>
	if (buf->len < handler->expect_len) {
    5fde:	eb01 030e 	add.w	r3, r1, lr
    5fe2:	89ba      	ldrh	r2, [r7, #12]
    5fe4:	7859      	ldrb	r1, [r3, #1]
    5fe6:	4291      	cmp	r1, r2
    5fe8:	d911      	bls.n	600e <bt_att_recv+0x12a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5fea:	4b11      	ldr	r3, [pc, #68]	; (6030 <bt_att_recv+0x14c>)
    5fec:	9303      	str	r3, [sp, #12]
    5fee:	7829      	ldrb	r1, [r5, #0]
    5ff0:	9300      	str	r3, [sp, #0]
    5ff2:	4b10      	ldr	r3, [pc, #64]	; (6034 <bt_att_recv+0x150>)
    5ff4:	9102      	str	r1, [sp, #8]
    5ff6:	9201      	str	r2, [sp, #4]
    5ff8:	681f      	ldr	r7, [r3, #0]
    5ffa:	4a0f      	ldr	r2, [pc, #60]	; (6038 <bt_att_recv+0x154>)
    5ffc:	4b10      	ldr	r3, [pc, #64]	; (6040 <bt_att_recv+0x15c>)
    5ffe:	490f      	ldr	r1, [pc, #60]	; (603c <bt_att_recv+0x158>)
    6000:	4816      	ldr	r0, [pc, #88]	; (605c <bt_att_recv+0x178>)
    6002:	47b8      	blx	r7
	if (handler->type == ATT_REQUEST && err) {
    6004:	2e01      	cmp	r6, #1
    6006:	f47f af7d 	bne.w	5f04 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    600a:	2304      	movs	r3, #4
    600c:	e00a      	b.n	6024 <bt_att_recv+0x140>
		err = handler->func(att, buf);
    600e:	685b      	ldr	r3, [r3, #4]
    6010:	4639      	mov	r1, r7
    6012:	4620      	mov	r0, r4
    6014:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6016:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    6018:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    601a:	f47f af73 	bne.w	5f04 <bt_att_recv+0x20>
    601e:	2800      	cmp	r0, #0
    6020:	f43f af70 	beq.w	5f04 <bt_att_recv+0x20>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6024:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    6026:	2900      	cmp	r1, #0
    6028:	f43f af6c 	beq.w	5f04 <bt_att_recv+0x20>
    602c:	2200      	movs	r2, #0
    602e:	e7b3      	b.n	5f98 <bt_att_recv+0xb4>
    6030:	0001563e 	.word	0x0001563e
    6034:	20003a5c 	.word	0x20003a5c
    6038:	000167b9 	.word	0x000167b9
    603c:	00016808 	.word	0x00016808
    6040:	00017329 	.word	0x00017329
    6044:	0001752f 	.word	0x0001752f
    6048:	0001760c 	.word	0x0001760c
    604c:	00016801 	.word	0x00016801
    6050:	0001755a 	.word	0x0001755a
    6054:	000175e4 	.word	0x000175e4
    6058:	00017586 	.word	0x00017586
    605c:	000175b5 	.word	0x000175b5

00006060 <att_read_group_req>:
{
    6060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6064:	898b      	ldrh	r3, [r1, #12]
    6066:	2b06      	cmp	r3, #6
{
    6068:	b08d      	sub	sp, #52	; 0x34
    606a:	4680      	mov	r8, r0
    606c:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    606e:	d001      	beq.n	6074 <att_read_group_req+0x14>
    6070:	2b14      	cmp	r3, #20
    6072:	d168      	bne.n	6146 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    6074:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    6076:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6078:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    607c:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6080:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6082:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6084:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    6086:	f00d f942 	bl	1330e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    608a:	4621      	mov	r1, r4
    608c:	4638      	mov	r0, r7
    608e:	f7ff fc33 	bl	58f8 <uuid_create>
    6092:	2800      	cmp	r0, #0
    6094:	d059      	beq.n	614a <att_read_group_req+0xea>
	if (!start || !end) {
    6096:	2d00      	cmp	r5, #0
    6098:	d05a      	beq.n	6150 <att_read_group_req+0xf0>
    609a:	2400      	movs	r4, #0
    609c:	2e00      	cmp	r6, #0
    609e:	d056      	beq.n	614e <att_read_group_req+0xee>
	if (start > end) {
    60a0:	42b5      	cmp	r5, r6
    60a2:	d855      	bhi.n	6150 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    60a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    60a8:	4669      	mov	r1, sp
    60aa:	4638      	mov	r0, r7
    60ac:	f88d 4000 	strb.w	r4, [sp]
    60b0:	f8ad 3002 	strh.w	r3, [sp, #2]
    60b4:	f7fc f834 	bl	2120 <bt_uuid_cmp>
    60b8:	bb38      	cbnz	r0, 610a <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    60ba:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    60be:	2214      	movs	r2, #20
    60c0:	2100      	movs	r1, #0
    60c2:	a807      	add	r0, sp, #28
    60c4:	f7fb feda 	bl	1e7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    60c8:	2201      	movs	r2, #1
    60ca:	2111      	movs	r1, #17
    60cc:	4648      	mov	r0, r9
    60ce:	f7ff fe6f 	bl	5db0 <bt_att_create_pdu>
    60d2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    60d4:	2800      	cmp	r0, #0
    60d6:	d038      	beq.n	614a <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    60d8:	2101      	movs	r1, #1
    60da:	3008      	adds	r0, #8
	data.uuid = uuid;
    60dc:	9708      	str	r7, [sp, #32]
	data.att = att;
    60de:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    60e2:	f00d f8f5 	bl	132d0 <net_buf_simple_add>
	data.rsp->len = 0;
    60e6:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    60e8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    60ea:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    60ec:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    60ee:	4a1c      	ldr	r2, [pc, #112]	; (6160 <att_read_group_req+0x100>)
	data.group = NULL;
    60f0:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    60f2:	4631      	mov	r1, r6
    60f4:	4628      	mov	r0, r5
    60f6:	f000 fea3 	bl	6e40 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    60fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    60fc:	781c      	ldrb	r4, [r3, #0]
    60fe:	b9d4      	cbnz	r4, 6136 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    6100:	9809      	ldr	r0, [sp, #36]	; 0x24
    6102:	f00d f8b3 	bl	1326c <net_buf_unref>
    6106:	230a      	movs	r3, #10
    6108:	e00c      	b.n	6124 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    610a:	f642 0301 	movw	r3, #10241	; 0x2801
    610e:	a901      	add	r1, sp, #4
    6110:	4638      	mov	r0, r7
    6112:	f88d 4004 	strb.w	r4, [sp, #4]
    6116:	f8ad 3006 	strh.w	r3, [sp, #6]
    611a:	f7fc f801 	bl	2120 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    611e:	2800      	cmp	r0, #0
    6120:	d0cb      	beq.n	60ba <att_read_group_req+0x5a>
    6122:	2310      	movs	r3, #16
    6124:	462a      	mov	r2, r5
    6126:	2110      	movs	r1, #16
    6128:	4648      	mov	r0, r9
    612a:	f7ff feb9 	bl	5ea0 <send_err_rsp.part.12>
}
    612e:	4620      	mov	r0, r4
    6130:	b00d      	add	sp, #52	; 0x34
    6132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6136:	4b0b      	ldr	r3, [pc, #44]	; (6164 <att_read_group_req+0x104>)
    6138:	9a09      	ldr	r2, [sp, #36]	; 0x24
    613a:	2104      	movs	r1, #4
    613c:	4648      	mov	r0, r9
    613e:	f7ff f81b 	bl	5178 <bt_l2cap_send_cb>
		return 0;
    6142:	2400      	movs	r4, #0
    6144:	e7f3      	b.n	612e <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    6146:	2404      	movs	r4, #4
    6148:	e7f1      	b.n	612e <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    614a:	240e      	movs	r4, #14
    614c:	e7ef      	b.n	612e <att_read_group_req+0xce>
			*err = 0;
    614e:	4635      	mov	r5, r6
    6150:	2301      	movs	r3, #1
    6152:	462a      	mov	r2, r5
    6154:	2110      	movs	r1, #16
    6156:	4648      	mov	r0, r9
    6158:	f7ff fea2 	bl	5ea0 <send_err_rsp.part.12>
    615c:	e7f1      	b.n	6142 <att_read_group_req+0xe2>
    615e:	bf00      	nop
    6160:	00005555 	.word	0x00005555
    6164:	000058bd 	.word	0x000058bd

00006168 <att_read_mult_req>:
{
    6168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    616c:	6804      	ldr	r4, [r0, #0]
{
    616e:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    6170:	2214      	movs	r2, #20
{
    6172:	4606      	mov	r6, r0
    6174:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    6176:	a801      	add	r0, sp, #4
    6178:	2100      	movs	r1, #0
    617a:	f7fb fe7f 	bl	1e7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    617e:	2200      	movs	r2, #0
    6180:	210f      	movs	r1, #15
    6182:	4620      	mov	r0, r4
    6184:	f7ff fe14 	bl	5db0 <bt_att_create_pdu>
    6188:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    618a:	b368      	cbz	r0, 61e8 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    618c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 61f0 <att_read_mult_req+0x88>
	data.att = att;
    6190:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    6192:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6196:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    619a:	89ab      	ldrh	r3, [r5, #12]
    619c:	2b01      	cmp	r3, #1
    619e:	d806      	bhi.n	61ae <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    61a0:	4b12      	ldr	r3, [pc, #72]	; (61ec <att_read_mult_req+0x84>)
    61a2:	9a03      	ldr	r2, [sp, #12]
    61a4:	2104      	movs	r1, #4
    61a6:	4620      	mov	r0, r4
    61a8:	f7fe ffe6 	bl	5178 <bt_l2cap_send_cb>
    61ac:	e018      	b.n	61e0 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    61ae:	4638      	mov	r0, r7
    61b0:	f00d f8bd 	bl	1332e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    61b4:	ab01      	add	r3, sp, #4
    61b6:	464a      	mov	r2, r9
    61b8:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    61ba:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    61bc:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    61c0:	f000 fe3e 	bl	6e40 <bt_gatt_foreach_attr>
		if (data.err) {
    61c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    61c8:	2b00      	cmp	r3, #0
    61ca:	d0e6      	beq.n	619a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    61cc:	9803      	ldr	r0, [sp, #12]
    61ce:	f00d f84d 	bl	1326c <net_buf_unref>
    61d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    61d6:	4632      	mov	r2, r6
    61d8:	210e      	movs	r1, #14
    61da:	4620      	mov	r0, r4
    61dc:	f7ff fe60 	bl	5ea0 <send_err_rsp.part.12>
	return 0;
    61e0:	2000      	movs	r0, #0
}
    61e2:	b007      	add	sp, #28
    61e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    61e8:	200e      	movs	r0, #14
    61ea:	e7fa      	b.n	61e2 <att_read_mult_req+0x7a>
    61ec:	000058bd 	.word	0x000058bd
    61f0:	00005d39 	.word	0x00005d39

000061f4 <att_read_rsp>:
{
    61f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61f8:	4607      	mov	r7, r0
    61fa:	b086      	sub	sp, #24
    61fc:	460c      	mov	r4, r1
    61fe:	4690      	mov	r8, r2
	if (!handle) {
    6200:	461d      	mov	r5, r3
    6202:	b3a3      	cbz	r3, 626e <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    6204:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    6206:	2214      	movs	r2, #20
    6208:	2100      	movs	r1, #0
    620a:	a801      	add	r0, sp, #4
    620c:	f7fb fe36 	bl	1e7c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6210:	2200      	movs	r2, #0
    6212:	4641      	mov	r1, r8
    6214:	4630      	mov	r0, r6
    6216:	f7ff fdcb 	bl	5db0 <bt_att_create_pdu>
    621a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    621c:	b348      	cbz	r0, 6272 <att_read_rsp+0x7e>
	data.offset = offset;
    621e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    6222:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6226:	2301      	movs	r3, #1
    6228:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    622c:	4a12      	ldr	r2, [pc, #72]	; (6278 <att_read_rsp+0x84>)
	data.att = att;
    622e:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6230:	ab01      	add	r3, sp, #4
    6232:	4629      	mov	r1, r5
    6234:	4628      	mov	r0, r5
    6236:	f000 fe03 	bl	6e40 <bt_gatt_foreach_attr>
	if (data.err) {
    623a:	f89d 7014 	ldrb.w	r7, [sp, #20]
    623e:	b17f      	cbz	r7, 6260 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    6240:	9803      	ldr	r0, [sp, #12]
    6242:	f00d f813 	bl	1326c <net_buf_unref>
	if (!req) {
    6246:	b13c      	cbz	r4, 6258 <att_read_rsp+0x64>
    6248:	f89d 3014 	ldrb.w	r3, [sp, #20]
    624c:	462a      	mov	r2, r5
    624e:	4621      	mov	r1, r4
    6250:	4630      	mov	r0, r6
    6252:	f7ff fe25 	bl	5ea0 <send_err_rsp.part.12>
		return 0;
    6256:	2400      	movs	r4, #0
}
    6258:	4620      	mov	r0, r4
    625a:	b006      	add	sp, #24
    625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6260:	4b06      	ldr	r3, [pc, #24]	; (627c <att_read_rsp+0x88>)
    6262:	9a03      	ldr	r2, [sp, #12]
    6264:	2104      	movs	r1, #4
    6266:	4630      	mov	r0, r6
    6268:	f7fe ff86 	bl	5178 <bt_l2cap_send_cb>
    626c:	e7f3      	b.n	6256 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    626e:	2401      	movs	r4, #1
    6270:	e7f2      	b.n	6258 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    6272:	240e      	movs	r4, #14
    6274:	e7f0      	b.n	6258 <att_read_rsp+0x64>
    6276:	bf00      	nop
    6278:	00005d39 	.word	0x00005d39
    627c:	000058bd 	.word	0x000058bd

00006280 <att_read_blob_req>:
{
    6280:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    6282:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    6284:	8813      	ldrh	r3, [r2, #0]
    6286:	8852      	ldrh	r2, [r2, #2]
    6288:	9200      	str	r2, [sp, #0]
    628a:	210c      	movs	r1, #12
    628c:	220d      	movs	r2, #13
    628e:	f7ff ffb1 	bl	61f4 <att_read_rsp>
}
    6292:	b003      	add	sp, #12
    6294:	f85d fb04 	ldr.w	pc, [sp], #4

00006298 <att_read_req>:
{
    6298:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    629a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    629c:	2200      	movs	r2, #0
    629e:	881b      	ldrh	r3, [r3, #0]
    62a0:	9200      	str	r2, [sp, #0]
    62a2:	210a      	movs	r1, #10
    62a4:	220b      	movs	r2, #11
    62a6:	f7ff ffa5 	bl	61f4 <att_read_rsp>
}
    62aa:	b003      	add	sp, #12
    62ac:	f85d fb04 	ldr.w	pc, [sp], #4

000062b0 <att_read_type_req>:
{
    62b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    62b4:	898b      	ldrh	r3, [r1, #12]
    62b6:	2b06      	cmp	r3, #6
{
    62b8:	b08d      	sub	sp, #52	; 0x34
    62ba:	4607      	mov	r7, r0
    62bc:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    62be:	d001      	beq.n	62c4 <att_read_type_req+0x14>
    62c0:	2b14      	cmp	r3, #20
    62c2:	d152      	bne.n	636a <att_read_type_req+0xba>
	req = (void *)buf->data;
    62c4:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    62c6:	2104      	movs	r1, #4
	req = (void *)buf->data;
    62c8:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    62cc:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    62d0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    62d2:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    62d4:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    62d8:	f00d f819 	bl	1330e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    62dc:	4631      	mov	r1, r6
    62de:	4640      	mov	r0, r8
    62e0:	f7ff fb0a 	bl	58f8 <uuid_create>
    62e4:	b198      	cbz	r0, 630e <att_read_type_req+0x5e>
	if (!start || !end) {
    62e6:	2d00      	cmp	r5, #0
    62e8:	d042      	beq.n	6370 <att_read_type_req+0xc0>
    62ea:	2c00      	cmp	r4, #0
    62ec:	d03f      	beq.n	636e <att_read_type_req+0xbe>
	if (start > end) {
    62ee:	42a5      	cmp	r5, r4
    62f0:	d83e      	bhi.n	6370 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    62f2:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    62f4:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    62f6:	2100      	movs	r1, #0
    62f8:	eb0d 0002 	add.w	r0, sp, r2
    62fc:	f7fb fdbe 	bl	1e7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6300:	2201      	movs	r2, #1
    6302:	2109      	movs	r1, #9
    6304:	4630      	mov	r0, r6
    6306:	f7ff fd53 	bl	5db0 <bt_att_create_pdu>
    630a:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    630c:	b908      	cbnz	r0, 6312 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    630e:	240e      	movs	r4, #14
    6310:	e027      	b.n	6362 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6312:	2101      	movs	r1, #1
    6314:	3008      	adds	r0, #8
	data.att = att;
    6316:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    6318:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    631c:	f00c ffd8 	bl	132d0 <net_buf_simple_add>
	data.rsp->len = 0;
    6320:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6322:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6324:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6326:	4621      	mov	r1, r4
	data.rsp->len = 0;
    6328:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    632a:	4a14      	ldr	r2, [pc, #80]	; (637c <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    632c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6330:	4628      	mov	r0, r5
    6332:	ab06      	add	r3, sp, #24
    6334:	f000 fd84 	bl	6e40 <bt_gatt_foreach_attr>
	if (data.err) {
    6338:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    633c:	b15c      	cbz	r4, 6356 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    633e:	9808      	ldr	r0, [sp, #32]
    6340:	f00c ff94 	bl	1326c <net_buf_unref>
    6344:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6348:	462a      	mov	r2, r5
    634a:	2108      	movs	r1, #8
    634c:	4630      	mov	r0, r6
    634e:	f7ff fda7 	bl	5ea0 <send_err_rsp.part.12>
		return 0;
    6352:	2400      	movs	r4, #0
    6354:	e005      	b.n	6362 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6356:	4b0a      	ldr	r3, [pc, #40]	; (6380 <att_read_type_req+0xd0>)
    6358:	9a08      	ldr	r2, [sp, #32]
    635a:	2104      	movs	r1, #4
    635c:	4630      	mov	r0, r6
    635e:	f7fe ff0b 	bl	5178 <bt_l2cap_send_cb>
}
    6362:	4620      	mov	r0, r4
    6364:	b00d      	add	sp, #52	; 0x34
    6366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    636a:	2404      	movs	r4, #4
    636c:	e7f9      	b.n	6362 <att_read_type_req+0xb2>
			*err = 0;
    636e:	4625      	mov	r5, r4
    6370:	2301      	movs	r3, #1
    6372:	462a      	mov	r2, r5
    6374:	2108      	movs	r1, #8
    6376:	4648      	mov	r0, r9
    6378:	e7e9      	b.n	634e <att_read_type_req+0x9e>
    637a:	bf00      	nop
    637c:	000057d1 	.word	0x000057d1
    6380:	000058bd 	.word	0x000058bd

00006384 <att_find_type_req>:
{
    6384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6388:	f8d0 9000 	ldr.w	r9, [r0]
{
    638c:	4680      	mov	r8, r0
	req = (void *)buf->data;
    638e:	4608      	mov	r0, r1
{
    6390:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    6392:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    6396:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    6398:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    639a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    639c:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    639e:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    63a0:	f00c ffb5 	bl	1330e <net_buf_simple_pull>
    63a4:	4682      	mov	sl, r0
	if (!start || !end) {
    63a6:	2d00      	cmp	r5, #0
    63a8:	d057      	beq.n	645a <att_find_type_req+0xd6>
    63aa:	2400      	movs	r4, #0
    63ac:	2f00      	cmp	r7, #0
    63ae:	d053      	beq.n	6458 <att_find_type_req+0xd4>
	if (start > end) {
    63b0:	42bd      	cmp	r5, r7
    63b2:	d852      	bhi.n	645a <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    63b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    63b8:	a902      	add	r1, sp, #8
    63ba:	a801      	add	r0, sp, #4
    63bc:	f8ad 6006 	strh.w	r6, [sp, #6]
    63c0:	f88d 4004 	strb.w	r4, [sp, #4]
    63c4:	f88d 4008 	strb.w	r4, [sp, #8]
    63c8:	f8ad 300a 	strh.w	r3, [sp, #10]
    63cc:	f7fb fea8 	bl	2120 <bt_uuid_cmp>
    63d0:	4606      	mov	r6, r0
    63d2:	b148      	cbz	r0, 63e8 <att_find_type_req+0x64>
    63d4:	230a      	movs	r3, #10
    63d6:	462a      	mov	r2, r5
    63d8:	2106      	movs	r1, #6
    63da:	4648      	mov	r0, r9
    63dc:	f7ff fd60 	bl	5ea0 <send_err_rsp.part.12>
}
    63e0:	4620      	mov	r0, r4
    63e2:	b009      	add	sp, #36	; 0x24
    63e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    63e8:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    63ec:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    63f0:	2214      	movs	r2, #20
    63f2:	4631      	mov	r1, r6
    63f4:	a803      	add	r0, sp, #12
    63f6:	f7fb fd41 	bl	1e7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    63fa:	4632      	mov	r2, r6
    63fc:	2107      	movs	r1, #7
    63fe:	4648      	mov	r0, r9
    6400:	f7ff fcd6 	bl	5db0 <bt_att_create_pdu>
    6404:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    6406:	b328      	cbz	r0, 6454 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6408:	230a      	movs	r3, #10
    640a:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    640e:	4a14      	ldr	r2, [pc, #80]	; (6460 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6410:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6414:	ab03      	add	r3, sp, #12
    6416:	4639      	mov	r1, r7
    6418:	4628      	mov	r0, r5
	data.att = att;
    641a:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    641e:	9605      	str	r6, [sp, #20]
	data.value = value;
    6420:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6424:	f000 fd0c 	bl	6e40 <bt_gatt_foreach_attr>
	if (data.err) {
    6428:	f89d 401d 	ldrb.w	r4, [sp, #29]
    642c:	b15c      	cbz	r4, 6446 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    642e:	9804      	ldr	r0, [sp, #16]
    6430:	f00c ff1c 	bl	1326c <net_buf_unref>
    6434:	f89d 301d 	ldrb.w	r3, [sp, #29]
    6438:	462a      	mov	r2, r5
    643a:	2106      	movs	r1, #6
    643c:	4648      	mov	r0, r9
    643e:	f7ff fd2f 	bl	5ea0 <send_err_rsp.part.12>
		return 0;
    6442:	2400      	movs	r4, #0
    6444:	e7cc      	b.n	63e0 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6446:	4b07      	ldr	r3, [pc, #28]	; (6464 <att_find_type_req+0xe0>)
    6448:	9a04      	ldr	r2, [sp, #16]
    644a:	2104      	movs	r1, #4
    644c:	4648      	mov	r0, r9
    644e:	f7fe fe93 	bl	5178 <bt_l2cap_send_cb>
    6452:	e7c5      	b.n	63e0 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    6454:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6456:	e7c3      	b.n	63e0 <att_find_type_req+0x5c>
			*err = 0;
    6458:	463d      	mov	r5, r7
    645a:	2301      	movs	r3, #1
    645c:	e7ec      	b.n	6438 <att_find_type_req+0xb4>
    645e:	bf00      	nop
    6460:	000056bd 	.word	0x000056bd
    6464:	000058bd 	.word	0x000058bd

00006468 <att_find_info_req>:
{
    6468:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    646a:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    646c:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    646e:	881d      	ldrh	r5, [r3, #0]
{
    6470:	b085      	sub	sp, #20
    6472:	4607      	mov	r7, r0
	if (!start || !end) {
    6474:	b375      	cbz	r5, 64d4 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6476:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6478:	b35c      	cbz	r4, 64d2 <att_find_info_req+0x6a>
	if (start > end) {
    647a:	42a5      	cmp	r5, r4
    647c:	d82a      	bhi.n	64d4 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    647e:	2210      	movs	r2, #16
    6480:	2100      	movs	r1, #0
    6482:	4668      	mov	r0, sp
    6484:	f7fb fcfa 	bl	1e7c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6488:	2200      	movs	r2, #0
    648a:	2105      	movs	r1, #5
    648c:	4630      	mov	r0, r6
    648e:	f7ff fc8f 	bl	5db0 <bt_att_create_pdu>
    6492:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6494:	b910      	cbnz	r0, 649c <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    6496:	200e      	movs	r0, #14
}
    6498:	b005      	add	sp, #20
    649a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    649c:	4621      	mov	r1, r4
    649e:	466b      	mov	r3, sp
    64a0:	4a0d      	ldr	r2, [pc, #52]	; (64d8 <att_find_info_req+0x70>)
	data.att = att;
    64a2:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    64a4:	4628      	mov	r0, r5
    64a6:	f000 fccb 	bl	6e40 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    64aa:	9c02      	ldr	r4, [sp, #8]
    64ac:	b94c      	cbnz	r4, 64c2 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    64ae:	9801      	ldr	r0, [sp, #4]
    64b0:	f00c fedc 	bl	1326c <net_buf_unref>
    64b4:	230a      	movs	r3, #10
    64b6:	462a      	mov	r2, r5
    64b8:	2104      	movs	r1, #4
    64ba:	4630      	mov	r0, r6
    64bc:	f7ff fcf0 	bl	5ea0 <send_err_rsp.part.12>
    64c0:	e005      	b.n	64ce <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    64c2:	4b06      	ldr	r3, [pc, #24]	; (64dc <att_find_info_req+0x74>)
    64c4:	9a01      	ldr	r2, [sp, #4]
    64c6:	2104      	movs	r1, #4
    64c8:	4630      	mov	r0, r6
    64ca:	f7fe fe55 	bl	5178 <bt_l2cap_send_cb>
		return 0;
    64ce:	2000      	movs	r0, #0
    64d0:	e7e2      	b.n	6498 <att_find_info_req+0x30>
			*err = 0;
    64d2:	4625      	mov	r5, r4
    64d4:	2301      	movs	r3, #1
    64d6:	e7ee      	b.n	64b6 <att_find_info_req+0x4e>
    64d8:	00005623 	.word	0x00005623
    64dc:	000058bd 	.word	0x000058bd

000064e0 <att_write_rsp.part.13.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    64e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64e4:	b086      	sub	sp, #24
    64e6:	4690      	mov	r8, r2
    64e8:	4605      	mov	r5, r0
    64ea:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    64ec:	2218      	movs	r2, #24
    64ee:	2100      	movs	r1, #0
    64f0:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    64f2:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    64f4:	f7fb fcc2 	bl	1e7c <memset>
	if (rsp) {
    64f8:	f1b8 0f00 	cmp.w	r8, #0
    64fc:	d11f      	bne.n	653e <att_write_rsp.part.13.constprop.17+0x5e>
	data.offset = offset;
    64fe:	2300      	movs	r3, #0
    6500:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    6504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6506:	9303      	str	r3, [sp, #12]
	data.len = len;
    6508:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    650c:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6510:	2301      	movs	r3, #1
    6512:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6516:	4a1b      	ldr	r2, [pc, #108]	; (6584 <att_write_rsp.part.13.constprop.17+0xa4>)
	data.conn = conn;
    6518:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    651a:	466b      	mov	r3, sp
    651c:	4639      	mov	r1, r7
    651e:	4638      	mov	r0, r7
	data.op = op;
    6520:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6524:	f000 fc8c 	bl	6e40 <bt_gatt_foreach_attr>
	if (data.err) {
    6528:	f89d 4014 	ldrb.w	r4, [sp, #20]
    652c:	b98c      	cbnz	r4, 6552 <att_write_rsp.part.13.constprop.17+0x72>
	if (data.buf) {
    652e:	9a01      	ldr	r2, [sp, #4]
    6530:	b1b2      	cbz	r2, 6560 <att_write_rsp.part.13.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6532:	4b15      	ldr	r3, [pc, #84]	; (6588 <att_write_rsp.part.13.constprop.17+0xa8>)
    6534:	2104      	movs	r1, #4
    6536:	4628      	mov	r0, r5
    6538:	f7fe fe1e 	bl	5178 <bt_l2cap_send_cb>
    653c:	e011      	b.n	6562 <att_write_rsp.part.13.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    653e:	2200      	movs	r2, #0
    6540:	4641      	mov	r1, r8
    6542:	4628      	mov	r0, r5
    6544:	f7ff fc34 	bl	5db0 <bt_att_create_pdu>
    6548:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    654a:	2800      	cmp	r0, #0
    654c:	d1d7      	bne.n	64fe <att_write_rsp.part.13.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    654e:	240e      	movs	r4, #14
    6550:	e007      	b.n	6562 <att_write_rsp.part.13.constprop.17+0x82>
		if (rsp) {
    6552:	f1b8 0f00 	cmp.w	r8, #0
    6556:	d00f      	beq.n	6578 <att_write_rsp.part.13.constprop.17+0x98>
			net_buf_unref(data.buf);
    6558:	9801      	ldr	r0, [sp, #4]
    655a:	f00c fe87 	bl	1326c <net_buf_unref>
	if (!req) {
    655e:	b926      	cbnz	r6, 656a <att_write_rsp.part.13.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6560:	2400      	movs	r4, #0
}
    6562:	4620      	mov	r0, r4
    6564:	b006      	add	sp, #24
    6566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    656a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    656e:	463a      	mov	r2, r7
    6570:	4631      	mov	r1, r6
    6572:	4628      	mov	r0, r5
    6574:	f7ff fc94 	bl	5ea0 <send_err_rsp.part.12>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6578:	2e18      	cmp	r6, #24
    657a:	d1f1      	bne.n	6560 <att_write_rsp.part.13.constprop.17+0x80>
    657c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6580:	e7ef      	b.n	6562 <att_write_rsp.part.13.constprop.17+0x82>
    6582:	bf00      	nop
    6584:	00005a39 	.word	0x00005a39
    6588:	000058bd 	.word	0x000058bd

0000658c <att_signed_write_cmd>:
{
    658c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6590:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    6592:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    6594:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6598:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    659a:	4620      	mov	r0, r4
    659c:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    659e:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    65a2:	f00c feac 	bl	132fe <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    65a6:	4629      	mov	r1, r5
    65a8:	4630      	mov	r0, r6
    65aa:	f000 fdd0 	bl	714e <bt_smp_sign_verify>
	if (err) {
    65ae:	4607      	mov	r7, r0
    65b0:	b168      	cbz	r0, 65ce <att_signed_write_cmd+0x42>
		BT_ERR("Error verifying data");
    65b2:	4b14      	ldr	r3, [pc, #80]	; (6604 <att_signed_write_cmd+0x78>)
    65b4:	9301      	str	r3, [sp, #4]
    65b6:	9300      	str	r3, [sp, #0]
    65b8:	4b13      	ldr	r3, [pc, #76]	; (6608 <att_signed_write_cmd+0x7c>)
    65ba:	4814      	ldr	r0, [pc, #80]	; (660c <att_signed_write_cmd+0x80>)
    65bc:	681c      	ldr	r4, [r3, #0]
    65be:	4a14      	ldr	r2, [pc, #80]	; (6610 <att_signed_write_cmd+0x84>)
    65c0:	4b14      	ldr	r3, [pc, #80]	; (6614 <att_signed_write_cmd+0x88>)
    65c2:	4915      	ldr	r1, [pc, #84]	; (6618 <att_signed_write_cmd+0x8c>)
    65c4:	47a0      	blx	r4
    65c6:	2000      	movs	r0, #0
}
    65c8:	b002      	add	sp, #8
    65ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    65ce:	2101      	movs	r1, #1
    65d0:	4620      	mov	r0, r4
    65d2:	f00c fe9c 	bl	1330e <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    65d6:	2102      	movs	r1, #2
    65d8:	4620      	mov	r0, r4
    65da:	f00c fe98 	bl	1330e <net_buf_simple_pull>
	if (!handle) {
    65de:	f1b8 0f00 	cmp.w	r8, #0
    65e2:	d00c      	beq.n	65fe <att_signed_write_cmd+0x72>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    65e4:	7b2b      	ldrb	r3, [r5, #12]
    65e6:	3b0c      	subs	r3, #12
    65e8:	b2db      	uxtb	r3, r3
    65ea:	9301      	str	r3, [sp, #4]
    65ec:	68ab      	ldr	r3, [r5, #8]
    65ee:	9300      	str	r3, [sp, #0]
    65f0:	463a      	mov	r2, r7
    65f2:	4643      	mov	r3, r8
    65f4:	4639      	mov	r1, r7
    65f6:	4630      	mov	r0, r6
    65f8:	f7ff ff72 	bl	64e0 <att_write_rsp.part.13.constprop.17>
    65fc:	e7e4      	b.n	65c8 <att_signed_write_cmd+0x3c>
		return BT_ATT_ERR_INVALID_HANDLE;
    65fe:	2001      	movs	r0, #1
    6600:	e7e2      	b.n	65c8 <att_signed_write_cmd+0x3c>
    6602:	bf00      	nop
    6604:	0001563e 	.word	0x0001563e
    6608:	20003a5c 	.word	0x20003a5c
    660c:	00017484 	.word	0x00017484
    6610:	000167b9 	.word	0x000167b9
    6614:	00017314 	.word	0x00017314
    6618:	00016808 	.word	0x00016808

0000661c <att_write_cmd>:
{
    661c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    661e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6620:	f101 0008 	add.w	r0, r1, #8
{
    6624:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6626:	f00c fe82 	bl	1332e <net_buf_simple_pull_le16>
	if (!handle) {
    662a:	4603      	mov	r3, r0
    662c:	b150      	cbz	r0, 6644 <att_write_cmd+0x28>
    662e:	7b22      	ldrb	r2, [r4, #12]
    6630:	9201      	str	r2, [sp, #4]
    6632:	68a2      	ldr	r2, [r4, #8]
    6634:	9200      	str	r2, [sp, #0]
    6636:	2200      	movs	r2, #0
    6638:	4611      	mov	r1, r2
    663a:	4628      	mov	r0, r5
    663c:	f7ff ff50 	bl	64e0 <att_write_rsp.part.13.constprop.17>
}
    6640:	b003      	add	sp, #12
    6642:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6644:	2001      	movs	r0, #1
    6646:	e7fb      	b.n	6640 <att_write_cmd+0x24>

00006648 <att_write_req>:
{
    6648:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    664a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    664c:	f101 0008 	add.w	r0, r1, #8
{
    6650:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6652:	f00c fe6c 	bl	1332e <net_buf_simple_pull_le16>
	if (!handle) {
    6656:	4603      	mov	r3, r0
    6658:	b150      	cbz	r0, 6670 <att_write_req+0x28>
    665a:	7b22      	ldrb	r2, [r4, #12]
    665c:	9201      	str	r2, [sp, #4]
    665e:	68a2      	ldr	r2, [r4, #8]
    6660:	9200      	str	r2, [sp, #0]
    6662:	2112      	movs	r1, #18
    6664:	2213      	movs	r2, #19
    6666:	4628      	mov	r0, r5
    6668:	f7ff ff3a 	bl	64e0 <att_write_rsp.part.13.constprop.17>
}
    666c:	b003      	add	sp, #12
    666e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6670:	2001      	movs	r0, #1
    6672:	e7fb      	b.n	666c <att_write_req+0x24>

00006674 <bt_att_init>:

void bt_att_init(void)
{
    6674:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6676:	4803      	ldr	r0, [pc, #12]	; (6684 <bt_att_init+0x10>)
    6678:	f7fe fcbe 	bl	4ff8 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    667c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6680:	f000 bbc8 	b.w	6e14 <bt_gatt_init>
    6684:	20003bb8 	.word	0x20003bb8

00006688 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6688:	b510      	push	{r4, lr}
    668a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    668c:	b1d8      	cbz	r0, 66c6 <bt_att_req_send+0x3e>
    668e:	b1d1      	cbz	r1, 66c6 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6690:	f7ff f98c 	bl	59ac <att_chan_get>
	if (!att) {
    6694:	4603      	mov	r3, r0
    6696:	b1c8      	cbz	r0, 66cc <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6698:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    669c:	b172      	cbz	r2, 66bc <bt_att_req_send+0x34>
	parent->next = child;
    669e:	2000      	movs	r0, #0
    66a0:	6020      	str	r0, [r4, #0]
    66a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    66a6:	b92a      	cbnz	r2, 66b4 <bt_att_req_send+0x2c>
	list->tail = node;
    66a8:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    66ac:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    66b0:	4610      	mov	r0, r2
    66b2:	bd10      	pop	{r4, pc}
	parent->next = child;
    66b4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    66b6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    66ba:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    66bc:	4621      	mov	r1, r4
}
    66be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    66c2:	f7ff b9e5 	b.w	5a90 <att_send_req>
		return -EINVAL;
    66c6:	f06f 0015 	mvn.w	r0, #21
    66ca:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    66cc:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    66d0:	bd10      	pop	{r4, pc}

000066d2 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    66d2:	4770      	bx	lr

000066d4 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    66d4:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    66d6:	2000      	movs	r0, #0
    66d8:	4770      	bx	lr

000066da <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    66da:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    66dc:	2300      	movs	r3, #0
    66de:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    66e0:	461a      	mov	r2, r3
    66e2:	42aa      	cmp	r2, r5
    66e4:	d107      	bne.n	66f6 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    66e6:	890a      	ldrh	r2, [r1, #8]
    66e8:	429a      	cmp	r2, r3
    66ea:	d00d      	beq.n	6708 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    66ec:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    66ee:	68ca      	ldr	r2, [r1, #12]
	}
}
    66f0:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    66f2:	4619      	mov	r1, r3
    66f4:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    66f6:	680c      	ldr	r4, [r1, #0]
    66f8:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    66fc:	3201      	adds	r2, #1
    66fe:	8924      	ldrh	r4, [r4, #8]
    6700:	42a3      	cmp	r3, r4
    6702:	bf38      	it	cc
    6704:	4623      	movcc	r3, r4
    6706:	e7ec      	b.n	66e2 <gatt_ccc_changed+0x8>
}
    6708:	bc30      	pop	{r4, r5}
    670a:	4770      	bx	lr

0000670c <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    670c:	b410      	push	{r4}
    670e:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6710:	699c      	ldr	r4, [r3, #24]
    6712:	460a      	mov	r2, r1
    6714:	6959      	ldr	r1, [r3, #20]
    6716:	4623      	mov	r3, r4
}
    6718:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    671a:	4718      	bx	r3

0000671c <gatt_register>:
{
    671c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    671e:	4a1f      	ldr	r2, [pc, #124]	; (679c <gatt_register+0x80>)
    6720:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    6722:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    6726:	b14b      	cbz	r3, 673c <gatt_register+0x20>
    6728:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    672a:	2b00      	cmp	r3, #0
    672c:	d033      	beq.n	6796 <gatt_register+0x7a>
	handle = last->attrs[last->attr_count - 1].handle;
    672e:	e913 0018 	ldmdb	r3, {r3, r4}
    6732:	2614      	movs	r6, #20
    6734:	fb06 3304 	mla	r3, r6, r4, r3
    6738:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    673c:	b2ad      	uxth	r5, r5
    673e:	2414      	movs	r4, #20
    6740:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    6744:	b109      	cbz	r1, 674a <gatt_register+0x2e>
    6746:	42a9      	cmp	r1, r5
    6748:	d108      	bne.n	675c <gatt_register+0x40>
	parent->next = child;
    674a:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    674c:	f100 0108 	add.w	r1, r0, #8
    6750:	6083      	str	r3, [r0, #8]
    6752:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    6754:	b9d8      	cbnz	r0, 678e <gatt_register+0x72>
	list->tail = node;
    6756:	6051      	str	r1, [r2, #4]
	list->head = node;
    6758:	6011      	str	r1, [r2, #0]
    675a:	e016      	b.n	678a <gatt_register+0x6e>
		if (!attrs->handle) {
    675c:	8a0c      	ldrh	r4, [r1, #16]
    675e:	b92c      	cbnz	r4, 676c <gatt_register+0x50>
			attrs->handle = ++handle;
    6760:	3301      	adds	r3, #1
    6762:	b29c      	uxth	r4, r3
    6764:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    6766:	3114      	adds	r1, #20
    6768:	4623      	mov	r3, r4
    676a:	e7eb      	b.n	6744 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    676c:	42a3      	cmp	r3, r4
    676e:	d3fa      	bcc.n	6766 <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6770:	4b0b      	ldr	r3, [pc, #44]	; (67a0 <gatt_register+0x84>)
    6772:	9302      	str	r3, [sp, #8]
    6774:	e88d 0018 	stmia.w	sp, {r3, r4}
    6778:	4b0a      	ldr	r3, [pc, #40]	; (67a4 <gatt_register+0x88>)
    677a:	480b      	ldr	r0, [pc, #44]	; (67a8 <gatt_register+0x8c>)
    677c:	681c      	ldr	r4, [r3, #0]
    677e:	4a0b      	ldr	r2, [pc, #44]	; (67ac <gatt_register+0x90>)
    6780:	4b0b      	ldr	r3, [pc, #44]	; (67b0 <gatt_register+0x94>)
    6782:	490c      	ldr	r1, [pc, #48]	; (67b4 <gatt_register+0x98>)
    6784:	47a0      	blx	r4
			return -EINVAL;
    6786:	f06f 0015 	mvn.w	r0, #21
}
    678a:	b004      	add	sp, #16
    678c:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    678e:	6001      	str	r1, [r0, #0]
	list->tail = node;
    6790:	6051      	str	r1, [r2, #4]
	return 0;
    6792:	4618      	mov	r0, r3
    6794:	e7f9      	b.n	678a <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    6796:	681b      	ldr	r3, [r3, #0]
    6798:	deff      	udf	#255	; 0xff
    679a:	bf00      	nop
    679c:	20000584 	.word	0x20000584
    67a0:	0001563e 	.word	0x0001563e
    67a4:	20003a5c 	.word	0x20003a5c
    67a8:	000178d9 	.word	0x000178d9
    67ac:	000167b9 	.word	0x000167b9
    67b0:	000176e4 	.word	0x000176e4
    67b4:	00016808 	.word	0x00016808

000067b8 <gatt_notify>:
{
    67b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    67bc:	468a      	mov	sl, r1
    67be:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    67c0:	211b      	movs	r1, #27
    67c2:	1c9a      	adds	r2, r3, #2
{
    67c4:	4680      	mov	r8, r0
    67c6:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    67c8:	f7ff faf2 	bl	5db0 <bt_att_create_pdu>
	if (!buf) {
    67cc:	4604      	mov	r4, r0
    67ce:	b970      	cbnz	r0, 67ee <gatt_notify+0x36>
		BT_WARN("No buffer available to send notification");
    67d0:	4b14      	ldr	r3, [pc, #80]	; (6824 <gatt_notify+0x6c>)
    67d2:	9301      	str	r3, [sp, #4]
    67d4:	9300      	str	r3, [sp, #0]
    67d6:	4b14      	ldr	r3, [pc, #80]	; (6828 <gatt_notify+0x70>)
    67d8:	4814      	ldr	r0, [pc, #80]	; (682c <gatt_notify+0x74>)
    67da:	681c      	ldr	r4, [r3, #0]
    67dc:	4a14      	ldr	r2, [pc, #80]	; (6830 <gatt_notify+0x78>)
    67de:	4b15      	ldr	r3, [pc, #84]	; (6834 <gatt_notify+0x7c>)
    67e0:	4915      	ldr	r1, [pc, #84]	; (6838 <gatt_notify+0x80>)
    67e2:	47a0      	blx	r4
    67e4:	f06f 000b 	mvn.w	r0, #11
}
    67e8:	b002      	add	sp, #8
    67ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    67ee:	f100 0708 	add.w	r7, r0, #8
    67f2:	2102      	movs	r1, #2
    67f4:	4638      	mov	r0, r7
    67f6:	f00c fd6b 	bl	132d0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    67fa:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    67fc:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    67fe:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6802:	4638      	mov	r0, r7
    6804:	f00c fd64 	bl	132d0 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6808:	4632      	mov	r2, r6
    680a:	4649      	mov	r1, r9
    680c:	4628      	mov	r0, r5
    680e:	f7fb fb09 	bl	1e24 <memcpy>
    6812:	4640      	mov	r0, r8
    6814:	2300      	movs	r3, #0
    6816:	4622      	mov	r2, r4
    6818:	2104      	movs	r1, #4
    681a:	f7fe fcad 	bl	5178 <bt_l2cap_send_cb>
	return 0;
    681e:	2000      	movs	r0, #0
    6820:	e7e2      	b.n	67e8 <gatt_notify+0x30>
    6822:	bf00      	nop
    6824:	0001563e 	.word	0x0001563e
    6828:	20003a5c 	.word	0x20003a5c
    682c:	000178a0 	.word	0x000178a0
    6830:	00016801 	.word	0x00016801
    6834:	00017720 	.word	0x00017720
    6838:	00016808 	.word	0x00016808

0000683c <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    683c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    6840:	694b      	ldr	r3, [r1, #20]
{
    6842:	b087      	sub	sp, #28
    6844:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    6846:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6848:	6818      	ldr	r0, [r3, #0]
    684a:	2300      	movs	r3, #0
{
    684c:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    684e:	f88d 3014 	strb.w	r3, [sp, #20]
    6852:	a905      	add	r1, sp, #20
    6854:	f642 0303 	movw	r3, #10243	; 0x2803
    6858:	f8ad 3016 	strh.w	r3, [sp, #22]
    685c:	f7fb fc60 	bl	2120 <bt_uuid_cmp>
    6860:	b930      	cbnz	r0, 6870 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    6862:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6864:	68db      	ldr	r3, [r3, #12]
    6866:	791b      	ldrb	r3, [r3, #4]
    6868:	069b      	lsls	r3, r3, #26
    686a:	d546      	bpl.n	68fa <gatt_indicate+0xbe>
			return -EINVAL;
		}

		value_handle += 1;
    686c:	3501      	adds	r5, #1
    686e:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    6870:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6872:	211d      	movs	r1, #29
    6874:	3202      	adds	r2, #2
    6876:	4648      	mov	r0, r9
    6878:	f7ff fa9a 	bl	5db0 <bt_att_create_pdu>
	if (!buf) {
    687c:	4606      	mov	r6, r0
    687e:	b978      	cbnz	r0, 68a0 <gatt_indicate+0x64>
		BT_WARN("No buffer available to send indication");
    6880:	4b1f      	ldr	r3, [pc, #124]	; (6900 <gatt_indicate+0xc4>)
    6882:	9301      	str	r3, [sp, #4]
    6884:	9300      	str	r3, [sp, #0]
    6886:	4b1f      	ldr	r3, [pc, #124]	; (6904 <gatt_indicate+0xc8>)
    6888:	4a1f      	ldr	r2, [pc, #124]	; (6908 <gatt_indicate+0xcc>)
    688a:	681c      	ldr	r4, [r3, #0]
    688c:	491f      	ldr	r1, [pc, #124]	; (690c <gatt_indicate+0xd0>)
    688e:	4b20      	ldr	r3, [pc, #128]	; (6910 <gatt_indicate+0xd4>)
    6890:	4820      	ldr	r0, [pc, #128]	; (6914 <gatt_indicate+0xd8>)
    6892:	47a0      	blx	r4
		return -ENOMEM;
    6894:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    6898:	4620      	mov	r0, r4
    689a:	b007      	add	sp, #28
    689c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    68a0:	f100 0708 	add.w	r7, r0, #8
    68a4:	2102      	movs	r1, #2
    68a6:	4638      	mov	r0, r7
    68a8:	f00c fd12 	bl	132d0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    68ac:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    68ae:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    68b0:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    68b4:	4638      	mov	r0, r7
    68b6:	f00c fd0b 	bl	132d0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    68ba:	8c22      	ldrh	r2, [r4, #32]
    68bc:	69e1      	ldr	r1, [r4, #28]
    68be:	4640      	mov	r0, r8
    68c0:	f7fb fab0 	bl	1e24 <memcpy>
		req->func = func;
    68c4:	4b14      	ldr	r3, [pc, #80]	; (6918 <gatt_indicate+0xdc>)
    68c6:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    68c8:	2300      	movs	r3, #0
		req->buf = buf;
    68ca:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    68cc:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    68ce:	4621      	mov	r1, r4
    68d0:	4648      	mov	r0, r9
    68d2:	f7ff fed9 	bl	6688 <bt_att_req_send>
	if (err) {
    68d6:	4604      	mov	r4, r0
    68d8:	2800      	cmp	r0, #0
    68da:	d0dd      	beq.n	6898 <gatt_indicate+0x5c>
		BT_ERR("Error sending ATT PDU: %d", err);
    68dc:	4b08      	ldr	r3, [pc, #32]	; (6900 <gatt_indicate+0xc4>)
    68de:	9302      	str	r3, [sp, #8]
    68e0:	e88d 0018 	stmia.w	sp, {r3, r4}
    68e4:	4b07      	ldr	r3, [pc, #28]	; (6904 <gatt_indicate+0xc8>)
    68e6:	4a0d      	ldr	r2, [pc, #52]	; (691c <gatt_indicate+0xe0>)
    68e8:	681d      	ldr	r5, [r3, #0]
    68ea:	4908      	ldr	r1, [pc, #32]	; (690c <gatt_indicate+0xd0>)
    68ec:	4b0c      	ldr	r3, [pc, #48]	; (6920 <gatt_indicate+0xe4>)
    68ee:	480d      	ldr	r0, [pc, #52]	; (6924 <gatt_indicate+0xe8>)
    68f0:	47a8      	blx	r5
		net_buf_unref(buf);
    68f2:	4630      	mov	r0, r6
    68f4:	f00c fcba 	bl	1326c <net_buf_unref>
    68f8:	e7ce      	b.n	6898 <gatt_indicate+0x5c>
			return -EINVAL;
    68fa:	f06f 0415 	mvn.w	r4, #21
    68fe:	e7cb      	b.n	6898 <gatt_indicate+0x5c>
    6900:	0001563e 	.word	0x0001563e
    6904:	20003a5c 	.word	0x20003a5c
    6908:	00016801 	.word	0x00016801
    690c:	00016808 	.word	0x00016808
    6910:	00017736 	.word	0x00017736
    6914:	0001783f 	.word	0x0001783f
    6918:	0000670d 	.word	0x0000670d
    691c:	000167b9 	.word	0x000167b9
    6920:	0001772c 	.word	0x0001772c
    6924:	00017876 	.word	0x00017876

00006928 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6928:	490d      	ldr	r1, [pc, #52]	; (6960 <sc_indicate_rsp+0x38>)
    692a:	f3bf 8f5b 	dmb	ish
    692e:	f101 0350 	add.w	r3, r1, #80	; 0x50
    6932:	e853 2f00 	ldrex	r2, [r3]
    6936:	f022 0202 	bic.w	r2, r2, #2
    693a:	e843 2000 	strex	r0, r2, [r3]
    693e:	2800      	cmp	r0, #0
    6940:	d1f7      	bne.n	6932 <sc_indicate_rsp+0xa>
    6942:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6946:	f3bf 8f5b 	dmb	ish
    694a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    694c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    6950:	07db      	lsls	r3, r3, #31
    6952:	d504      	bpl.n	695e <sc_indicate_rsp+0x36>
    6954:	2200      	movs	r2, #0
    6956:	3128      	adds	r1, #40	; 0x28
    6958:	4802      	ldr	r0, [pc, #8]	; (6964 <sc_indicate_rsp+0x3c>)
    695a:	f00e ba5d 	b.w	14e18 <k_delayed_work_submit_to_queue>
    695e:	4770      	bx	lr
    6960:	2000058c 	.word	0x2000058c
    6964:	20001988 	.word	0x20001988

00006968 <read_appearance>:
{
    6968:	b513      	push	{r0, r1, r4, lr}
    696a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    696e:	4610      	mov	r0, r2
	if (offset > value_len) {
    6970:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6972:	f04f 0200 	mov.w	r2, #0
    6976:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    697a:	d80d      	bhi.n	6998 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    697c:	f1c1 0402 	rsb	r4, r1, #2
    6980:	429c      	cmp	r4, r3
    6982:	bfa8      	it	ge
    6984:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6986:	f10d 0306 	add.w	r3, sp, #6
    698a:	4622      	mov	r2, r4
    698c:	4419      	add	r1, r3
    698e:	f7fb fa49 	bl	1e24 <memcpy>
}
    6992:	4620      	mov	r0, r4
    6994:	b002      	add	sp, #8
    6996:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6998:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    699c:	e7f9      	b.n	6992 <read_appearance+0x2a>
	...

000069a0 <sc_indicate.constprop.19>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    69a0:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    69a2:	4b17      	ldr	r3, [pc, #92]	; (6a00 <sc_indicate.constprop.19+0x60>)
    69a4:	f3bf 8f5b 	dmb	ish
    69a8:	f103 0250 	add.w	r2, r3, #80	; 0x50
    69ac:	e852 4f00 	ldrex	r4, [r2]
    69b0:	f044 0e01 	orr.w	lr, r4, #1
    69b4:	e842 ec00 	strex	ip, lr, [r2]
    69b8:	f1bc 0f00 	cmp.w	ip, #0
    69bc:	d1f6      	bne.n	69ac <sc_indicate.constprop.19+0xc>
    69be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    69c2:	07e2      	lsls	r2, r4, #31
    69c4:	d402      	bmi.n	69cc <sc_indicate.constprop.19+0x2c>
		sc->start = start;
    69c6:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    69c8:	84d9      	strh	r1, [r3, #38]	; 0x26
    69ca:	e00a      	b.n	69e2 <sc_indicate.constprop.19+0x42>
	if (new_start >= *start && new_end <= *end) {
    69cc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    69ce:	4282      	cmp	r2, r0
    69d0:	d803      	bhi.n	69da <sc_indicate.constprop.19+0x3a>
    69d2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    69d4:	428a      	cmp	r2, r1
    69d6:	d301      	bcc.n	69dc <sc_indicate.constprop.19+0x3c>
    69d8:	bd10      	pop	{r4, pc}
		*start = new_start;
    69da:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    69dc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    69de:	428a      	cmp	r2, r1
    69e0:	d3f2      	bcc.n	69c8 <sc_indicate.constprop.19+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    69e2:	f3bf 8f5b 	dmb	ish
    69e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    69e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    69ec:	079b      	lsls	r3, r3, #30
    69ee:	d406      	bmi.n	69fe <sc_indicate.constprop.19+0x5e>
    69f0:	220a      	movs	r2, #10
    69f2:	4904      	ldr	r1, [pc, #16]	; (6a04 <sc_indicate.constprop.19+0x64>)
    69f4:	4804      	ldr	r0, [pc, #16]	; (6a08 <sc_indicate.constprop.19+0x68>)
}
    69f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69fa:	f00e ba0d 	b.w	14e18 <k_delayed_work_submit_to_queue>
    69fe:	bd10      	pop	{r4, pc}
    6a00:	2000058c 	.word	0x2000058c
    6a04:	200005b4 	.word	0x200005b4
    6a08:	20001988 	.word	0x20001988

00006a0c <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a0c:	6882      	ldr	r2, [r0, #8]
    6a0e:	4b19      	ldr	r3, [pc, #100]	; (6a74 <connected_cb+0x68>)
    6a10:	429a      	cmp	r2, r3
{
    6a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a16:	4607      	mov	r7, r0
    6a18:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a1a:	d125      	bne.n	6a68 <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6a1c:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    6a1e:	2600      	movs	r6, #0
    6a20:	686b      	ldr	r3, [r5, #4]
    6a22:	429e      	cmp	r6, r3
    6a24:	d220      	bcs.n	6a68 <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6a26:	6829      	ldr	r1, [r5, #0]
    6a28:	ea4f 1806 	mov.w	r8, r6, lsl #4
    6a2c:	4441      	add	r1, r8
    6a2e:	4620      	mov	r0, r4
    6a30:	f7fd fd44 	bl	44bc <bt_conn_addr_le_cmp>
    6a34:	b9d8      	cbnz	r0, 6a6e <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    6a36:	682b      	ldr	r3, [r5, #0]
    6a38:	4443      	add	r3, r8
    6a3a:	891b      	ldrh	r3, [r3, #8]
    6a3c:	b1bb      	cbz	r3, 6a6e <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    6a3e:	4629      	mov	r1, r5
    6a40:	4638      	mov	r0, r7
    6a42:	f7ff fe4a 	bl	66da <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    6a46:	682c      	ldr	r4, [r5, #0]
    6a48:	4b0b      	ldr	r3, [pc, #44]	; (6a78 <connected_cb+0x6c>)
    6a4a:	429c      	cmp	r4, r3
    6a4c:	d10c      	bne.n	6a68 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    6a4e:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    6a50:	89a0      	ldrh	r0, [r4, #12]
    6a52:	89e1      	ldrh	r1, [r4, #14]
    6a54:	b900      	cbnz	r0, 6a58 <connected_cb+0x4c>
    6a56:	b139      	cbz	r1, 6a68 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    6a58:	f7ff ffa2 	bl	69a0 <sc_indicate.constprop.19>
	memset(cfg->data, 0, sizeof(cfg->data));
    6a5c:	2204      	movs	r2, #4
    6a5e:	2100      	movs	r1, #0
    6a60:	f104 000c 	add.w	r0, r4, #12
    6a64:	f7fb fa0a 	bl	1e7c <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    6a68:	2001      	movs	r0, #1
    6a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    6a6e:	3601      	adds	r6, #1
    6a70:	e7d6      	b.n	6a20 <connected_cb+0x14>
    6a72:	bf00      	nop
    6a74:	00006c21 	.word	0x00006c21
    6a78:	200005e0 	.word	0x200005e0

00006a7c <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a7c:	6882      	ldr	r2, [r0, #8]
    6a7e:	4b27      	ldr	r3, [pc, #156]	; (6b1c <disconnected_cb+0xa0>)
    6a80:	429a      	cmp	r2, r3
{
    6a82:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6a86:	4680      	mov	r8, r0
    6a88:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a8a:	d127      	bne.n	6adc <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6a8c:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    6a8e:	8923      	ldrh	r3, [r4, #8]
    6a90:	b323      	cbz	r3, 6adc <disconnected_cb+0x60>
    6a92:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6a94:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    6a98:	6863      	ldr	r3, [r4, #4]
    6a9a:	429e      	cmp	r6, r3
    6a9c:	d30b      	bcc.n	6ab6 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    6a9e:	2202      	movs	r2, #2
    6aa0:	2100      	movs	r1, #0
    6aa2:	f104 0008 	add.w	r0, r4, #8
    6aa6:	f7fb f9e9 	bl	1e7c <memset>
	if (ccc->cfg_changed) {
    6aaa:	68e3      	ldr	r3, [r4, #12]
    6aac:	b1b3      	cbz	r3, 6adc <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    6aae:	8921      	ldrh	r1, [r4, #8]
    6ab0:	4640      	mov	r0, r8
    6ab2:	4798      	blx	r3
    6ab4:	e012      	b.n	6adc <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    6ab6:	6821      	ldr	r1, [r4, #0]
    6ab8:	0135      	lsls	r5, r6, #4
    6aba:	4429      	add	r1, r5
    6abc:	890b      	ldrh	r3, [r1, #8]
    6abe:	b19b      	cbz	r3, 6ae8 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6ac0:	4648      	mov	r0, r9
    6ac2:	f7fd fcfb 	bl	44bc <bt_conn_addr_le_cmp>
    6ac6:	b188      	cbz	r0, 6aec <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6ac8:	6820      	ldr	r0, [r4, #0]
    6aca:	4428      	add	r0, r5
    6acc:	f7fd fd5a 	bl	4584 <bt_conn_lookup_addr_le>
			if (tmp) {
    6ad0:	b150      	cbz	r0, 6ae8 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    6ad2:	7a43      	ldrb	r3, [r0, #9]
    6ad4:	2b03      	cmp	r3, #3
    6ad6:	d105      	bne.n	6ae4 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    6ad8:	f7fd fd8a 	bl	45f0 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    6adc:	2001      	movs	r0, #1
    6ade:	b002      	add	sp, #8
    6ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6ae4:	f7fd fd84 	bl	45f0 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    6ae8:	3601      	adds	r6, #1
    6aea:	e7d5      	b.n	6a98 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6aec:	4650      	mov	r0, sl
    6aee:	f7fd f929 	bl	3d44 <bt_addr_le_is_bonded>
    6af2:	4607      	mov	r7, r0
    6af4:	6820      	ldr	r0, [r4, #0]
    6af6:	b95f      	cbnz	r7, 6b10 <disconnected_cb+0x94>
    6af8:	4428      	add	r0, r5
    6afa:	2207      	movs	r2, #7
    6afc:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    6afe:	9700      	str	r7, [sp, #0]
    6b00:	f8cd 7003 	str.w	r7, [sp, #3]
    6b04:	f7fb f98e 	bl	1e24 <memcpy>
				ccc->cfg[i].value = 0;
    6b08:	6823      	ldr	r3, [r4, #0]
    6b0a:	441d      	add	r5, r3
    6b0c:	812f      	strh	r7, [r5, #8]
    6b0e:	e7eb      	b.n	6ae8 <disconnected_cb+0x6c>
    6b10:	2207      	movs	r2, #7
    6b12:	4651      	mov	r1, sl
    6b14:	4428      	add	r0, r5
    6b16:	f7fb f985 	bl	1e24 <memcpy>
    6b1a:	e7e5      	b.n	6ae8 <disconnected_cb+0x6c>
    6b1c:	00006c21 	.word	0x00006c21

00006b20 <read_name>:
{
    6b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    6b24:	4e0d      	ldr	r6, [pc, #52]	; (6b5c <read_name+0x3c>)
{
    6b26:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    6b2a:	4630      	mov	r0, r6
{
    6b2c:	4698      	mov	r8, r3
    6b2e:	4617      	mov	r7, r2
				 strlen(gap_name));
    6b30:	f7fb f94e 	bl	1dd0 <strlen>
	if (offset > value_len) {
    6b34:	b283      	uxth	r3, r0
    6b36:	42ab      	cmp	r3, r5
    6b38:	d30d      	bcc.n	6b56 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    6b3a:	1b5c      	subs	r4, r3, r5
    6b3c:	4544      	cmp	r4, r8
    6b3e:	4623      	mov	r3, r4
    6b40:	bfa8      	it	ge
    6b42:	4643      	movge	r3, r8
    6b44:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6b46:	4622      	mov	r2, r4
    6b48:	1971      	adds	r1, r6, r5
    6b4a:	4638      	mov	r0, r7
    6b4c:	f7fb f96a 	bl	1e24 <memcpy>
}
    6b50:	4620      	mov	r0, r4
    6b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6b56:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    6b5a:	e7f9      	b.n	6b50 <read_name+0x30>
    6b5c:	0001790a 	.word	0x0001790a

00006b60 <bt_gatt_attr_read_ccc>:
{
    6b60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6b64:	68ce      	ldr	r6, [r1, #12]
{
    6b66:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    6b6a:	4604      	mov	r4, r0
    6b6c:	4690      	mov	r8, r2
    6b6e:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    6b70:	2500      	movs	r5, #0
    6b72:	6873      	ldr	r3, [r6, #4]
    6b74:	429d      	cmp	r5, r3
    6b76:	d20e      	bcs.n	6b96 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6b78:	6831      	ldr	r1, [r6, #0]
    6b7a:	ea4f 1905 	mov.w	r9, r5, lsl #4
    6b7e:	4449      	add	r1, r9
    6b80:	4620      	mov	r0, r4
    6b82:	f7fd fc9b 	bl	44bc <bt_conn_addr_le_cmp>
    6b86:	b108      	cbz	r0, 6b8c <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    6b88:	3501      	adds	r5, #1
    6b8a:	e7f2      	b.n	6b72 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6b8c:	6832      	ldr	r2, [r6, #0]
    6b8e:	444a      	add	r2, r9
    6b90:	8913      	ldrh	r3, [r2, #8]
    6b92:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    6b96:	6873      	ldr	r3, [r6, #4]
    6b98:	429d      	cmp	r5, r3
		value = 0x0000;
    6b9a:	bf04      	itt	eq
    6b9c:	2300      	moveq	r3, #0
    6b9e:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    6ba2:	2f02      	cmp	r7, #2
    6ba4:	d80f      	bhi.n	6bc6 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    6ba6:	f1c7 0402 	rsb	r4, r7, #2
    6baa:	4554      	cmp	r4, sl
    6bac:	bfa8      	it	ge
    6bae:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    6bb0:	f10d 0306 	add.w	r3, sp, #6
    6bb4:	4622      	mov	r2, r4
    6bb6:	19d9      	adds	r1, r3, r7
    6bb8:	4640      	mov	r0, r8
    6bba:	f7fb f933 	bl	1e24 <memcpy>
}
    6bbe:	4620      	mov	r0, r4
    6bc0:	b002      	add	sp, #8
    6bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6bc6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6bca:	e7f8      	b.n	6bbe <bt_gatt_attr_read_ccc+0x5e>

00006bcc <bt_gatt_attr_read_service>:
{
    6bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    6bce:	68c9      	ldr	r1, [r1, #12]
{
    6bd0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    6bd4:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    6bd6:	780a      	ldrb	r2, [r1, #0]
    6bd8:	b992      	cbnz	r2, 6c00 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    6bda:	884a      	ldrh	r2, [r1, #2]
    6bdc:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    6be0:	2d02      	cmp	r5, #2
    6be2:	d819      	bhi.n	6c18 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6be4:	f1c5 0402 	rsb	r4, r5, #2
    6be8:	429c      	cmp	r4, r3
    6bea:	bfa8      	it	ge
    6bec:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6bee:	f10d 0306 	add.w	r3, sp, #6
    6bf2:	4622      	mov	r2, r4
    6bf4:	1959      	adds	r1, r3, r5
    6bf6:	f7fb f915 	bl	1e24 <memcpy>
}
    6bfa:	4620      	mov	r0, r4
    6bfc:	b003      	add	sp, #12
    6bfe:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    6c00:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    6c02:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    6c06:	d807      	bhi.n	6c18 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6c08:	f1c5 0410 	rsb	r4, r5, #16
    6c0c:	429c      	cmp	r4, r3
    6c0e:	bfa8      	it	ge
    6c10:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6c12:	4622      	mov	r2, r4
    6c14:	4429      	add	r1, r5
    6c16:	e7ee      	b.n	6bf6 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6c18:	f06f 0406 	mvn.w	r4, #6
    6c1c:	e7ed      	b.n	6bfa <bt_gatt_attr_read_service+0x2e>
	...

00006c20 <bt_gatt_attr_write_ccc>:
{
    6c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c24:	b087      	sub	sp, #28
    6c26:	4688      	mov	r8, r1
    6c28:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6c2c:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    6c30:	2902      	cmp	r1, #2
{
    6c32:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    6c34:	d860      	bhi.n	6cf8 <bt_gatt_attr_write_ccc+0xd8>
	if (offset + len > sizeof(u16_t)) {
    6c36:	4419      	add	r1, r3
    6c38:	2902      	cmp	r1, #2
    6c3a:	461f      	mov	r7, r3
    6c3c:	dc5f      	bgt.n	6cfe <bt_gatt_attr_write_ccc+0xde>
	return ((u16_t)src[1] << 8) | src[0];
    6c3e:	7853      	ldrb	r3, [r2, #1]
    6c40:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    6c42:	2400      	movs	r4, #0
    6c44:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    6c48:	686b      	ldr	r3, [r5, #4]
    6c4a:	429c      	cmp	r4, r3
    6c4c:	d206      	bcs.n	6c5c <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6c4e:	6829      	ldr	r1, [r5, #0]
    6c50:	4648      	mov	r0, r9
    6c52:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    6c56:	f7fd fc31 	bl	44bc <bt_conn_addr_le_cmp>
    6c5a:	b9b8      	cbnz	r0, 6c8c <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    6c5c:	686b      	ldr	r3, [r5, #4]
    6c5e:	429c      	cmp	r4, r3
    6c60:	d130      	bne.n	6cc4 <bt_gatt_attr_write_ccc+0xa4>
		if (!value) {
    6c62:	b35e      	cbz	r6, 6cbc <bt_gatt_attr_write_ccc+0x9c>
    6c64:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6c66:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    6c68:	686b      	ldr	r3, [r5, #4]
    6c6a:	429c      	cmp	r4, r3
    6c6c:	d217      	bcs.n	6c9e <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6c6e:	6828      	ldr	r0, [r5, #0]
    6c70:	f8cd a008 	str.w	sl, [sp, #8]
    6c74:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    6c78:	2207      	movs	r2, #7
    6c7a:	a902      	add	r1, sp, #8
    6c7c:	4458      	add	r0, fp
    6c7e:	f8cd a00b 	str.w	sl, [sp, #11]
    6c82:	f7fb f8ba 	bl	1dfa <memcmp>
    6c86:	b118      	cbz	r0, 6c90 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    6c88:	3401      	adds	r4, #1
    6c8a:	e7ed      	b.n	6c68 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    6c8c:	3401      	adds	r4, #1
    6c8e:	e7db      	b.n	6c48 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    6c90:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    6c92:	2207      	movs	r2, #7
    6c94:	f109 0144 	add.w	r1, r9, #68	; 0x44
    6c98:	4458      	add	r0, fp
    6c9a:	f7fb f8c3 	bl	1e24 <memcpy>
		if (i == ccc->cfg_len) {
    6c9e:	686b      	ldr	r3, [r5, #4]
    6ca0:	429c      	cmp	r4, r3
    6ca2:	d10f      	bne.n	6cc4 <bt_gatt_attr_write_ccc+0xa4>
			BT_WARN("No space to store CCC cfg");
    6ca4:	4b17      	ldr	r3, [pc, #92]	; (6d04 <bt_gatt_attr_write_ccc+0xe4>)
    6ca6:	9301      	str	r3, [sp, #4]
    6ca8:	9300      	str	r3, [sp, #0]
    6caa:	4b17      	ldr	r3, [pc, #92]	; (6d08 <bt_gatt_attr_write_ccc+0xe8>)
    6cac:	4a17      	ldr	r2, [pc, #92]	; (6d0c <bt_gatt_attr_write_ccc+0xec>)
    6cae:	681c      	ldr	r4, [r3, #0]
    6cb0:	4917      	ldr	r1, [pc, #92]	; (6d10 <bt_gatt_attr_write_ccc+0xf0>)
    6cb2:	4b18      	ldr	r3, [pc, #96]	; (6d14 <bt_gatt_attr_write_ccc+0xf4>)
    6cb4:	4818      	ldr	r0, [pc, #96]	; (6d18 <bt_gatt_attr_write_ccc+0xf8>)
    6cb6:	47a0      	blx	r4
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6cb8:	f06f 0710 	mvn.w	r7, #16
}
    6cbc:	4638      	mov	r0, r7
    6cbe:	b007      	add	sp, #28
    6cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    6cc4:	682b      	ldr	r3, [r5, #0]
    6cc6:	0124      	lsls	r4, r4, #4
    6cc8:	4423      	add	r3, r4
    6cca:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    6ccc:	892b      	ldrh	r3, [r5, #8]
    6cce:	42b3      	cmp	r3, r6
    6cd0:	d003      	beq.n	6cda <bt_gatt_attr_write_ccc+0xba>
		gatt_ccc_changed(attr, ccc);
    6cd2:	4629      	mov	r1, r5
    6cd4:	4640      	mov	r0, r8
    6cd6:	f7ff fd00 	bl	66da <gatt_ccc_changed>
	if (!value) {
    6cda:	2e00      	cmp	r6, #0
    6cdc:	d1ee      	bne.n	6cbc <bt_gatt_attr_write_ccc+0x9c>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    6cde:	6828      	ldr	r0, [r5, #0]
    6ce0:	9604      	str	r6, [sp, #16]
    6ce2:	4420      	add	r0, r4
    6ce4:	2207      	movs	r2, #7
    6ce6:	a904      	add	r1, sp, #16
    6ce8:	f8cd 6013 	str.w	r6, [sp, #19]
    6cec:	f7fb f89a 	bl	1e24 <memcpy>
		ccc->cfg[i].value = 0;
    6cf0:	682b      	ldr	r3, [r5, #0]
    6cf2:	441c      	add	r4, r3
    6cf4:	8126      	strh	r6, [r4, #8]
    6cf6:	e7e1      	b.n	6cbc <bt_gatt_attr_write_ccc+0x9c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6cf8:	f06f 0706 	mvn.w	r7, #6
    6cfc:	e7de      	b.n	6cbc <bt_gatt_attr_write_ccc+0x9c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6cfe:	f06f 070c 	mvn.w	r7, #12
    6d02:	e7db      	b.n	6cbc <bt_gatt_attr_write_ccc+0x9c>
    6d04:	0001563e 	.word	0x0001563e
    6d08:	20003a5c 	.word	0x20003a5c
    6d0c:	00016801 	.word	0x00016801
    6d10:	00016808 	.word	0x00016808
    6d14:	00017709 	.word	0x00017709
    6d18:	0001777a 	.word	0x0001777a

00006d1c <notify_cb>:
{
    6d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6d20:	f642 1302 	movw	r3, #10498	; 0x2902
{
    6d24:	4605      	mov	r5, r0
    6d26:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6d28:	2400      	movs	r4, #0
    6d2a:	4669      	mov	r1, sp
    6d2c:	6800      	ldr	r0, [r0, #0]
    6d2e:	f88d 4000 	strb.w	r4, [sp]
    6d32:	f8ad 3002 	strh.w	r3, [sp, #2]
    6d36:	f7fb f9f3 	bl	2120 <bt_uuid_cmp>
    6d3a:	b178      	cbz	r0, 6d5c <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    6d3c:	f642 0303 	movw	r3, #10243	; 0x2803
    6d40:	6828      	ldr	r0, [r5, #0]
    6d42:	f88d 4004 	strb.w	r4, [sp, #4]
    6d46:	a901      	add	r1, sp, #4
    6d48:	f8ad 3006 	strh.w	r3, [sp, #6]
    6d4c:	f7fb f9e8 	bl	2120 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    6d50:	1b00      	subs	r0, r0, r4
    6d52:	bf18      	it	ne
    6d54:	2001      	movne	r0, #1
}
    6d56:	b003      	add	sp, #12
    6d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    6d5c:	68aa      	ldr	r2, [r5, #8]
    6d5e:	4b2b      	ldr	r3, [pc, #172]	; (6e0c <notify_cb+0xf0>)
    6d60:	429a      	cmp	r2, r3
    6d62:	d001      	beq.n	6d68 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    6d64:	2001      	movs	r0, #1
    6d66:	e7f6      	b.n	6d56 <notify_cb+0x3a>
	ccc = attr->user_data;
    6d68:	68ef      	ldr	r7, [r5, #12]
    6d6a:	4d29      	ldr	r5, [pc, #164]	; (6e10 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    6d6c:	4604      	mov	r4, r0
    6d6e:	46a8      	mov	r8, r5
    6d70:	4681      	mov	r9, r0
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	429c      	cmp	r4, r3
    6d76:	d2f5      	bcs.n	6d64 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    6d78:	6838      	ldr	r0, [r7, #0]
    6d7a:	88b3      	ldrh	r3, [r6, #4]
    6d7c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6d80:	8902      	ldrh	r2, [r0, #8]
    6d82:	429a      	cmp	r2, r3
    6d84:	d114      	bne.n	6db0 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6d86:	f7fd fbfd 	bl	4584 <bt_conn_lookup_addr_le>
		if (!conn) {
    6d8a:	4683      	mov	fp, r0
    6d8c:	b9f8      	cbnz	r0, 6dce <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    6d8e:	683b      	ldr	r3, [r7, #0]
    6d90:	4543      	cmp	r3, r8
    6d92:	d10d      	bne.n	6db0 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    6d94:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    6d96:	a801      	add	r0, sp, #4
    6d98:	8c1a      	ldrh	r2, [r3, #32]
    6d9a:	69d9      	ldr	r1, [r3, #28]
    6d9c:	f7fb f842 	bl	1e24 <memcpy>
	if (!stored->start && !stored->end) {
    6da0:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    6da2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6da6:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    6da8:	b928      	cbnz	r0, 6db6 <notify_cb+0x9a>
    6daa:	b942      	cbnz	r2, 6dbe <notify_cb+0xa2>
		*stored = data;
    6dac:	9801      	ldr	r0, [sp, #4]
    6dae:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6db0:	3401      	adds	r4, #1
    6db2:	3510      	adds	r5, #16
    6db4:	e7dd      	b.n	6d72 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    6db6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    6dba:	4281      	cmp	r1, r0
    6dbc:	d305      	bcc.n	6dca <notify_cb+0xae>
    6dbe:	429a      	cmp	r2, r3
    6dc0:	d2f6      	bcs.n	6db0 <notify_cb+0x94>
	if (*end < new_end) {
    6dc2:	429a      	cmp	r2, r3
    6dc4:	d2f4      	bcs.n	6db0 <notify_cb+0x94>
		*end = new_end;
    6dc6:	81eb      	strh	r3, [r5, #14]
    6dc8:	e7f2      	b.n	6db0 <notify_cb+0x94>
		*start = new_start;
    6dca:	81a9      	strh	r1, [r5, #12]
    6dcc:	e7f9      	b.n	6dc2 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6dce:	7a43      	ldrb	r3, [r0, #9]
    6dd0:	2b03      	cmp	r3, #3
    6dd2:	d002      	beq.n	6dda <notify_cb+0xbe>
			bt_conn_unref(conn);
    6dd4:	f7fd fc0c 	bl	45f0 <bt_conn_unref>
    6dd8:	e7ea      	b.n	6db0 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6dda:	88b3      	ldrh	r3, [r6, #4]
    6ddc:	2b02      	cmp	r3, #2
    6dde:	d10c      	bne.n	6dfa <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    6de0:	6971      	ldr	r1, [r6, #20]
    6de2:	f7ff fd2b 	bl	683c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    6de6:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    6de8:	4658      	mov	r0, fp
    6dea:	f7fd fc01 	bl	45f0 <bt_conn_unref>
		if (err < 0) {
    6dee:	f1ba 0f00 	cmp.w	sl, #0
    6df2:	db09      	blt.n	6e08 <notify_cb+0xec>
		data->err = 0;
    6df4:	f8c6 9000 	str.w	r9, [r6]
    6df8:	e7da      	b.n	6db0 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    6dfa:	68b1      	ldr	r1, [r6, #8]
    6dfc:	8a33      	ldrh	r3, [r6, #16]
    6dfe:	68f2      	ldr	r2, [r6, #12]
    6e00:	8a09      	ldrh	r1, [r1, #16]
    6e02:	f7ff fcd9 	bl	67b8 <gatt_notify>
    6e06:	e7ee      	b.n	6de6 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6e08:	2000      	movs	r0, #0
    6e0a:	e7a4      	b.n	6d56 <notify_cb+0x3a>
    6e0c:	00006c21 	.word	0x00006c21
    6e10:	200005e0 	.word	0x200005e0

00006e14 <bt_gatt_init>:
{
    6e14:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    6e16:	4806      	ldr	r0, [pc, #24]	; (6e30 <bt_gatt_init+0x1c>)
    6e18:	f7ff fc80 	bl	671c <gatt_register>
	gatt_register(&gatt_svc);
    6e1c:	4805      	ldr	r0, [pc, #20]	; (6e34 <bt_gatt_init+0x20>)
    6e1e:	f7ff fc7d 	bl	671c <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6e22:	4905      	ldr	r1, [pc, #20]	; (6e38 <bt_gatt_init+0x24>)
    6e24:	4805      	ldr	r0, [pc, #20]	; (6e3c <bt_gatt_init+0x28>)
}
    6e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6e2a:	f00d bf81 	b.w	14d30 <k_delayed_work_init>
    6e2e:	bf00      	nop
    6e30:	20003c9c 	.word	0x20003c9c
    6e34:	20003cf8 	.word	0x20003cf8
    6e38:	00006fe9 	.word	0x00006fe9
    6e3c:	200005b4 	.word	0x200005b4

00006e40 <bt_gatt_foreach_attr>:
{
    6e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e44:	4699      	mov	r9, r3
    6e46:	4b12      	ldr	r3, [pc, #72]	; (6e90 <bt_gatt_foreach_attr+0x50>)
    6e48:	681c      	ldr	r4, [r3, #0]
    6e4a:	4606      	mov	r6, r0
    6e4c:	460f      	mov	r7, r1
    6e4e:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6e50:	b1dc      	cbz	r4, 6e8a <bt_gatt_foreach_attr+0x4a>
    6e52:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6e54:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6e58:	b1bc      	cbz	r4, 6e8a <bt_gatt_foreach_attr+0x4a>
    6e5a:	2500      	movs	r5, #0
    6e5c:	e006      	b.n	6e6c <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6e5e:	6820      	ldr	r0, [r4, #0]
    6e60:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    6e64:	8a03      	ldrh	r3, [r0, #16]
    6e66:	42b3      	cmp	r3, r6
    6e68:	d207      	bcs.n	6e7a <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    6e6a:	3501      	adds	r5, #1
    6e6c:	6863      	ldr	r3, [r4, #4]
    6e6e:	42ab      	cmp	r3, r5
    6e70:	d8f5      	bhi.n	6e5e <bt_gatt_foreach_attr+0x1e>
	return node->next;
    6e72:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6e74:	b14c      	cbz	r4, 6e8a <bt_gatt_foreach_attr+0x4a>
    6e76:	3c08      	subs	r4, #8
    6e78:	e7ee      	b.n	6e58 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    6e7a:	42bb      	cmp	r3, r7
    6e7c:	d8f5      	bhi.n	6e6a <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6e7e:	4649      	mov	r1, r9
    6e80:	47c0      	blx	r8
    6e82:	2800      	cmp	r0, #0
    6e84:	d1f1      	bne.n	6e6a <bt_gatt_foreach_attr+0x2a>
    6e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e8e:	bf00      	nop
    6e90:	20000584 	.word	0x20000584

00006e94 <bt_gatt_attr_next>:
{
    6e94:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6e96:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6e98:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6e9a:	3101      	adds	r1, #1
    6e9c:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6e9e:	2200      	movs	r2, #0
    6ea0:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6ea4:	4608      	mov	r0, r1
    6ea6:	4a03      	ldr	r2, [pc, #12]	; (6eb4 <bt_gatt_attr_next+0x20>)
    6ea8:	f7ff ffca 	bl	6e40 <bt_gatt_foreach_attr>
}
    6eac:	9801      	ldr	r0, [sp, #4]
    6eae:	b003      	add	sp, #12
    6eb0:	f85d fb04 	ldr.w	pc, [sp], #4
    6eb4:	000066d5 	.word	0x000066d5

00006eb8 <bt_gatt_attr_read_chrc>:
{
    6eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6ebc:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6ec0:	b08b      	sub	sp, #44	; 0x2c
    6ec2:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6ec4:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6ec6:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    6eca:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    6ece:	f88d 3014 	strb.w	r3, [sp, #20]
{
    6ed2:	4688      	mov	r8, r1
    6ed4:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6ed6:	f7ff ffdd 	bl	6e94 <bt_gatt_attr_next>
	if (!next) {
    6eda:	4605      	mov	r5, r0
    6edc:	bb50      	cbnz	r0, 6f34 <bt_gatt_attr_read_chrc+0x7c>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6ede:	4b1d      	ldr	r3, [pc, #116]	; (6f54 <bt_gatt_attr_read_chrc+0x9c>)
    6ee0:	9302      	str	r3, [sp, #8]
    6ee2:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    6ee6:	9300      	str	r3, [sp, #0]
    6ee8:	4b1b      	ldr	r3, [pc, #108]	; (6f58 <bt_gatt_attr_read_chrc+0xa0>)
    6eea:	9201      	str	r2, [sp, #4]
    6eec:	f8d3 8000 	ldr.w	r8, [r3]
    6ef0:	4a1a      	ldr	r2, [pc, #104]	; (6f5c <bt_gatt_attr_read_chrc+0xa4>)
    6ef2:	4b1b      	ldr	r3, [pc, #108]	; (6f60 <bt_gatt_attr_read_chrc+0xa8>)
    6ef4:	491b      	ldr	r1, [pc, #108]	; (6f64 <bt_gatt_attr_read_chrc+0xac>)
    6ef6:	481c      	ldr	r0, [pc, #112]	; (6f68 <bt_gatt_attr_read_chrc+0xb0>)
    6ef8:	47c0      	blx	r8
		pdu.value_handle = 0x0000;
    6efa:	f88d 5015 	strb.w	r5, [sp, #21]
    6efe:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6f02:	f8d9 1000 	ldr.w	r1, [r9]
    6f06:	780b      	ldrb	r3, [r1, #0]
    6f08:	b9c3      	cbnz	r3, 6f3c <bt_gatt_attr_read_chrc+0x84>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6f0a:	884b      	ldrh	r3, [r1, #2]
    6f0c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    6f10:	2305      	movs	r3, #5
	if (offset > value_len) {
    6f12:	42b3      	cmp	r3, r6
    6f14:	d31a      	bcc.n	6f4c <bt_gatt_attr_read_chrc+0x94>
	len = min(buf_len, value_len - offset);
    6f16:	1b9b      	subs	r3, r3, r6
    6f18:	42a3      	cmp	r3, r4
    6f1a:	bfa8      	it	ge
    6f1c:	4623      	movge	r3, r4
    6f1e:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6f20:	ab05      	add	r3, sp, #20
    6f22:	4622      	mov	r2, r4
    6f24:	1999      	adds	r1, r3, r6
    6f26:	4638      	mov	r0, r7
    6f28:	f7fa ff7c 	bl	1e24 <memcpy>
}
    6f2c:	4620      	mov	r0, r4
    6f2e:	b00b      	add	sp, #44	; 0x2c
    6f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6f34:	8a03      	ldrh	r3, [r0, #16]
    6f36:	f8ad 3015 	strh.w	r3, [sp, #21]
    6f3a:	e7e2      	b.n	6f02 <bt_gatt_attr_read_chrc+0x4a>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6f3c:	2210      	movs	r2, #16
    6f3e:	3101      	adds	r1, #1
    6f40:	f10d 0017 	add.w	r0, sp, #23
    6f44:	f7fa ff6e 	bl	1e24 <memcpy>
		value_len += 16;
    6f48:	2313      	movs	r3, #19
    6f4a:	e7e2      	b.n	6f12 <bt_gatt_attr_read_chrc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6f4c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6f50:	e7ec      	b.n	6f2c <bt_gatt_attr_read_chrc+0x74>
    6f52:	bf00      	nop
    6f54:	0001563e 	.word	0x0001563e
    6f58:	20003a5c 	.word	0x20003a5c
    6f5c:	00016801 	.word	0x00016801
    6f60:	000176f2 	.word	0x000176f2
    6f64:	00016808 	.word	0x00016808
    6f68:	00017744 	.word	0x00017744

00006f6c <bt_gatt_indicate>:
{
    6f6c:	b530      	push	{r4, r5, lr}
    6f6e:	b087      	sub	sp, #28
	__ASSERT(params, "invalid parameters\n");
    6f70:	b951      	cbnz	r1, 6f88 <bt_gatt_indicate+0x1c>
    6f72:	f240 3357 	movw	r3, #855	; 0x357
    6f76:	4a16      	ldr	r2, [pc, #88]	; (6fd0 <bt_gatt_indicate+0x64>)
    6f78:	4916      	ldr	r1, [pc, #88]	; (6fd4 <bt_gatt_indicate+0x68>)
    6f7a:	4817      	ldr	r0, [pc, #92]	; (6fd8 <bt_gatt_indicate+0x6c>)
    6f7c:	f7fa f806 	bl	f8c <printk>
    6f80:	4816      	ldr	r0, [pc, #88]	; (6fdc <bt_gatt_indicate+0x70>)
    6f82:	f7fa f803 	bl	f8c <printk>
    6f86:	e7fe      	b.n	6f86 <bt_gatt_indicate+0x1a>
	__ASSERT(params->attr && params->attr->handle, "invalid parameters\n");
    6f88:	694a      	ldr	r2, [r1, #20]
    6f8a:	b10a      	cbz	r2, 6f90 <bt_gatt_indicate+0x24>
    6f8c:	8a14      	ldrh	r4, [r2, #16]
    6f8e:	b954      	cbnz	r4, 6fa6 <bt_gatt_indicate+0x3a>
    6f90:	f44f 7356 	mov.w	r3, #856	; 0x358
    6f94:	4a0e      	ldr	r2, [pc, #56]	; (6fd0 <bt_gatt_indicate+0x64>)
    6f96:	4912      	ldr	r1, [pc, #72]	; (6fe0 <bt_gatt_indicate+0x74>)
    6f98:	480f      	ldr	r0, [pc, #60]	; (6fd8 <bt_gatt_indicate+0x6c>)
    6f9a:	f7f9 fff7 	bl	f8c <printk>
    6f9e:	480f      	ldr	r0, [pc, #60]	; (6fdc <bt_gatt_indicate+0x70>)
    6fa0:	f7f9 fff4 	bl	f8c <printk>
    6fa4:	e7fe      	b.n	6fa4 <bt_gatt_indicate+0x38>
	if (conn) {
    6fa6:	b118      	cbz	r0, 6fb0 <bt_gatt_indicate+0x44>
		return gatt_indicate(conn, params);
    6fa8:	f7ff fc48 	bl	683c <gatt_indicate>
}
    6fac:	b007      	add	sp, #28
    6fae:	bd30      	pop	{r4, r5, pc}
	nfy.err = -ENOTCONN;
    6fb0:	f06f 0238 	mvn.w	r2, #56	; 0x38
    6fb4:	9200      	str	r2, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6fb6:	2202      	movs	r2, #2
    6fb8:	f8ad 2004 	strh.w	r2, [sp, #4]
	nfy.params = params;
    6fbc:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6fbe:	4620      	mov	r0, r4
    6fc0:	466b      	mov	r3, sp
    6fc2:	4a08      	ldr	r2, [pc, #32]	; (6fe4 <bt_gatt_indicate+0x78>)
    6fc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6fc8:	f7ff ff3a 	bl	6e40 <bt_gatt_foreach_attr>
	return nfy.err;
    6fcc:	9800      	ldr	r0, [sp, #0]
    6fce:	e7ed      	b.n	6fac <bt_gatt_indicate+0x40>
    6fd0:	000177d0 	.word	0x000177d0
    6fd4:	000177a4 	.word	0x000177a4
    6fd8:	00015620 	.word	0x00015620
    6fdc:	00017810 	.word	0x00017810
    6fe0:	000177ab 	.word	0x000177ab
    6fe4:	00006d1d 	.word	0x00006d1d

00006fe8 <sc_process>:
{
    6fe8:	b513      	push	{r0, r1, r4, lr}
    6fea:	4603      	mov	r3, r0
    6fec:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    6ff0:	f1a0 0128 	sub.w	r1, r0, #40	; 0x28
    6ff4:	f100 0428 	add.w	r4, r0, #40	; 0x28
    6ff8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6ffa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6ffe:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7002:	b148      	cbz	r0, 7018 <sc_process+0x30>
    7004:	23af      	movs	r3, #175	; 0xaf
    7006:	4a1f      	ldr	r2, [pc, #124]	; (7084 <sc_process+0x9c>)
    7008:	491f      	ldr	r1, [pc, #124]	; (7088 <sc_process+0xa0>)
    700a:	4820      	ldr	r0, [pc, #128]	; (708c <sc_process+0xa4>)
    700c:	f7f9 ffbe 	bl	f8c <printk>
    7010:	481f      	ldr	r0, [pc, #124]	; (7090 <sc_process+0xa8>)
    7012:	f7f9 ffbb 	bl	f8c <printk>
    7016:	e7fe      	b.n	7016 <sc_process+0x2e>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    7018:	f833 2c04 	ldrh.w	r2, [r3, #-4]
    701c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    7020:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    7024:	f8ad 2006 	strh.w	r2, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7028:	f3bf 8f5b 	dmb	ish
    702c:	e854 2f00 	ldrex	r2, [r4]
    7030:	f022 0201 	bic.w	r2, r2, #1
    7034:	e844 2e00 	strex	lr, r2, [r4]
    7038:	f1be 0f00 	cmp.w	lr, #0
    703c:	d1f6      	bne.n	702c <sc_process+0x44>
    703e:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &gatt_attrs[2];
    7042:	4a14      	ldr	r2, [pc, #80]	; (7094 <sc_process+0xac>)
    7044:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    7048:	4a13      	ldr	r2, [pc, #76]	; (7098 <sc_process+0xb0>)
    704a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    704e:	aa01      	add	r2, sp, #4
    7050:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    7054:	2204      	movs	r2, #4
	sc->start = 0;
    7056:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    705a:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    705e:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    7062:	f7ff ff83 	bl	6f6c <bt_gatt_indicate>
    7066:	b958      	cbnz	r0, 7080 <sc_process+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7068:	f3bf 8f5b 	dmb	ish
    706c:	e854 3f00 	ldrex	r3, [r4]
    7070:	f043 0302 	orr.w	r3, r3, #2
    7074:	e844 3200 	strex	r2, r3, [r4]
    7078:	2a00      	cmp	r2, #0
    707a:	d1f7      	bne.n	706c <sc_process+0x84>
    707c:	f3bf 8f5b 	dmb	ish
}
    7080:	b002      	add	sp, #8
    7082:	bd10      	pop	{r4, pc}
    7084:	000177d0 	.word	0x000177d0
    7088:	00017911 	.word	0x00017911
    708c:	00015620 	.word	0x00015620
    7090:	00017942 	.word	0x00017942
    7094:	20003cd0 	.word	0x20003cd0
    7098:	00006929 	.word	0x00006929

0000709c <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    709c:	4603      	mov	r3, r0
    709e:	4a03      	ldr	r2, [pc, #12]	; (70ac <bt_gatt_connected+0x10>)
    70a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70a4:	2001      	movs	r0, #1
    70a6:	f7ff becb 	b.w	6e40 <bt_gatt_foreach_attr>
    70aa:	bf00      	nop
    70ac:	00006a0d 	.word	0x00006a0d

000070b0 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    70b0:	4603      	mov	r3, r0
    70b2:	4a03      	ldr	r2, [pc, #12]	; (70c0 <bt_gatt_disconnected+0x10>)
    70b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70b8:	2001      	movs	r0, #1
    70ba:	f7ff bec1 	b.w	6e40 <bt_gatt_foreach_attr>
    70be:	bf00      	nop
    70c0:	00006a7d 	.word	0x00006a7d

000070c4 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    70c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    70c6:	4a0b      	ldr	r2, [pc, #44]	; (70f4 <bt_smp_accept+0x30>)
    70c8:	6813      	ldr	r3, [r2, #0]
    70ca:	b92b      	cbnz	r3, 70d8 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.ops = &ops;
    70cc:	480a      	ldr	r0, [pc, #40]	; (70f8 <bt_smp_accept+0x34>)
    70ce:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    70d0:	600a      	str	r2, [r1, #0]

		return 0;
    70d2:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    70d4:	b004      	add	sp, #16
    70d6:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    70d8:	4b08      	ldr	r3, [pc, #32]	; (70fc <bt_smp_accept+0x38>)
    70da:	9302      	str	r3, [sp, #8]
    70dc:	9300      	str	r3, [sp, #0]
    70de:	4b08      	ldr	r3, [pc, #32]	; (7100 <bt_smp_accept+0x3c>)
    70e0:	9001      	str	r0, [sp, #4]
    70e2:	681c      	ldr	r4, [r3, #0]
    70e4:	4807      	ldr	r0, [pc, #28]	; (7104 <bt_smp_accept+0x40>)
    70e6:	4b08      	ldr	r3, [pc, #32]	; (7108 <bt_smp_accept+0x44>)
    70e8:	4a08      	ldr	r2, [pc, #32]	; (710c <bt_smp_accept+0x48>)
    70ea:	4909      	ldr	r1, [pc, #36]	; (7110 <bt_smp_accept+0x4c>)
    70ec:	47a0      	blx	r4
	return -ENOMEM;
    70ee:	f06f 000b 	mvn.w	r0, #11
    70f2:	e7ef      	b.n	70d4 <bt_smp_accept+0x10>
    70f4:	200005f0 	.word	0x200005f0
    70f8:	20003d10 	.word	0x20003d10
    70fc:	0001563e 	.word	0x0001563e
    7100:	20003a5c 	.word	0x20003a5c
    7104:	00017969 	.word	0x00017969
    7108:	0001795b 	.word	0x0001795b
    710c:	000167b9 	.word	0x000167b9
    7110:	00016808 	.word	0x00016808

00007114 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    7114:	2100      	movs	r1, #0
{
    7116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    711a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    711c:	4608      	mov	r0, r1
    711e:	f7fe f828 	bl	5172 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7122:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    7126:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7128:	2101      	movs	r1, #1
    712a:	4630      	mov	r0, r6
    712c:	f00c f8d0 	bl	132d0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    7130:	2505      	movs	r5, #5
    7132:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7134:	2101      	movs	r1, #1
    7136:	4630      	mov	r0, r6
    7138:	f00c f8ca 	bl	132d0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    713c:	7005      	strb	r5, [r0, #0]
    713e:	4622      	mov	r2, r4
    7140:	4638      	mov	r0, r7
    7142:	2300      	movs	r3, #0
    7144:	2106      	movs	r1, #6
}
    7146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    714a:	f7fe b815 	b.w	5178 <bt_l2cap_send_cb>

0000714e <bt_smp_sign_verify>:
    714e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7152:	4770      	bx	lr

00007154 <bt_smp_init>:

int bt_smp_init(void)
{
    7154:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    7156:	4802      	ldr	r0, [pc, #8]	; (7160 <bt_smp_init+0xc>)
    7158:	f7fd ff4e 	bl	4ff8 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    715c:	2000      	movs	r0, #0
    715e:	bd08      	pop	{r3, pc}
    7160:	20003d04 	.word	0x20003d04

00007164 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    7164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    7166:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7168:	1dc3      	adds	r3, r0, #7
{
    716a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    716c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7170:	1e50      	subs	r0, r2, #1
{
    7172:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7174:	b280      	uxth	r0, r0
{
    7176:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7178:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    717a:	2100      	movs	r1, #0
    717c:	2204      	movs	r2, #4
    717e:	fb06 5000 	mla	r0, r6, r0, r5
    7182:	f7fa fe7b 	bl	1e7c <memset>
    7186:	3c02      	subs	r4, #2
    7188:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    718a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    718e:	42bc      	cmp	r4, r7
    7190:	d101      	bne.n	7196 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    7192:	b003      	add	sp, #12
    7194:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    7196:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    719a:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    719c:	2204      	movs	r2, #4
    719e:	1b80      	subs	r0, r0, r6
    71a0:	eb0d 0102 	add.w	r1, sp, r2
    71a4:	4428      	add	r0, r5
    71a6:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    71a8:	9301      	str	r3, [sp, #4]
    71aa:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    71ac:	f7fa fe3a 	bl	1e24 <memcpy>
    71b0:	e7ed      	b.n	718e <mem_init+0x2a>

000071b2 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    71b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    71b4:	6805      	ldr	r5, [r0, #0]
{
    71b6:	4606      	mov	r6, r0
	if (*mem_head) {
    71b8:	b195      	cbz	r5, 71e0 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    71ba:	1deb      	adds	r3, r5, #7
    71bc:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    71c0:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    71c2:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    71c4:	4629      	mov	r1, r5
    71c6:	eb0d 0002 	add.w	r0, sp, r2
    71ca:	f7fa fe2b 	bl	1e24 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    71ce:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    71d0:	3c01      	subs	r4, #1
    71d2:	b2a4      	uxth	r4, r4
		if (head) {
    71d4:	b11b      	cbz	r3, 71de <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    71d6:	1dda      	adds	r2, r3, #7
    71d8:	f022 0203 	bic.w	r2, r2, #3
    71dc:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    71de:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    71e0:	4628      	mov	r0, r5
    71e2:	b002      	add	sp, #8
    71e4:	bd70      	pop	{r4, r5, r6, pc}

000071e6 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    71e6:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    71e8:	680c      	ldr	r4, [r1, #0]
{
    71ea:	4606      	mov	r6, r0
    71ec:	460d      	mov	r5, r1
	if (*mem_head) {
    71ee:	b11c      	cbz	r4, 71f8 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    71f0:	1de3      	adds	r3, r4, #7
    71f2:	f023 0303 	bic.w	r3, r3, #3
    71f6:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    71f8:	2204      	movs	r2, #4
    71fa:	4629      	mov	r1, r5
    71fc:	4630      	mov	r0, r6
    71fe:	f7fa fe11 	bl	1e24 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    7202:	1df2      	adds	r2, r6, #7
    7204:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    7208:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    720a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    720c:	602e      	str	r6, [r5, #0]
    720e:	bd70      	pop	{r4, r5, r6, pc}

00007210 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    7210:	b118      	cbz	r0, 721a <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    7212:	3007      	adds	r0, #7
    7214:	f020 0003 	bic.w	r0, r0, #3
    7218:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    721a:	4770      	bx	lr

0000721c <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    721c:	fb02 0001 	mla	r0, r2, r1, r0
    7220:	4770      	bx	lr

00007222 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    7222:	1a40      	subs	r0, r0, r1
    7224:	b280      	uxth	r0, r0
}
    7226:	fbb0 f0f2 	udiv	r0, r0, r2
    722a:	4770      	bx	lr

0000722c <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    722c:	b510      	push	{r4, lr}
	src += len;
    722e:	4411      	add	r1, r2
    7230:	3801      	subs	r0, #1
	while (len--) {
    7232:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7236:	3a01      	subs	r2, #1
    7238:	b292      	uxth	r2, r2
    723a:	429a      	cmp	r2, r3
    723c:	d100      	bne.n	7240 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    723e:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    7240:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    7244:	f800 4f01 	strb.w	r4, [r0, #1]!
    7248:	e7f5      	b.n	7236 <mem_rcopy+0xa>

0000724a <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    724a:	4401      	add	r1, r0
	while (len--) {
    724c:	4288      	cmp	r0, r1
    724e:	d101      	bne.n	7254 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7250:	2000      	movs	r0, #0
    7252:	4770      	bx	lr
		if (*src++) {
    7254:	f810 3b01 	ldrb.w	r3, [r0], #1
    7258:	2b00      	cmp	r3, #0
    725a:	d0f7      	beq.n	724c <mem_nz+0x2>
			return 1;
    725c:	2001      	movs	r0, #1
}
    725e:	4770      	bx	lr

00007260 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7260:	6010      	str	r0, [r2, #0]
    7262:	6008      	str	r0, [r1, #0]

	return link;
}
    7264:	4770      	bx	lr

00007266 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    7266:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    7268:	6814      	ldr	r4, [r2, #0]
    726a:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    726c:	6814      	ldr	r4, [r2, #0]
    726e:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7270:	6010      	str	r0, [r2, #0]

	return link;
}
    7272:	bd10      	pop	{r4, pc}

00007274 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    7274:	4288      	cmp	r0, r1
    7276:	d003      	beq.n	7280 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    7278:	b11a      	cbz	r2, 7282 <memq_peek+0xe>
		*mem = head->mem;
    727a:	6843      	ldr	r3, [r0, #4]
    727c:	6013      	str	r3, [r2, #0]
    727e:	4770      	bx	lr
		return NULL;
    7280:	2000      	movs	r0, #0
	}

	return head;
}
    7282:	4770      	bx	lr

00007284 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    7284:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    7286:	4283      	cmp	r3, r0
    7288:	d009      	beq.n	729e <memq_dequeue+0x1a>
	if (mem) {
    728a:	b122      	cbz	r2, 7296 <memq_dequeue+0x12>
		*mem = head->mem;
    728c:	6858      	ldr	r0, [r3, #4]
    728e:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7290:	681a      	ldr	r2, [r3, #0]
    7292:	600a      	str	r2, [r1, #0]

	return link;
    7294:	e001      	b.n	729a <memq_dequeue+0x16>
	if (!link) {
    7296:	2b00      	cmp	r3, #0
    7298:	d1fa      	bne.n	7290 <memq_dequeue+0xc>
}
    729a:	4618      	mov	r0, r3
    729c:	4770      	bx	lr
		return NULL;
    729e:	2300      	movs	r3, #0
    72a0:	e7fb      	b.n	729a <memq_dequeue+0x16>
	...

000072a4 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    72a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    72a8:	4f11      	ldr	r7, [pc, #68]	; (72f0 <mayfly_init+0x4c>)
    72aa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 72f4 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    72ae:	2604      	movs	r6, #4
	while (callee_id--) {
    72b0:	3e01      	subs	r6, #1
    72b2:	b2f6      	uxtb	r6, r6
    72b4:	2eff      	cmp	r6, #255	; 0xff
    72b6:	d019      	beq.n	72ec <mayfly_init+0x48>
    72b8:	b233      	sxth	r3, r6
    72ba:	ea4f 0883 	mov.w	r8, r3, lsl #2
    72be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    72c2:	011d      	lsls	r5, r3, #4
    72c4:	2404      	movs	r4, #4
    72c6:	f04f 0a0c 	mov.w	sl, #12
    72ca:	e00a      	b.n	72e2 <mayfly_init+0x3e>
    72cc:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    72d0:	1d0a      	adds	r2, r1, #4
    72d2:	eb04 0008 	add.w	r0, r4, r8
    72d6:	443a      	add	r2, r7
    72d8:	4439      	add	r1, r7
    72da:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    72de:	f7ff ffbf 	bl	7260 <memq_init>
		while (caller_id--) {
    72e2:	3c01      	subs	r4, #1
    72e4:	b2e4      	uxtb	r4, r4
    72e6:	2cff      	cmp	r4, #255	; 0xff
    72e8:	d1f0      	bne.n	72cc <mayfly_init+0x28>
    72ea:	e7e1      	b.n	72b0 <mayfly_init+0xc>
    72ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    72f0:	20000704 	.word	0x20000704
    72f4:	20000684 	.word	0x20000684

000072f8 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    72f8:	b4f0      	push	{r4, r5, r6, r7}
    72fa:	4b12      	ldr	r3, [pc, #72]	; (7344 <mayfly_enable+0x4c>)
    72fc:	4605      	mov	r5, r0
    72fe:	460f      	mov	r7, r1
    7300:	260c      	movs	r6, #12
    7302:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    7304:	b172      	cbz	r2, 7324 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    7306:	4361      	muls	r1, r4
    7308:	fb06 1400 	mla	r4, r6, r0, r1
    730c:	4423      	add	r3, r4
    730e:	7a59      	ldrb	r1, [r3, #9]
    7310:	7a18      	ldrb	r0, [r3, #8]
    7312:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    7314:	bf04      	itt	eq
    7316:	3101      	addeq	r1, #1
    7318:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    731a:	4628      	mov	r0, r5
    731c:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    731e:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    7320:	f00b bdc2 	b.w	12ea8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    7324:	434c      	muls	r4, r1
    7326:	fb06 4400 	mla	r4, r6, r0, r4
    732a:	4423      	add	r3, r4
    732c:	7a9c      	ldrb	r4, [r3, #10]
    732e:	7ada      	ldrb	r2, [r3, #11]
    7330:	42a2      	cmp	r2, r4
    7332:	d104      	bne.n	733e <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    7334:	3201      	adds	r2, #1
    7336:	729a      	strb	r2, [r3, #10]
}
    7338:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    733a:	f00b be1b 	b.w	12f74 <mayfly_pend>
}
    733e:	bcf0      	pop	{r4, r5, r6, r7}
    7340:	4770      	bx	lr
    7342:	bf00      	nop
    7344:	20000704 	.word	0x20000704

00007348 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    7348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    734a:	4605      	mov	r5, r0
    734c:	460e      	mov	r6, r1
    734e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7350:	b18a      	cbz	r2, 7376 <mayfly_enqueue+0x2e>
    7352:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    7354:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    7356:	7820      	ldrb	r0, [r4, #0]
    7358:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    735a:	f010 0703 	ands.w	r7, r0, #3
    735e:	d029      	beq.n	73b4 <mayfly_enqueue+0x6c>
		if (chain) {
    7360:	b303      	cbz	r3, 73a4 <mayfly_enqueue+0x5c>
			if (state != 1) {
    7362:	2f01      	cmp	r7, #1
    7364:	d039      	beq.n	73da <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    7366:	3201      	adds	r2, #1
    7368:	b2d2      	uxtb	r2, r2
    736a:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    736c:	4631      	mov	r1, r6
    736e:	4628      	mov	r0, r5
    7370:	f00b fe00 	bl	12f74 <mayfly_pend>
    7374:	e01c      	b.n	73b0 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7376:	f00b fdeb 	bl	12f50 <mayfly_prio_is_equal>
    737a:	2800      	cmp	r0, #0
    737c:	d0e9      	beq.n	7352 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    737e:	4631      	mov	r1, r6
    7380:	4628      	mov	r0, r5
    7382:	f00b fdbd 	bl	12f00 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7386:	2800      	cmp	r0, #0
    7388:	d0e3      	beq.n	7352 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    738a:	2330      	movs	r3, #48	; 0x30
    738c:	220c      	movs	r2, #12
    738e:	4373      	muls	r3, r6
    7390:	fb02 3305 	mla	r3, r2, r5, r3
    7394:	4a12      	ldr	r2, [pc, #72]	; (73e0 <mayfly_enqueue+0x98>)
    7396:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    7398:	7a93      	ldrb	r3, [r2, #10]
    739a:	7ad2      	ldrb	r2, [r2, #11]
    739c:	1a9b      	subs	r3, r3, r2
    739e:	bf18      	it	ne
    73a0:	2301      	movne	r3, #1
    73a2:	e7d7      	b.n	7354 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    73a4:	3202      	adds	r2, #2
    73a6:	b2d2      	uxtb	r2, r2
    73a8:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    73aa:	68e3      	ldr	r3, [r4, #12]
    73ac:	68a0      	ldr	r0, [r4, #8]
    73ae:	4798      	blx	r3
		return 0;
    73b0:	2000      	movs	r0, #0
    73b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    73b4:	2b00      	cmp	r3, #0
    73b6:	d0f8      	beq.n	73aa <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    73b8:	3201      	adds	r2, #1
    73ba:	b2d2      	uxtb	r2, r2
    73bc:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    73be:	2304      	movs	r3, #4
    73c0:	2230      	movs	r2, #48	; 0x30
    73c2:	fb12 3206 	smlabb	r2, r2, r6, r3
    73c6:	230c      	movs	r3, #12
    73c8:	fb13 2305 	smlabb	r3, r3, r5, r2
    73cc:	4a04      	ldr	r2, [pc, #16]	; (73e0 <mayfly_enqueue+0x98>)
    73ce:	6860      	ldr	r0, [r4, #4]
    73d0:	441a      	add	r2, r3
    73d2:	4621      	mov	r1, r4
    73d4:	f7ff ff47 	bl	7266 <memq_enqueue>
    73d8:	e7c8      	b.n	736c <mayfly_enqueue+0x24>
			return 1;
    73da:	4638      	mov	r0, r7

	return 0;
}
    73dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73de:	bf00      	nop
    73e0:	20000704 	.word	0x20000704

000073e4 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    73e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73e8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    73ec:	b089      	sub	sp, #36	; 0x24
    73ee:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    73f0:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    73f4:	4e43      	ldr	r6, [pc, #268]	; (7504 <mayfly_run+0x120>)
    73f6:	9304      	str	r3, [sp, #16]
{
    73f8:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    73fa:	2404      	movs	r4, #4
	u8_t disable = 0;
    73fc:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    7400:	3c01      	subs	r4, #1
    7402:	b2e4      	uxtb	r4, r4
    7404:	2cff      	cmp	r4, #255	; 0xff
    7406:	d10b      	bne.n	7420 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    7408:	9b01      	ldr	r3, [sp, #4]
    740a:	2b00      	cmp	r3, #0
    740c:	d076      	beq.n	74fc <mayfly_run+0x118>
    740e:	f1b8 0f00 	cmp.w	r8, #0
    7412:	d173      	bne.n	74fc <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    7414:	4642      	mov	r2, r8
    7416:	4629      	mov	r1, r5
    7418:	4628      	mov	r0, r5
    741a:	f00b fd45 	bl	12ea8 <mayfly_enable_cb>
    741e:	e06d      	b.n	74fc <mayfly_run+0x118>
		struct mayfly *m = 0;
    7420:	f10d 0b20 	add.w	fp, sp, #32
    7424:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    7426:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    7428:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    742c:	f04f 0930 	mov.w	r9, #48	; 0x30
    7430:	fb07 f304 	mul.w	r3, r7, r4
    7434:	fb09 3005 	mla	r0, r9, r5, r3
    7438:	1831      	adds	r1, r6, r0
    743a:	465a      	mov	r2, fp
    743c:	6849      	ldr	r1, [r1, #4]
    743e:	5830      	ldr	r0, [r6, r0]
    7440:	9302      	str	r3, [sp, #8]
    7442:	f7ff ff17 	bl	7274 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7446:	9b04      	ldr	r3, [sp, #16]
    7448:	fb17 3704 	smlabb	r7, r7, r4, r3
    744c:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    744e:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7450:	9303      	str	r3, [sp, #12]
		while (link) {
    7452:	f1ba 0f00 	cmp.w	sl, #0
    7456:	d119      	bne.n	748c <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7458:	2230      	movs	r2, #48	; 0x30
    745a:	230c      	movs	r3, #12
    745c:	436a      	muls	r2, r5
    745e:	fb03 2204 	mla	r2, r3, r4, r2
    7462:	4432      	add	r2, r6
    7464:	7a91      	ldrb	r1, [r2, #10]
    7466:	7ad0      	ldrb	r0, [r2, #11]
    7468:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    746a:	bf1e      	ittt	ne
    746c:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    746e:	2201      	movne	r2, #1
    7470:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    7472:	2230      	movs	r2, #48	; 0x30
    7474:	436a      	muls	r2, r5
    7476:	fb03 2304 	mla	r3, r3, r4, r2
    747a:	4433      	add	r3, r6
    747c:	7a1a      	ldrb	r2, [r3, #8]
    747e:	7a59      	ldrb	r1, [r3, #9]
    7480:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    7482:	bf1c      	itt	ne
    7484:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    7486:	f04f 0801 	movne.w	r8, #1
    748a:	e7b9      	b.n	7400 <mayfly_run+0x1c>
			req = m->_req;
    748c:	9b07      	ldr	r3, [sp, #28]
    748e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7490:	785a      	ldrb	r2, [r3, #1]
    7492:	1abf      	subs	r7, r7, r2
    7494:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7498:	2f01      	cmp	r7, #1
    749a:	d104      	bne.n	74a6 <mayfly_run+0xc2>
				m->_ack--;
    749c:	3a01      	subs	r2, #1
    749e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    74a0:	6898      	ldr	r0, [r3, #8]
    74a2:	68da      	ldr	r2, [r3, #12]
    74a4:	4790      	blx	r2
			req = m->_req;
    74a6:	9a07      	ldr	r2, [sp, #28]
    74a8:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    74aa:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    74ac:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    74ae:	1a9a      	subs	r2, r3, r2
    74b0:	f002 0203 	and.w	r2, r2, #3
    74b4:	2a01      	cmp	r2, #1
    74b6:	9305      	str	r3, [sp, #20]
    74b8:	d00d      	beq.n	74d6 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    74ba:	9b02      	ldr	r3, [sp, #8]
    74bc:	9903      	ldr	r1, [sp, #12]
    74be:	fb09 3005 	mla	r0, r9, r5, r3
    74c2:	4430      	add	r0, r6
    74c4:	2200      	movs	r2, #0
    74c6:	6840      	ldr	r0, [r0, #4]
    74c8:	f7ff fedc 	bl	7284 <memq_dequeue>
				m->_link = link;
    74cc:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    74ce:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    74d0:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    74d4:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    74d6:	9b02      	ldr	r3, [sp, #8]
    74d8:	fb09 3305 	mla	r3, r9, r5, r3
    74dc:	18f1      	adds	r1, r6, r3
    74de:	465a      	mov	r2, fp
    74e0:	6849      	ldr	r1, [r1, #4]
    74e2:	58f0      	ldr	r0, [r6, r3]
    74e4:	f7ff fec6 	bl	7274 <memq_peek>
			if (state == 1) {
    74e8:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    74ea:	4682      	mov	sl, r0
			if (state == 1) {
    74ec:	d1b1      	bne.n	7452 <mayfly_run+0x6e>
				if (caller_id || link) {
    74ee:	b90c      	cbnz	r4, 74f4 <mayfly_run+0x110>
    74f0:	2800      	cmp	r0, #0
    74f2:	d0b1      	beq.n	7458 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    74f4:	4629      	mov	r1, r5
    74f6:	4628      	mov	r0, r5
    74f8:	f00b fd3c 	bl	12f74 <mayfly_pend>
	}
}
    74fc:	b009      	add	sp, #36	; 0x24
    74fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7502:	bf00      	nop
    7504:	20000704 	.word	0x20000704

00007508 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7508:	b510      	push	{r4, lr}
    750a:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    750c:	2000      	movs	r0, #0

	while (octets_len--) {
    750e:	3901      	subs	r1, #1
    7510:	b2c9      	uxtb	r1, r1
    7512:	29ff      	cmp	r1, #255	; 0xff
    7514:	d100      	bne.n	7518 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    7516:	bd10      	pop	{r4, pc}
		bite = *octets;
    7518:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    751c:	2b00      	cmp	r3, #0
    751e:	d0f6      	beq.n	750e <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7520:	1e5c      	subs	r4, r3, #1
			one_count++;
    7522:	3001      	adds	r0, #1
			bite &= (bite - 1);
    7524:	4023      	ands	r3, r4
			one_count++;
    7526:	b2c0      	uxtb	r0, r0
    7528:	e7f8      	b.n	751c <util_ones_count_get+0x14>

0000752a <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    752a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    752c:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    752e:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7530:	461a      	mov	r2, r3
	total = 0;
    7532:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7534:	2aff      	cmp	r2, #255	; 0xff
    7536:	d101      	bne.n	753c <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7538:	2000      	movs	r0, #0
    753a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    753c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7540:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    7542:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    7546:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    754a:	d004      	beq.n	7556 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    754c:	68b3      	ldr	r3, [r6, #8]
    754e:	441c      	add	r4, r3
		current = ticker_current->next;
    7550:	4613      	mov	r3, r2
    7552:	463a      	mov	r2, r7
    7554:	e7ee      	b.n	7534 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    7556:	4293      	cmp	r3, r2
    7558:	d100      	bne.n	755c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    755a:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    755c:	b21b      	sxth	r3, r3
    755e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7562:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    7564:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    7566:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    756a:	7833      	ldrb	r3, [r6, #0]
    756c:	2bff      	cmp	r3, #255	; 0xff
    756e:	d006      	beq.n	757e <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7570:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7574:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7578:	689a      	ldr	r2, [r3, #8]
    757a:	4402      	add	r2, r0
    757c:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    757e:	4420      	add	r0, r4
    7580:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007582 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7582:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7584:	1a55      	subs	r5, r2, r1
    7586:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    758a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    758c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    758e:	d109      	bne.n	75a4 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7590:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7594:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7596:	42a2      	cmp	r2, r4
    7598:	d90e      	bls.n	75b8 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    759a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    759c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    759e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    75a0:	6144      	str	r4, [r0, #20]
    75a2:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    75a4:	1a8a      	subs	r2, r1, r2
    75a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    75aa:	4293      	cmp	r3, r2
    75ac:	d901      	bls.n	75b2 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    75ae:	1a9a      	subs	r2, r3, r2
    75b0:	e7f1      	b.n	7596 <ticks_to_expire_prep+0x14>
    75b2:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    75b4:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    75b6:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    75b8:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    75ba:	2200      	movs	r2, #0
    75bc:	e7ef      	b.n	759e <ticks_to_expire_prep+0x1c>

000075be <ticker_job_op_cb>:
{
    75be:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    75c0:	2200      	movs	r2, #0
    75c2:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    75c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    75c6:	6259      	str	r1, [r3, #36]	; 0x24
{
    75c8:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    75ca:	b10a      	cbz	r2, 75d0 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    75cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    75ce:	4710      	bx	r2
    75d0:	4770      	bx	lr

000075d2 <ticker_worker>:
{
    75d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    75d6:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    75d8:	2301      	movs	r3, #1
{
    75da:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    75dc:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    75de:	2d00      	cmp	r5, #0
    75e0:	d14c      	bne.n	767c <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    75e2:	7f43      	ldrb	r3, [r0, #29]
    75e4:	2bff      	cmp	r3, #255	; 0xff
    75e6:	d102      	bne.n	75ee <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    75e8:	77c5      	strb	r5, [r0, #31]
		return;
    75ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    75ee:	f00a ffc5 	bl	1257c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    75f2:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    75f4:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    75f6:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    75fa:	1bc7      	subs	r7, r0, r7
    75fc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    7600:	2eff      	cmp	r6, #255	; 0xff
    7602:	d006      	beq.n	7612 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    7604:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7608:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    760c:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    760e:	429f      	cmp	r7, r3
    7610:	d218      	bcs.n	7644 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7612:	7aa2      	ldrb	r2, [r4, #10]
    7614:	7ae3      	ldrb	r3, [r4, #11]
    7616:	4293      	cmp	r3, r2
    7618:	d105      	bne.n	7626 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    761a:	3301      	adds	r3, #1
    761c:	b2db      	uxtb	r3, r3
			last = 0;
    761e:	2b02      	cmp	r3, #2
    7620:	bf08      	it	eq
    7622:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    7624:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7626:	7ae3      	ldrb	r3, [r4, #11]
    7628:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    762c:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    762e:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7630:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7632:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    7634:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7636:	46ac      	mov	ip, r5
    7638:	4623      	mov	r3, r4
    763a:	2104      	movs	r1, #4
    763c:	2003      	movs	r0, #3
}
    763e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7642:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    7644:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    7646:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7648:	788a      	ldrb	r2, [r1, #2]
    764a:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    764c:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7650:	1a9b      	subs	r3, r3, r2
    7652:	b2db      	uxtb	r3, r3
    7654:	2b01      	cmp	r3, #1
    7656:	d1d3      	bne.n	7600 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7658:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    765c:	3a01      	subs	r2, #1
    765e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7660:	f1b9 0f00 	cmp.w	r9, #0
    7664:	d0cc      	beq.n	7600 <ticker_worker+0x2e>
					   ticks_expired -
    7666:	6948      	ldr	r0, [r1, #20]
    7668:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    766a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    766c:	1a28      	subs	r0, r5, r0
    766e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7670:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7674:	690b      	ldr	r3, [r1, #16]
    7676:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7678:	47c8      	blx	r9
    767a:	e7c1      	b.n	7600 <ticker_worker+0x2e>
    767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007680 <ticker_job>:
{
    7680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    7684:	7fc2      	ldrb	r2, [r0, #31]
{
    7686:	b095      	sub	sp, #84	; 0x54
    7688:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    768a:	2a00      	cmp	r2, #0
    768c:	f040 83bf 	bne.w	7e0e <ticker_job+0x78e>
	ticks_previous = instance->ticks_current;
    7690:	6943      	ldr	r3, [r0, #20]
    7692:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    7694:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7696:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7698:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    769a:	7ac0      	ldrb	r0, [r0, #11]
    769c:	4298      	cmp	r0, r3
    769e:	f000 808f 	beq.w	77c0 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    76a2:	440b      	add	r3, r1
    76a4:	b2db      	uxtb	r3, r3
			first = 0;
    76a6:	2b02      	cmp	r3, #2
    76a8:	bf08      	it	eq
    76aa:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    76ac:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    76b0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    76b4:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    76b6:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    76ba:	9b07      	ldr	r3, [sp, #28]
    76bc:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    76be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    76c2:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    76c6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    76ca:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    76cc:	f8db 3000 	ldr.w	r3, [fp]
    76d0:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    76d2:	f8db 3004 	ldr.w	r3, [fp, #4]
    76d6:	930d      	str	r3, [sp, #52]	; 0x34
    76d8:	f89b 3009 	ldrb.w	r3, [fp, #9]
    76dc:	3b01      	subs	r3, #1
    76de:	b2db      	uxtb	r3, r3
    76e0:	9304      	str	r3, [sp, #16]
	pending = 0;
    76e2:	2300      	movs	r3, #0
    76e4:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    76e6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    76ea:	9b04      	ldr	r3, [sp, #16]
    76ec:	2bff      	cmp	r3, #255	; 0xff
    76ee:	d16a      	bne.n	77c6 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    76f0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    76f4:	9a05      	ldr	r2, [sp, #20]
    76f6:	1a9b      	subs	r3, r3, r2
    76f8:	bf18      	it	ne
    76fa:	2301      	movne	r3, #1
    76fc:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    76fe:	9b03      	ldr	r3, [sp, #12]
    7700:	b1e3      	cbz	r3, 773c <ticker_job+0xbc>
	node = &instance->node[0];
    7702:	f8db 3000 	ldr.w	r3, [fp]
    7706:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    7708:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    770c:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7710:	2eff      	cmp	r6, #255	; 0xff
    7712:	d00c      	beq.n	772e <ticker_job+0xae>
		ticker = &node[id_expired];
    7714:	b237      	sxth	r7, r6
    7716:	9b06      	ldr	r3, [sp, #24]
    7718:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    771c:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7720:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7722:	4545      	cmp	r5, r8
    7724:	f240 8136 	bls.w	7994 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    7728:	eba5 0508 	sub.w	r5, r5, r8
    772c:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    772e:	9b04      	ldr	r3, [sp, #16]
    7730:	9a03      	ldr	r2, [sp, #12]
    7732:	9905      	ldr	r1, [sp, #20]
    7734:	42b1      	cmp	r1, r6
    7736:	bf18      	it	ne
    7738:	4613      	movne	r3, r2
    773a:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    773c:	f8db 3000 	ldr.w	r3, [fp]
    7740:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    7742:	f8db 3004 	ldr.w	r3, [fp, #4]
    7746:	9312      	str	r3, [sp, #72]	; 0x48
    7748:	f89b 3009 	ldrb.w	r3, [fp, #9]
    774c:	3b01      	subs	r3, #1
    774e:	b2db      	uxtb	r3, r3
    7750:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    7752:	9b03      	ldr	r3, [sp, #12]
    7754:	2bff      	cmp	r3, #255	; 0xff
    7756:	f040 8170 	bne.w	7a3a <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    775a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    775e:	9a05      	ldr	r2, [sp, #20]
    7760:	4293      	cmp	r3, r2
	if (!pending) {
    7762:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    7764:	f040 834a 	bne.w	7dfc <ticker_job+0x77c>
	if (!pending) {
    7768:	b95b      	cbnz	r3, 7782 <ticker_job+0x102>
    776a:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    776e:	f8db 3004 	ldr.w	r3, [fp, #4]
    7772:	9303      	str	r3, [sp, #12]
    7774:	3c01      	subs	r4, #1
    7776:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7778:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    777c:	2cff      	cmp	r4, #255	; 0xff
    777e:	f040 82a0 	bne.w	7cc2 <ticker_job+0x642>
	instance->job_guard = 0;
    7782:	2300      	movs	r3, #0
    7784:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7788:	9b04      	ldr	r3, [sp, #16]
    778a:	b14b      	cbz	r3, 77a0 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    778c:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7790:	2bff      	cmp	r3, #255	; 0xff
    7792:	f040 82e9 	bne.w	7d68 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    7796:	f00a fec1 	bl	1251c <cntr_stop>
    779a:	b908      	cbnz	r0, 77a0 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    779c:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    77a0:	f89b 301f 	ldrb.w	r3, [fp, #31]
    77a4:	2b00      	cmp	r3, #0
    77a6:	f000 8332 	beq.w	7e0e <ticker_job+0x78e>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    77aa:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    77ae:	465b      	mov	r3, fp
    77b0:	2201      	movs	r2, #1
    77b2:	2103      	movs	r1, #3
    77b4:	2004      	movs	r0, #4
    77b6:	46a4      	mov	ip, r4
}
    77b8:	b015      	add	sp, #84	; 0x54
    77ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    77be:	4760      	bx	ip
		flag_elapsed = 0;
    77c0:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    77c2:	4690      	mov	r8, r2
    77c4:	e77f      	b.n	76c6 <ticker_job+0x46>
		user = &users[count_user];
    77c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    77c8:	9a04      	ldr	r2, [sp, #16]
    77ca:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    77ce:	687b      	ldr	r3, [r7, #4]
    77d0:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    77d2:	78f9      	ldrb	r1, [r7, #3]
    77d4:	78be      	ldrb	r6, [r7, #2]
    77d6:	428e      	cmp	r6, r1
    77d8:	f000 80d7 	beq.w	798a <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    77dc:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    77de:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    77e0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    77e4:	0112      	lsls	r2, r2, #4
    77e6:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    77e8:	1c73      	adds	r3, r6, #1
    77ea:	b2db      	uxtb	r3, r3
				middle = 0;
    77ec:	4298      	cmp	r0, r3
    77ee:	bf08      	it	eq
    77f0:	2300      	moveq	r3, #0
			user->middle = middle;
    77f2:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    77f4:	9b08      	ldr	r3, [sp, #32]
    77f6:	5c9a      	ldrb	r2, [r3, r2]
    77f8:	2a03      	cmp	r2, #3
    77fa:	d9eb      	bls.n	77d4 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    77fc:	2a05      	cmp	r2, #5
    77fe:	d817      	bhi.n	7830 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    7800:	7869      	ldrb	r1, [r5, #1]
    7802:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    7806:	930c      	str	r3, [sp, #48]	; 0x30
    7808:	980c      	ldr	r0, [sp, #48]	; 0x30
    780a:	9b06      	ldr	r3, [sp, #24]
    780c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    7810:	7863      	ldrb	r3, [r4, #1]
    7812:	78a0      	ldrb	r0, [r4, #2]
    7814:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7816:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    781a:	d009      	beq.n	7830 <ticker_job+0x1b0>
			    (state == 0) ||
    781c:	2a04      	cmp	r2, #4
    781e:	d10c      	bne.n	783a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7820:	686a      	ldr	r2, [r5, #4]
    7822:	b952      	cbnz	r2, 783a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    7824:	68aa      	ldr	r2, [r5, #8]
    7826:	b942      	cbnz	r2, 783a <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    7828:	68ea      	ldr	r2, [r5, #12]
    782a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    782e:	d104      	bne.n	783a <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7830:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7832:	4628      	mov	r0, r5
    7834:	f7ff fec3 	bl	75be <ticker_job_op_cb>
    7838:	e7cb      	b.n	77d2 <ticker_job+0x152>
			if (state == 1) {
    783a:	2b01      	cmp	r3, #1
    783c:	f040 809b 	bne.w	7976 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7840:	4658      	mov	r0, fp
    7842:	f7ff fe72 	bl	752a <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7846:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7848:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    784a:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    784c:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    784e:	f040 8084 	bne.w	795a <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    7852:	f8db 3014 	ldr.w	r3, [fp, #20]
    7856:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7858:	f00a fe90 	bl	1257c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    785c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    785e:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7860:	1ac3      	subs	r3, r0, r3
    7862:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    7866:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7868:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    786a:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    786c:	bf9e      	ittt	ls
    786e:	6962      	ldrls	r2, [r4, #20]
    7870:	1b92      	subls	r2, r2, r6
    7872:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    7874:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7876:	bf96      	itet	ls
    7878:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    787a:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    787c:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    787e:	b18a      	cbz	r2, 78a4 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7880:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    7882:	b179      	cbz	r1, 78a4 <ticker_job+0x224>
		user_op->params.update.lazy--;
    7884:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7888:	fa1f fe8e 	uxth.w	lr, lr
    788c:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7890:	429a      	cmp	r2, r3
    7892:	d32b      	bcc.n	78ec <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    7894:	f8df 9324 	ldr.w	r9, [pc, #804]	; 7bbc <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7898:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    789c:	45e6      	cmp	lr, ip
    789e:	d847      	bhi.n	7930 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    78a0:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    78a4:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    78a6:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    78a8:	4413      	add	r3, r2
    78aa:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    78ac:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    78ae:	6963      	ldr	r3, [r4, #20]
    78b0:	4413      	add	r3, r2
    78b2:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    78b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    78b6:	4620      	mov	r0, r4
    78b8:	f7ff fe63 	bl	7582 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    78bc:	69a2      	ldr	r2, [r4, #24]
    78be:	892b      	ldrh	r3, [r5, #8]
    78c0:	4413      	add	r3, r2
    78c2:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    78c4:	896a      	ldrh	r2, [r5, #10]
    78c6:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    78c8:	bf8c      	ite	hi
    78ca:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    78cc:	2300      	movls	r3, #0
    78ce:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    78d0:	7bab      	ldrb	r3, [r5, #14]
    78d2:	b103      	cbz	r3, 78d6 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    78d4:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    78d6:	9b06      	ldr	r3, [sp, #24]
    78d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    78da:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    78de:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    78e0:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    78e4:	3301      	adds	r3, #1
    78e6:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    78e8:	2100      	movs	r1, #0
    78ea:	e7a2      	b.n	7832 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    78ec:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    78f0:	45e6      	cmp	lr, ip
    78f2:	d2cf      	bcs.n	7894 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    78f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    78f6:	4eaf      	ldr	r6, [pc, #700]	; (7bb4 <ticker_job+0x534>)
    78f8:	48af      	ldr	r0, [pc, #700]	; (7bb8 <ticker_job+0x538>)
    78fa:	198e      	adds	r6, r1, r6
    78fc:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    78fe:	bf81      	itttt	hi
    7900:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    7904:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    7908:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    790c:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    790e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7910:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    7912:	bf8c      	ite	hi
    7914:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    7918:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    791c:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    791e:	4491      	add	r9, r2
			ticker->lazy_current--;
    7920:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    7924:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    7926:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    792a:	f8a4 c01e 	strh.w	ip, [r4, #30]
    792e:	e7af      	b.n	7890 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7930:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7932:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7934:	48a0      	ldr	r0, [pc, #640]	; (7bb8 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    7936:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7938:	499e      	ldr	r1, [pc, #632]	; (7bb4 <ticker_job+0x534>)
    793a:	1871      	adds	r1, r6, r1
    793c:	4281      	cmp	r1, r0
	return 0;
    793e:	bf8e      	itee	hi
    7940:	2100      	movhi	r1, #0
		return 1;
    7942:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    7944:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    7946:	4411      	add	r1, r2
			ticker->lazy_current++;
    7948:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    794c:	bf8c      	ite	hi
    794e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7950:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    7952:	440b      	add	r3, r1
			ticker->lazy_current++;
    7954:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7958:	e79e      	b.n	7898 <ticker_job+0x218>
		ticker->req = ticker->ack;
    795a:	78a3      	ldrb	r3, [r4, #2]
    795c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    795e:	786b      	ldrb	r3, [r5, #1]
    7960:	f89b 201c 	ldrb.w	r2, [fp, #28]
    7964:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7966:	bf01      	itttt	eq
    7968:	23ff      	moveq	r3, #255	; 0xff
    796a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    796e:	2300      	moveq	r3, #0
    7970:	f8cb 3018 	streq.w	r3, [fp, #24]
    7974:	e7b8      	b.n	78e8 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    7976:	2104      	movs	r1, #4
    7978:	465b      	mov	r3, fp
    797a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    797e:	2201      	movs	r2, #1
    7980:	4608      	mov	r0, r1
    7982:	47a0      	blx	r4
				pending = 1;
    7984:	2301      	movs	r3, #1
				user->middle = prev;
    7986:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7988:	9309      	str	r3, [sp, #36]	; 0x24
    798a:	9b04      	ldr	r3, [sp, #16]
    798c:	3b01      	subs	r3, #1
    798e:	b2db      	uxtb	r3, r3
    7990:	9304      	str	r3, [sp, #16]
    7992:	e6aa      	b.n	76ea <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    7994:	f8db 3018 	ldr.w	r3, [fp, #24]
    7998:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    799a:	bf29      	itett	cs
    799c:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    799e:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    79a0:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    79a4:	2300      	movcs	r3, #0
    79a6:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    79aa:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    79ac:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    79ae:	b11b      	cbz	r3, 79b8 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    79b0:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    79b4:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    79b8:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    79ba:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    79bc:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    79be:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    79c2:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    79c6:	f8d4 e004 	ldr.w	lr, [r4, #4]
    79ca:	f1be 0f00 	cmp.w	lr, #0
    79ce:	d030      	beq.n	7a32 <ticker_job+0x3b2>
    79d0:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    79d2:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 7bb8 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    79d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    79d8:	6a21      	ldr	r1, [r4, #32]
    79da:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    79dc:	4975      	ldr	r1, [pc, #468]	; (7bb4 <ticker_job+0x534>)
    79de:	1859      	adds	r1, r3, r1
    79e0:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    79e2:	bf9f      	itttt	ls
    79e4:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    79e8:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    79ec:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    79f0:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    79f2:	bf92      	itee	ls
    79f4:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    79f6:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    79f8:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    79fa:	4473      	add	r3, lr
			while (count--) {
    79fc:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    7a00:	441a      	add	r2, r3
			while (count--) {
    7a02:	d2e8      	bcs.n	79d6 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7a04:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    7a06:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7a08:	f8db 1014 	ldr.w	r1, [fp, #20]
    7a0c:	eb03 0209 	add.w	r2, r3, r9
    7a10:	4620      	mov	r0, r4
    7a12:	f7ff fdb6 	bl	7582 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    7a16:	8ba3      	ldrh	r3, [r4, #28]
    7a18:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    7a1a:	2300      	movs	r3, #0
    7a1c:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7a1e:	9b06      	ldr	r3, [sp, #24]
    7a20:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    7a24:	7863      	ldrb	r3, [r4, #1]
    7a26:	3301      	adds	r3, #1
    7a28:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    7a2a:	eba8 0805 	sub.w	r8, r8, r5
    7a2e:	46b2      	mov	sl, r6
    7a30:	e66c      	b.n	770c <ticker_job+0x8c>
			ticker->req = ticker->ack;
    7a32:	78a3      	ldrb	r3, [r4, #2]
    7a34:	7063      	strb	r3, [r4, #1]
    7a36:	4656      	mov	r6, sl
    7a38:	e7f7      	b.n	7a2a <ticker_job+0x3aa>
		user = &users[count_user];
    7a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7a3c:	9a03      	ldr	r2, [sp, #12]
    7a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7a42:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    7a44:	685b      	ldr	r3, [r3, #4]
    7a46:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    7a48:	9b06      	ldr	r3, [sp, #24]
    7a4a:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7a4e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    7a52:	f000 808e 	beq.w	7b72 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    7a56:	fa0f f38a 	sxth.w	r3, sl
    7a5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7a60:	46d0      	mov	r8, sl
    7a62:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    7a66:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    7a6a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    7a6c:	f8db 3000 	ldr.w	r3, [fp]
    7a70:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    7a72:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7a74:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    7a76:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7a78:	8be3      	ldrh	r3, [r4, #30]
    7a7a:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    7a7c:	bf86      	itte	hi
    7a7e:	1a9b      	subhi	r3, r3, r2
    7a80:	b29b      	uxthhi	r3, r3
		skip = 0;
    7a82:	2300      	movls	r3, #0
    7a84:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    7a86:	fa0f f388 	sxth.w	r3, r8
    7a8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a8e:	00db      	lsls	r3, r3, #3
    7a90:	9313      	str	r3, [sp, #76]	; 0x4c
    7a92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    7a94:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7a98:	f8db 0018 	ldr.w	r0, [fp, #24]
    7a9c:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    7a9e:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    7aa2:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    7aa4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    7aa8:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    7aac:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    7aae:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    7ab0:	2bff      	cmp	r3, #255	; 0xff
    7ab2:	d007      	beq.n	7ac4 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    7ab4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    7ab8:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    7abc:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    7abe:	4281      	cmp	r1, r0
    7ac0:	f200 80a9 	bhi.w	7c16 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    7ac4:	f8de 0018 	ldr.w	r0, [lr, #24]
    7ac8:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    7aca:	eb01 0c00 	add.w	ip, r1, r0
    7ace:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    7ad0:	2eff      	cmp	r6, #255	; 0xff
    7ad2:	f040 80ae 	bne.w	7c32 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    7ad6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7ad8:	b130      	cbz	r0, 7ae8 <ticker_job+0x468>
    7ada:	9807      	ldr	r0, [sp, #28]
    7adc:	4281      	cmp	r1, r0
    7ade:	f0c0 80bf 	bcc.w	7c60 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    7ae2:	2eff      	cmp	r6, #255	; 0xff
    7ae4:	f040 818f 	bne.w	7e06 <ticker_job+0x786>
		if (previous == current) {
    7ae8:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    7aea:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    7aee:	4283      	cmp	r3, r0
			node[previous].next = id;
    7af0:	bf18      	it	ne
    7af2:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    7af6:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    7afa:	bf16      	itet	ne
    7afc:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    7b00:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    7b04:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    7b08:	2bff      	cmp	r3, #255	; 0xff
    7b0a:	d006      	beq.n	7b1a <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    7b0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7b14:	689a      	ldr	r2, [r3, #8]
    7b16:	1a51      	subs	r1, r2, r1
    7b18:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    7b1a:	78a3      	ldrb	r3, [r4, #2]
    7b1c:	3301      	adds	r3, #1
    7b1e:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    7b20:	2100      	movs	r1, #0
			if (user_op) {
    7b22:	2d00      	cmp	r5, #0
    7b24:	d093      	beq.n	7a4e <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    7b26:	4628      	mov	r0, r5
    7b28:	f7ff fd49 	bl	75be <ticker_job_op_cb>
    7b2c:	e78f      	b.n	7a4e <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    7b2e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    7b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7b34:	011b      	lsls	r3, r3, #4
    7b36:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    7b38:	f109 0201 	add.w	r2, r9, #1
    7b3c:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7b40:	9a06      	ldr	r2, [sp, #24]
    7b42:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    7b44:	454a      	cmp	r2, r9
    7b46:	bf08      	it	eq
    7b48:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7b4e:	5cd3      	ldrb	r3, [r2, r3]
    7b50:	2b03      	cmp	r3, #3
    7b52:	d10e      	bne.n	7b72 <ticker_job+0x4f2>
				id_insert = user_op->id;
    7b54:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    7b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7b5a:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    7b5e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    7b62:	7862      	ldrb	r2, [r4, #1]
    7b64:	78a3      	ldrb	r3, [r4, #2]
    7b66:	429a      	cmp	r2, r3
    7b68:	d009      	beq.n	7b7e <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    7b6a:	2101      	movs	r1, #1
    7b6c:	4628      	mov	r0, r5
    7b6e:	f7ff fd26 	bl	75be <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    7b72:	9b06      	ldr	r3, [sp, #24]
    7b74:	789b      	ldrb	r3, [r3, #2]
    7b76:	454b      	cmp	r3, r9
    7b78:	d1d9      	bne.n	7b2e <ticker_job+0x4ae>
    7b7a:	9b03      	ldr	r3, [sp, #12]
    7b7c:	e5e6      	b.n	774c <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    7b7e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    7b80:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    7b84:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    7b86:	692b      	ldr	r3, [r5, #16]
    7b88:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    7b8a:	8aab      	ldrh	r3, [r5, #20]
    7b8c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    7b8e:	69ab      	ldr	r3, [r5, #24]
    7b90:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    7b92:	69eb      	ldr	r3, [r5, #28]
    7b94:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    7b96:	6a2b      	ldr	r3, [r5, #32]
    7b98:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    7b9a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    7b9c:	68ab      	ldr	r3, [r5, #8]
    7b9e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    7ba0:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7ba2:	686a      	ldr	r2, [r5, #4]
    7ba4:	4620      	mov	r0, r4
    7ba6:	f7ff fcec 	bl	7582 <ticks_to_expire_prep>
	ticker->force = 1;
    7baa:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    7bac:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    7bae:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    7bb0:	70e3      	strb	r3, [r4, #3]
    7bb2:	e75b      	b.n	7a6c <ticker_job+0x3ec>
    7bb4:	ff172b5a 	.word	0xff172b5a
    7bb8:	7f172b59 	.word	0x7f172b59
    7bbc:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    7bc0:	6860      	ldr	r0, [r4, #4]
    7bc2:	2800      	cmp	r0, #0
    7bc4:	d07b      	beq.n	7cbe <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    7bc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7bc8:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7bca:	4b92      	ldr	r3, [pc, #584]	; (7e14 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    7bcc:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7bce:	4992      	ldr	r1, [pc, #584]	; (7e18 <ticker_job+0x798>)
    7bd0:	18d3      	adds	r3, r2, r3
    7bd2:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    7bd4:	bf9c      	itt	ls
    7bd6:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    7bda:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7bde:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    7be0:	bf8b      	itete	hi
    7be2:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7be4:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    7be8:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    7bea:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7bec:	4403      	add	r3, r0
		return 1;
    7bee:	bf98      	it	ls
    7bf0:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7bf2:	4413      	add	r3, r2
			ticker->lazy_current++;
    7bf4:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7bf6:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    7bf8:	3201      	adds	r2, #1
    7bfa:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    7bfc:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    7bfe:	4293      	cmp	r3, r2
    7c00:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    7c04:	bf89      	itett	hi
    7c06:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    7c08:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    7c0a:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    7c0c:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    7c0e:	bf9c      	itt	ls
    7c10:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    7c12:	60a1      	strls	r1, [r4, #8]
    7c14:	e73d      	b.n	7a92 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    7c16:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    7c18:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    7c1a:	b946      	cbnz	r6, 7c2e <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    7c1c:	9f07      	ldr	r7, [sp, #28]
    7c1e:	42b8      	cmp	r0, r7
    7c20:	d200      	bcs.n	7c24 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    7c22:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    7c24:	930b      	str	r3, [sp, #44]	; 0x2c
    7c26:	9607      	str	r6, [sp, #28]
    7c28:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    7c2c:	e740      	b.n	7ab0 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    7c2e:	9308      	str	r3, [sp, #32]
    7c30:	e7f8      	b.n	7c24 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    7c32:	b230      	sxth	r0, r6
    7c34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7c38:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    7c3c:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    7c3e:	68bf      	ldr	r7, [r7, #8]
    7c40:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    7c42:	4567      	cmp	r7, ip
    7c44:	d20a      	bcs.n	7c5c <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    7c46:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7c48:	69bf      	ldr	r7, [r7, #24]
    7c4a:	2f00      	cmp	r7, #0
    7c4c:	f47f af43 	bne.w	7ad6 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    7c50:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7c52:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    7c56:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    7c5a:	e739      	b.n	7ad0 <ticker_job+0x450>
			return TICKER_NULL;
    7c5c:	26ff      	movs	r6, #255	; 0xff
    7c5e:	e73a      	b.n	7ad6 <ticker_job+0x456>
	while (id_insert !=
    7c60:	9b08      	ldr	r3, [sp, #32]
    7c62:	4598      	cmp	r8, r3
    7c64:	f43f af59 	beq.w	7b1a <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    7c68:	9b08      	ldr	r3, [sp, #32]
    7c6a:	2bff      	cmp	r3, #255	; 0xff
    7c6c:	d0a8      	beq.n	7bc0 <ticker_job+0x540>
    7c6e:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    7c70:	b233      	sxth	r3, r6
    7c72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7c76:	9307      	str	r3, [sp, #28]
    7c78:	9a07      	ldr	r2, [sp, #28]
    7c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c7c:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    7c80:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    7c82:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    7c84:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    7c86:	bf88      	it	hi
    7c88:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    7c8a:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    7c8c:	bf8c      	ite	hi
    7c8e:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    7c90:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    7c92:	2a00      	cmp	r2, #0
    7c94:	d094      	beq.n	7bc0 <ticker_job+0x540>
    7c96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7c98:	4293      	cmp	r3, r2
    7c9a:	d891      	bhi.n	7bc0 <ticker_job+0x540>
			    skip_collide <= skip &&
    7c9c:	78fa      	ldrb	r2, [r7, #3]
    7c9e:	78e3      	ldrb	r3, [r4, #3]
    7ca0:	429a      	cmp	r2, r3
    7ca2:	d28d      	bcs.n	7bc0 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    7ca4:	4631      	mov	r1, r6
    7ca6:	4658      	mov	r0, fp
    7ca8:	f7ff fc3f 	bl	752a <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    7cac:	78bb      	ldrb	r3, [r7, #2]
    7cae:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    7cb0:	9a07      	ldr	r2, [sp, #28]
    7cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    7cb4:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    7cb6:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    7cba:	46b2      	mov	sl, r6
    7cbc:	e6e9      	b.n	7a92 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    7cbe:	2101      	movs	r1, #1
    7cc0:	e72f      	b.n	7b22 <ticker_job+0x4a2>
		user = &users[count_user];
    7cc2:	9b03      	ldr	r3, [sp, #12]
    7cc4:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    7cc8:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    7cca:	786b      	ldrb	r3, [r5, #1]
    7ccc:	78ea      	ldrb	r2, [r5, #3]
    7cce:	429a      	cmp	r2, r3
    7cd0:	d102      	bne.n	7cd8 <ticker_job+0x658>
    7cd2:	3c01      	subs	r4, #1
    7cd4:	b2e4      	uxtb	r4, r4
    7cd6:	e551      	b.n	777c <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    7cd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7cdc:	011b      	lsls	r3, r3, #4
    7cde:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    7ce0:	5cf3      	ldrb	r3, [r6, r3]
    7ce2:	2b01      	cmp	r3, #1
    7ce4:	d025      	beq.n	7d32 <ticker_job+0x6b2>
    7ce6:	2b02      	cmp	r3, #2
    7ce8:	d12a      	bne.n	7d40 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    7cea:	f8d2 c004 	ldr.w	ip, [r2, #4]
    7cee:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    7cf0:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    7cf4:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    7cf8:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    7cfc:	28ff      	cmp	r0, #255	; 0xff
    7cfe:	d004      	beq.n	7d0a <ticker_job+0x68a>
    7d00:	6819      	ldr	r1, [r3, #0]
    7d02:	f8db 7014 	ldr.w	r7, [fp, #20]
    7d06:	42b9      	cmp	r1, r7
    7d08:	d023      	beq.n	7d52 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    7d0a:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    7d0e:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    7d12:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    7d14:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    7d16:	29ff      	cmp	r1, #255	; 0xff
    7d18:	d007      	beq.n	7d2a <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    7d1a:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    7d1e:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    7d22:	6987      	ldr	r7, [r0, #24]
    7d24:	6880      	ldr	r0, [r0, #8]
    7d26:	b1df      	cbz	r7, 7d60 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    7d28:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    7d2a:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7d2e:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    7d32:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    7d34:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    7d38:	b113      	cbz	r3, 7d40 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    7d3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7d3c:	2000      	movs	r0, #0
    7d3e:	4798      	blx	r3
			first = user->first + 1;
    7d40:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    7d42:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    7d44:	3301      	adds	r3, #1
    7d46:	b2db      	uxtb	r3, r3
				first = 0;
    7d48:	429a      	cmp	r2, r3
    7d4a:	bf08      	it	eq
    7d4c:	2300      	moveq	r3, #0
			user->first = first;
    7d4e:	706b      	strb	r3, [r5, #1]
    7d50:	e7bb      	b.n	7cca <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    7d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    7d56:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    7d5a:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    7d5e:	e7da      	b.n	7d16 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    7d60:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    7d62:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    7d66:	e7d6      	b.n	7d16 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    7d68:	9b05      	ldr	r3, [sp, #20]
    7d6a:	2bff      	cmp	r3, #255	; 0xff
    7d6c:	d107      	bne.n	7d7e <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    7d6e:	f00a fc05 	bl	1257c <cntr_cnt_get>
    7d72:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    7d74:	f00a fbc4 	bl	12500 <cntr_start>
    7d78:	b908      	cbnz	r0, 7d7e <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    7d7a:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    7d7e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    7d82:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    7d86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    7d8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7d8e:	260a      	movs	r6, #10
    7d90:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    7d92:	f00a fbf3 	bl	1257c <cntr_cnt_get>
		cc = instance->ticks_current;
    7d96:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7d9a:	1b03      	subs	r3, r0, r4
    7d9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    7da0:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    7da2:	42ab      	cmp	r3, r5
    7da4:	bf2c      	ite	cs
    7da6:	18e4      	addcs	r4, r4, r3
    7da8:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    7daa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    7dae:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    7db0:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    7db4:	4620      	mov	r0, r4
    7db6:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    7db8:	f00a fbe0 	bl	1257c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7dbc:	1bc0      	subs	r0, r0, r7
    7dbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7dc2:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    7dc4:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7dc6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    7dca:	42a0      	cmp	r0, r4
    7dcc:	f67f ace8 	bls.w	77a0 <ticker_job+0x120>
		LL_ASSERT(i);
    7dd0:	3e01      	subs	r6, #1
    7dd2:	d1de      	bne.n	7d92 <ticker_job+0x712>
    7dd4:	4b11      	ldr	r3, [pc, #68]	; (7e1c <ticker_job+0x79c>)
    7dd6:	9301      	str	r3, [sp, #4]
    7dd8:	9300      	str	r3, [sp, #0]
    7dda:	4b11      	ldr	r3, [pc, #68]	; (7e20 <ticker_job+0x7a0>)
    7ddc:	4a11      	ldr	r2, [pc, #68]	; (7e24 <ticker_job+0x7a4>)
    7dde:	681c      	ldr	r4, [r3, #0]
    7de0:	4911      	ldr	r1, [pc, #68]	; (7e28 <ticker_job+0x7a8>)
    7de2:	4b12      	ldr	r3, [pc, #72]	; (7e2c <ticker_job+0x7ac>)
    7de4:	4812      	ldr	r0, [pc, #72]	; (7e30 <ticker_job+0x7b0>)
    7de6:	47a0      	blx	r4
    7de8:	4040      	eors	r0, r0
    7dea:	f380 8811 	msr	BASEPRI, r0
    7dee:	f04f 0004 	mov.w	r0, #4
    7df2:	df02      	svc	2
	instance->job_guard = 0;
    7df4:	2300      	movs	r3, #0
    7df6:	f88b 301e 	strb.w	r3, [fp, #30]
    7dfa:	e4c7      	b.n	778c <ticker_job+0x10c>
	if (!pending) {
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	d1f9      	bne.n	7df4 <ticker_job+0x774>
		flag_compare_update = 1;
    7e00:	2301      	movs	r3, #1
    7e02:	9304      	str	r3, [sp, #16]
    7e04:	e4b1      	b.n	776a <ticker_job+0xea>
	while (id_insert !=
    7e06:	45b0      	cmp	r8, r6
    7e08:	f47f af32 	bne.w	7c70 <ticker_job+0x5f0>
    7e0c:	e685      	b.n	7b1a <ticker_job+0x49a>
}
    7e0e:	b015      	add	sp, #84	; 0x54
    7e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e14:	ff172b5a 	.word	0xff172b5a
    7e18:	7f172b59 	.word	0x7f172b59
    7e1c:	0001563e 	.word	0x0001563e
    7e20:	20003a5c 	.word	0x20003a5c
    7e24:	000167b9 	.word	0x000167b9
    7e28:	00016808 	.word	0x00016808
    7e2c:	0001799e 	.word	0x0001799e
    7e30:	000179b8 	.word	0x000179b8

00007e34 <ticker_init>:
{
    7e34:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    7e36:	4d1a      	ldr	r5, [pc, #104]	; (7ea0 <ticker_init+0x6c>)
{
    7e38:	9f05      	ldr	r7, [sp, #20]
    7e3a:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    7e3e:	262c      	movs	r6, #44	; 0x2c
    7e40:	4346      	muls	r6, r0
    7e42:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    7e46:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    7e48:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    7e4c:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    7e4e:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7e52:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    7e56:	3b01      	subs	r3, #1
    7e58:	b2db      	uxtb	r3, r3
    7e5a:	2bff      	cmp	r3, #255	; 0xff
    7e5c:	d111      	bne.n	7e82 <ticker_init+0x4e>
	if (count_op) {
    7e5e:	b9ec      	cbnz	r4, 7e9c <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7e60:	222c      	movs	r2, #44	; 0x2c
    7e62:	fb02 5200 	mla	r2, r2, r0, r5
    7e66:	9908      	ldr	r1, [sp, #32]
    7e68:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    7e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
    7e6c:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7e70:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7e72:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7e74:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    7e76:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    7e78:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    7e7a:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    7e7c:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    7e7e:	4620      	mov	r0, r4
    7e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    7e82:	b21a      	sxth	r2, r3
    7e84:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    7e88:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    7e8a:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    7e8e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    7e92:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7e94:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    7e98:	b2e4      	uxtb	r4, r4
    7e9a:	e7dc      	b.n	7e56 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7e9c:	2001      	movs	r0, #1
}
    7e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ea0:	200007c4 	.word	0x200007c4

00007ea4 <ticker_trigger>:
	instance = &_instance[instance_index];
    7ea4:	4a07      	ldr	r2, [pc, #28]	; (7ec4 <ticker_trigger+0x20>)
    7ea6:	212c      	movs	r1, #44	; 0x2c
    7ea8:	fb00 2301 	mla	r3, r0, r1, r2
{
    7eac:	b410      	push	{r4}
	if (instance->sched_cb) {
    7eae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7eb0:	b12c      	cbz	r4, 7ebe <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7eb2:	46a4      	mov	ip, r4
    7eb4:	2201      	movs	r2, #1
    7eb6:	2103      	movs	r1, #3
    7eb8:	2002      	movs	r0, #2
}
    7eba:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7ebc:	4760      	bx	ip
}
    7ebe:	bc10      	pop	{r4}
    7ec0:	4770      	bx	lr
    7ec2:	bf00      	nop
    7ec4:	200007c4 	.word	0x200007c4

00007ec8 <ticker_start>:
{
    7ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7ecc:	4f25      	ldr	r7, [pc, #148]	; (7f64 <ticker_start+0x9c>)
    7ece:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    7ed2:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7ed4:	fb08 7000 	mla	r0, r8, r0, r7
    7ed8:	fa0f fc81 	sxth.w	ip, r1
    7edc:	f8d0 e004 	ldr.w	lr, [r0, #4]
    7ee0:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    7ee4:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    7ee8:	78f4      	ldrb	r4, [r6, #3]
    7eea:	1c65      	adds	r5, r4, #1
    7eec:	b2ed      	uxtb	r5, r5
		last = 0;
    7eee:	45ae      	cmp	lr, r5
    7ef0:	bf98      	it	ls
    7ef2:	2500      	movls	r5, #0
	if (last == user->first) {
    7ef4:	f896 e001 	ldrb.w	lr, [r6, #1]
    7ef8:	45ae      	cmp	lr, r5
    7efa:	d02f      	beq.n	7f5c <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    7efc:	f8d6 c004 	ldr.w	ip, [r6, #4]
    7f00:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7f04:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    7f08:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    7f0c:	f04f 0a03 	mov.w	sl, #3
    7f10:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7f14:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7f16:	9b08      	ldr	r3, [sp, #32]
    7f18:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f1c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f20:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f24:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    7f26:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7f2a:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f2e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7f32:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7f34:	2302      	movs	r3, #2
    7f36:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7f38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f3a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    7f3e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7f40:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7f42:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7f44:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7f46:	6a03      	ldr	r3, [r0, #32]
    7f48:	4608      	mov	r0, r1
    7f4a:	4798      	blx	r3
    7f4c:	fb09 7308 	mla	r3, r9, r8, r7
    7f50:	2200      	movs	r2, #0
    7f52:	2104      	movs	r1, #4
    7f54:	47a8      	blx	r5
	return user_op->status;
    7f56:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7f5c:	2001      	movs	r0, #1
}
    7f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f62:	bf00      	nop
    7f64:	200007c4 	.word	0x200007c4

00007f68 <ticker_update>:
{
    7f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7f6c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    7f70:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7f74:	fb0a 8e00 	mla	lr, sl, r0, r8
    7f78:	b20f      	sxth	r7, r1
    7f7a:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    7f7e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7f80:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    7f84:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    7f88:	78c4      	ldrb	r4, [r0, #3]
    7f8a:	1c66      	adds	r6, r4, #1
    7f8c:	b2f6      	uxtb	r6, r6
		last = 0;
    7f8e:	42b5      	cmp	r5, r6
    7f90:	bf98      	it	ls
    7f92:	2600      	movls	r6, #0
	if (last == user->first) {
    7f94:	7845      	ldrb	r5, [r0, #1]
    7f96:	42b5      	cmp	r5, r6
    7f98:	d02f      	beq.n	7ffa <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    7f9a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7f9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7fa2:	0125      	lsls	r5, r4, #4
    7fa4:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7fa8:	2704      	movs	r7, #4
    7faa:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7fae:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7fb0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7fb4:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7fb6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7fba:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7fbc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7fc0:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    7fc2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7fc6:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    7fc8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    7fcc:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    7fce:	2302      	movs	r3, #2
    7fd0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fd4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7fd8:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7fda:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7fdc:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7fde:	f8de 3020 	ldr.w	r3, [lr, #32]
    7fe2:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7fe6:	4608      	mov	r0, r1
    7fe8:	4798      	blx	r3
    7fea:	fb09 830a 	mla	r3, r9, sl, r8
    7fee:	2200      	movs	r2, #0
    7ff0:	4639      	mov	r1, r7
    7ff2:	47a8      	blx	r5
	return user_op->status;
    7ff4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7ffa:	2001      	movs	r0, #1
}
    7ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8000:	200007c4 	.word	0x200007c4

00008004 <ticker_stop>:
{
    8004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8008:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8078 <ticker_stop+0x74>
    800c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8010:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    8014:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    8016:	f8de 0004 	ldr.w	r0, [lr, #4]
    801a:	b20e      	sxth	r6, r1
    801c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    8020:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    8024:	78fc      	ldrb	r4, [r7, #3]
    8026:	1c65      	adds	r5, r4, #1
    8028:	b2ed      	uxtb	r5, r5
		last = 0;
    802a:	42a8      	cmp	r0, r5
    802c:	bf98      	it	ls
    802e:	2500      	movls	r5, #0
	if (last == user->first) {
    8030:	7878      	ldrb	r0, [r7, #1]
    8032:	42a8      	cmp	r0, r5
    8034:	d01d      	beq.n	8072 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    8036:	6878      	ldr	r0, [r7, #4]
    8038:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    803c:	0124      	lsls	r4, r4, #4
    803e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    8040:	f04f 0c05 	mov.w	ip, #5
    8044:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    8048:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    804a:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    804c:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    804e:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    8050:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    8052:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8054:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8056:	f8de 3020 	ldr.w	r3, [lr, #32]
    805a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    805e:	4608      	mov	r0, r1
    8060:	4798      	blx	r3
    8062:	fb08 930a 	mla	r3, r8, sl, r9
    8066:	2200      	movs	r2, #0
    8068:	2104      	movs	r1, #4
    806a:	47a0      	blx	r4
	return user_op->status;
    806c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8072:	2001      	movs	r0, #1
}
    8074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8078:	200007c4 	.word	0x200007c4

0000807c <ticker_next_slot_get>:
{
    807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8080:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80fc <ticker_next_slot_get+0x80>
    8084:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    8088:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    808a:	fb0a 8000 	mla	r0, sl, r0, r8
    808e:	fa0f fe81 	sxth.w	lr, r1
    8092:	6845      	ldr	r5, [r0, #4]
    8094:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    8098:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    809c:	78fc      	ldrb	r4, [r7, #3]
    809e:	1c66      	adds	r6, r4, #1
    80a0:	b2f6      	uxtb	r6, r6
		last = 0;
    80a2:	42b5      	cmp	r5, r6
    80a4:	bf98      	it	ls
    80a6:	2600      	movls	r6, #0
	if (last == user->first) {
    80a8:	787d      	ldrb	r5, [r7, #1]
    80aa:	42b5      	cmp	r5, r6
    80ac:	d023      	beq.n	80f6 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    80ae:	f8d7 c004 	ldr.w	ip, [r7, #4]
    80b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    80b6:	0125      	lsls	r5, r4, #4
    80b8:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    80bc:	f04f 0e02 	mov.w	lr, #2
    80c0:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    80c4:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    80c6:	9b08      	ldr	r3, [sp, #32]
    80c8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    80ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80cc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    80ce:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    80d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    80d2:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    80d4:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    80d6:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    80da:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    80dc:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    80de:	6a45      	ldr	r5, [r0, #36]	; 0x24
    80e0:	6a03      	ldr	r3, [r0, #32]
    80e2:	4608      	mov	r0, r1
    80e4:	4798      	blx	r3
    80e6:	fb09 830a 	mla	r3, r9, sl, r8
    80ea:	2200      	movs	r2, #0
    80ec:	2104      	movs	r1, #4
    80ee:	47a8      	blx	r5
	return user_op->status;
    80f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    80f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    80f6:	2001      	movs	r0, #1
}
    80f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80fc:	200007c4 	.word	0x200007c4

00008100 <ticker_job_idle_get>:
{
    8100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8104:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8174 <ticker_job_idle_get+0x74>
    8108:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    810c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    8110:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    8112:	f8de 0004 	ldr.w	r0, [lr, #4]
    8116:	b20e      	sxth	r6, r1
    8118:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    811c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    8120:	78fc      	ldrb	r4, [r7, #3]
    8122:	1c65      	adds	r5, r4, #1
    8124:	b2ed      	uxtb	r5, r5
		last = 0;
    8126:	42a8      	cmp	r0, r5
    8128:	bf98      	it	ls
    812a:	2500      	movls	r5, #0
	if (last == user->first) {
    812c:	7878      	ldrb	r0, [r7, #1]
    812e:	42a8      	cmp	r0, r5
    8130:	d01d      	beq.n	816e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    8132:	6878      	ldr	r0, [r7, #4]
    8134:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8138:	0124      	lsls	r4, r4, #4
    813a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    813c:	f04f 0c01 	mov.w	ip, #1
    8140:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    8144:	20ff      	movs	r0, #255	; 0xff
    8146:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    8148:	2002      	movs	r0, #2
    814a:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    814c:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    814e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8150:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8152:	f8de 3020 	ldr.w	r3, [lr, #32]
    8156:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    815a:	4608      	mov	r0, r1
    815c:	4798      	blx	r3
    815e:	fb08 930a 	mla	r3, r8, sl, r9
    8162:	2200      	movs	r2, #0
    8164:	2104      	movs	r1, #4
    8166:	47a0      	blx	r4
	return user_op->status;
    8168:	6a70      	ldr	r0, [r6, #36]	; 0x24
    816a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    816e:	2001      	movs	r0, #1
}
    8170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8174:	200007c4 	.word	0x200007c4

00008178 <ticker_job_sched>:
{
    8178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    817c:	4c08      	ldr	r4, [pc, #32]	; (81a0 <ticker_job_sched+0x28>)
    817e:	252c      	movs	r5, #44	; 0x2c
    8180:	fb05 4300 	mla	r3, r5, r0, r4
{
    8184:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8186:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    8188:	6a1b      	ldr	r3, [r3, #32]
    818a:	4608      	mov	r0, r1
    818c:	4798      	blx	r3
    818e:	fb06 4305 	mla	r3, r6, r5, r4
    8192:	46bc      	mov	ip, r7
    8194:	2200      	movs	r2, #0
    8196:	2104      	movs	r1, #4
}
    8198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    819c:	4760      	bx	ip
    819e:	bf00      	nop
    81a0:	200007c4 	.word	0x200007c4

000081a4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    81a4:	f00a b9ea 	b.w	1257c <cntr_cnt_get>

000081a8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    81a8:	1a40      	subs	r0, r0, r1
}
    81aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    81ae:	4770      	bx	lr

000081b0 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    81b0:	b508      	push	{r3, lr}
    81b2:	4603      	mov	r3, r0
	if (addr_type > 1) {
    81b4:	2b01      	cmp	r3, #1
{
    81b6:	4608      	mov	r0, r1
	if (addr_type > 1) {
    81b8:	d80e      	bhi.n	81d8 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    81ba:	b133      	cbz	r3, 81ca <ll_addr_get+0x1a>
		if (bdaddr) {
    81bc:	b119      	cbz	r1, 81c6 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    81be:	2206      	movs	r2, #6
    81c0:	4906      	ldr	r1, [pc, #24]	; (81dc <ll_addr_get+0x2c>)
    81c2:	f7f9 fe2f 	bl	1e24 <memcpy>
		}

		return rnd_addr;
    81c6:	4805      	ldr	r0, [pc, #20]	; (81dc <ll_addr_get+0x2c>)
    81c8:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    81ca:	b119      	cbz	r1, 81d4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    81cc:	2206      	movs	r2, #6
    81ce:	4904      	ldr	r1, [pc, #16]	; (81e0 <ll_addr_get+0x30>)
    81d0:	f7f9 fe28 	bl	1e24 <memcpy>
	}

	return pub_addr;
    81d4:	4802      	ldr	r0, [pc, #8]	; (81e0 <ll_addr_get+0x30>)
}
    81d6:	bd08      	pop	{r3, pc}
		return NULL;
    81d8:	2000      	movs	r0, #0
    81da:	bd08      	pop	{r3, pc}
    81dc:	20000822 	.word	0x20000822
    81e0:	2000081c 	.word	0x2000081c

000081e4 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    81e4:	b570      	push	{r4, r5, r6, lr}
    81e6:	4606      	mov	r6, r0
    81e8:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    81ea:	f008 fa09 	bl	10600 <ll_adv_is_enabled>
    81ee:	4604      	mov	r4, r0
    81f0:	b110      	cbz	r0, 81f8 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    81f2:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    81f4:	4620      	mov	r0, r4
    81f6:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    81f8:	f008 fa16 	bl	10628 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    81fc:	f010 0f06 	tst.w	r0, #6
    8200:	d1f7      	bne.n	81f2 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    8202:	2206      	movs	r2, #6
    8204:	4629      	mov	r1, r5
	if (addr_type) {
    8206:	b11e      	cbz	r6, 8210 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    8208:	4802      	ldr	r0, [pc, #8]	; (8214 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    820a:	f7f9 fe0b 	bl	1e24 <memcpy>
    820e:	e7f1      	b.n	81f4 <ll_addr_set+0x10>
    8210:	4801      	ldr	r0, [pc, #4]	; (8218 <ll_addr_set+0x34>)
    8212:	e7fa      	b.n	820a <ll_addr_set+0x26>
    8214:	20000822 	.word	0x20000822
    8218:	2000081c 	.word	0x2000081c

0000821c <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    821c:	2300      	movs	r3, #0
    821e:	7003      	strb	r3, [r0, #0]
	*max = 0;
    8220:	700b      	strb	r3, [r1, #0]
    8222:	4770      	bx	lr

00008224 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    8224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8226:	4607      	mov	r7, r0
    8228:	460e      	mov	r6, r1
	while (len) {
    822a:	460c      	mov	r4, r1
    822c:	1b35      	subs	r5, r6, r4
    822e:	443d      	add	r5, r7
    8230:	b18c      	cbz	r4, 8256 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    8232:	f7f8 fed9 	bl	fe8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    8236:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    8238:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    823a:	d907      	bls.n	824c <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    823c:	2204      	movs	r2, #4
    823e:	eb0d 0102 	add.w	r1, sp, r2
    8242:	4628      	mov	r0, r5
    8244:	f7f9 fdee 	bl	1e24 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    8248:	3c04      	subs	r4, #4
    824a:	e7ef      	b.n	822c <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    824c:	4622      	mov	r2, r4
    824e:	a901      	add	r1, sp, #4
    8250:	4628      	mov	r0, r5
    8252:	f7f9 fde7 	bl	1e24 <memcpy>
			break;
		}
	}

	return 0;
}
    8256:	2000      	movs	r0, #0
    8258:	b003      	add	sp, #12
    825a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000825c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    825c:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    825e:	2300      	movs	r3, #0
    8260:	f00a f9c0 	bl	125e4 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    8264:	2000      	movs	r0, #0
    8266:	bd08      	pop	{r3, pc}

00008268 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8268:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    826a:	4802      	ldr	r0, [pc, #8]	; (8274 <_hci_driver_init+0xc>)
    826c:	f7fb fce4 	bl	3c38 <bt_hci_driver_register>

	return 0;
}
    8270:	2000      	movs	r0, #0
    8272:	bd08      	pop	{r3, pc}
    8274:	00017a08 	.word	0x00017a08

00008278 <recv_thread>:
{
    8278:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    827a:	4d29      	ldr	r5, [pc, #164]	; (8320 <recv_thread+0xa8>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    827c:	2600      	movs	r6, #0
    827e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8282:	4628      	mov	r0, r5
    8284:	f00b fe8e 	bl	13fa4 <_impl_k_queue_get>
		if (node_rx && !buf) {
    8288:	4604      	mov	r4, r0
    828a:	2800      	cmp	r0, #0
    828c:	d037      	beq.n	82fe <recv_thread+0x86>
	s8_t class = hci_get_class(node_rx);
    828e:	f001 fd43 	bl	9d18 <hci_get_class>
	switch (class) {
    8292:	1e03      	subs	r3, r0, #0
    8294:	9403      	str	r4, [sp, #12]
    8296:	db03      	blt.n	82a0 <recv_thread+0x28>
    8298:	2b02      	cmp	r3, #2
    829a:	dd11      	ble.n	82c0 <recv_thread+0x48>
    829c:	2b03      	cmp	r3, #3
    829e:	d031      	beq.n	8304 <recv_thread+0x8c>
		LL_ASSERT(0);
    82a0:	4b20      	ldr	r3, [pc, #128]	; (8324 <recv_thread+0xac>)
    82a2:	9301      	str	r3, [sp, #4]
    82a4:	9300      	str	r3, [sp, #0]
    82a6:	4b20      	ldr	r3, [pc, #128]	; (8328 <recv_thread+0xb0>)
    82a8:	4a20      	ldr	r2, [pc, #128]	; (832c <recv_thread+0xb4>)
    82aa:	681c      	ldr	r4, [r3, #0]
    82ac:	4920      	ldr	r1, [pc, #128]	; (8330 <recv_thread+0xb8>)
    82ae:	4b21      	ldr	r3, [pc, #132]	; (8334 <recv_thread+0xbc>)
    82b0:	4821      	ldr	r0, [pc, #132]	; (8338 <recv_thread+0xc0>)
    82b2:	47a0      	blx	r4
    82b4:	4040      	eors	r0, r0
    82b6:	f380 8811 	msr	BASEPRI, r0
    82ba:	f04f 0004 	mov.w	r0, #4
    82be:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    82c0:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    82c2:	bf0e      	itee	eq
    82c4:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    82c6:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    82ca:	2001      	movne	r0, #1
    82cc:	f7fb fda4 	bl	3e18 <bt_buf_get_rx>
    82d0:	4604      	mov	r4, r0
		if (buf) {
    82d2:	b118      	cbz	r0, 82dc <recv_thread+0x64>
			hci_evt_encode(node_rx, buf);
    82d4:	4601      	mov	r1, r0
    82d6:	9803      	ldr	r0, [sp, #12]
    82d8:	f001 f952 	bl	9580 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    82dc:	9b03      	ldr	r3, [sp, #12]
    82de:	2100      	movs	r1, #0
    82e0:	88d8      	ldrh	r0, [r3, #6]
    82e2:	f008 fe0f 	bl	10f04 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    82e6:	a804      	add	r0, sp, #16
    82e8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    82ec:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    82ee:	f008 fd91 	bl	10e14 <ll_rx_mem_release>
		if (buf) {
    82f2:	b124      	cbz	r4, 82fe <recv_thread+0x86>
			if (buf->len) {
    82f4:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    82f6:	4620      	mov	r0, r4
			if (buf->len) {
    82f8:	b173      	cbz	r3, 8318 <recv_thread+0xa0>
				bt_recv(buf);
    82fa:	f7fb f807 	bl	330c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    82fe:	f00c f943 	bl	14588 <_impl_k_yield>
    8302:	e7bc      	b.n	827e <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    8304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8308:	f7fb fd86 	bl	3e18 <bt_buf_get_rx>
    830c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    830e:	4601      	mov	r1, r0
    8310:	9803      	ldr	r0, [sp, #12]
    8312:	f001 f8f3 	bl	94fc <hci_acl_encode>
    8316:	e7e1      	b.n	82dc <recv_thread+0x64>
				net_buf_unref(buf);
    8318:	f00a ffa8 	bl	1326c <net_buf_unref>
    831c:	e7ef      	b.n	82fe <recv_thread+0x86>
    831e:	bf00      	nop
    8320:	20003f1c 	.word	0x20003f1c
    8324:	0001563e 	.word	0x0001563e
    8328:	20003a5c 	.word	0x20003a5c
    832c:	000167b9 	.word	0x000167b9
    8330:	00016808 	.word	0x00016808
    8334:	000179db 	.word	0x000179db
    8338:	00016758 	.word	0x00016758

0000833c <hci_driver_send>:
{
    833c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    833e:	8983      	ldrh	r3, [r0, #12]
{
    8340:	b087      	sub	sp, #28
    8342:	4605      	mov	r5, r0
	if (!buf->len) {
    8344:	b973      	cbnz	r3, 8364 <hci_driver_send+0x28>
		BT_ERR("Empty HCI packet");
    8346:	4b21      	ldr	r3, [pc, #132]	; (83cc <hci_driver_send+0x90>)
    8348:	9301      	str	r3, [sp, #4]
    834a:	9300      	str	r3, [sp, #0]
    834c:	4b20      	ldr	r3, [pc, #128]	; (83d0 <hci_driver_send+0x94>)
    834e:	4a21      	ldr	r2, [pc, #132]	; (83d4 <hci_driver_send+0x98>)
    8350:	681c      	ldr	r4, [r3, #0]
    8352:	4921      	ldr	r1, [pc, #132]	; (83d8 <hci_driver_send+0x9c>)
    8354:	4b21      	ldr	r3, [pc, #132]	; (83dc <hci_driver_send+0xa0>)
    8356:	4822      	ldr	r0, [pc, #136]	; (83e0 <hci_driver_send+0xa4>)
    8358:	47a0      	blx	r4
		return -EINVAL;
    835a:	f06f 0415 	mvn.w	r4, #21
}
    835e:	4620      	mov	r0, r4
    8360:	b007      	add	sp, #28
    8362:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8364:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    8366:	b183      	cbz	r3, 838a <hci_driver_send+0x4e>
    8368:	2b02      	cmp	r3, #2
    836a:	d11f      	bne.n	83ac <hci_driver_send+0x70>
	err = hci_acl_handle(buf, &evt);
    836c:	a905      	add	r1, sp, #20
    836e:	f001 f82d 	bl	93cc <hci_acl_handle>
    8372:	4604      	mov	r4, r0
	if (evt) {
    8374:	9805      	ldr	r0, [sp, #20]
    8376:	b108      	cbz	r0, 837c <hci_driver_send+0x40>
		bt_recv_prio(evt);
    8378:	f7fb fb66 	bl	3a48 <bt_recv_prio>
	if (!err) {
    837c:	2c00      	cmp	r4, #0
    837e:	d1ee      	bne.n	835e <hci_driver_send+0x22>
		net_buf_unref(buf);
    8380:	4628      	mov	r0, r5
    8382:	f00a ff73 	bl	1326c <net_buf_unref>
    8386:	2400      	movs	r4, #0
    8388:	e7e9      	b.n	835e <hci_driver_send+0x22>
	evt = hci_cmd_handle(buf);
    838a:	f000 fab3 	bl	88f4 <hci_cmd_handle>
	if (evt) {
    838e:	4602      	mov	r2, r0
    8390:	2800      	cmp	r0, #0
    8392:	d0f5      	beq.n	8380 <hci_driver_send+0x44>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    8394:	6883      	ldr	r3, [r0, #8]
    8396:	7819      	ldrb	r1, [r3, #0]
    8398:	2913      	cmp	r1, #19
    839a:	d813      	bhi.n	83c4 <hci_driver_send+0x88>
    839c:	2301      	movs	r3, #1
    839e:	408b      	lsls	r3, r1
    83a0:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    83a4:	d00e      	beq.n	83c4 <hci_driver_send+0x88>
			bt_recv_prio(evt);
    83a6:	f7fb fb4f 	bl	3a48 <bt_recv_prio>
    83aa:	e7e9      	b.n	8380 <hci_driver_send+0x44>
		BT_ERR("Unknown HCI type %u", type);
    83ac:	4a07      	ldr	r2, [pc, #28]	; (83cc <hci_driver_send+0x90>)
    83ae:	9202      	str	r2, [sp, #8]
    83b0:	e88d 000c 	stmia.w	sp, {r2, r3}
    83b4:	4b06      	ldr	r3, [pc, #24]	; (83d0 <hci_driver_send+0x94>)
    83b6:	4a07      	ldr	r2, [pc, #28]	; (83d4 <hci_driver_send+0x98>)
    83b8:	681c      	ldr	r4, [r3, #0]
    83ba:	4907      	ldr	r1, [pc, #28]	; (83d8 <hci_driver_send+0x9c>)
    83bc:	4b07      	ldr	r3, [pc, #28]	; (83dc <hci_driver_send+0xa0>)
    83be:	4809      	ldr	r0, [pc, #36]	; (83e4 <hci_driver_send+0xa8>)
    83c0:	47a0      	blx	r4
    83c2:	e7ca      	b.n	835a <hci_driver_send+0x1e>
			bt_recv(evt);
    83c4:	4610      	mov	r0, r2
    83c6:	f7fa ffa1 	bl	330c <bt_recv>
    83ca:	e7d9      	b.n	8380 <hci_driver_send+0x44>
    83cc:	0001563e 	.word	0x0001563e
    83d0:	20003a5c 	.word	0x20003a5c
    83d4:	000167b9 	.word	0x000167b9
    83d8:	00016808 	.word	0x00016808
    83dc:	000179e7 	.word	0x000179e7
    83e0:	00017a49 	.word	0x00017a49
    83e4:	00017a6a 	.word	0x00017a6a

000083e8 <prio_recv_thread>:
{
    83e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    83ea:	4d14      	ldr	r5, [pc, #80]	; (843c <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    83ec:	4e14      	ldr	r6, [pc, #80]	; (8440 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    83ee:	f10d 0102 	add.w	r1, sp, #2
    83f2:	a801      	add	r0, sp, #4
    83f4:	f008 fcd6 	bl	10da4 <ll_rx_get>
    83f8:	4604      	mov	r4, r0
    83fa:	b940      	cbnz	r0, 840e <prio_recv_thread+0x26>
		if (node_rx) {
    83fc:	9b01      	ldr	r3, [sp, #4]
    83fe:	b1bb      	cbz	r3, 8430 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    8400:	f008 ffb8 	bl	11374 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    8404:	9901      	ldr	r1, [sp, #4]
    8406:	4630      	mov	r0, r6
    8408:	f00b fd94 	bl	13f34 <k_queue_append>
    840c:	e7ef      	b.n	83ee <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    840e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8412:	2001      	movs	r0, #1
    8414:	f7fb fd00 	bl	3e18 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8418:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    841a:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    841c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    8420:	f001 fc66 	bl	9cf0 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    8424:	4638      	mov	r0, r7
    8426:	f7fb fb0f 	bl	3a48 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    842a:	f00c f8ad 	bl	14588 <_impl_k_yield>
    842e:	e7de      	b.n	83ee <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8434:	4628      	mov	r0, r5
    8436:	f00c f953 	bl	146e0 <_impl_k_sem_take>
    843a:	e7d8      	b.n	83ee <prio_recv_thread+0x6>
    843c:	20003f04 	.word	0x20003f04
    8440:	20003f1c 	.word	0x20003f1c

00008444 <hci_driver_open>:
{
    8444:	b530      	push	{r4, r5, lr}
	err = ll_init(&sem_prio_recv);
    8446:	481a      	ldr	r0, [pc, #104]	; (84b0 <hci_driver_open+0x6c>)
{
    8448:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    844a:	f009 f87d 	bl	11548 <ll_init>
	if (err) {
    844e:	4604      	mov	r4, r0
    8450:	b168      	cbz	r0, 846e <hci_driver_open+0x2a>
		BT_ERR("LL initialization failed: %u", err);
    8452:	4b18      	ldr	r3, [pc, #96]	; (84b4 <hci_driver_open+0x70>)
    8454:	9302      	str	r3, [sp, #8]
    8456:	e88d 0018 	stmia.w	sp, {r3, r4}
    845a:	4b17      	ldr	r3, [pc, #92]	; (84b8 <hci_driver_open+0x74>)
    845c:	4a17      	ldr	r2, [pc, #92]	; (84bc <hci_driver_open+0x78>)
    845e:	681d      	ldr	r5, [r3, #0]
    8460:	4917      	ldr	r1, [pc, #92]	; (84c0 <hci_driver_open+0x7c>)
    8462:	4b18      	ldr	r3, [pc, #96]	; (84c4 <hci_driver_open+0x80>)
    8464:	4818      	ldr	r0, [pc, #96]	; (84c8 <hci_driver_open+0x84>)
    8466:	47a8      	blx	r5
}
    8468:	4620      	mov	r0, r4
    846a:	b007      	add	sp, #28
    846c:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    846e:	f001 fc6b 	bl	9d48 <hci_init>

    8472:	f06f 0309 	mvn.w	r3, #9
    8476:	9303      	str	r3, [sp, #12]
    8478:	9405      	str	r4, [sp, #20]
    847a:	9404      	str	r4, [sp, #16]
    847c:	9402      	str	r4, [sp, #8]
    847e:	9401      	str	r4, [sp, #4]
    8480:	9400      	str	r4, [sp, #0]
    8482:	4b12      	ldr	r3, [pc, #72]	; (84cc <hci_driver_open+0x88>)
    8484:	4912      	ldr	r1, [pc, #72]	; (84d0 <hci_driver_open+0x8c>)
    8486:	4813      	ldr	r0, [pc, #76]	; (84d4 <hci_driver_open+0x90>)
    8488:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    848c:	f00c fb1c 	bl	14ac8 <_impl_k_thread_create>
    8490:	f06f 0307 	mvn.w	r3, #7
    8494:	9303      	str	r3, [sp, #12]
    8496:	9405      	str	r4, [sp, #20]
    8498:	9404      	str	r4, [sp, #16]
    849a:	9402      	str	r4, [sp, #8]
    849c:	9401      	str	r4, [sp, #4]
    849e:	9400      	str	r4, [sp, #0]
    84a0:	4b0d      	ldr	r3, [pc, #52]	; (84d8 <hci_driver_open+0x94>)
    84a2:	490e      	ldr	r1, [pc, #56]	; (84dc <hci_driver_open+0x98>)
    84a4:	480e      	ldr	r0, [pc, #56]	; (84e0 <hci_driver_open+0x9c>)
    84a6:	f240 522c 	movw	r2, #1324	; 0x52c
    84aa:	f00c fb0d 	bl	14ac8 <_impl_k_thread_create>
    84ae:	e7db      	b.n	8468 <hci_driver_open+0x24>
    84b0:	20003f04 	.word	0x20003f04
    84b4:	0001563e 	.word	0x0001563e
    84b8:	20003a5c 	.word	0x20003a5c
    84bc:	000167b9 	.word	0x000167b9
    84c0:	00016808 	.word	0x00016808
    84c4:	000179f7 	.word	0x000179f7
    84c8:	00017a1c 	.word	0x00017a1c
    84cc:	000083e9 	.word	0x000083e9
    84d0:	200020c0 	.word	0x200020c0
    84d4:	200018a0 	.word	0x200018a0
    84d8:	00008279 	.word	0x00008279
    84dc:	200023b0 	.word	0x200023b0
    84e0:	20001830 	.word	0x20001830

000084e4 <sys_put_le32>:
	dst[1] = val >> 8;
    84e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    84e8:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    84ea:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    84ec:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    84ee:	0a00      	lsrs	r0, r0, #8
    84f0:	704b      	strb	r3, [r1, #1]
    84f2:	70c8      	strb	r0, [r1, #3]
    84f4:	4770      	bx	lr

000084f6 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    84f6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    84f8:	3008      	adds	r0, #8
{
    84fa:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    84fc:	2102      	movs	r1, #2
{
    84fe:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    8500:	f00a fee6 	bl	132d0 <net_buf_simple_add>
	hdr->evt = evt;
    8504:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    8506:	7044      	strb	r4, [r0, #1]
    8508:	bd38      	pop	{r3, r4, r5, pc}
	...

0000850c <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    850c:	b538      	push	{r3, r4, r5, lr}
    850e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8514:	f7fb fca8 	bl	3e68 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8518:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    851a:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    851c:	210f      	movs	r1, #15
    851e:	f7ff ffea 	bl	84f6 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8522:	2104      	movs	r1, #4
    8524:	f104 0008 	add.w	r0, r4, #8
    8528:	f00a fed2 	bl	132d0 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    852c:	2301      	movs	r3, #1
    852e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8530:	4b02      	ldr	r3, [pc, #8]	; (853c <cmd_status+0x30>)
	cs->status = status;
    8532:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8534:	881b      	ldrh	r3, [r3, #0]
    8536:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8538:	4620      	mov	r0, r4
    853a:	bd38      	pop	{r3, r4, r5, pc}
    853c:	20000828 	.word	0x20000828

00008540 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8540:	b570      	push	{r4, r5, r6, lr}
    8542:	4604      	mov	r4, r0
    8544:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8546:	3201      	adds	r2, #1
{
    8548:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    854a:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    854c:	b2d2      	uxtb	r2, r2
    854e:	213e      	movs	r1, #62	; 0x3e
    8550:	f7ff ffd1 	bl	84f6 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8554:	2101      	movs	r1, #1
    8556:	4620      	mov	r0, r4
    8558:	f00a feba 	bl	132d0 <net_buf_simple_add>
	me->subevent = subevt;
    855c:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    855e:	4629      	mov	r1, r5
    8560:	4620      	mov	r0, r4
}
    8562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8566:	f00a beb3 	b.w	132d0 <net_buf_simple_add>
	...

0000856c <cmd_complete>:
{
    856c:	b538      	push	{r3, r4, r5, lr}
    856e:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8574:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8576:	f7fb fc77 	bl	3e68 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    857a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    857c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    857e:	b2d2      	uxtb	r2, r2
    8580:	210e      	movs	r1, #14
    8582:	f7ff ffb8 	bl	84f6 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8586:	6820      	ldr	r0, [r4, #0]
    8588:	2103      	movs	r1, #3
    858a:	3008      	adds	r0, #8
    858c:	f00a fea0 	bl	132d0 <net_buf_simple_add>
	cc->ncmd = 1;
    8590:	2301      	movs	r3, #1
    8592:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8594:	4b05      	ldr	r3, [pc, #20]	; (85ac <cmd_complete+0x40>)
    8596:	881b      	ldrh	r3, [r3, #0]
    8598:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    859c:	6820      	ldr	r0, [r4, #0]
    859e:	4629      	mov	r1, r5
    85a0:	3008      	adds	r0, #8
}
    85a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    85a6:	f00a be93 	b.w	132d0 <net_buf_simple_add>
    85aa:	bf00      	nop
    85ac:	20000828 	.word	0x20000828

000085b0 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    85b0:	4b0e      	ldr	r3, [pc, #56]	; (85ec <encrypt_change+0x3c>)
{
    85b2:	b570      	push	{r4, r5, r6, lr}
    85b4:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    85b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    85ba:	2300      	movs	r3, #0
    85bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
    85c0:	4313      	orrs	r3, r2
{
    85c2:	4604      	mov	r4, r0
    85c4:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    85c6:	d010      	beq.n	85ea <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    85c8:	2204      	movs	r2, #4
    85ca:	2108      	movs	r1, #8
    85cc:	4628      	mov	r0, r5
    85ce:	f7ff ff92 	bl	84f6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    85d2:	2104      	movs	r1, #4
    85d4:	f105 0008 	add.w	r0, r5, #8
    85d8:	f00a fe7a 	bl	132d0 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    85dc:	fab4 f384 	clz	r3, r4
    85e0:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    85e2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    85e4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    85e8:	70c3      	strb	r3, [r0, #3]
    85ea:	bd70      	pop	{r4, r5, r6, pc}
    85ec:	20003d28 	.word	0x20003d28

000085f0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    85f0:	b570      	push	{r4, r5, r6, lr}
    85f2:	4604      	mov	r4, r0
    85f4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    85f6:	4b13      	ldr	r3, [pc, #76]	; (8644 <le_remote_feat_complete+0x54>)
{
    85f8:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    85fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    85fe:	2200      	movs	r2, #0
    8600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8604:	4313      	orrs	r3, r2
{
    8606:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8608:	d01b      	beq.n	8642 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    860a:	4b0f      	ldr	r3, [pc, #60]	; (8648 <le_remote_feat_complete+0x58>)
    860c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8610:	2300      	movs	r3, #0
    8612:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8616:	4313      	orrs	r3, r2
    8618:	d013      	beq.n	8642 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    861a:	220b      	movs	r2, #11
    861c:	2104      	movs	r1, #4
    861e:	f7ff ff8f 	bl	8540 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8622:	2208      	movs	r2, #8
	sep->status = status;
    8624:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8626:	f8a0 6001 	strh.w	r6, [r0, #1]
    862a:	3003      	adds	r0, #3
	if (!status) {
    862c:	b924      	cbnz	r4, 8638 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    862e:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    8634:	f7f9 bbf6 	b.w	1e24 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8638:	2100      	movs	r1, #0
}
    863a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    863e:	f7f9 bc1d 	b.w	1e7c <memset>
    8642:	bd70      	pop	{r4, r5, r6, pc}
    8644:	20003d28 	.word	0x20003d28
    8648:	20003d30 	.word	0x20003d30

0000864c <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    864c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8650:	4605      	mov	r5, r0
    8652:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8654:	4b46      	ldr	r3, [pc, #280]	; (8770 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8656:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8658:	e9d3 2300 	ldrd	r2, r3, [r3]
    865c:	f240 2801 	movw	r8, #513	; 0x201
    8660:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8664:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8668:	ea03 0309 	and.w	r3, r3, r9
    866c:	ea02 0208 	and.w	r2, r2, r8
    8670:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8672:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8674:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8678:	d077      	beq.n	876a <le_conn_complete.part.39+0x11e>
	if (!status) {
    867a:	2d00      	cmp	r5, #0
    867c:	d150      	bne.n	8720 <le_conn_complete.part.39+0xd4>
		conn_count++;
    867e:	4a3d      	ldr	r2, [pc, #244]	; (8774 <le_conn_complete.part.39+0x128>)
    8680:	6813      	ldr	r3, [r2, #0]
    8682:	3301      	adds	r3, #1
    8684:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8686:	ea5a 030b 	orrs.w	r3, sl, fp
    868a:	f101 0803 	add.w	r8, r1, #3
    868e:	d151      	bne.n	8734 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8690:	2212      	movs	r2, #18
    8692:	2101      	movs	r1, #1
    8694:	f7ff ff54 	bl	8540 <meta_evt>
	lecc->status = 0x00;
    8698:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    869a:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    869e:	7863      	ldrb	r3, [r4, #1]
    86a0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    86a2:	78a3      	ldrb	r3, [r4, #2]
    86a4:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    86a6:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    86a8:	2206      	movs	r2, #6
    86aa:	4641      	mov	r1, r8
    86ac:	3005      	adds	r0, #5
    86ae:	f7f9 fbb9 	bl	1e24 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    86b2:	8ae3      	ldrh	r3, [r4, #22]
    86b4:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    86b8:	8b23      	ldrh	r3, [r4, #24]
    86ba:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    86be:	8b63      	ldrh	r3, [r4, #26]
    86c0:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    86c4:	7f23      	ldrb	r3, [r4, #28]
    86c6:	747b      	strb	r3, [r7, #17]
    86c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    86cc:	221e      	movs	r2, #30
    86ce:	210a      	movs	r1, #10
    86d0:	f7ff ff36 	bl	8540 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    86d4:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    86d6:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    86d8:	2100      	movs	r1, #0
    86da:	f7f9 fbcf 	bl	1e7c <memset>
		lecc->status = status;
    86de:	7025      	strb	r5, [r4, #0]
    86e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    86e4:	7d63      	ldrb	r3, [r4, #21]
    86e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    86ea:	2b40      	cmp	r3, #64	; 0x40
    86ec:	d138      	bne.n	8760 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    86ee:	2206      	movs	r2, #6
    86f0:	f104 0110 	add.w	r1, r4, #16
    86f4:	f7f9 fb96 	bl	1e24 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    86f8:	2206      	movs	r2, #6
    86fa:	f104 0109 	add.w	r1, r4, #9
    86fe:	f107 0011 	add.w	r0, r7, #17
    8702:	f7f9 fb8f 	bl	1e24 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8706:	8ae3      	ldrh	r3, [r4, #22]
    8708:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    870c:	8b23      	ldrh	r3, [r4, #24]
    870e:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8712:	8b63      	ldrh	r3, [r4, #26]
    8714:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    8718:	7f23      	ldrb	r3, [r4, #28]
    871a:	777b      	strb	r3, [r7, #29]
    871c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8720:	ea5a 030b 	orrs.w	r3, sl, fp
    8724:	d1d2      	bne.n	86cc <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8726:	2212      	movs	r2, #18
    8728:	2101      	movs	r1, #1
    872a:	f7ff ff09 	bl	8540 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    872e:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8730:	4604      	mov	r4, r0
    8732:	e7d1      	b.n	86d8 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8734:	221e      	movs	r2, #30
    8736:	210a      	movs	r1, #10
    8738:	f7ff ff02 	bl	8540 <meta_evt>
		leecc->status = 0x00;
    873c:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    873e:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    8742:	7863      	ldrb	r3, [r4, #1]
    8744:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    8746:	78a3      	ldrb	r3, [r4, #2]
    8748:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    874a:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    874c:	2206      	movs	r2, #6
    874e:	4641      	mov	r1, r8
    8750:	3005      	adds	r0, #5
    8752:	f7f9 fb67 	bl	1e24 <memcpy>
		if ((radio_cc->own_addr_type) &&
    8756:	7be3      	ldrb	r3, [r4, #15]
    8758:	f107 000b 	add.w	r0, r7, #11
    875c:	2b00      	cmp	r3, #0
    875e:	d1c1      	bne.n	86e4 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    8760:	2206      	movs	r2, #6
    8762:	2100      	movs	r1, #0
    8764:	f7f9 fb8a 	bl	1e7c <memset>
    8768:	e7c6      	b.n	86f8 <le_conn_complete.part.39+0xac>
    876a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    876e:	bf00      	nop
    8770:	20003d30 	.word	0x20003d30
    8774:	2000082c 	.word	0x2000082c

00008778 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8778:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    877a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    877c:	b08a      	sub	sp, #40	; 0x28
    877e:	4604      	mov	r4, r0
    8780:	460e      	mov	r6, r1
    8782:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    8784:	2b03      	cmp	r3, #3
    8786:	d820      	bhi.n	87ca <bt_addr_le_to_str.constprop.70+0x52>
    8788:	e8df f003 	tbb	[pc, r3]
    878c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    8790:	4911      	ldr	r1, [pc, #68]	; (87d8 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    8792:	4628      	mov	r0, r5
    8794:	f7f9 fb12 	bl	1dbc <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8798:	7862      	ldrb	r2, [r4, #1]
    879a:	9204      	str	r2, [sp, #16]
    879c:	78a2      	ldrb	r2, [r4, #2]
    879e:	9203      	str	r2, [sp, #12]
    87a0:	78e2      	ldrb	r2, [r4, #3]
    87a2:	9202      	str	r2, [sp, #8]
    87a4:	7922      	ldrb	r2, [r4, #4]
    87a6:	9201      	str	r2, [sp, #4]
    87a8:	7962      	ldrb	r2, [r4, #5]
    87aa:	9200      	str	r2, [sp, #0]
    87ac:	79a3      	ldrb	r3, [r4, #6]
    87ae:	9505      	str	r5, [sp, #20]
    87b0:	4a0a      	ldr	r2, [pc, #40]	; (87dc <bt_addr_le_to_str.constprop.70+0x64>)
    87b2:	211b      	movs	r1, #27
    87b4:	4630      	mov	r0, r6
    87b6:	f7f8 fbf7 	bl	fa8 <snprintk>
}
    87ba:	b00a      	add	sp, #40	; 0x28
    87bc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    87be:	4908      	ldr	r1, [pc, #32]	; (87e0 <bt_addr_le_to_str.constprop.70+0x68>)
    87c0:	e7e7      	b.n	8792 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    87c2:	4908      	ldr	r1, [pc, #32]	; (87e4 <bt_addr_le_to_str.constprop.70+0x6c>)
    87c4:	e7e5      	b.n	8792 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    87c6:	4908      	ldr	r1, [pc, #32]	; (87e8 <bt_addr_le_to_str.constprop.70+0x70>)
    87c8:	e7e3      	b.n	8792 <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    87ca:	4a08      	ldr	r2, [pc, #32]	; (87ec <bt_addr_le_to_str.constprop.70+0x74>)
    87cc:	210a      	movs	r1, #10
    87ce:	4628      	mov	r0, r5
    87d0:	f7f8 fbea 	bl	fa8 <snprintk>
    87d4:	e7e0      	b.n	8798 <bt_addr_le_to_str.constprop.70+0x20>
    87d6:	bf00      	nop
    87d8:	00015481 	.word	0x00015481
    87dc:	000154aa 	.word	0x000154aa
    87e0:	00015488 	.word	0x00015488
    87e4:	0001548f 	.word	0x0001548f
    87e8:	00015499 	.word	0x00015499
    87ec:	000154a3 	.word	0x000154a3

000087f0 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    87f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    87f4:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    87f6:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    87f8:	4d33      	ldr	r5, [pc, #204]	; (88c8 <le_adv_ext_report.isra.66+0xd8>)
    87fa:	4e34      	ldr	r6, [pc, #208]	; (88cc <le_adv_ext_report.isra.66+0xdc>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    87fc:	b093      	sub	sp, #76	; 0x4c
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    87fe:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8800:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8802:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8804:	6837      	ldr	r7, [r6, #0]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8806:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8808:	b25b      	sxtb	r3, r3
    880a:	9306      	str	r3, [sp, #24]
    880c:	7823      	ldrb	r3, [r4, #0]
    880e:	9003      	str	r0, [sp, #12]
    8810:	09d9      	lsrs	r1, r3, #7
    8812:	9105      	str	r1, [sp, #20]
    8814:	f3c3 1180 	ubfx	r1, r3, #6, #1
    8818:	f003 030f 	and.w	r3, r3, #15
    881c:	9104      	str	r1, [sp, #16]
    881e:	9302      	str	r3, [sp, #8]
    8820:	9201      	str	r2, [sp, #4]
    8822:	4b2b      	ldr	r3, [pc, #172]	; (88d0 <le_adv_ext_report.isra.66+0xe0>)
    8824:	9500      	str	r5, [sp, #0]
    8826:	4a2b      	ldr	r2, [pc, #172]	; (88d4 <le_adv_ext_report.isra.66+0xe4>)
    8828:	492b      	ldr	r1, [pc, #172]	; (88d8 <le_adv_ext_report.isra.66+0xe8>)
    882a:	482c      	ldr	r0, [pc, #176]	; (88dc <le_adv_ext_report.isra.66+0xec>)
    882c:	47b8      	blx	r7
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    882e:	7823      	ldrb	r3, [r4, #0]
    8830:	f003 030f 	and.w	r3, r3, #15
    8834:	2b07      	cmp	r3, #7
    8836:	d143      	bne.n	88c0 <le_adv_ext_report.isra.66+0xd0>
    8838:	7863      	ldrb	r3, [r4, #1]
    883a:	2b00      	cmp	r3, #0
    883c:	d040      	beq.n	88c0 <le_adv_ext_report.isra.66+0xd0>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    883e:	9503      	str	r5, [sp, #12]
    8840:	78a3      	ldrb	r3, [r4, #2]
    8842:	4925      	ldr	r1, [pc, #148]	; (88d8 <le_adv_ext_report.isra.66+0xe8>)
    8844:	9500      	str	r5, [sp, #0]
    8846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    884a:	099b      	lsrs	r3, r3, #6
    884c:	9202      	str	r2, [sp, #8]
    884e:	9301      	str	r3, [sp, #4]
    8850:	6837      	ldr	r7, [r6, #0]
    8852:	4b1f      	ldr	r3, [pc, #124]	; (88d0 <le_adv_ext_report.isra.66+0xe0>)
    8854:	4a1f      	ldr	r2, [pc, #124]	; (88d4 <le_adv_ext_report.isra.66+0xe4>)
    8856:	4822      	ldr	r0, [pc, #136]	; (88e0 <le_adv_ext_report.isra.66+0xf0>)
    8858:	47b8      	blx	r7
		if (!p->ext_hdr_len) {
    885a:	78a3      	ldrb	r3, [r4, #2]
    885c:	0699      	lsls	r1, r3, #26
    885e:	d02f      	beq.n	88c0 <le_adv_ext_report.isra.66+0xd0>
		if (h->adv_addr) {
    8860:	78e3      	ldrb	r3, [r4, #3]
    8862:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    8864:	f104 0804 	add.w	r8, r4, #4
		if (h->adv_addr) {
    8868:	d51c      	bpl.n	88a4 <le_adv_ext_report.isra.66+0xb4>
			addr.type = adv->tx_addr;
    886a:	7823      	ldrb	r3, [r4, #0]
    886c:	af12      	add	r7, sp, #72	; 0x48
    886e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8872:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8876:	2206      	movs	r2, #6
    8878:	4641      	mov	r1, r8
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    887a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    887e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    8882:	f7f9 facf 	bl	1e24 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8886:	4649      	mov	r1, r9
    8888:	4638      	mov	r0, r7
    888a:	f7ff ff75 	bl	8778 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    888e:	9502      	str	r5, [sp, #8]
    8890:	e88d 0220 	stmia.w	sp, {r5, r9}
    8894:	6837      	ldr	r7, [r6, #0]
    8896:	4b0e      	ldr	r3, [pc, #56]	; (88d0 <le_adv_ext_report.isra.66+0xe0>)
    8898:	4a0e      	ldr	r2, [pc, #56]	; (88d4 <le_adv_ext_report.isra.66+0xe4>)
    889a:	490f      	ldr	r1, [pc, #60]	; (88d8 <le_adv_ext_report.isra.66+0xe8>)
    889c:	4811      	ldr	r0, [pc, #68]	; (88e4 <le_adv_ext_report.isra.66+0xf4>)
			ptr += BDADDR_SIZE;
    889e:	f104 080a 	add.w	r8, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    88a2:	47b8      	blx	r7
		if (h->tx_pwr) {
    88a4:	78e3      	ldrb	r3, [r4, #3]
    88a6:	065b      	lsls	r3, r3, #25
    88a8:	d50a      	bpl.n	88c0 <le_adv_ext_report.isra.66+0xd0>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    88aa:	9502      	str	r5, [sp, #8]
    88ac:	f998 3000 	ldrsb.w	r3, [r8]
    88b0:	9301      	str	r3, [sp, #4]
    88b2:	9500      	str	r5, [sp, #0]
    88b4:	6834      	ldr	r4, [r6, #0]
    88b6:	4b06      	ldr	r3, [pc, #24]	; (88d0 <le_adv_ext_report.isra.66+0xe0>)
    88b8:	4a06      	ldr	r2, [pc, #24]	; (88d4 <le_adv_ext_report.isra.66+0xe4>)
    88ba:	4907      	ldr	r1, [pc, #28]	; (88d8 <le_adv_ext_report.isra.66+0xe8>)
    88bc:	480a      	ldr	r0, [pc, #40]	; (88e8 <le_adv_ext_report.isra.66+0xf8>)
    88be:	47a0      	blx	r4
}
    88c0:	b013      	add	sp, #76	; 0x4c
    88c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    88c6:	bf00      	nop
    88c8:	0001563e 	.word	0x0001563e
    88cc:	20003a5c 	.word	0x20003a5c
    88d0:	00017ad8 	.word	0x00017ad8
    88d4:	00016801 	.word	0x00016801
    88d8:	00016808 	.word	0x00016808
    88dc:	00017d35 	.word	0x00017d35
    88e0:	00017d82 	.word	0x00017d82
    88e4:	00017db3 	.word	0x00017db3
    88e8:	00017dcc 	.word	0x00017dcc

000088ec <sys_get_le64>:
{
    88ec:	4603      	mov	r3, r0
}
    88ee:	6800      	ldr	r0, [r0, #0]
    88f0:	6859      	ldr	r1, [r3, #4]
    88f2:	4770      	bx	lr

000088f4 <hci_cmd_handle>:
{
    88f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    88f6:	8981      	ldrh	r1, [r0, #12]
{
    88f8:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    88fa:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    88fc:	2902      	cmp	r1, #2
{
    88fe:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    8900:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    8902:	d80c      	bhi.n	891e <hci_cmd_handle+0x2a>
		BT_ERR("No HCI Command header");
    8904:	4bc0      	ldr	r3, [pc, #768]	; (8c08 <hci_cmd_handle+0x314>)
    8906:	9301      	str	r3, [sp, #4]
    8908:	9300      	str	r3, [sp, #0]
    890a:	4bc0      	ldr	r3, [pc, #768]	; (8c0c <hci_cmd_handle+0x318>)
    890c:	4ac0      	ldr	r2, [pc, #768]	; (8c10 <hci_cmd_handle+0x31c>)
    890e:	681c      	ldr	r4, [r3, #0]
    8910:	49c0      	ldr	r1, [pc, #768]	; (8c14 <hci_cmd_handle+0x320>)
    8912:	4bc1      	ldr	r3, [pc, #772]	; (8c18 <hci_cmd_handle+0x324>)
    8914:	48c1      	ldr	r0, [pc, #772]	; (8c1c <hci_cmd_handle+0x328>)
		BT_ERR("Invalid HCI CMD packet length");
    8916:	47a0      	blx	r4
		return NULL;
    8918:	4628      	mov	r0, r5
}
    891a:	b013      	add	sp, #76	; 0x4c
    891c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    891e:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8920:	4ebf      	ldr	r6, [pc, #764]	; (8c20 <hci_cmd_handle+0x32c>)
    8922:	781a      	ldrb	r2, [r3, #0]
    8924:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    8926:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8928:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    892c:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    892e:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    8930:	d909      	bls.n	8946 <hci_cmd_handle+0x52>
		BT_ERR("Invalid HCI CMD packet length");
    8932:	4bb5      	ldr	r3, [pc, #724]	; (8c08 <hci_cmd_handle+0x314>)
    8934:	9301      	str	r3, [sp, #4]
    8936:	9300      	str	r3, [sp, #0]
    8938:	4bb4      	ldr	r3, [pc, #720]	; (8c0c <hci_cmd_handle+0x318>)
    893a:	4ab5      	ldr	r2, [pc, #724]	; (8c10 <hci_cmd_handle+0x31c>)
    893c:	681c      	ldr	r4, [r3, #0]
    893e:	49b5      	ldr	r1, [pc, #724]	; (8c14 <hci_cmd_handle+0x320>)
    8940:	4bb5      	ldr	r3, [pc, #724]	; (8c18 <hci_cmd_handle+0x324>)
    8942:	48b8      	ldr	r0, [pc, #736]	; (8c24 <hci_cmd_handle+0x330>)
    8944:	e7e7      	b.n	8916 <hci_cmd_handle+0x22>
	net_buf_pull(cmd, sizeof(*chdr));
    8946:	2103      	movs	r1, #3
    8948:	f104 0008 	add.w	r0, r4, #8
    894c:	f00a fcdf 	bl	1330e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    8950:	8833      	ldrh	r3, [r6, #0]
    8952:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    8956:	0a9b      	lsrs	r3, r3, #10
    8958:	2b04      	cmp	r3, #4
    895a:	f000 80bd 	beq.w	8ad8 <hci_cmd_handle+0x1e4>
    895e:	d809      	bhi.n	8974 <hci_cmd_handle+0x80>
    8960:	2b01      	cmp	r3, #1
    8962:	d027      	beq.n	89b4 <hci_cmd_handle+0xc0>
    8964:	2b03      	cmp	r3, #3
    8966:	d03c      	beq.n	89e2 <hci_cmd_handle+0xee>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    8968:	2101      	movs	r1, #1
    896a:	a807      	add	r0, sp, #28
    896c:	f7ff fdfe 	bl	856c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8970:	2301      	movs	r3, #1
    8972:	e29b      	b.n	8eac <hci_cmd_handle+0x5b8>
	switch (BT_OGF(_opcode)) {
    8974:	2b08      	cmp	r3, #8
    8976:	f000 816b 	beq.w	8c50 <hci_cmd_handle+0x35c>
    897a:	2b3f      	cmp	r3, #63	; 0x3f
    897c:	d1f4      	bne.n	8968 <hci_cmd_handle+0x74>
	switch (ocf) {
    897e:	3a01      	subs	r2, #1
    8980:	2a09      	cmp	r2, #9
    8982:	d8f1      	bhi.n	8968 <hci_cmd_handle+0x74>
    8984:	a301      	add	r3, pc, #4	; (adr r3, 898c <hci_cmd_handle+0x98>)
    8986:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    898a:	bf00      	nop
    898c:	000091e5 	.word	0x000091e5
    8990:	00009215 	.word	0x00009215
    8994:	0000923f 	.word	0x0000923f
    8998:	00008969 	.word	0x00008969
    899c:	00008969 	.word	0x00008969
    89a0:	00009285 	.word	0x00009285
    89a4:	00008969 	.word	0x00008969
    89a8:	00009257 	.word	0x00009257
    89ac:	00009291 	.word	0x00009291
    89b0:	000092ff 	.word	0x000092ff
	switch (ocf) {
    89b4:	2a06      	cmp	r2, #6
    89b6:	d006      	beq.n	89c6 <hci_cmd_handle+0xd2>
    89b8:	2a1d      	cmp	r2, #29
    89ba:	d1d5      	bne.n	8968 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
    89bc:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    89be:	8818      	ldrh	r0, [r3, #0]
    89c0:	f008 f905 	bl	10bce <ll_version_ind_send>
    89c4:	e004      	b.n	89d0 <hci_cmd_handle+0xdc>
    89c6:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    89c8:	7899      	ldrb	r1, [r3, #2]
    89ca:	8818      	ldrh	r0, [r3, #0]
    89cc:	f008 f913 	bl	10bf6 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    89d0:	2800      	cmp	r0, #0
    89d2:	bf14      	ite	ne
    89d4:	200c      	movne	r0, #12
    89d6:	2000      	moveq	r0, #0
    89d8:	f7ff fd98 	bl	850c <cmd_status>
    89dc:	9007      	str	r0, [sp, #28]
	return evt;
    89de:	9807      	ldr	r0, [sp, #28]
    89e0:	e79b      	b.n	891a <hci_cmd_handle+0x26>
	switch (ocf) {
    89e2:	2a2d      	cmp	r2, #45	; 0x2d
    89e4:	d03a      	beq.n	8a5c <hci_cmd_handle+0x168>
    89e6:	d820      	bhi.n	8a2a <hci_cmd_handle+0x136>
    89e8:	2a01      	cmp	r2, #1
    89ea:	d02b      	beq.n	8a44 <hci_cmd_handle+0x150>
    89ec:	2a03      	cmp	r2, #3
    89ee:	d1bb      	bne.n	8968 <hci_cmd_handle+0x74>
	dup_count = -1;
    89f0:	4b8d      	ldr	r3, [pc, #564]	; (8c28 <hci_cmd_handle+0x334>)
    89f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    89f6:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    89f8:	4b8c      	ldr	r3, [pc, #560]	; (8c2c <hci_cmd_handle+0x338>)
    89fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89fe:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8a02:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8a06:	4b8a      	ldr	r3, [pc, #552]	; (8c30 <hci_cmd_handle+0x33c>)
    8a08:	2000      	movs	r0, #0
    8a0a:	2100      	movs	r1, #0
    8a0c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8a10:	4b88      	ldr	r3, [pc, #544]	; (8c34 <hci_cmd_handle+0x340>)
    8a12:	201f      	movs	r0, #31
    8a14:	2100      	movs	r1, #0
    8a16:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    8a1a:	f007 fda1 	bl	10560 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8a1e:	2101      	movs	r1, #1
    8a20:	a807      	add	r0, sp, #28
    8a22:	f7ff fda3 	bl	856c <cmd_complete>
	ccst->status = 0x00;
    8a26:	2300      	movs	r3, #0
    8a28:	e240      	b.n	8eac <hci_cmd_handle+0x5b8>
	switch (ocf) {
    8a2a:	2a7b      	cmp	r2, #123	; 0x7b
    8a2c:	d02c      	beq.n	8a88 <hci_cmd_handle+0x194>
    8a2e:	2a7c      	cmp	r2, #124	; 0x7c
    8a30:	d041      	beq.n	8ab6 <hci_cmd_handle+0x1c2>
    8a32:	2a63      	cmp	r2, #99	; 0x63
    8a34:	d198      	bne.n	8968 <hci_cmd_handle+0x74>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    8a36:	68a0      	ldr	r0, [r4, #8]
    8a38:	f7ff ff58 	bl	88ec <sys_get_le64>
    8a3c:	4b7c      	ldr	r3, [pc, #496]	; (8c30 <hci_cmd_handle+0x33c>)
	le_event_mask = sys_get_le64(cmd->events);
    8a3e:	e9c3 0100 	strd	r0, r1, [r3]
    8a42:	e7ec      	b.n	8a1e <hci_cmd_handle+0x12a>
	event_mask = sys_get_le64(cmd->events);
    8a44:	68a0      	ldr	r0, [r4, #8]
    8a46:	f7ff ff51 	bl	88ec <sys_get_le64>
    8a4a:	4b78      	ldr	r3, [pc, #480]	; (8c2c <hci_cmd_handle+0x338>)
    8a4c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8a50:	4611      	mov	r1, r2
    8a52:	a807      	add	r0, sp, #28
    8a54:	f7ff fd8a 	bl	856c <cmd_complete>
	ccst->status = 0x00;
    8a58:	7005      	strb	r5, [r0, #0]
    8a5a:	e7c0      	b.n	89de <hci_cmd_handle+0xea>
    8a5c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8a5e:	2104      	movs	r1, #4
    8a60:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8a62:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    8a64:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    8a66:	f7ff fd81 	bl	856c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8a6a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8a6c:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    8a6e:	1cc2      	adds	r2, r0, #3
    8a70:	4639      	mov	r1, r7
    8a72:	4630      	mov	r0, r6
    8a74:	f008 f8d3 	bl	10c1e <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8a78:	2800      	cmp	r0, #0
    8a7a:	bf14      	ite	ne
    8a7c:	2302      	movne	r3, #2
    8a7e:	2300      	moveq	r3, #0
    8a80:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    8a82:	f8a4 5001 	strh.w	r5, [r4, #1]
    8a86:	e7aa      	b.n	89de <hci_cmd_handle+0xea>
	handle = sys_le16_to_cpu(cmd->handle);
    8a88:	68a3      	ldr	r3, [r4, #8]
    8a8a:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8a8c:	a908      	add	r1, sp, #32
    8a8e:	b2a0      	uxth	r0, r4
    8a90:	f008 f8cf 	bl	10c32 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    8a94:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    8a96:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8a98:	a807      	add	r0, sp, #28
    8a9a:	f7ff fd67 	bl	856c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8a9e:	2d00      	cmp	r5, #0
    8aa0:	bf14      	ite	ne
    8aa2:	230c      	movne	r3, #12
    8aa4:	2300      	moveq	r3, #0
    8aa6:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8aa8:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8aac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8ab0:	f8a0 3003 	strh.w	r3, [r0, #3]
    8ab4:	e793      	b.n	89de <hci_cmd_handle+0xea>
    8ab6:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8ab8:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    8aba:	8859      	ldrh	r1, [r3, #2]
    8abc:	b2a0      	uxth	r0, r4
    8abe:	f008 f8cc 	bl	10c5a <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8ac2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8ac4:	2103      	movs	r1, #3
    8ac6:	a807      	add	r0, sp, #28
    8ac8:	f7ff fd50 	bl	856c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8acc:	2d00      	cmp	r5, #0
    8ace:	bf14      	ite	ne
    8ad0:	230c      	movne	r3, #12
    8ad2:	2300      	moveq	r3, #0
    8ad4:	7003      	strb	r3, [r0, #0]
    8ad6:	e27f      	b.n	8fd8 <hci_cmd_handle+0x6e4>
	switch (ocf) {
    8ad8:	3a01      	subs	r2, #1
    8ada:	2a08      	cmp	r2, #8
    8adc:	f63f af44 	bhi.w	8968 <hci_cmd_handle+0x74>
    8ae0:	a301      	add	r3, pc, #4	; (adr r3, 8ae8 <hci_cmd_handle+0x1f4>)
    8ae2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8ae6:	bf00      	nop
    8ae8:	00008b0d 	.word	0x00008b0d
    8aec:	00008b37 	.word	0x00008b37
    8af0:	00008beb 	.word	0x00008beb
    8af4:	00008969 	.word	0x00008969
    8af8:	00008969 	.word	0x00008969
    8afc:	00008969 	.word	0x00008969
    8b00:	00008969 	.word	0x00008969
    8b04:	00008969 	.word	0x00008969
    8b08:	00008c39 	.word	0x00008c39
	rp = cmd_complete(evt, sizeof(*rp));
    8b0c:	2109      	movs	r1, #9
    8b0e:	a807      	add	r0, sp, #28
    8b10:	f7ff fd2c 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8b14:	2300      	movs	r3, #0
    8b16:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    8b18:	7083      	strb	r3, [r0, #2]
    8b1a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8b1c:	f06f 030e 	mvn.w	r3, #14
    8b20:	7143      	strb	r3, [r0, #5]
    8b22:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    8b24:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8b26:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    8b2c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    8b2e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8b30:	71c3      	strb	r3, [r0, #7]
    8b32:	7203      	strb	r3, [r0, #8]
    8b34:	e753      	b.n	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8b36:	2141      	movs	r1, #65	; 0x41
    8b38:	a807      	add	r0, sp, #28
    8b3a:	f7ff fd17 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8b3e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8b40:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8b42:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8b44:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8b48:	f7f9 f998 	bl	1e7c <memset>
	rp->commands[2] |= BIT(7);
    8b4c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    8b4e:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    8b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b54:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    8b56:	79a3      	ldrb	r3, [r4, #6]
    8b58:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8b5c:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    8b5e:	7ae3      	ldrb	r3, [r4, #11]
    8b60:	f043 0304 	orr.w	r3, r3, #4
    8b64:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    8b66:	7be3      	ldrb	r3, [r4, #15]
    8b68:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    8b6c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    8b6e:	7c23      	ldrb	r3, [r4, #16]
    8b70:	f043 0302 	orr.w	r3, r3, #2
    8b74:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    8b76:	7de3      	ldrb	r3, [r4, #23]
    8b78:	f043 0304 	orr.w	r3, r3, #4
    8b7c:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    8b7e:	7ea3      	ldrb	r3, [r4, #26]
    8b80:	f043 0317 	orr.w	r3, r3, #23
    8b84:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    8b86:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    8b88:	f043 0309 	orr.w	r3, r3, #9
    8b8c:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    8b8e:	7863      	ldrb	r3, [r4, #1]
    8b90:	f043 0320 	orr.w	r3, r3, #32
    8b94:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    8b96:	23ff      	movs	r3, #255	; 0xff
    8b98:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    8b9a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    8b9e:	f063 030f 	orn	r3, r3, #15
    8ba2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    8ba6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    8baa:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8bae:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    8bb2:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8bb4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    8bb8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8bbc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    8bc0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    8bc4:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    8bc8:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8bcc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8bd0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8bd4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8bd8:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    8bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8be0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8be4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    8be8:	e6f9      	b.n	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8bea:	2109      	movs	r1, #9
    8bec:	a807      	add	r0, sp, #28
    8bee:	f7ff fcbd 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8bf2:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8bf4:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8bf6:	2208      	movs	r2, #8
	rp->status = 0x00;
    8bf8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8bfc:	f7f9 f93e 	bl	1e7c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    8c00:	2360      	movs	r3, #96	; 0x60
    8c02:	7163      	strb	r3, [r4, #5]
    8c04:	e6eb      	b.n	89de <hci_cmd_handle+0xea>
    8c06:	bf00      	nop
    8c08:	0001563e 	.word	0x0001563e
    8c0c:	20003a5c 	.word	0x20003a5c
    8c10:	000167b9 	.word	0x000167b9
    8c14:	00016808 	.word	0x00016808
    8c18:	00017aa4 	.word	0x00017aa4
    8c1c:	00017be7 	.word	0x00017be7
    8c20:	20000828 	.word	0x20000828
    8c24:	00017c0d 	.word	0x00017c0d
    8c28:	20000830 	.word	0x20000830
    8c2c:	20003d28 	.word	0x20003d28
    8c30:	200008b8 	.word	0x200008b8
    8c34:	20003d30 	.word	0x20003d30
	rp = cmd_complete(evt, sizeof(*rp));
    8c38:	2107      	movs	r1, #7
    8c3a:	a807      	add	r0, sp, #28
    8c3c:	f7ff fc96 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8c40:	4601      	mov	r1, r0
    8c42:	2300      	movs	r3, #0
    8c44:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    8c48:	4618      	mov	r0, r3
    8c4a:	f7ff fab1 	bl	81b0 <ll_addr_get>
    8c4e:	e6c6      	b.n	89de <hci_cmd_handle+0xea>
	switch (ocf) {
    8c50:	3a01      	subs	r2, #1
    8c52:	2a4d      	cmp	r2, #77	; 0x4d
    8c54:	f63f ae88 	bhi.w	8968 <hci_cmd_handle+0x74>
    8c58:	a301      	add	r3, pc, #4	; (adr r3, 8c60 <hci_cmd_handle+0x36c>)
    8c5a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8c5e:	bf00      	nop
    8c60:	00008d99 	.word	0x00008d99
    8c64:	00008da3 	.word	0x00008da3
    8c68:	00008dbb 	.word	0x00008dbb
    8c6c:	00008969 	.word	0x00008969
    8c70:	00008ddf 	.word	0x00008ddf
    8c74:	00008969 	.word	0x00008969
    8c78:	00008969 	.word	0x00008969
    8c7c:	00008969 	.word	0x00008969
    8c80:	00008969 	.word	0x00008969
    8c84:	00008969 	.word	0x00008969
    8c88:	00008e83 	.word	0x00008e83
    8c8c:	00008eb1 	.word	0x00008eb1
    8c90:	00008ed1 	.word	0x00008ed1
    8c94:	00008efb 	.word	0x00008efb
    8c98:	00008deb 	.word	0x00008deb
    8c9c:	00008e01 	.word	0x00008e01
    8ca0:	00008e13 	.word	0x00008e13
    8ca4:	00008e1b 	.word	0x00008e1b
    8ca8:	00008f9b 	.word	0x00008f9b
    8cac:	00008f5b 	.word	0x00008f5b
    8cb0:	00008f77 	.word	0x00008f77
    8cb4:	00008f91 	.word	0x00008f91
    8cb8:	00008e23 	.word	0x00008e23
    8cbc:	00008e49 	.word	0x00008e49
    8cc0:	00008f63 	.word	0x00008f63
    8cc4:	00008969 	.word	0x00008969
    8cc8:	00008969 	.word	0x00008969
    8ccc:	00008e5f 	.word	0x00008e5f
    8cd0:	00008969 	.word	0x00008969
    8cd4:	00008969 	.word	0x00008969
    8cd8:	00008969 	.word	0x00008969
    8cdc:	00008fb5 	.word	0x00008fb5
    8ce0:	00008fdf 	.word	0x00008fdf
    8ce4:	00008fed 	.word	0x00008fed
    8ce8:	00008ffd 	.word	0x00008ffd
    8cec:	00009015 	.word	0x00009015
    8cf0:	00008969 	.word	0x00008969
    8cf4:	00008969 	.word	0x00008969
    8cf8:	0000912d 	.word	0x0000912d
    8cfc:	0000913b 	.word	0x0000913b
    8d00:	00009143 	.word	0x00009143
    8d04:	00009153 	.word	0x00009153
    8d08:	00009165 	.word	0x00009165
    8d0c:	00009183 	.word	0x00009183
    8d10:	000091a1 	.word	0x000091a1
    8d14:	000091b7 	.word	0x000091b7
    8d18:	00009031 	.word	0x00009031
    8d1c:	0000905d 	.word	0x0000905d
    8d20:	000090b3 	.word	0x000090b3
    8d24:	000090d1 	.word	0x000090d1
    8d28:	00008969 	.word	0x00008969
    8d2c:	00008969 	.word	0x00008969
    8d30:	00008969 	.word	0x00008969
    8d34:	00008969 	.word	0x00008969
    8d38:	00008969 	.word	0x00008969
    8d3c:	00008969 	.word	0x00008969
    8d40:	00008969 	.word	0x00008969
    8d44:	00008969 	.word	0x00008969
    8d48:	00008969 	.word	0x00008969
    8d4c:	00008969 	.word	0x00008969
    8d50:	00008969 	.word	0x00008969
    8d54:	00008969 	.word	0x00008969
    8d58:	00008969 	.word	0x00008969
    8d5c:	00008969 	.word	0x00008969
    8d60:	00008969 	.word	0x00008969
    8d64:	00008969 	.word	0x00008969
    8d68:	00008969 	.word	0x00008969
    8d6c:	00008969 	.word	0x00008969
    8d70:	00008969 	.word	0x00008969
    8d74:	00008969 	.word	0x00008969
    8d78:	00008969 	.word	0x00008969
    8d7c:	00008969 	.word	0x00008969
    8d80:	00008969 	.word	0x00008969
    8d84:	00008969 	.word	0x00008969
    8d88:	000091cb 	.word	0x000091cb
    8d8c:	00008969 	.word	0x00008969
    8d90:	00008969 	.word	0x00008969
    8d94:	000091c1 	.word	0x000091c1
	le_event_mask = sys_get_le64(cmd->events);
    8d98:	68a0      	ldr	r0, [r4, #8]
    8d9a:	f7ff fda7 	bl	88ec <sys_get_le64>
    8d9e:	4baa      	ldr	r3, [pc, #680]	; (9048 <hci_cmd_handle+0x754>)
    8da0:	e64d      	b.n	8a3e <hci_cmd_handle+0x14a>
	rp = cmd_complete(evt, sizeof(*rp));
    8da2:	2104      	movs	r1, #4
    8da4:	a807      	add	r0, sp, #28
    8da6:	f7ff fbe1 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8daa:	2300      	movs	r3, #0
    8dac:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8dae:	221b      	movs	r2, #27
    8db0:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8db2:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8db4:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8db6:	70c3      	strb	r3, [r0, #3]
    8db8:	e611      	b.n	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8dba:	2109      	movs	r1, #9
    8dbc:	a807      	add	r0, sp, #28
    8dbe:	f7ff fbd5 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8dc2:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8dc4:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8dc6:	2208      	movs	r2, #8
	rp->status = 0x00;
    8dc8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8dcc:	f7f9 f856 	bl	1e7c <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8dd0:	23ff      	movs	r3, #255	; 0xff
    8dd2:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8dd4:	2341      	movs	r3, #65	; 0x41
    8dd6:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8dd8:	2301      	movs	r3, #1
    8dda:	70e3      	strb	r3, [r4, #3]
    8ddc:	e5ff      	b.n	89de <hci_cmd_handle+0xea>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    8dde:	68a1      	ldr	r1, [r4, #8]
    8de0:	2001      	movs	r0, #1
    8de2:	f7ff f9ff 	bl	81e4 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8de6:	4604      	mov	r4, r0
    8de8:	e0af      	b.n	8f4a <hci_cmd_handle+0x656>
	rp = cmd_complete(evt, sizeof(*rp));
    8dea:	2102      	movs	r1, #2
    8dec:	a807      	add	r0, sp, #28
    8dee:	f7ff fbbd 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8df2:	2300      	movs	r3, #0
    8df4:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8df6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    8df8:	f008 fec6 	bl	11b88 <ll_wl_size_get>
    8dfc:	7060      	strb	r0, [r4, #1]
    8dfe:	e5ee      	b.n	89de <hci_cmd_handle+0xea>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8e00:	2101      	movs	r1, #1
    8e02:	a807      	add	r0, sp, #28
    8e04:	f7ff fbb2 	bl	856c <cmd_complete>
    8e08:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    8e0a:	f008 febf 	bl	11b8c <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    8e0e:	7020      	strb	r0, [r4, #0]
    8e10:	e5e5      	b.n	89de <hci_cmd_handle+0xea>
	status = ll_wl_add(&cmd->addr);
    8e12:	68a0      	ldr	r0, [r4, #8]
    8e14:	f008 ff66 	bl	11ce4 <ll_wl_add>
    8e18:	e7e5      	b.n	8de6 <hci_cmd_handle+0x4f2>
	status = ll_wl_remove(&cmd->addr);
    8e1a:	68a0      	ldr	r0, [r4, #8]
    8e1c:	f008 fed6 	bl	11bcc <ll_wl_remove>
    8e20:	e7e1      	b.n	8de6 <hci_cmd_handle+0x4f2>
    8e22:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8e24:	2300      	movs	r3, #0
    8e26:	aa08      	add	r2, sp, #32
    8e28:	f100 0110 	add.w	r1, r0, #16
    8e2c:	f009 fbda 	bl	125e4 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8e30:	2111      	movs	r1, #17
    8e32:	a807      	add	r0, sp, #28
    8e34:	f7ff fb9a 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8e38:	2300      	movs	r3, #0
    8e3a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8e3e:	2210      	movs	r2, #16
    8e40:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    8e42:	f7f8 ffef 	bl	1e24 <memcpy>
    8e46:	e5ca      	b.n	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8e48:	2109      	movs	r1, #9
    8e4a:	a807      	add	r0, sp, #28
    8e4c:	f7ff fb8e 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8e50:	2300      	movs	r3, #0
    8e52:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    8e56:	2108      	movs	r1, #8
    8e58:	f7ff f9e4 	bl	8224 <bt_rand>
    8e5c:	e5bf      	b.n	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8e5e:	2109      	movs	r1, #9
    8e60:	a807      	add	r0, sp, #28
    8e62:	f7ff fb83 	bl	856c <cmd_complete>
	rp->status = 0x00;
    8e66:	4601      	mov	r1, r0
    8e68:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8e6a:	4602      	mov	r2, r0
	rp->status = 0x00;
    8e6c:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    8e70:	4876      	ldr	r0, [pc, #472]	; (904c <hci_cmd_handle+0x758>)
    8e72:	f7ff fb37 	bl	84e4 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    8e76:	f240 203f 	movw	r0, #575	; 0x23f
    8e7a:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8e7c:	f7ff fb32 	bl	84e4 <sys_put_le32>
    8e80:	e5ad      	b.n	89de <hci_cmd_handle+0xea>
    8e82:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    8e84:	7963      	ldrb	r3, [r4, #5]
    8e86:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    8e8a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    8e8e:	7820      	ldrb	r0, [r4, #0]
    8e90:	79a4      	ldrb	r4, [r4, #6]
    8e92:	9400      	str	r4, [sp, #0]
    8e94:	f008 fc02 	bl	1169c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    8e98:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8e9a:	2101      	movs	r1, #1
    8e9c:	a807      	add	r0, sp, #28
    8e9e:	f7ff fb65 	bl	856c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8ea2:	2c00      	cmp	r4, #0
    8ea4:	bf18      	it	ne
    8ea6:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8ea8:	bf08      	it	eq
    8eaa:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8eac:	7003      	strb	r3, [r0, #0]
    8eae:	e596      	b.n	89de <hci_cmd_handle+0xea>
    8eb0:	68a2      	ldr	r2, [r4, #8]
    8eb2:	4b67      	ldr	r3, [pc, #412]	; (9050 <hci_cmd_handle+0x75c>)
	if (cmd->enable && cmd->filter_dup) {
    8eb4:	7810      	ldrb	r0, [r2, #0]
    8eb6:	b140      	cbz	r0, 8eca <hci_cmd_handle+0x5d6>
    8eb8:	7852      	ldrb	r2, [r2, #1]
    8eba:	b132      	cbz	r2, 8eca <hci_cmd_handle+0x5d6>
		dup_count = 0;
    8ebc:	2200      	movs	r2, #0
    8ebe:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    8ec0:	4b64      	ldr	r3, [pc, #400]	; (9054 <hci_cmd_handle+0x760>)
		dup_count = -1;
    8ec2:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8ec4:	f008 fc0a 	bl	116dc <ll_scan_enable>
    8ec8:	e7e6      	b.n	8e98 <hci_cmd_handle+0x5a4>
		dup_count = -1;
    8eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8ece:	e7f8      	b.n	8ec2 <hci_cmd_handle+0x5ce>
    8ed0:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    8ed2:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    8ed6:	7963      	ldrb	r3, [r4, #5]
    8ed8:	7922      	ldrb	r2, [r4, #4]
    8eda:	8861      	ldrh	r1, [r4, #2]
    8edc:	8820      	ldrh	r0, [r4, #0]
    8ede:	9504      	str	r5, [sp, #16]
    8ee0:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    8ee4:	9503      	str	r5, [sp, #12]
    8ee6:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    8eea:	9502      	str	r5, [sp, #8]
    8eec:	7b25      	ldrb	r5, [r4, #12]
    8eee:	9501      	str	r5, [sp, #4]
    8ef0:	3406      	adds	r4, #6
    8ef2:	9400      	str	r4, [sp, #0]
    8ef4:	f008 fc2c 	bl	11750 <ll_create_connection>
    8ef8:	e56a      	b.n	89d0 <hci_cmd_handle+0xdc>
	status = ll_connect_disable();
    8efa:	f008 fa31 	bl	11360 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8efe:	4606      	mov	r6, r0
    8f00:	bb48      	cbnz	r0, 8f56 <hci_cmd_handle+0x662>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f06:	2001      	movs	r0, #1
    8f08:	f7fa ff86 	bl	3e18 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f0c:	4a52      	ldr	r2, [pc, #328]	; (9058 <hci_cmd_handle+0x764>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f0e:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f10:	e9d2 4500 	ldrd	r4, r5, [r2]
    8f14:	2400      	movs	r4, #0
    8f16:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    8f1a:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f1e:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f20:	d004      	beq.n	8f2c <hci_cmd_handle+0x638>
    8f22:	4632      	mov	r2, r6
    8f24:	4631      	mov	r1, r6
    8f26:	2002      	movs	r0, #2
    8f28:	f7ff fb90 	bl	864c <le_conn_complete.part.39>
		if ((*evt)->len) {
    8f2c:	9807      	ldr	r0, [sp, #28]
    8f2e:	8984      	ldrh	r4, [r0, #12]
    8f30:	b14c      	cbz	r4, 8f46 <hci_cmd_handle+0x652>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    8f32:	2101      	movs	r1, #1
    8f34:	a808      	add	r0, sp, #32
    8f36:	f7ff fb19 	bl	856c <cmd_complete>
			ccst->status = cmd_status;
    8f3a:	2300      	movs	r3, #0
    8f3c:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8f3e:	9808      	ldr	r0, [sp, #32]
    8f40:	f7fa fd82 	bl	3a48 <bt_recv_prio>
    8f44:	e54b      	b.n	89de <hci_cmd_handle+0xea>
			net_buf_unref(*evt);
    8f46:	f00a f991 	bl	1326c <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f4a:	2101      	movs	r1, #1
    8f4c:	a807      	add	r0, sp, #28
    8f4e:	f7ff fb0d 	bl	856c <cmd_complete>
	ccst->status = status;
    8f52:	7004      	strb	r4, [r0, #0]
    8f54:	e543      	b.n	89de <hci_cmd_handle+0xea>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8f56:	240c      	movs	r4, #12
    8f58:	e7f7      	b.n	8f4a <hci_cmd_handle+0x656>
	status = ll_chm_update(&cmd->ch_map[0]);
    8f5a:	68a0      	ldr	r0, [r4, #8]
    8f5c:	f007 fdcc 	bl	10af8 <ll_chm_update>
    8f60:	e79a      	b.n	8e98 <hci_cmd_handle+0x5a4>
    8f62:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    8f64:	f100 030c 	add.w	r3, r0, #12
    8f68:	f100 020a 	add.w	r2, r0, #10
    8f6c:	1c81      	adds	r1, r0, #2
    8f6e:	8800      	ldrh	r0, [r0, #0]
    8f70:	f008 f87c 	bl	1106c <ll_enc_req_send>
    8f74:	e52c      	b.n	89d0 <hci_cmd_handle+0xdc>
	handle = sys_le16_to_cpu(cmd->handle);
    8f76:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8f78:	2108      	movs	r1, #8
    8f7a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8f7c:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8f7e:	f7ff faf5 	bl	856c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8f82:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8f84:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    8f86:	1cc1      	adds	r1, r0, #3
    8f88:	4630      	mov	r0, r6
    8f8a:	f007 fdf7 	bl	10b7c <ll_chm_get>
    8f8e:	e573      	b.n	8a78 <hci_cmd_handle+0x184>
	handle = sys_le16_to_cpu(cmd->handle);
    8f90:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8f92:	8818      	ldrh	r0, [r3, #0]
    8f94:	f007 fe07 	bl	10ba6 <ll_feature_req_send>
    8f98:	e51a      	b.n	89d0 <hci_cmd_handle+0xdc>
    8f9a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8f9c:	8911      	ldrh	r1, [r2, #8]
    8f9e:	8893      	ldrh	r3, [r2, #4]
    8fa0:	8810      	ldrh	r0, [r2, #0]
    8fa2:	9101      	str	r1, [sp, #4]
    8fa4:	88d2      	ldrh	r2, [r2, #6]
    8fa6:	9200      	str	r2, [sp, #0]
    8fa8:	2200      	movs	r2, #0
    8faa:	4611      	mov	r1, r2
    8fac:	f007 fd2c 	bl	10a08 <ll_conn_update>
	*evt = cmd_status(status);
    8fb0:	b2c0      	uxtb	r0, r0
    8fb2:	e511      	b.n	89d8 <hci_cmd_handle+0xe4>
    8fb4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8fb6:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8fb8:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8fba:	8893      	ldrh	r3, [r2, #4]
    8fbc:	9101      	str	r1, [sp, #4]
    8fbe:	88d2      	ldrh	r2, [r2, #6]
    8fc0:	9200      	str	r2, [sp, #0]
    8fc2:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8fc4:	2102      	movs	r1, #2
    8fc6:	b2a0      	uxth	r0, r4
    8fc8:	f007 fd1e 	bl	10a08 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8fcc:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8fce:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8fd0:	a807      	add	r0, sp, #28
    8fd2:	f7ff facb 	bl	856c <cmd_complete>
	rp->status = status;
    8fd6:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8fd8:	f8a0 4001 	strh.w	r4, [r0, #1]
    8fdc:	e4ff      	b.n	89de <hci_cmd_handle+0xea>
    8fde:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8fe0:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8fe2:	789a      	ldrb	r2, [r3, #2]
    8fe4:	2300      	movs	r3, #0
    8fe6:	9301      	str	r3, [sp, #4]
    8fe8:	9300      	str	r3, [sp, #0]
    8fea:	e7eb      	b.n	8fc4 <hci_cmd_handle+0x6d0>
    8fec:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8fee:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8ff0:	889a      	ldrh	r2, [r3, #4]
    8ff2:	8859      	ldrh	r1, [r3, #2]
    8ff4:	b2a0      	uxth	r0, r4
    8ff6:	f007 fe46 	bl	10c86 <ll_length_req_send>
    8ffa:	e562      	b.n	8ac2 <hci_cmd_handle+0x1ce>
	rp = cmd_complete(evt, sizeof(*rp));
    8ffc:	2105      	movs	r1, #5
    8ffe:	a807      	add	r0, sp, #28
    9000:	f7ff fab4 	bl	856c <cmd_complete>
    9004:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    9006:	1cc1      	adds	r1, r0, #3
    9008:	3001      	adds	r0, #1
    900a:	f007 fe5f 	bl	10ccc <ll_length_default_get>
	rp->status = 0x00;
    900e:	2300      	movs	r3, #0
    9010:	7023      	strb	r3, [r4, #0]
    9012:	e4e4      	b.n	89de <hci_cmd_handle+0xea>
    9014:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    9016:	8859      	ldrh	r1, [r3, #2]
    9018:	8818      	ldrh	r0, [r3, #0]
    901a:	f007 fe61 	bl	10ce0 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    901e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    9020:	2101      	movs	r1, #1
    9022:	a807      	add	r0, sp, #28
    9024:	f7ff faa2 	bl	856c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9028:	2c00      	cmp	r4, #0
    902a:	bf18      	it	ne
    902c:	231e      	movne	r3, #30
    902e:	e73b      	b.n	8ea8 <hci_cmd_handle+0x5b4>
	rp = cmd_complete(evt, sizeof(*rp));
    9030:	2109      	movs	r1, #9
    9032:	a807      	add	r0, sp, #28
    9034:	f7ff fa9a 	bl	856c <cmd_complete>
    9038:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    903a:	1dc3      	adds	r3, r0, #7
    903c:	1d42      	adds	r2, r0, #5
    903e:	1cc1      	adds	r1, r0, #3
    9040:	3001      	adds	r0, #1
    9042:	f007 fe57 	bl	10cf4 <ll_length_max_get>
    9046:	e7e2      	b.n	900e <hci_cmd_handle+0x71a>
    9048:	20003d30 	.word	0x20003d30
    904c:	130f3370 	.word	0x130f3370
    9050:	20000830 	.word	0x20000830
    9054:	20000834 	.word	0x20000834
    9058:	20003d28 	.word	0x20003d28
	handle = sys_le16_to_cpu(cmd->handle);
    905c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    905e:	2105      	movs	r1, #5
    9060:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9062:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9064:	f7ff fa82 	bl	856c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9068:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    906a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    906c:	1d02      	adds	r2, r0, #4
    906e:	1cc1      	adds	r1, r0, #3
    9070:	4630      	mov	r0, r6
    9072:	f007 fe48 	bl	10d06 <ll_phy_get>
	return __builtin_ffs(op);
    9076:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    9078:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    907c:	2800      	cmp	r0, #0
    907e:	bf14      	ite	ne
    9080:	230c      	movne	r3, #12
    9082:	2300      	moveq	r3, #0
    9084:	7023      	strb	r3, [r4, #0]
    9086:	2a00      	cmp	r2, #0
    9088:	fa92 f3a2 	rbit	r3, r2
    908c:	fab3 f383 	clz	r3, r3
    9090:	7922      	ldrb	r2, [r4, #4]
    9092:	bf08      	it	eq
    9094:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9098:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    909a:	70e3      	strb	r3, [r4, #3]
    909c:	2a00      	cmp	r2, #0
    909e:	fa92 f3a2 	rbit	r3, r2
    90a2:	fab3 f383 	clz	r3, r3
    90a6:	bf08      	it	eq
    90a8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    90ac:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    90ae:	7123      	strb	r3, [r4, #4]
    90b0:	e495      	b.n	89de <hci_cmd_handle+0xea>
    90b2:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    90b4:	781a      	ldrb	r2, [r3, #0]
    90b6:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    90b8:	bf44      	itt	mi
    90ba:	2107      	movmi	r1, #7
    90bc:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    90be:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    90c0:	bf44      	itt	mi
    90c2:	2207      	movmi	r2, #7
    90c4:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    90c6:	7899      	ldrb	r1, [r3, #2]
    90c8:	7858      	ldrb	r0, [r3, #1]
    90ca:	f007 fe31 	bl	10d30 <ll_phy_default_set>
    90ce:	e7a6      	b.n	901e <hci_cmd_handle+0x72a>
    90d0:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    90d2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    90d4:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    90d6:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    90da:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    90dc:	bf44      	itt	mi
    90de:	2103      	movmi	r1, #3
    90e0:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    90e2:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    90e4:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    90e6:	bf44      	itt	mi
    90e8:	2203      	movmi	r2, #3
    90ea:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    90ec:	074d      	lsls	r5, r1, #29
    90ee:	d002      	beq.n	90f6 <hci_cmd_handle+0x802>
	    !(cmd->rx_phys & 0x07)) {
    90f0:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    90f2:	075a      	lsls	r2, r3, #29
    90f4:	d105      	bne.n	9102 <hci_cmd_handle+0x80e>
		ccst = cmd_complete(evt, sizeof(*ccst));
    90f6:	2101      	movs	r1, #1
    90f8:	a807      	add	r0, sp, #28
    90fa:	f7ff fa37 	bl	856c <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    90fe:	2312      	movs	r3, #18
    9100:	e6d4      	b.n	8eac <hci_cmd_handle+0x5b8>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    9102:	ea41 0203 	orr.w	r2, r1, r3
    9106:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    910a:	d005      	beq.n	9118 <hci_cmd_handle+0x824>
		ccst = cmd_complete(evt, sizeof(*ccst));
    910c:	2101      	movs	r1, #1
    910e:	a807      	add	r0, sp, #28
    9110:	f7ff fa2c 	bl	856c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    9114:	2311      	movs	r3, #17
    9116:	e6c9      	b.n	8eac <hci_cmd_handle+0x5b8>
	if (phy_opts & 0x03) {
    9118:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    911c:	bf1c      	itt	ne
    911e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    9122:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    9126:	f007 fe0d 	bl	10d44 <ll_phy_req_send>
    912a:	e451      	b.n	89d0 <hci_cmd_handle+0xdc>
    912c:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    912e:	f100 0217 	add.w	r2, r0, #23
    9132:	1dc1      	adds	r1, r0, #7
    9134:	f008 ffe4 	bl	12100 <ll_rl_add>
    9138:	e655      	b.n	8de6 <hci_cmd_handle+0x4f2>
	status = ll_rl_remove(&cmd->peer_id_addr);
    913a:	68a0      	ldr	r0, [r4, #8]
    913c:	f009 f882 	bl	12244 <ll_rl_remove>
    9140:	e651      	b.n	8de6 <hci_cmd_handle+0x4f2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9142:	2101      	movs	r1, #1
    9144:	a807      	add	r0, sp, #28
    9146:	f7ff fa11 	bl	856c <cmd_complete>
    914a:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    914c:	f008 ffbe 	bl	120cc <ll_rl_clear>
    9150:	e65d      	b.n	8e0e <hci_cmd_handle+0x51a>
	rp = cmd_complete(evt, sizeof(*rp));
    9152:	2102      	movs	r1, #2
    9154:	a807      	add	r0, sp, #28
    9156:	f7ff fa09 	bl	856c <cmd_complete>
    915a:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    915c:	f008 ffb4 	bl	120c8 <ll_rl_size_get>
    9160:	7060      	strb	r0, [r4, #1]
    9162:	e754      	b.n	900e <hci_cmd_handle+0x71a>
    9164:	2207      	movs	r2, #7
    9166:	68a1      	ldr	r1, [r4, #8]
    9168:	a808      	add	r0, sp, #32
    916a:	f7f8 fe5b 	bl	1e24 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    916e:	2107      	movs	r1, #7
    9170:	a807      	add	r0, sp, #28
    9172:	f7ff f9fb 	bl	856c <cmd_complete>
    9176:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    9178:	1c41      	adds	r1, r0, #1
    917a:	a808      	add	r0, sp, #32
    917c:	f009 f8f0 	bl	12360 <ll_rl_crpa_get>
    9180:	e645      	b.n	8e0e <hci_cmd_handle+0x51a>
    9182:	2207      	movs	r2, #7
    9184:	68a1      	ldr	r1, [r4, #8]
    9186:	a808      	add	r0, sp, #32
    9188:	f7f8 fe4c 	bl	1e24 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    918c:	2107      	movs	r1, #7
    918e:	a807      	add	r0, sp, #28
    9190:	f7ff f9ec 	bl	856c <cmd_complete>
    9194:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9196:	1c41      	adds	r1, r0, #1
    9198:	a808      	add	r0, sp, #32
    919a:	f009 f901 	bl	123a0 <ll_rl_lrpa_get>
    919e:	e636      	b.n	8e0e <hci_cmd_handle+0x51a>
	u8_t enable = cmd->enable;
    91a0:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    91a2:	2101      	movs	r1, #1
    91a4:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    91a6:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    91a8:	f7ff f9e0 	bl	856c <cmd_complete>
    91ac:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    91ae:	4628      	mov	r0, r5
    91b0:	f009 f90e 	bl	123d0 <ll_rl_enable>
    91b4:	e62b      	b.n	8e0e <hci_cmd_handle+0x51a>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    91b6:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    91b8:	8818      	ldrh	r0, [r3, #0]
    91ba:	f009 f91b 	bl	123f4 <ll_rl_timeout_set>
    91be:	e42e      	b.n	8a1e <hci_cmd_handle+0x12a>
    91c0:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    91c2:	79c1      	ldrb	r1, [r0, #7]
    91c4:	f009 f91e 	bl	12404 <ll_priv_mode_set>
    91c8:	e60d      	b.n	8de6 <hci_cmd_handle+0x4f2>
	rp = cmd_complete(evt, sizeof(*rp));
    91ca:	2103      	movs	r1, #3
    91cc:	a807      	add	r0, sp, #28
    91ce:	f7ff f9cd 	bl	856c <cmd_complete>
	rp->status = 0x00;
    91d2:	4601      	mov	r1, r0
    91d4:	2300      	movs	r3, #0
    91d6:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    91da:	3001      	adds	r0, #1
    91dc:	f7ff f81e 	bl	821c <ll_tx_pwr_get>
    91e0:	f7ff bbfd 	b.w	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    91e4:	210d      	movs	r1, #13
    91e6:	a807      	add	r0, sp, #28
    91e8:	f7ff f9c0 	bl	856c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    91ec:	2202      	movs	r2, #2
    91ee:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    91f0:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    91f2:	2201      	movs	r2, #1
    91f4:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    91f6:	220c      	movs	r2, #12
	rp->status = 0x00;
    91f8:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    91fa:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    91fc:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    91fe:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9200:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9202:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    9204:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9206:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    9208:	7242      	strb	r2, [r0, #9]
    920a:	7283      	strb	r3, [r0, #10]
    920c:	72c3      	strb	r3, [r0, #11]
    920e:	7303      	strb	r3, [r0, #12]
    9210:	f7ff bbe5 	b.w	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    9214:	2141      	movs	r1, #65	; 0x41
    9216:	a807      	add	r0, sp, #28
    9218:	f7ff f9a8 	bl	856c <cmd_complete>
	rp->status = 0x00;
    921c:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    921e:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9220:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9222:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9226:	f7f8 fe29 	bl	1e7c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    922a:	7863      	ldrb	r3, [r4, #1]
    922c:	f063 0358 	orn	r3, r3, #88	; 0x58
    9230:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9232:	78a3      	ldrb	r3, [r4, #2]
    9234:	f043 0303 	orr.w	r3, r3, #3
    9238:	70a3      	strb	r3, [r4, #2]
    923a:	f7ff bbd0 	b.w	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    923e:	2109      	movs	r1, #9
    9240:	a807      	add	r0, sp, #28
    9242:	f7ff f993 	bl	856c <cmd_complete>
	rp->status = 0x00;
    9246:	2100      	movs	r1, #0
    9248:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    924c:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    924e:	f7f8 fe15 	bl	1e7c <memset>
    9252:	f7ff bbc4 	b.w	89de <hci_cmd_handle+0xea>
	const char build_info[] = HCI_VS_BUILD_INFO;
    9256:	4b5c      	ldr	r3, [pc, #368]	; (93c8 <hci_cmd_handle+0xad4>)
    9258:	aa08      	add	r2, sp, #32
    925a:	f103 0628 	add.w	r6, r3, #40	; 0x28
    925e:	4615      	mov	r5, r2
    9260:	6818      	ldr	r0, [r3, #0]
    9262:	6859      	ldr	r1, [r3, #4]
    9264:	4614      	mov	r4, r2
    9266:	c403      	stmia	r4!, {r0, r1}
    9268:	3308      	adds	r3, #8
    926a:	42b3      	cmp	r3, r6
    926c:	4622      	mov	r2, r4
    926e:	d1f7      	bne.n	9260 <hci_cmd_handle+0x96c>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    9270:	2129      	movs	r1, #41	; 0x29
    9272:	a807      	add	r0, sp, #28
    9274:	f7ff f97a 	bl	856c <cmd_complete>
	rp->status = 0x00;
    9278:	2300      	movs	r3, #0
    927a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    927e:	2228      	movs	r2, #40	; 0x28
    9280:	4629      	mov	r1, r5
    9282:	e5de      	b.n	8e42 <hci_cmd_handle+0x54e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9284:	68a1      	ldr	r1, [r4, #8]
    9286:	2000      	movs	r0, #0
    9288:	f7fe ffac 	bl	81e4 <ll_addr_set>
    928c:	f7ff bbc7 	b.w	8a1e <hci_cmd_handle+0x12a>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9290:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9294:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    9298:	3201      	adds	r2, #1
    929a:	d106      	bne.n	92aa <hci_cmd_handle+0x9b6>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    929c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    92a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    92a4:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    92a6:	4293      	cmp	r3, r2
    92a8:	d020      	beq.n	92ec <hci_cmd_handle+0x9f8>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    92aa:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    92ae:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    92b2:	07db      	lsls	r3, r3, #31
    92b4:	d51a      	bpl.n	92ec <hci_cmd_handle+0x9f8>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    92b6:	2118      	movs	r1, #24
    92b8:	a807      	add	r0, sp, #28
    92ba:	f7ff f957 	bl	856c <cmd_complete>
		rp->status = 0x00;
    92be:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    92c0:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    92c2:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    92c4:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    92c6:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    92c8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    92cc:	1ca1      	adds	r1, r4, #2
    92ce:	f7ff f909 	bl	84e4 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    92d2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    92d6:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    92d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    92dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
    92e0:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    92e2:	2210      	movs	r2, #16
    92e4:	4631      	mov	r1, r6
    92e6:	f104 0008 	add.w	r0, r4, #8
    92ea:	e7b0      	b.n	924e <hci_cmd_handle+0x95a>
	rp = cmd_complete(evt, sizeof(*rp));
    92ec:	2102      	movs	r1, #2
    92ee:	a807      	add	r0, sp, #28
    92f0:	f7ff f93c 	bl	856c <cmd_complete>
	rp->status = 0x00;
    92f4:	2300      	movs	r3, #0
    92f6:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    92f8:	7043      	strb	r3, [r0, #1]
    92fa:	f7ff bb70 	b.w	89de <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    92fe:	2121      	movs	r1, #33	; 0x21
    9300:	a807      	add	r0, sp, #28
    9302:	f7ff f933 	bl	856c <cmd_complete>
	rp->status = 0x00;
    9306:	4603      	mov	r3, r0
    9308:	2200      	movs	r2, #0
    930a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    930e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    9312:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9314:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9318:	3101      	adds	r1, #1
    931a:	d04b      	beq.n	93b4 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    931c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9320:	3101      	adds	r1, #1
    9322:	d047      	beq.n	93b4 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9324:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    9328:	3101      	adds	r1, #1
    932a:	d043      	beq.n	93b4 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    932c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9330:	3101      	adds	r1, #1
    9332:	d03f      	beq.n	93b4 <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    9334:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    9338:	4619      	mov	r1, r3
    933a:	f7ff f8d3 	bl	84e4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    933e:	1d61      	adds	r1, r4, #5
    9340:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    9344:	f7ff f8ce 	bl	84e4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    9348:	f104 0109 	add.w	r1, r4, #9
    934c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    9350:	f7ff f8c8 	bl	84e4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    9354:	f104 010d 	add.w	r1, r4, #13
    9358:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    935c:	f7ff f8c2 	bl	84e4 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9364:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9368:	3301      	adds	r3, #1
    936a:	f104 0311 	add.w	r3, r4, #17
    936e:	d027      	beq.n	93c0 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9370:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9374:	3101      	adds	r1, #1
    9376:	d023      	beq.n	93c0 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9378:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    937c:	3101      	adds	r1, #1
    937e:	d01f      	beq.n	93c0 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    9380:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9384:	3101      	adds	r1, #1
    9386:	d01b      	beq.n	93c0 <hci_cmd_handle+0xacc>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    9388:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    938c:	4619      	mov	r1, r3
    938e:	f7ff f8a9 	bl	84e4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    9392:	f104 0115 	add.w	r1, r4, #21
    9396:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    939a:	f7ff f8a3 	bl	84e4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    939e:	f104 0119 	add.w	r1, r4, #25
    93a2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    93a6:	f7ff f89d 	bl	84e4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    93aa:	f104 011d 	add.w	r1, r4, #29
    93ae:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    93b2:	e563      	b.n	8e7c <hci_cmd_handle+0x588>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    93b4:	2210      	movs	r2, #16
    93b6:	2100      	movs	r1, #0
    93b8:	4618      	mov	r0, r3
    93ba:	f7f8 fd5f 	bl	1e7c <memset>
    93be:	e7cf      	b.n	9360 <hci_cmd_handle+0xa6c>
		memset(rp->er, 0x00, sizeof(rp->er));
    93c0:	2210      	movs	r2, #16
    93c2:	2100      	movs	r1, #0
    93c4:	4618      	mov	r0, r3
    93c6:	e742      	b.n	924e <hci_cmd_handle+0x95a>
    93c8:	00017c3b 	.word	0x00017c3b

000093cc <hci_acl_handle>:
{
    93cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    93d0:	2300      	movs	r3, #0
    93d2:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    93d4:	8983      	ldrh	r3, [r0, #12]
    93d6:	2b03      	cmp	r3, #3
{
    93d8:	4606      	mov	r6, r0
    93da:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    93dc:	d80e      	bhi.n	93fc <hci_acl_handle+0x30>
		BT_ERR("No HCI ACL header");
    93de:	4b3d      	ldr	r3, [pc, #244]	; (94d4 <hci_acl_handle+0x108>)
    93e0:	9301      	str	r3, [sp, #4]
    93e2:	9300      	str	r3, [sp, #0]
    93e4:	4b3c      	ldr	r3, [pc, #240]	; (94d8 <hci_acl_handle+0x10c>)
    93e6:	4a3d      	ldr	r2, [pc, #244]	; (94dc <hci_acl_handle+0x110>)
    93e8:	681c      	ldr	r4, [r3, #0]
    93ea:	493d      	ldr	r1, [pc, #244]	; (94e0 <hci_acl_handle+0x114>)
    93ec:	4b3d      	ldr	r3, [pc, #244]	; (94e4 <hci_acl_handle+0x118>)
    93ee:	483e      	ldr	r0, [pc, #248]	; (94e8 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL packet length");
    93f0:	47a0      	blx	r4
		return -EINVAL;
    93f2:	f06f 0015 	mvn.w	r0, #21
}
    93f6:	b003      	add	sp, #12
    93f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    93fc:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    9400:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    9402:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9404:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    9406:	f009 ff82 	bl	1330e <net_buf_simple_pull>
	if (buf->len < len) {
    940a:	89b3      	ldrh	r3, [r6, #12]
    940c:	42bb      	cmp	r3, r7
    940e:	d209      	bcs.n	9424 <hci_acl_handle+0x58>
		BT_ERR("Invalid HCI ACL packet length");
    9410:	4b30      	ldr	r3, [pc, #192]	; (94d4 <hci_acl_handle+0x108>)
    9412:	9301      	str	r3, [sp, #4]
    9414:	9300      	str	r3, [sp, #0]
    9416:	4b30      	ldr	r3, [pc, #192]	; (94d8 <hci_acl_handle+0x10c>)
    9418:	4a30      	ldr	r2, [pc, #192]	; (94dc <hci_acl_handle+0x110>)
    941a:	681c      	ldr	r4, [r3, #0]
    941c:	4930      	ldr	r1, [pc, #192]	; (94e0 <hci_acl_handle+0x114>)
    941e:	4b31      	ldr	r3, [pc, #196]	; (94e4 <hci_acl_handle+0x118>)
    9420:	4832      	ldr	r0, [pc, #200]	; (94ec <hci_acl_handle+0x120>)
    9422:	e7e5      	b.n	93f0 <hci_acl_handle+0x24>
	node_tx = ll_tx_mem_acquire();
    9424:	f007 fd9a 	bl	10f5c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    9428:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    942c:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    942e:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    9432:	bb38      	cbnz	r0, 9484 <hci_acl_handle+0xb8>
		BT_ERR("Tx Buffer Overflow");
    9434:	4b27      	ldr	r3, [pc, #156]	; (94d4 <hci_acl_handle+0x108>)
    9436:	9301      	str	r3, [sp, #4]
    9438:	9300      	str	r3, [sp, #0]
    943a:	4b27      	ldr	r3, [pc, #156]	; (94d8 <hci_acl_handle+0x10c>)
    943c:	4a27      	ldr	r2, [pc, #156]	; (94dc <hci_acl_handle+0x110>)
    943e:	681c      	ldr	r4, [r3, #0]
    9440:	4927      	ldr	r1, [pc, #156]	; (94e0 <hci_acl_handle+0x114>)
    9442:	4b28      	ldr	r3, [pc, #160]	; (94e4 <hci_acl_handle+0x118>)
    9444:	482a      	ldr	r0, [pc, #168]	; (94f0 <hci_acl_handle+0x124>)
    9446:	47a0      	blx	r4
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    9448:	4b2a      	ldr	r3, [pc, #168]	; (94f4 <hci_acl_handle+0x128>)
    944a:	e9d3 2300 	ldrd	r2, r3, [r3]
    944e:	2300      	movs	r3, #0
    9450:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    9454:	4313      	orrs	r3, r2
    9456:	d012      	beq.n	947e <hci_acl_handle+0xb2>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    945c:	2001      	movs	r0, #1
    945e:	f7fa fcdb 	bl	3e18 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9462:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9464:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9468:	211a      	movs	r1, #26
    946a:	f7ff f844 	bl	84f6 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    946e:	f8d8 0000 	ldr.w	r0, [r8]
    9472:	2101      	movs	r1, #1
    9474:	3008      	adds	r0, #8
    9476:	f009 ff2b 	bl	132d0 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    947a:	2301      	movs	r3, #1
    947c:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    947e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9482:	e7b8      	b.n	93f6 <hci_acl_handle+0x2a>
    9484:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9486:	f1b9 0f00 	cmp.w	r9, #0
    948a:	d002      	beq.n	9492 <hci_acl_handle+0xc6>
    948c:	f1b9 0f02 	cmp.w	r9, #2
    9490:	d11d      	bne.n	94ce <hci_acl_handle+0x102>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9492:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9494:	f362 0301 	bfi	r3, r2, #0, #2
    9498:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    949a:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    949c:	68b1      	ldr	r1, [r6, #8]
    949e:	463a      	mov	r2, r7
    94a0:	1de0      	adds	r0, r4, #7
    94a2:	f7f8 fcbf 	bl	1e24 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    94a6:	4621      	mov	r1, r4
    94a8:	4628      	mov	r0, r5
    94aa:	f007 fd63 	bl	10f74 <ll_tx_mem_enqueue>
    94ae:	2800      	cmp	r0, #0
    94b0:	d0a1      	beq.n	93f6 <hci_acl_handle+0x2a>
		BT_ERR("Invalid Tx Enqueue");
    94b2:	4b08      	ldr	r3, [pc, #32]	; (94d4 <hci_acl_handle+0x108>)
    94b4:	9301      	str	r3, [sp, #4]
    94b6:	9300      	str	r3, [sp, #0]
    94b8:	4b07      	ldr	r3, [pc, #28]	; (94d8 <hci_acl_handle+0x10c>)
    94ba:	4a08      	ldr	r2, [pc, #32]	; (94dc <hci_acl_handle+0x110>)
    94bc:	681d      	ldr	r5, [r3, #0]
    94be:	4908      	ldr	r1, [pc, #32]	; (94e0 <hci_acl_handle+0x114>)
    94c0:	4b08      	ldr	r3, [pc, #32]	; (94e4 <hci_acl_handle+0x118>)
    94c2:	480d      	ldr	r0, [pc, #52]	; (94f8 <hci_acl_handle+0x12c>)
    94c4:	47a8      	blx	r5
		ll_tx_mem_release(node_tx);
    94c6:	4620      	mov	r0, r4
    94c8:	f007 fd4e 	bl	10f68 <ll_tx_mem_release>
    94cc:	e791      	b.n	93f2 <hci_acl_handle+0x26>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    94ce:	2201      	movs	r2, #1
    94d0:	e7e0      	b.n	9494 <hci_acl_handle+0xc8>
    94d2:	bf00      	nop
    94d4:	0001563e 	.word	0x0001563e
    94d8:	20003a5c 	.word	0x20003a5c
    94dc:	000167b9 	.word	0x000167b9
    94e0:	00016808 	.word	0x00016808
    94e4:	00017ab3 	.word	0x00017ab3
    94e8:	00017b51 	.word	0x00017b51
    94ec:	00017b73 	.word	0x00017b73
    94f0:	00017ba1 	.word	0x00017ba1
    94f4:	20003d28 	.word	0x20003d28
    94f8:	00017bc4 	.word	0x00017bc4

000094fc <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    94fc:	7a03      	ldrb	r3, [r0, #8]
    94fe:	f003 0303 	and.w	r3, r3, #3
    9502:	3b01      	subs	r3, #1
    9504:	2b01      	cmp	r3, #1
{
    9506:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9508:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    950a:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    950c:	d81c      	bhi.n	9548 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    950e:	f101 0608 	add.w	r6, r1, #8
    9512:	4630      	mov	r0, r6
    9514:	2104      	movs	r1, #4
    9516:	f009 fedb 	bl	132d0 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    951a:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    951c:	7a61      	ldrb	r1, [r4, #9]
    951e:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9520:	f003 0303 	and.w	r3, r3, #3
    9524:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    9526:	bf0c      	ite	eq
    9528:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    952c:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    9530:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    9532:	4630      	mov	r0, r6
    9534:	f009 fecc 	bl	132d0 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9538:	7a62      	ldrb	r2, [r4, #9]
    953a:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    953e:	b002      	add	sp, #8
    9540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9544:	f7f8 bc6e 	b.w	1e24 <memcpy>
		LL_ASSERT(0);
    9548:	4b07      	ldr	r3, [pc, #28]	; (9568 <hci_acl_encode+0x6c>)
    954a:	9301      	str	r3, [sp, #4]
    954c:	9300      	str	r3, [sp, #0]
    954e:	4b07      	ldr	r3, [pc, #28]	; (956c <hci_acl_encode+0x70>)
    9550:	4a07      	ldr	r2, [pc, #28]	; (9570 <hci_acl_encode+0x74>)
    9552:	681c      	ldr	r4, [r3, #0]
    9554:	4907      	ldr	r1, [pc, #28]	; (9574 <hci_acl_encode+0x78>)
    9556:	4b08      	ldr	r3, [pc, #32]	; (9578 <hci_acl_encode+0x7c>)
    9558:	4808      	ldr	r0, [pc, #32]	; (957c <hci_acl_encode+0x80>)
    955a:	47a0      	blx	r4
    955c:	4040      	eors	r0, r0
    955e:	f380 8811 	msr	BASEPRI, r0
    9562:	f04f 0004 	mov.w	r0, #4
    9566:	df02      	svc	2
    9568:	0001563e 	.word	0x0001563e
    956c:	20003a5c 	.word	0x20003a5c
    9570:	000167b9 	.word	0x000167b9
    9574:	00016808 	.word	0x00016808
    9578:	00017b42 	.word	0x00017b42
    957c:	00016758 	.word	0x00016758

00009580 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9584:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    9586:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9588:	2b01      	cmp	r3, #1
{
    958a:	b093      	sub	sp, #76	; 0x4c
    958c:	4604      	mov	r4, r0
    958e:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9590:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9594:	f000 82ad 	beq.w	9af2 <hci_evt_encode+0x572>
	switch (node_rx->hdr.type) {
    9598:	3b02      	subs	r3, #2
    959a:	2b0a      	cmp	r3, #10
    959c:	f200 829f 	bhi.w	9ade <hci_evt_encode+0x55e>
    95a0:	e8df f013 	tbh	[pc, r3, lsl #1]
    95a4:	0135000b 	.word	0x0135000b
    95a8:	013d013b 	.word	0x013d013b
    95ac:	01be0185 	.word	0x01be0185
    95b0:	020101dc 	.word	0x020101dc
    95b4:	022e0219 	.word	0x022e0219
    95b8:	0249      	.short	0x0249
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    95ba:	2301      	movs	r3, #1
    95bc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    95c0:	2303      	movs	r3, #3
    95c2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    95c6:	23ff      	movs	r3, #255	; 0xff
    95c8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    95cc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    95d0:	2302      	movs	r3, #2
    95d2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    95d6:	7a43      	ldrb	r3, [r0, #9]
    95d8:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    95da:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    95dc:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    95e0:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    95e2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    95e6:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    95e8:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    95ea:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    95ee:	d505      	bpl.n	95fc <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    95f0:	f104 030a 	add.w	r3, r4, #10
    95f4:	464a      	mov	r2, r9
    95f6:	4608      	mov	r0, r1
    95f8:	f008 fe90 	bl	1231c <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    95fc:	4bb9      	ldr	r3, [pc, #740]	; (98e4 <hci_evt_encode+0x364>)
    95fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    9602:	2200      	movs	r2, #0
    9604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9608:	4313      	orrs	r3, r2
    960a:	f000 80ba 	beq.w	9782 <hci_evt_encode+0x202>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    960e:	7a63      	ldrb	r3, [r4, #9]
    9610:	4423      	add	r3, r4
    9612:	f893 a00c 	ldrb.w	sl, [r3, #12]
    9616:	4bb4      	ldr	r3, [pc, #720]	; (98e8 <hci_evt_encode+0x368>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    9618:	e9d3 2300 	ldrd	r2, r3, [r3]
    961c:	f1ba 0f00 	cmp.w	sl, #0
    9620:	d13d      	bne.n	969e <hci_evt_encode+0x11e>
    9622:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9626:	2300      	movs	r3, #0
    9628:	4313      	orrs	r3, r2
    962a:	f000 80aa 	beq.w	9782 <hci_evt_encode+0x202>
	if (dup_count >= 0) {
    962e:	4baf      	ldr	r3, [pc, #700]	; (98ec <hci_evt_encode+0x36c>)
    9630:	681a      	ldr	r2, [r3, #0]
    9632:	2a00      	cmp	r2, #0
    9634:	4698      	mov	r8, r3
    9636:	db54      	blt.n	96e2 <hci_evt_encode+0x162>
    9638:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 991c <hci_evt_encode+0x39c>
    963c:	2600      	movs	r6, #0
    963e:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    9642:	f8d8 2000 	ldr.w	r2, [r8]
    9646:	4296      	cmp	r6, r2
    9648:	db2c      	blt.n	96a4 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    964a:	4ea9      	ldr	r6, [pc, #676]	; (98f0 <hci_evt_encode+0x370>)
    964c:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 98f4 <hci_evt_encode+0x374>
    9650:	6830      	ldr	r0, [r6, #0]
    9652:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    9656:	4619      	mov	r1, r3
    9658:	2206      	movs	r2, #6
    965a:	3002      	adds	r0, #2
    965c:	f7f8 fbe2 	bl	1e24 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    9660:	6832      	ldr	r2, [r6, #0]
    9662:	7a23      	ldrb	r3, [r4, #8]
    9664:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    9668:	f3c3 1380 	ubfx	r3, r3, #6, #1
    966c:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    966e:	7a23      	ldrb	r3, [r4, #8]
    9670:	f003 010f 	and.w	r1, r3, #15
    9674:	2301      	movs	r3, #1
    9676:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9678:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    967c:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9680:	290f      	cmp	r1, #15
			dup_count++;
    9682:	bfd5      	itete	le
    9684:	3101      	addle	r1, #1
			dup_curr++;
    9686:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    9688:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    968a:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    968c:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    968e:	bfd8      	it	le
    9690:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9694:	2a10      	cmp	r2, #16
    9696:	d124      	bne.n	96e2 <hci_evt_encode+0x162>
			dup_curr = 0;
    9698:	2200      	movs	r2, #0
    969a:	6032      	str	r2, [r6, #0]
    969c:	e021      	b.n	96e2 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    969e:	f002 020b 	and.w	r2, r2, #11
    96a2:	e7c0      	b.n	9626 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    96a4:	4618      	mov	r0, r3
    96a6:	2206      	movs	r2, #6
    96a8:	4659      	mov	r1, fp
    96aa:	9307      	str	r3, [sp, #28]
    96ac:	f7f8 fba5 	bl	1dfa <memcmp>
    96b0:	9b07      	ldr	r3, [sp, #28]
    96b2:	bb00      	cbnz	r0, 96f6 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    96b4:	7a21      	ldrb	r1, [r4, #8]
    96b6:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    96ba:	460a      	mov	r2, r1
    96bc:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    96c0:	4281      	cmp	r1, r0
    96c2:	d118      	bne.n	96f6 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    96c4:	488b      	ldr	r0, [pc, #556]	; (98f4 <hci_evt_encode+0x374>)
    96c6:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    96ca:	f002 020f 	and.w	r2, r2, #15
    96ce:	fa23 f102 	lsr.w	r1, r3, r2
    96d2:	07c9      	lsls	r1, r1, #31
    96d4:	d455      	bmi.n	9782 <hci_evt_encode+0x202>
				dup_filter[i].mask |= BIT(adv->type);
    96d6:	2101      	movs	r1, #1
    96d8:	fa01 f202 	lsl.w	r2, r1, r2
    96dc:	4313      	orrs	r3, r2
    96de:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    96e2:	f894 b008 	ldrb.w	fp, [r4, #8]
    96e6:	7a63      	ldrb	r3, [r4, #9]
    96e8:	f00b 0b0f 	and.w	fp, fp, #15
    96ec:	f1bb 0f01 	cmp.w	fp, #1
    96f0:	d105      	bne.n	96fe <hci_evt_encode+0x17e>
		data_len = 0;
    96f2:	2600      	movs	r6, #0
    96f4:	e005      	b.n	9702 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    96f6:	3601      	adds	r6, #1
    96f8:	f10b 0b08 	add.w	fp, fp, #8
    96fc:	e7a1      	b.n	9642 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    96fe:	1f9e      	subs	r6, r3, #6
    9700:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9702:	4423      	add	r3, r4
    9704:	f893 800a 	ldrb.w	r8, [r3, #10]
    9708:	f1c8 0800 	rsb	r8, r8, #0
    970c:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    9710:	f1ba 0f00 	cmp.w	sl, #0
    9714:	d042      	beq.n	979c <hci_evt_encode+0x21c>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    9716:	f1bb 0f01 	cmp.w	fp, #1
    971a:	d00f      	beq.n	973c <hci_evt_encode+0x1bc>
    971c:	4b76      	ldr	r3, [pc, #472]	; (98f8 <hci_evt_encode+0x378>)
    971e:	9301      	str	r3, [sp, #4]
    9720:	9300      	str	r3, [sp, #0]
    9722:	4b76      	ldr	r3, [pc, #472]	; (98fc <hci_evt_encode+0x37c>)
    9724:	4a76      	ldr	r2, [pc, #472]	; (9900 <hci_evt_encode+0x380>)
    9726:	681c      	ldr	r4, [r3, #0]
    9728:	4976      	ldr	r1, [pc, #472]	; (9904 <hci_evt_encode+0x384>)
    972a:	4b77      	ldr	r3, [pc, #476]	; (9908 <hci_evt_encode+0x388>)
    972c:	4877      	ldr	r0, [pc, #476]	; (990c <hci_evt_encode+0x38c>)
		LL_ASSERT(0);
    972e:	47a0      	blx	r4
    9730:	4040      	eors	r0, r0
    9732:	f380 8811 	msr	BASEPRI, r0
    9736:	f04f 0004 	mov.w	r0, #4
    973a:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    973c:	2211      	movs	r2, #17
    973e:	210b      	movs	r1, #11
    9740:	4628      	mov	r0, r5
    9742:	f7fe fefd 	bl	8540 <meta_evt>
		drp->num_reports = 1;
    9746:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    974a:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    974e:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    9750:	f008 fcba 	bl	120c8 <ll_rl_size_get>
    9754:	4581      	cmp	r9, r0
    9756:	f105 0003 	add.w	r0, r5, #3
    975a:	d215      	bcs.n	9788 <hci_evt_encode+0x208>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    975c:	4602      	mov	r2, r0
    975e:	1ca9      	adds	r1, r5, #2
    9760:	4648      	mov	r0, r9
    9762:	f008 fb4d 	bl	11e00 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    9766:	78ab      	ldrb	r3, [r5, #2]
    9768:	3302      	adds	r3, #2
    976a:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    976c:	2301      	movs	r3, #1
    976e:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    9770:	2206      	movs	r2, #6
    9772:	f107 0108 	add.w	r1, r7, #8
    9776:	f105 000a 	add.w	r0, r5, #10
    977a:	f7f8 fb53 	bl	1e24 <memcpy>
		dir_info->rssi = rssi;
    977e:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9782:	b013      	add	sp, #76	; 0x4c
    9784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    9788:	7a23      	ldrb	r3, [r4, #8]
    978a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    978e:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    9790:	2206      	movs	r2, #6
    9792:	f104 010a 	add.w	r1, r4, #10
    9796:	f7f8 fb45 	bl	1e24 <memcpy>
    979a:	e7e7      	b.n	976c <hci_evt_encode+0x1ec>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    979c:	f106 020b 	add.w	r2, r6, #11
    97a0:	b2d2      	uxtb	r2, r2
    97a2:	2102      	movs	r1, #2
    97a4:	4628      	mov	r0, r5
    97a6:	f7fe fecb 	bl	8540 <meta_evt>
	sep->num_reports = 1;
    97aa:	2301      	movs	r3, #1
    97ac:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    97ae:	7a23      	ldrb	r3, [r4, #8]
    97b0:	aa12      	add	r2, sp, #72	; 0x48
    97b2:	f003 030f 	and.w	r3, r3, #15
    97b6:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    97b8:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    97ba:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    97be:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    97c0:	7a63      	ldrb	r3, [r4, #9]
    97c2:	4423      	add	r3, r4
    97c4:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    97c8:	f008 fc7e 	bl	120c8 <ll_rl_size_get>
    97cc:	4581      	cmp	r9, r0
    97ce:	f105 0003 	add.w	r0, r5, #3
    97d2:	d212      	bcs.n	97fa <hci_evt_encode+0x27a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    97d4:	4602      	mov	r2, r0
    97d6:	1ca9      	adds	r1, r5, #2
    97d8:	4648      	mov	r0, r9
    97da:	f008 fb11 	bl	11e00 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    97de:	78ab      	ldrb	r3, [r5, #2]
    97e0:	3302      	adds	r3, #2
    97e2:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    97e4:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    97e6:	350a      	adds	r5, #10
    97e8:	4632      	mov	r2, r6
    97ea:	f107 0108 	add.w	r1, r7, #8
    97ee:	4628      	mov	r0, r5
    97f0:	f7f8 fb18 	bl	1e24 <memcpy>
	*prssi = rssi;
    97f4:	f805 8006 	strb.w	r8, [r5, r6]
    97f8:	e7c3      	b.n	9782 <hci_evt_encode+0x202>
		adv_info->addr.type = adv->tx_addr;
    97fa:	7a23      	ldrb	r3, [r4, #8]
    97fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9800:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    9802:	2206      	movs	r2, #6
    9804:	f104 010a 	add.w	r1, r4, #10
    9808:	f7f8 fb0c 	bl	1e24 <memcpy>
    980c:	e7ea      	b.n	97e4 <hci_evt_encode+0x264>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    980e:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    9810:	4621      	mov	r1, r4
    9812:	4638      	mov	r0, r7
    9814:	f7fe ffec 	bl	87f0 <le_adv_ext_report.isra.66>
    9818:	e7b3      	b.n	9782 <hci_evt_encode+0x202>
    981a:	2204      	movs	r2, #4
    981c:	e7f8      	b.n	9810 <hci_evt_encode+0x290>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    981e:	4b31      	ldr	r3, [pc, #196]	; (98e4 <hci_evt_encode+0x364>)
    9820:	e9d3 2300 	ldrd	r2, r3, [r3]
    9824:	2200      	movs	r2, #0
    9826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    982a:	4313      	orrs	r3, r2
    982c:	f100 060a 	add.w	r6, r0, #10
    9830:	d007      	beq.n	9842 <hci_evt_encode+0x2c2>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    9832:	4b2d      	ldr	r3, [pc, #180]	; (98e8 <hci_evt_encode+0x368>)
    9834:	e9d3 2300 	ldrd	r2, r3, [r3]
    9838:	2300      	movs	r3, #0
    983a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    983e:	4313      	orrs	r3, r2
    9840:	d124      	bne.n	988c <hci_evt_encode+0x30c>
		addr.type = adv->tx_addr;
    9842:	7a23      	ldrb	r3, [r4, #8]
    9844:	ad12      	add	r5, sp, #72	; 0x48
    9846:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    984a:	2206      	movs	r2, #6
    984c:	4631      	mov	r1, r6
    984e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    9852:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9856:	f7f8 fae5 	bl	1e24 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    985a:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    985c:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    985e:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9860:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9862:	4631      	mov	r1, r6
    9864:	4628      	mov	r0, r5
    9866:	f7fe ff87 	bl	8778 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    986a:	4264      	negs	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    986c:	4b22      	ldr	r3, [pc, #136]	; (98f8 <hci_evt_encode+0x378>)
    986e:	9304      	str	r3, [sp, #16]
    9870:	9300      	str	r3, [sp, #0]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9872:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    9874:	2200      	movs	r2, #0
    9876:	4b21      	ldr	r3, [pc, #132]	; (98fc <hci_evt_encode+0x37c>)
    9878:	9201      	str	r2, [sp, #4]
    987a:	9403      	str	r4, [sp, #12]
    987c:	9602      	str	r6, [sp, #8]
    987e:	681c      	ldr	r4, [r3, #0]
    9880:	4a23      	ldr	r2, [pc, #140]	; (9910 <hci_evt_encode+0x390>)
    9882:	4b24      	ldr	r3, [pc, #144]	; (9914 <hci_evt_encode+0x394>)
    9884:	491f      	ldr	r1, [pc, #124]	; (9904 <hci_evt_encode+0x384>)
    9886:	4824      	ldr	r0, [pc, #144]	; (9918 <hci_evt_encode+0x398>)
    9888:	47a0      	blx	r4
    988a:	e77a      	b.n	9782 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    988c:	2208      	movs	r2, #8
    988e:	2113      	movs	r1, #19
    9890:	4628      	mov	r0, r5
    9892:	f7fe fe55 	bl	8540 <meta_evt>
	sep->handle = 0;
    9896:	2300      	movs	r3, #0
    9898:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    989a:	7a23      	ldrb	r3, [r4, #8]
    989c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    98a0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    98a2:	2206      	movs	r2, #6
    98a4:	4631      	mov	r1, r6
    98a6:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    98a8:	f7f8 fabc 	bl	1e24 <memcpy>
    98ac:	e769      	b.n	9782 <hci_evt_encode+0x202>
			le_conn_complete(cc->status, cc, handle, buf);
    98ae:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    98b0:	b93f      	cbnz	r7, 98c2 <hci_evt_encode+0x342>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    98b2:	f100 0314 	add.w	r3, r0, #20
    98b6:	f100 010e 	add.w	r1, r0, #14
    98ba:	22ff      	movs	r2, #255	; 0xff
    98bc:	7b40      	ldrb	r0, [r0, #13]
    98be:	f008 fd2d 	bl	1231c <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98c2:	4b08      	ldr	r3, [pc, #32]	; (98e4 <hci_evt_encode+0x364>)
    98c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    98c8:	2200      	movs	r2, #0
    98ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    98ce:	4313      	orrs	r3, r2
    98d0:	f43f af57 	beq.w	9782 <hci_evt_encode+0x202>
    98d4:	462b      	mov	r3, r5
    98d6:	4632      	mov	r2, r6
    98d8:	f104 010b 	add.w	r1, r4, #11
    98dc:	4638      	mov	r0, r7
    98de:	f7fe feb5 	bl	864c <le_conn_complete.part.39>
    98e2:	e74e      	b.n	9782 <hci_evt_encode+0x202>
    98e4:	20003d28 	.word	0x20003d28
    98e8:	20003d30 	.word	0x20003d30
    98ec:	20000830 	.word	0x20000830
    98f0:	20000834 	.word	0x20000834
    98f4:	20000838 	.word	0x20000838
    98f8:	0001563e 	.word	0x0001563e
    98fc:	20003a5c 	.word	0x20003a5c
    9900:	000167b9 	.word	0x000167b9
    9904:	00016808 	.word	0x00016808
    9908:	00017ac2 	.word	0x00017ac2
    990c:	00017c63 	.word	0x00017c63
    9910:	00016801 	.word	0x00016801
    9914:	00017aea 	.word	0x00017aea
    9918:	00017ca9 	.word	0x00017ca9
    991c:	2000083a 	.word	0x2000083a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9920:	4bb8      	ldr	r3, [pc, #736]	; (9c04 <hci_evt_encode+0x684>)
    9922:	e9d3 2300 	ldrd	r2, r3, [r3]
    9926:	2300      	movs	r3, #0
    9928:	f002 0210 	and.w	r2, r2, #16
    992c:	4313      	orrs	r3, r2
    992e:	f43f af28 	beq.w	9782 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    9932:	2204      	movs	r2, #4
    9934:	2105      	movs	r1, #5
    9936:	4628      	mov	r0, r5
    9938:	f7fe fddd 	bl	84f6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    993c:	2104      	movs	r1, #4
    993e:	f105 0008 	add.w	r0, r5, #8
    9942:	f009 fcc5 	bl	132d0 <net_buf_simple_add>
	ep->status = 0x00;
    9946:	2300      	movs	r3, #0
	conn_count--;
    9948:	4aaf      	ldr	r2, [pc, #700]	; (9c08 <hci_evt_encode+0x688>)
	ep->status = 0x00;
    994a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    994c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    9950:	7a23      	ldrb	r3, [r4, #8]
    9952:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    9954:	6813      	ldr	r3, [r2, #0]
    9956:	3b01      	subs	r3, #1
    9958:	6013      	str	r3, [r2, #0]
    995a:	e712      	b.n	9782 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    995c:	4ba9      	ldr	r3, [pc, #676]	; (9c04 <hci_evt_encode+0x684>)
    995e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9962:	2200      	movs	r2, #0
    9964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9968:	4313      	orrs	r3, r2
    996a:	f43f af0a 	beq.w	9782 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    996e:	4ba7      	ldr	r3, [pc, #668]	; (9c0c <hci_evt_encode+0x68c>)
    9970:	e9d3 2300 	ldrd	r2, r3, [r3]
    9974:	2300      	movs	r3, #0
    9976:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    997a:	4313      	orrs	r3, r2
    997c:	f43f af01 	beq.w	9782 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    9980:	2209      	movs	r2, #9
    9982:	2103      	movs	r1, #3
    9984:	4628      	mov	r0, r5
    9986:	f7fe fddb 	bl	8540 <meta_evt>
	sep->status = radio_cu->status;
    998a:	7ae3      	ldrb	r3, [r4, #11]
    998c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    998e:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9990:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9994:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9998:	89e3      	ldrh	r3, [r4, #14]
    999a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    999e:	8a23      	ldrh	r3, [r4, #16]
    99a0:	f8a0 3007 	strh.w	r3, [r0, #7]
    99a4:	e6ed      	b.n	9782 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    99a6:	4b97      	ldr	r3, [pc, #604]	; (9c04 <hci_evt_encode+0x684>)
    99a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ac:	2200      	movs	r2, #0
    99ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    99b2:	4313      	orrs	r3, r2
    99b4:	f43f aee5 	beq.w	9782 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    99b8:	2203      	movs	r2, #3
    99ba:	2130      	movs	r1, #48	; 0x30
    99bc:	4628      	mov	r0, r5
    99be:	f7fe fd9a 	bl	84f6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    99c2:	2103      	movs	r1, #3
    99c4:	f105 0008 	add.w	r0, r5, #8
    99c8:	f009 fc82 	bl	132d0 <net_buf_simple_add>
	ep->status = 0x00;
    99cc:	2300      	movs	r3, #0
    99ce:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    99d0:	f8a0 6001 	strh.w	r6, [r0, #1]
    99d4:	e6d5      	b.n	9782 <hci_evt_encode+0x202>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    99d6:	4b8e      	ldr	r3, [pc, #568]	; (9c10 <hci_evt_encode+0x690>)
    99d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99dc:	2300      	movs	r3, #0
    99de:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    99e2:	4313      	orrs	r3, r2
    99e4:	f43f aecd 	beq.w	9782 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    99e8:	2202      	movs	r2, #2
    99ea:	2157      	movs	r1, #87	; 0x57
    99ec:	4628      	mov	r0, r5
    99ee:	f7fe fd82 	bl	84f6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    99f2:	2102      	movs	r1, #2
    99f4:	f105 0008 	add.w	r0, r5, #8
    99f8:	f009 fc6a 	bl	132d0 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    99fc:	8006      	strh	r6, [r0, #0]
    99fe:	e6c0      	b.n	9782 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a00:	4b80      	ldr	r3, [pc, #512]	; (9c04 <hci_evt_encode+0x684>)
    9a02:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a06:	2200      	movs	r2, #0
    9a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9a0c:	4313      	orrs	r3, r2
    9a0e:	f43f aeb8 	beq.w	9782 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9a12:	4b7e      	ldr	r3, [pc, #504]	; (9c0c <hci_evt_encode+0x68c>)
    9a14:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a18:	2300      	movs	r3, #0
    9a1a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a1e:	4313      	orrs	r3, r2
    9a20:	f43f aeaf 	beq.w	9782 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    9a24:	2203      	movs	r2, #3
    9a26:	2114      	movs	r1, #20
    9a28:	4628      	mov	r0, r5
    9a2a:	f7fe fd89 	bl	8540 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9a2e:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    9a30:	7ae3      	ldrb	r3, [r4, #11]
    9a32:	7083      	strb	r3, [r0, #2]
    9a34:	e6a5      	b.n	9782 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a36:	4b73      	ldr	r3, [pc, #460]	; (9c04 <hci_evt_encode+0x684>)
    9a38:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a3c:	2200      	movs	r2, #0
    9a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9a42:	4313      	orrs	r3, r2
    9a44:	d007      	beq.n	9a56 <hci_evt_encode+0x4d6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    9a46:	4b71      	ldr	r3, [pc, #452]	; (9c0c <hci_evt_encode+0x68c>)
    9a48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a4c:	2300      	movs	r3, #0
    9a4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a52:	4313      	orrs	r3, r2
    9a54:	d123      	bne.n	9a9e <hci_evt_encode+0x51e>
    9a56:	7b22      	ldrb	r2, [r4, #12]
    9a58:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    9a5a:	486e      	ldr	r0, [pc, #440]	; (9c14 <hci_evt_encode+0x694>)
    9a5c:	2a00      	cmp	r2, #0
    9a5e:	fa92 f3a2 	rbit	r3, r2
    9a62:	fab3 f383 	clz	r3, r3
    9a66:	fa91 f2a1 	rbit	r2, r1
    9a6a:	bf08      	it	eq
    9a6c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9a70:	2900      	cmp	r1, #0
    9a72:	fab2 f282 	clz	r2, r2
    9a76:	bf08      	it	eq
    9a78:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    9a7c:	4966      	ldr	r1, [pc, #408]	; (9c18 <hci_evt_encode+0x698>)
    9a7e:	9105      	str	r1, [sp, #20]
    9a80:	3301      	adds	r3, #1
    9a82:	3201      	adds	r2, #1
    9a84:	9204      	str	r2, [sp, #16]
    9a86:	9303      	str	r3, [sp, #12]
    9a88:	7ae3      	ldrb	r3, [r4, #11]
    9a8a:	9302      	str	r3, [sp, #8]
    9a8c:	e88d 0042 	stmia.w	sp, {r1, r6}
    9a90:	4b62      	ldr	r3, [pc, #392]	; (9c1c <hci_evt_encode+0x69c>)
    9a92:	4a63      	ldr	r2, [pc, #396]	; (9c20 <hci_evt_encode+0x6a0>)
    9a94:	681c      	ldr	r4, [r3, #0]
    9a96:	4963      	ldr	r1, [pc, #396]	; (9c24 <hci_evt_encode+0x6a4>)
    9a98:	4b63      	ldr	r3, [pc, #396]	; (9c28 <hci_evt_encode+0x6a8>)
    9a9a:	47a0      	blx	r4
    9a9c:	e671      	b.n	9782 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    9a9e:	2205      	movs	r2, #5
    9aa0:	210c      	movs	r1, #12
    9aa2:	4628      	mov	r0, r5
    9aa4:	f7fe fd4c 	bl	8540 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    9aa8:	7ae3      	ldrb	r3, [r4, #11]
    9aaa:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9aac:	f8a0 6001 	strh.w	r6, [r0, #1]
    9ab0:	7b22      	ldrb	r2, [r4, #12]
    9ab2:	2a00      	cmp	r2, #0
    9ab4:	fa92 f3a2 	rbit	r3, r2
    9ab8:	fab3 f383 	clz	r3, r3
    9abc:	bf08      	it	eq
    9abe:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9ac2:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    9ac4:	70c3      	strb	r3, [r0, #3]
    9ac6:	7b62      	ldrb	r2, [r4, #13]
    9ac8:	fa92 f3a2 	rbit	r3, r2
    9acc:	2a00      	cmp	r2, #0
    9ace:	fab3 f383 	clz	r3, r3
    9ad2:	bf08      	it	eq
    9ad4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9ad8:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9ada:	7103      	strb	r3, [r0, #4]
    9adc:	e651      	b.n	9782 <hci_evt_encode+0x202>
		LL_ASSERT(0);
    9ade:	4b4e      	ldr	r3, [pc, #312]	; (9c18 <hci_evt_encode+0x698>)
    9ae0:	9301      	str	r3, [sp, #4]
    9ae2:	9300      	str	r3, [sp, #0]
    9ae4:	4b4d      	ldr	r3, [pc, #308]	; (9c1c <hci_evt_encode+0x69c>)
    9ae6:	681c      	ldr	r4, [r3, #0]
    9ae8:	4b50      	ldr	r3, [pc, #320]	; (9c2c <hci_evt_encode+0x6ac>)
    9aea:	4a51      	ldr	r2, [pc, #324]	; (9c30 <hci_evt_encode+0x6b0>)
    9aec:	494d      	ldr	r1, [pc, #308]	; (9c24 <hci_evt_encode+0x6a4>)
    9aee:	4851      	ldr	r0, [pc, #324]	; (9c34 <hci_evt_encode+0x6b4>)
    9af0:	e61d      	b.n	972e <hci_evt_encode+0x1ae>
	switch (pdu_data->llctrl.opcode) {
    9af2:	7ac3      	ldrb	r3, [r0, #11]
    9af4:	3b03      	subs	r3, #3
    9af6:	2b12      	cmp	r3, #18
    9af8:	f200 80e1 	bhi.w	9cbe <hci_evt_encode+0x73e>
    9afc:	e8df f013 	tbh	[pc, r3, lsl #1]
    9b00:	00df0013 	.word	0x00df0013
    9b04:	003800df 	.word	0x003800df
    9b08:	00df00cb 	.word	0x00df00cb
    9b0c:	00df003e 	.word	0x00df003e
    9b10:	004500df 	.word	0x004500df
    9b14:	00df0064 	.word	0x00df0064
    9b18:	00df0068 	.word	0x00df0068
    9b1c:	00df00df 	.word	0x00df00df
    9b20:	00ab00df 	.word	0x00ab00df
    9b24:	00ab      	.short	0x00ab
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9b26:	4b37      	ldr	r3, [pc, #220]	; (9c04 <hci_evt_encode+0x684>)
    9b28:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b2c:	2200      	movs	r2, #0
    9b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9b32:	4313      	orrs	r3, r2
    9b34:	f43f ae25 	beq.w	9782 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9b38:	4b34      	ldr	r3, [pc, #208]	; (9c0c <hci_evt_encode+0x68c>)
    9b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b3e:	2300      	movs	r3, #0
    9b40:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9b44:	4313      	orrs	r3, r2
    9b46:	f43f ae1c 	beq.w	9782 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9b4a:	220c      	movs	r2, #12
    9b4c:	2105      	movs	r1, #5
    9b4e:	4628      	mov	r0, r5
    9b50:	f7fe fcf6 	bl	8540 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9b54:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9b56:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9b58:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    9b5c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9b60:	f7f8 f960 	bl	1e24 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9b64:	2202      	movs	r2, #2
    9b66:	f104 0114 	add.w	r1, r4, #20
    9b6a:	f105 000a 	add.w	r0, r5, #10
    9b6e:	e69b      	b.n	98a8 <hci_evt_encode+0x328>
		encrypt_change(0x00, handle, buf);
    9b70:	460a      	mov	r2, r1
    9b72:	2000      	movs	r0, #0
    9b74:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9b76:	f7fe fd1b 	bl	85b0 <encrypt_change>
    9b7a:	e602      	b.n	9782 <hci_evt_encode+0x202>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    9b7c:	460b      	mov	r3, r1
    9b7e:	4632      	mov	r2, r6
    9b80:	4639      	mov	r1, r7
    9b82:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9b84:	f7fe fd34 	bl	85f0 <le_remote_feat_complete>
    9b88:	e5fb      	b.n	9782 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    9b8a:	4b1e      	ldr	r3, [pc, #120]	; (9c04 <hci_evt_encode+0x684>)
    9b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b90:	2300      	movs	r3, #0
    9b92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    9b96:	4313      	orrs	r3, r2
    9b98:	f43f adf3 	beq.w	9782 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    9b9c:	2208      	movs	r2, #8
    9b9e:	210c      	movs	r1, #12
    9ba0:	4628      	mov	r0, r5
    9ba2:	f7fe fca8 	bl	84f6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9ba6:	2108      	movs	r1, #8
    9ba8:	1868      	adds	r0, r5, r1
    9baa:	f009 fb91 	bl	132d0 <net_buf_simple_add>
	ep->status = 0x00;
    9bae:	2300      	movs	r3, #0
    9bb0:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9bb2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    9bb6:	7b23      	ldrb	r3, [r4, #12]
    9bb8:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    9bba:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9bbe:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9bc0:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9bc4:	80c3      	strh	r3, [r0, #6]
    9bc6:	e5dc      	b.n	9782 <hci_evt_encode+0x202>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9bc8:	460a      	mov	r2, r1
    9bca:	7b00      	ldrb	r0, [r0, #12]
    9bcc:	4631      	mov	r1, r6
    9bce:	e7d2      	b.n	9b76 <hci_evt_encode+0x5f6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9bd0:	4b0c      	ldr	r3, [pc, #48]	; (9c04 <hci_evt_encode+0x684>)
    9bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bd6:	2200      	movs	r2, #0
    9bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9bdc:	4313      	orrs	r3, r2
    9bde:	d007      	beq.n	9bf0 <hci_evt_encode+0x670>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9be0:	4b0a      	ldr	r3, [pc, #40]	; (9c0c <hci_evt_encode+0x68c>)
    9be2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9be6:	2300      	movs	r3, #0
    9be8:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9bec:	4313      	orrs	r3, r2
    9bee:	d123      	bne.n	9c38 <hci_evt_encode+0x6b8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9bf0:	2300      	movs	r3, #0
    9bf2:	9301      	str	r3, [sp, #4]
    9bf4:	9300      	str	r3, [sp, #0]
    9bf6:	221a      	movs	r2, #26
    9bf8:	2102      	movs	r1, #2
    9bfa:	4630      	mov	r0, r6
    9bfc:	f006 ff04 	bl	10a08 <ll_conn_update>
    9c00:	e5bf      	b.n	9782 <hci_evt_encode+0x202>
    9c02:	bf00      	nop
    9c04:	20003d28 	.word	0x20003d28
    9c08:	2000082c 	.word	0x2000082c
    9c0c:	20003d30 	.word	0x20003d30
    9c10:	200008b8 	.word	0x200008b8
    9c14:	00017cdc 	.word	0x00017cdc
    9c18:	0001563e 	.word	0x0001563e
    9c1c:	20003a5c 	.word	0x20003a5c
    9c20:	00016801 	.word	0x00016801
    9c24:	00016808 	.word	0x00016808
    9c28:	00017aff 	.word	0x00017aff
    9c2c:	00017b13 	.word	0x00017b13
    9c30:	000167b9 	.word	0x000167b9
    9c34:	00016758 	.word	0x00016758
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    9c38:	220a      	movs	r2, #10
    9c3a:	2106      	movs	r1, #6
    9c3c:	4628      	mov	r0, r5
    9c3e:	f7fe fc7f 	bl	8540 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9c42:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9c44:	89a3      	ldrh	r3, [r4, #12]
    9c46:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    9c48:	89e3      	ldrh	r3, [r4, #14]
    9c4a:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    9c4c:	8a23      	ldrh	r3, [r4, #16]
    9c4e:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    9c50:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9c52:	8103      	strh	r3, [r0, #8]
    9c54:	e595      	b.n	9782 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9c56:	4b1d      	ldr	r3, [pc, #116]	; (9ccc <hci_evt_encode+0x74c>)
    9c58:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c5c:	2200      	movs	r2, #0
    9c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9c62:	4313      	orrs	r3, r2
    9c64:	f43f ad8d 	beq.w	9782 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    9c68:	4b19      	ldr	r3, [pc, #100]	; (9cd0 <hci_evt_encode+0x750>)
    9c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c6e:	2300      	movs	r3, #0
    9c70:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9c74:	4313      	orrs	r3, r2
    9c76:	f43f ad84 	beq.w	9782 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    9c7a:	220a      	movs	r2, #10
    9c7c:	2107      	movs	r1, #7
    9c7e:	4628      	mov	r0, r5
    9c80:	f7fe fc5e 	bl	8540 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9c84:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    9c86:	8a23      	ldrh	r3, [r4, #16]
    9c88:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    9c8a:	8a63      	ldrh	r3, [r4, #18]
    9c8c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    9c8e:	89a3      	ldrh	r3, [r4, #12]
    9c90:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9c92:	89e3      	ldrh	r3, [r4, #14]
    9c94:	e7dd      	b.n	9c52 <hci_evt_encode+0x6d2>
    9c96:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9c98:	2a0e      	cmp	r2, #14
    9c9a:	d104      	bne.n	9ca6 <hci_evt_encode+0x726>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9c9c:	460b      	mov	r3, r1
    9c9e:	4632      	mov	r2, r6
    9ca0:	2100      	movs	r1, #0
    9ca2:	201a      	movs	r0, #26
    9ca4:	e76e      	b.n	9b84 <hci_evt_encode+0x604>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9ca6:	4b0b      	ldr	r3, [pc, #44]	; (9cd4 <hci_evt_encode+0x754>)
    9ca8:	9302      	str	r3, [sp, #8]
    9caa:	9300      	str	r3, [sp, #0]
    9cac:	4b0a      	ldr	r3, [pc, #40]	; (9cd8 <hci_evt_encode+0x758>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9cae:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9cb0:	681c      	ldr	r4, [r3, #0]
    9cb2:	4a0a      	ldr	r2, [pc, #40]	; (9cdc <hci_evt_encode+0x75c>)
    9cb4:	4b0a      	ldr	r3, [pc, #40]	; (9ce0 <hci_evt_encode+0x760>)
    9cb6:	490b      	ldr	r1, [pc, #44]	; (9ce4 <hci_evt_encode+0x764>)
    9cb8:	480b      	ldr	r0, [pc, #44]	; (9ce8 <hci_evt_encode+0x768>)
    9cba:	47a0      	blx	r4
    9cbc:	e561      	b.n	9782 <hci_evt_encode+0x202>
		LL_ASSERT(0);
    9cbe:	4b05      	ldr	r3, [pc, #20]	; (9cd4 <hci_evt_encode+0x754>)
    9cc0:	9301      	str	r3, [sp, #4]
    9cc2:	9300      	str	r3, [sp, #0]
    9cc4:	4b04      	ldr	r3, [pc, #16]	; (9cd8 <hci_evt_encode+0x758>)
    9cc6:	681c      	ldr	r4, [r3, #0]
    9cc8:	4b08      	ldr	r3, [pc, #32]	; (9cec <hci_evt_encode+0x76c>)
    9cca:	e70e      	b.n	9aea <hci_evt_encode+0x56a>
    9ccc:	20003d28 	.word	0x20003d28
    9cd0:	20003d30 	.word	0x20003d30
    9cd4:	0001563e 	.word	0x0001563e
    9cd8:	20003a5c 	.word	0x20003a5c
    9cdc:	00016801 	.word	0x00016801
    9ce0:	00017b22 	.word	0x00017b22
    9ce4:	00016808 	.word	0x00016808
    9ce8:	00017d18 	.word	0x00017d18
    9cec:	00017b31 	.word	0x00017b31

00009cf0 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9cf0:	b570      	push	{r4, r5, r6, lr}
    9cf2:	4606      	mov	r6, r0
    9cf4:	460d      	mov	r5, r1
    9cf6:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    9cf8:	2113      	movs	r1, #19
    9cfa:	2205      	movs	r2, #5
    9cfc:	f7fe fbfb 	bl	84f6 <evt_create>

	ep = net_buf_add(buf, len);
    9d00:	2105      	movs	r1, #5
    9d02:	f106 0008 	add.w	r0, r6, #8
    9d06:	f009 fae3 	bl	132d0 <net_buf_simple_add>
	ep->num_handles = num_handles;
    9d0a:	2301      	movs	r3, #1
    9d0c:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9d0e:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    9d12:	f8a0 4003 	strh.w	r4, [r0, #3]
    9d16:	bd70      	pop	{r4, r5, r6, pc}

00009d18 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9d18:	7903      	ldrb	r3, [r0, #4]
    9d1a:	2b01      	cmp	r3, #1
    9d1c:	d006      	beq.n	9d2c <hci_get_class+0x14>
    9d1e:	3b02      	subs	r3, #2
    9d20:	b2db      	uxtb	r3, r3
    9d22:	2b0a      	cmp	r3, #10
    9d24:	d80a      	bhi.n	9d3c <hci_get_class+0x24>
    9d26:	4a07      	ldr	r2, [pc, #28]	; (9d44 <hci_get_class+0x2c>)
    9d28:	56d0      	ldrsb	r0, [r2, r3]
    9d2a:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9d2c:	7a03      	ldrb	r3, [r0, #8]
    9d2e:	f003 0303 	and.w	r3, r3, #3
    9d32:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9d34:	bf0c      	ite	eq
    9d36:	2002      	moveq	r0, #2
    9d38:	2003      	movne	r0, #3
    9d3a:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9d40:	4770      	bx	lr
    9d42:	bf00      	nop
    9d44:	00017a99 	.word	0x00017a99

00009d48 <hci_init>:
	dup_count = -1;
    9d48:	4b0a      	ldr	r3, [pc, #40]	; (9d74 <hci_init+0x2c>)
    9d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9d4e:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9d50:	4b09      	ldr	r3, [pc, #36]	; (9d78 <hci_init+0x30>)
    9d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9d56:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9d5a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9d5e:	4b07      	ldr	r3, [pc, #28]	; (9d7c <hci_init+0x34>)
    9d60:	2000      	movs	r0, #0
    9d62:	2100      	movs	r1, #0
    9d64:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9d68:	4b05      	ldr	r3, [pc, #20]	; (9d80 <hci_init+0x38>)
    9d6a:	201f      	movs	r0, #31
    9d6c:	2100      	movs	r1, #0
    9d6e:	e9c3 0100 	strd	r0, r1, [r3]
    9d72:	4770      	bx	lr
    9d74:	20000830 	.word	0x20000830
    9d78:	20003d28 	.word	0x20003d28
    9d7c:	200008b8 	.word	0x200008b8
    9d80:	20003d30 	.word	0x20003d30

00009d84 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    9d84:	bf20      	wfe
	__SEV();
    9d86:	bf40      	sev
	__WFE();
    9d88:	bf20      	wfe
    9d8a:	4770      	bx	lr

00009d8c <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    9d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    9d8e:	4b0d      	ldr	r3, [pc, #52]	; (9dc4 <pdu_len_cmp+0x38>)
{
    9d90:	b089      	sub	sp, #36	; 0x24
    9d92:	4605      	mov	r5, r0
    9d94:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    9d96:	aa01      	add	r2, sp, #4
    9d98:	f103 0718 	add.w	r7, r3, #24
    9d9c:	6818      	ldr	r0, [r3, #0]
    9d9e:	6859      	ldr	r1, [r3, #4]
    9da0:	4614      	mov	r4, r2
    9da2:	c403      	stmia	r4!, {r0, r1}
    9da4:	3308      	adds	r3, #8
    9da6:	42bb      	cmp	r3, r7
    9da8:	4622      	mov	r2, r4
    9daa:	d1f7      	bne.n	9d9c <pdu_len_cmp+0x10>
    9dac:	881b      	ldrh	r3, [r3, #0]
    9dae:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9db0:	ab08      	add	r3, sp, #32
    9db2:	441d      	add	r5, r3
    9db4:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9db8:	1b83      	subs	r3, r0, r6
    9dba:	4258      	negs	r0, r3
    9dbc:	4158      	adcs	r0, r3
    9dbe:	b009      	add	sp, #36	; 0x24
    9dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dc2:	bf00      	nop
    9dc4:	00015467 	.word	0x00015467

00009dc8 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9dc8:	6008      	str	r0, [r1, #0]
    9dca:	4770      	bx	lr

00009dcc <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9dcc:	b918      	cbnz	r0, 9dd6 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9dce:	680b      	ldr	r3, [r1, #0]
    9dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9dd4:	600b      	str	r3, [r1, #0]
    9dd6:	4770      	bx	lr

00009dd8 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9dd8:	b918      	cbnz	r0, 9de2 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    9dda:	680b      	ldr	r3, [r1, #0]
    9ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9de0:	600b      	str	r3, [r1, #0]
    9de2:	4770      	bx	lr

00009de4 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9de4:	b570      	push	{r4, r5, r6, lr}
    9de6:	1d03      	adds	r3, r0, #4
    9de8:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9dea:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9dec:	429d      	cmp	r5, r3
    9dee:	d101      	bne.n	9df4 <chan_sel_remap+0x10>
    9df0:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9df2:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9df4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    9df8:	2200      	movs	r2, #0
    9dfa:	18a0      	adds	r0, r4, r2
    9dfc:	2a08      	cmp	r2, #8
    9dfe:	b2c0      	uxtb	r0, r0
    9e00:	d101      	bne.n	9e06 <chan_sel_remap+0x22>
    9e02:	4604      	mov	r4, r0
    9e04:	e7f2      	b.n	9dec <chan_sel_remap+0x8>
			if (bite & 0x01) {
    9e06:	f016 0f01 	tst.w	r6, #1
    9e0a:	d003      	beq.n	9e14 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    9e0c:	2900      	cmp	r1, #0
    9e0e:	d0f0      	beq.n	9df2 <chan_sel_remap+0xe>
				chan_index--;
    9e10:	3901      	subs	r1, #1
    9e12:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    9e14:	0876      	lsrs	r6, r6, #1
    9e16:	3201      	adds	r2, #1
    9e18:	e7ef      	b.n	9dfa <chan_sel_remap+0x16>
	...

00009e1c <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9e1c:	4b09      	ldr	r3, [pc, #36]	; (9e44 <packet_rx_acquired_count_get+0x28>)
    9e1e:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    9e22:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    9e26:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    9e28:	bf3b      	ittet	cc
    9e2a:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    9e2e:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    9e32:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    9e36:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    9e38:	bf2c      	ite	cs
    9e3a:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9e3c:	1a80      	subcc	r0, r0, r2
    9e3e:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    9e40:	4770      	bx	lr
    9e42:	bf00      	nop
    9e44:	200008c0 	.word	0x200008c0

00009e48 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9e48:	b508      	push	{r3, lr}
    9e4a:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9e4c:	f7ff ffe6 	bl	9e1c <packet_rx_acquired_count_get>
    9e50:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    9e52:	bf21      	itttt	cs
    9e54:	4b04      	ldrcs	r3, [pc, #16]	; (9e68 <packet_rx_reserve_get+0x20>)
    9e56:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    9e5a:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    9e5e:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    9e62:	bf38      	it	cc
    9e64:	2000      	movcc	r0, #0
}
    9e66:	bd08      	pop	{r3, pc}
    9e68:	200008c0 	.word	0x200008c0

00009e6c <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9e6c:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9e6e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    9e72:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    9e76:	429c      	cmp	r4, r3
    9e78:	d15a      	bne.n	9f30 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    9e7a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9e7e:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9e82:	428b      	cmp	r3, r1
    9e84:	d154      	bne.n	9f30 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    9e86:	f990 301d 	ldrsb.w	r3, [r0, #29]
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	db25      	blt.n	9eda <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    9e8e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9e90:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    9e92:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    9e96:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9e98:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9e9c:	4351      	muls	r1, r2
					      conn->supervision_reload *
    9e9e:	227d      	movs	r2, #125	; 0x7d
    9ea0:	434a      	muls	r2, r1
					      125 / 1000;
    9ea2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9ea6:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9eaa:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9eae:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    9eb2:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9eb4:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    9eb8:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    9eba:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9ebc:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    9ec0:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    9ec2:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    9ec6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    9eca:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    9ece:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    9ed2:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    9ed6:	4618      	mov	r0, r3
    9ed8:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    9eda:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9ede:	06dc      	lsls	r4, r3, #27
    9ee0:	d428      	bmi.n	9f34 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    9ee2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    9ee6:	069a      	lsls	r2, r3, #26
    9ee8:	d503      	bpl.n	9ef2 <conn_update_req+0x86>
		    (conn->llcp_features &
    9eea:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    9eee:	079b      	lsls	r3, r3, #30
    9ef0:	d520      	bpl.n	9f34 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    9ef2:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9ef4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    9ef6:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    9efa:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9efc:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9f00:	4354      	muls	r4, r2
						conn->supervision_reload *
    9f02:	227d      	movs	r2, #125	; 0x7d
    9f04:	4362      	muls	r2, r4
						125 / 1000;
    9f06:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    9f0a:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9f0e:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    9f12:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    9f16:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    9f18:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    9f1c:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    9f20:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    9f22:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    9f26:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    9f2a:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    9f2e:	e7d2      	b.n	9ed6 <conn_update_req+0x6a>
		return 1;
    9f30:	2001      	movs	r0, #1
    9f32:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    9f34:	2002      	movs	r0, #2
}
    9f36:	bd30      	pop	{r4, r5, pc}

00009f38 <packet_rx_allocate>:
{
    9f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9f3c:	4d22      	ldr	r5, [pc, #136]	; (9fc8 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    9f3e:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    9f42:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    9f46:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    9f4a:	3401      	adds	r4, #1
    9f4c:	4581      	cmp	r9, r0
    9f4e:	b2e4      	uxtb	r4, r4
    9f50:	bf28      	it	cs
    9f52:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    9f54:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    9f58:	42a3      	cmp	r3, r4
    9f5a:	bf08      	it	eq
    9f5c:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9f5e:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    9f62:	f1b9 0f00 	cmp.w	r9, #0
    9f66:	d003      	beq.n	9f70 <packet_rx_allocate+0x38>
    9f68:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9f6c:	429c      	cmp	r4, r3
    9f6e:	d101      	bne.n	9f74 <packet_rx_allocate+0x3c>
    9f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    9f74:	4638      	mov	r0, r7
    9f76:	f7fd f91c 	bl	71b2 <mem_acquire>
		if (!link) {
    9f7a:	4606      	mov	r6, r0
    9f7c:	2800      	cmp	r0, #0
    9f7e:	d0f7      	beq.n	9f70 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9f80:	4640      	mov	r0, r8
    9f82:	f7fd f916 	bl	71b2 <mem_acquire>
		if (!node_rx) {
    9f86:	b928      	cbnz	r0, 9f94 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9f88:	4630      	mov	r0, r6
    9f8a:	4910      	ldr	r1, [pc, #64]	; (9fcc <packet_rx_allocate+0x94>)
}
    9f8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    9f90:	f7fd b929 	b.w	71e6 <mem_release>
		node_rx->hdr.onion.link = link;
    9f94:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    9f96:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    9f9a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    9f9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    9fa2:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    9fa6:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    9faa:	3401      	adds	r4, #1
    9fac:	b2e4      	uxtb	r4, r4
			acquire = 0;
    9fae:	42a3      	cmp	r3, r4
    9fb0:	bf08      	it	eq
    9fb2:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    9fb4:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9fb8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9fbc:	3b01      	subs	r3, #1
    9fbe:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    9fc2:	fa5f f989 	uxtb.w	r9, r9
    9fc6:	e7cc      	b.n	9f62 <packet_rx_allocate+0x2a>
    9fc8:	200008c0 	.word	0x200008c0
    9fcc:	20000a08 	.word	0x20000a08

00009fd0 <common_init>:
{
    9fd0:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    9fd2:	4c3a      	ldr	r4, [pc, #232]	; (a0bc <common_init+0xec>)
    9fd4:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9fd8:	2a00      	cmp	r2, #0
    9fda:	d041      	beq.n	a060 <common_init+0x90>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9fdc:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    9fe0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9fe4:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9fe8:	f7fd f8bc 	bl	7164 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9fec:	4b34      	ldr	r3, [pc, #208]	; (a0c0 <common_init+0xf0>)
    9fee:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9ff2:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9ff6:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9ffa:	f7fd f8b3 	bl	7164 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9ffe:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    a002:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    a006:	4b2f      	ldr	r3, [pc, #188]	; (a0c4 <common_init+0xf4>)
    a008:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    a00c:	440a      	add	r2, r1
    a00e:	2108      	movs	r1, #8
    a010:	f7fd f8a8 	bl	7164 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    a014:	4b2c      	ldr	r3, [pc, #176]	; (a0c8 <common_init+0xf8>)
    a016:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    a01a:	2202      	movs	r2, #2
    a01c:	2124      	movs	r1, #36	; 0x24
    a01e:	f7fd f8a1 	bl	7164 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    a022:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    a026:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    a02a:	4b28      	ldr	r3, [pc, #160]	; (a0cc <common_init+0xfc>)
    a02c:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    a030:	3a01      	subs	r2, #1
    a032:	b292      	uxth	r2, r2
    a034:	f7fd f896 	bl	7164 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    a038:	4822      	ldr	r0, [pc, #136]	; (a0c4 <common_init+0xf4>)
    a03a:	f7fd f8ba 	bl	71b2 <mem_acquire>
	LL_ASSERT(link);
    a03e:	b990      	cbnz	r0, a066 <common_init+0x96>
    a040:	4b23      	ldr	r3, [pc, #140]	; (a0d0 <common_init+0x100>)
    a042:	9301      	str	r3, [sp, #4]
    a044:	9300      	str	r3, [sp, #0]
    a046:	4b23      	ldr	r3, [pc, #140]	; (a0d4 <common_init+0x104>)
    a048:	4a23      	ldr	r2, [pc, #140]	; (a0d8 <common_init+0x108>)
    a04a:	681c      	ldr	r4, [r3, #0]
    a04c:	4923      	ldr	r1, [pc, #140]	; (a0dc <common_init+0x10c>)
    a04e:	4b24      	ldr	r3, [pc, #144]	; (a0e0 <common_init+0x110>)
    a050:	4824      	ldr	r0, [pc, #144]	; (a0e4 <common_init+0x114>)
    a052:	47a0      	blx	r4
    a054:	4040      	eors	r0, r0
    a056:	f380 8811 	msr	BASEPRI, r0
    a05a:	f04f 0004 	mov.w	r0, #4
    a05e:	df02      	svc	2
		_radio.conn_free = NULL;
    a060:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    a064:	e7c2      	b.n	9fec <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    a066:	4a20      	ldr	r2, [pc, #128]	; (a0e8 <common_init+0x118>)
    a068:	1f11      	subs	r1, r2, #4
    a06a:	f7fd f8f9 	bl	7260 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    a06e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    a072:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    a076:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    a07a:	231f      	movs	r3, #31
    a07c:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    a080:	2325      	movs	r3, #37	; 0x25
    a082:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    a086:	231b      	movs	r3, #27
    a088:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    a08c:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    a090:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    a092:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    a096:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    a098:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    a09c:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    a0a0:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    a0a4:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    a0a8:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    a0ac:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    a0b0:	b002      	add	sp, #8
    a0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    a0b6:	f7ff bf3f 	b.w	9f38 <packet_rx_allocate>
    a0ba:	bf00      	nop
    a0bc:	200008c0 	.word	0x200008c0
    a0c0:	200009f0 	.word	0x200009f0
    a0c4:	20000a08 	.word	0x20000a08
    a0c8:	20000a1c 	.word	0x20000a1c
    a0cc:	20000a24 	.word	0x20000a24
    a0d0:	0001563e 	.word	0x0001563e
    a0d4:	20003a5c 	.word	0x20003a5c
    a0d8:	000167b9 	.word	0x000167b9
    a0dc:	00016808 	.word	0x00016808
    a0e0:	00017dea 	.word	0x00017dea
    a0e4:	00018267 	.word	0x00018267
    a0e8:	20000a10 	.word	0x20000a10

0000a0ec <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    a0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    a0f0:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    a0f2:	4294      	cmp	r4, r2
{
    a0f4:	4681      	mov	r9, r0
    a0f6:	460f      	mov	r7, r1
    a0f8:	4690      	mov	r8, r2
	if (_first == last) {
    a0fa:	d03d      	beq.n	a178 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    a0fc:	4e1f      	ldr	r6, [pc, #124]	; (a17c <tx_cmplt_get+0x90>)
    a0fe:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    a102:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    a106:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    a108:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    a10a:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a10e:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    a112:	b222      	sxth	r2, r4
    a114:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    a118:	f8b9 e000 	ldrh.w	lr, [r9]
    a11c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a120:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    a124:	4596      	cmp	lr, r2
    a126:	d120      	bne.n	a16a <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    a128:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    a12a:	2801      	cmp	r0, #1
    a12c:	f020 0303 	bic.w	r3, r0, #3
    a130:	d90a      	bls.n	a148 <tx_cmplt_get+0x5c>
    a132:	b1f3      	cbz	r3, a172 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    a134:	1d02      	adds	r2, r0, #4
    a136:	d01c      	beq.n	a172 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a138:	7942      	ldrb	r2, [r0, #5]
    a13a:	b1d2      	cbz	r2, a172 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    a13c:	7902      	ldrb	r2, [r0, #4]
    a13e:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a142:	3a01      	subs	r2, #1
    a144:	2a01      	cmp	r2, #1
    a146:	d814      	bhi.n	a172 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    a148:	2201      	movs	r2, #1
			cmplt++;
    a14a:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    a14c:	604a      	str	r2, [r1, #4]
			cmplt++;
    a14e:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    a150:	b113      	cbz	r3, a158 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a152:	4651      	mov	r1, sl
    a154:	f7fd f847 	bl	71e6 <mem_release>
		}

		_first = _first + 1;
    a158:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    a15a:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    a15e:	b2e4      	uxtb	r4, r4
			_first = 0;
    a160:	42a2      	cmp	r2, r4
    a162:	bf08      	it	eq
    a164:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    a166:	4544      	cmp	r4, r8
    a168:	d1d3      	bne.n	a112 <tx_cmplt_get+0x26>

	*first = _first;
    a16a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    a16c:	4628      	mov	r0, r5
    a16e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    a172:	f8c1 b004 	str.w	fp, [r1, #4]
    a176:	e7eb      	b.n	a150 <tx_cmplt_get+0x64>
		return 0;
    a178:	2500      	movs	r5, #0
    a17a:	e7f7      	b.n	a16c <tx_cmplt_get+0x80>
    a17c:	200008c0 	.word	0x200008c0

0000a180 <connection_get>:
{
    a180:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    a182:	4b09      	ldr	r3, [pc, #36]	; (a1a8 <connection_get+0x28>)
    a184:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    a188:	4282      	cmp	r2, r0
{
    a18a:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    a18c:	d90a      	bls.n	a1a4 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    a18e:	4602      	mov	r2, r0
    a190:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a194:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    a198:	f7fd f840 	bl	721c <mem_get>
		if ((conn) && (conn->handle == handle)) {
    a19c:	b110      	cbz	r0, a1a4 <connection_get+0x24>
    a19e:	8c03      	ldrh	r3, [r0, #32]
    a1a0:	42a3      	cmp	r3, r4
    a1a2:	d000      	beq.n	a1a6 <connection_get+0x26>
	return 0;
    a1a4:	2000      	movs	r0, #0
}
    a1a6:	bd10      	pop	{r4, pc}
    a1a8:	200008c0 	.word	0x200008c0

0000a1ac <role_disable>:
{
    a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1b0:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a1b2:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    a1b4:	2805      	cmp	r0, #5
{
    a1b6:	4605      	mov	r5, r0
    a1b8:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a1ba:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    a1bc:	d00c      	beq.n	a1d8 <role_disable+0x2c>
    a1be:	2806      	cmp	r0, #6
    a1c0:	d043      	beq.n	a24a <role_disable+0x9e>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a1c2:	d948      	bls.n	a256 <role_disable+0xaa>
			conn_handle = ticker_id_primary -
    a1c4:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    a1c6:	b280      	uxth	r0, r0
    a1c8:	f7ff ffda 	bl	a180 <connection_get>
			if (!conn) {
    a1cc:	2800      	cmp	r0, #0
    a1ce:	f000 8160 	beq.w	a492 <role_disable+0x2e6>
			ticks_active_to_start =
    a1d2:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    a1d6:	e00f      	b.n	a1f8 <role_disable+0x4c>
		ticks_xtal_to_start =
    a1d8:	4b96      	ldr	r3, [pc, #600]	; (a434 <role_disable+0x288>)
    a1da:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    a1dc:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1e0:	ab02      	add	r3, sp, #8
    a1e2:	9300      	str	r3, [sp, #0]
    a1e4:	460a      	mov	r2, r1
    a1e6:	4b94      	ldr	r3, [pc, #592]	; (a438 <role_disable+0x28c>)
    a1e8:	2103      	movs	r1, #3
    a1ea:	2000      	movs	r0, #0
    a1ec:	f7fd ff0a 	bl	8004 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a1f0:	2802      	cmp	r0, #2
    a1f2:	d013      	beq.n	a21c <role_disable+0x70>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a1f4:	9b02      	ldr	r3, [sp, #8]
    a1f6:	b9ab      	cbnz	r3, a224 <role_disable+0x78>
	LL_ASSERT(!_radio.ticker_id_stop);
    a1f8:	4c8e      	ldr	r4, [pc, #568]	; (a434 <role_disable+0x288>)
    a1fa:	7ca3      	ldrb	r3, [r4, #18]
    a1fc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a200:	2b00      	cmp	r3, #0
    a202:	d032      	beq.n	a26a <role_disable+0xbe>
    a204:	4b8d      	ldr	r3, [pc, #564]	; (a43c <role_disable+0x290>)
    a206:	9301      	str	r3, [sp, #4]
    a208:	9300      	str	r3, [sp, #0]
    a20a:	4b8d      	ldr	r3, [pc, #564]	; (a440 <role_disable+0x294>)
    a20c:	4a8d      	ldr	r2, [pc, #564]	; (a444 <role_disable+0x298>)
    a20e:	681c      	ldr	r4, [r3, #0]
    a210:	498d      	ldr	r1, [pc, #564]	; (a448 <role_disable+0x29c>)
    a212:	4b8e      	ldr	r3, [pc, #568]	; (a44c <role_disable+0x2a0>)
    a214:	488e      	ldr	r0, [pc, #568]	; (a450 <role_disable+0x2a4>)
    a216:	e011      	b.n	a23c <role_disable+0x90>
				cpu_sleep();
    a218:	f7ff fdb4 	bl	9d84 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a21c:	9b02      	ldr	r3, [sp, #8]
    a21e:	2b02      	cmp	r3, #2
    a220:	d0fa      	beq.n	a218 <role_disable+0x6c>
    a222:	e7e7      	b.n	a1f4 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a224:	9b02      	ldr	r3, [sp, #8]
    a226:	2b01      	cmp	r3, #1
    a228:	d0e6      	beq.n	a1f8 <role_disable+0x4c>
    a22a:	4b84      	ldr	r3, [pc, #528]	; (a43c <role_disable+0x290>)
    a22c:	9301      	str	r3, [sp, #4]
    a22e:	9300      	str	r3, [sp, #0]
    a230:	4b83      	ldr	r3, [pc, #524]	; (a440 <role_disable+0x294>)
    a232:	4a84      	ldr	r2, [pc, #528]	; (a444 <role_disable+0x298>)
    a234:	681c      	ldr	r4, [r3, #0]
    a236:	4984      	ldr	r1, [pc, #528]	; (a448 <role_disable+0x29c>)
    a238:	4b84      	ldr	r3, [pc, #528]	; (a44c <role_disable+0x2a0>)
    a23a:	4886      	ldr	r0, [pc, #536]	; (a454 <role_disable+0x2a8>)
			LL_ASSERT(0);
    a23c:	47a0      	blx	r4
    a23e:	4040      	eors	r0, r0
    a240:	f380 8811 	msr	BASEPRI, r0
    a244:	f04f 0004 	mov.w	r0, #4
    a248:	df02      	svc	2
		ticks_xtal_to_start =
    a24a:	4b7a      	ldr	r3, [pc, #488]	; (a434 <role_disable+0x288>)
    a24c:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    a250:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    a254:	e7d0      	b.n	a1f8 <role_disable+0x4c>
			LL_ASSERT(0);
    a256:	4b79      	ldr	r3, [pc, #484]	; (a43c <role_disable+0x290>)
    a258:	9301      	str	r3, [sp, #4]
    a25a:	9300      	str	r3, [sp, #0]
    a25c:	4b78      	ldr	r3, [pc, #480]	; (a440 <role_disable+0x294>)
    a25e:	681c      	ldr	r4, [r3, #0]
    a260:	4b7a      	ldr	r3, [pc, #488]	; (a44c <role_disable+0x2a0>)
    a262:	4a78      	ldr	r2, [pc, #480]	; (a444 <role_disable+0x298>)
    a264:	4978      	ldr	r1, [pc, #480]	; (a448 <role_disable+0x29c>)
    a266:	487c      	ldr	r0, [pc, #496]	; (a458 <role_disable+0x2ac>)
    a268:	e7e8      	b.n	a23c <role_disable+0x90>
	ret_cb = TICKER_STATUS_BUSY;
    a26a:	ab06      	add	r3, sp, #24
    a26c:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    a26e:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    a270:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a274:	2103      	movs	r1, #3
    a276:	9300      	str	r3, [sp, #0]
    a278:	462a      	mov	r2, r5
    a27a:	4b6f      	ldr	r3, [pc, #444]	; (a438 <role_disable+0x28c>)
    a27c:	f7fd fec2 	bl	8004 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a280:	2802      	cmp	r0, #2
    a282:	d027      	beq.n	a2d4 <role_disable+0x128>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    a284:	9b02      	ldr	r3, [sp, #8]
    a286:	2b00      	cmp	r3, #0
    a288:	d16f      	bne.n	a36a <role_disable+0x1be>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    a28a:	7c23      	ldrb	r3, [r4, #16]
    a28c:	429d      	cmp	r5, r3
    a28e:	d002      	beq.n	a296 <role_disable+0xea>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    a290:	7c63      	ldrb	r3, [r4, #17]
    a292:	429d      	cmp	r5, r3
    a294:	d165      	bne.n	a362 <role_disable+0x1b6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    a296:	ab06      	add	r3, sp, #24
    a298:	2202      	movs	r2, #2
    a29a:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a29e:	2200      	movs	r2, #0
    a2a0:	9300      	str	r3, [sp, #0]
    a2a2:	2103      	movs	r1, #3
    a2a4:	4b64      	ldr	r3, [pc, #400]	; (a438 <role_disable+0x28c>)
    a2a6:	4610      	mov	r0, r2
    a2a8:	f7fd feac 	bl	8004 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a2ac:	2802      	cmp	r0, #2
    a2ae:	d11f      	bne.n	a2f0 <role_disable+0x144>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a2b0:	2201      	movs	r2, #1
    a2b2:	4611      	mov	r1, r2
    a2b4:	2003      	movs	r0, #3
    a2b6:	f7fd f81f 	bl	72f8 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    a2ba:	9b03      	ldr	r3, [sp, #12]
    a2bc:	2b02      	cmp	r3, #2
    a2be:	d117      	bne.n	a2f0 <role_disable+0x144>
    a2c0:	4b5e      	ldr	r3, [pc, #376]	; (a43c <role_disable+0x290>)
    a2c2:	9301      	str	r3, [sp, #4]
    a2c4:	9300      	str	r3, [sp, #0]
    a2c6:	4b5e      	ldr	r3, [pc, #376]	; (a440 <role_disable+0x294>)
    a2c8:	4a5e      	ldr	r2, [pc, #376]	; (a444 <role_disable+0x298>)
    a2ca:	681c      	ldr	r4, [r3, #0]
    a2cc:	495e      	ldr	r1, [pc, #376]	; (a448 <role_disable+0x29c>)
    a2ce:	4b63      	ldr	r3, [pc, #396]	; (a45c <role_disable+0x2b0>)
    a2d0:	4863      	ldr	r0, [pc, #396]	; (a460 <role_disable+0x2b4>)
    a2d2:	e7b3      	b.n	a23c <role_disable+0x90>
		if (_radio.ticker_id_event == ticker_id_primary) {
    a2d4:	7c63      	ldrb	r3, [r4, #17]
    a2d6:	429d      	cmp	r5, r3
    a2d8:	d104      	bne.n	a2e4 <role_disable+0x138>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a2da:	2201      	movs	r2, #1
    a2dc:	4611      	mov	r1, r2
    a2de:	2003      	movs	r0, #3
    a2e0:	f7fd f80a 	bl	72f8 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a2e4:	9b02      	ldr	r3, [sp, #8]
    a2e6:	2b02      	cmp	r3, #2
    a2e8:	d1cc      	bne.n	a284 <role_disable+0xd8>
			cpu_sleep();
    a2ea:	f7ff fd4b 	bl	9d84 <cpu_sleep>
    a2ee:	e7f9      	b.n	a2e4 <role_disable+0x138>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    a2f0:	9803      	ldr	r0, [sp, #12]
    a2f2:	2800      	cmp	r0, #0
    a2f4:	d157      	bne.n	a3a6 <role_disable+0x1fa>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    a2f6:	2302      	movs	r3, #2
    a2f8:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    a2fa:	7c23      	ldrb	r3, [r4, #16]
    a2fc:	b94b      	cbnz	r3, a312 <role_disable+0x166>
    a2fe:	4b4f      	ldr	r3, [pc, #316]	; (a43c <role_disable+0x290>)
    a300:	9301      	str	r3, [sp, #4]
    a302:	9300      	str	r3, [sp, #0]
    a304:	4b4e      	ldr	r3, [pc, #312]	; (a440 <role_disable+0x294>)
    a306:	4a4f      	ldr	r2, [pc, #316]	; (a444 <role_disable+0x298>)
    a308:	681c      	ldr	r4, [r3, #0]
    a30a:	494f      	ldr	r1, [pc, #316]	; (a448 <role_disable+0x29c>)
    a30c:	4b53      	ldr	r3, [pc, #332]	; (a45c <role_disable+0x2b0>)
    a30e:	4855      	ldr	r0, [pc, #340]	; (a464 <role_disable+0x2b8>)
    a310:	e794      	b.n	a23c <role_disable+0x90>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a312:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
    a314:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a316:	2201      	movs	r2, #1
    a318:	9300      	str	r3, [sp, #0]
    a31a:	2103      	movs	r1, #3
    a31c:	4b46      	ldr	r3, [pc, #280]	; (a438 <role_disable+0x28c>)
    a31e:	f7fd fe71 	bl	8004 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a322:	2802      	cmp	r0, #2
    a324:	d111      	bne.n	a34a <role_disable+0x19e>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a326:	2201      	movs	r2, #1
    a328:	4611      	mov	r1, r2
    a32a:	2003      	movs	r0, #3
    a32c:	f7fc ffe4 	bl	72f8 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    a330:	9b04      	ldr	r3, [sp, #16]
    a332:	2b02      	cmp	r3, #2
    a334:	d109      	bne.n	a34a <role_disable+0x19e>
    a336:	4b41      	ldr	r3, [pc, #260]	; (a43c <role_disable+0x290>)
    a338:	9301      	str	r3, [sp, #4]
    a33a:	9300      	str	r3, [sp, #0]
    a33c:	4b40      	ldr	r3, [pc, #256]	; (a440 <role_disable+0x294>)
    a33e:	4a41      	ldr	r2, [pc, #260]	; (a444 <role_disable+0x298>)
    a340:	681c      	ldr	r4, [r3, #0]
    a342:	4941      	ldr	r1, [pc, #260]	; (a448 <role_disable+0x29c>)
    a344:	4b45      	ldr	r3, [pc, #276]	; (a45c <role_disable+0x2b0>)
    a346:	4848      	ldr	r0, [pc, #288]	; (a468 <role_disable+0x2bc>)
    a348:	e778      	b.n	a23c <role_disable+0x90>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    a34a:	9a04      	ldr	r2, [sp, #16]
    a34c:	b99a      	cbnz	r2, a376 <role_disable+0x1ca>
			ticks_xtal_to_start &= ~XON_BITMASK;
    a34e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    a352:	45b0      	cmp	r8, r6
    a354:	d925      	bls.n	a3a2 <role_disable+0x1f6>
				ret = mayfly_enqueue(
    a356:	4b45      	ldr	r3, [pc, #276]	; (a46c <role_disable+0x2c0>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a358:	4611      	mov	r1, r2
    a35a:	2003      	movs	r0, #3
    a35c:	f7fc fff4 	bl	7348 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a360:	b9a8      	cbnz	r0, a38e <role_disable+0x1e2>
	if (!_radio.ticker_id_stop) {
    a362:	7ca3      	ldrb	r3, [r4, #18]
    a364:	b90b      	cbnz	r3, a36a <role_disable+0x1be>
		ret_cb = TICKER_STATUS_FAILURE;
    a366:	2301      	movs	r3, #1
    a368:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    a36a:	2300      	movs	r3, #0
    a36c:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    a36e:	9802      	ldr	r0, [sp, #8]
}
    a370:	b006      	add	sp, #24
    a372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    a376:	9b04      	ldr	r3, [sp, #16]
    a378:	2b01      	cmp	r3, #1
    a37a:	f040 8083 	bne.w	a484 <role_disable+0x2d8>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a37e:	2200      	movs	r2, #0
    a380:	4611      	mov	r1, r2
    a382:	4b3a      	ldr	r3, [pc, #232]	; (a46c <role_disable+0x2c0>)
    a384:	2003      	movs	r0, #3
    a386:	f7fc ffdf 	bl	7348 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a38a:	4602      	mov	r2, r0
    a38c:	b148      	cbz	r0, a3a2 <role_disable+0x1f6>
			LL_ASSERT(!ret);
    a38e:	4b2b      	ldr	r3, [pc, #172]	; (a43c <role_disable+0x290>)
    a390:	9301      	str	r3, [sp, #4]
    a392:	9300      	str	r3, [sp, #0]
    a394:	4b2a      	ldr	r3, [pc, #168]	; (a440 <role_disable+0x294>)
    a396:	4a2b      	ldr	r2, [pc, #172]	; (a444 <role_disable+0x298>)
    a398:	681c      	ldr	r4, [r3, #0]
    a39a:	492b      	ldr	r1, [pc, #172]	; (a448 <role_disable+0x29c>)
    a39c:	4b2f      	ldr	r3, [pc, #188]	; (a45c <role_disable+0x2b0>)
    a39e:	4834      	ldr	r0, [pc, #208]	; (a470 <role_disable+0x2c4>)
    a3a0:	e74c      	b.n	a23c <role_disable+0x90>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a3a2:	4b34      	ldr	r3, [pc, #208]	; (a474 <role_disable+0x2c8>)
    a3a4:	e7d8      	b.n	a358 <role_disable+0x1ac>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    a3a6:	9d03      	ldr	r5, [sp, #12]
    a3a8:	2d01      	cmp	r5, #1
    a3aa:	d16b      	bne.n	a484 <role_disable+0x2d8>
		if (ticker_id_stop != TICKER_NULL) {
    a3ac:	2fff      	cmp	r7, #255	; 0xff
    a3ae:	d02d      	beq.n	a40c <role_disable+0x260>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    a3b0:	ab06      	add	r3, sp, #24
    a3b2:	2202      	movs	r2, #2
    a3b4:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a3b8:	2103      	movs	r1, #3
    a3ba:	9300      	str	r3, [sp, #0]
    a3bc:	463a      	mov	r2, r7
    a3be:	4b1e      	ldr	r3, [pc, #120]	; (a438 <role_disable+0x28c>)
    a3c0:	2000      	movs	r0, #0
    a3c2:	f7fd fe1f 	bl	8004 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    a3c6:	2802      	cmp	r0, #2
    a3c8:	d111      	bne.n	a3ee <role_disable+0x242>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a3ca:	462a      	mov	r2, r5
    a3cc:	4629      	mov	r1, r5
    a3ce:	2003      	movs	r0, #3
    a3d0:	f7fc ff92 	bl	72f8 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    a3d4:	9b05      	ldr	r3, [sp, #20]
    a3d6:	2b02      	cmp	r3, #2
    a3d8:	d109      	bne.n	a3ee <role_disable+0x242>
    a3da:	4b18      	ldr	r3, [pc, #96]	; (a43c <role_disable+0x290>)
    a3dc:	9301      	str	r3, [sp, #4]
    a3de:	9300      	str	r3, [sp, #0]
    a3e0:	4b17      	ldr	r3, [pc, #92]	; (a440 <role_disable+0x294>)
    a3e2:	4a18      	ldr	r2, [pc, #96]	; (a444 <role_disable+0x298>)
    a3e4:	681c      	ldr	r4, [r3, #0]
    a3e6:	4918      	ldr	r1, [pc, #96]	; (a448 <role_disable+0x29c>)
    a3e8:	4b1c      	ldr	r3, [pc, #112]	; (a45c <role_disable+0x2b0>)
    a3ea:	4823      	ldr	r0, [pc, #140]	; (a478 <role_disable+0x2cc>)
    a3ec:	e726      	b.n	a23c <role_disable+0x90>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    a3ee:	9b05      	ldr	r3, [sp, #20]
    a3f0:	b163      	cbz	r3, a40c <role_disable+0x260>
    a3f2:	9b05      	ldr	r3, [sp, #20]
    a3f4:	2b01      	cmp	r3, #1
    a3f6:	d009      	beq.n	a40c <role_disable+0x260>
    a3f8:	4b10      	ldr	r3, [pc, #64]	; (a43c <role_disable+0x290>)
    a3fa:	9301      	str	r3, [sp, #4]
    a3fc:	9300      	str	r3, [sp, #0]
    a3fe:	4b10      	ldr	r3, [pc, #64]	; (a440 <role_disable+0x294>)
    a400:	4a10      	ldr	r2, [pc, #64]	; (a444 <role_disable+0x298>)
    a402:	681c      	ldr	r4, [r3, #0]
    a404:	4910      	ldr	r1, [pc, #64]	; (a448 <role_disable+0x29c>)
    a406:	4b15      	ldr	r3, [pc, #84]	; (a45c <role_disable+0x2b0>)
    a408:	481c      	ldr	r0, [pc, #112]	; (a47c <role_disable+0x2d0>)
    a40a:	e717      	b.n	a23c <role_disable+0x90>
		if (_radio.role != ROLE_NONE) {
    a40c:	7ce3      	ldrb	r3, [r4, #19]
    a40e:	2b00      	cmp	r3, #0
    a410:	d0a7      	beq.n	a362 <role_disable+0x1b6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    a412:	4b1b      	ldr	r3, [pc, #108]	; (a480 <role_disable+0x2d4>)
    a414:	2204      	movs	r2, #4
    a416:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a418:	2200      	movs	r2, #0
    a41a:	4611      	mov	r1, r2
    a41c:	2003      	movs	r0, #3
    a41e:	f7fc ff93 	bl	7348 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a422:	2800      	cmp	r0, #0
    a424:	d1b3      	bne.n	a38e <role_disable+0x1e2>
			while (_radio.role != ROLE_NONE) {
    a426:	7ce3      	ldrb	r3, [r4, #19]
    a428:	2b00      	cmp	r3, #0
    a42a:	d09a      	beq.n	a362 <role_disable+0x1b6>
				cpu_sleep();
    a42c:	f7ff fcaa 	bl	9d84 <cpu_sleep>
    a430:	e7f9      	b.n	a426 <role_disable+0x27a>
    a432:	bf00      	nop
    a434:	200008c0 	.word	0x200008c0
    a438:	00009dc9 	.word	0x00009dc9
    a43c:	0001563e 	.word	0x0001563e
    a440:	20003a5c 	.word	0x20003a5c
    a444:	000167b9 	.word	0x000167b9
    a448:	00016808 	.word	0x00016808
    a44c:	0001820c 	.word	0x0001820c
    a450:	00018b7e 	.word	0x00018b7e
    a454:	00018b3e 	.word	0x00018b3e
    a458:	00016758 	.word	0x00016758
    a45c:	000181f8 	.word	0x000181f8
    a460:	00018bb6 	.word	0x00018bb6
    a464:	00018be7 	.word	0x00018be7
    a468:	00018c21 	.word	0x00018c21
    a46c:	20003d58 	.word	0x20003d58
    a470:	00018c51 	.word	0x00018c51
    a474:	20003df8 	.word	0x20003df8
    a478:	00018c77 	.word	0x00018c77
    a47c:	00018ca9 	.word	0x00018ca9
    a480:	20003d78 	.word	0x20003d78
		LL_ASSERT(0);
    a484:	4b04      	ldr	r3, [pc, #16]	; (a498 <role_disable+0x2ec>)
    a486:	9301      	str	r3, [sp, #4]
    a488:	9300      	str	r3, [sp, #0]
    a48a:	4b04      	ldr	r3, [pc, #16]	; (a49c <role_disable+0x2f0>)
    a48c:	681c      	ldr	r4, [r3, #0]
    a48e:	4b04      	ldr	r3, [pc, #16]	; (a4a0 <role_disable+0x2f4>)
    a490:	e6e7      	b.n	a262 <role_disable+0xb6>
				return 1;
    a492:	2001      	movs	r0, #1
    a494:	e76c      	b.n	a370 <role_disable+0x1c4>
    a496:	bf00      	nop
    a498:	0001563e 	.word	0x0001563e
    a49c:	20003a5c 	.word	0x20003a5c
    a4a0:	000181f8 	.word	0x000181f8

0000a4a4 <mayfly_xtal_retain>:
{
    a4a4:	b513      	push	{r0, r1, r4, lr}
    a4a6:	4b20      	ldr	r3, [pc, #128]	; (a528 <mayfly_xtal_retain+0x84>)
    a4a8:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    a4aa:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    a4ac:	b319      	cbz	r1, a4f6 <mayfly_xtal_retain+0x52>
		if (!s_xtal_retained) {
    a4ae:	2a00      	cmp	r2, #0
    a4b0:	d137      	bne.n	a522 <mayfly_xtal_retain+0x7e>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    a4b2:	2801      	cmp	r0, #1
    a4b4:	d00f      	beq.n	a4d6 <mayfly_xtal_retain+0x32>
    a4b6:	4b1d      	ldr	r3, [pc, #116]	; (a52c <mayfly_xtal_retain+0x88>)
    a4b8:	9301      	str	r3, [sp, #4]
    a4ba:	9300      	str	r3, [sp, #0]
    a4bc:	4b1c      	ldr	r3, [pc, #112]	; (a530 <mayfly_xtal_retain+0x8c>)
    a4be:	4a1d      	ldr	r2, [pc, #116]	; (a534 <mayfly_xtal_retain+0x90>)
    a4c0:	681c      	ldr	r4, [r3, #0]
    a4c2:	491d      	ldr	r1, [pc, #116]	; (a538 <mayfly_xtal_retain+0x94>)
    a4c4:	4b1d      	ldr	r3, [pc, #116]	; (a53c <mayfly_xtal_retain+0x98>)
    a4c6:	481e      	ldr	r0, [pc, #120]	; (a540 <mayfly_xtal_retain+0x9c>)
			LL_ASSERT(!retval);
    a4c8:	47a0      	blx	r4
    a4ca:	4040      	eors	r0, r0
    a4cc:	f380 8811 	msr	BASEPRI, r0
    a4d0:	f04f 0004 	mov.w	r0, #4
    a4d4:	df02      	svc	2
			s_xtal_retained = 1;
    a4d6:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    a4d8:	4b1a      	ldr	r3, [pc, #104]	; (a544 <mayfly_xtal_retain+0xa0>)
    a4da:	4611      	mov	r1, r2
    a4dc:	f7fc ff34 	bl	7348 <mayfly_enqueue>
			LL_ASSERT(!retval);
    a4e0:	b1f8      	cbz	r0, a522 <mayfly_xtal_retain+0x7e>
    a4e2:	4b12      	ldr	r3, [pc, #72]	; (a52c <mayfly_xtal_retain+0x88>)
    a4e4:	9301      	str	r3, [sp, #4]
    a4e6:	9300      	str	r3, [sp, #0]
    a4e8:	4b11      	ldr	r3, [pc, #68]	; (a530 <mayfly_xtal_retain+0x8c>)
    a4ea:	4a12      	ldr	r2, [pc, #72]	; (a534 <mayfly_xtal_retain+0x90>)
    a4ec:	681c      	ldr	r4, [r3, #0]
    a4ee:	4912      	ldr	r1, [pc, #72]	; (a538 <mayfly_xtal_retain+0x94>)
    a4f0:	4b12      	ldr	r3, [pc, #72]	; (a53c <mayfly_xtal_retain+0x98>)
    a4f2:	4815      	ldr	r0, [pc, #84]	; (a548 <mayfly_xtal_retain+0xa4>)
    a4f4:	e7e8      	b.n	a4c8 <mayfly_xtal_retain+0x24>
		if (s_xtal_retained) {
    a4f6:	b1a2      	cbz	r2, a522 <mayfly_xtal_retain+0x7e>
			s_xtal_retained = 0;
    a4f8:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    a4fa:	b180      	cbz	r0, a51e <mayfly_xtal_retain+0x7a>
    a4fc:	2801      	cmp	r0, #1
    a4fe:	d104      	bne.n	a50a <mayfly_xtal_retain+0x66>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    a500:	4b12      	ldr	r3, [pc, #72]	; (a54c <mayfly_xtal_retain+0xa8>)
			retval = mayfly_enqueue(caller_id,
    a502:	2200      	movs	r2, #0
    a504:	4611      	mov	r1, r2
    a506:	4620      	mov	r0, r4
    a508:	e7e8      	b.n	a4dc <mayfly_xtal_retain+0x38>
				LL_ASSERT(0);
    a50a:	4b08      	ldr	r3, [pc, #32]	; (a52c <mayfly_xtal_retain+0x88>)
    a50c:	9301      	str	r3, [sp, #4]
    a50e:	9300      	str	r3, [sp, #0]
    a510:	4b07      	ldr	r3, [pc, #28]	; (a530 <mayfly_xtal_retain+0x8c>)
    a512:	4a08      	ldr	r2, [pc, #32]	; (a534 <mayfly_xtal_retain+0x90>)
    a514:	681c      	ldr	r4, [r3, #0]
    a516:	4908      	ldr	r1, [pc, #32]	; (a538 <mayfly_xtal_retain+0x94>)
    a518:	4b08      	ldr	r3, [pc, #32]	; (a53c <mayfly_xtal_retain+0x98>)
    a51a:	480d      	ldr	r0, [pc, #52]	; (a550 <mayfly_xtal_retain+0xac>)
    a51c:	e7d4      	b.n	a4c8 <mayfly_xtal_retain+0x24>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    a51e:	4b0d      	ldr	r3, [pc, #52]	; (a554 <mayfly_xtal_retain+0xb0>)
    a520:	e7ef      	b.n	a502 <mayfly_xtal_retain+0x5e>
}
    a522:	b002      	add	sp, #8
    a524:	bd10      	pop	{r4, pc}
    a526:	bf00      	nop
    a528:	20000ac0 	.word	0x20000ac0
    a52c:	0001563e 	.word	0x0001563e
    a530:	20003a5c 	.word	0x20003a5c
    a534:	000167b9 	.word	0x000167b9
    a538:	00016808 	.word	0x00016808
    a53c:	00017fb1 	.word	0x00017fb1
    a540:	00018997 	.word	0x00018997
    a544:	20003dc8 	.word	0x20003dc8
    a548:	000189c7 	.word	0x000189c7
    a54c:	20003de8 	.word	0x20003de8
    a550:	00016758 	.word	0x00016758
    a554:	20003dd8 	.word	0x20003dd8

0000a558 <rx_packet_set>:
{
    a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    a55a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    a55e:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    a560:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    a562:	f004 0407 	and.w	r4, r4, #7
{
    a566:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    a568:	4620      	mov	r0, r4
    a56a:	2100      	movs	r1, #0
    a56c:	f008 f930 	bl	127d0 <radio_phy_set>
	if (conn->enc_rx) {
    a570:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a574:	f013 0f10 	tst.w	r3, #16
    a578:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a57c:	d010      	beq.n	a5a0 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    a57e:	1d29      	adds	r1, r5, #4
    a580:	f042 0201 	orr.w	r2, r2, #1
    a584:	b2c9      	uxtb	r1, r1
    a586:	2008      	movs	r0, #8
    a588:	f008 f968 	bl	1285c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    a58c:	463a      	mov	r2, r7
    a58e:	4621      	mov	r1, r4
    a590:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    a594:	f008 fba6 	bl	12ce4 <radio_ccm_rx_pkt_set>
}
    a598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    a59c:	f008 b98c 	b.w	128b8 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    a5a0:	2008      	movs	r0, #8
    a5a2:	f042 0201 	orr.w	r2, r2, #1
    a5a6:	b2e9      	uxtb	r1, r5
    a5a8:	f008 f958 	bl	1285c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    a5ac:	4638      	mov	r0, r7
    a5ae:	e7f3      	b.n	a598 <rx_packet_set+0x40>

0000a5b0 <tx_packet_set>:
{
    a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5b2:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    a5b4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    a5b8:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    a5ba:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    a5be:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    a5c0:	09c9      	lsrs	r1, r1, #7
    a5c2:	4620      	mov	r0, r4
    a5c4:	f008 f904 	bl	127d0 <radio_phy_set>
	if (conn->enc_tx) {
    a5c8:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a5cc:	f013 0f20 	tst.w	r3, #32
    a5d0:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a5d4:	d00f      	beq.n	a5f6 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    a5d6:	1d29      	adds	r1, r5, #4
    a5d8:	b2c9      	uxtb	r1, r1
    a5da:	2008      	movs	r0, #8
    a5dc:	f042 0201 	orr.w	r2, r2, #1
    a5e0:	f008 f93c 	bl	1285c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    a5e4:	4639      	mov	r1, r7
    a5e6:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    a5ea:	f008 fbb7 	bl	12d5c <radio_ccm_tx_pkt_set>
}
    a5ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    a5f2:	f008 b967 	b.w	128c4 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    a5f6:	2008      	movs	r0, #8
    a5f8:	f042 0201 	orr.w	r2, r2, #1
    a5fc:	b2e9      	uxtb	r1, r5
    a5fe:	f008 f92d 	bl	1285c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    a602:	4638      	mov	r0, r7
    a604:	e7f3      	b.n	a5ee <tx_packet_set+0x3e>
	...

0000a608 <sched_free_win_offset_calc>:
{
    a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a60c:	b08f      	sub	sp, #60	; 0x3c
    a60e:	4692      	mov	sl, r2
    a610:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a612:	6803      	ldr	r3, [r0, #0]
{
    a614:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a616:	2b00      	cmp	r3, #0
{
    a618:	4680      	mov	r8, r0
    a61a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a61c:	da3b      	bge.n	a696 <sched_free_win_offset_calc+0x8e>
		u32_t ticks_prepare_to_start =
    a61e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    a620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    a624:	4291      	cmp	r1, r2
    a626:	bf2c      	ite	cs
    a628:	1a5a      	subcs	r2, r3, r1
    a62a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    a62c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a62e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    a632:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a634:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a636:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a638:	18d3      	adds	r3, r2, r3
    a63a:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a63c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a640:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a644:	940c      	str	r4, [sp, #48]	; 0x30
    a646:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a648:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a64a:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a64c:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a64e:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a650:	2302      	movs	r3, #2
    a652:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a654:	ab0d      	add	r3, sp, #52	; 0x34
    a656:	9302      	str	r3, [sp, #8]
    a658:	4b81      	ldr	r3, [pc, #516]	; (a860 <sched_free_win_offset_calc+0x258>)
    a65a:	9301      	str	r3, [sp, #4]
    a65c:	ab0b      	add	r3, sp, #44	; 0x2c
    a65e:	9300      	str	r3, [sp, #0]
    a660:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a664:	ab0c      	add	r3, sp, #48	; 0x30
    a666:	2101      	movs	r1, #1
    a668:	2000      	movs	r0, #0
    a66a:	f7fd fd07 	bl	807c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a66e:	2802      	cmp	r0, #2
    a670:	d01a      	beq.n	a6a8 <sched_free_win_offset_calc+0xa0>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a674:	b1e3      	cbz	r3, a6b0 <sched_free_win_offset_calc+0xa8>
    a676:	4b7b      	ldr	r3, [pc, #492]	; (a864 <sched_free_win_offset_calc+0x25c>)
    a678:	9301      	str	r3, [sp, #4]
    a67a:	9300      	str	r3, [sp, #0]
    a67c:	4b7a      	ldr	r3, [pc, #488]	; (a868 <sched_free_win_offset_calc+0x260>)
    a67e:	4a7b      	ldr	r2, [pc, #492]	; (a86c <sched_free_win_offset_calc+0x264>)
    a680:	681c      	ldr	r4, [r3, #0]
    a682:	497b      	ldr	r1, [pc, #492]	; (a870 <sched_free_win_offset_calc+0x268>)
    a684:	4b7b      	ldr	r3, [pc, #492]	; (a874 <sched_free_win_offset_calc+0x26c>)
    a686:	487c      	ldr	r0, [pc, #496]	; (a878 <sched_free_win_offset_calc+0x270>)
			LL_ASSERT(0);
    a688:	47a0      	blx	r4
    a68a:	4040      	eors	r0, r0
    a68c:	f380 8811 	msr	BASEPRI, r0
    a690:	f04f 0004 	mov.w	r0, #4
    a694:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a696:	4293      	cmp	r3, r2
    a698:	bf38      	it	cc
    a69a:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a69c:	2200      	movs	r2, #0
    a69e:	e7c5      	b.n	a62c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a6a0:	2101      	movs	r1, #1
    a6a2:	2000      	movs	r0, #0
    a6a4:	f7fd fd68 	bl	8178 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a6a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a6aa:	2b02      	cmp	r3, #2
    a6ac:	d0f8      	beq.n	a6a0 <sched_free_win_offset_calc+0x98>
    a6ae:	e7e0      	b.n	a672 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a6b0:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a6b4:	2aff      	cmp	r2, #255	; 0xff
    a6b6:	d067      	beq.n	a788 <sched_free_win_offset_calc+0x180>
		if ((ticker_id_prev != 0xff) &&
    a6b8:	2fff      	cmp	r7, #255	; 0xff
    a6ba:	d00c      	beq.n	a6d6 <sched_free_win_offset_calc+0xce>
    a6bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a6be:	4599      	cmp	r9, r3
    a6c0:	d009      	beq.n	a6d6 <sched_free_win_offset_calc+0xce>
			LL_ASSERT(0);
    a6c2:	4b68      	ldr	r3, [pc, #416]	; (a864 <sched_free_win_offset_calc+0x25c>)
    a6c4:	9301      	str	r3, [sp, #4]
    a6c6:	9300      	str	r3, [sp, #0]
    a6c8:	4b67      	ldr	r3, [pc, #412]	; (a868 <sched_free_win_offset_calc+0x260>)
    a6ca:	4a68      	ldr	r2, [pc, #416]	; (a86c <sched_free_win_offset_calc+0x264>)
    a6cc:	681c      	ldr	r4, [r3, #0]
    a6ce:	4968      	ldr	r1, [pc, #416]	; (a870 <sched_free_win_offset_calc+0x268>)
    a6d0:	4b68      	ldr	r3, [pc, #416]	; (a874 <sched_free_win_offset_calc+0x26c>)
    a6d2:	486a      	ldr	r0, [pc, #424]	; (a87c <sched_free_win_offset_calc+0x274>)
    a6d4:	e7d8      	b.n	a688 <sched_free_win_offset_calc+0x80>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a6d6:	2a05      	cmp	r2, #5
    a6d8:	d951      	bls.n	a77e <sched_free_win_offset_calc+0x176>
				  _radio.connection_count)) {
    a6da:	4869      	ldr	r0, [pc, #420]	; (a880 <sched_free_win_offset_calc+0x278>)
    a6dc:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a6e0:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a6e2:	429a      	cmp	r2, r3
    a6e4:	da4b      	bge.n	a77e <sched_free_win_offset_calc+0x176>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a6e6:	2a06      	cmp	r2, #6
    a6e8:	f000 8092 	beq.w	a810 <sched_free_win_offset_calc+0x208>
		if (ticker_id_other != 0xFF) {
    a6ec:	9b06      	ldr	r3, [sp, #24]
    a6ee:	2bff      	cmp	r3, #255	; 0xff
    a6f0:	d14a      	bne.n	a788 <sched_free_win_offset_calc+0x180>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a6f2:	3a07      	subs	r2, #7
    a6f4:	b292      	uxth	r2, r2
    a6f6:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a6fa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a6fe:	f7fc fd8d 	bl	721c <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a702:	4580      	cmp	r8, r0
    a704:	d03b      	beq.n	a77e <sched_free_win_offset_calc+0x176>
    a706:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a708:	b91b      	cbnz	r3, a712 <sched_free_win_offset_calc+0x10a>
    a70a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a70e:	2b00      	cmp	r3, #0
    a710:	db35      	blt.n	a77e <sched_free_win_offset_calc+0x176>
			u32_t ticks_to_expire_normal =
    a712:	9b05      	ldr	r3, [sp, #20]
    a714:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a716:	6841      	ldr	r1, [r0, #4]
    a718:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a71a:	6803      	ldr	r3, [r0, #0]
    a71c:	2b00      	cmp	r3, #0
    a71e:	da4e      	bge.n	a7be <sched_free_win_offset_calc+0x1b6>
				u32_t ticks_prepare_to_start =
    a720:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a726:	428a      	cmp	r2, r1
    a728:	bf2c      	ite	cs
    a72a:	18b6      	addcs	r6, r6, r2
    a72c:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a72e:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a730:	68c2      	ldr	r2, [r0, #12]
    a732:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a736:	444b      	add	r3, r9
    a738:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a73a:	f8da 3000 	ldr.w	r3, [sl]
    a73e:	429e      	cmp	r6, r3
    a740:	d916      	bls.n	a770 <sched_free_win_offset_calc+0x168>
    a742:	429d      	cmp	r5, r3
    a744:	bf38      	it	cc
    a746:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a748:	9b07      	ldr	r3, [sp, #28]
    a74a:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a74e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a750:	781b      	ldrb	r3, [r3, #0]
    a752:	42a3      	cmp	r3, r4
    a754:	d905      	bls.n	a762 <sched_free_win_offset_calc+0x15a>
				       (ticker_ticks_diff_get(
    a756:	4629      	mov	r1, r5
    a758:	4630      	mov	r0, r6
    a75a:	f7fd fd25 	bl	81a8 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a75e:	42b8      	cmp	r0, r7
    a760:	d231      	bcs.n	a7c6 <sched_free_win_offset_calc+0x1be>
				if (_win_offset >= conn_interval) {
    a762:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a766:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a768:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a76c:	4293      	cmp	r3, r2
    a76e:	d20b      	bcs.n	a788 <sched_free_win_offset_calc+0x180>
			ticks_anchor_prev = ticks_anchor;
    a770:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a774:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a778:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a77c:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a77e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	42a3      	cmp	r3, r4
    a784:	f63f af64 	bhi.w	a650 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a788:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a78c:	2bff      	cmp	r3, #255	; 0xff
    a78e:	d111      	bne.n	a7b4 <sched_free_win_offset_calc+0x1ac>
    a790:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a794:	f8df 80ec 	ldr.w	r8, [pc, #236]	; a884 <sched_free_win_offset_calc+0x27c>
    a798:	a72f      	add	r7, pc, #188	; (adr r7, a858 <sched_free_win_offset_calc+0x250>)
    a79a:	e9d7 6700 	ldrd	r6, r7, [r7]
    a79e:	429d      	cmp	r5, r3
    a7a0:	bf38      	it	cc
    a7a2:	461d      	movcc	r5, r3
    a7a4:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a7a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a7aa:	781b      	ldrb	r3, [r3, #0]
    a7ac:	42a3      	cmp	r3, r4
    a7ae:	d831      	bhi.n	a814 <sched_free_win_offset_calc+0x20c>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a7b0:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a7b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a7b6:	701c      	strb	r4, [r3, #0]
}
    a7b8:	b00f      	add	sp, #60	; 0x3c
    a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a7be:	428b      	cmp	r3, r1
    a7c0:	bf38      	it	cc
    a7c2:	460b      	movcc	r3, r1
    a7c4:	e7b4      	b.n	a730 <sched_free_win_offset_calc+0x128>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a7c6:	4a2f      	ldr	r2, [pc, #188]	; (a884 <sched_free_win_offset_calc+0x27c>)
    a7c8:	eb05 030b 	add.w	r3, r5, fp
    a7cc:	fba3 0102 	umull	r0, r1, r3, r2
    a7d0:	2207      	movs	r2, #7
    a7d2:	fb02 1103 	mla	r1, r2, r3, r1
    a7d6:	a320      	add	r3, pc, #128	; (adr r3, a858 <sched_free_win_offset_calc+0x250>)
    a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7dc:	f7f5 fd1a 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a7e0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a7e4:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a7e8:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a7ea:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a7ec:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a7ee:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a7f2:	d20b      	bcs.n	a80c <sched_free_win_offset_calc+0x204>
					memcpy(win_offset +
    a7f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a7f6:	2202      	movs	r2, #2
    a7f8:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a7fc:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a800:	3401      	adds	r4, #1
					memcpy(win_offset +
    a802:	f7f7 fb0f 	bl	1e24 <memcpy>
					offset_index++;
    a806:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a808:	3528      	adds	r5, #40	; 0x28
    a80a:	e7a0      	b.n	a74e <sched_free_win_offset_calc+0x146>
						ticks_to_expire_prev = 0;
    a80c:	2500      	movs	r5, #0
    a80e:	e7a8      	b.n	a762 <sched_free_win_offset_calc+0x15a>
    a810:	9206      	str	r2, [sp, #24]
    a812:	e7b4      	b.n	a77e <sched_free_win_offset_calc+0x176>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a814:	eb05 030b 	add.w	r3, r5, fp
    a818:	fba3 0108 	umull	r0, r1, r3, r8
    a81c:	fb09 1103 	mla	r1, r9, r3, r1
    a820:	4632      	mov	r2, r6
    a822:	463b      	mov	r3, r7
    a824:	f7f5 fcf6 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a828:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a82c:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a830:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a832:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a834:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a836:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a83a:	d90b      	bls.n	a854 <sched_free_win_offset_calc+0x24c>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a83c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a83e:	2202      	movs	r2, #2
    a840:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a844:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a848:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a84a:	f7f7 faeb 	bl	1e24 <memcpy>
			offset_index++;
    a84e:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a850:	3528      	adds	r5, #40	; 0x28
    a852:	e7a9      	b.n	a7a8 <sched_free_win_offset_calc+0x1a0>
				ticks_to_expire_prev = 0;
    a854:	2500      	movs	r5, #0
    a856:	e7ab      	b.n	a7b0 <sched_free_win_offset_calc+0x1a8>
    a858:	3b9aca00 	.word	0x3b9aca00
    a85c:	00000000 	.word	0x00000000
    a860:	00009dc9 	.word	0x00009dc9
    a864:	0001563e 	.word	0x0001563e
    a868:	20003a5c 	.word	0x20003a5c
    a86c:	000167b9 	.word	0x000167b9
    a870:	00016808 	.word	0x00016808
    a874:	0001802d 	.word	0x0001802d
    a878:	00018d4c 	.word	0x00018d4c
    a87c:	00016758 	.word	0x00016758
    a880:	200008c0 	.word	0x200008c0
    a884:	1afd498d 	.word	0x1afd498d

0000a888 <mayfly_sched_free_win_offset_calc>:
{
    a888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a88a:	2300      	movs	r3, #0
    a88c:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a88e:	2306      	movs	r3, #6
    a890:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a894:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a898:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a89c:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a89e:	bfbe      	ittt	lt
    a8a0:	4602      	movlt	r2, r0
    a8a2:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a8a4:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a8a8:	9101      	str	r1, [sp, #4]
    a8aa:	f10d 010b 	add.w	r1, sp, #11
    a8ae:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a8b0:	bfa8      	it	ge
    a8b2:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a8b4:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a8b8:	2100      	movs	r1, #0
    a8ba:	f7ff fea5 	bl	a608 <sched_free_win_offset_calc>
}
    a8be:	b005      	add	sp, #20
    a8c0:	f85d fb04 	ldr.w	pc, [sp], #4
    a8c4:	0000      	movs	r0, r0
	...

0000a8c8 <mayfly_sched_win_offset_select>:
{
    a8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a8cc:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a8d0:	b089      	sub	sp, #36	; 0x24
    a8d2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a8d4:	4840      	ldr	r0, [pc, #256]	; (a9d8 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a8d6:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a8d8:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a8da:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a8de:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a8e2:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a8e6:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a8e8:	fb03 1102 	mla	r1, r3, r2, r1
    a8ec:	a338      	add	r3, pc, #224	; (adr r3, a9d0 <mayfly_sched_win_offset_select+0x108>)
    a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a8f2:	9505      	str	r5, [sp, #20]
    a8f4:	6075      	str	r5, [r6, #4]
    a8f6:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a8f8:	f7f5 fc8c 	bl	214 <__aeabi_uldivmod>
    a8fc:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a8fe:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a902:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a906:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a90a:	9100      	str	r1, [sp, #0]
    a90c:	9601      	str	r6, [sp, #4]
    a90e:	2101      	movs	r1, #1
    a910:	4620      	mov	r0, r4
    a912:	f7ff fe79 	bl	a608 <sched_free_win_offset_calc>
    a916:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a91a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a91e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a922:	2202      	movs	r2, #2
    a924:	4639      	mov	r1, r7
    a926:	f10d 000e 	add.w	r0, sp, #14
    a92a:	f7f7 fa7b 	bl	1e24 <memcpy>
		while (offset_index_m < offset_m_max) {
    a92e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a932:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a936:	2300      	movs	r3, #0
    a938:	b2d9      	uxtb	r1, r3
    a93a:	4288      	cmp	r0, r1
    a93c:	d811      	bhi.n	a962 <mayfly_sched_win_offset_select+0x9a>
    a93e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a940:	4547      	cmp	r7, r8
    a942:	d1ee      	bne.n	a922 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a944:	b9b5      	cbnz	r5, a974 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a946:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a94a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a94e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a950:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a954:	2202      	movs	r2, #2
    a956:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a958:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a95c:	f7f7 fa62 	bl	1e24 <memcpy>
    a960:	e027      	b.n	a9b2 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a962:	454a      	cmp	r2, r9
    a964:	d004      	beq.n	a970 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a966:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a96a:	4291      	cmp	r1, r2
    a96c:	d024      	beq.n	a9b8 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a96e:	2501      	movs	r5, #1
    a970:	3301      	adds	r3, #1
    a972:	e7e1      	b.n	a938 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a974:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a978:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a97c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a980:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a984:	4b15      	ldr	r3, [pc, #84]	; (a9dc <mayfly_sched_win_offset_select+0x114>)
    a986:	2200      	movs	r2, #0
    a988:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a98c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a990:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a994:	f042 0203 	orr.w	r2, r2, #3
    a998:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a99c:	2203      	movs	r2, #3
    a99e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a9a2:	2211      	movs	r2, #17
    a9a4:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a9a8:	220f      	movs	r2, #15
    a9aa:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a9ae:	2220      	movs	r2, #32
    a9b0:	701a      	strb	r2, [r3, #0]
}
    a9b2:	b009      	add	sp, #36	; 0x24
    a9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a9b8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a9bc:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a9be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a9c2:	2202      	movs	r2, #2
    a9c4:	f10d 010e 	add.w	r1, sp, #14
    a9c8:	e7c6      	b.n	a958 <mayfly_sched_win_offset_select+0x90>
    a9ca:	bf00      	nop
    a9cc:	f3af 8000 	nop.w
    a9d0:	1afd498d 	.word	0x1afd498d
    a9d4:	00000007 	.word	0x00000007
    a9d8:	09ce5400 	.word	0x09ce5400
    a9dc:	200008c0 	.word	0x200008c0

0000a9e0 <sched_after_mstr_free_slot_get>:
{
    a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9e4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a9e6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a9e8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a9ea:	f8df 9144 	ldr.w	r9, [pc, #324]	; ab30 <sched_after_mstr_free_slot_get+0x150>
	ticker_id = ticker_id_prev = 0xff;
    a9ee:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a9f2:	4680      	mov	r8, r0
    a9f4:	4693      	mov	fp, r2
    a9f6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a9f8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a9fc:	601c      	str	r4, [r3, #0]
    a9fe:	9408      	str	r4, [sp, #32]
    aa00:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    aa02:	2302      	movs	r3, #2
    aa04:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa06:	ab09      	add	r3, sp, #36	; 0x24
    aa08:	9302      	str	r3, [sp, #8]
    aa0a:	4b41      	ldr	r3, [pc, #260]	; (ab10 <sched_after_mstr_free_slot_get+0x130>)
    aa0c:	9301      	str	r3, [sp, #4]
    aa0e:	ab08      	add	r3, sp, #32
    aa10:	9300      	str	r3, [sp, #0]
    aa12:	f10d 021f 	add.w	r2, sp, #31
    aa16:	465b      	mov	r3, fp
    aa18:	4641      	mov	r1, r8
    aa1a:	2000      	movs	r0, #0
    aa1c:	f7fd fb2e 	bl	807c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    aa20:	2802      	cmp	r0, #2
    aa22:	d015      	beq.n	aa50 <sched_after_mstr_free_slot_get+0x70>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    aa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa26:	b1bb      	cbz	r3, aa58 <sched_after_mstr_free_slot_get+0x78>
    aa28:	4b3a      	ldr	r3, [pc, #232]	; (ab14 <sched_after_mstr_free_slot_get+0x134>)
    aa2a:	9301      	str	r3, [sp, #4]
    aa2c:	9300      	str	r3, [sp, #0]
    aa2e:	4b3a      	ldr	r3, [pc, #232]	; (ab18 <sched_after_mstr_free_slot_get+0x138>)
    aa30:	4a3a      	ldr	r2, [pc, #232]	; (ab1c <sched_after_mstr_free_slot_get+0x13c>)
    aa32:	681c      	ldr	r4, [r3, #0]
    aa34:	493a      	ldr	r1, [pc, #232]	; (ab20 <sched_after_mstr_free_slot_get+0x140>)
    aa36:	4b3b      	ldr	r3, [pc, #236]	; (ab24 <sched_after_mstr_free_slot_get+0x144>)
    aa38:	483b      	ldr	r0, [pc, #236]	; (ab28 <sched_after_mstr_free_slot_get+0x148>)
    aa3a:	47a0      	blx	r4
    aa3c:	4040      	eors	r0, r0
    aa3e:	f380 8811 	msr	BASEPRI, r0
    aa42:	f04f 0004 	mov.w	r0, #4
    aa46:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa48:	4641      	mov	r1, r8
    aa4a:	2000      	movs	r0, #0
    aa4c:	f7fd fb94 	bl	8178 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    aa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa52:	2b02      	cmp	r3, #2
    aa54:	d0f8      	beq.n	aa48 <sched_after_mstr_free_slot_get+0x68>
    aa56:	e7e5      	b.n	aa24 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    aa58:	f89d 201f 	ldrb.w	r2, [sp, #31]
    aa5c:	2aff      	cmp	r2, #255	; 0xff
    aa5e:	d04e      	beq.n	aafe <sched_after_mstr_free_slot_get+0x11e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    aa60:	2a06      	cmp	r2, #6
    aa62:	d9ce      	bls.n	aa02 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    aa64:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    aa68:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    aa6a:	429a      	cmp	r2, r3
    aa6c:	dac9      	bge.n	aa02 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    aa6e:	3a07      	subs	r2, #7
    aa70:	b292      	uxth	r2, r2
    aa72:	f44f 71aa 	mov.w	r1, #340	; 0x154
    aa76:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    aa7a:	f7fc fbcf 	bl	721c <mem_get>
		if (conn && !conn->role) {
    aa7e:	2800      	cmp	r0, #0
    aa80:	d0bf      	beq.n	aa02 <sched_after_mstr_free_slot_get+0x22>
    aa82:	f990 301d 	ldrsb.w	r3, [r0, #29]
    aa86:	2b00      	cmp	r3, #0
    aa88:	dbbb      	blt.n	aa02 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    aa8a:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    aa8c:	9a08      	ldr	r2, [sp, #32]
    aa8e:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    aa92:	2b00      	cmp	r3, #0
    aa94:	da12      	bge.n	aabc <sched_after_mstr_free_slot_get+0xdc>
    aa96:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    aa98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    aa9c:	4571      	cmp	r1, lr
    aa9e:	bf2c      	ite	cs
    aaa0:	1852      	addcs	r2, r2, r1
    aaa2:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    aaa4:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    aaa6:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    aaa8:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    aaaa:	f101 0104 	add.w	r1, r1, #4
    aaae:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    aab0:	d108      	bne.n	aac4 <sched_after_mstr_free_slot_get+0xe4>
			ticker_id_prev = ticker_id;
    aab2:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    aab6:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    aab8:	4616      	mov	r6, r2
    aaba:	e7a2      	b.n	aa02 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    aabc:	4573      	cmp	r3, lr
    aabe:	bf38      	it	cc
    aac0:	4673      	movcc	r3, lr
    aac2:	e7f0      	b.n	aaa6 <sched_after_mstr_free_slot_get+0xc6>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    aac4:	4631      	mov	r1, r6
    aac6:	4610      	mov	r0, r2
    aac8:	9305      	str	r3, [sp, #20]
    aaca:	9204      	str	r2, [sp, #16]
    aacc:	f7fd fb6c 	bl	81a8 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    aad0:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    aad4:	4288      	cmp	r0, r1
    aad6:	9a04      	ldr	r2, [sp, #16]
    aad8:	9b05      	ldr	r3, [sp, #20]
    aada:	d9ea      	bls.n	aab2 <sched_after_mstr_free_slot_get+0xd2>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    aadc:	4813      	ldr	r0, [pc, #76]	; (ab2c <sched_after_mstr_free_slot_get+0x14c>)
    aade:	4434      	add	r4, r6
    aae0:	fba4 0100 	umull	r0, r1, r4, r0
    aae4:	2307      	movs	r3, #7
    aae6:	fb03 1104 	mla	r1, r3, r4, r1
    aaea:	a307      	add	r3, pc, #28	; (adr r3, ab08 <sched_after_mstr_free_slot_get+0x128>)
    aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
    aaf0:	f7f5 fb90 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    aaf4:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    aaf6:	6038      	str	r0, [r7, #0]
}
    aaf8:	b00b      	add	sp, #44	; 0x2c
    aafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    aafe:	2dff      	cmp	r5, #255	; 0xff
    ab00:	d1ec      	bne.n	aadc <sched_after_mstr_free_slot_get+0xfc>
    ab02:	e7f9      	b.n	aaf8 <sched_after_mstr_free_slot_get+0x118>
    ab04:	f3af 8000 	nop.w
    ab08:	3b9aca00 	.word	0x3b9aca00
    ab0c:	00000000 	.word	0x00000000
    ab10:	00009dc9 	.word	0x00009dc9
    ab14:	0001563e 	.word	0x0001563e
    ab18:	20003a5c 	.word	0x20003a5c
    ab1c:	000167b9 	.word	0x000167b9
    ab20:	00016808 	.word	0x00016808
    ab24:	00017fed 	.word	0x00017fed
    ab28:	00018d4c 	.word	0x00018d4c
    ab2c:	1afd498d 	.word	0x1afd498d
    ab30:	200008c0 	.word	0x200008c0

0000ab34 <isr_adv_ci_adva_check>:
{
    ab34:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    ab36:	7804      	ldrb	r4, [r0, #0]
    ab38:	780a      	ldrb	r2, [r1, #0]
    ab3a:	f3c4 1380 	ubfx	r3, r4, #6, #1
    ab3e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ab42:	d119      	bne.n	ab78 <isr_adv_ci_adva_check+0x44>
    ab44:	f004 040f 	and.w	r4, r4, #15
    ab48:	2c01      	cmp	r4, #1
    ab4a:	f101 0608 	add.w	r6, r1, #8
    ab4e:	f100 0502 	add.w	r5, r0, #2
    ab52:	d008      	beq.n	ab66 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    ab54:	2206      	movs	r2, #6
    ab56:	4631      	mov	r1, r6
    ab58:	4628      	mov	r0, r5
    ab5a:	f7f7 f94e 	bl	1dfa <memcmp>
			 BDADDR_SIZE)) ||
    ab5e:	fab0 f080 	clz	r0, r0
    ab62:	0940      	lsrs	r0, r0, #5
    ab64:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    ab66:	2206      	movs	r2, #6
    ab68:	4631      	mov	r1, r6
    ab6a:	4628      	mov	r0, r5
    ab6c:	f7f7 f945 	bl	1dfa <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    ab70:	2800      	cmp	r0, #0
    ab72:	d1ef      	bne.n	ab54 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    ab74:	4620      	mov	r0, r4
    ab76:	bd70      	pop	{r4, r5, r6, pc}
    ab78:	2000      	movs	r0, #0
}
    ab7a:	bd70      	pop	{r4, r5, r6, pc}

0000ab7c <packet_rx_enqueue>:
{
    ab7c:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    ab7e:	4a20      	ldr	r2, [pc, #128]	; (ac00 <packet_rx_enqueue+0x84>)
    ab80:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    ab84:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    ab88:	4299      	cmp	r1, r3
    ab8a:	d10f      	bne.n	abac <packet_rx_enqueue+0x30>
    ab8c:	4b1d      	ldr	r3, [pc, #116]	; (ac04 <packet_rx_enqueue+0x88>)
    ab8e:	9301      	str	r3, [sp, #4]
    ab90:	9300      	str	r3, [sp, #0]
    ab92:	4b1d      	ldr	r3, [pc, #116]	; (ac08 <packet_rx_enqueue+0x8c>)
    ab94:	4a1d      	ldr	r2, [pc, #116]	; (ac0c <packet_rx_enqueue+0x90>)
    ab96:	681c      	ldr	r4, [r3, #0]
    ab98:	491d      	ldr	r1, [pc, #116]	; (ac10 <packet_rx_enqueue+0x94>)
    ab9a:	4b1e      	ldr	r3, [pc, #120]	; (ac14 <packet_rx_enqueue+0x98>)
    ab9c:	481e      	ldr	r0, [pc, #120]	; (ac18 <packet_rx_enqueue+0x9c>)
	LL_ASSERT(link);
    ab9e:	47a0      	blx	r4
    aba0:	4040      	eors	r0, r0
    aba2:	f380 8811 	msr	BASEPRI, r0
    aba6:	f04f 0004 	mov.w	r0, #4
    abaa:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    abac:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    abb0:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    abb4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    abb8:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    abbc:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    abbe:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    abc0:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    abc4:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    abc8:	3301      	adds	r3, #1
    abca:	b2db      	uxtb	r3, r3
		last = 0;
    abcc:	429c      	cmp	r4, r3
    abce:	bf08      	it	eq
    abd0:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    abd2:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    abd6:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    abda:	f7fc fb44 	bl	7266 <memq_enqueue>
	LL_ASSERT(link);
    abde:	b948      	cbnz	r0, abf4 <packet_rx_enqueue+0x78>
    abe0:	4b08      	ldr	r3, [pc, #32]	; (ac04 <packet_rx_enqueue+0x88>)
    abe2:	9301      	str	r3, [sp, #4]
    abe4:	9300      	str	r3, [sp, #0]
    abe6:	4b08      	ldr	r3, [pc, #32]	; (ac08 <packet_rx_enqueue+0x8c>)
    abe8:	4a08      	ldr	r2, [pc, #32]	; (ac0c <packet_rx_enqueue+0x90>)
    abea:	681c      	ldr	r4, [r3, #0]
    abec:	4908      	ldr	r1, [pc, #32]	; (ac10 <packet_rx_enqueue+0x94>)
    abee:	4b09      	ldr	r3, [pc, #36]	; (ac14 <packet_rx_enqueue+0x98>)
    abf0:	480a      	ldr	r0, [pc, #40]	; (ac1c <packet_rx_enqueue+0xa0>)
    abf2:	e7d4      	b.n	ab9e <packet_rx_enqueue+0x22>
}
    abf4:	b002      	add	sp, #8
    abf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    abfa:	f006 bc9f 	b.w	1153c <radio_event_callback>
    abfe:	bf00      	nop
    ac00:	200008c0 	.word	0x200008c0
    ac04:	0001563e 	.word	0x0001563e
    ac08:	20003a5c 	.word	0x20003a5c
    ac0c:	000167b9 	.word	0x000167b9
    ac10:	00016808 	.word	0x00016808
    ac14:	0001817e 	.word	0x0001817e
    ac18:	00018a44 	.word	0x00018a44
    ac1c:	00018267 	.word	0x00018267

0000ac20 <isr_scan_tgta_check>:
{
    ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac24:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    ac26:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    ac28:	f101 0808 	add.w	r8, r1, #8
{
    ac2c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    ac2e:	09c0      	lsrs	r0, r0, #7
    ac30:	4641      	mov	r1, r8
{
    ac32:	4691      	mov	r9, r2
    ac34:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    ac36:	f007 f963 	bl	11f00 <ctrl_rl_addr_resolve>
    ac3a:	4604      	mov	r4, r0
    ac3c:	b9d8      	cbnz	r0, ac76 <isr_scan_tgta_check+0x56>
    ac3e:	4f1c      	ldr	r7, [pc, #112]	; (acb0 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    ac40:	f1ba 0f00 	cmp.w	sl, #0
    ac44:	d10e      	bne.n	ac64 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    ac46:	782b      	ldrb	r3, [r5, #0]
    ac48:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    ac4c:	09db      	lsrs	r3, r3, #7
    ac4e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ac52:	d113      	bne.n	ac7c <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    ac54:	2206      	movs	r2, #6
    ac56:	4641      	mov	r1, r8
    ac58:	4816      	ldr	r0, [pc, #88]	; (acb4 <isr_scan_tgta_check+0x94>)
    ac5a:	f7f7 f8ce 	bl	1dfa <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    ac5e:	b968      	cbnz	r0, ac7c <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    ac60:	2001      	movs	r0, #1
    ac62:	e012      	b.n	ac8a <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    ac64:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    ac68:	07db      	lsls	r3, r3, #31
    ac6a:	d5ec      	bpl.n	ac46 <isr_scan_tgta_check+0x26>
    ac6c:	4648      	mov	r0, r9
    ac6e:	f006 fe8b 	bl	11988 <ctrl_lrpa_get>
    ac72:	2800      	cmp	r0, #0
    ac74:	d0e7      	beq.n	ac46 <isr_scan_tgta_check+0x26>
}
    ac76:	4620      	mov	r0, r4
    ac78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    ac7c:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    ac80:	f3c0 1001 	ubfx	r0, r0, #4, #2
    ac84:	f010 0002 	ands.w	r0, r0, #2
    ac88:	d101      	bne.n	ac8e <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    ac8a:	4604      	mov	r4, r0
    ac8c:	e7f3      	b.n	ac76 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    ac8e:	f995 3000 	ldrsb.w	r3, [r5]
    ac92:	2b00      	cmp	r3, #0
    ac94:	da09      	bge.n	acaa <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    ac96:	7b6b      	ldrb	r3, [r5, #13]
    ac98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ac9c:	2b40      	cmp	r3, #64	; 0x40
    ac9e:	d104      	bne.n	acaa <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    aca0:	2e00      	cmp	r6, #0
    aca2:	d0dd      	beq.n	ac60 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    aca4:	2001      	movs	r0, #1
    aca6:	7030      	strb	r0, [r6, #0]
    aca8:	e7ef      	b.n	ac8a <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    acaa:	2000      	movs	r0, #0
    acac:	e7ed      	b.n	ac8a <isr_scan_tgta_check+0x6a>
    acae:	bf00      	nop
    acb0:	200008c0 	.word	0x200008c0
    acb4:	200009a4 	.word	0x200009a4

0000acb8 <isr_rx_scan_report>:
{
    acb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    acbc:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    acbe:	2003      	movs	r0, #3
{
    acc0:	460f      	mov	r7, r1
    acc2:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    acc4:	f7ff f8c0 	bl	9e48 <packet_rx_reserve_get>
	if (node_rx == 0) {
    acc8:	4604      	mov	r4, r0
    acca:	2800      	cmp	r0, #0
    accc:	d03f      	beq.n	ad4e <isr_rx_scan_report+0x96>
	node_rx->hdr.handle = 0xffff;
    acce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    acd2:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    acd4:	4b1f      	ldr	r3, [pc, #124]	; (ad54 <isr_rx_scan_report+0x9c>)
    acd6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    acda:	075a      	lsls	r2, r3, #29
    acdc:	d033      	beq.n	ad46 <isr_rx_scan_report+0x8e>
		switch (_radio.scanner.phy) {
    acde:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ace2:	b2da      	uxtb	r2, r3
    ace4:	2a01      	cmp	r2, #1
    ace6:	d011      	beq.n	ad0c <isr_rx_scan_report+0x54>
    ace8:	2a04      	cmp	r2, #4
    acea:	d010      	beq.n	ad0e <isr_rx_scan_report+0x56>
			LL_ASSERT(0);
    acec:	4b1a      	ldr	r3, [pc, #104]	; (ad58 <isr_rx_scan_report+0xa0>)
    acee:	9301      	str	r3, [sp, #4]
    acf0:	9300      	str	r3, [sp, #0]
    acf2:	4b1a      	ldr	r3, [pc, #104]	; (ad5c <isr_rx_scan_report+0xa4>)
    acf4:	4a1a      	ldr	r2, [pc, #104]	; (ad60 <isr_rx_scan_report+0xa8>)
    acf6:	681c      	ldr	r4, [r3, #0]
    acf8:	491a      	ldr	r1, [pc, #104]	; (ad64 <isr_rx_scan_report+0xac>)
    acfa:	4b1b      	ldr	r3, [pc, #108]	; (ad68 <isr_rx_scan_report+0xb0>)
    acfc:	481b      	ldr	r0, [pc, #108]	; (ad6c <isr_rx_scan_report+0xb4>)
    acfe:	47a0      	blx	r4
    ad00:	4040      	eors	r0, r0
    ad02:	f380 8811 	msr	BASEPRI, r0
    ad06:	f04f 0004 	mov.w	r0, #4
    ad0a:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    ad0c:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    ad0e:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    ad12:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    ad14:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ad18:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    ad1c:	f1b9 0f00 	cmp.w	r9, #0
    ad20:	d013      	beq.n	ad4a <isr_rx_scan_report+0x92>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    ad22:	f007 fe77 	bl	12a14 <radio_rssi_get>
			     pdu_adv_rx->len] =
    ad26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    ad2a:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ad2e:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    ad30:	442b      	add	r3, r5
    ad32:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ad34:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    ad36:	441d      	add	r5, r3
    ad38:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    ad3a:	f7ff ff1f 	bl	ab7c <packet_rx_enqueue>
	return 0;
    ad3e:	2000      	movs	r0, #0
}
    ad40:	b003      	add	sp, #12
    ad42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    ad46:	2302      	movs	r3, #2
    ad48:	e7e1      	b.n	ad0e <isr_rx_scan_report+0x56>
			     pdu_adv_rx->len] =
    ad4a:	207f      	movs	r0, #127	; 0x7f
    ad4c:	e7ed      	b.n	ad2a <isr_rx_scan_report+0x72>
		return 1;
    ad4e:	2001      	movs	r0, #1
    ad50:	e7f6      	b.n	ad40 <isr_rx_scan_report+0x88>
    ad52:	bf00      	nop
    ad54:	200008c0 	.word	0x200008c0
    ad58:	0001563e 	.word	0x0001563e
    ad5c:	20003a5c 	.word	0x20003a5c
    ad60:	000167b9 	.word	0x000167b9
    ad64:	00016808 	.word	0x00016808
    ad68:	00017e14 	.word	0x00017e14
    ad6c:	00016758 	.word	0x00016758

0000ad70 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    ad70:	4a0b      	ldr	r2, [pc, #44]	; (ada0 <rx_fc_lock+0x30>)
    ad72:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    ad76:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    ad7a:	4299      	cmp	r1, r3
    ad7c:	d10e      	bne.n	ad9c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    ad7e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    ad82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    ad86:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    ad8a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    ad8e:	3301      	adds	r3, #1
    ad90:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    ad92:	2b03      	cmp	r3, #3
    ad94:	bf08      	it	eq
    ad96:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    ad98:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    ad9c:	4770      	bx	lr
    ad9e:	bf00      	nop
    ada0:	200008c0 	.word	0x200008c0

0000ada4 <ticker_success_assert>:
{
    ada4:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ada6:	b178      	cbz	r0, adc8 <ticker_success_assert+0x24>
    ada8:	4b08      	ldr	r3, [pc, #32]	; (adcc <ticker_success_assert+0x28>)
    adaa:	9301      	str	r3, [sp, #4]
    adac:	9300      	str	r3, [sp, #0]
    adae:	4b08      	ldr	r3, [pc, #32]	; (add0 <ticker_success_assert+0x2c>)
    adb0:	4a08      	ldr	r2, [pc, #32]	; (add4 <ticker_success_assert+0x30>)
    adb2:	681c      	ldr	r4, [r3, #0]
    adb4:	4908      	ldr	r1, [pc, #32]	; (add8 <ticker_success_assert+0x34>)
    adb6:	4b09      	ldr	r3, [pc, #36]	; (addc <ticker_success_assert+0x38>)
    adb8:	4809      	ldr	r0, [pc, #36]	; (ade0 <ticker_success_assert+0x3c>)
    adba:	47a0      	blx	r4
    adbc:	4040      	eors	r0, r0
    adbe:	f380 8811 	msr	BASEPRI, r0
    adc2:	f04f 0004 	mov.w	r0, #4
    adc6:	df02      	svc	2
}
    adc8:	b002      	add	sp, #8
    adca:	bd10      	pop	{r4, pc}
    adcc:	0001563e 	.word	0x0001563e
    add0:	20003a5c 	.word	0x20003a5c
    add4:	000167b9 	.word	0x000167b9
    add8:	00016808 	.word	0x00016808
    addc:	00017efd 	.word	0x00017efd
    ade0:	00018e64 	.word	0x00018e64

0000ade4 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    ade4:	2801      	cmp	r0, #1
{
    ade6:	b513      	push	{r0, r1, r4, lr}
    ade8:	4b12      	ldr	r3, [pc, #72]	; (ae34 <ticker_stop_adv_assert+0x50>)
	if (status == TICKER_STATUS_FAILURE) {
    adea:	d116      	bne.n	ae1a <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    adec:	7c9a      	ldrb	r2, [r3, #18]
    adee:	2a05      	cmp	r2, #5
    adf0:	d103      	bne.n	adfa <ticker_stop_adv_assert+0x16>
			_radio.ticker_id_stop = 0;
    adf2:	2200      	movs	r2, #0
    adf4:	749a      	strb	r2, [r3, #18]
}
    adf6:	b002      	add	sp, #8
    adf8:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    adfa:	4b0f      	ldr	r3, [pc, #60]	; (ae38 <ticker_stop_adv_assert+0x54>)
    adfc:	9301      	str	r3, [sp, #4]
    adfe:	9300      	str	r3, [sp, #0]
    ae00:	4b0e      	ldr	r3, [pc, #56]	; (ae3c <ticker_stop_adv_assert+0x58>)
    ae02:	4a0f      	ldr	r2, [pc, #60]	; (ae40 <ticker_stop_adv_assert+0x5c>)
    ae04:	681c      	ldr	r4, [r3, #0]
    ae06:	490f      	ldr	r1, [pc, #60]	; (ae44 <ticker_stop_adv_assert+0x60>)
    ae08:	4b0f      	ldr	r3, [pc, #60]	; (ae48 <ticker_stop_adv_assert+0x64>)
    ae0a:	4810      	ldr	r0, [pc, #64]	; (ae4c <ticker_stop_adv_assert+0x68>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    ae0c:	47a0      	blx	r4
    ae0e:	4040      	eors	r0, r0
    ae10:	f380 8811 	msr	BASEPRI, r0
    ae14:	f04f 0004 	mov.w	r0, #4
    ae18:	df02      	svc	2
    ae1a:	7c1b      	ldrb	r3, [r3, #16]
    ae1c:	2b05      	cmp	r3, #5
    ae1e:	d1ea      	bne.n	adf6 <ticker_stop_adv_assert+0x12>
    ae20:	4b05      	ldr	r3, [pc, #20]	; (ae38 <ticker_stop_adv_assert+0x54>)
    ae22:	9301      	str	r3, [sp, #4]
    ae24:	9300      	str	r3, [sp, #0]
    ae26:	4b05      	ldr	r3, [pc, #20]	; (ae3c <ticker_stop_adv_assert+0x58>)
    ae28:	4a05      	ldr	r2, [pc, #20]	; (ae40 <ticker_stop_adv_assert+0x5c>)
    ae2a:	681c      	ldr	r4, [r3, #0]
    ae2c:	4905      	ldr	r1, [pc, #20]	; (ae44 <ticker_stop_adv_assert+0x60>)
    ae2e:	4b06      	ldr	r3, [pc, #24]	; (ae48 <ticker_stop_adv_assert+0x64>)
    ae30:	4807      	ldr	r0, [pc, #28]	; (ae50 <ticker_stop_adv_assert+0x6c>)
    ae32:	e7eb      	b.n	ae0c <ticker_stop_adv_assert+0x28>
    ae34:	200008c0 	.word	0x200008c0
    ae38:	0001563e 	.word	0x0001563e
    ae3c:	20003a5c 	.word	0x20003a5c
    ae40:	000167b9 	.word	0x000167b9
    ae44:	00016808 	.word	0x00016808
    ae48:	00017f13 	.word	0x00017f13
    ae4c:	00016758 	.word	0x00016758
    ae50:	00018de6 	.word	0x00018de6

0000ae54 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    ae54:	2801      	cmp	r0, #1
{
    ae56:	b513      	push	{r0, r1, r4, lr}
    ae58:	4b12      	ldr	r3, [pc, #72]	; (aea4 <ticker_stop_scan_assert+0x50>)
	if (status == TICKER_STATUS_FAILURE) {
    ae5a:	d116      	bne.n	ae8a <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    ae5c:	7c9a      	ldrb	r2, [r3, #18]
    ae5e:	2a06      	cmp	r2, #6
    ae60:	d103      	bne.n	ae6a <ticker_stop_scan_assert+0x16>
			_radio.ticker_id_stop = 0;
    ae62:	2200      	movs	r2, #0
    ae64:	749a      	strb	r2, [r3, #18]
}
    ae66:	b002      	add	sp, #8
    ae68:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    ae6a:	4b0f      	ldr	r3, [pc, #60]	; (aea8 <ticker_stop_scan_assert+0x54>)
    ae6c:	9301      	str	r3, [sp, #4]
    ae6e:	9300      	str	r3, [sp, #0]
    ae70:	4b0e      	ldr	r3, [pc, #56]	; (aeac <ticker_stop_scan_assert+0x58>)
    ae72:	4a0f      	ldr	r2, [pc, #60]	; (aeb0 <ticker_stop_scan_assert+0x5c>)
    ae74:	681c      	ldr	r4, [r3, #0]
    ae76:	490f      	ldr	r1, [pc, #60]	; (aeb4 <ticker_stop_scan_assert+0x60>)
    ae78:	4b0f      	ldr	r3, [pc, #60]	; (aeb8 <ticker_stop_scan_assert+0x64>)
    ae7a:	4810      	ldr	r0, [pc, #64]	; (aebc <ticker_stop_scan_assert+0x68>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    ae7c:	47a0      	blx	r4
    ae7e:	4040      	eors	r0, r0
    ae80:	f380 8811 	msr	BASEPRI, r0
    ae84:	f04f 0004 	mov.w	r0, #4
    ae88:	df02      	svc	2
    ae8a:	7c1b      	ldrb	r3, [r3, #16]
    ae8c:	2b06      	cmp	r3, #6
    ae8e:	d1ea      	bne.n	ae66 <ticker_stop_scan_assert+0x12>
    ae90:	4b05      	ldr	r3, [pc, #20]	; (aea8 <ticker_stop_scan_assert+0x54>)
    ae92:	9301      	str	r3, [sp, #4]
    ae94:	9300      	str	r3, [sp, #0]
    ae96:	4b05      	ldr	r3, [pc, #20]	; (aeac <ticker_stop_scan_assert+0x58>)
    ae98:	4a05      	ldr	r2, [pc, #20]	; (aeb0 <ticker_stop_scan_assert+0x5c>)
    ae9a:	681c      	ldr	r4, [r3, #0]
    ae9c:	4905      	ldr	r1, [pc, #20]	; (aeb4 <ticker_stop_scan_assert+0x60>)
    ae9e:	4b06      	ldr	r3, [pc, #24]	; (aeb8 <ticker_stop_scan_assert+0x64>)
    aea0:	4807      	ldr	r0, [pc, #28]	; (aec0 <ticker_stop_scan_assert+0x6c>)
    aea2:	e7eb      	b.n	ae7c <ticker_stop_scan_assert+0x28>
    aea4:	200008c0 	.word	0x200008c0
    aea8:	0001563e 	.word	0x0001563e
    aeac:	20003a5c 	.word	0x20003a5c
    aeb0:	000167b9 	.word	0x000167b9
    aeb4:	00016808 	.word	0x00016808
    aeb8:	00017f2a 	.word	0x00017f2a
    aebc:	00016758 	.word	0x00016758
    aec0:	00018e25 	.word	0x00018e25

0000aec4 <ticker_update_adv_assert>:
{
    aec4:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    aec6:	b198      	cbz	r0, aef0 <ticker_update_adv_assert+0x2c>
    aec8:	4b0a      	ldr	r3, [pc, #40]	; (aef4 <ticker_update_adv_assert+0x30>)
    aeca:	7c9b      	ldrb	r3, [r3, #18]
    aecc:	2b05      	cmp	r3, #5
    aece:	d00f      	beq.n	aef0 <ticker_update_adv_assert+0x2c>
    aed0:	4b09      	ldr	r3, [pc, #36]	; (aef8 <ticker_update_adv_assert+0x34>)
    aed2:	9301      	str	r3, [sp, #4]
    aed4:	9300      	str	r3, [sp, #0]
    aed6:	4b09      	ldr	r3, [pc, #36]	; (aefc <ticker_update_adv_assert+0x38>)
    aed8:	4a09      	ldr	r2, [pc, #36]	; (af00 <ticker_update_adv_assert+0x3c>)
    aeda:	681c      	ldr	r4, [r3, #0]
    aedc:	4909      	ldr	r1, [pc, #36]	; (af04 <ticker_update_adv_assert+0x40>)
    aede:	4b0a      	ldr	r3, [pc, #40]	; (af08 <ticker_update_adv_assert+0x44>)
    aee0:	480a      	ldr	r0, [pc, #40]	; (af0c <ticker_update_adv_assert+0x48>)
    aee2:	47a0      	blx	r4
    aee4:	4040      	eors	r0, r0
    aee6:	f380 8811 	msr	BASEPRI, r0
    aeea:	f04f 0004 	mov.w	r0, #4
    aeee:	df02      	svc	2
}
    aef0:	b002      	add	sp, #8
    aef2:	bd10      	pop	{r4, pc}
    aef4:	200008c0 	.word	0x200008c0
    aef8:	0001563e 	.word	0x0001563e
    aefc:	20003a5c 	.word	0x20003a5c
    af00:	000167b9 	.word	0x000167b9
    af04:	00016808 	.word	0x00016808
    af08:	00017f42 	.word	0x00017f42
    af0c:	00018e91 	.word	0x00018e91

0000af10 <ticker_update_slave_assert>:
{
    af10:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    af12:	b1a0      	cbz	r0, af3e <ticker_update_slave_assert+0x2e>
    af14:	4b0b      	ldr	r3, [pc, #44]	; (af44 <ticker_update_slave_assert+0x34>)
    af16:	7c9b      	ldrb	r3, [r3, #18]
    af18:	b2c9      	uxtb	r1, r1
    af1a:	4299      	cmp	r1, r3
    af1c:	d00f      	beq.n	af3e <ticker_update_slave_assert+0x2e>
    af1e:	4b0a      	ldr	r3, [pc, #40]	; (af48 <ticker_update_slave_assert+0x38>)
    af20:	9301      	str	r3, [sp, #4]
    af22:	9300      	str	r3, [sp, #0]
    af24:	4b09      	ldr	r3, [pc, #36]	; (af4c <ticker_update_slave_assert+0x3c>)
    af26:	4a0a      	ldr	r2, [pc, #40]	; (af50 <ticker_update_slave_assert+0x40>)
    af28:	681c      	ldr	r4, [r3, #0]
    af2a:	490a      	ldr	r1, [pc, #40]	; (af54 <ticker_update_slave_assert+0x44>)
    af2c:	4b0a      	ldr	r3, [pc, #40]	; (af58 <ticker_update_slave_assert+0x48>)
    af2e:	480b      	ldr	r0, [pc, #44]	; (af5c <ticker_update_slave_assert+0x4c>)
    af30:	47a0      	blx	r4
    af32:	4040      	eors	r0, r0
    af34:	f380 8811 	msr	BASEPRI, r0
    af38:	f04f 0004 	mov.w	r0, #4
    af3c:	df02      	svc	2
}
    af3e:	b002      	add	sp, #8
    af40:	bd10      	pop	{r4, pc}
    af42:	bf00      	nop
    af44:	200008c0 	.word	0x200008c0
    af48:	0001563e 	.word	0x0001563e
    af4c:	20003a5c 	.word	0x20003a5c
    af50:	000167b9 	.word	0x000167b9
    af54:	00016808 	.word	0x00016808
    af58:	00017f5b 	.word	0x00017f5b
    af5c:	00018ee0 	.word	0x00018ee0

0000af60 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    af60:	b513      	push	{r0, r1, r4, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    af62:	b178      	cbz	r0, af84 <ticker_op_latency_cancelled+0x24>
    af64:	4b0b      	ldr	r3, [pc, #44]	; (af94 <ticker_op_latency_cancelled+0x34>)
    af66:	9301      	str	r3, [sp, #4]
    af68:	9300      	str	r3, [sp, #0]
    af6a:	4b0b      	ldr	r3, [pc, #44]	; (af98 <ticker_op_latency_cancelled+0x38>)
    af6c:	4a0b      	ldr	r2, [pc, #44]	; (af9c <ticker_op_latency_cancelled+0x3c>)
    af6e:	681c      	ldr	r4, [r3, #0]
    af70:	490b      	ldr	r1, [pc, #44]	; (afa0 <ticker_op_latency_cancelled+0x40>)
    af72:	4b0c      	ldr	r3, [pc, #48]	; (afa4 <ticker_op_latency_cancelled+0x44>)
    af74:	480c      	ldr	r0, [pc, #48]	; (afa8 <ticker_op_latency_cancelled+0x48>)
    af76:	47a0      	blx	r4
    af78:	4040      	eors	r0, r0
    af7a:	f380 8811 	msr	BASEPRI, r0
    af7e:	f04f 0004 	mov.w	r0, #4
    af82:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    af84:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    af88:	f360 0341 	bfi	r3, r0, #1, #1
    af8c:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    af90:	b002      	add	sp, #8
    af92:	bd10      	pop	{r4, pc}
    af94:	0001563e 	.word	0x0001563e
    af98:	20003a5c 	.word	0x20003a5c
    af9c:	000167b9 	.word	0x000167b9
    afa0:	00016808 	.word	0x00016808
    afa4:	00018239 	.word	0x00018239
    afa8:	00018db2 	.word	0x00018db2

0000afac <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    afac:	4b04      	ldr	r3, [pc, #16]	; (afc0 <ticker_job_disable+0x14>)
    afae:	7d1b      	ldrb	r3, [r3, #20]
    afb0:	b123      	cbz	r3, afbc <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    afb2:	2101      	movs	r1, #1
    afb4:	2200      	movs	r2, #0
    afb6:	4608      	mov	r0, r1
    afb8:	f7fc b99e 	b.w	72f8 <mayfly_enable>
    afbc:	4770      	bx	lr
    afbe:	bf00      	nop
    afc0:	200008c0 	.word	0x200008c0

0000afc4 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    afc4:	2806      	cmp	r0, #6
{
    afc6:	b510      	push	{r4, lr}
    afc8:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    afca:	d90a      	bls.n	afe2 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    afcc:	4b09      	ldr	r3, [pc, #36]	; (aff4 <hdr_conn_get+0x30>)
    afce:	1fc2      	subs	r2, r0, #7
    afd0:	b292      	uxth	r2, r2
    afd2:	f44f 71aa 	mov.w	r1, #340	; 0x154
    afd6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    afda:	f7fc f91f 	bl	721c <mem_get>
    afde:	6020      	str	r0, [r4, #0]
    afe0:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    afe2:	2805      	cmp	r0, #5
    afe4:	d004      	beq.n	aff0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    afe6:	2806      	cmp	r0, #6
	return NULL;
    afe8:	4803      	ldr	r0, [pc, #12]	; (aff8 <hdr_conn_get+0x34>)
    afea:	bf18      	it	ne
    afec:	2000      	movne	r0, #0
    afee:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    aff0:	4802      	ldr	r0, [pc, #8]	; (affc <hdr_conn_get+0x38>)
}
    aff2:	bd10      	pop	{r4, pc}
    aff4:	200008c0 	.word	0x200008c0
    aff8:	20000990 	.word	0x20000990
    affc:	200008d8 	.word	0x200008d8

0000b000 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b000:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    b002:	4b08      	ldr	r3, [pc, #32]	; (b024 <event_stop.part.10+0x24>)
    b004:	9301      	str	r3, [sp, #4]
    b006:	9300      	str	r3, [sp, #0]
    b008:	4b07      	ldr	r3, [pc, #28]	; (b028 <event_stop.part.10+0x28>)
    b00a:	4a08      	ldr	r2, [pc, #32]	; (b02c <event_stop.part.10+0x2c>)
    b00c:	681c      	ldr	r4, [r3, #0]
    b00e:	4908      	ldr	r1, [pc, #32]	; (b030 <event_stop.part.10+0x30>)
    b010:	4b08      	ldr	r3, [pc, #32]	; (b034 <event_stop.part.10+0x34>)
    b012:	4809      	ldr	r0, [pc, #36]	; (b038 <event_stop.part.10+0x38>)
    b014:	47a0      	blx	r4
    b016:	4040      	eors	r0, r0
    b018:	f380 8811 	msr	BASEPRI, r0
    b01c:	f04f 0004 	mov.w	r0, #4
    b020:	df02      	svc	2
    b022:	bf00      	nop
    b024:	0001563e 	.word	0x0001563e
    b028:	20003a5c 	.word	0x20003a5c
    b02c:	000167b9 	.word	0x000167b9
    b030:	00016808 	.word	0x00016808
    b034:	0001805a 	.word	0x0001805a
    b038:	000189c7 	.word	0x000189c7

0000b03c <event_stop>:
	s_mfy_radio_stop.param = context;
    b03c:	4a06      	ldr	r2, [pc, #24]	; (b058 <event_stop+0x1c>)
{
    b03e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b040:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b042:	4613      	mov	r3, r2
    b044:	2200      	movs	r2, #0
    b046:	4611      	mov	r1, r2
    b048:	4610      	mov	r0, r2
    b04a:	f7fc f97d 	bl	7348 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b04e:	b108      	cbz	r0, b054 <event_stop+0x18>
    b050:	f7ff ffd6 	bl	b000 <event_stop.part.10>
    b054:	bd08      	pop	{r3, pc}
    b056:	bf00      	nop
    b058:	20003d68 	.word	0x20003d68

0000b05c <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b05c:	2200      	movs	r2, #0
{
    b05e:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b060:	4b0b      	ldr	r3, [pc, #44]	; (b090 <event_active+0x34>)
    b062:	4611      	mov	r1, r2
    b064:	4610      	mov	r0, r2
    b066:	f7fc f96f 	bl	7348 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b06a:	b178      	cbz	r0, b08c <event_active+0x30>
    b06c:	4b09      	ldr	r3, [pc, #36]	; (b094 <event_active+0x38>)
    b06e:	9301      	str	r3, [sp, #4]
    b070:	9300      	str	r3, [sp, #0]
    b072:	4b09      	ldr	r3, [pc, #36]	; (b098 <event_active+0x3c>)
    b074:	4a09      	ldr	r2, [pc, #36]	; (b09c <event_active+0x40>)
    b076:	681c      	ldr	r4, [r3, #0]
    b078:	4909      	ldr	r1, [pc, #36]	; (b0a0 <event_active+0x44>)
    b07a:	4b0a      	ldr	r3, [pc, #40]	; (b0a4 <event_active+0x48>)
    b07c:	480a      	ldr	r0, [pc, #40]	; (b0a8 <event_active+0x4c>)
    b07e:	47a0      	blx	r4
    b080:	4040      	eors	r0, r0
    b082:	f380 8811 	msr	BASEPRI, r0
    b086:	f04f 0004 	mov.w	r0, #4
    b08a:	df02      	svc	2
}
    b08c:	b002      	add	sp, #8
    b08e:	bd10      	pop	{r4, pc}
    b090:	20003d38 	.word	0x20003d38
    b094:	0001563e 	.word	0x0001563e
    b098:	20003a5c 	.word	0x20003a5c
    b09c:	000167b9 	.word	0x000167b9
    b0a0:	00016808 	.word	0x00016808
    b0a4:	00017f8a 	.word	0x00017f8a
    b0a8:	000189c7 	.word	0x000189c7

0000b0ac <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b0ac:	2200      	movs	r2, #0
{
    b0ae:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b0b0:	4b0b      	ldr	r3, [pc, #44]	; (b0e0 <event_xtal+0x34>)
    b0b2:	4611      	mov	r1, r2
    b0b4:	4610      	mov	r0, r2
    b0b6:	f7fc f947 	bl	7348 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b0ba:	b178      	cbz	r0, b0dc <event_xtal+0x30>
    b0bc:	4b09      	ldr	r3, [pc, #36]	; (b0e4 <event_xtal+0x38>)
    b0be:	9301      	str	r3, [sp, #4]
    b0c0:	9300      	str	r3, [sp, #0]
    b0c2:	4b09      	ldr	r3, [pc, #36]	; (b0e8 <event_xtal+0x3c>)
    b0c4:	4a09      	ldr	r2, [pc, #36]	; (b0ec <event_xtal+0x40>)
    b0c6:	681c      	ldr	r4, [r3, #0]
    b0c8:	4909      	ldr	r1, [pc, #36]	; (b0f0 <event_xtal+0x44>)
    b0ca:	4b0a      	ldr	r3, [pc, #40]	; (b0f4 <event_xtal+0x48>)
    b0cc:	480a      	ldr	r0, [pc, #40]	; (b0f8 <event_xtal+0x4c>)
    b0ce:	47a0      	blx	r4
    b0d0:	4040      	eors	r0, r0
    b0d2:	f380 8811 	msr	BASEPRI, r0
    b0d6:	f04f 0004 	mov.w	r0, #4
    b0da:	df02      	svc	2
}
    b0dc:	b002      	add	sp, #8
    b0de:	bd10      	pop	{r4, pc}
    b0e0:	20003db8 	.word	0x20003db8
    b0e4:	0001563e 	.word	0x0001563e
    b0e8:	20003a5c 	.word	0x20003a5c
    b0ec:	000167b9 	.word	0x000167b9
    b0f0:	00016808 	.word	0x00016808
    b0f4:	00017fa6 	.word	0x00017fa6
    b0f8:	000189c7 	.word	0x000189c7

0000b0fc <mayfly_radio_active>:
{
    b0fc:	b513      	push	{r0, r1, r4, lr}
    b0fe:	4a12      	ldr	r2, [pc, #72]	; (b148 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    b100:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    b102:	b140      	cbz	r0, b116 <mayfly_radio_active+0x1a>
		if (s_active++) {
    b104:	1c59      	adds	r1, r3, #1
    b106:	7011      	strb	r1, [r2, #0]
    b108:	b9db      	cbnz	r3, b142 <mayfly_radio_active+0x46>
		radio_active_callback(1);
    b10a:	2001      	movs	r0, #1
}
    b10c:	b002      	add	sp, #8
    b10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_active_callback(0);
    b112:	f006 ba11 	b.w	11538 <radio_active_callback>
		LL_ASSERT(s_active);
    b116:	b97b      	cbnz	r3, b138 <mayfly_radio_active+0x3c>
    b118:	4b0c      	ldr	r3, [pc, #48]	; (b14c <mayfly_radio_active+0x50>)
    b11a:	9301      	str	r3, [sp, #4]
    b11c:	9300      	str	r3, [sp, #0]
    b11e:	4b0c      	ldr	r3, [pc, #48]	; (b150 <mayfly_radio_active+0x54>)
    b120:	4a0c      	ldr	r2, [pc, #48]	; (b154 <mayfly_radio_active+0x58>)
    b122:	681c      	ldr	r4, [r3, #0]
    b124:	490c      	ldr	r1, [pc, #48]	; (b158 <mayfly_radio_active+0x5c>)
    b126:	4b0d      	ldr	r3, [pc, #52]	; (b15c <mayfly_radio_active+0x60>)
    b128:	480d      	ldr	r0, [pc, #52]	; (b160 <mayfly_radio_active+0x64>)
    b12a:	47a0      	blx	r4
    b12c:	4040      	eors	r0, r0
    b12e:	f380 8811 	msr	BASEPRI, r0
    b132:	f04f 0004 	mov.w	r0, #4
    b136:	df02      	svc	2
		if (--s_active) {
    b138:	3b01      	subs	r3, #1
    b13a:	b2db      	uxtb	r3, r3
    b13c:	7013      	strb	r3, [r2, #0]
    b13e:	2b00      	cmp	r3, #0
    b140:	d0e4      	beq.n	b10c <mayfly_radio_active+0x10>
}
    b142:	b002      	add	sp, #8
    b144:	bd10      	pop	{r4, pc}
    b146:	bf00      	nop
    b148:	20000a64 	.word	0x20000a64
    b14c:	0001563e 	.word	0x0001563e
    b150:	20003a5c 	.word	0x20003a5c
    b154:	000167b9 	.word	0x000167b9
    b158:	00016808 	.word	0x00016808
    b15c:	00017f76 	.word	0x00017f76
    b160:	0001891c 	.word	0x0001891c

0000b164 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    b164:	2000      	movs	r0, #0
    b166:	f7ff bfc9 	b.w	b0fc <mayfly_radio_active>
	...

0000b16c <mayfly_radio_stop>:
{
    b16c:	b513      	push	{r0, r1, r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    b16e:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    b170:	1f03      	subs	r3, r0, #4
    b172:	2b01      	cmp	r3, #1
    b174:	d90f      	bls.n	b196 <mayfly_radio_stop+0x2a>
    b176:	4b11      	ldr	r3, [pc, #68]	; (b1bc <mayfly_radio_stop+0x50>)
    b178:	9301      	str	r3, [sp, #4]
    b17a:	9300      	str	r3, [sp, #0]
    b17c:	4b10      	ldr	r3, [pc, #64]	; (b1c0 <mayfly_radio_stop+0x54>)
    b17e:	4a11      	ldr	r2, [pc, #68]	; (b1c4 <mayfly_radio_stop+0x58>)
    b180:	681c      	ldr	r4, [r3, #0]
    b182:	4911      	ldr	r1, [pc, #68]	; (b1c8 <mayfly_radio_stop+0x5c>)
    b184:	4b11      	ldr	r3, [pc, #68]	; (b1cc <mayfly_radio_stop+0x60>)
    b186:	4812      	ldr	r0, [pc, #72]	; (b1d0 <mayfly_radio_stop+0x64>)
    b188:	47a0      	blx	r4
    b18a:	4040      	eors	r0, r0
    b18c:	f380 8811 	msr	BASEPRI, r0
    b190:	f04f 0004 	mov.w	r0, #4
    b194:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    b196:	4a0f      	ldr	r2, [pc, #60]	; (b1d4 <mayfly_radio_stop+0x68>)
    b198:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    b19a:	b143      	cbz	r3, b1ae <mayfly_radio_stop+0x42>
	radio_used = ((_radio.state != STATE_NONE) &&
    b19c:	3b04      	subs	r3, #4
    b19e:	2b01      	cmp	r3, #1
    b1a0:	d905      	bls.n	b1ae <mayfly_radio_stop+0x42>
			_radio.state = state;
    b1a2:	7510      	strb	r0, [r2, #20]
}
    b1a4:	b002      	add	sp, #8
    b1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    b1aa:	f007 bbab 	b.w	12904 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    b1ae:	f007 fbdb 	bl	12968 <radio_is_idle>
    b1b2:	2800      	cmp	r0, #0
    b1b4:	d0f6      	beq.n	b1a4 <mayfly_radio_stop+0x38>
}
    b1b6:	b002      	add	sp, #8
    b1b8:	bd10      	pop	{r4, pc}
    b1ba:	bf00      	nop
    b1bc:	0001563e 	.word	0x0001563e
    b1c0:	20003a5c 	.word	0x20003a5c
    b1c4:	000167b9 	.word	0x000167b9
    b1c8:	00016808 	.word	0x00016808
    b1cc:	00018048 	.word	0x00018048
    b1d0:	00018946 	.word	0x00018946
    b1d4:	200008c0 	.word	0x200008c0

0000b1d8 <pdu_node_tx_release>:
{
    b1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    b1da:	4a18      	ldr	r2, [pc, #96]	; (b23c <pdu_node_tx_release+0x64>)
    b1dc:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    b1e0:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    b1e4:	3301      	adds	r3, #1
    b1e6:	b2db      	uxtb	r3, r3
		last = 0;
    b1e8:	429c      	cmp	r4, r3
    b1ea:	bf08      	it	eq
    b1ec:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    b1ee:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    b1f2:	429c      	cmp	r4, r3
    b1f4:	d10f      	bne.n	b216 <pdu_node_tx_release+0x3e>
    b1f6:	4b12      	ldr	r3, [pc, #72]	; (b240 <pdu_node_tx_release+0x68>)
    b1f8:	9301      	str	r3, [sp, #4]
    b1fa:	9300      	str	r3, [sp, #0]
    b1fc:	4b11      	ldr	r3, [pc, #68]	; (b244 <pdu_node_tx_release+0x6c>)
    b1fe:	4a12      	ldr	r2, [pc, #72]	; (b248 <pdu_node_tx_release+0x70>)
    b200:	681c      	ldr	r4, [r3, #0]
    b202:	4912      	ldr	r1, [pc, #72]	; (b24c <pdu_node_tx_release+0x74>)
    b204:	4b12      	ldr	r3, [pc, #72]	; (b250 <pdu_node_tx_release+0x78>)
    b206:	4813      	ldr	r0, [pc, #76]	; (b254 <pdu_node_tx_release+0x7c>)
    b208:	47a0      	blx	r4
    b20a:	4040      	eors	r0, r0
    b20c:	f380 8811 	msr	BASEPRI, r0
    b210:	f04f 0004 	mov.w	r0, #4
    b214:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    b216:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    b21a:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    b21e:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    b222:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    b226:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    b22a:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    b22c:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    b230:	b003      	add	sp, #12
    b232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    b236:	f006 b981 	b.w	1153c <radio_event_callback>
    b23a:	bf00      	nop
    b23c:	200008c0 	.word	0x200008c0
    b240:	0001563e 	.word	0x0001563e
    b244:	20003a5c 	.word	0x20003a5c
    b248:	000167b9 	.word	0x000167b9
    b24c:	00016808 	.word	0x00016808
    b250:	00018190 	.word	0x00018190
    b254:	00018a97 	.word	0x00018a97

0000b258 <packet_tx_enqueue>:
{
    b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    b25c:	4c24      	ldr	r4, [pc, #144]	; (b2f0 <packet_tx_enqueue+0x98>)
{
    b25e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    b260:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    b262:	b12e      	cbz	r6, b270 <packet_tx_enqueue+0x18>
    b264:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    b268:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    b26c:	429a      	cmp	r2, r3
    b26e:	d101      	bne.n	b274 <packet_tx_enqueue+0x1c>
    b270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    b274:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    b278:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b27c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    b280:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    b284:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b288:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    b28c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    b28e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b290:	f7fb ffc4 	bl	721c <mem_get>
    b294:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    b296:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    b29a:	8c1a      	ldrh	r2, [r3, #32]
    b29c:	4282      	cmp	r2, r0
    b29e:	d11f      	bne.n	b2e0 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    b2a0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b2a4:	b942      	cbnz	r2, b2b8 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    b2a6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    b2aa:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    b2ae:	b91a      	cbnz	r2, b2b8 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    b2b0:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    b2b4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    b2b8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    b2bc:	b102      	cbz	r2, b2c0 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    b2be:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    b2c0:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    b2c4:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    b2c8:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    b2cc:	3301      	adds	r3, #1
    b2ce:	b2db      	uxtb	r3, r3
			first = 0;
    b2d0:	429a      	cmp	r2, r3
    b2d2:	bf08      	it	eq
    b2d4:	2300      	moveq	r3, #0
    b2d6:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    b2d8:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    b2dc:	b2f6      	uxtb	r6, r6
    b2de:	e7c0      	b.n	b262 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b2e0:	792b      	ldrb	r3, [r5, #4]
    b2e2:	f367 0301 	bfi	r3, r7, #0, #2
    b2e6:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    b2e8:	4629      	mov	r1, r5
    b2ea:	f7ff ff75 	bl	b1d8 <pdu_node_tx_release>
    b2ee:	e7e9      	b.n	b2c4 <packet_tx_enqueue+0x6c>
    b2f0:	200008c0 	.word	0x200008c0

0000b2f4 <connection_release>:
{
    b2f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b2f6:	2201      	movs	r2, #1
{
    b2f8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b2fa:	4611      	mov	r1, r2
    b2fc:	2000      	movs	r0, #0
    b2fe:	f7fb fffb 	bl	72f8 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b302:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    b306:	2100      	movs	r1, #0
    b308:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b30c:	3207      	adds	r2, #7
	ticker_status =
    b30e:	9300      	str	r3, [sp, #0]
    b310:	4608      	mov	r0, r1
    b312:	4b3f      	ldr	r3, [pc, #252]	; (b410 <connection_release+0x11c>)
    b314:	b2d2      	uxtb	r2, r2
    b316:	f7fc fe75 	bl	8004 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b31a:	f030 0102 	bics.w	r1, r0, #2
    b31e:	d00f      	beq.n	b340 <connection_release+0x4c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b320:	4b3c      	ldr	r3, [pc, #240]	; (b414 <connection_release+0x120>)
    b322:	9301      	str	r3, [sp, #4]
    b324:	9300      	str	r3, [sp, #0]
    b326:	4b3c      	ldr	r3, [pc, #240]	; (b418 <connection_release+0x124>)
    b328:	4a3c      	ldr	r2, [pc, #240]	; (b41c <connection_release+0x128>)
    b32a:	681c      	ldr	r4, [r3, #0]
    b32c:	493c      	ldr	r1, [pc, #240]	; (b420 <connection_release+0x12c>)
    b32e:	4b3d      	ldr	r3, [pc, #244]	; (b424 <connection_release+0x130>)
    b330:	483d      	ldr	r0, [pc, #244]	; (b428 <connection_release+0x134>)
    b332:	47a0      	blx	r4
    b334:	4040      	eors	r0, r0
    b336:	f380 8811 	msr	BASEPRI, r0
    b33a:	f04f 0004 	mov.w	r0, #4
    b33e:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    b340:	4b3a      	ldr	r3, [pc, #232]	; (b42c <connection_release+0x138>)
    b342:	7d1a      	ldrb	r2, [r3, #20]
    b344:	2a05      	cmp	r2, #5
    b346:	461d      	mov	r5, r3
    b348:	d11b      	bne.n	b382 <connection_release+0x8e>
					  conn->handle))) {
    b34a:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    b34c:	7c18      	ldrb	r0, [r3, #16]
    b34e:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    b350:	4290      	cmp	r0, r2
    b352:	d116      	bne.n	b382 <connection_release+0x8e>
		_radio.ticker_id_prepare = 0;
    b354:	7419      	strb	r1, [r3, #16]
		ticker_status =
    b356:	f242 23fb 	movw	r3, #8955	; 0x22fb
    b35a:	9300      	str	r3, [sp, #0]
    b35c:	2201      	movs	r2, #1
    b35e:	4b2c      	ldr	r3, [pc, #176]	; (b410 <connection_release+0x11c>)
    b360:	4608      	mov	r0, r1
    b362:	f7fc fe4f 	bl	8004 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b366:	f030 0202 	bics.w	r2, r0, #2
    b36a:	d1d9      	bne.n	b320 <connection_release+0x2c>
		ticker_status =
    b36c:	f242 3302 	movw	r3, #8962	; 0x2302
    b370:	9300      	str	r3, [sp, #0]
    b372:	4611      	mov	r1, r2
    b374:	4b26      	ldr	r3, [pc, #152]	; (b410 <connection_release+0x11c>)
    b376:	4610      	mov	r0, r2
    b378:	f7fc fe44 	bl	8004 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b37c:	f030 0302 	bics.w	r3, r0, #2
    b380:	d1ce      	bne.n	b320 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    b382:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b386:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b38a:	4299      	cmp	r1, r3
    b38c:	d003      	beq.n	b396 <connection_release+0xa2>
    b38e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b392:	4299      	cmp	r1, r3
    b394:	d101      	bne.n	b39a <connection_release+0xa6>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b396:	4e26      	ldr	r6, [pc, #152]	; (b430 <connection_release+0x13c>)
    b398:	e012      	b.n	b3c0 <connection_release+0xcc>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b39a:	790b      	ldrb	r3, [r1, #4]
    b39c:	f36f 0301 	bfc	r3, #0, #2
    b3a0:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b3a2:	680b      	ldr	r3, [r1, #0]
    b3a4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    b3a8:	8c20      	ldrh	r0, [r4, #32]
    b3aa:	f7ff ff15 	bl	b1d8 <pdu_node_tx_release>
    b3ae:	e7e8      	b.n	b382 <connection_release+0x8e>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b3b0:	6803      	ldr	r3, [r0, #0]
    b3b2:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    b3b6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b3ba:	4631      	mov	r1, r6
    b3bc:	f7fb ff13 	bl	71e6 <mem_release>
	while ((conn->pkt_tx_head) &&
    b3c0:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    b3c4:	b118      	cbz	r0, b3ce <connection_release+0xda>
    b3c6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b3ca:	4298      	cmp	r0, r3
    b3cc:	d1f0      	bne.n	b3b0 <connection_release+0xbc>
	conn->pkt_tx_ctrl = NULL;
    b3ce:	2300      	movs	r3, #0
    b3d0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    b3d4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    b3d8:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b3dc:	b951      	cbnz	r1, b3f4 <connection_release+0x100>
	conn->handle = 0xffff;
    b3de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b3e2:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    b3e4:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    b3e8:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    b3ea:	bf08      	it	eq
    b3ec:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    b3f0:	b002      	add	sp, #8
    b3f2:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b3f4:	790b      	ldrb	r3, [r1, #4]
    b3f6:	f36f 0301 	bfc	r3, #0, #2
    b3fa:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b3fc:	680b      	ldr	r3, [r1, #0]
    b3fe:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    b402:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    b406:	8c20      	ldrh	r0, [r4, #32]
    b408:	f7ff fee6 	bl	b1d8 <pdu_node_tx_release>
    b40c:	e7e4      	b.n	b3d8 <connection_release+0xe4>
    b40e:	bf00      	nop
    b410:	0000ada5 	.word	0x0000ada5
    b414:	0001563e 	.word	0x0001563e
    b418:	20003a5c 	.word	0x20003a5c
    b41c:	000167b9 	.word	0x000167b9
    b420:	00016808 	.word	0x00016808
    b424:	000181a4 	.word	0x000181a4
    b428:	0001828d 	.word	0x0001828d
    b42c:	200008c0 	.word	0x200008c0
    b430:	20000a1c 	.word	0x20000a1c

0000b434 <chan_set>:
	switch (chan) {
    b434:	2826      	cmp	r0, #38	; 0x26
{
    b436:	b513      	push	{r0, r1, r4, lr}
    b438:	4604      	mov	r4, r0
	switch (chan) {
    b43a:	d00c      	beq.n	b456 <chan_set+0x22>
    b43c:	2827      	cmp	r0, #39	; 0x27
    b43e:	d00c      	beq.n	b45a <chan_set+0x26>
    b440:	2825      	cmp	r0, #37	; 0x25
    b442:	d10c      	bne.n	b45e <chan_set+0x2a>
		radio_freq_chan_set(2);
    b444:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    b446:	f007 f9d9 	bl	127fc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    b44a:	4620      	mov	r0, r4
}
    b44c:	b002      	add	sp, #8
    b44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    b452:	f007 b9d9 	b.w	12808 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    b456:	201a      	movs	r0, #26
    b458:	e7f5      	b.n	b446 <chan_set+0x12>
		radio_freq_chan_set(80);
    b45a:	2050      	movs	r0, #80	; 0x50
    b45c:	e7f3      	b.n	b446 <chan_set+0x12>
		if (chan < 11) {
    b45e:	280a      	cmp	r0, #10
    b460:	d802      	bhi.n	b468 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    b462:	3002      	adds	r0, #2
    b464:	0040      	lsls	r0, r0, #1
    b466:	e7ee      	b.n	b446 <chan_set+0x12>
		} else if (chan < 40) {
    b468:	2827      	cmp	r0, #39	; 0x27
    b46a:	d801      	bhi.n	b470 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    b46c:	3003      	adds	r0, #3
    b46e:	e7f9      	b.n	b464 <chan_set+0x30>
			LL_ASSERT(0);
    b470:	4b07      	ldr	r3, [pc, #28]	; (b490 <chan_set+0x5c>)
    b472:	9301      	str	r3, [sp, #4]
    b474:	9300      	str	r3, [sp, #0]
    b476:	4b07      	ldr	r3, [pc, #28]	; (b494 <chan_set+0x60>)
    b478:	4a07      	ldr	r2, [pc, #28]	; (b498 <chan_set+0x64>)
    b47a:	681c      	ldr	r4, [r3, #0]
    b47c:	4907      	ldr	r1, [pc, #28]	; (b49c <chan_set+0x68>)
    b47e:	4b08      	ldr	r3, [pc, #32]	; (b4a0 <chan_set+0x6c>)
    b480:	4808      	ldr	r0, [pc, #32]	; (b4a4 <chan_set+0x70>)
    b482:	47a0      	blx	r4
    b484:	4040      	eors	r0, r0
    b486:	f380 8811 	msr	BASEPRI, r0
    b48a:	f04f 0004 	mov.w	r0, #4
    b48e:	df02      	svc	2
    b490:	0001563e 	.word	0x0001563e
    b494:	20003a5c 	.word	0x20003a5c
    b498:	000167b9 	.word	0x000167b9
    b49c:	00016808 	.word	0x00016808
    b4a0:	0001807a 	.word	0x0001807a
    b4a4:	00016758 	.word	0x00016758

0000b4a8 <adv_setup>:
{
    b4a8:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    b4aa:	4c31      	ldr	r4, [pc, #196]	; (b570 <adv_setup+0xc8>)
    b4ac:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    b4b0:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    b4b4:	429a      	cmp	r2, r3
    b4b6:	d051      	beq.n	b55c <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    b4b8:	3301      	adds	r3, #1
    b4ba:	b2db      	uxtb	r3, r3
			first = 0;
    b4bc:	2b02      	cmp	r3, #2
    b4be:	bf08      	it	eq
    b4c0:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    b4c2:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    b4c6:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    b4c8:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b4cc:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    b4d0:	4299      	cmp	r1, r3
    b4d2:	d007      	beq.n	b4e4 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    b4d4:	3301      	adds	r3, #1
    b4d6:	b2db      	uxtb	r3, r3
			first = 0;
    b4d8:	2b02      	cmp	r3, #2
    b4da:	bf08      	it	eq
    b4dc:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    b4de:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    b4e2:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    b4e4:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    b4e8:	2327      	movs	r3, #39	; 0x27
    b4ea:	212b      	movs	r1, #43	; 0x2b
    b4ec:	fb13 1505 	smlabb	r5, r3, r5, r1
    b4f0:	1966      	adds	r6, r4, r5
	if (upd) {
    b4f2:	b142      	cbz	r2, b506 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    b4f4:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    b4f8:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    b4fc:	2206      	movs	r2, #6
    b4fe:	1cb1      	adds	r1, r6, #2
    b500:	307d      	adds	r0, #125	; 0x7d
    b502:	f7f6 fc8f 	bl	1e24 <memcpy>
	radio_pkt_tx_set(pdu);
    b506:	4630      	mov	r0, r6
    b508:	f007 f9dc 	bl	128c4 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    b50c:	5d63      	ldrb	r3, [r4, r5]
    b50e:	f003 030f 	and.w	r3, r3, #15
    b512:	2b02      	cmp	r3, #2
    b514:	d024      	beq.n	b560 <adv_setup+0xb8>
    b516:	2b07      	cmp	r3, #7
    b518:	d022      	beq.n	b560 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    b51a:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    b51c:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    b51e:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    b520:	f007 fae6 	bl	12af0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    b524:	2000      	movs	r0, #0
    b526:	f007 fa47 	bl	129b8 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    b52a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b52e:	f3c3 0202 	ubfx	r2, r3, #0, #3
    b532:	b2d3      	uxtb	r3, r2
    b534:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    b536:	2000      	movs	r0, #0
    b538:	07ce      	lsls	r6, r1, #31
    b53a:	f100 0501 	add.w	r5, r0, #1
    b53e:	d514      	bpl.n	b56a <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    b540:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    b542:	4013      	ands	r3, r2
    b544:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b548:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    b54a:	f363 0202 	bfi	r2, r3, #0, #3
    b54e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b552:	3025      	adds	r0, #37	; 0x25
}
    b554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    b558:	f7ff bf6c 	b.w	b434 <chan_set>
	u8_t upd = 0;
    b55c:	2200      	movs	r2, #0
    b55e:	e7b3      	b.n	b4c8 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    b560:	2303      	movs	r3, #3
    b562:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    b564:	f007 fa3e 	bl	129e4 <radio_switch_complete_and_disable>
    b568:	e7df      	b.n	b52a <adv_setup+0x82>
		bitmap >>= 1;
    b56a:	0849      	lsrs	r1, r1, #1
    b56c:	4628      	mov	r0, r5
    b56e:	e7e3      	b.n	b538 <adv_setup+0x90>
    b570:	200008c0 	.word	0x200008c0
    b574:	00000000 	.word	0x00000000

0000b578 <sched_after_mstr_free_offset_get>:
{
    b578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b57a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    b57c:	aa04      	add	r2, sp, #16
{
    b57e:	461c      	mov	r4, r3
    b580:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    b582:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    b586:	3127      	adds	r1, #39	; 0x27
    b588:	2001      	movs	r0, #1
    b58a:	f7ff fa29 	bl	a9e0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    b58e:	6823      	ldr	r3, [r4, #0]
    b590:	2b00      	cmp	r3, #0
    b592:	d02d      	beq.n	b5f0 <sched_after_mstr_free_offset_get+0x78>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    b594:	9803      	ldr	r0, [sp, #12]
    b596:	1b83      	subs	r3, r0, r6
    b598:	021b      	lsls	r3, r3, #8
    b59a:	d50f      	bpl.n	b5bc <sched_after_mstr_free_offset_get+0x44>
    b59c:	4b1a      	ldr	r3, [pc, #104]	; (b608 <sched_after_mstr_free_offset_get+0x90>)
    b59e:	9301      	str	r3, [sp, #4]
    b5a0:	9300      	str	r3, [sp, #0]
    b5a2:	4b1a      	ldr	r3, [pc, #104]	; (b60c <sched_after_mstr_free_offset_get+0x94>)
    b5a4:	4a1a      	ldr	r2, [pc, #104]	; (b610 <sched_after_mstr_free_offset_get+0x98>)
    b5a6:	681c      	ldr	r4, [r3, #0]
    b5a8:	491a      	ldr	r1, [pc, #104]	; (b614 <sched_after_mstr_free_offset_get+0x9c>)
    b5aa:	4b1b      	ldr	r3, [pc, #108]	; (b618 <sched_after_mstr_free_offset_get+0xa0>)
    b5ac:	481b      	ldr	r0, [pc, #108]	; (b61c <sched_after_mstr_free_offset_get+0xa4>)
    b5ae:	47a0      	blx	r4
    b5b0:	4040      	eors	r0, r0
    b5b2:	f380 8811 	msr	BASEPRI, r0
    b5b6:	f04f 0004 	mov.w	r0, #4
    b5ba:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b5bc:	4631      	mov	r1, r6
    b5be:	f7fc fdf3 	bl	81a8 <ticker_ticks_diff_get>
    b5c2:	4602      	mov	r2, r0
    b5c4:	4816      	ldr	r0, [pc, #88]	; (b620 <sched_after_mstr_free_offset_get+0xa8>)
    b5c6:	2307      	movs	r3, #7
    b5c8:	fba2 0100 	umull	r0, r1, r2, r0
    b5cc:	fb03 1102 	mla	r1, r3, r2, r1
    b5d0:	a30b      	add	r3, pc, #44	; (adr r3, b600 <sched_after_mstr_free_offset_get+0x88>)
    b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b5d6:	f7f4 fe1d 	bl	214 <__aeabi_uldivmod>
    b5da:	6823      	ldr	r3, [r4, #0]
    b5dc:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    b5de:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b5e0:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    b5e2:	db05      	blt.n	b5f0 <sched_after_mstr_free_offset_get+0x78>
		u32_t conn_interval_us = conn_interval * 1250;
    b5e4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    b5e8:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    b5ea:	6823      	ldr	r3, [r4, #0]
    b5ec:	4298      	cmp	r0, r3
    b5ee:	d301      	bcc.n	b5f4 <sched_after_mstr_free_offset_get+0x7c>
}
    b5f0:	b004      	add	sp, #16
    b5f2:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    b5f4:	1a1b      	subs	r3, r3, r0
    b5f6:	6023      	str	r3, [r4, #0]
    b5f8:	e7f7      	b.n	b5ea <sched_after_mstr_free_offset_get+0x72>
    b5fa:	bf00      	nop
    b5fc:	f3af 8000 	nop.w
    b600:	3b9aca00 	.word	0x3b9aca00
    b604:	00000000 	.word	0x00000000
    b608:	0001563e 	.word	0x0001563e
    b60c:	20003a5c 	.word	0x20003a5c
    b610:	000167b9 	.word	0x000167b9
    b614:	00016808 	.word	0x00016808
    b618:	0001800c 	.word	0x0001800c
    b61c:	00018cf3 	.word	0x00018cf3
    b620:	1afd498d 	.word	0x1afd498d

0000b624 <mayfly_sched_win_offset_use>:
{
    b624:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b626:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    b62a:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b62c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    b630:	68c1      	ldr	r1, [r0, #12]
    b632:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    b634:	f7ff ffa0 	bl	b578 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b638:	a902      	add	r1, sp, #8
    b63a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b63e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b642:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b646:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b64a:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b64c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b650:	f7f6 fbe8 	bl	1e24 <memcpy>
}
    b654:	b002      	add	sp, #8
    b656:	bd10      	pop	{r4, pc}

0000b658 <mayfly_sched_after_mstr_free_offset_get>:
{
    b658:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b65a:	4c05      	ldr	r4, [pc, #20]	; (b670 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    b65c:	4602      	mov	r2, r0
    b65e:	f504 7382 	add.w	r3, r4, #260	; 0x104
    b662:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    b666:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    b66a:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b66c:	f7ff bf84 	b.w	b578 <sched_after_mstr_free_offset_get>
    b670:	200008c0 	.word	0x200008c0

0000b674 <terminate_ind_rx_enqueue>:
{
    b674:	b513      	push	{r0, r1, r4, lr}
    b676:	4603      	mov	r3, r0
    b678:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    b67a:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    b67e:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    b682:	b978      	cbnz	r0, b6a4 <terminate_ind_rx_enqueue+0x30>
    b684:	4b18      	ldr	r3, [pc, #96]	; (b6e8 <terminate_ind_rx_enqueue+0x74>)
    b686:	9301      	str	r3, [sp, #4]
    b688:	9300      	str	r3, [sp, #0]
    b68a:	4b18      	ldr	r3, [pc, #96]	; (b6ec <terminate_ind_rx_enqueue+0x78>)
    b68c:	4a18      	ldr	r2, [pc, #96]	; (b6f0 <terminate_ind_rx_enqueue+0x7c>)
    b68e:	681c      	ldr	r4, [r3, #0]
    b690:	4918      	ldr	r1, [pc, #96]	; (b6f4 <terminate_ind_rx_enqueue+0x80>)
    b692:	4b19      	ldr	r3, [pc, #100]	; (b6f8 <terminate_ind_rx_enqueue+0x84>)
    b694:	4819      	ldr	r0, [pc, #100]	; (b6fc <terminate_ind_rx_enqueue+0x88>)
	LL_ASSERT(link);
    b696:	47a0      	blx	r4
    b698:	4040      	eors	r0, r0
    b69a:	f380 8811 	msr	BASEPRI, r0
    b69e:	f04f 0004 	mov.w	r0, #4
    b6a2:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    b6a4:	8c1c      	ldrh	r4, [r3, #32]
    b6a6:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    b6aa:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b6ae:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b6b0:	4a13      	ldr	r2, [pc, #76]	; (b700 <terminate_ind_rx_enqueue+0x8c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b6b2:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b6b6:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    b6ba:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b6be:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b6c2:	f7fb fdd0 	bl	7266 <memq_enqueue>
	LL_ASSERT(link);
    b6c6:	b948      	cbnz	r0, b6dc <terminate_ind_rx_enqueue+0x68>
    b6c8:	4b07      	ldr	r3, [pc, #28]	; (b6e8 <terminate_ind_rx_enqueue+0x74>)
    b6ca:	9301      	str	r3, [sp, #4]
    b6cc:	9300      	str	r3, [sp, #0]
    b6ce:	4b07      	ldr	r3, [pc, #28]	; (b6ec <terminate_ind_rx_enqueue+0x78>)
    b6d0:	4a07      	ldr	r2, [pc, #28]	; (b6f0 <terminate_ind_rx_enqueue+0x7c>)
    b6d2:	681c      	ldr	r4, [r3, #0]
    b6d4:	4907      	ldr	r1, [pc, #28]	; (b6f4 <terminate_ind_rx_enqueue+0x80>)
    b6d6:	4b08      	ldr	r3, [pc, #32]	; (b6f8 <terminate_ind_rx_enqueue+0x84>)
    b6d8:	480a      	ldr	r0, [pc, #40]	; (b704 <terminate_ind_rx_enqueue+0x90>)
    b6da:	e7dc      	b.n	b696 <terminate_ind_rx_enqueue+0x22>
}
    b6dc:	b002      	add	sp, #8
    b6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b6e2:	f005 bf2b 	b.w	1153c <radio_event_callback>
    b6e6:	bf00      	nop
    b6e8:	0001563e 	.word	0x0001563e
    b6ec:	20003a5c 	.word	0x20003a5c
    b6f0:	000167b9 	.word	0x000167b9
    b6f4:	00016808 	.word	0x00016808
    b6f8:	000181b7 	.word	0x000181b7
    b6fc:	00018d79 	.word	0x00018d79
    b700:	200008c0 	.word	0x200008c0
    b704:	00018267 	.word	0x00018267

0000b708 <prepare_normal_set>:
{
    b708:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b70a:	6804      	ldr	r4, [r0, #0]
    b70c:	2c00      	cmp	r4, #0
{
    b70e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b710:	da27      	bge.n	b762 <prepare_normal_set+0x5a>
		u32_t ticks_prepare_to_start =
    b712:	6843      	ldr	r3, [r0, #4]
    b714:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b716:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b718:	429d      	cmp	r5, r3
    b71a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b71e:	bf34      	ite	cc
    b720:	1ae4      	subcc	r4, r4, r3
    b722:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b724:	4b10      	ldr	r3, [pc, #64]	; (b768 <prepare_normal_set+0x60>)
    b726:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b728:	b2a4      	uxth	r4, r4
		ticker_status =
    b72a:	2300      	movs	r3, #0
    b72c:	9304      	str	r3, [sp, #16]
    b72e:	9303      	str	r3, [sp, #12]
    b730:	9302      	str	r3, [sp, #8]
    b732:	4618      	mov	r0, r3
    b734:	9401      	str	r4, [sp, #4]
    b736:	9400      	str	r4, [sp, #0]
    b738:	f7fc fc16 	bl	7f68 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b73c:	f030 0302 	bics.w	r3, r0, #2
    b740:	d00f      	beq.n	b762 <prepare_normal_set+0x5a>
    b742:	4b0a      	ldr	r3, [pc, #40]	; (b76c <prepare_normal_set+0x64>)
    b744:	9301      	str	r3, [sp, #4]
    b746:	9300      	str	r3, [sp, #0]
    b748:	4b09      	ldr	r3, [pc, #36]	; (b770 <prepare_normal_set+0x68>)
    b74a:	4a0a      	ldr	r2, [pc, #40]	; (b774 <prepare_normal_set+0x6c>)
    b74c:	681c      	ldr	r4, [r3, #0]
    b74e:	490a      	ldr	r1, [pc, #40]	; (b778 <prepare_normal_set+0x70>)
    b750:	4b0a      	ldr	r3, [pc, #40]	; (b77c <prepare_normal_set+0x74>)
    b752:	480b      	ldr	r0, [pc, #44]	; (b780 <prepare_normal_set+0x78>)
    b754:	47a0      	blx	r4
    b756:	4040      	eors	r0, r0
    b758:	f380 8811 	msr	BASEPRI, r0
    b75c:	f04f 0004 	mov.w	r0, #4
    b760:	df02      	svc	2
}
    b762:	b009      	add	sp, #36	; 0x24
    b764:	bd30      	pop	{r4, r5, pc}
    b766:	bf00      	nop
    b768:	00009dd9 	.word	0x00009dd9
    b76c:	0001563e 	.word	0x0001563e
    b770:	20003a5c 	.word	0x20003a5c
    b774:	000167b9 	.word	0x000167b9
    b778:	00016808 	.word	0x00016808
    b77c:	00017fc4 	.word	0x00017fc4
    b780:	0001828d 	.word	0x0001828d
    b784:	00000000 	.word	0x00000000

0000b788 <mayfly_xtal_stop_calc>:
{
    b788:	b570      	push	{r4, r5, r6, lr}
    b78a:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b78c:	2302      	movs	r3, #2
    b78e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b790:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b792:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b794:	4e82      	ldr	r6, [pc, #520]	; (b9a0 <mayfly_xtal_stop_calc+0x218>)
				    _radio.connection_count));
    b796:	4d83      	ldr	r5, [pc, #524]	; (b9a4 <mayfly_xtal_stop_calc+0x21c>)
	struct connection *conn_curr = NULL;
    b798:	930a      	str	r3, [sp, #40]	; 0x28
{
    b79a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b79c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b79e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b7a2:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b7a4:	ab09      	add	r3, sp, #36	; 0x24
    b7a6:	9302      	str	r3, [sp, #8]
    b7a8:	ab0c      	add	r3, sp, #48	; 0x30
    b7aa:	9300      	str	r3, [sp, #0]
    b7ac:	9601      	str	r6, [sp, #4]
    b7ae:	ab0d      	add	r3, sp, #52	; 0x34
    b7b0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b7b4:	2101      	movs	r1, #1
    b7b6:	2000      	movs	r0, #0
    b7b8:	f7fc fc60 	bl	807c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b7bc:	2802      	cmp	r0, #2
    b7be:	d015      	beq.n	b7ec <mayfly_xtal_stop_calc+0x64>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7c2:	b1bb      	cbz	r3, b7f4 <mayfly_xtal_stop_calc+0x6c>
    b7c4:	4b78      	ldr	r3, [pc, #480]	; (b9a8 <mayfly_xtal_stop_calc+0x220>)
    b7c6:	9301      	str	r3, [sp, #4]
    b7c8:	9300      	str	r3, [sp, #0]
    b7ca:	4b78      	ldr	r3, [pc, #480]	; (b9ac <mayfly_xtal_stop_calc+0x224>)
    b7cc:	4a78      	ldr	r2, [pc, #480]	; (b9b0 <mayfly_xtal_stop_calc+0x228>)
    b7ce:	681c      	ldr	r4, [r3, #0]
    b7d0:	4978      	ldr	r1, [pc, #480]	; (b9b4 <mayfly_xtal_stop_calc+0x22c>)
    b7d2:	4b79      	ldr	r3, [pc, #484]	; (b9b8 <mayfly_xtal_stop_calc+0x230>)
    b7d4:	4879      	ldr	r0, [pc, #484]	; (b9bc <mayfly_xtal_stop_calc+0x234>)
	LL_ASSERT(hdr_curr);
    b7d6:	47a0      	blx	r4
    b7d8:	4040      	eors	r0, r0
    b7da:	f380 8811 	msr	BASEPRI, r0
    b7de:	f04f 0004 	mov.w	r0, #4
    b7e2:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b7e4:	2101      	movs	r1, #1
    b7e6:	2000      	movs	r0, #0
    b7e8:	f7fc fcc6 	bl	8178 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7ee:	2b02      	cmp	r3, #2
    b7f0:	d0f8      	beq.n	b7e4 <mayfly_xtal_stop_calc+0x5c>
    b7f2:	e7e5      	b.n	b7c0 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b7f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b7f8:	2bff      	cmp	r3, #255	; 0xff
    b7fa:	d004      	beq.n	b806 <mayfly_xtal_stop_calc+0x7e>
    b7fc:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b800:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b802:	4293      	cmp	r3, r2
    b804:	dace      	bge.n	b7a4 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b806:	1f5a      	subs	r2, r3, #5
    b808:	b2d2      	uxtb	r2, r2
    b80a:	2af9      	cmp	r2, #249	; 0xf9
    b80c:	d805      	bhi.n	b81a <mayfly_xtal_stop_calc+0x92>
				_radio.connection_count))) {
    b80e:	4a65      	ldr	r2, [pc, #404]	; (b9a4 <mayfly_xtal_stop_calc+0x21c>)
    b810:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b814:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b816:	4293      	cmp	r3, r2
    b818:	db05      	blt.n	b826 <mayfly_xtal_stop_calc+0x9e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b81a:	2100      	movs	r1, #0
    b81c:	2001      	movs	r0, #1
    b81e:	f7fe fe41 	bl	a4a4 <mayfly_xtal_retain>
}
    b822:	b00e      	add	sp, #56	; 0x38
    b824:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b826:	a90a      	add	r1, sp, #40	; 0x28
    b828:	b2e0      	uxtb	r0, r4
    b82a:	f7ff fbcb 	bl	afc4 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b82e:	b948      	cbnz	r0, b844 <mayfly_xtal_stop_calc+0xbc>
    b830:	4b5d      	ldr	r3, [pc, #372]	; (b9a8 <mayfly_xtal_stop_calc+0x220>)
    b832:	9301      	str	r3, [sp, #4]
    b834:	9300      	str	r3, [sp, #0]
    b836:	4b5d      	ldr	r3, [pc, #372]	; (b9ac <mayfly_xtal_stop_calc+0x224>)
    b838:	4a5d      	ldr	r2, [pc, #372]	; (b9b0 <mayfly_xtal_stop_calc+0x228>)
    b83a:	681c      	ldr	r4, [r3, #0]
    b83c:	495d      	ldr	r1, [pc, #372]	; (b9b4 <mayfly_xtal_stop_calc+0x22c>)
    b83e:	4b5e      	ldr	r3, [pc, #376]	; (b9b8 <mayfly_xtal_stop_calc+0x230>)
    b840:	485f      	ldr	r0, [pc, #380]	; (b9c0 <mayfly_xtal_stop_calc+0x238>)
    b842:	e7c8      	b.n	b7d6 <mayfly_xtal_stop_calc+0x4e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b844:	6803      	ldr	r3, [r0, #0]
    b846:	6844      	ldr	r4, [r0, #4]
    b848:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b84a:	bfb8      	it	lt
    b84c:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b84e:	429c      	cmp	r4, r3
    b850:	bf38      	it	cc
    b852:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b854:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b856:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b85a:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b85c:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b85e:	f7ff fbb1 	bl	afc4 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b862:	4605      	mov	r5, r0
    b864:	b948      	cbnz	r0, b87a <mayfly_xtal_stop_calc+0xf2>
    b866:	4b50      	ldr	r3, [pc, #320]	; (b9a8 <mayfly_xtal_stop_calc+0x220>)
    b868:	9301      	str	r3, [sp, #4]
    b86a:	9300      	str	r3, [sp, #0]
    b86c:	4b4f      	ldr	r3, [pc, #316]	; (b9ac <mayfly_xtal_stop_calc+0x224>)
    b86e:	4a50      	ldr	r2, [pc, #320]	; (b9b0 <mayfly_xtal_stop_calc+0x228>)
    b870:	681c      	ldr	r4, [r3, #0]
    b872:	4950      	ldr	r1, [pc, #320]	; (b9b4 <mayfly_xtal_stop_calc+0x22c>)
    b874:	4b50      	ldr	r3, [pc, #320]	; (b9b8 <mayfly_xtal_stop_calc+0x230>)
    b876:	4853      	ldr	r0, [pc, #332]	; (b9c4 <mayfly_xtal_stop_calc+0x23c>)
    b878:	e7ad      	b.n	b7d6 <mayfly_xtal_stop_calc+0x4e>
	ticks_prepare_to_start_next =
    b87a:	6886      	ldr	r6, [r0, #8]
    b87c:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b87e:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b880:	429e      	cmp	r6, r3
    b882:	bf38      	it	cc
    b884:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b886:	2a00      	cmp	r2, #0
    b888:	da05      	bge.n	b896 <mayfly_xtal_stop_calc+0x10e>
		ticks_to_expire -=
    b88a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b88c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b890:	4433      	add	r3, r6
    b892:	1a9b      	subs	r3, r3, r2
    b894:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b898:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b89c:	4293      	cmp	r3, r2
    b89e:	d20a      	bcs.n	b8b6 <mayfly_xtal_stop_calc+0x12e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b8a0:	2100      	movs	r1, #0
    b8a2:	2001      	movs	r0, #1
    b8a4:	f7fe fdfe 	bl	a4a4 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b8a8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b8ac:	2101      	movs	r1, #1
    b8ae:	4628      	mov	r0, r5
    b8b0:	f7ff ff2a 	bl	b708 <prepare_normal_set>
    b8b4:	e7b5      	b.n	b822 <mayfly_xtal_stop_calc+0x9a>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    b8b6:	2101      	movs	r1, #1
    b8b8:	4608      	mov	r0, r1
    b8ba:	f7fe fdf3 	bl	a4a4 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b8be:	682b      	ldr	r3, [r5, #0]
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	db1e      	blt.n	b902 <mayfly_xtal_stop_calc+0x17a>
    b8c4:	429e      	cmp	r6, r3
    b8c6:	d21c      	bcs.n	b902 <mayfly_xtal_stop_calc+0x17a>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b8c8:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b8ca:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b8cc:	b29b      	uxth	r3, r3
			ticker_status =
    b8ce:	493e      	ldr	r1, [pc, #248]	; (b9c8 <mayfly_xtal_stop_calc+0x240>)
    b8d0:	9105      	str	r1, [sp, #20]
    b8d2:	9302      	str	r3, [sp, #8]
    b8d4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b8d8:	9506      	str	r5, [sp, #24]
    b8da:	9004      	str	r0, [sp, #16]
    b8dc:	9003      	str	r0, [sp, #12]
    b8de:	9001      	str	r0, [sp, #4]
    b8e0:	9000      	str	r0, [sp, #0]
    b8e2:	2101      	movs	r1, #1
    b8e4:	f7fc fb40 	bl	7f68 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b8e8:	f030 0302 	bics.w	r3, r0, #2
    b8ec:	d009      	beq.n	b902 <mayfly_xtal_stop_calc+0x17a>
    b8ee:	4b2e      	ldr	r3, [pc, #184]	; (b9a8 <mayfly_xtal_stop_calc+0x220>)
    b8f0:	9301      	str	r3, [sp, #4]
    b8f2:	9300      	str	r3, [sp, #0]
    b8f4:	4b2d      	ldr	r3, [pc, #180]	; (b9ac <mayfly_xtal_stop_calc+0x224>)
    b8f6:	4a2e      	ldr	r2, [pc, #184]	; (b9b0 <mayfly_xtal_stop_calc+0x228>)
    b8f8:	681c      	ldr	r4, [r3, #0]
    b8fa:	492e      	ldr	r1, [pc, #184]	; (b9b4 <mayfly_xtal_stop_calc+0x22c>)
    b8fc:	4b2e      	ldr	r3, [pc, #184]	; (b9b8 <mayfly_xtal_stop_calc+0x230>)
    b8fe:	4833      	ldr	r0, [pc, #204]	; (b9cc <mayfly_xtal_stop_calc+0x244>)
    b900:	e769      	b.n	b7d6 <mayfly_xtal_stop_calc+0x4e>
		if (!conn_curr || !conn_next) {
    b902:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b904:	2e00      	cmp	r6, #0
    b906:	d08c      	beq.n	b822 <mayfly_xtal_stop_calc+0x9a>
    b908:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b90a:	2d00      	cmp	r5, #0
    b90c:	d089      	beq.n	b822 <mayfly_xtal_stop_calc+0x9a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b90e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b910:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b912:	429a      	cmp	r2, r3
    b914:	d185      	bne.n	b822 <mayfly_xtal_stop_calc+0x9a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b916:	482e      	ldr	r0, [pc, #184]	; (b9d0 <mayfly_xtal_stop_calc+0x248>)
    b918:	b292      	uxth	r2, r2
    b91a:	fba2 0100 	umull	r0, r1, r2, r0
    b91e:	f240 1323 	movw	r3, #291	; 0x123
    b922:	fb03 1102 	mla	r1, r3, r2, r1
    b926:	a31c      	add	r3, pc, #112	; (adr r3, b998 <mayfly_xtal_stop_calc+0x210>)
    b928:	e9d3 2300 	ldrd	r2, r3, [r3]
    b92c:	f7f4 fc72 	bl	214 <__aeabi_uldivmod>
    b930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b932:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b936:	2200      	movs	r2, #0
    b938:	4298      	cmp	r0, r3
    b93a:	d318      	bcc.n	b96e <mayfly_xtal_stop_calc+0x1e6>
    b93c:	b102      	cbz	r2, b940 <mayfly_xtal_stop_calc+0x1b8>
    b93e:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b940:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b944:	2a00      	cmp	r2, #0
    b946:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b94a:	da13      	bge.n	b974 <mayfly_xtal_stop_calc+0x1ec>
    b94c:	2a00      	cmp	r2, #0
    b94e:	f6ff af68 	blt.w	b822 <mayfly_xtal_stop_calc+0x9a>
			     (ticks_slot_abs +
    b952:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b954:	429c      	cmp	r4, r3
    b956:	f67f af64 	bls.w	b822 <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_curr);
    b95a:	4630      	mov	r0, r6
    b95c:	f7fe fa86 	bl	9e6c <conn_update_req>
				if (status == 2) {
    b960:	2802      	cmp	r0, #2
    b962:	f47f af5e 	bne.w	b822 <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_next);
    b966:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b968:	f7fe fa80 	bl	9e6c <conn_update_req>
    b96c:	e759      	b.n	b822 <mayfly_xtal_stop_calc+0x9a>
				ticks_to_expire -= ticks_conn_interval;
    b96e:	1a1b      	subs	r3, r3, r0
    b970:	2201      	movs	r2, #1
    b972:	e7e1      	b.n	b938 <mayfly_xtal_stop_calc+0x1b0>
			} else if (!conn_curr->role && conn_next->role &&
    b974:	2a00      	cmp	r2, #0
    b976:	f6bf af54 	bge.w	b822 <mayfly_xtal_stop_calc+0x9a>
				    (ticks_slot_abs +
    b97a:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b97c:	429c      	cmp	r4, r3
    b97e:	f67f af50 	bls.w	b822 <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_next);
    b982:	4628      	mov	r0, r5
    b984:	f7fe fa72 	bl	9e6c <conn_update_req>
				if (status == 2) {
    b988:	2802      	cmp	r0, #2
    b98a:	f47f af4a 	bne.w	b822 <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_curr);
    b98e:	980a      	ldr	r0, [sp, #40]	; 0x28
    b990:	e7ea      	b.n	b968 <mayfly_xtal_stop_calc+0x1e0>
    b992:	bf00      	nop
    b994:	f3af 8000 	nop.w
    b998:	1afd498d 	.word	0x1afd498d
    b99c:	00000007 	.word	0x00000007
    b9a0:	00009dc9 	.word	0x00009dc9
    b9a4:	200008c0 	.word	0x200008c0
    b9a8:	0001563e 	.word	0x0001563e
    b9ac:	20003a5c 	.word	0x20003a5c
    b9b0:	000167b9 	.word	0x000167b9
    b9b4:	00016808 	.word	0x00016808
    b9b8:	00017fd7 	.word	0x00017fd7
    b9bc:	00018d4c 	.word	0x00018d4c
    b9c0:	000189f0 	.word	0x000189f0
    b9c4:	00018a1a 	.word	0x00018a1a
    b9c8:	00009dcd 	.word	0x00009dcd
    b9cc:	0001828d 	.word	0x0001828d
    b9d0:	09ce5400 	.word	0x09ce5400

0000b9d4 <preempt_calc>:
{
    b9d4:	b570      	push	{r4, r5, r6, lr}
    b9d6:	4614      	mov	r4, r2
    b9d8:	460e      	mov	r6, r1
    b9da:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b9dc:	f7fc fbe2 	bl	81a4 <ticker_ticks_now_get>
	u32_t diff =
    b9e0:	4621      	mov	r1, r4
    b9e2:	f7fc fbe1 	bl	81a8 <ticker_ticks_diff_get>
	diff += 3;
    b9e6:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b9e8:	2c09      	cmp	r4, #9
    b9ea:	d90f      	bls.n	ba0c <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    b9ec:	2100      	movs	r1, #0
    b9ee:	4608      	mov	r0, r1
    b9f0:	f7fe fd58 	bl	a4a4 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b9f4:	4632      	mov	r2, r6
    b9f6:	2100      	movs	r1, #0
    b9f8:	4628      	mov	r0, r5
    b9fa:	f7ff fe85 	bl	b708 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b9fe:	68ab      	ldr	r3, [r5, #8]
    ba00:	441c      	add	r4, r3
		if (diff <
    ba02:	2c26      	cmp	r4, #38	; 0x26
    ba04:	d800      	bhi.n	ba08 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    ba06:	60ac      	str	r4, [r5, #8]
		return 1;
    ba08:	2001      	movs	r0, #1
}
    ba0a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    ba0c:	2000      	movs	r0, #0
    ba0e:	bd70      	pop	{r4, r5, r6, pc}

0000ba10 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    ba10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    ba12:	ad02      	add	r5, sp, #8
    ba14:	4b10      	ldr	r3, [pc, #64]	; (ba58 <adv_scan_configure.constprop.30+0x48>)
    ba16:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    ba1a:	4604      	mov	r4, r0
	radio_reset();
    ba1c:	f006 febe 	bl	1279c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    ba20:	2000      	movs	r0, #0
    ba22:	f006 fee5 	bl	127f0 <radio_tx_power_set>
	radio_isr_set(isr);
    ba26:	480d      	ldr	r0, [pc, #52]	; (ba5c <adv_scan_configure.constprop.30+0x4c>)
    ba28:	f006 fe82 	bl	12730 <radio_isr_set>
	radio_phy_set(phy, flags);
    ba2c:	2101      	movs	r1, #1
    ba2e:	4620      	mov	r0, r4
    ba30:	f006 fece 	bl	127d0 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    ba34:	4628      	mov	r0, r5
    ba36:	f006 fef9 	bl	1282c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    ba3a:	0062      	lsls	r2, r4, #1
    ba3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ba40:	2125      	movs	r1, #37	; 0x25
    ba42:	2008      	movs	r0, #8
    ba44:	f006 ff0a 	bl	1285c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    ba48:	4905      	ldr	r1, [pc, #20]	; (ba60 <adv_scan_configure.constprop.30+0x50>)
    ba4a:	f240 605b 	movw	r0, #1627	; 0x65b
    ba4e:	f006 ff95 	bl	1297c <radio_crc_configure>
}
    ba52:	b003      	add	sp, #12
    ba54:	bd30      	pop	{r4, r5, pc}
    ba56:	bf00      	nop
    ba58:	8e89bed6 	.word	0x8e89bed6
    ba5c:	0000ea89 	.word	0x0000ea89
    ba60:	00555555 	.word	0x00555555

0000ba64 <event_scan>:
{
    ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    ba66:	4b64      	ldr	r3, [pc, #400]	; (bbf8 <event_scan+0x194>)
    ba68:	7cda      	ldrb	r2, [r3, #19]
{
    ba6a:	b08d      	sub	sp, #52	; 0x34
    ba6c:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    ba6e:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    ba72:	461c      	mov	r4, r3
    ba74:	b17a      	cbz	r2, ba96 <event_scan+0x32>
    ba76:	4b61      	ldr	r3, [pc, #388]	; (bbfc <event_scan+0x198>)
    ba78:	9301      	str	r3, [sp, #4]
    ba7a:	9300      	str	r3, [sp, #0]
    ba7c:	4b60      	ldr	r3, [pc, #384]	; (bc00 <event_scan+0x19c>)
    ba7e:	4a61      	ldr	r2, [pc, #388]	; (bc04 <event_scan+0x1a0>)
    ba80:	681c      	ldr	r4, [r3, #0]
    ba82:	4961      	ldr	r1, [pc, #388]	; (bc08 <event_scan+0x1a4>)
    ba84:	4b61      	ldr	r3, [pc, #388]	; (bc0c <event_scan+0x1a8>)
    ba86:	4862      	ldr	r0, [pc, #392]	; (bc10 <event_scan+0x1ac>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    ba88:	47a0      	blx	r4
    ba8a:	4040      	eors	r0, r0
    ba8c:	f380 8811 	msr	BASEPRI, r0
    ba90:	f04f 0004 	mov.w	r0, #4
    ba94:	df02      	svc	2
    ba96:	7c1b      	ldrb	r3, [r3, #16]
    ba98:	b2db      	uxtb	r3, r3
    ba9a:	2b06      	cmp	r3, #6
    ba9c:	d009      	beq.n	bab2 <event_scan+0x4e>
    ba9e:	4b57      	ldr	r3, [pc, #348]	; (bbfc <event_scan+0x198>)
    baa0:	9301      	str	r3, [sp, #4]
    baa2:	9300      	str	r3, [sp, #0]
    baa4:	4b56      	ldr	r3, [pc, #344]	; (bc00 <event_scan+0x19c>)
    baa6:	4a57      	ldr	r2, [pc, #348]	; (bc04 <event_scan+0x1a0>)
    baa8:	681c      	ldr	r4, [r3, #0]
    baaa:	4957      	ldr	r1, [pc, #348]	; (bc08 <event_scan+0x1a4>)
    baac:	4b57      	ldr	r3, [pc, #348]	; (bc0c <event_scan+0x1a8>)
    baae:	4859      	ldr	r0, [pc, #356]	; (bc14 <event_scan+0x1b0>)
    bab0:	e7ea      	b.n	ba88 <event_scan+0x24>
	_radio.role = ROLE_SCAN;
    bab2:	2202      	movs	r2, #2
    bab4:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    bab6:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    bab8:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    baba:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    babe:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    bac0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    bac4:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    bac6:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    baca:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    bace:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    bad0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    bad4:	f7ff ff9c 	bl	ba10 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    bad8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    badc:	f3c3 0081 	ubfx	r0, r3, #2, #2
    bae0:	1c42      	adds	r2, r0, #1
    bae2:	f362 0383 	bfi	r3, r2, #2, #2
    bae6:	3025      	adds	r0, #37	; 0x25
    bae8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    baec:	f7ff fca2 	bl	b434 <chan_set>
	if (_radio.scanner.chan == 3) {
    baf0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    baf4:	f003 020c 	and.w	r2, r3, #12
    baf8:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    bafa:	bf08      	it	eq
    bafc:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    bb00:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    bb04:	bf08      	it	eq
    bb06:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    bb0a:	f006 fff1 	bl	12af0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    bb0e:	2300      	movs	r3, #0
    bb10:	4619      	mov	r1, r3
    bb12:	461a      	mov	r2, r3
    bb14:	4618      	mov	r0, r3
    bb16:	f006 ff5b 	bl	129d0 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    bb1a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    bb1e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    bb22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    bb26:	3008      	adds	r0, #8
    bb28:	f006 fec6 	bl	128b8 <radio_pkt_rx_set>
	radio_rssi_measure();
    bb2c:	f006 ff68 	bl	12a00 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    bb30:	f006 fa06 	bl	11f40 <ctrl_rl_enabled>
    bb34:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    bb38:	b340      	cbz	r0, bb8c <event_scan+0x128>
		struct ll_filter *filter =
    bb3a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    bb3e:	f006 f817 	bl	11b70 <ctrl_filter_get>
    bb42:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    bb44:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    bb48:	f005 ff32 	bl	119b0 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    bb4c:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    bb4e:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    bb50:	1cb2      	adds	r2, r6, #2
    bb52:	7830      	ldrb	r0, [r6, #0]
    bb54:	f006 ff76 	bl	12a44 <radio_filter_configure>
		radio_ar_configure(count, irks);
    bb58:	4639      	mov	r1, r7
    bb5a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    bb5e:	f007 f94b 	bl	12df8 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    bb62:	68e2      	ldr	r2, [r4, #12]
    bb64:	f105 0109 	add.w	r1, r5, #9
    bb68:	2000      	movs	r0, #0
    bb6a:	f006 ffcd 	bl	12b08 <radio_tmr_start>
	radio_tmr_end_capture();
    bb6e:	f007 f89b 	bl	12ca8 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    bb72:	2106      	movs	r1, #6
    bb74:	462a      	mov	r2, r5
    bb76:	4828      	ldr	r0, [pc, #160]	; (bc18 <event_scan+0x1b4>)
    bb78:	f7ff ff2c 	bl	b9d4 <preempt_calc>
    bb7c:	4601      	mov	r1, r0
    bb7e:	b188      	cbz	r0, bba4 <event_scan+0x140>
		_radio.state = STATE_STOP;
    bb80:	2304      	movs	r3, #4
    bb82:	7523      	strb	r3, [r4, #20]
		radio_disable();
    bb84:	f006 febe 	bl	12904 <radio_disable>
}
    bb88:	b00d      	add	sp, #52	; 0x34
    bb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    bb8c:	f013 0f30 	tst.w	r3, #48	; 0x30
    bb90:	d0e7      	beq.n	bb62 <event_scan+0xfe>
		struct ll_filter *wl = ctrl_filter_get(true);
    bb92:	2001      	movs	r0, #1
    bb94:	f005 ffec 	bl	11b70 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    bb98:	1c82      	adds	r2, r0, #2
    bb9a:	7841      	ldrb	r1, [r0, #1]
    bb9c:	7800      	ldrb	r0, [r0, #0]
    bb9e:	f006 ff51 	bl	12a44 <radio_filter_configure>
    bba2:	e7de      	b.n	bb62 <event_scan+0xfe>
		ret = ticker_start(
    bba4:	f641 1336 	movw	r3, #6454	; 0x1936
    bba8:	9308      	str	r3, [sp, #32]
    bbaa:	4b1c      	ldr	r3, [pc, #112]	; (bc1c <event_scan+0x1b8>)
    bbac:	9307      	str	r3, [sp, #28]
    bbae:	2204      	movs	r2, #4
    bbb0:	4b1b      	ldr	r3, [pc, #108]	; (bc20 <event_scan+0x1bc>)
    bbb2:	9206      	str	r2, [sp, #24]
    bbb4:	9305      	str	r3, [sp, #20]
    bbb6:	9004      	str	r0, [sp, #16]
    bbb8:	9003      	str	r0, [sp, #12]
    bbba:	9002      	str	r0, [sp, #8]
    bbbc:	9001      	str	r0, [sp, #4]
    bbbe:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    bbc2:	3309      	adds	r3, #9
    bbc4:	9300      	str	r3, [sp, #0]
    bbc6:	462b      	mov	r3, r5
    bbc8:	f7fc f97e 	bl	7ec8 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    bbcc:	f030 0302 	bics.w	r3, r0, #2
    bbd0:	d009      	beq.n	bbe6 <event_scan+0x182>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    bbd2:	4b0a      	ldr	r3, [pc, #40]	; (bbfc <event_scan+0x198>)
    bbd4:	9301      	str	r3, [sp, #4]
    bbd6:	9300      	str	r3, [sp, #0]
    bbd8:	4b09      	ldr	r3, [pc, #36]	; (bc00 <event_scan+0x19c>)
    bbda:	4a0a      	ldr	r2, [pc, #40]	; (bc04 <event_scan+0x1a0>)
    bbdc:	681c      	ldr	r4, [r3, #0]
    bbde:	490a      	ldr	r1, [pc, #40]	; (bc08 <event_scan+0x1a4>)
    bbe0:	4b0a      	ldr	r3, [pc, #40]	; (bc0c <event_scan+0x1a8>)
    bbe2:	4810      	ldr	r0, [pc, #64]	; (bc24 <event_scan+0x1c0>)
    bbe4:	e750      	b.n	ba88 <event_scan+0x24>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    bbe6:	4619      	mov	r1, r3
    bbe8:	4618      	mov	r0, r3
    bbea:	4a0f      	ldr	r2, [pc, #60]	; (bc28 <event_scan+0x1c4>)
    bbec:	f7fc fa88 	bl	8100 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    bbf0:	f030 0302 	bics.w	r3, r0, #2
    bbf4:	d1ed      	bne.n	bbd2 <event_scan+0x16e>
    bbf6:	e7c7      	b.n	bb88 <event_scan+0x124>
    bbf8:	200008c0 	.word	0x200008c0
    bbfc:	0001563e 	.word	0x0001563e
    bc00:	20003a5c 	.word	0x20003a5c
    bc04:	000167b9 	.word	0x000167b9
    bc08:	00016808 	.word	0x00016808
    bc0c:	000180a6 	.word	0x000180a6
    bc10:	000183a9 	.word	0x000183a9
    bc14:	000183e3 	.word	0x000183e3
    bc18:	20000990 	.word	0x20000990
    bc1c:	0000ada5 	.word	0x0000ada5
    bc20:	0000b03d 	.word	0x0000b03d
    bc24:	00018422 	.word	0x00018422
    bc28:	0000afad 	.word	0x0000afad

0000bc2c <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    bc2c:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    bc2e:	4b05      	ldr	r3, [pc, #20]	; (bc44 <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bc30:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    bc32:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bc34:	4611      	mov	r1, r2
    bc36:	4610      	mov	r0, r2
    bc38:	f7fb fb86 	bl	7348 <mayfly_enqueue>
	LL_ASSERT(!retval);
    bc3c:	b108      	cbz	r0, bc42 <event_stop.constprop.31+0x16>
    bc3e:	f7ff f9df 	bl	b000 <event_stop.part.10>
    bc42:	bd08      	pop	{r3, pc}
    bc44:	20003d68 	.word	0x20003d68

0000bc48 <event_common_prepare>:
{
    bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    bc4c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    bc4e:	681d      	ldr	r5, [r3, #0]
{
    bc50:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    bc52:	2c00      	cmp	r4, #0
{
    bc54:	4681      	mov	r9, r0
    bc56:	910b      	str	r1, [sp, #44]	; 0x2c
    bc58:	4690      	mov	r8, r2
    bc5a:	469b      	mov	fp, r3
    bc5c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    bc60:	da03      	bge.n	bc6a <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    bc62:	9c16      	ldr	r4, [sp, #88]	; 0x58
    bc64:	42ac      	cmp	r4, r5
    bc66:	bf38      	it	cc
    bc68:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    bc6a:	42ac      	cmp	r4, r5
    bc6c:	4f57      	ldr	r7, [pc, #348]	; (bdcc <event_common_prepare+0x184>)
    bc6e:	d925      	bls.n	bcbc <event_common_prepare+0x74>
		ticker_status =
    bc70:	f241 5374 	movw	r3, #5492	; 0x1574
    bc74:	9308      	str	r3, [sp, #32]
    bc76:	4b56      	ldr	r3, [pc, #344]	; (bdd0 <event_common_prepare+0x188>)
    bc78:	9305      	str	r3, [sp, #20]
    bc7a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    bc7c:	1b63      	subs	r3, r4, r5
		ticker_status =
    bc7e:	9300      	str	r3, [sp, #0]
    bc80:	9707      	str	r7, [sp, #28]
    bc82:	464b      	mov	r3, r9
    bc84:	9106      	str	r1, [sp, #24]
    bc86:	9104      	str	r1, [sp, #16]
    bc88:	9103      	str	r1, [sp, #12]
    bc8a:	9102      	str	r1, [sp, #8]
    bc8c:	9101      	str	r1, [sp, #4]
    bc8e:	2201      	movs	r2, #1
    bc90:	4608      	mov	r0, r1
    bc92:	f7fc f919 	bl	7ec8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc96:	f030 0302 	bics.w	r3, r0, #2
    bc9a:	d035      	beq.n	bd08 <event_common_prepare+0xc0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bc9c:	4b4d      	ldr	r3, [pc, #308]	; (bdd4 <event_common_prepare+0x18c>)
    bc9e:	9301      	str	r3, [sp, #4]
    bca0:	9300      	str	r3, [sp, #0]
    bca2:	4b4d      	ldr	r3, [pc, #308]	; (bdd8 <event_common_prepare+0x190>)
    bca4:	4a4d      	ldr	r2, [pc, #308]	; (bddc <event_common_prepare+0x194>)
    bca6:	681c      	ldr	r4, [r3, #0]
    bca8:	494d      	ldr	r1, [pc, #308]	; (bde0 <event_common_prepare+0x198>)
    bcaa:	4b4e      	ldr	r3, [pc, #312]	; (bde4 <event_common_prepare+0x19c>)
    bcac:	484e      	ldr	r0, [pc, #312]	; (bde8 <event_common_prepare+0x1a0>)
		LL_ASSERT(!retval);
    bcae:	47a0      	blx	r4
    bcb0:	4040      	eors	r0, r0
    bcb2:	f380 8811 	msr	BASEPRI, r0
    bcb6:	f04f 0004 	mov.w	r0, #4
    bcba:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    bcbc:	d21d      	bcs.n	bcfa <event_common_prepare+0xb2>
		event_active(0, 0, 0, NULL);
    bcbe:	2300      	movs	r3, #0
    bcc0:	461a      	mov	r2, r3
    bcc2:	4619      	mov	r1, r3
    bcc4:	4618      	mov	r0, r3
    bcc6:	f7ff f9c9 	bl	b05c <event_active>
		ticker_status =
    bcca:	f241 5389 	movw	r3, #5513	; 0x1589
    bcce:	2100      	movs	r1, #0
    bcd0:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    bcd2:	1b2c      	subs	r4, r5, r4
		ticker_status =
    bcd4:	4b45      	ldr	r3, [pc, #276]	; (bdec <event_common_prepare+0x1a4>)
    bcd6:	9305      	str	r3, [sp, #20]
    bcd8:	9707      	str	r7, [sp, #28]
    bcda:	464b      	mov	r3, r9
    bcdc:	9106      	str	r1, [sp, #24]
    bcde:	9104      	str	r1, [sp, #16]
    bce0:	9103      	str	r1, [sp, #12]
    bce2:	9102      	str	r1, [sp, #8]
    bce4:	9101      	str	r1, [sp, #4]
    bce6:	9400      	str	r4, [sp, #0]
    bce8:	2201      	movs	r2, #1
    bcea:	4608      	mov	r0, r1
    bcec:	f7fc f8ec 	bl	7ec8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bcf0:	f030 0302 	bics.w	r3, r0, #2
    bcf4:	d1d2      	bne.n	bc9c <event_common_prepare+0x54>
    bcf6:	462c      	mov	r4, r5
    bcf8:	e00b      	b.n	bd12 <event_common_prepare+0xca>
		event_active(0, 0, 0, NULL);
    bcfa:	2300      	movs	r3, #0
    bcfc:	461a      	mov	r2, r3
    bcfe:	4619      	mov	r1, r3
    bd00:	4618      	mov	r0, r3
    bd02:	f7ff f9ab 	bl	b05c <event_active>
		event_xtal(0, 0, 0, NULL);
    bd06:	2300      	movs	r3, #0
    bd08:	461a      	mov	r2, r3
    bd0a:	4619      	mov	r1, r3
    bd0c:	4618      	mov	r0, r3
    bd0e:	f7ff f9cd 	bl	b0ac <event_xtal>
	_radio.remainder_anchor = remainder;
    bd12:	4e37      	ldr	r6, [pc, #220]	; (bdf0 <event_common_prepare+0x1a8>)
    bd14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bd16:	60f3      	str	r3, [r6, #12]
	ticker_status =
    bd18:	f241 53a1 	movw	r3, #5537	; 0x15a1
    bd1c:	9308      	str	r3, [sp, #32]
    bd1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    bd20:	9306      	str	r3, [sp, #24]
    bd22:	2200      	movs	r2, #0
    bd24:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bd26:	9305      	str	r3, [sp, #20]
    bd28:	9707      	str	r7, [sp, #28]
    bd2a:	464b      	mov	r3, r9
    bd2c:	9204      	str	r2, [sp, #16]
    bd2e:	9203      	str	r2, [sp, #12]
    bd30:	9202      	str	r2, [sp, #8]
    bd32:	9201      	str	r2, [sp, #4]
    bd34:	9400      	str	r4, [sp, #0]
    bd36:	4611      	mov	r1, r2
    bd38:	4610      	mov	r0, r2
    bd3a:	f7fc f8c5 	bl	7ec8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bd3e:	f030 0302 	bics.w	r3, r0, #2
    bd42:	d1ab      	bne.n	bc9c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    bd44:	2005      	movs	r0, #5
    bd46:	f7ff ff71 	bl	bc2c <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    bd4a:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    bd4e:	429d      	cmp	r5, r3
    bd50:	d023      	beq.n	bd9a <event_common_prepare+0x152>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    bd52:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    bd56:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    bd5a:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    bd5c:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    bd5e:	bfbc      	itt	lt
    bd60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    bd64:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    bd68:	f8d8 2000 	ldr.w	r2, [r8]
    bd6c:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    bd70:	428a      	cmp	r2, r1
    bd72:	bf38      	it	cc
    bd74:	460a      	movcc	r2, r1
		ticker_status =
    bd76:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    bd7a:	b2a3      	uxth	r3, r4
    bd7c:	b292      	uxth	r2, r2
		ticker_status =
    bd7e:	9106      	str	r1, [sp, #24]
    bd80:	2100      	movs	r1, #0
    bd82:	9302      	str	r3, [sp, #8]
    bd84:	9201      	str	r2, [sp, #4]
    bd86:	9200      	str	r2, [sp, #0]
    bd88:	9104      	str	r1, [sp, #16]
    bd8a:	9103      	str	r1, [sp, #12]
    bd8c:	4652      	mov	r2, sl
    bd8e:	4608      	mov	r0, r1
    bd90:	f7fc f8ea 	bl	7f68 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bd94:	f030 0302 	bics.w	r3, r0, #2
    bd98:	d180      	bne.n	bc9c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    bd9a:	20ff      	movs	r0, #255	; 0xff
    bd9c:	f7ff fa5c 	bl	b258 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    bda0:	4b14      	ldr	r3, [pc, #80]	; (bdf4 <event_common_prepare+0x1ac>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bda2:	2201      	movs	r2, #1
    bda4:	4611      	mov	r1, r2
    bda6:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    bda8:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bdac:	f7fb facc 	bl	7348 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bdb0:	b148      	cbz	r0, bdc6 <event_common_prepare+0x17e>
    bdb2:	4b08      	ldr	r3, [pc, #32]	; (bdd4 <event_common_prepare+0x18c>)
    bdb4:	9301      	str	r3, [sp, #4]
    bdb6:	9300      	str	r3, [sp, #0]
    bdb8:	4b07      	ldr	r3, [pc, #28]	; (bdd8 <event_common_prepare+0x190>)
    bdba:	4a08      	ldr	r2, [pc, #32]	; (bddc <event_common_prepare+0x194>)
    bdbc:	681c      	ldr	r4, [r3, #0]
    bdbe:	4908      	ldr	r1, [pc, #32]	; (bde0 <event_common_prepare+0x198>)
    bdc0:	4b08      	ldr	r3, [pc, #32]	; (bde4 <event_common_prepare+0x19c>)
    bdc2:	480d      	ldr	r0, [pc, #52]	; (bdf8 <event_common_prepare+0x1b0>)
    bdc4:	e773      	b.n	bcae <event_common_prepare+0x66>
}
    bdc6:	b00d      	add	sp, #52	; 0x34
    bdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdcc:	0000ada5 	.word	0x0000ada5
    bdd0:	0000b05d 	.word	0x0000b05d
    bdd4:	0001563e 	.word	0x0001563e
    bdd8:	20003a5c 	.word	0x20003a5c
    bddc:	000167b9 	.word	0x000167b9
    bde0:	00016808 	.word	0x00016808
    bde4:	00018065 	.word	0x00018065
    bde8:	0001828d 	.word	0x0001828d
    bdec:	0000b0ad 	.word	0x0000b0ad
    bdf0:	200008c0 	.word	0x200008c0
    bdf4:	20003e08 	.word	0x20003e08
    bdf8:	000189c7 	.word	0x000189c7

0000bdfc <event_scan_prepare>:
{
    bdfc:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    bdfe:	4c27      	ldr	r4, [pc, #156]	; (be9c <event_scan_prepare+0xa0>)
    be00:	7c23      	ldrb	r3, [r4, #16]
{
    be02:	b085      	sub	sp, #20
    be04:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    be06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    be0a:	b17b      	cbz	r3, be2c <event_scan_prepare+0x30>
    be0c:	4b24      	ldr	r3, [pc, #144]	; (bea0 <event_scan_prepare+0xa4>)
    be0e:	9301      	str	r3, [sp, #4]
    be10:	9300      	str	r3, [sp, #0]
    be12:	4b24      	ldr	r3, [pc, #144]	; (bea4 <event_scan_prepare+0xa8>)
    be14:	4a24      	ldr	r2, [pc, #144]	; (bea8 <event_scan_prepare+0xac>)
    be16:	681c      	ldr	r4, [r3, #0]
    be18:	4924      	ldr	r1, [pc, #144]	; (beac <event_scan_prepare+0xb0>)
    be1a:	4b25      	ldr	r3, [pc, #148]	; (beb0 <event_scan_prepare+0xb4>)
    be1c:	4825      	ldr	r0, [pc, #148]	; (beb4 <event_scan_prepare+0xb8>)
		LL_ASSERT(!retval);
    be1e:	47a0      	blx	r4
    be20:	4040      	eors	r0, r0
    be22:	f380 8811 	msr	BASEPRI, r0
    be26:	f04f 0004 	mov.w	r0, #4
    be2a:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    be2c:	2306      	movs	r3, #6
    be2e:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    be30:	9203      	str	r2, [sp, #12]
    be32:	4a21      	ldr	r2, [pc, #132]	; (beb8 <event_scan_prepare+0xbc>)
    be34:	9202      	str	r2, [sp, #8]
    be36:	9301      	str	r3, [sp, #4]
    be38:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    be3c:	9300      	str	r3, [sp, #0]
    be3e:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    be42:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    be46:	f7ff feff 	bl	bc48 <event_common_prepare>
	if (_radio.scanner.conn) {
    be4a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    be4e:	b313      	cbz	r3, be96 <event_scan_prepare+0x9a>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    be50:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    be54:	2b00      	cmp	r3, #0
    be56:	da0c      	bge.n	be72 <event_scan_prepare+0x76>
			u32_t ticks_prepare_to_start =
    be58:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    be5c:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    be60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    be64:	4291      	cmp	r1, r2
    be66:	bf2c      	ite	cs
    be68:	ebc3 0301 	rsbcs	r3, r3, r1
    be6c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    be70:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    be72:	4b12      	ldr	r3, [pc, #72]	; (bebc <event_scan_prepare+0xc0>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    be74:	2201      	movs	r2, #1
    be76:	4611      	mov	r1, r2
    be78:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    be7a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    be7c:	f7fb fa64 	bl	7348 <mayfly_enqueue>
		LL_ASSERT(!retval);
    be80:	b148      	cbz	r0, be96 <event_scan_prepare+0x9a>
    be82:	4b07      	ldr	r3, [pc, #28]	; (bea0 <event_scan_prepare+0xa4>)
    be84:	9301      	str	r3, [sp, #4]
    be86:	9300      	str	r3, [sp, #0]
    be88:	4b06      	ldr	r3, [pc, #24]	; (bea4 <event_scan_prepare+0xa8>)
    be8a:	4a07      	ldr	r2, [pc, #28]	; (bea8 <event_scan_prepare+0xac>)
    be8c:	681c      	ldr	r4, [r3, #0]
    be8e:	4907      	ldr	r1, [pc, #28]	; (beac <event_scan_prepare+0xb0>)
    be90:	4b07      	ldr	r3, [pc, #28]	; (beb0 <event_scan_prepare+0xb4>)
    be92:	480b      	ldr	r0, [pc, #44]	; (bec0 <event_scan_prepare+0xc4>)
    be94:	e7c3      	b.n	be1e <event_scan_prepare+0x22>
}
    be96:	b005      	add	sp, #20
    be98:	bd30      	pop	{r4, r5, pc}
    be9a:	bf00      	nop
    be9c:	200008c0 	.word	0x200008c0
    bea0:	0001563e 	.word	0x0001563e
    bea4:	20003a5c 	.word	0x20003a5c
    bea8:	000167b9 	.word	0x000167b9
    beac:	00016808 	.word	0x00016808
    beb0:	00018093 	.word	0x00018093
    beb4:	00018b03 	.word	0x00018b03
    beb8:	0000ba65 	.word	0x0000ba65
    bebc:	20003d88 	.word	0x20003d88
    bec0:	000189c7 	.word	0x000189c7

0000bec4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    bec4:	4b02      	ldr	r3, [pc, #8]	; (bed0 <mayfly_xtal_start+0xc>)
    bec6:	6818      	ldr	r0, [r3, #0]
    bec8:	6843      	ldr	r3, [r0, #4]
    beca:	2100      	movs	r1, #0
    becc:	681b      	ldr	r3, [r3, #0]
    bece:	4718      	bx	r3
    bed0:	200008c0 	.word	0x200008c0

0000bed4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    bed4:	4b02      	ldr	r3, [pc, #8]	; (bee0 <mayfly_xtal_stop+0xc>)
    bed6:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    bed8:	6843      	ldr	r3, [r0, #4]
    beda:	2100      	movs	r1, #0
    bedc:	685b      	ldr	r3, [r3, #4]
    bede:	4718      	bx	r3
    bee0:	200008c0 	.word	0x200008c0

0000bee4 <chan_sel_2>:
{
    bee4:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    bee6:	4048      	eors	r0, r1
    bee8:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    beea:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    beee:	2608      	movs	r6, #8
	o = 0;
    bef0:	2400      	movs	r4, #0
		o |= (i & 1);
    bef2:	f00e 0501 	and.w	r5, lr, #1
    bef6:	3e01      	subs	r6, #1
    bef8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    befc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    bf00:	b2ec      	uxtb	r4, r5
		i >>= 1;
    bf02:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bf06:	d1f4      	bne.n	bef2 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bf08:	0225      	lsls	r5, r4, #8
    bf0a:	b22d      	sxth	r5, r5
    bf0c:	b2c0      	uxtb	r0, r0
    bf0e:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    bf12:	4634      	mov	r4, r6
		o |= (i & 1);
    bf14:	f000 0601 	and.w	r6, r0, #1
    bf18:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    bf1c:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    bf20:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    bf24:	b2e4      	uxtb	r4, r4
		i >>= 1;
    bf26:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bf2a:	d1f3      	bne.n	bf14 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bf2c:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bf2e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    bf32:	3f01      	subs	r7, #1
    bf34:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    bf36:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bf3a:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    bf3c:	d1d5      	bne.n	beea <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    bf3e:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    bf40:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    bf42:	fbb1 f0f4 	udiv	r0, r1, r4
    bf46:	fb04 1010 	mls	r0, r4, r0, r1
    bf4a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    bf4c:	08c4      	lsrs	r4, r0, #3
    bf4e:	f000 0507 	and.w	r5, r0, #7
    bf52:	5d14      	ldrb	r4, [r2, r4]
    bf54:	412c      	asrs	r4, r5
    bf56:	07e4      	lsls	r4, r4, #31
    bf58:	d407      	bmi.n	bf6a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    bf5a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    bf5c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    bf60:	4610      	mov	r0, r2
}
    bf62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    bf66:	f7fd bf3d 	b.w	9de4 <chan_sel_remap>
}
    bf6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bf6c <ctrl_tx_enqueue>:
{
    bf6c:	b510      	push	{r4, lr}
	    !conn->empty &&
    bf6e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bf72:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    bf76:	f014 0f80 	tst.w	r4, #128	; 0x80
    bf7a:	d118      	bne.n	bfae <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bf7c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    bf80:	b1ab      	cbz	r3, bfae <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bf82:	0724      	lsls	r4, r4, #28
    bf84:	d413      	bmi.n	bfae <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    bf86:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    bf8a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    bf8c:	bf04      	itt	eq
    bf8e:	681c      	ldreq	r4, [r3, #0]
    bf90:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    bf94:	b992      	cbnz	r2, bfbc <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    bf96:	681a      	ldr	r2, [r3, #0]
    bf98:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    bf9a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    bf9c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    bfa0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    bfa4:	680b      	ldr	r3, [r1, #0]
    bfa6:	b90b      	cbnz	r3, bfac <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    bfa8:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bfac:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    bfae:	b92a      	cbnz	r2, bfbc <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    bfb0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    bfb4:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    bfb6:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    bfba:	e7ef      	b.n	bf9c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    bfbc:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bfc0:	681a      	ldr	r2, [r3, #0]
    bfc2:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    bfc4:	6019      	str	r1, [r3, #0]
    bfc6:	e7eb      	b.n	bfa0 <ctrl_tx_enqueue+0x34>

0000bfc8 <ctrl_tx_sec_enqueue>:
{
    bfc8:	b410      	push	{r4}
	if (conn->pause_tx) {
    bfca:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bfce:	0724      	lsls	r4, r4, #28
{
    bfd0:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    bfd2:	d50f      	bpl.n	bff4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    bfd4:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    bfd8:	b931      	cbnz	r1, bfe8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    bfda:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    bfde:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    bfe0:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    bfe4:	bc10      	pop	{r4}
    bfe6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    bfe8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bfec:	6819      	ldr	r1, [r3, #0]
    bfee:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    bff0:	601a      	str	r2, [r3, #0]
    bff2:	e7f7      	b.n	bfe4 <ctrl_tx_sec_enqueue+0x1c>
}
    bff4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    bff6:	f7ff bfb9 	b.w	bf6c <ctrl_tx_enqueue>
	...

0000bffc <feature_rsp_send>:
{
    bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bffe:	4f21      	ldr	r7, [pc, #132]	; (c084 <feature_rsp_send+0x88>)
{
    c000:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c002:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    c006:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c008:	f7fb f8d3 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    c00c:	4604      	mov	r4, r0
    c00e:	b3b0      	cbz	r0, c07e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c010:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    c012:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c014:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    c018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    c01c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    c020:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    c024:	f043 0310 	orr.w	r3, r3, #16
    c028:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    c02c:	79b1      	ldrb	r1, [r6, #6]
    c02e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    c032:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    c036:	f3c1 0110 	ubfx	r1, r1, #0, #17
    c03a:	400b      	ands	r3, r1
    c03c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    c040:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    c044:	f043 0320 	orr.w	r3, r3, #32
    c048:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c04c:	7903      	ldrb	r3, [r0, #4]
    c04e:	f043 0303 	orr.w	r3, r3, #3
    c052:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c054:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    c056:	2309      	movs	r3, #9
    c058:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    c05a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    c05c:	2100      	movs	r1, #0
    c05e:	4410      	add	r0, r2
    c060:	f7f5 ff0c 	bl	1e7c <memset>
		conn->llcp_features & 0xFF;
    c064:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c068:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    c06a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    c06c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    c06e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c070:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c072:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    c074:	4621      	mov	r1, r4
    c076:	f7ff ffa7 	bl	bfc8 <ctrl_tx_sec_enqueue>
	return 0;
    c07a:	2000      	movs	r0, #0
    c07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    c07e:	2001      	movs	r0, #1
}
    c080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c082:	bf00      	nop
    c084:	200008c0 	.word	0x200008c0

0000c088 <start_enc_rsp_send>:
{
    c088:	b510      	push	{r4, lr}
    c08a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    c08c:	b9c9      	cbnz	r1, c0c2 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c08e:	480f      	ldr	r0, [pc, #60]	; (c0cc <start_enc_rsp_send+0x44>)
    c090:	f7fb f88f 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    c094:	b1b8      	cbz	r0, c0c6 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c096:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    c098:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c09c:	f043 0320 	orr.w	r3, r3, #32
    c0a0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c0a4:	780b      	ldrb	r3, [r1, #0]
    c0a6:	f043 0303 	orr.w	r3, r3, #3
    c0aa:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    c0ac:	2301      	movs	r3, #1
    c0ae:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    c0b0:	2306      	movs	r3, #6
    c0b2:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    c0b4:	b140      	cbz	r0, c0c8 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    c0b6:	4601      	mov	r1, r0
    c0b8:	4620      	mov	r0, r4
    c0ba:	f7ff ff57 	bl	bf6c <ctrl_tx_enqueue>
	return 0;
    c0be:	2000      	movs	r0, #0
    c0c0:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    c0c2:	2000      	movs	r0, #0
    c0c4:	e7e8      	b.n	c098 <start_enc_rsp_send+0x10>
			return 1;
    c0c6:	2001      	movs	r0, #1
}
    c0c8:	bd10      	pop	{r4, pc}
    c0ca:	bf00      	nop
    c0cc:	20000a1c 	.word	0x20000a1c

0000c0d0 <reject_ext_ind_send>:
{
    c0d0:	b570      	push	{r4, r5, r6, lr}
    c0d2:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c0d4:	480b      	ldr	r0, [pc, #44]	; (c104 <reject_ext_ind_send+0x34>)
{
    c0d6:	460e      	mov	r6, r1
    c0d8:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c0da:	f7fb f86a 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    c0de:	b178      	cbz	r0, c100 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c0e0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    c0e2:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c0e4:	f043 0303 	orr.w	r3, r3, #3
    c0e8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c0ea:	2303      	movs	r3, #3
    c0ec:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c0ee:	2311      	movs	r3, #17
    c0f0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    c0f2:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    c0f4:	4601      	mov	r1, r0
    c0f6:	4620      	mov	r0, r4
    c0f8:	f7ff ff38 	bl	bf6c <ctrl_tx_enqueue>
	return 0;
    c0fc:	2000      	movs	r0, #0
    c0fe:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    c100:	2001      	movs	r0, #1
}
    c102:	bd70      	pop	{r4, r5, r6, pc}
    c104:	20000a1c 	.word	0x20000a1c

0000c108 <event_connection_prepare>:
{
    c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    c10c:	4db9      	ldr	r5, [pc, #740]	; (c3f4 <event_connection_prepare+0x2ec>)
{
    c10e:	b08f      	sub	sp, #60	; 0x3c
    c110:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    c112:	7c2b      	ldrb	r3, [r5, #16]
{
    c114:	910c      	str	r1, [sp, #48]	; 0x30
    c116:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    c118:	b17b      	cbz	r3, c13a <event_connection_prepare+0x32>
    c11a:	4bb7      	ldr	r3, [pc, #732]	; (c3f8 <event_connection_prepare+0x2f0>)
    c11c:	9301      	str	r3, [sp, #4]
    c11e:	9300      	str	r3, [sp, #0]
    c120:	4bb6      	ldr	r3, [pc, #728]	; (c3fc <event_connection_prepare+0x2f4>)
    c122:	4ab7      	ldr	r2, [pc, #732]	; (c400 <event_connection_prepare+0x2f8>)
    c124:	681c      	ldr	r4, [r3, #0]
    c126:	49b7      	ldr	r1, [pc, #732]	; (c404 <event_connection_prepare+0x2fc>)
    c128:	4bb7      	ldr	r3, [pc, #732]	; (c408 <event_connection_prepare+0x300>)
    c12a:	48b8      	ldr	r0, [pc, #736]	; (c40c <event_connection_prepare+0x304>)
		LL_ASSERT(!retval);
    c12c:	47a0      	blx	r4
    c12e:	4040      	eors	r0, r0
    c130:	f380 8811 	msr	BASEPRI, r0
    c134:	f04f 0004 	mov.w	r0, #4
    c138:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    c13a:	f894 3020 	ldrb.w	r3, [r4, #32]
    c13e:	3307      	adds	r3, #7
    c140:	b2db      	uxtb	r3, r3
    c142:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    c144:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c148:	2b00      	cmp	r3, #0
    c14a:	da09      	bge.n	c160 <event_connection_prepare+0x58>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    c14c:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    c14e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    c150:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    c154:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    c156:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    c158:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    c15a:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    c15c:	bf88      	it	hi
    c15e:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    c160:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    c162:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    c166:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    c168:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    c16a:	b292      	uxth	r2, r2
    c16c:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    c16e:	4432      	add	r2, r6
    c170:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    c172:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c176:	429a      	cmp	r2, r3
    c178:	f040 81bf 	bne.w	c4fa <event_connection_prepare+0x3f2>
    c17c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c180:	075f      	lsls	r7, r3, #29
    c182:	f100 84bc 	bmi.w	cafe <event_connection_prepare+0x9f6>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    c186:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c18a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c18e:	429a      	cmp	r2, r3
    c190:	f000 8098 	beq.w	c2c4 <event_connection_prepare+0x1bc>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c194:	2005      	movs	r0, #5
    c196:	f7ff fd49 	bl	bc2c <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    c19a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    c19e:	b113      	cbz	r3, c1a6 <event_connection_prepare+0x9e>
    c1a0:	429c      	cmp	r4, r3
    c1a2:	f040 808f 	bne.w	c2c4 <event_connection_prepare+0x1bc>
	switch (conn->llcp_conn_param.state) {
    c1a6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c1aa:	f003 0307 	and.w	r3, r3, #7
    c1ae:	2b05      	cmp	r3, #5
    c1b0:	f200 8160 	bhi.w	c474 <event_connection_prepare+0x36c>
    c1b4:	e8df f013 	tbh	[pc, r3, lsl #1]
    c1b8:	00670006 	.word	0x00670006
    c1bc:	00860134 	.word	0x00860134
    c1c0:	00860086 	.word	0x00860086
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c1c4:	4892      	ldr	r0, [pc, #584]	; (c410 <event_connection_prepare+0x308>)
    c1c6:	f7fa fff4 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    c1ca:	4607      	mov	r7, r0
    c1cc:	2800      	cmp	r0, #0
    c1ce:	d079      	beq.n	c2c4 <event_connection_prepare+0x1bc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    c1d0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c1d4:	2204      	movs	r2, #4
    c1d6:	f362 0302 	bfi	r3, r2, #0, #3
    c1da:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c1de:	7903      	ldrb	r3, [r0, #4]
    c1e0:	f043 0303 	orr.w	r3, r3, #3
    c1e4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c1e6:	2318      	movs	r3, #24
    c1e8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c1ea:	230f      	movs	r3, #15
    c1ec:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    c1ee:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c1f2:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    c1f4:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    c1f6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c1fa:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    c1fc:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c200:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    c202:	2300      	movs	r3, #0
    c204:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    c206:	74c3      	strb	r3, [r0, #19]
    c208:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    c20a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c20e:	7543      	strb	r3, [r0, #21]
    c210:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    c212:	75c3      	strb	r3, [r0, #23]
    c214:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    c216:	7643      	strb	r3, [r0, #25]
    c218:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    c21a:	76c3      	strb	r3, [r0, #27]
    c21c:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    c21e:	7743      	strb	r3, [r0, #29]
    c220:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    c222:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    c226:	4601      	mov	r1, r0
    c228:	4620      	mov	r0, r4
    c22a:	f7ff fe9f 	bl	bf6c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c22e:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    c230:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    c234:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c238:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    c23a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    c23e:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c242:	da0b      	bge.n	c25c <event_connection_prepare+0x154>
			u32_t ticks_prepare_to_start =
    c244:	68a3      	ldr	r3, [r4, #8]
    c246:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c248:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    c24c:	428b      	cmp	r3, r1
    c24e:	bf2c      	ite	cs
    c250:	4443      	addcs	r3, r8
    c252:	eb08 0301 	addcc.w	r3, r8, r1
    c256:	1a9b      	subs	r3, r3, r2
    c258:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    c25c:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    c25e:	4b6d      	ldr	r3, [pc, #436]	; (c414 <event_connection_prepare+0x30c>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    c260:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c264:	2201      	movs	r2, #1
    c266:	4611      	mov	r1, r2
    c268:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    c26a:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c26c:	f7fb f86c 	bl	7348 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c270:	b340      	cbz	r0, c2c4 <event_connection_prepare+0x1bc>
    c272:	4b61      	ldr	r3, [pc, #388]	; (c3f8 <event_connection_prepare+0x2f0>)
    c274:	9301      	str	r3, [sp, #4]
    c276:	9300      	str	r3, [sp, #0]
    c278:	4b60      	ldr	r3, [pc, #384]	; (c3fc <event_connection_prepare+0x2f4>)
    c27a:	681c      	ldr	r4, [r3, #0]
    c27c:	4b66      	ldr	r3, [pc, #408]	; (c418 <event_connection_prepare+0x310>)
    c27e:	4a60      	ldr	r2, [pc, #384]	; (c400 <event_connection_prepare+0x2f8>)
    c280:	4960      	ldr	r1, [pc, #384]	; (c404 <event_connection_prepare+0x2fc>)
    c282:	4866      	ldr	r0, [pc, #408]	; (c41c <event_connection_prepare+0x314>)
    c284:	e752      	b.n	c12c <event_connection_prepare+0x24>
	if (conn->llcp_conn_param.status) {
    c286:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    c28a:	b397      	cbz	r7, c2f2 <event_connection_prepare+0x1ea>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c28c:	4860      	ldr	r0, [pc, #384]	; (c410 <event_connection_prepare+0x308>)
    c28e:	f7fa ff90 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    c292:	4601      	mov	r1, r0
    c294:	b1b0      	cbz	r0, c2c4 <event_connection_prepare+0x1bc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    c296:	7903      	ldrb	r3, [r0, #4]
    c298:	f043 0303 	orr.w	r3, r3, #3
    c29c:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c29e:	2311      	movs	r3, #17
    c2a0:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    c2a2:	2303      	movs	r3, #3
    c2a4:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c2a6:	230f      	movs	r3, #15
    c2a8:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    c2aa:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    c2ae:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    c2b0:	4620      	mov	r0, r4
    c2b2:	f7ff fe5b 	bl	bf6c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c2b6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c2ba:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    c2be:	2300      	movs	r3, #0
    c2c0:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    c2c4:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    c2c8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    c2cc:	429a      	cmp	r2, r3
    c2ce:	f000 810d 	beq.w	c4ec <event_connection_prepare+0x3e4>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c2d2:	2005      	movs	r0, #5
    c2d4:	f7ff fcaa 	bl	bc2c <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    c2d8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c2dc:	f003 0203 	and.w	r2, r3, #3
    c2e0:	2a03      	cmp	r2, #3
    c2e2:	f200 817c 	bhi.w	c5de <event_connection_prepare+0x4d6>
    c2e6:	e8df f012 	tbh	[pc, r2, lsl #1]
    c2ea:	00cf      	.short	0x00cf
    c2ec:	01010101 	.word	0x01010101
    c2f0:	011b      	.short	0x011b
	if (!conn->role) {
    c2f2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	db3b      	blt.n	c372 <event_connection_prepare+0x26a>
		if (conn->llcp_req != conn->llcp_ack) {
    c2fa:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    c2fe:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c302:	428b      	cmp	r3, r1
    c304:	d1de      	bne.n	c2c4 <event_connection_prepare+0x1bc>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c306:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    c30a:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c30e:	2205      	movs	r2, #5
    c310:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    c314:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c318:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    c31c:	2301      	movs	r3, #1
    c31e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    c322:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    c326:	b122      	cbz	r2, c332 <event_connection_prepare+0x22a>
				((conn->llcp_conn_param.interval /
    c328:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    c32c:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    c32e:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    c332:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    c336:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c33a:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    c33e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c342:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    c346:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c34a:	2202      	movs	r2, #2
    c34c:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    c350:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    c354:	f082 0208 	eor.w	r2, r2, #8
    c358:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c35c:	f362 0382 	bfi	r3, r2, #2, #1
    c360:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    c364:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    c366:	2301      	movs	r3, #1
    c368:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c36c:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    c370:	e7a8      	b.n	c2c4 <event_connection_prepare+0x1bc>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c372:	4827      	ldr	r0, [pc, #156]	; (c410 <event_connection_prepare+0x308>)
    c374:	f7fa ff1d 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    c378:	4601      	mov	r1, r0
    c37a:	2800      	cmp	r0, #0
    c37c:	d0a2      	beq.n	c2c4 <event_connection_prepare+0x1bc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c37e:	7903      	ldrb	r3, [r0, #4]
    c380:	f043 0303 	orr.w	r3, r3, #3
    c384:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    c386:	2318      	movs	r3, #24
    c388:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    c38a:	2310      	movs	r3, #16
    c38c:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    c38e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c392:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    c394:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    c396:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c39a:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    c39c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c3a0:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    c3a2:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    c3a6:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    c3a8:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    c3ac:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    c3b0:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    c3b4:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    c3b8:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    c3bc:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    c3c0:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    c3c4:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    c3c8:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    c3cc:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    c3d0:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    c3d4:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    c3d8:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    c3dc:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    c3e0:	4620      	mov	r0, r4
    c3e2:	f7ff fdc3 	bl	bf6c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c3e6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c3ea:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    c3ee:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    c3f2:	e767      	b.n	c2c4 <event_connection_prepare+0x1bc>
    c3f4:	200008c0 	.word	0x200008c0
    c3f8:	0001563e 	.word	0x0001563e
    c3fc:	20003a5c 	.word	0x20003a5c
    c400:	000167b9 	.word	0x000167b9
    c404:	00016808 	.word	0x00016808
    c408:	0001814c 	.word	0x0001814c
    c40c:	00018b03 	.word	0x00018b03
    c410:	20000a1c 	.word	0x20000a1c
    c414:	20003da8 	.word	0x20003da8
    c418:	000180e8 	.word	0x000180e8
    c41c:	000189c7 	.word	0x000189c7
	if (conn->pause_tx) {
    c420:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c424:	0718      	lsls	r0, r3, #28
    c426:	f53f af4d 	bmi.w	c2c4 <event_connection_prepare+0x1bc>
	node_rx = packet_rx_reserve_get(2);
    c42a:	2002      	movs	r0, #2
    c42c:	f7fd fd0c 	bl	9e48 <packet_rx_reserve_get>
	if (!node_rx) {
    c430:	2800      	cmp	r0, #0
    c432:	f43f af47 	beq.w	c2c4 <event_connection_prepare+0x1bc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    c436:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c43a:	2203      	movs	r2, #3
    c43c:	f362 0302 	bfi	r3, r2, #0, #3
    c440:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    c444:	8c23      	ldrh	r3, [r4, #32]
    c446:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c448:	2301      	movs	r3, #1
    c44a:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c44c:	7a03      	ldrb	r3, [r0, #8]
    c44e:	4313      	orrs	r3, r2
    c450:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c452:	2318      	movs	r3, #24
    c454:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c456:	230f      	movs	r3, #15
    c458:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    c45a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c45e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    c460:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    c462:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c466:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    c468:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c46c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    c46e:	f7fe fb85 	bl	ab7c <packet_rx_enqueue>
    c472:	e727      	b.n	c2c4 <event_connection_prepare+0x1bc>
		LL_ASSERT(0);
    c474:	4bbe      	ldr	r3, [pc, #760]	; (c770 <event_connection_prepare+0x668>)
    c476:	9301      	str	r3, [sp, #4]
    c478:	9300      	str	r3, [sp, #0]
    c47a:	4bbe      	ldr	r3, [pc, #760]	; (c774 <event_connection_prepare+0x66c>)
    c47c:	681c      	ldr	r4, [r3, #0]
    c47e:	4bbe      	ldr	r3, [pc, #760]	; (c778 <event_connection_prepare+0x670>)
		LL_ASSERT(0);
    c480:	4abe      	ldr	r2, [pc, #760]	; (c77c <event_connection_prepare+0x674>)
    c482:	49bf      	ldr	r1, [pc, #764]	; (c780 <event_connection_prepare+0x678>)
    c484:	48bf      	ldr	r0, [pc, #764]	; (c784 <event_connection_prepare+0x67c>)
    c486:	e651      	b.n	c12c <event_connection_prepare+0x24>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c488:	48bf      	ldr	r0, [pc, #764]	; (c788 <event_connection_prepare+0x680>)
    c48a:	f7fa fe92 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    c48e:	4601      	mov	r1, r0
    c490:	b360      	cbz	r0, c4ec <event_connection_prepare+0x3e4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c492:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c496:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c49a:	2201      	movs	r2, #1
    c49c:	f362 0301 	bfi	r3, r2, #0, #2
    c4a0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c4a4:	b2db      	uxtb	r3, r3
    c4a6:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c4aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c4ae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c4b2:	f363 07c5 	bfi	r7, r3, #3, #3
    c4b6:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c4ba:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c4be:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c4c2:	f367 1286 	bfi	r2, r7, #6, #1
    c4c6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4ca:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    c4cc:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4ce:	f042 0203 	orr.w	r2, r2, #3
    c4d2:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    c4d4:	2203      	movs	r2, #3
    c4d6:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c4d8:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    c4da:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c4dc:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    c4de:	4620      	mov	r0, r4
    c4e0:	f7ff fd44 	bl	bf6c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c4e4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c4e8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    c4ec:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c4f0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c4f4:	429a      	cmp	r2, r3
    c4f6:	f000 8302 	beq.w	cafe <event_connection_prepare+0x9f6>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c4fa:	2005      	movs	r0, #5
    c4fc:	f7ff fb96 	bl	bc2c <event_stop.constprop.31>
		switch (conn->llcp_type) {
    c500:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    c504:	3b01      	subs	r3, #1
    c506:	2b07      	cmp	r3, #7
    c508:	f200 85ba 	bhi.w	d080 <event_connection_prepare+0xf78>
    c50c:	e8df f013 	tbh	[pc, r3, lsl #1]
    c510:	02d0006e 	.word	0x02d0006e
    c514:	046a034f 	.word	0x046a034f
    c518:	05b8049a 	.word	0x05b8049a
    c51c:	050a04f6 	.word	0x050a04f6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c520:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    c524:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    c528:	f3c3 0282 	ubfx	r2, r3, #2, #3
    c52c:	0791      	lsls	r1, r2, #30
    c52e:	d544      	bpl.n	c5ba <event_connection_prepare+0x4b2>
			conn->llcp_phy.tx = BIT(1);
    c530:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    c532:	f362 0384 	bfi	r3, r2, #2, #3
    c536:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    c53a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c53e:	095a      	lsrs	r2, r3, #5
    c540:	0790      	lsls	r0, r2, #30
    c542:	d543      	bpl.n	c5cc <event_connection_prepare+0x4c4>
			conn->llcp_phy.rx = BIT(1);
    c544:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    c546:	f362 1347 	bfi	r3, r2, #5, #3
    c54a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    c54e:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    c552:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c556:	f3c2 0182 	ubfx	r1, r2, #2, #3
    c55a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c55e:	428b      	cmp	r3, r1
    c560:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    c564:	bf14      	ite	ne
    c566:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    c56a:	f36f 0384 	bfceq	r3, #2, #3
    c56e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    c572:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c576:	0952      	lsrs	r2, r2, #5
    c578:	f003 0307 	and.w	r3, r3, #7
    c57c:	4293      	cmp	r3, r2
    c57e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    c582:	bf14      	ite	ne
    c584:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    c588:	f36f 1347 	bfceq	r3, #5, #3
    c58c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    c590:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c594:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    c598:	f043 0301 	orr.w	r3, r3, #1
    c59c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c5a0:	f362 0341 	bfi	r3, r2, #1, #1
    c5a4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    c5a8:	2308      	movs	r3, #8
    c5aa:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c5ae:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c5b2:	3b01      	subs	r3, #1
    c5b4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c5b8:	e798      	b.n	c4ec <event_connection_prepare+0x3e4>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    c5ba:	07d7      	lsls	r7, r2, #31
    c5bc:	d501      	bpl.n	c5c2 <event_connection_prepare+0x4ba>
			conn->llcp_phy.tx = BIT(0);
    c5be:	2201      	movs	r2, #1
    c5c0:	e7b7      	b.n	c532 <event_connection_prepare+0x42a>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    c5c2:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    c5c6:	bf18      	it	ne
    c5c8:	2204      	movne	r2, #4
    c5ca:	e7b2      	b.n	c532 <event_connection_prepare+0x42a>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    c5cc:	07d1      	lsls	r1, r2, #31
    c5ce:	d501      	bpl.n	c5d4 <event_connection_prepare+0x4cc>
			conn->llcp_phy.rx = BIT(0);
    c5d0:	2201      	movs	r2, #1
    c5d2:	e7b8      	b.n	c546 <event_connection_prepare+0x43e>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    c5d4:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    c5d8:	bf18      	it	ne
    c5da:	2204      	movne	r2, #4
    c5dc:	e7b3      	b.n	c546 <event_connection_prepare+0x43e>
		LL_ASSERT(0);
    c5de:	4b64      	ldr	r3, [pc, #400]	; (c770 <event_connection_prepare+0x668>)
    c5e0:	9301      	str	r3, [sp, #4]
    c5e2:	9300      	str	r3, [sp, #0]
    c5e4:	4b63      	ldr	r3, [pc, #396]	; (c774 <event_connection_prepare+0x66c>)
    c5e6:	681c      	ldr	r4, [r3, #0]
    c5e8:	4b68      	ldr	r3, [pc, #416]	; (c78c <event_connection_prepare+0x684>)
    c5ea:	e749      	b.n	c480 <event_connection_prepare+0x378>
	if (!conn_upd) {
    c5ec:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c5f0:	b90b      	cbnz	r3, c5f6 <event_connection_prepare+0x4ee>
		_radio.conn_upd = conn;
    c5f2:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    c5f6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c5fa:	f013 0303 	ands.w	r3, r3, #3
    c5fe:	d06c      	beq.n	c6da <event_connection_prepare+0x5d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c600:	4861      	ldr	r0, [pc, #388]	; (c788 <event_connection_prepare+0x680>)
    c602:	f7fa fdd6 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    c606:	4607      	mov	r7, r0
    c608:	2800      	cmp	r0, #0
    c60a:	f000 8278 	beq.w	cafe <event_connection_prepare+0x9f6>
		switch (conn->llcp.conn_upd.state) {
    c60e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c612:	f003 0303 	and.w	r3, r3, #3
    c616:	2b01      	cmp	r3, #1
    c618:	d05d      	beq.n	c6d6 <event_connection_prepare+0x5ce>
    c61a:	2b02      	cmp	r3, #2
    c61c:	d154      	bne.n	c6c8 <event_connection_prepare+0x5c0>
			fp_mayfly_select_or_use =
    c61e:	4a5c      	ldr	r2, [pc, #368]	; (c790 <event_connection_prepare+0x688>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    c620:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c624:	f36f 0301 	bfc	r3, #0, #2
    c628:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    c62c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c62e:	3306      	adds	r3, #6
    c630:	4433      	add	r3, r6
    c632:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    c634:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c638:	7939      	ldrb	r1, [r7, #4]
    c63a:	f041 0103 	orr.w	r1, r1, #3
    c63e:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    c640:	210c      	movs	r1, #12
    c642:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    c644:	2100      	movs	r1, #0
    c646:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    c648:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    c64c:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c64e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    c652:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c656:	fbb1 f1f0 	udiv	r1, r1, r0
    c65a:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    c65e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    c662:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    c666:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c66a:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    c66e:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    c672:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    c676:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c67a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    c67c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c680:	2900      	cmp	r1, #0
    c682:	da0b      	bge.n	c69c <event_connection_prepare+0x594>
			u32_t ticks_prepare_to_start =
    c684:	68a3      	ldr	r3, [r4, #8]
    c686:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    c68c:	4283      	cmp	r3, r0
    c68e:	bf2c      	ite	cs
    c690:	4443      	addcs	r3, r8
    c692:	eb08 0300 	addcc.w	r3, r8, r0
    c696:	1a5b      	subs	r3, r3, r1
    c698:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    c69c:	f107 0309 	add.w	r3, r7, #9
    c6a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    c6a4:	4b3b      	ldr	r3, [pc, #236]	; (c794 <event_connection_prepare+0x68c>)
    c6a6:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c6a8:	2201      	movs	r2, #1
    c6aa:	4611      	mov	r1, r2
    c6ac:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    c6ae:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c6b0:	f7fa fe4a 	bl	7348 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c6b4:	2800      	cmp	r0, #0
    c6b6:	f000 821e 	beq.w	caf6 <event_connection_prepare+0x9ee>
    c6ba:	4b2d      	ldr	r3, [pc, #180]	; (c770 <event_connection_prepare+0x668>)
    c6bc:	9301      	str	r3, [sp, #4]
    c6be:	9300      	str	r3, [sp, #0]
    c6c0:	4b2c      	ldr	r3, [pc, #176]	; (c774 <event_connection_prepare+0x66c>)
    c6c2:	681c      	ldr	r4, [r3, #0]
    c6c4:	4b34      	ldr	r3, [pc, #208]	; (c798 <event_connection_prepare+0x690>)
    c6c6:	e5da      	b.n	c27e <event_connection_prepare+0x176>
			LL_ASSERT(0);
    c6c8:	4b29      	ldr	r3, [pc, #164]	; (c770 <event_connection_prepare+0x668>)
    c6ca:	9301      	str	r3, [sp, #4]
    c6cc:	9300      	str	r3, [sp, #0]
    c6ce:	4b29      	ldr	r3, [pc, #164]	; (c774 <event_connection_prepare+0x66c>)
    c6d0:	681c      	ldr	r4, [r3, #0]
    c6d2:	4b32      	ldr	r3, [pc, #200]	; (c79c <event_connection_prepare+0x694>)
    c6d4:	e6d4      	b.n	c480 <event_connection_prepare+0x378>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    c6d6:	4a32      	ldr	r2, [pc, #200]	; (c7a0 <event_connection_prepare+0x698>)
    c6d8:	e7a2      	b.n	c620 <event_connection_prepare+0x518>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    c6da:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    c6de:	1bf7      	subs	r7, r6, r7
    c6e0:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    c6e2:	043a      	lsls	r2, r7, #16
    c6e4:	f100 820b 	bmi.w	cafe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    c6e8:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c6ec:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c6f0:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c6f4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c6f8:	428a      	cmp	r2, r1
    c6fa:	d009      	beq.n	c710 <event_connection_prepare+0x608>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    c6fc:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c700:	f002 0207 	and.w	r2, r2, #7
    c704:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c706:	bf04      	itt	eq
    c708:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    c70c:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    c710:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c714:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    c716:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c718:	bf08      	it	eq
    c71a:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c71e:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c720:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c722:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c726:	429a      	cmp	r2, r3
    c728:	d114      	bne.n	c754 <event_connection_prepare+0x64c>
		     conn->conn_interval) ||
    c72a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c72e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c730:	4299      	cmp	r1, r3
    c732:	d10f      	bne.n	c754 <event_connection_prepare+0x64c>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c734:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c738:	435a      	muls	r2, r3
    c73a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c73e:	f242 7110 	movw	r1, #10000	; 0x2710
    c742:	fb01 2303 	mla	r3, r1, r3, r2
    c746:	3b01      	subs	r3, #1
    c748:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c74c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c74e:	b29b      	uxth	r3, r3
    c750:	429a      	cmp	r2, r3
    c752:	d03a      	beq.n	c7ca <event_connection_prepare+0x6c2>
			node_rx = packet_rx_reserve_get(2);
    c754:	2002      	movs	r0, #2
    c756:	f7fd fb77 	bl	9e48 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c75a:	bb28      	cbnz	r0, c7a8 <event_connection_prepare+0x6a0>
    c75c:	4b04      	ldr	r3, [pc, #16]	; (c770 <event_connection_prepare+0x668>)
    c75e:	9301      	str	r3, [sp, #4]
    c760:	9300      	str	r3, [sp, #0]
    c762:	4b04      	ldr	r3, [pc, #16]	; (c774 <event_connection_prepare+0x66c>)
    c764:	681c      	ldr	r4, [r3, #0]
    c766:	4b0d      	ldr	r3, [pc, #52]	; (c79c <event_connection_prepare+0x694>)
		LL_ASSERT(node_rx);
    c768:	4a04      	ldr	r2, [pc, #16]	; (c77c <event_connection_prepare+0x674>)
    c76a:	4905      	ldr	r1, [pc, #20]	; (c780 <event_connection_prepare+0x678>)
    c76c:	480d      	ldr	r0, [pc, #52]	; (c7a4 <event_connection_prepare+0x69c>)
    c76e:	e4dd      	b.n	c12c <event_connection_prepare+0x24>
    c770:	0001563e 	.word	0x0001563e
    c774:	20003a5c 	.word	0x20003a5c
    c778:	000180fd 	.word	0x000180fd
    c77c:	000167b9 	.word	0x000167b9
    c780:	00016808 	.word	0x00016808
    c784:	00016758 	.word	0x00016758
    c788:	20000a1c 	.word	0x20000a1c
    c78c:	00018122 	.word	0x00018122
    c790:	0000a8c9 	.word	0x0000a8c9
    c794:	20003d98 	.word	0x20003d98
    c798:	000180b1 	.word	0x000180b1
    c79c:	000180c5 	.word	0x000180c5
    c7a0:	0000b625 	.word	0x0000b625
    c7a4:	000188f3 	.word	0x000188f3
			node_rx->hdr.handle = conn->handle;
    c7a8:	8c23      	ldrh	r3, [r4, #32]
    c7aa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c7ac:	2308      	movs	r3, #8
    c7ae:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c7b0:	2300      	movs	r3, #0
    c7b2:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c7b4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c7b8:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c7ba:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c7be:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c7c0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c7c4:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c7c6:	f7fe f9d9 	bl	ab7c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c7ca:	6823      	ldr	r3, [r4, #0]
    c7cc:	6866      	ldr	r6, [r4, #4]
    c7ce:	2b00      	cmp	r3, #0
    c7d0:	da09      	bge.n	c7e6 <event_connection_prepare+0x6de>
			u32_t ticks_prepare_to_start =
    c7d2:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c7d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c7d8:	42b0      	cmp	r0, r6
    c7da:	bf2c      	ite	cs
    c7dc:	4480      	addcs	r8, r0
    c7de:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c7e0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c7e2:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c7e6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c7e8:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c7ec:	49a0      	ldr	r1, [pc, #640]	; (ca70 <event_connection_prepare+0x968>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c7ee:	fb13 f307 	smulbb	r3, r3, r7
    c7f2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c7f4:	fbb3 f2fa 	udiv	r2, r3, sl
    c7f8:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c7fc:	fb1a f009 	smulbb	r0, sl, r9
    c800:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c802:	4283      	cmp	r3, r0
    c804:	f080 80c1 	bcs.w	c98a <event_connection_prepare+0x882>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c808:	1ac0      	subs	r0, r0, r3
    c80a:	f240 1223 	movw	r2, #291	; 0x123
    c80e:	4342      	muls	r2, r0
    c810:	17c3      	asrs	r3, r0, #31
    c812:	fb01 2303 	mla	r3, r1, r3, r2
    c816:	fba0 0101 	umull	r0, r1, r0, r1
    c81a:	4419      	add	r1, r3
    c81c:	a392      	add	r3, pc, #584	; (adr r3, ca68 <event_connection_prepare+0x960>)
    c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c822:	f7f3 fcf7 	bl	214 <__aeabi_uldivmod>
    c826:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c82a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c82e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c830:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c832:	f8df b278 	ldr.w	fp, [pc, #632]	; caac <event_connection_prepare+0x9a4>
    c836:	1bdb      	subs	r3, r3, r7
    c838:	444b      	add	r3, r9
    c83a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c83c:	6823      	ldr	r3, [r4, #0]
    c83e:	42b3      	cmp	r3, r6
    c840:	bf38      	it	cc
    c842:	4633      	movcc	r3, r6
    c844:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c846:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c84a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c84e:	2b00      	cmp	r3, #0
    c850:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c854:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c856:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c85a:	f280 80a7 	bge.w	c9ac <event_connection_prepare+0x8a4>
				conn->slave.window_widening_periodic_us *
    c85e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c860:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c862:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c866:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c86a:	4a82      	ldr	r2, [pc, #520]	; (ca74 <event_connection_prepare+0x96c>)
    c86c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c870:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c874:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c87c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c880:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c882:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c884:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c888:	4b7b      	ldr	r3, [pc, #492]	; (ca78 <event_connection_prepare+0x970>)
				conn->llcp.conn_upd.win_size * 1250;
    c88a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c88e:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c892:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c896:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c898:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c89c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c89e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c8a0:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c8a2:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c8a4:	429f      	cmp	r7, r3
    c8a6:	bf94      	ite	ls
    c8a8:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c8aa:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c8ac:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c8ae:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c8b0:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c8b2:	fba0 010b 	umull	r0, r1, r0, fp
    c8b6:	a36c      	add	r3, pc, #432	; (adr r3, ca68 <event_connection_prepare+0x960>)
    c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8bc:	f7f3 fcaa 	bl	214 <__aeabi_uldivmod>
    c8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8c2:	1a1b      	subs	r3, r3, r0
    c8c4:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c8c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c8c8:	fbb3 f0f8 	udiv	r0, r3, r8
    c8cc:	fb08 f000 	mul.w	r0, r8, r0
    c8d0:	a365      	add	r3, pc, #404	; (adr r3, ca68 <event_connection_prepare+0x960>)
    c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8d6:	fba0 010b 	umull	r0, r1, r0, fp
    c8da:	f7f3 fc9b 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c8de:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c8e0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c8e4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c8e8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c8ec:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c8ee:	f242 7110 	movw	r1, #10000	; 0x2710
    c8f2:	fb01 6303 	mla	r3, r1, r3, r6
    c8f6:	3b01      	subs	r3, #1
    c8f8:	fbb3 f3f6 	udiv	r3, r3, r6
    c8fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c8fe:	4b5f      	ldr	r3, [pc, #380]	; (ca7c <event_connection_prepare+0x974>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c900:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c904:	4433      	add	r3, r6
    c906:	fbb3 f3f6 	udiv	r3, r3, r6
    c90a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c90e:	4b5c      	ldr	r3, [pc, #368]	; (ca80 <event_connection_prepare+0x978>)
    c910:	4433      	add	r3, r6
    c912:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c916:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c918:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c91a:	4299      	cmp	r1, r3
    c91c:	bfc4      	itt	gt
    c91e:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c922:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c924:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c928:	bfc8      	it	gt
    c92a:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c92c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c930:	bfc8      	it	gt
    c932:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c934:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c938:	bf08      	it	eq
    c93a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c93e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c942:	2000      	movs	r0, #0
    c944:	2101      	movs	r1, #1
    c946:	f006 fadb 	bl	12f00 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c94a:	2200      	movs	r2, #0
    c94c:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c94e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c950:	4610      	mov	r0, r2
    c952:	f7fa fcd1 	bl	72f8 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c956:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c95a:	f641 2385 	movw	r3, #6789	; 0x1a85
    c95e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c960:	3207      	adds	r2, #7
		ticker_status =
    c962:	9300      	str	r3, [sp, #0]
    c964:	b2d2      	uxtb	r2, r2
    c966:	4b47      	ldr	r3, [pc, #284]	; (ca84 <event_connection_prepare+0x97c>)
    c968:	4608      	mov	r0, r1
    c96a:	f7fb fb4b 	bl	8004 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c96e:	f030 0802 	bics.w	r8, r0, #2
    c972:	d028      	beq.n	c9c6 <event_connection_prepare+0x8be>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c974:	4b44      	ldr	r3, [pc, #272]	; (ca88 <event_connection_prepare+0x980>)
    c976:	9301      	str	r3, [sp, #4]
    c978:	9300      	str	r3, [sp, #0]
    c97a:	4b44      	ldr	r3, [pc, #272]	; (ca8c <event_connection_prepare+0x984>)
    c97c:	4a44      	ldr	r2, [pc, #272]	; (ca90 <event_connection_prepare+0x988>)
    c97e:	681c      	ldr	r4, [r3, #0]
    c980:	4944      	ldr	r1, [pc, #272]	; (ca94 <event_connection_prepare+0x98c>)
    c982:	4b45      	ldr	r3, [pc, #276]	; (ca98 <event_connection_prepare+0x990>)
    c984:	4845      	ldr	r0, [pc, #276]	; (ca9c <event_connection_prepare+0x994>)
    c986:	f7ff bbd1 	b.w	c12c <event_connection_prepare+0x24>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c98a:	fb0a 3212 	mls	r2, sl, r2, r3
    c98e:	b292      	uxth	r2, r2
    c990:	fba2 0101 	umull	r0, r1, r2, r1
    c994:	f240 1323 	movw	r3, #291	; 0x123
    c998:	fb03 1102 	mla	r1, r3, r2, r1
    c99c:	a332      	add	r3, pc, #200	; (adr r3, ca68 <event_connection_prepare+0x960>)
    c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9a2:	f7f3 fc37 	bl	214 <__aeabi_uldivmod>
    c9a6:	eba8 0300 	sub.w	r3, r8, r0
    c9aa:	e740      	b.n	c82e <event_connection_prepare+0x726>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c9ac:	990c      	ldr	r1, [sp, #48]	; 0x30
    c9ae:	a32e      	add	r3, pc, #184	; (adr r3, ca68 <event_connection_prepare+0x960>)
    c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9b4:	fba1 010b 	umull	r0, r1, r1, fp
    c9b8:	f7f3 fc2c 	bl	214 <__aeabi_uldivmod>
    c9bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c9c0:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c9c2:	4635      	mov	r5, r6
    c9c4:	e78e      	b.n	c8e4 <event_connection_prepare+0x7dc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c9c6:	fba5 ab0b 	umull	sl, fp, r5, fp
    c9ca:	a327      	add	r3, pc, #156	; (adr r3, ca68 <event_connection_prepare+0x960>)
    c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9d0:	4650      	mov	r0, sl
    c9d2:	4659      	mov	r1, fp
    c9d4:	f7f3 fc1e 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c9d8:	4a31      	ldr	r2, [pc, #196]	; (caa0 <event_connection_prepare+0x998>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c9da:	f894 6020 	ldrb.w	r6, [r4, #32]
    c9de:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c9e2:	2307      	movs	r3, #7
    c9e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c9e8:	2100      	movs	r1, #0
    c9ea:	4343      	muls	r3, r0
    c9ec:	fb02 3301 	mla	r3, r2, r1, r3
    c9f0:	fba0 0102 	umull	r0, r1, r0, r2
    c9f4:	ebba 0000 	subs.w	r0, sl, r0
    c9f8:	4419      	add	r1, r3
    c9fa:	eb6b 0101 	sbc.w	r1, fp, r1
    c9fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ca02:	2300      	movs	r3, #0
    ca04:	f7f3 fc06 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca08:	68e3      	ldr	r3, [r4, #12]
    ca0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ca0c:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    ca10:	4924      	ldr	r1, [pc, #144]	; (caa4 <event_connection_prepare+0x99c>)
		ticker_status =
    ca12:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca14:	441a      	add	r2, r3
    ca16:	4613      	mov	r3, r2
    ca18:	4a23      	ldr	r2, [pc, #140]	; (caa8 <event_connection_prepare+0x9a0>)
		ticker_status =
    ca1a:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca1c:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    ca20:	bf38      	it	cc
    ca22:	460a      	movcc	r2, r1
    ca24:	3607      	adds	r6, #7
		ticker_status =
    ca26:	f641 2195 	movw	r1, #6805	; 0x1a95
    ca2a:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ca2c:	b2f6      	uxtb	r6, r6
		ticker_status =
    ca2e:	4915      	ldr	r1, [pc, #84]	; (ca84 <event_connection_prepare+0x97c>)
    ca30:	9107      	str	r1, [sp, #28]
    ca32:	9205      	str	r2, [sp, #20]
    ca34:	9406      	str	r4, [sp, #24]
    ca36:	f8cd 800c 	str.w	r8, [sp, #12]
    ca3a:	9501      	str	r5, [sp, #4]
    ca3c:	9700      	str	r7, [sp, #0]
    ca3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca40:	4632      	mov	r2, r6
    ca42:	4641      	mov	r1, r8
    ca44:	4640      	mov	r0, r8
    ca46:	f7fb fa3f 	bl	7ec8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca4a:	f030 0002 	bics.w	r0, r0, #2
    ca4e:	d191      	bne.n	c974 <event_connection_prepare+0x86c>
		if (mayfly_was_enabled) {
    ca50:	f1b9 0f00 	cmp.w	r9, #0
    ca54:	f000 838f 	beq.w	d176 <event_connection_prepare+0x106e>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ca58:	2201      	movs	r2, #1
    ca5a:	4611      	mov	r1, r2
}
    ca5c:	b00f      	add	sp, #60	; 0x3c
    ca5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ca62:	f7fa bc49 	b.w	72f8 <mayfly_enable>
    ca66:	bf00      	nop
    ca68:	1afd498d 	.word	0x1afd498d
    ca6c:	00000007 	.word	0x00000007
    ca70:	09ce5400 	.word	0x09ce5400
    ca74:	000184ac 	.word	0x000184ac
    ca78:	000f4240 	.word	0x000f4240
    ca7c:	026259ff 	.word	0x026259ff
    ca80:	01c9c37f 	.word	0x01c9c37f
    ca84:	0000ada5 	.word	0x0000ada5
    ca88:	0001563e 	.word	0x0001563e
    ca8c:	20003a5c 	.word	0x20003a5c
    ca90:	000167b9 	.word	0x000167b9
    ca94:	00016808 	.word	0x00016808
    ca98:	000180c5 	.word	0x000180c5
    ca9c:	0001828d 	.word	0x0001828d
    caa0:	1afd498d 	.word	0x1afd498d
    caa4:	0000d339 	.word	0x0000d339
    caa8:	0000d33d 	.word	0x0000d33d
    caac:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    cab0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cab4:	2b00      	cmp	r3, #0
    cab6:	d05e      	beq.n	cb76 <event_connection_prepare+0xa6e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cab8:	48c9      	ldr	r0, [pc, #804]	; (cde0 <event_connection_prepare+0xcd8>)
    caba:	f7fa fb7a 	bl	71b2 <mem_acquire>
		if (node_tx) {
    cabe:	4607      	mov	r7, r0
    cac0:	b1e8      	cbz	r0, cafe <event_connection_prepare+0x9f6>
			conn->llcp.chan_map.initiate = 0;
    cac2:	2300      	movs	r3, #0
    cac4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    cac8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    caca:	3306      	adds	r3, #6
    cacc:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    cace:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cad2:	7903      	ldrb	r3, [r0, #4]
    cad4:	f043 0303 	orr.w	r3, r3, #3
    cad8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    cada:	2308      	movs	r3, #8
    cadc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cade:	2301      	movs	r3, #1
    cae0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    cae2:	2205      	movs	r2, #5
    cae4:	f104 0179 	add.w	r1, r4, #121	; 0x79
    cae8:	3008      	adds	r0, #8
    caea:	f7f5 f99b 	bl	1e24 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    caee:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    caf2:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    caf6:	4639      	mov	r1, r7
    caf8:	4620      	mov	r0, r4
    cafa:	f7ff fa37 	bl	bf6c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    cafe:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    cb02:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    cb06:	429a      	cmp	r2, r3
    cb08:	d01e      	beq.n	cb48 <event_connection_prepare+0xa40>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cb0a:	2005      	movs	r0, #5
    cb0c:	f7ff f88e 	bl	bc2c <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb10:	48b3      	ldr	r0, [pc, #716]	; (cde0 <event_connection_prepare+0xcd8>)
    cb12:	f7fa fb4e 	bl	71b2 <mem_acquire>
		if (node_tx) {
    cb16:	4601      	mov	r1, r0
    cb18:	b1b0      	cbz	r0, cb48 <event_connection_prepare+0xa40>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    cb1a:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    cb1e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb22:	7903      	ldrb	r3, [r0, #4]
    cb24:	f043 0303 	orr.w	r3, r3, #3
    cb28:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    cb2a:	2302      	movs	r3, #2
    cb2c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cb2e:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    cb30:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    cb34:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    cb36:	4620      	mov	r0, r4
    cb38:	f7ff fa18 	bl	bf6c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    cb3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    cb3e:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    cb40:	bf98      	it	ls
    cb42:	3301      	addls	r3, #1
    cb44:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    cb48:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    cb4c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    cb50:	429a      	cmp	r2, r3
    cb52:	f000 82f7 	beq.w	d144 <event_connection_prepare+0x103c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    cb56:	2005      	movs	r0, #5
    cb58:	f7ff f868 	bl	bc2c <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    cb5c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    cb60:	f003 0303 	and.w	r3, r3, #3
    cb64:	2b03      	cmp	r3, #3
    cb66:	f200 8318 	bhi.w	d19a <event_connection_prepare+0x1092>
    cb6a:	e8df f013 	tbh	[pc, r3, lsl #1]
    cb6e:	0291      	.short	0x0291
    cb70:	02eb02eb 	.word	0x02eb02eb
    cb74:	0307      	.short	0x0307
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    cb76:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    cb7a:	1af3      	subs	r3, r6, r3
    cb7c:	041f      	lsls	r7, r3, #16
    cb7e:	d4be      	bmi.n	cafe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    cb80:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cb84:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    cb88:	f104 0717 	add.w	r7, r4, #23
    cb8c:	2205      	movs	r2, #5
    cb8e:	f104 0179 	add.w	r1, r4, #121	; 0x79
    cb92:	4638      	mov	r0, r7
    cb94:	f7f5 f946 	bl	1e24 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    cb98:	2105      	movs	r1, #5
    cb9a:	4638      	mov	r0, r7
    cb9c:	f7fa fcb4 	bl	7508 <util_ones_count_get>
		conn->data_chan_count =
    cba0:	7f63      	ldrb	r3, [r4, #29]
    cba2:	f360 0305 	bfi	r3, r0, #0, #6
    cba6:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    cba8:	2301      	movs	r3, #1
    cbaa:	7723      	strb	r3, [r4, #28]
    cbac:	e7a7      	b.n	cafe <event_connection_prepare+0x9f6>
	if (conn->llcp.encryption.initiate) {
    cbae:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    cbb2:	f1b9 0f00 	cmp.w	r9, #0
    cbb6:	d1a2      	bne.n	cafe <event_connection_prepare+0x9f6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cbb8:	4889      	ldr	r0, [pc, #548]	; (cde0 <event_connection_prepare+0xcd8>)
    cbba:	f7fa fafa 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    cbbe:	4607      	mov	r7, r0
    cbc0:	2800      	cmp	r0, #0
    cbc2:	d09c      	beq.n	cafe <event_connection_prepare+0x9f6>
	if (!conn->role) {
    cbc4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    cbc8:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    cbca:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    cbce:	db4d      	blt.n	cc6c <event_connection_prepare+0xb64>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    cbd0:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    cbd4:	465b      	mov	r3, fp
    cbd6:	464a      	mov	r2, r9
    cbd8:	f104 0194 	add.w	r1, r4, #148	; 0x94
    cbdc:	f104 0084 	add.w	r0, r4, #132	; 0x84
    cbe0:	f005 fd00 	bl	125e4 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    cbe4:	2210      	movs	r2, #16
    cbe6:	4659      	mov	r1, fp
    cbe8:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    cbec:	f7f5 f91a 	bl	1e24 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    cbf0:	f504 7189 	add.w	r1, r4, #274	; 0x112
    cbf4:	2208      	movs	r2, #8
    cbf6:	f204 1033 	addw	r0, r4, #307	; 0x133
    cbfa:	f7f5 f913 	bl	1e24 <memcpy>
		conn->ccm_rx.direction = 0;
    cbfe:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    cc02:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    cc06:	f369 0300 	bfi	r3, r9, #0, #1
    cc0a:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    cc0e:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    cc12:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    cc16:	f043 0301 	orr.w	r3, r3, #1
    cc1a:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    cc1e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    cc22:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    cc26:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    cc2a:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    cc2e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    cc32:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    cc36:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    cc3a:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    cc3e:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    cc42:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    cc46:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    cc4a:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    cc4e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    cc52:	4651      	mov	r1, sl
    cc54:	4620      	mov	r0, r4
    cc56:	f7ff fa17 	bl	c088 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    cc5a:	4639      	mov	r1, r7
    cc5c:	4620      	mov	r0, r4
    cc5e:	f7ff f985 	bl	bf6c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    cc62:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cc66:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    cc6a:	e748      	b.n	cafe <event_connection_prepare+0x9f6>
	else if (!conn->pause_tx || conn->refresh) {
    cc6c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cc70:	f003 0348 	and.w	r3, r3, #72	; 0x48
    cc74:	2b08      	cmp	r3, #8
    cc76:	f000 80a2 	beq.w	cdbe <event_connection_prepare+0xcb6>
		if (conn->llcp.encryption.error_code) {
    cc7a:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    cc7e:	f1b9 0f00 	cmp.w	r9, #0
    cc82:	d020      	beq.n	ccc6 <event_connection_prepare+0xbbe>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    cc84:	7903      	ldrb	r3, [r0, #4]
    cc86:	f043 0303 	orr.w	r3, r3, #3
    cc8a:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    cc8c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    cc90:	0698      	lsls	r0, r3, #26
    cc92:	d512      	bpl.n	ccba <event_connection_prepare+0xbb2>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    cc94:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    cc98:	0759      	lsls	r1, r3, #29
    cc9a:	d50e      	bpl.n	ccba <event_connection_prepare+0xbb2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    cc9c:	2311      	movs	r3, #17
    cc9e:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    cca0:	2303      	movs	r3, #3
    cca2:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    cca4:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    cca8:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    ccaa:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    ccac:	797b      	ldrb	r3, [r7, #5]
    ccae:	3301      	adds	r3, #1
    ccb0:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    ccb2:	2300      	movs	r3, #0
    ccb4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    ccb8:	e7cf      	b.n	cc5a <event_connection_prepare+0xb52>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    ccba:	230d      	movs	r3, #13
    ccbc:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    ccbe:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    ccc2:	2301      	movs	r3, #1
    ccc4:	e7f1      	b.n	ccaa <event_connection_prepare+0xba2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ccc6:	4846      	ldr	r0, [pc, #280]	; (cde0 <event_connection_prepare+0xcd8>)
    ccc8:	f7fa fa73 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    cccc:	4682      	mov	sl, r0
    ccce:	2800      	cmp	r0, #0
    ccd0:	f000 8314 	beq.w	d2fc <event_connection_prepare+0x11f4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ccd4:	7903      	ldrb	r3, [r0, #4]
    ccd6:	f043 0303 	orr.w	r3, r3, #3
    ccda:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ccdc:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    cce0:	230d      	movs	r3, #13
    cce2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    cce4:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    cce8:	f100 0308 	add.w	r3, r0, #8
    ccec:	4619      	mov	r1, r3
    ccee:	2208      	movs	r2, #8
    ccf0:	6868      	ldr	r0, [r5, #4]
    ccf2:	930d      	str	r3, [sp, #52]	; 0x34
    ccf4:	f006 fec0 	bl	13a78 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    ccf8:	f10a 0310 	add.w	r3, sl, #16
    ccfc:	4619      	mov	r1, r3
    ccfe:	465a      	mov	r2, fp
    cd00:	6868      	ldr	r0, [r5, #4]
    cd02:	930b      	str	r3, [sp, #44]	; 0x2c
    cd04:	f006 feb8 	bl	13a78 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    cd08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd0a:	2208      	movs	r2, #8
    cd0c:	4619      	mov	r1, r3
    cd0e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    cd12:	f7f5 f887 	bl	1e24 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    cd16:	465a      	mov	r2, fp
    cd18:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cd1a:	f504 708b 	add.w	r0, r4, #278	; 0x116
    cd1e:	f7f5 f881 	bl	1e24 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    cd22:	4651      	mov	r1, sl
    cd24:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    cd26:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    cd2a:	f7ff f91f 	bl	bf6c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    cd2e:	4653      	mov	r3, sl
    cd30:	464a      	mov	r2, r9
    cd32:	f104 0194 	add.w	r1, r4, #148	; 0x94
    cd36:	f104 0084 	add.w	r0, r4, #132	; 0x84
    cd3a:	f005 fc53 	bl	125e4 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    cd3e:	2210      	movs	r2, #16
    cd40:	4651      	mov	r1, sl
    cd42:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    cd46:	f7f5 f86d 	bl	1e24 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    cd4a:	2208      	movs	r2, #8
    cd4c:	f504 7189 	add.w	r1, r4, #274	; 0x112
    cd50:	f204 1033 	addw	r0, r4, #307	; 0x133
    cd54:	f7f5 f866 	bl	1e24 <memcpy>
			conn->ccm_rx.direction = 1;
    cd58:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    cd5c:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    cd60:	f043 0301 	orr.w	r3, r3, #1
    cd64:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    cd68:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    cd6c:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    cd70:	f369 0300 	bfi	r3, r9, #0, #1
    cd74:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    cd78:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    cd7c:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    cd80:	f043 0310 	orr.w	r3, r3, #16
    cd84:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cd88:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    cd8a:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cd8e:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    cd92:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    cd96:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    cd9a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    cd9e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    cda2:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    cda6:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    cdaa:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    cdae:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cdb2:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    cdb4:	2301      	movs	r3, #1
    cdb6:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cdb8:	2305      	movs	r3, #5
    cdba:	71fb      	strb	r3, [r7, #7]
    cdbc:	e74d      	b.n	cc5a <event_connection_prepare+0xb52>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    cdbe:	4651      	mov	r1, sl
    cdc0:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    cdc4:	f7ff f960 	bl	c088 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    cdc8:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    cdcc:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    cdd0:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    cdd4:	f369 03c3 	bfi	r3, r9, #3, #1
    cdd8:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    cddc:	e73d      	b.n	cc5a <event_connection_prepare+0xb52>
    cdde:	bf00      	nop
    cde0:	20000a1c 	.word	0x20000a1c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cde4:	48b5      	ldr	r0, [pc, #724]	; (d0bc <event_connection_prepare+0xfb4>)
    cde6:	f7fa f9e4 	bl	71b2 <mem_acquire>
	if (node_tx) {
    cdea:	4607      	mov	r7, r0
    cdec:	2800      	cmp	r0, #0
    cdee:	f43f ae86 	beq.w	cafe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    cdf2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cdf6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    cdfa:	4bb1      	ldr	r3, [pc, #708]	; (d0c0 <event_connection_prepare+0xfb8>)
    cdfc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce00:	7903      	ldrb	r3, [r0, #4]
    ce02:	f043 0303 	orr.w	r3, r3, #3
    ce06:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    ce08:	2309      	movs	r3, #9
    ce0a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    ce0c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ce10:	2b00      	cmp	r3, #0
    ce12:	bfac      	ite	ge
    ce14:	2308      	movge	r3, #8
    ce16:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ce18:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    ce1a:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ce1c:	2100      	movs	r1, #0
    ce1e:	4410      	add	r0, r2
    ce20:	f7f5 f82c 	bl	1e7c <memset>
			conn->llcp_features & 0xFF;
    ce24:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    ce28:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    ce2a:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    ce2c:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    ce2e:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    ce30:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    ce32:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    ce34:	4620      	mov	r0, r4
    ce36:	f7ff f899 	bl	bf6c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ce3a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ce3e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    ce42:	e65c      	b.n	cafe <event_connection_prepare+0x9f6>
	if (conn->llcp_version.tx == 0) {
    ce44:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    ce48:	07da      	lsls	r2, r3, #31
    ce4a:	d424      	bmi.n	ce96 <event_connection_prepare+0xd8e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ce4c:	489b      	ldr	r0, [pc, #620]	; (d0bc <event_connection_prepare+0xfb4>)
    ce4e:	f7fa f9b0 	bl	71b2 <mem_acquire>
		if (node_tx) {
    ce52:	4601      	mov	r1, r0
    ce54:	2800      	cmp	r0, #0
    ce56:	f43f ae52 	beq.w	cafe <event_connection_prepare+0x9f6>
			conn->llcp_ack = conn->llcp_req;
    ce5a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ce5e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    ce62:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    ce66:	f043 0301 	orr.w	r3, r3, #1
    ce6a:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce6e:	7903      	ldrb	r3, [r0, #4]
    ce70:	f043 0303 	orr.w	r3, r3, #3
    ce74:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    ce76:	2306      	movs	r3, #6
    ce78:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    ce7a:	230c      	movs	r3, #12
    ce7c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    ce7e:	2309      	movs	r3, #9
    ce80:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    ce82:	f06f 030e 	mvn.w	r3, #14
    ce86:	7243      	strb	r3, [r0, #9]
    ce88:	2305      	movs	r3, #5
    ce8a:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    ce8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ce90:	72c3      	strb	r3, [r0, #11]
    ce92:	7303      	strb	r3, [r0, #12]
    ce94:	e7ce      	b.n	ce34 <event_connection_prepare+0xd2c>
	} else if (conn->llcp_version.rx != 0) {
    ce96:	079b      	lsls	r3, r3, #30
    ce98:	d528      	bpl.n	ceec <event_connection_prepare+0xde4>
		conn->llcp_ack = conn->llcp_req;
    ce9a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ce9e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    cea2:	2002      	movs	r0, #2
    cea4:	f7fc ffd0 	bl	9e48 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cea8:	b930      	cbnz	r0, ceb8 <event_connection_prepare+0xdb0>
    ceaa:	4b86      	ldr	r3, [pc, #536]	; (d0c4 <event_connection_prepare+0xfbc>)
    ceac:	9301      	str	r3, [sp, #4]
    ceae:	9300      	str	r3, [sp, #0]
    ceb0:	4b85      	ldr	r3, [pc, #532]	; (d0c8 <event_connection_prepare+0xfc0>)
    ceb2:	681c      	ldr	r4, [r3, #0]
    ceb4:	4b85      	ldr	r3, [pc, #532]	; (d0cc <event_connection_prepare+0xfc4>)
    ceb6:	e457      	b.n	c768 <event_connection_prepare+0x660>
		node_rx->hdr.handle = conn->handle;
    ceb8:	8c23      	ldrh	r3, [r4, #32]
    ceba:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cebc:	2301      	movs	r3, #1
    cebe:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cec0:	7a03      	ldrb	r3, [r0, #8]
    cec2:	f043 0303 	orr.w	r3, r3, #3
    cec6:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cec8:	2306      	movs	r3, #6
    ceca:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    cecc:	230c      	movs	r3, #12
    cece:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    ced0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    ced4:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    ced6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    ceda:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    cede:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    cee2:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    cee6:	f7fd fe49 	bl	ab7c <packet_rx_enqueue>
    ceea:	e608      	b.n	cafe <event_connection_prepare+0x9f6>
		LL_ASSERT(0);
    ceec:	4b75      	ldr	r3, [pc, #468]	; (d0c4 <event_connection_prepare+0xfbc>)
    ceee:	9301      	str	r3, [sp, #4]
    cef0:	9300      	str	r3, [sp, #0]
    cef2:	4b75      	ldr	r3, [pc, #468]	; (d0c8 <event_connection_prepare+0xfc0>)
    cef4:	681c      	ldr	r4, [r3, #0]
    cef6:	4b75      	ldr	r3, [pc, #468]	; (d0cc <event_connection_prepare+0xfc4>)
    cef8:	f7ff bac2 	b.w	c480 <event_connection_prepare+0x378>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cefc:	486f      	ldr	r0, [pc, #444]	; (d0bc <event_connection_prepare+0xfb4>)
    cefe:	f7fa f958 	bl	71b2 <mem_acquire>
	if (node_tx) {
    cf02:	4601      	mov	r1, r0
    cf04:	2800      	cmp	r0, #0
    cf06:	f43f adfa 	beq.w	cafe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    cf0a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cf0e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cf12:	7903      	ldrb	r3, [r0, #4]
    cf14:	f043 0303 	orr.w	r3, r3, #3
    cf18:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    cf1a:	2301      	movs	r3, #1
    cf1c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    cf1e:	2312      	movs	r3, #18
    cf20:	71c3      	strb	r3, [r0, #7]
    cf22:	e787      	b.n	ce34 <event_connection_prepare+0xd2c>
	if (conn->llcp.phy_upd_ind.initiate) {
    cf24:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    cf28:	07d7      	lsls	r7, r2, #31
    cf2a:	d554      	bpl.n	cfd6 <event_connection_prepare+0xece>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cf2c:	4863      	ldr	r0, [pc, #396]	; (d0bc <event_connection_prepare+0xfb4>)
    cf2e:	f7fa f940 	bl	71b2 <mem_acquire>
		if (node_tx) {
    cf32:	4607      	mov	r7, r0
    cf34:	2800      	cmp	r0, #0
    cf36:	f43f ade2 	beq.w	cafe <event_connection_prepare+0x9f6>
			conn->llcp.phy_upd_ind.initiate = 0;
    cf3a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cf3e:	f36f 0300 	bfc	r3, #0, #1
    cf42:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    cf46:	b2db      	uxtb	r3, r3
    cf48:	f3c3 0982 	ubfx	r9, r3, #2, #3
    cf4c:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    cf50:	d13b      	bne.n	cfca <event_connection_prepare+0xec2>
				conn->llcp_ack = conn->llcp_req;
    cf52:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cf56:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    cf5a:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    cf5c:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    cf60:	d51d      	bpl.n	cf9e <event_connection_prepare+0xe96>
					node_rx = packet_rx_reserve_get(2);
    cf62:	2002      	movs	r0, #2
    cf64:	f7fc ff70 	bl	9e48 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    cf68:	b938      	cbnz	r0, cf7a <event_connection_prepare+0xe72>
		LL_ASSERT(node_rx);
    cf6a:	4b56      	ldr	r3, [pc, #344]	; (d0c4 <event_connection_prepare+0xfbc>)
    cf6c:	9301      	str	r3, [sp, #4]
    cf6e:	9300      	str	r3, [sp, #0]
    cf70:	4b55      	ldr	r3, [pc, #340]	; (d0c8 <event_connection_prepare+0xfc0>)
    cf72:	681c      	ldr	r4, [r3, #0]
    cf74:	4b56      	ldr	r3, [pc, #344]	; (d0d0 <event_connection_prepare+0xfc8>)
    cf76:	f7ff bbf7 	b.w	c768 <event_connection_prepare+0x660>
					node_rx->hdr.handle = conn->handle;
    cf7a:	8c23      	ldrh	r3, [r4, #32]
    cf7c:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    cf7e:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    cf82:	230c      	movs	r3, #12
    cf84:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    cf86:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cf8a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cf8e:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    cf90:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    cf94:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cf98:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    cf9a:	f7fd fdef 	bl	ab7c <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cf9e:	793b      	ldrb	r3, [r7, #4]
    cfa0:	f043 0303 	orr.w	r3, r3, #3
    cfa4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    cfa6:	2305      	movs	r3, #5
    cfa8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cfaa:	2318      	movs	r3, #24
    cfac:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    cfae:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cfb2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    cfb6:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    cfb8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cfbc:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cfc0:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    cfc2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cfc6:	817b      	strh	r3, [r7, #10]
    cfc8:	e595      	b.n	caf6 <event_connection_prepare+0x9ee>
								 conn->latency +
    cfca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cfcc:	3306      	adds	r3, #6
    cfce:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    cfd0:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    cfd4:	e7e3      	b.n	cf9e <event_connection_prepare+0xe96>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    cfd6:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cfda:	1af3      	subs	r3, r6, r3
    cfdc:	0419      	lsls	r1, r3, #16
    cfde:	f53f ad8e 	bmi.w	cafe <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    cfe2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cfe6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    cfea:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    cfee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    cff2:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    cff6:	bf18      	it	ne
    cff8:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    cffc:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    d000:	bf1c      	itt	ne
    d002:	f367 03c5 	bfine	r3, r7, #3, #3
    d006:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    d00a:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    d00e:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    d012:	d008      	beq.n	d026 <event_connection_prepare+0xf1e>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    d014:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    d018:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    d01c:	095b      	lsrs	r3, r3, #5
    d01e:	f363 0702 	bfi	r7, r3, #0, #3
    d022:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    d026:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d02a:	461f      	mov	r7, r3
    d02c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d030:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d034:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    d036:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d03a:	d40b      	bmi.n	d054 <event_connection_prepare+0xf4c>
    d03c:	b2fb      	uxtb	r3, r7
    d03e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d042:	4283      	cmp	r3, r0
    d044:	d106      	bne.n	d054 <event_connection_prepare+0xf4c>
		    (conn->phy_rx == old_rx)) {
    d046:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    d04a:	f003 0307 	and.w	r3, r3, #7
    d04e:	428b      	cmp	r3, r1
    d050:	f43f ad55 	beq.w	cafe <event_connection_prepare+0x9f6>
		node_rx = packet_rx_reserve_get(2);
    d054:	2002      	movs	r0, #2
    d056:	f7fc fef7 	bl	9e48 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d05a:	2800      	cmp	r0, #0
    d05c:	d085      	beq.n	cf6a <event_connection_prepare+0xe62>
		node_rx->hdr.handle = conn->handle;
    d05e:	8c23      	ldrh	r3, [r4, #32]
    d060:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d062:	230c      	movs	r3, #12
    d064:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    d066:	2300      	movs	r3, #0
    d068:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    d06a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d06e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d072:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    d074:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    d078:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d07c:	7343      	strb	r3, [r0, #13]
    d07e:	e732      	b.n	cee6 <event_connection_prepare+0xdde>
			LL_ASSERT(0);
    d080:	4b10      	ldr	r3, [pc, #64]	; (d0c4 <event_connection_prepare+0xfbc>)
    d082:	9301      	str	r3, [sp, #4]
    d084:	9300      	str	r3, [sp, #0]
    d086:	4b10      	ldr	r3, [pc, #64]	; (d0c8 <event_connection_prepare+0xfc0>)
    d088:	681c      	ldr	r4, [r3, #0]
    d08a:	4b12      	ldr	r3, [pc, #72]	; (d0d4 <event_connection_prepare+0xfcc>)
    d08c:	f7ff b9f8 	b.w	c480 <event_connection_prepare+0x378>
		free_count_rx = packet_rx_acquired_count_get() +
    d090:	f7fc fec4 	bl	9e1c <packet_rx_acquired_count_get>
    d094:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d096:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d09a:	f7fa f8b9 	bl	7210 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d09e:	4438      	add	r0, r7
    d0a0:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d0a2:	28ff      	cmp	r0, #255	; 0xff
    d0a4:	d920      	bls.n	d0e8 <event_connection_prepare+0xfe0>
		LL_ASSERT(free_count_rx <= 0xFF);
    d0a6:	4b07      	ldr	r3, [pc, #28]	; (d0c4 <event_connection_prepare+0xfbc>)
    d0a8:	9301      	str	r3, [sp, #4]
    d0aa:	9300      	str	r3, [sp, #0]
    d0ac:	4b06      	ldr	r3, [pc, #24]	; (d0c8 <event_connection_prepare+0xfc0>)
    d0ae:	4a0a      	ldr	r2, [pc, #40]	; (d0d8 <event_connection_prepare+0xfd0>)
    d0b0:	681c      	ldr	r4, [r3, #0]
    d0b2:	490a      	ldr	r1, [pc, #40]	; (d0dc <event_connection_prepare+0xfd4>)
    d0b4:	4b0a      	ldr	r3, [pc, #40]	; (d0e0 <event_connection_prepare+0xfd8>)
    d0b6:	480b      	ldr	r0, [pc, #44]	; (d0e4 <event_connection_prepare+0xfdc>)
    d0b8:	f7ff b838 	b.w	c12c <event_connection_prepare+0x24>
    d0bc:	20000a1c 	.word	0x20000a1c
    d0c0:	000141ff 	.word	0x000141ff
    d0c4:	0001563e 	.word	0x0001563e
    d0c8:	20003a5c 	.word	0x20003a5c
    d0cc:	000180d9 	.word	0x000180d9
    d0d0:	00018135 	.word	0x00018135
    d0d4:	0001814c 	.word	0x0001814c
    d0d8:	000167b9 	.word	0x000167b9
    d0dc:	00016808 	.word	0x00016808
    d0e0:	00018113 	.word	0x00018113
    d0e4:	000182db 	.word	0x000182db
		if (_radio.packet_rx_data_count != free_count_rx) {
    d0e8:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d0ec:	4283      	cmp	r3, r0
    d0ee:	d129      	bne.n	d144 <event_connection_prepare+0x103c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d0f0:	4885      	ldr	r0, [pc, #532]	; (d308 <event_connection_prepare+0x1200>)
    d0f2:	f7fa f85e 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    d0f6:	4601      	mov	r1, r0
    d0f8:	b320      	cbz	r0, d144 <event_connection_prepare+0x103c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d0fa:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    d0fe:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d102:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    d106:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d108:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    d10a:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    d10c:	f365 0301 	bfi	r3, r5, #0, #2
    d110:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d114:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    d116:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d118:	f043 0303 	orr.w	r3, r3, #3
    d11c:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    d11e:	2309      	movs	r3, #9
    d120:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    d122:	2314      	movs	r3, #20
    d124:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    d126:	231b      	movs	r3, #27
    d128:	720b      	strb	r3, [r1, #8]
    d12a:	2300      	movs	r3, #0
    d12c:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d12e:	2348      	movs	r3, #72	; 0x48
    d130:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    d132:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    d134:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    d136:	4620      	mov	r0, r4
    d138:	f7fe ff18 	bl	bf6c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    d13c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    d140:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    d144:	f894 3020 	ldrb.w	r3, [r4, #32]
    d148:	f994 501d 	ldrsb.w	r5, [r4, #29]
    d14c:	486f      	ldr	r0, [pc, #444]	; (d30c <event_connection_prepare+0x1204>)
    d14e:	4970      	ldr	r1, [pc, #448]	; (d310 <event_connection_prepare+0x1208>)
    d150:	68a2      	ldr	r2, [r4, #8]
    d152:	9403      	str	r4, [sp, #12]
    d154:	3307      	adds	r3, #7
    d156:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    d15a:	bf38      	it	cc
    d15c:	4601      	movcc	r1, r0
    d15e:	b2db      	uxtb	r3, r3
    d160:	e88d 000c 	stmia.w	sp, {r2, r3}
    d164:	9102      	str	r1, [sp, #8]
    d166:	1d23      	adds	r3, r4, #4
    d168:	4622      	mov	r2, r4
    d16a:	990c      	ldr	r1, [sp, #48]	; 0x30
    d16c:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    d16e:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    d170:	f7fe fd6a 	bl	bc48 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    d174:	8466      	strh	r6, [r4, #34]	; 0x22
}
    d176:	b00f      	add	sp, #60	; 0x3c
    d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    d17c:	f7fc fe4e 	bl	9e1c <packet_rx_acquired_count_get>
    d180:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    d182:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    d186:	f7fa f843 	bl	7210 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    d18a:	4438      	add	r0, r7
    d18c:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    d18e:	28ff      	cmp	r0, #255	; 0xff
    d190:	d889      	bhi.n	d0a6 <event_connection_prepare+0xf9e>
		if (_radio.packet_rx_data_count != free_count_rx) {
    d192:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    d196:	4283      	cmp	r3, r0
    d198:	d007      	beq.n	d1aa <event_connection_prepare+0x10a2>
		LL_ASSERT(0);
    d19a:	4b5e      	ldr	r3, [pc, #376]	; (d314 <event_connection_prepare+0x120c>)
    d19c:	9301      	str	r3, [sp, #4]
    d19e:	9300      	str	r3, [sp, #0]
    d1a0:	4b5d      	ldr	r3, [pc, #372]	; (d318 <event_connection_prepare+0x1210>)
    d1a2:	681c      	ldr	r4, [r3, #0]
    d1a4:	4b5d      	ldr	r3, [pc, #372]	; (d31c <event_connection_prepare+0x1214>)
    d1a6:	f7ff b96b 	b.w	c480 <event_connection_prepare+0x378>
		conn->llcp_length.ack = conn->llcp_length.req;
    d1aa:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    d1ae:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    d1b2:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    d1b6:	2100      	movs	r1, #0
    d1b8:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    d1bc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d1c0:	f361 02c3 	bfi	r2, r1, #3, #1
    d1c4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    d1c8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    d1cc:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    d1ce:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    d1d2:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    d1d4:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    d1d8:	f7fa f81a 	bl	7210 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    d1dc:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    d1e0:	b10b      	cbz	r3, d1e6 <event_connection_prepare+0x10de>
			free_count_conn++;
    d1e2:	3001      	adds	r0, #1
    d1e4:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    d1e6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    d1ea:	b10b      	cbz	r3, d1f0 <event_connection_prepare+0x10e8>
			free_count_conn++;
    d1ec:	3001      	adds	r0, #1
    d1ee:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d1f0:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d1f2:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d1f6:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d1f8:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d1fa:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d1fe:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    d200:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    d202:	d058      	beq.n	d2b6 <event_connection_prepare+0x11ae>
    d204:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    d208:	42bb      	cmp	r3, r7
    d20a:	d354      	bcc.n	d2b6 <event_connection_prepare+0x11ae>
		node_rx = packet_rx_reserve_get(2);
    d20c:	2002      	movs	r0, #2
    d20e:	f7fc fe1b 	bl	9e48 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    d212:	2800      	cmp	r0, #0
    d214:	d15b      	bne.n	d2ce <event_connection_prepare+0x11c6>
    d216:	4b3f      	ldr	r3, [pc, #252]	; (d314 <event_connection_prepare+0x120c>)
    d218:	9301      	str	r3, [sp, #4]
    d21a:	9300      	str	r3, [sp, #0]
    d21c:	4b3e      	ldr	r3, [pc, #248]	; (d318 <event_connection_prepare+0x1210>)
    d21e:	681c      	ldr	r4, [r3, #0]
    d220:	4b3e      	ldr	r3, [pc, #248]	; (d31c <event_connection_prepare+0x1214>)
    d222:	f7ff baa1 	b.w	c768 <event_connection_prepare+0x660>
				if (_radio.packet_rx_acquire == 0) {
    d226:	b90b      	cbnz	r3, d22c <event_connection_prepare+0x1124>
						_radio.packet_rx_count - 1;
    d228:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    d22c:	3b01      	subs	r3, #1
    d22e:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    d232:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    d236:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    d23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d23e:	4649      	mov	r1, r9
    d240:	6818      	ldr	r0, [r3, #0]
    d242:	f7f9 ffd0 	bl	71e6 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    d246:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    d24a:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    d24e:	3a01      	subs	r2, #1
    d250:	4293      	cmp	r3, r2
    d252:	db0a      	blt.n	d26a <event_connection_prepare+0x1162>
    d254:	4b2f      	ldr	r3, [pc, #188]	; (d314 <event_connection_prepare+0x120c>)
    d256:	9301      	str	r3, [sp, #4]
    d258:	9300      	str	r3, [sp, #0]
    d25a:	4b2f      	ldr	r3, [pc, #188]	; (d318 <event_connection_prepare+0x1210>)
    d25c:	4a30      	ldr	r2, [pc, #192]	; (d320 <event_connection_prepare+0x1218>)
    d25e:	681c      	ldr	r4, [r3, #0]
    d260:	4930      	ldr	r1, [pc, #192]	; (d324 <event_connection_prepare+0x121c>)
    d262:	4b2e      	ldr	r3, [pc, #184]	; (d31c <event_connection_prepare+0x1214>)
    d264:	4830      	ldr	r0, [pc, #192]	; (d328 <event_connection_prepare+0x1220>)
    d266:	f7fe bf61 	b.w	c12c <event_connection_prepare+0x24>
				_radio.link_rx_data_quota++;
    d26a:	3301      	adds	r3, #1
    d26c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    d270:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    d274:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    d278:	4293      	cmp	r3, r2
    d27a:	d1d4      	bne.n	d226 <event_connection_prepare+0x111e>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    d27c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    d27e:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    d282:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    d284:	bf9a      	itte	ls
    d286:	2334      	movls	r3, #52	; 0x34
    d288:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    d28c:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    d290:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    d294:	fbb2 f2f1 	udiv	r2, r2, r1
    d298:	b2d2      	uxtb	r2, r2
    d29a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    d29e:	b96a      	cbnz	r2, d2bc <event_connection_prepare+0x11b4>
    d2a0:	4b1c      	ldr	r3, [pc, #112]	; (d314 <event_connection_prepare+0x120c>)
    d2a2:	9301      	str	r3, [sp, #4]
    d2a4:	9300      	str	r3, [sp, #0]
    d2a6:	4b1c      	ldr	r3, [pc, #112]	; (d318 <event_connection_prepare+0x1210>)
    d2a8:	4a1d      	ldr	r2, [pc, #116]	; (d320 <event_connection_prepare+0x1218>)
    d2aa:	681c      	ldr	r4, [r3, #0]
    d2ac:	491d      	ldr	r1, [pc, #116]	; (d324 <event_connection_prepare+0x121c>)
    d2ae:	4b1b      	ldr	r3, [pc, #108]	; (d31c <event_connection_prepare+0x1214>)
    d2b0:	481e      	ldr	r0, [pc, #120]	; (d32c <event_connection_prepare+0x1224>)
    d2b2:	f7fe bf3b 	b.w	c12c <event_connection_prepare+0x24>
				mem_release(node_rx->hdr.onion.link,
    d2b6:	f8df 907c 	ldr.w	r9, [pc, #124]	; d334 <event_connection_prepare+0x122c>
    d2ba:	e7d9      	b.n	d270 <event_connection_prepare+0x1168>
			mem_init(_radio.pkt_rx_data_pool,
    d2bc:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    d2c0:	4b1b      	ldr	r3, [pc, #108]	; (d330 <event_connection_prepare+0x1228>)
    d2c2:	f7f9 ff4f 	bl	7164 <mem_init>
			packet_rx_allocate(4);
    d2c6:	2004      	movs	r0, #4
    d2c8:	f7fc fe36 	bl	9f38 <packet_rx_allocate>
    d2cc:	e79e      	b.n	d20c <event_connection_prepare+0x1104>
		node_rx->hdr.handle = conn->handle;
    d2ce:	8c23      	ldrh	r3, [r4, #32]
    d2d0:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d2d2:	2301      	movs	r3, #1
    d2d4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    d2d6:	7a03      	ldrb	r3, [r0, #8]
    d2d8:	f043 0303 	orr.w	r3, r3, #3
    d2dc:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    d2de:	2309      	movs	r3, #9
    d2e0:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d2e2:	2315      	movs	r3, #21
    d2e4:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    d2e6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    d2e8:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    d2ea:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    d2ec:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    d2ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    d2f0:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    d2f2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d2f4:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    d2f6:	f7fd fc41 	bl	ab7c <packet_rx_enqueue>
    d2fa:	e723      	b.n	d144 <event_connection_prepare+0x103c>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d2fc:	4902      	ldr	r1, [pc, #8]	; (d308 <event_connection_prepare+0x1200>)
    d2fe:	4638      	mov	r0, r7
    d300:	f7f9 ff71 	bl	71e6 <mem_release>
    d304:	f7ff bbfb 	b.w	cafe <event_connection_prepare+0x9f6>
    d308:	20000a1c 	.word	0x20000a1c
    d30c:	0000d675 	.word	0x0000d675
    d310:	0000d37d 	.word	0x0000d37d
    d314:	0001563e 	.word	0x0001563e
    d318:	20003a5c 	.word	0x20003a5c
    d31c:	00018113 	.word	0x00018113
    d320:	000167b9 	.word	0x000167b9
    d324:	00016808 	.word	0x00016808
    d328:	00018312 	.word	0x00018312
    d32c:	0001836c 	.word	0x0001836c
    d330:	200009f0 	.word	0x200009f0
    d334:	20000a08 	.word	0x20000a08

0000d338 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    d338:	f7fe bee6 	b.w	c108 <event_connection_prepare>

0000d33c <event_slave_prepare>:
    d33c:	f7fe bee4 	b.w	c108 <event_connection_prepare>

0000d340 <connection_configure>:
{
    d340:	b510      	push	{r4, lr}
    d342:	4604      	mov	r4, r0
	radio_reset();
    d344:	f005 fa2a 	bl	1279c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    d348:	2000      	movs	r0, #0
    d34a:	f005 fa51 	bl	127f0 <radio_tx_power_set>
	radio_isr_set(isr);
    d34e:	480a      	ldr	r0, [pc, #40]	; (d378 <connection_configure+0x38>)
    d350:	f005 f9ee 	bl	12730 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    d354:	f104 0010 	add.w	r0, r4, #16
    d358:	f005 fa68 	bl	1282c <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    d35c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    d35e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    d360:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    d362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    d366:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d368:	f240 605b 	movw	r0, #1627	; 0x65b
    d36c:	4319      	orrs	r1, r3
}
    d36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d372:	f005 bb03 	b.w	1297c <radio_crc_configure>
    d376:	bf00      	nop
    d378:	0000ea89 	.word	0x0000ea89

0000d37c <event_slave>:
{
    d37c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d380:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d382:	4b74      	ldr	r3, [pc, #464]	; (d554 <event_slave+0x1d8>)
    d384:	7cda      	ldrb	r2, [r3, #19]
{
    d386:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d388:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    d38c:	461d      	mov	r5, r3
    d38e:	b17a      	cbz	r2, d3b0 <event_slave+0x34>
    d390:	4b71      	ldr	r3, [pc, #452]	; (d558 <event_slave+0x1dc>)
    d392:	9301      	str	r3, [sp, #4]
    d394:	9300      	str	r3, [sp, #0]
    d396:	4b71      	ldr	r3, [pc, #452]	; (d55c <event_slave+0x1e0>)
    d398:	4a71      	ldr	r2, [pc, #452]	; (d560 <event_slave+0x1e4>)
    d39a:	681c      	ldr	r4, [r3, #0]
    d39c:	4971      	ldr	r1, [pc, #452]	; (d564 <event_slave+0x1e8>)
    d39e:	4b72      	ldr	r3, [pc, #456]	; (d568 <event_slave+0x1ec>)
    d3a0:	4872      	ldr	r0, [pc, #456]	; (d56c <event_slave+0x1f0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d3a2:	47a0      	blx	r4
    d3a4:	4040      	eors	r0, r0
    d3a6:	f380 8811 	msr	BASEPRI, r0
    d3aa:	f04f 0004 	mov.w	r0, #4
    d3ae:	df02      	svc	2
    d3b0:	7c1b      	ldrb	r3, [r3, #16]
    d3b2:	8c22      	ldrh	r2, [r4, #32]
    d3b4:	b2db      	uxtb	r3, r3
    d3b6:	3207      	adds	r2, #7
    d3b8:	4293      	cmp	r3, r2
    d3ba:	d009      	beq.n	d3d0 <event_slave+0x54>
    d3bc:	4b66      	ldr	r3, [pc, #408]	; (d558 <event_slave+0x1dc>)
    d3be:	9301      	str	r3, [sp, #4]
    d3c0:	9300      	str	r3, [sp, #0]
    d3c2:	4b66      	ldr	r3, [pc, #408]	; (d55c <event_slave+0x1e0>)
    d3c4:	4a66      	ldr	r2, [pc, #408]	; (d560 <event_slave+0x1e4>)
    d3c6:	681c      	ldr	r4, [r3, #0]
    d3c8:	4966      	ldr	r1, [pc, #408]	; (d564 <event_slave+0x1e8>)
    d3ca:	4b67      	ldr	r3, [pc, #412]	; (d568 <event_slave+0x1ec>)
    d3cc:	4868      	ldr	r0, [pc, #416]	; (d570 <event_slave+0x1f4>)
    d3ce:	e7e8      	b.n	d3a2 <event_slave+0x26>
	_radio.packet_counter = 0;
    d3d0:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d3d4:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    d3d8:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d3da:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    d3dc:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d3de:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    d3e0:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d3e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d3e4:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    d3e8:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    d3ea:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    d3ec:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    d3ee:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    d3f0:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    d3f2:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    d3f4:	f7ff ffa4 	bl	d340 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d3f8:	2096      	movs	r0, #150	; 0x96
    d3fa:	f005 fb79 	bl	12af0 <radio_tmr_tifs_set>
				     conn->phy_flags);
    d3fe:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    d402:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d406:	09d3      	lsrs	r3, r2, #7
    d408:	4631      	mov	r1, r6
    d40a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d40e:	f000 0007 	and.w	r0, r0, #7
    d412:	f005 fadd 	bl	129d0 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d416:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    d41a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    d41e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    d422:	4620      	mov	r0, r4
    d424:	3108      	adds	r1, #8
    d426:	f7fd f897 	bl	a558 <rx_packet_set>
	if (conn->data_chan_sel) {
    d42a:	7f63      	ldrb	r3, [r4, #29]
    d42c:	f013 0f40 	tst.w	r3, #64	; 0x40
    d430:	f104 0217 	add.w	r2, r4, #23
    d434:	d05a      	beq.n	d4ec <event_slave+0x170>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d436:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d438:	8be1      	ldrh	r1, [r4, #30]
    d43a:	3801      	subs	r0, #1
    d43c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d440:	b280      	uxth	r0, r0
    d442:	f7fe fd4f 	bl	bee4 <chan_sel_2>
	chan_set(data_chan_use);
    d446:	f7fd fff5 	bl	b434 <chan_set>
	conn->slave.window_widening_event_us +=
    d44a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d44c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d44e:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    d450:	2200      	movs	r2, #0
    d452:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    d454:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    d456:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    d458:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    d45a:	bf88      	it	hi
    d45c:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    d45e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d460:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    d462:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    d464:	4413      	add	r3, r2
    d466:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d468:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    d46a:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d46c:	f107 0109 	add.w	r1, r7, #9
    d470:	4630      	mov	r0, r6
    d472:	f005 fb49 	bl	12b08 <radio_tmr_start>
    d476:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    d478:	f005 fbe2 	bl	12c40 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    d47c:	4630      	mov	r0, r6
    d47e:	f005 fc01 	bl	12c84 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d482:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    d484:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d486:	f103 0650 	add.w	r6, r3, #80	; 0x50
    d48a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d48e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d492:	2101      	movs	r1, #1
    d494:	f000 0007 	and.w	r0, r0, #7
    d498:	f005 fa21 	bl	128de <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d49c:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d49e:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    d4a0:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d4a4:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    d4a8:	2802      	cmp	r0, #2
    d4aa:	d03f      	beq.n	d52c <event_slave+0x1b0>
		return 40;
    d4ac:	2804      	cmp	r0, #4
    d4ae:	bf0c      	ite	eq
    d4b0:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    d4b4:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d4b6:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    d4b8:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d4ba:	f005 fa12 	bl	128e2 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    d4be:	4430      	add	r0, r6
    d4c0:	f005 fba0 	bl	12c04 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d4c4:	f894 1020 	ldrb.w	r1, [r4, #32]
    d4c8:	3107      	adds	r1, #7
    d4ca:	463a      	mov	r2, r7
    d4cc:	b2c9      	uxtb	r1, r1
    d4ce:	4620      	mov	r0, r4
    d4d0:	f7fe fa80 	bl	b9d4 <preempt_calc>
    d4d4:	4603      	mov	r3, r0
    d4d6:	b358      	cbz	r0, d530 <event_slave+0x1b4>
		_radio.state = STATE_STOP;
    d4d8:	2304      	movs	r3, #4
    d4da:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d4dc:	f005 fa12 	bl	12904 <radio_disable>
	packet_tx_enqueue(2);
    d4e0:	2002      	movs	r0, #2
}
    d4e2:	b002      	add	sp, #8
    d4e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    d4e8:	f7fd beb6 	b.w	b258 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d4ec:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d4ee:	7fa6      	ldrb	r6, [r4, #30]
    d4f0:	fb01 6606 	mla	r6, r1, r6, r6
    d4f4:	7fe1      	ldrb	r1, [r4, #31]
    d4f6:	2025      	movs	r0, #37	; 0x25
    d4f8:	440e      	add	r6, r1
    d4fa:	fb96 f1f0 	sdiv	r1, r6, r0
    d4fe:	fb00 6611 	mls	r6, r0, r1, r6
    d502:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d504:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d506:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d508:	5c51      	ldrb	r1, [r2, r1]
    d50a:	f006 0607 	and.w	r6, r6, #7
    d50e:	fa41 f606 	asr.w	r6, r1, r6
    d512:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d518:	d495      	bmi.n	d446 <event_slave+0xca>
		chan_index = chan_next % chan_count;
    d51a:	fbb0 f1f3 	udiv	r1, r0, r3
    d51e:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d522:	b2c9      	uxtb	r1, r1
    d524:	4610      	mov	r0, r2
    d526:	f7fc fc5d 	bl	9de4 <chan_sel_remap>
    d52a:	e78c      	b.n	d446 <event_slave+0xca>
		return 24;
    d52c:	2318      	movs	r3, #24
    d52e:	e7c2      	b.n	d4b6 <event_slave+0x13a>
		ticker_status =
    d530:	4a10      	ldr	r2, [pc, #64]	; (d574 <event_slave+0x1f8>)
    d532:	4601      	mov	r1, r0
    d534:	f7fa fde4 	bl	8100 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d538:	f030 0302 	bics.w	r3, r0, #2
    d53c:	d0d0      	beq.n	d4e0 <event_slave+0x164>
    d53e:	4b06      	ldr	r3, [pc, #24]	; (d558 <event_slave+0x1dc>)
    d540:	9301      	str	r3, [sp, #4]
    d542:	9300      	str	r3, [sp, #0]
    d544:	4b05      	ldr	r3, [pc, #20]	; (d55c <event_slave+0x1e0>)
    d546:	4a06      	ldr	r2, [pc, #24]	; (d560 <event_slave+0x1e4>)
    d548:	681c      	ldr	r4, [r3, #0]
    d54a:	4906      	ldr	r1, [pc, #24]	; (d564 <event_slave+0x1e8>)
    d54c:	4b06      	ldr	r3, [pc, #24]	; (d568 <event_slave+0x1ec>)
    d54e:	480a      	ldr	r0, [pc, #40]	; (d578 <event_slave+0x1fc>)
    d550:	e727      	b.n	d3a2 <event_slave+0x26>
    d552:	bf00      	nop
    d554:	200008c0 	.word	0x200008c0
    d558:	0001563e 	.word	0x0001563e
    d55c:	20003a5c 	.word	0x20003a5c
    d560:	000167b9 	.word	0x000167b9
    d564:	00016808 	.word	0x00016808
    d568:	00018165 	.word	0x00018165
    d56c:	000183a9 	.word	0x000183a9
    d570:	0001845c 	.word	0x0001845c
    d574:	0000afad 	.word	0x0000afad
    d578:	0001828d 	.word	0x0001828d

0000d57c <prepare_pdu_data_tx>:
	    conn->empty ||
    d57c:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    d580:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d586:	4604      	mov	r4, r0
    d588:	460e      	mov	r6, r1
	if (/* empty packet */
    d58a:	d109      	bne.n	d5a0 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d58c:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    d590:	b131      	cbz	r1, d5a0 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d592:	f01c 0f08 	tst.w	ip, #8
    d596:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    d59a:	d022      	beq.n	d5e2 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    d59c:	4571      	cmp	r1, lr
    d59e:	d020      	beq.n	d5e2 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    d5a0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5a8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d5ac:	f005 f9fc 	bl	129a8 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5b0:	7803      	ldrb	r3, [r0, #0]
    d5b2:	2201      	movs	r2, #1
    d5b4:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    d5b8:	2200      	movs	r2, #0
    d5ba:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    d5bc:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5c0:	7003      	strb	r3, [r0, #0]
    d5c2:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d5c4:	b152      	cbz	r2, d5dc <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    d5c6:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d5ca:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    d5cc:	7803      	ldrb	r3, [r0, #0]
    d5ce:	f36f 1347 	bfc	r3, #5, #3
    d5d2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    d5d4:	2300      	movs	r3, #0
    d5d6:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    d5d8:	6030      	str	r0, [r6, #0]
    d5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    d5dc:	f362 1304 	bfi	r3, r2, #4, #1
    d5e0:	e7f3      	b.n	d5ca <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    d5e2:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    d5e6:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    d5ea:	1d0d      	adds	r5, r1, #4
    d5ec:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    d5ee:	b913      	cbnz	r3, d5f6 <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    d5f0:	7843      	ldrb	r3, [r0, #1]
    d5f2:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    d5f6:	b122      	cbz	r2, d602 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5f8:	5cab      	ldrb	r3, [r5, r2]
    d5fa:	2701      	movs	r7, #1
    d5fc:	f367 0301 	bfi	r3, r7, #0, #2
    d600:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    d602:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    d606:	1abf      	subs	r7, r7, r2
    d608:	b2ff      	uxtb	r7, r7
    d60a:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    d60c:	5cab      	ldrb	r3, [r5, r2]
    d60e:	f36f 1304 	bfc	r3, #4, #1
    d612:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    d614:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d618:	f003 0307 	and.w	r3, r3, #7
    d61c:	2b02      	cmp	r3, #2
    d61e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d620:	bf15      	itete	ne
    d622:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d624:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d626:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d628:	3b0b      	subeq	r3, #11
    d62a:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    d62c:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    d630:	bf18      	it	ne
    d632:	3b04      	subne	r3, #4
    d634:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    d638:	bf18      	it	ne
    d63a:	b29b      	uxthne	r3, r3
    d63c:	4563      	cmp	r3, ip
    d63e:	bf28      	it	cs
    d640:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    d642:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    d644:	bf81      	itttt	hi
    d646:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    d648:	5cab      	ldrbhi	r3, [r5, r2]
    d64a:	f043 0310 	orrhi.w	r3, r3, #16
    d64e:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    d650:	680b      	ldr	r3, [r1, #0]
    d652:	b11b      	cbz	r3, d65c <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    d654:	5cab      	ldrb	r3, [r5, r2]
    d656:	f043 0310 	orr.w	r3, r3, #16
    d65a:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    d65c:	f1be 0f00 	cmp.w	lr, #0
    d660:	d1b4      	bne.n	d5cc <prepare_pdu_data_tx+0x50>
    d662:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    d666:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    d668:	bf1c      	itt	ne
    d66a:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    d66e:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    d672:	e7ab      	b.n	d5cc <prepare_pdu_data_tx+0x50>

0000d674 <event_master>:
{
    d674:	b5f0      	push	{r4, r5, r6, r7, lr}
    d676:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d678:	4b59      	ldr	r3, [pc, #356]	; (d7e0 <event_master+0x16c>)
    d67a:	7cd9      	ldrb	r1, [r3, #19]
{
    d67c:	b085      	sub	sp, #20
    d67e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d680:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    d684:	461d      	mov	r5, r3
    d686:	b179      	cbz	r1, d6a8 <event_master+0x34>
    d688:	4b56      	ldr	r3, [pc, #344]	; (d7e4 <event_master+0x170>)
    d68a:	9301      	str	r3, [sp, #4]
    d68c:	9300      	str	r3, [sp, #0]
    d68e:	4b56      	ldr	r3, [pc, #344]	; (d7e8 <event_master+0x174>)
    d690:	4a56      	ldr	r2, [pc, #344]	; (d7ec <event_master+0x178>)
    d692:	681c      	ldr	r4, [r3, #0]
    d694:	4956      	ldr	r1, [pc, #344]	; (d7f0 <event_master+0x17c>)
    d696:	4b57      	ldr	r3, [pc, #348]	; (d7f4 <event_master+0x180>)
    d698:	4857      	ldr	r0, [pc, #348]	; (d7f8 <event_master+0x184>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d69a:	47a0      	blx	r4
    d69c:	4040      	eors	r0, r0
    d69e:	f380 8811 	msr	BASEPRI, r0
    d6a2:	f04f 0004 	mov.w	r0, #4
    d6a6:	df02      	svc	2
    d6a8:	7c1b      	ldrb	r3, [r3, #16]
    d6aa:	8c21      	ldrh	r1, [r4, #32]
    d6ac:	b2db      	uxtb	r3, r3
    d6ae:	3107      	adds	r1, #7
    d6b0:	428b      	cmp	r3, r1
    d6b2:	d009      	beq.n	d6c8 <event_master+0x54>
    d6b4:	4b4b      	ldr	r3, [pc, #300]	; (d7e4 <event_master+0x170>)
    d6b6:	9301      	str	r3, [sp, #4]
    d6b8:	9300      	str	r3, [sp, #0]
    d6ba:	4b4b      	ldr	r3, [pc, #300]	; (d7e8 <event_master+0x174>)
    d6bc:	4a4b      	ldr	r2, [pc, #300]	; (d7ec <event_master+0x178>)
    d6be:	681c      	ldr	r4, [r3, #0]
    d6c0:	494b      	ldr	r1, [pc, #300]	; (d7f0 <event_master+0x17c>)
    d6c2:	4b4c      	ldr	r3, [pc, #304]	; (d7f4 <event_master+0x180>)
    d6c4:	484d      	ldr	r0, [pc, #308]	; (d7fc <event_master+0x188>)
    d6c6:	e7e8      	b.n	d69a <event_master+0x26>
	_radio.packet_counter = 0;
    d6c8:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d6cc:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    d6d0:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d6d2:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    d6d4:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d6d6:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    d6d8:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d6da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d6dc:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    d6e0:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    d6e2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    d6e4:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    d6e6:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    d6e8:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    d6ea:	f7fd fdb5 	bl	b258 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    d6ee:	a903      	add	r1, sp, #12
    d6f0:	4620      	mov	r0, r4
    d6f2:	f7ff ff43 	bl	d57c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    d6f6:	9903      	ldr	r1, [sp, #12]
    d6f8:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    d6fc:	780b      	ldrb	r3, [r1, #0]
    d6fe:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    d702:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d706:	f362 0382 	bfi	r3, r2, #2, #1
    d70a:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    d70c:	4620      	mov	r0, r4
    d70e:	f7ff fe17 	bl	d340 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d712:	2096      	movs	r0, #150	; 0x96
    d714:	f005 f9ec 	bl	12af0 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    d718:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d71c:	f000 0007 	and.w	r0, r0, #7
    d720:	f005 f94a 	bl	129b8 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    d724:	9903      	ldr	r1, [sp, #12]
    d726:	4620      	mov	r0, r4
    d728:	f7fc ff42 	bl	a5b0 <tx_packet_set>
	if (conn->data_chan_sel) {
    d72c:	7f63      	ldrb	r3, [r4, #29]
    d72e:	f013 0f40 	tst.w	r3, #64	; 0x40
    d732:	f104 0217 	add.w	r2, r4, #23
    d736:	d021      	beq.n	d77c <event_master+0x108>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d738:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d73a:	8be1      	ldrh	r1, [r4, #30]
    d73c:	3801      	subs	r0, #1
    d73e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d742:	b280      	uxth	r0, r0
    d744:	f7fe fbce 	bl	bee4 <chan_sel_2>
	chan_set(data_chan_use);
    d748:	f7fd fe74 	bl	b434 <chan_set>
		remainder_us = radio_tmr_start(1,
    d74c:	68ea      	ldr	r2, [r5, #12]
    d74e:	f107 0109 	add.w	r1, r7, #9
    d752:	2001      	movs	r0, #1
    d754:	f005 f9d8 	bl	12b08 <radio_tmr_start>
		radio_tmr_end_capture();
    d758:	f005 faa6 	bl	12ca8 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d75c:	f894 1020 	ldrb.w	r1, [r4, #32]
    d760:	3107      	adds	r1, #7
    d762:	463a      	mov	r2, r7
    d764:	b2c9      	uxtb	r1, r1
    d766:	4620      	mov	r0, r4
    d768:	f7fe f934 	bl	b9d4 <preempt_calc>
	if (0 !=
    d76c:	4603      	mov	r3, r0
    d76e:	b328      	cbz	r0, d7bc <event_master+0x148>
		_radio.state = STATE_STOP;
    d770:	2304      	movs	r3, #4
    d772:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d774:	f005 f8c6 	bl	12904 <radio_disable>
}
    d778:	b005      	add	sp, #20
    d77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d77c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d77e:	7fa6      	ldrb	r6, [r4, #30]
    d780:	fb01 6606 	mla	r6, r1, r6, r6
    d784:	7fe1      	ldrb	r1, [r4, #31]
    d786:	2025      	movs	r0, #37	; 0x25
    d788:	440e      	add	r6, r1
    d78a:	fb96 f1f0 	sdiv	r1, r6, r0
    d78e:	fb00 6611 	mls	r6, r0, r1, r6
    d792:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d794:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d796:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d798:	5c51      	ldrb	r1, [r2, r1]
    d79a:	f006 0607 	and.w	r6, r6, #7
    d79e:	fa41 f606 	asr.w	r6, r1, r6
    d7a2:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d7a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d7a8:	d4ce      	bmi.n	d748 <event_master+0xd4>
		chan_index = chan_next % chan_count;
    d7aa:	fbb0 f1f3 	udiv	r1, r0, r3
    d7ae:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d7b2:	b2c9      	uxtb	r1, r1
    d7b4:	4610      	mov	r0, r2
    d7b6:	f7fc fb15 	bl	9de4 <chan_sel_remap>
    d7ba:	e7c5      	b.n	d748 <event_master+0xd4>
		ticker_status =
    d7bc:	4a10      	ldr	r2, [pc, #64]	; (d800 <event_master+0x18c>)
    d7be:	4601      	mov	r1, r0
    d7c0:	f7fa fc9e 	bl	8100 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d7c4:	f030 0302 	bics.w	r3, r0, #2
    d7c8:	d0d6      	beq.n	d778 <event_master+0x104>
    d7ca:	4b06      	ldr	r3, [pc, #24]	; (d7e4 <event_master+0x170>)
    d7cc:	9301      	str	r3, [sp, #4]
    d7ce:	9300      	str	r3, [sp, #0]
    d7d0:	4b05      	ldr	r3, [pc, #20]	; (d7e8 <event_master+0x174>)
    d7d2:	4a06      	ldr	r2, [pc, #24]	; (d7ec <event_master+0x178>)
    d7d4:	681c      	ldr	r4, [r3, #0]
    d7d6:	4906      	ldr	r1, [pc, #24]	; (d7f0 <event_master+0x17c>)
    d7d8:	4b06      	ldr	r3, [pc, #24]	; (d7f4 <event_master+0x180>)
    d7da:	480a      	ldr	r0, [pc, #40]	; (d804 <event_master+0x190>)
    d7dc:	e75d      	b.n	d69a <event_master+0x26>
    d7de:	bf00      	nop
    d7e0:	200008c0 	.word	0x200008c0
    d7e4:	0001563e 	.word	0x0001563e
    d7e8:	20003a5c 	.word	0x20003a5c
    d7ec:	000167b9 	.word	0x000167b9
    d7f0:	00016808 	.word	0x00016808
    d7f4:	00018171 	.word	0x00018171
    d7f8:	000183a9 	.word	0x000183a9
    d7fc:	0001845c 	.word	0x0001845c
    d800:	0000afad 	.word	0x0000afad
    d804:	0001828d 	.word	0x0001828d

0000d808 <isr_rx_conn_pkt_ctrl>:
{
    d808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d80c:	7ac7      	ldrb	r7, [r0, #11]
{
    d80e:	4604      	mov	r4, r0
    d810:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d812:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d816:	2f19      	cmp	r7, #25
    d818:	f201 80fb 	bhi.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
    d81c:	e8df f017 	tbh	[pc, r7, lsl #1]
    d820:	0083001a 	.word	0x0083001a
    d824:	00d000c1 	.word	0x00d000c1
    d828:	012600fe 	.word	0x012600fe
    d82c:	05a40159 	.word	0x05a40159
    d830:	01ca0195 	.word	0x01ca0195
    d834:	022201f8 	.word	0x022201f8
    d838:	02bc0253 	.word	0x02bc0253
    d83c:	02d401ab 	.word	0x02d401ab
    d840:	04ac0429 	.word	0x04ac0429
    d844:	0586056c 	.word	0x0586056c
    d848:	065b065b 	.word	0x065b065b
    d84c:	08030734 	.word	0x08030734
    d850:	08c6083a 	.word	0x08c6083a
		if (!_radio.conn_curr->role ||
    d854:	4ecd      	ldr	r6, [pc, #820]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    d856:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d85a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d85e:	2b00      	cmp	r3, #0
    d860:	f281 80d7 	bge.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d864:	7a41      	ldrb	r1, [r0, #9]
    d866:	2000      	movs	r0, #0
    d868:	f7fc fa90 	bl	9d8c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d86c:	2800      	cmp	r0, #0
    d86e:	f001 80d0 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d872:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d876:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d878:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d87a:	041b      	lsls	r3, r3, #16
    d87c:	f101 80df 	bmi.w	ea3e <isr_rx_conn_pkt_ctrl+0x1236>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d880:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d884:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d888:	429a      	cmp	r2, r3
    d88a:	d009      	beq.n	d8a0 <isr_rx_conn_pkt_ctrl+0x98>
    d88c:	4bc0      	ldr	r3, [pc, #768]	; (db90 <isr_rx_conn_pkt_ctrl+0x388>)
    d88e:	9301      	str	r3, [sp, #4]
    d890:	9300      	str	r3, [sp, #0]
    d892:	4bc0      	ldr	r3, [pc, #768]	; (db94 <isr_rx_conn_pkt_ctrl+0x38c>)
    d894:	681c      	ldr	r4, [r3, #0]
    d896:	4bc0      	ldr	r3, [pc, #768]	; (db98 <isr_rx_conn_pkt_ctrl+0x390>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d898:	4ac0      	ldr	r2, [pc, #768]	; (db9c <isr_rx_conn_pkt_ctrl+0x394>)
    d89a:	49c1      	ldr	r1, [pc, #772]	; (dba0 <isr_rx_conn_pkt_ctrl+0x398>)
    d89c:	48c1      	ldr	r0, [pc, #772]	; (dba4 <isr_rx_conn_pkt_ctrl+0x39c>)
    d89e:	e0fb      	b.n	da98 <isr_rx_conn_pkt_ctrl+0x290>
	if (_radio.conn_upd == 0) {
    d8a0:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d8a4:	b90a      	cbnz	r2, d8aa <isr_rx_conn_pkt_ctrl+0xa2>
		_radio.conn_upd = conn;
    d8a6:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d8aa:	7b22      	ldrb	r2, [r4, #12]
    d8ac:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d8b0:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d8b4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d8b8:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d8ba:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d8be:	7c20      	ldrb	r0, [r4, #16]
    d8c0:	7be2      	ldrb	r2, [r4, #15]
    d8c2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d8c6:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d8ca:	7ca0      	ldrb	r0, [r4, #18]
    d8cc:	7c62      	ldrb	r2, [r4, #17]
    d8ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d8d2:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d8d6:	7ce2      	ldrb	r2, [r4, #19]
    d8d8:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d8da:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d8de:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d8e2:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d8e6:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d8ea:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d8ee:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d8f2:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d8f4:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d8f8:	2201      	movs	r2, #1
    d8fa:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d8fe:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d902:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d906:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d90a:	4293      	cmp	r3, r2
    d90c:	d007      	beq.n	d91e <isr_rx_conn_pkt_ctrl+0x116>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d90e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d912:	f003 0307 	and.w	r3, r3, #7
    d916:	2b04      	cmp	r3, #4
    d918:	d101      	bne.n	d91e <isr_rx_conn_pkt_ctrl+0x116>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d91a:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d91e:	2000      	movs	r0, #0
    d920:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d924:	e03a      	b.n	d99c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    d926:	4b99      	ldr	r3, [pc, #612]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    d928:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d92c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d930:	2b00      	cmp	r3, #0
    d932:	f281 806e 	bge.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d936:	7a41      	ldrb	r1, [r0, #9]
    d938:	2001      	movs	r0, #1
    d93a:	f7fc fa27 	bl	9d8c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d93e:	2800      	cmp	r0, #0
    d940:	f001 8067 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d944:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d948:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d94a:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d94c:	041f      	lsls	r7, r3, #16
    d94e:	f101 8076 	bmi.w	ea3e <isr_rx_conn_pkt_ctrl+0x1236>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d952:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d956:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d95a:	429a      	cmp	r2, r3
    d95c:	d006      	beq.n	d96c <isr_rx_conn_pkt_ctrl+0x164>
    d95e:	4b8c      	ldr	r3, [pc, #560]	; (db90 <isr_rx_conn_pkt_ctrl+0x388>)
    d960:	9301      	str	r3, [sp, #4]
    d962:	9300      	str	r3, [sp, #0]
    d964:	4b8b      	ldr	r3, [pc, #556]	; (db94 <isr_rx_conn_pkt_ctrl+0x38c>)
    d966:	681c      	ldr	r4, [r3, #0]
    d968:	4b8f      	ldr	r3, [pc, #572]	; (dba8 <isr_rx_conn_pkt_ctrl+0x3a0>)
    d96a:	e795      	b.n	d898 <isr_rx_conn_pkt_ctrl+0x90>
	memcpy(&conn->llcp.chan_map.chm[0],
    d96c:	2205      	movs	r2, #5
    d96e:	f104 010c 	add.w	r1, r4, #12
    d972:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d976:	f7f4 fa55 	bl	1e24 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d97a:	7c63      	ldrb	r3, [r4, #17]
    d97c:	7ca2      	ldrb	r2, [r4, #18]
    d97e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d982:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d986:	2302      	movs	r3, #2
    d988:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d98c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d990:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d992:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d994:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d998:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d99c:	b003      	add	sp, #12
    d99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d9a2:	7a41      	ldrb	r1, [r0, #9]
    d9a4:	2002      	movs	r0, #2
    d9a6:	f7fc f9f1 	bl	9d8c <pdu_len_cmp>
    d9aa:	2800      	cmp	r0, #0
    d9ac:	f001 8031 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d9b0:	4b76      	ldr	r3, [pc, #472]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    d9b2:	7b22      	ldrb	r2, [r4, #12]
    d9b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d9b8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d9bc:	2000      	movs	r0, #0
	return nack;
    d9be:	e7ed      	b.n	d99c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    d9c0:	4e72      	ldr	r6, [pc, #456]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    d9c2:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d9c6:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d9ca:	2b00      	cmp	r3, #0
    d9cc:	f281 8021 	bge.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d9d0:	7a41      	ldrb	r1, [r0, #9]
    d9d2:	2003      	movs	r0, #3
    d9d4:	f7fc f9da 	bl	9d8c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d9d8:	2800      	cmp	r0, #0
    d9da:	f001 801a 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d9de:	2208      	movs	r2, #8
    d9e0:	f104 0116 	add.w	r1, r4, #22
    d9e4:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d9e8:	f7f4 fa1c 	bl	1e24 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d9ec:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d9f0:	2204      	movs	r2, #4
    d9f2:	f104 011e 	add.w	r1, r4, #30
    d9f6:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d9fa:	f7f4 fa13 	bl	1e24 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d9fe:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    da02:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    da06:	f042 0204 	orr.w	r2, r2, #4
    da0a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    da0e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    da12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    da16:	2301      	movs	r3, #1
    da18:	702b      	strb	r3, [r5, #0]
    da1a:	e7cf      	b.n	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (_radio.conn_curr->role ||
    da1c:	4d5b      	ldr	r5, [pc, #364]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    da1e:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    da22:	f996 301d 	ldrsb.w	r3, [r6, #29]
    da26:	2b00      	cmp	r3, #0
    da28:	f2c0 87f3 	blt.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    da2c:	7a41      	ldrb	r1, [r0, #9]
    da2e:	2004      	movs	r0, #4
    da30:	f7fc f9ac 	bl	9d8c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    da34:	2800      	cmp	r0, #0
    da36:	f000 87ec 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    da3a:	2208      	movs	r2, #8
    da3c:	f104 010c 	add.w	r1, r4, #12
    da40:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    da44:	f7f4 f9ee 	bl	1e24 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    da48:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    da4c:	2204      	movs	r2, #4
    da4e:	f104 0114 	add.w	r1, r4, #20
    da52:	f500 708b 	add.w	r0, r0, #278	; 0x116
    da56:	f7f4 f9e5 	bl	1e24 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    da5a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    da5e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    da62:	f043 0304 	orr.w	r3, r3, #4
    da66:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    da6a:	e7a7      	b.n	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    da6c:	4b47      	ldr	r3, [pc, #284]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    da6e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    da72:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    da76:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    da7a:	42b3      	cmp	r3, r6
    da7c:	d013      	beq.n	daa6 <isr_rx_conn_pkt_ctrl+0x29e>
    da7e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    da82:	2b03      	cmp	r3, #3
    da84:	d00f      	beq.n	daa6 <isr_rx_conn_pkt_ctrl+0x29e>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    da86:	4b42      	ldr	r3, [pc, #264]	; (db90 <isr_rx_conn_pkt_ctrl+0x388>)
    da88:	9301      	str	r3, [sp, #4]
    da8a:	9300      	str	r3, [sp, #0]
    da8c:	4b41      	ldr	r3, [pc, #260]	; (db94 <isr_rx_conn_pkt_ctrl+0x38c>)
    da8e:	4a43      	ldr	r2, [pc, #268]	; (db9c <isr_rx_conn_pkt_ctrl+0x394>)
    da90:	681c      	ldr	r4, [r3, #0]
    da92:	4943      	ldr	r1, [pc, #268]	; (dba0 <isr_rx_conn_pkt_ctrl+0x398>)
    da94:	4b45      	ldr	r3, [pc, #276]	; (dbac <isr_rx_conn_pkt_ctrl+0x3a4>)
    da96:	4846      	ldr	r0, [pc, #280]	; (dbb0 <isr_rx_conn_pkt_ctrl+0x3a8>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    da98:	47a0      	blx	r4
    da9a:	4040      	eors	r0, r0
    da9c:	f380 8811 	msr	BASEPRI, r0
    daa0:	f04f 0004 	mov.w	r0, #4
    daa4:	df02      	svc	2
		if (_radio.conn_curr->role ||
    daa6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    daaa:	2b00      	cmp	r3, #0
    daac:	f2c0 87b1 	blt.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    dab0:	7a61      	ldrb	r1, [r4, #9]
    dab2:	2005      	movs	r0, #5
    dab4:	f7fc f96a 	bl	9d8c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    dab8:	2800      	cmp	r0, #0
    daba:	f000 87aa 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    dabe:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    dac0:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    dac2:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    dac4:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    dac8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    dacc:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    dad0:	e764      	b.n	d99c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    dad2:	7a41      	ldrb	r1, [r0, #9]
    dad4:	2006      	movs	r0, #6
    dad6:	f7fc f959 	bl	9d8c <pdu_len_cmp>
    dada:	2800      	cmp	r0, #0
    dadc:	f000 8799 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.role == ROLE_SLAVE) {
    dae0:	4b2a      	ldr	r3, [pc, #168]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    dae2:	7cda      	ldrb	r2, [r3, #19]
    dae4:	2a03      	cmp	r2, #3
    dae6:	4619      	mov	r1, r3
    dae8:	d124      	bne.n	db34 <isr_rx_conn_pkt_ctrl+0x32c>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    daea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    daee:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    daf2:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    daf6:	4290      	cmp	r0, r2
    daf8:	d003      	beq.n	db02 <isr_rx_conn_pkt_ctrl+0x2fa>
    dafa:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    dafe:	2803      	cmp	r0, #3
    db00:	d1c1      	bne.n	da86 <isr_rx_conn_pkt_ctrl+0x27e>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    db02:	2000      	movs	r0, #0
    db04:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    db08:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    db0a:	2003      	movs	r0, #3
    db0c:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    db10:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    db14:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    db18:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    db1c:	065e      	lsls	r6, r3, #25
    db1e:	d505      	bpl.n	db2c <isr_rx_conn_pkt_ctrl+0x324>
			_radio.conn_curr->refresh = 0;
    db20:	f36f 1386 	bfc	r3, #6, #1
    db24:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    db28:	2309      	movs	r3, #9
    db2a:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    db2c:	2301      	movs	r3, #1
    db2e:	702b      	strb	r3, [r5, #0]
				break;
    db30:	f000 bccd 	b.w	e4ce <isr_rx_conn_pkt_ctrl+0xcc6>
			_radio.conn_curr->pause_rx = 0;
    db34:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    db38:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    db3c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    db40:	f36f 03c3 	bfc	r3, #3, #1
    db44:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    db48:	e7e4      	b.n	db14 <isr_rx_conn_pkt_ctrl+0x30c>
		if (!_radio.conn_curr->role ||
    db4a:	4b10      	ldr	r3, [pc, #64]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    db4c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    db50:	f995 301d 	ldrsb.w	r3, [r5, #29]
    db54:	2b00      	cmp	r3, #0
    db56:	f280 875c 	bge.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    db5a:	7a41      	ldrb	r1, [r0, #9]
    db5c:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    db5e:	f7fc f915 	bl	9d8c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    db62:	2800      	cmp	r0, #0
    db64:	f000 8755 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    db68:	4631      	mov	r1, r6
    db6a:	4628      	mov	r0, r5
}
    db6c:	b003      	add	sp, #12
    db6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    db72:	f7fe ba43 	b.w	bffc <feature_rsp_send>
		if (_radio.conn_curr->role ||
    db76:	4b05      	ldr	r3, [pc, #20]	; (db8c <isr_rx_conn_pkt_ctrl+0x384>)
    db78:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    db7c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    db80:	2b00      	cmp	r3, #0
    db82:	f2c0 8746 	blt.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    db86:	7a41      	ldrb	r1, [r0, #9]
    db88:	200e      	movs	r0, #14
    db8a:	e7e8      	b.n	db5e <isr_rx_conn_pkt_ctrl+0x356>
    db8c:	200008c0 	.word	0x200008c0
    db90:	0001563e 	.word	0x0001563e
    db94:	20003a5c 	.word	0x20003a5c
    db98:	000181d0 	.word	0x000181d0
    db9c:	000167b9 	.word	0x000167b9
    dba0:	00016808 	.word	0x00016808
    dba4:	00018658 	.word	0x00018658
    dba8:	000181dc 	.word	0x000181dc
    dbac:	00017e82 	.word	0x00017e82
    dbb0:	0001869a 	.word	0x0001869a
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    dbb4:	7a41      	ldrb	r1, [r0, #9]
    dbb6:	2009      	movs	r0, #9
    dbb8:	f7fc f8e8 	bl	9d8c <pdu_len_cmp>
    dbbc:	2800      	cmp	r0, #0
    dbbe:	f000 8728 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    dbc2:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    dbc4:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    dbc6:	48b2      	ldr	r0, [pc, #712]	; (de90 <isr_rx_conn_pkt_ctrl+0x688>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    dbc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    dbcc:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    dbd0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    dbd4:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    dbd8:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    dbdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    dbe0:	7ba1      	ldrb	r1, [r4, #14]
    dbe2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    dbe6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    dbea:	f3c1 0110 	ubfx	r1, r1, #0, #17
    dbee:	400b      	ands	r3, r1
    dbf0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    dbf4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    dbf8:	f043 0320 	orr.w	r3, r3, #32
    dbfc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    dc00:	2301      	movs	r3, #1
    dc02:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    dc04:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    dc08:	2000      	movs	r0, #0
    dc0a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    dc0e:	e6c5      	b.n	d99c <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    dc10:	4e9f      	ldr	r6, [pc, #636]	; (de90 <isr_rx_conn_pkt_ctrl+0x688>)
    dc12:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    dc16:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	f280 86f9 	bge.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    dc20:	7a41      	ldrb	r1, [r0, #9]
    dc22:	200a      	movs	r0, #10
    dc24:	f7fc f8b2 	bl	9d8c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    dc28:	2800      	cmp	r0, #0
    dc2a:	f000 86f2 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc2e:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    dc32:	f7f9 fabe 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    dc36:	4601      	mov	r1, r0
    dc38:	b908      	cbnz	r0, dc3e <isr_rx_conn_pkt_ctrl+0x436>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    dc3a:	2001      	movs	r0, #1
    dc3c:	e6ae      	b.n	d99c <isr_rx_conn_pkt_ctrl+0x194>
		conn->refresh = 1;
    dc3e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    dc42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    dc46:	f36f 1304 	bfc	r3, #4, #1
    dc4a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc4e:	7903      	ldrb	r3, [r0, #4]
    dc50:	f043 0303 	orr.w	r3, r3, #3
    dc54:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dc56:	2301      	movs	r3, #1
    dc58:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    dc5a:	230b      	movs	r3, #11
    dc5c:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    dc5e:	4628      	mov	r0, r5
    dc60:	f000 bced 	b.w	e63e <isr_rx_conn_pkt_ctrl+0xe36>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    dc64:	7a41      	ldrb	r1, [r0, #9]
    dc66:	200b      	movs	r0, #11
    dc68:	f7fc f890 	bl	9d8c <pdu_len_cmp>
    dc6c:	2800      	cmp	r0, #0
    dc6e:	f000 86d0 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    dc72:	4887      	ldr	r0, [pc, #540]	; (de90 <isr_rx_conn_pkt_ctrl+0x688>)
    dc74:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    dc78:	f994 301d 	ldrsb.w	r3, [r4, #29]
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	db1b      	blt.n	dcb8 <isr_rx_conn_pkt_ctrl+0x4b0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc80:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dc84:	f7f9 fa95 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    dc88:	4601      	mov	r1, r0
    dc8a:	2800      	cmp	r0, #0
    dc8c:	d0d5      	beq.n	dc3a <isr_rx_conn_pkt_ctrl+0x432>
		conn->enc_tx = 0;
    dc8e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    dc92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    dc96:	f043 0304 	orr.w	r3, r3, #4
    dc9a:	f36f 1304 	bfc	r3, #4, #1
    dc9e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dca2:	7903      	ldrb	r3, [r0, #4]
    dca4:	f043 0303 	orr.w	r3, r3, #3
    dca8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    dcaa:	2301      	movs	r3, #1
    dcac:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    dcae:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    dcb0:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    dcb2:	4620      	mov	r0, r4
    dcb4:	f000 bcc3 	b.w	e63e <isr_rx_conn_pkt_ctrl+0xe36>
		conn->enc_tx = 0;
    dcb8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    dcbc:	f36f 1345 	bfc	r3, #5, #1
    dcc0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    dcc4:	e67a      	b.n	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    dcc6:	7a41      	ldrb	r1, [r0, #9]
    dcc8:	200c      	movs	r0, #12
    dcca:	f7fc f85f 	bl	9d8c <pdu_len_cmp>
    dcce:	2800      	cmp	r0, #0
    dcd0:	f000 869f 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    dcd4:	486e      	ldr	r0, [pc, #440]	; (de90 <isr_rx_conn_pkt_ctrl+0x688>)
    dcd6:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    dcda:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    dcde:	f013 0701 	ands.w	r7, r3, #1
    dce2:	d150      	bne.n	dd86 <isr_rx_conn_pkt_ctrl+0x57e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dce4:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dce8:	f7f9 fa63 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    dcec:	4601      	mov	r1, r0
    dcee:	2800      	cmp	r0, #0
    dcf0:	d0a3      	beq.n	dc3a <isr_rx_conn_pkt_ctrl+0x432>
		conn->llcp_version.tx = 1;
    dcf2:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    dcf6:	f043 0301 	orr.w	r3, r3, #1
    dcfa:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dcfe:	7903      	ldrb	r3, [r0, #4]
    dd00:	f043 0303 	orr.w	r3, r3, #3
    dd04:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    dd06:	2306      	movs	r3, #6
    dd08:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    dd0a:	230c      	movs	r3, #12
    dd0c:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    dd0e:	2309      	movs	r3, #9
    dd10:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    dd12:	f06f 030e 	mvn.w	r3, #14
    dd16:	7243      	strb	r3, [r0, #9]
    dd18:	2305      	movs	r3, #5
    dd1a:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    dd1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd20:	72c3      	strb	r3, [r0, #11]
    dd22:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    dd24:	4630      	mov	r0, r6
    dd26:	f7fe f94f 	bl	bfc8 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    dd2a:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    dd2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dd32:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    dd36:	f004 fe37 	bl	129a8 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dd3a:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    dd3c:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dd3e:	2201      	movs	r2, #1
    dd40:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    dd44:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dd48:	7003      	strb	r3, [r0, #0]
    dd4a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    dd4c:	b1c2      	cbz	r2, dd80 <isr_rx_conn_pkt_ctrl+0x578>
		pdu_data_tx->md = 1;
    dd4e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    dd52:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    dd54:	7b23      	ldrb	r3, [r4, #12]
    dd56:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    dd5a:	7ba2      	ldrb	r2, [r4, #14]
    dd5c:	7b63      	ldrb	r3, [r4, #13]
    dd5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd62:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    dd66:	7be3      	ldrb	r3, [r4, #15]
    dd68:	7c22      	ldrb	r2, [r4, #16]
    dd6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd6e:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    dd72:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    dd76:	f043 0302 	orr.w	r3, r3, #2
    dd7a:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    dd7e:	e61d      	b.n	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		pdu_data_tx->md = 0;
    dd80:	f362 1304 	bfi	r3, r2, #4, #1
    dd84:	e7e5      	b.n	dd52 <isr_rx_conn_pkt_ctrl+0x54a>
	} else if (!conn->llcp_version.rx) {
    dd86:	f013 0302 	ands.w	r3, r3, #2
    dd8a:	f47f ae17 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->procedure_expire = 0;
    dd8e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    dd92:	2301      	movs	r3, #1
    dd94:	702b      	strb	r3, [r5, #0]
    dd96:	e7dd      	b.n	dd54 <isr_rx_conn_pkt_ctrl+0x54c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    dd98:	7a41      	ldrb	r1, [r0, #9]
    dd9a:	200d      	movs	r0, #13
    dd9c:	f7fb fff6 	bl	9d8c <pdu_len_cmp>
    dda0:	2800      	cmp	r0, #0
    dda2:	f000 8636 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->pause_rx = 0;
    dda6:	4b3a      	ldr	r3, [pc, #232]	; (de90 <isr_rx_conn_pkt_ctrl+0x688>)
    dda8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    ddac:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    ddb0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ddb4:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    ddb8:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    ddba:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    ddbe:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    ddc2:	2301      	movs	r3, #1
    ddc4:	702b      	strb	r3, [r5, #0]
    ddc6:	e5e9      	b.n	d99c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    ddc8:	7a41      	ldrb	r1, [r0, #9]
    ddca:	200f      	movs	r0, #15
    ddcc:	f7fb ffde 	bl	9d8c <pdu_len_cmp>
    ddd0:	2800      	cmp	r0, #0
    ddd2:	f000 861e 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    ddd6:	4b2e      	ldr	r3, [pc, #184]	; (de90 <isr_rx_conn_pkt_ctrl+0x688>)
    ddd8:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    dddc:	461a      	mov	r2, r3
    ddde:	b151      	cbz	r1, ddf6 <isr_rx_conn_pkt_ctrl+0x5ee>
    dde0:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    dde4:	4281      	cmp	r1, r0
    dde6:	d006      	beq.n	ddf6 <isr_rx_conn_pkt_ctrl+0x5ee>
			nack = reject_ext_ind_send(_radio.conn_curr,
    dde8:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    ddea:	210f      	movs	r1, #15
}
    ddec:	b003      	add	sp, #12
    ddee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    ddf2:	f7fe b96d 	b.w	c0d0 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    ddf6:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    ddfa:	f990 301d 	ldrsb.w	r3, [r0, #29]
    ddfe:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    de02:	2b00      	cmp	r3, #0
    de04:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    de08:	f2c0 80a7 	blt.w	df5a <isr_rx_conn_pkt_ctrl+0x752>
			if ((conn->llcp_conn_param.req !=
    de0c:	4299      	cmp	r1, r3
    de0e:	d009      	beq.n	de24 <isr_rx_conn_pkt_ctrl+0x61c>
			    ((conn->llcp_conn_param.state ==
    de10:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    de14:	f013 0307 	ands.w	r3, r3, #7
    de18:	d002      	beq.n	de20 <isr_rx_conn_pkt_ctrl+0x618>
			      LLCP_CPR_STATE_REQ) ||
    de1a:	3b04      	subs	r3, #4
    de1c:	2b01      	cmp	r3, #1
    de1e:	d801      	bhi.n	de24 <isr_rx_conn_pkt_ctrl+0x61c>
				nack = reject_ext_ind_send(_radio.conn_curr,
    de20:	2223      	movs	r2, #35	; 0x23
    de22:	e7e2      	b.n	ddea <isr_rx_conn_pkt_ctrl+0x5e2>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    de24:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    de28:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    de2c:	4299      	cmp	r1, r3
    de2e:	d003      	beq.n	de38 <isr_rx_conn_pkt_ctrl+0x630>
    de30:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    de34:	2b03      	cmp	r3, #3
    de36:	d105      	bne.n	de44 <isr_rx_conn_pkt_ctrl+0x63c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    de38:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    de3c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    de40:	4299      	cmp	r1, r3
    de42:	d001      	beq.n	de48 <isr_rx_conn_pkt_ctrl+0x640>
				nack = reject_ext_ind_send(_radio.conn_curr,
    de44:	222a      	movs	r2, #42	; 0x2a
    de46:	e7d0      	b.n	ddea <isr_rx_conn_pkt_ctrl+0x5e2>
				if ((cpr->interval_min < 6) ||
    de48:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    de4c:	4643      	mov	r3, r8
    de4e:	2b05      	cmp	r3, #5
    de50:	d91b      	bls.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->interval_max > 3200) ||
    de52:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    de54:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    de58:	d817      	bhi.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->interval_max > 3200) ||
    de5a:	45b8      	cmp	r8, r7
    de5c:	d815      	bhi.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->latency > 499) ||
    de5e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    de62:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    de66:	d210      	bcs.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->timeout < 10) ||
    de68:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    de6c:	f1ae 060a 	sub.w	r6, lr, #10
    de70:	b2b6      	uxth	r6, r6
    de72:	f640 4976 	movw	r9, #3190	; 0xc76
    de76:	454e      	cmp	r6, r9
    de78:	d807      	bhi.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
				     ((cpr->latency + 1) *
    de7a:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    de7e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    de82:	da02      	bge.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->preferred_periodicity >
    de84:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    de86:	428f      	cmp	r7, r1
    de88:	d204      	bcs.n	de94 <isr_rx_conn_pkt_ctrl+0x68c>
				nack = reject_ext_ind_send(conn,
    de8a:	221e      	movs	r2, #30
    de8c:	e7ad      	b.n	ddea <isr_rx_conn_pkt_ctrl+0x5e2>
    de8e:	bf00      	nop
    de90:	200008c0 	.word	0x200008c0
				conn->llcp_conn_param.interval = cpr->interval_min;
    de94:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    de98:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    de9c:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    dea0:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    dea4:	7da6      	ldrb	r6, [r4, #22]
    dea6:	7d61      	ldrb	r1, [r4, #21]
    dea8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    deac:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    deb0:	7e26      	ldrb	r6, [r4, #24]
    deb2:	7de1      	ldrb	r1, [r4, #23]
    deb4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    deb8:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    debc:	7ea6      	ldrb	r6, [r4, #26]
    debe:	7e61      	ldrb	r1, [r4, #25]
    dec0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dec4:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    dec8:	7f26      	ldrb	r6, [r4, #28]
    deca:	7ee1      	ldrb	r1, [r4, #27]
    decc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    ded0:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    ded4:	7fa6      	ldrb	r6, [r4, #30]
    ded6:	7f61      	ldrb	r1, [r4, #29]
    ded8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dedc:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    dee0:	7fe1      	ldrb	r1, [r4, #31]
    dee2:	f894 6020 	ldrb.w	r6, [r4, #32]
    dee6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    deea:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    deee:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    def2:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    def6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    defa:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    defe:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    df02:	6a41      	ldr	r1, [r0, #36]	; 0x24
    df04:	428c      	cmp	r4, r1
    df06:	d10f      	bne.n	df28 <isr_rx_conn_pkt_ctrl+0x720>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    df08:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    df0a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    df0e:	4361      	muls	r1, r4
    df10:	f242 7410 	movw	r4, #10000	; 0x2710
    df14:	fb04 130e 	mla	r3, r4, lr, r1
    df18:	3b01      	subs	r3, #1
    df1a:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    df1e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    df20:	b29b      	uxth	r3, r3
    df22:	4299      	cmp	r1, r3
    df24:	f000 8092 	beq.w	e04c <isr_rx_conn_pkt_ctrl+0x844>
					if (conn->pause_tx) {
    df28:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    df2c:	071c      	lsls	r4, r3, #28
    df2e:	f140 8087 	bpl.w	e040 <isr_rx_conn_pkt_ctrl+0x838>
						conn->llcp_conn_param.state =
    df32:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    df36:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    df38:	f361 0302 	bfi	r3, r1, #0, #3
    df3c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    df40:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    df44:	3b01      	subs	r3, #1
    df46:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    df4a:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    df4e:	2b00      	cmp	r3, #0
    df50:	f47f ad34 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
				_radio.conn_upd = conn;
    df54:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    df58:	e530      	b.n	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    df5a:	4299      	cmp	r1, r3
    df5c:	d003      	beq.n	df66 <isr_rx_conn_pkt_ctrl+0x75e>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    df5e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    df62:	0799      	lsls	r1, r3, #30
    df64:	d17b      	bne.n	e05e <isr_rx_conn_pkt_ctrl+0x856>
			if ((cpr->interval_min < 6) ||
    df66:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    df6a:	4643      	mov	r3, r8
    df6c:	2b05      	cmp	r3, #5
    df6e:	d98c      	bls.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->interval_max > 3200) ||
    df70:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    df72:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    df76:	d888      	bhi.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->interval_max > 3200) ||
    df78:	45b8      	cmp	r8, r7
    df7a:	d886      	bhi.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->latency > 499) ||
    df7c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    df80:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    df84:	d281      	bcs.n	de8a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    df86:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    df8a:	f1ae 060a 	sub.w	r6, lr, #10
    df8e:	b2b6      	uxth	r6, r6
    df90:	f640 4976 	movw	r9, #3190	; 0xc76
    df94:	454e      	cmp	r6, r9
    df96:	f63f af78 	bhi.w	de8a <isr_rx_conn_pkt_ctrl+0x682>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    df9a:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    df9e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    dfa2:	f6bf af72 	bge.w	de8a <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    dfa6:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    dfa8:	428f      	cmp	r7, r1
    dfaa:	f4ff af6e 	bcc.w	de8a <isr_rx_conn_pkt_ctrl+0x682>
			conn->llcp_conn_param.interval = cpr->interval_min;
    dfae:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    dfb2:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    dfb6:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    dfba:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    dfbe:	7da6      	ldrb	r6, [r4, #22]
    dfc0:	7d61      	ldrb	r1, [r4, #21]
    dfc2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    dfc6:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    dfca:	7e26      	ldrb	r6, [r4, #24]
    dfcc:	7de1      	ldrb	r1, [r4, #23]
    dfce:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dfd2:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    dfd6:	7ea6      	ldrb	r6, [r4, #26]
    dfd8:	7e61      	ldrb	r1, [r4, #25]
    dfda:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dfde:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    dfe2:	7f26      	ldrb	r6, [r4, #28]
    dfe4:	7ee1      	ldrb	r1, [r4, #27]
    dfe6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dfea:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    dfee:	7fa6      	ldrb	r6, [r4, #30]
    dff0:	7f61      	ldrb	r1, [r4, #29]
    dff2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dff6:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    dffa:	7fe1      	ldrb	r1, [r4, #31]
    dffc:	f894 6020 	ldrb.w	r6, [r4, #32]
    e000:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    e004:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e008:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    e00c:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    e010:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    e014:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    e018:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    e01c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e01e:	428c      	cmp	r4, r1
    e020:	d10e      	bne.n	e040 <isr_rx_conn_pkt_ctrl+0x838>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    e022:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    e024:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e028:	4361      	muls	r1, r4
    e02a:	f242 7410 	movw	r4, #10000	; 0x2710
    e02e:	fb04 130e 	mla	r3, r4, lr, r1
    e032:	3b01      	subs	r3, #1
    e034:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    e038:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    e03a:	b29b      	uxth	r3, r3
    e03c:	4299      	cmp	r1, r3
    e03e:	d005      	beq.n	e04c <isr_rx_conn_pkt_ctrl+0x844>
				*rx_enqueue = 1;
    e040:	2301      	movs	r3, #1
    e042:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    e044:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e048:	2103      	movs	r1, #3
    e04a:	e775      	b.n	df38 <isr_rx_conn_pkt_ctrl+0x730>
				conn->llcp_conn_param.status = 0;
    e04c:	2300      	movs	r3, #0
    e04e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    e052:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    e056:	2101      	movs	r1, #1
    e058:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    e05c:	e76c      	b.n	df38 <isr_rx_conn_pkt_ctrl+0x730>
			LL_ASSERT(0);
    e05e:	4bb9      	ldr	r3, [pc, #740]	; (e344 <isr_rx_conn_pkt_ctrl+0xb3c>)
    e060:	9301      	str	r3, [sp, #4]
    e062:	9300      	str	r3, [sp, #0]
    e064:	4bb8      	ldr	r3, [pc, #736]	; (e348 <isr_rx_conn_pkt_ctrl+0xb40>)
    e066:	4ab9      	ldr	r2, [pc, #740]	; (e34c <isr_rx_conn_pkt_ctrl+0xb44>)
    e068:	681c      	ldr	r4, [r3, #0]
    e06a:	49b9      	ldr	r1, [pc, #740]	; (e350 <isr_rx_conn_pkt_ctrl+0xb48>)
    e06c:	4bb9      	ldr	r3, [pc, #740]	; (e354 <isr_rx_conn_pkt_ctrl+0xb4c>)
    e06e:	48ba      	ldr	r0, [pc, #744]	; (e358 <isr_rx_conn_pkt_ctrl+0xb50>)
    e070:	e512      	b.n	da98 <isr_rx_conn_pkt_ctrl+0x290>
		if (_radio.conn_curr->role ||
    e072:	4bba      	ldr	r3, [pc, #744]	; (e35c <isr_rx_conn_pkt_ctrl+0xb54>)
    e074:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    e078:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e07c:	2b00      	cmp	r3, #0
    e07e:	f2c0 84c8 	blt.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    e082:	7a41      	ldrb	r1, [r0, #9]
    e084:	2010      	movs	r0, #16
    e086:	f7fb fe81 	bl	9d8c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e08a:	2800      	cmp	r0, #0
    e08c:	f000 84c1 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		if (!_radio.conn_curr->role &&
    e090:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e094:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    e098:	429a      	cmp	r2, r3
    e09a:	f43f ac8f 	beq.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		    (_radio.conn_curr->llcp_conn_param.state ==
    e09e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    e0a2:	f003 0307 	and.w	r3, r3, #7
    e0a6:	2b04      	cmp	r3, #4
    e0a8:	f47f ac88 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
			if ((cpr->interval_min < 6) ||
    e0ac:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    e0b0:	fa1f f28e 	uxth.w	r2, lr
    e0b4:	2a05      	cmp	r2, #5
    e0b6:	d91b      	bls.n	e0f0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->interval_max > 3200) ||
    e0b8:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    e0ba:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    e0be:	d817      	bhi.n	e0f0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->interval_max > 3200) ||
    e0c0:	429a      	cmp	r2, r3
    e0c2:	d815      	bhi.n	e0f0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->latency > 499) ||
    e0c4:	8a27      	ldrh	r7, [r4, #16]
    e0c6:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    e0c8:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    e0cc:	d210      	bcs.n	e0f0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e0ce:	8a66      	ldrh	r6, [r4, #18]
    e0d0:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    e0d2:	f1a0 010a 	sub.w	r1, r0, #10
    e0d6:	b289      	uxth	r1, r1
    e0d8:	f640 4c76 	movw	ip, #3190	; 0xc76
    e0dc:	4561      	cmp	r1, ip
    e0de:	d807      	bhi.n	e0f0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    e0e0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    e0e4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    e0e8:	da02      	bge.n	e0f0 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    e0ea:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    e0ec:	4293      	cmp	r3, r2
    e0ee:	d203      	bcs.n	e0f8 <isr_rx_conn_pkt_ctrl+0x8f0>
				nack = reject_ext_ind_send(conn,
    e0f0:	221e      	movs	r2, #30
    e0f2:	2110      	movs	r1, #16
    e0f4:	4628      	mov	r0, r5
    e0f6:	e679      	b.n	ddec <isr_rx_conn_pkt_ctrl+0x5e4>
			_radio.conn_curr->procedure_expire = 0;
    e0f8:	2000      	movs	r0, #0
    e0fa:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    e0fe:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    e102:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    e106:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    e10a:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    e10e:	7da2      	ldrb	r2, [r4, #22]
    e110:	7d63      	ldrb	r3, [r4, #21]
    e112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    e116:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    e11a:	7e22      	ldrb	r2, [r4, #24]
    e11c:	7de3      	ldrb	r3, [r4, #23]
    e11e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e122:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    e126:	7ea2      	ldrb	r2, [r4, #26]
    e128:	7e63      	ldrb	r3, [r4, #25]
    e12a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e12e:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    e132:	7f22      	ldrb	r2, [r4, #28]
    e134:	7ee3      	ldrb	r3, [r4, #27]
    e136:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e13a:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    e13e:	7fa2      	ldrb	r2, [r4, #30]
    e140:	7f63      	ldrb	r3, [r4, #29]
    e142:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e146:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    e14a:	f894 2020 	ldrb.w	r2, [r4, #32]
    e14e:	7fe3      	ldrb	r3, [r4, #31]
    e150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e154:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    e158:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    e15c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e160:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e164:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    e168:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    e16c:	2201      	movs	r2, #1
    e16e:	f362 0302 	bfi	r3, r2, #0, #3
    e172:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    e176:	e411      	b.n	d99c <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    e178:	7a41      	ldrb	r1, [r0, #9]
    e17a:	2011      	movs	r0, #17
    e17c:	f7fb fe06 	bl	9d8c <pdu_len_cmp>
    e180:	2800      	cmp	r0, #0
    e182:	f000 8446 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e186:	4a75      	ldr	r2, [pc, #468]	; (e35c <isr_rx_conn_pkt_ctrl+0xb54>)
    e188:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e18c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    e190:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    e194:	4281      	cmp	r1, r0
    e196:	7b21      	ldrb	r1, [r4, #12]
    e198:	d027      	beq.n	e1ea <isr_rx_conn_pkt_ctrl+0x9e2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    e19a:	2916      	cmp	r1, #22
    e19c:	f47f ac0e 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (rej_ext_ind->error_code != 0x23) {
    e1a0:	7b61      	ldrb	r1, [r4, #13]
    e1a2:	2923      	cmp	r1, #35	; 0x23
    e1a4:	d00e      	beq.n	e1c4 <isr_rx_conn_pkt_ctrl+0x9bc>
				_radio.conn_curr->phy_tx;
    e1a6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    e1aa:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    e1ae:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    e1b2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e1b6:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    e1ba:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    e1bc:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    e1c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    e1c4:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    e1c8:	0792      	lsls	r2, r2, #30
    e1ca:	f57f abf7 	bpl.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e1ce:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    e1d0:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e1d2:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    e1d4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    e1d8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e1dc:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    e1de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e1e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e1e6:	7363      	strb	r3, [r4, #13]
    e1e8:	e415      	b.n	da16 <isr_rx_conn_pkt_ctrl+0x20e>
		   _radio.conn_curr->llcp_conn_param.req) {
    e1ea:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e1ee:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    e1f2:	42b8      	cmp	r0, r7
    e1f4:	d04c      	beq.n	e290 <isr_rx_conn_pkt_ctrl+0xa88>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    e1f6:	290f      	cmp	r1, #15
    e1f8:	f47f abe0 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
    e1fc:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e200:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    e202:	2800      	cmp	r0, #0
    e204:	db10      	blt.n	e228 <isr_rx_conn_pkt_ctrl+0xa20>
    e206:	291a      	cmp	r1, #26
    e208:	d10e      	bne.n	e228 <isr_rx_conn_pkt_ctrl+0xa20>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e20a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e20e:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e212:	4294      	cmp	r4, r2
    e214:	f000 80d1 	beq.w	e3ba <isr_rx_conn_pkt_ctrl+0xbb2>
    e218:	4b4a      	ldr	r3, [pc, #296]	; (e344 <isr_rx_conn_pkt_ctrl+0xb3c>)
    e21a:	9301      	str	r3, [sp, #4]
    e21c:	9300      	str	r3, [sp, #0]
    e21e:	4b4a      	ldr	r3, [pc, #296]	; (e348 <isr_rx_conn_pkt_ctrl+0xb40>)
    e220:	681c      	ldr	r4, [r3, #0]
    e222:	4b4f      	ldr	r3, [pc, #316]	; (e360 <isr_rx_conn_pkt_ctrl+0xb58>)
    e224:	f7ff bb38 	b.w	d898 <isr_rx_conn_pkt_ctrl+0x90>
	else if (rej_ext_ind->error_code != 0x23) {
    e228:	2923      	cmp	r1, #35	; 0x23
    e22a:	d01a      	beq.n	e262 <isr_rx_conn_pkt_ctrl+0xa5a>
		LL_ASSERT(_radio.conn_upd == conn);
    e22c:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    e230:	42b3      	cmp	r3, r6
    e232:	d009      	beq.n	e248 <isr_rx_conn_pkt_ctrl+0xa40>
    e234:	4b43      	ldr	r3, [pc, #268]	; (e344 <isr_rx_conn_pkt_ctrl+0xb3c>)
    e236:	9301      	str	r3, [sp, #4]
    e238:	9300      	str	r3, [sp, #0]
    e23a:	4b43      	ldr	r3, [pc, #268]	; (e348 <isr_rx_conn_pkt_ctrl+0xb40>)
    e23c:	681c      	ldr	r4, [r3, #0]
    e23e:	4b48      	ldr	r3, [pc, #288]	; (e360 <isr_rx_conn_pkt_ctrl+0xb58>)
			LL_ASSERT(_radio.conn_upd == conn);
    e240:	4a42      	ldr	r2, [pc, #264]	; (e34c <isr_rx_conn_pkt_ctrl+0xb44>)
    e242:	4943      	ldr	r1, [pc, #268]	; (e350 <isr_rx_conn_pkt_ctrl+0xb48>)
    e244:	4847      	ldr	r0, [pc, #284]	; (e364 <isr_rx_conn_pkt_ctrl+0xb5c>)
    e246:	e427      	b.n	da98 <isr_rx_conn_pkt_ctrl+0x290>
		_radio.conn_upd = NULL;
    e248:	2600      	movs	r6, #0
		if (conn->role) {
    e24a:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    e24c:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    e250:	bfb8      	it	lt
    e252:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    e256:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    e25a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    e25e:	bfb8      	it	lt
    e260:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    e262:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e266:	0717      	lsls	r7, r2, #28
    e268:	f57f aba8 	bpl.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
	cp->status = rej_ext_ind->error_code;
    e26c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e26e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    e270:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e272:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    e274:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    e276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    e278:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    e27a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    e27c:	237d      	movs	r3, #125	; 0x7d
    e27e:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    e280:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    e282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e286:	fb93 f3f2 	sdiv	r3, r3, r2
    e28a:	8223      	strh	r3, [r4, #16]
    e28c:	f7ff bbc3 	b.w	da16 <isr_rx_conn_pkt_ctrl+0x20e>
		   _radio.conn_curr->llcp_length.req) {
    e290:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    e294:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e298:	4290      	cmp	r0, r2
    e29a:	d01a      	beq.n	e2d2 <isr_rx_conn_pkt_ctrl+0xaca>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e29c:	2914      	cmp	r1, #20
    e29e:	f47f ab8d 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->llcp_length.ack = conn->llcp_length.req;
    e2a2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    e2a6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    e2aa:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    e2ac:	f360 02c3 	bfi	r2, r0, #3, #1
    e2b0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    e2b4:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    e2b6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    e2ba:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e2bc:	2215      	movs	r2, #21
    e2be:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    e2c0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    e2c2:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    e2c4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    e2c6:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    e2c8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    e2ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    e2cc:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    e2ce:	8263      	strh	r3, [r4, #18]
    e2d0:	e577      	b.n	ddc2 <isr_rx_conn_pkt_ctrl+0x5ba>
		switch (rej_ext_ind->reject_opcode) {
    e2d2:	2903      	cmp	r1, #3
    e2d4:	f47f ab72 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->pause_rx = 0;
    e2d8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    e2dc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    e2e0:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    e2e4:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    e2e6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    e2ea:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e2ee:	230d      	movs	r3, #13
    e2f0:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    e2f2:	7b63      	ldrb	r3, [r4, #13]
    e2f4:	7323      	strb	r3, [r4, #12]
    e2f6:	e564      	b.n	ddc2 <isr_rx_conn_pkt_ctrl+0x5ba>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    e2f8:	7a41      	ldrb	r1, [r0, #9]
    e2fa:	2012      	movs	r0, #18
    e2fc:	f7fb fd46 	bl	9d8c <pdu_len_cmp>
    e300:	2800      	cmp	r0, #0
    e302:	f000 8386 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		nack = ping_resp_send(_radio.conn_curr);
    e306:	4815      	ldr	r0, [pc, #84]	; (e35c <isr_rx_conn_pkt_ctrl+0xb54>)
    e308:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e30c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e310:	f7f8 ff4f 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    e314:	4601      	mov	r1, r0
    e316:	2800      	cmp	r0, #0
    e318:	f43f ac8f 	beq.w	dc3a <isr_rx_conn_pkt_ctrl+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e31c:	7903      	ldrb	r3, [r0, #4]
    e31e:	f043 0303 	orr.w	r3, r3, #3
    e322:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    e324:	2301      	movs	r3, #1
    e326:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    e328:	2313      	movs	r3, #19
    e32a:	e4c1      	b.n	dcb0 <isr_rx_conn_pkt_ctrl+0x4a8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    e32c:	7a41      	ldrb	r1, [r0, #9]
    e32e:	2013      	movs	r0, #19
    e330:	f7fb fd2c 	bl	9d8c <pdu_len_cmp>
    e334:	2800      	cmp	r0, #0
    e336:	f000 836c 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->procedure_expire = 0;
    e33a:	4b08      	ldr	r3, [pc, #32]	; (e35c <isr_rx_conn_pkt_ctrl+0xb54>)
    e33c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e340:	e462      	b.n	dc08 <isr_rx_conn_pkt_ctrl+0x400>
    e342:	bf00      	nop
    e344:	0001563e 	.word	0x0001563e
    e348:	20003a5c 	.word	0x20003a5c
    e34c:	000167b9 	.word	0x000167b9
    e350:	00016808 	.word	0x00016808
    e354:	00017e82 	.word	0x00017e82
    e358:	00016758 	.word	0x00016758
    e35c:	200008c0 	.word	0x200008c0
    e360:	00017e47 	.word	0x00017e47
    e364:	0001872a 	.word	0x0001872a
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    e368:	7a41      	ldrb	r1, [r0, #9]
    e36a:	2007      	movs	r0, #7
    e36c:	f7fb fd0e 	bl	9d8c <pdu_len_cmp>
    e370:	2800      	cmp	r0, #0
    e372:	f000 834e 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e376:	4ad3      	ldr	r2, [pc, #844]	; (e6c4 <isr_rx_conn_pkt_ctrl+0xebc>)
    e378:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e37c:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    e380:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e384:	42b1      	cmp	r1, r6
    e386:	4611      	mov	r1, r2
    e388:	d06b      	beq.n	e462 <isr_rx_conn_pkt_ctrl+0xc5a>
			conn->llcp_conn_param.disabled = 1;
    e38a:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    e38e:	f040 0010 	orr.w	r0, r0, #16
    e392:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    e396:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e39a:	2800      	cmp	r0, #0
    e39c:	db39      	blt.n	e412 <isr_rx_conn_pkt_ctrl+0xc0a>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e39e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e3a2:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e3a6:	4294      	cmp	r4, r2
    e3a8:	d007      	beq.n	e3ba <isr_rx_conn_pkt_ctrl+0xbb2>
    e3aa:	4bc7      	ldr	r3, [pc, #796]	; (e6c8 <isr_rx_conn_pkt_ctrl+0xec0>)
    e3ac:	9301      	str	r3, [sp, #4]
    e3ae:	9300      	str	r3, [sp, #0]
    e3b0:	4bc6      	ldr	r3, [pc, #792]	; (e6cc <isr_rx_conn_pkt_ctrl+0xec4>)
    e3b2:	681c      	ldr	r4, [r3, #0]
    e3b4:	4bc6      	ldr	r3, [pc, #792]	; (e6d0 <isr_rx_conn_pkt_ctrl+0xec8>)
    e3b6:	f7ff ba6f 	b.w	d898 <isr_rx_conn_pkt_ctrl+0x90>
				conn->llcp_conn_param.state =
    e3ba:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e3be:	2105      	movs	r1, #5
    e3c0:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    e3c4:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    e3c8:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    e3cc:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    e3d0:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    e3d4:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    e3d8:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e3dc:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    e3e0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    e3e4:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    e3e6:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e3ea:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    e3ee:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    e3f2:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    e3f4:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    e3f8:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    e3fa:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    e3fe:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    e402:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    e406:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    e40a:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    e40e:	f7ff bac5 	b.w	d99c <isr_rx_conn_pkt_ctrl+0x194>
			LL_ASSERT(_radio.conn_upd == conn);
    e412:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    e416:	4293      	cmp	r3, r2
    e418:	d006      	beq.n	e428 <isr_rx_conn_pkt_ctrl+0xc20>
    e41a:	4bab      	ldr	r3, [pc, #684]	; (e6c8 <isr_rx_conn_pkt_ctrl+0xec0>)
    e41c:	9301      	str	r3, [sp, #4]
    e41e:	9300      	str	r3, [sp, #0]
    e420:	4baa      	ldr	r3, [pc, #680]	; (e6cc <isr_rx_conn_pkt_ctrl+0xec4>)
    e422:	681c      	ldr	r4, [r3, #0]
    e424:	4baa      	ldr	r3, [pc, #680]	; (e6d0 <isr_rx_conn_pkt_ctrl+0xec8>)
    e426:	e70b      	b.n	e240 <isr_rx_conn_pkt_ctrl+0xa38>
			_radio.conn_upd = NULL;
    e428:	2200      	movs	r2, #0
    e42a:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    e42e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e432:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    e436:	0716      	lsls	r6, r2, #28
    e438:	f57f aac0 	bpl.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e43c:	2208      	movs	r2, #8
    e43e:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e440:	221a      	movs	r2, #26
    e442:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    e444:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    e446:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    e448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    e44a:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    e44c:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    e44e:	237d      	movs	r3, #125	; 0x7d
    e450:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    e452:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    e454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e458:	fb93 f3f2 	sdiv	r3, r3, r2
    e45c:	8223      	strh	r3, [r4, #16]
    e45e:	f7ff bb65 	b.w	db2c <isr_rx_conn_pkt_ctrl+0x324>
		} else if (_radio.conn_curr->llcp_length.req !=
    e462:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    e466:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e46a:	4290      	cmp	r0, r2
    e46c:	d009      	beq.n	e482 <isr_rx_conn_pkt_ctrl+0xc7a>
			_radio.conn_curr->llcp_length.ack =
    e46e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    e472:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e476:	f36f 02c3 	bfc	r2, #3, #1
    e47a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    e47e:	f7ff bb55 	b.w	db2c <isr_rx_conn_pkt_ctrl+0x324>
		} else if (_radio.conn_curr->llcp_phy.req !=
    e482:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    e486:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    e48a:	4290      	cmp	r0, r2
    e48c:	d01b      	beq.n	e4c6 <isr_rx_conn_pkt_ctrl+0xcbe>
			_radio.conn_curr->llcp_phy.ack =
    e48e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    e492:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    e496:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    e49a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    e49e:	f362 0002 	bfi	r0, r2, #0, #3
    e4a2:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    e4a6:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    e4aa:	0780      	lsls	r0, r0, #30
    e4ac:	d50f      	bpl.n	e4ce <isr_rx_conn_pkt_ctrl+0xcc6>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e4ae:	200c      	movs	r0, #12
    e4b0:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    e4b2:	2000      	movs	r0, #0
    e4b4:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    e4b6:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    e4b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e4bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e4c0:	7363      	strb	r3, [r4, #13]
    e4c2:	f7ff bb33 	b.w	db2c <isr_rx_conn_pkt_ctrl+0x324>
			switch (llctrl->unknown_rsp.type) {
    e4c6:	7b23      	ldrb	r3, [r4, #12]
    e4c8:	2b12      	cmp	r3, #18
    e4ca:	f47f ab2f 	bne.w	db2c <isr_rx_conn_pkt_ctrl+0x324>
		_radio.conn_curr->procedure_expire = 0;
    e4ce:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    e4d2:	f7ff bb99 	b.w	dc08 <isr_rx_conn_pkt_ctrl+0x400>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    e4d6:	7a41      	ldrb	r1, [r0, #9]
    e4d8:	2014      	movs	r0, #20
    e4da:	f7fb fc57 	bl	9d8c <pdu_len_cmp>
    e4de:	2800      	cmp	r0, #0
    e4e0:	f000 8297 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e4e4:	2f14      	cmp	r7, #20
    e4e6:	d129      	bne.n	e53c <isr_rx_conn_pkt_ctrl+0xd34>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e4e8:	487a      	ldr	r0, [pc, #488]	; (e6d4 <isr_rx_conn_pkt_ctrl+0xecc>)
    e4ea:	f7f8 fe62 	bl	71b2 <mem_acquire>
		if (!node_tx) {
    e4ee:	4606      	mov	r6, r0
    e4f0:	2800      	cmp	r0, #0
    e4f2:	f43f aba2 	beq.w	dc3a <isr_rx_conn_pkt_ctrl+0x432>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e4f6:	4f73      	ldr	r7, [pc, #460]	; (e6c4 <isr_rx_conn_pkt_ctrl+0xebc>)
    e4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    e4fc:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    e500:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e504:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e506:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e508:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e50a:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    e50e:	45e0      	cmp	r8, ip
    e510:	46b9      	mov	r9, r7
    e512:	f894 800b 	ldrb.w	r8, [r4, #11]
    e516:	d113      	bne.n	e540 <isr_rx_conn_pkt_ctrl+0xd38>
	      _radio.conn_curr->llcp_length.ack) &&
    e518:	f1b8 0f14 	cmp.w	r8, #20
    e51c:	d01c      	beq.n	e558 <isr_rx_conn_pkt_ctrl+0xd50>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    e51e:	f1b8 0f15 	cmp.w	r8, #21
    e522:	f000 829a 	beq.w	ea5a <isr_rx_conn_pkt_ctrl+0x1252>
    e526:	4b68      	ldr	r3, [pc, #416]	; (e6c8 <isr_rx_conn_pkt_ctrl+0xec0>)
    e528:	9301      	str	r3, [sp, #4]
    e52a:	9300      	str	r3, [sp, #0]
    e52c:	4b67      	ldr	r3, [pc, #412]	; (e6cc <isr_rx_conn_pkt_ctrl+0xec4>)
    e52e:	4a6a      	ldr	r2, [pc, #424]	; (e6d8 <isr_rx_conn_pkt_ctrl+0xed0>)
    e530:	681c      	ldr	r4, [r3, #0]
    e532:	496a      	ldr	r1, [pc, #424]	; (e6dc <isr_rx_conn_pkt_ctrl+0xed4>)
    e534:	4b6a      	ldr	r3, [pc, #424]	; (e6e0 <isr_rx_conn_pkt_ctrl+0xed8>)
    e536:	486b      	ldr	r0, [pc, #428]	; (e6e4 <isr_rx_conn_pkt_ctrl+0xedc>)
    e538:	f7ff baae 	b.w	da98 <isr_rx_conn_pkt_ctrl+0x290>
	struct radio_pdu_node_tx *node_tx = NULL;
    e53c:	2600      	movs	r6, #0
    e53e:	e7da      	b.n	e4f6 <isr_rx_conn_pkt_ctrl+0xcee>
		 LLCP_LENGTH_STATE_REQ) ||
    e540:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    e544:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    e548:	2f01      	cmp	r7, #1
    e54a:	d9e5      	bls.n	e518 <isr_rx_conn_pkt_ctrl+0xd10>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    e54c:	2f02      	cmp	r7, #2
    e54e:	d1e6      	bne.n	e51e <isr_rx_conn_pkt_ctrl+0xd16>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    e550:	f1a8 0714 	sub.w	r7, r8, #20
    e554:	2f01      	cmp	r7, #1
    e556:	d8e2      	bhi.n	e51e <isr_rx_conn_pkt_ctrl+0xd16>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e558:	89a7      	ldrh	r7, [r4, #12]
    e55a:	2f1a      	cmp	r7, #26
    e55c:	d936      	bls.n	e5cc <isr_rx_conn_pkt_ctrl+0xdc4>
			eff_tx_octets = min(lr->max_rx_octets,
    e55e:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    e562:	4547      	cmp	r7, r8
    e564:	bf28      	it	cs
    e566:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e568:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    e56c:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    e570:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    e574:	bf34      	ite	cc
    e576:	4693      	movcc	fp, r2
    e578:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    e57c:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    e580:	d326      	bcc.n	e5d0 <isr_rx_conn_pkt_ctrl+0xdc8>
			eff_tx_time = min(lr->max_rx_time,
    e582:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    e586:	45d0      	cmp	r8, sl
    e588:	bf28      	it	cs
    e58a:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    e58c:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    e590:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    e594:	bf34      	ite	cc
    e596:	4682      	movcc	sl, r0
    e598:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    e59c:	455a      	cmp	r2, fp
    e59e:	d052      	beq.n	e646 <isr_rx_conn_pkt_ctrl+0xe3e>
			free_count_rx = packet_rx_acquired_count_get() +
    e5a0:	f7fb fc3c 	bl	9e1c <packet_rx_acquired_count_get>
    e5a4:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    e5a6:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    e5aa:	f7f8 fe31 	bl	7210 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    e5ae:	4420      	add	r0, r4
    e5b0:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    e5b2:	28ff      	cmp	r0, #255	; 0xff
    e5b4:	d90e      	bls.n	e5d4 <isr_rx_conn_pkt_ctrl+0xdcc>
    e5b6:	4b44      	ldr	r3, [pc, #272]	; (e6c8 <isr_rx_conn_pkt_ctrl+0xec0>)
    e5b8:	9301      	str	r3, [sp, #4]
    e5ba:	9300      	str	r3, [sp, #0]
    e5bc:	4b43      	ldr	r3, [pc, #268]	; (e6cc <isr_rx_conn_pkt_ctrl+0xec4>)
    e5be:	4a46      	ldr	r2, [pc, #280]	; (e6d8 <isr_rx_conn_pkt_ctrl+0xed0>)
    e5c0:	681c      	ldr	r4, [r3, #0]
    e5c2:	4946      	ldr	r1, [pc, #280]	; (e6dc <isr_rx_conn_pkt_ctrl+0xed4>)
    e5c4:	4b46      	ldr	r3, [pc, #280]	; (e6e0 <isr_rx_conn_pkt_ctrl+0xed8>)
    e5c6:	4848      	ldr	r0, [pc, #288]	; (e6e8 <isr_rx_conn_pkt_ctrl+0xee0>)
    e5c8:	f7ff ba66 	b.w	da98 <isr_rx_conn_pkt_ctrl+0x290>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e5cc:	460f      	mov	r7, r1
    e5ce:	e7cb      	b.n	e568 <isr_rx_conn_pkt_ctrl+0xd60>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e5d0:	46f0      	mov	r8, lr
    e5d2:	e7db      	b.n	e58c <isr_rx_conn_pkt_ctrl+0xd84>
			if (_radio.packet_rx_data_count == free_count_rx) {
    e5d4:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    e5d8:	4283      	cmp	r3, r0
    e5da:	f040 8235 	bne.w	ea48 <isr_rx_conn_pkt_ctrl+0x1240>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e5de:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    e5e2:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e5e6:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    e5e8:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    e5ea:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    e5ee:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    e5f2:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    e5f6:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    e5fa:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    e5fe:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    e602:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    e606:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    e60a:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    e60e:	2303      	movs	r3, #3
    e610:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    e614:	2e00      	cmp	r6, #0
    e616:	f43f a9d1 	beq.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e61a:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    e61c:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    e620:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e624:	f043 0303 	orr.w	r3, r3, #3
    e628:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e62a:	2309      	movs	r3, #9
    e62c:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e62e:	2315      	movs	r3, #21
    e630:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    e632:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    e634:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    e638:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    e63c:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    e63e:	f7fd fc95 	bl	bf6c <ctrl_tx_enqueue>
    e642:	f7ff b9bb 	b.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->pause_tx = 0;
    e646:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    e64a:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    e64e:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    e652:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e656:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    e658:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    e65c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e660:	d103      	bne.n	e66a <isr_rx_conn_pkt_ctrl+0xe62>
    e662:	45c6      	cmp	lr, r8
    e664:	d101      	bne.n	e66a <isr_rx_conn_pkt_ctrl+0xe62>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    e666:	4550      	cmp	r0, sl
    e668:	d0d4      	beq.n	e614 <isr_rx_conn_pkt_ctrl+0xe0c>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e66a:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    e66c:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    e670:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    e674:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    e676:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    e67a:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    e67c:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    e680:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    e684:	702b      	strb	r3, [r5, #0]
    e686:	e7c5      	b.n	e614 <isr_rx_conn_pkt_ctrl+0xe0c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    e688:	7a41      	ldrb	r1, [r0, #9]
    e68a:	2016      	movs	r0, #22
    e68c:	f7fb fb7e 	bl	9d8c <pdu_len_cmp>
    e690:	2800      	cmp	r0, #0
    e692:	f000 81be 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.role == ROLE_MASTER) {
    e696:	480b      	ldr	r0, [pc, #44]	; (e6c4 <isr_rx_conn_pkt_ctrl+0xebc>)
    e698:	7cc3      	ldrb	r3, [r0, #19]
    e69a:	2b04      	cmp	r3, #4
    e69c:	d16b      	bne.n	e776 <isr_rx_conn_pkt_ctrl+0xf6e>
			if ((_radio.conn_curr->llcp_phy.ack !=
    e69e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    e6a2:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    e6a6:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    e6aa:	428b      	cmp	r3, r1
    e6ac:	d01e      	beq.n	e6ec <isr_rx_conn_pkt_ctrl+0xee4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    e6ae:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    e6b2:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    e6b6:	3a01      	subs	r2, #1
    e6b8:	2a02      	cmp	r2, #2
    e6ba:	d817      	bhi.n	e6ec <isr_rx_conn_pkt_ctrl+0xee4>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e6bc:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    e6be:	2116      	movs	r1, #22
    e6c0:	f7ff bb94 	b.w	ddec <isr_rx_conn_pkt_ctrl+0x5e4>
    e6c4:	200008c0 	.word	0x200008c0
    e6c8:	0001563e 	.word	0x0001563e
    e6cc:	20003a5c 	.word	0x20003a5c
    e6d0:	00017e82 	.word	0x00017e82
    e6d4:	20000a1c 	.word	0x20000a1c
    e6d8:	000167b9 	.word	0x000167b9
    e6dc:	00016808 	.word	0x00016808
    e6e0:	00017e69 	.word	0x00017e69
    e6e4:	00018763 	.word	0x00018763
    e6e8:	000182db 	.word	0x000182db
			} else if (((_radio.conn_curr->llcp_req !=
    e6ec:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    e6f0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e6f4:	4295      	cmp	r5, r2
    e6f6:	d003      	beq.n	e700 <isr_rx_conn_pkt_ctrl+0xef8>
				     _radio.conn_curr->llcp_ack) &&
    e6f8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    e6fc:	2a03      	cmp	r2, #3
    e6fe:	d105      	bne.n	e70c <isr_rx_conn_pkt_ctrl+0xf04>
				     LLCP_ENCRYPTION)) ||
    e700:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    e704:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    e708:	4295      	cmp	r5, r2
    e70a:	d001      	beq.n	e710 <isr_rx_conn_pkt_ctrl+0xf08>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e70c:	222a      	movs	r2, #42	; 0x2a
    e70e:	e7d6      	b.n	e6be <isr_rx_conn_pkt_ctrl+0xeb6>
				_radio.conn_curr->llcp_phy.state =
    e710:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e714:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    e716:	f042 0203 	orr.w	r2, r2, #3
    e71a:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e71e:	d116      	bne.n	e74e <isr_rx_conn_pkt_ctrl+0xf46>
					_radio.conn_curr->llcp_phy.ack--;
    e720:	3b01      	subs	r3, #1
    e722:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    e726:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    e72a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    e72e:	f36f 0341 	bfc	r3, #1, #1
    e732:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    e736:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e73a:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    e73e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    e742:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e746:	f362 1347 	bfi	r3, r2, #5, #3
    e74a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e74e:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e752:	7b62      	ldrb	r2, [r4, #13]
    e754:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e758:	400a      	ands	r2, r1
    e75a:	f362 0384 	bfi	r3, r2, #2, #3
    e75e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e762:	7b22      	ldrb	r2, [r4, #12]
    e764:	b2db      	uxtb	r3, r3
    e766:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e76a:	f362 1347 	bfi	r3, r2, #5, #3
    e76e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    e772:	f7ff b923 	b.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    e776:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e77a:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e77e:	f7f8 fd18 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    e782:	4601      	mov	r1, r0
    e784:	2800      	cmp	r0, #0
    e786:	f43f aa58 	beq.w	dc3a <isr_rx_conn_pkt_ctrl+0x432>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e78a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e78e:	2202      	movs	r2, #2
    e790:	f362 0301 	bfi	r3, r2, #0, #2
    e794:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    e798:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e79c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e7a0:	4293      	cmp	r3, r2
    e7a2:	d11a      	bne.n	e7da <isr_rx_conn_pkt_ctrl+0xfd2>
		conn->llcp_phy.ack--;
    e7a4:	3b01      	subs	r3, #1
    e7a6:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e7aa:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e7ae:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e7b2:	f36f 0341 	bfc	r3, #1, #1
    e7b6:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e7ba:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e7be:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e7c2:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e7c6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e7ca:	f362 1347 	bfi	r3, r2, #5, #3
    e7ce:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e7d2:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e7d6:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e7da:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e7de:	7b62      	ldrb	r2, [r4, #13]
    e7e0:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e7e4:	4002      	ands	r2, r0
    e7e6:	f362 0384 	bfi	r3, r2, #2, #3
    e7ea:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e7ee:	7b22      	ldrb	r2, [r4, #12]
    e7f0:	b2db      	uxtb	r3, r3
    e7f2:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e7f6:	f362 1347 	bfi	r3, r2, #5, #3
    e7fa:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e7fe:	790b      	ldrb	r3, [r1, #4]
    e800:	f043 0303 	orr.w	r3, r3, #3
    e804:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e806:	2303      	movs	r3, #3
    e808:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e80a:	2317      	movs	r3, #23
    e80c:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e80e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e812:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e816:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e818:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e81c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e820:	724b      	strb	r3, [r1, #9]
    e822:	f7ff ba1c 	b.w	dc5e <isr_rx_conn_pkt_ctrl+0x456>
		if (_radio.conn_curr->role ||
    e826:	4e92      	ldr	r6, [pc, #584]	; (ea70 <isr_rx_conn_pkt_ctrl+0x1268>)
    e828:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e82c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e830:	2b00      	cmp	r3, #0
    e832:	f2c0 80ee 	blt.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e836:	7a41      	ldrb	r1, [r0, #9]
    e838:	2017      	movs	r0, #23
    e83a:	f7fb faa7 	bl	9d8c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e83e:	2800      	cmp	r0, #0
    e840:	f000 80e7 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		if ((_radio.role == ROLE_MASTER) &&
    e844:	7cf3      	ldrb	r3, [r6, #19]
    e846:	2b04      	cmp	r3, #4
    e848:	f47f a8b8 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
    e84c:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e850:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e854:	429a      	cmp	r2, r3
    e856:	f43f a8b1 	beq.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		    (_radio.conn_curr->llcp_phy.state ==
    e85a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e85e:	f003 0203 	and.w	r2, r3, #3
    e862:	2a02      	cmp	r2, #2
    e864:	f47f a8aa 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e868:	f043 0303 	orr.w	r3, r3, #3
    e86c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e870:	7b62      	ldrb	r2, [r4, #13]
    e872:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e876:	400a      	ands	r2, r1
    e878:	f362 0384 	bfi	r3, r2, #2, #3
    e87c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e880:	7b22      	ldrb	r2, [r4, #12]
    e882:	b2db      	uxtb	r3, r3
    e884:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e888:	f362 1347 	bfi	r3, r2, #5, #3
    e88c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e890:	f7ff b845 	b.w	d91e <isr_rx_conn_pkt_ctrl+0x116>
		if (!_radio.conn_curr->role ||
    e894:	4b76      	ldr	r3, [pc, #472]	; (ea70 <isr_rx_conn_pkt_ctrl+0x1268>)
    e896:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e89a:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e89e:	2b00      	cmp	r3, #0
    e8a0:	f280 80b7 	bge.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e8a4:	7a41      	ldrb	r1, [r0, #9]
    e8a6:	2018      	movs	r0, #24
    e8a8:	f7fb fa70 	bl	9d8c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e8ac:	2800      	cmp	r0, #0
    e8ae:	f000 80b0 	beq.w	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e8b2:	7b27      	ldrb	r7, [r4, #12]
    e8b4:	7b62      	ldrb	r2, [r4, #13]
    e8b6:	ea47 0002 	orr.w	r0, r7, r2
    e8ba:	f010 0007 	ands.w	r0, r0, #7
    e8be:	d125      	bne.n	e90c <isr_rx_conn_pkt_ctrl+0x1104>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e8c0:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e8c4:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e8c8:	4293      	cmp	r3, r2
    e8ca:	f43f a877 	beq.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e8ce:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e8d2:	f003 0303 	and.w	r3, r3, #3
    e8d6:	2b02      	cmp	r3, #2
    e8d8:	f47f a870 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (!conn->llcp_phy.cmd) {
    e8dc:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e8e0:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e8e4:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e8e6:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e8ea:	f57f a867 	bpl.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e8ee:	230c      	movs	r3, #12
		upd->status = 0;
    e8f0:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e8f2:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e8f4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e8f8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e8fc:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e8fe:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e902:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e906:	7363      	strb	r3, [r4, #13]
    e908:	f7ff ba5b 	b.w	ddc2 <isr_rx_conn_pkt_ctrl+0x5ba>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e90c:	89e0      	ldrh	r0, [r4, #14]
    e90e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e910:	1ac3      	subs	r3, r0, r3
    e912:	041b      	lsls	r3, r3, #16
    e914:	f100 80a6 	bmi.w	ea64 <isr_rx_conn_pkt_ctrl+0x125c>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e918:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e91c:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e920:	428b      	cmp	r3, r1
    e922:	d007      	beq.n	e934 <isr_rx_conn_pkt_ctrl+0x112c>
    e924:	4b53      	ldr	r3, [pc, #332]	; (ea74 <isr_rx_conn_pkt_ctrl+0x126c>)
    e926:	9301      	str	r3, [sp, #4]
    e928:	9300      	str	r3, [sp, #0]
    e92a:	4b53      	ldr	r3, [pc, #332]	; (ea78 <isr_rx_conn_pkt_ctrl+0x1270>)
    e92c:	681c      	ldr	r4, [r3, #0]
    e92e:	4b53      	ldr	r3, [pc, #332]	; (ea7c <isr_rx_conn_pkt_ctrl+0x1274>)
    e930:	f7fe bfb2 	b.w	d898 <isr_rx_conn_pkt_ctrl+0x90>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e934:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e938:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e93c:	42a3      	cmp	r3, r4
    e93e:	d014      	beq.n	e96a <isr_rx_conn_pkt_ctrl+0x1162>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e940:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e944:	f003 0303 	and.w	r3, r3, #3
    e948:	2b02      	cmp	r3, #2
    e94a:	d10e      	bne.n	e96a <isr_rx_conn_pkt_ctrl+0x1162>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e94c:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e950:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e954:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e958:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e95c:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e960:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e962:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e966:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e96a:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e96e:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e972:	f002 0207 	and.w	r2, r2, #7
    e976:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e97a:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e97e:	f36f 0300 	bfc	r3, #0, #1
    e982:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e986:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e988:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e98a:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e98e:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e992:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e996:	2b00      	cmp	r3, #0
    e998:	f43f a810 	beq.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e99c:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e9a0:	f362 0302 	bfi	r3, r2, #0, #3
    e9a4:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e9a8:	f7ff b808 	b.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		if (_radio.conn_curr->role ||
    e9ac:	4e30      	ldr	r6, [pc, #192]	; (ea70 <isr_rx_conn_pkt_ctrl+0x1268>)
    e9ae:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e9b2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e9b6:	2b00      	cmp	r3, #0
    e9b8:	db2b      	blt.n	ea12 <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e9ba:	7a41      	ldrb	r1, [r0, #9]
    e9bc:	2019      	movs	r0, #25
    e9be:	f7fb f9e5 	bl	9d8c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e9c2:	b330      	cbz	r0, ea12 <isr_rx_conn_pkt_ctrl+0x120a>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e9c4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e9c8:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e9cc:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e9d0:	7b22      	ldrb	r2, [r4, #12]
    e9d2:	f003 0307 	and.w	r3, r3, #7
    e9d6:	4213      	tst	r3, r2
    e9d8:	f43e aff0 	beq.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
			if (conn->llcp_req != conn->llcp_ack) {
    e9dc:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e9e0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e9e4:	429a      	cmp	r2, r3
    e9e6:	f47e afe9 	bne.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
			memcpy(&conn->llcp.chan_map.chm[0],
    e9ea:	2205      	movs	r2, #5
    e9ec:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e9f0:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e9f4:	f7f3 fa16 	bl	1e24 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e9f8:	2301      	movs	r3, #1
    e9fa:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e9fe:	2302      	movs	r3, #2
    ea00:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    ea04:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    ea08:	3b01      	subs	r3, #1
    ea0a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    ea0e:	f7fe bfd5 	b.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
		nack = unknown_rsp_send(_radio.conn_curr,
    ea12:	4817      	ldr	r0, [pc, #92]	; (ea70 <isr_rx_conn_pkt_ctrl+0x1268>)
    ea14:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ea18:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    ea1c:	f7f8 fbc9 	bl	71b2 <mem_acquire>
	if (!node_tx) {
    ea20:	4601      	mov	r1, r0
    ea22:	2800      	cmp	r0, #0
    ea24:	f43f a909 	beq.w	dc3a <isr_rx_conn_pkt_ctrl+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea28:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    ea2a:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea2c:	f043 0303 	orr.w	r3, r3, #3
    ea30:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    ea32:	2302      	movs	r3, #2
    ea34:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    ea36:	2307      	movs	r3, #7
    ea38:	71c3      	strb	r3, [r0, #7]
    ea3a:	f7ff b93a 	b.w	dcb2 <isr_rx_conn_pkt_ctrl+0x4aa>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    ea3e:	2328      	movs	r3, #40	; 0x28
    ea40:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    ea44:	f7fe bfba 	b.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
	if (node_tx) {
    ea48:	2e00      	cmp	r6, #0
    ea4a:	f43f a8f6 	beq.w	dc3a <isr_rx_conn_pkt_ctrl+0x432>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ea4e:	490c      	ldr	r1, [pc, #48]	; (ea80 <isr_rx_conn_pkt_ctrl+0x1278>)
    ea50:	4630      	mov	r0, r6
    ea52:	f7f8 fbc8 	bl	71e6 <mem_release>
    ea56:	f7ff b8f0 	b.w	dc3a <isr_rx_conn_pkt_ctrl+0x432>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    ea5a:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    ea5c:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    ea5e:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ea60:	4693      	mov	fp, r2
    ea62:	e5d7      	b.n	e614 <isr_rx_conn_pkt_ctrl+0xe0c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    ea64:	2328      	movs	r3, #40	; 0x28
    ea66:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    ea6a:	f7fe bfa7 	b.w	d9bc <isr_rx_conn_pkt_ctrl+0x1b4>
    ea6e:	bf00      	nop
    ea70:	200008c0 	.word	0x200008c0
    ea74:	0001563e 	.word	0x0001563e
    ea78:	20003a5c 	.word	0x20003a5c
    ea7c:	000181ec 	.word	0x000181ec
    ea80:	20000a1c 	.word	0x20000a1c
    ea84:	00000000 	.word	0x00000000

0000ea88 <isr>:
{
    ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea8c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    ea8e:	f003 ff61 	bl	12954 <radio_is_done>
    ea92:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    ea94:	b366      	cbz	r6, eaf0 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    ea96:	f003 ff7d 	bl	12994 <radio_crc_is_valid>
    ea9a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    ea9c:	f003 fffe 	bl	12a9c <radio_filter_has_match>
    eaa0:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    eaa4:	f004 f804 	bl	12ab0 <radio_filter_match_get>
    eaa8:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    eaac:	f004 f9e8 	bl	12e80 <radio_ar_has_match>
    eab0:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    eab4:	f004 f9d2 	bl	12e5c <radio_ar_match_get>
    eab8:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    eabc:	f003 ffb8 	bl	12a30 <radio_rssi_is_ready>
    eac0:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    eac2:	4cb7      	ldr	r4, [pc, #732]	; (eda0 <isr+0x318>)
	radio_status_reset();
    eac4:	f003 ff30 	bl	12928 <radio_status_reset>
	radio_tmr_status_reset();
    eac8:	f004 f804 	bl	12ad4 <radio_tmr_status_reset>
	radio_filter_status_reset();
    eacc:	f003 ffde 	bl	12a8c <radio_filter_status_reset>
	radio_ar_status_reset();
    ead0:	f004 f9ca 	bl	12e68 <radio_ar_status_reset>
	radio_rssi_status_reset();
    ead4:	f003 ffa4 	bl	12a20 <radio_rssi_status_reset>
	switch (_radio.state) {
    ead8:	7d23      	ldrb	r3, [r4, #20]
    eada:	2b05      	cmp	r3, #5
    eadc:	f201 84aa 	bhi.w	10434 <__kernel_ram_size+0x434>
    eae0:	e8df f013 	tbh	[pc, r3, lsl #1]
    eae4:	00d1007e 	.word	0x00d1007e
    eae8:	0a44000e 	.word	0x0a44000e
    eaec:	0a440a44 	.word	0x0a440a44
		devmatch_id = irkmatch_id = 0xFF;
    eaf0:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    eaf4:	4635      	mov	r5, r6
    eaf6:	46b2      	mov	sl, r6
    eaf8:	46b1      	mov	r9, r6
    eafa:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    eafc:	46d8      	mov	r8, fp
    eafe:	e7e0      	b.n	eac2 <isr+0x3a>
	_radio.state = STATE_RX;
    eb00:	2301      	movs	r3, #1
    eb02:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    eb04:	f004 f8e8 	bl	12cd8 <radio_tmr_tifs_base_get>
    eb08:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    eb0a:	2096      	movs	r0, #150	; 0x96
    eb0c:	f003 fff0 	bl	12af0 <radio_tmr_tifs_set>
	switch (_radio.role) {
    eb10:	7ce3      	ldrb	r3, [r4, #19]
    eb12:	3b01      	subs	r3, #1
    eb14:	2b03      	cmp	r3, #3
    eb16:	f200 80ac 	bhi.w	ec72 <isr+0x1ea>
    eb1a:	e8df f003 	tbb	[pc, r3]
    eb1e:	3402      	.short	0x3402
    eb20:	6464      	.short	0x6464
		radio_switch_complete_and_tx(0, 0, 0, 0);
    eb22:	2300      	movs	r3, #0
    eb24:	461a      	mov	r2, r3
    eb26:	4619      	mov	r1, r3
    eb28:	4618      	mov	r0, r3
    eb2a:	f003 ff51 	bl	129d0 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    eb2e:	f003 ff3f 	bl	129b0 <radio_pkt_scratch_get>
    eb32:	f003 fec1 	bl	128b8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    eb36:	f003 ff03 	bl	12940 <radio_is_ready>
    eb3a:	b148      	cbz	r0, eb50 <isr+0xc8>
		LL_ASSERT(!radio_is_ready());
    eb3c:	4b99      	ldr	r3, [pc, #612]	; (eda4 <isr+0x31c>)
    eb3e:	9301      	str	r3, [sp, #4]
    eb40:	9300      	str	r3, [sp, #0]
    eb42:	4b99      	ldr	r3, [pc, #612]	; (eda8 <isr+0x320>)
    eb44:	681c      	ldr	r4, [r3, #0]
    eb46:	4b99      	ldr	r3, [pc, #612]	; (edac <isr+0x324>)
	LL_ASSERT(!radio_is_ready());
    eb48:	4a99      	ldr	r2, [pc, #612]	; (edb0 <isr+0x328>)
    eb4a:	499a      	ldr	r1, [pc, #616]	; (edb4 <isr+0x32c>)
    eb4c:	489a      	ldr	r0, [pc, #616]	; (edb8 <isr+0x330>)
    eb4e:	e357      	b.n	f200 <isr+0x778>
		if (ctrl_rl_enabled()) {
    eb50:	f003 f9f6 	bl	11f40 <ctrl_rl_enabled>
    eb54:	b138      	cbz	r0, eb66 <isr+0xde>
			u8_t count, *irks = ctrl_irks_get(&count);
    eb56:	a810      	add	r0, sp, #64	; 0x40
    eb58:	f002 ff2a 	bl	119b0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    eb5c:	4601      	mov	r1, r0
    eb5e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    eb62:	f004 f949 	bl	12df8 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    eb66:	2100      	movs	r1, #0
    eb68:	4608      	mov	r0, r1
    eb6a:	f003 feba 	bl	128e2 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    eb6e:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    eb70:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    eb72:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    eb74:	4608      	mov	r0, r1
    eb76:	f003 feb0 	bl	128da <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    eb7a:	1a28      	subs	r0, r5, r0
    eb7c:	f004 f842 	bl	12c04 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    eb80:	f004 f892 	bl	12ca8 <radio_tmr_end_capture>
    eb84:	e02c      	b.n	ebe0 <isr+0x158>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    eb86:	2300      	movs	r3, #0
    eb88:	461a      	mov	r2, r3
    eb8a:	4619      	mov	r1, r3
    eb8c:	4618      	mov	r0, r3
    eb8e:	f003 ff1f 	bl	129d0 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    eb92:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    eb96:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    eb9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    eb9e:	3008      	adds	r0, #8
    eba0:	f003 fe8a 	bl	128b8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    eba4:	f003 fecc 	bl	12940 <radio_is_ready>
    eba8:	2800      	cmp	r0, #0
    ebaa:	d1c7      	bne.n	eb3c <isr+0xb4>
		if (ctrl_rl_enabled()) {
    ebac:	f003 f9c8 	bl	11f40 <ctrl_rl_enabled>
    ebb0:	b138      	cbz	r0, ebc2 <isr+0x13a>
			u8_t count, *irks = ctrl_irks_get(&count);
    ebb2:	a810      	add	r0, sp, #64	; 0x40
    ebb4:	f002 fefc 	bl	119b0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    ebb8:	4601      	mov	r1, r0
    ebba:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ebbe:	f004 f91b 	bl	12df8 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    ebc2:	2100      	movs	r1, #0
    ebc4:	4608      	mov	r0, r1
    ebc6:	f003 fe8c 	bl	128e2 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    ebca:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    ebcc:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    ebce:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    ebd0:	4608      	mov	r0, r1
    ebd2:	f003 fe82 	bl	128da <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ebd6:	1a28      	subs	r0, r5, r0
    ebd8:	f004 f814 	bl	12c04 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    ebdc:	f003 ff10 	bl	12a00 <radio_rssi_measure>
}
    ebe0:	b013      	add	sp, #76	; 0x4c
    ebe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ebe6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    ebea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ebee:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ebf2:	2100      	movs	r1, #0
    ebf4:	09d3      	lsrs	r3, r2, #7
    ebf6:	f000 0007 	and.w	r0, r0, #7
    ebfa:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ebfe:	f003 fee7 	bl	129d0 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ec02:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ec06:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    ec0a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ec0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    ec12:	3108      	adds	r1, #8
    ec14:	f7fb fca0 	bl	a558 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    ec18:	f003 fe92 	bl	12940 <radio_is_ready>
    ec1c:	2800      	cmp	r0, #0
    ec1e:	d18d      	bne.n	eb3c <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    ec20:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ec24:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ec28:	2101      	movs	r1, #1
    ec2a:	f000 0007 	and.w	r0, r0, #7
    ec2e:	f003 fe58 	bl	128e2 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ec32:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    ec36:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    ec3a:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    ec3e:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    ec40:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    ec42:	4405      	add	r5, r0
	switch (phy) {
    ec44:	d013      	beq.n	ec6e <isr+0x1e6>
		return 40;
    ec46:	2b04      	cmp	r3, #4
    ec48:	bf0c      	ite	eq
    ec4a:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    ec4e:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ec50:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    ec52:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    ec56:	09c1      	lsrs	r1, r0, #7
    ec58:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ec5c:	f003 fe3d 	bl	128da <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ec60:	1a28      	subs	r0, r5, r0
    ec62:	f003 ffcf 	bl	12c04 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    ec66:	2001      	movs	r0, #1
    ec68:	f7fc faf6 	bl	b258 <packet_tx_enqueue>
    ec6c:	e7b8      	b.n	ebe0 <isr+0x158>
		return 24;
    ec6e:	2018      	movs	r0, #24
    ec70:	e7ee      	b.n	ec50 <isr+0x1c8>
		LL_ASSERT(0);
    ec72:	4b4c      	ldr	r3, [pc, #304]	; (eda4 <isr+0x31c>)
    ec74:	9301      	str	r3, [sp, #4]
    ec76:	9300      	str	r3, [sp, #0]
    ec78:	4b4b      	ldr	r3, [pc, #300]	; (eda8 <isr+0x320>)
    ec7a:	681c      	ldr	r4, [r3, #0]
    ec7c:	4b4b      	ldr	r3, [pc, #300]	; (edac <isr+0x324>)
		LL_ASSERT(0);
    ec7e:	4a4c      	ldr	r2, [pc, #304]	; (edb0 <isr+0x328>)
    ec80:	494c      	ldr	r1, [pc, #304]	; (edb4 <isr+0x32c>)
    ec82:	484e      	ldr	r0, [pc, #312]	; (edbc <isr+0x334>)
    ec84:	e2bc      	b.n	f200 <isr+0x778>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    ec86:	b926      	cbnz	r6, ec92 <isr+0x20a>
		_radio.state = STATE_CLOSE;
    ec88:	2303      	movs	r3, #3
    ec8a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    ec8c:	f003 fe3a 	bl	12904 <radio_disable>
    ec90:	e7a6      	b.n	ebe0 <isr+0x158>
	switch (_radio.role) {
    ec92:	7ce3      	ldrb	r3, [r4, #19]
    ec94:	3b01      	subs	r3, #1
    ec96:	2b03      	cmp	r3, #3
    ec98:	f201 8160 	bhi.w	ff5c <isr+0x14d4>
    ec9c:	e8df f013 	tbh	[pc, r3, lsl #1]
    eca0:	02b70004 	.word	0x02b70004
    eca4:	05f905f9 	.word	0x05f905f9
		if (crc_ok) {
    eca8:	2f00      	cmp	r7, #0
    ecaa:	d0ed      	beq.n	ec88 <isr+0x200>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    ecac:	f1ba 0f00 	cmp.w	sl, #0
    ecb0:	d039      	beq.n	ed26 <isr+0x29e>
    ecb2:	4658      	mov	r0, fp
    ecb4:	f002 fee2 	bl	11a7c <ctrl_rl_irk_idx>
    ecb8:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    ecbc:	f003 fe78 	bl	129b0 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    ecc0:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    ecc4:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    ecc6:	232b      	movs	r3, #43	; 0x2b
    ecc8:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    ecca:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    eccc:	fb11 3302 	smlabb	r3, r1, r2, r3
    ecd0:	930a      	str	r3, [sp, #40]	; 0x28
    ecd2:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    ecd4:	f000 030f 	and.w	r3, r0, #15
    ecd8:	2b03      	cmp	r3, #3
    ecda:	d10a      	bne.n	ecf2 <isr+0x26a>
    ecdc:	7873      	ldrb	r3, [r6, #1]
    ecde:	2b0c      	cmp	r3, #12
    ece0:	d107      	bne.n	ecf2 <isr+0x26a>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    ece2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ece6:	065f      	lsls	r7, r3, #25
    ece8:	d51f      	bpl.n	ed2a <isr+0x2a2>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    ecea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    ecee:	0658      	lsls	r0, r3, #25
    ecf0:	d44b      	bmi.n	ed8a <isr+0x302>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    ecf2:	7830      	ldrb	r0, [r6, #0]
    ecf4:	f000 030f 	and.w	r3, r0, #15
    ecf8:	2b05      	cmp	r3, #5
    ecfa:	d1c5      	bne.n	ec88 <isr+0x200>
    ecfc:	7873      	ldrb	r3, [r6, #1]
    ecfe:	2b22      	cmp	r3, #34	; 0x22
    ed00:	d1c2      	bne.n	ec88 <isr+0x200>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    ed02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ed04:	5ce3      	ldrb	r3, [r4, r3]
    ed06:	f003 030f 	and.w	r3, r3, #15
    ed0a:	2b01      	cmp	r3, #1
    ed0c:	f040 8155 	bne.w	efba <isr+0x532>
					    ci->connect_ind.init_addr,
    ed10:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    ed12:	aa10      	add	r2, sp, #64	; 0x40
    ed14:	4639      	mov	r1, r7
    ed16:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ed1a:	f003 f8b5 	bl	11e88 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    ed1e:	2800      	cmp	r0, #0
    ed20:	d150      	bne.n	edc4 <isr+0x33c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ed22:	2000      	movs	r0, #0
    ed24:	e05e      	b.n	ede4 <isr+0x35c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    ed26:	20ff      	movs	r0, #255	; 0xff
    ed28:	e7c6      	b.n	ecb8 <isr+0x230>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    ed2a:	aa10      	add	r2, sp, #64	; 0x40
    ed2c:	1cb1      	adds	r1, r6, #2
    ed2e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ed32:	f003 f8a9 	bl	11e88 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    ed36:	2800      	cmp	r0, #0
    ed38:	d0d7      	beq.n	ecea <isr+0x262>
	return (adv->tx_addr == sr->rx_addr) &&
    ed3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ed3c:	7832      	ldrb	r2, [r6, #0]
    ed3e:	5ce3      	ldrb	r3, [r4, r3]
    ed40:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ed44:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ed48:	d1d3      	bne.n	ecf2 <isr+0x26a>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    ed4a:	2206      	movs	r2, #6
    ed4c:	f106 0108 	add.w	r1, r6, #8
    ed50:	1ca8      	adds	r0, r5, #2
    ed52:	f7f3 f852 	bl	1dfa <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    ed56:	2800      	cmp	r0, #0
    ed58:	d1cb      	bne.n	ecf2 <isr+0x26a>
		_radio.state = STATE_CLOSE;
    ed5a:	2303      	movs	r3, #3
    ed5c:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    ed5e:	f003 fe41 	bl	129e4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    ed62:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    ed66:	2327      	movs	r3, #39	; 0x27
    ed68:	fb03 4000 	mla	r0, r3, r0, r4
    ed6c:	307b      	adds	r0, #123	; 0x7b
    ed6e:	f003 fda9 	bl	128c4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    ed72:	f003 fde5 	bl	12940 <radio_is_ready>
    ed76:	2800      	cmp	r0, #0
    ed78:	f43f af32 	beq.w	ebe0 <isr+0x158>
    ed7c:	4b09      	ldr	r3, [pc, #36]	; (eda4 <isr+0x31c>)
    ed7e:	9301      	str	r3, [sp, #4]
    ed80:	9300      	str	r3, [sp, #0]
    ed82:	4b09      	ldr	r3, [pc, #36]	; (eda8 <isr+0x320>)
    ed84:	681c      	ldr	r4, [r3, #0]
    ed86:	4b0e      	ldr	r3, [pc, #56]	; (edc0 <isr+0x338>)
    ed88:	e6de      	b.n	eb48 <isr+0xc0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    ed8a:	f1b9 0f00 	cmp.w	r9, #0
    ed8e:	d1d4      	bne.n	ed3a <isr+0x2b2>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ed90:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ed94:	f002 febe 	bl	11b14 <ctrl_irk_whitelisted>
    ed98:	2800      	cmp	r0, #0
    ed9a:	d1ce      	bne.n	ed3a <isr+0x2b2>
    ed9c:	e7a9      	b.n	ecf2 <isr+0x26a>
    ed9e:	bf00      	nop
    eda0:	200008c0 	.word	0x200008c0
    eda4:	0001563e 	.word	0x0001563e
    eda8:	20003a5c 	.word	0x20003a5c
    edac:	00017df6 	.word	0x00017df6
    edb0:	000167b9 	.word	0x000167b9
    edb4:	00016808 	.word	0x00016808
    edb8:	000184bc 	.word	0x000184bc
    edbc:	00016758 	.word	0x00016758
    edc0:	00017e09 	.word	0x00017e09
		       isr_adv_ci_adva_check(adv, ci) &&
    edc4:	4631      	mov	r1, r6
    edc6:	4628      	mov	r0, r5
    edc8:	f7fb feb4 	bl	ab34 <isr_adv_ci_adva_check>
					    rl_idx) &&
    edcc:	2800      	cmp	r0, #0
    edce:	d0a8      	beq.n	ed22 <isr+0x29a>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    edd0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    edd4:	2bff      	cmp	r3, #255	; 0xff
    edd6:	f000 80dd 	beq.w	ef94 <isr+0x50c>
		return rl_idx == _radio.advertiser.rl_idx;
    edda:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    edde:	1ac1      	subs	r1, r0, r3
    ede0:	4248      	negs	r0, r1
    ede2:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ede4:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    ede8:	2800      	cmp	r0, #0
    edea:	f43f af4d 	beq.w	ec88 <isr+0x200>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    edee:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    edf2:	b133      	cbz	r3, ee02 <isr+0x37a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    edf4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    edf8:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    edfc:	429a      	cmp	r2, r3
    edfe:	f47f af43 	bne.w	ec88 <isr+0x200>
    ee02:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    ee06:	2b00      	cmp	r3, #0
    ee08:	f43f af3e 	beq.w	ec88 <isr+0x200>
			node_rx = packet_rx_reserve_get(4);
    ee0c:	2004      	movs	r0, #4
    ee0e:	f7fb f81b 	bl	9e48 <packet_rx_reserve_get>
		if (!node_rx) {
    ee12:	4607      	mov	r7, r0
    ee14:	2800      	cmp	r0, #0
    ee16:	f43f af37 	beq.w	ec88 <isr+0x200>
		_radio.state = STATE_STOP;
    ee1a:	f04f 0904 	mov.w	r9, #4
    ee1e:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    ee22:	f003 fd6f 	bl	12904 <radio_disable>
		conn = _radio.advertiser.conn;
    ee26:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee2a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    ee2e:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee30:	f44f 72aa 	mov.w	r2, #340	; 0x154
    ee34:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    ee36:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee3a:	f7f8 f9f2 	bl	7222 <mem_index_get>
		memcpy(&conn->access_addr[0],
    ee3e:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee42:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    ee44:	2203      	movs	r2, #3
    ee46:	f106 0112 	add.w	r1, r6, #18
    ee4a:	f105 0014 	add.w	r0, r5, #20
    ee4e:	f7f2 ffe9 	bl	1e24 <memcpy>
		memcpy(&conn->data_chan_map[0],
    ee52:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    ee56:	464a      	mov	r2, r9
    ee58:	f106 010e 	add.w	r1, r6, #14
    ee5c:	4650      	mov	r0, sl
    ee5e:	f7f2 ffe1 	bl	1e24 <memcpy>
		memcpy(&conn->data_chan_map[0],
    ee62:	2205      	movs	r2, #5
    ee64:	f106 011e 	add.w	r1, r6, #30
    ee68:	4640      	mov	r0, r8
    ee6a:	f7f2 ffdb 	bl	1e24 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    ee6e:	2105      	movs	r1, #5
    ee70:	4640      	mov	r0, r8
    ee72:	f7f8 fb49 	bl	7508 <util_ones_count_get>
		conn->data_chan_count =
    ee76:	7f6b      	ldrb	r3, [r5, #29]
    ee78:	f360 0305 	bfi	r3, r0, #0, #6
    ee7c:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    ee7e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ee82:	f3c3 0304 	ubfx	r3, r3, #0, #5
    ee86:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    ee88:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    ee8a:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    ee8c:	f240 48e2 	movw	r8, #1250	; 0x4e2
    ee90:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    ee94:	7ef2      	ldrb	r2, [r6, #27]
    ee96:	7eb3      	ldrb	r3, [r6, #26]
    ee98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    ee9c:	4651      	mov	r1, sl
    ee9e:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    eea0:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    eea2:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    eea6:	f7f2 ffbd 	bl	1e24 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    eeaa:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eeac:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    eeae:	f242 7210 	movw	r2, #10000	; 0x2710
    eeb2:	fb02 8303 	mla	r3, r2, r3, r8
    eeb6:	3b01      	subs	r3, #1
    eeb8:	fbb3 f3f8 	udiv	r3, r3, r8
    eebc:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    eebe:	4b55      	ldr	r3, [pc, #340]	; (f014 <isr+0x58c>)
    eec0:	4443      	add	r3, r8
    eec2:	fbb3 f3f8 	udiv	r3, r3, r8
    eec6:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eeca:	4b53      	ldr	r3, [pc, #332]	; (f018 <isr+0x590>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eecc:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eece:	4443      	add	r3, r8
    eed0:	fbb3 f3f8 	udiv	r3, r3, r8
    eed4:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eed6:	4282      	cmp	r2, r0
    eed8:	4613      	mov	r3, r2
    eeda:	bfc4      	itt	gt
    eedc:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    eee0:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eee2:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eee6:	bfc4      	itt	gt
    eee8:	18d2      	addgt	r2, r2, r3
    eeea:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    eeec:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eeee:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eef2:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    eef4:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    eef6:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    eef8:	2300      	movs	r3, #0
    eefa:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    eefc:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eefe:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    ef02:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ef04:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ef08:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    ef0c:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ef0e:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ef12:	464a      	mov	r2, r9
    ef14:	f107 001b 	add.w	r0, r7, #27
    ef18:	f7f2 ff84 	bl	1e24 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    ef1c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ef20:	f107 030e 	add.w	r3, r7, #14
    ef24:	28ff      	cmp	r0, #255	; 0xff
    ef26:	930b      	str	r3, [sp, #44]	; 0x2c
    ef28:	f106 0a02 	add.w	sl, r6, #2
    ef2c:	f107 0b14 	add.w	fp, r7, #20
    ef30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef32:	d061      	beq.n	eff8 <isr+0x570>
			ll_rl_id_addr_get(rl_idx,
    ef34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ef36:	f107 010d 	add.w	r1, r7, #13
    ef3a:	f002 ff61 	bl	11e00 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ef3e:	7b7b      	ldrb	r3, [r7, #13]
    ef40:	3302      	adds	r3, #2
    ef42:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ef44:	464a      	mov	r2, r9
    ef46:	4651      	mov	r1, sl
    ef48:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ef4a:	f7f2 ff6b 	bl	1e24 <memcpy>
			pdu_adv->connect_ind.interval;
    ef4e:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    ef50:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    ef54:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    ef56:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    ef5a:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    ef5c:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    ef60:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ef64:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ef68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ef6c:	8c28      	ldrh	r0, [r5, #32]
    ef6e:	f7fb feff 	bl	ad70 <rx_fc_lock>
		packet_rx_enqueue();
    ef72:	f7fb fe03 	bl	ab7c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ef76:	2003      	movs	r0, #3
    ef78:	f7fa ff66 	bl	9e48 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ef7c:	2800      	cmp	r0, #0
    ef7e:	d159      	bne.n	f034 <isr+0x5ac>
    ef80:	4b26      	ldr	r3, [pc, #152]	; (f01c <isr+0x594>)
    ef82:	9301      	str	r3, [sp, #4]
    ef84:	9300      	str	r3, [sp, #0]
    ef86:	4b26      	ldr	r3, [pc, #152]	; (f020 <isr+0x598>)
    ef88:	681c      	ldr	r4, [r3, #0]
    ef8a:	4b26      	ldr	r3, [pc, #152]	; (f024 <isr+0x59c>)
			LL_ASSERT(node_rx);
    ef8c:	4a26      	ldr	r2, [pc, #152]	; (f028 <isr+0x5a0>)
    ef8e:	4927      	ldr	r1, [pc, #156]	; (f02c <isr+0x5a4>)
    ef90:	4827      	ldr	r0, [pc, #156]	; (f030 <isr+0x5a8>)
    ef92:	e135      	b.n	f200 <isr+0x778>
	return (adv->rx_addr == ci->tx_addr) &&
    ef94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ef96:	5ce2      	ldrb	r2, [r4, r3]
    ef98:	7833      	ldrb	r3, [r6, #0]
    ef9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ef9e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    efa2:	f47f aebe 	bne.w	ed22 <isr+0x29a>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    efa6:	2206      	movs	r2, #6
    efa8:	4639      	mov	r1, r7
    efaa:	f105 0008 	add.w	r0, r5, #8
    efae:	f7f2 ff24 	bl	1dfa <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    efb2:	fab0 f080 	clz	r0, r0
    efb6:	0940      	lsrs	r0, r0, #5
    efb8:	e714      	b.n	ede4 <isr+0x35c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    efba:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    efbe:	09db      	lsrs	r3, r3, #7
    efc0:	d00d      	beq.n	efde <isr+0x556>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    efc2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    efc6:	09db      	lsrs	r3, r3, #7
    efc8:	f43f aeab 	beq.w	ed22 <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    efcc:	f1b9 0f00 	cmp.w	r9, #0
    efd0:	d10d      	bne.n	efee <isr+0x566>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    efd2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    efd6:	f002 fd9d 	bl	11b14 <ctrl_irk_whitelisted>
    efda:	b940      	cbnz	r0, efee <isr+0x566>
    efdc:	e6a1      	b.n	ed22 <isr+0x29a>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    efde:	aa10      	add	r2, sp, #64	; 0x40
    efe0:	1cb1      	adds	r1, r6, #2
    efe2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    efe6:	f002 ff4f 	bl	11e88 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    efea:	2800      	cmp	r0, #0
    efec:	d0e9      	beq.n	efc2 <isr+0x53a>
	       isr_adv_ci_adva_check(adv, ci);
    efee:	4631      	mov	r1, r6
    eff0:	4628      	mov	r0, r5
    eff2:	f7fb fd9f 	bl	ab34 <isr_adv_ci_adva_check>
    eff6:	e6f5      	b.n	ede4 <isr+0x35c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    eff8:	4619      	mov	r1, r3
    effa:	464a      	mov	r2, r9
    effc:	4658      	mov	r0, fp
    effe:	f7f2 ff3d 	bl	1e7c <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f002:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f004:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f006:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f00a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f00c:	464a      	mov	r2, r9
    f00e:	4651      	mov	r1, sl
    f010:	e79b      	b.n	ef4a <isr+0x4c2>
    f012:	bf00      	nop
    f014:	026259ff 	.word	0x026259ff
    f018:	01c9c37f 	.word	0x01c9c37f
    f01c:	0001563e 	.word	0x0001563e
    f020:	20003a5c 	.word	0x20003a5c
    f024:	00017e09 	.word	0x00017e09
    f028:	000167b9 	.word	0x000167b9
    f02c:	00016808 	.word	0x00016808
    f030:	000188f3 	.word	0x000188f3
			node_rx->hdr.handle = conn->handle;
    f034:	8c2b      	ldrh	r3, [r5, #32]
    f036:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f038:	230b      	movs	r3, #11
    f03a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    f03c:	7833      	ldrb	r3, [r6, #0]
    f03e:	f013 0320 	ands.w	r3, r3, #32
    f042:	d00e      	beq.n	f062 <isr+0x5da>
					((u16_t)conn->access_addr[1] << 8) |
    f044:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    f046:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f048:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    f04a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f04e:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    f050:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f054:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f056:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f058:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f05c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    f05e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f060:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f062:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f064:	f7fb fd8a 	bl	ab7c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f068:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    f06c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f070:	497f      	ldr	r1, [pc, #508]	; (f270 <isr+0x7e8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    f072:	0952      	lsrs	r2, r2, #5
    f074:	f362 0384 	bfi	r3, r2, #2, #3
    f078:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    f07c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    f080:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    f084:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f088:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    f08a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    f08e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    f092:	4a78      	ldr	r2, [pc, #480]	; (f274 <isr+0x7ec>)
    f094:	f203 233f 	addw	r3, r3, #575	; 0x23f
    f098:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    f09c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    f09e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    f0a2:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    f0a4:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    f0a6:	7d73      	ldrb	r3, [r6, #21]
    f0a8:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    f0ac:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    f0ae:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    f0b2:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f0b4:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    f0b6:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f0b8:	4638      	mov	r0, r7
    f0ba:	f003 fc10 	bl	128de <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f0be:	496e      	ldr	r1, [pc, #440]	; (f278 <isr+0x7f0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    f0c0:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f0c2:	f200 4052 	addw	r0, r0, #1106	; 0x452
    f0c6:	a368      	add	r3, pc, #416	; (adr r3, f268 <isr+0x7e0>)
    f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0cc:	fba0 0101 	umull	r0, r1, r0, r1
    f0d0:	f7f1 f8a0 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f0d4:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    f0d8:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    f0da:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f0dc:	4293      	cmp	r3, r2
    f0de:	bf38      	it	cc
    f0e0:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    f0e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f0e6:	469a      	mov	sl, r3
		conn_interval_us -=
    f0e8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    f0ea:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    f0ec:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    f0ee:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    f0f0:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    f0f4:	f003 fdea 	bl	12ccc <radio_tmr_end_get>
    f0f8:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    f0fa:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f0fc:	4639      	mov	r1, r7
		conn_offset_us +=
    f0fe:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f102:	4638      	mov	r0, r7
    f104:	f003 fbe9 	bl	128da <radio_tx_chain_delay_get>
    f108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f10a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    f10e:	4499      	add	r9, r3
    f110:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    f114:	eba9 030b 	sub.w	r3, r9, fp
    f118:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f11a:	f240 4383 	movw	r3, #1155	; 0x483
    f11e:	9300      	str	r3, [sp, #0]
    f120:	2205      	movs	r2, #5
    f122:	4b56      	ldr	r3, [pc, #344]	; (f27c <isr+0x7f4>)
    f124:	f8df b150 	ldr.w	fp, [pc, #336]	; f278 <isr+0x7f0>
    f128:	4639      	mov	r1, r7
    f12a:	4638      	mov	r0, r7
    f12c:	f7f8 ff6a 	bl	8004 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    f130:	f240 4184 	movw	r1, #1156	; 0x484
    f134:	f7fb fe56 	bl	ade4 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f13a:	5ce3      	ldrb	r3, [r4, r3]
    f13c:	f003 030f 	and.w	r3, r3, #15
    f140:	2b01      	cmp	r3, #1
    f142:	d106      	bne.n	f152 <isr+0x6ca>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f144:	9700      	str	r7, [sp, #0]
    f146:	463b      	mov	r3, r7
    f148:	2203      	movs	r2, #3
    f14a:	4639      	mov	r1, r7
    f14c:	4638      	mov	r0, r7
    f14e:	f7f8 ff59 	bl	8004 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f152:	fba8 890b 	umull	r8, r9, r8, fp
    f156:	a344      	add	r3, pc, #272	; (adr r3, f268 <isr+0x7e0>)
    f158:	e9d3 2300 	ldrd	r2, r3, [r3]
    f15c:	4640      	mov	r0, r8
    f15e:	4649      	mov	r1, r9
    f160:	f7f1 f858 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f164:	f895 3020 	ldrb.w	r3, [r5, #32]
    f168:	68a4      	ldr	r4, [r4, #8]
    f16a:	9506      	str	r5, [sp, #24]
    f16c:	3307      	adds	r3, #7
    f16e:	b2db      	uxtb	r3, r3
    f170:	930a      	str	r3, [sp, #40]	; 0x28
    f172:	f240 439b 	movw	r3, #1179	; 0x49b
    f176:	9308      	str	r3, [sp, #32]
    f178:	4b41      	ldr	r3, [pc, #260]	; (f280 <isr+0x7f8>)
    f17a:	9307      	str	r3, [sp, #28]
    f17c:	4b41      	ldr	r3, [pc, #260]	; (f284 <isr+0x7fc>)
    f17e:	9305      	str	r3, [sp, #20]
    f180:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f182:	4a41      	ldr	r2, [pc, #260]	; (f288 <isr+0x800>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f184:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f186:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f188:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f18a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f18e:	2307      	movs	r3, #7
    f190:	2100      	movs	r1, #0
    f192:	4343      	muls	r3, r0
    f194:	fb02 3301 	mla	r3, r2, r1, r3
    f198:	fba0 1202 	umull	r1, r2, r0, r2
    f19c:	441a      	add	r2, r3
    f19e:	4608      	mov	r0, r1
    f1a0:	ebb8 0000 	subs.w	r0, r8, r0
    f1a4:	4611      	mov	r1, r2
    f1a6:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1aa:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f1ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f1b0:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1b2:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    f1b4:	f7f1 f82e 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f1b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1ba:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f1bc:	a32a      	add	r3, pc, #168	; (adr r3, f268 <isr+0x7e0>)
    f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1c2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f1c6:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1ca:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    f1cc:	f7f1 f822 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1d0:	eba4 040a 	sub.w	r4, r4, sl
    f1d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f1d8:	9000      	str	r0, [sp, #0]
    f1da:	4623      	mov	r3, r4
    f1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f1de:	4629      	mov	r1, r5
    f1e0:	4628      	mov	r0, r5
    f1e2:	f7f8 fe71 	bl	7ec8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f1e6:	f030 0302 	bics.w	r3, r0, #2
    f1ea:	f43f acf9 	beq.w	ebe0 <isr+0x158>
    f1ee:	4b27      	ldr	r3, [pc, #156]	; (f28c <isr+0x804>)
    f1f0:	9301      	str	r3, [sp, #4]
    f1f2:	9300      	str	r3, [sp, #0]
    f1f4:	4b26      	ldr	r3, [pc, #152]	; (f290 <isr+0x808>)
    f1f6:	681c      	ldr	r4, [r3, #0]
    f1f8:	4b26      	ldr	r3, [pc, #152]	; (f294 <isr+0x80c>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f1fa:	4a27      	ldr	r2, [pc, #156]	; (f298 <isr+0x810>)
    f1fc:	4927      	ldr	r1, [pc, #156]	; (f29c <isr+0x814>)
    f1fe:	4828      	ldr	r0, [pc, #160]	; (f2a0 <isr+0x818>)
		LL_ASSERT(0);
    f200:	47a0      	blx	r4
    f202:	4040      	eors	r0, r0
    f204:	f380 8811 	msr	BASEPRI, r0
    f208:	f04f 0004 	mov.w	r0, #4
    f20c:	df02      	svc	2
		rl_idx = devmatch_ok ?
    f20e:	f1b9 0f00 	cmp.w	r9, #0
    f212:	d01c      	beq.n	f24e <isr+0x7c6>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    f214:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    f218:	4641      	mov	r1, r8
    f21a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f21e:	f002 fbd1 	bl	119c4 <ctrl_rl_idx>
    f222:	4680      	mov	r8, r0
		if (crc_ok &&
    f224:	b147      	cbz	r7, f238 <isr+0x7b0>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f226:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f22a:	06da      	lsls	r2, r3, #27
    f22c:	d53a      	bpl.n	f2a4 <isr+0x81c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f22e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f232:	06db      	lsls	r3, r3, #27
    f234:	f100 8125 	bmi.w	f482 <isr+0x9fa>
			_radio.state = STATE_CLOSE;
    f238:	2303      	movs	r3, #3
    f23a:	7523      	strb	r3, [r4, #20]
			radio_disable();
    f23c:	f003 fb62 	bl	12904 <radio_disable>
			_radio.scanner.state = 0;
    f240:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f244:	f36f 0341 	bfc	r3, #1, #1
    f248:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    f24c:	e4c8      	b.n	ebe0 <isr+0x158>
		rl_idx = devmatch_ok ?
    f24e:	f1ba 0f00 	cmp.w	sl, #0
    f252:	d003      	beq.n	f25c <isr+0x7d4>
    f254:	4658      	mov	r0, fp
    f256:	f002 fc11 	bl	11a7c <ctrl_rl_irk_idx>
    f25a:	e7e2      	b.n	f222 <isr+0x79a>
    f25c:	f04f 08ff 	mov.w	r8, #255	; 0xff
    f260:	e7e0      	b.n	f224 <isr+0x79c>
    f262:	bf00      	nop
    f264:	f3af 8000 	nop.w
    f268:	1afd498d 	.word	0x1afd498d
    f26c:	00000007 	.word	0x00000007
    f270:	000184ac 	.word	0x000184ac
    f274:	000f4240 	.word	0x000f4240
    f278:	3b9aca00 	.word	0x3b9aca00
    f27c:	0000ade5 	.word	0x0000ade5
    f280:	0000ada5 	.word	0x0000ada5
    f284:	0000d33d 	.word	0x0000d33d
    f288:	1afd498d 	.word	0x1afd498d
    f28c:	0001563e 	.word	0x0001563e
    f290:	20003a5c 	.word	0x20003a5c
    f294:	00017e09 	.word	0x00017e09
    f298:	000167b9 	.word	0x000167b9
    f29c:	00016808 	.word	0x00016808
    f2a0:	0001828d 	.word	0x0001828d
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f2a4:	f1b9 0f00 	cmp.w	r9, #0
    f2a8:	d005      	beq.n	f2b6 <isr+0x82e>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f2aa:	4641      	mov	r1, r8
    f2ac:	4650      	mov	r0, sl
    f2ae:	f002 fd71 	bl	11d94 <ctrl_rl_idx_allowed>
    f2b2:	2800      	cmp	r0, #0
    f2b4:	d0bb      	beq.n	f22e <isr+0x7a6>
	bool dir_report = false;
    f2b6:	2300      	movs	r3, #0
    f2b8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    f2bc:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f2c0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    f2c4:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f2c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    f2cc:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	f000 80ef 	beq.w	f4b4 <isr+0xa2c>
    f2d6:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f2da:	b133      	cbz	r3, f2ea <isr+0x862>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f2dc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    f2e0:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f2e4:	429a      	cmp	r2, r3
    f2e6:	f040 80e5 	bne.w	f4b4 <isr+0xa2c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f2ea:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    f2ee:	f3c3 1000 	ubfx	r0, r3, #4, #1
    f2f2:	2800      	cmp	r0, #0
    f2f4:	f000 80d0 	beq.w	f498 <isr+0xa10>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f2f8:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    f2fc:	f010 000f 	ands.w	r0, r0, #15
    f300:	f040 814f 	bne.w	f5a2 <isr+0xb1a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    f304:	f003 fce2 	bl	12ccc <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    f308:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    f30c:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    f310:	48b9      	ldr	r0, [pc, #740]	; (f5f8 <isr+0xb70>)
    f312:	2207      	movs	r2, #7
    f314:	fba3 0100 	umull	r0, r1, r3, r0
    f318:	fb02 1103 	mla	r1, r2, r3, r1
    f31c:	a3b4      	add	r3, pc, #720	; (adr r3, f5f0 <isr+0xb68>)
    f31e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f322:	f7f0 ff77 	bl	214 <__aeabi_uldivmod>
    f326:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    f32a:	4287      	cmp	r7, r0
    f32c:	f080 80c2 	bcs.w	f4b4 <isr+0xa2c>
			node_rx = packet_rx_reserve_get(4);
    f330:	2004      	movs	r0, #4
    f332:	f7fa fd89 	bl	9e48 <packet_rx_reserve_get>
		if (node_rx == 0) {
    f336:	4607      	mov	r7, r0
    f338:	2800      	cmp	r0, #0
    f33a:	f43f af7d 	beq.w	f238 <isr+0x7b0>
		_radio.state = STATE_STOP;
    f33e:	2304      	movs	r3, #4
    f340:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    f342:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    f344:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    f348:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f34c:	f003 fb30 	bl	129b0 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    f350:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    f352:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    f356:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    f35a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f35c:	f899 3008 	ldrb.w	r3, [r9, #8]
    f360:	7802      	ldrb	r2, [r0, #0]
    f362:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f366:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    f36a:	2322      	movs	r3, #34	; 0x22
    f36c:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f36e:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f370:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f372:	4640      	mov	r0, r8
    f374:	f002 fb08 	bl	11988 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f378:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f37c:	4601      	mov	r1, r0
    f37e:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f380:	f013 0f01 	tst.w	r3, #1
    f384:	f810 3b02 	ldrb.w	r3, [r0], #2
    f388:	f000 8116 	beq.w	f5b8 <isr+0xb30>
    f38c:	2900      	cmp	r1, #0
    f38e:	f000 8113 	beq.w	f5b8 <isr+0xb30>
			pdu_adv_tx->tx_addr = 1;
    f392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f396:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f398:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f39a:	f7f2 fd43 	bl	1e24 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    f39e:	f105 0308 	add.w	r3, r5, #8
    f3a2:	4618      	mov	r0, r3
    f3a4:	2206      	movs	r2, #6
    f3a6:	f109 010a 	add.w	r1, r9, #10
    f3aa:	930a      	str	r3, [sp, #40]	; 0x28
    f3ac:	f7f2 fd3a 	bl	1e24 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    f3b0:	2204      	movs	r2, #4
    f3b2:	f106 0110 	add.w	r1, r6, #16
    f3b6:	f105 000e 	add.w	r0, r5, #14
    f3ba:	f7f2 fd33 	bl	1e24 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    f3be:	2203      	movs	r2, #3
    f3c0:	f106 0114 	add.w	r1, r6, #20
    f3c4:	f105 0012 	add.w	r0, r5, #18
    f3c8:	f7f2 fd2c 	bl	1e24 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    f3cc:	2301      	movs	r3, #1
    f3ce:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    f3d0:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    f3d4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f3d8:	4353      	muls	r3, r2
    f3da:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f3dc:	f003 fc76 	bl	12ccc <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    f3e0:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    f3e2:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    f3e6:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f3e8:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    f3ec:	bfd8      	it	le
    f3ee:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    f3f2:	f1bb 0f00 	cmp.w	fp, #0
    f3f6:	f040 80ea 	bne.w	f5ce <isr+0xb46>
			pdu_adv_tx->connect_ind.win_offset = 0;
    f3fa:	f885 b016 	strb.w	fp, [r5, #22]
    f3fe:	f885 b017 	strb.w	fp, [r5, #23]
    f402:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f404:	2100      	movs	r1, #0
    f406:	4608      	mov	r0, r1
    f408:	f003 fa62 	bl	128d0 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f40c:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f40e:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f412:	4608      	mov	r0, r1
    f414:	f003 fa61 	bl	128da <radio_tx_chain_delay_get>
    f418:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    f41c:	f100 031e 	add.w	r3, r0, #30
    f420:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    f422:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f426:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    f428:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f42c:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    f42e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f432:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    f434:	f106 0117 	add.w	r1, r6, #23
    f438:	2205      	movs	r2, #5
    f43a:	f105 001e 	add.w	r0, r5, #30
    f43e:	f7f2 fcf1 	bl	1e24 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    f442:	7fb2      	ldrb	r2, [r6, #30]
    f444:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f448:	f362 0304 	bfi	r3, r2, #0, #5
    f44c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    f450:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    f454:	f362 1347 	bfi	r3, r2, #5, #3
    f458:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    f45c:	f003 fac2 	bl	129e4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    f460:	4628      	mov	r0, r5
    f462:	f003 fa2f 	bl	128c4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f466:	f003 fa6b 	bl	12940 <radio_is_ready>
    f46a:	4683      	mov	fp, r0
    f46c:	2800      	cmp	r0, #0
    f46e:	f000 80cf 	beq.w	f610 <isr+0xb88>
		LL_ASSERT(!radio_is_ready());
    f472:	4b62      	ldr	r3, [pc, #392]	; (f5fc <isr+0xb74>)
    f474:	9301      	str	r3, [sp, #4]
    f476:	9300      	str	r3, [sp, #0]
    f478:	4b61      	ldr	r3, [pc, #388]	; (f600 <isr+0xb78>)
    f47a:	681c      	ldr	r4, [r3, #0]
    f47c:	4b61      	ldr	r3, [pc, #388]	; (f604 <isr+0xb7c>)
    f47e:	f7ff bb63 	b.w	eb48 <isr+0xc0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f482:	f1b9 0f00 	cmp.w	r9, #0
    f486:	f47f af16 	bne.w	f2b6 <isr+0x82e>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f48a:	4640      	mov	r0, r8
    f48c:	f002 fb42 	bl	11b14 <ctrl_irk_whitelisted>
		if (crc_ok &&
    f490:	2800      	cmp	r0, #0
    f492:	f43f aed1 	beq.w	f238 <isr+0x7b0>
    f496:	e70e      	b.n	f2b6 <isr+0x82e>
	if (rl_idx != FILTER_IDX_NONE) {
    f498:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f49c:	d06f      	beq.n	f57e <isr+0xaf6>
		return (rl_idx == _radio.scanner.rl_idx);
    f49e:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    f4a2:	eba0 0e08 	sub.w	lr, r0, r8
    f4a6:	f1de 0000 	rsbs	r0, lr, #0
    f4aa:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f4ae:	2800      	cmp	r0, #0
    f4b0:	f47f af22 	bne.w	f2f8 <isr+0x870>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f4b4:	f899 0008 	ldrb.w	r0, [r9, #8]
    f4b8:	f010 000f 	ands.w	r0, r0, #15
    f4bc:	d002      	beq.n	f4c4 <isr+0xa3c>
    f4be:	2806      	cmp	r0, #6
    f4c0:	f040 81b1 	bne.w	f826 <isr+0xd9e>
		 (_radio.scanner.type != 0) &&
    f4c4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    f4c8:	071f      	lsls	r7, r3, #28
    f4ca:	f140 8196 	bpl.w	f7fa <isr+0xd72>
		 (_radio.scanner.type != 0) &&
    f4ce:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f4d2:	2a00      	cmp	r2, #0
    f4d4:	f040 8191 	bne.w	f7fa <isr+0xd72>
		err = isr_rx_scan_report(rssi_ready,
    f4d8:	f1ba 0f00 	cmp.w	sl, #0
    f4dc:	bf14      	ite	ne
    f4de:	4641      	movne	r1, r8
    f4e0:	21ff      	moveq	r1, #255	; 0xff
    f4e2:	4628      	mov	r0, r5
    f4e4:	f7fb fbe8 	bl	acb8 <isr_rx_scan_report>
		if (err) {
    f4e8:	2800      	cmp	r0, #0
    f4ea:	f47f aea5 	bne.w	f238 <isr+0x7b0>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f4ee:	f003 fa5f 	bl	129b0 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    f4f2:	7803      	ldrb	r3, [r0, #0]
    f4f4:	2203      	movs	r2, #3
    f4f6:	f362 0303 	bfi	r3, r2, #0, #4
    f4fa:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f4fc:	f899 3008 	ldrb.w	r3, [r9, #8]
    f500:	7802      	ldrb	r2, [r0, #0]
    f502:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f506:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    f50a:	230c      	movs	r3, #12
    f50c:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f50e:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f510:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f512:	4640      	mov	r0, r8
    f514:	f002 fa38 	bl	11988 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f518:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f51c:	4601      	mov	r1, r0
    f51e:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f520:	f013 0f01 	tst.w	r3, #1
    f524:	f810 3b02 	ldrb.w	r3, [r0], #2
    f528:	f000 815e 	beq.w	f7e8 <isr+0xd60>
    f52c:	2900      	cmp	r1, #0
    f52e:	f000 815b 	beq.w	f7e8 <isr+0xd60>
			pdu_adv_tx->tx_addr = 1;
    f532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f536:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f538:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f53a:	f7f2 fc73 	bl	1e24 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    f53e:	2206      	movs	r2, #6
    f540:	f109 010a 	add.w	r1, r9, #10
    f544:	f105 0008 	add.w	r0, r5, #8
    f548:	f7f2 fc6c 	bl	1e24 <memcpy>
		_radio.scanner.state = 1;
    f54c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f550:	f043 0302 	orr.w	r3, r3, #2
    f554:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    f558:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    f55a:	2302      	movs	r3, #2
    f55c:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    f55e:	f003 fac7 	bl	12af0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    f562:	2000      	movs	r0, #0
    f564:	f003 fa28 	bl	129b8 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    f568:	4628      	mov	r0, r5
    f56a:	f003 f9ab 	bl	128c4 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    f56e:	f003 fb9b 	bl	12ca8 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    f572:	f003 f9e5 	bl	12940 <radio_is_ready>
    f576:	2800      	cmp	r0, #0
    f578:	f43f ab32 	beq.w	ebe0 <isr+0x158>
    f57c:	e779      	b.n	f472 <isr+0x9ea>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f57e:	f899 2008 	ldrb.w	r2, [r9, #8]
    f582:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f586:	f3c2 1280 	ubfx	r2, r2, #6, #1
    f58a:	4293      	cmp	r3, r2
    f58c:	d18f      	bne.n	f4ae <isr+0xa26>
		(memcmp(&_radio.scanner.adv_addr[0],
    f58e:	2206      	movs	r2, #6
    f590:	f109 010a 	add.w	r1, r9, #10
    f594:	481c      	ldr	r0, [pc, #112]	; (f608 <isr+0xb80>)
    f596:	f7f2 fc30 	bl	1dfa <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f59a:	fab0 f080 	clz	r0, r0
    f59e:	0940      	lsrs	r0, r0, #5
    f5a0:	e785      	b.n	f4ae <isr+0xa26>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f5a2:	2801      	cmp	r0, #1
    f5a4:	d18b      	bne.n	f4be <isr+0xa36>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    f5a6:	2300      	movs	r3, #0
    f5a8:	4642      	mov	r2, r8
    f5aa:	4631      	mov	r1, r6
    f5ac:	f7fb fb38 	bl	ac20 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f5b0:	2800      	cmp	r0, #0
    f5b2:	f43f af7f 	beq.w	f4b4 <isr+0xa2c>
    f5b6:	e6a5      	b.n	f304 <isr+0x87c>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f5b8:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f5bc:	4913      	ldr	r1, [pc, #76]	; (f60c <isr+0xb84>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f5be:	09d2      	lsrs	r2, r2, #7
    f5c0:	f362 1386 	bfi	r3, r2, #6, #1
    f5c4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f5c6:	2206      	movs	r2, #6
    f5c8:	e6e7      	b.n	f39a <isr+0x912>
				conn_space_us += conn_interval_us;
    f5ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f5cc:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    f5ce:	f1bb 0f00 	cmp.w	fp, #0
    f5d2:	dbfa      	blt.n	f5ca <isr+0xb42>
    f5d4:	459b      	cmp	fp, r3
    f5d6:	d3f8      	bcc.n	f5ca <isr+0xb42>
				(conn_space_us - conn_offset_us) / 1250;
    f5d8:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    f5dc:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f5e0:	fbb3 f3f2 	udiv	r3, r3, r2
    f5e4:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    f5e6:	7d6b      	ldrb	r3, [r5, #21]
    f5e8:	3301      	adds	r3, #1
    f5ea:	756b      	strb	r3, [r5, #21]
    f5ec:	e70a      	b.n	f404 <isr+0x97c>
    f5ee:	bf00      	nop
    f5f0:	3b9aca00 	.word	0x3b9aca00
    f5f4:	00000000 	.word	0x00000000
    f5f8:	1afd498d 	.word	0x1afd498d
    f5fc:	0001563e 	.word	0x0001563e
    f600:	20003a5c 	.word	0x20003a5c
    f604:	00017e27 	.word	0x00017e27
    f608:	200009aa 	.word	0x200009aa
    f60c:	200009a4 	.word	0x200009a4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f610:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f614:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    f618:	4630      	mov	r0, r6
    f61a:	f7f7 fe02 	bl	7222 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f61e:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f620:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f622:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    f626:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    f62a:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f62e:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f630:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    f634:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f636:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f63a:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f63c:	2206      	movs	r2, #6
    f63e:	f107 001b 	add.w	r0, r7, #27
    f642:	f7f2 fbef 	bl	1e24 <memcpy>
    f646:	f107 0b0e 	add.w	fp, r7, #14
    f64a:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    f64e:	f1ba 0f00 	cmp.w	sl, #0
    f652:	d034      	beq.n	f6be <isr+0xc36>
    f654:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f658:	d031      	beq.n	f6be <isr+0xc36>
			ll_rl_id_addr_get(rl_idx,
    f65a:	465a      	mov	r2, fp
    f65c:	f107 010d 	add.w	r1, r7, #13
    f660:	4640      	mov	r0, r8
    f662:	930d      	str	r3, [sp, #52]	; 0x34
    f664:	f002 fbcc 	bl	11e00 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    f668:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f66c:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    f66e:	3202      	adds	r2, #2
    f670:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f672:	4618      	mov	r0, r3
    f674:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f676:	f7f2 fbd5 	bl	1e24 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    f67a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f67e:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    f682:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f686:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    f68a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f68e:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    f692:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f696:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    f69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    f69e:	8c30      	ldrh	r0, [r6, #32]
    f6a0:	f7fb fb66 	bl	ad70 <rx_fc_lock>
		packet_rx_enqueue();
    f6a4:	f7fb fa6a 	bl	ab7c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    f6a8:	2003      	movs	r0, #3
    f6aa:	f7fa fbcd 	bl	9e48 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f6ae:	b998      	cbnz	r0, f6d8 <isr+0xc50>
    f6b0:	4bbd      	ldr	r3, [pc, #756]	; (f9a8 <isr+0xf20>)
    f6b2:	9301      	str	r3, [sp, #4]
    f6b4:	9300      	str	r3, [sp, #0]
    f6b6:	4bbd      	ldr	r3, [pc, #756]	; (f9ac <isr+0xf24>)
    f6b8:	681c      	ldr	r4, [r3, #0]
    f6ba:	4bbd      	ldr	r3, [pc, #756]	; (f9b0 <isr+0xf28>)
    f6bc:	e466      	b.n	ef8c <isr+0x504>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    f6be:	2206      	movs	r2, #6
    f6c0:	2100      	movs	r1, #0
    f6c2:	4618      	mov	r0, r3
    f6c4:	f7f2 fbda 	bl	1e7c <memset>
				pdu_adv_tx->rx_addr;
    f6c8:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f6ca:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    f6cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    f6d0:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f6d2:	2206      	movs	r2, #6
    f6d4:	4658      	mov	r0, fp
    f6d6:	e7ce      	b.n	f676 <isr+0xbee>
			node_rx->hdr.handle = conn->handle;
    f6d8:	8c33      	ldrh	r3, [r6, #32]
    f6da:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f6dc:	230b      	movs	r3, #11
    f6de:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    f6e0:	f899 3008 	ldrb.w	r3, [r9, #8]
    f6e4:	f013 0320 	ands.w	r3, r3, #32
    f6e8:	d00e      	beq.n	f708 <isr+0xc80>
					((u16_t)conn->access_addr[1] << 8) |
    f6ea:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    f6ec:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f6ee:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    f6f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f6f4:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    f6f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f6fa:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f6fc:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f6fe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f702:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    f704:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f706:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f708:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f70a:	f7fb fa37 	bl	ab7c <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f70e:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f710:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f714:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    f716:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    f71a:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f71c:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f71e:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f722:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f724:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f726:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f72a:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f72c:	4629      	mov	r1, r5
    f72e:	9300      	str	r3, [sp, #0]
    f730:	4628      	mov	r0, r5
    f732:	4ba0      	ldr	r3, [pc, #640]	; (f9b4 <isr+0xf2c>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f734:	f8df a290 	ldr.w	sl, [pc, #656]	; f9c8 <isr+0xf40>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f738:	bf38      	it	cc
    f73a:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f73c:	f7f8 fc62 	bl	8004 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    f740:	f240 6139 	movw	r1, #1593	; 0x639
    f744:	f7fb fb86 	bl	ae54 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f748:	462b      	mov	r3, r5
    f74a:	2204      	movs	r2, #4
    f74c:	4629      	mov	r1, r5
    f74e:	9500      	str	r5, [sp, #0]
    f750:	4628      	mov	r0, r5
    f752:	f7f8 fc57 	bl	8004 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f758:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f75c:	68a3      	ldr	r3, [r4, #8]
    f75e:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    f762:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f764:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    f768:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    f76c:	9308      	str	r3, [sp, #32]
    f76e:	4b92      	ldr	r3, [pc, #584]	; (f9b8 <isr+0xf30>)
    f770:	9307      	str	r3, [sp, #28]
    f772:	4b92      	ldr	r3, [pc, #584]	; (f9bc <isr+0xf34>)
    f774:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f776:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    f778:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f77a:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f77c:	4640      	mov	r0, r8
    f77e:	a388      	add	r3, pc, #544	; (adr r3, f9a0 <isr+0xf18>)
    f780:	e9d3 2300 	ldrd	r2, r3, [r3]
    f784:	4649      	mov	r1, r9
		ticker_status =
    f786:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f788:	f7f0 fd44 	bl	214 <__aeabi_uldivmod>
    f78c:	4610      	mov	r0, r2
    f78e:	4619      	mov	r1, r3
    f790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f794:	2300      	movs	r3, #0
    f796:	f7f0 fd3d 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f79a:	a381      	add	r3, pc, #516	; (adr r3, f9a0 <isr+0xf18>)
    f79c:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f7a0:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f7a2:	4649      	mov	r1, r9
    f7a4:	4640      	mov	r0, r8
    f7a6:	f7f0 fd35 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f7aa:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f7ac:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f7ae:	a37c      	add	r3, pc, #496	; (adr r3, f9a0 <isr+0xf18>)
    f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7b4:	fba1 010a 	umull	r0, r1, r1, sl
    f7b8:	f7f0 fd2c 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f7bc:	3407      	adds	r4, #7
    f7be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    f7c2:	b2e4      	uxtb	r4, r4
    f7c4:	9000      	str	r0, [sp, #0]
    f7c6:	465b      	mov	r3, fp
    f7c8:	4622      	mov	r2, r4
    f7ca:	4629      	mov	r1, r5
    f7cc:	4628      	mov	r0, r5
    f7ce:	f7f8 fb7b 	bl	7ec8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f7d2:	f030 0302 	bics.w	r3, r0, #2
    f7d6:	f43f aa03 	beq.w	ebe0 <isr+0x158>
    f7da:	4b73      	ldr	r3, [pc, #460]	; (f9a8 <isr+0xf20>)
    f7dc:	9301      	str	r3, [sp, #4]
    f7de:	9300      	str	r3, [sp, #0]
    f7e0:	4b72      	ldr	r3, [pc, #456]	; (f9ac <isr+0xf24>)
    f7e2:	681c      	ldr	r4, [r3, #0]
    f7e4:	4b72      	ldr	r3, [pc, #456]	; (f9b0 <isr+0xf28>)
    f7e6:	e508      	b.n	f1fa <isr+0x772>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f7e8:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f7ec:	4974      	ldr	r1, [pc, #464]	; (f9c0 <isr+0xf38>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f7ee:	09d2      	lsrs	r2, r2, #7
    f7f0:	f362 1386 	bfi	r3, r2, #6, #1
    f7f4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f7f6:	2206      	movs	r2, #6
    f7f8:	e69f      	b.n	f53a <isr+0xab2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f7fa:	b9a0      	cbnz	r0, f826 <isr+0xd9e>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    f7fc:	f899 3009 	ldrb.w	r3, [r9, #9]
    f800:	2b00      	cmp	r3, #0
    f802:	f43f ad19 	beq.w	f238 <isr+0x7b0>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    f806:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f80a:	2b00      	cmp	r3, #0
    f80c:	f47f ad14 	bne.w	f238 <isr+0x7b0>
		err = isr_rx_scan_report(rssi_ready,
    f810:	f1ba 0f00 	cmp.w	sl, #0
    f814:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f818:	bf14      	ite	ne
    f81a:	4641      	movne	r1, r8
    f81c:	21ff      	moveq	r1, #255	; 0xff
    f81e:	4628      	mov	r0, r5
    f820:	f7fb fa4a 	bl	acb8 <isr_rx_scan_report>
    f824:	e508      	b.n	f238 <isr+0x7b0>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f826:	2801      	cmp	r0, #1
    f828:	d00e      	beq.n	f848 <isr+0xdc0>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f82a:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f82e:	f003 020b 	and.w	r2, r3, #11
    f832:	2a02      	cmp	r2, #2
    f834:	d0e2      	beq.n	f7fc <isr+0xd74>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f836:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f83a:	2b07      	cmp	r3, #7
    f83c:	d10d      	bne.n	f85a <isr+0xdd2>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f83e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f842:	0758      	lsls	r0, r3, #29
    f844:	d1da      	bne.n	f7fc <isr+0xd74>
    f846:	e4f7      	b.n	f238 <isr+0x7b0>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f848:	ab10      	add	r3, sp, #64	; 0x40
    f84a:	4642      	mov	r2, r8
    f84c:	4631      	mov	r1, r6
    f84e:	2000      	movs	r0, #0
    f850:	f7fb f9e6 	bl	ac20 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f854:	2800      	cmp	r0, #0
    f856:	d1d1      	bne.n	f7fc <isr+0xd74>
    f858:	e7e7      	b.n	f82a <isr+0xda2>
		   (_radio.scanner.phy)) ||
    f85a:	2b04      	cmp	r3, #4
    f85c:	f47f acec 	bne.w	f238 <isr+0x7b0>
		   (_radio.scanner.state != 0) &&
    f860:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f864:	0799      	lsls	r1, r3, #30
    f866:	f57f ace7 	bpl.w	f238 <isr+0x7b0>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f86a:	f003 f8a1 	bl	129b0 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f86e:	f899 3008 	ldrb.w	r3, [r9, #8]
    f872:	7802      	ldrb	r2, [r0, #0]
    f874:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f878:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f87c:	f47f acdc 	bne.w	f238 <isr+0x7b0>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f880:	2206      	movs	r2, #6
    f882:	f109 010a 	add.w	r1, r9, #10
    f886:	3008      	adds	r0, #8
    f888:	f7f2 fab7 	bl	1dfa <memcmp>
		   (_radio.scanner.state != 0) &&
    f88c:	2800      	cmp	r0, #0
    f88e:	d0b5      	beq.n	f7fc <isr+0xd74>
    f890:	e4d2      	b.n	f238 <isr+0x7b0>
	_radio.packet_counter++;
    f892:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f896:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f89a:	3301      	adds	r3, #1
    f89c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f8a0:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f8a2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f8a6:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f8aa:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f8ae:	2301      	movs	r3, #1
    f8b0:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f8b4:	2f00      	cmp	r7, #0
    f8b6:	f000 82dc 	beq.w	fe72 <isr+0x13ea>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f8ba:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f8be:	f898 1008 	ldrb.w	r1, [r8, #8]
    f8c2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f8c6:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f8ca:	f003 0201 	and.w	r2, r3, #1
    f8ce:	4291      	cmp	r1, r2
    f8d0:	f000 81a2 	beq.w	fc18 <isr+0x1190>
		_radio.conn_curr->sn++;
    f8d4:	f082 0201 	eor.w	r2, r2, #1
    f8d8:	f362 0300 	bfi	r3, r2, #0, #1
    f8dc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f8e0:	7ce3      	ldrb	r3, [r4, #19]
    f8e2:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f8e4:	bf02      	ittt	eq
    f8e6:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f8ea:	f043 0301 	orreq.w	r3, r3, #1
    f8ee:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f8f2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f8f6:	061a      	lsls	r2, r3, #24
    f8f8:	f100 8189 	bmi.w	fc0e <isr+0x1186>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f8fc:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f900:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f904:	1d30      	adds	r0, r6, #4
    f906:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f90a:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f90e:	f1b9 0f00 	cmp.w	r9, #0
    f912:	f000 80af 	beq.w	fa74 <isr+0xfec>
				if (_radio.conn_curr->enc_tx) {
    f916:	069b      	lsls	r3, r3, #26
    f918:	d50b      	bpl.n	f932 <isr+0xeaa>
					_radio.conn_curr->ccm_tx.counter++;
    f91a:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f91e:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f922:	f11b 0201 	adds.w	r2, fp, #1
    f926:	f14c 0300 	adc.w	r3, ip, #0
    f92a:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f92e:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f932:	5c43      	ldrb	r3, [r0, r1]
    f934:	f003 0303 	and.w	r3, r3, #3
    f938:	2b03      	cmp	r3, #3
    f93a:	f040 809b 	bne.w	fa74 <isr+0xfec>
	switch (pdu_data_tx->llctrl.opcode) {
    f93e:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f942:	3b02      	subs	r3, #2
    f944:	2b16      	cmp	r3, #22
    f946:	f200 8095 	bhi.w	fa74 <isr+0xfec>
    f94a:	e8df f013 	tbh	[pc, r3, lsl #1]
    f94e:	0017      	.short	0x0017
    f950:	00c90077 	.word	0x00c90077
    f954:	00930093 	.word	0x00930093
    f958:	00930093 	.word	0x00930093
    f95c:	00950093 	.word	0x00950093
    f960:	009300a0 	.word	0x009300a0
    f964:	009300d0 	.word	0x009300d0
    f968:	00930093 	.word	0x00930093
    f96c:	00930093 	.word	0x00930093
    f970:	00da0093 	.word	0x00da0093
    f974:	00f20093 	.word	0x00f20093
    f978:	012400f9 	.word	0x012400f9
		_radio.state = STATE_CLOSE;
    f97c:	2303      	movs	r3, #3
    f97e:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f980:	f002 ffc0 	bl	12904 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f984:	f002 ffdc 	bl	12940 <radio_is_ready>
    f988:	b300      	cbz	r0, f9cc <isr+0xf44>
    f98a:	4b07      	ldr	r3, [pc, #28]	; (f9a8 <isr+0xf20>)
    f98c:	9301      	str	r3, [sp, #4]
    f98e:	9300      	str	r3, [sp, #0]
    f990:	4b06      	ldr	r3, [pc, #24]	; (f9ac <isr+0xf24>)
    f992:	681c      	ldr	r4, [r3, #0]
    f994:	4b0b      	ldr	r3, [pc, #44]	; (f9c4 <isr+0xf3c>)
    f996:	f7ff b8d7 	b.w	eb48 <isr+0xc0>
    f99a:	bf00      	nop
    f99c:	f3af 8000 	nop.w
    f9a0:	1afd498d 	.word	0x1afd498d
    f9a4:	00000007 	.word	0x00000007
    f9a8:	0001563e 	.word	0x0001563e
    f9ac:	20003a5c 	.word	0x20003a5c
    f9b0:	00017e27 	.word	0x00017e27
    f9b4:	0000ae55 	.word	0x0000ae55
    f9b8:	0000ada5 	.word	0x0000ada5
    f9bc:	0000d339 	.word	0x0000d339
    f9c0:	200009a4 	.word	0x200009a4
    f9c4:	00017e33 	.word	0x00017e33
    f9c8:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f9cc:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f9d0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f9d4:	2913      	cmp	r1, #19
    f9d6:	bf08      	it	eq
    f9d8:	2116      	moveq	r1, #22
    f9da:	f7fb fe4b 	bl	b674 <terminate_ind_rx_enqueue>
		terminate = 1;
    f9de:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f9e0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f9e4:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f9e8:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f9ea:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f9ee:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f9f2:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f9f4:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f9f8:	d11e      	bne.n	fa38 <isr+0xfb0>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f9fa:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f9fe:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    fa02:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    fa04:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    fa06:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    fa0a:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    fa0e:	f040 80c9 	bne.w	fba4 <isr+0x111c>
		if (node_tx) {
    fa12:	b18e      	cbz	r6, fa38 <isr+0xfb0>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    fa14:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    fa18:	f8d3 e000 	ldr.w	lr, [r3]
    fa1c:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    fa20:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    fa22:	bf06      	itte	eq
    fa24:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    fa28:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    fa2c:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    fa30:	49cf      	ldr	r1, [pc, #828]	; (fd70 <isr+0x12e8>)
    fa32:	4630      	mov	r0, r6
    fa34:	f7f7 fbd7 	bl	71e6 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    fa38:	2600      	movs	r6, #0
    fa3a:	e0bc      	b.n	fbb6 <isr+0x112e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    fa3c:	2208      	movs	r2, #8
    fa3e:	f10a 010e 	add.w	r1, sl, #14
    fa42:	f105 0094 	add.w	r0, r5, #148	; 0x94
    fa46:	f7f2 f9ed 	bl	1e24 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    fa4a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa4e:	2204      	movs	r2, #4
    fa50:	f10a 0116 	add.w	r1, sl, #22
    fa54:	f500 7089 	add.w	r0, r0, #274	; 0x112
    fa58:	f7f2 f9e4 	bl	1e24 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    fa5c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fa60:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    fa64:	f042 0208 	orr.w	r2, r2, #8
    fa68:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    fa6c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    fa70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    fa74:	2500      	movs	r5, #0
    fa76:	e7b3      	b.n	f9e0 <isr+0xf58>
		_radio.conn_curr->pause_tx = 1;
    fa78:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    fa7c:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    fa80:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    fa84:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    fa88:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    fa8c:	e7f2      	b.n	fa74 <isr+0xfec>
		if (_radio.role == ROLE_MASTER) {
    fa8e:	f894 a013 	ldrb.w	sl, [r4, #19]
    fa92:	fa5f fa8a 	uxtb.w	sl, sl
    fa96:	f1ba 0f04 	cmp.w	sl, #4
    fa9a:	d121      	bne.n	fae0 <isr+0x1058>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa9c:	7933      	ldrb	r3, [r6, #4]
    fa9e:	f043 0303 	orr.w	r3, r3, #3
    faa2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    faa4:	2317      	movs	r3, #23
    faa6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    faa8:	2303      	movs	r3, #3
    faaa:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    faac:	2208      	movs	r2, #8
    faae:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    fab2:	3004      	adds	r0, #4
    fab4:	f7f2 f9b6 	bl	1e24 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    fab8:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    fabc:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    fabe:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    fac2:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    fac4:	f106 0112 	add.w	r1, r6, #18
    fac8:	2208      	movs	r2, #8
    faca:	6860      	ldr	r0, [r4, #4]
    facc:	f003 ffd4 	bl	13a78 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    fad0:	f106 011a 	add.w	r1, r6, #26
    fad4:	4652      	mov	r2, sl
    fad6:	6860      	ldr	r0, [r4, #4]
    fad8:	f003 ffce 	bl	13a78 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    fadc:	2600      	movs	r6, #0
    fade:	e7c9      	b.n	fa74 <isr+0xfec>
			_radio.conn_curr->pause_tx = 1;
    fae0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    fae4:	f043 0308 	orr.w	r3, r3, #8
    fae8:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    faec:	e7c2      	b.n	fa74 <isr+0xfec>
		_radio.conn_curr->pause_rx = 0;
    faee:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    faf2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    faf6:	f36f 03c3 	bfc	r3, #3, #1
    fafa:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    fafe:	2300      	movs	r3, #0
    fb00:	e7c2      	b.n	fa88 <isr+0x1000>
		if ((_radio.conn_curr->llcp_length.req !=
    fb02:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    fb06:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    fb0a:	429a      	cmp	r2, r3
    fb0c:	d0b2      	beq.n	fa74 <isr+0xfec>
		    (_radio.conn_curr->llcp_length.state ==
    fb0e:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    fb12:	f003 0203 	and.w	r2, r3, #3
    fb16:	2a01      	cmp	r2, #1
    fb18:	d1ac      	bne.n	fa74 <isr+0xfec>
			_radio.conn_curr->pause_tx = 1;
    fb1a:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    fb1e:	f042 0208 	orr.w	r2, r2, #8
    fb22:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    fb26:	2202      	movs	r2, #2
    fb28:	f362 0301 	bfi	r3, r2, #0, #2
    fb2c:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    fb30:	e7a0      	b.n	fa74 <isr+0xfec>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    fb32:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    fb36:	2202      	movs	r2, #2
    fb38:	f362 0301 	bfi	r3, r2, #0, #2
    fb3c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    fb40:	7ce3      	ldrb	r3, [r4, #19]
    fb42:	2b03      	cmp	r3, #3
    fb44:	d196      	bne.n	fa74 <isr+0xfec>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    fb46:	2301      	movs	r3, #1
    fb48:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    fb4c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    fb50:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fb54:	2202      	movs	r2, #2
    fb56:	2304      	movs	r3, #4
    fb58:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    fb5c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    fb60:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    fb64:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    fb68:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    fb6c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    fb70:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    fb74:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    fb78:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    fb7c:	f003 0307 	and.w	r3, r3, #7
    fb80:	aa12      	add	r2, sp, #72	; 0x48
    fb82:	4413      	add	r3, r2
    fb84:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    fb88:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    fb8c:	f363 0202 	bfi	r2, r3, #0, #3
    fb90:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    fb94:	e76e      	b.n	fa74 <isr+0xfec>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    fb96:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    fb9a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    fb9e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    fba2:	e7f3      	b.n	fb8c <isr+0x1104>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    fba4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    fba8:	4293      	cmp	r3, r2
    fbaa:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    fbac:	bf08      	it	eq
    fbae:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    fbb2:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    fbb6:	b37d      	cbz	r5, fc18 <isr+0x1190>
		connection_release(_radio.conn_curr);
    fbb8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fbbc:	f7fb fb9a 	bl	b2f4 <connection_release>
		_radio.conn_curr = NULL;
    fbc0:	2300      	movs	r3, #0
    fbc2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    fbc6:	f003 f863 	bl	12c90 <radio_tmr_aa_restore>
    fbca:	b918      	cbnz	r0, fbd4 <isr+0x114c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    fbcc:	f003 f854 	bl	12c78 <radio_tmr_aa_get>
    fbd0:	f003 f858 	bl	12c84 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    fbd4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fbd8:	2b00      	cmp	r3, #0
    fbda:	f43f a801 	beq.w	ebe0 <isr+0x158>
	if (tx_release) {
    fbde:	b11e      	cbz	r6, fbe8 <isr+0x1160>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    fbe0:	4631      	mov	r1, r6
    fbe2:	8c18      	ldrh	r0, [r3, #32]
    fbe4:	f7fb faf8 	bl	b1d8 <pdu_node_tx_release>
	if (rx_enqueue) {
    fbe8:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    fbec:	2b00      	cmp	r3, #0
    fbee:	f43e aff7 	beq.w	ebe0 <isr+0x158>
		rx_fc_lock(_radio.conn_curr->handle);
    fbf2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fbf6:	8c18      	ldrh	r0, [r3, #32]
    fbf8:	f7fb f8ba 	bl	ad70 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    fbfc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fc00:	8c1b      	ldrh	r3, [r3, #32]
    fc02:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    fc06:	f7fa ffb9 	bl	ab7c <packet_rx_enqueue>
    fc0a:	f7fe bfe9 	b.w	ebe0 <isr+0x158>
			_radio.conn_curr->empty = 0;
    fc0e:	f36f 13c7 	bfc	r3, #7, #1
    fc12:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    fc16:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    fc18:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fc1c:	f898 2008 	ldrb.w	r2, [r8, #8]
    fc20:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    fc24:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fc28:	f3c3 0340 	ubfx	r3, r3, #1, #1
    fc2c:	429a      	cmp	r2, r3
    fc2e:	f040 80ef 	bne.w	fe10 <isr+0x1388>
	    (packet_rx_reserve_get(3) != 0) &&
    fc32:	2003      	movs	r0, #3
    fc34:	f7fa f908 	bl	9e48 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    fc38:	2800      	cmp	r0, #0
    fc3a:	f000 80e9 	beq.w	fe10 <isr+0x1388>
	    (packet_rx_reserve_get(3) != 0) &&
    fc3e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    fc42:	b393      	cbz	r3, fcaa <isr+0x1222>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    fc44:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    fc48:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    fc4c:	4293      	cmp	r3, r2
    fc4e:	d105      	bne.n	fc5c <isr+0x11d4>
	      (_radio.fc_req == _radio.fc_ack)) ||
    fc50:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    fc54:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    fc58:	4291      	cmp	r1, r2
    fc5a:	d026      	beq.n	fcaa <isr+0x1222>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    fc5c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    fc60:	4293      	cmp	r3, r2
    fc62:	f000 80d5 	beq.w	fe10 <isr+0x1388>
	      (_radio.fc_req != _radio.fc_ack) &&
    fc66:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    fc6a:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    fc6e:	429a      	cmp	r2, r3
    fc70:	f000 80ce 	beq.w	fe10 <isr+0x1388>
		(((_radio.fc_req == 0) &&
    fc74:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    fc78:	b933      	cbnz	r3, fc88 <isr+0x1200>
		   _radio.conn_curr->handle)) ||
    fc7a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    fc7e:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    fc82:	8c1b      	ldrh	r3, [r3, #32]
    fc84:	429a      	cmp	r2, r3
    fc86:	d010      	beq.n	fcaa <isr+0x1222>
		 ((_radio.fc_req != 0) &&
    fc88:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    fc8c:	2b00      	cmp	r3, #0
    fc8e:	f000 80bf 	beq.w	fe10 <isr+0x1388>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    fc92:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    fc96:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    fc9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    fc9e:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    fca2:	8c0b      	ldrh	r3, [r1, #32]
    fca4:	429a      	cmp	r2, r3
    fca6:	f040 80b3 	bne.w	fe10 <isr+0x1388>
		if (pdu_data_rx->len != 0) {
    fcaa:	f898 5009 	ldrb.w	r5, [r8, #9]
    fcae:	2d00      	cmp	r5, #0
    fcb0:	f000 80b7 	beq.w	fe22 <isr+0x139a>
			if (_radio.conn_curr->enc_rx) {
    fcb4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fcb8:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    fcbc:	f015 0510 	ands.w	r5, r5, #16
    fcc0:	d00e      	beq.n	fce0 <isr+0x1258>
				done = radio_ccm_is_done();
    fcc2:	f003 f871 	bl	12da8 <radio_ccm_is_done>
				LL_ASSERT(done);
    fcc6:	b950      	cbnz	r0, fcde <isr+0x1256>
    fcc8:	4b2a      	ldr	r3, [pc, #168]	; (fd74 <isr+0x12ec>)
    fcca:	9301      	str	r3, [sp, #4]
    fccc:	9300      	str	r3, [sp, #0]
    fcce:	4b2a      	ldr	r3, [pc, #168]	; (fd78 <isr+0x12f0>)
    fcd0:	4a2a      	ldr	r2, [pc, #168]	; (fd7c <isr+0x12f4>)
    fcd2:	681c      	ldr	r4, [r3, #0]
    fcd4:	492a      	ldr	r1, [pc, #168]	; (fd80 <isr+0x12f8>)
    fcd6:	4b2b      	ldr	r3, [pc, #172]	; (fd84 <isr+0x12fc>)
    fcd8:	482b      	ldr	r0, [pc, #172]	; (fd88 <isr+0x1300>)
    fcda:	f7ff ba91 	b.w	f200 <isr+0x778>
				ccm_rx_increment = 1;
    fcde:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    fce0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fce4:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    fce8:	06d9      	lsls	r1, r3, #27
    fcea:	d42c      	bmi.n	fd46 <isr+0x12be>
			    (_radio.conn_curr->pause_rx &&
    fcec:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fcf0:	f898 3008 	ldrb.w	r3, [r8, #8]
    fcf4:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    fcf8:	f012 0f04 	tst.w	r2, #4
    fcfc:	d146      	bne.n	fd8c <isr+0x1304>
			_radio.conn_curr->appto_expire = 0;
    fcfe:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    fd00:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    fd04:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    fd08:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    fd0c:	d004      	beq.n	fd18 <isr+0x1290>
    fd0e:	2b02      	cmp	r3, #2
    fd10:	d877      	bhi.n	fe02 <isr+0x137a>
				*rx_enqueue = 1;
    fd12:	2301      	movs	r3, #1
    fd14:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    fd18:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fd1c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    fd20:	f082 0202 	eor.w	r2, r2, #2
    fd24:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    fd28:	2d00      	cmp	r5, #0
    fd2a:	d071      	beq.n	fe10 <isr+0x1388>
				_radio.conn_curr->ccm_rx.counter++;
    fd2c:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    fd30:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    fd34:	f119 0001 	adds.w	r0, r9, #1
    fd38:	f14a 0100 	adc.w	r1, sl, #0
    fd3c:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    fd40:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    fd44:	e064      	b.n	fe10 <isr+0x1388>
			     !radio_ccm_mic_is_valid()) ||
    fd46:	f003 f84d 	bl	12de4 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    fd4a:	2800      	cmp	r0, #0
    fd4c:	d1ce      	bne.n	fcec <isr+0x1264>
				_radio.state = STATE_CLOSE;
    fd4e:	2303      	movs	r3, #3
    fd50:	7523      	strb	r3, [r4, #20]
				radio_disable();
    fd52:	f002 fdd7 	bl	12904 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    fd56:	f002 fdf3 	bl	12940 <radio_is_ready>
    fd5a:	4605      	mov	r5, r0
    fd5c:	2800      	cmp	r0, #0
    fd5e:	d044      	beq.n	fdea <isr+0x1362>
    fd60:	4b04      	ldr	r3, [pc, #16]	; (fd74 <isr+0x12ec>)
    fd62:	9301      	str	r3, [sp, #4]
    fd64:	9300      	str	r3, [sp, #0]
    fd66:	4b04      	ldr	r3, [pc, #16]	; (fd78 <isr+0x12f0>)
    fd68:	681c      	ldr	r4, [r3, #0]
    fd6a:	4b06      	ldr	r3, [pc, #24]	; (fd84 <isr+0x12fc>)
    fd6c:	f7fe beec 	b.w	eb48 <isr+0xc0>
    fd70:	20000a1c 	.word	0x20000a1c
    fd74:	0001563e 	.word	0x0001563e
    fd78:	20003a5c 	.word	0x20003a5c
    fd7c:	000167b9 	.word	0x000167b9
    fd80:	00016808 	.word	0x00016808
    fd84:	00017e97 	.word	0x00017e97
    fd88:	000184ef 	.word	0x000184ef
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    fd8c:	f003 0103 	and.w	r1, r3, #3
    fd90:	2903      	cmp	r1, #3
    fd92:	d1dc      	bne.n	fd4e <isr+0x12c6>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    fd94:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    fd98:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    fd9c:	f1be 0f00 	cmp.w	lr, #0
    fda0:	f002 0240 	and.w	r2, r2, #64	; 0x40
    fda4:	db15      	blt.n	fdd2 <isr+0x134a>
	       (!conn->role &&
    fda6:	b922      	cbnz	r2, fdb2 <isr+0x132a>
		((!conn->refresh &&
    fda8:	2902      	cmp	r1, #2
    fdaa:	d0a8      	beq.n	fcfe <isr+0x1276>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fdac:	2911      	cmp	r1, #17
    fdae:	d8ce      	bhi.n	fd4e <isr+0x12c6>
    fdb0:	e009      	b.n	fdc6 <isr+0x133e>
		 (conn->refresh &&
    fdb2:	1e8a      	subs	r2, r1, #2
    fdb4:	b2d2      	uxtb	r2, r2
    fdb6:	2a09      	cmp	r2, #9
    fdb8:	d8f8      	bhi.n	fdac <isr+0x1324>
    fdba:	f240 2e05 	movw	lr, #517	; 0x205
    fdbe:	fa2e f202 	lsr.w	r2, lr, r2
    fdc2:	07d2      	lsls	r2, r2, #31
    fdc4:	d49b      	bmi.n	fcfe <isr+0x1276>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fdc6:	4ab0      	ldr	r2, [pc, #704]	; (10088 <__kernel_ram_size+0x88>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fdc8:	fa22 f101 	lsr.w	r1, r2, r1
    fdcc:	07ca      	lsls	r2, r1, #31
    fdce:	d5be      	bpl.n	fd4e <isr+0x12c6>
    fdd0:	e795      	b.n	fcfe <isr+0x1276>
	       (conn->role &&
    fdd2:	b92a      	cbnz	r2, fde0 <isr+0x1358>
		((!conn->refresh &&
    fdd4:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    fdd6:	d092      	beq.n	fcfe <isr+0x1276>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fdd8:	2911      	cmp	r1, #17
    fdda:	d8b8      	bhi.n	fd4e <isr+0x12c6>
    fddc:	4aab      	ldr	r2, [pc, #684]	; (1008c <__kernel_ram_size+0x8c>)
    fdde:	e7f3      	b.n	fdc8 <isr+0x1340>
		 (conn->refresh &&
    fde0:	1e8a      	subs	r2, r1, #2
    fde2:	2a01      	cmp	r2, #1
    fde4:	d98b      	bls.n	fcfe <isr+0x1276>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    fde6:	290b      	cmp	r1, #11
    fde8:	e7f5      	b.n	fdd6 <isr+0x134e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    fdea:	213d      	movs	r1, #61	; 0x3d
    fdec:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fdf0:	f7fb fc40 	bl	b674 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    fdf4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fdf8:	f7fb fa7c 	bl	b2f4 <connection_release>
				_radio.conn_curr = NULL;
    fdfc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    fe00:	e6e1      	b.n	fbc6 <isr+0x113e>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    fe02:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    fe06:	4640      	mov	r0, r8
    fe08:	f7fd fcfe 	bl	d808 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    fe0c:	2800      	cmp	r0, #0
    fe0e:	d083      	beq.n	fd18 <isr+0x1290>
		_radio.conn_curr->supervision_expire = 0;
    fe10:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    fe14:	2300      	movs	r3, #0
    fe16:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    fe1a:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    fe1c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    fe20:	e03e      	b.n	fea0 <isr+0x1418>
		} else if ((_radio.conn_curr->enc_rx) ||
    fe22:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fe26:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    fe2a:	f013 0f14 	tst.w	r3, #20
    fe2e:	f43f af73 	beq.w	fd18 <isr+0x1290>
					    (conn->latency + 6)) ?
    fe32:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    fe34:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    fe38:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    fe3a:	4299      	cmp	r1, r3
    fe3c:	bfc4      	itt	gt
    fe3e:	1f8b      	subgt	r3, r1, #6
    fe40:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    fe42:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    fe46:	bfcc      	ite	gt
    fe48:	b29b      	uxthgt	r3, r3
    fe4a:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    fe4c:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    fe4e:	bf1e      	ittt	ne
    fe50:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    fe54:	2300      	movne	r3, #0
    fe56:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    fe5a:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    fe5e:	2b00      	cmp	r3, #0
    fe60:	f47f af5a 	bne.w	fd18 <isr+0x1290>
				conn->appto_expire = conn->appto_reload;
    fe64:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    fe68:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    fe6c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    fe70:	e752      	b.n	fd18 <isr+0x1290>
		if (_radio.crc_expire == 0) {
    fe72:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    fe76:	b913      	cbnz	r3, fe7e <isr+0x13f6>
			_radio.crc_expire = 2;
    fe78:	2302      	movs	r3, #2
    fe7a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    fe7e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    fe82:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    fe86:	3b01      	subs	r3, #1
    fe88:	b2db      	uxtb	r3, r3
    fe8a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    fe8e:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    fe92:	fab3 f583 	clz	r5, r3
    fe96:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    fe98:	bb86      	cbnz	r6, fefc <isr+0x1474>
			_radio.conn_curr->supervision_expire =
    fe9a:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    fe9c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fea0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fea4:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fea6:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    feaa:	f7fd fb67 	bl	d57c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    feae:	7d23      	ldrb	r3, [r4, #20]
    feb0:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    feb2:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    feb6:	d010      	beq.n	feda <isr+0x1452>
    feb8:	bb15      	cbnz	r5, ff00 <isr+0x1478>
    feba:	b137      	cbz	r7, feca <isr+0x1442>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    febc:	f898 3008 	ldrb.w	r3, [r8, #8]
    fec0:	06d8      	lsls	r0, r3, #27
    fec2:	d402      	bmi.n	feca <isr+0x1442>
			 (pdu_data_tx->len == 0)) ||
    fec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fec6:	785b      	ldrb	r3, [r3, #1]
    fec8:	b1d3      	cbz	r3, ff00 <isr+0x1478>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    feca:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    fece:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fed2:	2b00      	cmp	r3, #0
    fed4:	bf0c      	ite	eq
    fed6:	2302      	moveq	r3, #2
    fed8:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    feda:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fedc:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    fede:	d12f      	bne.n	ff40 <isr+0x14b8>
		if (_radio.role == ROLE_MASTER) {
    fee0:	7ce3      	ldrb	r3, [r4, #19]
    fee2:	2b04      	cmp	r3, #4
    fee4:	d10e      	bne.n	ff04 <isr+0x147c>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    fee6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    feea:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    feee:	f369 12c7 	bfi	r2, r9, #7, #1
    fef2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    fef6:	f002 fd05 	bl	12904 <radio_disable>
    fefa:	e664      	b.n	fbc6 <isr+0x113e>
	struct radio_pdu_node_tx *tx_release = NULL;
    fefc:	2600      	movs	r6, #0
    fefe:	e7cf      	b.n	fea0 <isr+0x1418>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    ff00:	2303      	movs	r3, #3
    ff02:	e7ea      	b.n	feda <isr+0x1452>
			radio_switch_complete_and_disable();
    ff04:	f002 fd6e 	bl	129e4 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    ff08:	9910      	ldr	r1, [sp, #64]	; 0x40
    ff0a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    ff0e:	780b      	ldrb	r3, [r1, #0]
    ff10:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    ff14:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    ff18:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ff1c:	f362 0382 	bfi	r3, r2, #2, #1
    ff20:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    ff22:	f7fa fb45 	bl	a5b0 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    ff26:	f002 fd0b 	bl	12940 <radio_is_ready>
    ff2a:	2800      	cmp	r0, #0
    ff2c:	f43f ae4b 	beq.w	fbc6 <isr+0x113e>
    ff30:	4b57      	ldr	r3, [pc, #348]	; (10090 <__kernel_ram_size+0x90>)
    ff32:	9301      	str	r3, [sp, #4]
    ff34:	9300      	str	r3, [sp, #0]
    ff36:	4b57      	ldr	r3, [pc, #348]	; (10094 <__kernel_ram_size+0x94>)
    ff38:	681c      	ldr	r4, [r3, #0]
    ff3a:	4b57      	ldr	r3, [pc, #348]	; (10098 <__kernel_ram_size+0x98>)
    ff3c:	f7fe be04 	b.w	eb48 <isr+0xc0>
		radio_tmr_tifs_set(RADIO_TIFS);
    ff40:	2096      	movs	r0, #150	; 0x96
    ff42:	f002 fdd5 	bl	12af0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    ff46:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ff4a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ff4e:	f000 0007 	and.w	r0, r0, #7
    ff52:	f002 fd31 	bl	129b8 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    ff56:	f002 fea7 	bl	12ca8 <radio_tmr_end_capture>
    ff5a:	e7d5      	b.n	ff08 <isr+0x1480>
		LL_ASSERT(0);
    ff5c:	4b4c      	ldr	r3, [pc, #304]	; (10090 <__kernel_ram_size+0x90>)
    ff5e:	9301      	str	r3, [sp, #4]
    ff60:	9300      	str	r3, [sp, #0]
    ff62:	4b4c      	ldr	r3, [pc, #304]	; (10094 <__kernel_ram_size+0x94>)
    ff64:	681c      	ldr	r4, [r3, #0]
    ff66:	4b4d      	ldr	r3, [pc, #308]	; (1009c <__kernel_ram_size+0x9c>)
    ff68:	f7fe be89 	b.w	ec7e <isr+0x1f6>
	switch (_radio.role) {
    ff6c:	7ce2      	ldrb	r2, [r4, #19]
    ff6e:	2a04      	cmp	r2, #4
    ff70:	f200 824c 	bhi.w	1040c <__kernel_ram_size+0x40c>
    ff74:	e8df f012 	tbh	[pc, r2, lsl #1]
    ff78:	00050238 	.word	0x00050238
    ff7c:	00c7005a 	.word	0x00c7005a
    ff80:	00c7      	.short	0x00c7
	if ((_radio.state == STATE_CLOSE) &&
    ff82:	2b03      	cmp	r3, #3
    ff84:	d109      	bne.n	ff9a <isr+0x1512>
	    (_radio.advertiser.chan_map_current != 0)) {
    ff86:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    ff8a:	0759      	lsls	r1, r3, #29
    ff8c:	d005      	beq.n	ff9a <isr+0x1512>
		adv_setup();
    ff8e:	f7fb fa8b 	bl	b4a8 <adv_setup>
		radio_tx_enable();
    ff92:	f002 fcb1 	bl	128f8 <radio_tx_enable>
    ff96:	f7fe bdf3 	b.w	eb80 <isr+0xf8>
		radio_filter_disable();
    ff9a:	f002 fd6d 	bl	12a78 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    ff9e:	7d23      	ldrb	r3, [r4, #20]
    ffa0:	2b03      	cmp	r3, #3
    ffa2:	f040 8095 	bne.w	100d0 <__kernel_ram_size+0xd0>
		    (!_radio.advertiser.is_hdcd)) {
    ffa6:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    ffaa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    ffae:	f040 808f 	bne.w	100d0 <__kernel_ram_size+0xd0>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    ffb2:	2201      	movs	r2, #1
    ffb4:	a910      	add	r1, sp, #64	; 0x40
    ffb6:	6860      	ldr	r0, [r4, #4]
    ffb8:	f003 fd5e 	bl	13a78 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    ffbc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    ffc0:	4837      	ldr	r0, [pc, #220]	; (100a0 <__kernel_ram_size+0xa0>)
			random_delay %= 10;
    ffc2:	230a      	movs	r3, #10
    ffc4:	fbb1 f2f3 	udiv	r2, r1, r3
    ffc8:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    ffcc:	3201      	adds	r2, #1
    ffce:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    ffd0:	b2d6      	uxtb	r6, r2
    ffd2:	fba6 0100 	umull	r0, r1, r6, r0
    ffd6:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    ffd8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    ffdc:	fb03 1106 	mla	r1, r3, r6, r1
    ffe0:	a327      	add	r3, pc, #156	; (adr r3, 10080 <__kernel_ram_size+0x80>)
    ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ffe6:	f7f0 f915 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    ffea:	f640 734b 	movw	r3, #3915	; 0xf4b
    ffee:	9306      	str	r3, [sp, #24]
    fff0:	4b2c      	ldr	r3, [pc, #176]	; (100a4 <__kernel_ram_size+0xa4>)
    fff2:	9305      	str	r3, [sp, #20]
    fff4:	9504      	str	r5, [sp, #16]
    fff6:	b283      	uxth	r3, r0
    fff8:	9503      	str	r5, [sp, #12]
    fffa:	9502      	str	r5, [sp, #8]
    fffc:	9501      	str	r5, [sp, #4]
    fffe:	9500      	str	r5, [sp, #0]
   10000:	2205      	movs	r2, #5
   10002:	4629      	mov	r1, r5
   10004:	4628      	mov	r0, r5
   10006:	f7f7 ffaf 	bl	7f68 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1000a:	f030 0302 	bics.w	r3, r0, #2
   1000e:	d05f      	beq.n	100d0 <__kernel_ram_size+0xd0>
   10010:	7ca3      	ldrb	r3, [r4, #18]
   10012:	2b05      	cmp	r3, #5
   10014:	d05c      	beq.n	100d0 <__kernel_ram_size+0xd0>
   10016:	4b1e      	ldr	r3, [pc, #120]	; (10090 <__kernel_ram_size+0x90>)
   10018:	9301      	str	r3, [sp, #4]
   1001a:	9300      	str	r3, [sp, #0]
   1001c:	4b1d      	ldr	r3, [pc, #116]	; (10094 <__kernel_ram_size+0x94>)
   1001e:	4a22      	ldr	r2, [pc, #136]	; (100a8 <__kernel_ram_size+0xa8>)
   10020:	681c      	ldr	r4, [r3, #0]
   10022:	4922      	ldr	r1, [pc, #136]	; (100ac <__kernel_ram_size+0xac>)
   10024:	4b22      	ldr	r3, [pc, #136]	; (100b0 <__kernel_ram_size+0xb0>)
   10026:	4823      	ldr	r0, [pc, #140]	; (100b4 <__kernel_ram_size+0xb4>)
   10028:	f7ff b8ea 	b.w	f200 <isr+0x778>
	if (_radio.state == STATE_CLOSE) {
   1002c:	2b03      	cmp	r3, #3
   1002e:	d143      	bne.n	100b8 <__kernel_ram_size+0xb8>
		radio_tmr_tifs_set(RADIO_TIFS);
   10030:	2096      	movs	r0, #150	; 0x96
   10032:	f002 fd5d 	bl	12af0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   10036:	2300      	movs	r3, #0
   10038:	4619      	mov	r1, r3
   1003a:	461a      	mov	r2, r3
   1003c:	4618      	mov	r0, r3
   1003e:	f002 fcc7 	bl	129d0 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   10042:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   10046:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
   1004a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1004e:	3008      	adds	r0, #8
   10050:	f002 fc32 	bl	128b8 <radio_pkt_rx_set>
		radio_rssi_measure();
   10054:	f002 fcd4 	bl	12a00 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10058:	f001 ff72 	bl	11f40 <ctrl_rl_enabled>
   1005c:	b138      	cbz	r0, 1006e <__kernel_ram_size+0x6e>
			u8_t count, *irks = ctrl_irks_get(&count);
   1005e:	a810      	add	r0, sp, #64	; 0x40
   10060:	f001 fca6 	bl	119b0 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10064:	4601      	mov	r1, r0
   10066:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1006a:	f002 fec5 	bl	12df8 <radio_ar_configure>
		_radio.state = STATE_RX;
   1006e:	2301      	movs	r3, #1
   10070:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   10072:	f002 fc3b 	bl	128ec <radio_rx_enable>
   10076:	f7fe bd83 	b.w	eb80 <isr+0xf8>
   1007a:	bf00      	nop
   1007c:	f3af 8000 	nop.w
   10080:	1afd498d 	.word	0x1afd498d
   10084:	00000007 	.word	0x00000007
   10088:	00022060 	.word	0x00022060
   1008c:	00022040 	.word	0x00022040
   10090:	0001563e 	.word	0x0001563e
   10094:	20003a5c 	.word	0x20003a5c
   10098:	00017ea7 	.word	0x00017ea7
   1009c:	00017eb3 	.word	0x00017eb3
   100a0:	d4a51000 	.word	0xd4a51000
   100a4:	0000aec5 	.word	0x0000aec5
   100a8:	000167b9 	.word	0x000167b9
   100ac:	00016808 	.word	0x00016808
   100b0:	00017ec6 	.word	0x00017ec6
   100b4:	00018515 	.word	0x00018515
		radio_filter_disable();
   100b8:	f002 fcde 	bl	12a78 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   100bc:	7d23      	ldrb	r3, [r4, #20]
   100be:	2b05      	cmp	r3, #5
   100c0:	d106      	bne.n	100d0 <__kernel_ram_size+0xd0>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   100c2:	2300      	movs	r3, #0
   100c4:	9300      	str	r3, [sp, #0]
   100c6:	2204      	movs	r2, #4
   100c8:	4619      	mov	r1, r3
   100ca:	4618      	mov	r0, r3
   100cc:	f7f7 ff9a 	bl	8004 <ticker_stop>
	_radio.role = ROLE_NONE;
   100d0:	2500      	movs	r5, #0
   100d2:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   100d4:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   100d6:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   100d8:	f002 fd88 	bl	12bec <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   100dc:	462a      	mov	r2, r5
   100de:	4629      	mov	r1, r5
   100e0:	4628      	mov	r0, r5
   100e2:	4bab      	ldr	r3, [pc, #684]	; (10390 <__kernel_ram_size+0x390>)
   100e4:	f7f7 f930 	bl	7348 <mayfly_enqueue>
	LL_ASSERT(!retval);
   100e8:	4605      	mov	r5, r0
   100ea:	2800      	cmp	r0, #0
   100ec:	f000 8196 	beq.w	1041c <__kernel_ram_size+0x41c>
   100f0:	4ba8      	ldr	r3, [pc, #672]	; (10394 <__kernel_ram_size+0x394>)
   100f2:	9301      	str	r3, [sp, #4]
   100f4:	9300      	str	r3, [sp, #0]
   100f6:	4ba8      	ldr	r3, [pc, #672]	; (10398 <__kernel_ram_size+0x398>)
   100f8:	4aa8      	ldr	r2, [pc, #672]	; (1039c <__kernel_ram_size+0x39c>)
   100fa:	681c      	ldr	r4, [r3, #0]
   100fc:	49a8      	ldr	r1, [pc, #672]	; (103a0 <__kernel_ram_size+0x3a0>)
   100fe:	4ba9      	ldr	r3, [pc, #676]	; (103a4 <__kernel_ram_size+0x3a4>)
   10100:	48a9      	ldr	r0, [pc, #676]	; (103a8 <__kernel_ram_size+0x3a8>)
   10102:	f7ff b87d 	b.w	f200 <isr+0x778>
	if (_radio.conn_curr == 0) {
   10106:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1010a:	2800      	cmp	r0, #0
   1010c:	d0e0      	beq.n	100d0 <__kernel_ram_size+0xd0>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   1010e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   10112:	b181      	cbz	r1, 10136 <__kernel_ram_size+0x136>
   10114:	7ce3      	ldrb	r3, [r4, #19]
   10116:	2b03      	cmp	r3, #3
   10118:	d003      	beq.n	10122 <__kernel_ram_size+0x122>
   1011a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1011e:	07da      	lsls	r2, r3, #31
   10120:	d509      	bpl.n	10136 <__kernel_ram_size+0x136>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10122:	f7fb faa7 	bl	b674 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10126:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1012a:	f7fb f8e3 	bl	b2f4 <connection_release>
			_radio.conn_curr = NULL;
   1012e:	2300      	movs	r3, #0
   10130:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   10134:	e7cc      	b.n	100d0 <__kernel_ram_size+0xd0>
	latency_event = _radio.conn_curr->latency_event;
   10136:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   1013a:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
   1013e:	f10b 0601 	add.w	r6, fp, #1
   10142:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   10144:	2f00      	cmp	r7, #0
   10146:	f000 8084 	beq.w	10252 <__kernel_ram_size+0x252>
		if (_radio.role == ROLE_SLAVE) {
   1014a:	7ce3      	ldrb	r3, [r4, #19]
   1014c:	2b03      	cmp	r3, #3
   1014e:	d173      	bne.n	10238 <__kernel_ram_size+0x238>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10150:	f002 fd9e 	bl	12c90 <radio_tmr_aa_restore>
   10154:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   10156:	f002 fda1 	bl	12c9c <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   1015a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
   1015e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   10162:	f003 0307 	and.w	r3, r3, #7
   10166:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10168:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   1016c:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   1016e:	d052      	beq.n	10216 <__kernel_ram_size+0x216>
		return 40;
   10170:	2b04      	cmp	r3, #4
   10172:	bf0c      	ite	eq
   10174:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   10178:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1017c:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10180:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   10182:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   10184:	930a      	str	r3, [sp, #40]	; 0x28
   10186:	f8df a230 	ldr.w	sl, [pc, #560]	; 103b8 <__kernel_ram_size+0x3b8>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1018a:	a37f      	add	r3, pc, #508	; (adr r3, 10388 <__kernel_ram_size+0x388>)
   1018c:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   10190:	d844      	bhi.n	1021c <__kernel_ram_size+0x21c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   10192:	fba0 010a 	umull	r0, r1, r0, sl
   10196:	f7f0 f83d 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1019a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1019c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1019e:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   101a2:	a379      	add	r3, pc, #484	; (adr r3, 10388 <__kernel_ram_size+0x388>)
   101a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   101a8:	fba0 010a 	umull	r0, r1, r0, sl
   101ac:	f7f0 f832 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   101b0:	2300      	movs	r3, #0
   101b2:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   101b4:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   101b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   101ba:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   101be:	b3ab      	cbz	r3, 1022c <__kernel_ram_size+0x22c>
				if (pdu_data_tx->len ||
   101c0:	795b      	ldrb	r3, [r3, #5]
   101c2:	b913      	cbnz	r3, 101ca <__kernel_ram_size+0x1ca>
   101c4:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   101c8:	b10b      	cbz	r3, 101ce <__kernel_ram_size+0x1ce>
					_radio.conn_curr->latency_event = 0;
   101ca:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   101cc:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   101ce:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   101d2:	2200      	movs	r2, #0
   101d4:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   101d6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   101da:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   101de:	b1c3      	cbz	r3, 10212 <__kernel_ram_size+0x212>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   101e0:	429e      	cmp	r6, r3
   101e2:	f080 80b2 	bcs.w	1034a <__kernel_ram_size+0x34a>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   101e6:	1b9b      	subs	r3, r3, r6
   101e8:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   101ea:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   101ec:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   101ee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   101f2:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   101f4:	f240 80ab 	bls.w	1034e <__kernel_ram_size+0x34e>
			else if (_radio.role == ROLE_SLAVE) {
   101f8:	7ce3      	ldrb	r3, [r4, #19]
   101fa:	2b03      	cmp	r3, #3
   101fc:	d109      	bne.n	10212 <__kernel_ram_size+0x212>
				if (latency_event != 0) {
   101fe:	f1bb 0f00 	cmp.w	fp, #0
   10202:	f040 80a4 	bne.w	1034e <__kernel_ram_size+0x34e>
					force = _radio.conn_curr->slave.force & 0x01;
   10206:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   10208:	087b      	lsrs	r3, r7, #1
					if (force) {
   1020a:	f017 0701 	ands.w	r7, r7, #1
   1020e:	d13d      	bne.n	1028c <__kernel_ram_size+0x28c>
					_radio.conn_curr->slave.force >>= 1;
   10210:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   10212:	2700      	movs	r7, #0
   10214:	e03d      	b.n	10292 <__kernel_ram_size+0x292>
		return 24;
   10216:	f04f 0818 	mov.w	r8, #24
   1021a:	e7af      	b.n	1017c <__kernel_ram_size+0x17c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1021c:	fba9 010a 	umull	r0, r1, r9, sl
   10220:	f7ef fff8 	bl	214 <__aeabi_uldivmod>
   10224:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   10226:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1022a:	e7ba      	b.n	101a2 <__kernel_ram_size+0x1a2>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   1022c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   10230:	07db      	lsls	r3, r3, #31
   10232:	d5cc      	bpl.n	101ce <__kernel_ram_size+0x1ce>
				_radio.conn_curr->latency_event =
   10234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   10236:	e7c9      	b.n	101cc <__kernel_ram_size+0x1cc>
		} else if (reason_peer) {
   10238:	b149      	cbz	r1, 1024e <__kernel_ram_size+0x24e>
			_radio.conn_curr->master.terminate_ack = 1;
   1023a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1023e:	f043 0301 	orr.w	r3, r3, #1
   10242:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   10246:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   1024a:	4645      	mov	r5, r8
   1024c:	e7bf      	b.n	101ce <__kernel_ram_size+0x1ce>
	ticks_drift_minus = 0;
   1024e:	4688      	mov	r8, r1
   10250:	e7fb      	b.n	1024a <__kernel_ram_size+0x24a>
	else if (_radio.conn_curr->connect_expire) {
   10252:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   10254:	b185      	cbz	r5, 10278 <__kernel_ram_size+0x278>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10256:	42ae      	cmp	r6, r5
   10258:	d204      	bcs.n	10264 <__kernel_ram_size+0x264>
			_radio.conn_curr->connect_expire -= elapsed_event;
   1025a:	1bad      	subs	r5, r5, r6
   1025c:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   1025e:	463d      	mov	r5, r7
   10260:	46a8      	mov	r8, r5
   10262:	e7b8      	b.n	101d6 <__kernel_ram_size+0x1d6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   10264:	213e      	movs	r1, #62	; 0x3e
   10266:	f7fb fa05 	bl	b674 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1026a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1026e:	f7fb f841 	bl	b2f4 <connection_release>
			_radio.conn_curr = NULL;
   10272:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   10276:	e72b      	b.n	100d0 <__kernel_ram_size+0xd0>
		if (!_radio.conn_curr->supervision_expire) {
   10278:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   1027c:	f1b8 0f00 	cmp.w	r8, #0
   10280:	d1ee      	bne.n	10260 <__kernel_ram_size+0x260>
			_radio.conn_curr->supervision_expire =
   10282:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   10284:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10288:	4645      	mov	r5, r8
   1028a:	e7a4      	b.n	101d6 <__kernel_ram_size+0x1d6>
						_radio.conn_curr->slave.force |=
   1028c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10290:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   10292:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10296:	b123      	cbz	r3, 102a2 <__kernel_ram_size+0x2a2>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   10298:	429e      	cmp	r6, r3
   1029a:	d25a      	bcs.n	10352 <__kernel_ram_size+0x352>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   1029c:	1b9b      	subs	r3, r3, r6
   1029e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   102a2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   102a6:	b123      	cbz	r3, 102b2 <__kernel_ram_size+0x2b2>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   102a8:	429e      	cmp	r6, r3
   102aa:	d254      	bcs.n	10356 <__kernel_ram_size+0x356>
			_radio.conn_curr->apto_expire -= elapsed_event;
   102ac:	1b9b      	subs	r3, r3, r6
   102ae:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   102b2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   102b6:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   102ba:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   102be:	b123      	cbz	r3, 102ca <__kernel_ram_size+0x2ca>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   102c0:	429e      	cmp	r6, r3
   102c2:	d27b      	bcs.n	103bc <__kernel_ram_size+0x3bc>
			_radio.conn_curr->appto_expire -= elapsed_event;
   102c4:	1b9e      	subs	r6, r3, r6
   102c6:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   102ca:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   102ce:	428b      	cmp	r3, r1
   102d0:	d006      	beq.n	102e0 <__kernel_ram_size+0x2e0>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   102d2:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   102d6:	3b01      	subs	r3, #1
   102d8:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   102da:	bf9c      	itt	ls
   102dc:	2300      	movls	r3, #0
   102de:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   102e0:	b917      	cbnz	r7, 102e8 <__kernel_ram_size+0x2e8>
   102e2:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   102e4:	455b      	cmp	r3, fp
   102e6:	d07d      	beq.n	103e4 <__kernel_ram_size+0x3e4>
		lazy = _radio.conn_curr->latency_event + 1;
   102e8:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   102ea:	3301      	adds	r3, #1
   102ec:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   102ee:	b935      	cbnz	r5, 102fe <__kernel_ram_size+0x2fe>
   102f0:	f1b8 0f00 	cmp.w	r8, #0
   102f4:	d103      	bne.n	102fe <__kernel_ram_size+0x2fe>
   102f6:	b913      	cbnz	r3, 102fe <__kernel_ram_size+0x2fe>
	    (lazy != 0) || (force != 0)) {
   102f8:	2f00      	cmp	r7, #0
   102fa:	f43f aee9 	beq.w	100d0 <__kernel_ram_size+0xd0>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   102fe:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   10302:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10304:	3207      	adds	r2, #7
		ticker_status =
   10306:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   10308:	b2d6      	uxtb	r6, r2
		ticker_status =
   1030a:	4a28      	ldr	r2, [pc, #160]	; (103ac <__kernel_ram_size+0x3ac>)
   1030c:	9205      	str	r2, [sp, #20]
   1030e:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   10310:	9606      	str	r6, [sp, #24]
		ticker_status =
   10312:	9704      	str	r7, [sp, #16]
   10314:	9102      	str	r1, [sp, #8]
   10316:	9101      	str	r1, [sp, #4]
   10318:	f8cd 8000 	str.w	r8, [sp]
   1031c:	4632      	mov	r2, r6
   1031e:	4608      	mov	r0, r1
   10320:	f7f7 fe22 	bl	7f68 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10324:	f030 0302 	bics.w	r3, r0, #2
   10328:	f43f aed2 	beq.w	100d0 <__kernel_ram_size+0xd0>
   1032c:	7ca3      	ldrb	r3, [r4, #18]
   1032e:	429e      	cmp	r6, r3
   10330:	f43f aece 	beq.w	100d0 <__kernel_ram_size+0xd0>
   10334:	4b17      	ldr	r3, [pc, #92]	; (10394 <__kernel_ram_size+0x394>)
   10336:	9301      	str	r3, [sp, #4]
   10338:	9300      	str	r3, [sp, #0]
   1033a:	4b17      	ldr	r3, [pc, #92]	; (10398 <__kernel_ram_size+0x398>)
   1033c:	4a17      	ldr	r2, [pc, #92]	; (1039c <__kernel_ram_size+0x39c>)
   1033e:	681c      	ldr	r4, [r3, #0]
   10340:	4917      	ldr	r1, [pc, #92]	; (103a0 <__kernel_ram_size+0x3a0>)
   10342:	4b1b      	ldr	r3, [pc, #108]	; (103b0 <__kernel_ram_size+0x3b0>)
   10344:	481b      	ldr	r0, [pc, #108]	; (103b4 <__kernel_ram_size+0x3b4>)
   10346:	f7fe bf5b 	b.w	f200 <isr+0x778>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   1034a:	2108      	movs	r1, #8
   1034c:	e6e9      	b.n	10122 <__kernel_ram_size+0x122>
				force = 1;
   1034e:	2701      	movs	r7, #1
   10350:	e79f      	b.n	10292 <__kernel_ram_size+0x292>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10352:	2122      	movs	r1, #34	; 0x22
   10354:	e6e5      	b.n	10122 <__kernel_ram_size+0x122>
			_radio.conn_curr->apto_expire = 0;
   10356:	2300      	movs	r3, #0
   10358:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   1035c:	2002      	movs	r0, #2
   1035e:	f7f9 fd73 	bl	9e48 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   10362:	b938      	cbnz	r0, 10374 <__kernel_ram_size+0x374>
   10364:	4b0b      	ldr	r3, [pc, #44]	; (10394 <__kernel_ram_size+0x394>)
   10366:	9301      	str	r3, [sp, #4]
   10368:	9300      	str	r3, [sp, #0]
   1036a:	4b0b      	ldr	r3, [pc, #44]	; (10398 <__kernel_ram_size+0x398>)
   1036c:	681c      	ldr	r4, [r3, #0]
   1036e:	4b10      	ldr	r3, [pc, #64]	; (103b0 <__kernel_ram_size+0x3b0>)
   10370:	f7fe be0c 	b.w	ef8c <isr+0x504>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   10374:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10378:	8c1b      	ldrh	r3, [r3, #32]
   1037a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   1037c:	230a      	movs	r3, #10
   1037e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   10380:	f7fa fbfc 	bl	ab7c <packet_rx_enqueue>
   10384:	e795      	b.n	102b2 <__kernel_ram_size+0x2b2>
   10386:	bf00      	nop
   10388:	1afd498d 	.word	0x1afd498d
   1038c:	00000007 	.word	0x00000007
   10390:	20003d48 	.word	0x20003d48
   10394:	0001563e 	.word	0x0001563e
   10398:	20003a5c 	.word	0x20003a5c
   1039c:	000167b9 	.word	0x000167b9
   103a0:	00016808 	.word	0x00016808
   103a4:	00017f97 	.word	0x00017f97
   103a8:	000189c7 	.word	0x000189c7
   103ac:	0000af11 	.word	0x0000af11
   103b0:	00017ed4 	.word	0x00017ed4
   103b4:	00018583 	.word	0x00018583
   103b8:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->appto_expire = 0;
   103bc:	2300      	movs	r3, #0
   103be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   103c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   103c6:	2b00      	cmp	r3, #0
   103c8:	f47f af7f 	bne.w	102ca <__kernel_ram_size+0x2ca>
   103cc:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   103d0:	428b      	cmp	r3, r1
   103d2:	f47f af7e 	bne.w	102d2 <__kernel_ram_size+0x2d2>
				_radio.conn_curr->llcp_type = LLCP_PING;
   103d6:	2307      	movs	r3, #7
   103d8:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   103dc:	1e4b      	subs	r3, r1, #1
   103de:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   103e2:	e772      	b.n	102ca <__kernel_ram_size+0x2ca>
	lazy = 0;
   103e4:	463b      	mov	r3, r7
   103e6:	e782      	b.n	102ee <__kernel_ram_size+0x2ee>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   103e8:	3b04      	subs	r3, #4
   103ea:	2b01      	cmp	r3, #1
   103ec:	d90a      	bls.n	10404 <__kernel_ram_size+0x404>
   103ee:	4b15      	ldr	r3, [pc, #84]	; (10444 <__kernel_ram_size+0x444>)
   103f0:	9301      	str	r3, [sp, #4]
   103f2:	9300      	str	r3, [sp, #0]
   103f4:	4b14      	ldr	r3, [pc, #80]	; (10448 <__kernel_ram_size+0x448>)
   103f6:	4a15      	ldr	r2, [pc, #84]	; (1044c <__kernel_ram_size+0x44c>)
   103f8:	681c      	ldr	r4, [r3, #0]
   103fa:	4915      	ldr	r1, [pc, #84]	; (10450 <__kernel_ram_size+0x450>)
   103fc:	4b15      	ldr	r3, [pc, #84]	; (10454 <__kernel_ram_size+0x454>)
   103fe:	4816      	ldr	r0, [pc, #88]	; (10458 <__kernel_ram_size+0x458>)
   10400:	f7fe befe 	b.w	f200 <isr+0x778>
		_radio.state = STATE_NONE;
   10404:	2300      	movs	r3, #0
   10406:	7523      	strb	r3, [r4, #20]
   10408:	f7fe bbea 	b.w	ebe0 <isr+0x158>
		LL_ASSERT(0);
   1040c:	4b0d      	ldr	r3, [pc, #52]	; (10444 <__kernel_ram_size+0x444>)
   1040e:	9301      	str	r3, [sp, #4]
   10410:	9300      	str	r3, [sp, #0]
   10412:	4b0d      	ldr	r3, [pc, #52]	; (10448 <__kernel_ram_size+0x448>)
   10414:	681c      	ldr	r4, [r3, #0]
   10416:	4b0f      	ldr	r3, [pc, #60]	; (10454 <__kernel_ram_size+0x454>)
   10418:	f7fe bc31 	b.w	ec7e <isr+0x1f6>
	clock_control_off(_radio.hf_clock, NULL);
   1041c:	6820      	ldr	r0, [r4, #0]
   1041e:	6843      	ldr	r3, [r0, #4]
   10420:	4629      	mov	r1, r5
   10422:	685b      	ldr	r3, [r3, #4]
   10424:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10426:	2201      	movs	r2, #1
   10428:	4611      	mov	r1, r2
   1042a:	4628      	mov	r0, r5
   1042c:	f7f6 ff64 	bl	72f8 <mayfly_enable>
   10430:	f7fe bbd6 	b.w	ebe0 <isr+0x158>
		LL_ASSERT(0);
   10434:	4b03      	ldr	r3, [pc, #12]	; (10444 <__kernel_ram_size+0x444>)
   10436:	9301      	str	r3, [sp, #4]
   10438:	9300      	str	r3, [sp, #0]
   1043a:	4b03      	ldr	r3, [pc, #12]	; (10448 <__kernel_ram_size+0x448>)
   1043c:	681c      	ldr	r4, [r3, #0]
   1043e:	4b07      	ldr	r3, [pc, #28]	; (1045c <__kernel_ram_size+0x45c>)
   10440:	f7fe bc1d 	b.w	ec7e <isr+0x1f6>
   10444:	0001563e 	.word	0x0001563e
   10448:	20003a5c 	.word	0x20003a5c
   1044c:	000167b9 	.word	0x000167b9
   10450:	00016808 	.word	0x00016808
   10454:	00017ee3 	.word	0x00017ee3
   10458:	000185f9 	.word	0x000185f9
   1045c:	00017ef9 	.word	0x00017ef9

00010460 <radio_init>:
{
   10460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   10464:	4e3d      	ldr	r6, [pc, #244]	; (1055c <radio_init+0xfc>)
{
   10466:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10468:	f89d c01c 	ldrb.w	ip, [sp, #28]
   1046c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   10470:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   10474:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   10478:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   1047a:	f44f 70aa 	mov.w	r0, #340	; 0x154
   1047e:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   10482:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   10486:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   1048a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   1048c:	f10c 0401 	add.w	r4, ip, #1
   10490:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   10492:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   10494:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   10498:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   1049c:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   1049e:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   104a0:	bf98      	it	ls
   104a2:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   104a6:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   104aa:	bf88      	it	hi
   104ac:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   104b0:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   104b4:	bf8c      	ite	hi
   104b6:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   104ba:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   104be:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   104c2:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   104c6:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   104ca:	bf8c      	ite	hi
   104cc:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   104d0:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   104d2:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   104d6:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   104da:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   104de:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   104e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   104e6:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   104ea:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   104ee:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   104f2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   104f4:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   104f6:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   104fa:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   104fc:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   10500:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10504:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   10508:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1050a:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   1050e:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   10512:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10516:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   1051a:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1051e:	340a      	adds	r4, #10
   10520:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   10524:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10526:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   10528:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1052c:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   10530:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   10532:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   10536:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1053a:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   1053e:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   10542:	d003      	beq.n	1054c <radio_init+0xec>
		return (retcode + mem_size);
   10544:	442c      	add	r4, r5
}
   10546:	4620      	mov	r0, r4
   10548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   1054c:	2301      	movs	r3, #1
   1054e:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   10552:	f7f9 fd3d 	bl	9fd0 <common_init>
	radio_setup();
   10556:	f002 f8ff 	bl	12758 <radio_setup>
	return retcode;
   1055a:	e7f4      	b.n	10546 <radio_init+0xe6>
   1055c:	200008c0 	.word	0x200008c0

00010560 <ll_reset>:
{
   10560:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   10562:	2103      	movs	r1, #3
   10564:	2005      	movs	r0, #5
   10566:	f7f9 fe21 	bl	a1ac <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1056a:	2104      	movs	r1, #4
   1056c:	2006      	movs	r0, #6
   1056e:	f7f9 fe1d 	bl	a1ac <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   10572:	4c22      	ldr	r4, [pc, #136]	; (105fc <ll_reset+0x9c>)
   10574:	2500      	movs	r5, #0
   10576:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1057a:	b2ab      	uxth	r3, r5
   1057c:	429a      	cmp	r2, r3
   1057e:	f105 0501 	add.w	r5, r5, #1
   10582:	d834      	bhi.n	105ee <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   10584:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10588:	f36f 13c7 	bfc	r3, #7, #1
   1058c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   10590:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   10594:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   10596:	f360 0300 	bfi	r3, r0, #0, #1
   1059a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1059e:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   105a0:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   105a4:	fbb3 f3f2 	udiv	r3, r3, r2
   105a8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   105ac:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   105b0:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   105b4:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   105b6:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   105ba:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   105be:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   105c2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   105c6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   105ca:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   105ce:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   105d2:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   105d6:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   105da:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   105de:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   105e2:	f001 ff37 	bl	12454 <ll_filter_reset>
}
   105e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   105ea:	f7f9 bcf1 	b.w	9fd0 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   105ee:	1da8      	adds	r0, r5, #6
   105f0:	21ff      	movs	r1, #255	; 0xff
   105f2:	b2c0      	uxtb	r0, r0
   105f4:	f7f9 fdda 	bl	a1ac <role_disable>
   105f8:	e7bd      	b.n	10576 <ll_reset+0x16>
   105fa:	bf00      	nop
   105fc:	200008c0 	.word	0x200008c0

00010600 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   10600:	4b02      	ldr	r3, [pc, #8]	; (1060c <ll_adv_is_enabled+0xc>)
   10602:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   10606:	09c0      	lsrs	r0, r0, #7
   10608:	4770      	bx	lr
   1060a:	bf00      	nop
   1060c:	200008c0 	.word	0x200008c0

00010610 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   10610:	4b04      	ldr	r3, [pc, #16]	; (10624 <radio_adv_filter_pol_get+0x14>)
   10612:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   10616:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   10618:	bfba      	itte	lt
   1061a:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   1061e:	0980      	lsrlt	r0, r0, #6
   10620:	2000      	movge	r0, #0
}
   10622:	4770      	bx	lr
   10624:	200008c0 	.word	0x200008c0

00010628 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10628:	4a09      	ldr	r2, [pc, #36]	; (10650 <ll_scan_is_enabled+0x28>)
   1062a:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   1062e:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10632:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10636:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1063a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1063c:	f003 0301 	and.w	r3, r3, #1
   10640:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   10644:	bf14      	ite	ne
   10646:	2004      	movne	r0, #4
   10648:	2000      	moveq	r0, #0
}
   1064a:	4318      	orrs	r0, r3
   1064c:	4770      	bx	lr
   1064e:	bf00      	nop
   10650:	200008c0 	.word	0x200008c0

00010654 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   10654:	4b05      	ldr	r3, [pc, #20]	; (1066c <radio_scan_filter_pol_get+0x18>)
   10656:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1065a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   1065e:	bf1c      	itt	ne
   10660:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   10664:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   10668:	4770      	bx	lr
   1066a:	bf00      	nop
   1066c:	200008c0 	.word	0x200008c0

00010670 <radio_connect_enable>:
{
   10670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   10674:	f8df 8388 	ldr.w	r8, [pc, #904]	; 10a00 <radio_connect_enable+0x390>
{
   10678:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   1067a:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   1067e:	9303      	str	r3, [sp, #12]
   10680:	4683      	mov	fp, r0
   10682:	468a      	mov	sl, r1
   10684:	4691      	mov	r9, r2
   10686:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   10688:	2e00      	cmp	r6, #0
   1068a:	f040 819d 	bne.w	109c8 <radio_connect_enable+0x358>
	link = mem_acquire(&_radio.link_rx_free);
   1068e:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   10692:	f7f6 fd8e 	bl	71b2 <mem_acquire>
	if (!link) {
   10696:	4607      	mov	r7, r0
   10698:	b150      	cbz	r0, 106b0 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   1069a:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   1069e:	f7f6 fd88 	bl	71b2 <mem_acquire>
	if (!conn) {
   106a2:	4604      	mov	r4, r0
   106a4:	b930      	cbnz	r0, 106b4 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   106a6:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   106aa:	4638      	mov	r0, r7
   106ac:	f7f6 fd9b 	bl	71e6 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   106b0:	2007      	movs	r0, #7
   106b2:	e15c      	b.n	1096e <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   106b4:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   106b8:	f36b 1386 	bfi	r3, fp, #6, #1
   106bc:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   106c0:	2206      	movs	r2, #6
   106c2:	4651      	mov	r1, sl
   106c4:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   106c8:	f7f1 fbac 	bl	1e24 <memcpy>
	_radio.scanner.conn_latency = latency;
   106cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   106d0:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   106d4:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   106d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   106da:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   106de:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   106e0:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   106e4:	f002 f8f4 	bl	128d0 <radio_tx_ready_delay_get>
   106e8:	49bb      	ldr	r1, [pc, #748]	; (109d8 <radio_connect_enable+0x368>)
   106ea:	f200 4052 	addw	r0, r0, #1106	; 0x452
   106ee:	a3b8      	add	r3, pc, #736	; (adr r3, 109d0 <radio_connect_enable+0x360>)
   106f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   106f4:	fba0 0101 	umull	r0, r1, r0, r1
   106f8:	f7ef fd8c 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   106fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10700:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10704:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   10708:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1070a:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 10a04 <radio_connect_enable+0x394>
	conn->llcp_features = RADIO_BLE_FEAT;
   1070e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   10712:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   10716:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   10718:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   1071c:	2104      	movs	r1, #4
   1071e:	a805      	add	r0, sp, #20
   10720:	f7f7 fd80 	bl	8224 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   10724:	f8dd c014 	ldr.w	ip, [sp, #20]
   10728:	2000      	movs	r0, #0
   1072a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   1072e:	231f      	movs	r3, #31
	transitions = 0;
   10730:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   10732:	2101      	movs	r1, #1
	while (bit_idx--) {
   10734:	3b01      	subs	r3, #1
   10736:	b2db      	uxtb	r3, r3
   10738:	2bff      	cmp	r3, #255	; 0xff
   1073a:	d103      	bne.n	10744 <radio_connect_enable+0xd4>
   1073c:	b3d0      	cbz	r0, 107b4 <radio_connect_enable+0x144>
   1073e:	f8cd c014 	str.w	ip, [sp, #20]
   10742:	e037      	b.n	107b4 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   10744:	fa2c fe03 	lsr.w	lr, ip, r3
   10748:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   1074c:	45d6      	cmp	lr, sl
   1074e:	d11a      	bne.n	10786 <radio_connect_enable+0x116>
			consecutive_cnt++;
   10750:	3101      	adds	r1, #1
   10752:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   10754:	2906      	cmp	r1, #6
   10756:	d807      	bhi.n	10768 <radio_connect_enable+0xf8>
   10758:	2b1b      	cmp	r3, #27
   1075a:	d81a      	bhi.n	10792 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   1075c:	b122      	cbz	r2, 10768 <radio_connect_enable+0xf8>
   1075e:	2b1b      	cmp	r3, #27
   10760:	d017      	beq.n	10792 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   10762:	2a01      	cmp	r2, #1
   10764:	d815      	bhi.n	10792 <radio_connect_enable+0x122>
   10766:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   10768:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   1076c:	f1be 0f00 	cmp.w	lr, #0
   10770:	f000 8100 	beq.w	10974 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   10774:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   10778:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   1077c:	3201      	adds	r2, #1
   1077e:	2001      	movs	r0, #1
   10780:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   10782:	4601      	mov	r1, r0
   10784:	e005      	b.n	10792 <radio_connect_enable+0x122>
			transitions++;
   10786:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   10788:	2b1b      	cmp	r3, #27
			transitions++;
   1078a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1078c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   10790:	d9e5      	bls.n	1075e <radio_connect_enable+0xee>
		if (transitions > 24) {
   10792:	2a18      	cmp	r2, #24
   10794:	f240 80f6 	bls.w	10984 <radio_connect_enable+0x314>
   10798:	b108      	cbz	r0, 1079e <radio_connect_enable+0x12e>
   1079a:	f8cd c014 	str.w	ip, [sp, #20]
   1079e:	3301      	adds	r3, #1
   107a0:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   107a2:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   107a6:	f1be 0f00 	cmp.w	lr, #0
   107aa:	f000 80e8 	beq.w	1097e <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   107ae:	425b      	negs	r3, r3
   107b0:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   107b2:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   107b4:	9b05      	ldr	r3, [sp, #20]
   107b6:	a806      	add	r0, sp, #24
   107b8:	ea83 0308 	eor.w	r3, r3, r8
   107bc:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   107c0:	2104      	movs	r1, #4
   107c2:	f7f6 fea1 	bl	7508 <util_ones_count_get>
   107c6:	2801      	cmp	r0, #1
   107c8:	f240 80e3 	bls.w	10992 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   107cc:	9b05      	ldr	r3, [sp, #20]
   107ce:	b29a      	uxth	r2, r3
   107d0:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   107d4:	f000 80d8 	beq.w	10988 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   107d8:	2204      	movs	r2, #4
   107da:	a905      	add	r1, sp, #20
   107dc:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   107e0:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   107e2:	f7f1 fb1f 	bl	1e24 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   107e6:	2103      	movs	r1, #3
   107e8:	f104 0014 	add.w	r0, r4, #20
   107ec:	f7f7 fd1a 	bl	8224 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   107f0:	2205      	movs	r2, #5
   107f2:	497a      	ldr	r1, [pc, #488]	; (109dc <radio_connect_enable+0x36c>)
   107f4:	f104 0017 	add.w	r0, r4, #23
   107f8:	f7f1 fb14 	bl	1e24 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   107fc:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10800:	7f63      	ldrb	r3, [r4, #29]
   10802:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   10806:	f36f 1386 	bfc	r3, #6, #1
   1080a:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   1080c:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   1080e:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10810:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   10812:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   10814:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10818:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   1081c:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10820:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10822:	211b      	movs	r1, #27
   10824:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10826:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10828:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   1082c:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1082e:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   10832:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10836:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10838:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   1083a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   1083e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10840:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   10844:	2601      	movs	r6, #1
   10846:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   1084a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   1084e:	f363 11c7 	bfi	r1, r3, #7, #1
   10852:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   10856:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   1085a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   1085e:	f366 0102 	bfi	r1, r6, #0, #3
   10862:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   10866:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   1086a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   1086c:	b2c9      	uxtb	r1, r1
   1086e:	f36c 01c5 	bfi	r1, ip, #3, #3
   10872:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   10876:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   1087a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   1087c:	f366 0102 	bfi	r1, r6, #0, #3
   10880:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   10884:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   10886:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   10888:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   1088c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   1088e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   10890:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   10894:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   10898:	f363 0100 	bfi	r1, r3, #0, #1
   1089c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   108a0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   108a4:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   108a8:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   108ac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   108b0:	1e56      	subs	r6, r2, #1
   108b2:	f242 7e10 	movw	lr, #10000	; 0x2710
   108b6:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   108ba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   108be:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   108c2:	4b47      	ldr	r3, [pc, #284]	; (109e0 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   108c4:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   108c6:	4947      	ldr	r1, [pc, #284]	; (109e4 <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   108c8:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   108ca:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   108cc:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   108d0:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   108d4:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   108d6:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   108da:	1d81      	adds	r1, r0, #6
   108dc:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   108de:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   108e2:	dc6b      	bgt.n	109bc <radio_connect_enable+0x34c>
	conn->llcp_version.tx = 0;
   108e4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   108e8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   108ec:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   108ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   108f2:	f360 0341 	bfi	r3, r0, #1, #1
   108f6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   108fa:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   108fe:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   10902:	f360 1304 	bfi	r3, r0, #4, #1
   10906:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   1090a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   1090e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   10912:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10916:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   1091a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   1091e:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   10922:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   10926:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   1092a:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1092e:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   10932:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   10936:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   1093a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   1093e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   10942:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   10946:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   1094a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   1094e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   10952:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   10956:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1095a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   1095e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   10962:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   10966:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   1096a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   1096e:	b007      	add	sp, #28
   10970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   10974:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10978:	f04f 0e01 	mov.w	lr, #1
   1097c:	e6fe      	b.n	1077c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1097e:	3b01      	subs	r3, #1
   10980:	4313      	orrs	r3, r2
   10982:	e716      	b.n	107b2 <radio_connect_enable+0x142>
		if (transitions > 24) {
   10984:	46f2      	mov	sl, lr
   10986:	e6d5      	b.n	10734 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   10988:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1098a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   1098e:	f47f af23 	bne.w	107d8 <radio_connect_enable+0x168>
   10992:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   10994:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   10998:	f47f aec0 	bne.w	1071c <radio_connect_enable+0xac>
   1099c:	4b12      	ldr	r3, [pc, #72]	; (109e8 <radio_connect_enable+0x378>)
   1099e:	9301      	str	r3, [sp, #4]
   109a0:	9300      	str	r3, [sp, #0]
   109a2:	4b12      	ldr	r3, [pc, #72]	; (109ec <radio_connect_enable+0x37c>)
   109a4:	4a12      	ldr	r2, [pc, #72]	; (109f0 <radio_connect_enable+0x380>)
   109a6:	681c      	ldr	r4, [r3, #0]
   109a8:	4912      	ldr	r1, [pc, #72]	; (109f4 <radio_connect_enable+0x384>)
   109aa:	4b13      	ldr	r3, [pc, #76]	; (109f8 <radio_connect_enable+0x388>)
   109ac:	4813      	ldr	r0, [pc, #76]	; (109fc <radio_connect_enable+0x38c>)
   109ae:	47a0      	blx	r4
   109b0:	4040      	eors	r0, r0
   109b2:	f380 8811 	msr	BASEPRI, r0
   109b6:	f04f 0004 	mov.w	r0, #4
   109ba:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   109bc:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   109c0:	33fa      	adds	r3, #250	; 0xfa
   109c2:	441a      	add	r2, r3
   109c4:	b292      	uxth	r2, r2
   109c6:	e78d      	b.n	108e4 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   109c8:	200c      	movs	r0, #12
   109ca:	e7d0      	b.n	1096e <radio_connect_enable+0x2fe>
   109cc:	f3af 8000 	nop.w
   109d0:	1afd498d 	.word	0x1afd498d
   109d4:	00000007 	.word	0x00000007
   109d8:	3b9aca00 	.word	0x3b9aca00
   109dc:	200009da 	.word	0x200009da
   109e0:	01c9c37f 	.word	0x01c9c37f
   109e4:	026259ff 	.word	0x026259ff
   109e8:	0001563e 	.word	0x0001563e
   109ec:	20003a5c 	.word	0x20003a5c
   109f0:	000167b9 	.word	0x000167b9
   109f4:	00016808 	.word	0x00016808
   109f8:	00018083 	.word	0x00018083
   109fc:	00018adc 	.word	0x00018adc
   10a00:	200008c0 	.word	0x200008c0
   10a04:	8e89bed6 	.word	0x8e89bed6

00010a08 <ll_conn_update>:
{
   10a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a0c:	460c      	mov	r4, r1
   10a0e:	4690      	mov	r8, r2
   10a10:	461d      	mov	r5, r3
   10a12:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   10a16:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   10a1a:	f7f9 fbb1 	bl	a180 <connection_get>
	if (!conn) {
   10a1e:	b330      	cbz	r0, 10a6e <ll_conn_update+0x66>
	if (!cmd) {
   10a20:	2c00      	cmp	r4, #0
   10a22:	d14a      	bne.n	10aba <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   10a24:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10a28:	06d9      	lsls	r1, r3, #27
   10a2a:	d407      	bmi.n	10a3c <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10a2c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   10a30:	069a      	lsls	r2, r3, #26
   10a32:	d541      	bpl.n	10ab8 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   10a34:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   10a38:	079b      	lsls	r3, r3, #30
   10a3a:	d43d      	bmi.n	10ab8 <ll_conn_update+0xb0>
		} else if (conn->role) {
   10a3c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10a40:	2b00      	cmp	r3, #0
   10a42:	da17      	bge.n	10a74 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10a44:	201a      	movs	r0, #26
   10a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   10a4a:	428b      	cmp	r3, r1
   10a4c:	d00f      	beq.n	10a6e <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   10a4e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   10a52:	f003 0207 	and.w	r2, r3, #7
   10a56:	2a03      	cmp	r2, #3
   10a58:	d109      	bne.n	10a6e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10a5a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10a5e:	b2db      	uxtb	r3, r3
   10a60:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10a64:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   10a68:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10a6c:	e021      	b.n	10ab2 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10a6e:	200c      	movs	r0, #12
   10a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   10a74:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10a78:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10a7c:	429a      	cmp	r2, r3
   10a7e:	d1f6      	bne.n	10a6e <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10a80:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   10a84:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   10a88:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   10a8a:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10a8c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   10a90:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   10a94:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   10a96:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10a9a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   10a9e:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   10aa2:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   10aa6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   10aaa:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   10aae:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   10ab2:	2000      	movs	r0, #0
   10ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   10ab8:	2401      	movs	r4, #1
		cmd--;
   10aba:	3c01      	subs	r4, #1
		if (cmd) {
   10abc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10ac0:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   10ac4:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   10ac8:	d1bf      	bne.n	10a4a <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   10aca:	4299      	cmp	r1, r3
   10acc:	d1cf      	bne.n	10a6e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10ace:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   10ad2:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   10ad6:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10ada:	b2db      	uxtb	r3, r3
   10adc:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   10ae0:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   10ae2:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   10ae6:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   10aea:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   10aee:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   10af2:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   10af6:	e7dc      	b.n	10ab2 <ll_conn_update+0xaa>

00010af8 <ll_chm_update>:
{
   10af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10afc:	4c1e      	ldr	r4, [pc, #120]	; (10b78 <ll_chm_update+0x80>)
   10afe:	4601      	mov	r1, r0
   10b00:	2205      	movs	r2, #5
{
   10b02:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   10b04:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10b08:	f7f1 f98c 	bl	1e24 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   10b0c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10b10:	2105      	movs	r1, #5
   10b12:	f7f6 fcf9 	bl	7508 <util_ones_count_get>
	_radio.data_chan_count =
   10b16:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   10b1a:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   10b1e:	3c01      	subs	r4, #1
   10b20:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   10b22:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10b24:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   10b28:	2cff      	cmp	r4, #255	; 0xff
   10b2a:	d102      	bne.n	10b32 <ll_chm_update+0x3a>
	return 0;
   10b2c:	2000      	movs	r0, #0
   10b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   10b32:	4620      	mov	r0, r4
   10b34:	f7f9 fb24 	bl	a180 <connection_get>
		if (!conn || conn->role) {
   10b38:	4606      	mov	r6, r0
   10b3a:	b1b8      	cbz	r0, 10b6c <ll_chm_update+0x74>
   10b3c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10b40:	2b00      	cmp	r3, #0
   10b42:	db13      	blt.n	10b6c <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   10b44:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10b48:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10b4c:	429a      	cmp	r2, r3
   10b4e:	d110      	bne.n	10b72 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   10b50:	2205      	movs	r2, #5
   10b52:	4629      	mov	r1, r5
   10b54:	3079      	adds	r0, #121	; 0x79
   10b56:	f7f1 f965 	bl	1e24 <memcpy>
		conn->llcp_req++;
   10b5a:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   10b5e:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   10b62:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10b64:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   10b68:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   10b6c:	3c01      	subs	r4, #1
   10b6e:	b2e4      	uxtb	r4, r4
   10b70:	e7da      	b.n	10b28 <ll_chm_update+0x30>
			return 1;
   10b72:	2001      	movs	r0, #1
}
   10b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b78:	200008c0 	.word	0x200008c0

00010b7c <ll_chm_get>:
{
   10b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b7e:	460d      	mov	r5, r1
	conn = connection_get(handle);
   10b80:	f7f9 fafe 	bl	a180 <connection_get>
	if (!conn) {
   10b84:	4604      	mov	r4, r0
   10b86:	b160      	cbz	r0, 10ba2 <ll_chm_get+0x26>
		conn->chm_update = 0;
   10b88:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10b8a:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   10b8e:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10b90:	2205      	movs	r2, #5
   10b92:	4631      	mov	r1, r6
   10b94:	4628      	mov	r0, r5
   10b96:	f7f1 f945 	bl	1e24 <memcpy>
	} while (conn->chm_update);
   10b9a:	7f20      	ldrb	r0, [r4, #28]
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d1f6      	bne.n	10b8e <ll_chm_get+0x12>
   10ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   10ba2:	2001      	movs	r0, #1
}
   10ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010ba6 <ll_feature_req_send>:
{
   10ba6:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10ba8:	f7f9 faea 	bl	a180 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10bac:	b168      	cbz	r0, 10bca <ll_feature_req_send+0x24>
   10bae:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10bb2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10bb6:	4293      	cmp	r3, r2
   10bb8:	d107      	bne.n	10bca <ll_feature_req_send+0x24>
	conn->llcp_req++;
   10bba:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10bbc:	2204      	movs	r2, #4
	conn->llcp_req++;
   10bbe:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10bc2:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10bc6:	2000      	movs	r0, #0
   10bc8:	bd08      	pop	{r3, pc}
		return 1;
   10bca:	2001      	movs	r0, #1
}
   10bcc:	bd08      	pop	{r3, pc}

00010bce <ll_version_ind_send>:
{
   10bce:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10bd0:	f7f9 fad6 	bl	a180 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10bd4:	b168      	cbz	r0, 10bf2 <ll_version_ind_send+0x24>
   10bd6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10bda:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10bde:	4293      	cmp	r3, r2
   10be0:	d107      	bne.n	10bf2 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   10be2:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10be4:	2205      	movs	r2, #5
	conn->llcp_req++;
   10be6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10bea:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10bee:	2000      	movs	r0, #0
   10bf0:	bd08      	pop	{r3, pc}
		return 1;
   10bf2:	2001      	movs	r0, #1
}
   10bf4:	bd08      	pop	{r3, pc}

00010bf6 <ll_terminate_ind_send>:
{
   10bf6:	b510      	push	{r4, lr}
   10bf8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10bfa:	f7f9 fac1 	bl	a180 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   10bfe:	b160      	cbz	r0, 10c1a <ll_terminate_ind_send+0x24>
   10c00:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   10c04:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   10c08:	4293      	cmp	r3, r2
   10c0a:	d106      	bne.n	10c1a <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   10c0c:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   10c0e:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   10c12:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   10c16:	2000      	movs	r0, #0
   10c18:	bd10      	pop	{r4, pc}
		return 1;
   10c1a:	2001      	movs	r0, #1
}
   10c1c:	bd10      	pop	{r4, pc}

00010c1e <ll_tx_pwr_lvl_get>:
{
   10c1e:	b510      	push	{r4, lr}
   10c20:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10c22:	f7f9 faad 	bl	a180 <connection_get>
	if (!conn) {
   10c26:	b110      	cbz	r0, 10c2e <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   10c28:	2000      	movs	r0, #0
   10c2a:	7020      	strb	r0, [r4, #0]
	return 0;
   10c2c:	bd10      	pop	{r4, pc}
		return 1;
   10c2e:	2001      	movs	r0, #1
}
   10c30:	bd10      	pop	{r4, pc}

00010c32 <ll_apto_get>:
{
   10c32:	b510      	push	{r4, lr}
   10c34:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10c36:	f7f9 faa3 	bl	a180 <connection_get>
	if (!conn) {
   10c3a:	b160      	cbz	r0, 10c56 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10c3c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   10c3e:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   10c42:	435a      	muls	r2, r3
   10c44:	237d      	movs	r3, #125	; 0x7d
   10c46:	4353      	muls	r3, r2
	return 0;
   10c48:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c4e:	fb93 f3f2 	sdiv	r3, r3, r2
   10c52:	8023      	strh	r3, [r4, #0]
	return 0;
   10c54:	bd10      	pop	{r4, pc}
		return 1;
   10c56:	2001      	movs	r0, #1
}
   10c58:	bd10      	pop	{r4, pc}

00010c5a <ll_apto_set>:
{
   10c5a:	b510      	push	{r4, lr}
   10c5c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10c5e:	f7f9 fa8f 	bl	a180 <connection_get>
	if (!conn) {
   10c62:	b170      	cbz	r0, 10c82 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   10c64:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   10c66:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10c6a:	4353      	muls	r3, r2
   10c6c:	f242 7110 	movw	r1, #10000	; 0x2710
   10c70:	fb01 3404 	mla	r4, r1, r4, r3
   10c74:	3c01      	subs	r4, #1
   10c76:	fb94 f4f3 	sdiv	r4, r4, r3
   10c7a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   10c7e:	2000      	movs	r0, #0
   10c80:	bd10      	pop	{r4, pc}
		return 1;
   10c82:	2001      	movs	r0, #1
}
   10c84:	bd10      	pop	{r4, pc}

00010c86 <ll_length_req_send>:
{
   10c86:	b570      	push	{r4, r5, r6, lr}
   10c88:	460e      	mov	r6, r1
   10c8a:	4615      	mov	r5, r2
	conn = connection_get(handle);
   10c8c:	f7f9 fa78 	bl	a180 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10c90:	b1d0      	cbz	r0, 10cc8 <ll_length_req_send+0x42>
   10c92:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10c96:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10c9a:	429a      	cmp	r2, r3
   10c9c:	d114      	bne.n	10cc8 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   10c9e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10ca2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   10ca6:	4293      	cmp	r3, r2
   10ca8:	d10e      	bne.n	10cc8 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10caa:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   10cae:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   10cb2:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10cb4:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   10cb8:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10cbc:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   10cc0:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   10cc4:	2000      	movs	r0, #0
   10cc6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   10cc8:	2001      	movs	r0, #1
}
   10cca:	bd70      	pop	{r4, r5, r6, pc}

00010ccc <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   10ccc:	4b03      	ldr	r3, [pc, #12]	; (10cdc <ll_length_default_get+0x10>)
   10cce:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   10cd2:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   10cd4:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   10cd8:	800b      	strh	r3, [r1, #0]
   10cda:	4770      	bx	lr
   10cdc:	200008c0 	.word	0x200008c0

00010ce0 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   10ce0:	4b03      	ldr	r3, [pc, #12]	; (10cf0 <ll_length_default_set+0x10>)
   10ce2:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   10ce6:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   10cea:	2000      	movs	r0, #0
   10cec:	4770      	bx	lr
   10cee:	bf00      	nop
   10cf0:	200008c0 	.word	0x200008c0

00010cf4 <ll_length_max_get>:
{
   10cf4:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10cf6:	241b      	movs	r4, #27
   10cf8:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10cfa:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10cfe:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10d00:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10d02:	8018      	strh	r0, [r3, #0]
   10d04:	bd10      	pop	{r4, pc}

00010d06 <ll_phy_get>:
{
   10d06:	b538      	push	{r3, r4, r5, lr}
   10d08:	460d      	mov	r5, r1
   10d0a:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10d0c:	f7f9 fa38 	bl	a180 <connection_get>
	if (!conn) {
   10d10:	b158      	cbz	r0, 10d2a <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   10d12:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   10d16:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10d1a:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10d1c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   10d20:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10d24:	7023      	strb	r3, [r4, #0]
	return 0;
   10d26:	2000      	movs	r0, #0
   10d28:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   10d2a:	2001      	movs	r0, #1
}
   10d2c:	bd38      	pop	{r3, r4, r5, pc}
	...

00010d30 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   10d30:	4b03      	ldr	r3, [pc, #12]	; (10d40 <ll_phy_default_set+0x10>)
   10d32:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   10d36:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   10d3a:	2000      	movs	r0, #0
   10d3c:	4770      	bx	lr
   10d3e:	bf00      	nop
   10d40:	200008c0 	.word	0x200008c0

00010d44 <ll_phy_req_send>:
{
   10d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d48:	4689      	mov	r9, r1
   10d4a:	4690      	mov	r8, r2
   10d4c:	461f      	mov	r7, r3
	conn = connection_get(handle);
   10d4e:	f7f9 fa17 	bl	a180 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10d52:	b320      	cbz	r0, 10d9e <ll_phy_req_send+0x5a>
   10d54:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10d58:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10d5c:	429a      	cmp	r2, r3
   10d5e:	d11e      	bne.n	10d9e <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   10d60:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10d64:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   10d68:	429d      	cmp	r5, r3
   10d6a:	d118      	bne.n	10d9e <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10d6c:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   10d70:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   10d74:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   10d78:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   10d7c:	f046 0102 	orr.w	r1, r6, #2
   10d80:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   10d84:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   10d86:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   10d88:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   10d8c:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   10d90:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   10d94:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   10d98:	2000      	movs	r0, #0
   10d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   10d9e:	2001      	movs	r0, #1
}
   10da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010da4 <ll_rx_get>:
{
   10da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10da8:	4605      	mov	r5, r0
   10daa:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   10dac:	4918      	ldr	r1, [pc, #96]	; (10e10 <ll_rx_get+0x6c>)
   10dae:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   10db2:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   10db6:	4293      	cmp	r3, r2
   10db8:	460f      	mov	r7, r1
   10dba:	d01f      	beq.n	10dfc <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   10dbc:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10dc0:	f201 1177 	addw	r1, r1, #375	; 0x177
   10dc4:	f898 2000 	ldrb.w	r2, [r8]
   10dc8:	f7f9 f990 	bl	a0ec <tx_cmplt_get>
		if (!cmplt) {
   10dcc:	4604      	mov	r4, r0
   10dce:	b9e0      	cbnz	r0, 10e0a <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   10dd0:	ae02      	add	r6, sp, #8
   10dd2:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   10dd6:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   10dda:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   10dde:	4631      	mov	r1, r6
   10de0:	f10d 0006 	add.w	r0, sp, #6
   10de4:	f7f9 f982 	bl	a0ec <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   10de8:	b934      	cbnz	r4, 10df8 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   10dea:	b928      	cbnz	r0, 10df8 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   10dec:	f8c5 8000 	str.w	r8, [r5]
}
   10df0:	4620      	mov	r0, r4
   10df2:	b002      	add	sp, #8
   10df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   10df8:	4604      	mov	r4, r0
   10dfa:	e7ee      	b.n	10dda <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10dfc:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   10e00:	f201 1177 	addw	r1, r1, #375	; 0x177
   10e04:	f7f9 f972 	bl	a0ec <tx_cmplt_get>
   10e08:	4604      	mov	r4, r0
		*node_rx = NULL;
   10e0a:	2300      	movs	r3, #0
   10e0c:	602b      	str	r3, [r5, #0]
   10e0e:	e7ef      	b.n	10df0 <ll_rx_get+0x4c>
   10e10:	200008c0 	.word	0x200008c0

00010e14 <ll_rx_mem_release>:
{
   10e14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   10e18:	4c1c      	ldr	r4, [pc, #112]	; (10e8c <ll_rx_mem_release+0x78>)
{
   10e1a:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10e1c:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10e1e:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   10e22:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   10e26:	b930      	cbnz	r0, 10e36 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   10e28:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   10e2a:	20ff      	movs	r0, #255	; 0xff
}
   10e2c:	b002      	add	sp, #8
   10e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   10e32:	f7f9 b881 	b.w	9f38 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   10e36:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   10e38:	f8d0 8000 	ldr.w	r8, [r0]
   10e3c:	2a0c      	cmp	r2, #12
   10e3e:	d807      	bhi.n	10e50 <ll_rx_mem_release+0x3c>
   10e40:	2301      	movs	r3, #1
   10e42:	4093      	lsls	r3, r2
   10e44:	f641 727e 	movw	r2, #8062	; 0x1f7e
   10e48:	4213      	tst	r3, r2
   10e4a:	d111      	bne.n	10e70 <ll_rx_mem_release+0x5c>
   10e4c:	061b      	lsls	r3, r3, #24
   10e4e:	d414      	bmi.n	10e7a <ll_rx_mem_release+0x66>
			LL_ASSERT(0);
   10e50:	4b0f      	ldr	r3, [pc, #60]	; (10e90 <ll_rx_mem_release+0x7c>)
   10e52:	9301      	str	r3, [sp, #4]
   10e54:	9300      	str	r3, [sp, #0]
   10e56:	4b0f      	ldr	r3, [pc, #60]	; (10e94 <ll_rx_mem_release+0x80>)
   10e58:	4a0f      	ldr	r2, [pc, #60]	; (10e98 <ll_rx_mem_release+0x84>)
   10e5a:	681c      	ldr	r4, [r3, #0]
   10e5c:	490f      	ldr	r1, [pc, #60]	; (10e9c <ll_rx_mem_release+0x88>)
   10e5e:	4b10      	ldr	r3, [pc, #64]	; (10ea0 <ll_rx_mem_release+0x8c>)
   10e60:	4810      	ldr	r0, [pc, #64]	; (10ea4 <ll_rx_mem_release+0x90>)
   10e62:	47a0      	blx	r4
   10e64:	4040      	eors	r0, r0
   10e66:	f380 8811 	msr	BASEPRI, r0
   10e6a:	f04f 0004 	mov.w	r0, #4
   10e6e:	df02      	svc	2
			mem_release(_node_rx_free,
   10e70:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   10e72:	f7f6 f9b8 	bl	71e6 <mem_release>
{
   10e76:	4640      	mov	r0, r8
   10e78:	e7d5      	b.n	10e26 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10e7a:	88c2      	ldrh	r2, [r0, #6]
   10e7c:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   10e80:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10e84:	f7f6 f9ca 	bl	721c <mem_get>
			mem_release(conn, &_radio.conn_free);
   10e88:	4639      	mov	r1, r7
   10e8a:	e7f2      	b.n	10e72 <ll_rx_mem_release+0x5e>
   10e8c:	200009f0 	.word	0x200009f0
   10e90:	0001563e 	.word	0x0001563e
   10e94:	20003a5c 	.word	0x20003a5c
   10e98:	000167b9 	.word	0x000167b9
   10e9c:	00016808 	.word	0x00016808
   10ea0:	00018227 	.word	0x00018227
   10ea4:	00016758 	.word	0x00016758

00010ea8 <do_radio_rx_fc_set>:
	if (req == ack) {
   10ea8:	4291      	cmp	r1, r2
{
   10eaa:	b510      	push	{r4, lr}
   10eac:	4b14      	ldr	r3, [pc, #80]	; (10f00 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   10eae:	d119      	bne.n	10ee4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   10eb0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   10eb4:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   10eb8:	4294      	cmp	r4, r2
   10eba:	d111      	bne.n	10ee0 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   10ebc:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   10ebe:	bf14      	ite	ne
   10ec0:	460a      	movne	r2, r1
   10ec2:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   10ec4:	3a01      	subs	r2, #1
   10ec6:	b2d2      	uxtb	r2, r2
   10ec8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   10ecc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   10ed0:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   10ed4:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   10ed8:	4291      	cmp	r1, r2
   10eda:	d00f      	beq.n	10efc <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   10edc:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   10ee0:	2001      	movs	r0, #1
   10ee2:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   10ee4:	b929      	cbnz	r1, 10ef2 <do_radio_rx_fc_set+0x4a>
   10ee6:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   10eea:	1a18      	subs	r0, r3, r0
   10eec:	bf18      	it	ne
   10eee:	2001      	movne	r0, #1
   10ef0:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   10ef2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   10ef6:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   10efa:	e7f6      	b.n	10eea <do_radio_rx_fc_set+0x42>
	return 0;
   10efc:	2000      	movs	r0, #0
}
   10efe:	bd10      	pop	{r4, pc}
   10f00:	200008c0 	.word	0x200008c0

00010f04 <radio_rx_fc_set>:
{
   10f04:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   10f06:	4b14      	ldr	r3, [pc, #80]	; (10f58 <radio_rx_fc_set+0x54>)
   10f08:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   10f0c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   10f0e:	b302      	cbz	r2, 10f52 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   10f10:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   10f14:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   10f16:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   10f1a:	b135      	cbz	r5, 10f2a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   10f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10f20:	4298      	cmp	r0, r3
   10f22:	d016      	beq.n	10f52 <radio_rx_fc_set+0x4e>
}
   10f24:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   10f26:	f7ff bfbf 	b.w	10ea8 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10f2a:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   10f2e:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   10f32:	42a0      	cmp	r0, r4
   10f34:	d10d      	bne.n	10f52 <radio_rx_fc_set+0x4e>
   10f36:	4291      	cmp	r1, r2
   10f38:	d00b      	beq.n	10f52 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10f3a:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   10f3e:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10f42:	42a0      	cmp	r0, r4
   10f44:	d005      	beq.n	10f52 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10f46:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10f4a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   10f4c:	bf08      	it	eq
   10f4e:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   10f52:	2000      	movs	r0, #0
   10f54:	bc30      	pop	{r4, r5}
   10f56:	4770      	bx	lr
   10f58:	200008c0 	.word	0x200008c0

00010f5c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   10f5c:	4801      	ldr	r0, [pc, #4]	; (10f64 <ll_tx_mem_acquire+0x8>)
   10f5e:	f7f6 b928 	b.w	71b2 <mem_acquire>
   10f62:	bf00      	nop
   10f64:	20000a24 	.word	0x20000a24

00010f68 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10f68:	4901      	ldr	r1, [pc, #4]	; (10f70 <ll_tx_mem_release+0x8>)
   10f6a:	f7f6 b93c 	b.w	71e6 <mem_release>
   10f6e:	bf00      	nop
   10f70:	20000a24 	.word	0x20000a24

00010f74 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10f74:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10f76:	4d34      	ldr	r5, [pc, #208]	; (11048 <ll_tx_mem_enqueue+0xd4>)
   10f78:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   10f7c:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10f80:	3401      	adds	r4, #1
{
   10f82:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10f84:	b2e4      	uxtb	r4, r4
{
   10f86:	4607      	mov	r7, r0
   10f88:	460e      	mov	r6, r1
		last = 0;
   10f8a:	42a3      	cmp	r3, r4
   10f8c:	bf08      	it	eq
   10f8e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10f90:	f7f9 f8f6 	bl	a180 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10f94:	2800      	cmp	r0, #0
   10f96:	d055      	beq.n	11044 <ll_tx_mem_enqueue+0xd0>
   10f98:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   10f9c:	429c      	cmp	r4, r3
   10f9e:	d051      	beq.n	11044 <ll_tx_mem_enqueue+0xd0>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10fa0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   10fa4:	7972      	ldrb	r2, [r6, #5]
   10fa6:	3b07      	subs	r3, #7
   10fa8:	429a      	cmp	r2, r3
   10faa:	d90f      	bls.n	10fcc <ll_tx_mem_enqueue+0x58>
   10fac:	4b27      	ldr	r3, [pc, #156]	; (1104c <ll_tx_mem_enqueue+0xd8>)
   10fae:	9301      	str	r3, [sp, #4]
   10fb0:	9300      	str	r3, [sp, #0]
   10fb2:	4b27      	ldr	r3, [pc, #156]	; (11050 <ll_tx_mem_enqueue+0xdc>)
   10fb4:	4a27      	ldr	r2, [pc, #156]	; (11054 <ll_tx_mem_enqueue+0xe0>)
   10fb6:	681c      	ldr	r4, [r3, #0]
   10fb8:	4927      	ldr	r1, [pc, #156]	; (11058 <ll_tx_mem_enqueue+0xe4>)
   10fba:	4b28      	ldr	r3, [pc, #160]	; (1105c <ll_tx_mem_enqueue+0xe8>)
   10fbc:	4828      	ldr	r0, [pc, #160]	; (11060 <ll_tx_mem_enqueue+0xec>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10fbe:	47a0      	blx	r4
   10fc0:	4040      	eors	r0, r0
   10fc2:	f380 8811 	msr	BASEPRI, r0
   10fc6:	f04f 0004 	mov.w	r0, #4
   10fca:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   10fcc:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   10fd0:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   10fd4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   10fd8:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   10fdc:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   10fde:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10fe2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10fe6:	2b00      	cmp	r3, #0
   10fe8:	db02      	blt.n	10ff0 <ll_tx_mem_enqueue+0x7c>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   10fea:	2000      	movs	r0, #0
}
   10fec:	b009      	add	sp, #36	; 0x24
   10fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10ff0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   10ff2:	2b00      	cmp	r3, #0
   10ff4:	d0f9      	beq.n	10fea <ll_tx_mem_enqueue+0x76>
   10ff6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   10ffa:	f012 0302 	ands.w	r3, r2, #2
   10ffe:	d1f4      	bne.n	10fea <ll_tx_mem_enqueue+0x76>
		conn->slave.latency_cancel = 1;
   11000:	f042 0202 	orr.w	r2, r2, #2
   11004:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   11008:	f890 2020 	ldrb.w	r2, [r0, #32]
   1100c:	4915      	ldr	r1, [pc, #84]	; (11064 <ll_tx_mem_enqueue+0xf0>)
   1100e:	9105      	str	r1, [sp, #20]
   11010:	3207      	adds	r2, #7
   11012:	2101      	movs	r1, #1
   11014:	9006      	str	r0, [sp, #24]
   11016:	9304      	str	r3, [sp, #16]
   11018:	9103      	str	r1, [sp, #12]
   1101a:	9302      	str	r3, [sp, #8]
   1101c:	9301      	str	r3, [sp, #4]
   1101e:	9300      	str	r3, [sp, #0]
   11020:	4618      	mov	r0, r3
   11022:	b2d2      	uxtb	r2, r2
   11024:	2103      	movs	r1, #3
   11026:	f7f6 ff9f 	bl	7f68 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1102a:	f030 0302 	bics.w	r3, r0, #2
   1102e:	d0dc      	beq.n	10fea <ll_tx_mem_enqueue+0x76>
   11030:	4b06      	ldr	r3, [pc, #24]	; (1104c <ll_tx_mem_enqueue+0xd8>)
   11032:	9301      	str	r3, [sp, #4]
   11034:	9300      	str	r3, [sp, #0]
   11036:	4b06      	ldr	r3, [pc, #24]	; (11050 <ll_tx_mem_enqueue+0xdc>)
   11038:	4a06      	ldr	r2, [pc, #24]	; (11054 <ll_tx_mem_enqueue+0xe0>)
   1103a:	681c      	ldr	r4, [r3, #0]
   1103c:	4906      	ldr	r1, [pc, #24]	; (11058 <ll_tx_mem_enqueue+0xe4>)
   1103e:	4b07      	ldr	r3, [pc, #28]	; (1105c <ll_tx_mem_enqueue+0xe8>)
   11040:	4809      	ldr	r0, [pc, #36]	; (11068 <ll_tx_mem_enqueue+0xf4>)
   11042:	e7bc      	b.n	10fbe <ll_tx_mem_enqueue+0x4a>
		return 1;
   11044:	2001      	movs	r0, #1
   11046:	e7d1      	b.n	10fec <ll_tx_mem_enqueue+0x78>
   11048:	200008c0 	.word	0x200008c0
   1104c:	0001563e 	.word	0x0001563e
   11050:	20003a5c 	.word	0x20003a5c
   11054:	000167b9 	.word	0x000167b9
   11058:	00016808 	.word	0x00016808
   1105c:	00018255 	.word	0x00018255
   11060:	0001883b 	.word	0x0001883b
   11064:	0000af61 	.word	0x0000af61
   11068:	0001828d 	.word	0x0001828d

0001106c <ll_enc_req_send>:
{
   1106c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11070:	4607      	mov	r7, r0
   11072:	4688      	mov	r8, r1
   11074:	4616      	mov	r6, r2
   11076:	4699      	mov	r9, r3
	conn = connection_get(handle);
   11078:	f7f9 f882 	bl	a180 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1107c:	4605      	mov	r5, r0
   1107e:	b910      	cbnz	r0, 11086 <ll_enc_req_send+0x1a>
			return 1;
   11080:	2001      	movs	r0, #1
   11082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   11086:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1108a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1108e:	429a      	cmp	r2, r3
   11090:	d1f6      	bne.n	11080 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   11092:	f7ff ff63 	bl	10f5c <ll_tx_mem_acquire>
	if (node_tx) {
   11096:	4604      	mov	r4, r0
   11098:	2800      	cmp	r0, #0
   1109a:	d0f1      	beq.n	11080 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1109c:	2210      	movs	r2, #16
   1109e:	4649      	mov	r1, r9
   110a0:	f105 0084 	add.w	r0, r5, #132	; 0x84
   110a4:	f7f0 febe 	bl	1e24 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   110a8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   110ac:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   110b0:	d124      	bne.n	110fc <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   110b2:	7923      	ldrb	r3, [r4, #4]
   110b4:	f043 0303 	orr.w	r3, r3, #3
   110b8:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   110ba:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   110bc:	2208      	movs	r2, #8
			pdu_data_tx->len =
   110be:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   110c0:	2303      	movs	r3, #3
   110c2:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   110c4:	4641      	mov	r1, r8
   110c6:	18a0      	adds	r0, r4, r2
   110c8:	f7f0 feac 	bl	1e24 <memcpy>
			enc_req->ediv[0] = ediv[0];
   110cc:	7833      	ldrb	r3, [r6, #0]
   110ce:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   110d0:	7873      	ldrb	r3, [r6, #1]
   110d2:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   110d4:	2108      	movs	r1, #8
   110d6:	f104 0012 	add.w	r0, r4, #18
   110da:	f7f7 f8a3 	bl	8224 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   110de:	2104      	movs	r1, #4
   110e0:	f104 001a 	add.w	r0, r4, #26
   110e4:	f7f7 f89e 	bl	8224 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   110e8:	4621      	mov	r1, r4
   110ea:	4638      	mov	r0, r7
   110ec:	f7ff ff42 	bl	10f74 <ll_tx_mem_enqueue>
   110f0:	2601      	movs	r6, #1
   110f2:	b1d0      	cbz	r0, 1112a <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   110f4:	4620      	mov	r0, r4
   110f6:	f7ff ff37 	bl	10f68 <ll_tx_mem_release>
   110fa:	e7c1      	b.n	11080 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   110fc:	2b30      	cmp	r3, #48	; 0x30
   110fe:	d1f9      	bne.n	110f4 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   11100:	2208      	movs	r2, #8
   11102:	4641      	mov	r1, r8
   11104:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   11108:	f7f0 fe8c 	bl	1e24 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   1110c:	7833      	ldrb	r3, [r6, #0]
   1110e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   11112:	7873      	ldrb	r3, [r6, #1]
   11114:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   11118:	7923      	ldrb	r3, [r4, #4]
   1111a:	f043 0303 	orr.w	r3, r3, #3
   1111e:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   11120:	2301      	movs	r3, #1
   11122:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   11124:	230a      	movs	r3, #10
   11126:	71e3      	strb	r3, [r4, #7]
   11128:	e7de      	b.n	110e8 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   1112a:	2303      	movs	r3, #3
   1112c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   11130:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   11134:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   11138:	3301      	adds	r3, #1
   1113a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   1113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11142:	0000      	movs	r0, r0
   11144:	0000      	movs	r0, r0
	...

00011148 <radio_scan_enable>:
{
   11148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   1114c:	4c68      	ldr	r4, [pc, #416]	; (112f0 <radio_scan_enable+0x1a8>)
   1114e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   11152:	b08e      	sub	sp, #56	; 0x38
   11154:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   11156:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1115a:	f04f 0302 	mov.w	r3, #2
{
   1115e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11160:	930b      	str	r3, [sp, #44]	; 0x2c
{
   11162:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   11164:	d003      	beq.n	1116e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11166:	200c      	movs	r0, #12
}
   11168:	b00e      	add	sp, #56	; 0x38
   1116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   1116e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   11172:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   11176:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1117a:	0840      	lsrs	r0, r0, #1
   1117c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   11180:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   11184:	f360 0200 	bfi	r2, r0, #0, #1
   11188:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   1118c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   11190:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   11194:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   11198:	2206      	movs	r2, #6
   1119a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   1119e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   111a2:	4e54      	ldr	r6, [pc, #336]	; (112f4 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   111a4:	f7f0 fe3e 	bl	1e24 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   111a8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   111ac:	f04f 0991 	mov.w	r9, #145	; 0x91
   111b0:	fba2 0106 	umull	r0, r1, r2, r6
   111b4:	fb09 1102 	mla	r1, r9, r2, r1
   111b8:	a34b      	add	r3, pc, #300	; (adr r3, 112e8 <radio_scan_enable+0x1a0>)
   111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   111be:	f7ef f829 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   111c2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   111c6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   111ca:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   111ce:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   111d2:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   111d6:	b2ba      	uxth	r2, r7
   111d8:	fba2 6706 	umull	r6, r7, r2, r6
   111dc:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   111e0:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   111e4:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   111e6:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   111ea:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   111ee:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   111f2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   111f6:	a33c      	add	r3, pc, #240	; (adr r3, 112e8 <radio_scan_enable+0x1a0>)
   111f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   111fc:	4630      	mov	r0, r6
   111fe:	4639      	mov	r1, r7
   11200:	f7ef f808 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   11204:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   11208:	459a      	cmp	sl, r3
   1120a:	bf94      	ite	ls
   1120c:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   11210:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   11214:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   11218:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   1121a:	bf38      	it	cc
   1121c:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   11220:	f7f6 ffc0 	bl	81a4 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   11224:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   11228:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   1122a:	2b00      	cmp	r3, #0
   1122c:	d045      	beq.n	112ba <radio_scan_enable+0x172>
		us_offset = 0;
   1122e:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11230:	980c      	ldr	r0, [sp, #48]	; 0x30
   11232:	4931      	ldr	r1, [pc, #196]	; (112f8 <radio_scan_enable+0x1b0>)
   11234:	a32c      	add	r3, pc, #176	; (adr r3, 112e8 <radio_scan_enable+0x1a0>)
   11236:	e9d3 2300 	ldrd	r2, r3, [r3]
   1123a:	fba0 0101 	umull	r0, r1, r0, r1
   1123e:	f7ee ffe9 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11242:	ab0b      	add	r3, sp, #44	; 0x2c
   11244:	9308      	str	r3, [sp, #32]
   11246:	4b2d      	ldr	r3, [pc, #180]	; (112fc <radio_scan_enable+0x1b4>)
   11248:	9307      	str	r3, [sp, #28]
   1124a:	4b2d      	ldr	r3, [pc, #180]	; (11300 <radio_scan_enable+0x1b8>)
   1124c:	9305      	str	r3, [sp, #20]
   1124e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   11252:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11256:	4443      	add	r3, r8
   11258:	2500      	movs	r5, #0
   1125a:	4482      	add	sl, r0
   1125c:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1125e:	4630      	mov	r0, r6
   11260:	a321      	add	r3, pc, #132	; (adr r3, 112e8 <radio_scan_enable+0x1a0>)
   11262:	e9d3 2300 	ldrd	r2, r3, [r3]
   11266:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11268:	9506      	str	r5, [sp, #24]
   1126a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1126c:	f7ee ffd2 	bl	214 <__aeabi_uldivmod>
   11270:	4610      	mov	r0, r2
   11272:	4619      	mov	r1, r3
   11274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11278:	2300      	movs	r3, #0
   1127a:	f7ee ffcb 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1127e:	e88d 0220 	stmia.w	sp, {r5, r9}
   11282:	9002      	str	r0, [sp, #8]
   11284:	4653      	mov	r3, sl
   11286:	2206      	movs	r2, #6
   11288:	2103      	movs	r1, #3
   1128a:	4628      	mov	r0, r5
   1128c:	f7f6 fe1c 	bl	7ec8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   11290:	2802      	cmp	r0, #2
   11292:	d023      	beq.n	112dc <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11294:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11296:	2d00      	cmp	r5, #0
   11298:	f47f af65 	bne.w	11166 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   1129c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   112a0:	f043 0301 	orr.w	r3, r3, #1
   112a4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   112a8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   112ac:	2b00      	cmp	r3, #0
   112ae:	db02      	blt.n	112b6 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   112b0:	2002      	movs	r0, #2
   112b2:	f000 fef1 	bl	12098 <ll_adv_scan_state_cb>
	return 0;
   112b6:	4628      	mov	r0, r5
   112b8:	e756      	b.n	11168 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   112ba:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   112be:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   112c0:	aa0d      	add	r2, sp, #52	; 0x34
   112c2:	ab0c      	add	r3, sp, #48	; 0x30
   112c4:	4441      	add	r1, r8
   112c6:	2003      	movs	r0, #3
   112c8:	f7f9 fb8a 	bl	a9e0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   112cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   112ce:	2b00      	cmp	r3, #0
   112d0:	d0ae      	beq.n	11230 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   112d2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   112d6:	e7ab      	b.n	11230 <radio_scan_enable+0xe8>
			cpu_sleep();
   112d8:	f7f8 fd54 	bl	9d84 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   112dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   112de:	2b02      	cmp	r3, #2
   112e0:	d0fa      	beq.n	112d8 <radio_scan_enable+0x190>
   112e2:	e7d7      	b.n	11294 <radio_scan_enable+0x14c>
   112e4:	f3af 8000 	nop.w
   112e8:	1afd498d 	.word	0x1afd498d
   112ec:	00000007 	.word	0x00000007
   112f0:	200008c0 	.word	0x200008c0
   112f4:	84e72a00 	.word	0x84e72a00
   112f8:	3b9aca00 	.word	0x3b9aca00
   112fc:	00009dc9 	.word	0x00009dc9
   11300:	0000bdfd 	.word	0x0000bdfd

00011304 <radio_scan_disable>:
{
   11304:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   11306:	2104      	movs	r1, #4
   11308:	2006      	movs	r0, #6
   1130a:	f7f8 ff4f 	bl	a1ac <role_disable>
	if (!status) {
   1130e:	4605      	mov	r5, r0
   11310:	b9e8      	cbnz	r0, 1134e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   11312:	4c10      	ldr	r4, [pc, #64]	; (11354 <radio_scan_disable+0x50>)
   11314:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   11318:	f360 0200 	bfi	r2, r0, #0, #1
   1131c:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   11320:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   11324:	2a00      	cmp	r2, #0
   11326:	db01      	blt.n	1132c <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   11328:	f000 feb6 	bl	12098 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   1132c:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   11330:	b15e      	cbz	r6, 1134a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   11332:	2300      	movs	r3, #0
   11334:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   11338:	4907      	ldr	r1, [pc, #28]	; (11358 <radio_scan_disable+0x54>)
   1133a:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   1133e:	f7f5 ff52 	bl	71e6 <mem_release>
			mem_release(conn, &_radio.conn_free);
   11342:	4906      	ldr	r1, [pc, #24]	; (1135c <radio_scan_disable+0x58>)
   11344:	4630      	mov	r0, r6
   11346:	f7f5 ff4e 	bl	71e6 <mem_release>
}
   1134a:	4628      	mov	r0, r5
   1134c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1134e:	250c      	movs	r5, #12
   11350:	e7fb      	b.n	1134a <radio_scan_disable+0x46>
   11352:	bf00      	nop
   11354:	200008c0 	.word	0x200008c0
   11358:	20000a08 	.word	0x20000a08
   1135c:	200009cc 	.word	0x200009cc

00011360 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   11360:	4b03      	ldr	r3, [pc, #12]	; (11370 <ll_connect_disable+0x10>)
   11362:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11366:	b10b      	cbz	r3, 1136c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   11368:	f7ff bfcc 	b.w	11304 <radio_scan_disable>
}
   1136c:	200c      	movs	r0, #12
   1136e:	4770      	bx	lr
   11370:	200008c0 	.word	0x200008c0

00011374 <ll_rx_dequeue>:
{
   11374:	b530      	push	{r4, r5, lr}
   11376:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11378:	4d4c      	ldr	r5, [pc, #304]	; (114ac <ll_rx_dequeue+0x138>)
	struct radio_pdu_node_rx *node_rx = NULL;
   1137a:	aa04      	add	r2, sp, #16
   1137c:	2300      	movs	r3, #0
   1137e:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11382:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   11386:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   1138a:	f7f5 ff7b 	bl	7284 <memq_dequeue>
   1138e:	462c      	mov	r4, r5
	LL_ASSERT(link);
   11390:	b978      	cbnz	r0, 113b2 <ll_rx_dequeue+0x3e>
   11392:	4b47      	ldr	r3, [pc, #284]	; (114b0 <ll_rx_dequeue+0x13c>)
   11394:	9301      	str	r3, [sp, #4]
   11396:	9300      	str	r3, [sp, #0]
   11398:	4b46      	ldr	r3, [pc, #280]	; (114b4 <ll_rx_dequeue+0x140>)
   1139a:	4a47      	ldr	r2, [pc, #284]	; (114b8 <ll_rx_dequeue+0x144>)
   1139c:	681c      	ldr	r4, [r3, #0]
   1139e:	4947      	ldr	r1, [pc, #284]	; (114bc <ll_rx_dequeue+0x148>)
   113a0:	4b47      	ldr	r3, [pc, #284]	; (114c0 <ll_rx_dequeue+0x14c>)
   113a2:	4848      	ldr	r0, [pc, #288]	; (114c4 <ll_rx_dequeue+0x150>)
		LL_ASSERT(_radio.link_rx_data_quota <
   113a4:	47a0      	blx	r4
   113a6:	4040      	eors	r0, r0
   113a8:	f380 8811 	msr	BASEPRI, r0
   113ac:	f04f 0004 	mov.w	r0, #4
   113b0:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   113b2:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   113b6:	f7f5 ff16 	bl	71e6 <mem_release>
	switch (node_rx->hdr.type) {
   113ba:	9a03      	ldr	r2, [sp, #12]
   113bc:	7911      	ldrb	r1, [r2, #4]
   113be:	290c      	cmp	r1, #12
   113c0:	d807      	bhi.n	113d2 <ll_rx_dequeue+0x5e>
   113c2:	2301      	movs	r3, #1
   113c4:	408b      	lsls	r3, r1
   113c6:	f641 707e 	movw	r0, #8062	; 0x1f7e
   113ca:	4203      	tst	r3, r0
   113cc:	d10b      	bne.n	113e6 <ll_rx_dequeue+0x72>
   113ce:	0618      	lsls	r0, r3, #24
   113d0:	d41d      	bmi.n	1140e <ll_rx_dequeue+0x9a>
		LL_ASSERT(0);
   113d2:	4b37      	ldr	r3, [pc, #220]	; (114b0 <ll_rx_dequeue+0x13c>)
   113d4:	9301      	str	r3, [sp, #4]
   113d6:	9300      	str	r3, [sp, #0]
   113d8:	4b36      	ldr	r3, [pc, #216]	; (114b4 <ll_rx_dequeue+0x140>)
   113da:	4a37      	ldr	r2, [pc, #220]	; (114b8 <ll_rx_dequeue+0x144>)
   113dc:	681c      	ldr	r4, [r3, #0]
   113de:	4937      	ldr	r1, [pc, #220]	; (114bc <ll_rx_dequeue+0x148>)
   113e0:	4b37      	ldr	r3, [pc, #220]	; (114c0 <ll_rx_dequeue+0x14c>)
   113e2:	4839      	ldr	r0, [pc, #228]	; (114c8 <ll_rx_dequeue+0x154>)
   113e4:	e7de      	b.n	113a4 <ll_rx_dequeue+0x30>
		LL_ASSERT(_radio.link_rx_data_quota <
   113e6:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   113ea:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   113ee:	3801      	subs	r0, #1
   113f0:	4283      	cmp	r3, r0
   113f2:	db09      	blt.n	11408 <ll_rx_dequeue+0x94>
   113f4:	4b2e      	ldr	r3, [pc, #184]	; (114b0 <ll_rx_dequeue+0x13c>)
   113f6:	9301      	str	r3, [sp, #4]
   113f8:	9300      	str	r3, [sp, #0]
   113fa:	4b2e      	ldr	r3, [pc, #184]	; (114b4 <ll_rx_dequeue+0x140>)
   113fc:	4a2e      	ldr	r2, [pc, #184]	; (114b8 <ll_rx_dequeue+0x144>)
   113fe:	681c      	ldr	r4, [r3, #0]
   11400:	492e      	ldr	r1, [pc, #184]	; (114bc <ll_rx_dequeue+0x148>)
   11402:	4b2f      	ldr	r3, [pc, #188]	; (114c0 <ll_rx_dequeue+0x14c>)
   11404:	4831      	ldr	r0, [pc, #196]	; (114cc <ll_rx_dequeue+0x158>)
   11406:	e7cd      	b.n	113a4 <ll_rx_dequeue+0x30>
		_radio.link_rx_data_quota++;
   11408:	3301      	adds	r3, #1
   1140a:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1140e:	2906      	cmp	r1, #6
   11410:	d13a      	bne.n	11488 <ll_rx_dequeue+0x114>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   11412:	7ad3      	ldrb	r3, [r2, #11]
   11414:	2b3c      	cmp	r3, #60	; 0x3c
   11416:	d00f      	beq.n	11438 <ll_rx_dequeue+0xc4>
   11418:	7b12      	ldrb	r2, [r2, #12]
   1141a:	bb02      	cbnz	r2, 1145e <ll_rx_dequeue+0xea>
			LL_ASSERT(_radio.scanner.is_enabled);
   1141c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11420:	07d9      	lsls	r1, r3, #31
   11422:	d433      	bmi.n	1148c <ll_rx_dequeue+0x118>
   11424:	4b22      	ldr	r3, [pc, #136]	; (114b0 <ll_rx_dequeue+0x13c>)
   11426:	9301      	str	r3, [sp, #4]
   11428:	9300      	str	r3, [sp, #0]
   1142a:	4b22      	ldr	r3, [pc, #136]	; (114b4 <ll_rx_dequeue+0x140>)
   1142c:	4a22      	ldr	r2, [pc, #136]	; (114b8 <ll_rx_dequeue+0x144>)
   1142e:	681c      	ldr	r4, [r3, #0]
   11430:	4922      	ldr	r1, [pc, #136]	; (114bc <ll_rx_dequeue+0x148>)
   11432:	4b23      	ldr	r3, [pc, #140]	; (114c0 <ll_rx_dequeue+0x14c>)
   11434:	4826      	ldr	r0, [pc, #152]	; (114d0 <ll_rx_dequeue+0x15c>)
   11436:	e7b5      	b.n	113a4 <ll_rx_dequeue+0x30>
				_radio.advertiser.conn = NULL;
   11438:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   1143a:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   1143e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   11442:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11446:	2b00      	cmp	r3, #0
   11448:	db0b      	blt.n	11462 <ll_rx_dequeue+0xee>
   1144a:	4b19      	ldr	r3, [pc, #100]	; (114b0 <ll_rx_dequeue+0x13c>)
   1144c:	9301      	str	r3, [sp, #4]
   1144e:	9300      	str	r3, [sp, #0]
   11450:	4b18      	ldr	r3, [pc, #96]	; (114b4 <ll_rx_dequeue+0x140>)
   11452:	4a19      	ldr	r2, [pc, #100]	; (114b8 <ll_rx_dequeue+0x144>)
   11454:	681c      	ldr	r4, [r3, #0]
   11456:	4919      	ldr	r1, [pc, #100]	; (114bc <ll_rx_dequeue+0x148>)
   11458:	4b19      	ldr	r3, [pc, #100]	; (114c0 <ll_rx_dequeue+0x14c>)
   1145a:	481e      	ldr	r0, [pc, #120]	; (114d4 <ll_rx_dequeue+0x160>)
   1145c:	e7a2      	b.n	113a4 <ll_rx_dequeue+0x30>
		struct connection *conn = NULL;
   1145e:	2500      	movs	r5, #0
   11460:	e7ef      	b.n	11442 <ll_rx_dequeue+0xce>
			_radio.advertiser.is_enabled = 0;
   11462:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11466:	f36f 13c7 	bfc	r3, #7, #1
   1146a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   1146e:	b995      	cbnz	r5, 11496 <ll_rx_dequeue+0x122>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11470:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   11474:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11478:	f000 0001 	and.w	r0, r0, #1
   1147c:	0040      	lsls	r0, r0, #1
		if (!bm) {
   1147e:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   11482:	d101      	bne.n	11488 <ll_rx_dequeue+0x114>
			ll_adv_scan_state_cb(0);
   11484:	f000 fe08 	bl	12098 <ll_adv_scan_state_cb>
}
   11488:	b005      	add	sp, #20
   1148a:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   1148c:	f362 0300 	bfi	r3, r2, #0, #1
   11490:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   11494:	e7ec      	b.n	11470 <ll_rx_dequeue+0xfc>
			mem_release(node_rx->hdr.onion.link,
   11496:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1149a:	490f      	ldr	r1, [pc, #60]	; (114d8 <ll_rx_dequeue+0x164>)
   1149c:	f7f5 fea3 	bl	71e6 <mem_release>
			mem_release(conn, &_radio.conn_free);
   114a0:	490e      	ldr	r1, [pc, #56]	; (114dc <ll_rx_dequeue+0x168>)
   114a2:	4628      	mov	r0, r5
   114a4:	f7f5 fe9f 	bl	71e6 <mem_release>
   114a8:	e7e2      	b.n	11470 <ll_rx_dequeue+0xfc>
   114aa:	bf00      	nop
   114ac:	200008c0 	.word	0x200008c0
   114b0:	0001563e 	.word	0x0001563e
   114b4:	20003a5c 	.word	0x20003a5c
   114b8:	000167b9 	.word	0x000167b9
   114bc:	00016808 	.word	0x00016808
   114c0:	00018219 	.word	0x00018219
   114c4:	00018267 	.word	0x00018267
   114c8:	00016758 	.word	0x00016758
   114cc:	00018312 	.word	0x00018312
   114d0:	00018800 	.word	0x00018800
   114d4:	000187c2 	.word	0x000187c2
   114d8:	20000a08 	.word	0x20000a08
   114dc:	200009cc 	.word	0x200009cc

000114e0 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   114e0:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   114e2:	4c0b      	ldr	r4, [pc, #44]	; (11510 <rtc0_nrf5_isr+0x30>)
   114e4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   114e8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   114ec:	b122      	cbz	r2, 114f8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   114ee:	2000      	movs	r0, #0
   114f0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   114f4:	f7f6 fcd6 	bl	7ea4 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   114f8:	b12d      	cbz	r5, 11506 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   114fa:	2300      	movs	r3, #0
   114fc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   11500:	2001      	movs	r0, #1
   11502:	f7f6 fccf 	bl	7ea4 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   11506:	2000      	movs	r0, #0
}
   11508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   1150c:	f7f5 bf6a 	b.w	73e4 <mayfly_run>
   11510:	4000b000 	.word	0x4000b000

00011514 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   11514:	2001      	movs	r0, #1
   11516:	f7f5 bf65 	b.w	73e4 <mayfly_run>

0001151a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1151a:	4668      	mov	r0, sp
   1151c:	f020 0107 	bic.w	r1, r0, #7
   11520:	468d      	mov	sp, r1
   11522:	b501      	push	{r0, lr}
	isr_radio();
   11524:	f001 f8fc 	bl	12720 <isr_radio>
	ISR_DIRECT_PM();
   11528:	f7f0 fa94 	bl	1a54 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1152c:	f7f0 f868 	bl	1600 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11530:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11534:	4685      	mov	sp, r0
   11536:	4770      	bx	lr

00011538 <radio_active_callback>:
{
   11538:	4770      	bx	lr
	...

0001153c <radio_event_callback>:
	k_sem_give(sem_recv);
   1153c:	4b01      	ldr	r3, [pc, #4]	; (11544 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1153e:	6818      	ldr	r0, [r3, #0]
   11540:	f003 b8a6 	b.w	14690 <_impl_k_sem_give>
   11544:	200011f0 	.word	0x200011f0

00011548 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   11548:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1154a:	4b42      	ldr	r3, [pc, #264]	; (11654 <ll_init+0x10c>)
{
   1154c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1154e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   11550:	4841      	ldr	r0, [pc, #260]	; (11658 <ll_init+0x110>)
   11552:	f002 faad 	bl	13ab0 <device_get_binding>
	if (!clk_k32) {
   11556:	b918      	cbnz	r0, 11560 <ll_init+0x18>
		return -ENODEV;
   11558:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   1155c:	b006      	add	sp, #24
   1155e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   11560:	6843      	ldr	r3, [r0, #4]
   11562:	2101      	movs	r1, #1
   11564:	681b      	ldr	r3, [r3, #0]
   11566:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   11568:	483c      	ldr	r0, [pc, #240]	; (1165c <ll_init+0x114>)
   1156a:	f002 faa1 	bl	13ab0 <device_get_binding>
	if (!entropy) {
   1156e:	4604      	mov	r4, r0
   11570:	2800      	cmp	r0, #0
   11572:	d0f1      	beq.n	11558 <ll_init+0x10>
	cntr_init();
   11574:	f000 ffb6 	bl	124e4 <cntr_init>
	mayfly_init();
   11578:	f7f5 fe94 	bl	72a4 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1157c:	4b38      	ldr	r3, [pc, #224]	; (11660 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1157e:	2203      	movs	r2, #3
   11580:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11582:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11584:	4a37      	ldr	r2, [pc, #220]	; (11664 <ll_init+0x11c>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11586:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11588:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1158a:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1158c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1158e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11590:	9205      	str	r2, [sp, #20]
   11592:	4a35      	ldr	r2, [pc, #212]	; (11668 <ll_init+0x120>)
   11594:	9204      	str	r2, [sp, #16]
   11596:	4a35      	ldr	r2, [pc, #212]	; (1166c <ll_init+0x124>)
   11598:	9203      	str	r2, [sp, #12]
   1159a:	4a35      	ldr	r2, [pc, #212]	; (11670 <ll_init+0x128>)
   1159c:	9202      	str	r2, [sp, #8]
   1159e:	220d      	movs	r2, #13
   115a0:	9201      	str	r2, [sp, #4]
   115a2:	9300      	str	r3, [sp, #0]
   115a4:	4a33      	ldr	r2, [pc, #204]	; (11674 <ll_init+0x12c>)
   115a6:	2304      	movs	r3, #4
   115a8:	f7f6 fc44 	bl	7e34 <ticker_init>
	LL_ASSERT(!err);
   115ac:	b178      	cbz	r0, 115ce <ll_init+0x86>
   115ae:	4b32      	ldr	r3, [pc, #200]	; (11678 <ll_init+0x130>)
   115b0:	9301      	str	r3, [sp, #4]
   115b2:	9300      	str	r3, [sp, #0]
   115b4:	4b31      	ldr	r3, [pc, #196]	; (1167c <ll_init+0x134>)
   115b6:	4a32      	ldr	r2, [pc, #200]	; (11680 <ll_init+0x138>)
   115b8:	681c      	ldr	r4, [r3, #0]
   115ba:	4932      	ldr	r1, [pc, #200]	; (11684 <ll_init+0x13c>)
   115bc:	4b32      	ldr	r3, [pc, #200]	; (11688 <ll_init+0x140>)
   115be:	4833      	ldr	r0, [pc, #204]	; (1168c <ll_init+0x144>)
   115c0:	47a0      	blx	r4
   115c2:	4040      	eors	r0, r0
   115c4:	f380 8811 	msr	BASEPRI, r0
   115c8:	f04f 0004 	mov.w	r0, #4
   115cc:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   115ce:	4830      	ldr	r0, [pc, #192]	; (11690 <ll_init+0x148>)
   115d0:	f002 fa6e 	bl	13ab0 <device_get_binding>
	if (!clk_m16) {
   115d4:	2800      	cmp	r0, #0
   115d6:	d0bf      	beq.n	11558 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   115d8:	4b2e      	ldr	r3, [pc, #184]	; (11694 <ll_init+0x14c>)
   115da:	9304      	str	r3, [sp, #16]
   115dc:	9501      	str	r5, [sp, #4]
   115de:	231b      	movs	r3, #27
   115e0:	2501      	movs	r5, #1
   115e2:	f44f 7657 	mov.w	r6, #860	; 0x35c
   115e6:	9303      	str	r3, [sp, #12]
   115e8:	9302      	str	r3, [sp, #8]
   115ea:	4622      	mov	r2, r4
   115ec:	9605      	str	r6, [sp, #20]
   115ee:	9500      	str	r5, [sp, #0]
   115f0:	462b      	mov	r3, r5
   115f2:	2107      	movs	r1, #7
   115f4:	f7fe ff34 	bl	10460 <radio_init>
	if (err) {
   115f8:	4604      	mov	r4, r0
   115fa:	b168      	cbz	r0, 11618 <ll_init+0xd0>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   115fc:	4b1e      	ldr	r3, [pc, #120]	; (11678 <ll_init+0x130>)
   115fe:	9303      	str	r3, [sp, #12]
   11600:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   11604:	4b1d      	ldr	r3, [pc, #116]	; (1167c <ll_init+0x134>)
   11606:	4824      	ldr	r0, [pc, #144]	; (11698 <ll_init+0x150>)
   11608:	681c      	ldr	r4, [r3, #0]
   1160a:	4a1d      	ldr	r2, [pc, #116]	; (11680 <ll_init+0x138>)
   1160c:	4b1e      	ldr	r3, [pc, #120]	; (11688 <ll_init+0x140>)
   1160e:	491d      	ldr	r1, [pc, #116]	; (11684 <ll_init+0x13c>)
   11610:	47a0      	blx	r4
		return -ENOMEM;
   11612:	f06f 000b 	mvn.w	r0, #11
   11616:	e7a1      	b.n	1155c <ll_init+0x14>
	ll_filter_reset(true);
   11618:	4628      	mov	r0, r5
   1161a:	f000 ff1b 	bl	12454 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1161e:	4622      	mov	r2, r4
   11620:	4621      	mov	r1, r4
   11622:	4628      	mov	r0, r5
   11624:	f7f0 f9e6 	bl	19f4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11628:	4622      	mov	r2, r4
   1162a:	4621      	mov	r1, r4
   1162c:	200b      	movs	r0, #11
   1162e:	f7f0 f9e1 	bl	19f4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   11632:	4622      	mov	r2, r4
   11634:	4621      	mov	r1, r4
   11636:	2018      	movs	r0, #24
   11638:	f7f0 f9dc 	bl	19f4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1163c:	4628      	mov	r0, r5
   1163e:	f7f0 f9a7 	bl	1990 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   11642:	200b      	movs	r0, #11
   11644:	f7f0 f9a4 	bl	1990 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   11648:	2018      	movs	r0, #24
   1164a:	f7f0 f9a1 	bl	1990 <_arch_irq_enable>
	return 0;
   1164e:	4620      	mov	r0, r4
   11650:	e784      	b.n	1155c <ll_init+0x14>
   11652:	bf00      	nop
   11654:	200011f0 	.word	0x200011f0
   11658:	000157ae 	.word	0x000157ae
   1165c:	000155bc 	.word	0x000155bc
   11660:	200011d0 	.word	0x200011d0
   11664:	000130d9 	.word	0x000130d9
   11668:	00013031 	.word	0x00013031
   1166c:	00012fcd 	.word	0x00012fcd
   11670:	20000f60 	.word	0x20000f60
   11674:	20000e20 	.word	0x20000e20
   11678:	0001563e 	.word	0x0001563e
   1167c:	20003a5c 	.word	0x20003a5c
   11680:	000167b9 	.word	0x000167b9
   11684:	00016808 	.word	0x00016808
   11688:	00018f37 	.word	0x00018f37
   1168c:	00018f3f 	.word	0x00018f3f
   11690:	000157b9 	.word	0x000157b9
   11694:	20000ac4 	.word	0x20000ac4
   11698:	00018f65 	.word	0x00018f65

0001169c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   116a0:	4681      	mov	r9, r0
   116a2:	4688      	mov	r8, r1
   116a4:	4617      	mov	r7, r2
   116a6:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   116a8:	f7fe ffbe 	bl	10628 <ll_scan_is_enabled>
   116ac:	b988      	cbnz	r0, 116d2 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   116ae:	4d0a      	ldr	r5, [pc, #40]	; (116d8 <ll_scan_params_set+0x3c>)
   116b0:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   116b2:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   116b6:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   116ba:	4622      	mov	r2, r4
   116bc:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   116c0:	4613      	mov	r3, r2
   116c2:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   116c6:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   116c8:	f362 1387 	bfi	r3, r2, #6, #2
   116cc:	712b      	strb	r3, [r5, #4]

	return 0;
   116ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   116d2:	200c      	movs	r0, #12
}
   116d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   116d8:	200011f4 	.word	0x200011f4

000116dc <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   116dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   116de:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   116e0:	b920      	cbnz	r0, 116ec <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   116e2:	b005      	add	sp, #20
   116e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   116e8:	f7ff be0c 	b.w	11304 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   116ec:	f7fe ff9c 	bl	10628 <ll_scan_is_enabled>
   116f0:	4606      	mov	r6, r0
   116f2:	bb40      	cbnz	r0, 11746 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   116f4:	4c15      	ldr	r4, [pc, #84]	; (1174c <ll_scan_enable+0x70>)
   116f6:	7920      	ldrb	r0, [r4, #4]
   116f8:	0980      	lsrs	r0, r0, #6
   116fa:	f000 fa9d 	bl	11c38 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   116fe:	7923      	ldrb	r3, [r4, #4]
   11700:	f013 0501 	ands.w	r5, r3, #1
   11704:	d006      	beq.n	11714 <ll_scan_enable+0x38>
   11706:	f013 0520 	ands.w	r5, r3, #32
   1170a:	d003      	beq.n	11714 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   1170c:	4630      	mov	r0, r6
   1170e:	f000 fc1f 	bl	11f50 <ll_rl_rpa_update>
		rpa_gen = 1;
   11712:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11714:	7926      	ldrb	r6, [r4, #4]
   11716:	f006 070f 	and.w	r7, r6, #15
   1171a:	f3c6 1600 	ubfx	r6, r6, #4, #1
   1171e:	2100      	movs	r1, #0
   11720:	4630      	mov	r0, r6
   11722:	f7f6 fd45 	bl	81b0 <ll_addr_get>
   11726:	22ff      	movs	r2, #255	; 0xff
   11728:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   1172a:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1172c:	8823      	ldrh	r3, [r4, #0]
   1172e:	9502      	str	r5, [sp, #8]
   11730:	0992      	lsrs	r2, r2, #6
   11732:	9201      	str	r2, [sp, #4]
   11734:	8862      	ldrh	r2, [r4, #2]
   11736:	9200      	str	r2, [sp, #0]
   11738:	4631      	mov	r1, r6
   1173a:	4602      	mov	r2, r0
   1173c:	4638      	mov	r0, r7
   1173e:	f7ff fd03 	bl	11148 <radio_scan_enable>
}
   11742:	b005      	add	sp, #20
   11744:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   11746:	2000      	movs	r0, #0
   11748:	e7fb      	b.n	11742 <ll_scan_enable+0x66>
   1174a:	bf00      	nop
   1174c:	200011f4 	.word	0x200011f4

00011750 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   11750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11754:	b085      	sub	sp, #20
   11756:	461e      	mov	r6, r3
   11758:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1175c:	9303      	str	r3, [sp, #12]
   1175e:	4680      	mov	r8, r0
   11760:	4689      	mov	r9, r1
   11762:	4615      	mov	r5, r2
   11764:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11766:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   1176a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   1176e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   11772:	f7fe ff59 	bl	10628 <ll_scan_is_enabled>
   11776:	9b03      	ldr	r3, [sp, #12]
   11778:	bba0      	cbnz	r0, 117e4 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1177a:	9300      	str	r3, [sp, #0]
   1177c:	4652      	mov	r2, sl
   1177e:	465b      	mov	r3, fp
   11780:	4639      	mov	r1, r7
   11782:	4630      	mov	r0, r6
   11784:	f7fe ff74 	bl	10670 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   11788:	bb68      	cbnz	r0, 117e6 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   1178a:	4628      	mov	r0, r5
   1178c:	f000 fa54 	bl	11c38 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   11790:	b1dd      	cbz	r5, 117ca <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   11792:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   11794:	1ea3      	subs	r3, r4, #2
   11796:	2b01      	cmp	r3, #1
   11798:	d822      	bhi.n	117e0 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   1179a:	2000      	movs	r0, #0
   1179c:	f000 fbd8 	bl	11f50 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   117a0:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   117a4:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   117a6:	2100      	movs	r1, #0
   117a8:	4620      	mov	r0, r4
   117aa:	f7f6 fd01 	bl	81b0 <ll_addr_get>
   117ae:	4643      	mov	r3, r8
   117b0:	4602      	mov	r2, r0
   117b2:	4621      	mov	r1, r4
   117b4:	2000      	movs	r0, #0
   117b6:	9711      	str	r7, [sp, #68]	; 0x44
   117b8:	9610      	str	r6, [sp, #64]	; 0x40
   117ba:	950f      	str	r5, [sp, #60]	; 0x3c
   117bc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   117c0:	b005      	add	sp, #20
   117c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   117c6:	f7ff bcbf 	b.w	11148 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   117ca:	f000 fbb9 	bl	11f40 <ctrl_rl_enabled>
   117ce:	2800      	cmp	r0, #0
   117d0:	d0df      	beq.n	11792 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   117d2:	4639      	mov	r1, r7
   117d4:	462a      	mov	r2, r5
   117d6:	4630      	mov	r0, r6
   117d8:	f000 fa50 	bl	11c7c <ll_rl_find>
   117dc:	4607      	mov	r7, r0
   117de:	e7d9      	b.n	11794 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   117e0:	2600      	movs	r6, #0
   117e2:	e7e0      	b.n	117a6 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   117e4:	200c      	movs	r0, #12
}
   117e6:	b005      	add	sp, #20
   117e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000117ec <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   117ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117f0:	4688      	mov	r8, r1
	int i;

	if (free) {
   117f2:	4615      	mov	r5, r2
   117f4:	b10a      	cbz	r2, 117fa <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   117f6:	23ff      	movs	r3, #255	; 0xff
   117f8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   117fa:	4e14      	ldr	r6, [pc, #80]	; (1184c <wl_find+0x60>)
{
   117fc:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   117fe:	f000 0701 	and.w	r7, r0, #1
   11802:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11806:	07da      	lsls	r2, r3, #31
   11808:	d51d      	bpl.n	11846 <wl_find+0x5a>
   1180a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1180e:	42bb      	cmp	r3, r7
   11810:	d113      	bne.n	1183a <wl_find+0x4e>
   11812:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   11816:	2206      	movs	r2, #6
   11818:	4641      	mov	r1, r8
   1181a:	3002      	adds	r0, #2
   1181c:	f7f0 faed 	bl	1dfa <memcmp>
   11820:	b910      	cbnz	r0, 11828 <wl_find+0x3c>
			return i;
   11822:	b2e0      	uxtb	r0, r4
   11824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11828:	b13d      	cbz	r5, 1183a <wl_find+0x4e>
   1182a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1182e:	07db      	lsls	r3, r3, #31
   11830:	d403      	bmi.n	1183a <wl_find+0x4e>
   11832:	782b      	ldrb	r3, [r5, #0]
   11834:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11836:	bf08      	it	eq
   11838:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1183a:	3401      	adds	r4, #1
   1183c:	2c08      	cmp	r4, #8
   1183e:	d1e0      	bne.n	11802 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11840:	20ff      	movs	r0, #255	; 0xff
   11842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11846:	2d00      	cmp	r5, #0
   11848:	d1f3      	bne.n	11832 <wl_find+0x46>
   1184a:	e7f6      	b.n	1183a <wl_find+0x4e>
   1184c:	20001427 	.word	0x20001427

00011850 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   11850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11854:	4d1a      	ldr	r5, [pc, #104]	; (118c0 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11856:	f8df 8074 	ldr.w	r8, [pc, #116]	; 118cc <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   1185a:	1eae      	subs	r6, r5, #2
{
   1185c:	2400      	movs	r4, #0
   1185e:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11860:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11864:	07d9      	lsls	r1, r3, #31
   11866:	d524      	bpl.n	118b2 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11868:	f898 3000 	ldrb.w	r3, [r8]
   1186c:	b15b      	cbz	r3, 11886 <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   1186e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11872:	2a07      	cmp	r2, #7
   11874:	d807      	bhi.n	11886 <filter_wl_update+0x36>
   11876:	2328      	movs	r3, #40	; 0x28
   11878:	4353      	muls	r3, r2
   1187a:	4a12      	ldr	r2, [pc, #72]	; (118c4 <filter_wl_update+0x74>)
   1187c:	5cd3      	ldrb	r3, [r2, r3]
   1187e:	075a      	lsls	r2, r3, #29
   11880:	d501      	bpl.n	11886 <filter_wl_update+0x36>
   11882:	06db      	lsls	r3, r3, #27
   11884:	d515      	bpl.n	118b2 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   11886:	4810      	ldr	r0, [pc, #64]	; (118c8 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11888:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1188c:	2201      	movs	r2, #1
   1188e:	fa02 f104 	lsl.w	r1, r2, r4
   11892:	7802      	ldrb	r2, [r0, #0]
   11894:	430a      	orrs	r2, r1
   11896:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11898:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1189c:	7842      	ldrb	r2, [r0, #1]
   1189e:	40a3      	lsls	r3, r4
   118a0:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   118a2:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   118a4:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   118a6:	fb02 0004 	mla	r0, r2, r4, r0
   118aa:	4629      	mov	r1, r5
   118ac:	3002      	adds	r0, #2
   118ae:	f7f0 fab9 	bl	1e24 <memcpy>
   118b2:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   118b4:	2c08      	cmp	r4, #8
   118b6:	f105 0508 	add.w	r5, r5, #8
   118ba:	d1d1      	bne.n	11860 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   118bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118c0:	20001429 	.word	0x20001429
   118c4:	200012b4 	.word	0x200012b4
   118c8:	20001467 	.word	0x20001467
   118cc:	200013f4 	.word	0x200013f4

000118d0 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   118d0:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   118d2:	f7fe fe95 	bl	10600 <ll_adv_is_enabled>
   118d6:	b928      	cbnz	r0, 118e4 <rl_access_check.constprop.1+0x14>
   118d8:	f7fe fea6 	bl	10628 <ll_scan_is_enabled>
   118dc:	fab0 f080 	clz	r0, r0
   118e0:	0940      	lsrs	r0, r0, #5
   118e2:	bd08      	pop	{r3, pc}
   118e4:	2000      	movs	r0, #0
}
   118e6:	bd08      	pop	{r3, pc}

000118e8 <sys_memcpy_swap.constprop.2>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	u8_t *pdst = (u8_t *)dst;
	const u8_t *psrc = (const u8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   118e8:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   118ea:	b508      	push	{r3, lr}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   118ec:	d90e      	bls.n	1190c <sys_memcpy_swap.constprop.2+0x24>
   118ee:	f101 0310 	add.w	r3, r1, #16
   118f2:	4298      	cmp	r0, r3
   118f4:	d20f      	bcs.n	11916 <sys_memcpy_swap.constprop.2+0x2e>
   118f6:	f240 1329 	movw	r3, #297	; 0x129
   118fa:	4a0c      	ldr	r2, [pc, #48]	; (1192c <sys_memcpy_swap.constprop.2+0x44>)
   118fc:	490c      	ldr	r1, [pc, #48]	; (11930 <sys_memcpy_swap.constprop.2+0x48>)
   118fe:	480d      	ldr	r0, [pc, #52]	; (11934 <sys_memcpy_swap.constprop.2+0x4c>)
   11900:	f7ef fb44 	bl	f8c <printk>
   11904:	480c      	ldr	r0, [pc, #48]	; (11938 <sys_memcpy_swap.constprop.2+0x50>)
   11906:	f7ef fb41 	bl	f8c <printk>
   1190a:	e7fe      	b.n	1190a <sys_memcpy_swap.constprop.2+0x22>
   1190c:	d2f3      	bcs.n	118f6 <sys_memcpy_swap.constprop.2+0xe>
   1190e:	f100 0310 	add.w	r3, r0, #16
   11912:	4299      	cmp	r1, r3
   11914:	e7ee      	b.n	118f4 <sys_memcpy_swap.constprop.2+0xc>
   11916:	f101 0310 	add.w	r3, r1, #16
   1191a:	3801      	subs	r0, #1
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   1191c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   11920:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   11924:	4299      	cmp	r1, r3
   11926:	d1f9      	bne.n	1191c <sys_memcpy_swap.constprop.2+0x34>
	}
}
   11928:	bd08      	pop	{r3, pc}
   1192a:	bf00      	nop
   1192c:	000192c3 	.word	0x000192c3
   11930:	000192fb 	.word	0x000192fb
   11934:	00015620 	.word	0x00015620
   11938:	00019352 	.word	0x00019352

0001193c <filter_rl_update>:
{
   1193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   1193e:	4e10      	ldr	r6, [pc, #64]	; (11980 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   11940:	4d10      	ldr	r5, [pc, #64]	; (11984 <filter_rl_update+0x48>)
{
   11942:	2400      	movs	r4, #0
		if (rl[i].taken) {
   11944:	2728      	movs	r7, #40	; 0x28
   11946:	fb07 f104 	mul.w	r1, r7, r4
   1194a:	5c73      	ldrb	r3, [r6, r1]
   1194c:	07da      	lsls	r2, r3, #31
   1194e:	d513      	bpl.n	11978 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   11950:	2201      	movs	r2, #1
   11952:	fa02 f004 	lsl.w	r0, r2, r4
   11956:	782a      	ldrb	r2, [r5, #0]
   11958:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1195a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1195e:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11960:	786a      	ldrb	r2, [r5, #1]
   11962:	40a3      	lsls	r3, r4
   11964:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11966:	2206      	movs	r2, #6
   11968:	3101      	adds	r1, #1
   1196a:	fb02 5004 	mla	r0, r2, r4, r5
   1196e:	4431      	add	r1, r6
   11970:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11972:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11974:	f7f0 fa56 	bl	1e24 <memcpy>
   11978:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1197a:	2c08      	cmp	r4, #8
   1197c:	d1e3      	bne.n	11946 <filter_rl_update+0xa>
}
   1197e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11980:	200012b4 	.word	0x200012b4
   11984:	200013f5 	.word	0x200013f5

00011988 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   11988:	2807      	cmp	r0, #7
   1198a:	d80c      	bhi.n	119a6 <ctrl_lrpa_get+0x1e>
   1198c:	2328      	movs	r3, #40	; 0x28
   1198e:	4358      	muls	r0, r3
   11990:	4a06      	ldr	r2, [pc, #24]	; (119ac <ctrl_lrpa_get+0x24>)
   11992:	5c13      	ldrb	r3, [r2, r0]
   11994:	1811      	adds	r1, r2, r0
   11996:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1199a:	b128      	cbz	r0, 119a8 <ctrl_lrpa_get+0x20>
   1199c:	f3c3 0040 	ubfx	r0, r3, #1, #1
   119a0:	b110      	cbz	r0, 119a8 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   119a2:	6a48      	ldr	r0, [r1, #36]	; 0x24
   119a4:	4770      	bx	lr
		return NULL;
   119a6:	2000      	movs	r0, #0
}
   119a8:	4770      	bx	lr
   119aa:	bf00      	nop
   119ac:	200012b4 	.word	0x200012b4

000119b0 <ctrl_irks_get>:
	*count = peer_irk_count;
   119b0:	4b02      	ldr	r3, [pc, #8]	; (119bc <ctrl_irks_get+0xc>)
   119b2:	781b      	ldrb	r3, [r3, #0]
   119b4:	7003      	strb	r3, [r0, #0]
}
   119b6:	4802      	ldr	r0, [pc, #8]	; (119c0 <ctrl_irks_get+0x10>)
   119b8:	4770      	bx	lr
   119ba:	bf00      	nop
   119bc:	2000122a 	.word	0x2000122a
   119c0:	20001233 	.word	0x20001233

000119c4 <ctrl_rl_idx>:
{
   119c4:	b513      	push	{r0, r1, r4, lr}
	if (whitelist) {
   119c6:	2800      	cmp	r0, #0
   119c8:	d026      	beq.n	11a18 <ctrl_rl_idx+0x54>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   119ca:	2907      	cmp	r1, #7
   119cc:	d90f      	bls.n	119ee <ctrl_rl_idx+0x2a>
		LL_ASSERT(wl[devmatch_id].taken);
   119ce:	4b20      	ldr	r3, [pc, #128]	; (11a50 <ctrl_rl_idx+0x8c>)
   119d0:	9301      	str	r3, [sp, #4]
   119d2:	9300      	str	r3, [sp, #0]
   119d4:	4b1f      	ldr	r3, [pc, #124]	; (11a54 <ctrl_rl_idx+0x90>)
   119d6:	4a20      	ldr	r2, [pc, #128]	; (11a58 <ctrl_rl_idx+0x94>)
   119d8:	681c      	ldr	r4, [r3, #0]
   119da:	4920      	ldr	r1, [pc, #128]	; (11a5c <ctrl_rl_idx+0x98>)
   119dc:	4b20      	ldr	r3, [pc, #128]	; (11a60 <ctrl_rl_idx+0x9c>)
   119de:	4821      	ldr	r0, [pc, #132]	; (11a64 <ctrl_rl_idx+0xa0>)
   119e0:	47a0      	blx	r4
   119e2:	4040      	eors	r0, r0
   119e4:	f380 8811 	msr	BASEPRI, r0
   119e8:	f04f 0004 	mov.w	r0, #4
   119ec:	df02      	svc	2
   119ee:	4b1e      	ldr	r3, [pc, #120]	; (11a68 <ctrl_rl_idx+0xa4>)
   119f0:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   119f4:	07d2      	lsls	r2, r2, #31
   119f6:	d409      	bmi.n	11a0c <ctrl_rl_idx+0x48>
   119f8:	4b15      	ldr	r3, [pc, #84]	; (11a50 <ctrl_rl_idx+0x8c>)
   119fa:	9301      	str	r3, [sp, #4]
   119fc:	9300      	str	r3, [sp, #0]
   119fe:	4b15      	ldr	r3, [pc, #84]	; (11a54 <ctrl_rl_idx+0x90>)
   11a00:	4a15      	ldr	r2, [pc, #84]	; (11a58 <ctrl_rl_idx+0x94>)
   11a02:	681c      	ldr	r4, [r3, #0]
   11a04:	4915      	ldr	r1, [pc, #84]	; (11a5c <ctrl_rl_idx+0x98>)
   11a06:	4b16      	ldr	r3, [pc, #88]	; (11a60 <ctrl_rl_idx+0x9c>)
   11a08:	4818      	ldr	r0, [pc, #96]	; (11a6c <ctrl_rl_idx+0xa8>)
   11a0a:	e7e9      	b.n	119e0 <ctrl_rl_idx+0x1c>
		i = wl[devmatch_id].rl_idx;
   11a0c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11a10:	7849      	ldrb	r1, [r1, #1]
}
   11a12:	4608      	mov	r0, r1
   11a14:	b002      	add	sp, #8
   11a16:	bd10      	pop	{r4, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   11a18:	2907      	cmp	r1, #7
   11a1a:	d909      	bls.n	11a30 <ctrl_rl_idx+0x6c>
   11a1c:	4b0c      	ldr	r3, [pc, #48]	; (11a50 <ctrl_rl_idx+0x8c>)
   11a1e:	9301      	str	r3, [sp, #4]
   11a20:	9300      	str	r3, [sp, #0]
   11a22:	4b0c      	ldr	r3, [pc, #48]	; (11a54 <ctrl_rl_idx+0x90>)
   11a24:	4a0c      	ldr	r2, [pc, #48]	; (11a58 <ctrl_rl_idx+0x94>)
   11a26:	681c      	ldr	r4, [r3, #0]
   11a28:	490c      	ldr	r1, [pc, #48]	; (11a5c <ctrl_rl_idx+0x98>)
   11a2a:	4b0d      	ldr	r3, [pc, #52]	; (11a60 <ctrl_rl_idx+0x9c>)
   11a2c:	4810      	ldr	r0, [pc, #64]	; (11a70 <ctrl_rl_idx+0xac>)
   11a2e:	e7d7      	b.n	119e0 <ctrl_rl_idx+0x1c>
		LL_ASSERT(rl[i].taken);
   11a30:	2328      	movs	r3, #40	; 0x28
   11a32:	434b      	muls	r3, r1
   11a34:	4a0f      	ldr	r2, [pc, #60]	; (11a74 <ctrl_rl_idx+0xb0>)
   11a36:	5cd3      	ldrb	r3, [r2, r3]
   11a38:	07db      	lsls	r3, r3, #31
   11a3a:	d4ea      	bmi.n	11a12 <ctrl_rl_idx+0x4e>
   11a3c:	4b04      	ldr	r3, [pc, #16]	; (11a50 <ctrl_rl_idx+0x8c>)
   11a3e:	9301      	str	r3, [sp, #4]
   11a40:	9300      	str	r3, [sp, #0]
   11a42:	4b04      	ldr	r3, [pc, #16]	; (11a54 <ctrl_rl_idx+0x90>)
   11a44:	4a04      	ldr	r2, [pc, #16]	; (11a58 <ctrl_rl_idx+0x94>)
   11a46:	681c      	ldr	r4, [r3, #0]
   11a48:	4904      	ldr	r1, [pc, #16]	; (11a5c <ctrl_rl_idx+0x98>)
   11a4a:	4b05      	ldr	r3, [pc, #20]	; (11a60 <ctrl_rl_idx+0x9c>)
   11a4c:	480a      	ldr	r0, [pc, #40]	; (11a78 <ctrl_rl_idx+0xb4>)
   11a4e:	e7c7      	b.n	119e0 <ctrl_rl_idx+0x1c>
   11a50:	0001563e 	.word	0x0001563e
   11a54:	20003a5c 	.word	0x20003a5c
   11a58:	000167b9 	.word	0x000167b9
   11a5c:	00016808 	.word	0x00016808
   11a60:	00018f9a 	.word	0x00018f9a
   11a64:	00019034 	.word	0x00019034
   11a68:	20001427 	.word	0x20001427
   11a6c:	00019101 	.word	0x00019101
   11a70:	00019138 	.word	0x00019138
   11a74:	200012b4 	.word	0x200012b4
   11a78:	00019205 	.word	0x00019205

00011a7c <ctrl_rl_irk_idx>:
{
   11a7c:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11a7e:	4b1a      	ldr	r3, [pc, #104]	; (11ae8 <ctrl_rl_irk_idx+0x6c>)
   11a80:	781b      	ldrb	r3, [r3, #0]
   11a82:	4283      	cmp	r3, r0
   11a84:	d80f      	bhi.n	11aa6 <ctrl_rl_irk_idx+0x2a>
   11a86:	4b19      	ldr	r3, [pc, #100]	; (11aec <ctrl_rl_irk_idx+0x70>)
   11a88:	9301      	str	r3, [sp, #4]
   11a8a:	9300      	str	r3, [sp, #0]
   11a8c:	4b18      	ldr	r3, [pc, #96]	; (11af0 <ctrl_rl_irk_idx+0x74>)
   11a8e:	4a19      	ldr	r2, [pc, #100]	; (11af4 <ctrl_rl_irk_idx+0x78>)
   11a90:	681c      	ldr	r4, [r3, #0]
   11a92:	4919      	ldr	r1, [pc, #100]	; (11af8 <ctrl_rl_irk_idx+0x7c>)
   11a94:	4b19      	ldr	r3, [pc, #100]	; (11afc <ctrl_rl_irk_idx+0x80>)
   11a96:	481a      	ldr	r0, [pc, #104]	; (11b00 <ctrl_rl_irk_idx+0x84>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11a98:	47a0      	blx	r4
   11a9a:	4040      	eors	r0, r0
   11a9c:	f380 8811 	msr	BASEPRI, r0
   11aa0:	f04f 0004 	mov.w	r0, #4
   11aa4:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11aa6:	4b17      	ldr	r3, [pc, #92]	; (11b04 <ctrl_rl_irk_idx+0x88>)
   11aa8:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11aaa:	2807      	cmp	r0, #7
   11aac:	d909      	bls.n	11ac2 <ctrl_rl_irk_idx+0x46>
   11aae:	4b0f      	ldr	r3, [pc, #60]	; (11aec <ctrl_rl_irk_idx+0x70>)
   11ab0:	9301      	str	r3, [sp, #4]
   11ab2:	9300      	str	r3, [sp, #0]
   11ab4:	4b0e      	ldr	r3, [pc, #56]	; (11af0 <ctrl_rl_irk_idx+0x74>)
   11ab6:	4a0f      	ldr	r2, [pc, #60]	; (11af4 <ctrl_rl_irk_idx+0x78>)
   11ab8:	681c      	ldr	r4, [r3, #0]
   11aba:	490f      	ldr	r1, [pc, #60]	; (11af8 <ctrl_rl_irk_idx+0x7c>)
   11abc:	4b0f      	ldr	r3, [pc, #60]	; (11afc <ctrl_rl_irk_idx+0x80>)
   11abe:	4812      	ldr	r0, [pc, #72]	; (11b08 <ctrl_rl_irk_idx+0x8c>)
   11ac0:	e7ea      	b.n	11a98 <ctrl_rl_irk_idx+0x1c>
	LL_ASSERT(rl[i].taken);
   11ac2:	2328      	movs	r3, #40	; 0x28
   11ac4:	4343      	muls	r3, r0
   11ac6:	4a11      	ldr	r2, [pc, #68]	; (11b0c <ctrl_rl_irk_idx+0x90>)
   11ac8:	5cd3      	ldrb	r3, [r2, r3]
   11aca:	07db      	lsls	r3, r3, #31
   11acc:	d409      	bmi.n	11ae2 <ctrl_rl_irk_idx+0x66>
   11ace:	4b07      	ldr	r3, [pc, #28]	; (11aec <ctrl_rl_irk_idx+0x70>)
   11ad0:	9301      	str	r3, [sp, #4]
   11ad2:	9300      	str	r3, [sp, #0]
   11ad4:	4b06      	ldr	r3, [pc, #24]	; (11af0 <ctrl_rl_irk_idx+0x74>)
   11ad6:	4a07      	ldr	r2, [pc, #28]	; (11af4 <ctrl_rl_irk_idx+0x78>)
   11ad8:	681c      	ldr	r4, [r3, #0]
   11ada:	4907      	ldr	r1, [pc, #28]	; (11af8 <ctrl_rl_irk_idx+0x7c>)
   11adc:	4b07      	ldr	r3, [pc, #28]	; (11afc <ctrl_rl_irk_idx+0x80>)
   11ade:	480c      	ldr	r0, [pc, #48]	; (11b10 <ctrl_rl_irk_idx+0x94>)
   11ae0:	e7da      	b.n	11a98 <ctrl_rl_irk_idx+0x1c>
}
   11ae2:	b002      	add	sp, #8
   11ae4:	bd10      	pop	{r4, pc}
   11ae6:	bf00      	nop
   11ae8:	2000122a 	.word	0x2000122a
   11aec:	0001563e 	.word	0x0001563e
   11af0:	20003a5c 	.word	0x20003a5c
   11af4:	000167b9 	.word	0x000167b9
   11af8:	00016808 	.word	0x00016808
   11afc:	00018fa6 	.word	0x00018fa6
   11b00:	00019232 	.word	0x00019232
   11b04:	2000122b 	.word	0x2000122b
   11b08:	00019270 	.word	0x00019270
   11b0c:	200012b4 	.word	0x200012b4
   11b10:	00019205 	.word	0x00019205

00011b14 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11b14:	2807      	cmp	r0, #7
{
   11b16:	b513      	push	{r0, r1, r4, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11b18:	d819      	bhi.n	11b4e <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   11b1a:	2328      	movs	r3, #40	; 0x28
   11b1c:	4358      	muls	r0, r3
   11b1e:	4b0d      	ldr	r3, [pc, #52]	; (11b54 <ctrl_irk_whitelisted+0x40>)
   11b20:	5c18      	ldrb	r0, [r3, r0]
   11b22:	07c3      	lsls	r3, r0, #31
   11b24:	d40f      	bmi.n	11b46 <ctrl_irk_whitelisted+0x32>
   11b26:	4b0c      	ldr	r3, [pc, #48]	; (11b58 <ctrl_irk_whitelisted+0x44>)
   11b28:	9301      	str	r3, [sp, #4]
   11b2a:	9300      	str	r3, [sp, #0]
   11b2c:	4b0b      	ldr	r3, [pc, #44]	; (11b5c <ctrl_irk_whitelisted+0x48>)
   11b2e:	4a0c      	ldr	r2, [pc, #48]	; (11b60 <ctrl_irk_whitelisted+0x4c>)
   11b30:	681c      	ldr	r4, [r3, #0]
   11b32:	490c      	ldr	r1, [pc, #48]	; (11b64 <ctrl_irk_whitelisted+0x50>)
   11b34:	4b0c      	ldr	r3, [pc, #48]	; (11b68 <ctrl_irk_whitelisted+0x54>)
   11b36:	480d      	ldr	r0, [pc, #52]	; (11b6c <ctrl_irk_whitelisted+0x58>)
   11b38:	47a0      	blx	r4
   11b3a:	4040      	eors	r0, r0
   11b3c:	f380 8811 	msr	BASEPRI, r0
   11b40:	f04f 0004 	mov.w	r0, #4
   11b44:	df02      	svc	2
	return rl[rl_idx].wl;
   11b46:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   11b4a:	b002      	add	sp, #8
   11b4c:	bd10      	pop	{r4, pc}
		return false;
   11b4e:	2000      	movs	r0, #0
   11b50:	e7fb      	b.n	11b4a <ctrl_irk_whitelisted+0x36>
   11b52:	bf00      	nop
   11b54:	200012b4 	.word	0x200012b4
   11b58:	0001563e 	.word	0x0001563e
   11b5c:	20003a5c 	.word	0x20003a5c
   11b60:	000167b9 	.word	0x000167b9
   11b64:	00016808 	.word	0x00016808
   11b68:	00018fb6 	.word	0x00018fb6
   11b6c:	00019002 	.word	0x00019002

00011b70 <ctrl_filter_get>:
}
   11b70:	4b03      	ldr	r3, [pc, #12]	; (11b80 <ctrl_filter_get+0x10>)
   11b72:	4a04      	ldr	r2, [pc, #16]	; (11b84 <ctrl_filter_get+0x14>)
   11b74:	2800      	cmp	r0, #0
   11b76:	bf14      	ite	ne
   11b78:	4610      	movne	r0, r2
   11b7a:	4618      	moveq	r0, r3
   11b7c:	4770      	bx	lr
   11b7e:	bf00      	nop
   11b80:	200013f5 	.word	0x200013f5
   11b84:	20001467 	.word	0x20001467

00011b88 <ll_wl_size_get>:
   11b88:	2008      	movs	r0, #8
   11b8a:	4770      	bx	lr

00011b8c <ll_wl_clear>:
{
   11b8c:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11b8e:	f7fe fd3f 	bl	10610 <radio_adv_filter_pol_get>
   11b92:	4604      	mov	r4, r0
   11b94:	b110      	cbz	r0, 11b9c <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b96:	240c      	movs	r4, #12
}
   11b98:	4620      	mov	r0, r4
   11b9a:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11b9c:	f7fe fd5a 	bl	10654 <radio_scan_filter_pol_get>
   11ba0:	07c3      	lsls	r3, r0, #31
   11ba2:	d4f8      	bmi.n	11b96 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   11ba4:	4a07      	ldr	r2, [pc, #28]	; (11bc4 <ll_wl_clear+0x38>)
   11ba6:	4623      	mov	r3, r4
   11ba8:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11bac:	f36f 0100 	bfc	r1, #0, #1
   11bb0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11bb4:	3301      	adds	r3, #1
   11bb6:	2b08      	cmp	r3, #8
   11bb8:	d1f6      	bne.n	11ba8 <ll_wl_clear+0x1c>
	wl_anon = 0;
   11bba:	4b03      	ldr	r3, [pc, #12]	; (11bc8 <ll_wl_clear+0x3c>)
   11bbc:	2200      	movs	r2, #0
   11bbe:	701a      	strb	r2, [r3, #0]
	return 0;
   11bc0:	e7ea      	b.n	11b98 <ll_wl_clear+0xc>
   11bc2:	bf00      	nop
   11bc4:	20001427 	.word	0x20001427
   11bc8:	20001918 	.word	0x20001918

00011bcc <ll_wl_remove>:
{
   11bcc:	b538      	push	{r3, r4, r5, lr}
   11bce:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11bd0:	f7fe fd1e 	bl	10610 <radio_adv_filter_pol_get>
   11bd4:	4604      	mov	r4, r0
   11bd6:	b110      	cbz	r0, 11bde <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11bd8:	240c      	movs	r4, #12
}
   11bda:	4620      	mov	r0, r4
   11bdc:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11bde:	f7fe fd39 	bl	10654 <radio_scan_filter_pol_get>
   11be2:	07c3      	lsls	r3, r0, #31
   11be4:	d4f8      	bmi.n	11bd8 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   11be6:	7828      	ldrb	r0, [r5, #0]
   11be8:	28ff      	cmp	r0, #255	; 0xff
   11bea:	d102      	bne.n	11bf2 <ll_wl_remove+0x26>
		wl_anon = 0;
   11bec:	4b0f      	ldr	r3, [pc, #60]	; (11c2c <ll_wl_remove+0x60>)
   11bee:	701c      	strb	r4, [r3, #0]
		return 0;
   11bf0:	e7f3      	b.n	11bda <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   11bf2:	4622      	mov	r2, r4
   11bf4:	1c69      	adds	r1, r5, #1
   11bf6:	f7ff fdf9 	bl	117ec <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11bfa:	2807      	cmp	r0, #7
   11bfc:	d813      	bhi.n	11c26 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   11bfe:	4b0c      	ldr	r3, [pc, #48]	; (11c30 <ll_wl_remove+0x64>)
   11c00:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   11c04:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   11c06:	2d07      	cmp	r5, #7
   11c08:	d806      	bhi.n	11c18 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   11c0a:	2228      	movs	r2, #40	; 0x28
   11c0c:	4909      	ldr	r1, [pc, #36]	; (11c34 <ll_wl_remove+0x68>)
   11c0e:	436a      	muls	r2, r5
   11c10:	5c8d      	ldrb	r5, [r1, r2]
   11c12:	f364 1545 	bfi	r5, r4, #5, #1
   11c16:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   11c18:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11c1c:	f36f 0200 	bfc	r2, #0, #1
   11c20:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   11c24:	e7d9      	b.n	11bda <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11c26:	2402      	movs	r4, #2
   11c28:	e7d7      	b.n	11bda <ll_wl_remove+0xe>
   11c2a:	bf00      	nop
   11c2c:	20001918 	.word	0x20001918
   11c30:	20001427 	.word	0x20001427
   11c34:	200012b4 	.word	0x200012b4

00011c38 <ll_filters_scan_update>:
{
   11c38:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   11c3a:	4b0d      	ldr	r3, [pc, #52]	; (11c70 <ll_filters_scan_update+0x38>)
   11c3c:	2200      	movs	r2, #0
   11c3e:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   11c40:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   11c42:	07c3      	lsls	r3, r0, #31
   11c44:	d504      	bpl.n	11c50 <ll_filters_scan_update+0x18>
   11c46:	f7fe fce3 	bl	10610 <radio_adv_filter_pol_get>
   11c4a:	b908      	cbnz	r0, 11c50 <ll_filters_scan_update+0x18>
		filter_wl_update();
   11c4c:	f7ff fe00 	bl	11850 <filter_wl_update>
	filter->enable_bitmask = 0;
   11c50:	4b08      	ldr	r3, [pc, #32]	; (11c74 <ll_filters_scan_update+0x3c>)
   11c52:	2200      	movs	r2, #0
   11c54:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   11c56:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   11c58:	4b07      	ldr	r3, [pc, #28]	; (11c78 <ll_filters_scan_update+0x40>)
   11c5a:	781b      	ldrb	r3, [r3, #0]
   11c5c:	b133      	cbz	r3, 11c6c <ll_filters_scan_update+0x34>
   11c5e:	f7fe fccf 	bl	10600 <ll_adv_is_enabled>
   11c62:	b918      	cbnz	r0, 11c6c <ll_filters_scan_update+0x34>
}
   11c64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   11c68:	f7ff be68 	b.w	1193c <filter_rl_update>
   11c6c:	bd08      	pop	{r3, pc}
   11c6e:	bf00      	nop
   11c70:	20001467 	.word	0x20001467
   11c74:	200013f5 	.word	0x200013f5
   11c78:	200013f4 	.word	0x200013f4

00011c7c <ll_rl_find>:
{
   11c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c80:	468a      	mov	sl, r1
	if (free) {
   11c82:	4614      	mov	r4, r2
   11c84:	b10a      	cbz	r2, 11c8a <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   11c86:	23ff      	movs	r3, #255	; 0xff
   11c88:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11c8a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 11ce0 <ll_rl_find+0x64>
{
   11c8e:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11c90:	f000 0901 	and.w	r9, r0, #1
   11c94:	2628      	movs	r6, #40	; 0x28
   11c96:	436e      	muls	r6, r5
   11c98:	b2ef      	uxtb	r7, r5
   11c9a:	f818 3006 	ldrb.w	r3, [r8, r6]
   11c9e:	07da      	lsls	r2, r3, #31
   11ca0:	d51a      	bpl.n	11cd8 <ll_rl_find+0x5c>
   11ca2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11ca6:	454b      	cmp	r3, r9
   11ca8:	d10f      	bne.n	11cca <ll_rl_find+0x4e>
   11caa:	1c70      	adds	r0, r6, #1
   11cac:	2206      	movs	r2, #6
   11cae:	4651      	mov	r1, sl
   11cb0:	4440      	add	r0, r8
   11cb2:	f7f0 f8a2 	bl	1dfa <memcmp>
   11cb6:	b160      	cbz	r0, 11cd2 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11cb8:	b13c      	cbz	r4, 11cca <ll_rl_find+0x4e>
   11cba:	f818 3006 	ldrb.w	r3, [r8, r6]
   11cbe:	07db      	lsls	r3, r3, #31
   11cc0:	d403      	bmi.n	11cca <ll_rl_find+0x4e>
   11cc2:	7823      	ldrb	r3, [r4, #0]
   11cc4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11cc6:	bf08      	it	eq
   11cc8:	7027      	strbeq	r7, [r4, #0]
   11cca:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11ccc:	2d08      	cmp	r5, #8
   11cce:	d1e1      	bne.n	11c94 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   11cd0:	27ff      	movs	r7, #255	; 0xff
}
   11cd2:	4638      	mov	r0, r7
   11cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11cd8:	2c00      	cmp	r4, #0
   11cda:	d1f2      	bne.n	11cc2 <ll_rl_find+0x46>
   11cdc:	e7f5      	b.n	11cca <ll_rl_find+0x4e>
   11cde:	bf00      	nop
   11ce0:	200012b4 	.word	0x200012b4

00011ce4 <ll_wl_add>:
{
   11ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11ce8:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11cea:	f7fe fc91 	bl	10610 <radio_adv_filter_pol_get>
   11cee:	4605      	mov	r5, r0
   11cf0:	b120      	cbz	r0, 11cfc <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11cf2:	250c      	movs	r5, #12
}
   11cf4:	4628      	mov	r0, r5
   11cf6:	b002      	add	sp, #8
   11cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11cfc:	f7fe fcaa 	bl	10654 <radio_scan_filter_pol_get>
   11d00:	07c3      	lsls	r3, r0, #31
   11d02:	d4f6      	bmi.n	11cf2 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   11d04:	7838      	ldrb	r0, [r7, #0]
   11d06:	28ff      	cmp	r0, #255	; 0xff
   11d08:	d103      	bne.n	11d12 <ll_wl_add+0x2e>
		wl_anon = 1;
   11d0a:	4b1f      	ldr	r3, [pc, #124]	; (11d88 <ll_wl_add+0xa4>)
   11d0c:	2201      	movs	r2, #1
   11d0e:	701a      	strb	r2, [r3, #0]
		return 0;
   11d10:	e7f0      	b.n	11cf4 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   11d12:	f107 0801 	add.w	r8, r7, #1
   11d16:	f10d 0207 	add.w	r2, sp, #7
   11d1a:	4641      	mov	r1, r8
   11d1c:	f7ff fd66 	bl	117ec <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11d20:	2807      	cmp	r0, #7
   11d22:	d92d      	bls.n	11d80 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   11d24:	f89d 6007 	ldrb.w	r6, [sp, #7]
   11d28:	2e07      	cmp	r6, #7
   11d2a:	d82b      	bhi.n	11d84 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11d2c:	4c17      	ldr	r4, [pc, #92]	; (11d8c <ll_wl_add+0xa8>)
   11d2e:	783a      	ldrb	r2, [r7, #0]
   11d30:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   11d34:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   11d38:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   11d3c:	4641      	mov	r1, r8
   11d3e:	2206      	movs	r2, #6
   11d40:	3002      	adds	r0, #2
   11d42:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   11d46:	f7f0 f86d 	bl	1e24 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11d4a:	462a      	mov	r2, r5
   11d4c:	4641      	mov	r1, r8
   11d4e:	7838      	ldrb	r0, [r7, #0]
   11d50:	f7ff ff94 	bl	11c7c <ll_rl_find>
   11d54:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   11d56:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   11d58:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   11d5a:	d80e      	bhi.n	11d7a <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   11d5c:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   11d5e:	2328      	movs	r3, #40	; 0x28
   11d60:	4a0b      	ldr	r2, [pc, #44]	; (11d90 <ll_wl_add+0xac>)
   11d62:	4358      	muls	r0, r3
   11d64:	5c13      	ldrb	r3, [r2, r0]
   11d66:	f043 0320 	orr.w	r3, r3, #32
   11d6a:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   11d6c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   11d70:	f043 0301 	orr.w	r3, r3, #1
   11d74:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   11d78:	e7bc      	b.n	11cf4 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   11d7a:	22ff      	movs	r2, #255	; 0xff
   11d7c:	705a      	strb	r2, [r3, #1]
   11d7e:	e7f5      	b.n	11d6c <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   11d80:	2512      	movs	r5, #18
   11d82:	e7b7      	b.n	11cf4 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11d84:	2507      	movs	r5, #7
	return wl_add(addr);
   11d86:	e7b5      	b.n	11cf4 <ll_wl_add+0x10>
   11d88:	20001918 	.word	0x20001918
   11d8c:	20001427 	.word	0x20001427
   11d90:	200012b4 	.word	0x200012b4

00011d94 <ctrl_rl_idx_allowed>:
{
   11d94:	b513      	push	{r0, r1, r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   11d96:	4b12      	ldr	r3, [pc, #72]	; (11de0 <ctrl_rl_idx_allowed+0x4c>)
   11d98:	781b      	ldrb	r3, [r3, #0]
   11d9a:	b1f3      	cbz	r3, 11dda <ctrl_rl_idx_allowed+0x46>
   11d9c:	2907      	cmp	r1, #7
   11d9e:	d81c      	bhi.n	11dda <ctrl_rl_idx_allowed+0x46>
   11da0:	b9d8      	cbnz	r0, 11dda <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   11da2:	2328      	movs	r3, #40	; 0x28
   11da4:	4359      	muls	r1, r3
   11da6:	4b0f      	ldr	r3, [pc, #60]	; (11de4 <ctrl_rl_idx_allowed+0x50>)
   11da8:	5c58      	ldrb	r0, [r3, r1]
   11daa:	07c2      	lsls	r2, r0, #31
   11dac:	d40f      	bmi.n	11dce <ctrl_rl_idx_allowed+0x3a>
   11dae:	4b0e      	ldr	r3, [pc, #56]	; (11de8 <ctrl_rl_idx_allowed+0x54>)
   11db0:	9301      	str	r3, [sp, #4]
   11db2:	9300      	str	r3, [sp, #0]
   11db4:	4b0d      	ldr	r3, [pc, #52]	; (11dec <ctrl_rl_idx_allowed+0x58>)
   11db6:	4a0e      	ldr	r2, [pc, #56]	; (11df0 <ctrl_rl_idx_allowed+0x5c>)
   11db8:	681c      	ldr	r4, [r3, #0]
   11dba:	490e      	ldr	r1, [pc, #56]	; (11df4 <ctrl_rl_idx_allowed+0x60>)
   11dbc:	4b0e      	ldr	r3, [pc, #56]	; (11df8 <ctrl_rl_idx_allowed+0x64>)
   11dbe:	480f      	ldr	r0, [pc, #60]	; (11dfc <ctrl_rl_idx_allowed+0x68>)
   11dc0:	47a0      	blx	r4
   11dc2:	4040      	eors	r0, r0
   11dc4:	f380 8811 	msr	BASEPRI, r0
   11dc8:	f04f 0004 	mov.w	r0, #4
   11dcc:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   11dce:	0743      	lsls	r3, r0, #29
   11dd0:	d503      	bpl.n	11dda <ctrl_rl_idx_allowed+0x46>
   11dd2:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   11dd6:	b002      	add	sp, #8
   11dd8:	bd10      	pop	{r4, pc}
		return true;
   11dda:	2001      	movs	r0, #1
   11ddc:	e7fb      	b.n	11dd6 <ctrl_rl_idx_allowed+0x42>
   11dde:	bf00      	nop
   11de0:	200013f4 	.word	0x200013f4
   11de4:	200012b4 	.word	0x200012b4
   11de8:	0001563e 	.word	0x0001563e
   11dec:	20003a5c 	.word	0x20003a5c
   11df0:	000167b9 	.word	0x000167b9
   11df4:	00016808 	.word	0x00016808
   11df8:	00018fcb 	.word	0x00018fcb
   11dfc:	00019002 	.word	0x00019002

00011e00 <ll_rl_id_addr_get>:
{
   11e00:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11e02:	2b07      	cmp	r3, #7
{
   11e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11e06:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11e08:	d90f      	bls.n	11e2a <ll_rl_id_addr_get+0x2a>
   11e0a:	4b17      	ldr	r3, [pc, #92]	; (11e68 <ll_rl_id_addr_get+0x68>)
   11e0c:	9301      	str	r3, [sp, #4]
   11e0e:	9300      	str	r3, [sp, #0]
   11e10:	4b16      	ldr	r3, [pc, #88]	; (11e6c <ll_rl_id_addr_get+0x6c>)
   11e12:	4a17      	ldr	r2, [pc, #92]	; (11e70 <ll_rl_id_addr_get+0x70>)
   11e14:	681c      	ldr	r4, [r3, #0]
   11e16:	4917      	ldr	r1, [pc, #92]	; (11e74 <ll_rl_id_addr_get+0x74>)
   11e18:	4b17      	ldr	r3, [pc, #92]	; (11e78 <ll_rl_id_addr_get+0x78>)
   11e1a:	4818      	ldr	r0, [pc, #96]	; (11e7c <ll_rl_id_addr_get+0x7c>)
	LL_ASSERT(rl[rl_idx].taken);
   11e1c:	47a0      	blx	r4
   11e1e:	4040      	eors	r0, r0
   11e20:	f380 8811 	msr	BASEPRI, r0
   11e24:	f04f 0004 	mov.w	r0, #4
   11e28:	df02      	svc	2
   11e2a:	2528      	movs	r5, #40	; 0x28
   11e2c:	4c14      	ldr	r4, [pc, #80]	; (11e80 <ll_rl_id_addr_get+0x80>)
   11e2e:	fb05 f203 	mul.w	r2, r5, r3
   11e32:	5ca2      	ldrb	r2, [r4, r2]
   11e34:	f012 0f01 	tst.w	r2, #1
   11e38:	d109      	bne.n	11e4e <ll_rl_id_addr_get+0x4e>
   11e3a:	4b0b      	ldr	r3, [pc, #44]	; (11e68 <ll_rl_id_addr_get+0x68>)
   11e3c:	9301      	str	r3, [sp, #4]
   11e3e:	9300      	str	r3, [sp, #0]
   11e40:	4b0a      	ldr	r3, [pc, #40]	; (11e6c <ll_rl_id_addr_get+0x6c>)
   11e42:	4a0b      	ldr	r2, [pc, #44]	; (11e70 <ll_rl_id_addr_get+0x70>)
   11e44:	681c      	ldr	r4, [r3, #0]
   11e46:	490b      	ldr	r1, [pc, #44]	; (11e74 <ll_rl_id_addr_get+0x74>)
   11e48:	4b0b      	ldr	r3, [pc, #44]	; (11e78 <ll_rl_id_addr_get+0x78>)
   11e4a:	480e      	ldr	r0, [pc, #56]	; (11e84 <ll_rl_id_addr_get+0x84>)
   11e4c:	e7e6      	b.n	11e1c <ll_rl_id_addr_get+0x1c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   11e4e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   11e52:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11e54:	fb05 4103 	mla	r1, r5, r3, r4
   11e58:	2206      	movs	r2, #6
   11e5a:	3101      	adds	r1, #1
}
   11e5c:	b003      	add	sp, #12
   11e5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11e62:	f7ef bfdf 	b.w	1e24 <memcpy>
   11e66:	bf00      	nop
   11e68:	0001563e 	.word	0x0001563e
   11e6c:	20003a5c 	.word	0x20003a5c
   11e70:	000167b9 	.word	0x000167b9
   11e74:	00016808 	.word	0x00016808
   11e78:	00018fdf 	.word	0x00018fdf
   11e7c:	00019297 	.word	0x00019297
   11e80:	200012b4 	.word	0x200012b4
   11e84:	00019002 	.word	0x00019002

00011e88 <ctrl_rl_addr_allowed>:
{
   11e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   11e8c:	4b1a      	ldr	r3, [pc, #104]	; (11ef8 <ctrl_rl_addr_allowed+0x70>)
   11e8e:	781b      	ldrb	r3, [r3, #0]
   11e90:	b37b      	cbz	r3, 11ef2 <ctrl_rl_addr_allowed+0x6a>
   11e92:	7813      	ldrb	r3, [r2, #0]
   11e94:	2bff      	cmp	r3, #255	; 0xff
   11e96:	d12c      	bne.n	11ef2 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11e98:	4e18      	ldr	r6, [pc, #96]	; (11efc <ctrl_rl_addr_allowed+0x74>)
   11e9a:	2400      	movs	r4, #0
   11e9c:	f04f 0828 	mov.w	r8, #40	; 0x28
   11ea0:	46b6      	mov	lr, r6
   11ea2:	fb08 f304 	mul.w	r3, r8, r4
   11ea6:	fa5f fc84 	uxtb.w	ip, r4
   11eaa:	5cf7      	ldrb	r7, [r6, r3]
   11eac:	f017 0f01 	tst.w	r7, #1
   11eb0:	eb06 0503 	add.w	r5, r6, r3
   11eb4:	d01a      	beq.n	11eec <ctrl_rl_addr_allowed+0x64>
   11eb6:	f3c7 1780 	ubfx	r7, r7, #6, #1
   11eba:	4287      	cmp	r7, r0
   11ebc:	d116      	bne.n	11eec <ctrl_rl_addr_allowed+0x64>
   11ebe:	3306      	adds	r3, #6
   11ec0:	1e4f      	subs	r7, r1, #1
   11ec2:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   11ec4:	f815 af01 	ldrb.w	sl, [r5, #1]!
   11ec8:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   11ecc:	45ca      	cmp	sl, r9
   11ece:	d10d      	bne.n	11eec <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   11ed0:	429d      	cmp	r5, r3
   11ed2:	d1f7      	bne.n	11ec4 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   11ed4:	2328      	movs	r3, #40	; 0x28
   11ed6:	435c      	muls	r4, r3
				*rl_idx = i;
   11ed8:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   11edc:	f81e 0004 	ldrb.w	r0, [lr, r4]
   11ee0:	0743      	lsls	r3, r0, #29
   11ee2:	d506      	bpl.n	11ef2 <ctrl_rl_addr_allowed+0x6a>
   11ee4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11eec:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11eee:	2c08      	cmp	r4, #8
   11ef0:	d1d7      	bne.n	11ea2 <ctrl_rl_addr_allowed+0x1a>
   11ef2:	2001      	movs	r0, #1
}
   11ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11ef8:	200013f4 	.word	0x200013f4
   11efc:	200012b4 	.word	0x200012b4

00011f00 <ctrl_rl_addr_resolve>:
{
   11f00:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   11f02:	4c0d      	ldr	r4, [pc, #52]	; (11f38 <ctrl_rl_addr_resolve+0x38>)
   11f04:	7824      	ldrb	r4, [r4, #0]
   11f06:	b1a4      	cbz	r4, 11f32 <ctrl_rl_addr_resolve+0x32>
   11f08:	2a07      	cmp	r2, #7
   11f0a:	d812      	bhi.n	11f32 <ctrl_rl_addr_resolve+0x32>
   11f0c:	2528      	movs	r5, #40	; 0x28
   11f0e:	4c0b      	ldr	r4, [pc, #44]	; (11f3c <ctrl_rl_addr_resolve+0x3c>)
   11f10:	fb05 f602 	mul.w	r6, r5, r2
   11f14:	5da6      	ldrb	r6, [r4, r6]
   11f16:	0736      	lsls	r6, r6, #28
   11f18:	d50b      	bpl.n	11f32 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   11f1a:	b150      	cbz	r0, 11f32 <ctrl_rl_addr_resolve+0x32>
   11f1c:	794b      	ldrb	r3, [r1, #5]
   11f1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11f22:	2b40      	cmp	r3, #64	; 0x40
   11f24:	d105      	bne.n	11f32 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11f26:	fb05 4202 	mla	r2, r5, r2, r4
   11f2a:	1dd0      	adds	r0, r2, #7
}
   11f2c:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11f2e:	f7f0 b88e 	b.w	204e <bt_rpa_irk_matches>
}
   11f32:	2000      	movs	r0, #0
   11f34:	bc70      	pop	{r4, r5, r6}
   11f36:	4770      	bx	lr
   11f38:	200013f4 	.word	0x200013f4
   11f3c:	200012b4 	.word	0x200012b4

00011f40 <ctrl_rl_enabled>:
	return rl_enable;
   11f40:	4b02      	ldr	r3, [pc, #8]	; (11f4c <ctrl_rl_enabled+0xc>)
   11f42:	7818      	ldrb	r0, [r3, #0]
}
   11f44:	3000      	adds	r0, #0
   11f46:	bf18      	it	ne
   11f48:	2001      	movne	r0, #1
   11f4a:	4770      	bx	lr
   11f4c:	200013f4 	.word	0x200013f4

00011f50 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   11f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f54:	b089      	sub	sp, #36	; 0x24
   11f56:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   11f58:	f002 fc16 	bl	14788 <_impl_k_uptime_get>
   11f5c:	4680      	mov	r8, r0
   11f5e:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   11f60:	2c00      	cmp	r4, #0
   11f62:	d142      	bne.n	11fea <ll_rl_rpa_update+0x9a>
   11f64:	4b38      	ldr	r3, [pc, #224]	; (12048 <ll_rl_rpa_update+0xf8>)
   11f66:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f6a:	1c5c      	adds	r4, r3, #1
   11f6c:	bf08      	it	eq
   11f6e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11f72:	d03a      	beq.n	11fea <ll_rl_rpa_update+0x9a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11f74:	1a82      	subs	r2, r0, r2
   11f76:	eb61 0303 	sbc.w	r3, r1, r3
   11f7a:	4934      	ldr	r1, [pc, #208]	; (1204c <ll_rl_rpa_update+0xfc>)
   11f7c:	6808      	ldr	r0, [r1, #0]
   11f7e:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   11f80:	4282      	cmp	r2, r0
   11f82:	418b      	sbcs	r3, r1
   11f84:	bfac      	ite	ge
   11f86:	2601      	movge	r6, #1
   11f88:	2600      	movlt	r6, #0
   11f8a:	4d31      	ldr	r5, [pc, #196]	; (12050 <ll_rl_rpa_update+0x100>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11f8c:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   11f90:	2400      	movs	r4, #0
   11f92:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11f94:	2328      	movs	r3, #40	; 0x28
   11f96:	4363      	muls	r3, r4
   11f98:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11f9c:	07d8      	lsls	r0, r3, #31
   11f9e:	d547      	bpl.n	12030 <ll_rl_rpa_update+0xe0>
   11fa0:	b90e      	cbnz	r6, 11fa6 <ll_rl_rpa_update+0x56>
   11fa2:	0799      	lsls	r1, r3, #30
   11fa4:	d444      	bmi.n	12030 <ll_rl_rpa_update+0xe0>

			if (rl[i].pirk) {
   11fa6:	2328      	movs	r3, #40	; 0x28
   11fa8:	4363      	muls	r3, r4
   11faa:	5cfb      	ldrb	r3, [r7, r3]
   11fac:	075a      	lsls	r2, r3, #29
   11fae:	d51e      	bpl.n	11fee <ll_rl_rpa_update+0x9e>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   11fb0:	7c29      	ldrb	r1, [r5, #16]
   11fb2:	4b28      	ldr	r3, [pc, #160]	; (12054 <ll_rl_rpa_update+0x104>)
   11fb4:	a804      	add	r0, sp, #16
   11fb6:	eb03 1101 	add.w	r1, r3, r1, lsl #4
   11fba:	f7ff fc95 	bl	118e8 <sys_memcpy_swap.constprop.2>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   11fbe:	f105 0117 	add.w	r1, r5, #23
   11fc2:	a804      	add	r0, sp, #16
   11fc4:	f7f0 f856 	bl	2074 <bt_rpa_create>
				LL_ASSERT(!err);
   11fc8:	b188      	cbz	r0, 11fee <ll_rl_rpa_update+0x9e>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   11fca:	4b23      	ldr	r3, [pc, #140]	; (12058 <ll_rl_rpa_update+0x108>)
   11fcc:	9301      	str	r3, [sp, #4]
   11fce:	9300      	str	r3, [sp, #0]
   11fd0:	4b22      	ldr	r3, [pc, #136]	; (1205c <ll_rl_rpa_update+0x10c>)
   11fd2:	4a23      	ldr	r2, [pc, #140]	; (12060 <ll_rl_rpa_update+0x110>)
   11fd4:	681c      	ldr	r4, [r3, #0]
   11fd6:	4923      	ldr	r1, [pc, #140]	; (12064 <ll_rl_rpa_update+0x114>)
   11fd8:	4b23      	ldr	r3, [pc, #140]	; (12068 <ll_rl_rpa_update+0x118>)
   11fda:	4824      	ldr	r0, [pc, #144]	; (1206c <ll_rl_rpa_update+0x11c>)
   11fdc:	47a0      	blx	r4
   11fde:	4040      	eors	r0, r0
   11fe0:	f380 8811 	msr	BASEPRI, r0
   11fe4:	f04f 0004 	mov.w	r0, #4
   11fe8:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   11fea:	2601      	movs	r6, #1
   11fec:	e7cd      	b.n	11f8a <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   11fee:	2328      	movs	r3, #40	; 0x28
   11ff0:	4363      	muls	r3, r4
   11ff2:	5cfb      	ldrb	r3, [r7, r3]
   11ff4:	071b      	lsls	r3, r3, #28
   11ff6:	d515      	bpl.n	12024 <ll_rl_rpa_update+0xd4>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11ff8:	f10d 0a10 	add.w	sl, sp, #16
   11ffc:	4651      	mov	r1, sl
   11ffe:	4628      	mov	r0, r5
   12000:	f7f0 f838 	bl	2074 <bt_rpa_create>
				LL_ASSERT(!err);
   12004:	2800      	cmp	r0, #0
   12006:	d1e0      	bne.n	11fca <ll_rl_rpa_update+0x7a>
   12008:	4b19      	ldr	r3, [pc, #100]	; (12070 <ll_rl_rpa_update+0x120>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   1200a:	f8c5 a01d 	str.w	sl, [r5, #29]
   1200e:	2206      	movs	r2, #6
   12010:	fb02 3304 	mla	r3, r2, r4, r3
   12014:	4618      	mov	r0, r3
   12016:	4651      	mov	r1, sl
   12018:	9303      	str	r3, [sp, #12]
   1201a:	f7ef ff03 	bl	1e24 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   1201e:	9b03      	ldr	r3, [sp, #12]
   12020:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   12024:	2328      	movs	r3, #40	; 0x28
   12026:	4363      	muls	r3, r4
   12028:	5cfa      	ldrb	r2, [r7, r3]
   1202a:	f042 0202 	orr.w	r2, r2, #2
   1202e:	54fa      	strb	r2, [r7, r3]
   12030:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12032:	2c08      	cmp	r4, #8
   12034:	f105 0528 	add.w	r5, r5, #40	; 0x28
   12038:	d1ac      	bne.n	11f94 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   1203a:	b116      	cbz	r6, 12042 <ll_rl_rpa_update+0xf2>
		rpa_last_ms = now;
   1203c:	4b02      	ldr	r3, [pc, #8]	; (12048 <ll_rl_rpa_update+0xf8>)
   1203e:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   12042:	b009      	add	sp, #36	; 0x24
   12044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12048:	20001910 	.word	0x20001910
   1204c:	20001944 	.word	0x20001944
   12050:	200012bb 	.word	0x200012bb
   12054:	20001233 	.word	0x20001233
   12058:	0001563e 	.word	0x0001563e
   1205c:	20003a5c 	.word	0x20003a5c
   12060:	000167b9 	.word	0x000167b9
   12064:	00016808 	.word	0x00016808
   12068:	00018ff1 	.word	0x00018ff1
   1206c:	00018f3f 	.word	0x00018f3f
   12070:	200011fa 	.word	0x200011fa

00012074 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   12074:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   12076:	2001      	movs	r0, #1
   12078:	f7ff ff6a 	bl	11f50 <ll_rl_rpa_update>
   1207c:	4b03      	ldr	r3, [pc, #12]	; (1208c <rpa_timeout+0x18>)
   1207e:	4904      	ldr	r1, [pc, #16]	; (12090 <rpa_timeout+0x1c>)
   12080:	681a      	ldr	r2, [r3, #0]
   12082:	4804      	ldr	r0, [pc, #16]	; (12094 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   12084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12088:	f002 bec6 	b.w	14e18 <k_delayed_work_submit_to_queue>
   1208c:	20001944 	.word	0x20001944
   12090:	2000191c 	.word	0x2000191c
   12094:	20001988 	.word	0x20001988

00012098 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   12098:	4b07      	ldr	r3, [pc, #28]	; (120b8 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   1209a:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   1209c:	b130      	cbz	r0, 120ac <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   1209e:	b14b      	cbz	r3, 120b4 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   120a0:	4b06      	ldr	r3, [pc, #24]	; (120bc <ll_adv_scan_state_cb+0x24>)
   120a2:	4907      	ldr	r1, [pc, #28]	; (120c0 <ll_adv_scan_state_cb+0x28>)
   120a4:	681a      	ldr	r2, [r3, #0]
   120a6:	4807      	ldr	r0, [pc, #28]	; (120c4 <ll_adv_scan_state_cb+0x2c>)
   120a8:	f002 beb6 	b.w	14e18 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   120ac:	b113      	cbz	r3, 120b4 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   120ae:	4804      	ldr	r0, [pc, #16]	; (120c0 <ll_adv_scan_state_cb+0x28>)
   120b0:	f002 be4e 	b.w	14d50 <k_delayed_work_cancel>
   120b4:	4770      	bx	lr
   120b6:	bf00      	nop
   120b8:	200013f4 	.word	0x200013f4
   120bc:	20001944 	.word	0x20001944
   120c0:	2000191c 	.word	0x2000191c
   120c4:	20001988 	.word	0x20001988

000120c8 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   120c8:	2008      	movs	r0, #8
   120ca:	4770      	bx	lr

000120cc <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   120cc:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   120ce:	f7ff fbff 	bl	118d0 <rl_access_check.constprop.1>
   120d2:	b178      	cbz	r0, 120f4 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   120d4:	4908      	ldr	r1, [pc, #32]	; (120f8 <ll_rl_clear+0x2c>)
   120d6:	2300      	movs	r3, #0
   120d8:	2428      	movs	r4, #40	; 0x28
   120da:	fb04 f203 	mul.w	r2, r4, r3
   120de:	3301      	adds	r3, #1
   120e0:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   120e2:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   120e4:	f36f 0000 	bfc	r0, #0, #1
   120e8:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   120ea:	d1f6      	bne.n	120da <ll_rl_clear+0xe>
	peer_irk_count = 0;
   120ec:	4b03      	ldr	r3, [pc, #12]	; (120fc <ll_rl_clear+0x30>)
   120ee:	2000      	movs	r0, #0
   120f0:	7018      	strb	r0, [r3, #0]
   120f2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   120f4:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   120f6:	bd10      	pop	{r4, pc}
   120f8:	200012b4 	.word	0x200012b4
   120fc:	2000122a 	.word	0x2000122a

00012100 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   12100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12104:	b085      	sub	sp, #20
   12106:	4607      	mov	r7, r0
   12108:	468a      	mov	sl, r1
   1210a:	4691      	mov	r9, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1210c:	f7ff fbe0 	bl	118d0 <rl_access_check.constprop.1>
   12110:	2800      	cmp	r0, #0
   12112:	f000 8087 	beq.w	12224 <ll_rl_add+0x124>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   12116:	f107 0801 	add.w	r8, r7, #1
   1211a:	f10d 020f 	add.w	r2, sp, #15
   1211e:	4641      	mov	r1, r8
   12120:	7838      	ldrb	r0, [r7, #0]
   12122:	f7ff fdab 	bl	11c7c <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   12126:	2807      	cmp	r0, #7
   12128:	d97e      	bls.n	12228 <ll_rl_add+0x128>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   1212a:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1212e:	2d07      	cmp	r5, #7
   12130:	d87c      	bhi.n	1222c <ll_rl_add+0x12c>
   12132:	eb05 0685 	add.w	r6, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12136:	4c3e      	ldr	r4, [pc, #248]	; (12230 <ll_rl_add+0x130>)
   12138:	00f6      	lsls	r6, r6, #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   1213a:	f04f 0b28 	mov.w	fp, #40	; 0x28
   1213e:	fb0b fb05 	mul.w	fp, fp, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   12142:	1c70      	adds	r0, r6, #1
   12144:	2206      	movs	r2, #6
   12146:	4641      	mov	r1, r8
   12148:	4420      	add	r0, r4
   1214a:	f7ef fe6b 	bl	1e24 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1214e:	7839      	ldrb	r1, [r7, #0]
   12150:	f814 200b 	ldrb.w	r2, [r4, fp]
   12154:	eb04 030b 	add.w	r3, r4, fp
   12158:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1215c:	4650      	mov	r0, sl
   1215e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   12160:	9301      	str	r3, [sp, #4]
   12162:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12166:	f7f5 f870 	bl	724a <mem_nz>
   1216a:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1216e:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12170:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12174:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12176:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1217a:	f7f5 f866 	bl	724a <mem_nz>
   1217e:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   12182:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12184:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   12188:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1218c:	f804 200b 	strb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   12190:	d00c      	beq.n	121ac <ll_rl_add+0xac>
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
   12192:	4928      	ldr	r1, [pc, #160]	; (12234 <ll_rl_add+0x134>)
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   12194:	4828      	ldr	r0, [pc, #160]	; (12238 <ll_rl_add+0x138>)
		rl[i].pirk_idx = peer_irk_count;
   12196:	780a      	ldrb	r2, [r1, #0]
   12198:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1219a:	4b28      	ldr	r3, [pc, #160]	; (1223c <ll_rl_add+0x13c>)
   1219c:	549d      	strb	r5, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1219e:	1c53      	adds	r3, r2, #1
   121a0:	700b      	strb	r3, [r1, #0]
   121a2:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   121a6:	4651      	mov	r1, sl
   121a8:	f7ff fb9e 	bl	118e8 <sys_memcpy_swap.constprop.2>
	}
	if (rl[i].lirk) {
   121ac:	2328      	movs	r3, #40	; 0x28
   121ae:	436b      	muls	r3, r5
   121b0:	eb04 0a03 	add.w	sl, r4, r3
   121b4:	5ce3      	ldrb	r3, [r4, r3]
   121b6:	071b      	lsls	r3, r3, #28
   121b8:	d508      	bpl.n	121cc <ll_rl_add+0xcc>
		memcpy(rl[i].local_irk, lirk, 16);
   121ba:	1df0      	adds	r0, r6, #7
   121bc:	2210      	movs	r2, #16
   121be:	4649      	mov	r1, r9
   121c0:	4420      	add	r0, r4
   121c2:	f7ef fe2f 	bl	1e24 <memcpy>
		rl[i].local_rpa = NULL;
   121c6:	2300      	movs	r3, #0
   121c8:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   121cc:	f106 0018 	add.w	r0, r6, #24
	rl[i].rpas_ready = 0;
   121d0:	2628      	movs	r6, #40	; 0x28
   121d2:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   121d4:	2206      	movs	r2, #6
   121d6:	2100      	movs	r1, #0
   121d8:	4420      	add	r0, r4
   121da:	f7ef fe4f 	bl	1e7c <memset>
	rl[i].rpas_ready = 0;
   121de:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   121e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   121e4:	f36f 1304 	bfc	r3, #4, #1
   121e8:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   121ea:	2200      	movs	r2, #0
   121ec:	4641      	mov	r1, r8
   121ee:	7838      	ldrb	r0, [r7, #0]
   121f0:	f7ff fafc 	bl	117ec <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   121f4:	2807      	cmp	r0, #7
   121f6:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   121f8:	bf9d      	ittte	ls
   121fa:	4a11      	ldrls	r2, [pc, #68]	; (12240 <ll_rl_add+0x140>)
		rl[i].wl = 1;
   121fc:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   12200:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   12204:	f36f 1345 	bfchi	r3, #5, #1
   12208:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   1220a:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   1220e:	bf98      	it	ls
   12210:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   12212:	435d      	muls	r5, r3

	return 0;
   12214:	2000      	movs	r0, #0
	rl[i].taken = 1;
   12216:	5d63      	ldrb	r3, [r4, r5]
   12218:	f043 0301 	orr.w	r3, r3, #1
   1221c:	5563      	strb	r3, [r4, r5]
}
   1221e:	b005      	add	sp, #20
   12220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12224:	200c      	movs	r0, #12
   12226:	e7fa      	b.n	1221e <ll_rl_add+0x11e>
		return BT_HCI_ERR_INVALID_PARAM;
   12228:	2012      	movs	r0, #18
   1222a:	e7f8      	b.n	1221e <ll_rl_add+0x11e>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1222c:	2007      	movs	r0, #7
   1222e:	e7f6      	b.n	1221e <ll_rl_add+0x11e>
   12230:	200012b4 	.word	0x200012b4
   12234:	2000122a 	.word	0x2000122a
   12238:	20001233 	.word	0x20001233
   1223c:	2000122b 	.word	0x2000122b
   12240:	20001427 	.word	0x20001427

00012244 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   12244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12248:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1224a:	f7ff fb41 	bl	118d0 <rl_access_check.constprop.1>
   1224e:	2800      	cmp	r0, #0
   12250:	d053      	beq.n	122fa <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12252:	f109 0a01 	add.w	sl, r9, #1
   12256:	2200      	movs	r2, #0
   12258:	4651      	mov	r1, sl
   1225a:	f899 0000 	ldrb.w	r0, [r9]
   1225e:	f7ff fd0d 	bl	11c7c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12262:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12264:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   12266:	d84b      	bhi.n	12300 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   12268:	f04f 0b28 	mov.w	fp, #40	; 0x28
   1226c:	4c26      	ldr	r4, [pc, #152]	; (12308 <ll_rl_remove+0xc4>)
   1226e:	fb0b f300 	mul.w	r3, fp, r0
   12272:	18e2      	adds	r2, r4, r3
   12274:	5ce3      	ldrb	r3, [r4, r3]
   12276:	075b      	lsls	r3, r3, #29
   12278:	d524      	bpl.n	122c4 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1227a:	4e24      	ldr	r6, [pc, #144]	; (1230c <ll_rl_remove+0xc8>)
   1227c:	7835      	ldrb	r5, [r6, #0]
   1227e:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   12280:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12284:	d01b      	beq.n	122be <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12286:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   12288:	42af      	cmp	r7, r5
   1228a:	d018      	beq.n	122be <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1228c:	4820      	ldr	r0, [pc, #128]	; (12310 <ll_rl_remove+0xcc>)
   1228e:	2210      	movs	r2, #16
   12290:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   12294:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   12298:	f7ef fdc4 	bl	1e24 <memcpy>
   1229c:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1229e:	fb0b f103 	mul.w	r1, fp, r3
   122a2:	1862      	adds	r2, r4, r1
   122a4:	5c61      	ldrb	r1, [r4, r1]
   122a6:	f011 0f01 	tst.w	r1, #1
   122aa:	b2d8      	uxtb	r0, r3
   122ac:	d021      	beq.n	122f2 <ll_rl_remove+0xae>
   122ae:	0749      	lsls	r1, r1, #29
   122b0:	d51f      	bpl.n	122f2 <ll_rl_remove+0xae>
   122b2:	7dd1      	ldrb	r1, [r2, #23]
   122b4:	42a9      	cmp	r1, r5
   122b6:	d11c      	bne.n	122f2 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   122b8:	4b16      	ldr	r3, [pc, #88]	; (12314 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   122ba:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   122bc:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   122be:	7833      	ldrb	r3, [r6, #0]
   122c0:	3b01      	subs	r3, #1
   122c2:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   122c4:	2200      	movs	r2, #0
   122c6:	4651      	mov	r1, sl
   122c8:	f899 0000 	ldrb.w	r0, [r9]
   122cc:	f7ff fa8e 	bl	117ec <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   122d0:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   122d2:	bf9f      	itttt	ls
   122d4:	4b10      	ldrls	r3, [pc, #64]	; (12318 <ll_rl_remove+0xd4>)
   122d6:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   122da:	23ff      	movls	r3, #255	; 0xff
   122dc:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   122de:	2028      	movs	r0, #40	; 0x28
   122e0:	fb00 f008 	mul.w	r0, r0, r8
   122e4:	5c23      	ldrb	r3, [r4, r0]
   122e6:	f36f 0300 	bfc	r3, #0, #1
   122ea:	5423      	strb	r3, [r4, r0]
		return 0;
   122ec:	2000      	movs	r0, #0
   122ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122f2:	3301      	adds	r3, #1
				for (k = 0;
   122f4:	2b08      	cmp	r3, #8
   122f6:	d1d2      	bne.n	1229e <ll_rl_remove+0x5a>
   122f8:	e7e1      	b.n	122be <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   122fa:	200c      	movs	r0, #12
   122fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12300:	2002      	movs	r0, #2
}
   12302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12306:	bf00      	nop
   12308:	200012b4 	.word	0x200012b4
   1230c:	2000122a 	.word	0x2000122a
   12310:	20001233 	.word	0x20001233
   12314:	2000122b 	.word	0x2000122b
   12318:	20001427 	.word	0x20001427

0001231c <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1231c:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1231e:	795c      	ldrb	r4, [r3, #5]
   12320:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   12324:	2c40      	cmp	r4, #64	; 0x40
{
   12326:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   12328:	d117      	bne.n	1235a <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   1232a:	b119      	cbz	r1, 12334 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1232c:	2200      	movs	r2, #0
   1232e:	f7ff fca5 	bl	11c7c <ll_rl_find>
   12332:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   12334:	2a07      	cmp	r2, #7
   12336:	d810      	bhi.n	1235a <ll_rl_crpa_set+0x3e>
   12338:	2128      	movs	r1, #40	; 0x28
   1233a:	4c08      	ldr	r4, [pc, #32]	; (1235c <ll_rl_crpa_set+0x40>)
   1233c:	fb01 f302 	mul.w	r3, r1, r2
   12340:	5ce3      	ldrb	r3, [r4, r3]
   12342:	07db      	lsls	r3, r3, #31
   12344:	d509      	bpl.n	1235a <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12346:	2018      	movs	r0, #24
   12348:	fb11 0002 	smlabb	r0, r1, r2, r0
   1234c:	4420      	add	r0, r4
   1234e:	4629      	mov	r1, r5
   12350:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   12352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12356:	f7ef bd65 	b.w	1e24 <memcpy>
   1235a:	bd70      	pop	{r4, r5, r6, pc}
   1235c:	200012b4 	.word	0x200012b4

00012360 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   12360:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12362:	2200      	movs	r2, #0
{
   12364:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12366:	1c41      	adds	r1, r0, #1
   12368:	7800      	ldrb	r0, [r0, #0]
   1236a:	f7ff fc87 	bl	11c7c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1236e:	2807      	cmp	r0, #7
   12370:	d901      	bls.n	12376 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12372:	2002      	movs	r0, #2
   12374:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   12376:	2428      	movs	r4, #40	; 0x28
   12378:	2318      	movs	r3, #24
   1237a:	fb14 3000 	smlabb	r0, r4, r0, r3
   1237e:	4c07      	ldr	r4, [pc, #28]	; (1239c <ll_rl_crpa_get+0x3c>)
   12380:	4404      	add	r4, r0
   12382:	2106      	movs	r1, #6
   12384:	4620      	mov	r0, r4
   12386:	f7f4 ff60 	bl	724a <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1238a:	2800      	cmp	r0, #0
   1238c:	d0f1      	beq.n	12372 <ll_rl_crpa_get+0x12>
   1238e:	2206      	movs	r2, #6
   12390:	4621      	mov	r1, r4
   12392:	4628      	mov	r0, r5
   12394:	f7ef fd46 	bl	1e24 <memcpy>
			return 0;
   12398:	2000      	movs	r0, #0
}
   1239a:	bd38      	pop	{r3, r4, r5, pc}
   1239c:	200012b4 	.word	0x200012b4

000123a0 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   123a0:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   123a2:	2200      	movs	r2, #0
{
   123a4:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   123a6:	1c41      	adds	r1, r0, #1
   123a8:	7800      	ldrb	r0, [r0, #0]
   123aa:	f7ff fc67 	bl	11c7c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   123ae:	2807      	cmp	r0, #7
   123b0:	d80a      	bhi.n	123c8 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   123b2:	4b06      	ldr	r3, [pc, #24]	; (123cc <ll_rl_lrpa_get+0x2c>)
   123b4:	2228      	movs	r2, #40	; 0x28
   123b6:	fb02 3000 	mla	r0, r2, r0, r3
   123ba:	2206      	movs	r2, #6
   123bc:	6a41      	ldr	r1, [r0, #36]	; 0x24
   123be:	4620      	mov	r0, r4
   123c0:	f7ef fd30 	bl	1e24 <memcpy>
		return 0;
   123c4:	2000      	movs	r0, #0
   123c6:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   123c8:	2002      	movs	r0, #2
}
   123ca:	bd10      	pop	{r4, pc}
   123cc:	200012b4 	.word	0x200012b4

000123d0 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   123d0:	b510      	push	{r4, lr}
   123d2:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   123d4:	f7ff fa7c 	bl	118d0 <rl_access_check.constprop.1>
   123d8:	b140      	cbz	r0, 123ec <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   123da:	b11c      	cbz	r4, 123e4 <ll_rl_enable+0x14>
   123dc:	2c01      	cmp	r4, #1
   123de:	d001      	beq.n	123e4 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   123e0:	2012      	movs	r0, #18
	}

	return 0;
}
   123e2:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   123e4:	4b02      	ldr	r3, [pc, #8]	; (123f0 <ll_rl_enable+0x20>)
   123e6:	701c      	strb	r4, [r3, #0]
	return 0;
   123e8:	2000      	movs	r0, #0
		break;
   123ea:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   123ec:	200c      	movs	r0, #12
   123ee:	bd10      	pop	{r4, pc}
   123f0:	200013f4 	.word	0x200013f4

000123f4 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   123f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   123f8:	4358      	muls	r0, r3
   123fa:	4b01      	ldr	r3, [pc, #4]	; (12400 <ll_rl_timeout_set+0xc>)
   123fc:	6018      	str	r0, [r3, #0]
   123fe:	4770      	bx	lr
   12400:	20001944 	.word	0x20001944

00012404 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   12404:	b538      	push	{r3, r4, r5, lr}
   12406:	4605      	mov	r5, r0
   12408:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1240a:	f7ff fa61 	bl	118d0 <rl_access_check.constprop.1>
   1240e:	b1d8      	cbz	r0, 12448 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12410:	2200      	movs	r2, #0
   12412:	1c69      	adds	r1, r5, #1
   12414:	7828      	ldrb	r0, [r5, #0]
   12416:	f7ff fc31 	bl	11c7c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1241a:	2807      	cmp	r0, #7
   1241c:	d816      	bhi.n	1244c <ll_priv_mode_set+0x48>
		switch (mode) {
   1241e:	b11c      	cbz	r4, 12428 <ll_priv_mode_set+0x24>
   12420:	2c01      	cmp	r4, #1
   12422:	d00a      	beq.n	1243a <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   12424:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   12426:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   12428:	2328      	movs	r3, #40	; 0x28
   1242a:	4a09      	ldr	r2, [pc, #36]	; (12450 <ll_priv_mode_set+0x4c>)
   1242c:	4358      	muls	r0, r3
   1242e:	5c13      	ldrb	r3, [r2, r0]
   12430:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   12434:	5413      	strb	r3, [r2, r0]
	return 0;
   12436:	2000      	movs	r0, #0
			break;
   12438:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1243a:	2328      	movs	r3, #40	; 0x28
   1243c:	4a04      	ldr	r2, [pc, #16]	; (12450 <ll_priv_mode_set+0x4c>)
   1243e:	4358      	muls	r0, r3
   12440:	5c13      	ldrb	r3, [r2, r0]
   12442:	f043 0310 	orr.w	r3, r3, #16
   12446:	e7f5      	b.n	12434 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12448:	200c      	movs	r0, #12
   1244a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1244c:	2002      	movs	r0, #2
   1244e:	bd38      	pop	{r3, r4, r5, pc}
   12450:	200012b4 	.word	0x200012b4

00012454 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12454:	4a19      	ldr	r2, [pc, #100]	; (124bc <ll_filter_reset+0x68>)
   12456:	2300      	movs	r3, #0
{
   12458:	b430      	push	{r4, r5}
	wl_anon = 0;
   1245a:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   1245c:	4a18      	ldr	r2, [pc, #96]	; (124c0 <ll_filter_reset+0x6c>)
   1245e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12462:	f36f 0100 	bfc	r1, #0, #1
   12466:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1246a:	3301      	adds	r3, #1
   1246c:	2b08      	cmp	r3, #8
   1246e:	d1f6      	bne.n	1245e <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   12470:	4a14      	ldr	r2, [pc, #80]	; (124c4 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12472:	4915      	ldr	r1, [pc, #84]	; (124c8 <ll_filter_reset+0x74>)
	rl_enable = 0;
   12474:	2300      	movs	r3, #0
   12476:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12478:	4a14      	ldr	r2, [pc, #80]	; (124cc <ll_filter_reset+0x78>)
   1247a:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1247c:	4a14      	ldr	r2, [pc, #80]	; (124d0 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   1247e:	4915      	ldr	r1, [pc, #84]	; (124d4 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   12480:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12484:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12488:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   1248c:	2528      	movs	r5, #40	; 0x28
   1248e:	fb05 f203 	mul.w	r2, r5, r3
   12492:	3301      	adds	r3, #1
   12494:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12496:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12498:	f36f 0400 	bfc	r4, #0, #1
   1249c:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1249e:	d1f6      	bne.n	1248e <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   124a0:	4b0d      	ldr	r3, [pc, #52]	; (124d8 <ll_filter_reset+0x84>)
   124a2:	2200      	movs	r2, #0
   124a4:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   124a6:	b120      	cbz	r0, 124b2 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   124a8:	490c      	ldr	r1, [pc, #48]	; (124dc <ll_filter_reset+0x88>)
   124aa:	480d      	ldr	r0, [pc, #52]	; (124e0 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   124ac:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   124ae:	f002 bc3f 	b.w	14d30 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   124b2:	480b      	ldr	r0, [pc, #44]	; (124e0 <ll_filter_reset+0x8c>)
}
   124b4:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   124b6:	f002 bc4b 	b.w	14d50 <k_delayed_work_cancel>
   124ba:	bf00      	nop
   124bc:	20001918 	.word	0x20001918
   124c0:	20001427 	.word	0x20001427
   124c4:	200013f4 	.word	0x200013f4
   124c8:	000dbba0 	.word	0x000dbba0
   124cc:	20001944 	.word	0x20001944
   124d0:	20001910 	.word	0x20001910
   124d4:	200012b4 	.word	0x200012b4
   124d8:	2000122a 	.word	0x2000122a
   124dc:	00012075 	.word	0x00012075
   124e0:	2000191c 	.word	0x2000191c

000124e4 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   124e4:	4b05      	ldr	r3, [pc, #20]	; (124fc <cntr_init+0x18>)
   124e6:	2200      	movs	r2, #0
   124e8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   124ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   124f0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   124f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   124f8:	4770      	bx	lr
   124fa:	bf00      	nop
   124fc:	4000b000 	.word	0x4000b000

00012500 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   12500:	4a04      	ldr	r2, [pc, #16]	; (12514 <cntr_start+0x14>)
   12502:	7813      	ldrb	r3, [r2, #0]
   12504:	1c59      	adds	r1, r3, #1
   12506:	7011      	strb	r1, [r2, #0]
   12508:	2001      	movs	r0, #1
   1250a:	b913      	cbnz	r3, 12512 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   1250c:	4a02      	ldr	r2, [pc, #8]	; (12518 <cntr_start+0x18>)
   1250e:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   12510:	4618      	mov	r0, r3
}
   12512:	4770      	bx	lr
   12514:	20001499 	.word	0x20001499
   12518:	4000b000 	.word	0x4000b000

0001251c <cntr_stop>:

u32_t cntr_stop(void)
{
   1251c:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_refcount);
   1251e:	4b0f      	ldr	r3, [pc, #60]	; (1255c <cntr_stop+0x40>)
   12520:	7818      	ldrb	r0, [r3, #0]
   12522:	b978      	cbnz	r0, 12544 <cntr_stop+0x28>
   12524:	4b0e      	ldr	r3, [pc, #56]	; (12560 <cntr_stop+0x44>)
   12526:	9301      	str	r3, [sp, #4]
   12528:	9300      	str	r3, [sp, #0]
   1252a:	4b0e      	ldr	r3, [pc, #56]	; (12564 <cntr_stop+0x48>)
   1252c:	4a0e      	ldr	r2, [pc, #56]	; (12568 <cntr_stop+0x4c>)
   1252e:	681c      	ldr	r4, [r3, #0]
   12530:	490e      	ldr	r1, [pc, #56]	; (1256c <cntr_stop+0x50>)
   12532:	4b0f      	ldr	r3, [pc, #60]	; (12570 <cntr_stop+0x54>)
   12534:	480f      	ldr	r0, [pc, #60]	; (12574 <cntr_stop+0x58>)
   12536:	47a0      	blx	r4
   12538:	4040      	eors	r0, r0
   1253a:	f380 8811 	msr	BASEPRI, r0
   1253e:	f04f 0004 	mov.w	r0, #4
   12542:	df02      	svc	2

	if (--_refcount) {
   12544:	3801      	subs	r0, #1
   12546:	b2c0      	uxtb	r0, r0
   12548:	7018      	strb	r0, [r3, #0]
   1254a:	2301      	movs	r3, #1
   1254c:	b918      	cbnz	r0, 12556 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   1254e:	4a0a      	ldr	r2, [pc, #40]	; (12578 <cntr_stop+0x5c>)
   12550:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   12552:	b002      	add	sp, #8
   12554:	bd10      	pop	{r4, pc}
		return 1;
   12556:	4618      	mov	r0, r3
   12558:	e7fb      	b.n	12552 <cntr_stop+0x36>
   1255a:	bf00      	nop
   1255c:	20001499 	.word	0x20001499
   12560:	0001563e 	.word	0x0001563e
   12564:	20003a5c 	.word	0x20003a5c
   12568:	000167b9 	.word	0x000167b9
   1256c:	00016808 	.word	0x00016808
   12570:	00019382 	.word	0x00019382
   12574:	0001938c 	.word	0x0001938c
   12578:	4000b000 	.word	0x4000b000

0001257c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   1257c:	4b01      	ldr	r3, [pc, #4]	; (12584 <cntr_cnt_get+0x8>)
   1257e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   12582:	4770      	bx	lr
   12584:	4000b000 	.word	0x4000b000

00012588 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   12588:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1258c:	4b01      	ldr	r3, [pc, #4]	; (12594 <cntr_cmp_set+0xc>)
   1258e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   12592:	4770      	bx	lr
   12594:	4000b000 	.word	0x4000b000

00012598 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   12598:	4b11      	ldr	r3, [pc, #68]	; (125e0 <do_ecb+0x48>)
{
   1259a:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   1259c:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1259e:	2500      	movs	r5, #0
   125a0:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   125a2:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   125a4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   125a8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   125ac:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   125b0:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   125b2:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   125b6:	b934      	cbnz	r4, 125c6 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   125b8:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   125bc:	b91c      	cbnz	r4, 125c6 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   125be:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   125c2:	2c00      	cmp	r4, #0
   125c4:	d1f5      	bne.n	125b2 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   125c6:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   125c8:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   125cc:	2c00      	cmp	r4, #0
   125ce:	d1e8      	bne.n	125a2 <do_ecb+0xa>
   125d0:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   125d4:	2e00      	cmp	r6, #0
   125d6:	d0e4      	beq.n	125a2 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   125d8:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   125dc:	bd70      	pop	{r4, r5, r6, pc}
   125de:	bf00      	nop
   125e0:	4000e000 	.word	0x4000e000

000125e4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   125e4:	b570      	push	{r4, r5, r6, lr}
   125e6:	b08c      	sub	sp, #48	; 0x30
   125e8:	460e      	mov	r6, r1
   125ea:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   125ec:	4601      	mov	r1, r0
   125ee:	2210      	movs	r2, #16
   125f0:	4668      	mov	r0, sp
{
   125f2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   125f4:	f7f4 fe1a 	bl	722c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   125f8:	2210      	movs	r2, #16
   125fa:	eb0d 0002 	add.w	r0, sp, r2
   125fe:	4631      	mov	r1, r6
   12600:	f7f4 fe14 	bl	722c <mem_rcopy>

	do_ecb(&ecb);
   12604:	4668      	mov	r0, sp
   12606:	f7ff ffc7 	bl	12598 <do_ecb>

	if (cipher_text_le) {
   1260a:	b125      	cbz	r5, 12616 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1260c:	2210      	movs	r2, #16
   1260e:	a908      	add	r1, sp, #32
   12610:	4628      	mov	r0, r5
   12612:	f7f4 fe0b 	bl	722c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12616:	b124      	cbz	r4, 12622 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12618:	2210      	movs	r2, #16
   1261a:	a908      	add	r1, sp, #32
   1261c:	4620      	mov	r0, r4
   1261e:	f7ef fc01 	bl	1e24 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12622:	b00c      	add	sp, #48	; 0x30
   12624:	bd70      	pop	{r4, r5, r6, pc}
	...

00012628 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   12628:	4b07      	ldr	r3, [pc, #28]	; (12648 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   1262a:	4a08      	ldr	r2, [pc, #32]	; (1264c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1262c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   12630:	4907      	ldr	r1, [pc, #28]	; (12650 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   12632:	4a08      	ldr	r2, [pc, #32]	; (12654 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   12634:	2800      	cmp	r0, #0
   12636:	bf14      	ite	ne
   12638:	4610      	movne	r0, r2
   1263a:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   1263c:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   1263e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12642:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12646:	4770      	bx	lr
   12648:	4001f000 	.word	0x4001f000
   1264c:	40008140 	.word	0x40008140
   12650:	40001004 	.word	0x40001004
   12654:	40001000 	.word	0x40001000

00012658 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   12658:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1265a:	4e2c      	ldr	r6, [pc, #176]	; (1270c <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   1265c:	4f2c      	ldr	r7, [pc, #176]	; (12710 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1265e:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12660:	4b2c      	ldr	r3, [pc, #176]	; (12714 <sw_switch.isra.9+0xbc>)
   12662:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   12666:	b22b      	sxth	r3, r5
   12668:	00dc      	lsls	r4, r3, #3
   1266a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1266e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   12672:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12676:	f105 040b 	add.w	r4, r5, #11
   1267a:	b2e4      	uxtb	r4, r4
   1267c:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   1267e:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   12682:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12686:	3fc0      	subs	r7, #192	; 0xc0
   12688:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1268c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   12690:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   12694:	2800      	cmp	r0, #0
   12696:	d034      	beq.n	12702 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   12698:	f24a 075a 	movw	r7, #41050	; 0xa05a
   1269c:	f649 4040 	movw	r0, #40000	; 0x9c40
   126a0:	2a02      	cmp	r2, #2
   126a2:	bf0c      	ite	eq
   126a4:	4602      	moveq	r2, r0
   126a6:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   126a8:	f242 47b8 	movw	r7, #9400	; 0x24b8
   126ac:	f241 504a 	movw	r0, #5450	; 0x154a
   126b0:	2902      	cmp	r1, #2
   126b2:	bf18      	it	ne
   126b4:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   126b6:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   126ba:	4401      	add	r1, r0
   126bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   126c0:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   126c4:	4a14      	ldr	r2, [pc, #80]	; (12718 <sw_switch.isra.9+0xc0>)
   126c6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   126ca:	009b      	lsls	r3, r3, #2
   126cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   126d0:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   126d4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   126d8:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   126da:	bf8b      	itete	hi
   126dc:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   126e0:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   126e2:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   126e4:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   126e8:	bf88      	it	hi
   126ea:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   126ee:	4b08      	ldr	r3, [pc, #32]	; (12710 <sw_switch.isra.9+0xb8>)
   126f0:	f44f 6290 	mov.w	r2, #1152	; 0x480
   126f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   126f8:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   126fa:	f003 0301 	and.w	r3, r3, #1
   126fe:	7033      	strb	r3, [r6, #0]
   12700:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12702:	4a06      	ldr	r2, [pc, #24]	; (1271c <sw_switch.isra.9+0xc4>)
   12704:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   12708:	212d      	movs	r1, #45	; 0x2d
   1270a:	e7de      	b.n	126ca <sw_switch.isra.9+0x72>
   1270c:	200016bc 	.word	0x200016bc
   12710:	4001f000 	.word	0x4001f000
   12714:	4000110c 	.word	0x4000110c
   12718:	40001000 	.word	0x40001000
   1271c:	40001004 	.word	0x40001004

00012720 <isr_radio>:
	if (sfp_radio_isr) {
   12720:	4b02      	ldr	r3, [pc, #8]	; (1272c <isr_radio+0xc>)
   12722:	681b      	ldr	r3, [r3, #0]
   12724:	b103      	cbz	r3, 12728 <isr_radio+0x8>
		sfp_radio_isr();
   12726:	4718      	bx	r3
   12728:	4770      	bx	lr
   1272a:	bf00      	nop
   1272c:	200016b8 	.word	0x200016b8

00012730 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   12730:	4b06      	ldr	r3, [pc, #24]	; (1274c <radio_isr_set+0x1c>)
   12732:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   12734:	4b06      	ldr	r3, [pc, #24]	; (12750 <radio_isr_set+0x20>)
   12736:	2210      	movs	r2, #16
   12738:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1273c:	4b05      	ldr	r3, [pc, #20]	; (12754 <radio_isr_set+0x24>)
   1273e:	2202      	movs	r2, #2
   12740:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   12744:	2001      	movs	r0, #1
   12746:	f7ef b923 	b.w	1990 <_arch_irq_enable>
   1274a:	bf00      	nop
   1274c:	200016b8 	.word	0x200016b8
   12750:	40001000 	.word	0x40001000
   12754:	e000e100 	.word	0xe000e100

00012758 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1275c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12760:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12762:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   12766:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1276a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1276e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   12772:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   12776:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1277a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1277e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   12782:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   12786:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1278a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1278e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   12792:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   12796:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   1279a:	4770      	bx	lr

0001279c <radio_reset>:
{
   1279c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1279e:	2001      	movs	r0, #1
   127a0:	f7ef f906 	bl	19b0 <_arch_irq_disable>
	NRF_RADIO->POWER =
   127a4:	4b08      	ldr	r3, [pc, #32]	; (127c8 <radio_reset+0x2c>)
   127a6:	2200      	movs	r2, #0
   127a8:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   127ac:	2201      	movs	r2, #1
   127ae:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   127b2:	4a06      	ldr	r2, [pc, #24]	; (127cc <radio_reset+0x30>)
   127b4:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   127b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   127ba:	f023 0301 	bic.w	r3, r3, #1
   127be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   127c2:	6013      	str	r3, [r2, #0]
   127c4:	bd08      	pop	{r3, pc}
   127c6:	bf00      	nop
   127c8:	40001000 	.word	0x40001000
   127cc:	40001774 	.word	0x40001774

000127d0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   127d0:	4b06      	ldr	r3, [pc, #24]	; (127ec <radio_phy_set+0x1c>)
	switch (phy) {
   127d2:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   127d4:	bf0c      	ite	eq
   127d6:	2204      	moveq	r2, #4
   127d8:	2203      	movne	r2, #3
   127da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   127de:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   127e2:	f042 0201 	orr.w	r2, r2, #1
   127e6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   127ea:	4770      	bx	lr
   127ec:	40001000 	.word	0x40001000

000127f0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   127f0:	4b01      	ldr	r3, [pc, #4]	; (127f8 <radio_tx_power_set+0x8>)
   127f2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   127f6:	4770      	bx	lr
   127f8:	40001000 	.word	0x40001000

000127fc <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   127fc:	4b01      	ldr	r3, [pc, #4]	; (12804 <radio_freq_chan_set+0x8>)
   127fe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   12802:	4770      	bx	lr
   12804:	40001000 	.word	0x40001000

00012808 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12808:	4b07      	ldr	r3, [pc, #28]	; (12828 <radio_whiten_iv_set+0x20>)
   1280a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1280e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12812:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   12816:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1281a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1281e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   12822:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   12826:	4770      	bx	lr
   12828:	40001000 	.word	0x40001000

0001282c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1282c:	4a0a      	ldr	r2, [pc, #40]	; (12858 <radio_aa_set+0x2c>)
   1282e:	2300      	movs	r3, #0
   12830:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   12834:	2301      	movs	r3, #1
   12836:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1283a:	78c3      	ldrb	r3, [r0, #3]
   1283c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12840:	7843      	ldrb	r3, [r0, #1]
   12842:	7881      	ldrb	r1, [r0, #2]
   12844:	041b      	lsls	r3, r3, #16
   12846:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1284a:	7801      	ldrb	r1, [r0, #0]
   1284c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   12850:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   12854:	4770      	bx	lr
   12856:	bf00      	nop
   12858:	40001000 	.word	0x40001000

0001285c <radio_pkt_configure>:
	switch (phy) {
   1285c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12860:	2b02      	cmp	r3, #2
{
   12862:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12864:	bf0c      	ite	eq
   12866:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   1286a:	2400      	movne	r4, #0
	if (dc) {
   1286c:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1286e:	f1c0 0308 	rsb	r3, r0, #8
   12872:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   12876:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1287a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1287e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12882:	4a0b      	ldr	r2, [pc, #44]	; (128b0 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   12884:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   12888:	bf48      	it	mi
   1288a:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   1288e:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12890:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   12894:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   12898:	4b06      	ldr	r3, [pc, #24]	; (128b4 <radio_pkt_configure+0x58>)
   1289a:	4003      	ands	r3, r0
   1289c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   128a0:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   128a4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   128a8:	4319      	orrs	r1, r3
   128aa:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   128ae:	bd10      	pop	{r4, pc}
   128b0:	40001000 	.word	0x40001000
   128b4:	fef80000 	.word	0xfef80000

000128b8 <radio_pkt_rx_set>:
   128b8:	4b01      	ldr	r3, [pc, #4]	; (128c0 <radio_pkt_rx_set+0x8>)
   128ba:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   128be:	4770      	bx	lr
   128c0:	40001000 	.word	0x40001000

000128c4 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   128c4:	4b01      	ldr	r3, [pc, #4]	; (128cc <radio_pkt_tx_set+0x8>)
   128c6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   128ca:	4770      	bx	lr
   128cc:	40001000 	.word	0x40001000

000128d0 <radio_tx_ready_delay_get>:
	switch (phy) {
   128d0:	2802      	cmp	r0, #2
}
   128d2:	bf0c      	ite	eq
   128d4:	2028      	moveq	r0, #40	; 0x28
   128d6:	2029      	movne	r0, #41	; 0x29
   128d8:	4770      	bx	lr

000128da <radio_tx_chain_delay_get>:
}
   128da:	2001      	movs	r0, #1
   128dc:	4770      	bx	lr

000128de <radio_rx_ready_delay_get>:
}
   128de:	2029      	movs	r0, #41	; 0x29
   128e0:	4770      	bx	lr

000128e2 <radio_rx_chain_delay_get>:
	switch (phy) {
   128e2:	2802      	cmp	r0, #2
}
   128e4:	bf0c      	ite	eq
   128e6:	2006      	moveq	r0, #6
   128e8:	200a      	movne	r0, #10
   128ea:	4770      	bx	lr

000128ec <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   128ec:	4b01      	ldr	r3, [pc, #4]	; (128f4 <radio_rx_enable+0x8>)
   128ee:	2201      	movs	r2, #1
   128f0:	605a      	str	r2, [r3, #4]
   128f2:	4770      	bx	lr
   128f4:	40001000 	.word	0x40001000

000128f8 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   128f8:	4b01      	ldr	r3, [pc, #4]	; (12900 <radio_tx_enable+0x8>)
   128fa:	2201      	movs	r2, #1
   128fc:	601a      	str	r2, [r3, #0]
   128fe:	4770      	bx	lr
   12900:	40001000 	.word	0x40001000

00012904 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12904:	4a07      	ldr	r2, [pc, #28]	; (12924 <radio_disable+0x20>)
   12906:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1290a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   1290e:	2301      	movs	r3, #1
   12910:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   12912:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12914:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12918:	2100      	movs	r1, #0
   1291a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   1291e:	6113      	str	r3, [r2, #16]
   12920:	4770      	bx	lr
   12922:	bf00      	nop
   12924:	4001f000 	.word	0x4001f000

00012928 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12928:	4b04      	ldr	r3, [pc, #16]	; (1293c <radio_status_reset+0x14>)
   1292a:	2200      	movs	r2, #0
   1292c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12930:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   12934:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12938:	4770      	bx	lr
   1293a:	bf00      	nop
   1293c:	40001000 	.word	0x40001000

00012940 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12940:	4b03      	ldr	r3, [pc, #12]	; (12950 <radio_is_ready+0x10>)
   12942:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   12946:	3000      	adds	r0, #0
   12948:	bf18      	it	ne
   1294a:	2001      	movne	r0, #1
   1294c:	4770      	bx	lr
   1294e:	bf00      	nop
   12950:	40001000 	.word	0x40001000

00012954 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   12954:	4b03      	ldr	r3, [pc, #12]	; (12964 <radio_is_done+0x10>)
   12956:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1295a:	3000      	adds	r0, #0
   1295c:	bf18      	it	ne
   1295e:	2001      	movne	r0, #1
   12960:	4770      	bx	lr
   12962:	bf00      	nop
   12964:	40001000 	.word	0x40001000

00012968 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   12968:	4b03      	ldr	r3, [pc, #12]	; (12978 <radio_is_idle+0x10>)
   1296a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1296e:	fab0 f080 	clz	r0, r0
   12972:	0940      	lsrs	r0, r0, #5
   12974:	4770      	bx	lr
   12976:	bf00      	nop
   12978:	40001000 	.word	0x40001000

0001297c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1297c:	4b04      	ldr	r3, [pc, #16]	; (12990 <radio_crc_configure+0x14>)
   1297e:	f240 1203 	movw	r2, #259	; 0x103
   12982:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   12986:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1298a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   1298e:	4770      	bx	lr
   12990:	40001000 	.word	0x40001000

00012994 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   12994:	4b03      	ldr	r3, [pc, #12]	; (129a4 <radio_crc_is_valid+0x10>)
   12996:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1299a:	3000      	adds	r0, #0
   1299c:	bf18      	it	ne
   1299e:	2001      	movne	r0, #1
   129a0:	4770      	bx	lr
   129a2:	bf00      	nop
   129a4:	40001000 	.word	0x40001000

000129a8 <radio_pkt_empty_get>:
}
   129a8:	4800      	ldr	r0, [pc, #0]	; (129ac <radio_pkt_empty_get+0x4>)
   129aa:	4770      	bx	lr
   129ac:	200015ac 	.word	0x200015ac

000129b0 <radio_pkt_scratch_get>:
}
   129b0:	4800      	ldr	r0, [pc, #0]	; (129b4 <radio_pkt_scratch_get+0x4>)
   129b2:	4770      	bx	lr
   129b4:	200015b0 	.word	0x200015b0

000129b8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   129b8:	4b04      	ldr	r3, [pc, #16]	; (129cc <radio_switch_complete_and_rx+0x14>)
   129ba:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   129bc:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   129be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   129c2:	4602      	mov	r2, r0
   129c4:	4608      	mov	r0, r1
   129c6:	f7ff be47 	b.w	12658 <sw_switch.isra.9>
   129ca:	bf00      	nop
   129cc:	40001000 	.word	0x40001000

000129d0 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   129d0:	4b03      	ldr	r3, [pc, #12]	; (129e0 <radio_switch_complete_and_tx+0x10>)
   129d2:	2103      	movs	r1, #3
   129d4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   129d8:	4601      	mov	r1, r0
   129da:	2001      	movs	r0, #1
   129dc:	f7ff be3c 	b.w	12658 <sw_switch.isra.9>
   129e0:	40001000 	.word	0x40001000

000129e4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   129e4:	4b05      	ldr	r3, [pc, #20]	; (129fc <radio_switch_complete_and_disable+0x18>)
   129e6:	2203      	movs	r2, #3
   129e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   129ec:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   129f0:	f44f 6290 	mov.w	r2, #1152	; 0x480
   129f4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   129f8:	4770      	bx	lr
   129fa:	bf00      	nop
   129fc:	40001000 	.word	0x40001000

00012a00 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12a00:	4a03      	ldr	r2, [pc, #12]	; (12a10 <radio_rssi_measure+0x10>)
   12a02:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   12a06:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   12a0a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   12a0e:	4770      	bx	lr
   12a10:	40001000 	.word	0x40001000

00012a14 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   12a14:	4b01      	ldr	r3, [pc, #4]	; (12a1c <radio_rssi_get+0x8>)
   12a16:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   12a1a:	4770      	bx	lr
   12a1c:	40001000 	.word	0x40001000

00012a20 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12a20:	4b02      	ldr	r3, [pc, #8]	; (12a2c <radio_rssi_status_reset+0xc>)
   12a22:	2200      	movs	r2, #0
   12a24:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   12a28:	4770      	bx	lr
   12a2a:	bf00      	nop
   12a2c:	40001000 	.word	0x40001000

00012a30 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12a30:	4b03      	ldr	r3, [pc, #12]	; (12a40 <radio_rssi_is_ready+0x10>)
   12a32:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   12a36:	3000      	adds	r0, #0
   12a38:	bf18      	it	ne
   12a3a:	2001      	movne	r0, #1
   12a3c:	4770      	bx	lr
   12a3e:	bf00      	nop
   12a40:	40001000 	.word	0x40001000

00012a44 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   12a44:	b530      	push	{r4, r5, lr}
   12a46:	2400      	movs	r4, #0
   12a48:	00a3      	lsls	r3, r4, #2
   12a4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   12a52:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   12a54:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   12a58:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   12a5a:	8895      	ldrh	r5, [r2, #4]
   12a5c:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   12a60:	2c08      	cmp	r4, #8
		bdaddr += 6;
   12a62:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   12a66:	d1ef      	bne.n	12a48 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   12a68:	4b02      	ldr	r3, [pc, #8]	; (12a74 <radio_filter_configure+0x30>)
   12a6a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   12a6e:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   12a72:	bd30      	pop	{r4, r5, pc}
   12a74:	40001000 	.word	0x40001000

00012a78 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   12a78:	4a03      	ldr	r2, [pc, #12]	; (12a88 <radio_filter_disable+0x10>)
   12a7a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   12a7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12a82:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   12a86:	4770      	bx	lr
   12a88:	40001000 	.word	0x40001000

00012a8c <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   12a8c:	4b02      	ldr	r3, [pc, #8]	; (12a98 <radio_filter_status_reset+0xc>)
   12a8e:	2200      	movs	r2, #0
   12a90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   12a94:	4770      	bx	lr
   12a96:	bf00      	nop
   12a98:	40001000 	.word	0x40001000

00012a9c <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   12a9c:	4b03      	ldr	r3, [pc, #12]	; (12aac <radio_filter_has_match+0x10>)
   12a9e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   12aa2:	3000      	adds	r0, #0
   12aa4:	bf18      	it	ne
   12aa6:	2001      	movne	r0, #1
   12aa8:	4770      	bx	lr
   12aaa:	bf00      	nop
   12aac:	40001000 	.word	0x40001000

00012ab0 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12ab0:	4b01      	ldr	r3, [pc, #4]	; (12ab8 <radio_filter_match_get+0x8>)
   12ab2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   12ab6:	4770      	bx	lr
   12ab8:	40001000 	.word	0x40001000

00012abc <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   12abc:	4b04      	ldr	r3, [pc, #16]	; (12ad0 <radio_bc_configure+0x14>)
   12abe:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   12ac2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   12ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12aca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   12ace:	4770      	bx	lr
   12ad0:	40001000 	.word	0x40001000

00012ad4 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   12ad4:	4b05      	ldr	r3, [pc, #20]	; (12aec <radio_tmr_status_reset+0x18>)
   12ad6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12ada:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   12ade:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   12ae2:	227f      	movs	r2, #127	; 0x7f
   12ae4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12ae8:	4770      	bx	lr
   12aea:	bf00      	nop
   12aec:	4000b000 	.word	0x4000b000

00012af0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12af0:	4b03      	ldr	r3, [pc, #12]	; (12b00 <radio_tmr_tifs_set+0x10>)
   12af2:	4a04      	ldr	r2, [pc, #16]	; (12b04 <radio_tmr_tifs_set+0x14>)
   12af4:	781b      	ldrb	r3, [r3, #0]
   12af6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12afa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12afe:	4770      	bx	lr
   12b00:	200016bc 	.word	0x200016bc
   12b04:	40009000 	.word	0x40009000

00012b08 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12b0c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12b10:	4c30      	ldr	r4, [pc, #192]	; (12bd4 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   12b12:	4d31      	ldr	r5, [pc, #196]	; (12bd8 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12b14:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12b18:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   12b1a:	bf88      	it	hi
   12b1c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   12b20:	4b2e      	ldr	r3, [pc, #184]	; (12bdc <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   12b22:	4c2f      	ldr	r4, [pc, #188]	; (12be0 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   12b24:	bf82      	ittt	hi
   12b26:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   12b2a:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   12b2e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   12b32:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   12b34:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   12b38:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12b3a:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   12b3c:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   12b40:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   12b42:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   12b46:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12b4a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   12b4e:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   12b52:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   12b56:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   12b5a:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   12b5e:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   12b62:	4920      	ldr	r1, [pc, #128]	; (12be4 <radio_tmr_start+0xdc>)
   12b64:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   12b68:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   12b6c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   12b70:	f7ff fd5a 	bl	12628 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   12b74:	4b1c      	ldr	r3, [pc, #112]	; (12be8 <radio_tmr_start+0xe0>)
   12b76:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   12b78:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   12b7c:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   12b80:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   12b84:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   12b86:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   12b8a:	3b74      	subs	r3, #116	; 0x74
   12b8c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   12b90:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   12b94:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12b98:	f503 739a 	add.w	r3, r3, #308	; 0x134
   12b9c:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12ba0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12ba4:	33c4      	adds	r3, #196	; 0xc4
   12ba6:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   12baa:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   12bae:	3bc0      	subs	r3, #192	; 0xc0
   12bb0:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   12bb4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12bb8:	33c8      	adds	r3, #200	; 0xc8
   12bba:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12bbe:	f44f 6310 	mov.w	r3, #2304	; 0x900
   12bc2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12bc6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   12bca:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   12bce:	4628      	mov	r0, r5
   12bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bd4:	7ff0bdbf 	.word	0x7ff0bdbf
   12bd8:	000f4240 	.word	0x000f4240
   12bdc:	40008000 	.word	0x40008000
   12be0:	4000b000 	.word	0x4000b000
   12be4:	4000b148 	.word	0x4000b148
   12be8:	40009000 	.word	0x40009000

00012bec <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   12bec:	4a04      	ldr	r2, [pc, #16]	; (12c00 <radio_tmr_stop+0x14>)
   12bee:	2301      	movs	r3, #1
   12bf0:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   12bf2:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   12bf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   12bf8:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   12bfa:	6113      	str	r3, [r2, #16]
   12bfc:	4770      	bx	lr
   12bfe:	bf00      	nop
   12c00:	40008000 	.word	0x40008000

00012c04 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   12c04:	4b0c      	ldr	r3, [pc, #48]	; (12c38 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12c06:	4a0d      	ldr	r2, [pc, #52]	; (12c3c <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   12c08:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12c0c:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   12c10:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12c14:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12c18:	3240      	adds	r2, #64	; 0x40
   12c1a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   12c1e:	f502 7280 	add.w	r2, r2, #256	; 0x100
   12c22:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   12c26:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   12c2a:	3a34      	subs	r2, #52	; 0x34
   12c2c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   12c30:	2218      	movs	r2, #24
   12c32:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12c36:	4770      	bx	lr
   12c38:	40008000 	.word	0x40008000
   12c3c:	40001104 	.word	0x40001104

00012c40 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   12c40:	4b0b      	ldr	r3, [pc, #44]	; (12c70 <radio_tmr_aa_capture+0x30>)
   12c42:	4a0c      	ldr	r2, [pc, #48]	; (12c74 <radio_tmr_aa_capture+0x34>)
   12c44:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   12c48:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12c4c:	3240      	adds	r2, #64	; 0x40
   12c4e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12c52:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   12c56:	3a3c      	subs	r2, #60	; 0x3c
   12c58:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12c5c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12c60:	3240      	adds	r2, #64	; 0x40
   12c62:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   12c66:	220c      	movs	r2, #12
   12c68:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12c6c:	4770      	bx	lr
   12c6e:	bf00      	nop
   12c70:	4001f000 	.word	0x4001f000
   12c74:	40001100 	.word	0x40001100

00012c78 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12c78:	4b01      	ldr	r3, [pc, #4]	; (12c80 <radio_tmr_aa_get+0x8>)
   12c7a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12c7e:	4770      	bx	lr
   12c80:	40008000 	.word	0x40008000

00012c84 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   12c84:	4b01      	ldr	r3, [pc, #4]	; (12c8c <radio_tmr_aa_save+0x8>)
   12c86:	6018      	str	r0, [r3, #0]
   12c88:	4770      	bx	lr
   12c8a:	bf00      	nop
   12c8c:	200016b4 	.word	0x200016b4

00012c90 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   12c90:	4b01      	ldr	r3, [pc, #4]	; (12c98 <radio_tmr_aa_restore+0x8>)
   12c92:	6818      	ldr	r0, [r3, #0]
   12c94:	4770      	bx	lr
   12c96:	bf00      	nop
   12c98:	200016b4 	.word	0x200016b4

00012c9c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12c9c:	4b01      	ldr	r3, [pc, #4]	; (12ca4 <radio_tmr_ready_get+0x8>)
   12c9e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   12ca2:	4770      	bx	lr
   12ca4:	40008000 	.word	0x40008000

00012ca8 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   12ca8:	4b06      	ldr	r3, [pc, #24]	; (12cc4 <radio_tmr_end_capture+0x1c>)
   12caa:	4a07      	ldr	r2, [pc, #28]	; (12cc8 <radio_tmr_end_capture+0x20>)
   12cac:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   12cb0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12cb4:	323c      	adds	r2, #60	; 0x3c
   12cb6:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   12cba:	2220      	movs	r2, #32
   12cbc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12cc0:	4770      	bx	lr
   12cc2:	bf00      	nop
   12cc4:	4001f000 	.word	0x4001f000
   12cc8:	4000110c 	.word	0x4000110c

00012ccc <radio_tmr_end_get>:
   12ccc:	4b01      	ldr	r3, [pc, #4]	; (12cd4 <radio_tmr_end_get+0x8>)
   12cce:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   12cd2:	4770      	bx	lr
   12cd4:	40008000 	.word	0x40008000

00012cd8 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12cd8:	4b01      	ldr	r3, [pc, #4]	; (12ce0 <radio_tmr_tifs_base_get+0x8>)
   12cda:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   12cde:	4770      	bx	lr
   12ce0:	40008000 	.word	0x40008000

00012ce4 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12ce4:	4b16      	ldr	r3, [pc, #88]	; (12d40 <radio_ccm_rx_pkt_set+0x5c>)
{
   12ce6:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12ce8:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12cea:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12cec:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12cf0:	4e14      	ldr	r6, [pc, #80]	; (12d44 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12cf2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12cf6:	4d14      	ldr	r5, [pc, #80]	; (12d48 <radio_ccm_rx_pkt_set+0x64>)
   12cf8:	2902      	cmp	r1, #2
   12cfa:	bf0c      	ite	eq
   12cfc:	4629      	moveq	r1, r5
   12cfe:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   12d00:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12d04:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   12d08:	4810      	ldr	r0, [pc, #64]	; (12d4c <radio_ccm_rx_pkt_set+0x68>)
   12d0a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   12d0e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12d12:	4a0f      	ldr	r2, [pc, #60]	; (12d50 <radio_ccm_rx_pkt_set+0x6c>)
   12d14:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12d18:	490e      	ldr	r1, [pc, #56]	; (12d54 <radio_ccm_rx_pkt_set+0x70>)
   12d1a:	4a0f      	ldr	r2, [pc, #60]	; (12d58 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   12d1c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12d20:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12d24:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12d28:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   12d2c:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   12d30:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   12d34:	2140      	movs	r1, #64	; 0x40
   12d36:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   12d3a:	2201      	movs	r2, #1
   12d3c:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12d3e:	bd70      	pop	{r4, r5, r6, pc}
   12d40:	4000f000 	.word	0x4000f000
   12d44:	01000001 	.word	0x01000001
   12d48:	01010001 	.word	0x01010001
   12d4c:	200015b0 	.word	0x200015b0
   12d50:	200014a0 	.word	0x200014a0
   12d54:	40001104 	.word	0x40001104
   12d58:	4001f000 	.word	0x4001f000

00012d5c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   12d5c:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d5e:	4b0e      	ldr	r3, [pc, #56]	; (12d98 <radio_ccm_tx_pkt_set+0x3c>)
   12d60:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12d62:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d64:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12d68:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   12d6c:	4c0b      	ldr	r4, [pc, #44]	; (12d9c <radio_ccm_tx_pkt_set+0x40>)
   12d6e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12d72:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   12d76:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12d7a:	4809      	ldr	r0, [pc, #36]	; (12da0 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12d7c:	4909      	ldr	r1, [pc, #36]	; (12da4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12d7e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12d82:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   12d86:	2101      	movs	r1, #1
   12d88:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12d8c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12d90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   12d94:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12d96:	bd10      	pop	{r4, pc}
   12d98:	4000f000 	.word	0x4000f000
   12d9c:	01010000 	.word	0x01010000
   12da0:	200015b0 	.word	0x200015b0
   12da4:	200014a0 	.word	0x200014a0

00012da8 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   12da8:	4b0c      	ldr	r3, [pc, #48]	; (12ddc <radio_ccm_is_done+0x34>)
   12daa:	2202      	movs	r2, #2
   12dac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12db0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   12db4:	b16a      	cbz	r2, 12dd2 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   12db6:	2202      	movs	r2, #2
   12db8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   12dbc:	4a08      	ldr	r2, [pc, #32]	; (12de0 <radio_ccm_is_done+0x38>)
   12dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12dc2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   12dc6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   12dca:	fab0 f080 	clz	r0, r0
   12dce:	0940      	lsrs	r0, r0, #5
   12dd0:	4770      	bx	lr
		__WFE();
   12dd2:	bf20      	wfe
		__SEV();
   12dd4:	bf40      	sev
		__WFE();
   12dd6:	bf20      	wfe
   12dd8:	e7ea      	b.n	12db0 <radio_ccm_is_done+0x8>
   12dda:	bf00      	nop
   12ddc:	4000f000 	.word	0x4000f000
   12de0:	e000e100 	.word	0xe000e100

00012de4 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   12de4:	4b03      	ldr	r3, [pc, #12]	; (12df4 <radio_ccm_mic_is_valid+0x10>)
   12de6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12dea:	3000      	adds	r0, #0
   12dec:	bf18      	it	ne
   12dee:	2001      	movne	r0, #1
   12df0:	4770      	bx	lr
   12df2:	bf00      	nop
   12df4:	4000f000 	.word	0x4000f000

00012df8 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   12df8:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12dfa:	4c13      	ldr	r4, [pc, #76]	; (12e48 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12dfc:	4d13      	ldr	r5, [pc, #76]	; (12e4c <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12dfe:	2303      	movs	r3, #3
   12e00:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   12e04:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   12e08:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12e0c:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   12e10:	3b01      	subs	r3, #1
   12e12:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   12e16:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   12e18:	4b0d      	ldr	r3, [pc, #52]	; (12e50 <radio_ar_configure+0x58>)
   12e1a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   12e1e:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   12e20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   12e24:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12e28:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   12e2c:	f7ff fe46 	bl	12abc <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12e30:	4b08      	ldr	r3, [pc, #32]	; (12e54 <radio_ar_configure+0x5c>)
   12e32:	4a09      	ldr	r2, [pc, #36]	; (12e58 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12e34:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12e38:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12e3c:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   12e3e:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12e42:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12e46:	bd38      	pop	{r3, r4, r5, pc}
   12e48:	4000f000 	.word	0x4000f000
   12e4c:	40001000 	.word	0x40001000
   12e50:	2000149c 	.word	0x2000149c
   12e54:	4001f000 	.word	0x4001f000
   12e58:	40001128 	.word	0x40001128

00012e5c <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   12e5c:	4b01      	ldr	r3, [pc, #4]	; (12e64 <radio_ar_match_get+0x8>)
   12e5e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12e62:	4770      	bx	lr
   12e64:	4000f000 	.word	0x4000f000

00012e68 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12e68:	4a04      	ldr	r2, [pc, #16]	; (12e7c <radio_ar_status_reset+0x14>)
   12e6a:	2300      	movs	r3, #0
   12e6c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12e70:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   12e74:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12e78:	4770      	bx	lr
   12e7a:	bf00      	nop
   12e7c:	40001000 	.word	0x40001000

00012e80 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   12e80:	4b08      	ldr	r3, [pc, #32]	; (12ea4 <radio_ar_has_match+0x24>)
   12e82:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   12e86:	b160      	cbz	r0, 12ea2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   12e88:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   12e8c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   12e90:	b138      	cbz	r0, 12ea2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   12e92:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   12e96:	b120      	cbz	r0, 12ea2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12e98:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12e9c:	fab0 f080 	clz	r0, r0
   12ea0:	0940      	lsrs	r0, r0, #5
}
   12ea2:	4770      	bx	lr
   12ea4:	40001000 	.word	0x40001000

00012ea8 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12ea8:	2901      	cmp	r1, #1
{
   12eaa:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12eac:	d00f      	beq.n	12ece <mayfly_enable_cb+0x26>
   12eae:	4b0e      	ldr	r3, [pc, #56]	; (12ee8 <mayfly_enable_cb+0x40>)
   12eb0:	9301      	str	r3, [sp, #4]
   12eb2:	9300      	str	r3, [sp, #0]
   12eb4:	4b0d      	ldr	r3, [pc, #52]	; (12eec <mayfly_enable_cb+0x44>)
   12eb6:	4a0e      	ldr	r2, [pc, #56]	; (12ef0 <mayfly_enable_cb+0x48>)
   12eb8:	681c      	ldr	r4, [r3, #0]
   12eba:	490e      	ldr	r1, [pc, #56]	; (12ef4 <mayfly_enable_cb+0x4c>)
   12ebc:	4b0e      	ldr	r3, [pc, #56]	; (12ef8 <mayfly_enable_cb+0x50>)
   12ebe:	480f      	ldr	r0, [pc, #60]	; (12efc <mayfly_enable_cb+0x54>)
   12ec0:	47a0      	blx	r4
   12ec2:	4040      	eors	r0, r0
   12ec4:	f380 8811 	msr	BASEPRI, r0
   12ec8:	f04f 0004 	mov.w	r0, #4
   12ecc:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   12ece:	2018      	movs	r0, #24
	if (enable) {
   12ed0:	b122      	cbz	r2, 12edc <mayfly_enable_cb+0x34>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   12ed2:	b002      	add	sp, #8
   12ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(SWI4_IRQn);
   12ed8:	f7ee bd5a 	b.w	1990 <_arch_irq_enable>
}
   12edc:	b002      	add	sp, #8
   12ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(SWI4_IRQn);
   12ee2:	f7ee bd65 	b.w	19b0 <_arch_irq_disable>
   12ee6:	bf00      	nop
   12ee8:	0001563e 	.word	0x0001563e
   12eec:	20003a5c 	.word	0x20003a5c
   12ef0:	000167b9 	.word	0x000167b9
   12ef4:	00016808 	.word	0x00016808
   12ef8:	000193b7 	.word	0x000193b7
   12efc:	000193e6 	.word	0x000193e6

00012f00 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   12f00:	b513      	push	{r0, r1, r4, lr}
	(void)caller_id;

	switch (callee_id) {
   12f02:	b189      	cbz	r1, 12f28 <mayfly_is_enabled+0x28>
   12f04:	2901      	cmp	r1, #1
   12f06:	d015      	beq.n	12f34 <mayfly_is_enabled+0x34>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   12f08:	4b0b      	ldr	r3, [pc, #44]	; (12f38 <mayfly_is_enabled+0x38>)
   12f0a:	9301      	str	r3, [sp, #4]
   12f0c:	9300      	str	r3, [sp, #0]
   12f0e:	4b0b      	ldr	r3, [pc, #44]	; (12f3c <mayfly_is_enabled+0x3c>)
   12f10:	4a0b      	ldr	r2, [pc, #44]	; (12f40 <mayfly_is_enabled+0x40>)
   12f12:	681c      	ldr	r4, [r3, #0]
   12f14:	490b      	ldr	r1, [pc, #44]	; (12f44 <mayfly_is_enabled+0x44>)
   12f16:	4b0c      	ldr	r3, [pc, #48]	; (12f48 <mayfly_is_enabled+0x48>)
   12f18:	480c      	ldr	r0, [pc, #48]	; (12f4c <mayfly_is_enabled+0x4c>)
   12f1a:	47a0      	blx	r4
   12f1c:	4040      	eors	r0, r0
   12f1e:	f380 8811 	msr	BASEPRI, r0
   12f22:	f04f 0004 	mov.w	r0, #4
   12f26:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   12f28:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   12f2a:	b002      	add	sp, #8
   12f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return irq_is_enabled(SWI4_IRQn);
   12f30:	f7ee bd52 	b.w	19d8 <_arch_irq_is_enabled>
   12f34:	2018      	movs	r0, #24
   12f36:	e7f8      	b.n	12f2a <mayfly_is_enabled+0x2a>
   12f38:	0001563e 	.word	0x0001563e
   12f3c:	20003a5c 	.word	0x20003a5c
   12f40:	000167b9 	.word	0x000167b9
   12f44:	00016808 	.word	0x00016808
   12f48:	000193c8 	.word	0x000193c8
   12f4c:	00016758 	.word	0x00016758

00012f50 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12f50:	4288      	cmp	r0, r1
   12f52:	d00a      	beq.n	12f6a <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   12f54:	b918      	cbnz	r0, 12f5e <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   12f56:	1e4b      	subs	r3, r1, #1
   12f58:	4258      	negs	r0, r3
   12f5a:	4158      	adcs	r0, r3
   12f5c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12f5e:	2801      	cmp	r0, #1
   12f60:	d105      	bne.n	12f6e <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   12f62:	fab1 f081 	clz	r0, r1
   12f66:	0940      	lsrs	r0, r0, #5
   12f68:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12f6a:	2001      	movs	r0, #1
   12f6c:	4770      	bx	lr
   12f6e:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   12f70:	4770      	bx	lr
	...

00012f74 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   12f74:	b513      	push	{r0, r1, r4, lr}
   12f76:	4b0e      	ldr	r3, [pc, #56]	; (12fb0 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   12f78:	b189      	cbz	r1, 12f9e <mayfly_pend+0x2a>
   12f7a:	2901      	cmp	r1, #1
   12f7c:	d015      	beq.n	12faa <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   12f7e:	4b0d      	ldr	r3, [pc, #52]	; (12fb4 <mayfly_pend+0x40>)
   12f80:	9301      	str	r3, [sp, #4]
   12f82:	9300      	str	r3, [sp, #0]
   12f84:	4b0c      	ldr	r3, [pc, #48]	; (12fb8 <mayfly_pend+0x44>)
   12f86:	4a0d      	ldr	r2, [pc, #52]	; (12fbc <mayfly_pend+0x48>)
   12f88:	681c      	ldr	r4, [r3, #0]
   12f8a:	490d      	ldr	r1, [pc, #52]	; (12fc0 <mayfly_pend+0x4c>)
   12f8c:	4b0d      	ldr	r3, [pc, #52]	; (12fc4 <mayfly_pend+0x50>)
   12f8e:	480e      	ldr	r0, [pc, #56]	; (12fc8 <mayfly_pend+0x54>)
   12f90:	47a0      	blx	r4
   12f92:	4040      	eors	r0, r0
   12f94:	f380 8811 	msr	BASEPRI, r0
   12f98:	f04f 0004 	mov.w	r0, #4
   12f9c:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12fa2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   12fa6:	b002      	add	sp, #8
   12fa8:	bd10      	pop	{r4, pc}
   12faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12fae:	e7f8      	b.n	12fa2 <mayfly_pend+0x2e>
   12fb0:	e000e100 	.word	0xe000e100
   12fb4:	0001563e 	.word	0x0001563e
   12fb8:	20003a5c 	.word	0x20003a5c
   12fbc:	000167b9 	.word	0x000167b9
   12fc0:	00016808 	.word	0x00016808
   12fc4:	000193da 	.word	0x000193da
   12fc8:	00016758 	.word	0x00016758

00012fcc <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12fcc:	2803      	cmp	r0, #3
{
   12fce:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12fd0:	d90f      	bls.n	12ff2 <hal_ticker_instance0_caller_id_get+0x26>
   12fd2:	4b0f      	ldr	r3, [pc, #60]	; (13010 <hal_ticker_instance0_caller_id_get+0x44>)
   12fd4:	9301      	str	r3, [sp, #4]
   12fd6:	9300      	str	r3, [sp, #0]
   12fd8:	4b0e      	ldr	r3, [pc, #56]	; (13014 <hal_ticker_instance0_caller_id_get+0x48>)
   12fda:	4a0f      	ldr	r2, [pc, #60]	; (13018 <hal_ticker_instance0_caller_id_get+0x4c>)
   12fdc:	681c      	ldr	r4, [r3, #0]
   12fde:	490f      	ldr	r1, [pc, #60]	; (1301c <hal_ticker_instance0_caller_id_get+0x50>)
   12fe0:	4b0f      	ldr	r3, [pc, #60]	; (13020 <hal_ticker_instance0_caller_id_get+0x54>)
   12fe2:	4810      	ldr	r0, [pc, #64]	; (13024 <hal_ticker_instance0_caller_id_get+0x58>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12fe4:	47a0      	blx	r4
   12fe6:	4040      	eors	r0, r0
   12fe8:	f380 8811 	msr	BASEPRI, r0
   12fec:	f04f 0004 	mov.w	r0, #4
   12ff0:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   12ff2:	4b0d      	ldr	r3, [pc, #52]	; (13028 <hal_ticker_instance0_caller_id_get+0x5c>)
   12ff4:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12ff6:	b948      	cbnz	r0, 1300c <hal_ticker_instance0_caller_id_get+0x40>
   12ff8:	4b05      	ldr	r3, [pc, #20]	; (13010 <hal_ticker_instance0_caller_id_get+0x44>)
   12ffa:	9301      	str	r3, [sp, #4]
   12ffc:	9300      	str	r3, [sp, #0]
   12ffe:	4b05      	ldr	r3, [pc, #20]	; (13014 <hal_ticker_instance0_caller_id_get+0x48>)
   13000:	4a05      	ldr	r2, [pc, #20]	; (13018 <hal_ticker_instance0_caller_id_get+0x4c>)
   13002:	681c      	ldr	r4, [r3, #0]
   13004:	4905      	ldr	r1, [pc, #20]	; (1301c <hal_ticker_instance0_caller_id_get+0x50>)
   13006:	4b06      	ldr	r3, [pc, #24]	; (13020 <hal_ticker_instance0_caller_id_get+0x54>)
   13008:	4808      	ldr	r0, [pc, #32]	; (1302c <hal_ticker_instance0_caller_id_get+0x60>)
   1300a:	e7eb      	b.n	12fe4 <hal_ticker_instance0_caller_id_get+0x18>

	return caller_id;
}
   1300c:	b002      	add	sp, #8
   1300e:	bd10      	pop	{r4, pc}
   13010:	0001563e 	.word	0x0001563e
   13014:	20003a5c 	.word	0x20003a5c
   13018:	000167b9 	.word	0x000167b9
   1301c:	00016808 	.word	0x00016808
   13020:	00019416 	.word	0x00019416
   13024:	00019458 	.word	0x00019458
   13028:	00019454 	.word	0x00019454
   1302c:	00019499 	.word	0x00019499

00013030 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   13030:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   13032:	3802      	subs	r0, #2
{
   13034:	461c      	mov	r4, r3
	switch (caller_id) {
   13036:	2803      	cmp	r0, #3
   13038:	d818      	bhi.n	1306c <hal_ticker_instance0_sched+0x3c>
   1303a:	e8df f000 	tbb	[pc, r0]
   1303e:	0d02      	.short	0x0d02
   13040:	3013      	.short	0x3013
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   13042:	2903      	cmp	r1, #3
   13044:	d112      	bne.n	1306c <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   13046:	4b19      	ldr	r3, [pc, #100]	; (130ac <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13048:	2100      	movs	r1, #0
			m.param = instance;
   1304a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1304c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1304e:	b002      	add	sp, #8
   13050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13054:	f7f4 b978 	b.w	7348 <mayfly_enqueue>
		switch (callee_id) {
   13058:	2904      	cmp	r1, #4
   1305a:	d107      	bne.n	1306c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   1305c:	4b14      	ldr	r3, [pc, #80]	; (130b0 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1305e:	2101      	movs	r1, #1
			m.param = instance;
   13060:	609c      	str	r4, [r3, #8]
   13062:	e7f3      	b.n	1304c <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   13064:	2903      	cmp	r1, #3
   13066:	d011      	beq.n	1308c <hal_ticker_instance0_sched+0x5c>
   13068:	2904      	cmp	r1, #4
   1306a:	d014      	beq.n	13096 <hal_ticker_instance0_sched+0x66>
		LL_ASSERT(0);
   1306c:	4b11      	ldr	r3, [pc, #68]	; (130b4 <hal_ticker_instance0_sched+0x84>)
   1306e:	9301      	str	r3, [sp, #4]
   13070:	9300      	str	r3, [sp, #0]
   13072:	4b11      	ldr	r3, [pc, #68]	; (130b8 <hal_ticker_instance0_sched+0x88>)
   13074:	4a11      	ldr	r2, [pc, #68]	; (130bc <hal_ticker_instance0_sched+0x8c>)
   13076:	681c      	ldr	r4, [r3, #0]
   13078:	4911      	ldr	r1, [pc, #68]	; (130c0 <hal_ticker_instance0_sched+0x90>)
   1307a:	4b12      	ldr	r3, [pc, #72]	; (130c4 <hal_ticker_instance0_sched+0x94>)
   1307c:	4812      	ldr	r0, [pc, #72]	; (130c8 <hal_ticker_instance0_sched+0x98>)
   1307e:	47a0      	blx	r4
   13080:	4040      	eors	r0, r0
   13082:	f380 8811 	msr	BASEPRI, r0
   13086:	f04f 0004 	mov.w	r0, #4
   1308a:	df02      	svc	2
			m.param = instance;
   1308c:	4b0f      	ldr	r3, [pc, #60]	; (130cc <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1308e:	2100      	movs	r1, #0
			m.param = instance;
   13090:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13092:	2001      	movs	r0, #1
   13094:	e7db      	b.n	1304e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   13096:	4b0e      	ldr	r3, [pc, #56]	; (130d0 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13098:	2101      	movs	r1, #1
			m.param = instance;
   1309a:	609c      	str	r4, [r3, #8]
   1309c:	e7f9      	b.n	13092 <hal_ticker_instance0_sched+0x62>
		switch (callee_id) {
   1309e:	2904      	cmp	r1, #4
   130a0:	d1e4      	bne.n	1306c <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   130a2:	4b0c      	ldr	r3, [pc, #48]	; (130d4 <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   130a4:	2101      	movs	r1, #1
			m.param = instance;
   130a6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   130a8:	2003      	movs	r0, #3
   130aa:	e7d0      	b.n	1304e <hal_ticker_instance0_sched+0x1e>
   130ac:	20003e18 	.word	0x20003e18
   130b0:	20003e28 	.word	0x20003e28
   130b4:	0001563e 	.word	0x0001563e
   130b8:	20003a5c 	.word	0x20003a5c
   130bc:	000167b9 	.word	0x000167b9
   130c0:	00016808 	.word	0x00016808
   130c4:	00019439 	.word	0x00019439
   130c8:	00016758 	.word	0x00016758
   130cc:	20003e38 	.word	0x20003e38
   130d0:	20003e48 	.word	0x20003e48
   130d4:	20003e58 	.word	0x20003e58

000130d8 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   130d8:	4601      	mov	r1, r0
   130da:	2000      	movs	r0, #0
   130dc:	f7ff ba54 	b.w	12588 <cntr_cmp_set>

000130e0 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   130e0:	4770      	bx	lr
	...

000130e4 <net_buf_pool_get>:
}
   130e4:	4b01      	ldr	r3, [pc, #4]	; (130ec <net_buf_pool_get+0x8>)
   130e6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   130ea:	4770      	bx	lr
   130ec:	20003f2c 	.word	0x20003f2c

000130f0 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   130f0:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   130f2:	4b04      	ldr	r3, [pc, #16]	; (13104 <net_buf_id+0x14>)
   130f4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   130f8:	69db      	ldr	r3, [r3, #28]
   130fa:	1ac0      	subs	r0, r0, r3
}
   130fc:	4b02      	ldr	r3, [pc, #8]	; (13108 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   130fe:	10c0      	asrs	r0, r0, #3
}
   13100:	4358      	muls	r0, r3
   13102:	4770      	bx	lr
   13104:	20003f2c 	.word	0x20003f2c
   13108:	aaaaaaab 	.word	0xaaaaaaab

0001310c <fixed_data_alloc>:
{
   1310c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1310e:	4b09      	ldr	r3, [pc, #36]	; (13134 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13110:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13112:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   13116:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13118:	699b      	ldr	r3, [r3, #24]
   1311a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   1311c:	6823      	ldr	r3, [r4, #0]
   1311e:	429a      	cmp	r2, r3
   13120:	bf94      	ite	ls
   13122:	600a      	strls	r2, [r1, #0]
   13124:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13126:	f7ff ffe3 	bl	130f0 <net_buf_id>
   1312a:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   1312e:	fb02 3000 	mla	r0, r2, r0, r3
   13132:	bd10      	pop	{r4, pc}
   13134:	20003f2c 	.word	0x20003f2c

00013138 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   13138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1313c:	4605      	mov	r5, r0
   1313e:	9101      	str	r1, [sp, #4]
   13140:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13142:	f001 fb09 	bl	14758 <_impl_k_uptime_get_32>
   13146:	4607      	mov	r7, r0
	__asm__ volatile(
   13148:	f04f 0320 	mov.w	r3, #32
   1314c:	f3ef 8811 	mrs	r8, BASEPRI
   13150:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   13154:	8a6b      	ldrh	r3, [r5, #18]
   13156:	2b00      	cmp	r3, #0
   13158:	d03d      	beq.n	131d6 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1315a:	8a2a      	ldrh	r2, [r5, #16]
   1315c:	429a      	cmp	r2, r3
   1315e:	d92a      	bls.n	131b6 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13160:	2100      	movs	r1, #0
   13162:	4628      	mov	r0, r5
   13164:	f000 ff1e 	bl	13fa4 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   13168:	b328      	cbz	r0, 131b6 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1316a:	f388 8811 	msr	BASEPRI, r8
   1316e:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   13170:	9b01      	ldr	r3, [sp, #4]
   13172:	2b00      	cmp	r3, #0
   13174:	d03c      	beq.n	131f0 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   13176:	1c73      	adds	r3, r6, #1
   13178:	2b01      	cmp	r3, #1
   1317a:	d906      	bls.n	1318a <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1317c:	f001 faec 	bl	14758 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   13180:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   13182:	42b0      	cmp	r0, r6
   13184:	bf94      	ite	ls
   13186:	1a36      	subls	r6, r6, r0
   13188:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1318a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1318c:	4f1e      	ldr	r7, [pc, #120]	; (13208 <net_buf_alloc_len+0xd0>)
   1318e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   13192:	4632      	mov	r2, r6
   13194:	699b      	ldr	r3, [r3, #24]
   13196:	681b      	ldr	r3, [r3, #0]
   13198:	a901      	add	r1, sp, #4
   1319a:	681b      	ldr	r3, [r3, #0]
   1319c:	4620      	mov	r0, r4
   1319e:	4798      	blx	r3
   131a0:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   131a2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   131a4:	bb28      	cbnz	r0, 131f2 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   131a6:	79a0      	ldrb	r0, [r4, #6]
   131a8:	4621      	mov	r1, r4
   131aa:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   131ae:	f000 fec6 	bl	13f3e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   131b2:	462c      	mov	r4, r5
   131b4:	e018      	b.n	131e8 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   131b6:	8a68      	ldrh	r0, [r5, #18]
   131b8:	1e43      	subs	r3, r0, #1
   131ba:	826b      	strh	r3, [r5, #18]
   131bc:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   131c0:	8a2c      	ldrh	r4, [r5, #16]
   131c2:	1a24      	subs	r4, r4, r0
   131c4:	69e8      	ldr	r0, [r5, #28]
   131c6:	2318      	movs	r3, #24
   131c8:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   131cc:	4b0e      	ldr	r3, [pc, #56]	; (13208 <net_buf_alloc_len+0xd0>)
   131ce:	1aed      	subs	r5, r5, r3
   131d0:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   131d2:	71a5      	strb	r5, [r4, #6]
		goto success;
   131d4:	e7cc      	b.n	13170 <net_buf_alloc_len+0x38>
   131d6:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   131da:	4631      	mov	r1, r6
   131dc:	4628      	mov	r0, r5
   131de:	f000 fee1 	bl	13fa4 <_impl_k_queue_get>
		return NULL;
   131e2:	4604      	mov	r4, r0
	if (!buf) {
   131e4:	2800      	cmp	r0, #0
   131e6:	d1c3      	bne.n	13170 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   131e8:	4620      	mov	r0, r4
   131ea:	b002      	add	sp, #8
   131ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   131f0:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   131f2:	2301      	movs	r3, #1
   131f4:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   131f6:	2300      	movs	r3, #0
	buf->frags = NULL;
   131f8:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   131fa:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   131fc:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   131fe:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   13200:	6923      	ldr	r3, [r4, #16]
   13202:	81e2      	strh	r2, [r4, #14]
   13204:	60a3      	str	r3, [r4, #8]
	return buf;
   13206:	e7ef      	b.n	131e8 <net_buf_alloc_len+0xb0>
   13208:	20003f2c 	.word	0x20003f2c

0001320c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1320c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1320e:	685b      	ldr	r3, [r3, #4]
   13210:	460a      	mov	r2, r1
   13212:	6819      	ldr	r1, [r3, #0]
   13214:	f7ff bf90 	b.w	13138 <net_buf_alloc_len>

00013218 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   13218:	b570      	push	{r4, r5, r6, lr}
   1321a:	4606      	mov	r6, r0
   1321c:	f000 fec2 	bl	13fa4 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   13220:	4605      	mov	r5, r0
   13222:	b128      	cbz	r0, 13230 <net_buf_get+0x18>
   13224:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13226:	7963      	ldrb	r3, [r4, #5]
   13228:	f013 0301 	ands.w	r3, r3, #1
   1322c:	d102      	bne.n	13234 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1322e:	6023      	str	r3, [r4, #0]

	return buf;
}
   13230:	4628      	mov	r0, r5
   13232:	bd70      	pop	{r4, r5, r6, pc}
   13234:	2100      	movs	r1, #0
   13236:	4630      	mov	r0, r6
   13238:	f000 feb4 	bl	13fa4 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1323c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1323e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   13240:	f023 0301 	bic.w	r3, r3, #1
   13244:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   13246:	4604      	mov	r4, r0
   13248:	e7ed      	b.n	13226 <net_buf_get+0xe>

0001324a <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1324a:	6883      	ldr	r3, [r0, #8]
   1324c:	4419      	add	r1, r3
   1324e:	6001      	str	r1, [r0, #0]
   13250:	4770      	bx	lr

00013252 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   13252:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   13254:	460a      	mov	r2, r1
   13256:	6814      	ldr	r4, [r2, #0]
   13258:	b914      	cbnz	r4, 13260 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   1325a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1325c:	f000 be74 	b.w	13f48 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   13260:	7953      	ldrb	r3, [r2, #5]
   13262:	f043 0301 	orr.w	r3, r3, #1
   13266:	7153      	strb	r3, [r2, #5]
   13268:	4622      	mov	r2, r4
   1326a:	e7f4      	b.n	13256 <net_buf_put+0x4>

0001326c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1326e:	4d15      	ldr	r5, [pc, #84]	; (132c4 <net_buf_unref+0x58>)
   13270:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   13272:	2600      	movs	r6, #0
	while (buf) {
   13274:	b904      	cbnz	r4, 13278 <net_buf_unref+0xc>
   13276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   13278:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1327a:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   1327c:	3b01      	subs	r3, #1
   1327e:	b2db      	uxtb	r3, r3
   13280:	7123      	strb	r3, [r4, #4]
   13282:	2b00      	cmp	r3, #0
   13284:	d1f7      	bne.n	13276 <net_buf_unref+0xa>
		if (buf->__buf) {
   13286:	6921      	ldr	r1, [r4, #16]
   13288:	b159      	cbz	r1, 132a2 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1328a:	7963      	ldrb	r3, [r4, #5]
   1328c:	079b      	lsls	r3, r3, #30
   1328e:	d407      	bmi.n	132a0 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13290:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   13292:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   13296:	4620      	mov	r0, r4
   13298:	699b      	ldr	r3, [r3, #24]
   1329a:	681b      	ldr	r3, [r3, #0]
   1329c:	689b      	ldr	r3, [r3, #8]
   1329e:	4798      	blx	r3
			buf->__buf = NULL;
   132a0:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   132a2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   132a4:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   132a6:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   132aa:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   132ac:	695b      	ldr	r3, [r3, #20]
   132ae:	b11b      	cbz	r3, 132b8 <net_buf_unref+0x4c>
			pool->destroy(buf);
   132b0:	4620      	mov	r0, r4
   132b2:	4798      	blx	r3
{
   132b4:	463c      	mov	r4, r7
   132b6:	e7dd      	b.n	13274 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   132b8:	4621      	mov	r1, r4
   132ba:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   132be:	f000 fe3e 	bl	13f3e <k_queue_prepend>
   132c2:	e7f7      	b.n	132b4 <net_buf_unref+0x48>
   132c4:	20003f2c 	.word	0x20003f2c

000132c8 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   132c8:	7903      	ldrb	r3, [r0, #4]
   132ca:	3301      	adds	r3, #1
   132cc:	7103      	strb	r3, [r0, #4]
	return buf;
}
   132ce:	4770      	bx	lr

000132d0 <net_buf_simple_add>:
	return buf->data + buf->len;
   132d0:	8883      	ldrh	r3, [r0, #4]
   132d2:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   132d4:	4419      	add	r1, r3
   132d6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   132d8:	18d0      	adds	r0, r2, r3
   132da:	4770      	bx	lr

000132dc <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   132dc:	b430      	push	{r4, r5}
   132de:	8883      	ldrh	r3, [r0, #4]
   132e0:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   132e2:	189d      	adds	r5, r3, r2
   132e4:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   132e6:	18e0      	adds	r0, r4, r3
}
   132e8:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   132ea:	f7ee bd9b 	b.w	1e24 <memcpy>

000132ee <net_buf_simple_add_u8>:
   132ee:	8883      	ldrh	r3, [r0, #4]
   132f0:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   132f2:	b510      	push	{r4, lr}
	buf->len += len;
   132f4:	1c5c      	adds	r4, r3, #1
   132f6:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   132f8:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   132fa:	18d0      	adds	r0, r2, r3
   132fc:	bd10      	pop	{r4, pc}

000132fe <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   132fe:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   13300:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   13302:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   13304:	4411      	add	r1, r2
	buf->data -= len;
   13306:	6003      	str	r3, [r0, #0]
	buf->len += len;
   13308:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1330a:	4618      	mov	r0, r3
   1330c:	4770      	bx	lr

0001330e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1330e:	8883      	ldrh	r3, [r0, #4]
   13310:	1a5b      	subs	r3, r3, r1
   13312:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   13314:	6803      	ldr	r3, [r0, #0]
   13316:	4419      	add	r1, r3
   13318:	6001      	str	r1, [r0, #0]
}
   1331a:	4608      	mov	r0, r1
   1331c:	4770      	bx	lr

0001331e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1331e:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   13320:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   13322:	2101      	movs	r1, #1
	val = buf->data[0];
   13324:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   13326:	f7ff fff2 	bl	1330e <net_buf_simple_pull>

	return val;
}
   1332a:	4610      	mov	r0, r2
   1332c:	bd08      	pop	{r3, pc}

0001332e <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1332e:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   13330:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13332:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   13334:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   13336:	f7ff ffea 	bl	1330e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1333a:	4610      	mov	r0, r2
   1333c:	bd08      	pop	{r3, pc}

0001333e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1333e:	6802      	ldr	r2, [r0, #0]
   13340:	6880      	ldr	r0, [r0, #8]
}
   13342:	1a10      	subs	r0, r2, r0
   13344:	4770      	bx	lr

00013346 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   13346:	6802      	ldr	r2, [r0, #0]
   13348:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1334a:	88c3      	ldrh	r3, [r0, #6]
   1334c:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   1334e:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13350:	1a9b      	subs	r3, r3, r2
}
   13352:	1a18      	subs	r0, r3, r0
   13354:	4770      	bx	lr

00013356 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13356:	6800      	ldr	r0, [r0, #0]
   13358:	6880      	ldr	r0, [r0, #8]
   1335a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   1335c:	b941      	cbnz	r1, 13370 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   1335e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   13362:	fa21 f202 	lsr.w	r2, r1, r2
   13366:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   1336a:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   1336c:	2000      	movs	r0, #0
   1336e:	4770      	bx	lr
		*value = gpio->IN;
   13370:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   13374:	e7f9      	b.n	1336a <gpio_nrf5_read+0x14>

00013376 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13376:	6800      	ldr	r0, [r0, #0]
   13378:	6880      	ldr	r0, [r0, #8]
   1337a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   1337c:	b949      	cbnz	r1, 13392 <gpio_nrf5_write+0x1c>
   1337e:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   13380:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   13382:	b11b      	cbz	r3, 1338c <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   13384:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   13388:	2000      	movs	r0, #0
   1338a:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   1338c:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   13390:	e7fa      	b.n	13388 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   13392:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   13396:	e7f7      	b.n	13388 <gpio_nrf5_write+0x12>

00013398 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
   13398:	b508      	push	{r3, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1339a:	6883      	ldr	r3, [r0, #8]
 */
static inline void _gpio_manage_callback(sys_slist_t *callbacks,
					 struct gpio_callback *callback,
					 bool set)
{
	__ASSERT(callback, "No callback!");
   1339c:	b949      	cbnz	r1, 133b2 <gpio_nrf5_manage_callback+0x1a>
   1339e:	231a      	movs	r3, #26
   133a0:	4a1a      	ldr	r2, [pc, #104]	; (1340c <gpio_nrf5_manage_callback+0x74>)
   133a2:	491b      	ldr	r1, [pc, #108]	; (13410 <gpio_nrf5_manage_callback+0x78>)
   133a4:	481b      	ldr	r0, [pc, #108]	; (13414 <gpio_nrf5_manage_callback+0x7c>)
   133a6:	f7ed fdf1 	bl	f8c <printk>
   133aa:	481b      	ldr	r0, [pc, #108]	; (13418 <gpio_nrf5_manage_callback+0x80>)
   133ac:	f7ed fdee 	bl	f8c <printk>
   133b0:	e7fe      	b.n	133b0 <gpio_nrf5_manage_callback+0x18>
	__ASSERT(callback->handler, "No callback handler!");
   133b2:	6848      	ldr	r0, [r1, #4]
   133b4:	b948      	cbnz	r0, 133ca <gpio_nrf5_manage_callback+0x32>
   133b6:	231b      	movs	r3, #27
   133b8:	4a14      	ldr	r2, [pc, #80]	; (1340c <gpio_nrf5_manage_callback+0x74>)
   133ba:	4918      	ldr	r1, [pc, #96]	; (1341c <gpio_nrf5_manage_callback+0x84>)
   133bc:	4815      	ldr	r0, [pc, #84]	; (13414 <gpio_nrf5_manage_callback+0x7c>)
   133be:	f7ed fde5 	bl	f8c <printk>
   133c2:	4817      	ldr	r0, [pc, #92]	; (13420 <gpio_nrf5_manage_callback+0x88>)
   133c4:	f7ed fde2 	bl	f8c <printk>
   133c8:	e7fe      	b.n	133c8 <gpio_nrf5_manage_callback+0x30>
   133ca:	6818      	ldr	r0, [r3, #0]

	if (set) {
   133cc:	b172      	cbz	r2, 133ec <gpio_nrf5_manage_callback+0x54>
	parent->next = child;
   133ce:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   133d0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   133d2:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   133d4:	b902      	cbnz	r2, 133d8 <gpio_nrf5_manage_callback+0x40>
	list->tail = node;
   133d6:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   133d8:	2000      	movs	r0, #0
   133da:	bd08      	pop	{r3, pc}
	parent->next = child;
   133dc:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   133de:	6858      	ldr	r0, [r3, #4]
   133e0:	4281      	cmp	r1, r0
	list->tail = node;
   133e2:	bf08      	it	eq
   133e4:	605a      	streq	r2, [r3, #4]
   133e6:	e00d      	b.n	13404 <gpio_nrf5_manage_callback+0x6c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   133e8:	4602      	mov	r2, r0
   133ea:	6800      	ldr	r0, [r0, #0]
   133ec:	2800      	cmp	r0, #0
   133ee:	d0f3      	beq.n	133d8 <gpio_nrf5_manage_callback+0x40>
   133f0:	4281      	cmp	r1, r0
   133f2:	d1f9      	bne.n	133e8 <gpio_nrf5_manage_callback+0x50>
   133f4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   133f6:	2a00      	cmp	r2, #0
   133f8:	d1f0      	bne.n	133dc <gpio_nrf5_manage_callback+0x44>
   133fa:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   133fc:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   133fe:	4291      	cmp	r1, r2
   13400:	d100      	bne.n	13404 <gpio_nrf5_manage_callback+0x6c>
	list->tail = node;
   13402:	6058      	str	r0, [r3, #4]
	parent->next = child;
   13404:	2300      	movs	r3, #0
   13406:	600b      	str	r3, [r1, #0]
   13408:	e7e6      	b.n	133d8 <gpio_nrf5_manage_callback+0x40>
   1340a:	bf00      	nop
   1340c:	00019590 	.word	0x00019590
   13410:	000195c9 	.word	0x000195c9
   13414:	00015620 	.word	0x00015620
   13418:	000195d2 	.word	0x000195d2
   1341c:	000195df 	.word	0x000195df
   13420:	000195f1 	.word	0x000195f1

00013424 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   13424:	4b0c      	ldr	r3, [pc, #48]	; (13458 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   13426:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13428:	4d0c      	ldr	r5, [pc, #48]	; (1345c <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   1342a:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1342c:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   1342e:	fa24 f203 	lsr.w	r2, r4, r3
   13432:	07d2      	lsls	r2, r2, #31
   13434:	d508      	bpl.n	13448 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13436:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1343a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1343e:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   13442:	4282      	cmp	r2, r0
   13444:	d100      	bne.n	13448 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   13446:	b121      	cbz	r1, 13452 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13448:	3301      	adds	r3, #1
   1344a:	2b08      	cmp	r3, #8
   1344c:	d1ef      	bne.n	1342e <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   1344e:	f06f 0312 	mvn.w	r3, #18
}
   13452:	4618      	mov	r0, r3
   13454:	bd30      	pop	{r4, r5, pc}
   13456:	bf00      	nop
   13458:	200016f4 	.word	0x200016f4
   1345c:	40006000 	.word	0x40006000

00013460 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   13460:	b570      	push	{r4, r5, r6, lr}
   13462:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13464:	460d      	mov	r5, r1
   13466:	b9c9      	cbnz	r1, 1349c <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   13468:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1346a:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   1346c:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   1346e:	4610      	mov	r0, r2
   13470:	7919      	ldrb	r1, [r3, #4]
   13472:	f7ff ffd7 	bl	13424 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13476:	2800      	cmp	r0, #0
   13478:	db12      	blt.n	134a0 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   1347a:	68b2      	ldr	r2, [r6, #8]
   1347c:	2301      	movs	r3, #1
   1347e:	fa03 f404 	lsl.w	r4, r3, r4
   13482:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   13484:	f100 0140 	add.w	r1, r0, #64	; 0x40
   13488:	4a06      	ldr	r2, [pc, #24]	; (134a4 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   1348a:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   1348c:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   13490:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   13494:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   13498:	4628      	mov	r0, r5
   1349a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1349c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   134a0:	bd70      	pop	{r4, r5, r6, pc}
   134a2:	bf00      	nop
   134a4:	40006000 	.word	0x40006000

000134a8 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   134a8:	b570      	push	{r4, r5, r6, lr}
   134aa:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   134ac:	460d      	mov	r5, r1
   134ae:	b9b1      	cbnz	r1, 134de <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   134b0:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   134b2:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   134b4:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   134b6:	4610      	mov	r0, r2
   134b8:	7919      	ldrb	r1, [r3, #4]
   134ba:	f7ff ffb3 	bl	13424 <gpiote_find_channel.isra.4>
		if (i < 0) {
   134be:	2800      	cmp	r0, #0
   134c0:	db0f      	blt.n	134e2 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   134c2:	68b2      	ldr	r2, [r6, #8]
   134c4:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   134c6:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   134ca:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   134ce:	4b05      	ldr	r3, [pc, #20]	; (134e4 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   134d0:	ea22 0404 	bic.w	r4, r2, r4
   134d4:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   134d6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   134da:	4628      	mov	r0, r5
   134dc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   134de:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   134e2:	bd70      	pop	{r4, r5, r6, pc}
   134e4:	40006000 	.word	0x40006000

000134e8 <gpio_nrf5_config>:
{
   134e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134ec:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   134ee:	b119      	cbz	r1, 134f8 <gpio_nrf5_config+0x10>
		return -ENOTSUP;
   134f0:	f06f 0022 	mvn.w	r0, #34	; 0x22
   134f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   134f8:	f3c3 3101 	ubfx	r1, r3, #12, #2
		__ASSERT_NO_MSG(ds_low != 2);
   134fc:	2902      	cmp	r1, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   134fe:	f3c3 3e81 	ubfx	lr, r3, #14, #2
		__ASSERT_NO_MSG(ds_low != 2);
   13502:	d109      	bne.n	13518 <gpio_nrf5_config+0x30>
   13504:	23c1      	movs	r3, #193	; 0xc1
   13506:	4a47      	ldr	r2, [pc, #284]	; (13624 <gpio_nrf5_config+0x13c>)
   13508:	4947      	ldr	r1, [pc, #284]	; (13628 <gpio_nrf5_config+0x140>)
   1350a:	4848      	ldr	r0, [pc, #288]	; (1362c <gpio_nrf5_config+0x144>)
   1350c:	f7ed fd3e 	bl	f8c <printk>
   13510:	4847      	ldr	r0, [pc, #284]	; (13630 <gpio_nrf5_config+0x148>)
   13512:	f7ed fd3b 	bl	f8c <printk>
   13516:	e7fe      	b.n	13516 <gpio_nrf5_config+0x2e>
		__ASSERT_NO_MSG(ds_high != 2);
   13518:	f1be 0f02 	cmp.w	lr, #2
   1351c:	d109      	bne.n	13532 <gpio_nrf5_config+0x4a>
   1351e:	23c2      	movs	r3, #194	; 0xc2
   13520:	4a40      	ldr	r2, [pc, #256]	; (13624 <gpio_nrf5_config+0x13c>)
   13522:	4944      	ldr	r1, [pc, #272]	; (13634 <gpio_nrf5_config+0x14c>)
   13524:	4841      	ldr	r0, [pc, #260]	; (1362c <gpio_nrf5_config+0x144>)
   13526:	f7ed fd31 	bl	f8c <printk>
   1352a:	4841      	ldr	r0, [pc, #260]	; (13630 <gpio_nrf5_config+0x148>)
   1352c:	f7ed fd2e 	bl	f8c <printk>
   13530:	e7fe      	b.n	13530 <gpio_nrf5_config+0x48>
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13532:	f403 7240 	and.w	r2, r3, #768	; 0x300
   13536:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   1353a:	d05d      	beq.n	135f8 <gpio_nrf5_config+0x110>
		u8_t pull = GPIO_PULL_DISABLE;
   1353c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   13540:	bf0c      	ite	eq
   13542:	2204      	moveq	r2, #4
   13544:	2200      	movne	r2, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   13546:	6805      	ldr	r5, [r0, #0]
   13548:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 13640 <gpio_nrf5_config+0x158>
   1354c:	68a8      	ldr	r0, [r5, #8]
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   1354e:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
			sense = GPIO_SENSE_DISABLE;
   13552:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   13556:	bf08      	it	eq
   13558:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   1355a:	f013 0f01 	tst.w	r3, #1
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   1355e:	6800      	ldr	r0, [r0, #0]
   13560:	ea4f 0181 	mov.w	r1, r1, lsl #2
   13564:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   13568:	d04f      	beq.n	1360a <gpio_nrf5_config+0x122>
			if (pull == GPIO_PULL_UP) {
   1356a:	2a0c      	cmp	r2, #12
   1356c:	d146      	bne.n	135fc <gpio_nrf5_config+0x114>
				gpio->OUTSET = BIT(pin);
   1356e:	2701      	movs	r7, #1
   13570:	40a7      	lsls	r7, r4
   13572:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   13576:	4471      	add	r1, lr
					      GPIO_INPUT_DISCONNECT |
   13578:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   1357c:	f041 0103 	orr.w	r1, r1, #3
   13580:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   13582:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
   13586:	f013 0002 	ands.w	r0, r3, #2
   1358a:	d049      	beq.n	13620 <gpio_nrf5_config+0x138>
		u32_t port = GPIO_PORT(dev);
   1358c:	68aa      	ldr	r2, [r5, #8]
		if (flags & GPIO_INT_EDGE) {
   1358e:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   13590:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   13594:	d5ac      	bpl.n	134f0 <gpio_nrf5_config+0x8>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   13596:	065a      	lsls	r2, r3, #25
   13598:	d43d      	bmi.n	13616 <gpio_nrf5_config+0x12e>
				config |= GPIOTE_CFG_POL_H2L;
   1359a:	f013 0f04 	tst.w	r3, #4
   1359e:	bf14      	ite	ne
   135a0:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   135a4:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   135a8:	4e23      	ldr	r6, [pc, #140]	; (13638 <gpio_nrf5_config+0x150>)
   135aa:	6837      	ldr	r7, [r6, #0]
   135ac:	4638      	mov	r0, r7
   135ae:	f7ec fe49 	bl	244 <__popcountsi2>
   135b2:	2808      	cmp	r0, #8
   135b4:	d032      	beq.n	1361c <gpio_nrf5_config+0x134>
		int i = gpiote_find_channel(dev, pin, port);
   135b6:	4641      	mov	r1, r8
   135b8:	4620      	mov	r0, r4
   135ba:	f7ff ff33 	bl	13424 <gpiote_find_channel.isra.4>
		if (i < 0) {
   135be:	2800      	cmp	r0, #0
   135c0:	da08      	bge.n	135d4 <gpio_nrf5_config+0xec>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   135c2:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   135c4:	fa93 f0a3 	rbit	r0, r3
   135c8:	2b00      	cmp	r3, #0
   135ca:	fab0 f080 	clz	r0, r0
   135ce:	bf08      	it	eq
   135d0:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   135d4:	2301      	movs	r3, #1
   135d6:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   135d8:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   135da:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   135dc:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   135e0:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   135e2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   135e6:	4b15      	ldr	r3, [pc, #84]	; (1363c <gpio_nrf5_config+0x154>)
		config |= GPIOTE_CFG_PIN(pin);
   135e8:	f044 0401 	orr.w	r4, r4, #1
   135ec:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   135ee:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   135f2:	2000      	movs	r0, #0
   135f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   135f8:	220c      	movs	r2, #12
   135fa:	e7a4      	b.n	13546 <gpio_nrf5_config+0x5e>
			} else if (pull == GPIO_PULL_DOWN) {
   135fc:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   135fe:	bf02      	ittt	eq
   13600:	2701      	moveq	r7, #1
   13602:	40a7      	lsleq	r7, r4
   13604:	f8c0 750c 	streq.w	r7, [r0, #1292]	; 0x50c
   13608:	e7b5      	b.n	13576 <gpio_nrf5_config+0x8e>
					      drive_strength[ds_low][ds_high] |
   1360a:	4471      	add	r1, lr
   1360c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   13610:	430a      	orrs	r2, r1
   13612:	433a      	orrs	r2, r7
   13614:	e7b5      	b.n	13582 <gpio_nrf5_config+0x9a>
				config |= GPIOTE_CFG_POL_TOGG;
   13616:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   1361a:	e7c5      	b.n	135a8 <gpio_nrf5_config+0xc0>
			return -EIO;
   1361c:	f06f 0004 	mvn.w	r0, #4
}
   13620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13624:	00019520 	.word	0x00019520
   13628:	00019558 	.word	0x00019558
   1362c:	00015620 	.word	0x00015620
   13630:	0001563e 	.word	0x0001563e
   13634:	00019564 	.word	0x00019564
   13638:	200016f4 	.word	0x200016f4
   1363c:	40006000 	.word	0x40006000
   13640:	000194d8 	.word	0x000194d8

00013644 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   13644:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   13646:	2200      	movs	r2, #0
   13648:	2105      	movs	r1, #5
   1364a:	2006      	movs	r0, #6
   1364c:	f7ee f9d2 	bl	19f4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   13650:	2006      	movs	r0, #6
   13652:	f7ee f99d 	bl	1990 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   13656:	2000      	movs	r0, #0
   13658:	bd08      	pop	{r3, pc}
	...

0001365c <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1365c:	2100      	movs	r1, #0
{
   1365e:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   13660:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   13662:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   13664:	2501      	movs	r5, #1
   13666:	008b      	lsls	r3, r1, #2
   13668:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1366c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   13670:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13674:	b140      	cbz	r0, 13688 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13676:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   1367a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   1367e:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   13682:	fa05 f303 	lsl.w	r3, r5, r3
   13686:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13688:	3101      	adds	r1, #1
   1368a:	2908      	cmp	r1, #8
   1368c:	d1eb      	bne.n	13666 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   1368e:	4e0e      	ldr	r6, [pc, #56]	; (136c8 <gpio_nrf5_port_isr+0x6c>)
   13690:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   13692:	689d      	ldr	r5, [r3, #8]
   13694:	681c      	ldr	r4, [r3, #0]
   13696:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   13698:	b1a4      	cbz	r4, 136c4 <gpio_nrf5_port_isr+0x68>
		if (cb->pin_mask & pins) {
   1369a:	68a3      	ldr	r3, [r4, #8]
   1369c:	421d      	tst	r5, r3
   1369e:	d00f      	beq.n	136c0 <gpio_nrf5_port_isr+0x64>
			__ASSERT(cb->handler, "No callback handler!");
   136a0:	6863      	ldr	r3, [r4, #4]
   136a2:	b94b      	cbnz	r3, 136b8 <gpio_nrf5_port_isr+0x5c>
   136a4:	2333      	movs	r3, #51	; 0x33
   136a6:	4a09      	ldr	r2, [pc, #36]	; (136cc <gpio_nrf5_port_isr+0x70>)
   136a8:	4909      	ldr	r1, [pc, #36]	; (136d0 <gpio_nrf5_port_isr+0x74>)
   136aa:	480a      	ldr	r0, [pc, #40]	; (136d4 <gpio_nrf5_port_isr+0x78>)
   136ac:	f7ed fc6e 	bl	f8c <printk>
   136b0:	4809      	ldr	r0, [pc, #36]	; (136d8 <gpio_nrf5_port_isr+0x7c>)
   136b2:	f7ed fc6b 	bl	f8c <printk>
   136b6:	e7fe      	b.n	136b6 <gpio_nrf5_port_isr+0x5a>
			cb->handler(port, cb, pins);
   136b8:	462a      	mov	r2, r5
   136ba:	4621      	mov	r1, r4
   136bc:	4630      	mov	r0, r6
   136be:	4798      	blx	r3
	return node->next;
   136c0:	6824      	ldr	r4, [r4, #0]
   136c2:	e7e9      	b.n	13698 <gpio_nrf5_port_isr+0x3c>
   136c4:	bd70      	pop	{r4, r5, r6, pc}
   136c6:	bf00      	nop
   136c8:	20003ed4 	.word	0x20003ed4
   136cc:	00019590 	.word	0x00019590
   136d0:	00019606 	.word	0x00019606
   136d4:	00015620 	.word	0x00015620
   136d8:	000195f1 	.word	0x000195f1

000136dc <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   136dc:	4b03      	ldr	r3, [pc, #12]	; (136ec <uart_nrfx_err_check+0x10>)
   136de:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   136e0:	b118      	cbz	r0, 136ea <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   136e2:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   136e6:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   136ea:	4770      	bx	lr
   136ec:	40002124 	.word	0x40002124

000136f0 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   136f0:	4b07      	ldr	r3, [pc, #28]	; (13710 <uart_nrfx_poll_out+0x20>)
   136f2:	2200      	movs	r2, #0
   136f4:	601a      	str	r2, [r3, #0]
{
   136f6:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   136f8:	681a      	ldr	r2, [r3, #0]
   136fa:	9201      	str	r2, [sp, #4]
    (void)dummy;
   136fc:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   136fe:	4a05      	ldr	r2, [pc, #20]	; (13714 <uart_nrfx_poll_out+0x24>)
   13700:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13704:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   13706:	2a00      	cmp	r2, #0
   13708:	d0fc      	beq.n	13704 <uart_nrfx_poll_out+0x14>
}
   1370a:	4608      	mov	r0, r1
   1370c:	b002      	add	sp, #8
   1370e:	4770      	bx	lr
   13710:	4000211c 	.word	0x4000211c
   13714:	40002000 	.word	0x40002000

00013718 <uart_nrfx_poll_in>:
   13718:	4b08      	ldr	r3, [pc, #32]	; (1373c <uart_nrfx_poll_in+0x24>)
   1371a:	681a      	ldr	r2, [r3, #0]
{
   1371c:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   1371e:	b152      	cbz	r2, 13736 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13720:	2000      	movs	r0, #0
   13722:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13724:	681b      	ldr	r3, [r3, #0]
   13726:	9301      	str	r3, [sp, #4]
    (void)dummy;
   13728:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1372a:	4b05      	ldr	r3, [pc, #20]	; (13740 <uart_nrfx_poll_in+0x28>)
   1372c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   13730:	700b      	strb	r3, [r1, #0]
}
   13732:	b002      	add	sp, #8
   13734:	4770      	bx	lr
		return -1;
   13736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1373a:	e7fa      	b.n	13732 <uart_nrfx_poll_in+0x1a>
   1373c:	40002108 	.word	0x40002108
   13740:	40002000 	.word	0x40002000

00013744 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   13744:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   13746:	481f      	ldr	r0, [pc, #124]	; (137c4 <uart_nrfx_init+0x80>)
   13748:	f000 f9b2 	bl	13ab0 <device_get_binding>

	__ASSERT(gpio_dev,
   1374c:	4604      	mov	r4, r0
   1374e:	b958      	cbnz	r0, 13768 <uart_nrfx_init+0x24>
   13750:	491d      	ldr	r1, [pc, #116]	; (137c8 <uart_nrfx_init+0x84>)
   13752:	4a1e      	ldr	r2, [pc, #120]	; (137cc <uart_nrfx_init+0x88>)
   13754:	481e      	ldr	r0, [pc, #120]	; (137d0 <uart_nrfx_init+0x8c>)
   13756:	f44f 73a8 	mov.w	r3, #336	; 0x150
   1375a:	f7ed fc17 	bl	f8c <printk>
   1375e:	4919      	ldr	r1, [pc, #100]	; (137c4 <uart_nrfx_init+0x80>)
   13760:	481c      	ldr	r0, [pc, #112]	; (137d4 <uart_nrfx_init+0x90>)
   13762:	f7ed fc13 	bl	f8c <printk>
   13766:	e7fe      	b.n	13766 <uart_nrfx_init+0x22>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   13768:	6843      	ldr	r3, [r0, #4]
   1376a:	2206      	movs	r2, #6
   1376c:	681d      	ldr	r5, [r3, #0]
   1376e:	2100      	movs	r1, #0
   13770:	f240 1301 	movw	r3, #257	; 0x101
   13774:	47a8      	blx	r5
   13776:	6863      	ldr	r3, [r4, #4]
   13778:	681d      	ldr	r5, [r3, #0]
   1377a:	2300      	movs	r3, #0
   1377c:	4619      	mov	r1, r3
   1377e:	2208      	movs	r2, #8
   13780:	4620      	mov	r0, r4
   13782:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   13784:	4b14      	ldr	r3, [pc, #80]	; (137d8 <uart_nrfx_init+0x94>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13786:	4915      	ldr	r1, [pc, #84]	; (137dc <uart_nrfx_init+0x98>)
    p_reg->PSELRXD = pselrxd;
   13788:	2208      	movs	r2, #8
   1378a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1378e:	2206      	movs	r2, #6
   13790:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13794:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13796:	4a12      	ldr	r2, [pc, #72]	; (137e0 <uart_nrfx_init+0x9c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13798:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   1379c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   137a0:	2204      	movs	r2, #4
   137a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   137a6:	4a0f      	ldr	r2, [pc, #60]	; (137e4 <uart_nrfx_init+0xa0>)
   137a8:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   137aa:	6812      	ldr	r2, [r2, #0]
   137ac:	9201      	str	r2, [sp, #4]
    (void)dummy;
   137ae:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   137b0:	4a0d      	ldr	r2, [pc, #52]	; (137e8 <uart_nrfx_init+0xa4>)
   137b2:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   137b4:	6812      	ldr	r2, [r2, #0]
   137b6:	9200      	str	r2, [sp, #0]
    (void)dummy;
   137b8:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   137ba:	2201      	movs	r2, #1
   137bc:	600a      	str	r2, [r1, #0]
   137be:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   137c0:	b003      	add	sp, #12
   137c2:	bd30      	pop	{r4, r5, pc}
   137c4:	00019612 	.word	0x00019612
   137c8:	00019658 	.word	0x00019658
   137cc:	00019619 	.word	0x00019619
   137d0:	00015620 	.word	0x00015620
   137d4:	00019661 	.word	0x00019661
   137d8:	40002000 	.word	0x40002000
   137dc:	40002008 	.word	0x40002008
   137e0:	01d7e000 	.word	0x01d7e000
   137e4:	4000211c 	.word	0x4000211c
   137e8:	40002108 	.word	0x40002108

000137ec <isr>:
	return octets;
}
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   137ec:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   137ee:	b1d0      	cbz	r0, 13826 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   137f0:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   137f2:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   137f4:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   137f6:	1c53      	adds	r3, r2, #1
   137f8:	b2db      	uxtb	r3, r3
		last = 0;
   137fa:	42ab      	cmp	r3, r5
   137fc:	bf08      	it	eq
   137fe:	2300      	moveq	r3, #0
	if (last == rng->first) {
   13800:	42a3      	cmp	r3, r4
   13802:	d010      	beq.n	13826 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   13804:	b161      	cbz	r1, 13820 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   13806:	490a      	ldr	r1, [pc, #40]	; (13830 <isr+0x44>)
   13808:	4402      	add	r2, r0
   1380a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   1380e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   13810:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   13812:	3301      	adds	r3, #1
   13814:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   13816:	429d      	cmp	r5, r3
   13818:	bf08      	it	eq
   1381a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   1381c:	42a3      	cmp	r3, r4
   1381e:	d005      	beq.n	1382c <isr+0x40>
		return 0;
	}

	return -EBUSY;
   13820:	f06f 000f 	mvn.w	r0, #15
   13824:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   13826:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1382a:	bd30      	pop	{r4, r5, pc}
		return 0;
   1382c:	2000      	movs	r0, #0
}
   1382e:	bd30      	pop	{r4, r5, pc}
   13830:	4000d000 	.word	0x4000d000

00013834 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   13834:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13836:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   13838:	2201      	movs	r2, #1
   1383a:	4611      	mov	r1, r2
   1383c:	4620      	mov	r0, r4
   1383e:	f000 fef9 	bl	14634 <_impl_k_sem_init>
   13842:	f104 0018 	add.w	r0, r4, #24
   13846:	2201      	movs	r2, #1
   13848:	2100      	movs	r1, #0
   1384a:	f000 fef3 	bl	14634 <_impl_k_sem_init>
	rng->threshold = threshold;
   1384e:	2304      	movs	r3, #4
   13850:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   13854:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   13856:	2500      	movs	r5, #0
	rng->threshold = threshold;
   13858:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   1385c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1385e:	4b11      	ldr	r3, [pc, #68]	; (138a4 <entropy_nrf5_init+0x70>)
	rng->count = len;
   13860:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   13864:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   13866:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   1386a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   1386e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   13872:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   13876:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1387a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1387e:	f042 0201 	orr.w	r2, r2, #1
   13882:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13886:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   13888:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   1388c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1388e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   13892:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13894:	462a      	mov	r2, r5
   13896:	f7ee f8ad 	bl	19f4 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   1389a:	4630      	mov	r0, r6
   1389c:	f7ee f878 	bl	1990 <_arch_irq_enable>

	return 0;
}
   138a0:	4628      	mov	r0, r5
   138a2:	bd70      	pop	{r4, r5, r6, pc}
   138a4:	4000d000 	.word	0x4000d000

000138a8 <isr_rand>:
{
   138a8:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   138aa:	4b12      	ldr	r3, [pc, #72]	; (138f4 <isr_rand+0x4c>)
   138ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   138b0:	b1fb      	cbz	r3, 138f2 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   138b2:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   138b4:	2101      	movs	r1, #1
   138b6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   138ba:	f7ff ff97 	bl	137ec <isr>
		if (ret != -EBUSY) {
   138be:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   138c2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   138c4:	d00d      	beq.n	138e2 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   138c6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   138ca:	bf14      	ite	ne
   138cc:	2100      	movne	r1, #0
   138ce:	2101      	moveq	r1, #1
   138d0:	f105 0030 	add.w	r0, r5, #48	; 0x30
   138d4:	f7ff ff8a 	bl	137ec <isr>
   138d8:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   138da:	f105 0018 	add.w	r0, r5, #24
   138de:	f000 fed7 	bl	14690 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   138e2:	4b04      	ldr	r3, [pc, #16]	; (138f4 <isr_rand+0x4c>)
   138e4:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   138e6:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   138e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   138ec:	bf1c      	itt	ne
   138ee:	2201      	movne	r2, #1
   138f0:	605a      	strne	r2, [r3, #4]
   138f2:	bd38      	pop	{r3, r4, r5, pc}
   138f4:	4000d000 	.word	0x4000d000

000138f8 <get>:
{
   138f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(rng);
   138fc:	b948      	cbnz	r0, 13912 <get+0x1a>
   138fe:	2361      	movs	r3, #97	; 0x61
   13900:	4a32      	ldr	r2, [pc, #200]	; (139cc <get+0xd4>)
   13902:	4933      	ldr	r1, [pc, #204]	; (139d0 <get+0xd8>)
   13904:	4833      	ldr	r0, [pc, #204]	; (139d4 <get+0xdc>)
   13906:	f7ed fb41 	bl	f8c <printk>
   1390a:	4833      	ldr	r0, [pc, #204]	; (139d8 <get+0xe0>)
   1390c:	f7ed fb3e 	bl	f8c <printk>
   13910:	e7fe      	b.n	13910 <get+0x18>
	first = rng->first;
   13912:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   13914:	78c4      	ldrb	r4, [r0, #3]
	s = &rng->rand[first];
   13916:	1d1e      	adds	r6, r3, #4
	if (first <= last) {
   13918:	42a3      	cmp	r3, r4
	d = &rand[octets];
   1391a:	440a      	add	r2, r1
	s = &rng->rand[first];
   1391c:	4406      	add	r6, r0
	if (first <= last) {
   1391e:	d81f      	bhi.n	13960 <get+0x68>
		avail = last - first;
   13920:	1ae4      	subs	r4, r4, r3
   13922:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   13924:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   13926:	bf3e      	ittt	cc
   13928:	1a64      	subcc	r4, r4, r1
   1392a:	b2e7      	uxtbcc	r7, r4
   1392c:	460c      	movcc	r4, r1
		first += avail;
   1392e:	4423      	add	r3, r4
		octets -= avail;
   13930:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   13934:	bf28      	it	cs
   13936:	2700      	movcs	r7, #0
		first += avail;
   13938:	b2db      	uxtb	r3, r3
		octets -= avail;
   1393a:	b2c9      	uxtb	r1, r1
   1393c:	4434      	add	r4, r6
		while (avail--) {
   1393e:	42a6      	cmp	r6, r4
   13940:	d109      	bne.n	13956 <get+0x5e>
		rng->first = first;
   13942:	7083      	strb	r3, [r0, #2]
	if (remaining < rng->threshold) {
   13944:	7843      	ldrb	r3, [r0, #1]
   13946:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   13948:	bf82      	ittt	hi
   1394a:	4b24      	ldrhi	r3, [pc, #144]	; (139dc <get+0xe4>)
   1394c:	2201      	movhi	r2, #1
   1394e:	601a      	strhi	r2, [r3, #0]
}
   13950:	4608      	mov	r0, r1
   13952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   13956:	f816 5b01 	ldrb.w	r5, [r6], #1
   1395a:	f802 5d01 	strb.w	r5, [r2, #-1]!
   1395e:	e7ee      	b.n	1393e <get+0x46>
		avail = rng->count - first;
   13960:	7805      	ldrb	r5, [r0, #0]
   13962:	1aed      	subs	r5, r5, r3
   13964:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   13966:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   13968:	bf3f      	itttt	cc
   1396a:	1a67      	subcc	r7, r4, r1
   1396c:	19ed      	addcc	r5, r5, r7
   1396e:	b2ef      	uxtbcc	r7, r5
   13970:	460d      	movcc	r5, r1
			first += avail;
   13972:	bf38      	it	cc
   13974:	185b      	addcc	r3, r3, r1
		octets -= avail;
   13976:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   1397a:	bf32      	itee	cc
   1397c:	b2db      	uxtbcc	r3, r3
   1397e:	4627      	movcs	r7, r4
			first = 0;
   13980:	2300      	movcs	r3, #0
		octets -= avail;
   13982:	b2c9      	uxtb	r1, r1
   13984:	4696      	mov	lr, r2
   13986:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   1398a:	4566      	cmp	r6, ip
   1398c:	d119      	bne.n	139c2 <get+0xca>
   1398e:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   13990:	2900      	cmp	r1, #0
   13992:	d0d6      	beq.n	13942 <get+0x4a>
   13994:	2c00      	cmp	r4, #0
   13996:	d0d4      	beq.n	13942 <get+0x4a>
			if (octets < last) {
   13998:	428c      	cmp	r4, r1
   1399a:	bf8a      	itet	hi
   1399c:	460b      	movhi	r3, r1
   1399e:	4623      	movls	r3, r4
				remaining = last - octets;
   139a0:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   139a2:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   139a6:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   139aa:	bf8c      	ite	hi
   139ac:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   139ae:	2700      	movls	r7, #0
			octets -= last;
   139b0:	b2c9      	uxtb	r1, r1
   139b2:	18f4      	adds	r4, r6, r3
			while (last--) {
   139b4:	42a6      	cmp	r6, r4
   139b6:	d0c4      	beq.n	13942 <get+0x4a>
				*(--d) = *s++;
   139b8:	f816 5b01 	ldrb.w	r5, [r6], #1
   139bc:	f802 5d01 	strb.w	r5, [r2, #-1]!
   139c0:	e7f8      	b.n	139b4 <get+0xbc>
			*(--d) = *s++;
   139c2:	f816 8b01 	ldrb.w	r8, [r6], #1
   139c6:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   139ca:	e7de      	b.n	1398a <get+0x92>
   139cc:	00019698 	.word	0x00019698
   139d0:	000196d6 	.word	0x000196d6
   139d4:	00015620 	.word	0x00015620
   139d8:	0001563e 	.word	0x0001563e
   139dc:	4000d000 	.word	0x4000d000

000139e0 <entropy_nrf5_get_entropy_isr>:
	if (!(flags & ENTROPY_BUSYWAIT)) {
   139e0:	07db      	lsls	r3, r3, #31
{
   139e2:	b570      	push	{r4, r5, r6, lr}
   139e4:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   139e6:	d507      	bpl.n	139f8 <entropy_nrf5_get_entropy_isr+0x18>
   139e8:	4613      	mov	r3, r2
   139ea:	4a0d      	ldr	r2, [pc, #52]	; (13a20 <entropy_nrf5_get_entropy_isr+0x40>)
   139ec:	2001      	movs	r0, #1
		NRF_RNG->EVENTS_VALRDY = 0;
   139ee:	2500      	movs	r5, #0
	while (len) {
   139f0:	b94b      	cbnz	r3, 13a06 <entropy_nrf5_get_entropy_isr+0x26>
	NRF_RNG->TASKS_STOP = 1;
   139f2:	6050      	str	r0, [r2, #4]
	return cnt;
   139f4:	4620      	mov	r0, r4
}
   139f6:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   139f8:	6880      	ldr	r0, [r0, #8]
   139fa:	460a      	mov	r2, r1
   139fc:	303c      	adds	r0, #60	; 0x3c
   139fe:	b2e1      	uxtb	r1, r4
   13a00:	f7ff ff7a 	bl	138f8 <get>
   13a04:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   13a06:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   13a0a:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   13a0c:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   13a10:	2e00      	cmp	r6, #0
   13a12:	d0fb      	beq.n	13a0c <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   13a14:	3b01      	subs	r3, #1
   13a16:	b29b      	uxth	r3, r3
   13a18:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   13a1c:	54ce      	strb	r6, [r1, r3]
   13a1e:	e7e7      	b.n	139f0 <entropy_nrf5_get_entropy_isr+0x10>
   13a20:	4000d000 	.word	0x4000d000

00013a24 <entropy_nrf5_get_entropy>:
{
   13a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13a28:	6885      	ldr	r5, [r0, #8]
{
   13a2a:	460f      	mov	r7, r1
   13a2c:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   13a2e:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   13a32:	b914      	cbnz	r4, 13a3a <entropy_nrf5_get_entropy+0x16>
}
   13a34:	4620      	mov	r0, r4
   13a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13a3a:	2cff      	cmp	r4, #255	; 0xff
   13a3c:	4623      	mov	r3, r4
   13a3e:	bf28      	it	cs
   13a40:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   13a42:	1ae4      	subs	r4, r4, r3
   13a44:	b2de      	uxtb	r6, r3
   13a46:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   13a48:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13a50:	4628      	mov	r0, r5
   13a52:	f000 fe45 	bl	146e0 <_impl_k_sem_take>
   13a56:	4631      	mov	r1, r6
   13a58:	463a      	mov	r2, r7
   13a5a:	4648      	mov	r0, r9
   13a5c:	f7ff ff4c 	bl	138f8 <get>
   13a60:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13a62:	4628      	mov	r0, r5
   13a64:	f000 fe14 	bl	14690 <_impl_k_sem_give>
			if (len8) {
   13a68:	2e00      	cmp	r6, #0
   13a6a:	d0e2      	beq.n	13a32 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13a70:	4640      	mov	r0, r8
   13a72:	f000 fe35 	bl	146e0 <_impl_k_sem_take>
   13a76:	e7e9      	b.n	13a4c <entropy_nrf5_get_entropy+0x28>

00013a78 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   13a78:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   13a7a:	4802      	ldr	r0, [pc, #8]	; (13a84 <entropy_nrf_get_entropy_isr+0xc>)
   13a7c:	460a      	mov	r2, r1
   13a7e:	4619      	mov	r1, r3
   13a80:	f7ff bf3a 	b.w	138f8 <get>
   13a84:	20001734 	.word	0x20001734

00013a88 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   13a88:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   13a8a:	4b08      	ldr	r3, [pc, #32]	; (13aac <_sys_device_do_config_level+0x24>)
   13a8c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13a90:	3001      	adds	r0, #1
   13a92:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   13a96:	4620      	mov	r0, r4
   13a98:	42a8      	cmp	r0, r5
   13a9a:	f104 040c 	add.w	r4, r4, #12
   13a9e:	d300      	bcc.n	13aa2 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   13aa0:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   13aa2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13aa6:	685b      	ldr	r3, [r3, #4]
   13aa8:	4798      	blx	r3
   13aaa:	e7f4      	b.n	13a96 <_sys_device_do_config_level+0xe>
   13aac:	000196dc 	.word	0x000196dc

00013ab0 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   13ab0:	4b10      	ldr	r3, [pc, #64]	; (13af4 <device_get_binding+0x44>)
{
   13ab2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   13ab4:	4c10      	ldr	r4, [pc, #64]	; (13af8 <device_get_binding+0x48>)
{
   13ab6:	4605      	mov	r5, r0
   13ab8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   13aba:	429c      	cmp	r4, r3
   13abc:	d104      	bne.n	13ac8 <device_get_binding+0x18>
   13abe:	4c0e      	ldr	r4, [pc, #56]	; (13af8 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   13ac0:	42b4      	cmp	r4, r6
   13ac2:	d109      	bne.n	13ad8 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   13ac4:	2400      	movs	r4, #0
   13ac6:	e012      	b.n	13aee <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   13ac8:	6862      	ldr	r2, [r4, #4]
   13aca:	b11a      	cbz	r2, 13ad4 <device_get_binding+0x24>
   13acc:	6822      	ldr	r2, [r4, #0]
   13ace:	6812      	ldr	r2, [r2, #0]
   13ad0:	42aa      	cmp	r2, r5
   13ad2:	d00c      	beq.n	13aee <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13ad4:	340c      	adds	r4, #12
   13ad6:	e7f0      	b.n	13aba <device_get_binding+0xa>
		if (!info->driver_api) {
   13ad8:	6863      	ldr	r3, [r4, #4]
   13ada:	b90b      	cbnz	r3, 13ae0 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13adc:	340c      	adds	r4, #12
   13ade:	e7ef      	b.n	13ac0 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   13ae0:	6823      	ldr	r3, [r4, #0]
   13ae2:	4628      	mov	r0, r5
   13ae4:	6819      	ldr	r1, [r3, #0]
   13ae6:	f7ee f97b 	bl	1de0 <strcmp>
   13aea:	2800      	cmp	r0, #0
   13aec:	d1f6      	bne.n	13adc <device_get_binding+0x2c>
}
   13aee:	4620      	mov	r0, r4
   13af0:	bd70      	pop	{r4, r5, r6, pc}
   13af2:	bf00      	nop
   13af4:	20003f04 	.word	0x20003f04
   13af8:	20003e74 	.word	0x20003e74

00013afc <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   13afc:	1c43      	adds	r3, r0, #1
   13afe:	d003      	beq.n	13b08 <_sys_power_save_idle_exit+0xc>
   13b00:	4b03      	ldr	r3, [pc, #12]	; (13b10 <_sys_power_save_idle_exit+0x14>)
   13b02:	681b      	ldr	r3, [r3, #0]
   13b04:	4298      	cmp	r0, r3
   13b06:	db01      	blt.n	13b0c <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   13b08:	f7ed bd0a 	b.w	1520 <_timer_idle_exit>
   13b0c:	4770      	bx	lr
   13b0e:	bf00      	nop
   13b10:	20003e68 	.word	0x20003e68

00013b14 <idle>:
	return list->head == list;
   13b14:	4d0f      	ldr	r5, [pc, #60]	; (13b54 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   13b16:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   13b18:	4f0f      	ldr	r7, [pc, #60]	; (13b58 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b1a:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   13b1e:	f04f 0220 	mov.w	r2, #32
   13b22:	f3ef 8311 	mrs	r3, BASEPRI
   13b26:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13b2a:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b2c:	42b3      	cmp	r3, r6
   13b2e:	d00a      	beq.n	13b46 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   13b30:	b14b      	cbz	r3, 13b46 <idle+0x32>
   13b32:	691c      	ldr	r4, [r3, #16]
   13b34:	1c63      	adds	r3, r4, #1
   13b36:	d008      	beq.n	13b4a <idle+0x36>
   13b38:	683b      	ldr	r3, [r7, #0]
   13b3a:	42a3      	cmp	r3, r4
   13b3c:	dd05      	ble.n	13b4a <idle+0x36>
	_kernel.idle = ticks;
   13b3e:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   13b40:	f7ed ffea 	bl	1b18 <k_cpu_idle>
   13b44:	e7eb      	b.n	13b1e <idle+0xa>
   13b46:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   13b4a:	4620      	mov	r0, r4
   13b4c:	f7ed fcca 	bl	14e4 <_timer_idle_enter>
   13b50:	e7f5      	b.n	13b3e <idle+0x2a>
   13b52:	bf00      	nop
   13b54:	20001948 	.word	0x20001948
   13b58:	20003e68 	.word	0x20003e68

00013b5c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   13b5c:	4802      	ldr	r0, [pc, #8]	; (13b68 <_bss_zero+0xc>)
   13b5e:	4a03      	ldr	r2, [pc, #12]	; (13b6c <_bss_zero+0x10>)
   13b60:	2100      	movs	r1, #0
   13b62:	1a12      	subs	r2, r2, r0
   13b64:	f7ee b98a 	b.w	1e7c <memset>
   13b68:	20000000 	.word	0x20000000
   13b6c:	20001a08 	.word	0x20001a08

00013b70 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   13b70:	4802      	ldr	r0, [pc, #8]	; (13b7c <_data_copy+0xc>)
   13b72:	4a03      	ldr	r2, [pc, #12]	; (13b80 <_data_copy+0x10>)
   13b74:	4903      	ldr	r1, [pc, #12]	; (13b84 <_data_copy+0x14>)
   13b76:	1a12      	subs	r2, r2, r0
   13b78:	f7ee b954 	b.w	1e24 <memcpy>
   13b7c:	20003a20 	.word	0x20003a20
   13b80:	20003fac 	.word	0x20003fac
   13b84:	00019ba4 	.word	0x00019ba4

00013b88 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   13b88:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13b8a:	2002      	movs	r0, #2
   13b8c:	f7ff ff7c 	bl	13a88 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   13b90:	4807      	ldr	r0, [pc, #28]	; (13bb0 <bg_thread_main+0x28>)
   13b92:	f7ed f9fb 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   13b96:	2003      	movs	r0, #3
   13b98:	f7ff ff76 	bl	13a88 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   13b9c:	f000 fff2 	bl	14b84 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   13ba0:	f7ec fd8e 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   13ba4:	4a03      	ldr	r2, [pc, #12]	; (13bb4 <bg_thread_main+0x2c>)
   13ba6:	7a13      	ldrb	r3, [r2, #8]
   13ba8:	f023 0301 	bic.w	r3, r3, #1
   13bac:	7213      	strb	r3, [r2, #8]
   13bae:	bd08      	pop	{r3, pc}
   13bb0:	000196f8 	.word	0x000196f8
   13bb4:	200017b8 	.word	0x200017b8

00013bb8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   13bb8:	b580      	push	{r7, lr}
   13bba:	b086      	sub	sp, #24
   13bbc:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   13bbe:	f7ed fd33 	bl	1628 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   13bc2:	4b30      	ldr	r3, [pc, #192]	; (13c84 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13bc4:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13bc8:	4b2f      	ldr	r3, [pc, #188]	; (13c88 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   13bca:	4d30      	ldr	r5, [pc, #192]	; (13c8c <_Cstart+0xd4>)
   13bcc:	4e30      	ldr	r6, [pc, #192]	; (13c90 <_Cstart+0xd8>)
   13bce:	2400      	movs	r4, #0
   13bd0:	22e0      	movs	r2, #224	; 0xe0
   13bd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   13bd6:	77dc      	strb	r4, [r3, #31]
   13bd8:	761c      	strb	r4, [r3, #24]
   13bda:	765c      	strb	r4, [r3, #25]
   13bdc:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13be0:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   13be4:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   13be6:	f7ed fecb 	bl	1980 <_FaultInit>
	_CpuIdleInit();
   13bea:	f7ed ff8f 	bl	1b0c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13bee:	4620      	mov	r0, r4
   13bf0:	f7ff ff4a 	bl	13a88 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   13bf4:	2001      	movs	r0, #1
   13bf6:	f7ff ff47 	bl	13a88 <_sys_device_do_config_level>
	_sched_init();
   13bfa:	f000 fcbd 	bl	14578 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   13bfe:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   13c00:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   13c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13c06:	9304      	str	r3, [sp, #16]
   13c08:	9403      	str	r4, [sp, #12]
   13c0a:	9402      	str	r4, [sp, #8]
   13c0c:	9401      	str	r4, [sp, #4]
   13c0e:	9400      	str	r4, [sp, #0]
   13c10:	4b20      	ldr	r3, [pc, #128]	; (13c94 <_Cstart+0xdc>)
   13c12:	4921      	ldr	r1, [pc, #132]	; (13c98 <_Cstart+0xe0>)
   13c14:	4628      	mov	r0, r5
   13c16:	f000 ff3d 	bl	14a94 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13c1a:	7a6b      	ldrb	r3, [r5, #9]
   13c1c:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13c20:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13c24:	726a      	strb	r2, [r5, #9]
   13c26:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   13c28:	d102      	bne.n	13c30 <_Cstart+0x78>
   13c2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13c2c:	3301      	adds	r3, #1
   13c2e:	d024      	beq.n	13c7a <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   13c30:	2301      	movs	r3, #1
   13c32:	4e1a      	ldr	r6, [pc, #104]	; (13c9c <_Cstart+0xe4>)
   13c34:	9304      	str	r3, [sp, #16]
   13c36:	230f      	movs	r3, #15
   13c38:	9303      	str	r3, [sp, #12]
   13c3a:	2300      	movs	r3, #0
   13c3c:	9302      	str	r3, [sp, #8]
   13c3e:	9301      	str	r3, [sp, #4]
   13c40:	9300      	str	r3, [sp, #0]
   13c42:	f44f 72a0 	mov.w	r2, #320	; 0x140
   13c46:	4b16      	ldr	r3, [pc, #88]	; (13ca0 <_Cstart+0xe8>)
   13c48:	4916      	ldr	r1, [pc, #88]	; (13ca4 <_Cstart+0xec>)
   13c4a:	4630      	mov	r0, r6
   13c4c:	f000 ff22 	bl	14a94 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13c50:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   13c52:	60e6      	str	r6, [r4, #12]
   13c54:	f023 0304 	bic.w	r3, r3, #4
   13c58:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   13c5a:	4b13      	ldr	r3, [pc, #76]	; (13ca8 <_Cstart+0xf0>)
   13c5c:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13c5e:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13c60:	4b12      	ldr	r3, [pc, #72]	; (13cac <_Cstart+0xf4>)

	_current = main_thread;
   13c62:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13c64:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   13c68:	4c11      	ldr	r4, [pc, #68]	; (13cb0 <_Cstart+0xf8>)
   13c6a:	4a0a      	ldr	r2, [pc, #40]	; (13c94 <_Cstart+0xdc>)
   13c6c:	f383 8809 	msr	PSP, r3
   13c70:	2100      	movs	r1, #0
   13c72:	f381 8811 	msr	BASEPRI, r1
   13c76:	4610      	mov	r0, r2
   13c78:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   13c7a:	4628      	mov	r0, r5
   13c7c:	f000 fae8 	bl	14250 <_add_thread_to_ready_q>
   13c80:	e7d6      	b.n	13c30 <_Cstart+0x78>
   13c82:	bf00      	nop
   13c84:	20003620 	.word	0x20003620
   13c88:	e000ed00 	.word	0xe000ed00
   13c8c:	200017b8 	.word	0x200017b8
   13c90:	20001948 	.word	0x20001948
   13c94:	00013b89 	.word	0x00013b89
   13c98:	200028e0 	.word	0x200028e0
   13c9c:	20001748 	.word	0x20001748
   13ca0:	00013b15 	.word	0x00013b15
   13ca4:	20002ce0 	.word	0x20002ce0
   13ca8:	2000195c 	.word	0x2000195c
   13cac:	20002ce0 	.word	0x20002ce0
   13cb0:	00000899 	.word	0x00000899

00013cb4 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   13cb4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   13cb6:	4c07      	ldr	r4, [pc, #28]	; (13cd4 <init_static_pools+0x20>)
   13cb8:	4d07      	ldr	r5, [pc, #28]	; (13cd8 <init_static_pools+0x24>)
   13cba:	42ac      	cmp	r4, r5
   13cbc:	d301      	bcc.n	13cc2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   13cbe:	2000      	movs	r0, #0
   13cc0:	bd38      	pop	{r3, r4, r5, pc}
   13cc2:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   13cc6:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13cc8:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   13cca:	4620      	mov	r0, r4
   13ccc:	f7ec fe1f 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   13cd0:	341c      	adds	r4, #28
   13cd2:	e7f2      	b.n	13cba <init_static_pools+0x6>
   13cd4:	20003f04 	.word	0x20003f04
   13cd8:	20003f04 	.word	0x20003f04

00013cdc <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   13cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ce0:	4607      	mov	r7, r0
   13ce2:	b085      	sub	sp, #20
   13ce4:	460c      	mov	r4, r1
   13ce6:	4692      	mov	sl, r2
   13ce8:	461d      	mov	r5, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13cea:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   13cee:	2b0d      	cmp	r3, #13
   13cf0:	d85d      	bhi.n	13dae <k_mem_pool_alloc+0xd2>
   13cf2:	b11b      	cbz	r3, 13cfc <k_mem_pool_alloc+0x20>
   13cf4:	4b30      	ldr	r3, [pc, #192]	; (13db8 <k_mem_pool_alloc+0xdc>)
   13cf6:	685b      	ldr	r3, [r3, #4]
   13cf8:	051a      	lsls	r2, r3, #20
   13cfa:	d558      	bpl.n	13dae <k_mem_pool_alloc+0xd2>
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   13cfc:	2d00      	cmp	r5, #0
   13cfe:	dd58      	ble.n	13db2 <k_mem_pool_alloc+0xd6>
		end = _tick_get() + _ms_to_ticks(timeout);
   13d00:	f000 fd34 	bl	1476c <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13d04:	f105 0309 	add.w	r3, r5, #9
   13d08:	220a      	movs	r2, #10
   13d0a:	fbb3 f3f2 	udiv	r3, r3, r2
   13d0e:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   13d12:	4b2a      	ldr	r3, [pc, #168]	; (13dbc <k_mem_pool_alloc+0xe0>)
   13d14:	4e2a      	ldr	r6, [pc, #168]	; (13dc0 <k_mem_pool_alloc+0xe4>)
   13d16:	1afb      	subs	r3, r7, r3
   13d18:	109b      	asrs	r3, r3, #2
   13d1a:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   13d1c:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   13d1e:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   13d22:	9400      	str	r4, [sp, #0]
   13d24:	ab03      	add	r3, sp, #12
   13d26:	aa02      	add	r2, sp, #8
   13d28:	4651      	mov	r1, sl
   13d2a:	4638      	mov	r0, r7
   13d2c:	f7ec fe3a 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   13d30:	f110 0f0b 	cmn.w	r0, #11
   13d34:	d10b      	bne.n	13d4e <k_mem_pool_alloc+0x72>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   13d36:	9400      	str	r4, [sp, #0]
   13d38:	ab03      	add	r3, sp, #12
   13d3a:	aa02      	add	r2, sp, #8
   13d3c:	4651      	mov	r1, sl
   13d3e:	4638      	mov	r0, r7
   13d40:	f7ec fe30 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   13d44:	f110 0f0b 	cmn.w	r0, #11
   13d48:	bf08      	it	eq
   13d4a:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   13d4e:	7963      	ldrb	r3, [r4, #5]
   13d50:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   13d52:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   13d54:	f362 0303 	bfi	r3, r2, #0, #4
   13d58:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   13d5a:	6863      	ldr	r3, [r4, #4]
   13d5c:	9a03      	ldr	r2, [sp, #12]
   13d5e:	f362 331f 	bfi	r3, r2, #12, #20
   13d62:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   13d64:	b1b0      	cbz	r0, 13d94 <k_mem_pool_alloc+0xb8>
   13d66:	b1ad      	cbz	r5, 13d94 <k_mem_pool_alloc+0xb8>
		    (ret && ret != -ENOMEM)) {
   13d68:	f110 0f0c 	cmn.w	r0, #12
   13d6c:	d112      	bne.n	13d94 <k_mem_pool_alloc+0xb8>
   13d6e:	f04f 0320 	mov.w	r3, #32
   13d72:	f3ef 8011 	mrs	r0, BASEPRI
   13d76:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   13d7a:	462a      	mov	r2, r5
   13d7c:	4659      	mov	r1, fp
   13d7e:	f000 fb8f 	bl	144a0 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   13d82:	1c6b      	adds	r3, r5, #1
   13d84:	d0cd      	beq.n	13d22 <k_mem_pool_alloc+0x46>
			timeout = end - _tick_get();
   13d86:	f000 fcf1 	bl	1476c <_tick_get>

			if (timeout < 0) {
   13d8a:	ebb8 0500 	subs.w	r5, r8, r0
   13d8e:	d5c8      	bpl.n	13d22 <k_mem_pool_alloc+0x46>
				break;
			}
		}
	}

	return -EAGAIN;
   13d90:	f06f 000a 	mvn.w	r0, #10
}
   13d94:	b005      	add	sp, #20
   13d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");
   13d9a:	2338      	movs	r3, #56	; 0x38
   13d9c:	4a09      	ldr	r2, [pc, #36]	; (13dc4 <k_mem_pool_alloc+0xe8>)
   13d9e:	490a      	ldr	r1, [pc, #40]	; (13dc8 <k_mem_pool_alloc+0xec>)
   13da0:	480a      	ldr	r0, [pc, #40]	; (13dcc <k_mem_pool_alloc+0xf0>)
   13da2:	f7ed f8f3 	bl	f8c <printk>
   13da6:	480a      	ldr	r0, [pc, #40]	; (13dd0 <k_mem_pool_alloc+0xf4>)
   13da8:	f7ed f8f0 	bl	f8c <printk>
   13dac:	e7fe      	b.n	13dac <k_mem_pool_alloc+0xd0>
   13dae:	2d00      	cmp	r5, #0
   13db0:	d1f3      	bne.n	13d9a <k_mem_pool_alloc+0xbe>
	s64_t end = 0;
   13db2:	f04f 0800 	mov.w	r8, #0
   13db6:	e7ac      	b.n	13d12 <k_mem_pool_alloc+0x36>
   13db8:	e000ed00 	.word	0xe000ed00
   13dbc:	20003f04 	.word	0x20003f04
   13dc0:	b6db6db7 	.word	0xb6db6db7
   13dc4:	0001972c 	.word	0x0001972c
   13dc8:	0001975c 	.word	0x0001975c
   13dcc:	00015620 	.word	0x00015620
   13dd0:	0001563e 	.word	0x0001563e

00013dd4 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   13dd4:	b570      	push	{r4, r5, r6, lr}
   13dd6:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   13dd8:	6802      	ldr	r2, [r0, #0]
   13dda:	7841      	ldrb	r1, [r0, #1]
   13ddc:	4e13      	ldr	r6, [pc, #76]	; (13e2c <k_mem_pool_free_id+0x58>)
   13dde:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13de2:	00a4      	lsls	r4, r4, #2
   13de4:	0b12      	lsrs	r2, r2, #12
   13de6:	f001 010f 	and.w	r1, r1, #15
   13dea:	1930      	adds	r0, r6, r4
   13dec:	f7ec fe8c 	bl	b08 <_sys_mem_pool_block_free>
   13df0:	f04f 0320 	mov.w	r3, #32
   13df4:	f3ef 8511 	mrs	r5, BASEPRI
   13df8:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   13dfc:	f104 0014 	add.w	r0, r4, #20
   13e00:	4430      	add	r0, r6
   13e02:	f000 fba9 	bl	14558 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   13e06:	b140      	cbz	r0, 13e1a <k_mem_pool_free_id+0x46>
   13e08:	f3ef 8305 	mrs	r3, IPSR
   13e0c:	2b0d      	cmp	r3, #13
   13e0e:	d804      	bhi.n	13e1a <k_mem_pool_free_id+0x46>
   13e10:	b133      	cbz	r3, 13e20 <k_mem_pool_free_id+0x4c>
   13e12:	4b07      	ldr	r3, [pc, #28]	; (13e30 <k_mem_pool_free_id+0x5c>)
   13e14:	685b      	ldr	r3, [r3, #4]
   13e16:	051b      	lsls	r3, r3, #20
   13e18:	d402      	bmi.n	13e20 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e1a:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   13e1e:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   13e20:	4628      	mov	r0, r5
}
   13e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   13e26:	f000 b973 	b.w	14110 <_reschedule>
   13e2a:	bf00      	nop
   13e2c:	20003f04 	.word	0x20003f04
   13e30:	e000ed00 	.word	0xe000ed00

00013e34 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   13e34:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   13e36:	1d0a      	adds	r2, r1, #4
   13e38:	d204      	bcs.n	13e44 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   13e3a:	2300      	movs	r3, #0
   13e3c:	4669      	mov	r1, sp
   13e3e:	f7ff ff4d 	bl	13cdc <k_mem_pool_alloc>
   13e42:	b118      	cbz	r0, 13e4c <k_mem_pool_malloc+0x18>
		return NULL;
   13e44:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   13e46:	b003      	add	sp, #12
   13e48:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   13e4c:	2204      	movs	r2, #4
   13e4e:	eb0d 0102 	add.w	r1, sp, r2
   13e52:	9800      	ldr	r0, [sp, #0]
   13e54:	f7ed ffe6 	bl	1e24 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   13e58:	9800      	ldr	r0, [sp, #0]
   13e5a:	3004      	adds	r0, #4
   13e5c:	e7f3      	b.n	13e46 <k_mem_pool_malloc+0x12>

00013e5e <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   13e5e:	b110      	cbz	r0, 13e66 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   13e60:	3804      	subs	r0, #4
   13e62:	f7ff bfb7 	b.w	13dd4 <k_mem_pool_free_id>
   13e66:	4770      	bx	lr

00013e68 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   13e68:	4b03      	ldr	r3, [pc, #12]	; (13e78 <z_thread_malloc+0x10>)
   13e6a:	689b      	ldr	r3, [r3, #8]
{
   13e6c:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   13e6e:	6e58      	ldr	r0, [r3, #100]	; 0x64
   13e70:	b108      	cbz	r0, 13e76 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   13e72:	f7ff bfdf 	b.w	13e34 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   13e76:	4770      	bx	lr
   13e78:	20001948 	.word	0x20001948

00013e7c <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   13e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e7e:	4605      	mov	r5, r0
   13e80:	460f      	mov	r7, r1
   13e82:	4614      	mov	r4, r2
	__asm__ volatile(
   13e84:	f04f 0220 	mov.w	r2, #32
   13e88:	f3ef 8611 	mrs	r6, BASEPRI
   13e8c:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   13e90:	b1a3      	cbz	r3, 13ebc <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   13e92:	2008      	movs	r0, #8
   13e94:	f7ff ffe8 	bl	13e68 <z_thread_malloc>
		if (!anode) {
   13e98:	2800      	cmp	r0, #0
   13e9a:	d034      	beq.n	13f06 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   13e9c:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   13e9e:	6044      	str	r4, [r0, #4]
   13ea0:	6003      	str	r3, [r0, #0]
   13ea2:	4604      	mov	r4, r0
   13ea4:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   13ea6:	b95f      	cbnz	r7, 13ec0 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   13ea8:	682a      	ldr	r2, [r5, #0]
   13eaa:	f003 0303 	and.w	r3, r3, #3
   13eae:	4313      	orrs	r3, r2
   13eb0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   13eb2:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   13eb4:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   13eb6:	b973      	cbnz	r3, 13ed6 <queue_insert+0x5a>
	list->tail = node;
   13eb8:	606c      	str	r4, [r5, #4]
   13eba:	e00c      	b.n	13ed6 <queue_insert+0x5a>
	node->next_and_flags = flags;
   13ebc:	6023      	str	r3, [r4, #0]
   13ebe:	e7f1      	b.n	13ea4 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13ec0:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   13ec2:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13ec6:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   13eca:	d114      	bne.n	13ef6 <queue_insert+0x7a>
   13ecc:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13ece:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   13ed0:	b95a      	cbnz	r2, 13eea <queue_insert+0x6e>
	list->tail = node;
   13ed2:	606c      	str	r4, [r5, #4]
	list->head = node;
   13ed4:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   13ed6:	2104      	movs	r1, #4
   13ed8:	f105 0008 	add.w	r0, r5, #8
   13edc:	f001 fa28 	bl	15330 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   13ee0:	4630      	mov	r0, r6
   13ee2:	f000 f915 	bl	14110 <_reschedule>
	return 0;
   13ee6:	2000      	movs	r0, #0
   13ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13eea:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13eec:	f003 0303 	and.w	r3, r3, #3
   13ef0:	4323      	orrs	r3, r4
   13ef2:	6013      	str	r3, [r2, #0]
   13ef4:	e7e0      	b.n	13eb8 <queue_insert+0x3c>
   13ef6:	4313      	orrs	r3, r2
   13ef8:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13efa:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13efc:	f002 0203 	and.w	r2, r2, #3
   13f00:	4314      	orrs	r4, r2
   13f02:	603c      	str	r4, [r7, #0]
   13f04:	e7e7      	b.n	13ed6 <queue_insert+0x5a>
			return -ENOMEM;
   13f06:	f06f 000b 	mvn.w	r0, #11
}
   13f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013f0c <z_queue_node_peek>:
{
   13f0c:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   13f0e:	4604      	mov	r4, r0
   13f10:	b130      	cbz	r0, 13f20 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13f12:	6802      	ldr	r2, [r0, #0]
   13f14:	0793      	lsls	r3, r2, #30
   13f16:	d003      	beq.n	13f20 <z_queue_node_peek+0x14>
		ret = anode->data;
   13f18:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   13f1a:	b109      	cbz	r1, 13f20 <z_queue_node_peek+0x14>
			k_free(anode);
   13f1c:	f7ff ff9f 	bl	13e5e <k_free>
}
   13f20:	4620      	mov	r0, r4
   13f22:	bd10      	pop	{r4, pc}

00013f24 <_impl_k_queue_init>:
	list->head = NULL;
   13f24:	2300      	movs	r3, #0
   13f26:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   13f28:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   13f2a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   13f2e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   13f30:	60c3      	str	r3, [r0, #12]
   13f32:	4770      	bx	lr

00013f34 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   13f34:	460a      	mov	r2, r1
   13f36:	2300      	movs	r3, #0
   13f38:	6841      	ldr	r1, [r0, #4]
   13f3a:	f7ff bf9f 	b.w	13e7c <queue_insert>

00013f3e <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   13f3e:	2300      	movs	r3, #0
   13f40:	460a      	mov	r2, r1
   13f42:	4619      	mov	r1, r3
   13f44:	f7ff bf9a 	b.w	13e7c <queue_insert>

00013f48 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   13f48:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(head && tail, "invalid head or tail");
   13f4a:	b101      	cbz	r1, 13f4e <k_queue_append_list+0x6>
   13f4c:	b94a      	cbnz	r2, 13f62 <k_queue_append_list+0x1a>
   13f4e:	23e9      	movs	r3, #233	; 0xe9
   13f50:	4a10      	ldr	r2, [pc, #64]	; (13f94 <k_queue_append_list+0x4c>)
   13f52:	4911      	ldr	r1, [pc, #68]	; (13f98 <k_queue_append_list+0x50>)
   13f54:	4811      	ldr	r0, [pc, #68]	; (13f9c <k_queue_append_list+0x54>)
   13f56:	f7ed f819 	bl	f8c <printk>
   13f5a:	4811      	ldr	r0, [pc, #68]	; (13fa0 <k_queue_append_list+0x58>)
   13f5c:	f7ed f816 	bl	f8c <printk>
   13f60:	e7fe      	b.n	13f60 <k_queue_append_list+0x18>
   13f62:	f04f 0320 	mov.w	r3, #32
   13f66:	f3ef 8511 	mrs	r5, BASEPRI
   13f6a:	f383 8811 	msr	BASEPRI, r3
   13f6e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   13f70:	b953      	cbnz	r3, 13f88 <k_queue_append_list+0x40>
	list->head = node;
   13f72:	6001      	str	r1, [r0, #0]
	list->tail = node;
   13f74:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   13f76:	2104      	movs	r1, #4
   13f78:	3008      	adds	r0, #8
   13f7a:	f001 f9d9 	bl	15330 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   13f7e:	4628      	mov	r0, r5
}
   13f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   13f84:	f000 b8c4 	b.w	14110 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13f88:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13f8a:	f004 0403 	and.w	r4, r4, #3
   13f8e:	4321      	orrs	r1, r4
   13f90:	6019      	str	r1, [r3, #0]
   13f92:	e7ef      	b.n	13f74 <k_queue_append_list+0x2c>
   13f94:	0001977a 	.word	0x0001977a
   13f98:	000197a8 	.word	0x000197a8
   13f9c:	00015620 	.word	0x00015620
   13fa0:	000197b5 	.word	0x000197b5

00013fa4 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   13fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fa8:	4604      	mov	r4, r0
   13faa:	b086      	sub	sp, #24
   13fac:	460d      	mov	r5, r1
   13fae:	f04f 0320 	mov.w	r3, #32
   13fb2:	f3ef 8711 	mrs	r7, BASEPRI
   13fb6:	f383 8811 	msr	BASEPRI, r3
   13fba:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   13fbc:	b182      	cbz	r2, 13fe0 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13fbe:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13fc0:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13fc2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13fc6:	428a      	cmp	r2, r1
	list->head = node;
   13fc8:	6003      	str	r3, [r0, #0]
	list->tail = node;
   13fca:	bf08      	it	eq
   13fcc:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   13fce:	2101      	movs	r1, #1
   13fd0:	4610      	mov	r0, r2
   13fd2:	f7ff ff9b 	bl	13f0c <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13fd6:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   13fda:	b006      	add	sp, #24
   13fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   13fe0:	b919      	cbnz	r1, 13fea <_impl_k_queue_get+0x46>
   13fe2:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   13fe6:	2000      	movs	r0, #0
   13fe8:	e7f7      	b.n	13fda <_impl_k_queue_get+0x36>
   13fea:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   13fee:	2104      	movs	r1, #4
   13ff0:	4603      	mov	r3, r0
   13ff2:	eb0d 0001 	add.w	r0, sp, r1
   13ff6:	f001 f83b 	bl	15070 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   13ffa:	1c6a      	adds	r2, r5, #1
   13ffc:	d002      	beq.n	14004 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13ffe:	f000 fbab 	bl	14758 <_impl_k_uptime_get_32>
   14002:	4606      	mov	r6, r0
{
   14004:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   14006:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   1400a:	1bea      	subs	r2, r5, r7
   1400c:	f36f 1307 	bfc	r3, #4, #4
   14010:	2101      	movs	r1, #1
   14012:	a801      	add	r0, sp, #4
   14014:	f88d 3011 	strb.w	r3, [sp, #17]
   14018:	f001 f870 	bl	150fc <_impl_k_poll>
		if (err && err != -EAGAIN) {
   1401c:	b108      	cbz	r0, 14022 <_impl_k_queue_get+0x7e>
   1401e:	300b      	adds	r0, #11
   14020:	d1e1      	bne.n	13fe6 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   14022:	f04f 0320 	mov.w	r3, #32
   14026:	f3ef 8811 	mrs	r8, BASEPRI
   1402a:	f383 8811 	msr	BASEPRI, r3
   1402e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   14030:	b138      	cbz	r0, 14042 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14032:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   14034:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14036:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1403a:	4290      	cmp	r0, r2
	list->head = node;
   1403c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1403e:	bf08      	it	eq
   14040:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   14042:	2101      	movs	r1, #1
   14044:	f7ff ff62 	bl	13f0c <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14048:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   1404c:	2800      	cmp	r0, #0
   1404e:	d1c4      	bne.n	13fda <_impl_k_queue_get+0x36>
   14050:	1c6b      	adds	r3, r5, #1
   14052:	d0d8      	beq.n	14006 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   14054:	f000 fb80 	bl	14758 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   14058:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1405a:	42bd      	cmp	r5, r7
   1405c:	dad3      	bge.n	14006 <_impl_k_queue_get+0x62>
   1405e:	e7c2      	b.n	13fe6 <_impl_k_queue_get+0x42>

00014060 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14060:	6903      	ldr	r3, [r0, #16]
   14062:	1c5a      	adds	r2, r3, #1
   14064:	d011      	beq.n	1408a <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14066:	4a0a      	ldr	r2, [pc, #40]	; (14090 <_abort_timeout+0x30>)
   14068:	6992      	ldr	r2, [r2, #24]
   1406a:	4290      	cmp	r0, r2
	return (node == list->tail) ? NULL : node->next;
   1406c:	bf1f      	itttt	ne
   1406e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14070:	690a      	ldrne	r2, [r1, #16]
   14072:	189b      	addne	r3, r3, r2
   14074:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   14076:	e890 000c 	ldmia.w	r0, {r2, r3}
   1407a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1407c:	6802      	ldr	r2, [r0, #0]
   1407e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14084:	6103      	str	r3, [r0, #16]
	return 0;
   14086:	2000      	movs	r0, #0
   14088:	4770      	bx	lr
		return _INACTIVE;
   1408a:	4618      	mov	r0, r3
}
   1408c:	4770      	bx	lr
   1408e:	bf00      	nop
   14090:	20001948 	.word	0x20001948

00014094 <k_spin_lock.isra.11>:
	__asm__ volatile(
   14094:	f04f 0320 	mov.w	r3, #32
   14098:	f3ef 8011 	mrs	r0, BASEPRI
   1409c:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   140a0:	4770      	bx	lr
	...

000140a4 <update_cache>:
	return list->head == list;
   140a4:	4b0d      	ldr	r3, [pc, #52]	; (140dc <update_cache+0x38>)
   140a6:	4619      	mov	r1, r3
   140a8:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   140ac:	428a      	cmp	r2, r1
   140ae:	d000      	beq.n	140b2 <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   140b0:	b902      	cbnz	r2, 140b4 <update_cache+0x10>
   140b2:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   140b4:	b970      	cbnz	r0, 140d4 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   140b6:	6899      	ldr	r1, [r3, #8]
   140b8:	b161      	cbz	r1, 140d4 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   140ba:	7a48      	ldrb	r0, [r1, #9]
   140bc:	06c0      	lsls	r0, r0, #27
   140be:	d109      	bne.n	140d4 <update_cache+0x30>
   140c0:	6a48      	ldr	r0, [r1, #36]	; 0x24
   140c2:	3001      	adds	r0, #1
   140c4:	d106      	bne.n	140d4 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   140c6:	8948      	ldrh	r0, [r1, #10]
   140c8:	287f      	cmp	r0, #127	; 0x7f
   140ca:	d903      	bls.n	140d4 <update_cache+0x30>
	return thread == _idle_thread;
   140cc:	4804      	ldr	r0, [pc, #16]	; (140e0 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   140ce:	6800      	ldr	r0, [r0, #0]
   140d0:	4281      	cmp	r1, r0
   140d2:	d101      	bne.n	140d8 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   140d4:	621a      	str	r2, [r3, #32]
   140d6:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   140d8:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   140da:	4770      	bx	lr
   140dc:	20001948 	.word	0x20001948
   140e0:	000196f4 	.word	0x000196f4

000140e4 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   140e4:	f990 000a 	ldrsb.w	r0, [r0, #10]
   140e8:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   140ec:	4298      	cmp	r0, r3
   140ee:	bfac      	ite	ge
   140f0:	2000      	movge	r0, #0
   140f2:	2001      	movlt	r0, #1
   140f4:	4770      	bx	lr

000140f6 <_find_first_thread_to_unpend>:
#endif
}

struct k_thread *_find_first_thread_to_unpend(_wait_q_t *wait_q,
					      struct k_thread *from)
{
   140f6:	b508      	push	{r3, lr}
   140f8:	4602      	mov	r2, r0
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_lock) {
   140fa:	f7ff ffcb 	bl	14094 <k_spin_lock.isra.11>
	return list->head == list;
   140fe:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14100:	429a      	cmp	r2, r3
   14102:	bf08      	it	eq
   14104:	2300      	moveq	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14106:	f380 8811 	msr	BASEPRI, r0
		ret = _priq_wait_best(&wait_q->waitq);
	}

	return ret;
}
   1410a:	4618      	mov	r0, r3
   1410c:	bd08      	pop	{r3, pc}
	...

00014110 <_reschedule>:
   14110:	f3ef 8305 	mrs	r3, IPSR
   14114:	2b0d      	cmp	r3, #13
   14116:	d809      	bhi.n	1412c <_reschedule+0x1c>
   14118:	b11b      	cbz	r3, 14122 <_reschedule+0x12>
   1411a:	4b09      	ldr	r3, [pc, #36]	; (14140 <_reschedule+0x30>)
   1411c:	685b      	ldr	r3, [r3, #4]
   1411e:	051b      	lsls	r3, r3, #20
   14120:	d504      	bpl.n	1412c <_reschedule+0x1c>
	}

#ifdef CONFIG_SMP
	return _Swap(key);
#else
	if (_get_next_ready_thread() != _current) {
   14122:	4b08      	ldr	r3, [pc, #32]	; (14144 <_reschedule+0x34>)
   14124:	689a      	ldr	r2, [r3, #8]
   14126:	6a1b      	ldr	r3, [r3, #32]
   14128:	429a      	cmp	r2, r3
   1412a:	d103      	bne.n	14134 <_reschedule+0x24>
   1412c:	f380 8811 	msr	BASEPRI, r0
#endif

 noswap:
	irq_unlock(key);
	return 0;
}
   14130:	2000      	movs	r0, #0
   14132:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   14134:	4b04      	ldr	r3, [pc, #16]	; (14148 <_reschedule+0x38>)
   14136:	2200      	movs	r2, #0
   14138:	601a      	str	r2, [r3, #0]
   1413a:	f7ed ba81 	b.w	1640 <__swap>
   1413e:	bf00      	nop
   14140:	e000ed00 	.word	0xe000ed00
   14144:	20001948 	.word	0x20001948
   14148:	2000197c 	.word	0x2000197c

0001414c <k_sched_unlock>:
{
   1414c:	b510      	push	{r4, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   1414e:	4a1c      	ldr	r2, [pc, #112]	; (141c0 <k_sched_unlock+0x74>)
   14150:	6893      	ldr	r3, [r2, #8]
   14152:	7ad9      	ldrb	r1, [r3, #11]
   14154:	b951      	cbnz	r1, 1416c <k_sched_unlock+0x20>
   14156:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   1415a:	4a1a      	ldr	r2, [pc, #104]	; (141c4 <k_sched_unlock+0x78>)
   1415c:	491a      	ldr	r1, [pc, #104]	; (141c8 <k_sched_unlock+0x7c>)
   1415e:	481b      	ldr	r0, [pc, #108]	; (141cc <k_sched_unlock+0x80>)
   14160:	f7ec ff14 	bl	f8c <printk>
   14164:	481a      	ldr	r0, [pc, #104]	; (141d0 <k_sched_unlock+0x84>)
   14166:	f7ec ff11 	bl	f8c <printk>
   1416a:	e7fe      	b.n	1416a <k_sched_unlock+0x1e>
   1416c:	f3ef 8305 	mrs	r3, IPSR
   14170:	2b0d      	cmp	r3, #13
   14172:	d81a      	bhi.n	141aa <k_sched_unlock+0x5e>
   14174:	b11b      	cbz	r3, 1417e <k_sched_unlock+0x32>
   14176:	4b17      	ldr	r3, [pc, #92]	; (141d4 <k_sched_unlock+0x88>)
   14178:	685b      	ldr	r3, [r3, #4]
   1417a:	051b      	lsls	r3, r3, #20
   1417c:	d515      	bpl.n	141aa <k_sched_unlock+0x5e>
	LOCKED(&sched_lock) {
   1417e:	f7ff ff89 	bl	14094 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   14182:	6892      	ldr	r2, [r2, #8]
   14184:	7ad3      	ldrb	r3, [r2, #11]
   14186:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   14188:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   1418a:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   1418c:	2001      	movs	r0, #1
   1418e:	f7ff ff89 	bl	140a4 <update_cache>
   14192:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   14196:	f04f 0320 	mov.w	r3, #32
   1419a:	f3ef 8011 	mrs	r0, BASEPRI
   1419e:	f383 8811 	msr	BASEPRI, r3
}
   141a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   141a6:	f7ff bfb3 	b.w	14110 <_reschedule>
	__ASSERT(!_is_in_isr(), "");
   141aa:	f240 13a5 	movw	r3, #421	; 0x1a5
   141ae:	4a05      	ldr	r2, [pc, #20]	; (141c4 <k_sched_unlock+0x78>)
   141b0:	4909      	ldr	r1, [pc, #36]	; (141d8 <k_sched_unlock+0x8c>)
   141b2:	4806      	ldr	r0, [pc, #24]	; (141cc <k_sched_unlock+0x80>)
   141b4:	f7ec feea 	bl	f8c <printk>
   141b8:	4805      	ldr	r0, [pc, #20]	; (141d0 <k_sched_unlock+0x84>)
   141ba:	f7ec fee7 	bl	f8c <printk>
   141be:	e7fe      	b.n	141be <k_sched_unlock+0x72>
   141c0:	20001948 	.word	0x20001948
   141c4:	000198b1 	.word	0x000198b1
   141c8:	000198df 	.word	0x000198df
   141cc:	00015620 	.word	0x00015620
   141d0:	0001563e 	.word	0x0001563e
   141d4:	e000ed00 	.word	0xe000ed00
   141d8:	000198a5 	.word	0x000198a5

000141dc <_priq_dumb_add>:
	return thread == _idle_thread;
   141dc:	4b17      	ldr	r3, [pc, #92]	; (1423c <_priq_dumb_add+0x60>)
	__ASSERT_NO_MSG(!_is_idle(thread));
   141de:	681b      	ldr	r3, [r3, #0]
   141e0:	4299      	cmp	r1, r3
{
   141e2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!_is_idle(thread));
   141e4:	d10a      	bne.n	141fc <_priq_dumb_add+0x20>
   141e6:	f240 13dd 	movw	r3, #477	; 0x1dd
   141ea:	4a15      	ldr	r2, [pc, #84]	; (14240 <_priq_dumb_add+0x64>)
   141ec:	4915      	ldr	r1, [pc, #84]	; (14244 <_priq_dumb_add+0x68>)
   141ee:	4816      	ldr	r0, [pc, #88]	; (14248 <_priq_dumb_add+0x6c>)
   141f0:	f7ec fecc 	bl	f8c <printk>
   141f4:	4815      	ldr	r0, [pc, #84]	; (1424c <_priq_dumb_add+0x70>)
   141f6:	f7ec fec9 	bl	f8c <printk>
   141fa:	e7fe      	b.n	141fa <_priq_dumb_add+0x1e>
	return list->head == list;
   141fc:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   141fe:	4298      	cmp	r0, r3
   14200:	bf08      	it	eq
   14202:	2300      	moveq	r3, #0
   14204:	b193      	cbz	r3, 1422c <_priq_dumb_add+0x50>
	if (t1->base.prio < t2->base.prio) {
   14206:	f991 400a 	ldrsb.w	r4, [r1, #10]
   1420a:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1420e:	4294      	cmp	r4, r2
   14210:	da06      	bge.n	14220 <_priq_dumb_add+0x44>
		node->prev = insert_point->prev;
   14212:	685a      	ldr	r2, [r3, #4]
   14214:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14216:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14218:	685a      	ldr	r2, [r3, #4]
   1421a:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   1421c:	6059      	str	r1, [r3, #4]
   1421e:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   14220:	6842      	ldr	r2, [r0, #4]
   14222:	4293      	cmp	r3, r2
   14224:	d002      	beq.n	1422c <_priq_dumb_add+0x50>
   14226:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14228:	2b00      	cmp	r3, #0
   1422a:	d1eb      	bne.n	14204 <_priq_dumb_add+0x28>
	node->next = list;
   1422c:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   1422e:	6843      	ldr	r3, [r0, #4]
   14230:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14232:	6843      	ldr	r3, [r0, #4]
   14234:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14236:	6041      	str	r1, [r0, #4]
   14238:	bd10      	pop	{r4, pc}
   1423a:	bf00      	nop
   1423c:	000196f4 	.word	0x000196f4
   14240:	000198b1 	.word	0x000198b1
   14244:	00019834 	.word	0x00019834
   14248:	00015620 	.word	0x00015620
   1424c:	0001563e 	.word	0x0001563e

00014250 <_add_thread_to_ready_q>:
{
   14250:	b538      	push	{r3, r4, r5, lr}
   14252:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14254:	f7ff ff1e 	bl	14094 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   14258:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   1425a:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1425c:	4806      	ldr	r0, [pc, #24]	; (14278 <_add_thread_to_ready_q+0x28>)
   1425e:	f7ff ffbd 	bl	141dc <_priq_dumb_add>
	thread->base.thread_state |= states;
   14262:	7a63      	ldrb	r3, [r4, #9]
   14264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14268:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1426a:	2000      	movs	r0, #0
   1426c:	f7ff ff1a 	bl	140a4 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14270:	f385 8811 	msr	BASEPRI, r5
   14274:	bd38      	pop	{r3, r4, r5, pc}
   14276:	bf00      	nop
   14278:	2000196c 	.word	0x2000196c

0001427c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   1427c:	7a42      	ldrb	r2, [r0, #9]
   1427e:	06d2      	lsls	r2, r2, #27
   14280:	d104      	bne.n	1428c <_ready_thread+0x10>
   14282:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14284:	3301      	adds	r3, #1
   14286:	d101      	bne.n	1428c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   14288:	f7ff bfe2 	b.w	14250 <_add_thread_to_ready_q>
   1428c:	4770      	bx	lr
	...

00014290 <_priq_dumb_remove>:
{
   14290:	b508      	push	{r3, lr}
	return thread == _idle_thread;
   14292:	4b0a      	ldr	r3, [pc, #40]	; (142bc <_priq_dumb_remove+0x2c>)
	__ASSERT_NO_MSG(!_is_idle(thread));
   14294:	681b      	ldr	r3, [r3, #0]
   14296:	4299      	cmp	r1, r3
   14298:	d10a      	bne.n	142b0 <_priq_dumb_remove+0x20>
   1429a:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   1429e:	4a08      	ldr	r2, [pc, #32]	; (142c0 <_priq_dumb_remove+0x30>)
   142a0:	4908      	ldr	r1, [pc, #32]	; (142c4 <_priq_dumb_remove+0x34>)
   142a2:	4809      	ldr	r0, [pc, #36]	; (142c8 <_priq_dumb_remove+0x38>)
   142a4:	f7ec fe72 	bl	f8c <printk>
   142a8:	4808      	ldr	r0, [pc, #32]	; (142cc <_priq_dumb_remove+0x3c>)
   142aa:	f7ec fe6f 	bl	f8c <printk>
   142ae:	e7fe      	b.n	142ae <_priq_dumb_remove+0x1e>
	node->prev->next = node->next;
   142b0:	e891 000c 	ldmia.w	r1, {r2, r3}
   142b4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   142b6:	680a      	ldr	r2, [r1, #0]
   142b8:	6053      	str	r3, [r2, #4]
   142ba:	bd08      	pop	{r3, pc}
   142bc:	000196f4 	.word	0x000196f4
   142c0:	000198b1 	.word	0x000198b1
   142c4:	00019834 	.word	0x00019834
   142c8:	00015620 	.word	0x00015620
   142cc:	0001563e 	.word	0x0001563e

000142d0 <_unpend_thread_no_timeout>:
{
   142d0:	b538      	push	{r3, r4, r5, lr}
   142d2:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   142d4:	f7ff fede 	bl	14094 <k_spin_lock.isra.11>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   142d8:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   142da:	4605      	mov	r5, r0
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   142dc:	2000      	movs	r0, #0
   142de:	f7ff ffd7 	bl	14290 <_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   142e2:	7a63      	ldrb	r3, [r4, #9]
   142e4:	f023 0302 	bic.w	r3, r3, #2
   142e8:	7263      	strb	r3, [r4, #9]
   142ea:	f385 8811 	msr	BASEPRI, r5
   142ee:	bd38      	pop	{r3, r4, r5, pc}

000142f0 <_add_timeout>:
{
   142f0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(timeout_in_ticks >= 0, "");
   142f2:	1e1e      	subs	r6, r3, #0
{
   142f4:	4604      	mov	r4, r0
	__ASSERT(timeout_in_ticks >= 0, "");
   142f6:	da09      	bge.n	1430c <_add_timeout+0x1c>
   142f8:	23c9      	movs	r3, #201	; 0xc9
   142fa:	4a28      	ldr	r2, [pc, #160]	; (1439c <_add_timeout+0xac>)
   142fc:	4928      	ldr	r1, [pc, #160]	; (143a0 <_add_timeout+0xb0>)
   142fe:	4829      	ldr	r0, [pc, #164]	; (143a4 <_add_timeout+0xb4>)
   14300:	f7ec fe44 	bl	f8c <printk>
   14304:	4828      	ldr	r0, [pc, #160]	; (143a8 <_add_timeout+0xb8>)
   14306:	f7ec fe41 	bl	f8c <printk>
   1430a:	e7fe      	b.n	1430a <_add_timeout+0x1a>
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1430c:	610e      	str	r6, [r1, #16]
	timeout->thread = thread;
   1430e:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14310:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   14312:	d120      	bne.n	14356 <_add_timeout+0x66>
	__asm__ volatile(
   14314:	f04f 0320 	mov.w	r3, #32
   14318:	f3ef 8511 	mrs	r5, BASEPRI
   1431c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   14320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14324:	610b      	str	r3, [r1, #16]
	if (thread) {
   14326:	b170      	cbz	r0, 14346 <_add_timeout+0x56>
	if (timeout_obj->wait_q) {
   14328:	68cb      	ldr	r3, [r1, #12]
   1432a:	b113      	cbz	r3, 14332 <_add_timeout+0x42>
		_unpend_thread_no_timeout(thread);
   1432c:	f7ff ffd0 	bl	142d0 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   14330:	6226      	str	r6, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14332:	7a63      	ldrb	r3, [r4, #9]
   14334:	f023 0304 	bic.w	r3, r3, #4
   14338:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   1433a:	4620      	mov	r0, r4
   1433c:	f7ff ff9e 	bl	1427c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14340:	f385 8811 	msr	BASEPRI, r5
   14344:	bd70      	pop	{r4, r5, r6, pc}
   14346:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   1434a:	694b      	ldr	r3, [r1, #20]
   1434c:	b32b      	cbz	r3, 1439a <_add_timeout+0xaa>
			timeout->func(timeout);
   1434e:	4608      	mov	r0, r1
}
   14350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   14354:	4718      	bx	r3
	return list->head == list;
   14356:	4a15      	ldr	r2, [pc, #84]	; (143ac <_add_timeout+0xbc>)
   14358:	4610      	mov	r0, r2
   1435a:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1435e:	4283      	cmp	r3, r0
   14360:	d10c      	bne.n	1437c <_add_timeout+0x8c>
	node->next = list;
   14362:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   14364:	6993      	ldr	r3, [r2, #24]
   14366:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14368:	6993      	ldr	r3, [r2, #24]
   1436a:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1436c:	6191      	str	r1, [r2, #24]
   1436e:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   14370:	1b64      	subs	r4, r4, r5
   14372:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   14374:	6994      	ldr	r4, [r2, #24]
   14376:	42a3      	cmp	r3, r4
   14378:	d0f3      	beq.n	14362 <_add_timeout+0x72>
   1437a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1437c:	2b00      	cmp	r3, #0
   1437e:	d0f0      	beq.n	14362 <_add_timeout+0x72>
		if (*delta <= in_q->delta_ticks_from_prev) {
   14380:	690c      	ldr	r4, [r1, #16]
   14382:	691d      	ldr	r5, [r3, #16]
   14384:	42ac      	cmp	r4, r5
   14386:	dcf3      	bgt.n	14370 <_add_timeout+0x80>
		node->prev = insert_point->prev;
   14388:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1438a:	1b2c      	subs	r4, r5, r4
   1438c:	611c      	str	r4, [r3, #16]
   1438e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14390:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   14392:	685a      	ldr	r2, [r3, #4]
   14394:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   14396:	6059      	str	r1, [r3, #4]
   14398:	bd70      	pop	{r4, r5, r6, pc}
   1439a:	bd70      	pop	{r4, r5, r6, pc}
   1439c:	000197ca 	.word	0x000197ca
   143a0:	00019804 	.word	0x00019804
   143a4:	00015620 	.word	0x00015620
   143a8:	0001563e 	.word	0x0001563e
   143ac:	20001948 	.word	0x20001948

000143b0 <_unpend_thread>:
{
   143b0:	b510      	push	{r4, lr}
   143b2:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   143b4:	f7ff ff8c 	bl	142d0 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   143b8:	f104 0014 	add.w	r0, r4, #20
}
   143bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   143c0:	f7ff be4e 	b.w	14060 <_abort_timeout>

000143c4 <_unpend_first_thread>:
{
   143c4:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   143c6:	2100      	movs	r1, #0
   143c8:	f7ff fe95 	bl	140f6 <_find_first_thread_to_unpend>

	if (thread) {
   143cc:	4604      	mov	r4, r0
   143ce:	b128      	cbz	r0, 143dc <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   143d0:	f7ff ff7e 	bl	142d0 <_unpend_thread_no_timeout>
   143d4:	f104 0014 	add.w	r0, r4, #20
   143d8:	f7ff fe42 	bl	14060 <_abort_timeout>
}
   143dc:	4620      	mov	r0, r4
   143de:	bd10      	pop	{r4, pc}

000143e0 <_move_thread_to_end_of_prio_q>:
{
   143e0:	b570      	push	{r4, r5, r6, lr}
   143e2:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   143e4:	f7ff fe56 	bl	14094 <k_spin_lock.isra.11>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   143e8:	4d09      	ldr	r5, [pc, #36]	; (14410 <_move_thread_to_end_of_prio_q+0x30>)
   143ea:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   143ec:	4606      	mov	r6, r0
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   143ee:	4628      	mov	r0, r5
   143f0:	f7ff ff4e 	bl	14290 <_priq_dumb_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   143f4:	4621      	mov	r1, r4
   143f6:	4628      	mov	r0, r5
   143f8:	f7ff fef0 	bl	141dc <_priq_dumb_add>
	thread->base.thread_state |= states;
   143fc:	7a63      	ldrb	r3, [r4, #9]
   143fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14402:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   14404:	2000      	movs	r0, #0
   14406:	f7ff fe4d 	bl	140a4 <update_cache>
   1440a:	f386 8811 	msr	BASEPRI, r6
   1440e:	bd70      	pop	{r4, r5, r6, pc}
   14410:	2000196c 	.word	0x2000196c

00014414 <_remove_thread_from_ready_q>:
{
   14414:	b538      	push	{r3, r4, r5, lr}
   14416:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   14418:	f7ff fe3c 	bl	14094 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   1441c:	7a63      	ldrb	r3, [r4, #9]
   1441e:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   14420:	4605      	mov	r5, r0
		if (_is_thread_queued(thread)) {
   14422:	d50e      	bpl.n	14442 <_remove_thread_from_ready_q+0x2e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   14424:	4808      	ldr	r0, [pc, #32]	; (14448 <_remove_thread_from_ready_q+0x34>)
   14426:	4621      	mov	r1, r4
   14428:	f7ff ff32 	bl	14290 <_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1442c:	7a63      	ldrb	r3, [r4, #9]
   1442e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14432:	7263      	strb	r3, [r4, #9]
			update_cache(thread == _current);
   14434:	4b05      	ldr	r3, [pc, #20]	; (1444c <_remove_thread_from_ready_q+0x38>)
   14436:	6898      	ldr	r0, [r3, #8]
   14438:	1b03      	subs	r3, r0, r4
   1443a:	4258      	negs	r0, r3
   1443c:	4158      	adcs	r0, r3
   1443e:	f7ff fe31 	bl	140a4 <update_cache>
   14442:	f385 8811 	msr	BASEPRI, r5
   14446:	bd38      	pop	{r3, r4, r5, pc}
   14448:	2000196c 	.word	0x2000196c
   1444c:	20001948 	.word	0x20001948

00014450 <pend>:
{
   14450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14452:	4605      	mov	r5, r0
   14454:	4614      	mov	r4, r2
   14456:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   14458:	f7ff ffdc 	bl	14414 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1445c:	7a6b      	ldrb	r3, [r5, #9]
   1445e:	f043 0302 	orr.w	r3, r3, #2
   14462:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   14464:	1c63      	adds	r3, r4, #1
   14466:	d012      	beq.n	1448e <pend+0x3e>
	__asm__ volatile(
   14468:	f04f 0320 	mov.w	r3, #32
   1446c:	f3ef 8711 	mrs	r7, BASEPRI
   14470:	f383 8811 	msr	BASEPRI, r3
   14474:	230a      	movs	r3, #10
   14476:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   14478:	4632      	mov	r2, r6
   1447a:	fbb4 f3f3 	udiv	r3, r4, r3
   1447e:	f105 0114 	add.w	r1, r5, #20
   14482:	3301      	adds	r3, #1
   14484:	4628      	mov	r0, r5
   14486:	f7ff ff33 	bl	142f0 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1448a:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   1448e:	b12e      	cbz	r6, 1449c <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   14490:	4629      	mov	r1, r5
   14492:	4630      	mov	r0, r6
}
   14494:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   14498:	f7ff bea0 	b.w	141dc <_priq_dumb_add>
   1449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000144a0 <_pend_current_thread>:
{
   144a0:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   144a2:	4b06      	ldr	r3, [pc, #24]	; (144bc <_pend_current_thread+0x1c>)
{
   144a4:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   144a6:	6898      	ldr	r0, [r3, #8]
   144a8:	f7ff ffd2 	bl	14450 <pend>
	_time_slice_elapsed = 0;
   144ac:	4b04      	ldr	r3, [pc, #16]	; (144c0 <_pend_current_thread+0x20>)
   144ae:	2200      	movs	r2, #0
   144b0:	4620      	mov	r0, r4
}
   144b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   144b6:	601a      	str	r2, [r3, #0]
   144b8:	f7ed b8c2 	b.w	1640 <__swap>
   144bc:	20001948 	.word	0x20001948
   144c0:	2000197c 	.word	0x2000197c

000144c4 <_is_thread_time_slicing>:
{
   144c4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(thread == _current);
   144c6:	4a1a      	ldr	r2, [pc, #104]	; (14530 <_is_thread_time_slicing+0x6c>)
   144c8:	6891      	ldr	r1, [r2, #8]
   144ca:	4281      	cmp	r1, r0
   144cc:	d00a      	beq.n	144e4 <_is_thread_time_slicing+0x20>
   144ce:	f240 2346 	movw	r3, #582	; 0x246
   144d2:	4a18      	ldr	r2, [pc, #96]	; (14534 <_is_thread_time_slicing+0x70>)
   144d4:	4918      	ldr	r1, [pc, #96]	; (14538 <_is_thread_time_slicing+0x74>)
   144d6:	4819      	ldr	r0, [pc, #100]	; (1453c <_is_thread_time_slicing+0x78>)
   144d8:	f7ec fd58 	bl	f8c <printk>
   144dc:	4818      	ldr	r0, [pc, #96]	; (14540 <_is_thread_time_slicing+0x7c>)
   144de:	f7ec fd55 	bl	f8c <printk>
   144e2:	e7fe      	b.n	144e2 <_is_thread_time_slicing+0x1e>
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   144e4:	4b17      	ldr	r3, [pc, #92]	; (14544 <_is_thread_time_slicing+0x80>)
   144e6:	681b      	ldr	r3, [r3, #0]
   144e8:	2b00      	cmp	r3, #0
   144ea:	dd1e      	ble.n	1452a <_is_thread_time_slicing+0x66>
   144ec:	894b      	ldrh	r3, [r1, #10]
   144ee:	2b7f      	cmp	r3, #127	; 0x7f
   144f0:	d81b      	bhi.n	1452a <_is_thread_time_slicing+0x66>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   144f2:	4b15      	ldr	r3, [pc, #84]	; (14548 <_is_thread_time_slicing+0x84>)
   144f4:	f991 000a 	ldrsb.w	r0, [r1, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   144f8:	681b      	ldr	r3, [r3, #0]
   144fa:	4298      	cmp	r0, r3
   144fc:	db15      	blt.n	1452a <_is_thread_time_slicing+0x66>
	LOCKED(&sched_lock) {
   144fe:	f7ff fdc9 	bl	14094 <k_spin_lock.isra.11>
	return list->head == list;
   14502:	f852 3f24 	ldr.w	r3, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14506:	4293      	cmp	r3, r2
   14508:	4604      	mov	r4, r0
   1450a:	d00a      	beq.n	14522 <_is_thread_time_slicing+0x5e>
		if (next) {
   1450c:	b15b      	cbz	r3, 14526 <_is_thread_time_slicing+0x62>
			ret = thread->base.prio == next->base.prio;
   1450e:	f991 000a 	ldrsb.w	r0, [r1, #10]
   14512:	f993 300a 	ldrsb.w	r3, [r3, #10]
   14516:	1ac3      	subs	r3, r0, r3
   14518:	4258      	negs	r0, r3
   1451a:	4158      	adcs	r0, r3
   1451c:	f384 8811 	msr	BASEPRI, r4
	return ret;
   14520:	bd10      	pop	{r4, pc}
   14522:	2000      	movs	r0, #0
   14524:	e7fa      	b.n	1451c <_is_thread_time_slicing+0x58>
   14526:	4618      	mov	r0, r3
   14528:	e7f8      	b.n	1451c <_is_thread_time_slicing+0x58>
		return 0;
   1452a:	2000      	movs	r0, #0
}
   1452c:	bd10      	pop	{r4, pc}
   1452e:	bf00      	nop
   14530:	20001948 	.word	0x20001948
   14534:	000198b1 	.word	0x000198b1
   14538:	0001981a 	.word	0x0001981a
   1453c:	00015620 	.word	0x00015620
   14540:	0001563e 	.word	0x0001563e
   14544:	20001828 	.word	0x20001828
   14548:	2000182c 	.word	0x2000182c

0001454c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   1454c:	4b01      	ldr	r3, [pc, #4]	; (14554 <_update_time_slice_before_swap+0x8>)
   1454e:	2200      	movs	r2, #0
   14550:	601a      	str	r2, [r3, #0]
   14552:	4770      	bx	lr
   14554:	2000197c 	.word	0x2000197c

00014558 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   14558:	b538      	push	{r3, r4, r5, lr}
   1455a:	4605      	mov	r5, r0
	int need_sched = 0;
   1455c:	2000      	movs	r0, #0
	return list->head == list;
   1455e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14560:	42a5      	cmp	r5, r4
   14562:	d000      	beq.n	14566 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   14564:	b904      	cbnz	r4, 14568 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   14566:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   14568:	4620      	mov	r0, r4
   1456a:	f7ff ff21 	bl	143b0 <_unpend_thread>
		_ready_thread(th);
   1456e:	4620      	mov	r0, r4
   14570:	f7ff fe84 	bl	1427c <_ready_thread>
		need_sched = 1;
   14574:	2001      	movs	r0, #1
   14576:	e7f2      	b.n	1455e <_unpend_all+0x6>

00014578 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   14578:	4b02      	ldr	r3, [pc, #8]	; (14584 <_sched_init+0xc>)
   1457a:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1457e:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   14580:	629a      	str	r2, [r3, #40]	; 0x28
   14582:	4770      	bx	lr
   14584:	20001948 	.word	0x20001948

00014588 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   14588:	b538      	push	{r3, r4, r5, lr}
   1458a:	f3ef 8305 	mrs	r3, IPSR
   1458e:	2b0d      	cmp	r3, #13
   14590:	d82d      	bhi.n	145ee <_impl_k_yield+0x66>
   14592:	b11b      	cbz	r3, 1459c <_impl_k_yield+0x14>
   14594:	4b1c      	ldr	r3, [pc, #112]	; (14608 <_impl_k_yield+0x80>)
   14596:	685b      	ldr	r3, [r3, #4]
   14598:	051b      	lsls	r3, r3, #20
   1459a:	d528      	bpl.n	145ee <_impl_k_yield+0x66>
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   1459c:	4c1b      	ldr	r4, [pc, #108]	; (1460c <_impl_k_yield+0x84>)
   1459e:	4b1c      	ldr	r3, [pc, #112]	; (14610 <_impl_k_yield+0x88>)
   145a0:	68a2      	ldr	r2, [r4, #8]
   145a2:	681b      	ldr	r3, [r3, #0]
   145a4:	429a      	cmp	r2, r3
   145a6:	d011      	beq.n	145cc <_impl_k_yield+0x44>
		LOCKED(&sched_lock) {
   145a8:	f7ff fd74 	bl	14094 <k_spin_lock.isra.11>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
   145ac:	68a1      	ldr	r1, [r4, #8]
		LOCKED(&sched_lock) {
   145ae:	4605      	mov	r5, r0
			_priq_run_remove(&_kernel.ready_q.runq, _current);
   145b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   145b4:	f7ff fe6c 	bl	14290 <_priq_dumb_remove>
			_priq_run_add(&_kernel.ready_q.runq, _current);
   145b8:	68a1      	ldr	r1, [r4, #8]
   145ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
   145be:	f7ff fe0d 	bl	141dc <_priq_dumb_add>
			update_cache(1);
   145c2:	2001      	movs	r0, #1
   145c4:	f7ff fd6e 	bl	140a4 <update_cache>
   145c8:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   145cc:	68a2      	ldr	r2, [r4, #8]
   145ce:	6a23      	ldr	r3, [r4, #32]
   145d0:	429a      	cmp	r2, r3
   145d2:	d017      	beq.n	14604 <_impl_k_yield+0x7c>
	__asm__ volatile(
   145d4:	f04f 0320 	mov.w	r3, #32
   145d8:	f3ef 8011 	mrs	r0, BASEPRI
   145dc:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   145e0:	4b0c      	ldr	r3, [pc, #48]	; (14614 <_impl_k_yield+0x8c>)
   145e2:	2200      	movs	r2, #0
   145e4:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   145e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   145ea:	f7ed b829 	b.w	1640 <__swap>
	__ASSERT(!_is_in_isr(), "");
   145ee:	f240 23d7 	movw	r3, #727	; 0x2d7
   145f2:	4a09      	ldr	r2, [pc, #36]	; (14618 <_impl_k_yield+0x90>)
   145f4:	4909      	ldr	r1, [pc, #36]	; (1461c <_impl_k_yield+0x94>)
   145f6:	480a      	ldr	r0, [pc, #40]	; (14620 <_impl_k_yield+0x98>)
   145f8:	f7ec fcc8 	bl	f8c <printk>
   145fc:	4809      	ldr	r0, [pc, #36]	; (14624 <_impl_k_yield+0x9c>)
   145fe:	f7ec fcc5 	bl	f8c <printk>
   14602:	e7fe      	b.n	14602 <_impl_k_yield+0x7a>
   14604:	bd38      	pop	{r3, r4, r5, pc}
   14606:	bf00      	nop
   14608:	e000ed00 	.word	0xe000ed00
   1460c:	20001948 	.word	0x20001948
   14610:	000196f4 	.word	0x000196f4
   14614:	2000197c 	.word	0x2000197c
   14618:	000198b1 	.word	0x000198b1
   1461c:	000198a5 	.word	0x000198a5
   14620:	00015620 	.word	0x00015620
   14624:	0001563e 	.word	0x0001563e

00014628 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   14628:	4b01      	ldr	r3, [pc, #4]	; (14630 <_impl_k_current_get+0x8>)
   1462a:	6898      	ldr	r0, [r3, #8]
   1462c:	4770      	bx	lr
   1462e:	bf00      	nop
   14630:	20001948 	.word	0x20001948

00014634 <_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void _impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   14634:	b508      	push	{r3, lr}
	__ASSERT(limit != 0, "limit cannot be zero");
   14636:	b94a      	cbnz	r2, 1464c <_impl_k_sem_init+0x18>
   14638:	233c      	movs	r3, #60	; 0x3c
   1463a:	4a0f      	ldr	r2, [pc, #60]	; (14678 <_impl_k_sem_init+0x44>)
   1463c:	490f      	ldr	r1, [pc, #60]	; (1467c <_impl_k_sem_init+0x48>)
   1463e:	4810      	ldr	r0, [pc, #64]	; (14680 <_impl_k_sem_init+0x4c>)
   14640:	f7ec fca4 	bl	f8c <printk>
   14644:	480f      	ldr	r0, [pc, #60]	; (14684 <_impl_k_sem_init+0x50>)
   14646:	f7ec fca1 	bl	f8c <printk>
   1464a:	e7fe      	b.n	1464a <_impl_k_sem_init+0x16>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   1464c:	428a      	cmp	r2, r1
   1464e:	d209      	bcs.n	14664 <_impl_k_sem_init+0x30>
   14650:	233d      	movs	r3, #61	; 0x3d
   14652:	4a09      	ldr	r2, [pc, #36]	; (14678 <_impl_k_sem_init+0x44>)
   14654:	490c      	ldr	r1, [pc, #48]	; (14688 <_impl_k_sem_init+0x54>)
   14656:	480a      	ldr	r0, [pc, #40]	; (14680 <_impl_k_sem_init+0x4c>)
   14658:	f7ec fc98 	bl	f8c <printk>
   1465c:	480b      	ldr	r0, [pc, #44]	; (1468c <_impl_k_sem_init+0x58>)
   1465e:	f7ec fc95 	bl	f8c <printk>
   14662:	e7fe      	b.n	14662 <_impl_k_sem_init+0x2e>

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   14664:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   14668:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1466a:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   1466c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1466e:	6143      	str	r3, [r0, #20]
	sem->count = initial_count;
   14670:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   14672:	60c2      	str	r2, [r0, #12]
   14674:	bd08      	pop	{r3, pc}
   14676:	bf00      	nop
   14678:	00019907 	.word	0x00019907
   1467c:	00019933 	.word	0x00019933
   14680:	00015620 	.word	0x00015620
   14684:	0001993e 	.word	0x0001993e
   14688:	00019953 	.word	0x00019953
   1468c:	0001996a 	.word	0x0001996a

00014690 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   14690:	b570      	push	{r4, r5, r6, lr}
   14692:	4604      	mov	r4, r0
   14694:	f04f 0320 	mov.w	r3, #32
   14698:	f3ef 8611 	mrs	r6, BASEPRI
   1469c:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   146a0:	f7ff fe90 	bl	143c4 <_unpend_first_thread>
	if (thread) {
   146a4:	4605      	mov	r5, r0
   146a6:	b160      	cbz	r0, 146c2 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   146a8:	7a43      	ldrb	r3, [r0, #9]
   146aa:	06db      	lsls	r3, r3, #27
   146ac:	d102      	bne.n	146b4 <_impl_k_sem_give+0x24>
   146ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
   146b0:	3301      	adds	r3, #1
   146b2:	d012      	beq.n	146da <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   146b4:	2300      	movs	r3, #0
   146b6:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   146b8:	4630      	mov	r0, r6
}
   146ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   146be:	f7ff bd27 	b.w	14110 <_reschedule>
	sem->count += (sem->count != sem->limit);
   146c2:	68a3      	ldr	r3, [r4, #8]
   146c4:	68e2      	ldr	r2, [r4, #12]
   146c6:	429a      	cmp	r2, r3
   146c8:	bf18      	it	ne
   146ca:	3301      	addne	r3, #1
   146cc:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   146ce:	2102      	movs	r1, #2
   146d0:	f104 0010 	add.w	r0, r4, #16
   146d4:	f000 fe2c 	bl	15330 <_handle_obj_poll_events>
   146d8:	e7ee      	b.n	146b8 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   146da:	f7ff fdb9 	bl	14250 <_add_thread_to_ready_q>
   146de:	e7e9      	b.n	146b4 <_impl_k_sem_give+0x24>

000146e0 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   146e0:	b510      	push	{r4, lr}
   146e2:	460a      	mov	r2, r1
   146e4:	f3ef 8305 	mrs	r3, IPSR
   146e8:	2b0d      	cmp	r3, #13
   146ea:	d81e      	bhi.n	1472a <_impl_k_sem_take+0x4a>
   146ec:	b11b      	cbz	r3, 146f6 <_impl_k_sem_take+0x16>
   146ee:	4b15      	ldr	r3, [pc, #84]	; (14744 <_impl_k_sem_take+0x64>)
   146f0:	685b      	ldr	r3, [r3, #4]
   146f2:	051b      	lsls	r3, r3, #20
   146f4:	d519      	bpl.n	1472a <_impl_k_sem_take+0x4a>
   146f6:	f04f 0320 	mov.w	r3, #32
   146fa:	f3ef 8411 	mrs	r4, BASEPRI
   146fe:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   14702:	6883      	ldr	r3, [r0, #8]
   14704:	b12b      	cbz	r3, 14712 <_impl_k_sem_take+0x32>
		sem->count--;
   14706:	3b01      	subs	r3, #1
   14708:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1470a:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   1470e:	2000      	movs	r0, #0
   14710:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   14712:	b922      	cbnz	r2, 1471e <_impl_k_sem_take+0x3e>
   14714:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   14718:	f06f 000f 	mvn.w	r0, #15
   1471c:	bd10      	pop	{r4, pc}
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
   1471e:	4601      	mov	r1, r0
   14720:	4620      	mov	r0, r4
}
   14722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   14726:	f7ff bebb 	b.w	144a0 <_pend_current_thread>
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");
   1472a:	2a00      	cmp	r2, #0
   1472c:	d0e3      	beq.n	146f6 <_impl_k_sem_take+0x16>
   1472e:	2393      	movs	r3, #147	; 0x93
   14730:	4a05      	ldr	r2, [pc, #20]	; (14748 <_impl_k_sem_take+0x68>)
   14732:	4906      	ldr	r1, [pc, #24]	; (1474c <_impl_k_sem_take+0x6c>)
   14734:	4806      	ldr	r0, [pc, #24]	; (14750 <_impl_k_sem_take+0x70>)
   14736:	f7ec fc29 	bl	f8c <printk>
   1473a:	4806      	ldr	r0, [pc, #24]	; (14754 <_impl_k_sem_take+0x74>)
   1473c:	f7ec fc26 	bl	f8c <printk>
   14740:	e7fe      	b.n	14740 <_impl_k_sem_take+0x60>
   14742:	bf00      	nop
   14744:	e000ed00 	.word	0xe000ed00
   14748:	00019907 	.word	0x00019907
   1474c:	0001998d 	.word	0x0001998d
   14750:	00015620 	.word	0x00015620
   14754:	0001563e 	.word	0x0001563e

00014758 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   14758:	4b03      	ldr	r3, [pc, #12]	; (14768 <_impl_k_uptime_get_32+0x10>)
   1475a:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   1475e:	230a      	movs	r3, #10
   14760:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   14764:	4770      	bx	lr
   14766:	bf00      	nop
   14768:	20001980 	.word	0x20001980

0001476c <_tick_get>:
	__asm__ volatile(
   1476c:	f04f 0220 	mov.w	r2, #32
   14770:	f3ef 8311 	mrs	r3, BASEPRI
   14774:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   14778:	4a02      	ldr	r2, [pc, #8]	; (14784 <_tick_get+0x18>)
   1477a:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1477e:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   14782:	4770      	bx	lr
   14784:	20001980 	.word	0x20001980

00014788 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   14788:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   1478a:	f7ff ffef 	bl	1476c <_tick_get>
   1478e:	240a      	movs	r4, #10
   14790:	fba0 2304 	umull	r2, r3, r0, r4
   14794:	fb04 3301 	mla	r3, r4, r1, r3
}
   14798:	4610      	mov	r0, r2
   1479a:	4619      	mov	r1, r3
   1479c:	bd10      	pop	{r4, pc}
	...

000147a0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   147a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147a4:	4607      	mov	r7, r0
   147a6:	b085      	sub	sp, #20
	__asm__ volatile(
   147a8:	f04f 0320 	mov.w	r3, #32
   147ac:	f3ef 8011 	mrs	r0, BASEPRI
   147b0:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   147b4:	4961      	ldr	r1, [pc, #388]	; (1493c <_nano_sys_clock_tick_announce+0x19c>)
   147b6:	e9d1 4500 	ldrd	r4, r5, [r1]
   147ba:	19e2      	adds	r2, r4, r7
   147bc:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   147c0:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   147c4:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   147c8:	ae02      	add	r6, sp, #8
   147ca:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   147cc:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   147ce:	f04f 0320 	mov.w	r3, #32
   147d2:	f3ef 8011 	mrs	r0, BASEPRI
   147d6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   147da:	4c59      	ldr	r4, [pc, #356]	; (14940 <_nano_sys_clock_tick_announce+0x1a0>)
   147dc:	4621      	mov	r1, r4
   147de:	4602      	mov	r2, r0
   147e0:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   147e4:	428b      	cmp	r3, r1
   147e6:	d000      	beq.n	147ea <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   147e8:	b9fb      	cbnz	r3, 1482a <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   147ea:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   147ee:	68a0      	ldr	r0, [r4, #8]
   147f0:	f7ff fe68 	bl	144c4 <_is_thread_time_slicing>
   147f4:	b1b0      	cbz	r0, 14824 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   147f6:	4a53      	ldr	r2, [pc, #332]	; (14944 <_nano_sys_clock_tick_announce+0x1a4>)
   147f8:	6811      	ldr	r1, [r2, #0]
   147fa:	230a      	movs	r3, #10
   147fc:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   14800:	4b51      	ldr	r3, [pc, #324]	; (14948 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   14802:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   14804:	681b      	ldr	r3, [r3, #0]
   14806:	429f      	cmp	r7, r3
   14808:	db0c      	blt.n	14824 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   1480a:	2300      	movs	r3, #0
   1480c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1480e:	f04f 0320 	mov.w	r3, #32
   14812:	f3ef 8511 	mrs	r5, BASEPRI
   14816:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   1481a:	68a0      	ldr	r0, [r4, #8]
   1481c:	f7ff fde0 	bl	143e0 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14820:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   14824:	b005      	add	sp, #20
   14826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   1482a:	4d48      	ldr	r5, [pc, #288]	; (1494c <_nano_sys_clock_tick_announce+0x1ac>)
   1482c:	9501      	str	r5, [sp, #4]
   1482e:	2101      	movs	r1, #1
   14830:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   14832:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   14836:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   14838:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   1483c:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   1483e:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   14840:	bfaa      	itet	ge
   14842:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   14846:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   1484a:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   1484e:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   14850:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   14852:	691d      	ldr	r5, [r3, #16]
   14854:	4298      	cmp	r0, r3
   14856:	bf14      	ite	ne
   14858:	6818      	ldrne	r0, [r3, #0]
   1485a:	2000      	moveq	r0, #0
   1485c:	b9d5      	cbnz	r5, 14894 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   1485e:	e893 0220 	ldmia.w	r3, {r5, r9}
   14862:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   14866:	681d      	ldr	r5, [r3, #0]
   14868:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   1486c:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   1486e:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   14872:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   14874:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   14876:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   14878:	f8c3 c010 	str.w	ip, [r3, #16]
   1487c:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14880:	f04f 0320 	mov.w	r3, #32
   14884:	f3ef 8211 	mrs	r2, BASEPRI
   14888:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   1488c:	4603      	mov	r3, r0
   1488e:	2800      	cmp	r0, #0
   14890:	d1d4      	bne.n	1483c <_nano_sys_clock_tick_announce+0x9c>
   14892:	e001      	b.n	14898 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   14894:	2900      	cmp	r1, #0
   14896:	dcf1      	bgt.n	1487c <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14898:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   1489c:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1489e:	42b0      	cmp	r0, r6
   148a0:	d103      	bne.n	148aa <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   148a2:	9a01      	ldr	r2, [sp, #4]
   148a4:	2300      	movs	r3, #0
   148a6:	6013      	str	r3, [r2, #0]
   148a8:	e7a1      	b.n	147ee <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   148aa:	2800      	cmp	r0, #0
   148ac:	d0f9      	beq.n	148a2 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   148ae:	9b03      	ldr	r3, [sp, #12]
   148b0:	4298      	cmp	r0, r3
   148b2:	d102      	bne.n	148ba <_nano_sys_clock_tick_announce+0x11a>
   148b4:	f04f 0b00 	mov.w	fp, #0
   148b8:	e001      	b.n	148be <_nano_sys_clock_tick_announce+0x11e>
   148ba:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   148be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   148c2:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   148c6:	e890 000c 	ldmia.w	r0, {r2, r3}
   148ca:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   148cc:	6802      	ldr	r2, [r0, #0]
   148ce:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   148d0:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   148d2:	f04f 0320 	mov.w	r3, #32
   148d6:	f3ef 8811 	mrs	r8, BASEPRI
   148da:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   148de:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   148e2:	b1d6      	cbz	r6, 1491a <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   148e4:	68c3      	ldr	r3, [r0, #12]
   148e6:	b123      	cbz	r3, 148f2 <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   148e8:	4630      	mov	r0, r6
   148ea:	f7ff fcf1 	bl	142d0 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   148ee:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   148f2:	7a73      	ldrb	r3, [r6, #9]
   148f4:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   148f8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   148fc:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   148fe:	d102      	bne.n	14906 <_nano_sys_clock_tick_announce+0x166>
   14900:	6a73      	ldr	r3, [r6, #36]	; 0x24
   14902:	3301      	adds	r3, #1
   14904:	d015      	beq.n	14932 <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14906:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   1490a:	f1bb 0f00 	cmp.w	fp, #0
   1490e:	d0c8      	beq.n	148a2 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   14910:	9b03      	ldr	r3, [sp, #12]
   14912:	455b      	cmp	r3, fp
   14914:	d108      	bne.n	14928 <_nano_sys_clock_tick_announce+0x188>
   14916:	2300      	movs	r3, #0
   14918:	e008      	b.n	1492c <_nano_sys_clock_tick_announce+0x18c>
   1491a:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   1491e:	6943      	ldr	r3, [r0, #20]
   14920:	2b00      	cmp	r3, #0
   14922:	d0f2      	beq.n	1490a <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   14924:	4798      	blx	r3
   14926:	e7f0      	b.n	1490a <_nano_sys_clock_tick_announce+0x16a>
   14928:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   1492c:	4658      	mov	r0, fp
   1492e:	469b      	mov	fp, r3
   14930:	e7c9      	b.n	148c6 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   14932:	4630      	mov	r0, r6
   14934:	f7ff fc8c 	bl	14250 <_add_thread_to_ready_q>
   14938:	e7e5      	b.n	14906 <_nano_sys_clock_tick_announce+0x166>
   1493a:	bf00      	nop
   1493c:	20001980 	.word	0x20001980
   14940:	20001948 	.word	0x20001948
   14944:	2000197c 	.word	0x2000197c
   14948:	20001828 	.word	0x20001828
   1494c:	20001978 	.word	0x20001978

00014950 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   14950:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   14952:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1495a:	4903      	ldr	r1, [pc, #12]	; (14968 <k_sys_work_q_init+0x18>)
   1495c:	4803      	ldr	r0, [pc, #12]	; (1496c <k_sys_work_q_init+0x1c>)
   1495e:	f000 f9cd 	bl	14cfc <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   14962:	2000      	movs	r0, #0
   14964:	bd08      	pop	{r3, pc}
   14966:	bf00      	nop
   14968:	20003620 	.word	0x20003620
   1496c:	20001988 	.word	0x20001988

00014970 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14970:	6903      	ldr	r3, [r0, #16]
   14972:	1c5a      	adds	r2, r3, #1
   14974:	d011      	beq.n	1499a <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14976:	4a0a      	ldr	r2, [pc, #40]	; (149a0 <_abort_timeout+0x30>)
   14978:	6992      	ldr	r2, [r2, #24]
   1497a:	4290      	cmp	r0, r2
   1497c:	bf1f      	itttt	ne
   1497e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14980:	690a      	ldrne	r2, [r1, #16]
   14982:	189b      	addne	r3, r3, r2
   14984:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   14986:	e890 000c 	ldmia.w	r0, {r2, r3}
   1498a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1498c:	6802      	ldr	r2, [r0, #0]
   1498e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14994:	6103      	str	r3, [r0, #16]
	return 0;
   14996:	2000      	movs	r0, #0
   14998:	4770      	bx	lr
		return _INACTIVE;
   1499a:	4618      	mov	r0, r3
}
   1499c:	4770      	bx	lr
   1499e:	bf00      	nop
   149a0:	20001948 	.word	0x20001948

000149a4 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   149a4:	7a42      	ldrb	r2, [r0, #9]
   149a6:	06d2      	lsls	r2, r2, #27
   149a8:	d104      	bne.n	149b4 <_ready_thread+0x10>
   149aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   149ac:	3301      	adds	r3, #1
   149ae:	d101      	bne.n	149b4 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   149b0:	f7ff bc4e 	b.w	14250 <_add_thread_to_ready_q>
   149b4:	4770      	bx	lr
	...

000149b8 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   149b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   149ba:	f04f 0320 	mov.w	r3, #32
   149be:	f3ef 8611 	mrs	r6, BASEPRI
   149c2:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   149c6:	4a19      	ldr	r2, [pc, #100]	; (14a2c <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   149c8:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   149ca:	230a      	movs	r3, #10
   149cc:	3109      	adds	r1, #9
   149ce:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   149d2:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   149d4:	6241      	str	r1, [r0, #36]	; 0x24
   149d6:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   149d8:	2300      	movs	r3, #0
   149da:	6203      	str	r3, [r0, #32]
   149dc:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   149e0:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   149e2:	f100 0514 	add.w	r5, r0, #20
   149e6:	d108      	bne.n	149fa <schedule_new_thread.part.11+0x42>
	node->next = list;
   149e8:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   149ea:	6993      	ldr	r3, [r2, #24]
   149ec:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   149ee:	6993      	ldr	r3, [r2, #24]
   149f0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   149f2:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   149f4:	f386 8811 	msr	BASEPRI, r6
   149f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   149fa:	2b00      	cmp	r3, #0
   149fc:	d0f4      	beq.n	149e8 <schedule_new_thread.part.11+0x30>
   149fe:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14a02:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14a04:	691f      	ldr	r7, [r3, #16]
   14a06:	42bc      	cmp	r4, r7
   14a08:	dc08      	bgt.n	14a1c <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   14a0a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14a0c:	1b3c      	subs	r4, r7, r4
   14a0e:	611c      	str	r4, [r3, #16]
   14a10:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   14a12:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   14a14:	685a      	ldr	r2, [r3, #4]
   14a16:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   14a18:	605d      	str	r5, [r3, #4]
   14a1a:	e7eb      	b.n	149f4 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   14a1c:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   14a1e:	4573      	cmp	r3, lr
   14a20:	6244      	str	r4, [r0, #36]	; 0x24
   14a22:	d0e1      	beq.n	149e8 <schedule_new_thread.part.11+0x30>
   14a24:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14a26:	2b00      	cmp	r3, #0
   14a28:	d1eb      	bne.n	14a02 <schedule_new_thread.part.11+0x4a>
   14a2a:	e7dd      	b.n	149e8 <schedule_new_thread.part.11+0x30>
   14a2c:	20001948 	.word	0x20001948

00014a30 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   14a30:	4770      	bx	lr
	...

00014a34 <k_is_in_isr>:
   14a34:	f3ef 8005 	mrs	r0, IPSR
   14a38:	280d      	cmp	r0, #13
   14a3a:	d807      	bhi.n	14a4c <k_is_in_isr+0x18>
   14a3c:	b138      	cbz	r0, 14a4e <k_is_in_isr+0x1a>
   14a3e:	4b04      	ldr	r3, [pc, #16]	; (14a50 <k_is_in_isr+0x1c>)
   14a40:	6858      	ldr	r0, [r3, #4]
   14a42:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   14a46:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   14a4a:	4770      	bx	lr
   14a4c:	2001      	movs	r0, #1
}
   14a4e:	4770      	bx	lr
   14a50:	e000ed00 	.word	0xe000ed00

00014a54 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   14a54:	4b02      	ldr	r3, [pc, #8]	; (14a60 <_is_thread_essential+0xc>)
   14a56:	689b      	ldr	r3, [r3, #8]
   14a58:	7a18      	ldrb	r0, [r3, #8]
}
   14a5a:	f000 0001 	and.w	r0, r0, #1
   14a5e:	4770      	bx	lr
   14a60:	20001948 	.word	0x20001948

00014a64 <_impl_k_thread_start>:
{
   14a64:	b510      	push	{r4, lr}
	__asm__ volatile(
   14a66:	f04f 0320 	mov.w	r3, #32
   14a6a:	f3ef 8411 	mrs	r4, BASEPRI
   14a6e:	f383 8811 	msr	BASEPRI, r3
   14a72:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   14a74:	0759      	lsls	r1, r3, #29
   14a76:	d402      	bmi.n	14a7e <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14a78:	f384 8811 	msr	BASEPRI, r4
   14a7c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a7e:	f023 0304 	bic.w	r3, r3, #4
   14a82:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   14a84:	f7ff ff8e 	bl	149a4 <_ready_thread>
	_reschedule(key);
   14a88:	4620      	mov	r0, r4
}
   14a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   14a8e:	f7ff bb3f 	b.w	14110 <_reschedule>
	...

00014a94 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   14a94:	b530      	push	{r4, r5, lr}
   14a96:	b087      	sub	sp, #28
   14a98:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14a9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14a9c:	9504      	str	r5, [sp, #16]
   14a9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14aa0:	9503      	str	r5, [sp, #12]
   14aa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14aa4:	9502      	str	r5, [sp, #8]
   14aa6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   14aa8:	9501      	str	r5, [sp, #4]
   14aaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14aac:	9500      	str	r5, [sp, #0]
   14aae:	f7ec ffdf 	bl	1a70 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   14ab2:	4b04      	ldr	r3, [pc, #16]	; (14ac4 <_setup_new_thread+0x30>)
   14ab4:	689b      	ldr	r3, [r3, #8]
   14ab6:	b913      	cbnz	r3, 14abe <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   14ab8:	6663      	str	r3, [r4, #100]	; 0x64
}
   14aba:	b007      	add	sp, #28
   14abc:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   14abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   14ac0:	e7fa      	b.n	14ab8 <_setup_new_thread+0x24>
   14ac2:	bf00      	nop
   14ac4:	20001948 	.word	0x20001948

00014ac8 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   14ac8:	b530      	push	{r4, r5, lr}
   14aca:	b087      	sub	sp, #28
   14acc:	4604      	mov	r4, r0
   14ace:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   14ad0:	f3ef 8005 	mrs	r0, IPSR
   14ad4:	280d      	cmp	r0, #13
   14ad6:	d81f      	bhi.n	14b18 <_impl_k_thread_create+0x50>
   14ad8:	b118      	cbz	r0, 14ae2 <_impl_k_thread_create+0x1a>
   14ada:	4815      	ldr	r0, [pc, #84]	; (14b30 <_impl_k_thread_create+0x68>)
   14adc:	6840      	ldr	r0, [r0, #4]
   14ade:	0500      	lsls	r0, r0, #20
   14ae0:	d51a      	bpl.n	14b18 <_impl_k_thread_create+0x50>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14ae2:	980e      	ldr	r0, [sp, #56]	; 0x38
   14ae4:	9004      	str	r0, [sp, #16]
   14ae6:	980d      	ldr	r0, [sp, #52]	; 0x34
   14ae8:	9003      	str	r0, [sp, #12]
   14aea:	980c      	ldr	r0, [sp, #48]	; 0x30
   14aec:	9002      	str	r0, [sp, #8]
   14aee:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14af0:	9001      	str	r0, [sp, #4]
   14af2:	980a      	ldr	r0, [sp, #40]	; 0x28
   14af4:	9000      	str	r0, [sp, #0]
   14af6:	4620      	mov	r0, r4
   14af8:	f7ff ffcc 	bl	14a94 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   14afc:	1c6b      	adds	r3, r5, #1
   14afe:	d003      	beq.n	14b08 <_impl_k_thread_create+0x40>
	if (delay == 0) {
   14b00:	b92d      	cbnz	r5, 14b0e <_impl_k_thread_create+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   14b02:	4620      	mov	r0, r4
   14b04:	f7ff ffae 	bl	14a64 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   14b08:	4620      	mov	r0, r4
   14b0a:	b007      	add	sp, #28
   14b0c:	bd30      	pop	{r4, r5, pc}
   14b0e:	4629      	mov	r1, r5
   14b10:	4620      	mov	r0, r4
   14b12:	f7ff ff51 	bl	149b8 <schedule_new_thread.part.11>
   14b16:	e7f7      	b.n	14b08 <_impl_k_thread_create+0x40>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
   14b18:	f44f 73b0 	mov.w	r3, #352	; 0x160
   14b1c:	4a05      	ldr	r2, [pc, #20]	; (14b34 <_impl_k_thread_create+0x6c>)
   14b1e:	4906      	ldr	r1, [pc, #24]	; (14b38 <_impl_k_thread_create+0x70>)
   14b20:	4806      	ldr	r0, [pc, #24]	; (14b3c <_impl_k_thread_create+0x74>)
   14b22:	f7ec fa33 	bl	f8c <printk>
   14b26:	4806      	ldr	r0, [pc, #24]	; (14b40 <_impl_k_thread_create+0x78>)
   14b28:	f7ec fa30 	bl	f8c <printk>
   14b2c:	e7fe      	b.n	14b2c <_impl_k_thread_create+0x64>
   14b2e:	bf00      	nop
   14b30:	e000ed00 	.word	0xe000ed00
   14b34:	000199a9 	.word	0x000199a9
   14b38:	000198a5 	.word	0x000198a5
   14b3c:	00015620 	.word	0x00015620
   14b40:	000199d8 	.word	0x000199d8

00014b44 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   14b44:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   14b46:	b510      	push	{r4, lr}
   14b48:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   14b4a:	b103      	cbz	r3, 14b4e <_k_thread_single_abort+0xa>
		thread->fn_abort();
   14b4c:	4798      	blx	r3
   14b4e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14b50:	06da      	lsls	r2, r3, #27
   14b52:	d106      	bne.n	14b62 <_k_thread_single_abort+0x1e>
   14b54:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14b56:	3201      	adds	r2, #1
   14b58:	d103      	bne.n	14b62 <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   14b5a:	4620      	mov	r0, r4
   14b5c:	f7ff fc5a 	bl	14414 <_remove_thread_from_ready_q>
   14b60:	e00b      	b.n	14b7a <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   14b62:	079b      	lsls	r3, r3, #30
   14b64:	d502      	bpl.n	14b6c <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   14b66:	4620      	mov	r0, r4
   14b68:	f7ff fbb2 	bl	142d0 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   14b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14b6e:	3301      	adds	r3, #1
   14b70:	d003      	beq.n	14b7a <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   14b72:	f104 0014 	add.w	r0, r4, #20
   14b76:	f7ff fefb 	bl	14970 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   14b7a:	7a63      	ldrb	r3, [r4, #9]
   14b7c:	f043 0308 	orr.w	r3, r3, #8
   14b80:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   14b82:	bd10      	pop	{r4, pc}

00014b84 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   14b84:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   14b86:	4f30      	ldr	r7, [pc, #192]	; (14c48 <_init_static_threads+0xc4>)
   14b88:	4d30      	ldr	r5, [pc, #192]	; (14c4c <_init_static_threads+0xc8>)
{
   14b8a:	b087      	sub	sp, #28
   14b8c:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   14b8e:	42bd      	cmp	r5, r7
   14b90:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   14b94:	d317      	bcc.n	14bc6 <_init_static_threads+0x42>
   14b96:	f3ef 8305 	mrs	r3, IPSR
   14b9a:	2b0d      	cmp	r3, #13
   14b9c:	d84a      	bhi.n	14c34 <_init_static_threads+0xb0>
   14b9e:	b11b      	cbz	r3, 14ba8 <_init_static_threads+0x24>
   14ba0:	4b2b      	ldr	r3, [pc, #172]	; (14c50 <_init_static_threads+0xcc>)
   14ba2:	685b      	ldr	r3, [r3, #4]
   14ba4:	051a      	lsls	r2, r3, #20
   14ba6:	d545      	bpl.n	14c34 <_init_static_threads+0xb0>
	__ASSERT(_current->base.sched_locked != 1, "");
   14ba8:	4b2a      	ldr	r3, [pc, #168]	; (14c54 <_init_static_threads+0xd0>)
   14baa:	689a      	ldr	r2, [r3, #8]
   14bac:	7ad3      	ldrb	r3, [r2, #11]
   14bae:	2b01      	cmp	r3, #1
   14bb0:	d122      	bne.n	14bf8 <_init_static_threads+0x74>
   14bb2:	23f6      	movs	r3, #246	; 0xf6
   14bb4:	4a28      	ldr	r2, [pc, #160]	; (14c58 <_init_static_threads+0xd4>)
   14bb6:	4929      	ldr	r1, [pc, #164]	; (14c5c <_init_static_threads+0xd8>)
   14bb8:	4829      	ldr	r0, [pc, #164]	; (14c60 <_init_static_threads+0xdc>)
   14bba:	f7ec f9e7 	bl	f8c <printk>
   14bbe:	4829      	ldr	r0, [pc, #164]	; (14c64 <_init_static_threads+0xe0>)
   14bc0:	f7ec f9e4 	bl	f8c <printk>
   14bc4:	e7fe      	b.n	14bc4 <_init_static_threads+0x40>
		_setup_new_thread(
   14bc6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14bca:	9304      	str	r3, [sp, #16]
   14bcc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   14bd0:	9303      	str	r3, [sp, #12]
   14bd2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   14bd6:	9302      	str	r3, [sp, #8]
   14bd8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   14bdc:	9301      	str	r3, [sp, #4]
   14bde:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14be2:	9300      	str	r3, [sp, #0]
   14be4:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   14be8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   14bea:	f7ff ff53 	bl	14a94 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   14bee:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14bf2:	651d      	str	r5, [r3, #80]	; 0x50
   14bf4:	4625      	mov	r5, r4
   14bf6:	e7ca      	b.n	14b8e <_init_static_threads+0xa>
	--_current->base.sched_locked;
   14bf8:	3b01      	subs	r3, #1
   14bfa:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   14bfc:	f04f 0320 	mov.w	r3, #32
   14c00:	f3ef 8511 	mrs	r5, BASEPRI
   14c04:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   14c08:	4c10      	ldr	r4, [pc, #64]	; (14c4c <_init_static_threads+0xc8>)
   14c0a:	42b4      	cmp	r4, r6
   14c0c:	d306      	bcc.n	14c1c <_init_static_threads+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14c0e:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   14c12:	b007      	add	sp, #28
   14c14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   14c18:	f7ff ba98 	b.w	1414c <k_sched_unlock>
		if (thread_data->init_delay != K_FOREVER) {
   14c1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14c1e:	1c4b      	adds	r3, r1, #1
   14c20:	d003      	beq.n	14c2a <_init_static_threads+0xa6>
			schedule_new_thread(thread_data->init_thread,
   14c22:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   14c24:	b919      	cbnz	r1, 14c2e <_init_static_threads+0xaa>
   14c26:	f7ff ff1d 	bl	14a64 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   14c2a:	342c      	adds	r4, #44	; 0x2c
   14c2c:	e7ed      	b.n	14c0a <_init_static_threads+0x86>
   14c2e:	f7ff fec3 	bl	149b8 <schedule_new_thread.part.11>
   14c32:	e7fa      	b.n	14c2a <_init_static_threads+0xa6>
	__ASSERT(!_is_in_isr(), "");
   14c34:	23f5      	movs	r3, #245	; 0xf5
   14c36:	4a08      	ldr	r2, [pc, #32]	; (14c58 <_init_static_threads+0xd4>)
   14c38:	490b      	ldr	r1, [pc, #44]	; (14c68 <_init_static_threads+0xe4>)
   14c3a:	4809      	ldr	r0, [pc, #36]	; (14c60 <_init_static_threads+0xdc>)
   14c3c:	f7ec f9a6 	bl	f8c <printk>
   14c40:	4808      	ldr	r0, [pc, #32]	; (14c64 <_init_static_threads+0xe0>)
   14c42:	f7ec f9a3 	bl	f8c <printk>
   14c46:	e7fe      	b.n	14c46 <_init_static_threads+0xc2>
   14c48:	20003f04 	.word	0x20003f04
   14c4c:	20003f04 	.word	0x20003f04
   14c50:	e000ed00 	.word	0xe000ed00
   14c54:	20001948 	.word	0x20001948
   14c58:	00019846 	.word	0x00019846
   14c5c:	0001987d 	.word	0x0001987d
   14c60:	00015620 	.word	0x00015620
   14c64:	0001563e 	.word	0x0001563e
   14c68:	000198a5 	.word	0x000198a5

00014c6c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   14c6c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   14c6e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   14c70:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   14c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   14c76:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   14c78:	72c3      	strb	r3, [r0, #11]
   14c7a:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   14c7c:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   14c7e:	61c3      	str	r3, [r0, #28]
	t->func = func;
   14c80:	6283      	str	r3, [r0, #40]	; 0x28
   14c82:	4770      	bx	lr

00014c84 <k_work_submit_to_queue>:
{
   14c84:	b500      	push	{lr}
   14c86:	f101 0308 	add.w	r3, r1, #8
   14c8a:	f3bf 8f5b 	dmb	ish
   14c8e:	e853 2f00 	ldrex	r2, [r3]
   14c92:	f042 0e01 	orr.w	lr, r2, #1
   14c96:	e843 ec00 	strex	ip, lr, [r3]
   14c9a:	f1bc 0f00 	cmp.w	ip, #0
   14c9e:	d1f6      	bne.n	14c8e <k_work_submit_to_queue+0xa>
   14ca0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14ca4:	07d3      	lsls	r3, r2, #31
   14ca6:	d403      	bmi.n	14cb0 <k_work_submit_to_queue+0x2c>
}
   14ca8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14cac:	f7ff b942 	b.w	13f34 <k_queue_append>
   14cb0:	f85d fb04 	ldr.w	pc, [sp], #4

00014cb4 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14cb4:	f1a0 010c 	sub.w	r1, r0, #12
   14cb8:	6980      	ldr	r0, [r0, #24]
   14cba:	f7ff bfe3 	b.w	14c84 <k_work_submit_to_queue>

00014cbe <work_q_main>:
{
   14cbe:	b510      	push	{r4, lr}
   14cc0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   14cc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14cc6:	4620      	mov	r0, r4
   14cc8:	f7ff f96c 	bl	13fa4 <_impl_k_queue_get>
		if (!work) {
   14ccc:	4603      	mov	r3, r0
   14cce:	2800      	cmp	r0, #0
   14cd0:	d0f7      	beq.n	14cc2 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14cd2:	3308      	adds	r3, #8
		handler = work->handler;
   14cd4:	6842      	ldr	r2, [r0, #4]
   14cd6:	f3bf 8f5b 	dmb	ish
   14cda:	e853 1f00 	ldrex	r1, [r3]
   14cde:	f021 0e01 	bic.w	lr, r1, #1
   14ce2:	e843 ec00 	strex	ip, lr, [r3]
   14ce6:	f1bc 0f00 	cmp.w	ip, #0
   14cea:	d1f6      	bne.n	14cda <work_q_main+0x1c>
   14cec:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   14cf0:	07cb      	lsls	r3, r1, #31
   14cf2:	d500      	bpl.n	14cf6 <work_q_main+0x38>
			handler(work);
   14cf4:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14cf6:	f7ff fc47 	bl	14588 <_impl_k_yield>
   14cfa:	e7e2      	b.n	14cc2 <work_q_main+0x4>

00014cfc <k_work_q_start>:
{
   14cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cfe:	b087      	sub	sp, #28
   14d00:	4604      	mov	r4, r0
   14d02:	461f      	mov	r7, r3
   14d04:	460d      	mov	r5, r1
   14d06:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   14d08:	f7ff f90c 	bl	13f24 <_impl_k_queue_init>

   14d0c:	2000      	movs	r0, #0
   14d0e:	9005      	str	r0, [sp, #20]
   14d10:	9004      	str	r0, [sp, #16]
   14d12:	9002      	str	r0, [sp, #8]
   14d14:	9001      	str	r0, [sp, #4]
   14d16:	9703      	str	r7, [sp, #12]
   14d18:	9400      	str	r4, [sp, #0]
   14d1a:	4b04      	ldr	r3, [pc, #16]	; (14d2c <k_work_q_start+0x30>)
   14d1c:	4632      	mov	r2, r6
   14d1e:	4629      	mov	r1, r5
   14d20:	f104 0010 	add.w	r0, r4, #16
   14d24:	f7ff fed0 	bl	14ac8 <_impl_k_thread_create>
}
   14d28:	b007      	add	sp, #28
   14d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d2c:	00014cbf 	.word	0x00014cbf

00014d30 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   14d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   14d34:	2300      	movs	r3, #0
   14d36:	61c2      	str	r2, [r0, #28]
	t->func = func;
   14d38:	4a04      	ldr	r2, [pc, #16]	; (14d4c <k_delayed_work_init+0x1c>)
   14d3a:	6003      	str	r3, [r0, #0]
   14d3c:	6041      	str	r1, [r0, #4]
   14d3e:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   14d40:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   14d42:	6143      	str	r3, [r0, #20]
	t->func = func;
   14d44:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   14d46:	6243      	str	r3, [r0, #36]	; 0x24
   14d48:	4770      	bx	lr
   14d4a:	bf00      	nop
   14d4c:	00014cb5 	.word	0x00014cb5

00014d50 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   14d50:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14d52:	f04f 0320 	mov.w	r3, #32
   14d56:	f3ef 8411 	mrs	r4, BASEPRI
   14d5a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   14d5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14d60:	b923      	cbnz	r3, 14d6c <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14d62:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   14d66:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   14d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14d6c:	f3bf 8f5b 	dmb	ish
   14d70:	6883      	ldr	r3, [r0, #8]
   14d72:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   14d76:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14d78:	f100 0508 	add.w	r5, r0, #8
   14d7c:	d533      	bpl.n	14de6 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   14d7e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   14d80:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   14d82:	2100      	movs	r1, #0
   14d84:	2b00      	cmp	r3, #0
   14d86:	d0ec      	beq.n	14d62 <k_delayed_work_cancel+0x12>
   14d88:	4298      	cmp	r0, r3
   14d8a:	d127      	bne.n	14ddc <k_delayed_work_cancel+0x8c>
   14d8c:	6803      	ldr	r3, [r0, #0]
   14d8e:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14d90:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   14d94:	b9c9      	cbnz	r1, 14dca <k_delayed_work_cancel+0x7a>
   14d96:	42b8      	cmp	r0, r7
	list->head = node;
   14d98:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   14d9a:	d100      	bne.n	14d9e <k_delayed_work_cancel+0x4e>
	list->tail = node;
   14d9c:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14d9e:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14da0:	f003 0303 	and.w	r3, r3, #3
   14da4:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   14da6:	2300      	movs	r3, #0
   14da8:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14daa:	f3bf 8f5b 	dmb	ish
   14dae:	e855 2f00 	ldrex	r2, [r5]
   14db2:	f022 0201 	bic.w	r2, r2, #1
   14db6:	e845 2100 	strex	r1, r2, [r5]
   14dba:	2900      	cmp	r1, #0
   14dbc:	d1f7      	bne.n	14dae <k_delayed_work_cancel+0x5e>
   14dbe:	f3bf 8f5b 	dmb	ish
   14dc2:	f384 8811 	msr	BASEPRI, r4
	return 0;
   14dc6:	4618      	mov	r0, r3
   14dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14dca:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14dcc:	f006 0603 	and.w	r6, r6, #3
   14dd0:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   14dd2:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   14dd4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14dd6:	bf08      	it	eq
   14dd8:	6051      	streq	r1, [r2, #4]
   14dda:	e7e0      	b.n	14d9e <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14ddc:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   14dde:	4619      	mov	r1, r3
   14de0:	f026 0303 	bic.w	r3, r6, #3
   14de4:	e7ce      	b.n	14d84 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14de6:	69c1      	ldr	r1, [r0, #28]
   14de8:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   14dea:	f100 020c 	add.w	r2, r0, #12
   14dee:	d0da      	beq.n	14da6 <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14df0:	4b08      	ldr	r3, [pc, #32]	; (14e14 <k_delayed_work_cancel+0xc4>)
   14df2:	699b      	ldr	r3, [r3, #24]
   14df4:	429a      	cmp	r2, r3
   14df6:	bf1f      	itttt	ne
   14df8:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14dfa:	6913      	ldrne	r3, [r2, #16]
   14dfc:	185b      	addne	r3, r3, r1
   14dfe:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   14e00:	6903      	ldr	r3, [r0, #16]
   14e02:	68c2      	ldr	r2, [r0, #12]
   14e04:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14e06:	68c2      	ldr	r2, [r0, #12]
   14e08:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e0e:	61c3      	str	r3, [r0, #28]
   14e10:	e7c9      	b.n	14da6 <k_delayed_work_cancel+0x56>
   14e12:	bf00      	nop
   14e14:	20001948 	.word	0x20001948

00014e18 <k_delayed_work_submit_to_queue>:
{
   14e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e1a:	4607      	mov	r7, r0
   14e1c:	460c      	mov	r4, r1
   14e1e:	4615      	mov	r5, r2
	__asm__ volatile(
   14e20:	f04f 0320 	mov.w	r3, #32
   14e24:	f3ef 8611 	mrs	r6, BASEPRI
   14e28:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   14e2c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   14e2e:	b123      	cbz	r3, 14e3a <k_delayed_work_submit_to_queue+0x22>
   14e30:	4283      	cmp	r3, r0
   14e32:	d00b      	beq.n	14e4c <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   14e34:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   14e38:	e00d      	b.n	14e56 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   14e3a:	b138      	cbz	r0, 14e4c <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   14e3c:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   14e3e:	b96d      	cbnz	r5, 14e5c <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   14e40:	4621      	mov	r1, r4
   14e42:	4638      	mov	r0, r7
   14e44:	f7ff ff1e 	bl	14c84 <k_work_submit_to_queue>
	err = 0;
   14e48:	2000      	movs	r0, #0
   14e4a:	e004      	b.n	14e56 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   14e4c:	4620      	mov	r0, r4
   14e4e:	f7ff ff7f 	bl	14d50 <k_delayed_work_cancel>
		if (err < 0) {
   14e52:	2800      	cmp	r0, #0
   14e54:	daf2      	bge.n	14e3c <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14e56:	f386 8811 	msr	BASEPRI, r6
}
   14e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14e5c:	220a      	movs	r2, #10
   14e5e:	3509      	adds	r5, #9
   14e60:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   14e64:	4a16      	ldr	r2, [pc, #88]	; (14ec0 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   14e66:	2300      	movs	r3, #0
   14e68:	4611      	mov	r1, r2
   14e6a:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14e6c:	61a3      	str	r3, [r4, #24]
   14e6e:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   14e72:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e74:	428b      	cmp	r3, r1
   14e76:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14e7a:	61e5      	str	r5, [r4, #28]
   14e7c:	d106      	bne.n	14e8c <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   14e7e:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   14e80:	6993      	ldr	r3, [r2, #24]
   14e82:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   14e84:	6993      	ldr	r3, [r2, #24]
   14e86:	601f      	str	r7, [r3, #0]
	list->tail = node;
   14e88:	6197      	str	r7, [r2, #24]
   14e8a:	e7dd      	b.n	14e48 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14e8c:	2b00      	cmp	r3, #0
   14e8e:	d0f6      	beq.n	14e7e <k_delayed_work_submit_to_queue+0x66>
   14e90:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14e94:	69e0      	ldr	r0, [r4, #28]
   14e96:	691d      	ldr	r5, [r3, #16]
   14e98:	42a8      	cmp	r0, r5
   14e9a:	dc08      	bgt.n	14eae <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   14e9c:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14e9e:	1a28      	subs	r0, r5, r0
   14ea0:	6118      	str	r0, [r3, #16]
   14ea2:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   14ea4:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   14ea6:	685a      	ldr	r2, [r3, #4]
   14ea8:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   14eaa:	605f      	str	r7, [r3, #4]
   14eac:	e7cc      	b.n	14e48 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   14eae:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   14eb0:	4573      	cmp	r3, lr
   14eb2:	61e0      	str	r0, [r4, #28]
   14eb4:	d0e3      	beq.n	14e7e <k_delayed_work_submit_to_queue+0x66>
   14eb6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14eb8:	2b00      	cmp	r3, #0
   14eba:	d1eb      	bne.n	14e94 <k_delayed_work_submit_to_queue+0x7c>
   14ebc:	e7df      	b.n	14e7e <k_delayed_work_submit_to_queue+0x66>
   14ebe:	bf00      	nop
   14ec0:	20001948 	.word	0x20001948

00014ec4 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   14ec4:	6883      	ldr	r3, [r0, #8]
{
   14ec6:	b570      	push	{r4, r5, r6, lr}
   14ec8:	4605      	mov	r5, r0
   14eca:	460e      	mov	r6, r1
	if (!event->poller) {
   14ecc:	b333      	cbz	r3, 14f1c <signal_poll_event+0x58>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   14ece:	681c      	ldr	r4, [r3, #0]

	__ASSERT(event->poller->thread, "poller should have a thread\n");
   14ed0:	b954      	cbnz	r4, 14ee8 <signal_poll_event+0x24>
   14ed2:	f44f 73a4 	mov.w	r3, #328	; 0x148
   14ed6:	4a17      	ldr	r2, [pc, #92]	; (14f34 <signal_poll_event+0x70>)
   14ed8:	4917      	ldr	r1, [pc, #92]	; (14f38 <signal_poll_event+0x74>)
   14eda:	4818      	ldr	r0, [pc, #96]	; (14f3c <signal_poll_event+0x78>)
   14edc:	f7ec f856 	bl	f8c <printk>
   14ee0:	4817      	ldr	r0, [pc, #92]	; (14f40 <signal_poll_event+0x7c>)
   14ee2:	f7ec f853 	bl	f8c <printk>
   14ee6:	e7fe      	b.n	14ee6 <signal_poll_event+0x22>

	event->poller->is_polling = 0;
   14ee8:	2200      	movs	r2, #0
   14eea:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   14eec:	7a63      	ldrb	r3, [r4, #9]
   14eee:	079a      	lsls	r2, r3, #30
   14ef0:	d514      	bpl.n	14f1c <signal_poll_event+0x58>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   14ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ef4:	3302      	adds	r3, #2
   14ef6:	d01a      	beq.n	14f2e <signal_poll_event+0x6a>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   14ef8:	4620      	mov	r0, r4
   14efa:	f7ff fa59 	bl	143b0 <_unpend_thread>
	_set_thread_return_value(thread,
   14efe:	2e00      	cmp	r6, #0
   14f00:	bf0c      	ite	eq
   14f02:	f06f 0303 	mvneq.w	r3, #3
   14f06:	2300      	movne	r3, #0
   14f08:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   14f0a:	7a63      	ldrb	r3, [r4, #9]
   14f0c:	06db      	lsls	r3, r3, #27
   14f0e:	d105      	bne.n	14f1c <signal_poll_event+0x58>
   14f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14f12:	3301      	adds	r3, #1
   14f14:	d102      	bne.n	14f1c <signal_poll_event+0x58>
		_add_thread_to_ready_q(thread);
   14f16:	4620      	mov	r0, r4
   14f18:	f7ff f99a 	bl	14250 <_add_thread_to_ready_q>
	event->state |= state;
   14f1c:	7b6b      	ldrb	r3, [r5, #13]
   14f1e:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   14f22:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   14f26:	2000      	movs	r0, #0
	event->state |= state;
   14f28:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   14f2a:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   14f2c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   14f2e:	f06f 000a 	mvn.w	r0, #10
}
   14f32:	bd70      	pop	{r4, r5, r6, pc}
   14f34:	00019b43 	.word	0x00019b43
   14f38:	00019b70 	.word	0x00019b70
   14f3c:	00015620 	.word	0x00015620
   14f40:	00019b86 	.word	0x00019b86

00014f44 <add_event>:
{
   14f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14f46:	6803      	ldr	r3, [r0, #0]
   14f48:	4298      	cmp	r0, r3
   14f4a:	4604      	mov	r4, r0
   14f4c:	460e      	mov	r6, r1
   14f4e:	4617      	mov	r7, r2
   14f50:	d106      	bne.n	14f60 <add_event+0x1c>
	node->next = list;
   14f52:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   14f54:	6863      	ldr	r3, [r4, #4]
   14f56:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   14f58:	6863      	ldr	r3, [r4, #4]
   14f5a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14f5c:	6066      	str	r6, [r4, #4]
   14f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14f60:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   14f62:	2b00      	cmp	r3, #0
   14f64:	d0f5      	beq.n	14f52 <add_event+0xe>
   14f66:	689b      	ldr	r3, [r3, #8]
   14f68:	6811      	ldr	r1, [r2, #0]
   14f6a:	6818      	ldr	r0, [r3, #0]
   14f6c:	f7ff f8ba 	bl	140e4 <_is_t1_higher_prio_than_t2>
   14f70:	2800      	cmp	r0, #0
   14f72:	d1ee      	bne.n	14f52 <add_event+0xe>
	return list->head == list;
   14f74:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f76:	42ac      	cmp	r4, r5
   14f78:	d0eb      	beq.n	14f52 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14f7a:	2d00      	cmp	r5, #0
   14f7c:	d0e9      	beq.n	14f52 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   14f7e:	68ab      	ldr	r3, [r5, #8]
   14f80:	6838      	ldr	r0, [r7, #0]
   14f82:	6819      	ldr	r1, [r3, #0]
   14f84:	f7ff f8ae 	bl	140e4 <_is_t1_higher_prio_than_t2>
   14f88:	b130      	cbz	r0, 14f98 <add_event+0x54>
		node->prev = insert_point->prev;
   14f8a:	686b      	ldr	r3, [r5, #4]
   14f8c:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   14f8e:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   14f90:	686b      	ldr	r3, [r5, #4]
   14f92:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   14f94:	606e      	str	r6, [r5, #4]
   14f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   14f98:	6863      	ldr	r3, [r4, #4]
   14f9a:	429d      	cmp	r5, r3
   14f9c:	d0d9      	beq.n	14f52 <add_event+0xe>
   14f9e:	682d      	ldr	r5, [r5, #0]
   14fa0:	e7eb      	b.n	14f7a <add_event+0x36>
	...

00014fa4 <clear_event_registrations>:
{
   14fa4:	b538      	push	{r3, r4, r5, lr}
   14fa6:	2314      	movs	r3, #20
   14fa8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   14fac:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   14fae:	2900      	cmp	r1, #0
   14fb0:	da00      	bge.n	14fb4 <clear_event_registrations+0x10>
}
   14fb2:	bd38      	pop	{r3, r4, r5, pc}
	switch (event->type) {
   14fb4:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   14fb6:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   14fb8:	f003 030f 	and.w	r3, r3, #15
   14fbc:	2b04      	cmp	r3, #4
   14fbe:	d838      	bhi.n	15032 <clear_event_registrations+0x8e>
   14fc0:	e8df f003 	tbb	[pc, r3]
   14fc4:	37031b2c 	.word	0x37031b2c
   14fc8:	0f          	.byte	0x0f
   14fc9:	00          	.byte	0x00
		__ASSERT(event->sem, "invalid semaphore\n");
   14fca:	6903      	ldr	r3, [r0, #16]
   14fcc:	bb0b      	cbnz	r3, 15012 <clear_event_registrations+0x6e>
   14fce:	2389      	movs	r3, #137	; 0x89
   14fd0:	4a1d      	ldr	r2, [pc, #116]	; (15048 <clear_event_registrations+0xa4>)
   14fd2:	491e      	ldr	r1, [pc, #120]	; (1504c <clear_event_registrations+0xa8>)
   14fd4:	481e      	ldr	r0, [pc, #120]	; (15050 <clear_event_registrations+0xac>)
   14fd6:	f7eb ffd9 	bl	f8c <printk>
   14fda:	481e      	ldr	r0, [pc, #120]	; (15054 <clear_event_registrations+0xb0>)
   14fdc:	f7eb ffd6 	bl	f8c <printk>
   14fe0:	e7fe      	b.n	14fe0 <clear_event_registrations+0x3c>
		__ASSERT(event->queue, "invalid queue\n");
   14fe2:	6903      	ldr	r3, [r0, #16]
   14fe4:	b9ab      	cbnz	r3, 15012 <clear_event_registrations+0x6e>
   14fe6:	238d      	movs	r3, #141	; 0x8d
   14fe8:	4a17      	ldr	r2, [pc, #92]	; (15048 <clear_event_registrations+0xa4>)
   14fea:	491b      	ldr	r1, [pc, #108]	; (15058 <clear_event_registrations+0xb4>)
   14fec:	4818      	ldr	r0, [pc, #96]	; (15050 <clear_event_registrations+0xac>)
   14fee:	f7eb ffcd 	bl	f8c <printk>
   14ff2:	481a      	ldr	r0, [pc, #104]	; (1505c <clear_event_registrations+0xb8>)
   14ff4:	f7eb ffca 	bl	f8c <printk>
   14ff8:	e7fe      	b.n	14ff8 <clear_event_registrations+0x54>
		__ASSERT(event->signal, "invalid poll signal\n");
   14ffa:	6903      	ldr	r3, [r0, #16]
   14ffc:	b94b      	cbnz	r3, 15012 <clear_event_registrations+0x6e>
   14ffe:	2391      	movs	r3, #145	; 0x91
   15000:	4a11      	ldr	r2, [pc, #68]	; (15048 <clear_event_registrations+0xa4>)
   15002:	4917      	ldr	r1, [pc, #92]	; (15060 <clear_event_registrations+0xbc>)
   15004:	4812      	ldr	r0, [pc, #72]	; (15050 <clear_event_registrations+0xac>)
   15006:	f7eb ffc1 	bl	f8c <printk>
   1500a:	4816      	ldr	r0, [pc, #88]	; (15064 <clear_event_registrations+0xc0>)
   1500c:	f7eb ffbe 	bl	f8c <printk>
   15010:	e7fe      	b.n	15010 <clear_event_registrations+0x6c>
	node->prev->next = node->next;
   15012:	6843      	ldr	r3, [r0, #4]
   15014:	6805      	ldr	r5, [r0, #0]
   15016:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   15018:	6805      	ldr	r5, [r0, #0]
   1501a:	606b      	str	r3, [r5, #4]
   1501c:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   15020:	f04f 0320 	mov.w	r3, #32
   15024:	f3ef 8211 	mrs	r2, BASEPRI
   15028:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   1502c:	3901      	subs	r1, #1
   1502e:	3814      	subs	r0, #20
   15030:	e7bd      	b.n	14fae <clear_event_registrations+0xa>
		__ASSERT(0, "invalid event type\n");
   15032:	2398      	movs	r3, #152	; 0x98
   15034:	4a04      	ldr	r2, [pc, #16]	; (15048 <clear_event_registrations+0xa4>)
   15036:	490c      	ldr	r1, [pc, #48]	; (15068 <clear_event_registrations+0xc4>)
   15038:	4805      	ldr	r0, [pc, #20]	; (15050 <clear_event_registrations+0xac>)
   1503a:	f7eb ffa7 	bl	f8c <printk>
   1503e:	480b      	ldr	r0, [pc, #44]	; (1506c <clear_event_registrations+0xc8>)
   15040:	f7eb ffa4 	bl	f8c <printk>
   15044:	e7fe      	b.n	15044 <clear_event_registrations+0xa0>
   15046:	bf00      	nop
   15048:	00019b43 	.word	0x00019b43
   1504c:	00019a46 	.word	0x00019a46
   15050:	00015620 	.word	0x00015620
   15054:	00019a51 	.word	0x00019a51
   15058:	00019a64 	.word	0x00019a64
   1505c:	00019a71 	.word	0x00019a71
   15060:	00019a80 	.word	0x00019a80
   15064:	00019a8e 	.word	0x00019a8e
   15068:	00019905 	.word	0x00019905
   1506c:	00019aa3 	.word	0x00019aa3

00015070 <k_poll_event_init>:
{
   15070:	b510      	push	{r4, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   15072:	b14a      	cbz	r2, 15088 <k_poll_event_init+0x18>
   15074:	231f      	movs	r3, #31
   15076:	4a19      	ldr	r2, [pc, #100]	; (150dc <k_poll_event_init+0x6c>)
   15078:	4919      	ldr	r1, [pc, #100]	; (150e0 <k_poll_event_init+0x70>)
   1507a:	481a      	ldr	r0, [pc, #104]	; (150e4 <k_poll_event_init+0x74>)
   1507c:	f7eb ff86 	bl	f8c <printk>
   15080:	4819      	ldr	r0, [pc, #100]	; (150e8 <k_poll_event_init+0x78>)
   15082:	f7eb ff83 	bl	f8c <printk>
   15086:	e7fe      	b.n	15086 <k_poll_event_init+0x16>
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
   15088:	290f      	cmp	r1, #15
   1508a:	d909      	bls.n	150a0 <k_poll_event_init+0x30>
   1508c:	2320      	movs	r3, #32
   1508e:	4a13      	ldr	r2, [pc, #76]	; (150dc <k_poll_event_init+0x6c>)
   15090:	4916      	ldr	r1, [pc, #88]	; (150ec <k_poll_event_init+0x7c>)
   15092:	4814      	ldr	r0, [pc, #80]	; (150e4 <k_poll_event_init+0x74>)
   15094:	f7eb ff7a 	bl	f8c <printk>
   15098:	4815      	ldr	r0, [pc, #84]	; (150f0 <k_poll_event_init+0x80>)
   1509a:	f7eb ff77 	bl	f8c <printk>
   1509e:	e7fe      	b.n	1509e <k_poll_event_init+0x2e>
	__ASSERT(obj, "must provide an object\n");
   150a0:	b94b      	cbnz	r3, 150b6 <k_poll_event_init+0x46>
   150a2:	2321      	movs	r3, #33	; 0x21
   150a4:	4a0d      	ldr	r2, [pc, #52]	; (150dc <k_poll_event_init+0x6c>)
   150a6:	4913      	ldr	r1, [pc, #76]	; (150f4 <k_poll_event_init+0x84>)
   150a8:	480e      	ldr	r0, [pc, #56]	; (150e4 <k_poll_event_init+0x74>)
   150aa:	f7eb ff6f 	bl	f8c <printk>
   150ae:	4812      	ldr	r0, [pc, #72]	; (150f8 <k_poll_event_init+0x88>)
   150b0:	f7eb ff6c 	bl	f8c <printk>
   150b4:	e7fe      	b.n	150b4 <k_poll_event_init+0x44>
	event->type = type;
   150b6:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   150b8:	6103      	str	r3, [r0, #16]
	event->type = type;
   150ba:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   150be:	4621      	mov	r1, r4
   150c0:	f362 1107 	bfi	r1, r2, #4, #4
   150c4:	7341      	strb	r1, [r0, #13]
	event->mode = mode;
   150c6:	7b81      	ldrb	r1, [r0, #14]
	event->poller = NULL;
   150c8:	6082      	str	r2, [r0, #8]
	event->mode = mode;
   150ca:	f362 0100 	bfi	r1, r2, #0, #1
   150ce:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   150d0:	89c1      	ldrh	r1, [r0, #14]
   150d2:	f362 014f 	bfi	r1, r2, #1, #15
   150d6:	81c1      	strh	r1, [r0, #14]
	event->obj = obj;
   150d8:	bd10      	pop	{r4, pc}
   150da:	bf00      	nop
   150dc:	00019b43 	.word	0x00019b43
   150e0:	00019ab7 	.word	0x00019ab7
   150e4:	00015620 	.word	0x00015620
   150e8:	00019ad7 	.word	0x00019ad7
   150ec:	00019afb 	.word	0x00019afb
   150f0:	00019b19 	.word	0x00019b19
   150f4:	00019b27 	.word	0x00019b27
   150f8:	00019b2b 	.word	0x00019b2b

000150fc <_impl_k_poll>:
{
   150fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15100:	4607      	mov	r7, r0
   15102:	b085      	sub	sp, #20
   15104:	4689      	mov	r9, r1
   15106:	4690      	mov	r8, r2
   15108:	f3ef 8305 	mrs	r3, IPSR
   1510c:	2b0d      	cmp	r3, #13
   1510e:	f200 80d3 	bhi.w	152b8 <_impl_k_poll+0x1bc>
   15112:	b123      	cbz	r3, 1511e <_impl_k_poll+0x22>
   15114:	4b73      	ldr	r3, [pc, #460]	; (152e4 <_impl_k_poll+0x1e8>)
   15116:	685b      	ldr	r3, [r3, #4]
   15118:	051b      	lsls	r3, r3, #20
   1511a:	f140 80cd 	bpl.w	152b8 <_impl_k_poll+0x1bc>
	__ASSERT(events, "NULL events\n");
   1511e:	b94f      	cbnz	r7, 15134 <_impl_k_poll+0x38>
   15120:	23b2      	movs	r3, #178	; 0xb2
   15122:	4a71      	ldr	r2, [pc, #452]	; (152e8 <_impl_k_poll+0x1ec>)
   15124:	4971      	ldr	r1, [pc, #452]	; (152ec <_impl_k_poll+0x1f0>)
   15126:	4872      	ldr	r0, [pc, #456]	; (152f0 <_impl_k_poll+0x1f4>)
   15128:	f7eb ff30 	bl	f8c <printk>
   1512c:	4871      	ldr	r0, [pc, #452]	; (152f4 <_impl_k_poll+0x1f8>)
   1512e:	f7eb ff2d 	bl	f8c <printk>
   15132:	e7fe      	b.n	15132 <_impl_k_poll+0x36>
	__ASSERT(num_events > 0, "zero events\n");
   15134:	f1b9 0f00 	cmp.w	r9, #0
   15138:	dc09      	bgt.n	1514e <_impl_k_poll+0x52>
   1513a:	23b3      	movs	r3, #179	; 0xb3
   1513c:	4a6a      	ldr	r2, [pc, #424]	; (152e8 <_impl_k_poll+0x1ec>)
   1513e:	496e      	ldr	r1, [pc, #440]	; (152f8 <_impl_k_poll+0x1fc>)
   15140:	486b      	ldr	r0, [pc, #428]	; (152f0 <_impl_k_poll+0x1f4>)
   15142:	f7eb ff23 	bl	f8c <printk>
   15146:	486d      	ldr	r0, [pc, #436]	; (152fc <_impl_k_poll+0x200>)
   15148:	f7eb ff20 	bl	f8c <printk>
   1514c:	e7fe      	b.n	1514c <_impl_k_poll+0x50>
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1514e:	4b6c      	ldr	r3, [pc, #432]	; (15300 <_impl_k_poll+0x204>)
   15150:	689b      	ldr	r3, [r3, #8]
   15152:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   15154:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   15156:	2301      	movs	r3, #1
   15158:	9301      	str	r3, [sp, #4]
   1515a:	463c      	mov	r4, r7
	int last_registered = -1, rc;
   1515c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   15160:	46b2      	mov	sl, r6
   15162:	f04f 0320 	mov.w	r3, #32
   15166:	f3ef 8b11 	mrs	fp, BASEPRI
   1516a:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1516e:	7b63      	ldrb	r3, [r4, #13]
   15170:	f003 020f 	and.w	r2, r3, #15
   15174:	2a04      	cmp	r2, #4
   15176:	d822      	bhi.n	151be <_impl_k_poll+0xc2>
   15178:	e8df f002 	tbb	[pc, r2]
   1517c:	21031b08 	.word	0x21031b08
   15180:	15          	.byte	0x15
   15181:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   15182:	6921      	ldr	r1, [r4, #16]
   15184:	6889      	ldr	r1, [r1, #8]
   15186:	2900      	cmp	r1, #0
   15188:	f040 80a0 	bne.w	152cc <_impl_k_poll+0x1d0>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1518c:	f1b8 0f00 	cmp.w	r8, #0
   15190:	d036      	beq.n	15200 <_impl_k_poll+0x104>
   15192:	9b01      	ldr	r3, [sp, #4]
   15194:	2b00      	cmp	r3, #0
   15196:	d033      	beq.n	15200 <_impl_k_poll+0x104>
	switch (event->type) {
   15198:	2a04      	cmp	r2, #4
   1519a:	d867      	bhi.n	1526c <_impl_k_poll+0x170>
   1519c:	e8df f002 	tbb	[pc, r2]
   151a0:	661c572d 	.word	0x661c572d
   151a4:	47          	.byte	0x47
   151a5:	00          	.byte	0x00
		if (!k_queue_is_empty(event->queue)) {
   151a6:	6921      	ldr	r1, [r4, #16]
   151a8:	6809      	ldr	r1, [r1, #0]
   151aa:	2900      	cmp	r1, #0
   151ac:	d0ee      	beq.n	1518c <_impl_k_poll+0x90>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   151ae:	2204      	movs	r2, #4
   151b0:	e08d      	b.n	152ce <_impl_k_poll+0x1d2>
		if (event->signal->signaled) {
   151b2:	6921      	ldr	r1, [r4, #16]
   151b4:	6889      	ldr	r1, [r1, #8]
   151b6:	2900      	cmp	r1, #0
   151b8:	d0e8      	beq.n	1518c <_impl_k_poll+0x90>
			*state = K_POLL_STATE_SIGNALED;
   151ba:	2201      	movs	r2, #1
   151bc:	e087      	b.n	152ce <_impl_k_poll+0x1d2>
		__ASSERT(0, "invalid event type (0x%x)\n", event->type);
   151be:	4951      	ldr	r1, [pc, #324]	; (15304 <_impl_k_poll+0x208>)
   151c0:	4a49      	ldr	r2, [pc, #292]	; (152e8 <_impl_k_poll+0x1ec>)
   151c2:	484b      	ldr	r0, [pc, #300]	; (152f0 <_impl_k_poll+0x1f4>)
   151c4:	2345      	movs	r3, #69	; 0x45
   151c6:	f7eb fee1 	bl	f8c <printk>
   151ca:	7b61      	ldrb	r1, [r4, #13]
   151cc:	484e      	ldr	r0, [pc, #312]	; (15308 <_impl_k_poll+0x20c>)
   151ce:	f001 010f 	and.w	r1, r1, #15
   151d2:	f7eb fedb 	bl	f8c <printk>
   151d6:	e7fe      	b.n	151d6 <_impl_k_poll+0xda>
		__ASSERT(event->sem, "invalid semaphore\n");
   151d8:	6920      	ldr	r0, [r4, #16]
   151da:	b948      	cbnz	r0, 151f0 <_impl_k_poll+0xf4>
   151dc:	236a      	movs	r3, #106	; 0x6a
   151de:	4a42      	ldr	r2, [pc, #264]	; (152e8 <_impl_k_poll+0x1ec>)
   151e0:	494a      	ldr	r1, [pc, #296]	; (1530c <_impl_k_poll+0x210>)
   151e2:	4843      	ldr	r0, [pc, #268]	; (152f0 <_impl_k_poll+0x1f4>)
   151e4:	f7eb fed2 	bl	f8c <printk>
   151e8:	4849      	ldr	r0, [pc, #292]	; (15310 <_impl_k_poll+0x214>)
   151ea:	f7eb fecf 	bl	f8c <printk>
   151ee:	e7fe      	b.n	151ee <_impl_k_poll+0xf2>
		add_event(&event->sem->poll_events, event, poller);
   151f0:	466a      	mov	r2, sp
   151f2:	4621      	mov	r1, r4
   151f4:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   151f6:	f7ff fea5 	bl	14f44 <add_event>
	event->poller = poller;
   151fa:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   151fe:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15200:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   15204:	3601      	adds	r6, #1
   15206:	45b1      	cmp	r9, r6
   15208:	f104 0414 	add.w	r4, r4, #20
   1520c:	d1a9      	bne.n	15162 <_impl_k_poll+0x66>
	__asm__ volatile(
   1520e:	f04f 0320 	mov.w	r3, #32
   15212:	f3ef 8611 	mrs	r6, BASEPRI
   15216:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   1521a:	9c01      	ldr	r4, [sp, #4]
   1521c:	bb84      	cbnz	r4, 15280 <_impl_k_poll+0x184>
	clear_event_registrations(events, last_registered, key);
   1521e:	4632      	mov	r2, r6
   15220:	4629      	mov	r1, r5
   15222:	4638      	mov	r0, r7
   15224:	f7ff febe 	bl	14fa4 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15228:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   1522c:	e031      	b.n	15292 <_impl_k_poll+0x196>
		__ASSERT(event->queue, "invalid queue\n");
   1522e:	6920      	ldr	r0, [r4, #16]
   15230:	b948      	cbnz	r0, 15246 <_impl_k_poll+0x14a>
   15232:	236e      	movs	r3, #110	; 0x6e
   15234:	4a2c      	ldr	r2, [pc, #176]	; (152e8 <_impl_k_poll+0x1ec>)
   15236:	4937      	ldr	r1, [pc, #220]	; (15314 <_impl_k_poll+0x218>)
   15238:	482d      	ldr	r0, [pc, #180]	; (152f0 <_impl_k_poll+0x1f4>)
   1523a:	f7eb fea7 	bl	f8c <printk>
   1523e:	4836      	ldr	r0, [pc, #216]	; (15318 <_impl_k_poll+0x21c>)
   15240:	f7eb fea4 	bl	f8c <printk>
   15244:	e7fe      	b.n	15244 <_impl_k_poll+0x148>
		add_event(&event->queue->poll_events, event, poller);
   15246:	466a      	mov	r2, sp
   15248:	4621      	mov	r1, r4
   1524a:	3008      	adds	r0, #8
   1524c:	e7d3      	b.n	151f6 <_impl_k_poll+0xfa>
		__ASSERT(event->signal, "invalid poll signal\n");
   1524e:	6920      	ldr	r0, [r4, #16]
   15250:	b948      	cbnz	r0, 15266 <_impl_k_poll+0x16a>
   15252:	2372      	movs	r3, #114	; 0x72
   15254:	4a24      	ldr	r2, [pc, #144]	; (152e8 <_impl_k_poll+0x1ec>)
   15256:	4931      	ldr	r1, [pc, #196]	; (1531c <_impl_k_poll+0x220>)
   15258:	4825      	ldr	r0, [pc, #148]	; (152f0 <_impl_k_poll+0x1f4>)
   1525a:	f7eb fe97 	bl	f8c <printk>
   1525e:	4830      	ldr	r0, [pc, #192]	; (15320 <_impl_k_poll+0x224>)
   15260:	f7eb fe94 	bl	f8c <printk>
   15264:	e7fe      	b.n	15264 <_impl_k_poll+0x168>
		add_event(&event->signal->poll_events, event, poller);
   15266:	466a      	mov	r2, sp
   15268:	4621      	mov	r1, r4
   1526a:	e7c4      	b.n	151f6 <_impl_k_poll+0xfa>
		__ASSERT(0, "invalid event type\n");
   1526c:	2379      	movs	r3, #121	; 0x79
   1526e:	4a1e      	ldr	r2, [pc, #120]	; (152e8 <_impl_k_poll+0x1ec>)
   15270:	4924      	ldr	r1, [pc, #144]	; (15304 <_impl_k_poll+0x208>)
   15272:	481f      	ldr	r0, [pc, #124]	; (152f0 <_impl_k_poll+0x1f4>)
   15274:	f7eb fe8a 	bl	f8c <printk>
   15278:	482a      	ldr	r0, [pc, #168]	; (15324 <_impl_k_poll+0x228>)
   1527a:	f7eb fe87 	bl	f8c <printk>
   1527e:	e7fe      	b.n	1527e <_impl_k_poll+0x182>
	poller.is_polling = 0;
   15280:	2300      	movs	r3, #0
   15282:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   15284:	f1b8 0f00 	cmp.w	r8, #0
   15288:	d107      	bne.n	1529a <_impl_k_poll+0x19e>
   1528a:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   1528e:	f06f 040a 	mvn.w	r4, #10
}
   15292:	4620      	mov	r0, r4
   15294:	b005      	add	sp, #20
   15296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1529a:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1529c:	4642      	mov	r2, r8
   1529e:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   152a0:	9102      	str	r1, [sp, #8]
   152a2:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   152a4:	f7ff f8fc 	bl	144a0 <_pend_current_thread>
   152a8:	4604      	mov	r4, r0
	__asm__ volatile(
   152aa:	f04f 0320 	mov.w	r3, #32
   152ae:	f3ef 8611 	mrs	r6, BASEPRI
   152b2:	f383 8811 	msr	BASEPRI, r3
   152b6:	e7b2      	b.n	1521e <_impl_k_poll+0x122>
	__ASSERT(!_is_in_isr(), "");
   152b8:	23b1      	movs	r3, #177	; 0xb1
   152ba:	4a0b      	ldr	r2, [pc, #44]	; (152e8 <_impl_k_poll+0x1ec>)
   152bc:	491a      	ldr	r1, [pc, #104]	; (15328 <_impl_k_poll+0x22c>)
   152be:	480c      	ldr	r0, [pc, #48]	; (152f0 <_impl_k_poll+0x1f4>)
   152c0:	f7eb fe64 	bl	f8c <printk>
   152c4:	4819      	ldr	r0, [pc, #100]	; (1532c <_impl_k_poll+0x230>)
   152c6:	f7eb fe61 	bl	f8c <printk>
   152ca:	e7fe      	b.n	152ca <_impl_k_poll+0x1ce>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   152cc:	2202      	movs	r2, #2
	event->state |= state;
   152ce:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   152d2:	f362 1307 	bfi	r3, r2, #4, #4
   152d6:	7363      	strb	r3, [r4, #13]
	event->poller = NULL;
   152d8:	f8c4 a008 	str.w	sl, [r4, #8]
			poller.is_polling = 0;
   152dc:	f8cd a004 	str.w	sl, [sp, #4]
   152e0:	e78e      	b.n	15200 <_impl_k_poll+0x104>
   152e2:	bf00      	nop
   152e4:	e000ed00 	.word	0xe000ed00
   152e8:	00019b43 	.word	0x00019b43
   152ec:	000199fb 	.word	0x000199fb
   152f0:	00015620 	.word	0x00015620
   152f4:	00019a02 	.word	0x00019a02
   152f8:	00019a0f 	.word	0x00019a0f
   152fc:	00019a1e 	.word	0x00019a1e
   15300:	20001948 	.word	0x20001948
   15304:	00019905 	.word	0x00019905
   15308:	00019a2b 	.word	0x00019a2b
   1530c:	00019a46 	.word	0x00019a46
   15310:	00019a51 	.word	0x00019a51
   15314:	00019a64 	.word	0x00019a64
   15318:	00019a71 	.word	0x00019a71
   1531c:	00019a80 	.word	0x00019a80
   15320:	00019a8e 	.word	0x00019a8e
   15324:	00019aa3 	.word	0x00019aa3
   15328:	000198a5 	.word	0x000198a5
   1532c:	0001563e 	.word	0x0001563e

00015330 <_handle_obj_poll_events>:
	return list->head == list;
   15330:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   15332:	4298      	cmp	r0, r3
   15334:	d007      	beq.n	15346 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   15336:	e893 0005 	ldmia.w	r3, {r0, r2}
   1533a:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1533c:	6818      	ldr	r0, [r3, #0]
   1533e:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   15340:	4618      	mov	r0, r3
   15342:	f7ff bdbf 	b.w	14ec4 <signal_poll_event>
   15346:	4770      	bx	lr

00015348 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   15348:	b538      	push	{r3, r4, r5, lr}
   1534a:	f04f 0320 	mov.w	r3, #32
   1534e:	f3ef 8511 	mrs	r5, BASEPRI
   15352:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   15356:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   15358:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1535a:	4298      	cmp	r0, r3
	signal->signaled = 1;
   1535c:	f04f 0101 	mov.w	r1, #1
   15360:	6081      	str	r1, [r0, #8]
   15362:	d00d      	beq.n	15380 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   15364:	e893 0005 	ldmia.w	r3, {r0, r2}
   15368:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1536a:	6818      	ldr	r0, [r3, #0]
   1536c:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1536e:	4618      	mov	r0, r3
   15370:	f7ff fda8 	bl	14ec4 <signal_poll_event>
   15374:	4604      	mov	r4, r0

	_reschedule(key);
   15376:	4628      	mov	r0, r5
   15378:	f7fe feca 	bl	14110 <_reschedule>
	return rc;
}
   1537c:	4620      	mov	r0, r4
   1537e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   15380:	f385 8811 	msr	BASEPRI, r5
		return 0;
   15384:	2400      	movs	r4, #0
   15386:	e7f9      	b.n	1537c <_impl_k_poll_signal+0x34>

00015388 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   15388:	4770      	bx	lr
