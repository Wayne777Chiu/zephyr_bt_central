
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce0 	.word	0x20002ce0

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 00010cc3 00001aa1 00001aa1     ................
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 00012cd5 00000000 000018ed     .....,..........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 00010c89     ................
     13c:	00000000 000018ed 20003eb0 00012fd9     .........>. ./..
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 00010cbd 00000000 000018ed     ................
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	0001455d 	.word	0x0001455d
     5b0:	00014586 	.word	0x00014586
     5b4:	00014564 	.word	0x00014564
     5b8:	0001456b 	.word	0x0001456b
     5bc:	00014575 	.word	0x00014575
     5c0:	0001457f 	.word	0x0001457f

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f003 ffea 	bl	45a4 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 f883 	bl	4704 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	000145a9 	.word	0x000145a9
     604:	20000000 	.word	0x20000000
     608:	000145c7 	.word	0x000145c7

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 ffc3 	bl	45a4 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 fe00 	bl	4234 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 f9fa 	bl	3a40 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	000145f2 	.word	0x000145f2
     664:	00014500 	.word	0x00014500
     668:	00000671 	.word	0x00000671
     66c:	00014610 	.word	0x00014610

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fa25 	bl	3ae4 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 ff7d 	bl	45a8 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	000145d6 	.word	0x000145d6
     6bc:	00014506 	.word	0x00014506

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 f94c 	bl	3960 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 faa2 	bl	3c28 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 f9a4 	bl	3a40 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00014633 	.word	0x00014633
     70c:	00014653 	.word	0x00014653
     710:	20003a20 	.word	0x20003a20
     714:	0001450e 	.word	0x0001450e
     718:	00000671 	.word	0x00000671
     71c:	00014610 	.word	0x00014610
     720:	0001466a 	.word	0x0001466a

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a54 	.word	0x20003a54
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 f8de 	bl	13a64 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a58 	.word	0x20003a58

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a58 	.word	0x20003a58

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f012 f85d 	bl	130b4 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	00014698 	.word	0x00014698

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f012 f822 	bl	130b4 <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	000146a2 	.word	0x000146a2
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f012 fbed 	bl	13b54 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003e70 	.word	0x20003e70
    1394:	20000010 	.word	0x20000010
    1398:	20003e6c 	.word	0x20003e6c

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003e70 	.word	0x20003e70
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f011 fe4c 	bl	130b4 <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	000146c4 	.word	0x000146c4
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003e70 	.word	0x20003e70
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	20001980 	.word	0x20001980
    14c4:	20003e70 	.word	0x20003e70

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f012 fa78 	bl	139c8 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	20001948 	.word	0x20001948
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	20001948 	.word	0x20001948
    1530:	00017e88 	.word	0x00017e88
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	20001948 	.word	0x20001948
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f012 fa5e 	bl	13a64 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	0001481d 	.word	0x0001481d

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	00014867 	.word	0x00014867
    1630:	e000ed00 	.word	0xe000ed00
    1634:	0001487e 	.word	0x0001487e
    1638:	00014890 	.word	0x00014890
    163c:	000148a4 	.word	0x000148a4
    1640:	000148bd 	.word	0x000148bd
    1644:	000148ce 	.word	0x000148ce
    1648:	000148ee 	.word	0x000148ee

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	0001491e 	.word	0x0001491e
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	00014937 	.word	0x00014937
    16c8:	0001494b 	.word	0x0001494b
    16cc:	00014966 	.word	0x00014966
    16d0:	00014985 	.word	0x00014985
    16d4:	000149ab 	.word	0x000149ab
    16d8:	000149c6 	.word	0x000149c6

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	000146e4 	.word	0x000146e4
    175c:	e000ed00 	.word	0xe000ed00
    1760:	0001487e 	.word	0x0001487e
    1764:	00014890 	.word	0x00014890
    1768:	000146fb 	.word	0x000146fb
    176c:	000148bd 	.word	0x000148bd
    1770:	00014715 	.word	0x00014715
    1774:	00014731 	.word	0x00014731
    1778:	000148ee 	.word	0x000148ee

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	00014778 	.word	0x00014778
    1824:	00014790 	.word	0x00014790
    1828:	000147b2 	.word	0x000147b2
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	000147d2 	.word	0x000147d2
    183c:	0001474a 	.word	0x0001474a
    1840:	0001475f 	.word	0x0001475f
    1844:	00014809 	.word	0x00014809

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f011 fbff 	bl	13100 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	20001948 	.word	0x20001948

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f012 fb36 	bl	13f8c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f012 f856 	bl	13a64 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	000149f2 	.word	0x000149f2
    19e4:	00014a70 	.word	0x00014a70
    19e8:	00014a18 	.word	0x00014a18
    19ec:	00014a32 	.word	0x00014a32
    19f0:	00014a4d 	.word	0x00014a4d

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f012 f9f1 	bl	13de8 <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f012 f9ee 	bl	13de8 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f012 f9f1 	bl	13e08 <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	00014ab0 	.word	0x00014ab0
    1a44:	00014aac 	.word	0x00014aac
    1a48:	00014ac1 	.word	0x00014ac1
    1a4c:	20001948 	.word	0x20001948
    1a50:	00014ae1 	.word	0x00014ae1

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f012 fa28 	bl	13eb8 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f011 ffa5 	bl	139c8 <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f011 be53 	b.w	1373c <_reschedule>
    1a96:	bf00      	nop
    1a98:	20001948 	.word	0x20001948
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f011 fb26 	blne	13100 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	20001948 	.word	0x20001948
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002e20 	.word	0x20002e20

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f011 fb20 	bl	13160 <_bss_zero>
	_data_copy();
    1b20:	f011 fb28 	bl	13174 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f011 fb4a 	bl	131bc <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003a34 	.word	0x20003a34
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>
	...

00001c9c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	f04f 0320 	mov.w	r3, #32
    1ca2:	f3ef 8511 	mrs	r5, BASEPRI
    1ca6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <bt_hex+0x60>)
    1cac:	4e14      	ldr	r6, [pc, #80]	; (1d00 <bt_hex+0x64>)
    1cae:	7823      	ldrb	r3, [r4, #0]
    1cb0:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cb4:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cb6:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cba:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cbc:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cbe:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cc2:	2940      	cmp	r1, #64	; 0x40
    1cc4:	bf28      	it	cs
    1cc6:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cc8:	4d0e      	ldr	r5, [pc, #56]	; (1d04 <bt_hex+0x68>)
    1cca:	3801      	subs	r0, #1
    1ccc:	4613      	mov	r3, r2
    1cce:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cd2:	42b3      	cmp	r3, r6
    1cd4:	d104      	bne.n	1ce0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cdc:	4610      	mov	r0, r2
    1cde:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	7844      	ldrb	r4, [r0, #1]
    1ce2:	0924      	lsrs	r4, r4, #4
    1ce4:	3302      	adds	r3, #2
    1ce6:	5d2c      	ldrb	r4, [r5, r4]
    1ce8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1cec:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1cf0:	f004 040f 	and.w	r4, r4, #15
    1cf4:	5d2c      	ldrb	r4, [r5, r4]
    1cf6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1cfa:	e7ea      	b.n	1cd2 <bt_hex+0x36>
    1cfc:	20000074 	.word	0x20000074
    1d00:	20000075 	.word	0x20000075
    1d04:	00014b24 	.word	0x00014b24

00001d08 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d08:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <bt_addr_str+0x40>)
    1d0c:	4c0f      	ldr	r4, [pc, #60]	; (1d4c <bt_addr_str+0x44>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d14:	3301      	adds	r3, #1
{
    1d16:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	7943      	ldrb	r3, [r0, #5]
    1d22:	9204      	str	r2, [sp, #16]
    1d24:	7842      	ldrb	r2, [r0, #1]
    1d26:	9203      	str	r2, [sp, #12]
    1d28:	7882      	ldrb	r2, [r0, #2]
    1d2a:	9202      	str	r2, [sp, #8]
    1d2c:	78c2      	ldrb	r2, [r0, #3]
    1d2e:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d34:	7902      	ldrb	r2, [r0, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	2112      	movs	r1, #18
    1d3a:	4a05      	ldr	r2, [pc, #20]	; (1d50 <bt_addr_str+0x48>)
    1d3c:	4620      	mov	r0, r4
    1d3e:	f7ff f933 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d42:	4620      	mov	r0, r4
    1d44:	b006      	add	sp, #24
    1d46:	bd10      	pop	{r4, pc}
    1d48:	20000072 	.word	0x20000072
    1d4c:	20000018 	.word	0x20000018
    1d50:	00014b06 	.word	0x00014b06

00001d54 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a1d      	ldr	r2, [pc, #116]	; (1dcc <bt_addr_le_str+0x78>)
    1d58:	491d      	ldr	r1, [pc, #116]	; (1dd0 <bt_addr_le_str+0x7c>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d60:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d62:	f003 0301 	and.w	r3, r3, #1
    1d66:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d68:	7803      	ldrb	r3, [r0, #0]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d6c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d70:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d72:	440e      	add	r6, r1
    1d74:	ad07      	add	r5, sp, #28
    1d76:	2b03      	cmp	r3, #3
    1d78:	d821      	bhi.n	1dbe <bt_addr_le_str+0x6a>
    1d7a:	e8df f003 	tbb	[pc, r3]
    1d7e:	1a02      	.short	0x1a02
    1d80:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff ff05 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d8a:	7862      	ldrb	r2, [r4, #1]
    1d8c:	9204      	str	r2, [sp, #16]
    1d8e:	78a2      	ldrb	r2, [r4, #2]
    1d90:	9203      	str	r2, [sp, #12]
    1d92:	78e2      	ldrb	r2, [r4, #3]
    1d94:	9202      	str	r2, [sp, #8]
    1d96:	7922      	ldrb	r2, [r4, #4]
    1d98:	9201      	str	r2, [sp, #4]
    1d9a:	7962      	ldrb	r2, [r4, #5]
    1d9c:	9200      	str	r2, [sp, #0]
    1d9e:	79a3      	ldrb	r3, [r4, #6]
    1da0:	9505      	str	r5, [sp, #20]
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <bt_addr_le_str+0x84>)
    1da4:	211b      	movs	r1, #27
    1da6:	4630      	mov	r0, r6
    1da8:	f7ff f8fe 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dac:	4630      	mov	r0, r6
    1dae:	b00a      	add	sp, #40	; 0x28
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1db2:	490a      	ldr	r1, [pc, #40]	; (1ddc <bt_addr_le_str+0x88>)
    1db4:	e7e6      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1db6:	490a      	ldr	r1, [pc, #40]	; (1de0 <bt_addr_le_str+0x8c>)
    1db8:	e7e4      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dba:	490a      	ldr	r1, [pc, #40]	; (1de4 <bt_addr_le_str+0x90>)
    1dbc:	e7e2      	b.n	1d84 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dbe:	4a0a      	ldr	r2, [pc, #40]	; (1de8 <bt_addr_le_str+0x94>)
    1dc0:	210a      	movs	r1, #10
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff f8f0 	bl	fa8 <snprintk>
    1dc8:	e7df      	b.n	1d8a <bt_addr_le_str+0x36>
    1dca:	bf00      	nop
    1dcc:	20000073 	.word	0x20000073
    1dd0:	2000003c 	.word	0x2000003c
    1dd4:	0001455d 	.word	0x0001455d
    1dd8:	00014586 	.word	0x00014586
    1ddc:	00014564 	.word	0x00014564
    1de0:	0001456b 	.word	0x0001456b
    1de4:	00014575 	.word	0x00014575
    1de8:	0001457f 	.word	0x0001457f

00001dec <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dec:	b530      	push	{r4, r5, lr}
    1dee:	b085      	sub	sp, #20
    1df0:	4604      	mov	r4, r0
    1df2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1df4:	4668      	mov	r0, sp
    1df6:	2203      	movs	r2, #3
    1df8:	f7ff ff00 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1dfc:	220d      	movs	r2, #13
    1dfe:	2100      	movs	r1, #0
    1e00:	f10d 0003 	add.w	r0, sp, #3
    1e04:	f7ff ff26 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e08:	4620      	mov	r0, r4
    1e0a:	466a      	mov	r2, sp
    1e0c:	4669      	mov	r1, sp
    1e0e:	f005 ff63 	bl	7cd8 <bt_encrypt_le>
	if (err) {
    1e12:	4604      	mov	r4, r0
    1e14:	b920      	cbnz	r0, 1e20 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e16:	2203      	movs	r2, #3
    1e18:	4669      	mov	r1, sp
    1e1a:	4628      	mov	r0, r5
    1e1c:	f7ff feee 	bl	1bfc <memcpy>

	return 0;
}
    1e20:	4620      	mov	r0, r4
    1e22:	b005      	add	sp, #20
    1e24:	bd30      	pop	{r4, r5, pc}

00001e26 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e26:	b513      	push	{r0, r1, r4, lr}
    1e28:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e2a:	aa01      	add	r2, sp, #4
    1e2c:	3103      	adds	r1, #3
    1e2e:	f7ff ffdd 	bl	1dec <ah>
	if (err) {
    1e32:	b948      	cbnz	r0, 1e48 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e34:	2203      	movs	r2, #3
    1e36:	a901      	add	r1, sp, #4
    1e38:	4620      	mov	r0, r4
    1e3a:	f7ff feca 	bl	1bd2 <memcmp>
    1e3e:	fab0 f080 	clz	r0, r0
    1e42:	0940      	lsrs	r0, r0, #5
}
    1e44:	b002      	add	sp, #8
    1e46:	bd10      	pop	{r4, pc}
		return false;
    1e48:	2000      	movs	r0, #0
    1e4a:	e7fb      	b.n	1e44 <bt_rpa_irk_matches+0x1e>

00001e4c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e4e:	1ccd      	adds	r5, r1, #3
{
    1e50:	4606      	mov	r6, r0
    1e52:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e54:	4628      	mov	r0, r5
    1e56:	2103      	movs	r1, #3
    1e58:	f005 ff22 	bl	7ca0 <bt_rand>
	if (err) {
    1e5c:	b960      	cbnz	r0, 1e78 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e5e:	7963      	ldrb	r3, [r4, #5]
    1e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e68:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e6a:	4622      	mov	r2, r4
    1e6c:	4629      	mov	r1, r5
    1e6e:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e74:	f7ff bfba 	b.w	1dec <ah>
}
    1e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e7c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e7c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e7e:	7802      	ldrb	r2, [r0, #0]
    1e80:	2a01      	cmp	r2, #1
{
    1e82:	4604      	mov	r4, r0
    1e84:	460b      	mov	r3, r1
	switch (src->type) {
    1e86:	d017      	beq.n	1eb8 <uuid_to_uuid128+0x3c>
    1e88:	d303      	bcc.n	1e92 <uuid_to_uuid128+0x16>
    1e8a:	2a02      	cmp	r2, #2
    1e8c:	d02c      	beq.n	1ee8 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1e8e:	bcf0      	pop	{r4, r5, r6, r7}
    1e90:	4770      	bx	lr
		*dst = uuid128_base;
    1e92:	4a18      	ldr	r2, [pc, #96]	; (1ef4 <uuid_to_uuid128+0x78>)
    1e94:	460d      	mov	r5, r1
    1e96:	f102 0710 	add.w	r7, r2, #16
    1e9a:	6810      	ldr	r0, [r2, #0]
    1e9c:	6851      	ldr	r1, [r2, #4]
    1e9e:	462e      	mov	r6, r5
    1ea0:	c603      	stmia	r6!, {r0, r1}
    1ea2:	3208      	adds	r2, #8
    1ea4:	42ba      	cmp	r2, r7
    1ea6:	4635      	mov	r5, r6
    1ea8:	d1f7      	bne.n	1e9a <uuid_to_uuid128+0x1e>
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1eae:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1eb0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1eb2:	0a12      	lsrs	r2, r2, #8
    1eb4:	739a      	strb	r2, [r3, #14]
    1eb6:	e7ea      	b.n	1e8e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1eb8:	4a0e      	ldr	r2, [pc, #56]	; (1ef4 <uuid_to_uuid128+0x78>)
    1eba:	460d      	mov	r5, r1
    1ebc:	f102 0710 	add.w	r7, r2, #16
    1ec0:	6810      	ldr	r0, [r2, #0]
    1ec2:	6851      	ldr	r1, [r2, #4]
    1ec4:	462e      	mov	r6, r5
    1ec6:	c603      	stmia	r6!, {r0, r1}
    1ec8:	3208      	adds	r2, #8
    1eca:	42ba      	cmp	r2, r7
    1ecc:	4635      	mov	r5, r6
    1ece:	d1f7      	bne.n	1ec0 <uuid_to_uuid128+0x44>
    1ed0:	7812      	ldrb	r2, [r2, #0]
    1ed2:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ed4:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1ed6:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1edc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1ede:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ee0:	0a12      	lsrs	r2, r2, #8
    1ee2:	7399      	strb	r1, [r3, #14]
    1ee4:	741a      	strb	r2, [r3, #16]
    1ee6:	e7d2      	b.n	1e8e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1ee8:	4601      	mov	r1, r0
    1eea:	2211      	movs	r2, #17
    1eec:	4618      	mov	r0, r3
}
    1eee:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1ef0:	f7ff be84 	b.w	1bfc <memcpy>
    1ef4:	00014b35 	.word	0x00014b35

00001ef8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1efc:	7801      	ldrb	r1, [r0, #0]
    1efe:	7822      	ldrb	r2, [r4, #0]
    1f00:	428a      	cmp	r2, r1
{
    1f02:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f04:	d00e      	beq.n	1f24 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f06:	4669      	mov	r1, sp
    1f08:	f7ff ffb8 	bl	1e7c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f0c:	a905      	add	r1, sp, #20
    1f0e:	4620      	mov	r0, r4
    1f10:	f7ff ffb4 	bl	1e7c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f14:	2210      	movs	r2, #16
    1f16:	f10d 0115 	add.w	r1, sp, #21
    1f1a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f1e:	f7ff fe58 	bl	1bd2 <memcmp>
    1f22:	e00a      	b.n	1f3a <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f24:	2a01      	cmp	r2, #1
    1f26:	d00a      	beq.n	1f3e <bt_uuid_cmp+0x46>
    1f28:	d304      	bcc.n	1f34 <bt_uuid_cmp+0x3c>
    1f2a:	2a02      	cmp	r2, #2
    1f2c:	d00a      	beq.n	1f44 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f2e:	f06f 0015 	mvn.w	r0, #21
    1f32:	e002      	b.n	1f3a <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f34:	8840      	ldrh	r0, [r0, #2]
    1f36:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f38:	1ac0      	subs	r0, r0, r3
}
    1f3a:	b00a      	add	sp, #40	; 0x28
    1f3c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f3e:	6840      	ldr	r0, [r0, #4]
    1f40:	6863      	ldr	r3, [r4, #4]
    1f42:	e7f9      	b.n	1f38 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f44:	2210      	movs	r2, #16
    1f46:	1c61      	adds	r1, r4, #1
    1f48:	3001      	adds	r0, #1
    1f4a:	e7e8      	b.n	1f1e <bt_uuid_cmp+0x26>

00001f4c <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f4c:	4770      	bx	lr
	...

00001f50 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f50:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f52:	4d0b      	ldr	r5, [pc, #44]	; (1f80 <ver_str+0x30>)
{
    1f54:	4606      	mov	r6, r0
	const char * const str[] = {
    1f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f58:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f5a:	466c      	mov	r4, sp
    1f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f62:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f66:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f68:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f6c:	bf9b      	ittet	ls
    1f6e:	ab0a      	addls	r3, sp, #40	; 0x28
    1f70:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f74:	4803      	ldrhi	r0, [pc, #12]	; (1f84 <ver_str+0x34>)
		return str[ver];
    1f76:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f7a:	b00a      	add	sp, #40	; 0x28
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
    1f7e:	bf00      	nop
    1f80:	00014514 	.word	0x00014514
    1f84:	0001564c 	.word	0x0001564c

00001f88 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1f88:	2207      	movs	r2, #7
    1f8a:	f7ff be37 	b.w	1bfc <memcpy>

00001f8e <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1f8e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1f90:	f3bf 8f5b 	dmb	ish
    1f94:	e850 3f00 	ldrex	r3, [r0]
    1f98:	ea43 0201 	orr.w	r2, r3, r1
    1f9c:	e840 2e00 	strex	lr, r2, [r0]
    1fa0:	f1be 0f00 	cmp.w	lr, #0
    1fa4:	d1f6      	bne.n	1f94 <atomic_or+0x6>
    1fa6:	f3bf 8f5b 	dmb	ish
    1faa:	4618      	mov	r0, r3
    1fac:	f85d fb04 	ldr.w	pc, [sp], #4

00001fb0 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fb0:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fb2:	f3bf 8f5b 	dmb	ish
    1fb6:	e850 3f00 	ldrex	r3, [r0]
    1fba:	ea03 0201 	and.w	r2, r3, r1
    1fbe:	e840 2e00 	strex	lr, r2, [r0]
    1fc2:	f1be 0f00 	cmp.w	lr, #0
    1fc6:	d1f6      	bne.n	1fb6 <atomic_and+0x6>
    1fc8:	f3bf 8f5b 	dmb	ish
    1fcc:	4618      	mov	r0, r3
    1fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001fd4 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1fd4:	78c3      	ldrb	r3, [r0, #3]
    1fd6:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1fd8:	f241 3288 	movw	r2, #5000	; 0x1388
    1fdc:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1fe0:	bf08      	it	eq
    1fe2:	2200      	moveq	r2, #0
    1fe4:	4801      	ldr	r0, [pc, #4]	; (1fec <update_conn_param+0x18>)
    1fe6:	f012 b8a7 	b.w	14138 <k_delayed_work_submit_to_queue>
    1fea:	bf00      	nop
    1fec:	20001988 	.word	0x20001988

00001ff0 <hci_cmd_done>:
{
    1ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ff4:	4606      	mov	r6, r0
    1ff6:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ff8:	7990      	ldrb	r0, [r2, #6]
    1ffa:	4f26      	ldr	r7, [pc, #152]	; (2094 <hci_cmd_done+0xa4>)
{
    1ffc:	4688      	mov	r8, r1
    1ffe:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2000:	f010 fbf2 	bl	127e8 <net_buf_pool_get>
    2004:	4287      	cmp	r7, r0
    2006:	d013      	beq.n	2030 <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    2008:	79ac      	ldrb	r4, [r5, #6]
    200a:	4620      	mov	r0, r4
    200c:	f010 fbec 	bl	127e8 <net_buf_pool_get>
    2010:	4b21      	ldr	r3, [pc, #132]	; (2098 <hci_cmd_done+0xa8>)
    2012:	9305      	str	r3, [sp, #20]
    2014:	9003      	str	r0, [sp, #12]
    2016:	e88d 0048 	stmia.w	sp, {r3, r6}
    201a:	9704      	str	r7, [sp, #16]
    201c:	9402      	str	r4, [sp, #8]
    201e:	4b1f      	ldr	r3, [pc, #124]	; (209c <hci_cmd_done+0xac>)
    2020:	4a1f      	ldr	r2, [pc, #124]	; (20a0 <hci_cmd_done+0xb0>)
    2022:	4920      	ldr	r1, [pc, #128]	; (20a4 <hci_cmd_done+0xb4>)
    2024:	4820      	ldr	r0, [pc, #128]	; (20a8 <hci_cmd_done+0xb8>)
    2026:	f7fe ffb1 	bl	f8c <printk>
}
    202a:	b006      	add	sp, #24
    202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2030:	4628      	mov	r0, r5
    2032:	f010 fbdf 	bl	127f4 <net_buf_id>
    2036:	4c1d      	ldr	r4, [pc, #116]	; (20ac <hci_cmd_done+0xbc>)
    2038:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    203c:	8843      	ldrh	r3, [r0, #2]
    203e:	42b3      	cmp	r3, r6
    2040:	d010      	beq.n	2064 <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2042:	4628      	mov	r0, r5
    2044:	f010 fbd6 	bl	127f4 <net_buf_id>
    2048:	4b13      	ldr	r3, [pc, #76]	; (2098 <hci_cmd_done+0xa8>)
    204a:	9303      	str	r3, [sp, #12]
    204c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2050:	4914      	ldr	r1, [pc, #80]	; (20a4 <hci_cmd_done+0xb4>)
    2052:	8842      	ldrh	r2, [r0, #2]
    2054:	9202      	str	r2, [sp, #8]
    2056:	e88d 0048 	stmia.w	sp, {r3, r6}
    205a:	4a11      	ldr	r2, [pc, #68]	; (20a0 <hci_cmd_done+0xb0>)
    205c:	4b0f      	ldr	r3, [pc, #60]	; (209c <hci_cmd_done+0xac>)
    205e:	4814      	ldr	r0, [pc, #80]	; (20b0 <hci_cmd_done+0xc0>)
    2060:	f7fe ff94 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    2064:	4628      	mov	r0, r5
    2066:	f010 fbc5 	bl	127f4 <net_buf_id>
    206a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    206e:	6843      	ldr	r3, [r0, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	d0da      	beq.n	202a <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    2074:	4628      	mov	r0, r5
    2076:	f010 fbbd 	bl	127f4 <net_buf_id>
    207a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    207e:	4628      	mov	r0, r5
    2080:	f010 fbb8 	bl	127f4 <net_buf_id>
    2084:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2088:	6840      	ldr	r0, [r0, #4]
}
    208a:	b006      	add	sp, #24
    208c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2090:	f011 bcf7 	b.w	13a82 <_impl_k_sem_give>
    2094:	20003f6c 	.word	0x20003f6c
    2098:	000145f1 	.word	0x000145f1
    209c:	00014c0e 	.word	0x00014c0e
    20a0:	000153bb 	.word	0x000153bb
    20a4:	000153c2 	.word	0x000153c2
    20a8:	000153c5 	.word	0x000153c5
    20ac:	2000027c 	.word	0x2000027c
    20b0:	0001540a 	.word	0x0001540a

000020b4 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20b4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20b6:	f3bf 8f5b 	dmb	ish
    20ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20be:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20c2:	f001 011f 	and.w	r1, r1, #31
    20c6:	4108      	asrs	r0, r1
}
    20c8:	f000 0001 	and.w	r0, r0, #1
    20cc:	4770      	bx	lr
	...

000020d0 <bt_hci_cmd_create>:
{
    20d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20d4:	4680      	mov	r8, r0
    20d6:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20d8:	4813      	ldr	r0, [pc, #76]	; (2128 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    20da:	4d14      	ldr	r5, [pc, #80]	; (212c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    20e0:	f010 fc16 	bl	12910 <net_buf_alloc_fixed>
    20e4:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    20e6:	f100 0608 	add.w	r6, r0, #8
    20ea:	2100      	movs	r1, #0
    20ec:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    20ee:	2700      	movs	r7, #0
    20f0:	f010 fc2d 	bl	1294e <net_buf_simple_reserve>
    20f4:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    20f6:	4620      	mov	r0, r4
    20f8:	f010 fb7c 	bl	127f4 <net_buf_id>
    20fc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2100:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    2104:	4620      	mov	r0, r4
    2106:	f010 fb75 	bl	127f4 <net_buf_id>
    210a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    210e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2110:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2112:	4630      	mov	r0, r6
    2114:	f010 fc5e 	bl	129d4 <net_buf_simple_add>
	hdr->param_len = param_len;
    2118:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    211c:	f8a0 8000 	strh.w	r8, [r0]
}
    2120:	4620      	mov	r0, r4
    2122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2126:	bf00      	nop
    2128:	20003f6c 	.word	0x20003f6c
    212c:	2000027c 	.word	0x2000027c

00002130 <bt_hci_cmd_send_sync>:
{
    2130:	b570      	push	{r4, r5, r6, lr}
    2132:	4615      	mov	r5, r2
    2134:	b086      	sub	sp, #24
	if (!buf) {
    2136:	460c      	mov	r4, r1
    2138:	b919      	cbnz	r1, 2142 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    213a:	f7ff ffc9 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    213e:	4604      	mov	r4, r0
    2140:	b368      	cbz	r0, 219e <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2142:	2201      	movs	r2, #1
    2144:	2100      	movs	r1, #0
    2146:	4668      	mov	r0, sp
    2148:	f011 fc92 	bl	13a70 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    214c:	4620      	mov	r0, r4
    214e:	f010 fb51 	bl	127f4 <net_buf_id>
    2152:	4e14      	ldr	r6, [pc, #80]	; (21a4 <bt_hci_cmd_send_sync+0x74>)
    2154:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2158:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    215c:	4620      	mov	r0, r4
    215e:	f010 fc35 	bl	129cc <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2162:	4621      	mov	r1, r4
    2164:	4810      	ldr	r0, [pc, #64]	; (21a8 <bt_hci_cmd_send_sync+0x78>)
    2166:	f010 fbf6 	bl	12956 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    216a:	f242 7110 	movw	r1, #10000	; 0x2710
    216e:	4668      	mov	r0, sp
    2170:	f011 fcaf 	bl	13ad2 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2174:	4620      	mov	r0, r4
    2176:	f010 fb3d 	bl	127f4 <net_buf_id>
    217a:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    217e:	b130      	cbz	r0, 218e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    2180:	4620      	mov	r0, r4
    2182:	f010 fbf5 	bl	12970 <net_buf_unref>
		err = -EIO;
    2186:	f06f 0004 	mvn.w	r0, #4
}
    218a:	b006      	add	sp, #24
    218c:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    218e:	b10d      	cbz	r5, 2194 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    2190:	602c      	str	r4, [r5, #0]
    2192:	e7fa      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2194:	4620      	mov	r0, r4
    2196:	f010 fbeb 	bl	12970 <net_buf_unref>
		err = 0;
    219a:	4628      	mov	r0, r5
    219c:	e7f5      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    219e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    21a2:	e7f2      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
    21a4:	2000027c 	.word	0x2000027c
    21a8:	20003b24 	.word	0x20003b24

000021ac <set_le_scan_enable>:
{
    21ac:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21ae:	2102      	movs	r1, #2
{
    21b0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21b2:	f242 000c 	movw	r0, #8204	; 0x200c
    21b6:	f7ff ff8b 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    21ba:	4604      	mov	r4, r0
    21bc:	b330      	cbz	r0, 220c <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    21be:	2102      	movs	r1, #2
    21c0:	3008      	adds	r0, #8
    21c2:	f010 fc07 	bl	129d4 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21c6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    21c8:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21ca:	d116      	bne.n	21fa <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    21cc:	210b      	movs	r1, #11
    21ce:	4811      	ldr	r0, [pc, #68]	; (2214 <set_le_scan_enable+0x68>)
    21d0:	f7ff ff70 	bl	20b4 <atomic_test_bit>
    21d4:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    21d6:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    21d8:	4621      	mov	r1, r4
    21da:	2200      	movs	r2, #0
    21dc:	f242 000c 	movw	r0, #8204	; 0x200c
    21e0:	f7ff ffa6 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    21e4:	4604      	mov	r4, r0
    21e6:	b930      	cbnz	r0, 21f6 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21e8:	2d01      	cmp	r5, #1
    21ea:	d109      	bne.n	2200 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    21ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    21f0:	4808      	ldr	r0, [pc, #32]	; (2214 <set_le_scan_enable+0x68>)
    21f2:	f7ff fecc 	bl	1f8e <atomic_or>
}
    21f6:	4620      	mov	r0, r4
    21f8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    21fa:	2300      	movs	r3, #0
    21fc:	7043      	strb	r3, [r0, #1]
    21fe:	e7ea      	b.n	21d6 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2200:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2204:	4803      	ldr	r0, [pc, #12]	; (2214 <set_le_scan_enable+0x68>)
    2206:	f7ff fed3 	bl	1fb0 <atomic_and>
    220a:	e7f4      	b.n	21f6 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    220c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2210:	e7f1      	b.n	21f6 <set_le_scan_enable+0x4a>
    2212:	bf00      	nop
    2214:	20003ad0 	.word	0x20003ad0

00002218 <set_random_address>:
{
    2218:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    221a:	4d15      	ldr	r5, [pc, #84]	; (2270 <set_random_address+0x58>)
    221c:	2206      	movs	r2, #6
    221e:	f105 0108 	add.w	r1, r5, #8
    2222:	4606      	mov	r6, r0
    2224:	f7ff fcd5 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2228:	4604      	mov	r4, r0
    222a:	b1d8      	cbz	r0, 2264 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    222c:	2106      	movs	r1, #6
    222e:	f242 0005 	movw	r0, #8197	; 0x2005
    2232:	f7ff ff4d 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2236:	4604      	mov	r4, r0
    2238:	b1b0      	cbz	r0, 2268 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    223a:	2206      	movs	r2, #6
    223c:	4631      	mov	r1, r6
    223e:	3008      	adds	r0, #8
    2240:	f010 fbce 	bl	129e0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2244:	4621      	mov	r1, r4
    2246:	2200      	movs	r2, #0
    2248:	f242 0005 	movw	r0, #8197	; 0x2005
    224c:	f7ff ff70 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2250:	4604      	mov	r4, r0
    2252:	b938      	cbnz	r0, 2264 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    2254:	2206      	movs	r2, #6
    2256:	4631      	mov	r1, r6
    2258:	f105 0008 	add.w	r0, r5, #8
    225c:	f7ff fcce 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2260:	2301      	movs	r3, #1
    2262:	71eb      	strb	r3, [r5, #7]
}
    2264:	4620      	mov	r0, r4
    2266:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2268:	f06f 0436 	mvn.w	r4, #54	; 0x36
    226c:	e7fa      	b.n	2264 <set_random_address+0x4c>
    226e:	bf00      	nop
    2270:	20003a60 	.word	0x20003a60

00002274 <le_set_private_addr>:
{
    2274:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    2276:	2106      	movs	r1, #6
    2278:	4668      	mov	r0, sp
    227a:	f005 fd11 	bl	7ca0 <bt_rand>
	if (err) {
    227e:	b940      	cbnz	r0, 2292 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2280:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2284:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    2286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    228a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    228e:	f7ff ffc3 	bl	2218 <set_random_address>
}
    2292:	b003      	add	sp, #12
    2294:	f85d fb04 	ldr.w	pc, [sp], #4

00002298 <set_advertise_enable>:
{
    2298:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    229a:	2101      	movs	r1, #1
{
    229c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    229e:	f242 000a 	movw	r0, #8202	; 0x200a
    22a2:	f7ff ff15 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    22a6:	4604      	mov	r4, r0
    22a8:	b1d8      	cbz	r0, 22e2 <set_advertise_enable+0x4a>
    22aa:	3008      	adds	r0, #8
	if (enable) {
    22ac:	b18d      	cbz	r5, 22d2 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    22ae:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22b0:	f010 fb9f 	bl	129f2 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    22b4:	4621      	mov	r1, r4
    22b6:	2200      	movs	r2, #0
    22b8:	f242 000a 	movw	r0, #8202	; 0x200a
    22bc:	f7ff ff38 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    22c0:	4604      	mov	r4, r0
    22c2:	b920      	cbnz	r0, 22ce <set_advertise_enable+0x36>
	if (enable) {
    22c4:	b13d      	cbz	r5, 22d6 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22c6:	2140      	movs	r1, #64	; 0x40
    22c8:	4807      	ldr	r0, [pc, #28]	; (22e8 <set_advertise_enable+0x50>)
    22ca:	f7ff fe60 	bl	1f8e <atomic_or>
}
    22ce:	4620      	mov	r0, r4
    22d0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22d2:	4629      	mov	r1, r5
    22d4:	e7ec      	b.n	22b0 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22d6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    22da:	4803      	ldr	r0, [pc, #12]	; (22e8 <set_advertise_enable+0x50>)
    22dc:	f7ff fe68 	bl	1fb0 <atomic_and>
    22e0:	e7f5      	b.n	22ce <set_advertise_enable+0x36>
		return -ENOBUFS;
    22e2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    22e6:	e7f2      	b.n	22ce <set_advertise_enable+0x36>
    22e8:	20003ad0 	.word	0x20003ad0

000022ec <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    22ec:	8802      	ldrh	r2, [r0, #0]
    22ee:	8843      	ldrh	r3, [r0, #2]
    22f0:	429a      	cmp	r2, r3
{
    22f2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    22f4:	d818      	bhi.n	2328 <bt_le_conn_params_valid+0x3c>
    22f6:	2a05      	cmp	r2, #5
    22f8:	d916      	bls.n	2328 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    22fa:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    22fe:	d813      	bhi.n	2328 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2300:	8884      	ldrh	r4, [r0, #4]
    2302:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    2306:	d20f      	bcs.n	2328 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2308:	88c1      	ldrh	r1, [r0, #6]
    230a:	f1a1 020a 	sub.w	r2, r1, #10
    230e:	b292      	uxth	r2, r2
    2310:	f640 4076 	movw	r0, #3190	; 0xc76
    2314:	4282      	cmp	r2, r0
    2316:	d807      	bhi.n	2328 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2318:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    231c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2320:	bfb4      	ite	lt
    2322:	2001      	movlt	r0, #1
    2324:	2000      	movge	r0, #0
    2326:	bd10      	pop	{r4, pc}
		return false;
    2328:	2000      	movs	r0, #0
}
    232a:	bd10      	pop	{r4, pc}

0000232c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    232c:	2301      	movs	r3, #1
{
    232e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2330:	2106      	movs	r1, #6
{
    2332:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2334:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2338:	f005 fcb2 	bl	7ca0 <bt_rand>
	if (err) {
    233c:	b918      	cbnz	r0, 2346 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    233e:	79a3      	ldrb	r3, [r4, #6]
    2340:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2344:	71a3      	strb	r3, [r4, #6]
}
    2346:	bd10      	pop	{r4, pc}

00002348 <bt_set_static_addr>:
{
    2348:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    234a:	4c11      	ldr	r4, [pc, #68]	; (2390 <bt_set_static_addr+0x48>)
    234c:	7823      	ldrb	r3, [r4, #0]
    234e:	2b01      	cmp	r3, #1
    2350:	d104      	bne.n	235c <bt_set_static_addr+0x14>
    2352:	79a3      	ldrb	r3, [r4, #6]
    2354:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2358:	2bc0      	cmp	r3, #192	; 0xc0
    235a:	d00d      	beq.n	2378 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    235c:	4b0d      	ldr	r3, [pc, #52]	; (2394 <bt_set_static_addr+0x4c>)
    235e:	9301      	str	r3, [sp, #4]
    2360:	9300      	str	r3, [sp, #0]
    2362:	4a0d      	ldr	r2, [pc, #52]	; (2398 <bt_set_static_addr+0x50>)
    2364:	4b0d      	ldr	r3, [pc, #52]	; (239c <bt_set_static_addr+0x54>)
    2366:	490e      	ldr	r1, [pc, #56]	; (23a0 <bt_set_static_addr+0x58>)
    2368:	480e      	ldr	r0, [pc, #56]	; (23a4 <bt_set_static_addr+0x5c>)
    236a:	f7fe fe0f 	bl	f8c <printk>
    236e:	f06f 0515 	mvn.w	r5, #21
}
    2372:	4628      	mov	r0, r5
    2374:	b003      	add	sp, #12
    2376:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    2378:	1c60      	adds	r0, r4, #1
    237a:	f7ff ff4d 	bl	2218 <set_random_address>
	if (err) {
    237e:	4605      	mov	r5, r0
    2380:	2800      	cmp	r0, #0
    2382:	d1f6      	bne.n	2372 <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2384:	2104      	movs	r1, #4
    2386:	f104 0070 	add.w	r0, r4, #112	; 0x70
    238a:	f7ff fe00 	bl	1f8e <atomic_or>
	return 0;
    238e:	e7f0      	b.n	2372 <bt_set_static_addr+0x2a>
    2390:	20003a60 	.word	0x20003a60
    2394:	000145f1 	.word	0x000145f1
    2398:	00015373 	.word	0x00015373
    239c:	00014c65 	.word	0x00014c65
    23a0:	000153c2 	.word	0x000153c2
    23a4:	0001537a 	.word	0x0001537a

000023a8 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    23a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23ac:	4d1d      	ldr	r5, [pc, #116]	; (2424 <bt_dev_show_info+0x7c>)
    23ae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2440 <bt_dev_show_info+0x98>
    23b2:	4f1d      	ldr	r7, [pc, #116]	; (2428 <bt_dev_show_info+0x80>)
    23b4:	4e1d      	ldr	r6, [pc, #116]	; (242c <bt_dev_show_info+0x84>)
    23b6:	4c1e      	ldr	r4, [pc, #120]	; (2430 <bt_dev_show_info+0x88>)
{
    23b8:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23ba:	4628      	mov	r0, r5
    23bc:	f7ff fcca 	bl	1d54 <bt_addr_le_str>
    23c0:	4643      	mov	r3, r8
    23c2:	463a      	mov	r2, r7
    23c4:	4631      	mov	r1, r6
    23c6:	9001      	str	r0, [sp, #4]
    23c8:	9402      	str	r4, [sp, #8]
    23ca:	9400      	str	r4, [sp, #0]
    23cc:	4819      	ldr	r0, [pc, #100]	; (2434 <bt_dev_show_info+0x8c>)
    23ce:	f7fe fddd 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    23d2:	f895 900e 	ldrb.w	r9, [r5, #14]
    23d6:	4648      	mov	r0, r9
    23d8:	f7ff fdba 	bl	1f50 <ver_str>
    23dc:	8aab      	ldrh	r3, [r5, #20]
    23de:	9304      	str	r3, [sp, #16]
    23e0:	8a2b      	ldrh	r3, [r5, #16]
    23e2:	9303      	str	r3, [sp, #12]
    23e4:	463a      	mov	r2, r7
    23e6:	4643      	mov	r3, r8
    23e8:	4631      	mov	r1, r6
    23ea:	f8cd 9008 	str.w	r9, [sp, #8]
    23ee:	9001      	str	r0, [sp, #4]
    23f0:	9405      	str	r4, [sp, #20]
    23f2:	9400      	str	r4, [sp, #0]
    23f4:	4810      	ldr	r0, [pc, #64]	; (2438 <bt_dev_show_info+0x90>)
    23f6:	f7fe fdc9 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    23fa:	f895 900f 	ldrb.w	r9, [r5, #15]
    23fe:	4648      	mov	r0, r9
    2400:	f7ff fda6 	bl	1f50 <ver_str>
    2404:	8a6b      	ldrh	r3, [r5, #18]
    2406:	9303      	str	r3, [sp, #12]
    2408:	9001      	str	r0, [sp, #4]
    240a:	9404      	str	r4, [sp, #16]
    240c:	f8cd 9008 	str.w	r9, [sp, #8]
    2410:	9400      	str	r4, [sp, #0]
    2412:	4643      	mov	r3, r8
    2414:	463a      	mov	r2, r7
    2416:	4631      	mov	r1, r6
    2418:	4808      	ldr	r0, [pc, #32]	; (243c <bt_dev_show_info+0x94>)
    241a:	f7fe fdb7 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    241e:	b007      	add	sp, #28
    2420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2424:	20003a60 	.word	0x20003a60
    2428:	00014ccb 	.word	0x00014ccb
    242c:	000153c2 	.word	0x000153c2
    2430:	000145f1 	.word	0x000145f1
    2434:	00014cd2 	.word	0x00014cd2
    2438:	00014cef 	.word	0x00014cef
    243c:	00014d3d 	.word	0x00014d3d
    2440:	00014c86 	.word	0x00014c86

00002444 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2444:	4b02      	ldr	r3, [pc, #8]	; (2450 <bt_send+0xc>)
    2446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    244a:	691b      	ldr	r3, [r3, #16]
    244c:	4718      	bx	r3
    244e:	bf00      	nop
    2450:	20003a60 	.word	0x20003a60

00002454 <bt_hci_cmd_send>:
{
    2454:	b530      	push	{r4, r5, lr}
    2456:	4604      	mov	r4, r0
    2458:	b085      	sub	sp, #20
	if (!buf) {
    245a:	460d      	mov	r5, r1
    245c:	b919      	cbnz	r1, 2466 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    245e:	f7ff fe37 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    2462:	4605      	mov	r5, r0
    2464:	b1f0      	cbz	r0, 24a4 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2466:	f640 4335 	movw	r3, #3125	; 0xc35
    246a:	429c      	cmp	r4, r3
    246c:	d114      	bne.n	2498 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    246e:	4628      	mov	r0, r5
    2470:	f7ff ffe8 	bl	2444 <bt_send>
		if (err) {
    2474:	4604      	mov	r4, r0
    2476:	b160      	cbz	r0, 2492 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    2478:	4b0c      	ldr	r3, [pc, #48]	; (24ac <bt_hci_cmd_send+0x58>)
    247a:	9302      	str	r3, [sp, #8]
    247c:	e88d 0018 	stmia.w	sp, {r3, r4}
    2480:	4a0b      	ldr	r2, [pc, #44]	; (24b0 <bt_hci_cmd_send+0x5c>)
    2482:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <bt_hci_cmd_send+0x60>)
    2484:	490c      	ldr	r1, [pc, #48]	; (24b8 <bt_hci_cmd_send+0x64>)
    2486:	480d      	ldr	r0, [pc, #52]	; (24bc <bt_hci_cmd_send+0x68>)
    2488:	f7fe fd80 	bl	f8c <printk>
			net_buf_unref(buf);
    248c:	4628      	mov	r0, r5
    248e:	f010 fa6f 	bl	12970 <net_buf_unref>
}
    2492:	4620      	mov	r0, r4
    2494:	b005      	add	sp, #20
    2496:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2498:	4629      	mov	r1, r5
    249a:	4809      	ldr	r0, [pc, #36]	; (24c0 <bt_hci_cmd_send+0x6c>)
    249c:	f010 fa5b 	bl	12956 <net_buf_put>
	return 0;
    24a0:	2400      	movs	r4, #0
    24a2:	e7f6      	b.n	2492 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    24a4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24a8:	e7f3      	b.n	2492 <bt_hci_cmd_send+0x3e>
    24aa:	bf00      	nop
    24ac:	000145f1 	.word	0x000145f1
    24b0:	00015373 	.word	0x00015373
    24b4:	00014b46 	.word	0x00014b46
    24b8:	000153c2 	.word	0x000153c2
    24bc:	00014dc9 	.word	0x00014dc9
    24c0:	20003b24 	.word	0x20003b24

000024c4 <start_le_scan>:
{
    24c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24c6:	4605      	mov	r5, r0
    24c8:	460e      	mov	r6, r1
    24ca:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    24cc:	2100      	movs	r1, #0
    24ce:	2207      	movs	r2, #7
    24d0:	4668      	mov	r0, sp
    24d2:	f7ff fbbf 	bl	1c54 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    24d6:	4821      	ldr	r0, [pc, #132]	; (255c <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    24d8:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    24dc:	2300      	movs	r3, #0
    24de:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    24e2:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    24e4:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    24e6:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    24ea:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    24ee:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    24f2:	d10a      	bne.n	250a <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    24f4:	2106      	movs	r1, #6
    24f6:	3070      	adds	r0, #112	; 0x70
    24f8:	f7ff fddc 	bl	20b4 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    24fc:	b928      	cbnz	r0, 250a <start_le_scan+0x46>
			err = le_set_private_addr();
    24fe:	f7ff feb9 	bl	2274 <le_set_private_addr>
			if (err) {
    2502:	4604      	mov	r4, r0
    2504:	b9f0      	cbnz	r0, 2544 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2506:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    250a:	2107      	movs	r1, #7
    250c:	f242 000b 	movw	r0, #8203	; 0x200b
    2510:	f7ff fdde 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2514:	4604      	mov	r4, r0
    2516:	b1f0      	cbz	r0, 2556 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2518:	2207      	movs	r2, #7
    251a:	4669      	mov	r1, sp
    251c:	3008      	adds	r0, #8
    251e:	f010 fa5f 	bl	129e0 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2522:	4621      	mov	r1, r4
    2524:	f242 000b 	movw	r0, #8203	; 0x200b
    2528:	f7ff ff94 	bl	2454 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    252c:	2001      	movs	r0, #1
    252e:	f7ff fe3d 	bl	21ac <set_le_scan_enable>
	if (err) {
    2532:	4604      	mov	r4, r0
    2534:	b930      	cbnz	r0, 2544 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2536:	2d01      	cmp	r5, #1
    2538:	d107      	bne.n	254a <start_le_scan+0x86>
    253a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    253e:	4808      	ldr	r0, [pc, #32]	; (2560 <start_le_scan+0x9c>)
    2540:	f7ff fd25 	bl	1f8e <atomic_or>
}
    2544:	4620      	mov	r0, r4
    2546:	b002      	add	sp, #8
    2548:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    254a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    254e:	4804      	ldr	r0, [pc, #16]	; (2560 <start_le_scan+0x9c>)
    2550:	f7ff fd2e 	bl	1fb0 <atomic_and>
    2554:	e7f6      	b.n	2544 <start_le_scan+0x80>
		return -ENOBUFS;
    2556:	f06f 0436 	mvn.w	r4, #54	; 0x36
    255a:	e7f3      	b.n	2544 <start_le_scan+0x80>
    255c:	20003a60 	.word	0x20003a60
    2560:	20003ad0 	.word	0x20003ad0

00002564 <bt_le_scan_update>:
{
    2564:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2566:	2109      	movs	r1, #9
{
    2568:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    256a:	4816      	ldr	r0, [pc, #88]	; (25c4 <bt_le_scan_update+0x60>)
    256c:	f7ff fda2 	bl	20b4 <atomic_test_bit>
    2570:	4602      	mov	r2, r0
    2572:	b108      	cbz	r0, 2578 <bt_le_scan_update+0x14>
		return 0;
    2574:	2000      	movs	r0, #0
    2576:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2578:	2108      	movs	r1, #8
    257a:	4812      	ldr	r0, [pc, #72]	; (25c4 <bt_le_scan_update+0x60>)
    257c:	f7ff fd9a 	bl	20b4 <atomic_test_bit>
    2580:	b9d0      	cbnz	r0, 25b8 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    2582:	2101      	movs	r1, #1
    2584:	2000      	movs	r0, #0
    2586:	f001 fe37 	bl	41f8 <bt_conn_lookup_state_le>
		if (!conn) {
    258a:	4604      	mov	r4, r0
    258c:	2800      	cmp	r0, #0
    258e:	d0f1      	beq.n	2574 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2590:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2594:	480b      	ldr	r0, [pc, #44]	; (25c4 <bt_le_scan_update+0x60>)
    2596:	f7ff fcfa 	bl	1f8e <atomic_or>
		bt_conn_unref(conn);
    259a:	4620      	mov	r0, r4
    259c:	f001 fe4a 	bl	4234 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    25a0:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25a2:	bf15      	itete	ne
    25a4:	2230      	movne	r2, #48	; 0x30
    25a6:	2212      	moveq	r2, #18
    25a8:	2160      	movne	r1, #96	; 0x60
    25aa:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    25ae:	2000      	movs	r0, #0
}
    25b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25b4:	f7ff bf86 	b.w	24c4 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    25b8:	4610      	mov	r0, r2
    25ba:	f7ff fdf7 	bl	21ac <set_le_scan_enable>
		if (err) {
    25be:	2800      	cmp	r0, #0
    25c0:	d0df      	beq.n	2582 <bt_le_scan_update+0x1e>
    25c2:	bd38      	pop	{r3, r4, r5, pc}
    25c4:	20003ad0 	.word	0x20003ad0

000025c8 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    25c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    25cc:	4d4d      	ldr	r5, [pc, #308]	; (2704 <bt_init+0x13c>)
    25ce:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    25d2:	6899      	ldr	r1, [r3, #8]
    25d4:	f011 0101 	ands.w	r1, r1, #1
{
    25d8:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    25da:	d124      	bne.n	2626 <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    25dc:	aa0c      	add	r2, sp, #48	; 0x30
    25de:	f640 4003 	movw	r0, #3075	; 0xc03
    25e2:	f7ff fda5 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    25e6:	4604      	mov	r4, r0
    25e8:	2800      	cmp	r0, #0
    25ea:	f040 8087 	bne.w	26fc <bt_init+0x134>
	u8_t status = buf->data[0];
    25ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25f0:	689b      	ldr	r3, [r3, #8]
	if (status) {
    25f2:	781b      	ldrb	r3, [r3, #0]
    25f4:	b9a3      	cbnz	r3, 2620 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    25f6:	4a44      	ldr	r2, [pc, #272]	; (2708 <bt_init+0x140>)
    25f8:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25fa:	462b      	mov	r3, r5
    25fc:	f3bf 8f5b 	dmb	ish
    2600:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2604:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2608:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    260c:	f3bf 8f5b 	dmb	ish
    2610:	e853 1f00 	ldrex	r1, [r3]
    2614:	e843 2000 	strex	r0, r2, [r3]
    2618:	2800      	cmp	r0, #0
    261a:	d1f9      	bne.n	2610 <bt_init+0x48>
    261c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    2620:	980c      	ldr	r0, [sp, #48]	; 0x30
    2622:	f010 f9a5 	bl	12970 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2626:	aa0c      	add	r2, sp, #48	; 0x30
    2628:	2100      	movs	r1, #0
    262a:	f241 0003 	movw	r0, #4099	; 0x1003
    262e:	f7ff fd7f 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2632:	4604      	mov	r4, r0
    2634:	2800      	cmp	r0, #0
    2636:	d161      	bne.n	26fc <bt_init+0x134>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    263a:	4834      	ldr	r0, [pc, #208]	; (270c <bt_init+0x144>)
    263c:	6899      	ldr	r1, [r3, #8]
    263e:	2208      	movs	r2, #8
    2640:	3101      	adds	r1, #1
    2642:	f7ff fadb 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2646:	980c      	ldr	r0, [sp, #48]	; 0x30
    2648:	f010 f992 	bl	12970 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    264c:	4621      	mov	r1, r4
    264e:	aa0c      	add	r2, sp, #48	; 0x30
    2650:	f241 0001 	movw	r0, #4097	; 0x1001
    2654:	f7ff fd6c 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2658:	4604      	mov	r4, r0
    265a:	2800      	cmp	r0, #0
    265c:	d14e      	bne.n	26fc <bt_init+0x134>
	read_local_ver_complete(rsp);
    265e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2660:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2662:	785a      	ldrb	r2, [r3, #1]
    2664:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2666:	78d9      	ldrb	r1, [r3, #3]
    2668:	789a      	ldrb	r2, [r3, #2]
    266a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    266e:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2670:	791a      	ldrb	r2, [r3, #4]
    2672:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2674:	7a19      	ldrb	r1, [r3, #8]
    2676:	79da      	ldrb	r2, [r3, #7]
    2678:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    267c:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    267e:	795a      	ldrb	r2, [r3, #5]
    2680:	799b      	ldrb	r3, [r3, #6]
    2682:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2686:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2688:	f010 f972 	bl	12970 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    268c:	2103      	movs	r1, #3
    268e:	4820      	ldr	r0, [pc, #128]	; (2710 <bt_init+0x148>)
    2690:	f7ff fd10 	bl	20b4 <atomic_test_bit>
    2694:	4601      	mov	r1, r0
    2696:	b988      	cbnz	r0, 26bc <bt_init+0xf4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2698:	aa0c      	add	r2, sp, #48	; 0x30
    269a:	f241 0009 	movw	r0, #4105	; 0x1009
    269e:	f7ff fd47 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    26a2:	4604      	mov	r4, r0
    26a4:	bb50      	cbnz	r0, 26fc <bt_init+0x134>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    26a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26a8:	481a      	ldr	r0, [pc, #104]	; (2714 <bt_init+0x14c>)
    26aa:	6899      	ldr	r1, [r3, #8]
    26ac:	2206      	movs	r2, #6
    26ae:	3101      	adds	r1, #1
    26b0:	f7ff faa4 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    26b4:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    26b6:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    26b8:	f010 f95a 	bl	12970 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    26bc:	aa0c      	add	r2, sp, #48	; 0x30
    26be:	2100      	movs	r1, #0
    26c0:	f241 0002 	movw	r0, #4098	; 0x1002
    26c4:	f7ff fd34 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    26c8:	4604      	mov	r4, r0
    26ca:	b9b8      	cbnz	r0, 26fc <bt_init+0x134>
	memcpy(bt_dev.supported_commands, rp->commands,
    26cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26ce:	4812      	ldr	r0, [pc, #72]	; (2718 <bt_init+0x150>)
    26d0:	6899      	ldr	r1, [r3, #8]
    26d2:	2240      	movs	r2, #64	; 0x40
    26d4:	3101      	adds	r1, #1
    26d6:	f7ff fa91 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    26da:	980c      	ldr	r0, [sp, #48]	; 0x30
    26dc:	f010 f948 	bl	12970 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    26e0:	7eab      	ldrb	r3, [r5, #26]
    26e2:	065a      	lsls	r2, r3, #25
    26e4:	d424      	bmi.n	2730 <bt_init+0x168>
		BT_ERR("Non-LE capable controller detected!");
    26e6:	4b0d      	ldr	r3, [pc, #52]	; (271c <bt_init+0x154>)
    26e8:	9301      	str	r3, [sp, #4]
    26ea:	9300      	str	r3, [sp, #0]
    26ec:	4a0c      	ldr	r2, [pc, #48]	; (2720 <bt_init+0x158>)
    26ee:	4b0d      	ldr	r3, [pc, #52]	; (2724 <bt_init+0x15c>)
    26f0:	490d      	ldr	r1, [pc, #52]	; (2728 <bt_init+0x160>)
    26f2:	480e      	ldr	r0, [pc, #56]	; (272c <bt_init+0x164>)
    26f4:	f7fe fc4a 	bl	f8c <printk>
		return -ENODEV;
    26f8:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    26fc:	4620      	mov	r0, r4
    26fe:	b00e      	add	sp, #56	; 0x38
    2700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2704:	20003a60 	.word	0x20003a60
    2708:	200002d8 	.word	0x200002d8
    270c:	20003a76 	.word	0x20003a76
    2710:	20003ad0 	.word	0x20003ad0
    2714:	20003a61 	.word	0x20003a61
    2718:	20003a7e 	.word	0x20003a7e
    271c:	000145f1 	.word	0x000145f1
    2720:	00015373 	.word	0x00015373
    2724:	00014c5d 	.word	0x00014c5d
    2728:	000153c2 	.word	0x000153c2
    272c:	00014dfb 	.word	0x00014dfb
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2730:	4621      	mov	r1, r4
    2732:	aa0c      	add	r2, sp, #48	; 0x30
    2734:	f242 0003 	movw	r0, #8195	; 0x2003
    2738:	f7ff fcfa 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    273c:	4604      	mov	r4, r0
    273e:	2800      	cmp	r0, #0
    2740:	d1dc      	bne.n	26fc <bt_init+0x134>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2744:	489b      	ldr	r0, [pc, #620]	; (29b4 <bt_init+0x3ec>)
    2746:	6899      	ldr	r1, [r3, #8]
    2748:	2208      	movs	r2, #8
    274a:	3101      	adds	r1, #1
    274c:	f7ff fa56 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2750:	980c      	ldr	r0, [sp, #48]	; 0x30
    2752:	f010 f90d 	bl	12970 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2756:	4621      	mov	r1, r4
    2758:	aa0c      	add	r2, sp, #48	; 0x30
    275a:	f242 0002 	movw	r0, #8194	; 0x2002
    275e:	f7ff fce7 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2762:	4604      	mov	r4, r0
    2764:	2800      	cmp	r0, #0
    2766:	d1c9      	bne.n	26fc <bt_init+0x134>
    2768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    276a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    276c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    2770:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2774:	b13a      	cbz	r2, 2786 <bt_init+0x1be>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2776:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2778:	488f      	ldr	r0, [pc, #572]	; (29b8 <bt_init+0x3f0>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    277a:	2a02      	cmp	r2, #2
    277c:	bf28      	it	cs
    277e:	2202      	movcs	r2, #2
    2780:	4611      	mov	r1, r2
    2782:	f011 f975 	bl	13a70 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2786:	980c      	ldr	r0, [sp, #48]	; 0x30
    2788:	f010 f8f2 	bl	12970 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    278c:	7eac      	ldrb	r4, [r5, #26]
    278e:	f014 0420 	ands.w	r4, r4, #32
    2792:	f000 80c7 	beq.w	2924 <bt_init+0x35c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2796:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    279a:	071b      	lsls	r3, r3, #28
    279c:	d513      	bpl.n	27c6 <bt_init+0x1fe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    279e:	aa0c      	add	r2, sp, #48	; 0x30
    27a0:	2100      	movs	r1, #0
    27a2:	f242 001c 	movw	r0, #8220	; 0x201c
    27a6:	f7ff fcc3 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    27aa:	4604      	mov	r4, r0
    27ac:	2800      	cmp	r0, #0
    27ae:	d1a5      	bne.n	26fc <bt_init+0x134>
		le_read_supp_states_complete(rsp);
    27b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    27b2:	6883      	ldr	r3, [r0, #8]
    27b4:	f853 2f01 	ldr.w	r2, [r3, #1]!
    27b8:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    27ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    27be:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    27c2:	f010 f8d5 	bl	12970 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    27c6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    27ca:	069f      	lsls	r7, r3, #26
    27cc:	f100 80c6 	bmi.w	295c <bt_init+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    27d0:	2108      	movs	r1, #8
    27d2:	f242 0001 	movw	r0, #8193	; 0x2001
    27d6:	f7ff fc7b 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    27da:	4604      	mov	r4, r0
    27dc:	2800      	cmp	r0, #0
    27de:	f000 80a8 	beq.w	2932 <bt_init+0x36a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    27e2:	2108      	movs	r1, #8
    27e4:	4408      	add	r0, r1
    27e6:	f010 f8f5 	bl	129d4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    27ea:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    27ee:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    27f0:	bf4c      	ite	mi
    27f2:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    27f4:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    27f6:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    27f8:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    27fc:	bf48      	it	mi
    27fe:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2802:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2806:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    280a:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    280e:	bf18      	it	ne
    2810:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2814:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2816:	bf08      	it	eq
    2818:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    281c:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    281e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2822:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2824:	2200      	movs	r2, #0
    2826:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2828:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    282a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    282c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    282e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2830:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2832:	4621      	mov	r1, r4
    2834:	f242 0001 	movw	r0, #8193	; 0x2001
    2838:	f7ff fc7a 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    283c:	4604      	mov	r4, r0
    283e:	2800      	cmp	r0, #0
    2840:	f47f af5c 	bne.w	26fc <bt_init+0x134>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2844:	7eab      	ldrb	r3, [r5, #26]
    2846:	069a      	lsls	r2, r3, #26
    2848:	d421      	bmi.n	288e <bt_init+0x2c6>
	if (bt_dev.le.mtu) {
    284a:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    284e:	b9f1      	cbnz	r1, 288e <bt_init+0x2c6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2850:	aa0c      	add	r2, sp, #48	; 0x30
    2852:	f241 0005 	movw	r0, #4101	; 0x1005
    2856:	f7ff fc6b 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    285a:	4604      	mov	r4, r0
    285c:	2800      	cmp	r0, #0
    285e:	f47f af4d 	bne.w	26fc <bt_init+0x134>
	if (bt_dev.le.mtu) {
    2862:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2866:	b97b      	cbnz	r3, 2888 <bt_init+0x2c0>
    2868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    286a:	4853      	ldr	r0, [pc, #332]	; (29b8 <bt_init+0x3f0>)
    286c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    286e:	7899      	ldrb	r1, [r3, #2]
    2870:	785a      	ldrb	r2, [r3, #1]
    2872:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2876:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    287a:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    287c:	2a02      	cmp	r2, #2
    287e:	bf28      	it	cs
    2880:	2202      	movcs	r2, #2
    2882:	4611      	mov	r1, r2
    2884:	f011 f8f4 	bl	13a70 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2888:	980c      	ldr	r0, [sp, #48]	; 0x30
    288a:	f010 f871 	bl	12970 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    288e:	2108      	movs	r1, #8
    2890:	f640 4001 	movw	r0, #3073	; 0xc01
    2894:	f7ff fc1c 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2898:	4604      	mov	r4, r0
    289a:	2800      	cmp	r0, #0
    289c:	d049      	beq.n	2932 <bt_init+0x36a>
	ev = net_buf_add(buf, sizeof(*ev));
    289e:	2108      	movs	r1, #8
    28a0:	4408      	add	r0, r1
    28a2:	f010 f897 	bl	129d4 <net_buf_simple_add>
	dst[0] = val;
    28a6:	2310      	movs	r3, #16
    28a8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    28aa:	2388      	movs	r3, #136	; 0x88
    28ac:	7043      	strb	r3, [r0, #1]
    28ae:	2302      	movs	r3, #2
	dst[0] = val;
    28b0:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    28b2:	70c3      	strb	r3, [r0, #3]
    28b4:	2320      	movs	r3, #32
	dst[0] = val;
    28b6:	7082      	strb	r2, [r0, #2]
    28b8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    28ba:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    28bc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    28be:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    28c0:	4621      	mov	r1, r4
    28c2:	f640 4001 	movw	r0, #3073	; 0xc01
    28c6:	f7ff fc33 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    28ca:	4604      	mov	r4, r0
    28cc:	2800      	cmp	r0, #0
    28ce:	f47f af15 	bne.w	26fc <bt_init+0x134>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    28d2:	4601      	mov	r1, r0
    28d4:	aa0c      	add	r2, sp, #48	; 0x30
    28d6:	f64f 4001 	movw	r0, #64513	; 0xfc01
    28da:	f7ff fc29 	bl	2130 <bt_hci_cmd_send_sync>
    28de:	4e37      	ldr	r6, [pc, #220]	; (29bc <bt_init+0x3f4>)
	if (err) {
    28e0:	2800      	cmp	r0, #0
    28e2:	d07b      	beq.n	29dc <bt_init+0x414>
		BT_WARN("Vendor HCI extensions not available");
    28e4:	4b36      	ldr	r3, [pc, #216]	; (29c0 <bt_init+0x3f8>)
    28e6:	4a37      	ldr	r2, [pc, #220]	; (29c4 <bt_init+0x3fc>)
    28e8:	4937      	ldr	r1, [pc, #220]	; (29c8 <bt_init+0x400>)
    28ea:	4838      	ldr	r0, [pc, #224]	; (29cc <bt_init+0x404>)
    28ec:	9601      	str	r6, [sp, #4]
    28ee:	9600      	str	r6, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    28f0:	f7fe fb4c 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    28f4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    28f6:	2207      	movs	r2, #7
    28f8:	a90c      	add	r1, sp, #48	; 0x30
    28fa:	4835      	ldr	r0, [pc, #212]	; (29d0 <bt_init+0x408>)
    28fc:	930c      	str	r3, [sp, #48]	; 0x30
    28fe:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2902:	f7ff f966 	bl	1bd2 <memcmp>
    2906:	2800      	cmp	r0, #0
    2908:	f040 80e2 	bne.w	2ad0 <bt_init+0x508>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    290c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2910:	07db      	lsls	r3, r3, #31
    2912:	f100 80fe 	bmi.w	2b12 <bt_init+0x54a>
		BT_WARN("Read Static Addresses command not available");
    2916:	9601      	str	r6, [sp, #4]
    2918:	9600      	str	r6, [sp, #0]
    291a:	4b2e      	ldr	r3, [pc, #184]	; (29d4 <bt_init+0x40c>)
    291c:	4a29      	ldr	r2, [pc, #164]	; (29c4 <bt_init+0x3fc>)
    291e:	492a      	ldr	r1, [pc, #168]	; (29c8 <bt_init+0x400>)
    2920:	482d      	ldr	r0, [pc, #180]	; (29d8 <bt_init+0x410>)
    2922:	e103      	b.n	2b2c <bt_init+0x564>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2924:	2102      	movs	r1, #2
    2926:	f640 406d 	movw	r0, #3181	; 0xc6d
    292a:	f7ff fbd1 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    292e:	4606      	mov	r6, r0
    2930:	b910      	cbnz	r0, 2938 <bt_init+0x370>
		return -ENOBUFS;
    2932:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2936:	e6e1      	b.n	26fc <bt_init+0x134>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2938:	2102      	movs	r1, #2
    293a:	3008      	adds	r0, #8
    293c:	f010 f84a 	bl	129d4 <net_buf_simple_add>
		cp_le->le = 0x01;
    2940:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2942:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2944:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2946:	4622      	mov	r2, r4
    2948:	4631      	mov	r1, r6
    294a:	f640 406d 	movw	r0, #3181	; 0xc6d
    294e:	f7ff fbef 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2952:	4604      	mov	r4, r0
    2954:	2800      	cmp	r0, #0
    2956:	f43f af1e 	beq.w	2796 <bt_init+0x1ce>
    295a:	e6cf      	b.n	26fc <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    295c:	aa0c      	add	r2, sp, #48	; 0x30
    295e:	2100      	movs	r1, #0
    2960:	f242 002f 	movw	r0, #8239	; 0x202f
    2964:	f7ff fbe4 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2968:	4604      	mov	r4, r0
    296a:	2800      	cmp	r0, #0
    296c:	f47f aec6 	bne.w	26fc <bt_init+0x134>
		rp = (void *)rsp->data;
    2970:	980c      	ldr	r0, [sp, #48]	; 0x30
    2972:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2974:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2978:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    297c:	f00f fff8 	bl	12970 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2980:	2104      	movs	r1, #4
    2982:	f242 0024 	movw	r0, #8228	; 0x2024
    2986:	f7ff fba3 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    298a:	4606      	mov	r6, r0
    298c:	2800      	cmp	r0, #0
    298e:	d0d0      	beq.n	2932 <bt_init+0x36a>
		cp = net_buf_add(buf, sizeof(*cp));
    2990:	2104      	movs	r1, #4
    2992:	3008      	adds	r0, #8
    2994:	f010 f81e 	bl	129d4 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2998:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    299a:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    299e:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29a0:	4631      	mov	r1, r6
    29a2:	f242 0024 	movw	r0, #8228	; 0x2024
    29a6:	f7ff fbc3 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    29aa:	4604      	mov	r4, r0
    29ac:	2800      	cmp	r0, #0
    29ae:	f43f af0f 	beq.w	27d0 <bt_init+0x208>
    29b2:	e6a3      	b.n	26fc <bt_init+0x134>
    29b4:	20003ad8 	.word	0x20003ad8
    29b8:	20003aec 	.word	0x20003aec
    29bc:	000145f1 	.word	0x000145f1
    29c0:	00014c97 	.word	0x00014c97
    29c4:	000153bb 	.word	0x000153bb
    29c8:	000153c2 	.word	0x000153c2
    29cc:	00014e2f 	.word	0x00014e2f
    29d0:	20003a60 	.word	0x20003a60
    29d4:	00014c78 	.word	0x00014c78
    29d8:	00014fcc 	.word	0x00014fcc
	rp.info = (void *)rsp->data;
    29dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    29de:	4972      	ldr	r1, [pc, #456]	; (2ba8 <bt_init+0x5e0>)
	rp.info = (void *)rsp->data;
    29e0:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    29e2:	4872      	ldr	r0, [pc, #456]	; (2bac <bt_init+0x5e4>)
    29e4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    29e8:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    29ea:	2b03      	cmp	r3, #3
		return plat_str[platform];
    29ec:	bf96      	itet	ls
    29ee:	4a70      	ldrls	r2, [pc, #448]	; (2bb0 <bt_init+0x5e8>)
	return "unknown";
    29f0:	4a70      	ldrhi	r2, [pc, #448]	; (2bb4 <bt_init+0x5ec>)
		return plat_str[platform];
    29f2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    29f6:	9201      	str	r2, [sp, #4]
    29f8:	4b6f      	ldr	r3, [pc, #444]	; (2bb8 <bt_init+0x5f0>)
    29fa:	4a70      	ldr	r2, [pc, #448]	; (2bbc <bt_init+0x5f4>)
    29fc:	9603      	str	r6, [sp, #12]
    29fe:	9600      	str	r6, [sp, #0]
    2a00:	f7fe fac4 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a04:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a08:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a0c:	2b02      	cmp	r3, #2
    2a0e:	d13a      	bne.n	2a86 <bt_init+0x4be>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2a10:	2a02      	cmp	r2, #2
    2a12:	d838      	bhi.n	2a86 <bt_init+0x4be>
		return nordic_str[variant];
    2a14:	4b6a      	ldr	r3, [pc, #424]	; (2bc0 <bt_init+0x5f8>)
    2a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a1a:	9202      	str	r2, [sp, #8]
    2a1c:	9301      	str	r3, [sp, #4]
    2a1e:	4a67      	ldr	r2, [pc, #412]	; (2bbc <bt_init+0x5f4>)
    2a20:	4b65      	ldr	r3, [pc, #404]	; (2bb8 <bt_init+0x5f0>)
    2a22:	4961      	ldr	r1, [pc, #388]	; (2ba8 <bt_init+0x5e0>)
    2a24:	9603      	str	r6, [sp, #12]
    2a26:	9600      	str	r6, [sp, #0]
    2a28:	4866      	ldr	r0, [pc, #408]	; (2bc4 <bt_init+0x5fc>)
    2a2a:	f7fe faaf 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a2e:	7963      	ldrb	r3, [r4, #5]
    2a30:	9606      	str	r6, [sp, #24]
    2a32:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a36:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2a38:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a3a:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2a3e:	bf98      	it	ls
    2a40:	4a61      	ldrls	r2, [pc, #388]	; (2bc8 <bt_init+0x600>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a42:	9104      	str	r1, [sp, #16]
    2a44:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2a46:	bf94      	ite	ls
    2a48:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2a4c:	4a59      	ldrhi	r2, [pc, #356]	; (2bb4 <bt_init+0x5ec>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a4e:	9103      	str	r1, [sp, #12]
    2a50:	9302      	str	r3, [sp, #8]
    2a52:	4955      	ldr	r1, [pc, #340]	; (2ba8 <bt_init+0x5e0>)
    2a54:	4b58      	ldr	r3, [pc, #352]	; (2bb8 <bt_init+0x5f0>)
    2a56:	9201      	str	r2, [sp, #4]
    2a58:	9600      	str	r6, [sp, #0]
    2a5a:	4a58      	ldr	r2, [pc, #352]	; (2bbc <bt_init+0x5f4>)
    2a5c:	485b      	ldr	r0, [pc, #364]	; (2bcc <bt_init+0x604>)
    2a5e:	f7fe fa95 	bl	f8c <printk>
	net_buf_unref(rsp);
    2a62:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a64:	f00f ff84 	bl	12970 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2a68:	aa0c      	add	r2, sp, #48	; 0x30
    2a6a:	2100      	movs	r1, #0
    2a6c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2a70:	f7ff fb5e 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2a74:	4604      	mov	r4, r0
    2a76:	b140      	cbz	r0, 2a8a <bt_init+0x4c2>
		BT_WARN("Failed to read supported vendor features");
    2a78:	9601      	str	r6, [sp, #4]
    2a7a:	9600      	str	r6, [sp, #0]
    2a7c:	4b4e      	ldr	r3, [pc, #312]	; (2bb8 <bt_init+0x5f0>)
    2a7e:	4a54      	ldr	r2, [pc, #336]	; (2bd0 <bt_init+0x608>)
    2a80:	4949      	ldr	r1, [pc, #292]	; (2ba8 <bt_init+0x5e0>)
    2a82:	4854      	ldr	r0, [pc, #336]	; (2bd4 <bt_init+0x60c>)
    2a84:	e734      	b.n	28f0 <bt_init+0x328>
		return "unknown";
    2a86:	4b4b      	ldr	r3, [pc, #300]	; (2bb4 <bt_init+0x5ec>)
    2a88:	e7c7      	b.n	2a1a <bt_init+0x452>
	rp.cmds = (void *)rsp->data;
    2a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2a8c:	4852      	ldr	r0, [pc, #328]	; (2bd8 <bt_init+0x610>)
    2a8e:	6899      	ldr	r1, [r3, #8]
    2a90:	2202      	movs	r2, #2
    2a92:	3101      	adds	r1, #1
    2a94:	f7ff f8b2 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a98:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a9a:	f00f ff69 	bl	12970 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2a9e:	aa0c      	add	r2, sp, #48	; 0x30
    2aa0:	4621      	mov	r1, r4
    2aa2:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2aa6:	f7ff fb43 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2aaa:	b130      	cbz	r0, 2aba <bt_init+0x4f2>
		BT_WARN("Failed to read supported vendor commands");
    2aac:	9601      	str	r6, [sp, #4]
    2aae:	9600      	str	r6, [sp, #0]
    2ab0:	4b41      	ldr	r3, [pc, #260]	; (2bb8 <bt_init+0x5f0>)
    2ab2:	4a47      	ldr	r2, [pc, #284]	; (2bd0 <bt_init+0x608>)
    2ab4:	493c      	ldr	r1, [pc, #240]	; (2ba8 <bt_init+0x5e0>)
    2ab6:	4849      	ldr	r0, [pc, #292]	; (2bdc <bt_init+0x614>)
    2ab8:	e71a      	b.n	28f0 <bt_init+0x328>
	rp.feat = (void *)rsp->data;
    2aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2abc:	4848      	ldr	r0, [pc, #288]	; (2be0 <bt_init+0x618>)
    2abe:	6899      	ldr	r1, [r3, #8]
    2ac0:	2201      	movs	r2, #1
    2ac2:	4411      	add	r1, r2
    2ac4:	f7ff f89a 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2ac8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2aca:	f00f ff51 	bl	12970 <net_buf_unref>
    2ace:	e711      	b.n	28f4 <bt_init+0x32c>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2ad0:	4b44      	ldr	r3, [pc, #272]	; (2be4 <bt_init+0x61c>)
    2ad2:	6818      	ldr	r0, [r3, #0]
    2ad4:	889a      	ldrh	r2, [r3, #4]
    2ad6:	900a      	str	r0, [sp, #40]	; 0x28
    2ad8:	799b      	ldrb	r3, [r3, #6]
    2ada:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2ade:	a90a      	add	r1, sp, #40	; 0x28
    2ae0:	2207      	movs	r2, #7
    2ae2:	4841      	ldr	r0, [pc, #260]	; (2be8 <bt_init+0x620>)
    2ae4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2ae8:	f7ff f873 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2aec:	2800      	cmp	r0, #0
    2aee:	f43f af0d 	beq.w	290c <bt_init+0x344>
		bt_dev_show_info();
    2af2:	f7ff fc59 	bl	23a8 <bt_dev_show_info>
		err = bt_conn_init();
    2af6:	f001 ffed 	bl	4ad4 <bt_conn_init>
		if (err) {
    2afa:	4604      	mov	r4, r0
    2afc:	2800      	cmp	r0, #0
    2afe:	f47f adfd 	bne.w	26fc <bt_init+0x134>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2b02:	2102      	movs	r1, #2
    2b04:	4839      	ldr	r0, [pc, #228]	; (2bec <bt_init+0x624>)
    2b06:	f7ff fa42 	bl	1f8e <atomic_or>
	bt_le_scan_update(false);
    2b0a:	4620      	mov	r0, r4
    2b0c:	f7ff fd2a 	bl	2564 <bt_le_scan_update>
    2b10:	e5f4      	b.n	26fc <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2b12:	aa09      	add	r2, sp, #36	; 0x24
    2b14:	2100      	movs	r1, #0
    2b16:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2b1a:	f7ff fb09 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2b1e:	b140      	cbz	r0, 2b32 <bt_init+0x56a>
			BT_WARN("Failed to read static addresses");
    2b20:	4b33      	ldr	r3, [pc, #204]	; (2bf0 <bt_init+0x628>)
    2b22:	4a2b      	ldr	r2, [pc, #172]	; (2bd0 <bt_init+0x608>)
    2b24:	4920      	ldr	r1, [pc, #128]	; (2ba8 <bt_init+0x5e0>)
    2b26:	4833      	ldr	r0, [pc, #204]	; (2bf4 <bt_init+0x62c>)
    2b28:	9601      	str	r6, [sp, #4]
    2b2a:	9600      	str	r6, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    2b2c:	f7fe fa2e 	bl	f8c <printk>
    2b30:	e026      	b.n	2b80 <bt_init+0x5b8>
		rp = (void *)rsp->data;
    2b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b34:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2b36:	784b      	ldrb	r3, [r1, #1]
    2b38:	b1bb      	cbz	r3, 2b6a <bt_init+0x5a2>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2b3a:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2b3c:	2206      	movs	r2, #6
    2b3e:	3102      	adds	r1, #2
    2b40:	482d      	ldr	r0, [pc, #180]	; (2bf8 <bt_init+0x630>)
    2b42:	702b      	strb	r3, [r5, #0]
    2b44:	f7ff f85a 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    2b48:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b4a:	f00f ff11 	bl	12970 <net_buf_unref>
		return bt_set_static_addr();
    2b4e:	f7ff fbfb 	bl	2348 <bt_set_static_addr>
    2b52:	4604      	mov	r4, r0
		if (err) {
    2b54:	2800      	cmp	r0, #0
    2b56:	d0cc      	beq.n	2af2 <bt_init+0x52a>
			BT_ERR("Unable to set identity address");
    2b58:	9601      	str	r6, [sp, #4]
    2b5a:	9600      	str	r6, [sp, #0]
    2b5c:	4b27      	ldr	r3, [pc, #156]	; (2bfc <bt_init+0x634>)
    2b5e:	4a28      	ldr	r2, [pc, #160]	; (2c00 <bt_init+0x638>)
    2b60:	4911      	ldr	r1, [pc, #68]	; (2ba8 <bt_init+0x5e0>)
    2b62:	4828      	ldr	r0, [pc, #160]	; (2c04 <bt_init+0x63c>)
    2b64:	f7fe fa12 	bl	f8c <printk>
    2b68:	e5c8      	b.n	26fc <bt_init+0x134>
		BT_WARN("No static addresses stored in controller");
    2b6a:	9601      	str	r6, [sp, #4]
    2b6c:	9600      	str	r6, [sp, #0]
    2b6e:	4b20      	ldr	r3, [pc, #128]	; (2bf0 <bt_init+0x628>)
    2b70:	4a17      	ldr	r2, [pc, #92]	; (2bd0 <bt_init+0x608>)
    2b72:	490d      	ldr	r1, [pc, #52]	; (2ba8 <bt_init+0x5e0>)
    2b74:	4824      	ldr	r0, [pc, #144]	; (2c08 <bt_init+0x640>)
    2b76:	f7fe fa09 	bl	f8c <printk>
		net_buf_unref(rsp);
    2b7a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b7c:	f00f fef8 	bl	12970 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2b80:	4819      	ldr	r0, [pc, #100]	; (2be8 <bt_init+0x620>)
    2b82:	f7ff fbd3 	bl	232c <bt_addr_le_create_static>
		if (err) {
    2b86:	4604      	mov	r4, r0
    2b88:	2800      	cmp	r0, #0
    2b8a:	d1e5      	bne.n	2b58 <bt_init+0x590>
		BT_WARN("Using temporary static random address %s",
    2b8c:	481a      	ldr	r0, [pc, #104]	; (2bf8 <bt_init+0x630>)
    2b8e:	f7ff f8bb 	bl	1d08 <bt_addr_str>
    2b92:	9602      	str	r6, [sp, #8]
    2b94:	9001      	str	r0, [sp, #4]
    2b96:	9600      	str	r6, [sp, #0]
    2b98:	4b15      	ldr	r3, [pc, #84]	; (2bf0 <bt_init+0x628>)
    2b9a:	4a0d      	ldr	r2, [pc, #52]	; (2bd0 <bt_init+0x608>)
    2b9c:	4902      	ldr	r1, [pc, #8]	; (2ba8 <bt_init+0x5e0>)
    2b9e:	481b      	ldr	r0, [pc, #108]	; (2c0c <bt_init+0x644>)
    2ba0:	f7fe f9f4 	bl	f8c <printk>
    2ba4:	e7d3      	b.n	2b4e <bt_init+0x586>
    2ba6:	bf00      	nop
    2ba8:	000153c2 	.word	0x000153c2
    2bac:	00014e63 	.word	0x00014e63
    2bb0:	0001555c 	.word	0x0001555c
    2bb4:	0001564c 	.word	0x0001564c
    2bb8:	00014c97 	.word	0x00014c97
    2bbc:	00014ccb 	.word	0x00014ccb
    2bc0:	00015550 	.word	0x00015550
    2bc4:	00014e8c 	.word	0x00014e8c
    2bc8:	0001563c 	.word	0x0001563c
    2bcc:	00014eb4 	.word	0x00014eb4
    2bd0:	000153bb 	.word	0x000153bb
    2bd4:	00014ef1 	.word	0x00014ef1
    2bd8:	20003abf 	.word	0x20003abf
    2bdc:	00014f2a 	.word	0x00014f2a
    2be0:	20003abe 	.word	0x20003abe
    2be4:	0001453c 	.word	0x0001453c
    2be8:	20003a60 	.word	0x20003a60
    2bec:	20003ad0 	.word	0x20003ad0
    2bf0:	00014c78 	.word	0x00014c78
    2bf4:	00014f63 	.word	0x00014f63
    2bf8:	20003a61 	.word	0x20003a61
    2bfc:	00014ca3 	.word	0x00014ca3
    2c00:	00015373 	.word	0x00015373
    2c04:	00015041 	.word	0x00015041
    2c08:	00014f93 	.word	0x00014f93
    2c0c:	00015008 	.word	0x00015008

00002c10 <init_work>:

static void init_work(struct k_work *work)
{
    2c10:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2c12:	f7ff fcd9 	bl	25c8 <bt_init>
	if (ready_cb) {
    2c16:	4b03      	ldr	r3, [pc, #12]	; (2c24 <init_work+0x14>)
    2c18:	681b      	ldr	r3, [r3, #0]
    2c1a:	b113      	cbz	r3, 2c22 <init_work+0x12>
		ready_cb(err);
	}
}
    2c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2c20:	4718      	bx	r3
    2c22:	bd10      	pop	{r4, pc}
    2c24:	200002d4 	.word	0x200002d4

00002c28 <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    2c28:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c2a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2c2c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c2e:	f242 0032 	movw	r0, #8242	; 0x2032
    2c32:	f7ff fa4d 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2c36:	4605      	mov	r5, r0
    2c38:	b198      	cbz	r0, 2c62 <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2c3a:	2107      	movs	r1, #7
    2c3c:	3008      	adds	r0, #8
    2c3e:	f00f fec9 	bl	129d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c42:	8823      	ldrh	r3, [r4, #0]
    2c44:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2c46:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c48:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2c4a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c4c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c4e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2c50:	7144      	strb	r4, [r0, #5]
    2c52:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2c54:	4629      	mov	r1, r5
    2c56:	f242 0032 	movw	r0, #8242	; 0x2032
    2c5a:	f7ff fbfb 	bl	2454 <bt_hci_cmd_send>
	return 0;
    2c5e:	4620      	mov	r0, r4
    2c60:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2c62:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2c66:	bd38      	pop	{r3, r4, r5, pc}

00002c68 <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c6a:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2c6c:	aa01      	add	r2, sp, #4
    2c6e:	2100      	movs	r1, #0
    2c70:	f242 002f 	movw	r0, #8239	; 0x202f
    2c74:	f7ff fa5c 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2c78:	b9d8      	cbnz	r0, 2cb2 <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    2c7a:	9801      	ldr	r0, [sp, #4]
    2c7c:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2c7e:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2c82:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2c86:	f00f fe73 	bl	12970 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2c8a:	2106      	movs	r1, #6
    2c8c:	f242 0022 	movw	r0, #8226	; 0x2022
    2c90:	f7ff fa1e 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2c94:	4604      	mov	r4, r0
    2c96:	b170      	cbz	r0, 2cb6 <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2c98:	2106      	movs	r1, #6
    2c9a:	3008      	adds	r0, #8
    2c9c:	f00f fe9a 	bl	129d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2ca0:	883b      	ldrh	r3, [r7, #0]
    2ca2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2ca4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2ca6:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2ca8:	4621      	mov	r1, r4
    2caa:	f242 0022 	movw	r0, #8226	; 0x2022
    2cae:	f7ff fbd1 	bl	2454 <bt_hci_cmd_send>
}
    2cb2:	b003      	add	sp, #12
    2cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2cb6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2cba:	e7fa      	b.n	2cb2 <hci_le_set_data_len.isra.29+0x4a>

00002cbc <le_enh_conn_complete>:
{
    2cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2cbe:	7803      	ldrb	r3, [r0, #0]
{
    2cc0:	b089      	sub	sp, #36	; 0x24
    2cc2:	4605      	mov	r5, r0
	if (evt->status) {
    2cc4:	b17b      	cbz	r3, 2ce6 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2cc6:	2102      	movs	r1, #2
    2cc8:	2000      	movs	r0, #0
    2cca:	f001 fa95 	bl	41f8 <bt_conn_lookup_state_le>
		if (!conn) {
    2cce:	4604      	mov	r4, r0
    2cd0:	b138      	cbz	r0, 2ce2 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2cd2:	782b      	ldrb	r3, [r5, #0]
    2cd4:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2cd6:	2100      	movs	r1, #0
    2cd8:	f001 fb62 	bl	43a0 <bt_conn_set_state>
		bt_conn_unref(conn);
    2cdc:	4620      	mov	r0, r4
    2cde:	f001 faa9 	bl	4234 <bt_conn_unref>
}
    2ce2:	b009      	add	sp, #36	; 0x24
    2ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2ce6:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2ce8:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2cec:	4621      	mov	r1, r4
    2cee:	a806      	add	r0, sp, #24
    2cf0:	f7ff f94a 	bl	1f88 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2cf4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2cf8:	3b02      	subs	r3, #2
    2cfa:	b2db      	uxtb	r3, r3
    2cfc:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2cfe:	b2b7      	uxth	r7, r6
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d00:	d829      	bhi.n	2d56 <le_enh_conn_complete+0x9a>
    2d02:	2206      	movs	r2, #6
    2d04:	f105 0111 	add.w	r1, r5, #17
    2d08:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2d0c:	f88d 3018 	strb.w	r3, [sp, #24]
    2d10:	f7fe ff74 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2d14:	2301      	movs	r3, #1
    2d16:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d1a:	2102      	movs	r1, #2
    2d1c:	a806      	add	r0, sp, #24
    2d1e:	f001 fa6b 	bl	41f8 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d22:	78eb      	ldrb	r3, [r5, #3]
    2d24:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d26:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d28:	d109      	bne.n	2d3e <le_enh_conn_complete+0x82>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d2a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2d2e:	484a      	ldr	r0, [pc, #296]	; (2e58 <le_enh_conn_complete+0x19c>)
    2d30:	f7ff f93e 	bl	1fb0 <atomic_and>
		if (!conn) {
    2d34:	b9a4      	cbnz	r4, 2d60 <le_enh_conn_complete+0xa4>
			conn = bt_conn_add_le(&id_addr);
    2d36:	a806      	add	r0, sp, #24
    2d38:	f001 f9b2 	bl	40a0 <bt_conn_add_le>
    2d3c:	4604      	mov	r4, r0
	if (!conn) {
    2d3e:	b97c      	cbnz	r4, 2d60 <le_enh_conn_complete+0xa4>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2d40:	4b46      	ldr	r3, [pc, #280]	; (2e5c <le_enh_conn_complete+0x1a0>)
    2d42:	9302      	str	r3, [sp, #8]
    2d44:	e88d 0088 	stmia.w	sp, {r3, r7}
    2d48:	4a45      	ldr	r2, [pc, #276]	; (2e60 <le_enh_conn_complete+0x1a4>)
    2d4a:	4b46      	ldr	r3, [pc, #280]	; (2e64 <le_enh_conn_complete+0x1a8>)
    2d4c:	4946      	ldr	r1, [pc, #280]	; (2e68 <le_enh_conn_complete+0x1ac>)
    2d4e:	4847      	ldr	r0, [pc, #284]	; (2e6c <le_enh_conn_complete+0x1b0>)
    2d50:	f7fe f91c 	bl	f8c <printk>
		return;
    2d54:	e7c5      	b.n	2ce2 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2d56:	4621      	mov	r1, r4
    2d58:	a804      	add	r0, sp, #16
    2d5a:	f7ff f915 	bl	1f88 <bt_addr_le_copy>
    2d5e:	e7dc      	b.n	2d1a <le_enh_conn_complete+0x5e>
	conn->handle   = handle;
    2d60:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d62:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    2d64:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d68:	f7ff f90e 	bl	1f88 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2d6c:	7e2a      	ldrb	r2, [r5, #24]
    2d6e:	7deb      	ldrb	r3, [r5, #23]
    2d70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d74:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2d78:	7eaa      	ldrb	r2, [r5, #26]
    2d7a:	7e6b      	ldrb	r3, [r5, #25]
    2d7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d80:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2d84:	7eeb      	ldrb	r3, [r5, #27]
    2d86:	7f2a      	ldrb	r2, [r5, #28]
    2d88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d8c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    2d90:	78ee      	ldrb	r6, [r5, #3]
    2d92:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2d94:	2e01      	cmp	r6, #1
    2d96:	d11a      	bne.n	2dce <le_enh_conn_complete+0x112>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2d98:	4f35      	ldr	r7, [pc, #212]	; (2e70 <le_enh_conn_complete+0x1b4>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2d9a:	a904      	add	r1, sp, #16
    2d9c:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    2da0:	f7ff f8f2 	bl	1f88 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2da4:	4639      	mov	r1, r7
    2da6:	f104 0052 	add.w	r0, r4, #82	; 0x52
    2daa:	f7ff f8ed 	bl	1f88 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2dae:	2107      	movs	r1, #7
    2db0:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2db4:	f7ff f97e 	bl	20b4 <atomic_test_bit>
    2db8:	b148      	cbz	r0, 2dce <le_enh_conn_complete+0x112>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2dba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2dbe:	2200      	movs	r2, #0
    2dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2dc4:	4313      	orrs	r3, r2
    2dc6:	d002      	beq.n	2dce <le_enh_conn_complete+0x112>
			set_advertise_enable(true);
    2dc8:	4630      	mov	r0, r6
    2dca:	f7ff fa65 	bl	2298 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2dce:	2103      	movs	r1, #3
    2dd0:	4620      	mov	r0, r4
    2dd2:	f001 fae5 	bl	43a0 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2dd6:	7a63      	ldrb	r3, [r4, #9]
    2dd8:	2b03      	cmp	r3, #3
    2dda:	d118      	bne.n	2e0e <le_enh_conn_complete+0x152>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2ddc:	78eb      	ldrb	r3, [r5, #3]
    2dde:	b123      	cbz	r3, 2dea <le_enh_conn_complete+0x12e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2de0:	4b23      	ldr	r3, [pc, #140]	; (2e70 <le_enh_conn_complete+0x1b4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2de2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2de6:	0719      	lsls	r1, r3, #28
    2de8:	d518      	bpl.n	2e1c <le_enh_conn_complete+0x160>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2dea:	2102      	movs	r1, #2
    2dec:	f242 0016 	movw	r0, #8214	; 0x2016
    2df0:	f7ff f96e 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2df4:	4605      	mov	r5, r0
    2df6:	b188      	cbz	r0, 2e1c <le_enh_conn_complete+0x160>
	cp = net_buf_add(buf, sizeof(*cp));
    2df8:	2102      	movs	r1, #2
    2dfa:	3008      	adds	r0, #8
    2dfc:	f00f fdea 	bl	129d4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e00:	8823      	ldrh	r3, [r4, #0]
    2e02:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2e04:	4629      	mov	r1, r5
    2e06:	f242 0016 	movw	r0, #8214	; 0x2016
    2e0a:	f7ff fb23 	bl	2454 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    2e0e:	4620      	mov	r0, r4
    2e10:	f001 fa10 	bl	4234 <bt_conn_unref>
	bt_le_scan_update(false);
    2e14:	2000      	movs	r0, #0
    2e16:	f7ff fba5 	bl	2564 <bt_le_scan_update>
    2e1a:	e762      	b.n	2ce2 <le_enh_conn_complete+0x26>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2e1c:	4d14      	ldr	r5, [pc, #80]	; (2e70 <le_enh_conn_complete+0x1b4>)
    2e1e:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2e22:	07d2      	lsls	r2, r2, #31
    2e24:	d508      	bpl.n	2e38 <le_enh_conn_complete+0x17c>
		err = hci_le_set_phy(conn);
    2e26:	4620      	mov	r0, r4
    2e28:	f7ff fefe 	bl	2c28 <hci_le_set_phy.isra.28>
		if (!err) {
    2e2c:	b920      	cbnz	r0, 2e38 <le_enh_conn_complete+0x17c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e2e:	2180      	movs	r1, #128	; 0x80
    2e30:	1d20      	adds	r0, r4, #4
    2e32:	f7ff f8ac 	bl	1f8e <atomic_or>
    2e36:	e7ea      	b.n	2e0e <le_enh_conn_complete+0x152>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2e38:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2e3c:	069b      	lsls	r3, r3, #26
    2e3e:	d506      	bpl.n	2e4e <le_enh_conn_complete+0x192>
		err = hci_le_set_data_len(conn);
    2e40:	4620      	mov	r0, r4
    2e42:	f7ff ff11 	bl	2c68 <hci_le_set_data_len.isra.29>
		if (!err) {
    2e46:	b910      	cbnz	r0, 2e4e <le_enh_conn_complete+0x192>
    2e48:	f44f 7180 	mov.w	r1, #256	; 0x100
    2e4c:	e7f0      	b.n	2e30 <le_enh_conn_complete+0x174>
	update_conn_param(conn);
    2e4e:	4620      	mov	r0, r4
    2e50:	f7ff f8c0 	bl	1fd4 <update_conn_param>
    2e54:	e7db      	b.n	2e0e <le_enh_conn_complete+0x152>
    2e56:	bf00      	nop
    2e58:	20003ad0 	.word	0x20003ad0
    2e5c:	000145f1 	.word	0x000145f1
    2e60:	00015373 	.word	0x00015373
    2e64:	00014b8d 	.word	0x00014b8d
    2e68:	000153c2 	.word	0x000153c2
    2e6c:	000154f8 	.word	0x000154f8
    2e70:	20003a60 	.word	0x20003a60

00002e74 <le_conn_param_neg_reply>:
{
    2e74:	b570      	push	{r4, r5, r6, lr}
    2e76:	4606      	mov	r6, r0
    2e78:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2e7a:	f242 0021 	movw	r0, #8225	; 0x2021
    2e7e:	2103      	movs	r1, #3
    2e80:	f7ff f926 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2e84:	4604      	mov	r4, r0
    2e86:	b160      	cbz	r0, 2ea2 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2e88:	2103      	movs	r1, #3
    2e8a:	3008      	adds	r0, #8
    2e8c:	f00f fda2 	bl	129d4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2e90:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2e92:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e94:	4621      	mov	r1, r4
    2e96:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e9e:	f7ff bad9 	b.w	2454 <bt_hci_cmd_send>
}
    2ea2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2ea6:	bd70      	pop	{r4, r5, r6, pc}

00002ea8 <hci_tx_thread>:
{
    2ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2eac:	f8df a148 	ldr.w	sl, [pc, #328]	; 2ff8 <hci_tx_thread+0x150>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2eb0:	4d4f      	ldr	r5, [pc, #316]	; (2ff0 <hci_tx_thread+0x148>)
{
    2eb2:	b085      	sub	sp, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    2eb4:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2eb8:	484e      	ldr	r0, [pc, #312]	; (2ff4 <hci_tx_thread+0x14c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2eba:	f36f 1307 	bfc	r3, #4, #4
    2ebe:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2ec2:	f001 f9ff 	bl	42c4 <bt_conn_prepare_events>
    2ec6:	f100 0901 	add.w	r9, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ece:	4649      	mov	r1, r9
    2ed0:	4849      	ldr	r0, [pc, #292]	; (2ff8 <hci_tx_thread+0x150>)
    2ed2:	f011 fa17 	bl	14304 <_impl_k_poll>
		BT_ASSERT(err == 0);
    2ed6:	b948      	cbnz	r0, 2eec <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2ed8:	4c48      	ldr	r4, [pc, #288]	; (2ffc <hci_tx_thread+0x154>)
    2eda:	4e47      	ldr	r6, [pc, #284]	; (2ff8 <hci_tx_thread+0x150>)
    2edc:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
	for (; count; ev++, count--) {
    2ee0:	f1b9 0f00 	cmp.w	r9, #0
    2ee4:	d111      	bne.n	2f0a <hci_tx_thread+0x62>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2ee6:	f010 fd8d 	bl	13a04 <_impl_k_yield>
    2eea:	e7e3      	b.n	2eb4 <hci_tx_thread+0xc>
		BT_ASSERT(err == 0);
    2eec:	4b40      	ldr	r3, [pc, #256]	; (2ff0 <hci_tx_thread+0x148>)
    2eee:	9301      	str	r3, [sp, #4]
    2ef0:	9300      	str	r3, [sp, #0]
    2ef2:	4a43      	ldr	r2, [pc, #268]	; (3000 <hci_tx_thread+0x158>)
    2ef4:	4b43      	ldr	r3, [pc, #268]	; (3004 <hci_tx_thread+0x15c>)
    2ef6:	4944      	ldr	r1, [pc, #272]	; (3008 <hci_tx_thread+0x160>)
    2ef8:	4844      	ldr	r0, [pc, #272]	; (300c <hci_tx_thread+0x164>)
	BT_ASSERT(buf);
    2efa:	f7fe f847 	bl	f8c <printk>
    2efe:	4040      	eors	r0, r0
    2f00:	f380 8811 	msr	BASEPRI, r0
    2f04:	f04f 0004 	mov.w	r0, #4
    2f08:	df02      	svc	2
		switch (ev->state) {
    2f0a:	7b73      	ldrb	r3, [r6, #13]
    2f0c:	091b      	lsrs	r3, r3, #4
    2f0e:	2b01      	cmp	r3, #1
    2f10:	d952      	bls.n	2fb8 <hci_tx_thread+0x110>
    2f12:	2b04      	cmp	r3, #4
    2f14:	d162      	bne.n	2fdc <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2f16:	7b37      	ldrb	r7, [r6, #12]
    2f18:	2f00      	cmp	r7, #0
    2f1a:	d151      	bne.n	2fc0 <hci_tx_thread+0x118>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2f1c:	4639      	mov	r1, r7
    2f1e:	4658      	mov	r0, fp
    2f20:	f00f fcfc 	bl	1291c <net_buf_get>
	BT_ASSERT(buf);
    2f24:	4680      	mov	r8, r0
    2f26:	b938      	cbnz	r0, 2f38 <hci_tx_thread+0x90>
    2f28:	4b31      	ldr	r3, [pc, #196]	; (2ff0 <hci_tx_thread+0x148>)
    2f2a:	9301      	str	r3, [sp, #4]
    2f2c:	9300      	str	r3, [sp, #0]
    2f2e:	4a34      	ldr	r2, [pc, #208]	; (3000 <hci_tx_thread+0x158>)
    2f30:	4b37      	ldr	r3, [pc, #220]	; (3010 <hci_tx_thread+0x168>)
    2f32:	4935      	ldr	r1, [pc, #212]	; (3008 <hci_tx_thread+0x160>)
    2f34:	4837      	ldr	r0, [pc, #220]	; (3014 <hci_tx_thread+0x16c>)
    2f36:	e7e0      	b.n	2efa <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f3c:	4836      	ldr	r0, [pc, #216]	; (3018 <hci_tx_thread+0x170>)
    2f3e:	f010 fdc8 	bl	13ad2 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2f42:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    2f46:	b16b      	cbz	r3, 2f64 <hci_tx_thread+0xbc>
		BT_ERR("Uncleared pending sent_cmd");
    2f48:	4b31      	ldr	r3, [pc, #196]	; (3010 <hci_tx_thread+0x168>)
    2f4a:	4a2d      	ldr	r2, [pc, #180]	; (3000 <hci_tx_thread+0x158>)
    2f4c:	492e      	ldr	r1, [pc, #184]	; (3008 <hci_tx_thread+0x160>)
    2f4e:	9501      	str	r5, [sp, #4]
    2f50:	9500      	str	r5, [sp, #0]
    2f52:	4832      	ldr	r0, [pc, #200]	; (301c <hci_tx_thread+0x174>)
    2f54:	f7fe f81a 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    2f58:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2f5c:	f00f fd08 	bl	12970 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f60:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    2f64:	4640      	mov	r0, r8
    2f66:	f00f fd31 	bl	129cc <net_buf_ref>
    2f6a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    2f6e:	4640      	mov	r0, r8
    2f70:	f7ff fa68 	bl	2444 <bt_send>
	if (err) {
    2f74:	b300      	cbz	r0, 2fb8 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    2f76:	4b26      	ldr	r3, [pc, #152]	; (3010 <hci_tx_thread+0x168>)
    2f78:	4a21      	ldr	r2, [pc, #132]	; (3000 <hci_tx_thread+0x158>)
    2f7a:	4923      	ldr	r1, [pc, #140]	; (3008 <hci_tx_thread+0x160>)
    2f7c:	9001      	str	r0, [sp, #4]
    2f7e:	9502      	str	r5, [sp, #8]
    2f80:	9500      	str	r5, [sp, #0]
    2f82:	4827      	ldr	r0, [pc, #156]	; (3020 <hci_tx_thread+0x178>)
    2f84:	f7fe f802 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2f88:	4823      	ldr	r0, [pc, #140]	; (3018 <hci_tx_thread+0x170>)
    2f8a:	f010 fd7a 	bl	13a82 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2f8e:	4640      	mov	r0, r8
    2f90:	f00f fc30 	bl	127f4 <net_buf_id>
    2f94:	4b23      	ldr	r3, [pc, #140]	; (3024 <hci_tx_thread+0x17c>)
    2f96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2f9a:	2200      	movs	r2, #0
    2f9c:	211f      	movs	r1, #31
    2f9e:	8840      	ldrh	r0, [r0, #2]
    2fa0:	f7ff f826 	bl	1ff0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2fa4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2fa8:	f00f fce2 	bl	12970 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2fac:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2fae:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    2fb0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    2fb4:	f00f fcdc 	bl	12970 <net_buf_unref>
	for (; count; ev++, count--) {
    2fb8:	3614      	adds	r6, #20
    2fba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2fbe:	e78f      	b.n	2ee0 <hci_tx_thread+0x38>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2fc0:	2f01      	cmp	r7, #1
    2fc2:	d104      	bne.n	2fce <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    2fc4:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    2fc6:	3818      	subs	r0, #24
    2fc8:	f000 ff66 	bl	3e98 <bt_conn_notify_tx>
    2fcc:	e7f4      	b.n	2fb8 <hci_tx_thread+0x110>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2fce:	2f02      	cmp	r7, #2
    2fd0:	d1f2      	bne.n	2fb8 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    2fd2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    2fd4:	3828      	subs	r0, #40	; 0x28
    2fd6:	f001 fccb 	bl	4970 <bt_conn_process_tx>
    2fda:	e7ed      	b.n	2fb8 <hci_tx_thread+0x110>
		switch (ev->state) {
    2fdc:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2fde:	9502      	str	r5, [sp, #8]
    2fe0:	9500      	str	r5, [sp, #0]
    2fe2:	4b11      	ldr	r3, [pc, #68]	; (3028 <hci_tx_thread+0x180>)
    2fe4:	4a11      	ldr	r2, [pc, #68]	; (302c <hci_tx_thread+0x184>)
    2fe6:	4908      	ldr	r1, [pc, #32]	; (3008 <hci_tx_thread+0x160>)
    2fe8:	4811      	ldr	r0, [pc, #68]	; (3030 <hci_tx_thread+0x188>)
    2fea:	f7fd ffcf 	bl	f8c <printk>
    2fee:	e7e3      	b.n	2fb8 <hci_tx_thread+0x110>
    2ff0:	000145f1 	.word	0x000145f1
    2ff4:	20003b4c 	.word	0x20003b4c
    2ff8:	20003b38 	.word	0x20003b38
    2ffc:	20003a60 	.word	0x20003a60
    3000:	00015373 	.word	0x00015373
    3004:	00014c4f 	.word	0x00014c4f
    3008:	000153c2 	.word	0x000153c2
    300c:	0001544d 	.word	0x0001544d
    3010:	00014c37 	.word	0x00014c37
    3014:	00015477 	.word	0x00015477
    3018:	20003b08 	.word	0x20003b08
    301c:	0001549c 	.word	0x0001549c
    3020:	00014dc9 	.word	0x00014dc9
    3024:	2000027c 	.word	0x2000027c
    3028:	00014c40 	.word	0x00014c40
    302c:	000153bb 	.word	0x000153bb
    3030:	000154c7 	.word	0x000154c7

00003034 <bt_recv>:
{
    3034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    3038:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    303a:	2b01      	cmp	r3, #1
{
    303c:	b095      	sub	sp, #84	; 0x54
    303e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3040:	d040      	beq.n	30c4 <bt_recv+0x90>
    3042:	2b03      	cmp	r3, #3
    3044:	f040 834c 	bne.w	36e0 <bt_recv+0x6ac>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3048:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    304a:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    304c:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    304e:	f3c6 030b 	ubfx	r3, r6, #0, #12
    3052:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3054:	23ff      	movs	r3, #255	; 0xff
    3056:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3058:	2104      	movs	r1, #4
    305a:	3008      	adds	r0, #8
    305c:	f00f fcd9 	bl	12a12 <net_buf_simple_pull>
	if (buf->len != len) {
    3060:	89a2      	ldrh	r2, [r4, #12]
    3062:	4295      	cmp	r5, r2
    3064:	d00e      	beq.n	3084 <bt_recv+0x50>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    3066:	4ba2      	ldr	r3, [pc, #648]	; (32f0 <bt_recv+0x2bc>)
    3068:	9303      	str	r3, [sp, #12]
    306a:	9201      	str	r2, [sp, #4]
    306c:	9300      	str	r3, [sp, #0]
    306e:	9502      	str	r5, [sp, #8]
    3070:	4ba0      	ldr	r3, [pc, #640]	; (32f4 <bt_recv+0x2c0>)
    3072:	4aa1      	ldr	r2, [pc, #644]	; (32f8 <bt_recv+0x2c4>)
    3074:	49a1      	ldr	r1, [pc, #644]	; (32fc <bt_recv+0x2c8>)
    3076:	48a2      	ldr	r0, [pc, #648]	; (3300 <bt_recv+0x2cc>)
    3078:	f7fd ff88 	bl	f8c <printk>
	net_buf_unref(buf);
    307c:	4620      	mov	r0, r4
    307e:	f00f fc77 	bl	12970 <net_buf_unref>
    3082:	e01b      	b.n	30bc <bt_recv+0x88>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3084:	8ae0      	ldrh	r0, [r4, #22]
    3086:	f001 f887 	bl	4198 <bt_conn_lookup_handle>
	if (!conn) {
    308a:	4605      	mov	r5, r0
    308c:	b958      	cbnz	r0, 30a6 <bt_recv+0x72>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    308e:	4b98      	ldr	r3, [pc, #608]	; (32f0 <bt_recv+0x2bc>)
    3090:	8ae2      	ldrh	r2, [r4, #22]
    3092:	9302      	str	r3, [sp, #8]
    3094:	9201      	str	r2, [sp, #4]
    3096:	9300      	str	r3, [sp, #0]
    3098:	4a97      	ldr	r2, [pc, #604]	; (32f8 <bt_recv+0x2c4>)
    309a:	4b96      	ldr	r3, [pc, #600]	; (32f4 <bt_recv+0x2c0>)
    309c:	4997      	ldr	r1, [pc, #604]	; (32fc <bt_recv+0x2c8>)
    309e:	4899      	ldr	r0, [pc, #612]	; (3304 <bt_recv+0x2d0>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    30a0:	f7fd ff74 	bl	f8c <printk>
    30a4:	e7ea      	b.n	307c <bt_recv+0x48>
	acl(buf)->id = bt_conn_get_id(conn);
    30a6:	f001 fd09 	bl	4abc <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    30aa:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    30ac:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    30ae:	4621      	mov	r1, r4
    30b0:	4628      	mov	r0, r5
    30b2:	f000 fdc1 	bl	3c38 <bt_conn_recv>
	bt_conn_unref(conn);
    30b6:	4628      	mov	r0, r5
    30b8:	f001 f8bc 	bl	4234 <bt_conn_unref>
		return 0;
    30bc:	2000      	movs	r0, #0
}
    30be:	b015      	add	sp, #84	; 0x54
    30c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    30c4:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    30c6:	782a      	ldrb	r2, [r5, #0]
    30c8:	2a13      	cmp	r2, #19
    30ca:	f200 8319 	bhi.w	3700 <bt_recv+0x6cc>
    30ce:	4093      	lsls	r3, r2
    30d0:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    30d4:	f000 8314 	beq.w	3700 <bt_recv+0x6cc>
    30d8:	4b85      	ldr	r3, [pc, #532]	; (32f0 <bt_recv+0x2bc>)
    30da:	9301      	str	r3, [sp, #4]
    30dc:	9300      	str	r3, [sp, #0]
    30de:	4a86      	ldr	r2, [pc, #536]	; (32f8 <bt_recv+0x2c4>)
    30e0:	4b89      	ldr	r3, [pc, #548]	; (3308 <bt_recv+0x2d4>)
    30e2:	4986      	ldr	r1, [pc, #536]	; (32fc <bt_recv+0x2c8>)
    30e4:	4889      	ldr	r0, [pc, #548]	; (330c <bt_recv+0x2d8>)
    30e6:	f7fd ff51 	bl	f8c <printk>
    30ea:	4040      	eors	r0, r0
    30ec:	f380 8811 	msr	BASEPRI, r0
    30f0:	f04f 0004 	mov.w	r0, #4
    30f4:	df02      	svc	2
    30f6:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    30f8:	783e      	ldrb	r6, [r7, #0]
    30fa:	2e00      	cmp	r6, #0
    30fc:	d1be      	bne.n	307c <bt_recv+0x48>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30fe:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3102:	4640      	mov	r0, r8
    3104:	f001 f848 	bl	4198 <bt_conn_lookup_handle>
	if (!conn) {
    3108:	4605      	mov	r5, r0
    310a:	b9c8      	cbnz	r0, 3140 <bt_recv+0x10c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    310c:	4b78      	ldr	r3, [pc, #480]	; (32f0 <bt_recv+0x2bc>)
    310e:	9302      	str	r3, [sp, #8]
    3110:	e88d 0108 	stmia.w	sp, {r3, r8}
    3114:	4a78      	ldr	r2, [pc, #480]	; (32f8 <bt_recv+0x2c4>)
    3116:	4b7e      	ldr	r3, [pc, #504]	; (3310 <bt_recv+0x2dc>)
    3118:	4978      	ldr	r1, [pc, #480]	; (32fc <bt_recv+0x2c8>)
    311a:	487e      	ldr	r0, [pc, #504]	; (3314 <bt_recv+0x2e0>)
    311c:	f7fd ff36 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3120:	2107      	movs	r1, #7
    3122:	487d      	ldr	r0, [pc, #500]	; (3318 <bt_recv+0x2e4>)
    3124:	f7fe ffc6 	bl	20b4 <atomic_test_bit>
    3128:	2800      	cmp	r0, #0
    312a:	d0a7      	beq.n	307c <bt_recv+0x48>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    312c:	2106      	movs	r1, #6
    312e:	487a      	ldr	r0, [pc, #488]	; (3318 <bt_recv+0x2e4>)
    3130:	f7fe ffc0 	bl	20b4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3134:	2800      	cmp	r0, #0
    3136:	d1a1      	bne.n	307c <bt_recv+0x48>
		set_advertise_enable(true);
    3138:	2001      	movs	r0, #1
    313a:	f7ff f8ad 	bl	2298 <set_advertise_enable>
    313e:	e79d      	b.n	307c <bt_recv+0x48>
	conn->err = evt->reason;
    3140:	78fb      	ldrb	r3, [r7, #3]
    3142:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3144:	4975      	ldr	r1, [pc, #468]	; (331c <bt_recv+0x2e8>)
    3146:	4876      	ldr	r0, [pc, #472]	; (3320 <bt_recv+0x2ec>)
    3148:	f010 fe4c 	bl	13de4 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    314c:	4631      	mov	r1, r6
    314e:	4628      	mov	r0, r5
    3150:	f001 f926 	bl	43a0 <bt_conn_set_state>
	conn->handle = 0;
    3154:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    3156:	78ae      	ldrb	r6, [r5, #2]
    3158:	b10e      	cbz	r6, 315e <bt_recv+0x12a>
	bt_conn_unref(conn);
    315a:	4628      	mov	r0, r5
    315c:	e08a      	b.n	3274 <bt_recv+0x240>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    315e:	4631      	mov	r1, r6
    3160:	1d28      	adds	r0, r5, #4
    3162:	f7fe ffa7 	bl	20b4 <atomic_test_bit>
    3166:	b130      	cbz	r0, 3176 <bt_recv+0x142>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3168:	4628      	mov	r0, r5
    316a:	2101      	movs	r1, #1
    316c:	f001 f918 	bl	43a0 <bt_conn_set_state>
		bt_le_scan_update(false);
    3170:	4630      	mov	r0, r6
    3172:	f7ff f9f7 	bl	2564 <bt_le_scan_update>
	bt_conn_unref(conn);
    3176:	4628      	mov	r0, r5
    3178:	f001 f85c 	bl	4234 <bt_conn_unref>
    317c:	e7d0      	b.n	3120 <bt_recv+0xec>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    317e:	68a5      	ldr	r5, [r4, #8]
	printk("subevent 0x%02x\n", evt->subevent);
    3180:	4868      	ldr	r0, [pc, #416]	; (3324 <bt_recv+0x2f0>)
    3182:	7829      	ldrb	r1, [r5, #0]
    3184:	f7fd ff02 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3188:	2101      	movs	r1, #1
    318a:	4630      	mov	r0, r6
    318c:	f00f fc41 	bl	12a12 <net_buf_simple_pull>
	switch (evt->subevent) {
    3190:	782d      	ldrb	r5, [r5, #0]
    3192:	1e6b      	subs	r3, r5, #1
    3194:	2b0b      	cmp	r3, #11
    3196:	f200 8292 	bhi.w	36be <bt_recv+0x68a>
    319a:	e8df f013 	tbh	[pc, r3, lsl #1]
    319e:	000c      	.short	0x000c
    31a0:	0043019b 	.word	0x0043019b
    31a4:	0290006e 	.word	0x0290006e
    31a8:	012a00cd 	.word	0x012a00cd
    31ac:	018c016c 	.word	0x018c016c
    31b0:	02900041 	.word	0x02900041
    31b4:	0143      	.short	0x0143
    31b6:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    31b8:	780b      	ldrb	r3, [r1, #0]
    31ba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    31be:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    31c2:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    31c6:	78cb      	ldrb	r3, [r1, #3]
    31c8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    31cc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    31d0:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    31d4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    31d8:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    31dc:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    31e0:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	enh.clock_accuracy = evt->clock_accuracy;
    31e4:	7c4b      	ldrb	r3, [r1, #17]
    31e6:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    31ea:	3104      	adds	r1, #4
    31ec:	a80d      	add	r0, sp, #52	; 0x34
    31ee:	f7fe fecb 	bl	1f88 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    31f2:	2500      	movs	r5, #0
    31f4:	2206      	movs	r2, #6
    31f6:	a908      	add	r1, sp, #32
    31f8:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    31fc:	9508      	str	r5, [sp, #32]
    31fe:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    3202:	f7fe fcfb 	bl	1bfc <memcpy>
    3206:	2206      	movs	r2, #6
    3208:	a90a      	add	r1, sp, #40	; 0x28
    320a:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    320e:	950a      	str	r5, [sp, #40]	; 0x28
    3210:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    3214:	f7fe fcf2 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    3218:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    321a:	f7ff fd4f 	bl	2cbc <le_enh_conn_complete>
    321e:	e72d      	b.n	307c <bt_recv+0x48>
    3220:	68a0      	ldr	r0, [r4, #8]
    3222:	e7fa      	b.n	321a <bt_recv+0x1e6>
    3224:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    3226:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    322a:	4638      	mov	r0, r7
    322c:	f000 ffb4 	bl	4198 <bt_conn_lookup_handle>
	if (!conn) {
    3230:	4606      	mov	r6, r0
    3232:	b940      	cbnz	r0, 3246 <bt_recv+0x212>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3234:	4b2e      	ldr	r3, [pc, #184]	; (32f0 <bt_recv+0x2bc>)
    3236:	9302      	str	r3, [sp, #8]
    3238:	e88d 0088 	stmia.w	sp, {r3, r7}
    323c:	4b3a      	ldr	r3, [pc, #232]	; (3328 <bt_recv+0x2f4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    323e:	4a2e      	ldr	r2, [pc, #184]	; (32f8 <bt_recv+0x2c4>)
    3240:	492e      	ldr	r1, [pc, #184]	; (32fc <bt_recv+0x2c8>)
    3242:	483a      	ldr	r0, [pc, #232]	; (332c <bt_recv+0x2f8>)
    3244:	e72c      	b.n	30a0 <bt_recv+0x6c>
	if (!evt->status) {
    3246:	782b      	ldrb	r3, [r5, #0]
    3248:	b99b      	cbnz	r3, 3272 <bt_recv+0x23e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    324a:	792a      	ldrb	r2, [r5, #4]
    324c:	78eb      	ldrb	r3, [r5, #3]
    324e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3252:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3256:	79aa      	ldrb	r2, [r5, #6]
    3258:	796b      	ldrb	r3, [r5, #5]
    325a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    325e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3262:	79eb      	ldrb	r3, [r5, #7]
    3264:	7a2a      	ldrb	r2, [r5, #8]
    3266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    326a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    326e:	f000 fca7 	bl	3bc0 <notify_le_param_updated>
	bt_conn_unref(conn);
    3272:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    3274:	f000 ffde 	bl	4234 <bt_conn_unref>
    3278:	e700      	b.n	307c <bt_recv+0x48>
    327a:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    327c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    3280:	4638      	mov	r0, r7
    3282:	f000 ff89 	bl	4198 <bt_conn_lookup_handle>
	if (!conn) {
    3286:	4605      	mov	r5, r0
    3288:	b928      	cbnz	r0, 3296 <bt_recv+0x262>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    328a:	4b19      	ldr	r3, [pc, #100]	; (32f0 <bt_recv+0x2bc>)
    328c:	9302      	str	r3, [sp, #8]
    328e:	e88d 0088 	stmia.w	sp, {r3, r7}
    3292:	4b27      	ldr	r3, [pc, #156]	; (3330 <bt_recv+0x2fc>)
    3294:	e7d3      	b.n	323e <bt_recv+0x20a>
	if (!evt->status) {
    3296:	7833      	ldrb	r3, [r6, #0]
    3298:	b923      	cbnz	r3, 32a4 <bt_recv+0x270>
		memcpy(conn->le.features, evt->features,
    329a:	2208      	movs	r2, #8
    329c:	1cf1      	adds	r1, r6, #3
    329e:	3064      	adds	r0, #100	; 0x64
    32a0:	f7fe fcac 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    32a4:	4e23      	ldr	r6, [pc, #140]	; (3334 <bt_recv+0x300>)
    32a6:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    32aa:	07d2      	lsls	r2, r2, #31
    32ac:	d50c      	bpl.n	32c8 <bt_recv+0x294>
    32ae:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    32b2:	07db      	lsls	r3, r3, #31
    32b4:	d508      	bpl.n	32c8 <bt_recv+0x294>
		err = hci_le_set_phy(conn);
    32b6:	4628      	mov	r0, r5
    32b8:	f7ff fcb6 	bl	2c28 <hci_le_set_phy.isra.28>
		if (!err) {
    32bc:	b920      	cbnz	r0, 32c8 <bt_recv+0x294>
    32be:	2180      	movs	r1, #128	; 0x80
    32c0:	1d28      	adds	r0, r5, #4
    32c2:	f7fe fe64 	bl	1f8e <atomic_or>
    32c6:	e748      	b.n	315a <bt_recv+0x126>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    32c8:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    32cc:	069f      	lsls	r7, r3, #26
    32ce:	f140 80a5 	bpl.w	341c <bt_recv+0x3e8>
    32d2:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    32d6:	069e      	lsls	r6, r3, #26
    32d8:	f140 80a0 	bpl.w	341c <bt_recv+0x3e8>
		err = hci_le_set_data_len(conn);
    32dc:	4628      	mov	r0, r5
    32de:	f7ff fcc3 	bl	2c68 <hci_le_set_data_len.isra.29>
		if (!err) {
    32e2:	2800      	cmp	r0, #0
    32e4:	f040 809a 	bne.w	341c <bt_recv+0x3e8>
    32e8:	f44f 7180 	mov.w	r1, #256	; 0x100
    32ec:	e7e8      	b.n	32c0 <bt_recv+0x28c>
    32ee:	bf00      	nop
    32f0:	000145f1 	.word	0x000145f1
    32f4:	00014b56 	.word	0x00014b56
    32f8:	00015373 	.word	0x00015373
    32fc:	000153c2 	.word	0x000153c2
    3300:	00015070 	.word	0x00015070
    3304:	000150a4 	.word	0x000150a4
    3308:	00014c2d 	.word	0x00014c2d
    330c:	00015202 	.word	0x00015202
    3310:	00014b78 	.word	0x00014b78
    3314:	000150d6 	.word	0x000150d6
    3318:	20003ad0 	.word	0x20003ad0
    331c:	0001510c 	.word	0x0001510c
    3320:	00001f4d 	.word	0x00001f4d
    3324:	00015110 	.word	0x00015110
    3328:	00014bf6 	.word	0x00014bf6
    332c:	00015121 	.word	0x00015121
    3330:	00014ba2 	.word	0x00014ba2
    3334:	20003a60 	.word	0x20003a60
    3338:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    333a:	78d9      	ldrb	r1, [r3, #3]
    333c:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    333e:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3344:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3348:	7959      	ldrb	r1, [r3, #5]
    334a:	791a      	ldrb	r2, [r3, #4]
    334c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3350:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    3354:	799a      	ldrb	r2, [r3, #6]
    3356:	79d9      	ldrb	r1, [r3, #7]
    3358:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    335c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3360:	7a1a      	ldrb	r2, [r3, #8]
    3362:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3364:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3366:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    336a:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    336c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    3370:	f000 ff12 	bl	4198 <bt_conn_lookup_handle>
	if (!conn) {
    3374:	4680      	mov	r8, r0
    3376:	b970      	cbnz	r0, 3396 <bt_recv+0x362>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3378:	4bb8      	ldr	r3, [pc, #736]	; (365c <bt_recv+0x628>)
    337a:	9302      	str	r3, [sp, #8]
    337c:	e88d 0028 	stmia.w	sp, {r3, r5}
    3380:	4ab7      	ldr	r2, [pc, #732]	; (3660 <bt_recv+0x62c>)
    3382:	4bb8      	ldr	r3, [pc, #736]	; (3664 <bt_recv+0x630>)
    3384:	49b8      	ldr	r1, [pc, #736]	; (3668 <bt_recv+0x634>)
    3386:	48b9      	ldr	r0, [pc, #740]	; (366c <bt_recv+0x638>)
    3388:	f7fd fe00 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    338c:	2102      	movs	r1, #2
    338e:	4628      	mov	r0, r5
    3390:	f7ff fd70 	bl	2e74 <le_conn_param_neg_reply>
    3394:	e672      	b.n	307c <bt_recv+0x48>
	if (!le_param_req(conn, &param)) {
    3396:	a90c      	add	r1, sp, #48	; 0x30
    3398:	f000 fc26 	bl	3be8 <le_param_req>
    339c:	b928      	cbnz	r0, 33aa <bt_recv+0x376>
		err = le_conn_param_neg_reply(handle,
    339e:	211e      	movs	r1, #30
    33a0:	4628      	mov	r0, r5
    33a2:	f7ff fd67 	bl	2e74 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    33a6:	4640      	mov	r0, r8
    33a8:	e764      	b.n	3274 <bt_recv+0x240>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    33aa:	210e      	movs	r1, #14
    33ac:	f242 0020 	movw	r0, #8224	; 0x2020
    33b0:	f7fe fe8e 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    33b4:	4606      	mov	r6, r0
    33b6:	2800      	cmp	r0, #0
    33b8:	d0f5      	beq.n	33a6 <bt_recv+0x372>
	cp = net_buf_add(buf, sizeof(*cp));
    33ba:	210e      	movs	r1, #14
    33bc:	3008      	adds	r0, #8
    33be:	f00f fb09 	bl	129d4 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    33c2:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    33c4:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    33c6:	2100      	movs	r1, #0
    33c8:	f7fe fc44 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    33cc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    33d0:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    33d2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    33d6:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    33d8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    33dc:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    33de:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    33e2:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    33e4:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    33e6:	4631      	mov	r1, r6
    33e8:	f242 0020 	movw	r0, #8224	; 0x2020
    33ec:	f7ff f832 	bl	2454 <bt_hci_cmd_send>
    33f0:	e7d9      	b.n	33a6 <bt_recv+0x372>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33f2:	68a3      	ldr	r3, [r4, #8]
    33f4:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    33f6:	4630      	mov	r0, r6
    33f8:	f000 fece 	bl	4198 <bt_conn_lookup_handle>
	if (!conn) {
    33fc:	4605      	mov	r5, r0
    33fe:	b928      	cbnz	r0, 340c <bt_recv+0x3d8>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3400:	4b96      	ldr	r3, [pc, #600]	; (365c <bt_recv+0x628>)
    3402:	9302      	str	r3, [sp, #8]
    3404:	e88d 0048 	stmia.w	sp, {r3, r6}
    3408:	4b99      	ldr	r3, [pc, #612]	; (3670 <bt_recv+0x63c>)
    340a:	e718      	b.n	323e <bt_recv+0x20a>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    340c:	f46f 7180 	mvn.w	r1, #256	; 0x100
    3410:	3004      	adds	r0, #4
    3412:	f7fe fdcd 	bl	1fb0 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3416:	05c0      	lsls	r0, r0, #23
    3418:	f57f ae9f 	bpl.w	315a <bt_recv+0x126>
	update_conn_param(conn);
    341c:	4628      	mov	r0, r5
    341e:	f7fe fdd9 	bl	1fd4 <update_conn_param>
    3422:	e69a      	b.n	315a <bt_recv+0x126>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3424:	68a3      	ldr	r3, [r4, #8]
    3426:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    342a:	4630      	mov	r0, r6
    342c:	f000 feb4 	bl	4198 <bt_conn_lookup_handle>
	if (!conn) {
    3430:	4605      	mov	r5, r0
    3432:	b928      	cbnz	r0, 3440 <bt_recv+0x40c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3434:	4b89      	ldr	r3, [pc, #548]	; (365c <bt_recv+0x628>)
    3436:	9302      	str	r3, [sp, #8]
    3438:	e88d 0048 	stmia.w	sp, {r3, r6}
    343c:	4b8d      	ldr	r3, [pc, #564]	; (3674 <bt_recv+0x640>)
    343e:	e6fe      	b.n	323e <bt_recv+0x20a>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3440:	1d06      	adds	r6, r0, #4
    3442:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3446:	4630      	mov	r0, r6
    3448:	f7fe fdb2 	bl	1fb0 <atomic_and>
    344c:	0601      	lsls	r1, r0, #24
    344e:	f57f ae84 	bpl.w	315a <bt_recv+0x126>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3452:	4b89      	ldr	r3, [pc, #548]	; (3678 <bt_recv+0x644>)
    3454:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3458:	069a      	lsls	r2, r3, #26
    345a:	d5df      	bpl.n	341c <bt_recv+0x3e8>
    345c:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3460:	069b      	lsls	r3, r3, #26
    3462:	d5db      	bpl.n	341c <bt_recv+0x3e8>
		err = hci_le_set_data_len(conn);
    3464:	4628      	mov	r0, r5
    3466:	f7ff fbff 	bl	2c68 <hci_le_set_data_len.isra.29>
		if (!err) {
    346a:	2800      	cmp	r0, #0
    346c:	d1d6      	bne.n	341c <bt_recv+0x3e8>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    346e:	f44f 7180 	mov.w	r1, #256	; 0x100
    3472:	4630      	mov	r0, r6
    3474:	e725      	b.n	32c2 <bt_recv+0x28e>
    3476:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3478:	4880      	ldr	r0, [pc, #512]	; (367c <bt_recv+0x648>)
    347a:	f06f 0120 	mvn.w	r1, #32
    347e:	f7fe fd97 	bl	1fb0 <atomic_and>
	if (!evt->status) {
    3482:	7833      	ldrb	r3, [r6, #0]
    3484:	b943      	cbnz	r3, 3498 <bt_recv+0x464>
		memcpy(pub_key, evt->key, 64);
    3486:	1c71      	adds	r1, r6, #1
    3488:	2240      	movs	r2, #64	; 0x40
    348a:	487d      	ldr	r0, [pc, #500]	; (3680 <bt_recv+0x64c>)
    348c:	f7fe fbb6 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3490:	2110      	movs	r1, #16
    3492:	487a      	ldr	r0, [pc, #488]	; (367c <bt_recv+0x648>)
    3494:	f7fe fd7b 	bl	1f8e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3498:	4b7a      	ldr	r3, [pc, #488]	; (3684 <bt_recv+0x650>)
    349a:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    349c:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    349e:	2d00      	cmp	r5, #0
    34a0:	f43f adec 	beq.w	307c <bt_recv+0x48>
		cb->func(evt->status ? NULL : evt->key);
    34a4:	7832      	ldrb	r2, [r6, #0]
    34a6:	682b      	ldr	r3, [r5, #0]
    34a8:	2a00      	cmp	r2, #0
    34aa:	bf0c      	ite	eq
    34ac:	4638      	moveq	r0, r7
    34ae:	2000      	movne	r0, #0
    34b0:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    34b2:	686d      	ldr	r5, [r5, #4]
    34b4:	e7f3      	b.n	349e <bt_recv+0x46a>
	if (dh_key_cb) {
    34b6:	4d74      	ldr	r5, [pc, #464]	; (3688 <bt_recv+0x654>)
    34b8:	68a0      	ldr	r0, [r4, #8]
    34ba:	682a      	ldr	r2, [r5, #0]
    34bc:	2a00      	cmp	r2, #0
    34be:	f43f addd 	beq.w	307c <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    34c2:	7803      	ldrb	r3, [r0, #0]
    34c4:	b923      	cbnz	r3, 34d0 <bt_recv+0x49c>
    34c6:	3001      	adds	r0, #1
    34c8:	4790      	blx	r2
		dh_key_cb = NULL;
    34ca:	2300      	movs	r3, #0
    34cc:	602b      	str	r3, [r5, #0]
    34ce:	e5d5      	b.n	307c <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    34d0:	2000      	movs	r0, #0
    34d2:	e7f9      	b.n	34c8 <bt_recv+0x494>
	u8_t num_reports = net_buf_pull_u8(buf);
    34d4:	4630      	mov	r0, r6
    34d6:	f00f faa4 	bl	12a22 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    34da:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 3694 <bt_recv+0x660>
	u8_t num_reports = net_buf_pull_u8(buf);
    34de:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    34e0:	9b06      	ldr	r3, [sp, #24]
    34e2:	2b00      	cmp	r3, #0
    34e4:	f43f adca 	beq.w	307c <bt_recv+0x48>
		info = (void *)buf->data;
    34e8:	68a5      	ldr	r5, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    34ea:	2109      	movs	r1, #9
    34ec:	4630      	mov	r0, r6
    34ee:	f00f fa90 	bl	12a12 <net_buf_simple_pull>
		rssi = info->data[info->length];
    34f2:	7a2b      	ldrb	r3, [r5, #8]
		       bt_addr_le_str(&info->addr),
    34f4:	f105 0801 	add.w	r8, r5, #1
		rssi = info->data[info->length];
    34f8:	442b      	add	r3, r5
		printk("%s event %u, len %u, rssi %d dBm\n",
    34fa:	4640      	mov	r0, r8
		rssi = info->data[info->length];
    34fc:	f993 b009 	ldrsb.w	fp, [r3, #9]
		printk("%s event %u, len %u, rssi %d dBm\n",
    3500:	f7fe fc28 	bl	1d54 <bt_addr_le_str>
    3504:	7a2b      	ldrb	r3, [r5, #8]
    3506:	782a      	ldrb	r2, [r5, #0]
    3508:	f8cd b000 	str.w	fp, [sp]
    350c:	4601      	mov	r1, r0
    350e:	485f      	ldr	r0, [pc, #380]	; (368c <bt_recv+0x658>)
    3510:	f7fd fd3c 	bl	f8c <printk>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3514:	786b      	ldrb	r3, [r5, #1]
    3516:	3b02      	subs	r3, #2
    3518:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    351a:	4641      	mov	r1, r8
    351c:	a80c      	add	r0, sp, #48	; 0x30
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    351e:	f200 8099 	bhi.w	3654 <bt_recv+0x620>
			bt_addr_le_copy(&id_addr, &info->addr);
    3522:	f7fe fd31 	bl	1f88 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3526:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    352a:	3b02      	subs	r3, #2
    352c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    3530:	f8da 3000 	ldr.w	r3, [sl]
    3534:	b1ab      	cbz	r3, 3562 <bt_recv+0x52e>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3536:	4630      	mov	r0, r6
    3538:	f00f fa83 	bl	12a42 <net_buf_simple_headroom>
	state->len = buf->len;
    353c:	89a3      	ldrh	r3, [r4, #12]
    353e:	9307      	str	r3, [sp, #28]
			buf->len = info->length;
    3540:	7a2b      	ldrb	r3, [r5, #8]
    3542:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3544:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3546:	4633      	mov	r3, r6
    3548:	782a      	ldrb	r2, [r5, #0]
    354a:	f8da 7000 	ldr.w	r7, [sl]
    354e:	4659      	mov	r1, fp
    3550:	a80c      	add	r0, sp, #48	; 0x30
    3552:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3554:	6923      	ldr	r3, [r4, #16]
    3556:	fa13 f389 	uxtah	r3, r3, r9
    355a:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    355c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3560:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3562:	2109      	movs	r1, #9
    3564:	4845      	ldr	r0, [pc, #276]	; (367c <bt_recv+0x648>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3566:	782f      	ldrb	r7, [r5, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3568:	f7fe fda4 	bl	20b4 <atomic_test_bit>
    356c:	4681      	mov	r9, r0
    356e:	2800      	cmp	r0, #0
    3570:	d166      	bne.n	3640 <bt_recv+0x60c>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3572:	2f01      	cmp	r7, #1
    3574:	d864      	bhi.n	3640 <bt_recv+0x60c>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3576:	2101      	movs	r1, #1
    3578:	a80c      	add	r0, sp, #48	; 0x30
    357a:	f000 fe3d 	bl	41f8 <bt_conn_lookup_state_le>
	if (!conn) {
    357e:	4607      	mov	r7, r0
    3580:	2800      	cmp	r0, #0
    3582:	d05d      	beq.n	3640 <bt_recv+0x60c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3584:	2108      	movs	r1, #8
    3586:	483d      	ldr	r0, [pc, #244]	; (367c <bt_recv+0x648>)
    3588:	f7fe fd94 	bl	20b4 <atomic_test_bit>
    358c:	2800      	cmp	r0, #0
    358e:	f040 8083 	bne.w	3698 <bt_recv+0x664>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3592:	2102      	movs	r1, #2
    3594:	4839      	ldr	r0, [pc, #228]	; (367c <bt_recv+0x648>)
    3596:	f7fe fd8d 	bl	20b4 <atomic_test_bit>
    359a:	b110      	cbz	r0, 35a2 <bt_recv+0x56e>
			set_random_address(&bt_dev.id_addr.a);
    359c:	483c      	ldr	r0, [pc, #240]	; (3690 <bt_recv+0x65c>)
    359e:	f7fe fe3b 	bl	2218 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    35a2:	4935      	ldr	r1, [pc, #212]	; (3678 <bt_recv+0x644>)
    35a4:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    35a8:	f107 0952 	add.w	r9, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    35ac:	f7fe fcec 	bl	1f88 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    35b0:	4641      	mov	r1, r8
    35b2:	4648      	mov	r0, r9
    35b4:	f7fe fce8 	bl	1f88 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    35b8:	2119      	movs	r1, #25
    35ba:	f242 000d 	movw	r0, #8205	; 0x200d
    35be:	f7fe fd87 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    35c2:	4683      	mov	fp, r0
    35c4:	2800      	cmp	r0, #0
    35c6:	d06d      	beq.n	36a4 <bt_recv+0x670>
	cp = net_buf_add(buf, sizeof(*cp));
    35c8:	2119      	movs	r1, #25
    35ca:	3008      	adds	r0, #8
    35cc:	f00f fa02 	bl	129d4 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    35d0:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    35d2:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    35d4:	2100      	movs	r1, #0
    35d6:	f7fe fb3d 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    35da:	2200      	movs	r2, #0
    35dc:	2360      	movs	r3, #96	; 0x60
    35de:	f888 3000 	strb.w	r3, [r8]
    35e2:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    35e6:	f888 3002 	strb.w	r3, [r8, #2]
    35ea:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    35ee:	4649      	mov	r1, r9
    35f0:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    35f4:	9207      	str	r2, [sp, #28]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    35f6:	f7fe fcc7 	bl	1f88 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    35fa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    35fe:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3602:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    3606:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    360a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    360e:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3612:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    3616:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    361a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    361e:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3622:	9a07      	ldr	r2, [sp, #28]
    3624:	4659      	mov	r1, fp
    3626:	f242 000d 	movw	r0, #8205	; 0x200d
    362a:	f7fe fd81 	bl	2130 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    362e:	2800      	cmp	r0, #0
    3630:	d138      	bne.n	36a4 <bt_recv+0x670>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3632:	4638      	mov	r0, r7
    3634:	2102      	movs	r1, #2
    3636:	f000 feb3 	bl	43a0 <bt_conn_set_state>
	bt_conn_unref(conn);
    363a:	4638      	mov	r0, r7
    363c:	f000 fdfa 	bl	4234 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3640:	7a29      	ldrb	r1, [r5, #8]
    3642:	4630      	mov	r0, r6
    3644:	3101      	adds	r1, #1
    3646:	f00f f9e4 	bl	12a12 <net_buf_simple_pull>
    364a:	9b06      	ldr	r3, [sp, #24]
    364c:	3b01      	subs	r3, #1
    364e:	b2db      	uxtb	r3, r3
    3650:	9306      	str	r3, [sp, #24]
    3652:	e745      	b.n	34e0 <bt_recv+0x4ac>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3654:	f7fe fc98 	bl	1f88 <bt_addr_le_copy>
    3658:	e76a      	b.n	3530 <bt_recv+0x4fc>
    365a:	bf00      	nop
    365c:	000145f1 	.word	0x000145f1
    3660:	00015373 	.word	0x00015373
    3664:	00014be4 	.word	0x00014be4
    3668:	000153c2 	.word	0x000153c2
    366c:	00015121 	.word	0x00015121
    3670:	00014bba 	.word	0x00014bba
    3674:	00014bcd 	.word	0x00014bcd
    3678:	20003a60 	.word	0x20003a60
    367c:	20003ad0 	.word	0x20003ad0
    3680:	20000290 	.word	0x20000290
    3684:	200002d0 	.word	0x200002d0
    3688:	2000028c 	.word	0x2000028c
    368c:	00015155 	.word	0x00015155
    3690:	20003a61 	.word	0x20003a61
    3694:	200002d8 	.word	0x200002d8
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3698:	4648      	mov	r0, r9
    369a:	f7fe fd87 	bl	21ac <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    369e:	2800      	cmp	r0, #0
    36a0:	f43f af77 	beq.w	3592 <bt_recv+0x55e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    36a4:	231f      	movs	r3, #31
    36a6:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    36a8:	2100      	movs	r1, #0
    36aa:	4638      	mov	r0, r7
    36ac:	f000 fe78 	bl	43a0 <bt_conn_set_state>
	bt_conn_unref(conn);
    36b0:	4638      	mov	r0, r7
    36b2:	f000 fdbf 	bl	4234 <bt_conn_unref>
	bt_le_scan_update(false);
    36b6:	2000      	movs	r0, #0
    36b8:	f7fe ff54 	bl	2564 <bt_le_scan_update>
    36bc:	e7c0      	b.n	3640 <bt_recv+0x60c>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    36be:	89a6      	ldrh	r6, [r4, #12]
    36c0:	68a0      	ldr	r0, [r4, #8]
    36c2:	4631      	mov	r1, r6
    36c4:	f7fe faea 	bl	1c9c <bt_hex>
    36c8:	4b1b      	ldr	r3, [pc, #108]	; (3738 <bt_recv+0x704>)
    36ca:	9304      	str	r3, [sp, #16]
    36cc:	9003      	str	r0, [sp, #12]
    36ce:	e88d 0068 	stmia.w	sp, {r3, r5, r6}
    36d2:	4a1a      	ldr	r2, [pc, #104]	; (373c <bt_recv+0x708>)
    36d4:	4b1a      	ldr	r3, [pc, #104]	; (3740 <bt_recv+0x70c>)
    36d6:	491b      	ldr	r1, [pc, #108]	; (3744 <bt_recv+0x710>)
    36d8:	481b      	ldr	r0, [pc, #108]	; (3748 <bt_recv+0x714>)
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    36da:	f7fd fc57 	bl	f8c <printk>
    36de:	e4cd      	b.n	307c <bt_recv+0x48>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    36e0:	4a15      	ldr	r2, [pc, #84]	; (3738 <bt_recv+0x704>)
    36e2:	9202      	str	r2, [sp, #8]
    36e4:	e88d 000c 	stmia.w	sp, {r2, r3}
    36e8:	4916      	ldr	r1, [pc, #88]	; (3744 <bt_recv+0x710>)
    36ea:	4b18      	ldr	r3, [pc, #96]	; (374c <bt_recv+0x718>)
    36ec:	4a18      	ldr	r2, [pc, #96]	; (3750 <bt_recv+0x71c>)
    36ee:	4819      	ldr	r0, [pc, #100]	; (3754 <bt_recv+0x720>)
    36f0:	f7fd fc4c 	bl	f8c <printk>
		net_buf_unref(buf);
    36f4:	4620      	mov	r0, r4
    36f6:	f00f f93b 	bl	12970 <net_buf_unref>
		return -EINVAL;
    36fa:	f06f 0015 	mvn.w	r0, #21
    36fe:	e4de      	b.n	30be <bt_recv+0x8a>
	net_buf_pull(buf, sizeof(*hdr));
    3700:	f104 0608 	add.w	r6, r4, #8
    3704:	2102      	movs	r1, #2
    3706:	4630      	mov	r0, r6
    3708:	f00f f983 	bl	12a12 <net_buf_simple_pull>
	switch (hdr->evt) {
    370c:	782d      	ldrb	r5, [r5, #0]
    370e:	2d05      	cmp	r5, #5
    3710:	f43f acf1 	beq.w	30f6 <bt_recv+0xc2>
    3714:	2d3e      	cmp	r5, #62	; 0x3e
    3716:	f43f ad32 	beq.w	317e <bt_recv+0x14a>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    371a:	89a6      	ldrh	r6, [r4, #12]
    371c:	68a0      	ldr	r0, [r4, #8]
    371e:	4631      	mov	r1, r6
    3720:	f7fe fabc 	bl	1c9c <bt_hex>
    3724:	4b04      	ldr	r3, [pc, #16]	; (3738 <bt_recv+0x704>)
    3726:	9304      	str	r3, [sp, #16]
    3728:	9003      	str	r0, [sp, #12]
    372a:	e88d 0068 	stmia.w	sp, {r3, r5, r6}
    372e:	4a03      	ldr	r2, [pc, #12]	; (373c <bt_recv+0x708>)
    3730:	4b09      	ldr	r3, [pc, #36]	; (3758 <bt_recv+0x724>)
    3732:	4904      	ldr	r1, [pc, #16]	; (3744 <bt_recv+0x710>)
    3734:	4809      	ldr	r0, [pc, #36]	; (375c <bt_recv+0x728>)
    3736:	e7d0      	b.n	36da <bt_recv+0x6a6>
    3738:	000145f1 	.word	0x000145f1
    373c:	000153bb 	.word	0x000153bb
    3740:	00014c1b 	.word	0x00014c1b
    3744:	000153c2 	.word	0x000153c2
    3748:	00015177 	.word	0x00015177
    374c:	00014cac 	.word	0x00014cac
    3750:	00015373 	.word	0x00015373
    3754:	000151de 	.word	0x000151de
    3758:	00014c2d 	.word	0x00014c2d
    375c:	000151ac 	.word	0x000151ac

00003760 <bt_recv_prio>:
{
    3760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3764:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3766:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3768:	2b01      	cmp	r3, #1
{
    376a:	b087      	sub	sp, #28
    376c:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    376e:	d00e      	beq.n	378e <bt_recv_prio+0x2e>
    3770:	4b65      	ldr	r3, [pc, #404]	; (3908 <bt_recv_prio+0x1a8>)
    3772:	9301      	str	r3, [sp, #4]
    3774:	9300      	str	r3, [sp, #0]
    3776:	4a65      	ldr	r2, [pc, #404]	; (390c <bt_recv_prio+0x1ac>)
    3778:	4b65      	ldr	r3, [pc, #404]	; (3910 <bt_recv_prio+0x1b0>)
    377a:	4966      	ldr	r1, [pc, #408]	; (3914 <bt_recv_prio+0x1b4>)
    377c:	4866      	ldr	r0, [pc, #408]	; (3918 <bt_recv_prio+0x1b8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    377e:	f7fd fc05 	bl	f8c <printk>
    3782:	4040      	eors	r0, r0
    3784:	f380 8811 	msr	BASEPRI, r0
    3788:	f04f 0004 	mov.w	r0, #4
    378c:	df02      	svc	2
    378e:	8982      	ldrh	r2, [r0, #12]
    3790:	2a01      	cmp	r2, #1
    3792:	d807      	bhi.n	37a4 <bt_recv_prio+0x44>
    3794:	4b5c      	ldr	r3, [pc, #368]	; (3908 <bt_recv_prio+0x1a8>)
    3796:	9301      	str	r3, [sp, #4]
    3798:	9300      	str	r3, [sp, #0]
    379a:	4a5c      	ldr	r2, [pc, #368]	; (390c <bt_recv_prio+0x1ac>)
    379c:	4b5c      	ldr	r3, [pc, #368]	; (3910 <bt_recv_prio+0x1b0>)
    379e:	495d      	ldr	r1, [pc, #372]	; (3914 <bt_recv_prio+0x1b4>)
    37a0:	485e      	ldr	r0, [pc, #376]	; (391c <bt_recv_prio+0x1bc>)
    37a2:	e7ec      	b.n	377e <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    37a4:	7832      	ldrb	r2, [r6, #0]
    37a6:	2a13      	cmp	r2, #19
    37a8:	f200 80a5 	bhi.w	38f6 <bt_recv_prio+0x196>
    37ac:	4093      	lsls	r3, r2
    37ae:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    37b2:	f000 80a0 	beq.w	38f6 <bt_recv_prio+0x196>
	net_buf_pull(buf, sizeof(*hdr));
    37b6:	f100 0508 	add.w	r5, r0, #8
    37ba:	2102      	movs	r1, #2
    37bc:	4628      	mov	r0, r5
    37be:	f00f f928 	bl	12a12 <net_buf_simple_pull>
	switch (hdr->evt) {
    37c2:	7833      	ldrb	r3, [r6, #0]
    37c4:	2b0f      	cmp	r3, #15
    37c6:	d01d      	beq.n	3804 <bt_recv_prio+0xa4>
    37c8:	2b13      	cmp	r3, #19
    37ca:	d02b      	beq.n	3824 <bt_recv_prio+0xc4>
    37cc:	2b0e      	cmp	r3, #14
    37ce:	f040 8087 	bne.w	38e0 <bt_recv_prio+0x180>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    37d2:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    37d4:	2103      	movs	r1, #3
    37d6:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    37d8:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    37dc:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    37de:	f00f f918 	bl	12a12 <net_buf_simple_pull>
	status = buf->data[0];
    37e2:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    37e4:	4622      	mov	r2, r4
    37e6:	7819      	ldrb	r1, [r3, #0]
    37e8:	4638      	mov	r0, r7
    37ea:	f7fe fc01 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    37ee:	b116      	cbz	r6, 37f6 <bt_recv_prio+0x96>
    37f0:	484b      	ldr	r0, [pc, #300]	; (3920 <bt_recv_prio+0x1c0>)
    37f2:	f010 f946 	bl	13a82 <_impl_k_sem_give>
	net_buf_unref(buf);
    37f6:	4620      	mov	r0, r4
    37f8:	f00f f8ba 	bl	12970 <net_buf_unref>
}
    37fc:	2000      	movs	r0, #0
    37fe:	b007      	add	sp, #28
    3800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3804:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3806:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    380a:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    380c:	2104      	movs	r1, #4
    380e:	4628      	mov	r0, r5
    3810:	f00f f8ff 	bl	12a12 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3814:	4622      	mov	r2, r4
    3816:	7831      	ldrb	r1, [r6, #0]
    3818:	4640      	mov	r0, r8
    381a:	f7fe fbe9 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    381e:	2f00      	cmp	r7, #0
    3820:	d0e9      	beq.n	37f6 <bt_recv_prio+0x96>
    3822:	e7e5      	b.n	37f0 <bt_recv_prio+0x90>
    3824:	68a3      	ldr	r3, [r4, #8]
				BT_ERR("packets count mismatch");
    3826:	4f38      	ldr	r7, [pc, #224]	; (3908 <bt_recv_prio+0x1a8>)
    3828:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3934 <bt_recv_prio+0x1d4>
    382c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 390c <bt_recv_prio+0x1ac>
    3830:	9304      	str	r3, [sp, #16]
	for (i = 0; i < evt->num_handles; i++) {
    3832:	2600      	movs	r6, #0
    3834:	9b04      	ldr	r3, [sp, #16]
    3836:	781b      	ldrb	r3, [r3, #0]
    3838:	429e      	cmp	r6, r3
    383a:	dadc      	bge.n	37f6 <bt_recv_prio+0x96>
    383c:	9b04      	ldr	r3, [sp, #16]
    383e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3842:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3846:	f8b3 8003 	ldrh.w	r8, [r3, #3]
	__asm__ volatile(
    384a:	f04f 0120 	mov.w	r1, #32
    384e:	f3ef 8b11 	mrs	fp, BASEPRI
    3852:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    3856:	4610      	mov	r0, r2
    3858:	9205      	str	r2, [sp, #20]
    385a:	f000 fc9d 	bl	4198 <bt_conn_lookup_handle>
		if (!conn) {
    385e:	9a05      	ldr	r2, [sp, #20]
    3860:	4605      	mov	r5, r0
    3862:	b960      	cbnz	r0, 387e <bt_recv_prio+0x11e>
			BT_ERR("No connection for handle %u", handle);
    3864:	9201      	str	r2, [sp, #4]
    3866:	9702      	str	r7, [sp, #8]
    3868:	9700      	str	r7, [sp, #0]
    386a:	464b      	mov	r3, r9
    386c:	4652      	mov	r2, sl
    386e:	4929      	ldr	r1, [pc, #164]	; (3914 <bt_recv_prio+0x1b4>)
    3870:	482c      	ldr	r0, [pc, #176]	; (3924 <bt_recv_prio+0x1c4>)
    3872:	f7fd fb8b 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3876:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    387a:	3601      	adds	r6, #1
    387c:	e7da      	b.n	3834 <bt_recv_prio+0xd4>
    387e:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    3882:	f100 0b18 	add.w	fp, r0, #24
		while (count--) {
    3886:	f1b8 0f00 	cmp.w	r8, #0
    388a:	d01c      	beq.n	38c6 <bt_recv_prio+0x166>
	__asm__ volatile(
    388c:	f04f 0220 	mov.w	r2, #32
    3890:	f3ef 8e11 	mrs	lr, BASEPRI
    3894:	f382 8811 	msr	BASEPRI, r2
    3898:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    389a:	b129      	cbz	r1, 38a8 <bt_recv_prio+0x148>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    389c:	696a      	ldr	r2, [r5, #20]
	return node->next;
    389e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    38a0:	6128      	str	r0, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    38a2:	4291      	cmp	r1, r2
	list->tail = node;
    38a4:	bf08      	it	eq
    38a6:	6168      	streq	r0, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    38a8:	f38e 8811 	msr	BASEPRI, lr
    38ac:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    38b0:	fa1f f883 	uxth.w	r8, r3
			if (!node) {
    38b4:	b959      	cbnz	r1, 38ce <bt_recv_prio+0x16e>
				BT_ERR("packets count mismatch");
    38b6:	9701      	str	r7, [sp, #4]
    38b8:	9700      	str	r7, [sp, #0]
    38ba:	464b      	mov	r3, r9
    38bc:	4652      	mov	r2, sl
    38be:	4915      	ldr	r1, [pc, #84]	; (3914 <bt_recv_prio+0x1b4>)
    38c0:	4819      	ldr	r0, [pc, #100]	; (3928 <bt_recv_prio+0x1c8>)
    38c2:	f7fd fb63 	bl	f8c <printk>
		bt_conn_unref(conn);
    38c6:	4628      	mov	r0, r5
    38c8:	f000 fcb4 	bl	4234 <bt_conn_unref>
    38cc:	e7d5      	b.n	387a <bt_recv_prio+0x11a>
			k_fifo_put(&conn->tx_notify, node);
    38ce:	4658      	mov	r0, fp
    38d0:	f00f fe12 	bl	134f8 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    38d4:	4628      	mov	r0, r5
    38d6:	f000 f96f 	bl	3bb8 <bt_conn_get_pkts>
    38da:	f010 f8d2 	bl	13a82 <_impl_k_sem_give>
    38de:	e7d2      	b.n	3886 <bt_recv_prio+0x126>
		net_buf_unref(buf);
    38e0:	4620      	mov	r0, r4
    38e2:	f00f f845 	bl	12970 <net_buf_unref>
		BT_ASSERT(0);
    38e6:	4b08      	ldr	r3, [pc, #32]	; (3908 <bt_recv_prio+0x1a8>)
    38e8:	9301      	str	r3, [sp, #4]
    38ea:	9300      	str	r3, [sp, #0]
    38ec:	4a07      	ldr	r2, [pc, #28]	; (390c <bt_recv_prio+0x1ac>)
    38ee:	4b08      	ldr	r3, [pc, #32]	; (3910 <bt_recv_prio+0x1b0>)
    38f0:	4908      	ldr	r1, [pc, #32]	; (3914 <bt_recv_prio+0x1b4>)
    38f2:	480e      	ldr	r0, [pc, #56]	; (392c <bt_recv_prio+0x1cc>)
    38f4:	e743      	b.n	377e <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    38f6:	4b04      	ldr	r3, [pc, #16]	; (3908 <bt_recv_prio+0x1a8>)
    38f8:	9301      	str	r3, [sp, #4]
    38fa:	9300      	str	r3, [sp, #0]
    38fc:	4a03      	ldr	r2, [pc, #12]	; (390c <bt_recv_prio+0x1ac>)
    38fe:	4b04      	ldr	r3, [pc, #16]	; (3910 <bt_recv_prio+0x1b0>)
    3900:	4904      	ldr	r1, [pc, #16]	; (3914 <bt_recv_prio+0x1b4>)
    3902:	480b      	ldr	r0, [pc, #44]	; (3930 <bt_recv_prio+0x1d0>)
    3904:	e73b      	b.n	377e <bt_recv_prio+0x1e>
    3906:	bf00      	nop
    3908:	000145f1 	.word	0x000145f1
    390c:	00015373 	.word	0x00015373
    3910:	00014cb4 	.word	0x00014cb4
    3914:	000153c2 	.word	0x000153c2
    3918:	00015241 	.word	0x00015241
    391c:	00015285 	.word	0x00015285
    3920:	20003b08 	.word	0x20003b08
    3924:	000152bf 	.word	0x000152bf
    3928:	000152eb 	.word	0x000152eb
    392c:	00015312 	.word	0x00015312
    3930:	00015335 	.word	0x00015335
    3934:	00014b5e 	.word	0x00014b5e

00003938 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    3938:	4a08      	ldr	r2, [pc, #32]	; (395c <bt_hci_driver_register+0x24>)
    393a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    393e:	b93b      	cbnz	r3, 3950 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    3940:	68c1      	ldr	r1, [r0, #12]
    3942:	b141      	cbz	r1, 3956 <bt_hci_driver_register+0x1e>
    3944:	6901      	ldr	r1, [r0, #16]
    3946:	b131      	cbz	r1, 3956 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    3948:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    394c:	4618      	mov	r0, r3
    394e:	4770      	bx	lr
		return -EALREADY;
    3950:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3954:	4770      	bx	lr
		return -EINVAL;
    3956:	f06f 0015 	mvn.w	r0, #21
}
    395a:	4770      	bx	lr
    395c:	20003a60 	.word	0x20003a60

00003960 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3960:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3962:	4d2a      	ldr	r5, [pc, #168]	; (3a0c <bt_enable+0xac>)
    3964:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    3968:	b086      	sub	sp, #24
    396a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    396c:	b96b      	cbnz	r3, 398a <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    396e:	4b28      	ldr	r3, [pc, #160]	; (3a10 <bt_enable+0xb0>)
    3970:	9301      	str	r3, [sp, #4]
    3972:	9300      	str	r3, [sp, #0]
    3974:	4a27      	ldr	r2, [pc, #156]	; (3a14 <bt_enable+0xb4>)
    3976:	4b28      	ldr	r3, [pc, #160]	; (3a18 <bt_enable+0xb8>)
    3978:	4928      	ldr	r1, [pc, #160]	; (3a1c <bt_enable+0xbc>)
    397a:	4829      	ldr	r0, [pc, #164]	; (3a20 <bt_enable+0xc0>)
    397c:	f7fd fb06 	bl	f8c <printk>
		return -ENODEV;
    3980:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3984:	4620      	mov	r0, r4
    3986:	b006      	add	sp, #24
    3988:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    398a:	2101      	movs	r1, #1
    398c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3990:	f7fe fafd 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3994:	f010 0001 	ands.w	r0, r0, #1
    3998:	d134      	bne.n	3a04 <bt_enable+0xa4>
	ready_cb = cb;
    399a:	4b22      	ldr	r3, [pc, #136]	; (3a24 <bt_enable+0xc4>)

    399c:	4922      	ldr	r1, [pc, #136]	; (3a28 <bt_enable+0xc8>)
    399e:	601e      	str	r6, [r3, #0]
    39a0:	f06f 0308 	mvn.w	r3, #8
    39a4:	9005      	str	r0, [sp, #20]
    39a6:	9004      	str	r0, [sp, #16]
    39a8:	9303      	str	r3, [sp, #12]
    39aa:	9002      	str	r0, [sp, #8]
    39ac:	9001      	str	r0, [sp, #4]
    39ae:	9000      	str	r0, [sp, #0]
    39b0:	4b1e      	ldr	r3, [pc, #120]	; (3a2c <bt_enable+0xcc>)
    39b2:	481f      	ldr	r0, [pc, #124]	; (3a30 <bt_enable+0xd0>)
    39b4:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    39b8:	f010 fa60 	bl	13e7c <_impl_k_thread_create>
	err = bt_dev.drv->open();
    39bc:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    39c0:	68db      	ldr	r3, [r3, #12]
    39c2:	4798      	blx	r3
	if (err) {
    39c4:	4604      	mov	r4, r0
    39c6:	b150      	cbz	r0, 39de <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    39c8:	4b11      	ldr	r3, [pc, #68]	; (3a10 <bt_enable+0xb0>)
    39ca:	9302      	str	r3, [sp, #8]
    39cc:	e88d 0018 	stmia.w	sp, {r3, r4}
    39d0:	4a10      	ldr	r2, [pc, #64]	; (3a14 <bt_enable+0xb4>)
    39d2:	4b11      	ldr	r3, [pc, #68]	; (3a18 <bt_enable+0xb8>)
    39d4:	4911      	ldr	r1, [pc, #68]	; (3a1c <bt_enable+0xbc>)
    39d6:	4817      	ldr	r0, [pc, #92]	; (3a34 <bt_enable+0xd4>)
    39d8:	f7fd fad8 	bl	f8c <printk>
		return err;
    39dc:	e7d2      	b.n	3984 <bt_enable+0x24>
	if (!cb) {
    39de:	b926      	cbnz	r6, 39ea <bt_enable+0x8a>
}
    39e0:	b006      	add	sp, #24
    39e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    39e6:	f7fe bdef 	b.w	25c8 <bt_init>
    39ea:	2101      	movs	r1, #1
    39ec:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    39f0:	f7fe facd 	bl	1f8e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    39f4:	07c3      	lsls	r3, r0, #31
    39f6:	d4c5      	bmi.n	3984 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    39f8:	f105 0164 	add.w	r1, r5, #100	; 0x64
    39fc:	480e      	ldr	r0, [pc, #56]	; (3a38 <bt_enable+0xd8>)
    39fe:	f00f fd7b 	bl	134f8 <k_queue_append>
    3a02:	e7bf      	b.n	3984 <bt_enable+0x24>
		return -EALREADY;
    3a04:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3a08:	e7bc      	b.n	3984 <bt_enable+0x24>
    3a0a:	bf00      	nop
    3a0c:	20003a60 	.word	0x20003a60
    3a10:	000145f1 	.word	0x000145f1
    3a14:	00015373 	.word	0x00015373
    3a18:	00014cc1 	.word	0x00014cc1
    3a1c:	000153c2 	.word	0x000153c2
    3a20:	00014d74 	.word	0x00014d74
    3a24:	200002d4 	.word	0x200002d4
    3a28:	20001a08 	.word	0x20001a08
    3a2c:	00002ea9 	.word	0x00002ea9
    3a30:	200002dc 	.word	0x200002dc
    3a34:	00014d9d 	.word	0x00014d9d
    3a38:	20001988 	.word	0x20001988

00003a3c <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    3a3c:	2000      	movs	r0, #0
    3a3e:	4770      	bx	lr

00003a40 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    3a40:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3a42:	7803      	ldrb	r3, [r0, #0]
    3a44:	2b01      	cmp	r3, #1
{
    3a46:	4605      	mov	r5, r0
    3a48:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3a4a:	d810      	bhi.n	3a6e <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    3a4c:	7843      	ldrb	r3, [r0, #1]
    3a4e:	2b01      	cmp	r3, #1
    3a50:	d80d      	bhi.n	3a6e <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    3a52:	8841      	ldrh	r1, [r0, #2]
    3a54:	1f0b      	subs	r3, r1, #4
    3a56:	b29b      	uxth	r3, r3
    3a58:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    3a5c:	4283      	cmp	r3, r0
    3a5e:	d806      	bhi.n	3a6e <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3a60:	88aa      	ldrh	r2, [r5, #4]
    3a62:	1f13      	subs	r3, r2, #4
    3a64:	b29b      	uxth	r3, r3
    3a66:	4283      	cmp	r3, r0
    3a68:	d801      	bhi.n	3a6e <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3a6a:	4291      	cmp	r1, r2
    3a6c:	d22b      	bcs.n	3ac6 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3a6e:	f06f 0415 	mvn.w	r4, #21
    3a72:	e00e      	b.n	3a92 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3a74:	2108      	movs	r1, #8
    3a76:	4819      	ldr	r0, [pc, #100]	; (3adc <bt_le_scan_start+0x9c>)
    3a78:	f7fe fb1c 	bl	20b4 <atomic_test_bit>
    3a7c:	b158      	cbz	r0, 3a96 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3a7e:	4610      	mov	r0, r2
    3a80:	f7fe fb94 	bl	21ac <set_le_scan_enable>
		if (err) {
    3a84:	4604      	mov	r4, r0
    3a86:	b130      	cbz	r0, 3a96 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a88:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3a8c:	4813      	ldr	r0, [pc, #76]	; (3adc <bt_le_scan_start+0x9c>)
    3a8e:	f7fe fa8f 	bl	1fb0 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3a92:	4620      	mov	r0, r4
    3a94:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3a96:	786b      	ldrb	r3, [r5, #1]
    3a98:	b17b      	cbz	r3, 3aba <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3a9e:	480f      	ldr	r0, [pc, #60]	; (3adc <bt_le_scan_start+0x9c>)
    3aa0:	f7fe fa75 	bl	1f8e <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3aa4:	88aa      	ldrh	r2, [r5, #4]
    3aa6:	8869      	ldrh	r1, [r5, #2]
    3aa8:	7828      	ldrb	r0, [r5, #0]
    3aaa:	f7fe fd0b 	bl	24c4 <start_le_scan>
	if (err) {
    3aae:	4604      	mov	r4, r0
    3ab0:	2800      	cmp	r0, #0
    3ab2:	d1e9      	bne.n	3a88 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3ab4:	4b0a      	ldr	r3, [pc, #40]	; (3ae0 <bt_le_scan_start+0xa0>)
    3ab6:	601e      	str	r6, [r3, #0]
	return 0;
    3ab8:	e7eb      	b.n	3a92 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3aba:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3abe:	4807      	ldr	r0, [pc, #28]	; (3adc <bt_le_scan_start+0x9c>)
    3ac0:	f7fe fa76 	bl	1fb0 <atomic_and>
    3ac4:	e7ee      	b.n	3aa4 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
    3aca:	4804      	ldr	r0, [pc, #16]	; (3adc <bt_le_scan_start+0x9c>)
    3acc:	f7fe fa5f 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3ad0:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3ad4:	d0ce      	beq.n	3a74 <bt_le_scan_start+0x34>
		return -EALREADY;
    3ad6:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3ada:	e7da      	b.n	3a92 <bt_le_scan_start+0x52>
    3adc:	20003ad0 	.word	0x20003ad0
    3ae0:	200002d8 	.word	0x200002d8

00003ae4 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3ae4:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3ae6:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3aea:	4807      	ldr	r0, [pc, #28]	; (3b08 <bt_le_scan_stop+0x24>)
    3aec:	f7fe fa60 	bl	1fb0 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3af0:	0583      	lsls	r3, r0, #22
    3af2:	d506      	bpl.n	3b02 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3af4:	4b05      	ldr	r3, [pc, #20]	; (3b0c <bt_le_scan_stop+0x28>)
    3af6:	2000      	movs	r0, #0
    3af8:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3afe:	f7fe bd31 	b.w	2564 <bt_le_scan_update>
}
    3b02:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3b06:	bd08      	pop	{r3, pc}
    3b08:	20003ad0 	.word	0x20003ad0
    3b0c:	200002d8 	.word	0x200002d8

00003b10 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3b10:	b538      	push	{r3, r4, r5, lr}
    3b12:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3b14:	4805      	ldr	r0, [pc, #20]	; (3b2c <bt_buf_get_rx+0x1c>)
    3b16:	f00e fefb 	bl	12910 <net_buf_alloc_fixed>
#endif

	if (buf) {
    3b1a:	4604      	mov	r4, r0
    3b1c:	b120      	cbz	r0, 3b28 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b1e:	2100      	movs	r1, #0
    3b20:	3008      	adds	r0, #8
    3b22:	f00e ff14 	bl	1294e <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3b26:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3b28:	4620      	mov	r0, r4
    3b2a:	bd38      	pop	{r3, r4, r5, pc}
    3b2c:	20003f8c 	.word	0x20003f8c

00003b30 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3b30:	b510      	push	{r4, lr}
    3b32:	4601      	mov	r1, r0
	__asm__ volatile(
    3b34:	f04f 0320 	mov.w	r3, #32
    3b38:	f3ef 8011 	mrs	r0, BASEPRI
    3b3c:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3b40:	4a0b      	ldr	r2, [pc, #44]	; (3b70 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3b42:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3b44:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    3b48:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3b4c:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3b50:	b924      	cbnz	r4, 3b5c <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b52:	2001      	movs	r0, #1
}
    3b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3b58:	f7ff bfda 	b.w	3b10 <bt_buf_get_rx>
    3b5c:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b5e:	f104 0008 	add.w	r0, r4, #8
    3b62:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3b64:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b66:	4619      	mov	r1, r3
    3b68:	f00e fef1 	bl	1294e <net_buf_simple_reserve>
}
    3b6c:	4620      	mov	r0, r4
    3b6e:	bd10      	pop	{r4, pc}
    3b70:	20003a60 	.word	0x20003a60

00003b74 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3b74:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3b76:	4b06      	ldr	r3, [pc, #24]	; (3b90 <notify_connected+0x1c>)
    3b78:	681c      	ldr	r4, [r3, #0]
{
    3b7a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3b7c:	b904      	cbnz	r4, 3b80 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3b7e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3b80:	6823      	ldr	r3, [r4, #0]
    3b82:	b113      	cbz	r3, 3b8a <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3b84:	7a29      	ldrb	r1, [r5, #8]
    3b86:	4628      	mov	r0, r5
    3b88:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3b8a:	6924      	ldr	r4, [r4, #16]
    3b8c:	e7f6      	b.n	3b7c <notify_connected+0x8>
    3b8e:	bf00      	nop
    3b90:	2000034c 	.word	0x2000034c

00003b94 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3b94:	f3bf 8f5b 	dmb	ish
    3b98:	6800      	ldr	r0, [r0, #0]
    3b9a:	f3bf 8f5b 	dmb	ish
}
    3b9e:	4770      	bx	lr

00003ba0 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3ba0:	8943      	ldrh	r3, [r0, #10]
{
    3ba2:	b510      	push	{r4, lr}
    3ba4:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3ba6:	b12b      	cbz	r3, 3bb4 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3ba8:	68c0      	ldr	r0, [r0, #12]
    3baa:	f00e fee1 	bl	12970 <net_buf_unref>
	conn->rx = NULL;
    3bae:	2300      	movs	r3, #0
    3bb0:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3bb2:	8163      	strh	r3, [r4, #10]
    3bb4:	bd10      	pop	{r4, pc}
	...

00003bb8 <bt_conn_get_pkts>:
}
    3bb8:	4800      	ldr	r0, [pc, #0]	; (3bbc <bt_conn_get_pkts+0x4>)
    3bba:	4770      	bx	lr
    3bbc:	20003aec 	.word	0x20003aec

00003bc0 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3bc0:	4b08      	ldr	r3, [pc, #32]	; (3be4 <notify_le_param_updated+0x24>)
{
    3bc2:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3bc4:	681c      	ldr	r4, [r3, #0]
{
    3bc6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3bc8:	b904      	cbnz	r4, 3bcc <notify_le_param_updated+0xc>
}
    3bca:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3bcc:	68e6      	ldr	r6, [r4, #12]
    3bce:	b13e      	cbz	r6, 3be0 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3bd0:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    3bd4:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    3bd8:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    3bdc:	4628      	mov	r0, r5
    3bde:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3be0:	6924      	ldr	r4, [r4, #16]
    3be2:	e7f1      	b.n	3bc8 <notify_le_param_updated+0x8>
    3be4:	2000034c 	.word	0x2000034c

00003be8 <le_param_req>:
{
    3be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bea:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3bec:	4608      	mov	r0, r1
{
    3bee:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3bf0:	f7fe fb7c 	bl	22ec <bt_le_conn_params_valid>
    3bf4:	4605      	mov	r5, r0
    3bf6:	b910      	cbnz	r0, 3bfe <le_param_req+0x16>
		return false;
    3bf8:	2500      	movs	r5, #0
}
    3bfa:	4628      	mov	r0, r5
    3bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3bfe:	4b09      	ldr	r3, [pc, #36]	; (3c24 <le_param_req+0x3c>)
    3c00:	681c      	ldr	r4, [r3, #0]
    3c02:	2c00      	cmp	r4, #0
    3c04:	d0f9      	beq.n	3bfa <le_param_req+0x12>
		if (!cb->le_param_req) {
    3c06:	68a3      	ldr	r3, [r4, #8]
    3c08:	b90b      	cbnz	r3, 3c0e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3c0a:	6924      	ldr	r4, [r4, #16]
    3c0c:	e7f9      	b.n	3c02 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3c0e:	4631      	mov	r1, r6
    3c10:	4638      	mov	r0, r7
    3c12:	4798      	blx	r3
    3c14:	2800      	cmp	r0, #0
    3c16:	d0ef      	beq.n	3bf8 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3c18:	4630      	mov	r0, r6
    3c1a:	f7fe fb67 	bl	22ec <bt_le_conn_params_valid>
    3c1e:	2800      	cmp	r0, #0
    3c20:	d1f3      	bne.n	3c0a <le_param_req+0x22>
    3c22:	e7e9      	b.n	3bf8 <le_param_req+0x10>
    3c24:	2000034c 	.word	0x2000034c

00003c28 <bt_conn_cb_register>:
	cb->_next = callback_list;
    3c28:	4b02      	ldr	r3, [pc, #8]	; (3c34 <bt_conn_cb_register+0xc>)
    3c2a:	681a      	ldr	r2, [r3, #0]
    3c2c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    3c2e:	6018      	str	r0, [r3, #0]
    3c30:	4770      	bx	lr
    3c32:	bf00      	nop
    3c34:	2000034c 	.word	0x2000034c

00003c38 <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    3c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c3c:	b086      	sub	sp, #24
    3c3e:	4690      	mov	r8, r2
    3c40:	460d      	mov	r5, r1
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3c42:	4e66      	ldr	r6, [pc, #408]	; (3ddc <bt_conn_recv+0x1a4>)
{
    3c44:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3c46:	f00f ff0d 	bl	13a64 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3c4a:	9605      	str	r6, [sp, #20]
    3c4c:	f8cd 8010 	str.w	r8, [sp, #16]
    3c50:	89ab      	ldrh	r3, [r5, #12]
    3c52:	9303      	str	r3, [sp, #12]
    3c54:	8823      	ldrh	r3, [r4, #0]
    3c56:	9302      	str	r3, [sp, #8]
    3c58:	9001      	str	r0, [sp, #4]
    3c5a:	9600      	str	r6, [sp, #0]
    3c5c:	4b60      	ldr	r3, [pc, #384]	; (3de0 <bt_conn_recv+0x1a8>)
    3c5e:	4a61      	ldr	r2, [pc, #388]	; (3de4 <bt_conn_recv+0x1ac>)
    3c60:	4961      	ldr	r1, [pc, #388]	; (3de8 <bt_conn_recv+0x1b0>)
    3c62:	4862      	ldr	r0, [pc, #392]	; (3dec <bt_conn_recv+0x1b4>)
    3c64:	f7fd f992 	bl	f8c <printk>

	/* Check packet boundary flags */
	switch (flags) {
    3c68:	f1b8 0f01 	cmp.w	r8, #1
    3c6c:	4637      	mov	r7, r6
    3c6e:	d038      	beq.n	3ce2 <bt_conn_recv+0xaa>
    3c70:	f1b8 0f02 	cmp.w	r8, #2
    3c74:	f040 8094 	bne.w	3da0 <bt_conn_recv+0x168>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3c78:	68ab      	ldr	r3, [r5, #8]
    3c7a:	881e      	ldrh	r6, [r3, #0]
    3c7c:	f00f fef2 	bl	13a64 <_impl_k_current_get>

		BT_DBG("First, len %u final %u", buf->len, len);
    3c80:	9704      	str	r7, [sp, #16]
    3c82:	9603      	str	r6, [sp, #12]
    3c84:	89ab      	ldrh	r3, [r5, #12]
    3c86:	9302      	str	r3, [sp, #8]
    3c88:	9001      	str	r0, [sp, #4]
    3c8a:	4b55      	ldr	r3, [pc, #340]	; (3de0 <bt_conn_recv+0x1a8>)
    3c8c:	9700      	str	r7, [sp, #0]
    3c8e:	4a55      	ldr	r2, [pc, #340]	; (3de4 <bt_conn_recv+0x1ac>)
    3c90:	4955      	ldr	r1, [pc, #340]	; (3de8 <bt_conn_recv+0x1b0>)
    3c92:	4857      	ldr	r0, [pc, #348]	; (3df0 <bt_conn_recv+0x1b8>)
    3c94:	f7fd f97a 	bl	f8c <printk>

		if (conn->rx_len) {
    3c98:	8963      	ldrh	r3, [r4, #10]
    3c9a:	b153      	cbz	r3, 3cb2 <bt_conn_recv+0x7a>
			BT_ERR("Unexpected first L2CAP frame");
    3c9c:	9701      	str	r7, [sp, #4]
    3c9e:	9700      	str	r7, [sp, #0]
    3ca0:	4b4f      	ldr	r3, [pc, #316]	; (3de0 <bt_conn_recv+0x1a8>)
    3ca2:	4a54      	ldr	r2, [pc, #336]	; (3df4 <bt_conn_recv+0x1bc>)
    3ca4:	4950      	ldr	r1, [pc, #320]	; (3de8 <bt_conn_recv+0x1b0>)
    3ca6:	4854      	ldr	r0, [pc, #336]	; (3df8 <bt_conn_recv+0x1c0>)
    3ca8:	f7fd f970 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    3cac:	4620      	mov	r0, r4
    3cae:	f7ff ff77 	bl	3ba0 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3cb2:	89ab      	ldrh	r3, [r5, #12]
    3cb4:	1af6      	subs	r6, r6, r3
    3cb6:	3604      	adds	r6, #4
    3cb8:	8166      	strh	r6, [r4, #10]
    3cba:	f00f fed3 	bl	13a64 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    3cbe:	8963      	ldrh	r3, [r4, #10]
    3cc0:	9302      	str	r3, [sp, #8]
    3cc2:	9001      	str	r0, [sp, #4]
    3cc4:	4b46      	ldr	r3, [pc, #280]	; (3de0 <bt_conn_recv+0x1a8>)
    3cc6:	9703      	str	r7, [sp, #12]
    3cc8:	9700      	str	r7, [sp, #0]
    3cca:	4a46      	ldr	r2, [pc, #280]	; (3de4 <bt_conn_recv+0x1ac>)
    3ccc:	4946      	ldr	r1, [pc, #280]	; (3de8 <bt_conn_recv+0x1b0>)
    3cce:	484b      	ldr	r0, [pc, #300]	; (3dfc <bt_conn_recv+0x1c4>)
    3cd0:	f7fd f95c 	bl	f8c <printk>
		if (conn->rx_len) {
    3cd4:	8963      	ldrh	r3, [r4, #10]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d051      	beq.n	3d7e <bt_conn_recv+0x146>
			conn->rx = buf;
    3cda:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3cdc:	b006      	add	sp, #24
    3cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->rx_len) {
    3ce2:	8963      	ldrh	r3, [r4, #10]
    3ce4:	b983      	cbnz	r3, 3d08 <bt_conn_recv+0xd0>
			BT_ERR("Unexpected L2CAP continuation");
    3ce6:	4b3e      	ldr	r3, [pc, #248]	; (3de0 <bt_conn_recv+0x1a8>)
    3ce8:	4a42      	ldr	r2, [pc, #264]	; (3df4 <bt_conn_recv+0x1bc>)
    3cea:	493f      	ldr	r1, [pc, #252]	; (3de8 <bt_conn_recv+0x1b0>)
    3cec:	4844      	ldr	r0, [pc, #272]	; (3e00 <bt_conn_recv+0x1c8>)
    3cee:	9601      	str	r6, [sp, #4]
    3cf0:	9600      	str	r6, [sp, #0]
			BT_ERR("L2CAP data overflow");
    3cf2:	f7fd f94b 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    3cf6:	4620      	mov	r0, r4
    3cf8:	f7ff ff52 	bl	3ba0 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    3cfc:	4628      	mov	r0, r5
}
    3cfe:	b006      	add	sp, #24
    3d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			net_buf_unref(buf);
    3d04:	f00e be34 	b.w	12970 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3d08:	89aa      	ldrh	r2, [r5, #12]
    3d0a:	429a      	cmp	r2, r3
    3d0c:	d906      	bls.n	3d1c <bt_conn_recv+0xe4>
			BT_ERR("L2CAP data overflow");
    3d0e:	9601      	str	r6, [sp, #4]
    3d10:	9600      	str	r6, [sp, #0]
    3d12:	4b33      	ldr	r3, [pc, #204]	; (3de0 <bt_conn_recv+0x1a8>)
    3d14:	4a37      	ldr	r2, [pc, #220]	; (3df4 <bt_conn_recv+0x1bc>)
    3d16:	4934      	ldr	r1, [pc, #208]	; (3de8 <bt_conn_recv+0x1b0>)
    3d18:	483a      	ldr	r0, [pc, #232]	; (3e04 <bt_conn_recv+0x1cc>)
    3d1a:	e7ea      	b.n	3cf2 <bt_conn_recv+0xba>
    3d1c:	f00f fea2 	bl	13a64 <_impl_k_current_get>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    3d20:	8963      	ldrh	r3, [r4, #10]
    3d22:	9604      	str	r6, [sp, #16]
    3d24:	9303      	str	r3, [sp, #12]
    3d26:	89ab      	ldrh	r3, [r5, #12]
    3d28:	9302      	str	r3, [sp, #8]
    3d2a:	9001      	str	r0, [sp, #4]
    3d2c:	4b2c      	ldr	r3, [pc, #176]	; (3de0 <bt_conn_recv+0x1a8>)
    3d2e:	4a2d      	ldr	r2, [pc, #180]	; (3de4 <bt_conn_recv+0x1ac>)
    3d30:	492d      	ldr	r1, [pc, #180]	; (3de8 <bt_conn_recv+0x1b0>)
    3d32:	9600      	str	r6, [sp, #0]
    3d34:	4834      	ldr	r0, [pc, #208]	; (3e08 <bt_conn_recv+0x1d0>)
    3d36:	f7fd f929 	bl	f8c <printk>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3d3a:	68e0      	ldr	r0, [r4, #12]
    3d3c:	f8b5 800c 	ldrh.w	r8, [r5, #12]
    3d40:	3008      	adds	r0, #8
    3d42:	f00e fe82 	bl	12a4a <net_buf_simple_tailroom>
    3d46:	4580      	cmp	r8, r0
    3d48:	d906      	bls.n	3d58 <bt_conn_recv+0x120>
			BT_ERR("Not enough buffer space for L2CAP data");
    3d4a:	9601      	str	r6, [sp, #4]
    3d4c:	9600      	str	r6, [sp, #0]
    3d4e:	4b24      	ldr	r3, [pc, #144]	; (3de0 <bt_conn_recv+0x1a8>)
    3d50:	4a28      	ldr	r2, [pc, #160]	; (3df4 <bt_conn_recv+0x1bc>)
    3d52:	4925      	ldr	r1, [pc, #148]	; (3de8 <bt_conn_recv+0x1b0>)
    3d54:	482d      	ldr	r0, [pc, #180]	; (3e0c <bt_conn_recv+0x1d4>)
    3d56:	e7cc      	b.n	3cf2 <bt_conn_recv+0xba>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3d58:	68e0      	ldr	r0, [r4, #12]
    3d5a:	89aa      	ldrh	r2, [r5, #12]
    3d5c:	68a9      	ldr	r1, [r5, #8]
    3d5e:	3008      	adds	r0, #8
    3d60:	f00e fe3e 	bl	129e0 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3d64:	8963      	ldrh	r3, [r4, #10]
    3d66:	89aa      	ldrh	r2, [r5, #12]
    3d68:	1a9b      	subs	r3, r3, r2
    3d6a:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    3d6c:	4628      	mov	r0, r5
    3d6e:	f00e fdff 	bl	12970 <net_buf_unref>
		if (conn->rx_len) {
    3d72:	8963      	ldrh	r3, [r4, #10]
    3d74:	2b00      	cmp	r3, #0
    3d76:	d1b1      	bne.n	3cdc <bt_conn_recv+0xa4>
		buf = conn->rx;
    3d78:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    3d7a:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    3d7c:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    3d7e:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3d80:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3d82:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    3d84:	1d19      	adds	r1, r3, #4
    3d86:	4291      	cmp	r1, r2
    3d88:	d014      	beq.n	3db4 <bt_conn_recv+0x17c>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    3d8a:	9202      	str	r2, [sp, #8]
    3d8c:	9301      	str	r3, [sp, #4]
    3d8e:	9703      	str	r7, [sp, #12]
    3d90:	9700      	str	r7, [sp, #0]
    3d92:	4b13      	ldr	r3, [pc, #76]	; (3de0 <bt_conn_recv+0x1a8>)
    3d94:	4a17      	ldr	r2, [pc, #92]	; (3df4 <bt_conn_recv+0x1bc>)
    3d96:	4914      	ldr	r1, [pc, #80]	; (3de8 <bt_conn_recv+0x1b0>)
    3d98:	481d      	ldr	r0, [pc, #116]	; (3e10 <bt_conn_recv+0x1d8>)
    3d9a:	f7fd f8f7 	bl	f8c <printk>
    3d9e:	e7ad      	b.n	3cfc <bt_conn_recv+0xc4>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3da0:	9602      	str	r6, [sp, #8]
    3da2:	e88d 0140 	stmia.w	sp, {r6, r8}
    3da6:	4b0e      	ldr	r3, [pc, #56]	; (3de0 <bt_conn_recv+0x1a8>)
    3da8:	4a12      	ldr	r2, [pc, #72]	; (3df4 <bt_conn_recv+0x1bc>)
    3daa:	490f      	ldr	r1, [pc, #60]	; (3de8 <bt_conn_recv+0x1b0>)
    3dac:	4819      	ldr	r0, [pc, #100]	; (3e14 <bt_conn_recv+0x1dc>)
    3dae:	f7fd f8ed 	bl	f8c <printk>
    3db2:	e7a0      	b.n	3cf6 <bt_conn_recv+0xbe>
    3db4:	f00f fe56 	bl	13a64 <_impl_k_current_get>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    3db8:	9703      	str	r7, [sp, #12]
    3dba:	89ab      	ldrh	r3, [r5, #12]
    3dbc:	9302      	str	r3, [sp, #8]
    3dbe:	9001      	str	r0, [sp, #4]
    3dc0:	9700      	str	r7, [sp, #0]
    3dc2:	4b07      	ldr	r3, [pc, #28]	; (3de0 <bt_conn_recv+0x1a8>)
    3dc4:	4a07      	ldr	r2, [pc, #28]	; (3de4 <bt_conn_recv+0x1ac>)
    3dc6:	4908      	ldr	r1, [pc, #32]	; (3de8 <bt_conn_recv+0x1b0>)
    3dc8:	4813      	ldr	r0, [pc, #76]	; (3e18 <bt_conn_recv+0x1e0>)
    3dca:	f7fd f8df 	bl	f8c <printk>
	bt_l2cap_recv(conn, buf);
    3dce:	4629      	mov	r1, r5
    3dd0:	4620      	mov	r0, r4
}
    3dd2:	b006      	add	sp, #24
    3dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_recv(conn, buf);
    3dd8:	f001 b8b4 	b.w	4f44 <bt_l2cap_recv>
    3ddc:	000145f1 	.word	0x000145f1
    3de0:	00015668 	.word	0x00015668
    3de4:	00015832 	.word	0x00015832
    3de8:	000153c2 	.word	0x000153c2
    3dec:	00015839 	.word	0x00015839
    3df0:	0001586a 	.word	0x0001586a
    3df4:	00015373 	.word	0x00015373
    3df8:	00015896 	.word	0x00015896
    3dfc:	000158c3 	.word	0x000158c3
    3e00:	000158e2 	.word	0x000158e2
    3e04:	00015910 	.word	0x00015910
    3e08:	00015934 	.word	0x00015934
    3e0c:	00015960 	.word	0x00015960
    3e10:	000159c5 	.word	0x000159c5
    3e14:	00015997 	.word	0x00015997
    3e18:	000159f1 	.word	0x000159f1

00003e1c <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    3e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e1e:	460c      	mov	r4, r1
    3e20:	b087      	sub	sp, #28
    3e22:	4606      	mov	r6, r0
    3e24:	4617      	mov	r7, r2
    3e26:	f00f fe1d 	bl	13a64 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    3e2a:	89a3      	ldrh	r3, [r4, #12]
    3e2c:	4d13      	ldr	r5, [pc, #76]	; (3e7c <bt_conn_send_cb+0x60>)
    3e2e:	9303      	str	r3, [sp, #12]
    3e30:	8833      	ldrh	r3, [r6, #0]
    3e32:	9302      	str	r3, [sp, #8]
    3e34:	9001      	str	r0, [sp, #4]
    3e36:	4b12      	ldr	r3, [pc, #72]	; (3e80 <bt_conn_send_cb+0x64>)
    3e38:	9505      	str	r5, [sp, #20]
    3e3a:	9704      	str	r7, [sp, #16]
    3e3c:	9500      	str	r5, [sp, #0]
    3e3e:	4a11      	ldr	r2, [pc, #68]	; (3e84 <bt_conn_send_cb+0x68>)
    3e40:	4911      	ldr	r1, [pc, #68]	; (3e88 <bt_conn_send_cb+0x6c>)
    3e42:	4812      	ldr	r0, [pc, #72]	; (3e8c <bt_conn_send_cb+0x70>)
    3e44:	f7fd f8a2 	bl	f8c <printk>

	if (conn->state != BT_CONN_CONNECTED) {
    3e48:	7a73      	ldrb	r3, [r6, #9]
    3e4a:	2b03      	cmp	r3, #3
    3e4c:	d00e      	beq.n	3e6c <bt_conn_send_cb+0x50>
		BT_ERR("not connected!");
    3e4e:	4b0c      	ldr	r3, [pc, #48]	; (3e80 <bt_conn_send_cb+0x64>)
    3e50:	4a0f      	ldr	r2, [pc, #60]	; (3e90 <bt_conn_send_cb+0x74>)
    3e52:	490d      	ldr	r1, [pc, #52]	; (3e88 <bt_conn_send_cb+0x6c>)
    3e54:	9501      	str	r5, [sp, #4]
    3e56:	9500      	str	r5, [sp, #0]
    3e58:	480e      	ldr	r0, [pc, #56]	; (3e94 <bt_conn_send_cb+0x78>)
    3e5a:	f7fd f897 	bl	f8c <printk>
		net_buf_unref(buf);
    3e5e:	4620      	mov	r0, r4
    3e60:	f00e fd86 	bl	12970 <net_buf_unref>
		return -ENOTCONN;
    3e64:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    3e68:	b007      	add	sp, #28
    3e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_put(&conn->tx_queue, buf);
    3e6c:	f106 0028 	add.w	r0, r6, #40	; 0x28
	conn_tx(buf)->cb = cb;
    3e70:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    3e72:	4621      	mov	r1, r4
    3e74:	f00e fd6f 	bl	12956 <net_buf_put>
	return 0;
    3e78:	2000      	movs	r0, #0
    3e7a:	e7f5      	b.n	3e68 <bt_conn_send_cb+0x4c>
    3e7c:	000145f1 	.word	0x000145f1
    3e80:	00015675 	.word	0x00015675
    3e84:	00015832 	.word	0x00015832
    3e88:	000153c2 	.word	0x000153c2
    3e8c:	00015a55 	.word	0x00015a55
    3e90:	00015373 	.word	0x00015373
    3e94:	00015a8a 	.word	0x00015a8a

00003e98 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3e98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3e9c:	4606      	mov	r6, r0
    3e9e:	f00f fde1 	bl	13a64 <_impl_k_current_get>
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    3ea2:	4b13      	ldr	r3, [pc, #76]	; (3ef0 <bt_conn_notify_tx+0x58>)
    3ea4:	9303      	str	r3, [sp, #12]
    3ea6:	9001      	str	r0, [sp, #4]
    3ea8:	9300      	str	r3, [sp, #0]
    3eaa:	9602      	str	r6, [sp, #8]
    3eac:	4b11      	ldr	r3, [pc, #68]	; (3ef4 <bt_conn_notify_tx+0x5c>)
    3eae:	4a12      	ldr	r2, [pc, #72]	; (3ef8 <bt_conn_notify_tx+0x60>)
    3eb0:	4912      	ldr	r1, [pc, #72]	; (3efc <bt_conn_notify_tx+0x64>)
    3eb2:	4813      	ldr	r0, [pc, #76]	; (3f00 <bt_conn_notify_tx+0x68>)
    3eb4:	4d13      	ldr	r5, [pc, #76]	; (3f04 <bt_conn_notify_tx+0x6c>)
    3eb6:	f7fd f869 	bl	f8c <printk>

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3eba:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3ebe:	f04f 0800 	mov.w	r8, #0
    3ec2:	2100      	movs	r1, #0
    3ec4:	4638      	mov	r0, r7
    3ec6:	f00f fb3b 	bl	13540 <_impl_k_queue_get>
    3eca:	4604      	mov	r4, r0
    3ecc:	b910      	cbnz	r0, 3ed4 <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3ece:	b004      	add	sp, #16
    3ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3ed4:	6863      	ldr	r3, [r4, #4]
    3ed6:	b10b      	cbz	r3, 3edc <bt_conn_notify_tx+0x44>
			tx->cb(conn);
    3ed8:	4630      	mov	r0, r6
    3eda:	4798      	blx	r3
    3edc:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    3ede:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3ee0:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3ee2:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3ee6:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    3ee8:	2b00      	cmp	r3, #0
    3eea:	d1ea      	bne.n	3ec2 <bt_conn_notify_tx+0x2a>
	list->tail = node;
    3eec:	606c      	str	r4, [r5, #4]
    3eee:	e7e6      	b.n	3ebe <bt_conn_notify_tx+0x26>
    3ef0:	000145f1 	.word	0x000145f1
    3ef4:	00015685 	.word	0x00015685
    3ef8:	00015832 	.word	0x00015832
    3efc:	000153c2 	.word	0x000153c2
    3f00:	00015769 	.word	0x00015769
    3f04:	200003f8 	.word	0x200003f8

00003f08 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f0c:	b088      	sub	sp, #32
    3f0e:	460f      	mov	r7, r1
    3f10:	4614      	mov	r4, r2
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    3f12:	4e57      	ldr	r6, [pc, #348]	; (4070 <send_frag+0x168>)
{
    3f14:	4605      	mov	r5, r0
    3f16:	4699      	mov	r9, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3f18:	f00f fda4 	bl	13a64 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    3f1c:	9606      	str	r6, [sp, #24]
    3f1e:	9405      	str	r4, [sp, #20]
    3f20:	89bb      	ldrh	r3, [r7, #12]
    3f22:	4a54      	ldr	r2, [pc, #336]	; (4074 <send_frag+0x16c>)
    3f24:	9304      	str	r3, [sp, #16]
    3f26:	9001      	str	r0, [sp, #4]
    3f28:	4b53      	ldr	r3, [pc, #332]	; (4078 <send_frag+0x170>)
    3f2a:	4954      	ldr	r1, [pc, #336]	; (407c <send_frag+0x174>)
    3f2c:	9703      	str	r7, [sp, #12]
    3f2e:	9502      	str	r5, [sp, #8]
    3f30:	9600      	str	r6, [sp, #0]
    3f32:	4853      	ldr	r0, [pc, #332]	; (4080 <send_frag+0x178>)
    3f34:	f7fd f82a 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f3c:	4851      	ldr	r0, [pc, #324]	; (4084 <send_frag+0x17c>)
    3f3e:	f00f fdc8 	bl	13ad2 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    3f42:	4b51      	ldr	r3, [pc, #324]	; (4088 <send_frag+0x180>)
    3f44:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3f48:	f7ff fe24 	bl	3b94 <atomic_get>
    3f4c:	46b0      	mov	r8, r6
    3f4e:	b130      	cbz	r0, 3f5e <send_frag+0x56>
		if (conns[i].state == BT_CONN_CONNECTED ||
    3f50:	7a5a      	ldrb	r2, [r3, #9]
    3f52:	3a03      	subs	r2, #3
    3f54:	2a01      	cmp	r2, #1
    3f56:	d802      	bhi.n	3f5e <send_frag+0x56>
			bt_conn_notify_tx(&conns[i]);
    3f58:	4618      	mov	r0, r3
    3f5a:	f7ff ff9d 	bl	3e98 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3f5e:	7a6b      	ldrb	r3, [r5, #9]
    3f60:	2b03      	cmp	r3, #3
    3f62:	d166      	bne.n	4032 <send_frag+0x12a>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    3f64:	2104      	movs	r1, #4
    3f66:	f107 0008 	add.w	r0, r7, #8
    3f6a:	f00e fd4a 	bl	12a02 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3f6e:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    3f70:	f8d7 a014 	ldr.w	sl, [r7, #20]
    3f74:	4e45      	ldr	r6, [pc, #276]	; (408c <send_frag+0x184>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3f76:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3f7a:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3f7c:	89bb      	ldrh	r3, [r7, #12]
    3f7e:	3b04      	subs	r3, #4
    3f80:	8043      	strh	r3, [r0, #2]
    3f82:	2302      	movs	r3, #2
    3f84:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3f86:	f00f fd6d 	bl	13a64 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    3f8a:	f8cd 8010 	str.w	r8, [sp, #16]
    3f8e:	9001      	str	r0, [sp, #4]
    3f90:	f8cd a00c 	str.w	sl, [sp, #12]
    3f94:	9502      	str	r5, [sp, #8]
    3f96:	f8cd 8000 	str.w	r8, [sp]
    3f9a:	4b3d      	ldr	r3, [pc, #244]	; (4090 <send_frag+0x188>)
    3f9c:	4a35      	ldr	r2, [pc, #212]	; (4074 <send_frag+0x16c>)
    3f9e:	4937      	ldr	r1, [pc, #220]	; (407c <send_frag+0x174>)
    3fa0:	483c      	ldr	r0, [pc, #240]	; (4094 <send_frag+0x18c>)
    3fa2:	f7fc fff3 	bl	f8c <printk>
    3fa6:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3fa8:	6872      	ldr	r2, [r6, #4]
	return node->next;
    3faa:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    3fac:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3fae:	4294      	cmp	r4, r2
	list->tail = node;
    3fb0:	bf08      	it	eq
    3fb2:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    3fb4:	f8c4 a004 	str.w	sl, [r4, #4]
	__asm__ volatile(
    3fb8:	f04f 0320 	mov.w	r3, #32
    3fbc:	f3ef 8211 	mrs	r2, BASEPRI
    3fc0:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    3fc4:	2300      	movs	r3, #0
    3fc6:	6023      	str	r3, [r4, #0]
    3fc8:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d140      	bne.n	4050 <send_frag+0x148>
	list->tail = node;
    3fce:	616c      	str	r4, [r5, #20]
	list->head = node;
    3fd0:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3fd2:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    3fd6:	4638      	mov	r0, r7
    3fd8:	f7fe fa34 	bl	2444 <bt_send>
	if (err) {
    3fdc:	2800      	cmp	r0, #0
    3fde:	d043      	beq.n	4068 <send_frag+0x160>
		BT_ERR("Unable to send to driver (err %d)", err);
    3fe0:	9001      	str	r0, [sp, #4]
    3fe2:	f8cd 8008 	str.w	r8, [sp, #8]
    3fe6:	f8cd 8000 	str.w	r8, [sp]
    3fea:	4b23      	ldr	r3, [pc, #140]	; (4078 <send_frag+0x170>)
    3fec:	4a2a      	ldr	r2, [pc, #168]	; (4098 <send_frag+0x190>)
    3fee:	4923      	ldr	r1, [pc, #140]	; (407c <send_frag+0x174>)
    3ff0:	482a      	ldr	r0, [pc, #168]	; (409c <send_frag+0x194>)
    3ff2:	f7fc ffcb 	bl	f8c <printk>
	__asm__ volatile(
    3ff6:	f04f 0320 	mov.w	r3, #32
    3ffa:	f3ef 8111 	mrs	r1, BASEPRI
    3ffe:	f383 8811 	msr	BASEPRI, r3
    4002:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4004:	2200      	movs	r2, #0
    4006:	b153      	cbz	r3, 401e <send_frag+0x116>
    4008:	429c      	cmp	r4, r3
    400a:	d12a      	bne.n	4062 <send_frag+0x15a>
    400c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    400e:	bb12      	cbnz	r2, 4056 <send_frag+0x14e>
    4010:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    4012:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4014:	4294      	cmp	r4, r2
    4016:	d100      	bne.n	401a <send_frag+0x112>
	list->tail = node;
    4018:	616b      	str	r3, [r5, #20]
	parent->next = child;
    401a:	2300      	movs	r3, #0
    401c:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    401e:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    4022:	2300      	movs	r3, #0
    4024:	6063      	str	r3, [r4, #4]
    4026:	6833      	ldr	r3, [r6, #0]
    4028:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    402a:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    402c:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    402e:	b903      	cbnz	r3, 4032 <send_frag+0x12a>
	list->tail = node;
    4030:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4032:	4814      	ldr	r0, [pc, #80]	; (4084 <send_frag+0x17c>)
    4034:	f00f fd25 	bl	13a82 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    4038:	f1b9 0f00 	cmp.w	r9, #0
    403c:	d004      	beq.n	4048 <send_frag+0x140>
		net_buf_unref(buf);
    403e:	4638      	mov	r0, r7
    4040:	f00e fc96 	bl	12970 <net_buf_unref>
	}
	return false;
    4044:	f04f 0900 	mov.w	r9, #0
}
    4048:	4648      	mov	r0, r9
    404a:	b008      	add	sp, #32
    404c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	parent->next = child;
    4050:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4052:	616c      	str	r4, [r5, #20]
    4054:	e7bd      	b.n	3fd2 <send_frag+0xca>
	parent->next = child;
    4056:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4058:	696b      	ldr	r3, [r5, #20]
    405a:	429c      	cmp	r4, r3
	list->tail = node;
    405c:	bf08      	it	eq
    405e:	616a      	streq	r2, [r5, #20]
    4060:	e7db      	b.n	401a <send_frag+0x112>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4062:	461a      	mov	r2, r3
    4064:	681b      	ldr	r3, [r3, #0]
    4066:	e7ce      	b.n	4006 <send_frag+0xfe>
	return true;
    4068:	f04f 0901 	mov.w	r9, #1
    406c:	e7ec      	b.n	4048 <send_frag+0x140>
    406e:	bf00      	nop
    4070:	000145f1 	.word	0x000145f1
    4074:	00015832 	.word	0x00015832
    4078:	000156a6 	.word	0x000156a6
    407c:	000153c2 	.word	0x000153c2
    4080:	00015b3c 	.word	0x00015b3c
    4084:	20003aec 	.word	0x20003aec
    4088:	20000360 	.word	0x20000360
    408c:	200003f8 	.word	0x200003f8
    4090:	00015697 	.word	0x00015697
    4094:	00015b74 	.word	0x00015b74
    4098:	00015373 	.word	0x00015373
    409c:	00014dc9 	.word	0x00014dc9

000040a0 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    40a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    40a2:	4c17      	ldr	r4, [pc, #92]	; (4100 <bt_conn_add_le+0x60>)
    40a4:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    40a8:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    40aa:	4630      	mov	r0, r6
    40ac:	f7ff fd72 	bl	3b94 <atomic_get>
    40b0:	4605      	mov	r5, r0
    40b2:	b108      	cbz	r0, 40b8 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    40b4:	2000      	movs	r0, #0
    40b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    40b8:	4601      	mov	r1, r0
    40ba:	2298      	movs	r2, #152	; 0x98
    40bc:	4620      	mov	r0, r4
    40be:	f7fd fdc9 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    40c2:	f3bf 8f5b 	dmb	ish
    40c6:	2301      	movs	r3, #1
    40c8:	e856 2f00 	ldrex	r2, [r6]
    40cc:	e846 3100 	strex	r1, r3, [r6]
    40d0:	2900      	cmp	r1, #0
    40d2:	d1f9      	bne.n	40c8 <bt_conn_add_le+0x28>
    40d4:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    40d8:	2207      	movs	r2, #7
    40da:	4639      	mov	r1, r7
    40dc:	f104 0044 	add.w	r0, r4, #68	; 0x44
    40e0:	f7fd fd8c 	bl	1bfc <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    40e4:	2318      	movs	r3, #24
    40e6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    40ea:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    40ec:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    40f0:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    40f2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    40f6:	4903      	ldr	r1, [pc, #12]	; (4104 <bt_conn_add_le+0x64>)
    40f8:	f00f ffaa 	bl	14050 <k_delayed_work_init>
			conn = &conns[i];
    40fc:	4620      	mov	r0, r4

	return conn;
}
    40fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4100:	20000360 	.word	0x20000360
    4104:	00004899 	.word	0x00004899

00004108 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4108:	b538      	push	{r3, r4, r5, lr}
    410a:	460d      	mov	r5, r1
    410c:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    410e:	f100 0144 	add.w	r1, r0, #68	; 0x44
    4112:	2207      	movs	r2, #7
    4114:	4628      	mov	r0, r5
    4116:	f7fd fd5c 	bl	1bd2 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    411a:	b160      	cbz	r0, 4136 <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    411c:	78e3      	ldrb	r3, [r4, #3]
    411e:	2207      	movs	r2, #7
    4120:	b933      	cbnz	r3, 4130 <bt_conn_addr_le_cmp+0x28>
    4122:	f104 0152 	add.w	r1, r4, #82	; 0x52
    4126:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    4128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    412c:	f7fd bd51 	b.w	1bd2 <memcmp>
    4130:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    4134:	e7f7      	b.n	4126 <bt_conn_addr_le_cmp+0x1e>
    4136:	bd38      	pop	{r3, r4, r5, pc}

00004138 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    4138:	b530      	push	{r4, r5, lr}
    413a:	4604      	mov	r4, r0
    413c:	b087      	sub	sp, #28
	atomic_inc(&conn->ref);
    413e:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4142:	f3bf 8f5b 	dmb	ish
    4146:	e855 3f00 	ldrex	r3, [r5]
    414a:	3301      	adds	r3, #1
    414c:	e845 3200 	strex	r2, r3, [r5]
    4150:	2a00      	cmp	r2, #0
    4152:	d1f8      	bne.n	4146 <bt_conn_ref+0xe>
    4154:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4158:	f00f fc84 	bl	13a64 <_impl_k_current_get>
    415c:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    415e:	4628      	mov	r0, r5
    4160:	8821      	ldrh	r1, [r4, #0]
    4162:	f7ff fd17 	bl	3b94 <atomic_get>
    4166:	4b07      	ldr	r3, [pc, #28]	; (4184 <bt_conn_ref+0x4c>)
    4168:	9304      	str	r3, [sp, #16]
    416a:	9003      	str	r0, [sp, #12]
    416c:	9102      	str	r1, [sp, #8]
    416e:	9201      	str	r2, [sp, #4]
    4170:	9300      	str	r3, [sp, #0]
    4172:	4a05      	ldr	r2, [pc, #20]	; (4188 <bt_conn_ref+0x50>)
    4174:	4b05      	ldr	r3, [pc, #20]	; (418c <bt_conn_ref+0x54>)
    4176:	4906      	ldr	r1, [pc, #24]	; (4190 <bt_conn_ref+0x58>)
    4178:	4806      	ldr	r0, [pc, #24]	; (4194 <bt_conn_ref+0x5c>)
    417a:	f7fc ff07 	bl	f8c <printk>

	return conn;
}
    417e:	4620      	mov	r0, r4
    4180:	b007      	add	sp, #28
    4182:	bd30      	pop	{r4, r5, pc}
    4184:	000145f1 	.word	0x000145f1
    4188:	00015832 	.word	0x00015832
    418c:	000156f5 	.word	0x000156f5
    4190:	000153c2 	.word	0x000153c2
    4194:	00015a2f 	.word	0x00015a2f

00004198 <bt_conn_lookup_handle>:
{
    4198:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    419a:	4b0a      	ldr	r3, [pc, #40]	; (41c4 <bt_conn_lookup_handle+0x2c>)
{
    419c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    419e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    41a2:	f7ff fcf7 	bl	3b94 <atomic_get>
    41a6:	b158      	cbz	r0, 41c0 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    41a8:	7a5a      	ldrb	r2, [r3, #9]
    41aa:	3a03      	subs	r2, #3
    41ac:	2a01      	cmp	r2, #1
    41ae:	d807      	bhi.n	41c0 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    41b0:	881a      	ldrh	r2, [r3, #0]
    41b2:	428a      	cmp	r2, r1
    41b4:	d104      	bne.n	41c0 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    41b6:	4618      	mov	r0, r3
}
    41b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    41bc:	f7ff bfbc 	b.w	4138 <bt_conn_ref>
}
    41c0:	2000      	movs	r0, #0
    41c2:	bd08      	pop	{r3, pc}
    41c4:	20000360 	.word	0x20000360

000041c8 <bt_conn_lookup_addr_le>:
{
    41c8:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    41ca:	4c0a      	ldr	r4, [pc, #40]	; (41f4 <bt_conn_lookup_addr_le+0x2c>)
{
    41cc:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    41ce:	f104 0040 	add.w	r0, r4, #64	; 0x40
    41d2:	f7ff fcdf 	bl	3b94 <atomic_get>
    41d6:	b150      	cbz	r0, 41ee <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    41d8:	78a3      	ldrb	r3, [r4, #2]
    41da:	b943      	cbnz	r3, 41ee <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    41dc:	4620      	mov	r0, r4
    41de:	f7ff ff93 	bl	4108 <bt_conn_addr_le_cmp>
    41e2:	b920      	cbnz	r0, 41ee <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    41e4:	4620      	mov	r0, r4
}
    41e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    41ea:	f7ff bfa5 	b.w	4138 <bt_conn_ref>
}
    41ee:	2000      	movs	r0, #0
    41f0:	bd10      	pop	{r4, pc}
    41f2:	bf00      	nop
    41f4:	20000360 	.word	0x20000360

000041f8 <bt_conn_lookup_state_le>:
{
    41f8:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    41fa:	4c0d      	ldr	r4, [pc, #52]	; (4230 <bt_conn_lookup_state_le+0x38>)
{
    41fc:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    41fe:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    4202:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    4204:	f7ff fcc6 	bl	3b94 <atomic_get>
    4208:	b180      	cbz	r0, 422c <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    420a:	78a2      	ldrb	r2, [r4, #2]
    420c:	b972      	cbnz	r2, 422c <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    420e:	b93b      	cbnz	r3, 4220 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4210:	7a63      	ldrb	r3, [r4, #9]
    4212:	42ab      	cmp	r3, r5
    4214:	d10a      	bne.n	422c <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    4216:	4806      	ldr	r0, [pc, #24]	; (4230 <bt_conn_lookup_state_le+0x38>)
}
    4218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    421c:	f7ff bf8c 	b.w	4138 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4220:	4619      	mov	r1, r3
    4222:	4620      	mov	r0, r4
    4224:	f7ff ff70 	bl	4108 <bt_conn_addr_le_cmp>
    4228:	2800      	cmp	r0, #0
    422a:	d0f1      	beq.n	4210 <bt_conn_lookup_state_le+0x18>
}
    422c:	2000      	movs	r0, #0
    422e:	bd38      	pop	{r3, r4, r5, pc}
    4230:	20000360 	.word	0x20000360

00004234 <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    4234:	b530      	push	{r4, r5, lr}
    4236:	4605      	mov	r5, r0
    4238:	b087      	sub	sp, #28
	atomic_dec(&conn->ref);
    423a:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    423e:	f3bf 8f5b 	dmb	ish
    4242:	e854 3f00 	ldrex	r3, [r4]
    4246:	3b01      	subs	r3, #1
    4248:	e844 3200 	strex	r2, r3, [r4]
    424c:	2a00      	cmp	r2, #0
    424e:	d1f8      	bne.n	4242 <bt_conn_unref+0xe>
    4250:	f3bf 8f5b 	dmb	ish
    4254:	f00f fc06 	bl	13a64 <_impl_k_current_get>
    4258:	4602      	mov	r2, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    425a:	4620      	mov	r0, r4
    425c:	8829      	ldrh	r1, [r5, #0]
    425e:	f7ff fc99 	bl	3b94 <atomic_get>
    4262:	4b07      	ldr	r3, [pc, #28]	; (4280 <bt_conn_unref+0x4c>)
    4264:	9304      	str	r3, [sp, #16]
    4266:	9003      	str	r0, [sp, #12]
    4268:	9102      	str	r1, [sp, #8]
    426a:	9201      	str	r2, [sp, #4]
    426c:	9300      	str	r3, [sp, #0]
    426e:	4a05      	ldr	r2, [pc, #20]	; (4284 <bt_conn_unref+0x50>)
    4270:	4b05      	ldr	r3, [pc, #20]	; (4288 <bt_conn_unref+0x54>)
    4272:	4906      	ldr	r1, [pc, #24]	; (428c <bt_conn_unref+0x58>)
    4274:	4806      	ldr	r0, [pc, #24]	; (4290 <bt_conn_unref+0x5c>)
    4276:	f7fc fe89 	bl	f8c <printk>
}
    427a:	b007      	add	sp, #28
    427c:	bd30      	pop	{r4, r5, pc}
    427e:	bf00      	nop
    4280:	000145f1 	.word	0x000145f1
    4284:	00015832 	.word	0x00015832
    4288:	00015701 	.word	0x00015701
    428c:	000153c2 	.word	0x000153c2
    4290:	00015a2f 	.word	0x00015a2f

00004294 <conn_cleanup>:
{
    4294:	b538      	push	{r3, r4, r5, lr}
    4296:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4298:	f100 0528 	add.w	r5, r0, #40	; 0x28
    429c:	2100      	movs	r1, #0
    429e:	4628      	mov	r0, r5
    42a0:	f00e fb3c 	bl	1291c <net_buf_get>
    42a4:	b950      	cbnz	r0, 42bc <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    42a6:	4620      	mov	r0, r4
    42a8:	f7ff fdf6 	bl	3e98 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    42ac:	4620      	mov	r0, r4
    42ae:	f7ff fc77 	bl	3ba0 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    42b2:	4620      	mov	r0, r4
}
    42b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    42b8:	f7ff bfbc 	b.w	4234 <bt_conn_unref>
		net_buf_unref(buf);
    42bc:	f00e fb58 	bl	12970 <net_buf_unref>
    42c0:	e7ec      	b.n	429c <conn_cleanup+0x8>
	...

000042c4 <bt_conn_prepare_events>:
{
    42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c6:	b085      	sub	sp, #20
    42c8:	4606      	mov	r6, r0
    42ca:	f00f fbcb 	bl	13a64 <_impl_k_current_get>
	BT_DBG("");
    42ce:	4d2a      	ldr	r5, [pc, #168]	; (4378 <bt_conn_prepare_events+0xb4>)
    42d0:	9001      	str	r0, [sp, #4]
    42d2:	4b2a      	ldr	r3, [pc, #168]	; (437c <bt_conn_prepare_events+0xb8>)
    42d4:	4a2a      	ldr	r2, [pc, #168]	; (4380 <bt_conn_prepare_events+0xbc>)
    42d6:	492b      	ldr	r1, [pc, #172]	; (4384 <bt_conn_prepare_events+0xc0>)
    42d8:	9502      	str	r5, [sp, #8]
    42da:	9500      	str	r5, [sp, #0]
    42dc:	482a      	ldr	r0, [pc, #168]	; (4388 <bt_conn_prepare_events+0xc4>)
    42de:	f7fc fe55 	bl	f8c <printk>
	conn_change.signaled = 0;
    42e2:	4b2a      	ldr	r3, [pc, #168]	; (438c <bt_conn_prepare_events+0xc8>)
    42e4:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    42e6:	2101      	movs	r1, #1
    42e8:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    42ea:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    42ec:	f00f fff7 	bl	142de <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    42f0:	4b27      	ldr	r3, [pc, #156]	; (4390 <bt_conn_prepare_events+0xcc>)
    42f2:	f103 0040 	add.w	r0, r3, #64	; 0x40
    42f6:	f7ff fc4d 	bl	3b94 <atomic_get>
    42fa:	461f      	mov	r7, r3
    42fc:	b910      	cbnz	r0, 4304 <bt_conn_prepare_events+0x40>
			continue;
    42fe:	2001      	movs	r0, #1
}
    4300:	b005      	add	sp, #20
    4302:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4304:	7a5a      	ldrb	r2, [r3, #9]
    4306:	b992      	cbnz	r2, 432e <bt_conn_prepare_events+0x6a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4308:	f3bf 8f5b 	dmb	ish
    430c:	1d1a      	adds	r2, r3, #4
    430e:	e852 1f00 	ldrex	r1, [r2]
    4312:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    4316:	e842 0400 	strex	r4, r0, [r2]
    431a:	2c00      	cmp	r4, #0
    431c:	d1f7      	bne.n	430e <bt_conn_prepare_events+0x4a>
    431e:	f3bf 8f5b 	dmb	ish
    4322:	064a      	lsls	r2, r1, #25
    4324:	d503      	bpl.n	432e <bt_conn_prepare_events+0x6a>
			conn_cleanup(conn);
    4326:	4618      	mov	r0, r3
    4328:	f7ff ffb4 	bl	4294 <conn_cleanup>
    432c:	e7e7      	b.n	42fe <bt_conn_prepare_events+0x3a>
		if (conn->state != BT_CONN_CONNECTED) {
    432e:	7a7c      	ldrb	r4, [r7, #9]
    4330:	2c03      	cmp	r4, #3
    4332:	d1e4      	bne.n	42fe <bt_conn_prepare_events+0x3a>
    4334:	f00f fb96 	bl	13a64 <_impl_k_current_get>
		BT_DBG("Adding conn %p to poll list", conn);
    4338:	4b10      	ldr	r3, [pc, #64]	; (437c <bt_conn_prepare_events+0xb8>)
    433a:	9001      	str	r0, [sp, #4]
    433c:	4a10      	ldr	r2, [pc, #64]	; (4380 <bt_conn_prepare_events+0xbc>)
    433e:	4911      	ldr	r1, [pc, #68]	; (4384 <bt_conn_prepare_events+0xc0>)
    4340:	9503      	str	r5, [sp, #12]
    4342:	9702      	str	r7, [sp, #8]
    4344:	9500      	str	r5, [sp, #0]
    4346:	4813      	ldr	r0, [pc, #76]	; (4394 <bt_conn_prepare_events+0xd0>)
    4348:	f7fc fe20 	bl	f8c <printk>
		k_poll_event_init(&events[ev_count],
    434c:	4b12      	ldr	r3, [pc, #72]	; (4398 <bt_conn_prepare_events+0xd4>)
    434e:	2200      	movs	r2, #0
    4350:	2104      	movs	r1, #4
    4352:	f106 0014 	add.w	r0, r6, #20
    4356:	f00f ffc2 	bl	142de <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    435a:	2301      	movs	r3, #1
    435c:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    4360:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4364:	4b0d      	ldr	r3, [pc, #52]	; (439c <bt_conn_prepare_events+0xd8>)
    4366:	2200      	movs	r2, #0
    4368:	2104      	movs	r1, #4
    436a:	f00f ffb8 	bl	142de <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    436e:	2302      	movs	r3, #2
    4370:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4374:	4620      	mov	r0, r4
	return ev_count;
    4376:	e7c3      	b.n	4300 <bt_conn_prepare_events+0x3c>
    4378:	000145f1 	.word	0x000145f1
    437c:	000156b9 	.word	0x000156b9
    4380:	00015832 	.word	0x00015832
    4384:	000153c2 	.word	0x000153c2
    4388:	00015786 	.word	0x00015786
    438c:	20003b88 	.word	0x20003b88
    4390:	20000360 	.word	0x20000360
    4394:	0001579c 	.word	0x0001579c
    4398:	20000378 	.word	0x20000378
    439c:	20000388 	.word	0x20000388

000043a0 <bt_conn_set_state>:
{
    43a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43a4:	4604      	mov	r4, r0
    43a6:	b086      	sub	sp, #24
    43a8:	460e      	mov	r6, r1
    43aa:	f00f fb5b 	bl	13a64 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    43ae:	7a63      	ldrb	r3, [r4, #9]
    43b0:	4f6d      	ldr	r7, [pc, #436]	; (4568 <bt_conn_set_state+0x1c8>)
    43b2:	9001      	str	r0, [sp, #4]
    43b4:	2b04      	cmp	r3, #4
    43b6:	bf96      	itet	ls
    43b8:	4a6c      	ldrls	r2, [pc, #432]	; (456c <bt_conn_set_state+0x1cc>)
    43ba:	4b6d      	ldrhi	r3, [pc, #436]	; (4570 <bt_conn_set_state+0x1d0>)
    43bc:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    43c0:	9302      	str	r3, [sp, #8]
    43c2:	2e04      	cmp	r6, #4
    43c4:	bf96      	itet	ls
    43c6:	4a69      	ldrls	r2, [pc, #420]	; (456c <bt_conn_set_state+0x1cc>)
    43c8:	4a69      	ldrhi	r2, [pc, #420]	; (4570 <bt_conn_set_state+0x1d0>)
    43ca:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    43ce:	9203      	str	r2, [sp, #12]
    43d0:	9704      	str	r7, [sp, #16]
    43d2:	9700      	str	r7, [sp, #0]
    43d4:	4b67      	ldr	r3, [pc, #412]	; (4574 <bt_conn_set_state+0x1d4>)
    43d6:	4a68      	ldr	r2, [pc, #416]	; (4578 <bt_conn_set_state+0x1d8>)
    43d8:	4968      	ldr	r1, [pc, #416]	; (457c <bt_conn_set_state+0x1dc>)
    43da:	4869      	ldr	r0, [pc, #420]	; (4580 <bt_conn_set_state+0x1e0>)
    43dc:	f7fc fdd6 	bl	f8c <printk>
	if (conn->state == state) {
    43e0:	7a65      	ldrb	r5, [r4, #9]
    43e2:	42ae      	cmp	r6, r5
    43e4:	46b8      	mov	r8, r7
    43e6:	d10a      	bne.n	43fe <bt_conn_set_state+0x5e>
		BT_WARN("no transition");
    43e8:	9701      	str	r7, [sp, #4]
    43ea:	9700      	str	r7, [sp, #0]
    43ec:	4b61      	ldr	r3, [pc, #388]	; (4574 <bt_conn_set_state+0x1d4>)
    43ee:	4a65      	ldr	r2, [pc, #404]	; (4584 <bt_conn_set_state+0x1e4>)
    43f0:	4962      	ldr	r1, [pc, #392]	; (457c <bt_conn_set_state+0x1dc>)
    43f2:	4865      	ldr	r0, [pc, #404]	; (4588 <bt_conn_set_state+0x1e8>)
    43f4:	f7fc fdca 	bl	f8c <printk>
}
    43f8:	b006      	add	sp, #24
    43fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->state = state;
    43fe:	7266      	strb	r6, [r4, #9]
	switch (old_state) {
    4400:	b195      	cbz	r5, 4428 <bt_conn_set_state+0x88>
    4402:	2d02      	cmp	r5, #2
    4404:	d014      	beq.n	4430 <bt_conn_set_state+0x90>
	switch (conn->state) {
    4406:	7a63      	ldrb	r3, [r4, #9]
    4408:	2b04      	cmp	r3, #4
    440a:	f200 80a0 	bhi.w	454e <bt_conn_set_state+0x1ae>
    440e:	a201      	add	r2, pc, #4	; (adr r2, 4414 <bt_conn_set_state+0x74>)
    4410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4414:	00004477 	.word	0x00004477
    4418:	000043f9 	.word	0x000043f9
    441c:	00004533 	.word	0x00004533
    4420:	00004441 	.word	0x00004441
    4424:	000043f9 	.word	0x000043f9
		bt_conn_ref(conn);
    4428:	4620      	mov	r0, r4
    442a:	f7ff fe85 	bl	4138 <bt_conn_ref>
		break;
    442e:	e7ea      	b.n	4406 <bt_conn_set_state+0x66>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4430:	78a3      	ldrb	r3, [r4, #2]
    4432:	2b00      	cmp	r3, #0
    4434:	d1e7      	bne.n	4406 <bt_conn_set_state+0x66>
			k_delayed_work_cancel(&conn->le.update_work);
    4436:	f104 0070 	add.w	r0, r4, #112	; 0x70
    443a:	f00f fe19 	bl	14070 <k_delayed_work_cancel>
    443e:	e7e2      	b.n	4406 <bt_conn_set_state+0x66>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4440:	78a3      	ldrb	r3, [r4, #2]
    4442:	2b02      	cmp	r3, #2
    4444:	d0d8      	beq.n	43f8 <bt_conn_set_state+0x58>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4446:	f104 0028 	add.w	r0, r4, #40	; 0x28
    444a:	f00f f84d 	bl	134e8 <_impl_k_queue_init>
    444e:	f104 0018 	add.w	r0, r4, #24
    4452:	f00f f849 	bl	134e8 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4456:	2100      	movs	r1, #0
    4458:	484c      	ldr	r0, [pc, #304]	; (458c <bt_conn_set_state+0x1ec>)
    445a:	f00f ffe3 	bl	14424 <_impl_k_poll_signal>
	list->head = NULL;
    445e:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    4460:	4620      	mov	r0, r4
    4462:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4464:	63e3      	str	r3, [r4, #60]	; 0x3c
    4466:	f000 fc0b 	bl	4c80 <bt_l2cap_connected>
		notify_connected(conn);
    446a:	4620      	mov	r0, r4
}
    446c:	b006      	add	sp, #24
    446e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify_connected(conn);
    4472:	f7ff bb7f 	b.w	3b74 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4476:	78a3      	ldrb	r3, [r4, #2]
    4478:	2b02      	cmp	r3, #2
    447a:	d105      	bne.n	4488 <bt_conn_set_state+0xe8>
			bt_conn_unref(conn);
    447c:	4620      	mov	r0, r4
}
    447e:	b006      	add	sp, #24
    4480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    4484:	f7ff bed6 	b.w	4234 <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    4488:	1eeb      	subs	r3, r5, #3
    448a:	2b01      	cmp	r3, #1
    448c:	d844      	bhi.n	4518 <bt_conn_set_state+0x178>
			bt_l2cap_disconnected(conn);
    448e:	4620      	mov	r0, r4
    4490:	f000 fc30 	bl	4cf4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4494:	4b3e      	ldr	r3, [pc, #248]	; (4590 <bt_conn_set_state+0x1f0>)
    4496:	681d      	ldr	r5, [r3, #0]
    4498:	b9ed      	cbnz	r5, 44d6 <bt_conn_set_state+0x136>
    449a:	4e3e      	ldr	r6, [pc, #248]	; (4594 <bt_conn_set_state+0x1f4>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    449c:	4f3e      	ldr	r7, [pc, #248]	; (4598 <bt_conn_set_state+0x1f8>)
	__asm__ volatile(
    449e:	f04f 0320 	mov.w	r3, #32
    44a2:	f3ef 8111 	mrs	r1, BASEPRI
    44a6:	f383 8811 	msr	BASEPRI, r3
    44aa:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    44ac:	b12b      	cbz	r3, 44ba <bt_conn_set_state+0x11a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    44ae:	6960      	ldr	r0, [r4, #20]
	return node->next;
    44b0:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    44b2:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    44b4:	4283      	cmp	r3, r0
	list->tail = node;
    44b6:	bf08      	it	eq
    44b8:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    44ba:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    44be:	b18b      	cbz	r3, 44e4 <bt_conn_set_state+0x144>
    44c0:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    44c2:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    44c4:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    44c6:	605d      	str	r5, [r3, #4]
	list->head = node;
    44c8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    44ca:	b902      	cbnz	r2, 44ce <bt_conn_set_state+0x12e>
	list->tail = node;
    44cc:	6073      	str	r3, [r6, #4]
    44ce:	4638      	mov	r0, r7
    44d0:	f00f fad7 	bl	13a82 <_impl_k_sem_give>
    44d4:	e7e3      	b.n	449e <bt_conn_set_state+0xfe>
		if (cb->disconnected) {
    44d6:	686b      	ldr	r3, [r5, #4]
    44d8:	b113      	cbz	r3, 44e0 <bt_conn_set_state+0x140>
			cb->disconnected(conn, conn->err);
    44da:	7a21      	ldrb	r1, [r4, #8]
    44dc:	4620      	mov	r0, r4
    44de:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    44e0:	692d      	ldr	r5, [r5, #16]
    44e2:	e7d9      	b.n	4498 <bt_conn_set_state+0xf8>
			if (conn->type == BT_CONN_TYPE_LE) {
    44e4:	78a3      	ldrb	r3, [r4, #2]
    44e6:	b91b      	cbnz	r3, 44f0 <bt_conn_set_state+0x150>
				k_delayed_work_cancel(&conn->le.update_work);
    44e8:	f104 0070 	add.w	r0, r4, #112	; 0x70
    44ec:	f00f fdc0 	bl	14070 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    44f0:	f3bf 8f5b 	dmb	ish
    44f4:	3404      	adds	r4, #4
    44f6:	e854 3f00 	ldrex	r3, [r4]
    44fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    44fe:	e844 3200 	strex	r2, r3, [r4]
    4502:	2a00      	cmp	r2, #0
    4504:	d1f7      	bne.n	44f6 <bt_conn_set_state+0x156>
    4506:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    450a:	4820      	ldr	r0, [pc, #128]	; (458c <bt_conn_set_state+0x1ec>)
    450c:	2100      	movs	r1, #0
}
    450e:	b006      	add	sp, #24
    4510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4514:	f00f bf86 	b.w	14424 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4518:	2d02      	cmp	r5, #2
    451a:	d103      	bne.n	4524 <bt_conn_set_state+0x184>
			notify_connected(conn);
    451c:	4620      	mov	r0, r4
    451e:	f7ff fb29 	bl	3b74 <notify_connected>
    4522:	e7ab      	b.n	447c <bt_conn_set_state+0xdc>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4524:	2d01      	cmp	r5, #1
    4526:	f47f af67 	bne.w	43f8 <bt_conn_set_state+0x58>
			if (conn->err) {
    452a:	7a23      	ldrb	r3, [r4, #8]
    452c:	2b00      	cmp	r3, #0
    452e:	d0a5      	beq.n	447c <bt_conn_set_state+0xdc>
    4530:	e7f4      	b.n	451c <bt_conn_set_state+0x17c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4532:	78a3      	ldrb	r3, [r4, #2]
    4534:	2b00      	cmp	r3, #0
    4536:	f47f af5f 	bne.w	43f8 <bt_conn_set_state+0x58>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    453a:	4818      	ldr	r0, [pc, #96]	; (459c <bt_conn_set_state+0x1fc>)
    453c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4540:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4544:	b006      	add	sp, #24
    4546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    454a:	f00f bdf5 	b.w	14138 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    454e:	f8cd 8008 	str.w	r8, [sp, #8]
    4552:	9601      	str	r6, [sp, #4]
    4554:	f8cd 8000 	str.w	r8, [sp]
    4558:	4b06      	ldr	r3, [pc, #24]	; (4574 <bt_conn_set_state+0x1d4>)
    455a:	4a0a      	ldr	r2, [pc, #40]	; (4584 <bt_conn_set_state+0x1e4>)
    455c:	4907      	ldr	r1, [pc, #28]	; (457c <bt_conn_set_state+0x1dc>)
    455e:	4810      	ldr	r0, [pc, #64]	; (45a0 <bt_conn_set_state+0x200>)
    4560:	f7fc fd14 	bl	f8c <printk>
		break;
    4564:	e748      	b.n	43f8 <bt_conn_set_state+0x58>
    4566:	bf00      	nop
    4568:	000145f1 	.word	0x000145f1
    456c:	00015654 	.word	0x00015654
    4570:	00015aa9 	.word	0x00015aa9
    4574:	000156e3 	.word	0x000156e3
    4578:	00015832 	.word	0x00015832
    457c:	000153c2 	.word	0x000153c2
    4580:	00015ab3 	.word	0x00015ab3
    4584:	000153bb 	.word	0x000153bb
    4588:	00015ad1 	.word	0x00015ad1
    458c:	20003b88 	.word	0x20003b88
    4590:	2000034c 	.word	0x2000034c
    4594:	200003f8 	.word	0x200003f8
    4598:	20003aec 	.word	0x20003aec
    459c:	20001988 	.word	0x20001988
    45a0:	00015aef 	.word	0x00015aef

000045a4 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    45a4:	3044      	adds	r0, #68	; 0x44
    45a6:	4770      	bx	lr

000045a8 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    45a8:	b570      	push	{r4, r5, r6, lr}
    45aa:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    45ac:	4608      	mov	r0, r1
{
    45ae:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    45b0:	f7fd fe9c 	bl	22ec <bt_le_conn_params_valid>
    45b4:	b908      	cbnz	r0, 45ba <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    45b6:	2400      	movs	r4, #0
    45b8:	e01c      	b.n	45f4 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    45ba:	481d      	ldr	r0, [pc, #116]	; (4630 <bt_conn_create_le+0x88>)
    45bc:	f7ff faea 	bl	3b94 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    45c0:	0583      	lsls	r3, r0, #22
    45c2:	d4f8      	bmi.n	45b6 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    45c4:	4630      	mov	r0, r6
    45c6:	f7ff fdff 	bl	41c8 <bt_conn_lookup_addr_le>
	if (conn) {
    45ca:	4604      	mov	r4, r0
    45cc:	b1a0      	cbz	r0, 45f8 <bt_conn_create_le+0x50>
		switch (conn->state) {
    45ce:	7a43      	ldrb	r3, [r0, #9]
    45d0:	2b01      	cmp	r3, #1
    45d2:	d006      	beq.n	45e2 <bt_conn_create_le+0x3a>
    45d4:	d301      	bcc.n	45da <bt_conn_create_le+0x32>
    45d6:	2b03      	cmp	r3, #3
    45d8:	d90c      	bls.n	45f4 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    45da:	4620      	mov	r0, r4
    45dc:	f7ff fe2a 	bl	4234 <bt_conn_unref>
    45e0:	e7e9      	b.n	45b6 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    45e2:	886b      	ldrh	r3, [r5, #2]
    45e4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    45e8:	88ab      	ldrh	r3, [r5, #4]
    45ea:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    45ee:	88eb      	ldrh	r3, [r5, #6]
    45f0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    45f4:	4620      	mov	r0, r4
    45f6:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    45f8:	4630      	mov	r0, r6
    45fa:	f7ff fd51 	bl	40a0 <bt_conn_add_le>
	if (!conn) {
    45fe:	4604      	mov	r4, r0
    4600:	2800      	cmp	r0, #0
    4602:	d0f7      	beq.n	45f4 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4604:	2207      	movs	r2, #7
    4606:	4631      	mov	r1, r6
    4608:	3052      	adds	r0, #82	; 0x52
    460a:	f7fd faf7 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    460e:	886b      	ldrh	r3, [r5, #2]
    4610:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4614:	88ab      	ldrh	r3, [r5, #4]
    4616:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    461a:	88eb      	ldrh	r3, [r5, #6]
    461c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4620:	4620      	mov	r0, r4
    4622:	2101      	movs	r1, #1
    4624:	f7ff febc 	bl	43a0 <bt_conn_set_state>
	bt_le_scan_update(true);
    4628:	2001      	movs	r0, #1
    462a:	f7fd ff9b 	bl	2564 <bt_le_scan_update>
	return conn;
    462e:	e7e1      	b.n	45f4 <bt_conn_create_le+0x4c>
    4630:	20003ad0 	.word	0x20003ad0

00004634 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4634:	b570      	push	{r4, r5, r6, lr}
    4636:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4638:	460d      	mov	r5, r1
    463a:	2900      	cmp	r1, #0
    463c:	d13b      	bne.n	46b6 <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    463e:	4630      	mov	r0, r6
    4640:	f7ff fdc2 	bl	41c8 <bt_conn_lookup_addr_le>
	if (!conn) {
    4644:	4604      	mov	r4, r0
    4646:	b928      	cbnz	r0, 4654 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4648:	4630      	mov	r0, r6
    464a:	f7ff fd29 	bl	40a0 <bt_conn_add_le>
		if (!conn) {
    464e:	4604      	mov	r4, r0
    4650:	2800      	cmp	r0, #0
    4652:	d051      	beq.n	46f8 <bt_le_set_auto_conn+0xc4>
    4654:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4656:	2d00      	cmp	r5, #0
    4658:	d035      	beq.n	46c6 <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    465a:	886a      	ldrh	r2, [r5, #2]
    465c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4660:	88aa      	ldrh	r2, [r5, #4]
    4662:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4666:	88ea      	ldrh	r2, [r5, #6]
    4668:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    466c:	f3bf 8f5b 	dmb	ish
    4670:	e853 2f00 	ldrex	r2, [r3]
    4674:	f042 0101 	orr.w	r1, r2, #1
    4678:	e843 1000 	strex	r0, r1, [r3]
    467c:	2800      	cmp	r0, #0
    467e:	d1f7      	bne.n	4670 <bt_le_set_auto_conn+0x3c>
    4680:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4684:	07d1      	lsls	r1, r2, #31
    4686:	d402      	bmi.n	468e <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4688:	4620      	mov	r0, r4
    468a:	f7ff fd55 	bl	4138 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    468e:	7a63      	ldrb	r3, [r4, #9]
    4690:	b963      	cbnz	r3, 46ac <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4692:	481b      	ldr	r0, [pc, #108]	; (4700 <bt_le_set_auto_conn+0xcc>)
    4694:	f7ff fa7e 	bl	3b94 <atomic_get>
    4698:	0783      	lsls	r3, r0, #30
    469a:	d507      	bpl.n	46ac <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    469c:	b11d      	cbz	r5, 46a6 <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    469e:	2101      	movs	r1, #1
    46a0:	4620      	mov	r0, r4
    46a2:	f7ff fe7d 	bl	43a0 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    46a6:	2000      	movs	r0, #0
    46a8:	f7fd ff5c 	bl	2564 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    46ac:	4620      	mov	r0, r4
    46ae:	f7ff fdc1 	bl	4234 <bt_conn_unref>

	return 0;
    46b2:	2000      	movs	r0, #0
    46b4:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    46b6:	4608      	mov	r0, r1
    46b8:	f7fd fe18 	bl	22ec <bt_le_conn_params_valid>
    46bc:	2800      	cmp	r0, #0
    46be:	d1be      	bne.n	463e <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    46c0:	f06f 0015 	mvn.w	r0, #21
    46c4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    46c6:	f3bf 8f5b 	dmb	ish
    46ca:	e853 2f00 	ldrex	r2, [r3]
    46ce:	f022 0101 	bic.w	r1, r2, #1
    46d2:	e843 1000 	strex	r0, r1, [r3]
    46d6:	2800      	cmp	r0, #0
    46d8:	d1f7      	bne.n	46ca <bt_le_set_auto_conn+0x96>
    46da:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    46de:	07d2      	lsls	r2, r2, #31
    46e0:	d5d5      	bpl.n	468e <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    46e2:	4620      	mov	r0, r4
    46e4:	f7ff fda6 	bl	4234 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    46e8:	7a63      	ldrb	r3, [r4, #9]
    46ea:	2b01      	cmp	r3, #1
    46ec:	d1cf      	bne.n	468e <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    46ee:	4629      	mov	r1, r5
    46f0:	4620      	mov	r0, r4
    46f2:	f7ff fe55 	bl	43a0 <bt_conn_set_state>
    46f6:	e7ca      	b.n	468e <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    46f8:	f06f 000b 	mvn.w	r0, #11
}
    46fc:	bd70      	pop	{r4, r5, r6, pc}
    46fe:	bf00      	nop
    4700:	20003ad0 	.word	0x20003ad0

00004704 <bt_conn_disconnect>:
{
    4704:	b570      	push	{r4, r5, r6, lr}
    4706:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4708:	7881      	ldrb	r1, [r0, #2]
{
    470a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    470c:	b911      	cbnz	r1, 4714 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    470e:	3044      	adds	r0, #68	; 0x44
    4710:	f7ff ff90 	bl	4634 <bt_le_set_auto_conn>
	switch (conn->state) {
    4714:	7a63      	ldrb	r3, [r4, #9]
    4716:	3b01      	subs	r3, #1
    4718:	2b03      	cmp	r3, #3
    471a:	d803      	bhi.n	4724 <bt_conn_disconnect+0x20>
    471c:	e8df f003 	tbb	[pc, r3]
    4720:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4724:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4728:	4628      	mov	r0, r5
    472a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    472c:	4620      	mov	r0, r4
		conn->err = reason;
    472e:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4730:	2100      	movs	r1, #0
    4732:	f7ff fe35 	bl	43a0 <bt_conn_set_state>
		bt_le_scan_update(false);
    4736:	2000      	movs	r0, #0
    4738:	f7fd ff14 	bl	2564 <bt_le_scan_update>
		return 0;
    473c:	2500      	movs	r5, #0
    473e:	e7f3      	b.n	4728 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4740:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4744:	f00f fc94 	bl	14070 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4748:	2100      	movs	r1, #0
    474a:	f242 000e 	movw	r0, #8206	; 0x200e
}
    474e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4752:	f7fd be7f 	b.w	2454 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4756:	2103      	movs	r1, #3
    4758:	f240 4006 	movw	r0, #1030	; 0x406
    475c:	f7fd fcb8 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    4760:	4605      	mov	r5, r0
    4762:	b198      	cbz	r0, 478c <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4764:	2103      	movs	r1, #3
    4766:	3008      	adds	r0, #8
    4768:	f00e f934 	bl	129d4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    476c:	8823      	ldrh	r3, [r4, #0]
    476e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4770:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4772:	4629      	mov	r1, r5
    4774:	f240 4006 	movw	r0, #1030	; 0x406
    4778:	f7fd fe6c 	bl	2454 <bt_hci_cmd_send>
	if (err) {
    477c:	4605      	mov	r5, r0
    477e:	2800      	cmp	r0, #0
    4780:	d1d2      	bne.n	4728 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4782:	2104      	movs	r1, #4
    4784:	4620      	mov	r0, r4
    4786:	f7ff fe0b 	bl	43a0 <bt_conn_set_state>
    478a:	e7cd      	b.n	4728 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    478c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4790:	e7ca      	b.n	4728 <bt_conn_disconnect+0x24>

00004792 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4794:	4607      	mov	r7, r0
    4796:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4798:	f242 0013 	movw	r0, #8211	; 0x2013
    479c:	210e      	movs	r1, #14
    479e:	f7fd fc97 	bl	20d0 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    47a2:	4606      	mov	r6, r0
    47a4:	b1c8      	cbz	r0, 47da <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    47a6:	210e      	movs	r1, #14
    47a8:	3008      	adds	r0, #8
    47aa:	f00e f913 	bl	129d4 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    47ae:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    47b0:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    47b2:	220e      	movs	r2, #14
    47b4:	f7fd fa4e 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    47b8:	883b      	ldrh	r3, [r7, #0]
    47ba:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    47bc:	882b      	ldrh	r3, [r5, #0]
    47be:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    47c0:	886b      	ldrh	r3, [r5, #2]
    47c2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    47c4:	88ab      	ldrh	r3, [r5, #4]
    47c6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    47c8:	88eb      	ldrh	r3, [r5, #6]
    47ca:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    47cc:	4631      	mov	r1, r6
    47ce:	f242 0013 	movw	r0, #8211	; 0x2013
}
    47d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    47d6:	f7fd be3d 	b.w	2454 <bt_hci_cmd_send>
}
    47da:	f06f 0036 	mvn.w	r0, #54	; 0x36
    47de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000047e0 <bt_conn_le_param_update>:
{
    47e0:	b530      	push	{r4, r5, lr}
    47e2:	460d      	mov	r5, r1
    47e4:	b08b      	sub	sp, #44	; 0x2c
    47e6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    47e8:	f00f f93c 	bl	13a64 <_impl_k_current_get>
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    47ec:	88ea      	ldrh	r2, [r5, #6]
    47ee:	9207      	str	r2, [sp, #28]
    47f0:	88aa      	ldrh	r2, [r5, #4]
    47f2:	9206      	str	r2, [sp, #24]
    47f4:	886a      	ldrh	r2, [r5, #2]
    47f6:	9205      	str	r2, [sp, #20]
    47f8:	882a      	ldrh	r2, [r5, #0]
    47fa:	4b21      	ldr	r3, [pc, #132]	; (4880 <bt_conn_le_param_update+0xa0>)
    47fc:	9204      	str	r2, [sp, #16]
    47fe:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    4802:	9308      	str	r3, [sp, #32]
    4804:	9203      	str	r2, [sp, #12]
    4806:	9001      	str	r0, [sp, #4]
    4808:	9300      	str	r3, [sp, #0]
    480a:	4a1e      	ldr	r2, [pc, #120]	; (4884 <bt_conn_le_param_update+0xa4>)
    480c:	4b1e      	ldr	r3, [pc, #120]	; (4888 <bt_conn_le_param_update+0xa8>)
    480e:	9402      	str	r4, [sp, #8]
    4810:	491e      	ldr	r1, [pc, #120]	; (488c <bt_conn_le_param_update+0xac>)
    4812:	481f      	ldr	r0, [pc, #124]	; (4890 <bt_conn_le_param_update+0xb0>)
    4814:	f7fc fbba 	bl	f8c <printk>
	if (conn->le.interval >= param->interval_min &&
    4818:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    481c:	882a      	ldrh	r2, [r5, #0]
    481e:	429a      	cmp	r2, r3
    4820:	d80c      	bhi.n	483c <bt_conn_le_param_update+0x5c>
    4822:	886a      	ldrh	r2, [r5, #2]
    4824:	429a      	cmp	r2, r3
    4826:	d309      	bcc.n	483c <bt_conn_le_param_update+0x5c>
	    conn->le.interval <= param->interval_max &&
    4828:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    482c:	88ab      	ldrh	r3, [r5, #4]
    482e:	429a      	cmp	r2, r3
    4830:	d104      	bne.n	483c <bt_conn_le_param_update+0x5c>
	    conn->le.latency == param->latency &&
    4832:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    4836:	88eb      	ldrh	r3, [r5, #6]
    4838:	429a      	cmp	r2, r3
    483a:	d01c      	beq.n	4876 <bt_conn_le_param_update+0x96>
	k_delayed_work_cancel(&conn->le.update_work);
    483c:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4840:	f00f fc16 	bl	14070 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4844:	4b13      	ldr	r3, [pc, #76]	; (4894 <bt_conn_le_param_update+0xb4>)
    4846:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    484a:	079a      	lsls	r2, r3, #30
    484c:	d503      	bpl.n	4856 <bt_conn_le_param_update+0x76>
    484e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    4852:	079b      	lsls	r3, r3, #30
    4854:	d401      	bmi.n	485a <bt_conn_le_param_update+0x7a>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4856:	78e3      	ldrb	r3, [r4, #3]
    4858:	b933      	cbnz	r3, 4868 <bt_conn_le_param_update+0x88>
		return bt_conn_le_conn_update(conn, param);
    485a:	4629      	mov	r1, r5
    485c:	4620      	mov	r0, r4
}
    485e:	b00b      	add	sp, #44	; 0x2c
    4860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    4864:	f7ff bf95 	b.w	4792 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    4868:	4629      	mov	r1, r5
    486a:	4620      	mov	r0, r4
}
    486c:	b00b      	add	sp, #44	; 0x2c
    486e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    4872:	f000 bba7 	b.w	4fc4 <bt_l2cap_update_conn_param>
}
    4876:	f06f 0044 	mvn.w	r0, #68	; 0x44
    487a:	b00b      	add	sp, #44	; 0x2c
    487c:	bd30      	pop	{r4, r5, pc}
    487e:	bf00      	nop
    4880:	000145f1 	.word	0x000145f1
    4884:	00015832 	.word	0x00015832
    4888:	0001570f 	.word	0x0001570f
    488c:	000153c2 	.word	0x000153c2
    4890:	00015727 	.word	0x00015727
    4894:	20003a60 	.word	0x20003a60

00004898 <le_conn_update>:
{
    4898:	4603      	mov	r3, r0
    489a:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    489c:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    48a0:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    48a2:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    48a6:	d105      	bne.n	48b4 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    48a8:	2113      	movs	r1, #19
    48aa:	f7ff ff2b 	bl	4704 <bt_conn_disconnect>
}
    48ae:	b003      	add	sp, #12
    48b0:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    48b4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    48b8:	f8ad 2000 	strh.w	r2, [sp]
    48bc:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    48c0:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    48c4:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    48c6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    48ca:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    48ce:	f8ad 2004 	strh.w	r2, [sp, #4]
    48d2:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    48d6:	f7ff ff83 	bl	47e0 <bt_conn_le_param_update>
    48da:	e7e8      	b.n	48ae <le_conn_update+0x16>

000048dc <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    48dc:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    48de:	4b08      	ldr	r3, [pc, #32]	; (4900 <bt_conn_create_pdu+0x24>)
{
    48e0:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    48e2:	2800      	cmp	r0, #0
    48e4:	bf08      	it	eq
    48e6:	4618      	moveq	r0, r3
    48e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    48ec:	f00e f810 	bl	12910 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    48f0:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    48f2:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    48f4:	3008      	adds	r0, #8
    48f6:	f00e f82a 	bl	1294e <net_buf_simple_reserve>

	return buf;
}
    48fa:	4620      	mov	r0, r4
    48fc:	bd38      	pop	{r3, r4, r5, pc}
    48fe:	bf00      	nop
    4900:	20003f2c 	.word	0x20003f2c

00004904 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4908:	4606      	mov	r6, r0
    490a:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    490c:	4816      	ldr	r0, [pc, #88]	; (4968 <create_frag.isra.8+0x64>)
    490e:	2100      	movs	r1, #0
    4910:	f7ff ffe4 	bl	48dc <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    4914:	7833      	ldrb	r3, [r6, #0]
    4916:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4918:	4605      	mov	r5, r0
    491a:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    491e:	d005      	beq.n	492c <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    4920:	f00e f826 	bl	12970 <net_buf_unref>
		return NULL;
    4924:	4635      	mov	r5, r6
}
    4926:	4628      	mov	r0, r5
    4928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    492c:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    492e:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    4932:	4e0e      	ldr	r6, [pc, #56]	; (496c <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4934:	4638      	mov	r0, r7
    4936:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    493a:	f00e f886 	bl	12a4a <net_buf_simple_tailroom>
    493e:	4580      	cmp	r8, r0
    4940:	d20c      	bcs.n	495c <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    4942:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    4946:	f854 1f08 	ldr.w	r1, [r4, #8]!
    494a:	4632      	mov	r2, r6
    494c:	4638      	mov	r0, r7
    494e:	f00e f847 	bl	129e0 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4952:	4631      	mov	r1, r6
    4954:	4620      	mov	r0, r4
    4956:	f00e f85c 	bl	12a12 <net_buf_simple_pull>
    495a:	e7e4      	b.n	4926 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    495c:	4638      	mov	r0, r7
    495e:	f00e f874 	bl	12a4a <net_buf_simple_tailroom>
    4962:	b286      	uxth	r6, r0
    4964:	e7ef      	b.n	4946 <create_frag.isra.8+0x42>
    4966:	bf00      	nop
    4968:	20003f4c 	.word	0x20003f4c
    496c:	20003a60 	.word	0x20003a60

00004970 <bt_conn_process_tx>:
{
    4970:	b5f0      	push	{r4, r5, r6, r7, lr}
    4972:	b087      	sub	sp, #28
    4974:	4604      	mov	r4, r0
    4976:	f00f f875 	bl	13a64 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    497a:	4d45      	ldr	r5, [pc, #276]	; (4a90 <bt_conn_process_tx+0x120>)
    497c:	9001      	str	r0, [sp, #4]
    497e:	4b45      	ldr	r3, [pc, #276]	; (4a94 <bt_conn_process_tx+0x124>)
    4980:	9503      	str	r5, [sp, #12]
    4982:	9402      	str	r4, [sp, #8]
    4984:	9500      	str	r5, [sp, #0]
    4986:	4a44      	ldr	r2, [pc, #272]	; (4a98 <bt_conn_process_tx+0x128>)
    4988:	4944      	ldr	r1, [pc, #272]	; (4a9c <bt_conn_process_tx+0x12c>)
    498a:	4845      	ldr	r0, [pc, #276]	; (4aa0 <bt_conn_process_tx+0x130>)
    498c:	f7fc fafe 	bl	f8c <printk>
	if (conn->state == BT_CONN_DISCONNECTED &&
    4990:	7a63      	ldrb	r3, [r4, #9]
    4992:	462e      	mov	r6, r5
    4994:	bb0b      	cbnz	r3, 49da <bt_conn_process_tx+0x6a>
    4996:	f3bf 8f5b 	dmb	ish
    499a:	1d23      	adds	r3, r4, #4
    499c:	e853 2f00 	ldrex	r2, [r3]
    49a0:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    49a4:	e843 1000 	strex	r0, r1, [r3]
    49a8:	2800      	cmp	r0, #0
    49aa:	d1f7      	bne.n	499c <bt_conn_process_tx+0x2c>
    49ac:	f3bf 8f5b 	dmb	ish
    49b0:	0653      	lsls	r3, r2, #25
    49b2:	d512      	bpl.n	49da <bt_conn_process_tx+0x6a>
    49b4:	f00f f856 	bl	13a64 <_impl_k_current_get>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    49b8:	8823      	ldrh	r3, [r4, #0]
    49ba:	9302      	str	r3, [sp, #8]
    49bc:	9001      	str	r0, [sp, #4]
    49be:	9503      	str	r5, [sp, #12]
    49c0:	9500      	str	r5, [sp, #0]
    49c2:	4b34      	ldr	r3, [pc, #208]	; (4a94 <bt_conn_process_tx+0x124>)
    49c4:	4a34      	ldr	r2, [pc, #208]	; (4a98 <bt_conn_process_tx+0x128>)
    49c6:	4935      	ldr	r1, [pc, #212]	; (4a9c <bt_conn_process_tx+0x12c>)
    49c8:	4836      	ldr	r0, [pc, #216]	; (4aa4 <bt_conn_process_tx+0x134>)
    49ca:	f7fc fadf 	bl	f8c <printk>
		conn_cleanup(conn);
    49ce:	4620      	mov	r0, r4
}
    49d0:	b007      	add	sp, #28
    49d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    49d6:	f7ff bc5d 	b.w	4294 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    49da:	2100      	movs	r1, #0
    49dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    49e0:	f00d ff9c 	bl	1291c <net_buf_get>
	BT_ASSERT(buf);
    49e4:	4605      	mov	r5, r0
    49e6:	b968      	cbnz	r0, 4a04 <bt_conn_process_tx+0x94>
    49e8:	9601      	str	r6, [sp, #4]
    49ea:	9600      	str	r6, [sp, #0]
    49ec:	4b29      	ldr	r3, [pc, #164]	; (4a94 <bt_conn_process_tx+0x124>)
    49ee:	4a2e      	ldr	r2, [pc, #184]	; (4aa8 <bt_conn_process_tx+0x138>)
    49f0:	492a      	ldr	r1, [pc, #168]	; (4a9c <bt_conn_process_tx+0x12c>)
    49f2:	482e      	ldr	r0, [pc, #184]	; (4aac <bt_conn_process_tx+0x13c>)
    49f4:	f7fc faca 	bl	f8c <printk>
    49f8:	4040      	eors	r0, r0
    49fa:	f380 8811 	msr	BASEPRI, r0
    49fe:	f04f 0004 	mov.w	r0, #4
    4a02:	df02      	svc	2
    4a04:	f00f f82e 	bl	13a64 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4a08:	9605      	str	r6, [sp, #20]
    4a0a:	89ab      	ldrh	r3, [r5, #12]
    4a0c:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    4a0e:	4e28      	ldr	r6, [pc, #160]	; (4ab0 <bt_conn_process_tx+0x140>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4a10:	9304      	str	r3, [sp, #16]
    4a12:	9001      	str	r0, [sp, #4]
    4a14:	4a20      	ldr	r2, [pc, #128]	; (4a98 <bt_conn_process_tx+0x128>)
    4a16:	4921      	ldr	r1, [pc, #132]	; (4a9c <bt_conn_process_tx+0x12c>)
    4a18:	9503      	str	r5, [sp, #12]
    4a1a:	9402      	str	r4, [sp, #8]
    4a1c:	4b25      	ldr	r3, [pc, #148]	; (4ab4 <bt_conn_process_tx+0x144>)
    4a1e:	4826      	ldr	r0, [pc, #152]	; (4ab8 <bt_conn_process_tx+0x148>)
    4a20:	f7fc fab4 	bl	f8c <printk>
	if (buf->len <= conn_mtu(conn)) {
    4a24:	89a9      	ldrh	r1, [r5, #12]
    4a26:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    4a2a:	4291      	cmp	r1, r2
    4a2c:	d808      	bhi.n	4a40 <bt_conn_process_tx+0xd0>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4a2e:	2300      	movs	r3, #0
    4a30:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4a32:	4629      	mov	r1, r5
    4a34:	4620      	mov	r0, r4
    4a36:	f7ff fa67 	bl	3f08 <send_frag>
	if (!send_buf(conn, buf)) {
    4a3a:	b148      	cbz	r0, 4a50 <bt_conn_process_tx+0xe0>
}
    4a3c:	b007      	add	sp, #28
    4a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a40:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    4a44:	4629      	mov	r1, r5
    4a46:	4638      	mov	r0, r7
    4a48:	f7ff ff5c 	bl	4904 <create_frag.isra.8>
	if (!frag) {
    4a4c:	4601      	mov	r1, r0
    4a4e:	b928      	cbnz	r0, 4a5c <bt_conn_process_tx+0xec>
		net_buf_unref(buf);
    4a50:	4628      	mov	r0, r5
}
    4a52:	b007      	add	sp, #28
    4a54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    4a58:	f00d bf8a 	b.w	12970 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4a5c:	2301      	movs	r3, #1
    4a5e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4a60:	4620      	mov	r0, r4
    4a62:	f7ff fa51 	bl	3f08 <send_frag>
    4a66:	2800      	cmp	r0, #0
    4a68:	d0f2      	beq.n	4a50 <bt_conn_process_tx+0xe0>
	while (buf->len > conn_mtu(conn)) {
    4a6a:	89aa      	ldrh	r2, [r5, #12]
    4a6c:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4a70:	429a      	cmp	r2, r3
    4a72:	d802      	bhi.n	4a7a <bt_conn_process_tx+0x10a>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4a74:	2300      	movs	r3, #0
    4a76:	2201      	movs	r2, #1
    4a78:	e7db      	b.n	4a32 <bt_conn_process_tx+0xc2>
		frag = create_frag(conn, buf);
    4a7a:	4629      	mov	r1, r5
    4a7c:	4638      	mov	r0, r7
    4a7e:	f7ff ff41 	bl	4904 <create_frag.isra.8>
		if (!frag) {
    4a82:	4601      	mov	r1, r0
    4a84:	2800      	cmp	r0, #0
    4a86:	d0e3      	beq.n	4a50 <bt_conn_process_tx+0xe0>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4a88:	2301      	movs	r3, #1
    4a8a:	461a      	mov	r2, r3
    4a8c:	e7e8      	b.n	4a60 <bt_conn_process_tx+0xf0>
    4a8e:	bf00      	nop
    4a90:	000145f1 	.word	0x000145f1
    4a94:	000156d0 	.word	0x000156d0
    4a98:	00015832 	.word	0x00015832
    4a9c:	000153c2 	.word	0x000153c2
    4aa0:	00015769 	.word	0x00015769
    4aa4:	000157cd 	.word	0x000157cd
    4aa8:	00015373 	.word	0x00015373
    4aac:	00015477 	.word	0x00015477
    4ab0:	20003a60 	.word	0x20003a60
    4ab4:	000156b0 	.word	0x000156b0
    4ab8:	00015807 	.word	0x00015807

00004abc <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4abc:	4b03      	ldr	r3, [pc, #12]	; (4acc <bt_conn_get_id+0x10>)
    4abe:	1ac0      	subs	r0, r0, r3
    4ac0:	4b03      	ldr	r3, [pc, #12]	; (4ad0 <bt_conn_get_id+0x14>)
    4ac2:	10c0      	asrs	r0, r0, #3
    4ac4:	4358      	muls	r0, r3
}
    4ac6:	b2c0      	uxtb	r0, r0
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	20000360 	.word	0x20000360
    4ad0:	286bca1b 	.word	0x286bca1b

00004ad4 <bt_conn_init>:
	parent->next = child;
    4ad4:	4b12      	ldr	r3, [pc, #72]	; (4b20 <bt_conn_init+0x4c>)
    4ad6:	4a13      	ldr	r2, [pc, #76]	; (4b24 <bt_conn_init+0x50>)
    4ad8:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4ada:	b510      	push	{r4, lr}
    4adc:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4ade:	6859      	ldr	r1, [r3, #4]
    4ae0:	b901      	cbnz	r1, 4ae4 <bt_conn_init+0x10>
	list->tail = node;
    4ae2:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4ae4:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    4ae6:	6092      	str	r2, [r2, #8]
	list->head = node;
    4ae8:	4a0f      	ldr	r2, [pc, #60]	; (4b28 <bt_conn_init+0x54>)
    4aea:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4aec:	b901      	cbnz	r1, 4af0 <bt_conn_init+0x1c>
	list->tail = node;
    4aee:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4af0:	f001 fb56 	bl	61a0 <bt_att_init>

	err = bt_smp_init();
    4af4:	f002 f86e 	bl	6bd4 <bt_smp_init>
	if (err) {
    4af8:	4604      	mov	r4, r0
    4afa:	b970      	cbnz	r0, 4b1a <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4afc:	f000 fa8a 	bl	5014 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4b00:	480a      	ldr	r0, [pc, #40]	; (4b2c <bt_conn_init+0x58>)
    4b02:	f7ff f847 	bl	3b94 <atomic_get>
    4b06:	b140      	cbz	r0, 4b1a <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4b08:	4809      	ldr	r0, [pc, #36]	; (4b30 <bt_conn_init+0x5c>)
    4b0a:	f7ff f843 	bl	3b94 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4b0e:	07c3      	lsls	r3, r0, #31
    4b10:	d503      	bpl.n	4b1a <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4b12:	2101      	movs	r1, #1
    4b14:	4807      	ldr	r0, [pc, #28]	; (4b34 <bt_conn_init+0x60>)
    4b16:	f7ff fc43 	bl	43a0 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4b1a:	4620      	mov	r0, r4
    4b1c:	bd10      	pop	{r4, pc}
    4b1e:	bf00      	nop
    4b20:	200003f8 	.word	0x200003f8
    4b24:	20000350 	.word	0x20000350
    4b28:	20000358 	.word	0x20000358
    4b2c:	200003a0 	.word	0x200003a0
    4b30:	20000364 	.word	0x20000364
    4b34:	20000360 	.word	0x20000360

00004b38 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4b38:	4770      	bx	lr
	...

00004b3c <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4b3e:	4a0b      	ldr	r2, [pc, #44]	; (4b6c <l2cap_accept+0x30>)
    4b40:	6813      	ldr	r3, [r2, #0]
    4b42:	b933      	cbnz	r3, 4b52 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4b44:	480a      	ldr	r0, [pc, #40]	; (4b70 <l2cap_accept+0x34>)
    4b46:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4b48:	600a      	str	r2, [r1, #0]

		return 0;
    4b4a:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    4b4c:	b005      	add	sp, #20
    4b4e:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    4b52:	4b08      	ldr	r3, [pc, #32]	; (4b74 <l2cap_accept+0x38>)
    4b54:	9302      	str	r3, [sp, #8]
    4b56:	9001      	str	r0, [sp, #4]
    4b58:	9300      	str	r3, [sp, #0]
    4b5a:	4a07      	ldr	r2, [pc, #28]	; (4b78 <l2cap_accept+0x3c>)
    4b5c:	4b07      	ldr	r3, [pc, #28]	; (4b7c <l2cap_accept+0x40>)
    4b5e:	4908      	ldr	r1, [pc, #32]	; (4b80 <l2cap_accept+0x44>)
    4b60:	4808      	ldr	r0, [pc, #32]	; (4b84 <l2cap_accept+0x48>)
    4b62:	f7fc fa13 	bl	f8c <printk>
	return -ENOMEM;
    4b66:	f06f 000b 	mvn.w	r0, #11
    4b6a:	e7ef      	b.n	4b4c <l2cap_accept+0x10>
    4b6c:	20000400 	.word	0x20000400
    4b70:	20003ba4 	.word	0x20003ba4
    4b74:	000145f1 	.word	0x000145f1
    4b78:	00015373 	.word	0x00015373
    4b7c:	00015c12 	.word	0x00015c12
    4b80:	000153c2 	.word	0x000153c2
    4b84:	00015c81 	.word	0x00015c81

00004b88 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b8a:	4607      	mov	r7, r0
    4b8c:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4b8e:	2000      	movs	r0, #0
    4b90:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4b92:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4b94:	f7ff fea2 	bl	48dc <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4b98:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4b9a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4b9c:	3008      	adds	r0, #8
    4b9e:	f00d ff19 	bl	129d4 <net_buf_simple_add>
	hdr->code = code;
    4ba2:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    4ba4:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4ba6:	8045      	strh	r5, [r0, #2]
}
    4ba8:	4620      	mov	r0, r4
    4baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004bac <l2cap_connected>:
    4bac:	4770      	bx	lr
	...

00004bb0 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4bb0:	2300      	movs	r3, #0
    4bb2:	6083      	str	r3, [r0, #8]
    4bb4:	4b05      	ldr	r3, [pc, #20]	; (4bcc <bt_l2cap_le_fixed_chan_register+0x1c>)
    4bb6:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    4bb8:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    4bbc:	b911      	cbnz	r1, 4bc4 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    4bbe:	605a      	str	r2, [r3, #4]
	list->head = node;
    4bc0:	601a      	str	r2, [r3, #0]
    4bc2:	4770      	bx	lr
	parent->next = child;
    4bc4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4bc6:	605a      	str	r2, [r3, #4]
    4bc8:	4770      	bx	lr
    4bca:	bf00      	nop
    4bcc:	20000498 	.word	0x20000498

00004bd0 <bt_l2cap_chan_remove>:
{
    4bd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4bd2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4bd4:	b113      	cbz	r3, 4bdc <bt_l2cap_chan_remove+0xc>
    4bd6:	3b08      	subs	r3, #8
    4bd8:	2200      	movs	r2, #0
    4bda:	b903      	cbnz	r3, 4bde <bt_l2cap_chan_remove+0xe>
    4bdc:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    4bde:	428b      	cmp	r3, r1
    4be0:	f103 0408 	add.w	r4, r3, #8
    4be4:	d10f      	bne.n	4c06 <bt_l2cap_chan_remove+0x36>
    4be6:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    4be8:	b93a      	cbnz	r2, 4bfa <bt_l2cap_chan_remove+0x2a>
    4bea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    4bec:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    4bee:	4294      	cmp	r4, r2
    4bf0:	d100      	bne.n	4bf4 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    4bf2:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    4bf4:	2200      	movs	r2, #0
    4bf6:	609a      	str	r2, [r3, #8]
    4bf8:	bd10      	pop	{r4, pc}
    4bfa:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4bfc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    4bfe:	428c      	cmp	r4, r1
	list->tail = node;
    4c00:	bf08      	it	eq
    4c02:	63c2      	streq	r2, [r0, #60]	; 0x3c
    4c04:	e7f6      	b.n	4bf4 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    4c06:	4622      	mov	r2, r4
    4c08:	2c00      	cmp	r4, #0
    4c0a:	d0e7      	beq.n	4bdc <bt_l2cap_chan_remove+0xc>
	return node->next;
    4c0c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d0e4      	beq.n	4bdc <bt_l2cap_chan_remove+0xc>
    4c12:	3b08      	subs	r3, #8
    4c14:	e7e1      	b.n	4bda <bt_l2cap_chan_remove+0xa>

00004c16 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    4c16:	6803      	ldr	r3, [r0, #0]
{
    4c18:	b510      	push	{r4, lr}
    4c1a:	4604      	mov	r4, r0
	if (!chan->conn) {
    4c1c:	b12b      	cbz	r3, 4c2a <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    4c1e:	6843      	ldr	r3, [r0, #4]
    4c20:	685b      	ldr	r3, [r3, #4]
    4c22:	b103      	cbz	r3, 4c26 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    4c24:	4798      	blx	r3
	chan->conn = NULL;
    4c26:	2300      	movs	r3, #0
    4c28:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    4c2a:	68e3      	ldr	r3, [r4, #12]
    4c2c:	b11b      	cbz	r3, 4c36 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    4c2e:	4620      	mov	r0, r4
}
    4c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    4c34:	4718      	bx	r3
    4c36:	bd10      	pop	{r4, pc}

00004c38 <l2cap_rtx_timeout>:
{
    4c38:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    4c3a:	4b0c      	ldr	r3, [pc, #48]	; (4c6c <l2cap_rtx_timeout+0x34>)
    4c3c:	4a0c      	ldr	r2, [pc, #48]	; (4c70 <l2cap_rtx_timeout+0x38>)
    4c3e:	490d      	ldr	r1, [pc, #52]	; (4c74 <l2cap_rtx_timeout+0x3c>)
{
    4c40:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    4c42:	f1a0 0410 	sub.w	r4, r0, #16
{
    4c46:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    4c48:	9302      	str	r3, [sp, #8]
    4c4a:	e88d 0018 	stmia.w	sp, {r3, r4}
    4c4e:	480a      	ldr	r0, [pc, #40]	; (4c78 <l2cap_rtx_timeout+0x40>)
    4c50:	4b0a      	ldr	r3, [pc, #40]	; (4c7c <l2cap_rtx_timeout+0x44>)
    4c52:	f7fc f99b 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    4c56:	f855 0c10 	ldr.w	r0, [r5, #-16]
    4c5a:	4621      	mov	r1, r4
    4c5c:	f7ff ffb8 	bl	4bd0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    4c60:	4620      	mov	r0, r4
}
    4c62:	b005      	add	sp, #20
    4c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    4c68:	f7ff bfd5 	b.w	4c16 <bt_l2cap_chan_del>
    4c6c:	000145f1 	.word	0x000145f1
    4c70:	00015373 	.word	0x00015373
    4c74:	000153c2 	.word	0x000153c2
    4c78:	00015dd5 	.word	0x00015dd5
    4c7c:	00015bbc 	.word	0x00015bbc

00004c80 <bt_l2cap_connected>:
{
    4c80:	4b1a      	ldr	r3, [pc, #104]	; (4cec <bt_l2cap_connected+0x6c>)
    4c82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4c86:	681c      	ldr	r4, [r3, #0]
    4c88:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4c8a:	b12c      	cbz	r4, 4c98 <bt_l2cap_connected+0x18>
	parent->next = child;
    4c8c:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4c8e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4cf0 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4c92:	3c08      	subs	r4, #8
    4c94:	46b9      	mov	r9, r7
    4c96:	b914      	cbnz	r4, 4c9e <bt_l2cap_connected+0x1e>
}
    4c98:	b003      	add	sp, #12
    4c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4c9e:	6863      	ldr	r3, [r4, #4]
    4ca0:	a901      	add	r1, sp, #4
    4ca2:	4630      	mov	r0, r6
    4ca4:	4798      	blx	r3
    4ca6:	2800      	cmp	r0, #0
    4ca8:	db18      	blt.n	4cdc <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    4caa:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4cac:	8823      	ldrh	r3, [r4, #0]
    4cae:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4cb0:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4cb4:	4641      	mov	r1, r8
    4cb6:	f105 0010 	add.w	r0, r5, #16
    4cba:	f00f f9c9 	bl	14050 <k_delayed_work_init>
    4cbe:	60af      	str	r7, [r5, #8]
    4cc0:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    4cc2:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    4cc6:	b972      	cbnz	r2, 4ce6 <bt_l2cap_connected+0x66>
	list->tail = node;
    4cc8:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    4cca:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    4ccc:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4cce:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4cd0:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    4cd2:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    4cd6:	681b      	ldr	r3, [r3, #0]
    4cd8:	b103      	cbz	r3, 4cdc <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    4cda:	4798      	blx	r3
	return node->next;
    4cdc:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4cde:	2c00      	cmp	r4, #0
    4ce0:	d0da      	beq.n	4c98 <bt_l2cap_connected+0x18>
    4ce2:	3c08      	subs	r4, #8
    4ce4:	e7d7      	b.n	4c96 <bt_l2cap_connected+0x16>
	parent->next = child;
    4ce6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4ce8:	63f3      	str	r3, [r6, #60]	; 0x3c
    4cea:	e7ef      	b.n	4ccc <bt_l2cap_connected+0x4c>
    4cec:	20000498 	.word	0x20000498
    4cf0:	00004c39 	.word	0x00004c39

00004cf4 <bt_l2cap_disconnected>:
{
    4cf4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4cf6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4cf8:	b1a3      	cbz	r3, 4d24 <bt_l2cap_disconnected+0x30>
    4cfa:	f1b3 0008 	subs.w	r0, r3, #8
    4cfe:	d10a      	bne.n	4d16 <bt_l2cap_disconnected+0x22>
    4d00:	bd10      	pop	{r4, pc}
    4d02:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    4d04:	f7ff ff87 	bl	4c16 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4d08:	b164      	cbz	r4, 4d24 <bt_l2cap_disconnected+0x30>
	return node->next;
    4d0a:	68a3      	ldr	r3, [r4, #8]
    4d0c:	b103      	cbz	r3, 4d10 <bt_l2cap_disconnected+0x1c>
    4d0e:	3b08      	subs	r3, #8
{
    4d10:	4620      	mov	r0, r4
    4d12:	461c      	mov	r4, r3
    4d14:	e7f6      	b.n	4d04 <bt_l2cap_disconnected+0x10>
    4d16:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4d18:	2c00      	cmp	r4, #0
    4d1a:	d1f2      	bne.n	4d02 <bt_l2cap_disconnected+0xe>
}
    4d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    4d20:	f7ff bf79 	b.w	4c16 <bt_l2cap_chan_del>
    4d24:	bd10      	pop	{r4, pc}

00004d26 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4d26:	3104      	adds	r1, #4
    4d28:	f7ff bdd8 	b.w	48dc <bt_conn_create_pdu>

00004d2c <bt_l2cap_send_cb>:
{
    4d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d2e:	4614      	mov	r4, r2
    4d30:	4605      	mov	r5, r0
    4d32:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    4d34:	f102 0008 	add.w	r0, r2, #8
    4d38:	2104      	movs	r1, #4
{
    4d3a:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    4d3c:	f00d fe61 	bl	12a02 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4d40:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    4d42:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4d44:	3904      	subs	r1, #4
    4d46:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    4d48:	4632      	mov	r2, r6
    4d4a:	4621      	mov	r1, r4
    4d4c:	4628      	mov	r0, r5
}
    4d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    4d52:	f7ff b863 	b.w	3e1c <bt_conn_send_cb>
	...

00004d58 <l2cap_recv>:
{
    4d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    4d5a:	898b      	ldrh	r3, [r1, #12]
    4d5c:	2b03      	cmp	r3, #3
{
    4d5e:	b087      	sub	sp, #28
    4d60:	4607      	mov	r7, r0
    4d62:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4d64:	d809      	bhi.n	4d7a <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    4d66:	4b5a      	ldr	r3, [pc, #360]	; (4ed0 <l2cap_recv+0x178>)
    4d68:	9301      	str	r3, [sp, #4]
    4d6a:	9300      	str	r3, [sp, #0]
    4d6c:	4a59      	ldr	r2, [pc, #356]	; (4ed4 <l2cap_recv+0x17c>)
    4d6e:	4b5a      	ldr	r3, [pc, #360]	; (4ed8 <l2cap_recv+0x180>)
    4d70:	495a      	ldr	r1, [pc, #360]	; (4edc <l2cap_recv+0x184>)
    4d72:	485b      	ldr	r0, [pc, #364]	; (4ee0 <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    4d74:	f7fc f90a 	bl	f8c <printk>
		return;
    4d78:	e014      	b.n	4da4 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4d7a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4d7c:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4d7e:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    4d82:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4d84:	f00d fe45 	bl	12a12 <net_buf_simple_pull>
	if (buf->len != len) {
    4d88:	89aa      	ldrh	r2, [r5, #12]
    4d8a:	4296      	cmp	r6, r2
    4d8c:	d00c      	beq.n	4da8 <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4d8e:	4b50      	ldr	r3, [pc, #320]	; (4ed0 <l2cap_recv+0x178>)
    4d90:	9303      	str	r3, [sp, #12]
    4d92:	9201      	str	r2, [sp, #4]
    4d94:	9300      	str	r3, [sp, #0]
    4d96:	9602      	str	r6, [sp, #8]
    4d98:	4b4f      	ldr	r3, [pc, #316]	; (4ed8 <l2cap_recv+0x180>)
    4d9a:	4a4e      	ldr	r2, [pc, #312]	; (4ed4 <l2cap_recv+0x17c>)
    4d9c:	494f      	ldr	r1, [pc, #316]	; (4edc <l2cap_recv+0x184>)
    4d9e:	4851      	ldr	r0, [pc, #324]	; (4ee4 <l2cap_recv+0x18c>)
    4da0:	f7fc f8f4 	bl	f8c <printk>
}
    4da4:	b007      	add	sp, #28
    4da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    4da8:	7861      	ldrb	r1, [r4, #1]
    4daa:	b939      	cbnz	r1, 4dbc <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4dac:	4b48      	ldr	r3, [pc, #288]	; (4ed0 <l2cap_recv+0x178>)
    4dae:	9301      	str	r3, [sp, #4]
    4db0:	9300      	str	r3, [sp, #0]
    4db2:	4a48      	ldr	r2, [pc, #288]	; (4ed4 <l2cap_recv+0x17c>)
    4db4:	4b48      	ldr	r3, [pc, #288]	; (4ed8 <l2cap_recv+0x180>)
    4db6:	4949      	ldr	r1, [pc, #292]	; (4edc <l2cap_recv+0x184>)
    4db8:	484b      	ldr	r0, [pc, #300]	; (4ee8 <l2cap_recv+0x190>)
    4dba:	e7db      	b.n	4d74 <l2cap_recv+0x1c>
	switch (hdr->code) {
    4dbc:	7823      	ldrb	r3, [r4, #0]
    4dbe:	2b12      	cmp	r3, #18
    4dc0:	d029      	beq.n	4e16 <l2cap_recv+0xbe>
    4dc2:	2b13      	cmp	r3, #19
    4dc4:	d01d      	beq.n	4e02 <l2cap_recv+0xaa>
    4dc6:	2b01      	cmp	r3, #1
    4dc8:	d0ec      	beq.n	4da4 <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4dca:	4a41      	ldr	r2, [pc, #260]	; (4ed0 <l2cap_recv+0x178>)
    4dcc:	9202      	str	r2, [sp, #8]
    4dce:	e88d 000c 	stmia.w	sp, {r2, r3}
    4dd2:	4942      	ldr	r1, [pc, #264]	; (4edc <l2cap_recv+0x184>)
    4dd4:	4b40      	ldr	r3, [pc, #256]	; (4ed8 <l2cap_recv+0x180>)
    4dd6:	4a45      	ldr	r2, [pc, #276]	; (4eec <l2cap_recv+0x194>)
    4dd8:	4845      	ldr	r0, [pc, #276]	; (4ef0 <l2cap_recv+0x198>)
    4dda:	f7fc f8d7 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4dde:	2202      	movs	r2, #2
    4de0:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    4de2:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4de4:	2001      	movs	r0, #1
    4de6:	f7ff fecf 	bl	4b88 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4dea:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4dec:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4dee:	3008      	adds	r0, #8
    4df0:	f00d fdf0 	bl	129d4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4df4:	2300      	movs	r3, #0
    4df6:	7003      	strb	r3, [r0, #0]
    4df8:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4dfa:	4622      	mov	r2, r4
    4dfc:	2105      	movs	r1, #5
    4dfe:	4628      	mov	r0, r5
    4e00:	e025      	b.n	4e4e <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    4e02:	2e01      	cmp	r6, #1
    4e04:	d8ce      	bhi.n	4da4 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    4e06:	4b32      	ldr	r3, [pc, #200]	; (4ed0 <l2cap_recv+0x178>)
    4e08:	9301      	str	r3, [sp, #4]
    4e0a:	9300      	str	r3, [sp, #0]
    4e0c:	4a31      	ldr	r2, [pc, #196]	; (4ed4 <l2cap_recv+0x17c>)
    4e0e:	4b39      	ldr	r3, [pc, #228]	; (4ef4 <l2cap_recv+0x19c>)
    4e10:	4932      	ldr	r1, [pc, #200]	; (4edc <l2cap_recv+0x184>)
    4e12:	4839      	ldr	r0, [pc, #228]	; (4ef8 <l2cap_recv+0x1a0>)
    4e14:	e7ae      	b.n	4d74 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    4e16:	2e07      	cmp	r6, #7
    4e18:	d807      	bhi.n	4e2a <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    4e1a:	4b2d      	ldr	r3, [pc, #180]	; (4ed0 <l2cap_recv+0x178>)
    4e1c:	9301      	str	r3, [sp, #4]
    4e1e:	9300      	str	r3, [sp, #0]
    4e20:	4a2c      	ldr	r2, [pc, #176]	; (4ed4 <l2cap_recv+0x17c>)
    4e22:	4b36      	ldr	r3, [pc, #216]	; (4efc <l2cap_recv+0x1a4>)
    4e24:	492d      	ldr	r1, [pc, #180]	; (4edc <l2cap_recv+0x184>)
    4e26:	4836      	ldr	r0, [pc, #216]	; (4f00 <l2cap_recv+0x1a8>)
    4e28:	e7a4      	b.n	4d74 <l2cap_recv+0x1c>
    4e2a:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    4e2c:	78e6      	ldrb	r6, [r4, #3]
    4e2e:	b18e      	cbz	r6, 4e54 <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4e30:	2202      	movs	r2, #2
    4e32:	2001      	movs	r0, #1
    4e34:	f7ff fea8 	bl	4b88 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4e38:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4e3a:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4e3c:	3008      	adds	r0, #8
    4e3e:	f00d fdc9 	bl	129d4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4e42:	2300      	movs	r3, #0
    4e44:	7003      	strb	r3, [r0, #0]
    4e46:	7043      	strb	r3, [r0, #1]
    4e48:	462a      	mov	r2, r5
    4e4a:	2105      	movs	r1, #5
    4e4c:	4620      	mov	r0, r4
    4e4e:	f7ff ff6d 	bl	4d2c <bt_l2cap_send_cb>
    4e52:	e7a7      	b.n	4da4 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    4e54:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4e56:	7858      	ldrb	r0, [r3, #1]
    4e58:	781a      	ldrb	r2, [r3, #0]
    4e5a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4e5e:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    4e62:	78d8      	ldrb	r0, [r3, #3]
    4e64:	789a      	ldrb	r2, [r3, #2]
    4e66:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4e6a:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    4e6e:	7958      	ldrb	r0, [r3, #5]
    4e70:	791a      	ldrb	r2, [r3, #4]
    4e72:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4e76:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    4e7a:	799a      	ldrb	r2, [r3, #6]
    4e7c:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4e7e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    4e80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4e84:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4e86:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4e8a:	f7ff fe7d 	bl	4b88 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    4e8e:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4e90:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    4e92:	4620      	mov	r0, r4
    4e94:	f7fe fea8 	bl	3be8 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4e98:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4e9a:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    4e9c:	f107 0008 	add.w	r0, r7, #8
    4ea0:	f00d fd98 	bl	129d4 <net_buf_simple_add>
	if (accepted) {
    4ea4:	b17d      	cbz	r5, 4ec6 <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    4ea6:	7006      	strb	r6, [r0, #0]
    4ea8:	7046      	strb	r6, [r0, #1]
    4eaa:	2300      	movs	r3, #0
    4eac:	463a      	mov	r2, r7
    4eae:	2105      	movs	r1, #5
    4eb0:	4620      	mov	r0, r4
    4eb2:	f7ff ff3b 	bl	4d2c <bt_l2cap_send_cb>
	if (accepted) {
    4eb6:	2d00      	cmp	r5, #0
    4eb8:	f43f af74 	beq.w	4da4 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    4ebc:	a904      	add	r1, sp, #16
    4ebe:	4620      	mov	r0, r4
    4ec0:	f7ff fc67 	bl	4792 <bt_conn_le_conn_update>
    4ec4:	e76e      	b.n	4da4 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    4ec6:	2301      	movs	r3, #1
    4ec8:	7003      	strb	r3, [r0, #0]
    4eca:	7045      	strb	r5, [r0, #1]
    4ecc:	e7ed      	b.n	4eaa <l2cap_recv+0x152>
    4ece:	bf00      	nop
    4ed0:	000145f1 	.word	0x000145f1
    4ed4:	00015373 	.word	0x00015373
    4ed8:	00015bf9 	.word	0x00015bf9
    4edc:	000153c2 	.word	0x000153c2
    4ee0:	00015cb8 	.word	0x00015cb8
    4ee4:	00015ce6 	.word	0x00015ce6
    4ee8:	00015d17 	.word	0x00015d17
    4eec:	000153bb 	.word	0x000153bb
    4ef0:	00015da7 	.word	0x00015da7
    4ef4:	00015bce 	.word	0x00015bce
    4ef8:	00015d48 	.word	0x00015d48
    4efc:	00015be0 	.word	0x00015be0
    4f00:	00015d74 	.word	0x00015d74

00004f04 <bt_l2cap_le_lookup_tx_cid>:
{
    4f04:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f06:	b100      	cbz	r0, 4f0a <bt_l2cap_le_lookup_tx_cid+0x6>
    4f08:	3808      	subs	r0, #8
    4f0a:	b900      	cbnz	r0, 4f0e <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4f0c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4f0e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    4f12:	428b      	cmp	r3, r1
    4f14:	d0fa      	beq.n	4f0c <bt_l2cap_le_lookup_tx_cid+0x8>
    4f16:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f18:	2000      	movs	r0, #0
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d0f6      	beq.n	4f0c <bt_l2cap_le_lookup_tx_cid+0x8>
    4f1e:	f1a3 0008 	sub.w	r0, r3, #8
    4f22:	e7f2      	b.n	4f0a <bt_l2cap_le_lookup_tx_cid+0x6>

00004f24 <bt_l2cap_le_lookup_rx_cid>:
{
    4f24:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f26:	b100      	cbz	r0, 4f2a <bt_l2cap_le_lookup_rx_cid+0x6>
    4f28:	3808      	subs	r0, #8
    4f2a:	b900      	cbnz	r0, 4f2e <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4f2c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4f2e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4f30:	428b      	cmp	r3, r1
    4f32:	d0fb      	beq.n	4f2c <bt_l2cap_le_lookup_rx_cid+0x8>
    4f34:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f36:	2000      	movs	r0, #0
    4f38:	2b00      	cmp	r3, #0
    4f3a:	d0f7      	beq.n	4f2c <bt_l2cap_le_lookup_rx_cid+0x8>
    4f3c:	f1a3 0008 	sub.w	r0, r3, #8
    4f40:	e7f3      	b.n	4f2a <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00004f44 <bt_l2cap_recv>:
{
    4f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    4f46:	898b      	ldrh	r3, [r1, #12]
    4f48:	2b03      	cmp	r3, #3
{
    4f4a:	4606      	mov	r6, r0
    4f4c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    4f4e:	d80e      	bhi.n	4f6e <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    4f50:	4b15      	ldr	r3, [pc, #84]	; (4fa8 <bt_l2cap_recv+0x64>)
    4f52:	9301      	str	r3, [sp, #4]
    4f54:	9300      	str	r3, [sp, #0]
    4f56:	4a15      	ldr	r2, [pc, #84]	; (4fac <bt_l2cap_recv+0x68>)
    4f58:	4b15      	ldr	r3, [pc, #84]	; (4fb0 <bt_l2cap_recv+0x6c>)
    4f5a:	4916      	ldr	r1, [pc, #88]	; (4fb4 <bt_l2cap_recv+0x70>)
    4f5c:	4816      	ldr	r0, [pc, #88]	; (4fb8 <bt_l2cap_recv+0x74>)
    4f5e:	f7fc f815 	bl	f8c <printk>
	net_buf_unref(buf);
    4f62:	4620      	mov	r0, r4
}
    4f64:	b004      	add	sp, #16
    4f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    4f6a:	f00d bd01 	b.w	12970 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    4f6e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4f70:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    4f72:	f850 3f08 	ldr.w	r3, [r0, #8]!
    4f76:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4f78:	f00d fd4b 	bl	12a12 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    4f7c:	4629      	mov	r1, r5
    4f7e:	4630      	mov	r0, r6
    4f80:	f7ff ffd0 	bl	4f24 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4f84:	b950      	cbnz	r0, 4f9c <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    4f86:	4b08      	ldr	r3, [pc, #32]	; (4fa8 <bt_l2cap_recv+0x64>)
    4f88:	9302      	str	r3, [sp, #8]
    4f8a:	e88d 0028 	stmia.w	sp, {r3, r5}
    4f8e:	4a0b      	ldr	r2, [pc, #44]	; (4fbc <bt_l2cap_recv+0x78>)
    4f90:	4b07      	ldr	r3, [pc, #28]	; (4fb0 <bt_l2cap_recv+0x6c>)
    4f92:	4908      	ldr	r1, [pc, #32]	; (4fb4 <bt_l2cap_recv+0x70>)
    4f94:	480a      	ldr	r0, [pc, #40]	; (4fc0 <bt_l2cap_recv+0x7c>)
    4f96:	f7fb fff9 	bl	f8c <printk>
    4f9a:	e7e2      	b.n	4f62 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    4f9c:	6843      	ldr	r3, [r0, #4]
    4f9e:	4621      	mov	r1, r4
    4fa0:	691b      	ldr	r3, [r3, #16]
    4fa2:	4798      	blx	r3
    4fa4:	e7dd      	b.n	4f62 <bt_l2cap_recv+0x1e>
    4fa6:	bf00      	nop
    4fa8:	000145f1 	.word	0x000145f1
    4fac:	00015373 	.word	0x00015373
    4fb0:	00015c04 	.word	0x00015c04
    4fb4:	000153c2 	.word	0x000153c2
    4fb8:	00015c1f 	.word	0x00015c1f
    4fbc:	000153bb 	.word	0x000153bb
    4fc0:	00015c4c 	.word	0x00015c4c

00004fc4 <bt_l2cap_update_conn_param>:
{
    4fc4:	b570      	push	{r4, r5, r6, lr}
	ident++;
    4fc6:	4b12      	ldr	r3, [pc, #72]	; (5010 <bt_l2cap_update_conn_param+0x4c>)
    4fc8:	781a      	ldrb	r2, [r3, #0]
    4fca:	3201      	adds	r2, #1
	if (!ident) {
    4fcc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    4fd0:	bf08      	it	eq
    4fd2:	2201      	moveq	r2, #1
    4fd4:	701a      	strb	r2, [r3, #0]
{
    4fd6:	460c      	mov	r4, r1
    4fd8:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4fda:	7819      	ldrb	r1, [r3, #0]
    4fdc:	2208      	movs	r2, #8
    4fde:	2012      	movs	r0, #18
    4fe0:	f7ff fdd2 	bl	4b88 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    4fe4:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4fe6:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    4fe8:	4408      	add	r0, r1
    4fea:	f00d fcf3 	bl	129d4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    4fee:	8823      	ldrh	r3, [r4, #0]
    4ff0:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4ff2:	8863      	ldrh	r3, [r4, #2]
    4ff4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4ff6:	88a3      	ldrh	r3, [r4, #4]
    4ff8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4ffa:	88e3      	ldrh	r3, [r4, #6]
    4ffc:	80c3      	strh	r3, [r0, #6]
    4ffe:	4632      	mov	r2, r6
    5000:	4628      	mov	r0, r5
    5002:	2300      	movs	r3, #0
    5004:	2105      	movs	r1, #5
    5006:	f7ff fe91 	bl	4d2c <bt_l2cap_send_cb>
}
    500a:	2000      	movs	r0, #0
    500c:	bd70      	pop	{r4, r5, r6, pc}
    500e:	bf00      	nop
    5010:	20000494 	.word	0x20000494

00005014 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5014:	4801      	ldr	r0, [pc, #4]	; (501c <bt_l2cap_init+0x8>)
    5016:	f7ff bdcb 	b.w	4bb0 <bt_l2cap_le_fixed_chan_register>
    501a:	bf00      	nop
    501c:	20003b98 	.word	0x20003b98

00005020 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5020:	2006      	movs	r0, #6
    5022:	4770      	bx	lr

00005024 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    5024:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    5026:	4a0a      	ldr	r2, [pc, #40]	; (5050 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5028:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    502a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    502e:	4284      	cmp	r4, r0
    5030:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    5034:	d102      	bne.n	503c <att_op_get_type+0x18>
			return handlers[i].type;
    5036:	440a      	add	r2, r1
    5038:	7890      	ldrb	r0, [r2, #2]
    503a:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    503c:	3301      	adds	r3, #1
    503e:	2b1b      	cmp	r3, #27
    5040:	d1f3      	bne.n	502a <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    5042:	f010 0f40 	tst.w	r0, #64	; 0x40
    5046:	bf14      	ite	ne
    5048:	2000      	movne	r0, #0
    504a:	2006      	moveq	r0, #6
}
    504c:	bd10      	pop	{r4, pc}
    504e:	bf00      	nop
    5050:	000160cc 	.word	0x000160cc

00005054 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    5056:	4d11      	ldr	r5, [pc, #68]	; (509c <bt_att_accept+0x48>)
    5058:	682c      	ldr	r4, [r5, #0]
{
    505a:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    505c:	b984      	cbnz	r4, 5080 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    505e:	22e4      	movs	r2, #228	; 0xe4
    5060:	4621      	mov	r1, r4
    5062:	4628      	mov	r0, r5
    5064:	f7fc fdf6 	bl	1c54 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    5068:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    506a:	4b0d      	ldr	r3, [pc, #52]	; (50a0 <bt_att_accept+0x4c>)
    506c:	606b      	str	r3, [r5, #4]
    506e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    5072:	4611      	mov	r1, r2
    5074:	f00e fcfc 	bl	13a70 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    5078:	6035      	str	r5, [r6, #0]

		return 0;
    507a:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    507c:	b004      	add	sp, #16
    507e:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    5080:	4b08      	ldr	r3, [pc, #32]	; (50a4 <bt_att_accept+0x50>)
    5082:	9302      	str	r3, [sp, #8]
    5084:	9001      	str	r0, [sp, #4]
    5086:	9300      	str	r3, [sp, #0]
    5088:	4a07      	ldr	r2, [pc, #28]	; (50a8 <bt_att_accept+0x54>)
    508a:	4b08      	ldr	r3, [pc, #32]	; (50ac <bt_att_accept+0x58>)
    508c:	4908      	ldr	r1, [pc, #32]	; (50b0 <bt_att_accept+0x5c>)
    508e:	4809      	ldr	r0, [pc, #36]	; (50b4 <bt_att_accept+0x60>)
    5090:	f7fb ff7c 	bl	f8c <printk>
	return -ENOMEM;
    5094:	f06f 000b 	mvn.w	r0, #11
    5098:	e7f0      	b.n	507c <bt_att_accept+0x28>
    509a:	bf00      	nop
    509c:	200004a0 	.word	0x200004a0
    50a0:	20003bc4 	.word	0x20003bc4
    50a4:	000145f1 	.word	0x000145f1
    50a8:	00015373 	.word	0x00015373
    50ac:	00015e74 	.word	0x00015e74
    50b0:	000153c2 	.word	0x000153c2
    50b4:	00015f84 	.word	0x00015f84

000050b8 <att_req_destroy>:
{
    50b8:	b510      	push	{r4, lr}
    50ba:	4604      	mov	r4, r0
	if (req->buf) {
    50bc:	6900      	ldr	r0, [r0, #16]
    50be:	b108      	cbz	r0, 50c4 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    50c0:	f00d fc56 	bl	12970 <net_buf_unref>
	if (req->destroy) {
    50c4:	68a3      	ldr	r3, [r4, #8]
    50c6:	b10b      	cbz	r3, 50cc <att_req_destroy+0x14>
		req->destroy(req);
    50c8:	4620      	mov	r0, r4
    50ca:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    50cc:	4620      	mov	r0, r4
    50ce:	2214      	movs	r2, #20
    50d0:	2100      	movs	r1, #0
}
    50d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    50d6:	f7fc bdbd 	b.w	1c54 <memset>

000050da <att_notify>:
{
    50da:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    50dc:	f101 0008 	add.w	r0, r1, #8
    50e0:	f00d fca7 	bl	12a32 <net_buf_simple_pull_le16>
}
    50e4:	2000      	movs	r0, #0
    50e6:	bd08      	pop	{r3, pc}

000050e8 <read_group_cb>:
{
    50e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    50ec:	680d      	ldr	r5, [r1, #0]
{
    50ee:	4606      	mov	r6, r0
    50f0:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    50f2:	f04f 0800 	mov.w	r8, #0
    50f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    50fa:	a902      	add	r1, sp, #8
    50fc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    50fe:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5100:	f88d 8008 	strb.w	r8, [sp, #8]
    5104:	f8ad 300a 	strh.w	r3, [sp, #10]
    5108:	f7fc fef6 	bl	1ef8 <bt_uuid_cmp>
    510c:	b198      	cbz	r0, 5136 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    510e:	f642 0301 	movw	r3, #10241	; 0x2801
    5112:	a903      	add	r1, sp, #12
    5114:	6830      	ldr	r0, [r6, #0]
    5116:	f88d 800c 	strb.w	r8, [sp, #12]
    511a:	f8ad 300e 	strh.w	r3, [sp, #14]
    511e:	f7fc feeb 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5122:	b140      	cbz	r0, 5136 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5124:	6923      	ldr	r3, [r4, #16]
    5126:	b123      	cbz	r3, 5132 <read_group_cb+0x4a>
    5128:	8a32      	ldrh	r2, [r6, #16]
    512a:	8859      	ldrh	r1, [r3, #2]
    512c:	4291      	cmp	r1, r2
    512e:	d200      	bcs.n	5132 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5130:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5132:	2001      	movs	r0, #1
    5134:	e012      	b.n	515c <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5136:	6861      	ldr	r1, [r4, #4]
    5138:	6830      	ldr	r0, [r6, #0]
    513a:	f7fc fedd 	bl	1ef8 <bt_uuid_cmp>
    513e:	b110      	cbz	r0, 5146 <read_group_cb+0x5e>
		data->group = NULL;
    5140:	2300      	movs	r3, #0
    5142:	6123      	str	r3, [r4, #16]
    5144:	e7f5      	b.n	5132 <read_group_cb+0x4a>
	if (data->rsp->len &&
    5146:	68e3      	ldr	r3, [r4, #12]
    5148:	68a0      	ldr	r0, [r4, #8]
    514a:	781a      	ldrb	r2, [r3, #0]
    514c:	b14a      	cbz	r2, 5162 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    514e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5152:	8981      	ldrh	r1, [r0, #12]
    5154:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5156:	4293      	cmp	r3, r2
    5158:	da03      	bge.n	5162 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    515a:	2000      	movs	r0, #0
}
    515c:	b004      	add	sp, #16
    515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5162:	2104      	movs	r1, #4
    5164:	3008      	adds	r0, #8
    5166:	f00d fc35 	bl	129d4 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    516a:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    516c:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    516e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5170:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5172:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5174:	898a      	ldrh	r2, [r1, #12]
    5176:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    517a:	6889      	ldr	r1, [r1, #8]
    517c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5180:	1a9b      	subs	r3, r3, r2
    5182:	2500      	movs	r5, #0
    5184:	440a      	add	r2, r1
    5186:	9500      	str	r5, [sp, #0]
    5188:	4631      	mov	r1, r6
    518a:	b29b      	uxth	r3, r3
    518c:	4638      	mov	r0, r7
    518e:	47c0      	blx	r8
	if (read < 0) {
    5190:	1e01      	subs	r1, r0, #0
    5192:	dbe2      	blt.n	515a <read_group_cb+0x72>
	if (!data->rsp->len) {
    5194:	68e0      	ldr	r0, [r4, #12]
    5196:	7802      	ldrb	r2, [r0, #0]
    5198:	1d0b      	adds	r3, r1, #4
    519a:	b92a      	cbnz	r2, 51a8 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    519c:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    519e:	68a0      	ldr	r0, [r4, #8]
    51a0:	3008      	adds	r0, #8
    51a2:	f00d fc17 	bl	129d4 <net_buf_simple_add>
    51a6:	e7c4      	b.n	5132 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    51a8:	429a      	cmp	r2, r3
    51aa:	d0f8      	beq.n	519e <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    51ac:	68a2      	ldr	r2, [r4, #8]
    51ae:	8993      	ldrh	r3, [r2, #12]
    51b0:	3b04      	subs	r3, #4
    51b2:	8193      	strh	r3, [r2, #12]
    51b4:	e7d1      	b.n	515a <read_group_cb+0x72>

000051b6 <find_info_cb>:
	if (!data->rsp) {
    51b6:	688b      	ldr	r3, [r1, #8]
{
    51b8:	b570      	push	{r4, r5, r6, lr}
    51ba:	4605      	mov	r5, r0
    51bc:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    51be:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    51c0:	b963      	cbnz	r3, 51dc <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    51c2:	6848      	ldr	r0, [r1, #4]
    51c4:	2101      	movs	r1, #1
    51c6:	3008      	adds	r0, #8
    51c8:	f00d fc04 	bl	129d4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    51cc:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    51ce:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    51d0:	781b      	ldrb	r3, [r3, #0]
    51d2:	2b00      	cmp	r3, #0
    51d4:	bf0c      	ite	eq
    51d6:	2301      	moveq	r3, #1
    51d8:	2302      	movne	r3, #2
    51da:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    51dc:	68a3      	ldr	r3, [r4, #8]
    51de:	781b      	ldrb	r3, [r3, #0]
    51e0:	2b01      	cmp	r3, #1
    51e2:	d003      	beq.n	51ec <find_info_cb+0x36>
    51e4:	2b02      	cmp	r3, #2
    51e6:	d01a      	beq.n	521e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    51e8:	2000      	movs	r0, #0
}
    51ea:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    51ec:	682b      	ldr	r3, [r5, #0]
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	2b00      	cmp	r3, #0
    51f2:	d1f9      	bne.n	51e8 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    51f4:	6860      	ldr	r0, [r4, #4]
    51f6:	2104      	movs	r1, #4
    51f8:	3008      	adds	r0, #8
    51fa:	f00d fbeb 	bl	129d4 <net_buf_simple_add>
    51fe:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5200:	8a2b      	ldrh	r3, [r5, #16]
    5202:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5204:	682b      	ldr	r3, [r5, #0]
    5206:	885b      	ldrh	r3, [r3, #2]
    5208:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    520a:	6863      	ldr	r3, [r4, #4]
    520c:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5210:	899b      	ldrh	r3, [r3, #12]
    5212:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5214:	2804      	cmp	r0, #4
    5216:	bf94      	ite	ls
    5218:	2000      	movls	r0, #0
    521a:	2001      	movhi	r0, #1
    521c:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    521e:	682b      	ldr	r3, [r5, #0]
    5220:	781b      	ldrb	r3, [r3, #0]
    5222:	2b02      	cmp	r3, #2
    5224:	d1e0      	bne.n	51e8 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5226:	6860      	ldr	r0, [r4, #4]
    5228:	2112      	movs	r1, #18
    522a:	3008      	adds	r0, #8
    522c:	f00d fbd2 	bl	129d4 <net_buf_simple_add>
    5230:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5232:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5234:	8a2b      	ldrh	r3, [r5, #16]
    5236:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    523a:	2210      	movs	r2, #16
    523c:	3101      	adds	r1, #1
    523e:	f7fc fcdd 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5242:	6863      	ldr	r3, [r4, #4]
    5244:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5248:	899b      	ldrh	r3, [r3, #12]
    524a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    524c:	2812      	cmp	r0, #18
    524e:	e7e2      	b.n	5216 <find_info_cb+0x60>

00005250 <find_type_cb>:
{
    5250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5254:	680e      	ldr	r6, [r1, #0]
{
    5256:	b088      	sub	sp, #32
    5258:	4605      	mov	r5, r0
    525a:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    525c:	2700      	movs	r7, #0
    525e:	f642 0301 	movw	r3, #10241	; 0x2801
    5262:	a902      	add	r1, sp, #8
    5264:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5266:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    526a:	f88d 7008 	strb.w	r7, [sp, #8]
    526e:	f8ad 300a 	strh.w	r3, [sp, #10]
    5272:	f7fc fe41 	bl	1ef8 <bt_uuid_cmp>
    5276:	b928      	cbnz	r0, 5284 <find_type_cb+0x34>
		data->group = NULL;
    5278:	2300      	movs	r3, #0
    527a:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    527c:	2001      	movs	r0, #1
}
    527e:	b008      	add	sp, #32
    5280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    5284:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5288:	a903      	add	r1, sp, #12
    528a:	6828      	ldr	r0, [r5, #0]
    528c:	f88d 700c 	strb.w	r7, [sp, #12]
    5290:	f8ad 300e 	strh.w	r3, [sp, #14]
    5294:	f7fc fe30 	bl	1ef8 <bt_uuid_cmp>
    5298:	b140      	cbz	r0, 52ac <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    529a:	68a3      	ldr	r3, [r4, #8]
    529c:	2b00      	cmp	r3, #0
    529e:	d0ed      	beq.n	527c <find_type_cb+0x2c>
    52a0:	8a2a      	ldrh	r2, [r5, #16]
    52a2:	8859      	ldrh	r1, [r3, #2]
    52a4:	4291      	cmp	r1, r2
    52a6:	d2e9      	bcs.n	527c <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    52a8:	805a      	strh	r2, [r3, #2]
    52aa:	e7e7      	b.n	527c <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    52ac:	6862      	ldr	r2, [r4, #4]
    52ae:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    52b2:	8992      	ldrh	r2, [r2, #12]
    52b4:	1a9b      	subs	r3, r3, r2
    52b6:	2b03      	cmp	r3, #3
    52b8:	d9e1      	bls.n	527e <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    52ba:	2310      	movs	r3, #16
    52bc:	9000      	str	r0, [sp, #0]
    52be:	eb0d 0203 	add.w	r2, sp, r3
    52c2:	686e      	ldr	r6, [r5, #4]
    52c4:	4629      	mov	r1, r5
    52c6:	4640      	mov	r0, r8
    52c8:	47b0      	blx	r6
	if (read < 0) {
    52ca:	1e02      	subs	r2, r0, #0
    52cc:	dbd4      	blt.n	5278 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    52ce:	7c23      	ldrb	r3, [r4, #16]
    52d0:	429a      	cmp	r2, r3
    52d2:	d1d1      	bne.n	5278 <find_type_cb+0x28>
    52d4:	a904      	add	r1, sp, #16
    52d6:	68e0      	ldr	r0, [r4, #12]
    52d8:	f7fc fc7b 	bl	1bd2 <memcmp>
    52dc:	2800      	cmp	r0, #0
    52de:	d1cb      	bne.n	5278 <find_type_cb+0x28>
	data->err = 0x00;
    52e0:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    52e2:	6860      	ldr	r0, [r4, #4]
    52e4:	2104      	movs	r1, #4
    52e6:	3008      	adds	r0, #8
    52e8:	f00d fb74 	bl	129d4 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    52ec:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    52ee:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    52f0:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    52f2:	8043      	strh	r3, [r0, #2]
    52f4:	e7c2      	b.n	527c <find_type_cb+0x2c>
	...

000052f8 <bt_att_connected>:
{
    52f8:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    52fa:	2317      	movs	r3, #23
{
    52fc:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    52fe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5302:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5304:	4906      	ldr	r1, [pc, #24]	; (5320 <bt_att_connected+0x28>)
    5306:	30a4      	adds	r0, #164	; 0xa4
    5308:	f00e fea2 	bl	14050 <k_delayed_work_init>
	list->head = NULL;
    530c:	2300      	movs	r3, #0
    530e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    5312:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    5316:	6820      	ldr	r0, [r4, #0]
}
    5318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    531c:	f001 bc00 	b.w	6b20 <bt_gatt_connected>
    5320:	00005845 	.word	0x00005845

00005324 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    5324:	f011 0f01 	tst.w	r1, #1
    5328:	7c83      	ldrb	r3, [r0, #18]
    532a:	d004      	beq.n	5336 <check_perm.isra.5+0x12>
    532c:	f013 0f15 	tst.w	r3, #21
    5330:	d012      	beq.n	5358 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5332:	6842      	ldr	r2, [r0, #4]
    5334:	b182      	cbz	r2, 5358 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    5336:	078a      	lsls	r2, r1, #30
    5338:	d504      	bpl.n	5344 <check_perm.isra.5+0x20>
    533a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    533e:	d00d      	beq.n	535c <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5340:	6882      	ldr	r2, [r0, #8]
    5342:	b15a      	cbz	r2, 535c <check_perm.isra.5+0x38>
	mask &= attr->perm;
    5344:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5346:	f011 0f30 	tst.w	r1, #48	; 0x30
    534a:	d109      	bne.n	5360 <check_perm.isra.5+0x3c>
	return 0;
    534c:	f011 0f0c 	tst.w	r1, #12
    5350:	bf14      	ite	ne
    5352:	200f      	movne	r0, #15
    5354:	2000      	moveq	r0, #0
    5356:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5358:	2002      	movs	r0, #2
    535a:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    535c:	2003      	movs	r0, #3
    535e:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5360:	2005      	movs	r0, #5
}
    5362:	4770      	bx	lr

00005364 <read_type_cb>:
{
    5364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5368:	680f      	ldr	r7, [r1, #0]
{
    536a:	4606      	mov	r6, r0
    536c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    536e:	6800      	ldr	r0, [r0, #0]
    5370:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    5372:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5376:	f7fc fdbf 	bl	1ef8 <bt_uuid_cmp>
    537a:	4680      	mov	r8, r0
    537c:	2800      	cmp	r0, #0
    537e:	d14d      	bne.n	541c <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5380:	2115      	movs	r1, #21
    5382:	4630      	mov	r0, r6
    5384:	f7ff ffce 	bl	5324 <check_perm.isra.5>
    5388:	4605      	mov	r5, r0
    538a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    538c:	b148      	cbz	r0, 53a2 <read_type_cb+0x3e>
		if (data->rsp->len) {
    538e:	68e3      	ldr	r3, [r4, #12]
    5390:	781d      	ldrb	r5, [r3, #0]
    5392:	b115      	cbz	r5, 539a <read_type_cb+0x36>
			data->err = 0x00;
    5394:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5398:	4645      	mov	r5, r8
}
    539a:	4628      	mov	r0, r5
    539c:	b003      	add	sp, #12
    539e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    53a2:	68a0      	ldr	r0, [r4, #8]
    53a4:	2102      	movs	r1, #2
    53a6:	3008      	adds	r0, #8
    53a8:	f00d fb14 	bl	129d4 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    53ac:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    53ae:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    53b0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    53b2:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    53b4:	898a      	ldrh	r2, [r1, #12]
    53b6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    53ba:	6889      	ldr	r1, [r1, #8]
    53bc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    53c0:	9500      	str	r5, [sp, #0]
    53c2:	1a9b      	subs	r3, r3, r2
    53c4:	b29b      	uxth	r3, r3
    53c6:	440a      	add	r2, r1
    53c8:	4648      	mov	r0, r9
    53ca:	4631      	mov	r1, r6
    53cc:	47c0      	blx	r8
	if (read < 0) {
    53ce:	1e01      	subs	r1, r0, #0
    53d0:	da08      	bge.n	53e4 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    53d2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    53d6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    53d8:	bf9a      	itte	ls
    53da:	4249      	negls	r1, r1
    53dc:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    53de:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    53e0:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    53e2:	e7da      	b.n	539a <read_type_cb+0x36>
	if (!data->rsp->len) {
    53e4:	68e0      	ldr	r0, [r4, #12]
    53e6:	7802      	ldrb	r2, [r0, #0]
    53e8:	1c8b      	adds	r3, r1, #2
    53ea:	b982      	cbnz	r2, 540e <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    53ec:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    53ee:	68a0      	ldr	r0, [r4, #8]
    53f0:	3008      	adds	r0, #8
    53f2:	f00d faef 	bl	129d4 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    53f6:	68a3      	ldr	r3, [r4, #8]
    53f8:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    53fc:	899b      	ldrh	r3, [r3, #12]
    53fe:	1aed      	subs	r5, r5, r3
    5400:	68e3      	ldr	r3, [r4, #12]
    5402:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5404:	429d      	cmp	r5, r3
    5406:	bfd4      	ite	le
    5408:	2500      	movle	r5, #0
    540a:	2501      	movgt	r5, #1
    540c:	e7c5      	b.n	539a <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    540e:	429a      	cmp	r2, r3
    5410:	d0ed      	beq.n	53ee <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    5412:	68a2      	ldr	r2, [r4, #8]
    5414:	8993      	ldrh	r3, [r2, #12]
    5416:	3b02      	subs	r3, #2
    5418:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    541a:	e7be      	b.n	539a <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    541c:	2501      	movs	r5, #1
    541e:	e7bc      	b.n	539a <read_type_cb+0x36>

00005420 <uuid_create>:
{
    5420:	b510      	push	{r4, lr}
	switch (buf->len) {
    5422:	898a      	ldrh	r2, [r1, #12]
    5424:	2a02      	cmp	r2, #2
{
    5426:	4604      	mov	r4, r0
	switch (buf->len) {
    5428:	d003      	beq.n	5432 <uuid_create+0x12>
    542a:	2a10      	cmp	r2, #16
    542c:	d00a      	beq.n	5444 <uuid_create+0x24>
	return false;
    542e:	2000      	movs	r0, #0
}
    5430:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    5432:	2300      	movs	r3, #0
    5434:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5436:	f101 0008 	add.w	r0, r1, #8
    543a:	f00d fafa 	bl	12a32 <net_buf_simple_pull_le16>
    543e:	8060      	strh	r0, [r4, #2]
		return true;
    5440:	2001      	movs	r0, #1
    5442:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    5444:	2302      	movs	r3, #2
    5446:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    544a:	6889      	ldr	r1, [r1, #8]
    544c:	f7fc fbd6 	bl	1bfc <memcpy>
    5450:	e7f6      	b.n	5440 <uuid_create+0x20>
	...

00005454 <att_req_sent>:
{
    5454:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5456:	2104      	movs	r1, #4
    5458:	f7ff fd54 	bl	4f04 <bt_l2cap_le_lookup_tx_cid>
    545c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    545e:	30cc      	adds	r0, #204	; 0xcc
    5460:	f00e fb0f 	bl	13a82 <_impl_k_sem_give>
	if (att->req) {
    5464:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5468:	b143      	cbz	r3, 547c <att_req_sent+0x28>
    546a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    546e:	f247 5230 	movw	r2, #30000	; 0x7530
    5472:	4803      	ldr	r0, [pc, #12]	; (5480 <att_req_sent+0x2c>)
}
    5474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5478:	f00e be5e 	b.w	14138 <k_delayed_work_submit_to_queue>
    547c:	bd10      	pop	{r4, pc}
    547e:	bf00      	nop
    5480:	20001988 	.word	0x20001988

00005484 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    5484:	6803      	ldr	r3, [r0, #0]
    5486:	7a5b      	ldrb	r3, [r3, #9]
    5488:	2b03      	cmp	r3, #3
    548a:	d10a      	bne.n	54a2 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    548c:	f3bf 8f5b 	dmb	ish
    5490:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    5494:	f3bf 8f5b 	dmb	ish
    5498:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    549c:	f000 0001 	and.w	r0, r0, #1
    54a0:	4770      	bx	lr
    54a2:	2001      	movs	r0, #1
}
    54a4:	4770      	bx	lr

000054a6 <att_prepare_write_req>:
    54a6:	2006      	movs	r0, #6
    54a8:	4770      	bx	lr

000054aa <att_pdu_sent>:
{
    54aa:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    54ac:	2104      	movs	r1, #4
    54ae:	f7ff fd29 	bl	4f04 <bt_l2cap_le_lookup_tx_cid>
}
    54b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    54b6:	30cc      	adds	r0, #204	; 0xcc
    54b8:	f00e bae3 	b.w	13a82 <_impl_k_sem_give>

000054bc <att_rsp_sent>:
{
    54bc:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    54be:	2104      	movs	r1, #4
    54c0:	f7ff fd20 	bl	4f04 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    54c4:	f3bf 8f5b 	dmb	ish
    54c8:	f100 0394 	add.w	r3, r0, #148	; 0x94
    54cc:	e853 2f00 	ldrex	r2, [r3]
    54d0:	f022 0201 	bic.w	r2, r2, #1
    54d4:	e843 2100 	strex	r1, r2, [r3]
    54d8:	2900      	cmp	r1, #0
    54da:	d1f7      	bne.n	54cc <att_rsp_sent+0x10>
    54dc:	f3bf 8f5b 	dmb	ish
    54e0:	30cc      	adds	r0, #204	; 0xcc
}
    54e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    54e6:	f00e bacc 	b.w	13a82 <_impl_k_sem_give>

000054ea <att_cfm_sent>:
{
    54ea:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    54ec:	2104      	movs	r1, #4
    54ee:	f7ff fd09 	bl	4f04 <bt_l2cap_le_lookup_tx_cid>
    54f2:	f3bf 8f5b 	dmb	ish
    54f6:	f100 0394 	add.w	r3, r0, #148	; 0x94
    54fa:	e853 2f00 	ldrex	r2, [r3]
    54fe:	f022 0202 	bic.w	r2, r2, #2
    5502:	e843 2100 	strex	r1, r2, [r3]
    5506:	2900      	cmp	r1, #0
    5508:	d1f7      	bne.n	54fa <att_cfm_sent+0x10>
    550a:	f3bf 8f5b 	dmb	ish
    550e:	30cc      	adds	r0, #204	; 0xcc
}
    5510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5514:	f00e bab5 	b.w	13a82 <_impl_k_sem_give>

00005518 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5518:	7a43      	ldrb	r3, [r0, #9]
    551a:	2b03      	cmp	r3, #3
{
    551c:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    551e:	d00b      	beq.n	5538 <att_chan_get+0x20>
		BT_WARN("Not connected");
    5520:	4b15      	ldr	r3, [pc, #84]	; (5578 <att_chan_get+0x60>)
    5522:	9301      	str	r3, [sp, #4]
    5524:	9300      	str	r3, [sp, #0]
    5526:	4a15      	ldr	r2, [pc, #84]	; (557c <att_chan_get+0x64>)
    5528:	4b15      	ldr	r3, [pc, #84]	; (5580 <att_chan_get+0x68>)
    552a:	4916      	ldr	r1, [pc, #88]	; (5584 <att_chan_get+0x6c>)
    552c:	4816      	ldr	r0, [pc, #88]	; (5588 <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    552e:	f7fb fd2d 	bl	f8c <printk>
		return NULL;
    5532:	2000      	movs	r0, #0
}
    5534:	b002      	add	sp, #8
    5536:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5538:	2104      	movs	r1, #4
    553a:	f7ff fcf3 	bl	4f24 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    553e:	4604      	mov	r4, r0
    5540:	b950      	cbnz	r0, 5558 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    5542:	4b0d      	ldr	r3, [pc, #52]	; (5578 <att_chan_get+0x60>)
    5544:	9301      	str	r3, [sp, #4]
    5546:	9300      	str	r3, [sp, #0]
    5548:	4a10      	ldr	r2, [pc, #64]	; (558c <att_chan_get+0x74>)
    554a:	4b0d      	ldr	r3, [pc, #52]	; (5580 <att_chan_get+0x68>)
    554c:	490d      	ldr	r1, [pc, #52]	; (5584 <att_chan_get+0x6c>)
    554e:	4810      	ldr	r0, [pc, #64]	; (5590 <att_chan_get+0x78>)
    5550:	f7fb fd1c 	bl	f8c <printk>
    5554:	4620      	mov	r0, r4
    5556:	e7ed      	b.n	5534 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5558:	f3bf 8f5b 	dmb	ish
    555c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5560:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5564:	075b      	lsls	r3, r3, #29
    5566:	d5f5      	bpl.n	5554 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    5568:	4b03      	ldr	r3, [pc, #12]	; (5578 <att_chan_get+0x60>)
    556a:	9301      	str	r3, [sp, #4]
    556c:	9300      	str	r3, [sp, #0]
    556e:	4a03      	ldr	r2, [pc, #12]	; (557c <att_chan_get+0x64>)
    5570:	4b03      	ldr	r3, [pc, #12]	; (5580 <att_chan_get+0x68>)
    5572:	4904      	ldr	r1, [pc, #16]	; (5584 <att_chan_get+0x6c>)
    5574:	4807      	ldr	r0, [pc, #28]	; (5594 <att_chan_get+0x7c>)
    5576:	e7da      	b.n	552e <att_chan_get+0x16>
    5578:	000145f1 	.word	0x000145f1
    557c:	000153bb 	.word	0x000153bb
    5580:	00015e49 	.word	0x00015e49
    5584:	000153c2 	.word	0x000153c2
    5588:	00015e82 	.word	0x00015e82
    558c:	00015373 	.word	0x00015373
    5590:	00015ea0 	.word	0x00015ea0
    5594:	00015ecb 	.word	0x00015ecb

00005598 <write_cb>:
{
    5598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    559c:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    559e:	f8d1 8000 	ldr.w	r8, [r1]
    55a2:	212a      	movs	r1, #42	; 0x2a
{
    55a4:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    55a6:	f7ff febd 	bl	5324 <check_perm.isra.5>
    55aa:	4605      	mov	r5, r0
    55ac:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    55ae:	b9e0      	cbnz	r0, 55ea <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    55b0:	8a62      	ldrh	r2, [r4, #18]
    55b2:	9001      	str	r0, [sp, #4]
    55b4:	9200      	str	r2, [sp, #0]
    55b6:	7c23      	ldrb	r3, [r4, #16]
    55b8:	68b7      	ldr	r7, [r6, #8]
    55ba:	68e2      	ldr	r2, [r4, #12]
    55bc:	4631      	mov	r1, r6
    55be:	4640      	mov	r0, r8
    55c0:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    55c2:	2800      	cmp	r0, #0
    55c4:	db02      	blt.n	55cc <write_cb+0x34>
    55c6:	7c23      	ldrb	r3, [r4, #16]
    55c8:	4298      	cmp	r0, r3
    55ca:	d00b      	beq.n	55e4 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    55cc:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    55d0:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    55d2:	bf9a      	itte	ls
    55d4:	4240      	negls	r0, r0
    55d6:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    55d8:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    55da:	7520      	strb	r0, [r4, #20]
}
    55dc:	4628      	mov	r0, r5
    55de:	b002      	add	sp, #8
    55e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    55e4:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    55e6:	2501      	movs	r5, #1
    55e8:	e7f8      	b.n	55dc <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    55ea:	2500      	movs	r5, #0
    55ec:	e7f6      	b.n	55dc <write_cb+0x44>
	...

000055f0 <att_send_req>:
{
    55f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    55f2:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    55f4:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    55f8:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    55fc:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    55fe:	4630      	mov	r0, r6
    5600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5604:	f00e fa65 	bl	13ad2 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5608:	4628      	mov	r0, r5
    560a:	f7ff ff3b 	bl	5484 <att_is_connected>
    560e:	b978      	cbnz	r0, 5630 <att_send_req+0x40>
		BT_WARN("Disconnected");
    5610:	4b18      	ldr	r3, [pc, #96]	; (5674 <att_send_req+0x84>)
    5612:	9301      	str	r3, [sp, #4]
    5614:	9300      	str	r3, [sp, #0]
    5616:	4a18      	ldr	r2, [pc, #96]	; (5678 <att_send_req+0x88>)
    5618:	4b18      	ldr	r3, [pc, #96]	; (567c <att_send_req+0x8c>)
    561a:	4919      	ldr	r1, [pc, #100]	; (5680 <att_send_req+0x90>)
    561c:	4819      	ldr	r0, [pc, #100]	; (5684 <att_send_req+0x94>)
    561e:	f7fb fcb5 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5622:	4630      	mov	r0, r6
    5624:	f00e fa2d 	bl	13a82 <_impl_k_sem_give>
		return -ENOTCONN;
    5628:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    562c:	b002      	add	sp, #8
    562e:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    5630:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    5632:	f106 0008 	add.w	r0, r6, #8
    5636:	f00d fa04 	bl	12a42 <net_buf_simple_headroom>
	state->len = buf->len;
    563a:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    563c:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    563e:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5640:	6920      	ldr	r0, [r4, #16]
    5642:	682d      	ldr	r5, [r5, #0]
    5644:	f00d f9c2 	bl	129cc <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    5648:	6923      	ldr	r3, [r4, #16]
    564a:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    564c:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    564e:	7818      	ldrb	r0, [r3, #0]
    5650:	f7ff fce8 	bl	5024 <att_op_get_type>
    5654:	3801      	subs	r0, #1
    5656:	b2c0      	uxtb	r0, r0
    5658:	2804      	cmp	r0, #4
    565a:	bf96      	itet	ls
    565c:	4b0a      	ldrls	r3, [pc, #40]	; (5688 <att_send_req+0x98>)
    565e:	4b0b      	ldrhi	r3, [pc, #44]	; (568c <att_send_req+0x9c>)
    5660:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5664:	4632      	mov	r2, r6
    5666:	4628      	mov	r0, r5
    5668:	2104      	movs	r1, #4
    566a:	f7ff fb5f 	bl	4d2c <bt_l2cap_send_cb>
	return 0;
    566e:	2000      	movs	r0, #0
    5670:	e7dc      	b.n	562c <att_send_req+0x3c>
    5672:	bf00      	nop
    5674:	000145f1 	.word	0x000145f1
    5678:	000153bb 	.word	0x000153bb
    567c:	00015e0c 	.word	0x00015e0c
    5680:	000153c2 	.word	0x000153c2
    5684:	00015f26 	.word	0x00015f26
    5688:	00015df8 	.word	0x00015df8
    568c:	000054ab 	.word	0x000054ab

00005690 <att_handle_rsp>:
{
    5690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5694:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5696:	30a4      	adds	r0, #164	; 0xa4
{
    5698:	461e      	mov	r6, r3
    569a:	460f      	mov	r7, r1
    569c:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    569e:	f00e fce7 	bl	14070 <k_delayed_work_cancel>
	if (!att->req) {
    56a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    56a6:	b9db      	cbnz	r3, 56e0 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    56a8:	4b1c      	ldr	r3, [pc, #112]	; (571c <att_handle_rsp+0x8c>)
    56aa:	9301      	str	r3, [sp, #4]
    56ac:	9300      	str	r3, [sp, #0]
    56ae:	4a1c      	ldr	r2, [pc, #112]	; (5720 <att_handle_rsp+0x90>)
    56b0:	4b1c      	ldr	r3, [pc, #112]	; (5724 <att_handle_rsp+0x94>)
    56b2:	491d      	ldr	r1, [pc, #116]	; (5728 <att_handle_rsp+0x98>)
    56b4:	481d      	ldr	r0, [pc, #116]	; (572c <att_handle_rsp+0x9c>)
    56b6:	f7fb fc69 	bl	f8c <printk>
    56ba:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    56be:	b159      	cbz	r1, 56d8 <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    56c0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    56c4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    56c6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    56ca:	4291      	cmp	r1, r2
	list->tail = node;
    56cc:	bf08      	it	eq
    56ce:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    56d2:	4620      	mov	r0, r4
    56d4:	f7ff ff8c 	bl	55f0 <att_send_req>
}
    56d8:	2000      	movs	r0, #0
    56da:	b003      	add	sp, #12
    56dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    56e0:	6918      	ldr	r0, [r3, #16]
    56e2:	b128      	cbz	r0, 56f0 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    56e4:	f00d f944 	bl	12970 <net_buf_unref>
		att->req->buf = NULL;
    56e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    56ec:	2200      	movs	r2, #0
    56ee:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    56f0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    56f4:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    56f6:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    56fa:	2500      	movs	r5, #0
    56fc:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    56fe:	463a      	mov	r2, r7
    5700:	9300      	str	r3, [sp, #0]
    5702:	4631      	mov	r1, r6
    5704:	4643      	mov	r3, r8
    5706:	47c8      	blx	r9
	if (!att->req->func) {
    5708:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    570c:	6843      	ldr	r3, [r0, #4]
    570e:	b90b      	cbnz	r3, 5714 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    5710:	f7ff fcd2 	bl	50b8 <att_req_destroy>
	att->req = NULL;
    5714:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    5718:	e7cf      	b.n	56ba <att_handle_rsp+0x2a>
    571a:	bf00      	nop
    571c:	000145f1 	.word	0x000145f1
    5720:	000153bb 	.word	0x000153bb
    5724:	00015e19 	.word	0x00015e19
    5728:	000153c2 	.word	0x000153c2
    572c:	00015eff 	.word	0x00015eff

00005730 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    5730:	898a      	ldrh	r2, [r1, #12]
    5732:	6889      	ldr	r1, [r1, #8]
    5734:	2300      	movs	r3, #0
    5736:	f7ff bfab 	b.w	5690 <att_handle_rsp>

0000573a <att_handle_exec_write_rsp>:
    573a:	f7ff bff9 	b.w	5730 <att_confirm>

0000573e <att_handle_prepare_write_rsp>:
    573e:	f7ff bff7 	b.w	5730 <att_confirm>

00005742 <att_handle_write_rsp>:
    5742:	f7ff bff5 	b.w	5730 <att_confirm>

00005746 <att_handle_read_mult_rsp>:
    5746:	f7ff bff3 	b.w	5730 <att_confirm>

0000574a <att_handle_read_blob_rsp>:
    574a:	f7ff bff1 	b.w	5730 <att_confirm>

0000574e <att_handle_read_rsp>:
    574e:	f7ff bfef 	b.w	5730 <att_confirm>

00005752 <att_handle_read_type_rsp>:
    5752:	f7ff bfed 	b.w	5730 <att_confirm>

00005756 <att_handle_find_type_rsp>:
    5756:	f7ff bfeb 	b.w	5730 <att_confirm>

0000575a <att_handle_find_info_rsp>:
    575a:	f7ff bfe9 	b.w	5730 <att_confirm>

0000575e <att_mtu_rsp>:
{
    575e:	b410      	push	{r4}
    5760:	460a      	mov	r2, r1
	if (!att) {
    5762:	4603      	mov	r3, r0
    5764:	b180      	cbz	r0, 5788 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    5766:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5768:	880c      	ldrh	r4, [r1, #0]
    576a:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    576c:	bf83      	ittte	hi
    576e:	2417      	movhi	r4, #23
    5770:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5772:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5776:	2200      	movls	r2, #0
    5778:	bf99      	ittee	ls
    577a:	2304      	movls	r3, #4
    577c:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    577e:	2300      	movhi	r3, #0
    5780:	8992      	ldrhhi	r2, [r2, #12]
}
    5782:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5784:	f7ff bf84 	b.w	5690 <att_handle_rsp>
}
    5788:	bc10      	pop	{r4}
    578a:	4770      	bx	lr

0000578c <att_error_rsp>:
{
    578c:	b430      	push	{r4, r5}
	if (!att->req) {
    578e:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    5792:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5794:	b16a      	cbz	r2, 57b2 <att_error_rsp+0x26>
	if (att->req->buf) {
    5796:	6913      	ldr	r3, [r2, #16]
    5798:	b12b      	cbz	r3, 57a6 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    579a:	8995      	ldrh	r5, [r2, #12]
    579c:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    579e:	89d2      	ldrh	r2, [r2, #14]
    57a0:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    57a2:	4429      	add	r1, r5
    57a4:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    57a6:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    57a8:	2200      	movs	r2, #0
    57aa:	4611      	mov	r1, r2
}
    57ac:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    57ae:	f7ff bf6f 	b.w	5690 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    57b2:	230e      	movs	r3, #14
    57b4:	e7f8      	b.n	57a8 <att_error_rsp+0x1c>

000057b6 <att_reset>:
{
    57b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    57b8:	f100 0394 	add.w	r3, r0, #148	; 0x94
    57bc:	4605      	mov	r5, r0
    57be:	f3bf 8f5b 	dmb	ish
    57c2:	e853 2f00 	ldrex	r2, [r3]
    57c6:	f042 0204 	orr.w	r2, r2, #4
    57ca:	e843 2100 	strex	r1, r2, [r3]
    57ce:	2900      	cmp	r1, #0
    57d0:	d1f7      	bne.n	57c2 <att_reset+0xc>
    57d2:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    57d6:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    57da:	4620      	mov	r0, r4
    57dc:	f00e f951 	bl	13a82 <_impl_k_sem_give>
    57e0:	4620      	mov	r0, r4
    57e2:	f00e f94e 	bl	13a82 <_impl_k_sem_give>
    57e6:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    57ea:	b98c      	cbnz	r4, 5810 <att_reset+0x5a>
	if (!att->req) {
    57ec:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    57f0:	2200      	movs	r2, #0
    57f2:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    57f6:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    57fa:	b90b      	cbnz	r3, 5800 <att_reset+0x4a>
}
    57fc:	b003      	add	sp, #12
    57fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5800:	230e      	movs	r3, #14
    5802:	4611      	mov	r1, r2
    5804:	4628      	mov	r0, r5
}
    5806:	b003      	add	sp, #12
    5808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    580c:	f7ff bf40 	b.w	5690 <att_handle_rsp>
	return node->next;
    5810:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    5812:	6867      	ldr	r7, [r4, #4]
    5814:	b12f      	cbz	r7, 5822 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5816:	2300      	movs	r3, #0
    5818:	9400      	str	r4, [sp, #0]
    581a:	461a      	mov	r2, r3
    581c:	210e      	movs	r1, #14
    581e:	4618      	mov	r0, r3
    5820:	47b8      	blx	r7
		att_req_destroy(req);
    5822:	4620      	mov	r0, r4
    5824:	f7ff fc48 	bl	50b8 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5828:	2e00      	cmp	r6, #0
    582a:	d0df      	beq.n	57ec <att_reset+0x36>
    582c:	4634      	mov	r4, r6
    582e:	6836      	ldr	r6, [r6, #0]
    5830:	e7ef      	b.n	5812 <att_reset+0x5c>

00005832 <bt_att_disconnected>:
{
    5832:	b510      	push	{r4, lr}
    5834:	4604      	mov	r4, r0
	att_reset(att);
    5836:	f7ff ffbe 	bl	57b6 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    583a:	6820      	ldr	r0, [r4, #0]
}
    583c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    5840:	f001 b978 	b.w	6b34 <bt_gatt_disconnected>

00005844 <att_timeout>:
{
    5844:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    5846:	4b0b      	ldr	r3, [pc, #44]	; (5874 <att_timeout+0x30>)
    5848:	4a0b      	ldr	r2, [pc, #44]	; (5878 <att_timeout+0x34>)
    584a:	490c      	ldr	r1, [pc, #48]	; (587c <att_timeout+0x38>)
    584c:	9301      	str	r3, [sp, #4]
{
    584e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    5850:	9300      	str	r3, [sp, #0]
    5852:	480b      	ldr	r0, [pc, #44]	; (5880 <att_timeout+0x3c>)
    5854:	4b0b      	ldr	r3, [pc, #44]	; (5884 <att_timeout+0x40>)
    5856:	f7fb fb99 	bl	f8c <printk>
	att_reset(att);
    585a:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    585e:	f7ff ffaa 	bl	57b6 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5862:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    5866:	f001 f965 	bl	6b34 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    586a:	2300      	movs	r3, #0
    586c:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    5870:	b002      	add	sp, #8
    5872:	bd10      	pop	{r4, pc}
    5874:	000145f1 	.word	0x000145f1
    5878:	00015373 	.word	0x00015373
    587c:	000153c2 	.word	0x000153c2
    5880:	00015f68 	.word	0x00015f68
    5884:	00015e68 	.word	0x00015e68

00005888 <read_cb>:
{
    5888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    588c:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    588e:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5890:	f8d1 9000 	ldr.w	r9, [r1]
{
    5894:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5896:	3008      	adds	r0, #8
    5898:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    589a:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    589e:	f00d f899 	bl	129d4 <net_buf_simple_add>
	data->err = 0x00;
    58a2:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    58a4:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    58a6:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    58a8:	2115      	movs	r1, #21
    58aa:	4630      	mov	r0, r6
    58ac:	f7ff fd3a 	bl	5324 <check_perm.isra.5>
    58b0:	4605      	mov	r5, r0
    58b2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    58b4:	bb08      	cbnz	r0, 58fa <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    58b6:	68a1      	ldr	r1, [r4, #8]
    58b8:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    58bc:	898a      	ldrh	r2, [r1, #12]
    58be:	6889      	ldr	r1, [r1, #8]
    58c0:	88a0      	ldrh	r0, [r4, #4]
    58c2:	9000      	str	r0, [sp, #0]
    58c4:	1a9b      	subs	r3, r3, r2
    58c6:	6877      	ldr	r7, [r6, #4]
    58c8:	440a      	add	r2, r1
    58ca:	b29b      	uxth	r3, r3
    58cc:	4631      	mov	r1, r6
    58ce:	4640      	mov	r0, r8
    58d0:	47b8      	blx	r7
	if (read < 0) {
    58d2:	1e01      	subs	r1, r0, #0
    58d4:	da0b      	bge.n	58ee <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    58d6:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    58da:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    58dc:	bf9a      	itte	ls
    58de:	4249      	negls	r1, r1
    58e0:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    58e2:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    58e4:	7421      	strb	r1, [r4, #16]
}
    58e6:	4628      	mov	r0, r5
    58e8:	b003      	add	sp, #12
    58ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    58ee:	68a0      	ldr	r0, [r4, #8]
    58f0:	3008      	adds	r0, #8
    58f2:	f00d f86f 	bl	129d4 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    58f6:	2501      	movs	r5, #1
    58f8:	e7f5      	b.n	58e6 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    58fa:	463d      	mov	r5, r7
    58fc:	e7f3      	b.n	58e6 <read_cb+0x5e>
	...

00005900 <bt_att_create_pdu>:
{
    5900:	b530      	push	{r4, r5, lr}
    5902:	b085      	sub	sp, #20
    5904:	460d      	mov	r5, r1
    5906:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5908:	f7ff fe06 	bl	5518 <att_chan_get>
	if (!att) {
    590c:	b1f0      	cbz	r0, 594c <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    590e:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    5912:	3401      	adds	r4, #1
    5914:	428c      	cmp	r4, r1
    5916:	d90e      	bls.n	5936 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5918:	4b0d      	ldr	r3, [pc, #52]	; (5950 <bt_att_create_pdu+0x50>)
    591a:	9303      	str	r3, [sp, #12]
    591c:	9402      	str	r4, [sp, #8]
    591e:	9101      	str	r1, [sp, #4]
    5920:	9300      	str	r3, [sp, #0]
    5922:	4a0c      	ldr	r2, [pc, #48]	; (5954 <bt_att_create_pdu+0x54>)
    5924:	4b0c      	ldr	r3, [pc, #48]	; (5958 <bt_att_create_pdu+0x58>)
    5926:	490d      	ldr	r1, [pc, #52]	; (595c <bt_att_create_pdu+0x5c>)
    5928:	480d      	ldr	r0, [pc, #52]	; (5960 <bt_att_create_pdu+0x60>)
    592a:	f7fb fb2f 	bl	f8c <printk>
		return NULL;
    592e:	2400      	movs	r4, #0
}
    5930:	4620      	mov	r0, r4
    5932:	b005      	add	sp, #20
    5934:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    5936:	2100      	movs	r1, #0
    5938:	4608      	mov	r0, r1
    593a:	f7ff f9f4 	bl	4d26 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    593e:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    5940:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5942:	3008      	adds	r0, #8
    5944:	f00d f846 	bl	129d4 <net_buf_simple_add>
	hdr->code = op;
    5948:	7005      	strb	r5, [r0, #0]
	return buf;
    594a:	e7f1      	b.n	5930 <bt_att_create_pdu+0x30>
		return NULL;
    594c:	4604      	mov	r4, r0
    594e:	e7ef      	b.n	5930 <bt_att_create_pdu+0x30>
    5950:	000145f1 	.word	0x000145f1
    5954:	000153bb 	.word	0x000153bb
    5958:	00015e56 	.word	0x00015e56
    595c:	000153c2 	.word	0x000153c2
    5960:	00015fb9 	.word	0x00015fb9

00005964 <att_indicate>:
{
    5964:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5966:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5968:	f101 0008 	add.w	r0, r1, #8
    596c:	f00d f861 	bl	12a32 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5970:	2200      	movs	r2, #0
    5972:	211e      	movs	r1, #30
    5974:	4620      	mov	r0, r4
    5976:	f7ff ffc3 	bl	5900 <bt_att_create_pdu>
	if (!buf) {
    597a:	4602      	mov	r2, r0
    597c:	b120      	cbz	r0, 5988 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    597e:	4b03      	ldr	r3, [pc, #12]	; (598c <att_indicate+0x28>)
    5980:	2104      	movs	r1, #4
    5982:	4620      	mov	r0, r4
    5984:	f7ff f9d2 	bl	4d2c <bt_l2cap_send_cb>
}
    5988:	2000      	movs	r0, #0
    598a:	bd10      	pop	{r4, pc}
    598c:	000054eb 	.word	0x000054eb

00005990 <att_mtu_req>:
{
    5990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5994:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5996:	881b      	ldrh	r3, [r3, #0]
    5998:	2b16      	cmp	r3, #22
{
    599a:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    599c:	d91c      	bls.n	59d8 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    599e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    59a2:	2202      	movs	r2, #2
    59a4:	2103      	movs	r1, #3
    59a6:	4640      	mov	r0, r8
    59a8:	f7ff ffaa 	bl	5900 <bt_att_create_pdu>
	if (!pdu) {
    59ac:	4607      	mov	r7, r0
    59ae:	b1b0      	cbz	r0, 59de <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    59b0:	2102      	movs	r1, #2
    59b2:	3008      	adds	r0, #8
    59b4:	f00d f80e 	bl	129d4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    59b8:	2617      	movs	r6, #23
    59ba:	2400      	movs	r4, #0
    59bc:	7006      	strb	r6, [r0, #0]
    59be:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    59c0:	4b08      	ldr	r3, [pc, #32]	; (59e4 <att_mtu_req+0x54>)
    59c2:	4640      	mov	r0, r8
    59c4:	463a      	mov	r2, r7
    59c6:	2104      	movs	r1, #4
    59c8:	f7ff f9b0 	bl	4d2c <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    59cc:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    59ce:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    59d2:	4620      	mov	r0, r4
    59d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    59d8:	2004      	movs	r0, #4
    59da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    59de:	200e      	movs	r0, #14
}
    59e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59e4:	000054bd 	.word	0x000054bd

000059e8 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    59e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59ec:	4688      	mov	r8, r1
    59ee:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    59f0:	2101      	movs	r1, #1
    59f2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    59f4:	4605      	mov	r5, r0
    59f6:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    59f8:	f7ff ff82 	bl	5900 <bt_att_create_pdu>
	if (!buf) {
    59fc:	4604      	mov	r4, r0
    59fe:	b180      	cbz	r0, 5a22 <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5a00:	2104      	movs	r1, #4
    5a02:	3008      	adds	r0, #8
    5a04:	f00c ffe6 	bl	129d4 <net_buf_simple_add>
	rsp->request = req;
    5a08:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    5a0c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    5a0e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5a12:	4622      	mov	r2, r4
    5a14:	4628      	mov	r0, r5
    5a16:	4b04      	ldr	r3, [pc, #16]	; (5a28 <send_err_rsp.part.11+0x40>)
    5a18:	2104      	movs	r1, #4
}
    5a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5a1e:	f7ff b985 	b.w	4d2c <bt_l2cap_send_cb>
    5a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a26:	bf00      	nop
    5a28:	000054bd 	.word	0x000054bd

00005a2c <bt_att_recv>:
{
    5a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5a2e:	898b      	ldrh	r3, [r1, #12]
{
    5a30:	b085      	sub	sp, #20
    5a32:	4604      	mov	r4, r0
    5a34:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    5a36:	b953      	cbnz	r3, 5a4e <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    5a38:	4b4b      	ldr	r3, [pc, #300]	; (5b68 <bt_att_recv+0x13c>)
    5a3a:	9301      	str	r3, [sp, #4]
    5a3c:	9300      	str	r3, [sp, #0]
    5a3e:	4a4b      	ldr	r2, [pc, #300]	; (5b6c <bt_att_recv+0x140>)
    5a40:	4b4b      	ldr	r3, [pc, #300]	; (5b70 <bt_att_recv+0x144>)
    5a42:	494c      	ldr	r1, [pc, #304]	; (5b74 <bt_att_recv+0x148>)
    5a44:	484c      	ldr	r0, [pc, #304]	; (5b78 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    5a46:	f7fb faa1 	bl	f8c <printk>
}
    5a4a:	b005      	add	sp, #20
    5a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    5a4e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5a50:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5a52:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    5a56:	f00c ffdc 	bl	12a12 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    5a5a:	4a48      	ldr	r2, [pc, #288]	; (5b7c <bt_att_recv+0x150>)
    5a5c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5a5e:	2300      	movs	r3, #0
    5a60:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5a62:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    5a66:	4286      	cmp	r6, r0
    5a68:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5a6c:	d11c      	bne.n	5aa8 <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    5a6e:	4472      	add	r2, lr
    5a70:	7896      	ldrb	r6, [r2, #2]
    5a72:	2e01      	cmp	r6, #1
    5a74:	d136      	bne.n	5ae4 <bt_att_recv+0xb8>
    5a76:	f3bf 8f5b 	dmb	ish
    5a7a:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5a7e:	e852 3f00 	ldrex	r3, [r2]
    5a82:	f043 0001 	orr.w	r0, r3, #1
    5a86:	e842 0c00 	strex	ip, r0, [r2]
    5a8a:	f1bc 0f00 	cmp.w	ip, #0
    5a8e:	d1f6      	bne.n	5a7e <bt_att_recv+0x52>
    5a90:	f3bf 8f5b 	dmb	ish
    5a94:	07da      	lsls	r2, r3, #31
    5a96:	d540      	bpl.n	5b1a <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    5a98:	4b33      	ldr	r3, [pc, #204]	; (5b68 <bt_att_recv+0x13c>)
    5a9a:	9301      	str	r3, [sp, #4]
    5a9c:	9300      	str	r3, [sp, #0]
    5a9e:	4a38      	ldr	r2, [pc, #224]	; (5b80 <bt_att_recv+0x154>)
    5aa0:	4b33      	ldr	r3, [pc, #204]	; (5b70 <bt_att_recv+0x144>)
    5aa2:	4934      	ldr	r1, [pc, #208]	; (5b74 <bt_att_recv+0x148>)
    5aa4:	4837      	ldr	r0, [pc, #220]	; (5b84 <bt_att_recv+0x158>)
    5aa6:	e7ce      	b.n	5a46 <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5aa8:	3301      	adds	r3, #1
    5aaa:	2b1b      	cmp	r3, #27
    5aac:	d1d9      	bne.n	5a62 <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5aae:	4b2e      	ldr	r3, [pc, #184]	; (5b68 <bt_att_recv+0x13c>)
    5ab0:	9302      	str	r3, [sp, #8]
    5ab2:	9001      	str	r0, [sp, #4]
    5ab4:	9300      	str	r3, [sp, #0]
    5ab6:	4a32      	ldr	r2, [pc, #200]	; (5b80 <bt_att_recv+0x154>)
    5ab8:	4b2d      	ldr	r3, [pc, #180]	; (5b70 <bt_att_recv+0x144>)
    5aba:	492e      	ldr	r1, [pc, #184]	; (5b74 <bt_att_recv+0x148>)
    5abc:	4832      	ldr	r0, [pc, #200]	; (5b88 <bt_att_recv+0x15c>)
    5abe:	f7fb fa65 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5ac2:	782d      	ldrb	r5, [r5, #0]
    5ac4:	4628      	mov	r0, r5
    5ac6:	f7ff faad 	bl	5024 <att_op_get_type>
    5aca:	2800      	cmp	r0, #0
    5acc:	d0bd      	beq.n	5a4a <bt_att_recv+0x1e>
	if (!req) {
    5ace:	2d00      	cmp	r5, #0
    5ad0:	d0bb      	beq.n	5a4a <bt_att_recv+0x1e>
    5ad2:	2306      	movs	r3, #6
    5ad4:	2200      	movs	r2, #0
    5ad6:	4629      	mov	r1, r5
    5ad8:	6820      	ldr	r0, [r4, #0]
}
    5ada:	b005      	add	sp, #20
    5adc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5ae0:	f7ff bf82 	b.w	59e8 <send_err_rsp.part.11>
		} else if (handler->type == ATT_INDICATION &&
    5ae4:	2e05      	cmp	r6, #5
    5ae6:	d118      	bne.n	5b1a <bt_att_recv+0xee>
    5ae8:	f3bf 8f5b 	dmb	ish
    5aec:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5af0:	e852 3f00 	ldrex	r3, [r2]
    5af4:	f043 0002 	orr.w	r0, r3, #2
    5af8:	e842 0c00 	strex	ip, r0, [r2]
    5afc:	f1bc 0f00 	cmp.w	ip, #0
    5b00:	d1f6      	bne.n	5af0 <bt_att_recv+0xc4>
    5b02:	f3bf 8f5b 	dmb	ish
    5b06:	079b      	lsls	r3, r3, #30
    5b08:	d507      	bpl.n	5b1a <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    5b0a:	4b17      	ldr	r3, [pc, #92]	; (5b68 <bt_att_recv+0x13c>)
    5b0c:	9301      	str	r3, [sp, #4]
    5b0e:	9300      	str	r3, [sp, #0]
    5b10:	4a1b      	ldr	r2, [pc, #108]	; (5b80 <bt_att_recv+0x154>)
    5b12:	4b17      	ldr	r3, [pc, #92]	; (5b70 <bt_att_recv+0x144>)
    5b14:	4917      	ldr	r1, [pc, #92]	; (5b74 <bt_att_recv+0x148>)
    5b16:	481d      	ldr	r0, [pc, #116]	; (5b8c <bt_att_recv+0x160>)
    5b18:	e795      	b.n	5a46 <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    5b1a:	eb01 030e 	add.w	r3, r1, lr
    5b1e:	89ba      	ldrh	r2, [r7, #12]
    5b20:	7859      	ldrb	r1, [r3, #1]
    5b22:	4291      	cmp	r1, r2
    5b24:	d90f      	bls.n	5b46 <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5b26:	4b10      	ldr	r3, [pc, #64]	; (5b68 <bt_att_recv+0x13c>)
    5b28:	9303      	str	r3, [sp, #12]
    5b2a:	7829      	ldrb	r1, [r5, #0]
    5b2c:	9102      	str	r1, [sp, #8]
    5b2e:	9201      	str	r2, [sp, #4]
    5b30:	9300      	str	r3, [sp, #0]
    5b32:	4a0e      	ldr	r2, [pc, #56]	; (5b6c <bt_att_recv+0x140>)
    5b34:	4b0e      	ldr	r3, [pc, #56]	; (5b70 <bt_att_recv+0x144>)
    5b36:	490f      	ldr	r1, [pc, #60]	; (5b74 <bt_att_recv+0x148>)
    5b38:	4815      	ldr	r0, [pc, #84]	; (5b90 <bt_att_recv+0x164>)
    5b3a:	f7fb fa27 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    5b3e:	2e01      	cmp	r6, #1
    5b40:	d183      	bne.n	5a4a <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    5b42:	2304      	movs	r3, #4
    5b44:	e00a      	b.n	5b5c <bt_att_recv+0x130>
		err = handler->func(att, buf);
    5b46:	685b      	ldr	r3, [r3, #4]
    5b48:	4639      	mov	r1, r7
    5b4a:	4620      	mov	r0, r4
    5b4c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5b4e:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    5b50:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5b52:	f47f af7a 	bne.w	5a4a <bt_att_recv+0x1e>
    5b56:	2800      	cmp	r0, #0
    5b58:	f43f af77 	beq.w	5a4a <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5b5c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    5b5e:	2900      	cmp	r1, #0
    5b60:	f43f af73 	beq.w	5a4a <bt_att_recv+0x1e>
    5b64:	2200      	movs	r2, #0
    5b66:	e7b7      	b.n	5ad8 <bt_att_recv+0xac>
    5b68:	000145f1 	.word	0x000145f1
    5b6c:	00015373 	.word	0x00015373
    5b70:	00015e3d 	.word	0x00015e3d
    5b74:	000153c2 	.word	0x000153c2
    5b78:	00015fee 	.word	0x00015fee
    5b7c:	000160cc 	.word	0x000160cc
    5b80:	000153bb 	.word	0x000153bb
    5b84:	00016019 	.word	0x00016019
    5b88:	000160a3 	.word	0x000160a3
    5b8c:	00016045 	.word	0x00016045
    5b90:	00016074 	.word	0x00016074

00005b94 <att_read_group_req>:
{
    5b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5b98:	898b      	ldrh	r3, [r1, #12]
    5b9a:	2b06      	cmp	r3, #6
{
    5b9c:	b08d      	sub	sp, #52	; 0x34
    5b9e:	4680      	mov	r8, r0
    5ba0:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5ba2:	d001      	beq.n	5ba8 <att_read_group_req+0x14>
    5ba4:	2b14      	cmp	r3, #20
    5ba6:	d168      	bne.n	5c7a <att_read_group_req+0xe6>
	req = (void *)buf->data;
    5ba8:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    5baa:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5bac:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5bb0:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5bb4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5bb6:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5bb8:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    5bba:	f00c ff2a 	bl	12a12 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5bbe:	4621      	mov	r1, r4
    5bc0:	4638      	mov	r0, r7
    5bc2:	f7ff fc2d 	bl	5420 <uuid_create>
    5bc6:	2800      	cmp	r0, #0
    5bc8:	d059      	beq.n	5c7e <att_read_group_req+0xea>
	if (!start || !end) {
    5bca:	2d00      	cmp	r5, #0
    5bcc:	d05a      	beq.n	5c84 <att_read_group_req+0xf0>
    5bce:	2400      	movs	r4, #0
    5bd0:	2e00      	cmp	r6, #0
    5bd2:	d056      	beq.n	5c82 <att_read_group_req+0xee>
	if (start > end) {
    5bd4:	42b5      	cmp	r5, r6
    5bd6:	d855      	bhi.n	5c84 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5bd8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5bdc:	4669      	mov	r1, sp
    5bde:	4638      	mov	r0, r7
    5be0:	f88d 4000 	strb.w	r4, [sp]
    5be4:	f8ad 3002 	strh.w	r3, [sp, #2]
    5be8:	f7fc f986 	bl	1ef8 <bt_uuid_cmp>
    5bec:	bb38      	cbnz	r0, 5c3e <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    5bee:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    5bf2:	2214      	movs	r2, #20
    5bf4:	2100      	movs	r1, #0
    5bf6:	a807      	add	r0, sp, #28
    5bf8:	f7fc f82c 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5bfc:	2201      	movs	r2, #1
    5bfe:	2111      	movs	r1, #17
    5c00:	4648      	mov	r0, r9
    5c02:	f7ff fe7d 	bl	5900 <bt_att_create_pdu>
    5c06:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    5c08:	2800      	cmp	r0, #0
    5c0a:	d038      	beq.n	5c7e <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c0c:	2101      	movs	r1, #1
    5c0e:	3008      	adds	r0, #8
	data.uuid = uuid;
    5c10:	9708      	str	r7, [sp, #32]
	data.att = att;
    5c12:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c16:	f00c fedd 	bl	129d4 <net_buf_simple_add>
	data.rsp->len = 0;
    5c1a:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5c1c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5c1e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    5c20:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5c22:	4a1c      	ldr	r2, [pc, #112]	; (5c94 <att_read_group_req+0x100>)
	data.group = NULL;
    5c24:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5c26:	4631      	mov	r1, r6
    5c28:	4628      	mov	r0, r5
    5c2a:	f000 fe91 	bl	6950 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    5c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c30:	781c      	ldrb	r4, [r3, #0]
    5c32:	b9d4      	cbnz	r4, 5c6a <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    5c34:	9809      	ldr	r0, [sp, #36]	; 0x24
    5c36:	f00c fe9b 	bl	12970 <net_buf_unref>
    5c3a:	230a      	movs	r3, #10
    5c3c:	e00c      	b.n	5c58 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5c3e:	f642 0301 	movw	r3, #10241	; 0x2801
    5c42:	a901      	add	r1, sp, #4
    5c44:	4638      	mov	r0, r7
    5c46:	f88d 4004 	strb.w	r4, [sp, #4]
    5c4a:	f8ad 3006 	strh.w	r3, [sp, #6]
    5c4e:	f7fc f953 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5c52:	2800      	cmp	r0, #0
    5c54:	d0cb      	beq.n	5bee <att_read_group_req+0x5a>
    5c56:	2310      	movs	r3, #16
    5c58:	462a      	mov	r2, r5
    5c5a:	2110      	movs	r1, #16
    5c5c:	4648      	mov	r0, r9
    5c5e:	f7ff fec3 	bl	59e8 <send_err_rsp.part.11>
}
    5c62:	4620      	mov	r0, r4
    5c64:	b00d      	add	sp, #52	; 0x34
    5c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5c6a:	4b0b      	ldr	r3, [pc, #44]	; (5c98 <att_read_group_req+0x104>)
    5c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c6e:	2104      	movs	r1, #4
    5c70:	4648      	mov	r0, r9
    5c72:	f7ff f85b 	bl	4d2c <bt_l2cap_send_cb>
		return 0;
    5c76:	2400      	movs	r4, #0
    5c78:	e7f3      	b.n	5c62 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    5c7a:	2404      	movs	r4, #4
    5c7c:	e7f1      	b.n	5c62 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    5c7e:	240e      	movs	r4, #14
    5c80:	e7ef      	b.n	5c62 <att_read_group_req+0xce>
			*err = 0;
    5c82:	4635      	mov	r5, r6
    5c84:	2301      	movs	r3, #1
    5c86:	462a      	mov	r2, r5
    5c88:	2110      	movs	r1, #16
    5c8a:	4648      	mov	r0, r9
    5c8c:	f7ff feac 	bl	59e8 <send_err_rsp.part.11>
    5c90:	e7f1      	b.n	5c76 <att_read_group_req+0xe2>
    5c92:	bf00      	nop
    5c94:	000050e9 	.word	0x000050e9
    5c98:	000054bd 	.word	0x000054bd

00005c9c <att_read_mult_req>:
{
    5c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5ca0:	6804      	ldr	r4, [r0, #0]
{
    5ca2:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    5ca4:	2214      	movs	r2, #20
{
    5ca6:	4606      	mov	r6, r0
    5ca8:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    5caa:	a801      	add	r0, sp, #4
    5cac:	2100      	movs	r1, #0
    5cae:	f7fb ffd1 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5cb2:	2200      	movs	r2, #0
    5cb4:	210f      	movs	r1, #15
    5cb6:	4620      	mov	r0, r4
    5cb8:	f7ff fe22 	bl	5900 <bt_att_create_pdu>
    5cbc:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5cbe:	b368      	cbz	r0, 5d1c <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5cc0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5d24 <att_read_mult_req+0x88>
	data.att = att;
    5cc4:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    5cc6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5cca:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    5cce:	89ab      	ldrh	r3, [r5, #12]
    5cd0:	2b01      	cmp	r3, #1
    5cd2:	d806      	bhi.n	5ce2 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5cd4:	4b12      	ldr	r3, [pc, #72]	; (5d20 <att_read_mult_req+0x84>)
    5cd6:	9a03      	ldr	r2, [sp, #12]
    5cd8:	2104      	movs	r1, #4
    5cda:	4620      	mov	r0, r4
    5cdc:	f7ff f826 	bl	4d2c <bt_l2cap_send_cb>
    5ce0:	e018      	b.n	5d14 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    5ce2:	4638      	mov	r0, r7
    5ce4:	f00c fea5 	bl	12a32 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5ce8:	ab01      	add	r3, sp, #4
    5cea:	464a      	mov	r2, r9
    5cec:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    5cee:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5cf0:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5cf4:	f000 fe2c 	bl	6950 <bt_gatt_foreach_attr>
		if (data.err) {
    5cf8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d0e6      	beq.n	5cce <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    5d00:	9803      	ldr	r0, [sp, #12]
    5d02:	f00c fe35 	bl	12970 <net_buf_unref>
    5d06:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d0a:	4632      	mov	r2, r6
    5d0c:	210e      	movs	r1, #14
    5d0e:	4620      	mov	r0, r4
    5d10:	f7ff fe6a 	bl	59e8 <send_err_rsp.part.11>
	return 0;
    5d14:	2000      	movs	r0, #0
}
    5d16:	b007      	add	sp, #28
    5d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    5d1c:	200e      	movs	r0, #14
    5d1e:	e7fa      	b.n	5d16 <att_read_mult_req+0x7a>
    5d20:	000054bd 	.word	0x000054bd
    5d24:	00005889 	.word	0x00005889

00005d28 <att_read_rsp>:
{
    5d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d2c:	4607      	mov	r7, r0
    5d2e:	b086      	sub	sp, #24
    5d30:	460c      	mov	r4, r1
    5d32:	4690      	mov	r8, r2
	if (!handle) {
    5d34:	461d      	mov	r5, r3
    5d36:	b3a3      	cbz	r3, 5da2 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    5d38:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    5d3a:	2214      	movs	r2, #20
    5d3c:	2100      	movs	r1, #0
    5d3e:	a801      	add	r0, sp, #4
    5d40:	f7fb ff88 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    5d44:	2200      	movs	r2, #0
    5d46:	4641      	mov	r1, r8
    5d48:	4630      	mov	r0, r6
    5d4a:	f7ff fdd9 	bl	5900 <bt_att_create_pdu>
    5d4e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5d50:	b348      	cbz	r0, 5da6 <att_read_rsp+0x7e>
	data.offset = offset;
    5d52:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5d56:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5d5a:	2301      	movs	r3, #1
    5d5c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d60:	4a12      	ldr	r2, [pc, #72]	; (5dac <att_read_rsp+0x84>)
	data.att = att;
    5d62:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5d64:	ab01      	add	r3, sp, #4
    5d66:	4629      	mov	r1, r5
    5d68:	4628      	mov	r0, r5
    5d6a:	f000 fdf1 	bl	6950 <bt_gatt_foreach_attr>
	if (data.err) {
    5d6e:	f89d 7014 	ldrb.w	r7, [sp, #20]
    5d72:	b17f      	cbz	r7, 5d94 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    5d74:	9803      	ldr	r0, [sp, #12]
    5d76:	f00c fdfb 	bl	12970 <net_buf_unref>
	if (!req) {
    5d7a:	b13c      	cbz	r4, 5d8c <att_read_rsp+0x64>
    5d7c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d80:	462a      	mov	r2, r5
    5d82:	4621      	mov	r1, r4
    5d84:	4630      	mov	r0, r6
    5d86:	f7ff fe2f 	bl	59e8 <send_err_rsp.part.11>
		return 0;
    5d8a:	2400      	movs	r4, #0
}
    5d8c:	4620      	mov	r0, r4
    5d8e:	b006      	add	sp, #24
    5d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5d94:	4b06      	ldr	r3, [pc, #24]	; (5db0 <att_read_rsp+0x88>)
    5d96:	9a03      	ldr	r2, [sp, #12]
    5d98:	2104      	movs	r1, #4
    5d9a:	4630      	mov	r0, r6
    5d9c:	f7fe ffc6 	bl	4d2c <bt_l2cap_send_cb>
    5da0:	e7f3      	b.n	5d8a <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    5da2:	2401      	movs	r4, #1
    5da4:	e7f2      	b.n	5d8c <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    5da6:	240e      	movs	r4, #14
    5da8:	e7f0      	b.n	5d8c <att_read_rsp+0x64>
    5daa:	bf00      	nop
    5dac:	00005889 	.word	0x00005889
    5db0:	000054bd 	.word	0x000054bd

00005db4 <att_read_blob_req>:
{
    5db4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    5db6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5db8:	8813      	ldrh	r3, [r2, #0]
    5dba:	8852      	ldrh	r2, [r2, #2]
    5dbc:	9200      	str	r2, [sp, #0]
    5dbe:	210c      	movs	r1, #12
    5dc0:	220d      	movs	r2, #13
    5dc2:	f7ff ffb1 	bl	5d28 <att_read_rsp>
}
    5dc6:	b003      	add	sp, #12
    5dc8:	f85d fb04 	ldr.w	pc, [sp], #4

00005dcc <att_read_req>:
{
    5dcc:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    5dce:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5dd0:	2200      	movs	r2, #0
    5dd2:	881b      	ldrh	r3, [r3, #0]
    5dd4:	9200      	str	r2, [sp, #0]
    5dd6:	210a      	movs	r1, #10
    5dd8:	220b      	movs	r2, #11
    5dda:	f7ff ffa5 	bl	5d28 <att_read_rsp>
}
    5dde:	b003      	add	sp, #12
    5de0:	f85d fb04 	ldr.w	pc, [sp], #4

00005de4 <att_read_type_req>:
{
    5de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5de8:	898b      	ldrh	r3, [r1, #12]
    5dea:	2b06      	cmp	r3, #6
{
    5dec:	b08d      	sub	sp, #52	; 0x34
    5dee:	4607      	mov	r7, r0
    5df0:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5df2:	d001      	beq.n	5df8 <att_read_type_req+0x14>
    5df4:	2b14      	cmp	r3, #20
    5df6:	d152      	bne.n	5e9e <att_read_type_req+0xba>
	req = (void *)buf->data;
    5df8:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    5dfa:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5dfc:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5e00:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5e04:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5e06:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5e08:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    5e0c:	f00c fe01 	bl	12a12 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5e10:	4631      	mov	r1, r6
    5e12:	4640      	mov	r0, r8
    5e14:	f7ff fb04 	bl	5420 <uuid_create>
    5e18:	b198      	cbz	r0, 5e42 <att_read_type_req+0x5e>
	if (!start || !end) {
    5e1a:	2d00      	cmp	r5, #0
    5e1c:	d042      	beq.n	5ea4 <att_read_type_req+0xc0>
    5e1e:	2c00      	cmp	r4, #0
    5e20:	d03f      	beq.n	5ea2 <att_read_type_req+0xbe>
	if (start > end) {
    5e22:	42a5      	cmp	r5, r4
    5e24:	d83e      	bhi.n	5ea4 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    5e26:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    5e28:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    5e2a:	2100      	movs	r1, #0
    5e2c:	eb0d 0002 	add.w	r0, sp, r2
    5e30:	f7fb ff10 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5e34:	2201      	movs	r2, #1
    5e36:	2109      	movs	r1, #9
    5e38:	4630      	mov	r0, r6
    5e3a:	f7ff fd61 	bl	5900 <bt_att_create_pdu>
    5e3e:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    5e40:	b908      	cbnz	r0, 5e46 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    5e42:	240e      	movs	r4, #14
    5e44:	e027      	b.n	5e96 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5e46:	2101      	movs	r1, #1
    5e48:	3008      	adds	r0, #8
	data.att = att;
    5e4a:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    5e4c:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5e50:	f00c fdc0 	bl	129d4 <net_buf_simple_add>
	data.rsp->len = 0;
    5e54:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5e56:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5e58:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5e5a:	4621      	mov	r1, r4
	data.rsp->len = 0;
    5e5c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5e5e:	4a14      	ldr	r2, [pc, #80]	; (5eb0 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5e60:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5e64:	4628      	mov	r0, r5
    5e66:	ab06      	add	r3, sp, #24
    5e68:	f000 fd72 	bl	6950 <bt_gatt_foreach_attr>
	if (data.err) {
    5e6c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    5e70:	b15c      	cbz	r4, 5e8a <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    5e72:	9808      	ldr	r0, [sp, #32]
    5e74:	f00c fd7c 	bl	12970 <net_buf_unref>
    5e78:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5e7c:	462a      	mov	r2, r5
    5e7e:	2108      	movs	r1, #8
    5e80:	4630      	mov	r0, r6
    5e82:	f7ff fdb1 	bl	59e8 <send_err_rsp.part.11>
		return 0;
    5e86:	2400      	movs	r4, #0
    5e88:	e005      	b.n	5e96 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5e8a:	4b0a      	ldr	r3, [pc, #40]	; (5eb4 <att_read_type_req+0xd0>)
    5e8c:	9a08      	ldr	r2, [sp, #32]
    5e8e:	2104      	movs	r1, #4
    5e90:	4630      	mov	r0, r6
    5e92:	f7fe ff4b 	bl	4d2c <bt_l2cap_send_cb>
}
    5e96:	4620      	mov	r0, r4
    5e98:	b00d      	add	sp, #52	; 0x34
    5e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5e9e:	2404      	movs	r4, #4
    5ea0:	e7f9      	b.n	5e96 <att_read_type_req+0xb2>
			*err = 0;
    5ea2:	4625      	mov	r5, r4
    5ea4:	2301      	movs	r3, #1
    5ea6:	462a      	mov	r2, r5
    5ea8:	2108      	movs	r1, #8
    5eaa:	4648      	mov	r0, r9
    5eac:	e7e9      	b.n	5e82 <att_read_type_req+0x9e>
    5eae:	bf00      	nop
    5eb0:	00005365 	.word	0x00005365
    5eb4:	000054bd 	.word	0x000054bd

00005eb8 <att_find_type_req>:
{
    5eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5ebc:	f8d0 9000 	ldr.w	r9, [r0]
{
    5ec0:	4680      	mov	r8, r0
	req = (void *)buf->data;
    5ec2:	4608      	mov	r0, r1
{
    5ec4:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    5ec6:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    5eca:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    5ecc:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    5ece:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5ed0:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    5ed2:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    5ed4:	f00c fd9d 	bl	12a12 <net_buf_simple_pull>
    5ed8:	4682      	mov	sl, r0
	if (!start || !end) {
    5eda:	2d00      	cmp	r5, #0
    5edc:	d057      	beq.n	5f8e <att_find_type_req+0xd6>
    5ede:	2400      	movs	r4, #0
    5ee0:	2f00      	cmp	r7, #0
    5ee2:	d053      	beq.n	5f8c <att_find_type_req+0xd4>
	if (start > end) {
    5ee4:	42bd      	cmp	r5, r7
    5ee6:	d852      	bhi.n	5f8e <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    5ee8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5eec:	a902      	add	r1, sp, #8
    5eee:	a801      	add	r0, sp, #4
    5ef0:	f8ad 6006 	strh.w	r6, [sp, #6]
    5ef4:	f88d 4004 	strb.w	r4, [sp, #4]
    5ef8:	f88d 4008 	strb.w	r4, [sp, #8]
    5efc:	f8ad 300a 	strh.w	r3, [sp, #10]
    5f00:	f7fb fffa 	bl	1ef8 <bt_uuid_cmp>
    5f04:	4606      	mov	r6, r0
    5f06:	b148      	cbz	r0, 5f1c <att_find_type_req+0x64>
    5f08:	230a      	movs	r3, #10
    5f0a:	462a      	mov	r2, r5
    5f0c:	2106      	movs	r1, #6
    5f0e:	4648      	mov	r0, r9
    5f10:	f7ff fd6a 	bl	59e8 <send_err_rsp.part.11>
}
    5f14:	4620      	mov	r0, r4
    5f16:	b009      	add	sp, #36	; 0x24
    5f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    5f1c:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    5f20:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    5f24:	2214      	movs	r2, #20
    5f26:	4631      	mov	r1, r6
    5f28:	a803      	add	r0, sp, #12
    5f2a:	f7fb fe93 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5f2e:	4632      	mov	r2, r6
    5f30:	2107      	movs	r1, #7
    5f32:	4648      	mov	r0, r9
    5f34:	f7ff fce4 	bl	5900 <bt_att_create_pdu>
    5f38:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    5f3a:	b328      	cbz	r0, 5f88 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5f3c:	230a      	movs	r3, #10
    5f3e:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5f42:	4a14      	ldr	r2, [pc, #80]	; (5f94 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5f44:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5f48:	ab03      	add	r3, sp, #12
    5f4a:	4639      	mov	r1, r7
    5f4c:	4628      	mov	r0, r5
	data.att = att;
    5f4e:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    5f52:	9605      	str	r6, [sp, #20]
	data.value = value;
    5f54:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5f58:	f000 fcfa 	bl	6950 <bt_gatt_foreach_attr>
	if (data.err) {
    5f5c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    5f60:	b15c      	cbz	r4, 5f7a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    5f62:	9804      	ldr	r0, [sp, #16]
    5f64:	f00c fd04 	bl	12970 <net_buf_unref>
    5f68:	f89d 301d 	ldrb.w	r3, [sp, #29]
    5f6c:	462a      	mov	r2, r5
    5f6e:	2106      	movs	r1, #6
    5f70:	4648      	mov	r0, r9
    5f72:	f7ff fd39 	bl	59e8 <send_err_rsp.part.11>
		return 0;
    5f76:	2400      	movs	r4, #0
    5f78:	e7cc      	b.n	5f14 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5f7a:	4b07      	ldr	r3, [pc, #28]	; (5f98 <att_find_type_req+0xe0>)
    5f7c:	9a04      	ldr	r2, [sp, #16]
    5f7e:	2104      	movs	r1, #4
    5f80:	4648      	mov	r0, r9
    5f82:	f7fe fed3 	bl	4d2c <bt_l2cap_send_cb>
    5f86:	e7c5      	b.n	5f14 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    5f88:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5f8a:	e7c3      	b.n	5f14 <att_find_type_req+0x5c>
			*err = 0;
    5f8c:	463d      	mov	r5, r7
    5f8e:	2301      	movs	r3, #1
    5f90:	e7ec      	b.n	5f6c <att_find_type_req+0xb4>
    5f92:	bf00      	nop
    5f94:	00005251 	.word	0x00005251
    5f98:	000054bd 	.word	0x000054bd

00005f9c <att_find_info_req>:
{
    5f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    5f9e:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    5fa0:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5fa2:	881d      	ldrh	r5, [r3, #0]
{
    5fa4:	b085      	sub	sp, #20
    5fa6:	4607      	mov	r7, r0
	if (!start || !end) {
    5fa8:	b375      	cbz	r5, 6008 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    5faa:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    5fac:	b35c      	cbz	r4, 6006 <att_find_info_req+0x6a>
	if (start > end) {
    5fae:	42a5      	cmp	r5, r4
    5fb0:	d82a      	bhi.n	6008 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    5fb2:	2210      	movs	r2, #16
    5fb4:	2100      	movs	r1, #0
    5fb6:	4668      	mov	r0, sp
    5fb8:	f7fb fe4c 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    5fbc:	2200      	movs	r2, #0
    5fbe:	2105      	movs	r1, #5
    5fc0:	4630      	mov	r0, r6
    5fc2:	f7ff fc9d 	bl	5900 <bt_att_create_pdu>
    5fc6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    5fc8:	b910      	cbnz	r0, 5fd0 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    5fca:	200e      	movs	r0, #14
}
    5fcc:	b005      	add	sp, #20
    5fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5fd0:	4621      	mov	r1, r4
    5fd2:	466b      	mov	r3, sp
    5fd4:	4a0d      	ldr	r2, [pc, #52]	; (600c <att_find_info_req+0x70>)
	data.att = att;
    5fd6:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5fd8:	4628      	mov	r0, r5
    5fda:	f000 fcb9 	bl	6950 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    5fde:	9c02      	ldr	r4, [sp, #8]
    5fe0:	b94c      	cbnz	r4, 5ff6 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    5fe2:	9801      	ldr	r0, [sp, #4]
    5fe4:	f00c fcc4 	bl	12970 <net_buf_unref>
    5fe8:	230a      	movs	r3, #10
    5fea:	462a      	mov	r2, r5
    5fec:	2104      	movs	r1, #4
    5fee:	4630      	mov	r0, r6
    5ff0:	f7ff fcfa 	bl	59e8 <send_err_rsp.part.11>
    5ff4:	e005      	b.n	6002 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5ff6:	4b06      	ldr	r3, [pc, #24]	; (6010 <att_find_info_req+0x74>)
    5ff8:	9a01      	ldr	r2, [sp, #4]
    5ffa:	2104      	movs	r1, #4
    5ffc:	4630      	mov	r0, r6
    5ffe:	f7fe fe95 	bl	4d2c <bt_l2cap_send_cb>
		return 0;
    6002:	2000      	movs	r0, #0
    6004:	e7e2      	b.n	5fcc <att_find_info_req+0x30>
			*err = 0;
    6006:	4625      	mov	r5, r4
    6008:	2301      	movs	r3, #1
    600a:	e7ee      	b.n	5fea <att_find_info_req+0x4e>
    600c:	000051b7 	.word	0x000051b7
    6010:	000054bd 	.word	0x000054bd

00006014 <att_write_rsp.part.12.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6018:	b086      	sub	sp, #24
    601a:	4690      	mov	r8, r2
    601c:	4605      	mov	r5, r0
    601e:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    6020:	2218      	movs	r2, #24
    6022:	2100      	movs	r1, #0
    6024:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6026:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    6028:	f7fb fe14 	bl	1c54 <memset>
	if (rsp) {
    602c:	f1b8 0f00 	cmp.w	r8, #0
    6030:	d11f      	bne.n	6072 <att_write_rsp.part.12.constprop.17+0x5e>
	data.offset = offset;
    6032:	2300      	movs	r3, #0
    6034:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    6038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    603a:	9303      	str	r3, [sp, #12]
	data.len = len;
    603c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    6040:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6044:	2301      	movs	r3, #1
    6046:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    604a:	4a1b      	ldr	r2, [pc, #108]	; (60b8 <att_write_rsp.part.12.constprop.17+0xa4>)
	data.conn = conn;
    604c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    604e:	466b      	mov	r3, sp
    6050:	4639      	mov	r1, r7
    6052:	4638      	mov	r0, r7
	data.op = op;
    6054:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6058:	f000 fc7a 	bl	6950 <bt_gatt_foreach_attr>
	if (data.err) {
    605c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6060:	b98c      	cbnz	r4, 6086 <att_write_rsp.part.12.constprop.17+0x72>
	if (data.buf) {
    6062:	9a01      	ldr	r2, [sp, #4]
    6064:	b1b2      	cbz	r2, 6094 <att_write_rsp.part.12.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6066:	4b15      	ldr	r3, [pc, #84]	; (60bc <att_write_rsp.part.12.constprop.17+0xa8>)
    6068:	2104      	movs	r1, #4
    606a:	4628      	mov	r0, r5
    606c:	f7fe fe5e 	bl	4d2c <bt_l2cap_send_cb>
    6070:	e011      	b.n	6096 <att_write_rsp.part.12.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6072:	2200      	movs	r2, #0
    6074:	4641      	mov	r1, r8
    6076:	4628      	mov	r0, r5
    6078:	f7ff fc42 	bl	5900 <bt_att_create_pdu>
    607c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    607e:	2800      	cmp	r0, #0
    6080:	d1d7      	bne.n	6032 <att_write_rsp.part.12.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6082:	240e      	movs	r4, #14
    6084:	e007      	b.n	6096 <att_write_rsp.part.12.constprop.17+0x82>
		if (rsp) {
    6086:	f1b8 0f00 	cmp.w	r8, #0
    608a:	d00f      	beq.n	60ac <att_write_rsp.part.12.constprop.17+0x98>
			net_buf_unref(data.buf);
    608c:	9801      	ldr	r0, [sp, #4]
    608e:	f00c fc6f 	bl	12970 <net_buf_unref>
	if (!req) {
    6092:	b926      	cbnz	r6, 609e <att_write_rsp.part.12.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6094:	2400      	movs	r4, #0
}
    6096:	4620      	mov	r0, r4
    6098:	b006      	add	sp, #24
    609a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    609e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    60a2:	463a      	mov	r2, r7
    60a4:	4631      	mov	r1, r6
    60a6:	4628      	mov	r0, r5
    60a8:	f7ff fc9e 	bl	59e8 <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    60ac:	2e18      	cmp	r6, #24
    60ae:	d1f1      	bne.n	6094 <att_write_rsp.part.12.constprop.17+0x80>
    60b0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    60b4:	e7ef      	b.n	6096 <att_write_rsp.part.12.constprop.17+0x82>
    60b6:	bf00      	nop
    60b8:	00005599 	.word	0x00005599
    60bc:	000054bd 	.word	0x000054bd

000060c0 <att_signed_write_cmd>:
{
    60c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    60c4:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    60c6:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    60c8:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    60cc:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    60ce:	4620      	mov	r0, r4
    60d0:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    60d2:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    60d6:	f00c fc94 	bl	12a02 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    60da:	4629      	mov	r1, r5
    60dc:	4630      	mov	r0, r6
    60de:	f000 fd76 	bl	6bce <bt_smp_sign_verify>
	if (err) {
    60e2:	4607      	mov	r7, r0
    60e4:	b160      	cbz	r0, 6100 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    60e6:	4b13      	ldr	r3, [pc, #76]	; (6134 <att_signed_write_cmd+0x74>)
    60e8:	9301      	str	r3, [sp, #4]
    60ea:	9300      	str	r3, [sp, #0]
    60ec:	4a12      	ldr	r2, [pc, #72]	; (6138 <att_signed_write_cmd+0x78>)
    60ee:	4b13      	ldr	r3, [pc, #76]	; (613c <att_signed_write_cmd+0x7c>)
    60f0:	4913      	ldr	r1, [pc, #76]	; (6140 <att_signed_write_cmd+0x80>)
    60f2:	4814      	ldr	r0, [pc, #80]	; (6144 <att_signed_write_cmd+0x84>)
    60f4:	f7fa ff4a 	bl	f8c <printk>
    60f8:	2000      	movs	r0, #0
}
    60fa:	b002      	add	sp, #8
    60fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    6100:	2101      	movs	r1, #1
    6102:	4620      	mov	r0, r4
    6104:	f00c fc85 	bl	12a12 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6108:	2102      	movs	r1, #2
    610a:	4620      	mov	r0, r4
    610c:	f00c fc81 	bl	12a12 <net_buf_simple_pull>
	if (!handle) {
    6110:	f1b8 0f00 	cmp.w	r8, #0
    6114:	d00c      	beq.n	6130 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6116:	7b2b      	ldrb	r3, [r5, #12]
    6118:	3b0c      	subs	r3, #12
    611a:	b2db      	uxtb	r3, r3
    611c:	9301      	str	r3, [sp, #4]
    611e:	68ab      	ldr	r3, [r5, #8]
    6120:	9300      	str	r3, [sp, #0]
    6122:	463a      	mov	r2, r7
    6124:	4643      	mov	r3, r8
    6126:	4639      	mov	r1, r7
    6128:	4630      	mov	r0, r6
    612a:	f7ff ff73 	bl	6014 <att_write_rsp.part.12.constprop.17>
    612e:	e7e4      	b.n	60fa <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    6130:	2001      	movs	r0, #1
    6132:	e7e2      	b.n	60fa <att_signed_write_cmd+0x3a>
    6134:	000145f1 	.word	0x000145f1
    6138:	00015373 	.word	0x00015373
    613c:	00015e28 	.word	0x00015e28
    6140:	000153c2 	.word	0x000153c2
    6144:	00015f43 	.word	0x00015f43

00006148 <att_write_cmd>:
{
    6148:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    614a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    614c:	f101 0008 	add.w	r0, r1, #8
{
    6150:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6152:	f00c fc6e 	bl	12a32 <net_buf_simple_pull_le16>
	if (!handle) {
    6156:	4603      	mov	r3, r0
    6158:	b150      	cbz	r0, 6170 <att_write_cmd+0x28>
    615a:	7b22      	ldrb	r2, [r4, #12]
    615c:	9201      	str	r2, [sp, #4]
    615e:	68a2      	ldr	r2, [r4, #8]
    6160:	9200      	str	r2, [sp, #0]
    6162:	2200      	movs	r2, #0
    6164:	4611      	mov	r1, r2
    6166:	4628      	mov	r0, r5
    6168:	f7ff ff54 	bl	6014 <att_write_rsp.part.12.constprop.17>
}
    616c:	b003      	add	sp, #12
    616e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6170:	2001      	movs	r0, #1
    6172:	e7fb      	b.n	616c <att_write_cmd+0x24>

00006174 <att_write_req>:
{
    6174:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6176:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6178:	f101 0008 	add.w	r0, r1, #8
{
    617c:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    617e:	f00c fc58 	bl	12a32 <net_buf_simple_pull_le16>
	if (!handle) {
    6182:	4603      	mov	r3, r0
    6184:	b150      	cbz	r0, 619c <att_write_req+0x28>
    6186:	7b22      	ldrb	r2, [r4, #12]
    6188:	9201      	str	r2, [sp, #4]
    618a:	68a2      	ldr	r2, [r4, #8]
    618c:	9200      	str	r2, [sp, #0]
    618e:	2112      	movs	r1, #18
    6190:	2213      	movs	r2, #19
    6192:	4628      	mov	r0, r5
    6194:	f7ff ff3e 	bl	6014 <att_write_rsp.part.12.constprop.17>
}
    6198:	b003      	add	sp, #12
    619a:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    619c:	2001      	movs	r0, #1
    619e:	e7fb      	b.n	6198 <att_write_req+0x24>

000061a0 <bt_att_init>:

void bt_att_init(void)
{
    61a0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    61a2:	4803      	ldr	r0, [pc, #12]	; (61b0 <bt_att_init+0x10>)
    61a4:	f7fe fd04 	bl	4bb0 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    61a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    61ac:	f000 bbba 	b.w	6924 <bt_gatt_init>
    61b0:	20003bb8 	.word	0x20003bb8

000061b4 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    61b4:	b510      	push	{r4, lr}
    61b6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    61b8:	b1d8      	cbz	r0, 61f2 <bt_att_req_send+0x3e>
    61ba:	b1d1      	cbz	r1, 61f2 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    61bc:	f7ff f9ac 	bl	5518 <att_chan_get>
	if (!att) {
    61c0:	4603      	mov	r3, r0
    61c2:	b1c8      	cbz	r0, 61f8 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    61c4:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    61c8:	b172      	cbz	r2, 61e8 <bt_att_req_send+0x34>
	parent->next = child;
    61ca:	2000      	movs	r0, #0
    61cc:	6020      	str	r0, [r4, #0]
    61ce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    61d2:	b92a      	cbnz	r2, 61e0 <bt_att_req_send+0x2c>
	list->tail = node;
    61d4:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    61d8:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    61dc:	4610      	mov	r0, r2
    61de:	bd10      	pop	{r4, pc}
	parent->next = child;
    61e0:	6014      	str	r4, [r2, #0]
	list->tail = node;
    61e2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    61e6:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    61e8:	4621      	mov	r1, r4
}
    61ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    61ee:	f7ff b9ff 	b.w	55f0 <att_send_req>
		return -EINVAL;
    61f2:	f06f 0015 	mvn.w	r0, #21
    61f6:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    61f8:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    61fc:	bd10      	pop	{r4, pc}

000061fe <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    61fe:	4770      	bx	lr

00006200 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6200:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6202:	2000      	movs	r0, #0
    6204:	4770      	bx	lr

00006206 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6206:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6208:	2300      	movs	r3, #0
    620a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    620c:	461a      	mov	r2, r3
    620e:	42aa      	cmp	r2, r5
    6210:	d107      	bne.n	6222 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6212:	890a      	ldrh	r2, [r1, #8]
    6214:	429a      	cmp	r2, r3
    6216:	d00d      	beq.n	6234 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6218:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    621a:	68ca      	ldr	r2, [r1, #12]
	}
}
    621c:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    621e:	4619      	mov	r1, r3
    6220:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    6222:	680c      	ldr	r4, [r1, #0]
    6224:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6228:	3201      	adds	r2, #1
    622a:	8924      	ldrh	r4, [r4, #8]
    622c:	42a3      	cmp	r3, r4
    622e:	bf38      	it	cc
    6230:	4623      	movcc	r3, r4
    6232:	e7ec      	b.n	620e <gatt_ccc_changed+0x8>
}
    6234:	bc30      	pop	{r4, r5}
    6236:	4770      	bx	lr

00006238 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6238:	b410      	push	{r4}
    623a:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    623c:	699c      	ldr	r4, [r3, #24]
    623e:	460a      	mov	r2, r1
    6240:	6959      	ldr	r1, [r3, #20]
    6242:	4623      	mov	r3, r4
}
    6244:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6246:	4718      	bx	r3

00006248 <gatt_register>:
{
    6248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    624a:	4a1e      	ldr	r2, [pc, #120]	; (62c4 <gatt_register+0x7c>)
    624c:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    624e:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    6252:	b14b      	cbz	r3, 6268 <gatt_register+0x20>
    6254:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6256:	2b00      	cmp	r3, #0
    6258:	d032      	beq.n	62c0 <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    625a:	e913 0018 	ldmdb	r3, {r3, r4}
    625e:	2614      	movs	r6, #20
    6260:	fb06 3304 	mla	r3, r6, r4, r3
    6264:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6268:	b2ad      	uxth	r5, r5
    626a:	2414      	movs	r4, #20
    626c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    6270:	b109      	cbz	r1, 6276 <gatt_register+0x2e>
    6272:	42a9      	cmp	r1, r5
    6274:	d108      	bne.n	6288 <gatt_register+0x40>
	parent->next = child;
    6276:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    6278:	f100 0108 	add.w	r1, r0, #8
    627c:	6083      	str	r3, [r0, #8]
    627e:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    6280:	b9d0      	cbnz	r0, 62b8 <gatt_register+0x70>
	list->tail = node;
    6282:	6051      	str	r1, [r2, #4]
	list->head = node;
    6284:	6011      	str	r1, [r2, #0]
    6286:	e015      	b.n	62b4 <gatt_register+0x6c>
		if (!attrs->handle) {
    6288:	8a0c      	ldrh	r4, [r1, #16]
    628a:	b92c      	cbnz	r4, 6298 <gatt_register+0x50>
			attrs->handle = ++handle;
    628c:	3301      	adds	r3, #1
    628e:	b29c      	uxth	r4, r3
    6290:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    6292:	3114      	adds	r1, #20
    6294:	4623      	mov	r3, r4
    6296:	e7eb      	b.n	6270 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6298:	42a3      	cmp	r3, r4
    629a:	d3fa      	bcc.n	6292 <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    629c:	4b0a      	ldr	r3, [pc, #40]	; (62c8 <gatt_register+0x80>)
    629e:	9302      	str	r3, [sp, #8]
    62a0:	e88d 0018 	stmia.w	sp, {r3, r4}
    62a4:	4a09      	ldr	r2, [pc, #36]	; (62cc <gatt_register+0x84>)
    62a6:	4b0a      	ldr	r3, [pc, #40]	; (62d0 <gatt_register+0x88>)
    62a8:	490a      	ldr	r1, [pc, #40]	; (62d4 <gatt_register+0x8c>)
    62aa:	480b      	ldr	r0, [pc, #44]	; (62d8 <gatt_register+0x90>)
    62ac:	f7fa fe6e 	bl	f8c <printk>
			return -EINVAL;
    62b0:	f06f 0015 	mvn.w	r0, #21
}
    62b4:	b004      	add	sp, #16
    62b6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    62b8:	6001      	str	r1, [r0, #0]
	list->tail = node;
    62ba:	6051      	str	r1, [r2, #4]
	return 0;
    62bc:	4618      	mov	r0, r3
    62be:	e7f9      	b.n	62b4 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    62c0:	681b      	ldr	r3, [r3, #0]
    62c2:	deff      	udf	#255	; 0xff
    62c4:	20000584 	.word	0x20000584
    62c8:	000145f1 	.word	0x000145f1
    62cc:	00015373 	.word	0x00015373
    62d0:	000161a4 	.word	0x000161a4
    62d4:	000153c2 	.word	0x000153c2
    62d8:	000162fe 	.word	0x000162fe

000062dc <gatt_notify>:
{
    62dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    62e0:	468a      	mov	sl, r1
    62e2:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    62e4:	211b      	movs	r1, #27
    62e6:	1c9a      	adds	r2, r3, #2
{
    62e8:	4680      	mov	r8, r0
    62ea:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    62ec:	f7ff fb08 	bl	5900 <bt_att_create_pdu>
	if (!buf) {
    62f0:	4604      	mov	r4, r0
    62f2:	b968      	cbnz	r0, 6310 <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    62f4:	4b13      	ldr	r3, [pc, #76]	; (6344 <gatt_notify+0x68>)
    62f6:	9301      	str	r3, [sp, #4]
    62f8:	9300      	str	r3, [sp, #0]
    62fa:	4a13      	ldr	r2, [pc, #76]	; (6348 <gatt_notify+0x6c>)
    62fc:	4b13      	ldr	r3, [pc, #76]	; (634c <gatt_notify+0x70>)
    62fe:	4914      	ldr	r1, [pc, #80]	; (6350 <gatt_notify+0x74>)
    6300:	4814      	ldr	r0, [pc, #80]	; (6354 <gatt_notify+0x78>)
    6302:	f7fa fe43 	bl	f8c <printk>
    6306:	f06f 000b 	mvn.w	r0, #11
}
    630a:	b002      	add	sp, #8
    630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    6310:	f100 0708 	add.w	r7, r0, #8
    6314:	2102      	movs	r1, #2
    6316:	4638      	mov	r0, r7
    6318:	f00c fb5c 	bl	129d4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    631c:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    631e:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6320:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6324:	4638      	mov	r0, r7
    6326:	f00c fb55 	bl	129d4 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    632a:	4632      	mov	r2, r6
    632c:	4649      	mov	r1, r9
    632e:	4628      	mov	r0, r5
    6330:	f7fb fc64 	bl	1bfc <memcpy>
    6334:	4640      	mov	r0, r8
    6336:	2300      	movs	r3, #0
    6338:	4622      	mov	r2, r4
    633a:	2104      	movs	r1, #4
    633c:	f7fe fcf6 	bl	4d2c <bt_l2cap_send_cb>
	return 0;
    6340:	2000      	movs	r0, #0
    6342:	e7e2      	b.n	630a <gatt_notify+0x2e>
    6344:	000145f1 	.word	0x000145f1
    6348:	000153bb 	.word	0x000153bb
    634c:	000161e0 	.word	0x000161e0
    6350:	000153c2 	.word	0x000153c2
    6354:	000162c5 	.word	0x000162c5

00006358 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    6358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    635c:	694b      	ldr	r3, [r1, #20]
{
    635e:	b087      	sub	sp, #28
    6360:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    6362:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6364:	6818      	ldr	r0, [r3, #0]
    6366:	2300      	movs	r3, #0
{
    6368:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    636a:	f88d 3014 	strb.w	r3, [sp, #20]
    636e:	a905      	add	r1, sp, #20
    6370:	f642 0303 	movw	r3, #10243	; 0x2803
    6374:	f8ad 3016 	strh.w	r3, [sp, #22]
    6378:	f7fb fdbe 	bl	1ef8 <bt_uuid_cmp>
    637c:	b930      	cbnz	r0, 638c <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    637e:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6380:	68db      	ldr	r3, [r3, #12]
    6382:	791b      	ldrb	r3, [r3, #4]
    6384:	069b      	lsls	r3, r3, #26
    6386:	d544      	bpl.n	6412 <gatt_indicate+0xba>
			return -EINVAL;
		}

		value_handle += 1;
    6388:	3501      	adds	r5, #1
    638a:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    638c:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    638e:	211d      	movs	r1, #29
    6390:	3202      	adds	r2, #2
    6392:	4648      	mov	r0, r9
    6394:	f7ff fab4 	bl	5900 <bt_att_create_pdu>
	if (!buf) {
    6398:	4606      	mov	r6, r0
    639a:	b970      	cbnz	r0, 63ba <gatt_indicate+0x62>
		BT_WARN("No buffer available to send indication");
    639c:	4b1e      	ldr	r3, [pc, #120]	; (6418 <gatt_indicate+0xc0>)
    639e:	9301      	str	r3, [sp, #4]
    63a0:	9300      	str	r3, [sp, #0]
    63a2:	4a1e      	ldr	r2, [pc, #120]	; (641c <gatt_indicate+0xc4>)
    63a4:	4b1e      	ldr	r3, [pc, #120]	; (6420 <gatt_indicate+0xc8>)
    63a6:	491f      	ldr	r1, [pc, #124]	; (6424 <gatt_indicate+0xcc>)
    63a8:	481f      	ldr	r0, [pc, #124]	; (6428 <gatt_indicate+0xd0>)
    63aa:	f7fa fdef 	bl	f8c <printk>
		return -ENOMEM;
    63ae:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    63b2:	4620      	mov	r0, r4
    63b4:	b007      	add	sp, #28
    63b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    63ba:	f100 0708 	add.w	r7, r0, #8
    63be:	2102      	movs	r1, #2
    63c0:	4638      	mov	r0, r7
    63c2:	f00c fb07 	bl	129d4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    63c6:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    63c8:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    63ca:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    63ce:	4638      	mov	r0, r7
    63d0:	f00c fb00 	bl	129d4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    63d4:	8c22      	ldrh	r2, [r4, #32]
    63d6:	69e1      	ldr	r1, [r4, #28]
    63d8:	4640      	mov	r0, r8
    63da:	f7fb fc0f 	bl	1bfc <memcpy>
		req->func = func;
    63de:	4b13      	ldr	r3, [pc, #76]	; (642c <gatt_indicate+0xd4>)
    63e0:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    63e2:	2300      	movs	r3, #0
		req->buf = buf;
    63e4:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    63e6:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    63e8:	4621      	mov	r1, r4
    63ea:	4648      	mov	r0, r9
    63ec:	f7ff fee2 	bl	61b4 <bt_att_req_send>
	if (err) {
    63f0:	4604      	mov	r4, r0
    63f2:	2800      	cmp	r0, #0
    63f4:	d0dd      	beq.n	63b2 <gatt_indicate+0x5a>
		BT_ERR("Error sending ATT PDU: %d", err);
    63f6:	4b08      	ldr	r3, [pc, #32]	; (6418 <gatt_indicate+0xc0>)
    63f8:	9302      	str	r3, [sp, #8]
    63fa:	e88d 0018 	stmia.w	sp, {r3, r4}
    63fe:	4a0c      	ldr	r2, [pc, #48]	; (6430 <gatt_indicate+0xd8>)
    6400:	4b0c      	ldr	r3, [pc, #48]	; (6434 <gatt_indicate+0xdc>)
    6402:	4908      	ldr	r1, [pc, #32]	; (6424 <gatt_indicate+0xcc>)
    6404:	480c      	ldr	r0, [pc, #48]	; (6438 <gatt_indicate+0xe0>)
    6406:	f7fa fdc1 	bl	f8c <printk>
		net_buf_unref(buf);
    640a:	4630      	mov	r0, r6
    640c:	f00c fab0 	bl	12970 <net_buf_unref>
    6410:	e7cf      	b.n	63b2 <gatt_indicate+0x5a>
			return -EINVAL;
    6412:	f06f 0415 	mvn.w	r4, #21
    6416:	e7cc      	b.n	63b2 <gatt_indicate+0x5a>
    6418:	000145f1 	.word	0x000145f1
    641c:	000153bb 	.word	0x000153bb
    6420:	000161f6 	.word	0x000161f6
    6424:	000153c2 	.word	0x000153c2
    6428:	00016264 	.word	0x00016264
    642c:	00006239 	.word	0x00006239
    6430:	00015373 	.word	0x00015373
    6434:	000161ec 	.word	0x000161ec
    6438:	0001629b 	.word	0x0001629b

0000643c <sc_indicate.constprop.15>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    643c:	b510      	push	{r4, lr}
    643e:	4b17      	ldr	r3, [pc, #92]	; (649c <sc_indicate.constprop.15+0x60>)
    6440:	f3bf 8f5b 	dmb	ish
    6444:	f103 0250 	add.w	r2, r3, #80	; 0x50
    6448:	e852 4f00 	ldrex	r4, [r2]
    644c:	f044 0e01 	orr.w	lr, r4, #1
    6450:	e842 ec00 	strex	ip, lr, [r2]
    6454:	f1bc 0f00 	cmp.w	ip, #0
    6458:	d1f6      	bne.n	6448 <sc_indicate.constprop.15+0xc>
    645a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    645e:	07e2      	lsls	r2, r4, #31
    6460:	d402      	bmi.n	6468 <sc_indicate.constprop.15+0x2c>
		sc->start = start;
    6462:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    6464:	84d9      	strh	r1, [r3, #38]	; 0x26
    6466:	e00a      	b.n	647e <sc_indicate.constprop.15+0x42>
	if (new_start >= *start && new_end <= *end) {
    6468:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    646a:	4282      	cmp	r2, r0
    646c:	d803      	bhi.n	6476 <sc_indicate.constprop.15+0x3a>
    646e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6470:	428a      	cmp	r2, r1
    6472:	d301      	bcc.n	6478 <sc_indicate.constprop.15+0x3c>
    6474:	bd10      	pop	{r4, pc}
		*start = new_start;
    6476:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    6478:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    647a:	428a      	cmp	r2, r1
    647c:	d3f2      	bcc.n	6464 <sc_indicate.constprop.15+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    647e:	f3bf 8f5b 	dmb	ish
    6482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6484:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    6488:	079b      	lsls	r3, r3, #30
    648a:	d406      	bmi.n	649a <sc_indicate.constprop.15+0x5e>
    648c:	220a      	movs	r2, #10
    648e:	4904      	ldr	r1, [pc, #16]	; (64a0 <sc_indicate.constprop.15+0x64>)
    6490:	4804      	ldr	r0, [pc, #16]	; (64a4 <sc_indicate.constprop.15+0x68>)
}
    6492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6496:	f00d be4f 	b.w	14138 <k_delayed_work_submit_to_queue>
    649a:	bd10      	pop	{r4, pc}
    649c:	2000058c 	.word	0x2000058c
    64a0:	200005b4 	.word	0x200005b4
    64a4:	20001988 	.word	0x20001988

000064a8 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    64a8:	6882      	ldr	r2, [r0, #8]
    64aa:	4b19      	ldr	r3, [pc, #100]	; (6510 <connected_cb+0x68>)
    64ac:	429a      	cmp	r2, r3
{
    64ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64b2:	4607      	mov	r7, r0
    64b4:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    64b6:	d125      	bne.n	6504 <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    64b8:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    64ba:	2600      	movs	r6, #0
    64bc:	686b      	ldr	r3, [r5, #4]
    64be:	429e      	cmp	r6, r3
    64c0:	d220      	bcs.n	6504 <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    64c2:	6829      	ldr	r1, [r5, #0]
    64c4:	ea4f 1806 	mov.w	r8, r6, lsl #4
    64c8:	4441      	add	r1, r8
    64ca:	4620      	mov	r0, r4
    64cc:	f7fd fe1c 	bl	4108 <bt_conn_addr_le_cmp>
    64d0:	b9d8      	cbnz	r0, 650a <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    64d2:	682b      	ldr	r3, [r5, #0]
    64d4:	4443      	add	r3, r8
    64d6:	891b      	ldrh	r3, [r3, #8]
    64d8:	b1bb      	cbz	r3, 650a <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    64da:	4629      	mov	r1, r5
    64dc:	4638      	mov	r0, r7
    64de:	f7ff fe92 	bl	6206 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    64e2:	682c      	ldr	r4, [r5, #0]
    64e4:	4b0b      	ldr	r3, [pc, #44]	; (6514 <connected_cb+0x6c>)
    64e6:	429c      	cmp	r4, r3
    64e8:	d10c      	bne.n	6504 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    64ea:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    64ec:	89a0      	ldrh	r0, [r4, #12]
    64ee:	89e1      	ldrh	r1, [r4, #14]
    64f0:	b900      	cbnz	r0, 64f4 <connected_cb+0x4c>
    64f2:	b139      	cbz	r1, 6504 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    64f4:	f7ff ffa2 	bl	643c <sc_indicate.constprop.15>
	memset(cfg->data, 0, sizeof(cfg->data));
    64f8:	2204      	movs	r2, #4
    64fa:	2100      	movs	r1, #0
    64fc:	f104 000c 	add.w	r0, r4, #12
    6500:	f7fb fba8 	bl	1c54 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    6504:	2001      	movs	r0, #1
    6506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    650a:	3601      	adds	r6, #1
    650c:	e7d6      	b.n	64bc <connected_cb+0x14>
    650e:	bf00      	nop
    6510:	00006735 	.word	0x00006735
    6514:	200005e0 	.word	0x200005e0

00006518 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6518:	490d      	ldr	r1, [pc, #52]	; (6550 <sc_indicate_rsp+0x38>)
    651a:	f3bf 8f5b 	dmb	ish
    651e:	f101 0350 	add.w	r3, r1, #80	; 0x50
    6522:	e853 2f00 	ldrex	r2, [r3]
    6526:	f022 0202 	bic.w	r2, r2, #2
    652a:	e843 2000 	strex	r0, r2, [r3]
    652e:	2800      	cmp	r0, #0
    6530:	d1f7      	bne.n	6522 <sc_indicate_rsp+0xa>
    6532:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6536:	f3bf 8f5b 	dmb	ish
    653a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    653c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    6540:	07db      	lsls	r3, r3, #31
    6542:	d504      	bpl.n	654e <sc_indicate_rsp+0x36>
    6544:	2200      	movs	r2, #0
    6546:	3128      	adds	r1, #40	; 0x28
    6548:	4802      	ldr	r0, [pc, #8]	; (6554 <sc_indicate_rsp+0x3c>)
    654a:	f00d bdf5 	b.w	14138 <k_delayed_work_submit_to_queue>
    654e:	4770      	bx	lr
    6550:	2000058c 	.word	0x2000058c
    6554:	20001988 	.word	0x20001988

00006558 <read_appearance>:
{
    6558:	b513      	push	{r0, r1, r4, lr}
    655a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    655e:	4610      	mov	r0, r2
	if (offset > value_len) {
    6560:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6562:	f04f 0200 	mov.w	r2, #0
    6566:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    656a:	d80d      	bhi.n	6588 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    656c:	f1c1 0402 	rsb	r4, r1, #2
    6570:	429c      	cmp	r4, r3
    6572:	bfa8      	it	ge
    6574:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6576:	f10d 0306 	add.w	r3, sp, #6
    657a:	4622      	mov	r2, r4
    657c:	4419      	add	r1, r3
    657e:	f7fb fb3d 	bl	1bfc <memcpy>
}
    6582:	4620      	mov	r0, r4
    6584:	b002      	add	sp, #8
    6586:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6588:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    658c:	e7f9      	b.n	6582 <read_appearance+0x2a>
	...

00006590 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6590:	6882      	ldr	r2, [r0, #8]
    6592:	4b27      	ldr	r3, [pc, #156]	; (6630 <disconnected_cb+0xa0>)
    6594:	429a      	cmp	r2, r3
{
    6596:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    659a:	4680      	mov	r8, r0
    659c:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    659e:	d127      	bne.n	65f0 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    65a0:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    65a2:	8923      	ldrh	r3, [r4, #8]
    65a4:	b323      	cbz	r3, 65f0 <disconnected_cb+0x60>
    65a6:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    65a8:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    65ac:	6863      	ldr	r3, [r4, #4]
    65ae:	429e      	cmp	r6, r3
    65b0:	d30b      	bcc.n	65ca <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    65b2:	2202      	movs	r2, #2
    65b4:	2100      	movs	r1, #0
    65b6:	f104 0008 	add.w	r0, r4, #8
    65ba:	f7fb fb4b 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    65be:	68e3      	ldr	r3, [r4, #12]
    65c0:	b1b3      	cbz	r3, 65f0 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    65c2:	8921      	ldrh	r1, [r4, #8]
    65c4:	4640      	mov	r0, r8
    65c6:	4798      	blx	r3
    65c8:	e012      	b.n	65f0 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    65ca:	6821      	ldr	r1, [r4, #0]
    65cc:	0135      	lsls	r5, r6, #4
    65ce:	4429      	add	r1, r5
    65d0:	890b      	ldrh	r3, [r1, #8]
    65d2:	b19b      	cbz	r3, 65fc <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    65d4:	4648      	mov	r0, r9
    65d6:	f7fd fd97 	bl	4108 <bt_conn_addr_le_cmp>
    65da:	b188      	cbz	r0, 6600 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    65dc:	6820      	ldr	r0, [r4, #0]
    65de:	4428      	add	r0, r5
    65e0:	f7fd fdf2 	bl	41c8 <bt_conn_lookup_addr_le>
			if (tmp) {
    65e4:	b150      	cbz	r0, 65fc <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    65e6:	7a43      	ldrb	r3, [r0, #9]
    65e8:	2b03      	cmp	r3, #3
    65ea:	d105      	bne.n	65f8 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    65ec:	f7fd fe22 	bl	4234 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    65f0:	2001      	movs	r0, #1
    65f2:	b002      	add	sp, #8
    65f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    65f8:	f7fd fe1c 	bl	4234 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    65fc:	3601      	adds	r6, #1
    65fe:	e7d5      	b.n	65ac <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6600:	4650      	mov	r0, sl
    6602:	f7fd fa1b 	bl	3a3c <bt_addr_le_is_bonded>
    6606:	4607      	mov	r7, r0
    6608:	6820      	ldr	r0, [r4, #0]
    660a:	b95f      	cbnz	r7, 6624 <disconnected_cb+0x94>
    660c:	4428      	add	r0, r5
    660e:	2207      	movs	r2, #7
    6610:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    6612:	9700      	str	r7, [sp, #0]
    6614:	f8cd 7003 	str.w	r7, [sp, #3]
    6618:	f7fb faf0 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    661c:	6823      	ldr	r3, [r4, #0]
    661e:	441d      	add	r5, r3
    6620:	812f      	strh	r7, [r5, #8]
    6622:	e7eb      	b.n	65fc <disconnected_cb+0x6c>
    6624:	2207      	movs	r2, #7
    6626:	4651      	mov	r1, sl
    6628:	4428      	add	r0, r5
    662a:	f7fb fae7 	bl	1bfc <memcpy>
    662e:	e7e5      	b.n	65fc <disconnected_cb+0x6c>
    6630:	00006735 	.word	0x00006735

00006634 <read_name>:
{
    6634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    6638:	4e0d      	ldr	r6, [pc, #52]	; (6670 <read_name+0x3c>)
{
    663a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    663e:	4630      	mov	r0, r6
{
    6640:	4698      	mov	r8, r3
    6642:	4617      	mov	r7, r2
				 strlen(gap_name));
    6644:	f7fb fab0 	bl	1ba8 <strlen>
	if (offset > value_len) {
    6648:	b283      	uxth	r3, r0
    664a:	42ab      	cmp	r3, r5
    664c:	d30d      	bcc.n	666a <read_name+0x36>
	len = min(buf_len, value_len - offset);
    664e:	1b5c      	subs	r4, r3, r5
    6650:	4544      	cmp	r4, r8
    6652:	4623      	mov	r3, r4
    6654:	bfa8      	it	ge
    6656:	4643      	movge	r3, r8
    6658:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    665a:	4622      	mov	r2, r4
    665c:	1971      	adds	r1, r6, r5
    665e:	4638      	mov	r0, r7
    6660:	f7fb facc 	bl	1bfc <memcpy>
}
    6664:	4620      	mov	r0, r4
    6666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    666a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    666e:	e7f9      	b.n	6664 <read_name+0x30>
    6670:	0001632f 	.word	0x0001632f

00006674 <bt_gatt_attr_read_ccc>:
{
    6674:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6678:	68ce      	ldr	r6, [r1, #12]
{
    667a:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    667e:	4604      	mov	r4, r0
    6680:	4690      	mov	r8, r2
    6682:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    6684:	2500      	movs	r5, #0
    6686:	6873      	ldr	r3, [r6, #4]
    6688:	429d      	cmp	r5, r3
    668a:	d20e      	bcs.n	66aa <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    668c:	6831      	ldr	r1, [r6, #0]
    668e:	ea4f 1905 	mov.w	r9, r5, lsl #4
    6692:	4449      	add	r1, r9
    6694:	4620      	mov	r0, r4
    6696:	f7fd fd37 	bl	4108 <bt_conn_addr_le_cmp>
    669a:	b108      	cbz	r0, 66a0 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    669c:	3501      	adds	r5, #1
    669e:	e7f2      	b.n	6686 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    66a0:	6832      	ldr	r2, [r6, #0]
    66a2:	444a      	add	r2, r9
    66a4:	8913      	ldrh	r3, [r2, #8]
    66a6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    66aa:	6873      	ldr	r3, [r6, #4]
    66ac:	429d      	cmp	r5, r3
		value = 0x0000;
    66ae:	bf04      	itt	eq
    66b0:	2300      	moveq	r3, #0
    66b2:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    66b6:	2f02      	cmp	r7, #2
    66b8:	d80f      	bhi.n	66da <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    66ba:	f1c7 0402 	rsb	r4, r7, #2
    66be:	4554      	cmp	r4, sl
    66c0:	bfa8      	it	ge
    66c2:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    66c4:	f10d 0306 	add.w	r3, sp, #6
    66c8:	4622      	mov	r2, r4
    66ca:	19d9      	adds	r1, r3, r7
    66cc:	4640      	mov	r0, r8
    66ce:	f7fb fa95 	bl	1bfc <memcpy>
}
    66d2:	4620      	mov	r0, r4
    66d4:	b002      	add	sp, #8
    66d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    66da:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    66de:	e7f8      	b.n	66d2 <bt_gatt_attr_read_ccc+0x5e>

000066e0 <bt_gatt_attr_read_service>:
{
    66e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    66e2:	68c9      	ldr	r1, [r1, #12]
{
    66e4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    66e8:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    66ea:	780a      	ldrb	r2, [r1, #0]
    66ec:	b992      	cbnz	r2, 6714 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    66ee:	884a      	ldrh	r2, [r1, #2]
    66f0:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    66f4:	2d02      	cmp	r5, #2
    66f6:	d819      	bhi.n	672c <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    66f8:	f1c5 0402 	rsb	r4, r5, #2
    66fc:	429c      	cmp	r4, r3
    66fe:	bfa8      	it	ge
    6700:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6702:	f10d 0306 	add.w	r3, sp, #6
    6706:	4622      	mov	r2, r4
    6708:	1959      	adds	r1, r3, r5
    670a:	f7fb fa77 	bl	1bfc <memcpy>
}
    670e:	4620      	mov	r0, r4
    6710:	b003      	add	sp, #12
    6712:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    6714:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    6716:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    671a:	d807      	bhi.n	672c <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    671c:	f1c5 0410 	rsb	r4, r5, #16
    6720:	429c      	cmp	r4, r3
    6722:	bfa8      	it	ge
    6724:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6726:	4622      	mov	r2, r4
    6728:	4429      	add	r1, r5
    672a:	e7ee      	b.n	670a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    672c:	f06f 0406 	mvn.w	r4, #6
    6730:	e7ed      	b.n	670e <bt_gatt_attr_read_service+0x2e>
	...

00006734 <bt_gatt_attr_write_ccc>:
{
    6734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6738:	b087      	sub	sp, #28
    673a:	4688      	mov	r8, r1
    673c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6740:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    6744:	2902      	cmp	r1, #2
{
    6746:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    6748:	d85f      	bhi.n	680a <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    674a:	4419      	add	r1, r3
    674c:	2902      	cmp	r1, #2
    674e:	461f      	mov	r7, r3
    6750:	dc5e      	bgt.n	6810 <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    6752:	7853      	ldrb	r3, [r2, #1]
    6754:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    6756:	2400      	movs	r4, #0
    6758:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    675c:	686b      	ldr	r3, [r5, #4]
    675e:	429c      	cmp	r4, r3
    6760:	d206      	bcs.n	6770 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6762:	6829      	ldr	r1, [r5, #0]
    6764:	4648      	mov	r0, r9
    6766:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    676a:	f7fd fccd 	bl	4108 <bt_conn_addr_le_cmp>
    676e:	b9b8      	cbnz	r0, 67a0 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    6770:	686b      	ldr	r3, [r5, #4]
    6772:	429c      	cmp	r4, r3
    6774:	d12f      	bne.n	67d6 <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    6776:	b356      	cbz	r6, 67ce <bt_gatt_attr_write_ccc+0x9a>
    6778:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    677a:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    677c:	686b      	ldr	r3, [r5, #4]
    677e:	429c      	cmp	r4, r3
    6780:	d217      	bcs.n	67b2 <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6782:	6828      	ldr	r0, [r5, #0]
    6784:	f8cd a008 	str.w	sl, [sp, #8]
    6788:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    678c:	2207      	movs	r2, #7
    678e:	a902      	add	r1, sp, #8
    6790:	4458      	add	r0, fp
    6792:	f8cd a00b 	str.w	sl, [sp, #11]
    6796:	f7fb fa1c 	bl	1bd2 <memcmp>
    679a:	b118      	cbz	r0, 67a4 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    679c:	3401      	adds	r4, #1
    679e:	e7ed      	b.n	677c <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    67a0:	3401      	adds	r4, #1
    67a2:	e7db      	b.n	675c <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    67a4:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    67a6:	2207      	movs	r2, #7
    67a8:	f109 0144 	add.w	r1, r9, #68	; 0x44
    67ac:	4458      	add	r0, fp
    67ae:	f7fb fa25 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    67b2:	686b      	ldr	r3, [r5, #4]
    67b4:	429c      	cmp	r4, r3
    67b6:	d10e      	bne.n	67d6 <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    67b8:	4b17      	ldr	r3, [pc, #92]	; (6818 <bt_gatt_attr_write_ccc+0xe4>)
    67ba:	9301      	str	r3, [sp, #4]
    67bc:	9300      	str	r3, [sp, #0]
    67be:	4a17      	ldr	r2, [pc, #92]	; (681c <bt_gatt_attr_write_ccc+0xe8>)
    67c0:	4b17      	ldr	r3, [pc, #92]	; (6820 <bt_gatt_attr_write_ccc+0xec>)
    67c2:	4918      	ldr	r1, [pc, #96]	; (6824 <bt_gatt_attr_write_ccc+0xf0>)
    67c4:	4818      	ldr	r0, [pc, #96]	; (6828 <bt_gatt_attr_write_ccc+0xf4>)
    67c6:	f7fa fbe1 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    67ca:	f06f 0710 	mvn.w	r7, #16
}
    67ce:	4638      	mov	r0, r7
    67d0:	b007      	add	sp, #28
    67d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    67d6:	682b      	ldr	r3, [r5, #0]
    67d8:	0124      	lsls	r4, r4, #4
    67da:	4423      	add	r3, r4
    67dc:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    67de:	892b      	ldrh	r3, [r5, #8]
    67e0:	42b3      	cmp	r3, r6
    67e2:	d003      	beq.n	67ec <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    67e4:	4629      	mov	r1, r5
    67e6:	4640      	mov	r0, r8
    67e8:	f7ff fd0d 	bl	6206 <gatt_ccc_changed>
	if (!value) {
    67ec:	2e00      	cmp	r6, #0
    67ee:	d1ee      	bne.n	67ce <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    67f0:	6828      	ldr	r0, [r5, #0]
    67f2:	9604      	str	r6, [sp, #16]
    67f4:	4420      	add	r0, r4
    67f6:	2207      	movs	r2, #7
    67f8:	a904      	add	r1, sp, #16
    67fa:	f8cd 6013 	str.w	r6, [sp, #19]
    67fe:	f7fb f9fd 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    6802:	682b      	ldr	r3, [r5, #0]
    6804:	441c      	add	r4, r3
    6806:	8126      	strh	r6, [r4, #8]
    6808:	e7e1      	b.n	67ce <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    680a:	f06f 0706 	mvn.w	r7, #6
    680e:	e7de      	b.n	67ce <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6810:	f06f 070c 	mvn.w	r7, #12
    6814:	e7db      	b.n	67ce <bt_gatt_attr_write_ccc+0x9a>
    6816:	bf00      	nop
    6818:	000145f1 	.word	0x000145f1
    681c:	000153bb 	.word	0x000153bb
    6820:	000161c9 	.word	0x000161c9
    6824:	000153c2 	.word	0x000153c2
    6828:	0001623a 	.word	0x0001623a

0000682c <notify_cb>:
{
    682c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6830:	f642 1302 	movw	r3, #10498	; 0x2902
{
    6834:	4605      	mov	r5, r0
    6836:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6838:	2400      	movs	r4, #0
    683a:	4669      	mov	r1, sp
    683c:	6800      	ldr	r0, [r0, #0]
    683e:	f88d 4000 	strb.w	r4, [sp]
    6842:	f8ad 3002 	strh.w	r3, [sp, #2]
    6846:	f7fb fb57 	bl	1ef8 <bt_uuid_cmp>
    684a:	b178      	cbz	r0, 686c <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    684c:	f642 0303 	movw	r3, #10243	; 0x2803
    6850:	6828      	ldr	r0, [r5, #0]
    6852:	f88d 4004 	strb.w	r4, [sp, #4]
    6856:	a901      	add	r1, sp, #4
    6858:	f8ad 3006 	strh.w	r3, [sp, #6]
    685c:	f7fb fb4c 	bl	1ef8 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    6860:	1b00      	subs	r0, r0, r4
    6862:	bf18      	it	ne
    6864:	2001      	movne	r0, #1
}
    6866:	b003      	add	sp, #12
    6868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    686c:	68aa      	ldr	r2, [r5, #8]
    686e:	4b2b      	ldr	r3, [pc, #172]	; (691c <notify_cb+0xf0>)
    6870:	429a      	cmp	r2, r3
    6872:	d001      	beq.n	6878 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    6874:	2001      	movs	r0, #1
    6876:	e7f6      	b.n	6866 <notify_cb+0x3a>
	ccc = attr->user_data;
    6878:	68ef      	ldr	r7, [r5, #12]
    687a:	4d29      	ldr	r5, [pc, #164]	; (6920 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    687c:	4604      	mov	r4, r0
    687e:	46a8      	mov	r8, r5
    6880:	4681      	mov	r9, r0
    6882:	687b      	ldr	r3, [r7, #4]
    6884:	429c      	cmp	r4, r3
    6886:	d2f5      	bcs.n	6874 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    6888:	6838      	ldr	r0, [r7, #0]
    688a:	88b3      	ldrh	r3, [r6, #4]
    688c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6890:	8902      	ldrh	r2, [r0, #8]
    6892:	429a      	cmp	r2, r3
    6894:	d114      	bne.n	68c0 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6896:	f7fd fc97 	bl	41c8 <bt_conn_lookup_addr_le>
		if (!conn) {
    689a:	4683      	mov	fp, r0
    689c:	b9f8      	cbnz	r0, 68de <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    689e:	683b      	ldr	r3, [r7, #0]
    68a0:	4543      	cmp	r3, r8
    68a2:	d10d      	bne.n	68c0 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    68a4:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    68a6:	a801      	add	r0, sp, #4
    68a8:	8c1a      	ldrh	r2, [r3, #32]
    68aa:	69d9      	ldr	r1, [r3, #28]
    68ac:	f7fb f9a6 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    68b0:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    68b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68b6:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    68b8:	b928      	cbnz	r0, 68c6 <notify_cb+0x9a>
    68ba:	b942      	cbnz	r2, 68ce <notify_cb+0xa2>
		*stored = data;
    68bc:	9801      	ldr	r0, [sp, #4]
    68be:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    68c0:	3401      	adds	r4, #1
    68c2:	3510      	adds	r5, #16
    68c4:	e7dd      	b.n	6882 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    68c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    68ca:	4281      	cmp	r1, r0
    68cc:	d305      	bcc.n	68da <notify_cb+0xae>
    68ce:	429a      	cmp	r2, r3
    68d0:	d2f6      	bcs.n	68c0 <notify_cb+0x94>
	if (*end < new_end) {
    68d2:	429a      	cmp	r2, r3
    68d4:	d2f4      	bcs.n	68c0 <notify_cb+0x94>
		*end = new_end;
    68d6:	81eb      	strh	r3, [r5, #14]
    68d8:	e7f2      	b.n	68c0 <notify_cb+0x94>
		*start = new_start;
    68da:	81a9      	strh	r1, [r5, #12]
    68dc:	e7f9      	b.n	68d2 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    68de:	7a43      	ldrb	r3, [r0, #9]
    68e0:	2b03      	cmp	r3, #3
    68e2:	d002      	beq.n	68ea <notify_cb+0xbe>
			bt_conn_unref(conn);
    68e4:	f7fd fca6 	bl	4234 <bt_conn_unref>
    68e8:	e7ea      	b.n	68c0 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    68ea:	88b3      	ldrh	r3, [r6, #4]
    68ec:	2b02      	cmp	r3, #2
    68ee:	d10c      	bne.n	690a <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    68f0:	6971      	ldr	r1, [r6, #20]
    68f2:	f7ff fd31 	bl	6358 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    68f6:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    68f8:	4658      	mov	r0, fp
    68fa:	f7fd fc9b 	bl	4234 <bt_conn_unref>
		if (err < 0) {
    68fe:	f1ba 0f00 	cmp.w	sl, #0
    6902:	db09      	blt.n	6918 <notify_cb+0xec>
		data->err = 0;
    6904:	f8c6 9000 	str.w	r9, [r6]
    6908:	e7da      	b.n	68c0 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    690a:	68b1      	ldr	r1, [r6, #8]
    690c:	8a33      	ldrh	r3, [r6, #16]
    690e:	68f2      	ldr	r2, [r6, #12]
    6910:	8a09      	ldrh	r1, [r1, #16]
    6912:	f7ff fce3 	bl	62dc <gatt_notify>
    6916:	e7ee      	b.n	68f6 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6918:	2000      	movs	r0, #0
    691a:	e7a4      	b.n	6866 <notify_cb+0x3a>
    691c:	00006735 	.word	0x00006735
    6920:	200005e0 	.word	0x200005e0

00006924 <bt_gatt_init>:
{
    6924:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    6926:	4806      	ldr	r0, [pc, #24]	; (6940 <bt_gatt_init+0x1c>)
    6928:	f7ff fc8e 	bl	6248 <gatt_register>
	gatt_register(&gatt_svc);
    692c:	4805      	ldr	r0, [pc, #20]	; (6944 <bt_gatt_init+0x20>)
    692e:	f7ff fc8b 	bl	6248 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6932:	4905      	ldr	r1, [pc, #20]	; (6948 <bt_gatt_init+0x24>)
    6934:	4805      	ldr	r0, [pc, #20]	; (694c <bt_gatt_init+0x28>)
}
    6936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    693a:	f00d bb89 	b.w	14050 <k_delayed_work_init>
    693e:	bf00      	nop
    6940:	20003c9c 	.word	0x20003c9c
    6944:	20003cf8 	.word	0x20003cf8
    6948:	000069d1 	.word	0x000069d1
    694c:	200005b4 	.word	0x200005b4

00006950 <bt_gatt_foreach_attr>:
{
    6950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6954:	4699      	mov	r9, r3
    6956:	4b12      	ldr	r3, [pc, #72]	; (69a0 <bt_gatt_foreach_attr+0x50>)
    6958:	681c      	ldr	r4, [r3, #0]
    695a:	4606      	mov	r6, r0
    695c:	460f      	mov	r7, r1
    695e:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6960:	b1dc      	cbz	r4, 699a <bt_gatt_foreach_attr+0x4a>
    6962:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6964:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6968:	b1bc      	cbz	r4, 699a <bt_gatt_foreach_attr+0x4a>
    696a:	2500      	movs	r5, #0
    696c:	e006      	b.n	697c <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    696e:	6820      	ldr	r0, [r4, #0]
    6970:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    6974:	8a03      	ldrh	r3, [r0, #16]
    6976:	42b3      	cmp	r3, r6
    6978:	d207      	bcs.n	698a <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    697a:	3501      	adds	r5, #1
    697c:	6863      	ldr	r3, [r4, #4]
    697e:	42ab      	cmp	r3, r5
    6980:	d8f5      	bhi.n	696e <bt_gatt_foreach_attr+0x1e>
	return node->next;
    6982:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6984:	b14c      	cbz	r4, 699a <bt_gatt_foreach_attr+0x4a>
    6986:	3c08      	subs	r4, #8
    6988:	e7ee      	b.n	6968 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    698a:	42bb      	cmp	r3, r7
    698c:	d8f5      	bhi.n	697a <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    698e:	4649      	mov	r1, r9
    6990:	47c0      	blx	r8
    6992:	2800      	cmp	r0, #0
    6994:	d1f1      	bne.n	697a <bt_gatt_foreach_attr+0x2a>
    6996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    699a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    699e:	bf00      	nop
    69a0:	20000584 	.word	0x20000584

000069a4 <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    69a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    69a6:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    69aa:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    69ac:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    69ae:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    69b0:	2302      	movs	r3, #2
    69b2:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    69b6:	4a05      	ldr	r2, [pc, #20]	; (69cc <bt_gatt_indicate.part.10+0x28>)
    69b8:	8a00      	ldrh	r0, [r0, #16]
    69ba:	466b      	mov	r3, sp
    69bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    69c0:	f7ff ffc6 	bl	6950 <bt_gatt_foreach_attr>
}
    69c4:	9800      	ldr	r0, [sp, #0]
    69c6:	b007      	add	sp, #28
    69c8:	f85d fb04 	ldr.w	pc, [sp], #4
    69cc:	0000682d 	.word	0x0000682d

000069d0 <sc_process>:
{
    69d0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    69d2:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    69d6:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    69da:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    69dc:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    69e0:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    69e4:	3828      	subs	r0, #40	; 0x28
    69e6:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    69ea:	f3bf 8f5b 	dmb	ish
    69ee:	e854 2f00 	ldrex	r2, [r4]
    69f2:	f022 0201 	bic.w	r2, r2, #1
    69f6:	e844 2100 	strex	r1, r2, [r4]
    69fa:	2900      	cmp	r1, #0
    69fc:	d1f7      	bne.n	69ee <sc_process+0x1e>
    69fe:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    6a02:	2200      	movs	r2, #0
    6a04:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    6a08:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    6a0c:	4a0e      	ldr	r2, [pc, #56]	; (6a48 <sc_process+0x78>)
    6a0e:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    6a12:	4a0e      	ldr	r2, [pc, #56]	; (6a4c <sc_process+0x7c>)
    6a14:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    6a18:	aa01      	add	r2, sp, #4
    6a1a:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    6a1e:	2204      	movs	r2, #4
    6a20:	f823 2c08 	strh.w	r2, [r3, #-8]
    6a24:	f7ff ffbe 	bl	69a4 <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6a28:	b958      	cbnz	r0, 6a42 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6a2a:	f3bf 8f5b 	dmb	ish
    6a2e:	e854 3f00 	ldrex	r3, [r4]
    6a32:	f043 0302 	orr.w	r3, r3, #2
    6a36:	e844 3200 	strex	r2, r3, [r4]
    6a3a:	2a00      	cmp	r2, #0
    6a3c:	d1f7      	bne.n	6a2e <sc_process+0x5e>
    6a3e:	f3bf 8f5b 	dmb	ish
}
    6a42:	b002      	add	sp, #8
    6a44:	bd10      	pop	{r4, pc}
    6a46:	bf00      	nop
    6a48:	20003cd0 	.word	0x20003cd0
    6a4c:	00006519 	.word	0x00006519

00006a50 <bt_gatt_attr_next>:
{
    6a50:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6a52:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6a54:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6a56:	3101      	adds	r1, #1
    6a58:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6a5a:	2200      	movs	r2, #0
    6a5c:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6a60:	4608      	mov	r0, r1
    6a62:	4a03      	ldr	r2, [pc, #12]	; (6a70 <bt_gatt_attr_next+0x20>)
    6a64:	f7ff ff74 	bl	6950 <bt_gatt_foreach_attr>
}
    6a68:	9801      	ldr	r0, [sp, #4]
    6a6a:	b003      	add	sp, #12
    6a6c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a70:	00006201 	.word	0x00006201

00006a74 <bt_gatt_attr_read_chrc>:
{
    6a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6a78:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6a7c:	b08b      	sub	sp, #44	; 0x2c
    6a7e:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6a80:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6a82:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    6a86:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    6a8a:	f88d 3014 	strb.w	r3, [sp, #20]
{
    6a8e:	4688      	mov	r8, r1
    6a90:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6a92:	f7ff ffdd 	bl	6a50 <bt_gatt_attr_next>
	if (!next) {
    6a96:	4605      	mov	r5, r0
    6a98:	bb40      	cbnz	r0, 6aec <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6a9a:	4b1c      	ldr	r3, [pc, #112]	; (6b0c <bt_gatt_attr_read_chrc+0x98>)
    6a9c:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    6aa0:	9302      	str	r3, [sp, #8]
    6aa2:	9201      	str	r2, [sp, #4]
    6aa4:	9300      	str	r3, [sp, #0]
    6aa6:	4a1a      	ldr	r2, [pc, #104]	; (6b10 <bt_gatt_attr_read_chrc+0x9c>)
    6aa8:	4b1a      	ldr	r3, [pc, #104]	; (6b14 <bt_gatt_attr_read_chrc+0xa0>)
    6aaa:	491b      	ldr	r1, [pc, #108]	; (6b18 <bt_gatt_attr_read_chrc+0xa4>)
    6aac:	481b      	ldr	r0, [pc, #108]	; (6b1c <bt_gatt_attr_read_chrc+0xa8>)
    6aae:	f7fa fa6d 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    6ab2:	f88d 5015 	strb.w	r5, [sp, #21]
    6ab6:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6aba:	f8d9 1000 	ldr.w	r1, [r9]
    6abe:	780b      	ldrb	r3, [r1, #0]
    6ac0:	b9c3      	cbnz	r3, 6af4 <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6ac2:	884b      	ldrh	r3, [r1, #2]
    6ac4:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    6ac8:	2305      	movs	r3, #5
	if (offset > value_len) {
    6aca:	42b3      	cmp	r3, r6
    6acc:	d31a      	bcc.n	6b04 <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    6ace:	1b9b      	subs	r3, r3, r6
    6ad0:	42a3      	cmp	r3, r4
    6ad2:	bfa8      	it	ge
    6ad4:	4623      	movge	r3, r4
    6ad6:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6ad8:	ab05      	add	r3, sp, #20
    6ada:	4622      	mov	r2, r4
    6adc:	1999      	adds	r1, r3, r6
    6ade:	4638      	mov	r0, r7
    6ae0:	f7fb f88c 	bl	1bfc <memcpy>
}
    6ae4:	4620      	mov	r0, r4
    6ae6:	b00b      	add	sp, #44	; 0x2c
    6ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6aec:	8a03      	ldrh	r3, [r0, #16]
    6aee:	f8ad 3015 	strh.w	r3, [sp, #21]
    6af2:	e7e2      	b.n	6aba <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6af4:	2210      	movs	r2, #16
    6af6:	3101      	adds	r1, #1
    6af8:	f10d 0017 	add.w	r0, sp, #23
    6afc:	f7fb f87e 	bl	1bfc <memcpy>
		value_len += 16;
    6b00:	2313      	movs	r3, #19
    6b02:	e7e2      	b.n	6aca <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6b04:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6b08:	e7ec      	b.n	6ae4 <bt_gatt_attr_read_chrc+0x70>
    6b0a:	bf00      	nop
    6b0c:	000145f1 	.word	0x000145f1
    6b10:	000153bb 	.word	0x000153bb
    6b14:	000161b2 	.word	0x000161b2
    6b18:	000153c2 	.word	0x000153c2
    6b1c:	00016204 	.word	0x00016204

00006b20 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6b20:	4603      	mov	r3, r0
    6b22:	4a03      	ldr	r2, [pc, #12]	; (6b30 <bt_gatt_connected+0x10>)
    6b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6b28:	2001      	movs	r0, #1
    6b2a:	f7ff bf11 	b.w	6950 <bt_gatt_foreach_attr>
    6b2e:	bf00      	nop
    6b30:	000064a9 	.word	0x000064a9

00006b34 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6b34:	4603      	mov	r3, r0
    6b36:	4a03      	ldr	r2, [pc, #12]	; (6b44 <bt_gatt_disconnected+0x10>)
    6b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6b3c:	2001      	movs	r0, #1
    6b3e:	f7ff bf07 	b.w	6950 <bt_gatt_foreach_attr>
    6b42:	bf00      	nop
    6b44:	00006591 	.word	0x00006591

00006b48 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6b4a:	4a0b      	ldr	r2, [pc, #44]	; (6b78 <bt_smp_accept+0x30>)
    6b4c:	6813      	ldr	r3, [r2, #0]
    6b4e:	b933      	cbnz	r3, 6b5e <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.ops = &ops;
    6b50:	480a      	ldr	r0, [pc, #40]	; (6b7c <bt_smp_accept+0x34>)
    6b52:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    6b54:	600a      	str	r2, [r1, #0]

		return 0;
    6b56:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    6b58:	b005      	add	sp, #20
    6b5a:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    6b5e:	4b08      	ldr	r3, [pc, #32]	; (6b80 <bt_smp_accept+0x38>)
    6b60:	9302      	str	r3, [sp, #8]
    6b62:	9001      	str	r0, [sp, #4]
    6b64:	9300      	str	r3, [sp, #0]
    6b66:	4a07      	ldr	r2, [pc, #28]	; (6b84 <bt_smp_accept+0x3c>)
    6b68:	4b07      	ldr	r3, [pc, #28]	; (6b88 <bt_smp_accept+0x40>)
    6b6a:	4908      	ldr	r1, [pc, #32]	; (6b8c <bt_smp_accept+0x44>)
    6b6c:	4808      	ldr	r0, [pc, #32]	; (6b90 <bt_smp_accept+0x48>)
    6b6e:	f7fa fa0d 	bl	f8c <printk>
	return -ENOMEM;
    6b72:	f06f 000b 	mvn.w	r0, #11
    6b76:	e7ef      	b.n	6b58 <bt_smp_accept+0x10>
    6b78:	200005f0 	.word	0x200005f0
    6b7c:	20003d10 	.word	0x20003d10
    6b80:	000145f1 	.word	0x000145f1
    6b84:	00015373 	.word	0x00015373
    6b88:	00016336 	.word	0x00016336
    6b8c:	000153c2 	.word	0x000153c2
    6b90:	00016344 	.word	0x00016344

00006b94 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    6b94:	2100      	movs	r1, #0
{
    6b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    6b9a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    6b9c:	4608      	mov	r0, r1
    6b9e:	f7fe f8c2 	bl	4d26 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6ba2:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    6ba6:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6ba8:	2101      	movs	r1, #1
    6baa:	4630      	mov	r0, r6
    6bac:	f00b ff12 	bl	129d4 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    6bb0:	2505      	movs	r5, #5
    6bb2:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    6bb4:	2101      	movs	r1, #1
    6bb6:	4630      	mov	r0, r6
    6bb8:	f00b ff0c 	bl	129d4 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    6bbc:	7005      	strb	r5, [r0, #0]
    6bbe:	4622      	mov	r2, r4
    6bc0:	4638      	mov	r0, r7
    6bc2:	2300      	movs	r3, #0
    6bc4:	2106      	movs	r1, #6
}
    6bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6bca:	f7fe b8af 	b.w	4d2c <bt_l2cap_send_cb>

00006bce <bt_smp_sign_verify>:
    6bce:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6bd2:	4770      	bx	lr

00006bd4 <bt_smp_init>:

int bt_smp_init(void)
{
    6bd4:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6bd6:	4802      	ldr	r0, [pc, #8]	; (6be0 <bt_smp_init+0xc>)
    6bd8:	f7fd ffea 	bl	4bb0 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    6bdc:	2000      	movs	r0, #0
    6bde:	bd08      	pop	{r3, pc}
    6be0:	20003d04 	.word	0x20003d04

00006be4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    6be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    6be6:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6be8:	1dc3      	adds	r3, r0, #7
{
    6bea:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6bec:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6bf0:	1e50      	subs	r0, r2, #1
{
    6bf2:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6bf4:	b280      	uxth	r0, r0
{
    6bf6:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6bf8:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6bfa:	2100      	movs	r1, #0
    6bfc:	2204      	movs	r2, #4
    6bfe:	fb06 5000 	mla	r0, r6, r0, r5
    6c02:	f7fb f827 	bl	1c54 <memset>
    6c06:	3c02      	subs	r4, #2
    6c08:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    6c0a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6c0e:	42bc      	cmp	r4, r7
    6c10:	d101      	bne.n	6c16 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    6c12:	b003      	add	sp, #12
    6c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    6c16:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    6c1a:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6c1c:	2204      	movs	r2, #4
    6c1e:	1b80      	subs	r0, r0, r6
    6c20:	eb0d 0102 	add.w	r1, sp, r2
    6c24:	4428      	add	r0, r5
    6c26:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    6c28:	9301      	str	r3, [sp, #4]
    6c2a:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6c2c:	f7fa ffe6 	bl	1bfc <memcpy>
    6c30:	e7ed      	b.n	6c0e <mem_init+0x2a>

00006c32 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    6c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    6c34:	6805      	ldr	r5, [r0, #0]
{
    6c36:	4606      	mov	r6, r0
	if (*mem_head) {
    6c38:	b195      	cbz	r5, 6c60 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6c3a:	1deb      	adds	r3, r5, #7
    6c3c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    6c40:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6c42:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    6c44:	4629      	mov	r1, r5
    6c46:	eb0d 0002 	add.w	r0, sp, r2
    6c4a:	f7fa ffd7 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6c4e:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    6c50:	3c01      	subs	r4, #1
    6c52:	b2a4      	uxth	r4, r4
		if (head) {
    6c54:	b11b      	cbz	r3, 6c5e <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    6c56:	1dda      	adds	r2, r3, #7
    6c58:	f022 0203 	bic.w	r2, r2, #3
    6c5c:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    6c5e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    6c60:	4628      	mov	r0, r5
    6c62:	b002      	add	sp, #8
    6c64:	bd70      	pop	{r4, r5, r6, pc}

00006c66 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    6c66:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6c68:	680c      	ldr	r4, [r1, #0]
{
    6c6a:	4606      	mov	r6, r0
    6c6c:	460d      	mov	r5, r1
	if (*mem_head) {
    6c6e:	b11c      	cbz	r4, 6c78 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6c70:	1de3      	adds	r3, r4, #7
    6c72:	f023 0303 	bic.w	r3, r3, #3
    6c76:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    6c78:	2204      	movs	r2, #4
    6c7a:	4629      	mov	r1, r5
    6c7c:	4630      	mov	r0, r6
    6c7e:	f7fa ffbd 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6c82:	1df2      	adds	r2, r6, #7
    6c84:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    6c88:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6c8a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    6c8c:	602e      	str	r6, [r5, #0]
    6c8e:	bd70      	pop	{r4, r5, r6, pc}

00006c90 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    6c90:	b118      	cbz	r0, 6c9a <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    6c92:	3007      	adds	r0, #7
    6c94:	f020 0003 	bic.w	r0, r0, #3
    6c98:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    6c9a:	4770      	bx	lr

00006c9c <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    6c9c:	fb02 0001 	mla	r0, r2, r1, r0
    6ca0:	4770      	bx	lr

00006ca2 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    6ca2:	1a40      	subs	r0, r0, r1
    6ca4:	b280      	uxth	r0, r0
}
    6ca6:	fbb0 f0f2 	udiv	r0, r0, r2
    6caa:	4770      	bx	lr

00006cac <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    6cac:	b510      	push	{r4, lr}
	src += len;
    6cae:	4411      	add	r1, r2
    6cb0:	3801      	subs	r0, #1
	while (len--) {
    6cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6cb6:	3a01      	subs	r2, #1
    6cb8:	b292      	uxth	r2, r2
    6cba:	429a      	cmp	r2, r3
    6cbc:	d100      	bne.n	6cc0 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    6cbe:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    6cc0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    6cc4:	f800 4f01 	strb.w	r4, [r0, #1]!
    6cc8:	e7f5      	b.n	6cb6 <mem_rcopy+0xa>

00006cca <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    6cca:	4401      	add	r1, r0
	while (len--) {
    6ccc:	4288      	cmp	r0, r1
    6cce:	d101      	bne.n	6cd4 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    6cd0:	2000      	movs	r0, #0
    6cd2:	4770      	bx	lr
		if (*src++) {
    6cd4:	f810 3b01 	ldrb.w	r3, [r0], #1
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d0f7      	beq.n	6ccc <mem_nz+0x2>
			return 1;
    6cdc:	2001      	movs	r0, #1
}
    6cde:	4770      	bx	lr

00006ce0 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    6ce0:	6010      	str	r0, [r2, #0]
    6ce2:	6008      	str	r0, [r1, #0]

	return link;
}
    6ce4:	4770      	bx	lr

00006ce6 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    6ce6:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    6ce8:	6814      	ldr	r4, [r2, #0]
    6cea:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    6cec:	6814      	ldr	r4, [r2, #0]
    6cee:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    6cf0:	6010      	str	r0, [r2, #0]

	return link;
}
    6cf2:	bd10      	pop	{r4, pc}

00006cf4 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    6cf4:	4288      	cmp	r0, r1
    6cf6:	d003      	beq.n	6d00 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    6cf8:	b11a      	cbz	r2, 6d02 <memq_peek+0xe>
		*mem = head->mem;
    6cfa:	6843      	ldr	r3, [r0, #4]
    6cfc:	6013      	str	r3, [r2, #0]
    6cfe:	4770      	bx	lr
		return NULL;
    6d00:	2000      	movs	r0, #0
	}

	return head;
}
    6d02:	4770      	bx	lr

00006d04 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    6d04:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    6d06:	4283      	cmp	r3, r0
    6d08:	d009      	beq.n	6d1e <memq_dequeue+0x1a>
	if (mem) {
    6d0a:	b122      	cbz	r2, 6d16 <memq_dequeue+0x12>
		*mem = head->mem;
    6d0c:	6858      	ldr	r0, [r3, #4]
    6d0e:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    6d10:	681a      	ldr	r2, [r3, #0]
    6d12:	600a      	str	r2, [r1, #0]

	return link;
    6d14:	e001      	b.n	6d1a <memq_dequeue+0x16>
	if (!link) {
    6d16:	2b00      	cmp	r3, #0
    6d18:	d1fa      	bne.n	6d10 <memq_dequeue+0xc>
}
    6d1a:	4618      	mov	r0, r3
    6d1c:	4770      	bx	lr
		return NULL;
    6d1e:	2300      	movs	r3, #0
    6d20:	e7fb      	b.n	6d1a <memq_dequeue+0x16>
	...

00006d24 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    6d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    6d28:	4f11      	ldr	r7, [pc, #68]	; (6d70 <mayfly_init+0x4c>)
    6d2a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 6d74 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    6d2e:	2604      	movs	r6, #4
	while (callee_id--) {
    6d30:	3e01      	subs	r6, #1
    6d32:	b2f6      	uxtb	r6, r6
    6d34:	2eff      	cmp	r6, #255	; 0xff
    6d36:	d019      	beq.n	6d6c <mayfly_init+0x48>
    6d38:	b233      	sxth	r3, r6
    6d3a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6d3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6d42:	011d      	lsls	r5, r3, #4
    6d44:	2404      	movs	r4, #4
    6d46:	f04f 0a0c 	mov.w	sl, #12
    6d4a:	e00a      	b.n	6d62 <mayfly_init+0x3e>
    6d4c:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    6d50:	1d0a      	adds	r2, r1, #4
    6d52:	eb04 0008 	add.w	r0, r4, r8
    6d56:	443a      	add	r2, r7
    6d58:	4439      	add	r1, r7
    6d5a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    6d5e:	f7ff ffbf 	bl	6ce0 <memq_init>
		while (caller_id--) {
    6d62:	3c01      	subs	r4, #1
    6d64:	b2e4      	uxtb	r4, r4
    6d66:	2cff      	cmp	r4, #255	; 0xff
    6d68:	d1f0      	bne.n	6d4c <mayfly_init+0x28>
    6d6a:	e7e1      	b.n	6d30 <mayfly_init+0xc>
    6d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d70:	20000704 	.word	0x20000704
    6d74:	20000684 	.word	0x20000684

00006d78 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    6d78:	b4f0      	push	{r4, r5, r6, r7}
    6d7a:	4b12      	ldr	r3, [pc, #72]	; (6dc4 <mayfly_enable+0x4c>)
    6d7c:	4605      	mov	r5, r0
    6d7e:	460f      	mov	r7, r1
    6d80:	260c      	movs	r6, #12
    6d82:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    6d84:	b172      	cbz	r2, 6da4 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    6d86:	4361      	muls	r1, r4
    6d88:	fb06 1400 	mla	r4, r6, r0, r1
    6d8c:	4423      	add	r3, r4
    6d8e:	7a59      	ldrb	r1, [r3, #9]
    6d90:	7a18      	ldrb	r0, [r3, #8]
    6d92:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    6d94:	bf04      	itt	eq
    6d96:	3101      	addeq	r1, #1
    6d98:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    6d9a:	4628      	mov	r0, r5
    6d9c:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    6d9e:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    6da0:	f00b bc12 	b.w	125c8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    6da4:	434c      	muls	r4, r1
    6da6:	fb06 4400 	mla	r4, r6, r0, r4
    6daa:	4423      	add	r3, r4
    6dac:	7a9c      	ldrb	r4, [r3, #10]
    6dae:	7ada      	ldrb	r2, [r3, #11]
    6db0:	42a2      	cmp	r2, r4
    6db2:	d104      	bne.n	6dbe <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    6db4:	3201      	adds	r2, #1
    6db6:	729a      	strb	r2, [r3, #10]
}
    6db8:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    6dba:	f00b bc65 	b.w	12688 <mayfly_pend>
}
    6dbe:	bcf0      	pop	{r4, r5, r6, r7}
    6dc0:	4770      	bx	lr
    6dc2:	bf00      	nop
    6dc4:	20000704 	.word	0x20000704

00006dc8 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    6dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dca:	4605      	mov	r5, r0
    6dcc:	460e      	mov	r6, r1
    6dce:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6dd0:	b18a      	cbz	r2, 6df6 <mayfly_enqueue+0x2e>
    6dd2:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    6dd4:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6dd6:	7820      	ldrb	r0, [r4, #0]
    6dd8:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    6dda:	f010 0703 	ands.w	r7, r0, #3
    6dde:	d029      	beq.n	6e34 <mayfly_enqueue+0x6c>
		if (chain) {
    6de0:	b303      	cbz	r3, 6e24 <mayfly_enqueue+0x5c>
			if (state != 1) {
    6de2:	2f01      	cmp	r7, #1
    6de4:	d039      	beq.n	6e5a <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6de6:	3201      	adds	r2, #1
    6de8:	b2d2      	uxtb	r2, r2
    6dea:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    6dec:	4631      	mov	r1, r6
    6dee:	4628      	mov	r0, r5
    6df0:	f00b fc4a 	bl	12688 <mayfly_pend>
    6df4:	e01c      	b.n	6e30 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6df6:	f00b fc35 	bl	12664 <mayfly_prio_is_equal>
    6dfa:	2800      	cmp	r0, #0
    6dfc:	d0e9      	beq.n	6dd2 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6dfe:	4631      	mov	r1, r6
    6e00:	4628      	mov	r0, r5
    6e02:	f00b fc09 	bl	12618 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6e06:	2800      	cmp	r0, #0
    6e08:	d0e3      	beq.n	6dd2 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    6e0a:	2330      	movs	r3, #48	; 0x30
    6e0c:	220c      	movs	r2, #12
    6e0e:	4373      	muls	r3, r6
    6e10:	fb02 3305 	mla	r3, r2, r5, r3
    6e14:	4a12      	ldr	r2, [pc, #72]	; (6e60 <mayfly_enqueue+0x98>)
    6e16:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e18:	7a93      	ldrb	r3, [r2, #10]
    6e1a:	7ad2      	ldrb	r2, [r2, #11]
    6e1c:	1a9b      	subs	r3, r3, r2
    6e1e:	bf18      	it	ne
    6e20:	2301      	movne	r3, #1
    6e22:	e7d7      	b.n	6dd4 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    6e24:	3202      	adds	r2, #2
    6e26:	b2d2      	uxtb	r2, r2
    6e28:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    6e2a:	68e3      	ldr	r3, [r4, #12]
    6e2c:	68a0      	ldr	r0, [r4, #8]
    6e2e:	4798      	blx	r3
		return 0;
    6e30:	2000      	movs	r0, #0
    6e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    6e34:	2b00      	cmp	r3, #0
    6e36:	d0f8      	beq.n	6e2a <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    6e38:	3201      	adds	r2, #1
    6e3a:	b2d2      	uxtb	r2, r2
    6e3c:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6e3e:	2304      	movs	r3, #4
    6e40:	2230      	movs	r2, #48	; 0x30
    6e42:	fb12 3206 	smlabb	r2, r2, r6, r3
    6e46:	230c      	movs	r3, #12
    6e48:	fb13 2305 	smlabb	r3, r3, r5, r2
    6e4c:	4a04      	ldr	r2, [pc, #16]	; (6e60 <mayfly_enqueue+0x98>)
    6e4e:	6860      	ldr	r0, [r4, #4]
    6e50:	441a      	add	r2, r3
    6e52:	4621      	mov	r1, r4
    6e54:	f7ff ff47 	bl	6ce6 <memq_enqueue>
    6e58:	e7c8      	b.n	6dec <mayfly_enqueue+0x24>
			return 1;
    6e5a:	4638      	mov	r0, r7

	return 0;
}
    6e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e5e:	bf00      	nop
    6e60:	20000704 	.word	0x20000704

00006e64 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    6e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e68:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6e6c:	b089      	sub	sp, #36	; 0x24
    6e6e:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    6e70:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    6e74:	4e43      	ldr	r6, [pc, #268]	; (6f84 <mayfly_run+0x120>)
    6e76:	9304      	str	r3, [sp, #16]
{
    6e78:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    6e7a:	2404      	movs	r4, #4
	u8_t disable = 0;
    6e7c:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    6e80:	3c01      	subs	r4, #1
    6e82:	b2e4      	uxtb	r4, r4
    6e84:	2cff      	cmp	r4, #255	; 0xff
    6e86:	d10b      	bne.n	6ea0 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    6e88:	9b01      	ldr	r3, [sp, #4]
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	d076      	beq.n	6f7c <mayfly_run+0x118>
    6e8e:	f1b8 0f00 	cmp.w	r8, #0
    6e92:	d173      	bne.n	6f7c <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    6e94:	4642      	mov	r2, r8
    6e96:	4629      	mov	r1, r5
    6e98:	4628      	mov	r0, r5
    6e9a:	f00b fb95 	bl	125c8 <mayfly_enable_cb>
    6e9e:	e06d      	b.n	6f7c <mayfly_run+0x118>
		struct mayfly *m = 0;
    6ea0:	f10d 0b20 	add.w	fp, sp, #32
    6ea4:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    6ea6:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    6ea8:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    6eac:	f04f 0930 	mov.w	r9, #48	; 0x30
    6eb0:	fb07 f304 	mul.w	r3, r7, r4
    6eb4:	fb09 3005 	mla	r0, r9, r5, r3
    6eb8:	1831      	adds	r1, r6, r0
    6eba:	465a      	mov	r2, fp
    6ebc:	6849      	ldr	r1, [r1, #4]
    6ebe:	5830      	ldr	r0, [r6, r0]
    6ec0:	9302      	str	r3, [sp, #8]
    6ec2:	f7ff ff17 	bl	6cf4 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6ec6:	9b04      	ldr	r3, [sp, #16]
    6ec8:	fb17 3704 	smlabb	r7, r7, r4, r3
    6ecc:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    6ece:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    6ed0:	9303      	str	r3, [sp, #12]
		while (link) {
    6ed2:	f1ba 0f00 	cmp.w	sl, #0
    6ed6:	d119      	bne.n	6f0c <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    6ed8:	2230      	movs	r2, #48	; 0x30
    6eda:	230c      	movs	r3, #12
    6edc:	436a      	muls	r2, r5
    6ede:	fb03 2204 	mla	r2, r3, r4, r2
    6ee2:	4432      	add	r2, r6
    6ee4:	7a91      	ldrb	r1, [r2, #10]
    6ee6:	7ad0      	ldrb	r0, [r2, #11]
    6ee8:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    6eea:	bf1e      	ittt	ne
    6eec:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    6eee:	2201      	movne	r2, #1
    6ef0:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    6ef2:	2230      	movs	r2, #48	; 0x30
    6ef4:	436a      	muls	r2, r5
    6ef6:	fb03 2304 	mla	r3, r3, r4, r2
    6efa:	4433      	add	r3, r6
    6efc:	7a1a      	ldrb	r2, [r3, #8]
    6efe:	7a59      	ldrb	r1, [r3, #9]
    6f00:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    6f02:	bf1c      	itt	ne
    6f04:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    6f06:	f04f 0801 	movne.w	r8, #1
    6f0a:	e7b9      	b.n	6e80 <mayfly_run+0x1c>
			req = m->_req;
    6f0c:	9b07      	ldr	r3, [sp, #28]
    6f0e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    6f10:	785a      	ldrb	r2, [r3, #1]
    6f12:	1abf      	subs	r7, r7, r2
    6f14:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    6f18:	2f01      	cmp	r7, #1
    6f1a:	d104      	bne.n	6f26 <mayfly_run+0xc2>
				m->_ack--;
    6f1c:	3a01      	subs	r2, #1
    6f1e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    6f20:	6898      	ldr	r0, [r3, #8]
    6f22:	68da      	ldr	r2, [r3, #12]
    6f24:	4790      	blx	r2
			req = m->_req;
    6f26:	9a07      	ldr	r2, [sp, #28]
    6f28:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    6f2a:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    6f2c:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    6f2e:	1a9a      	subs	r2, r3, r2
    6f30:	f002 0203 	and.w	r2, r2, #3
    6f34:	2a01      	cmp	r2, #1
    6f36:	9305      	str	r3, [sp, #20]
    6f38:	d00d      	beq.n	6f56 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6f3a:	9b02      	ldr	r3, [sp, #8]
    6f3c:	9903      	ldr	r1, [sp, #12]
    6f3e:	fb09 3005 	mla	r0, r9, r5, r3
    6f42:	4430      	add	r0, r6
    6f44:	2200      	movs	r2, #0
    6f46:	6840      	ldr	r0, [r0, #4]
    6f48:	f7ff fedc 	bl	6d04 <memq_dequeue>
				m->_link = link;
    6f4c:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    6f4e:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    6f50:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    6f54:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    6f56:	9b02      	ldr	r3, [sp, #8]
    6f58:	fb09 3305 	mla	r3, r9, r5, r3
    6f5c:	18f1      	adds	r1, r6, r3
    6f5e:	465a      	mov	r2, fp
    6f60:	6849      	ldr	r1, [r1, #4]
    6f62:	58f0      	ldr	r0, [r6, r3]
    6f64:	f7ff fec6 	bl	6cf4 <memq_peek>
			if (state == 1) {
    6f68:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    6f6a:	4682      	mov	sl, r0
			if (state == 1) {
    6f6c:	d1b1      	bne.n	6ed2 <mayfly_run+0x6e>
				if (caller_id || link) {
    6f6e:	b90c      	cbnz	r4, 6f74 <mayfly_run+0x110>
    6f70:	2800      	cmp	r0, #0
    6f72:	d0b1      	beq.n	6ed8 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    6f74:	4629      	mov	r1, r5
    6f76:	4628      	mov	r0, r5
    6f78:	f00b fb86 	bl	12688 <mayfly_pend>
	}
}
    6f7c:	b009      	add	sp, #36	; 0x24
    6f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f82:	bf00      	nop
    6f84:	20000704 	.word	0x20000704

00006f88 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    6f88:	b510      	push	{r4, lr}
    6f8a:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    6f8c:	2000      	movs	r0, #0

	while (octets_len--) {
    6f8e:	3901      	subs	r1, #1
    6f90:	b2c9      	uxtb	r1, r1
    6f92:	29ff      	cmp	r1, #255	; 0xff
    6f94:	d100      	bne.n	6f98 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    6f96:	bd10      	pop	{r4, pc}
		bite = *octets;
    6f98:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	d0f6      	beq.n	6f8e <util_ones_count_get+0x6>
			bite &= (bite - 1);
    6fa0:	1e5c      	subs	r4, r3, #1
			one_count++;
    6fa2:	3001      	adds	r0, #1
			bite &= (bite - 1);
    6fa4:	4023      	ands	r3, r4
			one_count++;
    6fa6:	b2c0      	uxtb	r0, r0
    6fa8:	e7f8      	b.n	6f9c <util_ones_count_get+0x14>

00006faa <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    6faa:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    6fac:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    6fae:	6805      	ldr	r5, [r0, #0]
	current = previous;
    6fb0:	461a      	mov	r2, r3
	total = 0;
    6fb2:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    6fb4:	2aff      	cmp	r2, #255	; 0xff
    6fb6:	d101      	bne.n	6fbc <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    6fb8:	2000      	movs	r0, #0
    6fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    6fbc:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    6fc0:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    6fc2:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    6fc6:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    6fca:	d004      	beq.n	6fd6 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    6fcc:	68b3      	ldr	r3, [r6, #8]
    6fce:	441c      	add	r4, r3
		current = ticker_current->next;
    6fd0:	4613      	mov	r3, r2
    6fd2:	463a      	mov	r2, r7
    6fd4:	e7ee      	b.n	6fb4 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    6fd6:	4293      	cmp	r3, r2
    6fd8:	d100      	bne.n	6fdc <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    6fda:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    6fdc:	b21b      	sxth	r3, r3
    6fde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6fe2:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    6fe4:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    6fe6:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    6fea:	7833      	ldrb	r3, [r6, #0]
    6fec:	2bff      	cmp	r3, #255	; 0xff
    6fee:	d006      	beq.n	6ffe <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    6ff0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6ff4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    6ff8:	689a      	ldr	r2, [r3, #8]
    6ffa:	4402      	add	r2, r0
    6ffc:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    6ffe:	4420      	add	r0, r4
    7000:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007002 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7002:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7004:	1a55      	subs	r5, r2, r1
    7006:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    700a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    700c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    700e:	d109      	bne.n	7024 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7010:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7014:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7016:	42a2      	cmp	r2, r4
    7018:	d90e      	bls.n	7038 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    701a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    701c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    701e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7020:	6144      	str	r4, [r0, #20]
    7022:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7024:	1a8a      	subs	r2, r1, r2
    7026:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    702a:	4293      	cmp	r3, r2
    702c:	d901      	bls.n	7032 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    702e:	1a9a      	subs	r2, r3, r2
    7030:	e7f1      	b.n	7016 <ticks_to_expire_prep+0x14>
    7032:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7034:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    7036:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7038:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    703a:	2200      	movs	r2, #0
    703c:	e7ef      	b.n	701e <ticks_to_expire_prep+0x1c>

0000703e <ticker_job_op_cb>:
{
    703e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7040:	2200      	movs	r2, #0
    7042:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    7044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    7046:	6259      	str	r1, [r3, #36]	; 0x24
{
    7048:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    704a:	b10a      	cbz	r2, 7050 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    704c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    704e:	4710      	bx	r2
    7050:	4770      	bx	lr

00007052 <ticker_worker>:
{
    7052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    7056:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    7058:	2301      	movs	r3, #1
{
    705a:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    705c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    705e:	2d00      	cmp	r5, #0
    7060:	d14c      	bne.n	70fc <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    7062:	7f43      	ldrb	r3, [r0, #29]
    7064:	2bff      	cmp	r3, #255	; 0xff
    7066:	d102      	bne.n	706e <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    7068:	77c5      	strb	r5, [r0, #31]
		return;
    706a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    706e:	f00a fe15 	bl	11c9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7072:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    7074:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    7076:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    707a:	1bc7      	subs	r7, r0, r7
    707c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    7080:	2eff      	cmp	r6, #255	; 0xff
    7082:	d006      	beq.n	7092 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    7084:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7088:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    708c:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    708e:	429f      	cmp	r7, r3
    7090:	d218      	bcs.n	70c4 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7092:	7aa2      	ldrb	r2, [r4, #10]
    7094:	7ae3      	ldrb	r3, [r4, #11]
    7096:	4293      	cmp	r3, r2
    7098:	d105      	bne.n	70a6 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    709a:	3301      	adds	r3, #1
    709c:	b2db      	uxtb	r3, r3
			last = 0;
    709e:	2b02      	cmp	r3, #2
    70a0:	bf08      	it	eq
    70a2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    70a4:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    70a6:	7ae3      	ldrb	r3, [r4, #11]
    70a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    70ac:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    70ae:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    70b0:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    70b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    70b4:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    70b6:	46ac      	mov	ip, r5
    70b8:	4623      	mov	r3, r4
    70ba:	2104      	movs	r1, #4
    70bc:	2003      	movs	r0, #3
}
    70be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    70c2:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    70c4:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    70c6:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    70c8:	788a      	ldrb	r2, [r1, #2]
    70ca:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    70cc:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    70d0:	1a9b      	subs	r3, r3, r2
    70d2:	b2db      	uxtb	r3, r3
    70d4:	2b01      	cmp	r3, #1
    70d6:	d1d3      	bne.n	7080 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    70d8:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    70dc:	3a01      	subs	r2, #1
    70de:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    70e0:	f1b9 0f00 	cmp.w	r9, #0
    70e4:	d0cc      	beq.n	7080 <ticker_worker+0x2e>
					   ticks_expired -
    70e6:	6948      	ldr	r0, [r1, #20]
    70e8:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    70ea:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    70ec:	1a28      	subs	r0, r5, r0
    70ee:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    70f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    70f4:	690b      	ldr	r3, [r1, #16]
    70f6:	6a49      	ldr	r1, [r1, #36]	; 0x24
    70f8:	47c8      	blx	r9
    70fa:	e7c1      	b.n	7080 <ticker_worker+0x2e>
    70fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007100 <ticker_job>:
{
    7100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    7104:	7fc2      	ldrb	r2, [r0, #31]
{
    7106:	b095      	sub	sp, #84	; 0x54
    7108:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    710a:	2a00      	cmp	r2, #0
    710c:	f040 83be 	bne.w	788c <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    7110:	6943      	ldr	r3, [r0, #20]
    7112:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    7114:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7116:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7118:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    711a:	7ac0      	ldrb	r0, [r0, #11]
    711c:	4298      	cmp	r0, r3
    711e:	f000 808f 	beq.w	7240 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    7122:	440b      	add	r3, r1
    7124:	b2db      	uxtb	r3, r3
			first = 0;
    7126:	2b02      	cmp	r3, #2
    7128:	bf08      	it	eq
    712a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    712c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7130:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    7134:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    7136:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    713a:	9b07      	ldr	r3, [sp, #28]
    713c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    713e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7142:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    7146:	f89b 301d 	ldrb.w	r3, [fp, #29]
    714a:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    714c:	f8db 3000 	ldr.w	r3, [fp]
    7150:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    7152:	f8db 3004 	ldr.w	r3, [fp, #4]
    7156:	930d      	str	r3, [sp, #52]	; 0x34
    7158:	f89b 3009 	ldrb.w	r3, [fp, #9]
    715c:	3b01      	subs	r3, #1
    715e:	b2db      	uxtb	r3, r3
    7160:	9304      	str	r3, [sp, #16]
	pending = 0;
    7162:	2300      	movs	r3, #0
    7164:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    7166:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    716a:	9b04      	ldr	r3, [sp, #16]
    716c:	2bff      	cmp	r3, #255	; 0xff
    716e:	d16a      	bne.n	7246 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7170:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    7174:	9a05      	ldr	r2, [sp, #20]
    7176:	1a9b      	subs	r3, r3, r2
    7178:	bf18      	it	ne
    717a:	2301      	movne	r3, #1
    717c:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    717e:	9b03      	ldr	r3, [sp, #12]
    7180:	b1e3      	cbz	r3, 71bc <ticker_job+0xbc>
	node = &instance->node[0];
    7182:	f8db 3000 	ldr.w	r3, [fp]
    7186:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    7188:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    718c:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7190:	2eff      	cmp	r6, #255	; 0xff
    7192:	d00c      	beq.n	71ae <ticker_job+0xae>
		ticker = &node[id_expired];
    7194:	b237      	sxth	r7, r6
    7196:	9b06      	ldr	r3, [sp, #24]
    7198:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    719c:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    71a0:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    71a2:	4545      	cmp	r5, r8
    71a4:	f240 8136 	bls.w	7414 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    71a8:	eba5 0508 	sub.w	r5, r5, r8
    71ac:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    71ae:	9b04      	ldr	r3, [sp, #16]
    71b0:	9a03      	ldr	r2, [sp, #12]
    71b2:	9905      	ldr	r1, [sp, #20]
    71b4:	42b1      	cmp	r1, r6
    71b6:	bf18      	it	ne
    71b8:	4613      	movne	r3, r2
    71ba:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    71bc:	f8db 3000 	ldr.w	r3, [fp]
    71c0:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    71c2:	f8db 3004 	ldr.w	r3, [fp, #4]
    71c6:	9312      	str	r3, [sp, #72]	; 0x48
    71c8:	f89b 3009 	ldrb.w	r3, [fp, #9]
    71cc:	3b01      	subs	r3, #1
    71ce:	b2db      	uxtb	r3, r3
    71d0:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    71d2:	9b03      	ldr	r3, [sp, #12]
    71d4:	2bff      	cmp	r3, #255	; 0xff
    71d6:	f040 8170 	bne.w	74ba <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    71da:	f89b 301d 	ldrb.w	r3, [fp, #29]
    71de:	9a05      	ldr	r2, [sp, #20]
    71e0:	4293      	cmp	r3, r2
	if (!pending) {
    71e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    71e4:	f040 8349 	bne.w	787a <ticker_job+0x77a>
	if (!pending) {
    71e8:	b95b      	cbnz	r3, 7202 <ticker_job+0x102>
    71ea:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    71ee:	f8db 3004 	ldr.w	r3, [fp, #4]
    71f2:	9303      	str	r3, [sp, #12]
    71f4:	3c01      	subs	r4, #1
    71f6:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    71f8:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    71fc:	2cff      	cmp	r4, #255	; 0xff
    71fe:	f040 82a0 	bne.w	7742 <ticker_job+0x642>
	instance->job_guard = 0;
    7202:	2300      	movs	r3, #0
    7204:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7208:	9b04      	ldr	r3, [sp, #16]
    720a:	b14b      	cbz	r3, 7220 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    720c:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7210:	2bff      	cmp	r3, #255	; 0xff
    7212:	f040 82e9 	bne.w	77e8 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    7216:	f00a fd13 	bl	11c40 <cntr_stop>
    721a:	b908      	cbnz	r0, 7220 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    721c:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7220:	f89b 301f 	ldrb.w	r3, [fp, #31]
    7224:	2b00      	cmp	r3, #0
    7226:	f000 8331 	beq.w	788c <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    722a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    722e:	465b      	mov	r3, fp
    7230:	2201      	movs	r2, #1
    7232:	2103      	movs	r1, #3
    7234:	2004      	movs	r0, #4
    7236:	46a4      	mov	ip, r4
}
    7238:	b015      	add	sp, #84	; 0x54
    723a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    723e:	4760      	bx	ip
		flag_elapsed = 0;
    7240:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    7242:	4690      	mov	r8, r2
    7244:	e77f      	b.n	7146 <ticker_job+0x46>
		user = &users[count_user];
    7246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7248:	9a04      	ldr	r2, [sp, #16]
    724a:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    7252:	78f9      	ldrb	r1, [r7, #3]
    7254:	78be      	ldrb	r6, [r7, #2]
    7256:	428e      	cmp	r6, r1
    7258:	f000 80d7 	beq.w	740a <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    725c:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    725e:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    7260:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    7264:	0112      	lsls	r2, r2, #4
    7266:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    7268:	1c73      	adds	r3, r6, #1
    726a:	b2db      	uxtb	r3, r3
				middle = 0;
    726c:	4298      	cmp	r0, r3
    726e:	bf08      	it	eq
    7270:	2300      	moveq	r3, #0
			user->middle = middle;
    7272:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7274:	9b08      	ldr	r3, [sp, #32]
    7276:	5c9a      	ldrb	r2, [r3, r2]
    7278:	2a03      	cmp	r2, #3
    727a:	d9eb      	bls.n	7254 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    727c:	2a05      	cmp	r2, #5
    727e:	d817      	bhi.n	72b0 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    7280:	7869      	ldrb	r1, [r5, #1]
    7282:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    7286:	930c      	str	r3, [sp, #48]	; 0x30
    7288:	980c      	ldr	r0, [sp, #48]	; 0x30
    728a:	9b06      	ldr	r3, [sp, #24]
    728c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    7290:	7863      	ldrb	r3, [r4, #1]
    7292:	78a0      	ldrb	r0, [r4, #2]
    7294:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7296:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    729a:	d009      	beq.n	72b0 <ticker_job+0x1b0>
			    (state == 0) ||
    729c:	2a04      	cmp	r2, #4
    729e:	d10c      	bne.n	72ba <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    72a0:	686a      	ldr	r2, [r5, #4]
    72a2:	b952      	cbnz	r2, 72ba <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    72a4:	68aa      	ldr	r2, [r5, #8]
    72a6:	b942      	cbnz	r2, 72ba <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    72a8:	68ea      	ldr	r2, [r5, #12]
    72aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    72ae:	d104      	bne.n	72ba <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    72b0:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    72b2:	4628      	mov	r0, r5
    72b4:	f7ff fec3 	bl	703e <ticker_job_op_cb>
    72b8:	e7cb      	b.n	7252 <ticker_job+0x152>
			if (state == 1) {
    72ba:	2b01      	cmp	r3, #1
    72bc:	f040 809b 	bne.w	73f6 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    72c0:	4658      	mov	r0, fp
    72c2:	f7ff fe72 	bl	6faa <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    72c6:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    72c8:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    72ca:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    72cc:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    72ce:	f040 8084 	bne.w	73da <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    72d2:	f8db 3014 	ldr.w	r3, [fp, #20]
    72d6:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    72d8:	f00a fce0 	bl	11c9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    72dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    72de:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    72e0:	1ac3      	subs	r3, r0, r3
    72e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    72e6:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    72e8:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    72ea:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    72ec:	bf9e      	ittt	ls
    72ee:	6962      	ldrls	r2, [r4, #20]
    72f0:	1b92      	subls	r2, r2, r6
    72f2:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    72f4:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    72f6:	bf96      	itet	ls
    72f8:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    72fa:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    72fc:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    72fe:	b18a      	cbz	r2, 7324 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7300:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    7302:	b179      	cbz	r1, 7324 <ticker_job+0x224>
		user_op->params.update.lazy--;
    7304:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7308:	fa1f fe8e 	uxth.w	lr, lr
    730c:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7310:	429a      	cmp	r2, r3
    7312:	d32b      	bcc.n	736c <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    7314:	f8df 9324 	ldr.w	r9, [pc, #804]	; 763c <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7318:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    731c:	45e6      	cmp	lr, ip
    731e:	d847      	bhi.n	73b0 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7320:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    7324:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7326:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    7328:	4413      	add	r3, r2
    732a:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    732c:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    732e:	6963      	ldr	r3, [r4, #20]
    7330:	4413      	add	r3, r2
    7332:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7336:	4620      	mov	r0, r4
    7338:	f7ff fe63 	bl	7002 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    733c:	69a2      	ldr	r2, [r4, #24]
    733e:	892b      	ldrh	r3, [r5, #8]
    7340:	4413      	add	r3, r2
    7342:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    7344:	896a      	ldrh	r2, [r5, #10]
    7346:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    7348:	bf8c      	ite	hi
    734a:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    734c:	2300      	movls	r3, #0
    734e:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    7350:	7bab      	ldrb	r3, [r5, #14]
    7352:	b103      	cbz	r3, 7356 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    7354:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    7356:	9b06      	ldr	r3, [sp, #24]
    7358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    735a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    735e:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    7360:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    7364:	3301      	adds	r3, #1
    7366:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7368:	2100      	movs	r1, #0
    736a:	e7a2      	b.n	72b2 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    736c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7370:	45e6      	cmp	lr, ip
    7372:	d2cf      	bcs.n	7314 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    7374:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7376:	4eaf      	ldr	r6, [pc, #700]	; (7634 <ticker_job+0x534>)
    7378:	48af      	ldr	r0, [pc, #700]	; (7638 <ticker_job+0x538>)
    737a:	198e      	adds	r6, r1, r6
    737c:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    737e:	bf81      	itttt	hi
    7380:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    7384:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    7388:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    738c:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    738e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7390:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    7392:	bf8c      	ite	hi
    7394:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    7398:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    739c:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    739e:	4491      	add	r9, r2
			ticker->lazy_current--;
    73a0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    73a4:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    73a6:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    73aa:	f8a4 c01e 	strh.w	ip, [r4, #30]
    73ae:	e7af      	b.n	7310 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    73b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    73b2:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    73b4:	48a0      	ldr	r0, [pc, #640]	; (7638 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    73b6:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    73b8:	499e      	ldr	r1, [pc, #632]	; (7634 <ticker_job+0x534>)
    73ba:	1871      	adds	r1, r6, r1
    73bc:	4281      	cmp	r1, r0
	return 0;
    73be:	bf8e      	itee	hi
    73c0:	2100      	movhi	r1, #0
		return 1;
    73c2:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    73c4:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    73c6:	4411      	add	r1, r2
			ticker->lazy_current++;
    73c8:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    73cc:	bf8c      	ite	hi
    73ce:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    73d0:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    73d2:	440b      	add	r3, r1
			ticker->lazy_current++;
    73d4:	f8a4 c01e 	strh.w	ip, [r4, #30]
    73d8:	e79e      	b.n	7318 <ticker_job+0x218>
		ticker->req = ticker->ack;
    73da:	78a3      	ldrb	r3, [r4, #2]
    73dc:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    73de:	786b      	ldrb	r3, [r5, #1]
    73e0:	f89b 201c 	ldrb.w	r2, [fp, #28]
    73e4:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    73e6:	bf01      	itttt	eq
    73e8:	23ff      	moveq	r3, #255	; 0xff
    73ea:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    73ee:	2300      	moveq	r3, #0
    73f0:	f8cb 3018 	streq.w	r3, [fp, #24]
    73f4:	e7b8      	b.n	7368 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    73f6:	2104      	movs	r1, #4
    73f8:	465b      	mov	r3, fp
    73fa:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    73fe:	2201      	movs	r2, #1
    7400:	4608      	mov	r0, r1
    7402:	47a0      	blx	r4
				pending = 1;
    7404:	2301      	movs	r3, #1
				user->middle = prev;
    7406:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7408:	9309      	str	r3, [sp, #36]	; 0x24
    740a:	9b04      	ldr	r3, [sp, #16]
    740c:	3b01      	subs	r3, #1
    740e:	b2db      	uxtb	r3, r3
    7410:	9304      	str	r3, [sp, #16]
    7412:	e6aa      	b.n	716a <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    7414:	f8db 3018 	ldr.w	r3, [fp, #24]
    7418:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    741a:	bf29      	itett	cs
    741c:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    741e:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7420:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7424:	2300      	movcs	r3, #0
    7426:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    742a:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    742c:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    742e:	b11b      	cbz	r3, 7438 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7430:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    7434:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    7438:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    743a:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    743c:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    743e:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    7442:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    7446:	f8d4 e004 	ldr.w	lr, [r4, #4]
    744a:	f1be 0f00 	cmp.w	lr, #0
    744e:	d030      	beq.n	74b2 <ticker_job+0x3b2>
    7450:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    7452:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 7638 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    7456:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7458:	6a21      	ldr	r1, [r4, #32]
    745a:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    745c:	4975      	ldr	r1, [pc, #468]	; (7634 <ticker_job+0x534>)
    745e:	1859      	adds	r1, r3, r1
    7460:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    7462:	bf9f      	itttt	ls
    7464:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    7468:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    746c:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    7470:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    7472:	bf92      	itee	ls
    7474:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    7476:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    7478:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    747a:	4473      	add	r3, lr
			while (count--) {
    747c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    7480:	441a      	add	r2, r3
			while (count--) {
    7482:	d2e8      	bcs.n	7456 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7484:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    7486:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7488:	f8db 1014 	ldr.w	r1, [fp, #20]
    748c:	eb03 0209 	add.w	r2, r3, r9
    7490:	4620      	mov	r0, r4
    7492:	f7ff fdb6 	bl	7002 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    7496:	8ba3      	ldrh	r3, [r4, #28]
    7498:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    749a:	2300      	movs	r3, #0
    749c:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    749e:	9b06      	ldr	r3, [sp, #24]
    74a0:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    74a4:	7863      	ldrb	r3, [r4, #1]
    74a6:	3301      	adds	r3, #1
    74a8:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    74aa:	eba8 0805 	sub.w	r8, r8, r5
    74ae:	46b2      	mov	sl, r6
    74b0:	e66c      	b.n	718c <ticker_job+0x8c>
			ticker->req = ticker->ack;
    74b2:	78a3      	ldrb	r3, [r4, #2]
    74b4:	7063      	strb	r3, [r4, #1]
    74b6:	4656      	mov	r6, sl
    74b8:	e7f7      	b.n	74aa <ticker_job+0x3aa>
		user = &users[count_user];
    74ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    74bc:	9a03      	ldr	r2, [sp, #12]
    74be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    74c2:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    74c4:	685b      	ldr	r3, [r3, #4]
    74c6:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    74c8:	9b06      	ldr	r3, [sp, #24]
    74ca:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    74ce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    74d2:	f000 808e 	beq.w	75f2 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    74d6:	fa0f f38a 	sxth.w	r3, sl
    74da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    74de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    74e0:	46d0      	mov	r8, sl
    74e2:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    74e6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    74ea:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    74ec:	f8db 3000 	ldr.w	r3, [fp]
    74f0:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    74f2:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    74f4:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    74f6:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    74f8:	8be3      	ldrh	r3, [r4, #30]
    74fa:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    74fc:	bf86      	itte	hi
    74fe:	1a9b      	subhi	r3, r3, r2
    7500:	b29b      	uxthhi	r3, r3
		skip = 0;
    7502:	2300      	movls	r3, #0
    7504:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    7506:	fa0f f388 	sxth.w	r3, r8
    750a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    750e:	00db      	lsls	r3, r3, #3
    7510:	9313      	str	r3, [sp, #76]	; 0x4c
    7512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    7514:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7518:	f8db 0018 	ldr.w	r0, [fp, #24]
    751c:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    751e:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    7522:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    7524:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    7528:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    752c:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    752e:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    7530:	2bff      	cmp	r3, #255	; 0xff
    7532:	d007      	beq.n	7544 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    7534:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    7538:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    753c:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    753e:	4281      	cmp	r1, r0
    7540:	f200 80a9 	bhi.w	7696 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    7544:	f8de 0018 	ldr.w	r0, [lr, #24]
    7548:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    754a:	eb01 0c00 	add.w	ip, r1, r0
    754e:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    7550:	2eff      	cmp	r6, #255	; 0xff
    7552:	f040 80ae 	bne.w	76b2 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    7556:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7558:	b130      	cbz	r0, 7568 <ticker_job+0x468>
    755a:	9807      	ldr	r0, [sp, #28]
    755c:	4281      	cmp	r1, r0
    755e:	f0c0 80bf 	bcc.w	76e0 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    7562:	2eff      	cmp	r6, #255	; 0xff
    7564:	f040 818e 	bne.w	7884 <ticker_job+0x784>
		if (previous == current) {
    7568:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    756a:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    756e:	4283      	cmp	r3, r0
			node[previous].next = id;
    7570:	bf18      	it	ne
    7572:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    7576:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    757a:	bf16      	itet	ne
    757c:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    7580:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    7584:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    7588:	2bff      	cmp	r3, #255	; 0xff
    758a:	d006      	beq.n	759a <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    758c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7594:	689a      	ldr	r2, [r3, #8]
    7596:	1a51      	subs	r1, r2, r1
    7598:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    759a:	78a3      	ldrb	r3, [r4, #2]
    759c:	3301      	adds	r3, #1
    759e:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    75a0:	2100      	movs	r1, #0
			if (user_op) {
    75a2:	2d00      	cmp	r5, #0
    75a4:	d093      	beq.n	74ce <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    75a6:	4628      	mov	r0, r5
    75a8:	f7ff fd49 	bl	703e <ticker_job_op_cb>
    75ac:	e78f      	b.n	74ce <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    75ae:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    75b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    75b4:	011b      	lsls	r3, r3, #4
    75b6:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    75b8:	f109 0201 	add.w	r2, r9, #1
    75bc:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    75c0:	9a06      	ldr	r2, [sp, #24]
    75c2:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    75c4:	454a      	cmp	r2, r9
    75c6:	bf08      	it	eq
    75c8:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    75cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    75ce:	5cd3      	ldrb	r3, [r2, r3]
    75d0:	2b03      	cmp	r3, #3
    75d2:	d10e      	bne.n	75f2 <ticker_job+0x4f2>
				id_insert = user_op->id;
    75d4:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    75d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    75da:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    75de:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    75e2:	7862      	ldrb	r2, [r4, #1]
    75e4:	78a3      	ldrb	r3, [r4, #2]
    75e6:	429a      	cmp	r2, r3
    75e8:	d009      	beq.n	75fe <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    75ea:	2101      	movs	r1, #1
    75ec:	4628      	mov	r0, r5
    75ee:	f7ff fd26 	bl	703e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    75f2:	9b06      	ldr	r3, [sp, #24]
    75f4:	789b      	ldrb	r3, [r3, #2]
    75f6:	454b      	cmp	r3, r9
    75f8:	d1d9      	bne.n	75ae <ticker_job+0x4ae>
    75fa:	9b03      	ldr	r3, [sp, #12]
    75fc:	e5e6      	b.n	71cc <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    75fe:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    7600:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    7604:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    7606:	692b      	ldr	r3, [r5, #16]
    7608:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    760a:	8aab      	ldrh	r3, [r5, #20]
    760c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    760e:	69ab      	ldr	r3, [r5, #24]
    7610:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    7612:	69eb      	ldr	r3, [r5, #28]
    7614:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    7616:	6a2b      	ldr	r3, [r5, #32]
    7618:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    761a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    761c:	68ab      	ldr	r3, [r5, #8]
    761e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    7620:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7622:	686a      	ldr	r2, [r5, #4]
    7624:	4620      	mov	r0, r4
    7626:	f7ff fcec 	bl	7002 <ticks_to_expire_prep>
	ticker->force = 1;
    762a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    762c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    762e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    7630:	70e3      	strb	r3, [r4, #3]
    7632:	e75b      	b.n	74ec <ticker_job+0x3ec>
    7634:	ff172b5a 	.word	0xff172b5a
    7638:	7f172b59 	.word	0x7f172b59
    763c:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    7640:	6860      	ldr	r0, [r4, #4]
    7642:	2800      	cmp	r0, #0
    7644:	d07b      	beq.n	773e <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    7646:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7648:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    764a:	4b92      	ldr	r3, [pc, #584]	; (7894 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    764c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    764e:	4992      	ldr	r1, [pc, #584]	; (7898 <ticker_job+0x798>)
    7650:	18d3      	adds	r3, r2, r3
    7652:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    7654:	bf9c      	itt	ls
    7656:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    765a:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    765e:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    7660:	bf8b      	itete	hi
    7662:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7664:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    7668:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    766a:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    766c:	4403      	add	r3, r0
		return 1;
    766e:	bf98      	it	ls
    7670:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7672:	4413      	add	r3, r2
			ticker->lazy_current++;
    7674:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7676:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    7678:	3201      	adds	r2, #1
    767a:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    767c:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    767e:	4293      	cmp	r3, r2
    7680:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    7684:	bf89      	itett	hi
    7686:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    7688:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    768a:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    768c:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    768e:	bf9c      	itt	ls
    7690:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    7692:	60a1      	strls	r1, [r4, #8]
    7694:	e73d      	b.n	7512 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    7696:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    7698:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    769a:	b946      	cbnz	r6, 76ae <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    769c:	9f07      	ldr	r7, [sp, #28]
    769e:	42b8      	cmp	r0, r7
    76a0:	d200      	bcs.n	76a4 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    76a2:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    76a4:	930b      	str	r3, [sp, #44]	; 0x2c
    76a6:	9607      	str	r6, [sp, #28]
    76a8:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    76ac:	e740      	b.n	7530 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    76ae:	9308      	str	r3, [sp, #32]
    76b0:	e7f8      	b.n	76a4 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    76b2:	b230      	sxth	r0, r6
    76b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    76b8:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    76bc:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    76be:	68bf      	ldr	r7, [r7, #8]
    76c0:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    76c2:	4567      	cmp	r7, ip
    76c4:	d20a      	bcs.n	76dc <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    76c6:	9f10      	ldr	r7, [sp, #64]	; 0x40
    76c8:	69bf      	ldr	r7, [r7, #24]
    76ca:	2f00      	cmp	r7, #0
    76cc:	f47f af43 	bne.w	7556 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    76d0:	9e11      	ldr	r6, [sp, #68]	; 0x44
    76d2:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    76d6:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    76da:	e739      	b.n	7550 <ticker_job+0x450>
			return TICKER_NULL;
    76dc:	26ff      	movs	r6, #255	; 0xff
    76de:	e73a      	b.n	7556 <ticker_job+0x456>
	while (id_insert !=
    76e0:	9b08      	ldr	r3, [sp, #32]
    76e2:	4598      	cmp	r8, r3
    76e4:	f43f af59 	beq.w	759a <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    76e8:	9b08      	ldr	r3, [sp, #32]
    76ea:	2bff      	cmp	r3, #255	; 0xff
    76ec:	d0a8      	beq.n	7640 <ticker_job+0x540>
    76ee:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    76f0:	b233      	sxth	r3, r6
    76f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    76f6:	9307      	str	r3, [sp, #28]
    76f8:	9a07      	ldr	r2, [sp, #28]
    76fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    76fc:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    7700:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    7702:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    7704:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    7706:	bf88      	it	hi
    7708:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    770a:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    770c:	bf8c      	ite	hi
    770e:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    7710:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    7712:	2a00      	cmp	r2, #0
    7714:	d094      	beq.n	7640 <ticker_job+0x540>
    7716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7718:	4293      	cmp	r3, r2
    771a:	d891      	bhi.n	7640 <ticker_job+0x540>
			    skip_collide <= skip &&
    771c:	78fa      	ldrb	r2, [r7, #3]
    771e:	78e3      	ldrb	r3, [r4, #3]
    7720:	429a      	cmp	r2, r3
    7722:	d28d      	bcs.n	7640 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    7724:	4631      	mov	r1, r6
    7726:	4658      	mov	r0, fp
    7728:	f7ff fc3f 	bl	6faa <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    772c:	78bb      	ldrb	r3, [r7, #2]
    772e:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    7730:	9a07      	ldr	r2, [sp, #28]
    7732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    7734:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    7736:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    773a:	46b2      	mov	sl, r6
    773c:	e6e9      	b.n	7512 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    773e:	2101      	movs	r1, #1
    7740:	e72f      	b.n	75a2 <ticker_job+0x4a2>
		user = &users[count_user];
    7742:	9b03      	ldr	r3, [sp, #12]
    7744:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    7748:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    774a:	786b      	ldrb	r3, [r5, #1]
    774c:	78ea      	ldrb	r2, [r5, #3]
    774e:	429a      	cmp	r2, r3
    7750:	d102      	bne.n	7758 <ticker_job+0x658>
    7752:	3c01      	subs	r4, #1
    7754:	b2e4      	uxtb	r4, r4
    7756:	e551      	b.n	71fc <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    7758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    775c:	011b      	lsls	r3, r3, #4
    775e:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    7760:	5cf3      	ldrb	r3, [r6, r3]
    7762:	2b01      	cmp	r3, #1
    7764:	d025      	beq.n	77b2 <ticker_job+0x6b2>
    7766:	2b02      	cmp	r3, #2
    7768:	d12a      	bne.n	77c0 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    776a:	f8d2 c004 	ldr.w	ip, [r2, #4]
    776e:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    7770:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    7774:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    7778:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    777c:	28ff      	cmp	r0, #255	; 0xff
    777e:	d004      	beq.n	778a <ticker_job+0x68a>
    7780:	6819      	ldr	r1, [r3, #0]
    7782:	f8db 7014 	ldr.w	r7, [fp, #20]
    7786:	42b9      	cmp	r1, r7
    7788:	d023      	beq.n	77d2 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    778a:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    778e:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    7792:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    7794:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    7796:	29ff      	cmp	r1, #255	; 0xff
    7798:	d007      	beq.n	77aa <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    779a:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    779e:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    77a2:	6987      	ldr	r7, [r0, #24]
    77a4:	6880      	ldr	r0, [r0, #8]
    77a6:	b1df      	cbz	r7, 77e0 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    77a8:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    77aa:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    77ae:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    77b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    77b4:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    77b8:	b113      	cbz	r3, 77c0 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    77ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    77bc:	2000      	movs	r0, #0
    77be:	4798      	blx	r3
			first = user->first + 1;
    77c0:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    77c2:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    77c4:	3301      	adds	r3, #1
    77c6:	b2db      	uxtb	r3, r3
				first = 0;
    77c8:	429a      	cmp	r2, r3
    77ca:	bf08      	it	eq
    77cc:	2300      	moveq	r3, #0
			user->first = first;
    77ce:	706b      	strb	r3, [r5, #1]
    77d0:	e7bb      	b.n	774a <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    77d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    77d6:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    77da:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    77de:	e7da      	b.n	7796 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    77e0:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    77e2:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    77e6:	e7d6      	b.n	7796 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    77e8:	9b05      	ldr	r3, [sp, #20]
    77ea:	2bff      	cmp	r3, #255	; 0xff
    77ec:	d107      	bne.n	77fe <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    77ee:	f00a fa55 	bl	11c9c <cntr_cnt_get>
    77f2:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    77f4:	f00a fa16 	bl	11c24 <cntr_start>
    77f8:	b908      	cbnz	r0, 77fe <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    77fa:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    77fe:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    7802:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    7806:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    780a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    780e:	260a      	movs	r6, #10
    7810:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    7812:	f00a fa43 	bl	11c9c <cntr_cnt_get>
		cc = instance->ticks_current;
    7816:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    781a:	1b03      	subs	r3, r0, r4
    781c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    7820:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    7822:	42ab      	cmp	r3, r5
    7824:	bf2c      	ite	cs
    7826:	18e4      	addcs	r4, r4, r3
    7828:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    782a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    782e:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    7830:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    7834:	4620      	mov	r0, r4
    7836:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    7838:	f00a fa30 	bl	11c9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    783c:	1bc0      	subs	r0, r0, r7
    783e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7842:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    7844:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7846:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    784a:	42a0      	cmp	r0, r4
    784c:	f67f ace8 	bls.w	7220 <ticker_job+0x120>
		LL_ASSERT(i);
    7850:	3e01      	subs	r6, #1
    7852:	d1de      	bne.n	7812 <ticker_job+0x712>
    7854:	4b11      	ldr	r3, [pc, #68]	; (789c <ticker_job+0x79c>)
    7856:	9301      	str	r3, [sp, #4]
    7858:	9300      	str	r3, [sp, #0]
    785a:	4a11      	ldr	r2, [pc, #68]	; (78a0 <ticker_job+0x7a0>)
    785c:	4b11      	ldr	r3, [pc, #68]	; (78a4 <ticker_job+0x7a4>)
    785e:	4912      	ldr	r1, [pc, #72]	; (78a8 <ticker_job+0x7a8>)
    7860:	4812      	ldr	r0, [pc, #72]	; (78ac <ticker_job+0x7ac>)
    7862:	f7f9 fb93 	bl	f8c <printk>
    7866:	4040      	eors	r0, r0
    7868:	f380 8811 	msr	BASEPRI, r0
    786c:	f04f 0004 	mov.w	r0, #4
    7870:	df02      	svc	2
	instance->job_guard = 0;
    7872:	2300      	movs	r3, #0
    7874:	f88b 301e 	strb.w	r3, [fp, #30]
    7878:	e4c8      	b.n	720c <ticker_job+0x10c>
	if (!pending) {
    787a:	2b00      	cmp	r3, #0
    787c:	d1f9      	bne.n	7872 <ticker_job+0x772>
		flag_compare_update = 1;
    787e:	2301      	movs	r3, #1
    7880:	9304      	str	r3, [sp, #16]
    7882:	e4b2      	b.n	71ea <ticker_job+0xea>
	while (id_insert !=
    7884:	45b0      	cmp	r8, r6
    7886:	f47f af33 	bne.w	76f0 <ticker_job+0x5f0>
    788a:	e686      	b.n	759a <ticker_job+0x49a>
}
    788c:	b015      	add	sp, #84	; 0x54
    788e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7892:	bf00      	nop
    7894:	ff172b5a 	.word	0xff172b5a
    7898:	7f172b59 	.word	0x7f172b59
    789c:	000145f1 	.word	0x000145f1
    78a0:	00015373 	.word	0x00015373
    78a4:	00016379 	.word	0x00016379
    78a8:	000153c2 	.word	0x000153c2
    78ac:	00016393 	.word	0x00016393

000078b0 <ticker_init>:
{
    78b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    78b2:	4d1a      	ldr	r5, [pc, #104]	; (791c <ticker_init+0x6c>)
{
    78b4:	9f05      	ldr	r7, [sp, #20]
    78b6:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    78ba:	262c      	movs	r6, #44	; 0x2c
    78bc:	4346      	muls	r6, r0
    78be:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    78c2:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    78c4:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    78c8:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    78ca:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    78ce:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    78d2:	3b01      	subs	r3, #1
    78d4:	b2db      	uxtb	r3, r3
    78d6:	2bff      	cmp	r3, #255	; 0xff
    78d8:	d111      	bne.n	78fe <ticker_init+0x4e>
	if (count_op) {
    78da:	b9ec      	cbnz	r4, 7918 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    78dc:	222c      	movs	r2, #44	; 0x2c
    78de:	fb02 5200 	mla	r2, r2, r0, r5
    78e2:	9908      	ldr	r1, [sp, #32]
    78e4:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    78e6:	9909      	ldr	r1, [sp, #36]	; 0x24
    78e8:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    78ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    78ec:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    78ee:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    78f0:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    78f2:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    78f4:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    78f6:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    78f8:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    78fa:	4620      	mov	r0, r4
    78fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    78fe:	b21a      	sxth	r2, r3
    7900:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    7904:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    7906:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    790a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    790e:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7910:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    7914:	b2e4      	uxtb	r4, r4
    7916:	e7dc      	b.n	78d2 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7918:	2001      	movs	r0, #1
}
    791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    791c:	200007c4 	.word	0x200007c4

00007920 <ticker_trigger>:
	instance = &_instance[instance_index];
    7920:	4a07      	ldr	r2, [pc, #28]	; (7940 <ticker_trigger+0x20>)
    7922:	212c      	movs	r1, #44	; 0x2c
    7924:	fb00 2301 	mla	r3, r0, r1, r2
{
    7928:	b410      	push	{r4}
	if (instance->sched_cb) {
    792a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    792c:	b12c      	cbz	r4, 793a <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    792e:	46a4      	mov	ip, r4
    7930:	2201      	movs	r2, #1
    7932:	2103      	movs	r1, #3
    7934:	2002      	movs	r0, #2
}
    7936:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7938:	4760      	bx	ip
}
    793a:	bc10      	pop	{r4}
    793c:	4770      	bx	lr
    793e:	bf00      	nop
    7940:	200007c4 	.word	0x200007c4

00007944 <ticker_start>:
{
    7944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7948:	4f25      	ldr	r7, [pc, #148]	; (79e0 <ticker_start+0x9c>)
    794a:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    794e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7950:	fb08 7000 	mla	r0, r8, r0, r7
    7954:	fa0f fc81 	sxth.w	ip, r1
    7958:	f8d0 e004 	ldr.w	lr, [r0, #4]
    795c:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    7960:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    7964:	78f4      	ldrb	r4, [r6, #3]
    7966:	1c65      	adds	r5, r4, #1
    7968:	b2ed      	uxtb	r5, r5
		last = 0;
    796a:	45ae      	cmp	lr, r5
    796c:	bf98      	it	ls
    796e:	2500      	movls	r5, #0
	if (last == user->first) {
    7970:	f896 e001 	ldrb.w	lr, [r6, #1]
    7974:	45ae      	cmp	lr, r5
    7976:	d02f      	beq.n	79d8 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    7978:	f8d6 c004 	ldr.w	ip, [r6, #4]
    797c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7980:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    7984:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    7988:	f04f 0a03 	mov.w	sl, #3
    798c:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7990:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7992:	9b08      	ldr	r3, [sp, #32]
    7994:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7996:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7998:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    799a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    799c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    799e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79a0:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    79a2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    79a6:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    79a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    79aa:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    79ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    79ae:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    79b0:	2302      	movs	r3, #2
    79b2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    79b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    79b6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    79b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    79ba:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    79bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    79be:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    79c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    79c2:	6a03      	ldr	r3, [r0, #32]
    79c4:	4608      	mov	r0, r1
    79c6:	4798      	blx	r3
    79c8:	fb09 7308 	mla	r3, r9, r8, r7
    79cc:	2200      	movs	r2, #0
    79ce:	2104      	movs	r1, #4
    79d0:	47a8      	blx	r5
	return user_op->status;
    79d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    79d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    79d8:	2001      	movs	r0, #1
}
    79da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79de:	bf00      	nop
    79e0:	200007c4 	.word	0x200007c4

000079e4 <ticker_update>:
{
    79e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    79e8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7a7c <ticker_update+0x98>
    79ec:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    79f0:	fb0a 8e00 	mla	lr, sl, r0, r8
    79f4:	b20f      	sxth	r7, r1
    79f6:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    79fa:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    79fc:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    7a00:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    7a04:	78c4      	ldrb	r4, [r0, #3]
    7a06:	1c66      	adds	r6, r4, #1
    7a08:	b2f6      	uxtb	r6, r6
		last = 0;
    7a0a:	42b5      	cmp	r5, r6
    7a0c:	bf98      	it	ls
    7a0e:	2600      	movls	r6, #0
	if (last == user->first) {
    7a10:	7845      	ldrb	r5, [r0, #1]
    7a12:	42b5      	cmp	r5, r6
    7a14:	d02f      	beq.n	7a76 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    7a16:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7a1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7a1e:	0125      	lsls	r5, r4, #4
    7a20:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7a24:	2704      	movs	r7, #4
    7a26:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7a2a:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7a2c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7a30:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7a32:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7a36:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7a38:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7a3c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    7a3e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7a42:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    7a44:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    7a48:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    7a4a:	2302      	movs	r3, #2
    7a4c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a50:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7a54:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7a56:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7a58:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7a5a:	f8de 3020 	ldr.w	r3, [lr, #32]
    7a5e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7a62:	4608      	mov	r0, r1
    7a64:	4798      	blx	r3
    7a66:	fb09 830a 	mla	r3, r9, sl, r8
    7a6a:	2200      	movs	r2, #0
    7a6c:	4639      	mov	r1, r7
    7a6e:	47a8      	blx	r5
	return user_op->status;
    7a70:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7a76:	2001      	movs	r0, #1
}
    7a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a7c:	200007c4 	.word	0x200007c4

00007a80 <ticker_stop>:
{
    7a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7a84:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7af4 <ticker_stop+0x74>
    7a88:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7a8c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7a90:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7a92:	f8de 0004 	ldr.w	r0, [lr, #4]
    7a96:	b20e      	sxth	r6, r1
    7a98:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7a9c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7aa0:	78fc      	ldrb	r4, [r7, #3]
    7aa2:	1c65      	adds	r5, r4, #1
    7aa4:	b2ed      	uxtb	r5, r5
		last = 0;
    7aa6:	42a8      	cmp	r0, r5
    7aa8:	bf98      	it	ls
    7aaa:	2500      	movls	r5, #0
	if (last == user->first) {
    7aac:	7878      	ldrb	r0, [r7, #1]
    7aae:	42a8      	cmp	r0, r5
    7ab0:	d01d      	beq.n	7aee <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    7ab2:	6878      	ldr	r0, [r7, #4]
    7ab4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7ab8:	0124      	lsls	r4, r4, #4
    7aba:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7abc:	f04f 0c05 	mov.w	ip, #5
    7ac0:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    7ac4:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    7ac6:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    7ac8:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    7aca:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7acc:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    7ace:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7ad0:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7ad2:	f8de 3020 	ldr.w	r3, [lr, #32]
    7ad6:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7ada:	4608      	mov	r0, r1
    7adc:	4798      	blx	r3
    7ade:	fb08 930a 	mla	r3, r8, sl, r9
    7ae2:	2200      	movs	r2, #0
    7ae4:	2104      	movs	r1, #4
    7ae6:	47a0      	blx	r4
	return user_op->status;
    7ae8:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7aee:	2001      	movs	r0, #1
}
    7af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7af4:	200007c4 	.word	0x200007c4

00007af8 <ticker_next_slot_get>:
{
    7af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7afc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7b78 <ticker_next_slot_get+0x80>
    7b00:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    7b04:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7b06:	fb0a 8000 	mla	r0, sl, r0, r8
    7b0a:	fa0f fe81 	sxth.w	lr, r1
    7b0e:	6845      	ldr	r5, [r0, #4]
    7b10:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    7b14:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    7b18:	78fc      	ldrb	r4, [r7, #3]
    7b1a:	1c66      	adds	r6, r4, #1
    7b1c:	b2f6      	uxtb	r6, r6
		last = 0;
    7b1e:	42b5      	cmp	r5, r6
    7b20:	bf98      	it	ls
    7b22:	2600      	movls	r6, #0
	if (last == user->first) {
    7b24:	787d      	ldrb	r5, [r7, #1]
    7b26:	42b5      	cmp	r5, r6
    7b28:	d023      	beq.n	7b72 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    7b2a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    7b2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7b32:	0125      	lsls	r5, r4, #4
    7b34:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7b38:	f04f 0e02 	mov.w	lr, #2
    7b3c:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    7b40:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7b42:	9b08      	ldr	r3, [sp, #32]
    7b44:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    7b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b48:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    7b4a:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    7b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    7b4e:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    7b50:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7b52:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7b56:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7b58:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7b5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7b5c:	6a03      	ldr	r3, [r0, #32]
    7b5e:	4608      	mov	r0, r1
    7b60:	4798      	blx	r3
    7b62:	fb09 830a 	mla	r3, r9, sl, r8
    7b66:	2200      	movs	r2, #0
    7b68:	2104      	movs	r1, #4
    7b6a:	47a8      	blx	r5
	return user_op->status;
    7b6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7b72:	2001      	movs	r0, #1
}
    7b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b78:	200007c4 	.word	0x200007c4

00007b7c <ticker_job_idle_get>:
{
    7b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7b80:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7bf0 <ticker_job_idle_get+0x74>
    7b84:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7b88:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7b8c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7b8e:	f8de 0004 	ldr.w	r0, [lr, #4]
    7b92:	b20e      	sxth	r6, r1
    7b94:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7b98:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7b9c:	78fc      	ldrb	r4, [r7, #3]
    7b9e:	1c65      	adds	r5, r4, #1
    7ba0:	b2ed      	uxtb	r5, r5
		last = 0;
    7ba2:	42a8      	cmp	r0, r5
    7ba4:	bf98      	it	ls
    7ba6:	2500      	movls	r5, #0
	if (last == user->first) {
    7ba8:	7878      	ldrb	r0, [r7, #1]
    7baa:	42a8      	cmp	r0, r5
    7bac:	d01d      	beq.n	7bea <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    7bae:	6878      	ldr	r0, [r7, #4]
    7bb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7bb4:	0124      	lsls	r4, r4, #4
    7bb6:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    7bb8:	f04f 0c01 	mov.w	ip, #1
    7bbc:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    7bc0:	20ff      	movs	r0, #255	; 0xff
    7bc2:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7bc4:	2002      	movs	r0, #2
    7bc6:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7bc8:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    7bca:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7bcc:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7bce:	f8de 3020 	ldr.w	r3, [lr, #32]
    7bd2:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7bd6:	4608      	mov	r0, r1
    7bd8:	4798      	blx	r3
    7bda:	fb08 930a 	mla	r3, r8, sl, r9
    7bde:	2200      	movs	r2, #0
    7be0:	2104      	movs	r1, #4
    7be2:	47a0      	blx	r4
	return user_op->status;
    7be4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7bea:	2001      	movs	r0, #1
}
    7bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bf0:	200007c4 	.word	0x200007c4

00007bf4 <ticker_job_sched>:
{
    7bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7bf8:	4c08      	ldr	r4, [pc, #32]	; (7c1c <ticker_job_sched+0x28>)
    7bfa:	252c      	movs	r5, #44	; 0x2c
    7bfc:	fb05 4300 	mla	r3, r5, r0, r4
{
    7c00:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c02:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    7c04:	6a1b      	ldr	r3, [r3, #32]
    7c06:	4608      	mov	r0, r1
    7c08:	4798      	blx	r3
    7c0a:	fb06 4305 	mla	r3, r6, r5, r4
    7c0e:	46bc      	mov	ip, r7
    7c10:	2200      	movs	r2, #0
    7c12:	2104      	movs	r1, #4
}
    7c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c18:	4760      	bx	ip
    7c1a:	bf00      	nop
    7c1c:	200007c4 	.word	0x200007c4

00007c20 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    7c20:	f00a b83c 	b.w	11c9c <cntr_cnt_get>

00007c24 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7c24:	1a40      	subs	r0, r0, r1
}
    7c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7c2a:	4770      	bx	lr

00007c2c <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    7c2c:	b508      	push	{r3, lr}
    7c2e:	4603      	mov	r3, r0
	if (addr_type > 1) {
    7c30:	2b01      	cmp	r3, #1
{
    7c32:	4608      	mov	r0, r1
	if (addr_type > 1) {
    7c34:	d80e      	bhi.n	7c54 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    7c36:	b133      	cbz	r3, 7c46 <ll_addr_get+0x1a>
		if (bdaddr) {
    7c38:	b119      	cbz	r1, 7c42 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    7c3a:	2206      	movs	r2, #6
    7c3c:	4906      	ldr	r1, [pc, #24]	; (7c58 <ll_addr_get+0x2c>)
    7c3e:	f7f9 ffdd 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    7c42:	4805      	ldr	r0, [pc, #20]	; (7c58 <ll_addr_get+0x2c>)
    7c44:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    7c46:	b119      	cbz	r1, 7c50 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    7c48:	2206      	movs	r2, #6
    7c4a:	4904      	ldr	r1, [pc, #16]	; (7c5c <ll_addr_get+0x30>)
    7c4c:	f7f9 ffd6 	bl	1bfc <memcpy>
	}

	return pub_addr;
    7c50:	4802      	ldr	r0, [pc, #8]	; (7c5c <ll_addr_get+0x30>)
}
    7c52:	bd08      	pop	{r3, pc}
		return NULL;
    7c54:	2000      	movs	r0, #0
    7c56:	bd08      	pop	{r3, pc}
    7c58:	20000822 	.word	0x20000822
    7c5c:	2000081c 	.word	0x2000081c

00007c60 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    7c60:	b570      	push	{r4, r5, r6, lr}
    7c62:	4606      	mov	r6, r0
    7c64:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    7c66:	f008 f8b3 	bl	fdd0 <ll_adv_is_enabled>
    7c6a:	4604      	mov	r4, r0
    7c6c:	b110      	cbz	r0, 7c74 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    7c6e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    7c70:	4620      	mov	r0, r4
    7c72:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    7c74:	f008 f8c0 	bl	fdf8 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    7c78:	f010 0f06 	tst.w	r0, #6
    7c7c:	d1f7      	bne.n	7c6e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7c7e:	2206      	movs	r2, #6
    7c80:	4629      	mov	r1, r5
	if (addr_type) {
    7c82:	b11e      	cbz	r6, 7c8c <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7c84:	4802      	ldr	r0, [pc, #8]	; (7c90 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7c86:	f7f9 ffb9 	bl	1bfc <memcpy>
    7c8a:	e7f1      	b.n	7c70 <ll_addr_set+0x10>
    7c8c:	4801      	ldr	r0, [pc, #4]	; (7c94 <ll_addr_set+0x34>)
    7c8e:	e7fa      	b.n	7c86 <ll_addr_set+0x26>
    7c90:	20000822 	.word	0x20000822
    7c94:	2000081c 	.word	0x2000081c

00007c98 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    7c98:	2300      	movs	r3, #0
    7c9a:	7003      	strb	r3, [r0, #0]
	*max = 0;
    7c9c:	700b      	strb	r3, [r1, #0]
    7c9e:	4770      	bx	lr

00007ca0 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    7ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7ca2:	4607      	mov	r7, r0
    7ca4:	460e      	mov	r6, r1
	while (len) {
    7ca6:	460c      	mov	r4, r1
    7ca8:	1b35      	subs	r5, r6, r4
    7caa:	443d      	add	r5, r7
    7cac:	b18c      	cbz	r4, 7cd2 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    7cae:	f7f9 f999 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    7cb2:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    7cb4:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    7cb6:	d907      	bls.n	7cc8 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    7cb8:	2204      	movs	r2, #4
    7cba:	eb0d 0102 	add.w	r1, sp, r2
    7cbe:	4628      	mov	r0, r5
    7cc0:	f7f9 ff9c 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    7cc4:	3c04      	subs	r4, #4
    7cc6:	e7ef      	b.n	7ca8 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    7cc8:	4622      	mov	r2, r4
    7cca:	a901      	add	r1, sp, #4
    7ccc:	4628      	mov	r0, r5
    7cce:	f7f9 ff95 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    7cd2:	2000      	movs	r0, #0
    7cd4:	b003      	add	sp, #12
    7cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007cd8 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    7cd8:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    7cda:	2300      	movs	r3, #0
    7cdc:	f00a f812 	bl	11d04 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    7ce0:	2000      	movs	r0, #0
    7ce2:	bd08      	pop	{r3, pc}

00007ce4 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    7ce4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    7ce6:	4802      	ldr	r0, [pc, #8]	; (7cf0 <_hci_driver_init+0xc>)
    7ce8:	f7fb fe26 	bl	3938 <bt_hci_driver_register>

	return 0;
}
    7cec:	2000      	movs	r0, #0
    7cee:	bd08      	pop	{r3, pc}
    7cf0:	000163e4 	.word	0x000163e4

00007cf4 <recv_thread>:
{
    7cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    7cf6:	4d28      	ldr	r5, [pc, #160]	; (7d98 <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7cf8:	2600      	movs	r6, #0
    7cfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7cfe:	4628      	mov	r0, r5
    7d00:	f00b fc1e 	bl	13540 <_impl_k_queue_get>
		if (node_rx && !buf) {
    7d04:	4604      	mov	r4, r0
    7d06:	2800      	cmp	r0, #0
    7d08:	d036      	beq.n	7d78 <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    7d0a:	f001 fd0f 	bl	972c <hci_get_class>
	switch (class) {
    7d0e:	1e03      	subs	r3, r0, #0
    7d10:	9403      	str	r4, [sp, #12]
    7d12:	db03      	blt.n	7d1c <recv_thread+0x28>
    7d14:	2b02      	cmp	r3, #2
    7d16:	dd10      	ble.n	7d3a <recv_thread+0x46>
    7d18:	2b03      	cmp	r3, #3
    7d1a:	d030      	beq.n	7d7e <recv_thread+0x8a>
		LL_ASSERT(0);
    7d1c:	4b1f      	ldr	r3, [pc, #124]	; (7d9c <recv_thread+0xa8>)
    7d1e:	9301      	str	r3, [sp, #4]
    7d20:	9300      	str	r3, [sp, #0]
    7d22:	4a1f      	ldr	r2, [pc, #124]	; (7da0 <recv_thread+0xac>)
    7d24:	4b1f      	ldr	r3, [pc, #124]	; (7da4 <recv_thread+0xb0>)
    7d26:	4920      	ldr	r1, [pc, #128]	; (7da8 <recv_thread+0xb4>)
    7d28:	4820      	ldr	r0, [pc, #128]	; (7dac <recv_thread+0xb8>)
    7d2a:	f7f9 f92f 	bl	f8c <printk>
    7d2e:	4040      	eors	r0, r0
    7d30:	f380 8811 	msr	BASEPRI, r0
    7d34:	f04f 0004 	mov.w	r0, #4
    7d38:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    7d3a:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    7d3c:	bf0e      	itee	eq
    7d3e:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7d40:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7d44:	2001      	movne	r0, #1
    7d46:	f7fb fee3 	bl	3b10 <bt_buf_get_rx>
    7d4a:	4604      	mov	r4, r0
		if (buf) {
    7d4c:	b118      	cbz	r0, 7d56 <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    7d4e:	4601      	mov	r1, r0
    7d50:	9803      	ldr	r0, [sp, #12]
    7d52:	f001 f935 	bl	8fc0 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7d56:	9b03      	ldr	r3, [sp, #12]
    7d58:	2100      	movs	r1, #0
    7d5a:	88d8      	ldrh	r0, [r3, #6]
    7d5c:	f008 fcb6 	bl	106cc <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    7d60:	a804      	add	r0, sp, #16
    7d62:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    7d66:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    7d68:	f008 fc3a 	bl	105e0 <ll_rx_mem_release>
		if (buf) {
    7d6c:	b124      	cbz	r4, 7d78 <recv_thread+0x84>
			if (buf->len) {
    7d6e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    7d70:	4620      	mov	r0, r4
			if (buf->len) {
    7d72:	b173      	cbz	r3, 7d92 <recv_thread+0x9e>
				bt_recv(buf);
    7d74:	f7fb f95e 	bl	3034 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7d78:	f00b fe44 	bl	13a04 <_impl_k_yield>
    7d7c:	e7bd      	b.n	7cfa <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    7d7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7d82:	f7fb fec5 	bl	3b10 <bt_buf_get_rx>
    7d86:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    7d88:	4601      	mov	r1, r0
    7d8a:	9803      	ldr	r0, [sp, #12]
    7d8c:	f001 f8d8 	bl	8f40 <hci_acl_encode>
    7d90:	e7e1      	b.n	7d56 <recv_thread+0x62>
				net_buf_unref(buf);
    7d92:	f00a fded 	bl	12970 <net_buf_unref>
    7d96:	e7ef      	b.n	7d78 <recv_thread+0x84>
    7d98:	20003f1c 	.word	0x20003f1c
    7d9c:	000145f1 	.word	0x000145f1
    7da0:	00015373 	.word	0x00015373
    7da4:	000163b6 	.word	0x000163b6
    7da8:	000153c2 	.word	0x000153c2
    7dac:	00015312 	.word	0x00015312

00007db0 <hci_driver_send>:
{
    7db0:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    7db2:	8983      	ldrh	r3, [r0, #12]
{
    7db4:	b087      	sub	sp, #28
    7db6:	4605      	mov	r5, r0
	if (!buf->len) {
    7db8:	b96b      	cbnz	r3, 7dd6 <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    7dba:	4b20      	ldr	r3, [pc, #128]	; (7e3c <hci_driver_send+0x8c>)
    7dbc:	9301      	str	r3, [sp, #4]
    7dbe:	9300      	str	r3, [sp, #0]
    7dc0:	4a1f      	ldr	r2, [pc, #124]	; (7e40 <hci_driver_send+0x90>)
    7dc2:	4b20      	ldr	r3, [pc, #128]	; (7e44 <hci_driver_send+0x94>)
    7dc4:	4920      	ldr	r1, [pc, #128]	; (7e48 <hci_driver_send+0x98>)
    7dc6:	4821      	ldr	r0, [pc, #132]	; (7e4c <hci_driver_send+0x9c>)
    7dc8:	f7f9 f8e0 	bl	f8c <printk>
		return -EINVAL;
    7dcc:	f06f 0415 	mvn.w	r4, #21
}
    7dd0:	4620      	mov	r0, r4
    7dd2:	b007      	add	sp, #28
    7dd4:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7dd6:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    7dd8:	b183      	cbz	r3, 7dfc <hci_driver_send+0x4c>
    7dda:	2b02      	cmp	r3, #2
    7ddc:	d11f      	bne.n	7e1e <hci_driver_send+0x6e>
	err = hci_acl_handle(buf, &evt);
    7dde:	a905      	add	r1, sp, #20
    7de0:	f001 f81e 	bl	8e20 <hci_acl_handle>
    7de4:	4604      	mov	r4, r0
	if (evt) {
    7de6:	9805      	ldr	r0, [sp, #20]
    7de8:	b108      	cbz	r0, 7dee <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    7dea:	f7fb fcb9 	bl	3760 <bt_recv_prio>
	if (!err) {
    7dee:	2c00      	cmp	r4, #0
    7df0:	d1ee      	bne.n	7dd0 <hci_driver_send+0x20>
		net_buf_unref(buf);
    7df2:	4628      	mov	r0, r5
    7df4:	f00a fdbc 	bl	12970 <net_buf_unref>
    7df8:	2400      	movs	r4, #0
    7dfa:	e7e9      	b.n	7dd0 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    7dfc:	f000 faaa 	bl	8354 <hci_cmd_handle>
	if (evt) {
    7e00:	4602      	mov	r2, r0
    7e02:	2800      	cmp	r0, #0
    7e04:	d0f5      	beq.n	7df2 <hci_driver_send+0x42>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    7e06:	6883      	ldr	r3, [r0, #8]
    7e08:	7819      	ldrb	r1, [r3, #0]
    7e0a:	2913      	cmp	r1, #19
    7e0c:	d812      	bhi.n	7e34 <hci_driver_send+0x84>
    7e0e:	2301      	movs	r3, #1
    7e10:	408b      	lsls	r3, r1
    7e12:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    7e16:	d00d      	beq.n	7e34 <hci_driver_send+0x84>
			bt_recv_prio(evt);
    7e18:	f7fb fca2 	bl	3760 <bt_recv_prio>
    7e1c:	e7e9      	b.n	7df2 <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    7e1e:	4a07      	ldr	r2, [pc, #28]	; (7e3c <hci_driver_send+0x8c>)
    7e20:	9202      	str	r2, [sp, #8]
    7e22:	e88d 000c 	stmia.w	sp, {r2, r3}
    7e26:	4908      	ldr	r1, [pc, #32]	; (7e48 <hci_driver_send+0x98>)
    7e28:	4b06      	ldr	r3, [pc, #24]	; (7e44 <hci_driver_send+0x94>)
    7e2a:	4a05      	ldr	r2, [pc, #20]	; (7e40 <hci_driver_send+0x90>)
    7e2c:	4808      	ldr	r0, [pc, #32]	; (7e50 <hci_driver_send+0xa0>)
    7e2e:	f7f9 f8ad 	bl	f8c <printk>
    7e32:	e7cb      	b.n	7dcc <hci_driver_send+0x1c>
			bt_recv(evt);
    7e34:	4610      	mov	r0, r2
    7e36:	f7fb f8fd 	bl	3034 <bt_recv>
    7e3a:	e7da      	b.n	7df2 <hci_driver_send+0x42>
    7e3c:	000145f1 	.word	0x000145f1
    7e40:	00015373 	.word	0x00015373
    7e44:	000163c2 	.word	0x000163c2
    7e48:	000153c2 	.word	0x000153c2
    7e4c:	00016425 	.word	0x00016425
    7e50:	00016446 	.word	0x00016446

00007e54 <prio_recv_thread>:
{
    7e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7e56:	4d14      	ldr	r5, [pc, #80]	; (7ea8 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    7e58:	4e14      	ldr	r6, [pc, #80]	; (7eac <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    7e5a:	f10d 0102 	add.w	r1, sp, #2
    7e5e:	a801      	add	r0, sp, #4
    7e60:	f008 fb86 	bl	10570 <ll_rx_get>
    7e64:	4604      	mov	r4, r0
    7e66:	b940      	cbnz	r0, 7e7a <prio_recv_thread+0x26>
		if (node_rx) {
    7e68:	9b01      	ldr	r3, [sp, #4]
    7e6a:	b1bb      	cbz	r3, 7e9c <prio_recv_thread+0x48>
			ll_rx_dequeue();
    7e6c:	f008 fe62 	bl	10b34 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    7e70:	9901      	ldr	r1, [sp, #4]
    7e72:	4630      	mov	r0, r6
    7e74:	f00b fb40 	bl	134f8 <k_queue_append>
    7e78:	e7ef      	b.n	7e5a <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7e7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7e7e:	2001      	movs	r0, #1
    7e80:	f7fb fe46 	bl	3b10 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7e84:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7e86:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7e88:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7e8c:	f001 fc3a 	bl	9704 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    7e90:	4638      	mov	r0, r7
    7e92:	f7fb fc65 	bl	3760 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7e96:	f00b fdb5 	bl	13a04 <_impl_k_yield>
    7e9a:	e7de      	b.n	7e5a <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7ea0:	4628      	mov	r0, r5
    7ea2:	f00b fe16 	bl	13ad2 <_impl_k_sem_take>
    7ea6:	e7d8      	b.n	7e5a <prio_recv_thread+0x6>
    7ea8:	20003f04 	.word	0x20003f04
    7eac:	20003f1c 	.word	0x20003f1c

00007eb0 <hci_driver_open>:
{
    7eb0:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    7eb2:	481a      	ldr	r0, [pc, #104]	; (7f1c <hci_driver_open+0x6c>)
{
    7eb4:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    7eb6:	f008 ff1b 	bl	10cf0 <ll_init>
	if (err) {
    7eba:	4604      	mov	r4, r0
    7ebc:	b160      	cbz	r0, 7ed8 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    7ebe:	4b18      	ldr	r3, [pc, #96]	; (7f20 <hci_driver_open+0x70>)
    7ec0:	9302      	str	r3, [sp, #8]
    7ec2:	e88d 0018 	stmia.w	sp, {r3, r4}
    7ec6:	4a17      	ldr	r2, [pc, #92]	; (7f24 <hci_driver_open+0x74>)
    7ec8:	4b17      	ldr	r3, [pc, #92]	; (7f28 <hci_driver_open+0x78>)
    7eca:	4918      	ldr	r1, [pc, #96]	; (7f2c <hci_driver_open+0x7c>)
    7ecc:	4818      	ldr	r0, [pc, #96]	; (7f30 <hci_driver_open+0x80>)
    7ece:	f7f9 f85d 	bl	f8c <printk>
}
    7ed2:	4620      	mov	r0, r4
    7ed4:	b006      	add	sp, #24
    7ed6:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    7ed8:	f001 fc40 	bl	975c <hci_init>

    7edc:	f06f 0309 	mvn.w	r3, #9
    7ee0:	9303      	str	r3, [sp, #12]
    7ee2:	9405      	str	r4, [sp, #20]
    7ee4:	9404      	str	r4, [sp, #16]
    7ee6:	9402      	str	r4, [sp, #8]
    7ee8:	9401      	str	r4, [sp, #4]
    7eea:	9400      	str	r4, [sp, #0]
    7eec:	4b11      	ldr	r3, [pc, #68]	; (7f34 <hci_driver_open+0x84>)
    7eee:	4912      	ldr	r1, [pc, #72]	; (7f38 <hci_driver_open+0x88>)
    7ef0:	4812      	ldr	r0, [pc, #72]	; (7f3c <hci_driver_open+0x8c>)
    7ef2:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    7ef6:	f00b ffc1 	bl	13e7c <_impl_k_thread_create>
    7efa:	f06f 0307 	mvn.w	r3, #7
    7efe:	9303      	str	r3, [sp, #12]
    7f00:	9405      	str	r4, [sp, #20]
    7f02:	9404      	str	r4, [sp, #16]
    7f04:	9402      	str	r4, [sp, #8]
    7f06:	9401      	str	r4, [sp, #4]
    7f08:	9400      	str	r4, [sp, #0]
    7f0a:	4b0d      	ldr	r3, [pc, #52]	; (7f40 <hci_driver_open+0x90>)
    7f0c:	490d      	ldr	r1, [pc, #52]	; (7f44 <hci_driver_open+0x94>)
    7f0e:	480e      	ldr	r0, [pc, #56]	; (7f48 <hci_driver_open+0x98>)
    7f10:	f240 522c 	movw	r2, #1324	; 0x52c
    7f14:	f00b ffb2 	bl	13e7c <_impl_k_thread_create>
    7f18:	e7db      	b.n	7ed2 <hci_driver_open+0x22>
    7f1a:	bf00      	nop
    7f1c:	20003f04 	.word	0x20003f04
    7f20:	000145f1 	.word	0x000145f1
    7f24:	00015373 	.word	0x00015373
    7f28:	000163d2 	.word	0x000163d2
    7f2c:	000153c2 	.word	0x000153c2
    7f30:	000163f8 	.word	0x000163f8
    7f34:	00007e55 	.word	0x00007e55
    7f38:	200020c0 	.word	0x200020c0
    7f3c:	200018a0 	.word	0x200018a0
    7f40:	00007cf5 	.word	0x00007cf5
    7f44:	200023b0 	.word	0x200023b0
    7f48:	20001830 	.word	0x20001830

00007f4c <sys_put_le32>:
	dst[1] = val >> 8;
    7f4c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    7f50:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    7f52:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    7f54:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    7f56:	0a00      	lsrs	r0, r0, #8
    7f58:	704b      	strb	r3, [r1, #1]
    7f5a:	70c8      	strb	r0, [r1, #3]
    7f5c:	4770      	bx	lr

00007f5e <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    7f5e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    7f60:	3008      	adds	r0, #8
{
    7f62:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f64:	2102      	movs	r1, #2
{
    7f66:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f68:	f00a fd34 	bl	129d4 <net_buf_simple_add>
	hdr->evt = evt;
    7f6c:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    7f6e:	7044      	strb	r4, [r0, #1]
    7f70:	bd38      	pop	{r3, r4, r5, pc}
	...

00007f74 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    7f74:	b538      	push	{r3, r4, r5, lr}
    7f76:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7f7c:	f7fb fdd8 	bl	3b30 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7f80:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7f82:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7f84:	210f      	movs	r1, #15
    7f86:	f7ff ffea 	bl	7f5e <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    7f8a:	2104      	movs	r1, #4
    7f8c:	f104 0008 	add.w	r0, r4, #8
    7f90:	f00a fd20 	bl	129d4 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    7f94:	2301      	movs	r3, #1
    7f96:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    7f98:	4b02      	ldr	r3, [pc, #8]	; (7fa4 <cmd_status+0x30>)
	cs->status = status;
    7f9a:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    7f9c:	881b      	ldrh	r3, [r3, #0]
    7f9e:	8043      	strh	r3, [r0, #2]

	return buf;
}
    7fa0:	4620      	mov	r0, r4
    7fa2:	bd38      	pop	{r3, r4, r5, pc}
    7fa4:	20000828 	.word	0x20000828

00007fa8 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    7fa8:	b570      	push	{r4, r5, r6, lr}
    7faa:	4604      	mov	r4, r0
    7fac:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    7fae:	3201      	adds	r2, #1
{
    7fb0:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    7fb2:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    7fb4:	b2d2      	uxtb	r2, r2
    7fb6:	213e      	movs	r1, #62	; 0x3e
    7fb8:	f7ff ffd1 	bl	7f5e <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    7fbc:	2101      	movs	r1, #1
    7fbe:	4620      	mov	r0, r4
    7fc0:	f00a fd08 	bl	129d4 <net_buf_simple_add>
	me->subevent = subevt;
    7fc4:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    7fc6:	4629      	mov	r1, r5
    7fc8:	4620      	mov	r0, r4
}
    7fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    7fce:	f00a bd01 	b.w	129d4 <net_buf_simple_add>
	...

00007fd4 <cmd_complete>:
{
    7fd4:	b538      	push	{r3, r4, r5, lr}
    7fd6:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    7fdc:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7fde:	f7fb fda7 	bl	3b30 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    7fe2:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    7fe4:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    7fe6:	b2d2      	uxtb	r2, r2
    7fe8:	210e      	movs	r1, #14
    7fea:	f7ff ffb8 	bl	7f5e <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    7fee:	6820      	ldr	r0, [r4, #0]
    7ff0:	2103      	movs	r1, #3
    7ff2:	3008      	adds	r0, #8
    7ff4:	f00a fcee 	bl	129d4 <net_buf_simple_add>
	cc->ncmd = 1;
    7ff8:	2301      	movs	r3, #1
    7ffa:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    7ffc:	4b05      	ldr	r3, [pc, #20]	; (8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>)
    7ffe:	881b      	ldrh	r3, [r3, #0]
    8000:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    8004:	6820      	ldr	r0, [r4, #0]
    8006:	4629      	mov	r1, r5
    8008:	3008      	adds	r0, #8
}
    800a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    800e:	f00a bce1 	b.w	129d4 <net_buf_simple_add>
    8012:	bf00      	nop
    8014:	20000828 	.word	0x20000828

00008018 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8018:	4b0e      	ldr	r3, [pc, #56]	; (8054 <encrypt_change+0x3c>)
{
    801a:	b570      	push	{r4, r5, r6, lr}
    801c:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    801e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8022:	2300      	movs	r3, #0
    8024:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8028:	4313      	orrs	r3, r2
{
    802a:	4604      	mov	r4, r0
    802c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    802e:	d010      	beq.n	8052 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8030:	2204      	movs	r2, #4
    8032:	2108      	movs	r1, #8
    8034:	4628      	mov	r0, r5
    8036:	f7ff ff92 	bl	7f5e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    803a:	2104      	movs	r1, #4
    803c:	f105 0008 	add.w	r0, r5, #8
    8040:	f00a fcc8 	bl	129d4 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    8044:	fab4 f384 	clz	r3, r4
    8048:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    804a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    804c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    8050:	70c3      	strb	r3, [r0, #3]
    8052:	bd70      	pop	{r4, r5, r6, pc}
    8054:	20003d28 	.word	0x20003d28

00008058 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8058:	b570      	push	{r4, r5, r6, lr}
    805a:	4604      	mov	r4, r0
    805c:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    805e:	4b13      	ldr	r3, [pc, #76]	; (80ac <le_remote_feat_complete+0x54>)
{
    8060:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8062:	e9d3 2300 	ldrd	r2, r3, [r3]
    8066:	2200      	movs	r2, #0
    8068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    806c:	4313      	orrs	r3, r2
{
    806e:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8070:	d01b      	beq.n	80aa <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    8072:	4b0f      	ldr	r3, [pc, #60]	; (80b0 <le_remote_feat_complete+0x58>)
    8074:	e9d3 2300 	ldrd	r2, r3, [r3]
    8078:	2300      	movs	r3, #0
    807a:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    807e:	4313      	orrs	r3, r2
    8080:	d013      	beq.n	80aa <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    8082:	220b      	movs	r2, #11
    8084:	2104      	movs	r1, #4
    8086:	f7ff ff8f 	bl	7fa8 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    808a:	2208      	movs	r2, #8
	sep->status = status;
    808c:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    808e:	f8a0 6001 	strh.w	r6, [r0, #1]
    8092:	3003      	adds	r0, #3
	if (!status) {
    8094:	b924      	cbnz	r4, 80a0 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    8096:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    809c:	f7f9 bdae 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    80a0:	2100      	movs	r1, #0
}
    80a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    80a6:	f7f9 bdd5 	b.w	1c54 <memset>
    80aa:	bd70      	pop	{r4, r5, r6, pc}
    80ac:	20003d28 	.word	0x20003d28
    80b0:	20003d30 	.word	0x20003d30

000080b4 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    80b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80b8:	4605      	mov	r5, r0
    80ba:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    80bc:	4b46      	ldr	r3, [pc, #280]	; (81d8 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    80be:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    80c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    80c4:	f240 2801 	movw	r8, #513	; 0x201
    80c8:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    80cc:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    80d0:	ea03 0309 	and.w	r3, r3, r9
    80d4:	ea02 0208 	and.w	r2, r2, r8
    80d8:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    80da:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    80dc:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    80e0:	d077      	beq.n	81d2 <le_conn_complete.part.39+0x11e>
	if (!status) {
    80e2:	2d00      	cmp	r5, #0
    80e4:	d150      	bne.n	8188 <le_conn_complete.part.39+0xd4>
		conn_count++;
    80e6:	4a3d      	ldr	r2, [pc, #244]	; (81dc <le_conn_complete.part.39+0x128>)
    80e8:	6813      	ldr	r3, [r2, #0]
    80ea:	3301      	adds	r3, #1
    80ec:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    80ee:	ea5a 030b 	orrs.w	r3, sl, fp
    80f2:	f101 0803 	add.w	r8, r1, #3
    80f6:	d151      	bne.n	819c <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    80f8:	2212      	movs	r2, #18
    80fa:	2101      	movs	r1, #1
    80fc:	f7ff ff54 	bl	7fa8 <meta_evt>
	lecc->status = 0x00;
    8100:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    8102:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    8106:	7863      	ldrb	r3, [r4, #1]
    8108:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    810a:	78a3      	ldrb	r3, [r4, #2]
    810c:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    810e:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    8110:	2206      	movs	r2, #6
    8112:	4641      	mov	r1, r8
    8114:	3005      	adds	r0, #5
    8116:	f7f9 fd71 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    811a:	8ae3      	ldrh	r3, [r4, #22]
    811c:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8120:	8b23      	ldrh	r3, [r4, #24]
    8122:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8126:	8b63      	ldrh	r3, [r4, #26]
    8128:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    812c:	7f23      	ldrb	r3, [r4, #28]
    812e:	747b      	strb	r3, [r7, #17]
    8130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8134:	221e      	movs	r2, #30
    8136:	210a      	movs	r1, #10
    8138:	f7ff ff36 	bl	7fa8 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    813c:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    813e:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    8140:	2100      	movs	r1, #0
    8142:	f7f9 fd87 	bl	1c54 <memset>
		lecc->status = status;
    8146:	7025      	strb	r5, [r4, #0]
    8148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    814c:	7d63      	ldrb	r3, [r4, #21]
    814e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8152:	2b40      	cmp	r3, #64	; 0x40
    8154:	d138      	bne.n	81c8 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    8156:	2206      	movs	r2, #6
    8158:	f104 0110 	add.w	r1, r4, #16
    815c:	f7f9 fd4e 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    8160:	2206      	movs	r2, #6
    8162:	f104 0109 	add.w	r1, r4, #9
    8166:	f107 0011 	add.w	r0, r7, #17
    816a:	f7f9 fd47 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    816e:	8ae3      	ldrh	r3, [r4, #22]
    8170:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8174:	8b23      	ldrh	r3, [r4, #24]
    8176:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    817a:	8b63      	ldrh	r3, [r4, #26]
    817c:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    8180:	7f23      	ldrb	r3, [r4, #28]
    8182:	777b      	strb	r3, [r7, #29]
    8184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8188:	ea5a 030b 	orrs.w	r3, sl, fp
    818c:	d1d2      	bne.n	8134 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    818e:	2212      	movs	r2, #18
    8190:	2101      	movs	r1, #1
    8192:	f7ff ff09 	bl	7fa8 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    8196:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8198:	4604      	mov	r4, r0
    819a:	e7d1      	b.n	8140 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    819c:	221e      	movs	r2, #30
    819e:	210a      	movs	r1, #10
    81a0:	f7ff ff02 	bl	7fa8 <meta_evt>
		leecc->status = 0x00;
    81a4:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    81a6:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    81aa:	7863      	ldrb	r3, [r4, #1]
    81ac:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    81ae:	78a3      	ldrb	r3, [r4, #2]
    81b0:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    81b2:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    81b4:	2206      	movs	r2, #6
    81b6:	4641      	mov	r1, r8
    81b8:	3005      	adds	r0, #5
    81ba:	f7f9 fd1f 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    81be:	7be3      	ldrb	r3, [r4, #15]
    81c0:	f107 000b 	add.w	r0, r7, #11
    81c4:	2b00      	cmp	r3, #0
    81c6:	d1c1      	bne.n	814c <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    81c8:	2206      	movs	r2, #6
    81ca:	2100      	movs	r1, #0
    81cc:	f7f9 fd42 	bl	1c54 <memset>
    81d0:	e7c6      	b.n	8160 <le_conn_complete.part.39+0xac>
    81d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81d6:	bf00      	nop
    81d8:	20003d30 	.word	0x20003d30
    81dc:	2000082c 	.word	0x2000082c

000081e0 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    81e0:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    81e2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    81e4:	b08a      	sub	sp, #40	; 0x28
    81e6:	4604      	mov	r4, r0
    81e8:	460e      	mov	r6, r1
    81ea:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    81ec:	2b03      	cmp	r3, #3
    81ee:	d820      	bhi.n	8232 <bt_addr_le_to_str.constprop.70+0x52>
    81f0:	e8df f003 	tbb	[pc, r3]
    81f4:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    81f8:	4911      	ldr	r1, [pc, #68]	; (8240 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    81fa:	4628      	mov	r0, r5
    81fc:	f7f9 fcca 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8200:	7862      	ldrb	r2, [r4, #1]
    8202:	9204      	str	r2, [sp, #16]
    8204:	78a2      	ldrb	r2, [r4, #2]
    8206:	9203      	str	r2, [sp, #12]
    8208:	78e2      	ldrb	r2, [r4, #3]
    820a:	9202      	str	r2, [sp, #8]
    820c:	7922      	ldrb	r2, [r4, #4]
    820e:	9201      	str	r2, [sp, #4]
    8210:	7962      	ldrb	r2, [r4, #5]
    8212:	9200      	str	r2, [sp, #0]
    8214:	79a3      	ldrb	r3, [r4, #6]
    8216:	9505      	str	r5, [sp, #20]
    8218:	4a0a      	ldr	r2, [pc, #40]	; (8244 <bt_addr_le_to_str.constprop.70+0x64>)
    821a:	211b      	movs	r1, #27
    821c:	4630      	mov	r0, r6
    821e:	f7f8 fec3 	bl	fa8 <snprintk>
}
    8222:	b00a      	add	sp, #40	; 0x28
    8224:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    8226:	4908      	ldr	r1, [pc, #32]	; (8248 <bt_addr_le_to_str.constprop.70+0x68>)
    8228:	e7e7      	b.n	81fa <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    822a:	4908      	ldr	r1, [pc, #32]	; (824c <bt_addr_le_to_str.constprop.70+0x6c>)
    822c:	e7e5      	b.n	81fa <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    822e:	4908      	ldr	r1, [pc, #32]	; (8250 <bt_addr_le_to_str.constprop.70+0x70>)
    8230:	e7e3      	b.n	81fa <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8232:	4a08      	ldr	r2, [pc, #32]	; (8254 <bt_addr_le_to_str.constprop.70+0x74>)
    8234:	210a      	movs	r1, #10
    8236:	4628      	mov	r0, r5
    8238:	f7f8 feb6 	bl	fa8 <snprintk>
    823c:	e7e0      	b.n	8200 <bt_addr_le_to_str.constprop.70+0x20>
    823e:	bf00      	nop
    8240:	0001455d 	.word	0x0001455d
    8244:	00014586 	.word	0x00014586
    8248:	00014564 	.word	0x00014564
    824c:	0001456b 	.word	0x0001456b
    8250:	00014575 	.word	0x00014575
    8254:	0001457f 	.word	0x0001457f

00008258 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    825c:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    825e:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8260:	4d32      	ldr	r5, [pc, #200]	; (832c <le_adv_ext_report.isra.66+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8262:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8264:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8266:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8268:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    826a:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    826c:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    826e:	b25b      	sxtb	r3, r3
    8270:	9306      	str	r3, [sp, #24]
    8272:	7823      	ldrb	r3, [r4, #0]
    8274:	9201      	str	r2, [sp, #4]
    8276:	09d9      	lsrs	r1, r3, #7
    8278:	9105      	str	r1, [sp, #20]
    827a:	f3c3 1180 	ubfx	r1, r3, #6, #1
    827e:	f003 030f 	and.w	r3, r3, #15
    8282:	9104      	str	r1, [sp, #16]
    8284:	9302      	str	r3, [sp, #8]
    8286:	9500      	str	r5, [sp, #0]
    8288:	4b29      	ldr	r3, [pc, #164]	; (8330 <le_adv_ext_report.isra.66+0xd8>)
    828a:	4a2a      	ldr	r2, [pc, #168]	; (8334 <le_adv_ext_report.isra.66+0xdc>)
    828c:	492a      	ldr	r1, [pc, #168]	; (8338 <le_adv_ext_report.isra.66+0xe0>)
    828e:	482b      	ldr	r0, [pc, #172]	; (833c <le_adv_ext_report.isra.66+0xe4>)
    8290:	f7f8 fe7c 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8294:	7823      	ldrb	r3, [r4, #0]
    8296:	f003 030f 	and.w	r3, r3, #15
    829a:	2b07      	cmp	r3, #7
    829c:	d143      	bne.n	8326 <le_adv_ext_report.isra.66+0xce>
    829e:	7863      	ldrb	r3, [r4, #1]
    82a0:	2b00      	cmp	r3, #0
    82a2:	d040      	beq.n	8326 <le_adv_ext_report.isra.66+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    82a4:	78a3      	ldrb	r3, [r4, #2]
    82a6:	4924      	ldr	r1, [pc, #144]	; (8338 <le_adv_ext_report.isra.66+0xe0>)
    82a8:	9503      	str	r5, [sp, #12]
    82aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    82ae:	099b      	lsrs	r3, r3, #6
    82b0:	9202      	str	r2, [sp, #8]
    82b2:	9301      	str	r3, [sp, #4]
    82b4:	9500      	str	r5, [sp, #0]
    82b6:	4b1e      	ldr	r3, [pc, #120]	; (8330 <le_adv_ext_report.isra.66+0xd8>)
    82b8:	4a1e      	ldr	r2, [pc, #120]	; (8334 <le_adv_ext_report.isra.66+0xdc>)
    82ba:	4821      	ldr	r0, [pc, #132]	; (8340 <le_adv_ext_report.isra.66+0xe8>)
    82bc:	f7f8 fe66 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    82c0:	78a3      	ldrb	r3, [r4, #2]
    82c2:	0699      	lsls	r1, r3, #26
    82c4:	d02f      	beq.n	8326 <le_adv_ext_report.isra.66+0xce>
		if (h->adv_addr) {
    82c6:	78e3      	ldrb	r3, [r4, #3]
    82c8:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    82ca:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    82ce:	d51c      	bpl.n	830a <le_adv_ext_report.isra.66+0xb2>
			addr.type = adv->tx_addr;
    82d0:	7823      	ldrb	r3, [r4, #0]
    82d2:	af12      	add	r7, sp, #72	; 0x48
    82d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    82d8:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    82dc:	2206      	movs	r2, #6
    82de:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    82e0:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    82e4:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    82e8:	f7f9 fc88 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    82ec:	4641      	mov	r1, r8
    82ee:	4638      	mov	r0, r7
    82f0:	f7ff ff76 	bl	81e0 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    82f4:	9502      	str	r5, [sp, #8]
    82f6:	e88d 0120 	stmia.w	sp, {r5, r8}
    82fa:	4b0d      	ldr	r3, [pc, #52]	; (8330 <le_adv_ext_report.isra.66+0xd8>)
    82fc:	4a0d      	ldr	r2, [pc, #52]	; (8334 <le_adv_ext_report.isra.66+0xdc>)
    82fe:	490e      	ldr	r1, [pc, #56]	; (8338 <le_adv_ext_report.isra.66+0xe0>)
    8300:	4810      	ldr	r0, [pc, #64]	; (8344 <le_adv_ext_report.isra.66+0xec>)
			ptr += BDADDR_SIZE;
    8302:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    8306:	f7f8 fe41 	bl	f8c <printk>
		if (h->tx_pwr) {
    830a:	78e3      	ldrb	r3, [r4, #3]
    830c:	065b      	lsls	r3, r3, #25
    830e:	d50a      	bpl.n	8326 <le_adv_ext_report.isra.66+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    8310:	9502      	str	r5, [sp, #8]
    8312:	f996 3000 	ldrsb.w	r3, [r6]
    8316:	9301      	str	r3, [sp, #4]
    8318:	9500      	str	r5, [sp, #0]
    831a:	4b05      	ldr	r3, [pc, #20]	; (8330 <le_adv_ext_report.isra.66+0xd8>)
    831c:	4a05      	ldr	r2, [pc, #20]	; (8334 <le_adv_ext_report.isra.66+0xdc>)
    831e:	4906      	ldr	r1, [pc, #24]	; (8338 <le_adv_ext_report.isra.66+0xe0>)
    8320:	4809      	ldr	r0, [pc, #36]	; (8348 <le_adv_ext_report.isra.66+0xf0>)
    8322:	f7f8 fe33 	bl	f8c <printk>
}
    8326:	b012      	add	sp, #72	; 0x48
    8328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    832c:	000145f1 	.word	0x000145f1
    8330:	000164b4 	.word	0x000164b4
    8334:	000153bb 	.word	0x000153bb
    8338:	000153c2 	.word	0x000153c2
    833c:	00016711 	.word	0x00016711
    8340:	0001675e 	.word	0x0001675e
    8344:	0001678f 	.word	0x0001678f
    8348:	000167a8 	.word	0x000167a8

0000834c <sys_get_le64>:
{
    834c:	4603      	mov	r3, r0
}
    834e:	6800      	ldr	r0, [r0, #0]
    8350:	6859      	ldr	r1, [r3, #4]
    8352:	4770      	bx	lr

00008354 <hci_cmd_handle>:
{
    8354:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    8356:	8981      	ldrh	r1, [r0, #12]
{
    8358:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    835a:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    835c:	2902      	cmp	r1, #2
{
    835e:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    8360:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    8362:	d80b      	bhi.n	837c <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    8364:	4bbe      	ldr	r3, [pc, #760]	; (8660 <hci_cmd_handle+0x30c>)
    8366:	9301      	str	r3, [sp, #4]
    8368:	9300      	str	r3, [sp, #0]
    836a:	4abe      	ldr	r2, [pc, #760]	; (8664 <hci_cmd_handle+0x310>)
    836c:	4bbe      	ldr	r3, [pc, #760]	; (8668 <hci_cmd_handle+0x314>)
    836e:	49bf      	ldr	r1, [pc, #764]	; (866c <hci_cmd_handle+0x318>)
    8370:	48bf      	ldr	r0, [pc, #764]	; (8670 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    8372:	f7f8 fe0b 	bl	f8c <printk>
		return NULL;
    8376:	4628      	mov	r0, r5
}
    8378:	b013      	add	sp, #76	; 0x4c
    837a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    837c:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    837e:	4ebd      	ldr	r6, [pc, #756]	; (8674 <hci_cmd_handle+0x320>)
    8380:	781a      	ldrb	r2, [r3, #0]
    8382:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    8384:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8386:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    838a:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    838c:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    838e:	d907      	bls.n	83a0 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    8390:	4bb3      	ldr	r3, [pc, #716]	; (8660 <hci_cmd_handle+0x30c>)
    8392:	9301      	str	r3, [sp, #4]
    8394:	9300      	str	r3, [sp, #0]
    8396:	4ab3      	ldr	r2, [pc, #716]	; (8664 <hci_cmd_handle+0x310>)
    8398:	4bb3      	ldr	r3, [pc, #716]	; (8668 <hci_cmd_handle+0x314>)
    839a:	49b4      	ldr	r1, [pc, #720]	; (866c <hci_cmd_handle+0x318>)
    839c:	48b6      	ldr	r0, [pc, #728]	; (8678 <hci_cmd_handle+0x324>)
    839e:	e7e8      	b.n	8372 <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    83a0:	2103      	movs	r1, #3
    83a2:	f104 0008 	add.w	r0, r4, #8
    83a6:	f00a fb34 	bl	12a12 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    83aa:	8833      	ldrh	r3, [r6, #0]
    83ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    83b0:	0a9b      	lsrs	r3, r3, #10
    83b2:	2b04      	cmp	r3, #4
    83b4:	f000 80bc 	beq.w	8530 <hci_cmd_handle+0x1dc>
    83b8:	d809      	bhi.n	83ce <hci_cmd_handle+0x7a>
    83ba:	2b01      	cmp	r3, #1
    83bc:	d026      	beq.n	840c <hci_cmd_handle+0xb8>
    83be:	2b03      	cmp	r3, #3
    83c0:	d03b      	beq.n	843a <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    83c2:	2101      	movs	r1, #1
    83c4:	a807      	add	r0, sp, #28
    83c6:	f7ff fe05 	bl	7fd4 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    83ca:	2301      	movs	r3, #1
    83cc:	e298      	b.n	8900 <hci_cmd_handle+0x5ac>
	switch (BT_OGF(_opcode)) {
    83ce:	2b08      	cmp	r3, #8
    83d0:	f000 8168 	beq.w	86a4 <hci_cmd_handle+0x350>
    83d4:	2b3f      	cmp	r3, #63	; 0x3f
    83d6:	d1f4      	bne.n	83c2 <hci_cmd_handle+0x6e>
	switch (ocf) {
    83d8:	3a01      	subs	r2, #1
    83da:	2a09      	cmp	r2, #9
    83dc:	d8f1      	bhi.n	83c2 <hci_cmd_handle+0x6e>
    83de:	a301      	add	r3, pc, #4	; (adr r3, 83e4 <hci_cmd_handle+0x90>)
    83e0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    83e4:	00008c39 	.word	0x00008c39
    83e8:	00008c69 	.word	0x00008c69
    83ec:	00008c93 	.word	0x00008c93
    83f0:	000083c3 	.word	0x000083c3
    83f4:	000083c3 	.word	0x000083c3
    83f8:	00008cd9 	.word	0x00008cd9
    83fc:	000083c3 	.word	0x000083c3
    8400:	00008cab 	.word	0x00008cab
    8404:	00008ce5 	.word	0x00008ce5
    8408:	00008d53 	.word	0x00008d53
	switch (ocf) {
    840c:	2a06      	cmp	r2, #6
    840e:	d006      	beq.n	841e <hci_cmd_handle+0xca>
    8410:	2a1d      	cmp	r2, #29
    8412:	d1d6      	bne.n	83c2 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    8414:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    8416:	8818      	ldrh	r0, [r3, #0]
    8418:	f007 ffbf 	bl	1039a <ll_version_ind_send>
    841c:	e004      	b.n	8428 <hci_cmd_handle+0xd4>
    841e:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    8420:	7899      	ldrb	r1, [r3, #2]
    8422:	8818      	ldrh	r0, [r3, #0]
    8424:	f007 ffcd 	bl	103c2 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8428:	2800      	cmp	r0, #0
    842a:	bf14      	ite	ne
    842c:	200c      	movne	r0, #12
    842e:	2000      	moveq	r0, #0
    8430:	f7ff fda0 	bl	7f74 <cmd_status>
    8434:	9007      	str	r0, [sp, #28]
	return evt;
    8436:	9807      	ldr	r0, [sp, #28]
    8438:	e79e      	b.n	8378 <hci_cmd_handle+0x24>
	switch (ocf) {
    843a:	2a2d      	cmp	r2, #45	; 0x2d
    843c:	d03a      	beq.n	84b4 <hci_cmd_handle+0x160>
    843e:	d820      	bhi.n	8482 <hci_cmd_handle+0x12e>
    8440:	2a01      	cmp	r2, #1
    8442:	d02b      	beq.n	849c <hci_cmd_handle+0x148>
    8444:	2a03      	cmp	r2, #3
    8446:	d1bc      	bne.n	83c2 <hci_cmd_handle+0x6e>
	dup_count = -1;
    8448:	4b8c      	ldr	r3, [pc, #560]	; (867c <hci_cmd_handle+0x328>)
    844a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    844e:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    8450:	4b8b      	ldr	r3, [pc, #556]	; (8680 <hci_cmd_handle+0x32c>)
    8452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8456:	f641 71ff 	movw	r1, #8191	; 0x1fff
    845a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    845e:	4b89      	ldr	r3, [pc, #548]	; (8684 <hci_cmd_handle+0x330>)
    8460:	2000      	movs	r0, #0
    8462:	2100      	movs	r1, #0
    8464:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8468:	4b87      	ldr	r3, [pc, #540]	; (8688 <hci_cmd_handle+0x334>)
    846a:	201f      	movs	r0, #31
    846c:	2100      	movs	r1, #0
    846e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    8472:	f007 fc5d 	bl	fd30 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8476:	2101      	movs	r1, #1
    8478:	a807      	add	r0, sp, #28
    847a:	f7ff fdab 	bl	7fd4 <cmd_complete>
	ccst->status = 0x00;
    847e:	2300      	movs	r3, #0
    8480:	e23e      	b.n	8900 <hci_cmd_handle+0x5ac>
	switch (ocf) {
    8482:	2a7b      	cmp	r2, #123	; 0x7b
    8484:	d02c      	beq.n	84e0 <hci_cmd_handle+0x18c>
    8486:	2a7c      	cmp	r2, #124	; 0x7c
    8488:	d041      	beq.n	850e <hci_cmd_handle+0x1ba>
    848a:	2a63      	cmp	r2, #99	; 0x63
    848c:	d199      	bne.n	83c2 <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    848e:	68a0      	ldr	r0, [r4, #8]
    8490:	f7ff ff5c 	bl	834c <sys_get_le64>
    8494:	4b7b      	ldr	r3, [pc, #492]	; (8684 <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    8496:	e9c3 0100 	strd	r0, r1, [r3]
    849a:	e7ec      	b.n	8476 <hci_cmd_handle+0x122>
	event_mask = sys_get_le64(cmd->events);
    849c:	68a0      	ldr	r0, [r4, #8]
    849e:	f7ff ff55 	bl	834c <sys_get_le64>
    84a2:	4b77      	ldr	r3, [pc, #476]	; (8680 <hci_cmd_handle+0x32c>)
    84a4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    84a8:	4611      	mov	r1, r2
    84aa:	a807      	add	r0, sp, #28
    84ac:	f7ff fd92 	bl	7fd4 <cmd_complete>
	ccst->status = 0x00;
    84b0:	7005      	strb	r5, [r0, #0]
    84b2:	e7c0      	b.n	8436 <hci_cmd_handle+0xe2>
    84b4:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    84b6:	2104      	movs	r1, #4
    84b8:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    84ba:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    84bc:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    84be:	f7ff fd89 	bl	7fd4 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    84c2:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    84c4:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    84c6:	1cc2      	adds	r2, r0, #3
    84c8:	4639      	mov	r1, r7
    84ca:	4630      	mov	r0, r6
    84cc:	f007 ff8d 	bl	103ea <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    84d0:	2800      	cmp	r0, #0
    84d2:	bf14      	ite	ne
    84d4:	2302      	movne	r3, #2
    84d6:	2300      	moveq	r3, #0
    84d8:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    84da:	f8a4 5001 	strh.w	r5, [r4, #1]
    84de:	e7aa      	b.n	8436 <hci_cmd_handle+0xe2>
	handle = sys_le16_to_cpu(cmd->handle);
    84e0:	68a3      	ldr	r3, [r4, #8]
    84e2:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    84e4:	a908      	add	r1, sp, #32
    84e6:	b2a0      	uxth	r0, r4
    84e8:	f007 ff89 	bl	103fe <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    84ec:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    84ee:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    84f0:	a807      	add	r0, sp, #28
    84f2:	f7ff fd6f 	bl	7fd4 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    84f6:	2d00      	cmp	r5, #0
    84f8:	bf14      	ite	ne
    84fa:	230c      	movne	r3, #12
    84fc:	2300      	moveq	r3, #0
    84fe:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8500:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8504:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8508:	f8a0 3003 	strh.w	r3, [r0, #3]
    850c:	e793      	b.n	8436 <hci_cmd_handle+0xe2>
    850e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8510:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    8512:	8859      	ldrh	r1, [r3, #2]
    8514:	b2a0      	uxth	r0, r4
    8516:	f007 ff86 	bl	10426 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    851a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    851c:	2103      	movs	r1, #3
    851e:	a807      	add	r0, sp, #28
    8520:	f7ff fd58 	bl	7fd4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8524:	2d00      	cmp	r5, #0
    8526:	bf14      	ite	ne
    8528:	230c      	movne	r3, #12
    852a:	2300      	moveq	r3, #0
    852c:	7003      	strb	r3, [r0, #0]
    852e:	e27d      	b.n	8a2c <hci_cmd_handle+0x6d8>
	switch (ocf) {
    8530:	3a01      	subs	r2, #1
    8532:	2a08      	cmp	r2, #8
    8534:	f63f af45 	bhi.w	83c2 <hci_cmd_handle+0x6e>
    8538:	a301      	add	r3, pc, #4	; (adr r3, 8540 <hci_cmd_handle+0x1ec>)
    853a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    853e:	bf00      	nop
    8540:	00008565 	.word	0x00008565
    8544:	0000858f 	.word	0x0000858f
    8548:	00008643 	.word	0x00008643
    854c:	000083c3 	.word	0x000083c3
    8550:	000083c3 	.word	0x000083c3
    8554:	000083c3 	.word	0x000083c3
    8558:	000083c3 	.word	0x000083c3
    855c:	000083c3 	.word	0x000083c3
    8560:	0000868d 	.word	0x0000868d
	rp = cmd_complete(evt, sizeof(*rp));
    8564:	2109      	movs	r1, #9
    8566:	a807      	add	r0, sp, #28
    8568:	f7ff fd34 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    856c:	2300      	movs	r3, #0
    856e:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    8570:	7083      	strb	r3, [r0, #2]
    8572:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8574:	f06f 030e 	mvn.w	r3, #14
    8578:	7143      	strb	r3, [r0, #5]
    857a:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    857c:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    857e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    8584:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    8586:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8588:	71c3      	strb	r3, [r0, #7]
    858a:	7203      	strb	r3, [r0, #8]
    858c:	e753      	b.n	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    858e:	2141      	movs	r1, #65	; 0x41
    8590:	a807      	add	r0, sp, #28
    8592:	f7ff fd1f 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8596:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8598:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    859a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    859c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    85a0:	f7f9 fb58 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    85a4:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    85a6:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    85a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    85ac:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    85ae:	79a3      	ldrb	r3, [r4, #6]
    85b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    85b4:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    85b6:	7ae3      	ldrb	r3, [r4, #11]
    85b8:	f043 0304 	orr.w	r3, r3, #4
    85bc:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    85be:	7be3      	ldrb	r3, [r4, #15]
    85c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    85c4:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    85c6:	7c23      	ldrb	r3, [r4, #16]
    85c8:	f043 0302 	orr.w	r3, r3, #2
    85cc:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    85ce:	7de3      	ldrb	r3, [r4, #23]
    85d0:	f043 0304 	orr.w	r3, r3, #4
    85d4:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    85d6:	7ea3      	ldrb	r3, [r4, #26]
    85d8:	f043 0317 	orr.w	r3, r3, #23
    85dc:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    85de:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    85e0:	f043 0309 	orr.w	r3, r3, #9
    85e4:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    85e6:	7863      	ldrb	r3, [r4, #1]
    85e8:	f043 0320 	orr.w	r3, r3, #32
    85ec:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    85ee:	23ff      	movs	r3, #255	; 0xff
    85f0:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    85f2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    85f6:	f063 030f 	orn	r3, r3, #15
    85fa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    85fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    8602:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8606:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    860a:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    860c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    8610:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8614:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    8618:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    861c:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    8620:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8624:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8628:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    862c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8630:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    8634:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8638:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    863c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    8640:	e6f9      	b.n	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8642:	2109      	movs	r1, #9
    8644:	a807      	add	r0, sp, #28
    8646:	f7ff fcc5 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    864a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    864c:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    864e:	2208      	movs	r2, #8
	rp->status = 0x00;
    8650:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8654:	f7f9 fafe 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    8658:	2360      	movs	r3, #96	; 0x60
    865a:	7163      	strb	r3, [r4, #5]
    865c:	e6eb      	b.n	8436 <hci_cmd_handle+0xe2>
    865e:	bf00      	nop
    8660:	000145f1 	.word	0x000145f1
    8664:	00015373 	.word	0x00015373
    8668:	00016480 	.word	0x00016480
    866c:	000153c2 	.word	0x000153c2
    8670:	000165c3 	.word	0x000165c3
    8674:	20000828 	.word	0x20000828
    8678:	000165e9 	.word	0x000165e9
    867c:	20000830 	.word	0x20000830
    8680:	20003d28 	.word	0x20003d28
    8684:	200008b8 	.word	0x200008b8
    8688:	20003d30 	.word	0x20003d30
	rp = cmd_complete(evt, sizeof(*rp));
    868c:	2107      	movs	r1, #7
    868e:	a807      	add	r0, sp, #28
    8690:	f7ff fca0 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8694:	4601      	mov	r1, r0
    8696:	2300      	movs	r3, #0
    8698:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    869c:	4618      	mov	r0, r3
    869e:	f7ff fac5 	bl	7c2c <ll_addr_get>
    86a2:	e6c8      	b.n	8436 <hci_cmd_handle+0xe2>
	switch (ocf) {
    86a4:	3a01      	subs	r2, #1
    86a6:	2a4d      	cmp	r2, #77	; 0x4d
    86a8:	f63f ae8b 	bhi.w	83c2 <hci_cmd_handle+0x6e>
    86ac:	a301      	add	r3, pc, #4	; (adr r3, 86b4 <hci_cmd_handle+0x360>)
    86ae:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    86b2:	bf00      	nop
    86b4:	000087ed 	.word	0x000087ed
    86b8:	000087f7 	.word	0x000087f7
    86bc:	0000880f 	.word	0x0000880f
    86c0:	000083c3 	.word	0x000083c3
    86c4:	00008833 	.word	0x00008833
    86c8:	000083c3 	.word	0x000083c3
    86cc:	000083c3 	.word	0x000083c3
    86d0:	000083c3 	.word	0x000083c3
    86d4:	000083c3 	.word	0x000083c3
    86d8:	000083c3 	.word	0x000083c3
    86dc:	000088d7 	.word	0x000088d7
    86e0:	00008905 	.word	0x00008905
    86e4:	00008925 	.word	0x00008925
    86e8:	0000894f 	.word	0x0000894f
    86ec:	0000883f 	.word	0x0000883f
    86f0:	00008855 	.word	0x00008855
    86f4:	00008867 	.word	0x00008867
    86f8:	0000886f 	.word	0x0000886f
    86fc:	000089ef 	.word	0x000089ef
    8700:	000089af 	.word	0x000089af
    8704:	000089cb 	.word	0x000089cb
    8708:	000089e5 	.word	0x000089e5
    870c:	00008877 	.word	0x00008877
    8710:	0000889d 	.word	0x0000889d
    8714:	000089b7 	.word	0x000089b7
    8718:	000083c3 	.word	0x000083c3
    871c:	000083c3 	.word	0x000083c3
    8720:	000088b3 	.word	0x000088b3
    8724:	000083c3 	.word	0x000083c3
    8728:	000083c3 	.word	0x000083c3
    872c:	000083c3 	.word	0x000083c3
    8730:	00008a09 	.word	0x00008a09
    8734:	00008a33 	.word	0x00008a33
    8738:	00008a41 	.word	0x00008a41
    873c:	00008a51 	.word	0x00008a51
    8740:	00008a69 	.word	0x00008a69
    8744:	000083c3 	.word	0x000083c3
    8748:	000083c3 	.word	0x000083c3
    874c:	00008b81 	.word	0x00008b81
    8750:	00008b8f 	.word	0x00008b8f
    8754:	00008b97 	.word	0x00008b97
    8758:	00008ba7 	.word	0x00008ba7
    875c:	00008bb9 	.word	0x00008bb9
    8760:	00008bd7 	.word	0x00008bd7
    8764:	00008bf5 	.word	0x00008bf5
    8768:	00008c0b 	.word	0x00008c0b
    876c:	00008a85 	.word	0x00008a85
    8770:	00008ab1 	.word	0x00008ab1
    8774:	00008b07 	.word	0x00008b07
    8778:	00008b25 	.word	0x00008b25
    877c:	000083c3 	.word	0x000083c3
    8780:	000083c3 	.word	0x000083c3
    8784:	000083c3 	.word	0x000083c3
    8788:	000083c3 	.word	0x000083c3
    878c:	000083c3 	.word	0x000083c3
    8790:	000083c3 	.word	0x000083c3
    8794:	000083c3 	.word	0x000083c3
    8798:	000083c3 	.word	0x000083c3
    879c:	000083c3 	.word	0x000083c3
    87a0:	000083c3 	.word	0x000083c3
    87a4:	000083c3 	.word	0x000083c3
    87a8:	000083c3 	.word	0x000083c3
    87ac:	000083c3 	.word	0x000083c3
    87b0:	000083c3 	.word	0x000083c3
    87b4:	000083c3 	.word	0x000083c3
    87b8:	000083c3 	.word	0x000083c3
    87bc:	000083c3 	.word	0x000083c3
    87c0:	000083c3 	.word	0x000083c3
    87c4:	000083c3 	.word	0x000083c3
    87c8:	000083c3 	.word	0x000083c3
    87cc:	000083c3 	.word	0x000083c3
    87d0:	000083c3 	.word	0x000083c3
    87d4:	000083c3 	.word	0x000083c3
    87d8:	000083c3 	.word	0x000083c3
    87dc:	00008c1f 	.word	0x00008c1f
    87e0:	000083c3 	.word	0x000083c3
    87e4:	000083c3 	.word	0x000083c3
    87e8:	00008c15 	.word	0x00008c15
	le_event_mask = sys_get_le64(cmd->events);
    87ec:	68a0      	ldr	r0, [r4, #8]
    87ee:	f7ff fdad 	bl	834c <sys_get_le64>
    87f2:	4baa      	ldr	r3, [pc, #680]	; (8a9c <hci_cmd_handle+0x748>)
    87f4:	e64f      	b.n	8496 <hci_cmd_handle+0x142>
	rp = cmd_complete(evt, sizeof(*rp));
    87f6:	2104      	movs	r1, #4
    87f8:	a807      	add	r0, sp, #28
    87fa:	f7ff fbeb 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    87fe:	2300      	movs	r3, #0
    8800:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8802:	221b      	movs	r2, #27
    8804:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8806:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8808:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    880a:	70c3      	strb	r3, [r0, #3]
    880c:	e613      	b.n	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    880e:	2109      	movs	r1, #9
    8810:	a807      	add	r0, sp, #28
    8812:	f7ff fbdf 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8816:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8818:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    881a:	2208      	movs	r2, #8
	rp->status = 0x00;
    881c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8820:	f7f9 fa18 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8824:	23ff      	movs	r3, #255	; 0xff
    8826:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8828:	2341      	movs	r3, #65	; 0x41
    882a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    882c:	2301      	movs	r3, #1
    882e:	70e3      	strb	r3, [r4, #3]
    8830:	e601      	b.n	8436 <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    8832:	68a1      	ldr	r1, [r4, #8]
    8834:	2001      	movs	r0, #1
    8836:	f7ff fa13 	bl	7c60 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    883a:	4604      	mov	r4, r0
    883c:	e0af      	b.n	899e <hci_cmd_handle+0x64a>
	rp = cmd_complete(evt, sizeof(*rp));
    883e:	2102      	movs	r1, #2
    8840:	a807      	add	r0, sp, #28
    8842:	f7ff fbc7 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8846:	2300      	movs	r3, #0
    8848:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    884a:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    884c:	f008 fd32 	bl	112b4 <ll_wl_size_get>
    8850:	7060      	strb	r0, [r4, #1]
    8852:	e5f0      	b.n	8436 <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8854:	2101      	movs	r1, #1
    8856:	a807      	add	r0, sp, #28
    8858:	f7ff fbbc 	bl	7fd4 <cmd_complete>
    885c:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    885e:	f008 fd2b 	bl	112b8 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    8862:	7020      	strb	r0, [r4, #0]
    8864:	e5e7      	b.n	8436 <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    8866:	68a0      	ldr	r0, [r4, #8]
    8868:	f008 fdd2 	bl	11410 <ll_wl_add>
    886c:	e7e5      	b.n	883a <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    886e:	68a0      	ldr	r0, [r4, #8]
    8870:	f008 fd42 	bl	112f8 <ll_wl_remove>
    8874:	e7e1      	b.n	883a <hci_cmd_handle+0x4e6>
    8876:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8878:	2300      	movs	r3, #0
    887a:	aa08      	add	r2, sp, #32
    887c:	f100 0110 	add.w	r1, r0, #16
    8880:	f009 fa40 	bl	11d04 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8884:	2111      	movs	r1, #17
    8886:	a807      	add	r0, sp, #28
    8888:	f7ff fba4 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    888c:	2300      	movs	r3, #0
    888e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8892:	2210      	movs	r2, #16
    8894:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    8896:	f7f9 f9b1 	bl	1bfc <memcpy>
    889a:	e5cc      	b.n	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    889c:	2109      	movs	r1, #9
    889e:	a807      	add	r0, sp, #28
    88a0:	f7ff fb98 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    88a4:	2300      	movs	r3, #0
    88a6:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    88aa:	2108      	movs	r1, #8
    88ac:	f7ff f9f8 	bl	7ca0 <bt_rand>
    88b0:	e5c1      	b.n	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    88b2:	2109      	movs	r1, #9
    88b4:	a807      	add	r0, sp, #28
    88b6:	f7ff fb8d 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    88ba:	4601      	mov	r1, r0
    88bc:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    88be:	4602      	mov	r2, r0
	rp->status = 0x00;
    88c0:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    88c4:	4876      	ldr	r0, [pc, #472]	; (8aa0 <hci_cmd_handle+0x74c>)
    88c6:	f7ff fb41 	bl	7f4c <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    88ca:	f240 203f 	movw	r0, #575	; 0x23f
    88ce:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    88d0:	f7ff fb3c 	bl	7f4c <sys_put_le32>
    88d4:	e5af      	b.n	8436 <hci_cmd_handle+0xe2>
    88d6:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    88d8:	7963      	ldrb	r3, [r4, #5]
    88da:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    88de:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    88e2:	7820      	ldrb	r0, [r4, #0]
    88e4:	79a4      	ldrb	r4, [r4, #6]
    88e6:	9400      	str	r4, [sp, #0]
    88e8:	f008 faa8 	bl	10e3c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    88ec:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    88ee:	2101      	movs	r1, #1
    88f0:	a807      	add	r0, sp, #28
    88f2:	f7ff fb6f 	bl	7fd4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    88f6:	2c00      	cmp	r4, #0
    88f8:	bf18      	it	ne
    88fa:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    88fc:	bf08      	it	eq
    88fe:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8900:	7003      	strb	r3, [r0, #0]
    8902:	e598      	b.n	8436 <hci_cmd_handle+0xe2>
    8904:	68a2      	ldr	r2, [r4, #8]
    8906:	4b67      	ldr	r3, [pc, #412]	; (8aa4 <hci_cmd_handle+0x750>)
	if (cmd->enable && cmd->filter_dup) {
    8908:	7810      	ldrb	r0, [r2, #0]
    890a:	b140      	cbz	r0, 891e <hci_cmd_handle+0x5ca>
    890c:	7852      	ldrb	r2, [r2, #1]
    890e:	b132      	cbz	r2, 891e <hci_cmd_handle+0x5ca>
		dup_count = 0;
    8910:	2200      	movs	r2, #0
    8912:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    8914:	4b64      	ldr	r3, [pc, #400]	; (8aa8 <hci_cmd_handle+0x754>)
		dup_count = -1;
    8916:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8918:	f008 fab0 	bl	10e7c <ll_scan_enable>
    891c:	e7e6      	b.n	88ec <hci_cmd_handle+0x598>
		dup_count = -1;
    891e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8922:	e7f8      	b.n	8916 <hci_cmd_handle+0x5c2>
    8924:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    8926:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    892a:	7963      	ldrb	r3, [r4, #5]
    892c:	7922      	ldrb	r2, [r4, #4]
    892e:	8861      	ldrh	r1, [r4, #2]
    8930:	8820      	ldrh	r0, [r4, #0]
    8932:	9504      	str	r5, [sp, #16]
    8934:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    8938:	9503      	str	r5, [sp, #12]
    893a:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    893e:	9502      	str	r5, [sp, #8]
    8940:	7b25      	ldrb	r5, [r4, #12]
    8942:	9501      	str	r5, [sp, #4]
    8944:	3406      	adds	r4, #6
    8946:	9400      	str	r4, [sp, #0]
    8948:	f008 fad2 	bl	10ef0 <ll_create_connection>
    894c:	e56c      	b.n	8428 <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    894e:	f008 f8e7 	bl	10b20 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8952:	4606      	mov	r6, r0
    8954:	bb48      	cbnz	r0, 89aa <hci_cmd_handle+0x656>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8956:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    895a:	2001      	movs	r0, #1
    895c:	f7fb f8d8 	bl	3b10 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8960:	4a52      	ldr	r2, [pc, #328]	; (8aac <hci_cmd_handle+0x758>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8962:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8964:	e9d2 4500 	ldrd	r4, r5, [r2]
    8968:	2400      	movs	r4, #0
    896a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    896e:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8972:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8974:	d004      	beq.n	8980 <hci_cmd_handle+0x62c>
    8976:	4632      	mov	r2, r6
    8978:	4631      	mov	r1, r6
    897a:	2002      	movs	r0, #2
    897c:	f7ff fb9a 	bl	80b4 <le_conn_complete.part.39>
		if ((*evt)->len) {
    8980:	9807      	ldr	r0, [sp, #28]
    8982:	8984      	ldrh	r4, [r0, #12]
    8984:	b14c      	cbz	r4, 899a <hci_cmd_handle+0x646>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    8986:	2101      	movs	r1, #1
    8988:	a808      	add	r0, sp, #32
    898a:	f7ff fb23 	bl	7fd4 <cmd_complete>
			ccst->status = cmd_status;
    898e:	2300      	movs	r3, #0
    8990:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8992:	9808      	ldr	r0, [sp, #32]
    8994:	f7fa fee4 	bl	3760 <bt_recv_prio>
    8998:	e54d      	b.n	8436 <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    899a:	f009 ffe9 	bl	12970 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    899e:	2101      	movs	r1, #1
    89a0:	a807      	add	r0, sp, #28
    89a2:	f7ff fb17 	bl	7fd4 <cmd_complete>
	ccst->status = status;
    89a6:	7004      	strb	r4, [r0, #0]
    89a8:	e545      	b.n	8436 <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    89aa:	240c      	movs	r4, #12
    89ac:	e7f7      	b.n	899e <hci_cmd_handle+0x64a>
	status = ll_chm_update(&cmd->ch_map[0]);
    89ae:	68a0      	ldr	r0, [r4, #8]
    89b0:	f007 fc88 	bl	102c4 <ll_chm_update>
    89b4:	e79a      	b.n	88ec <hci_cmd_handle+0x598>
    89b6:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    89b8:	f100 030c 	add.w	r3, r0, #12
    89bc:	f100 020a 	add.w	r2, r0, #10
    89c0:	1c81      	adds	r1, r0, #2
    89c2:	8800      	ldrh	r0, [r0, #0]
    89c4:	f007 ff32 	bl	1082c <ll_enc_req_send>
    89c8:	e52e      	b.n	8428 <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    89ca:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    89cc:	2108      	movs	r1, #8
    89ce:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    89d0:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    89d2:	f7ff faff 	bl	7fd4 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    89d6:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    89d8:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    89da:	1cc1      	adds	r1, r0, #3
    89dc:	4630      	mov	r0, r6
    89de:	f007 fcb3 	bl	10348 <ll_chm_get>
    89e2:	e575      	b.n	84d0 <hci_cmd_handle+0x17c>
	handle = sys_le16_to_cpu(cmd->handle);
    89e4:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    89e6:	8818      	ldrh	r0, [r3, #0]
    89e8:	f007 fcc3 	bl	10372 <ll_feature_req_send>
    89ec:	e51c      	b.n	8428 <hci_cmd_handle+0xd4>
    89ee:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    89f0:	8911      	ldrh	r1, [r2, #8]
    89f2:	8893      	ldrh	r3, [r2, #4]
    89f4:	8810      	ldrh	r0, [r2, #0]
    89f6:	9101      	str	r1, [sp, #4]
    89f8:	88d2      	ldrh	r2, [r2, #6]
    89fa:	9200      	str	r2, [sp, #0]
    89fc:	2200      	movs	r2, #0
    89fe:	4611      	mov	r1, r2
    8a00:	f007 fbe8 	bl	101d4 <ll_conn_update>
	*evt = cmd_status(status);
    8a04:	b2c0      	uxtb	r0, r0
    8a06:	e513      	b.n	8430 <hci_cmd_handle+0xdc>
    8a08:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8a0a:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8a0c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8a0e:	8893      	ldrh	r3, [r2, #4]
    8a10:	9101      	str	r1, [sp, #4]
    8a12:	88d2      	ldrh	r2, [r2, #6]
    8a14:	9200      	str	r2, [sp, #0]
    8a16:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8a18:	2102      	movs	r1, #2
    8a1a:	b2a0      	uxth	r0, r4
    8a1c:	f007 fbda 	bl	101d4 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8a20:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8a22:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8a24:	a807      	add	r0, sp, #28
    8a26:	f7ff fad5 	bl	7fd4 <cmd_complete>
	rp->status = status;
    8a2a:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8a2c:	f8a0 4001 	strh.w	r4, [r0, #1]
    8a30:	e501      	b.n	8436 <hci_cmd_handle+0xe2>
    8a32:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8a34:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8a36:	789a      	ldrb	r2, [r3, #2]
    8a38:	2300      	movs	r3, #0
    8a3a:	9301      	str	r3, [sp, #4]
    8a3c:	9300      	str	r3, [sp, #0]
    8a3e:	e7eb      	b.n	8a18 <hci_cmd_handle+0x6c4>
    8a40:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8a42:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8a44:	889a      	ldrh	r2, [r3, #4]
    8a46:	8859      	ldrh	r1, [r3, #2]
    8a48:	b2a0      	uxth	r0, r4
    8a4a:	f007 fd02 	bl	10452 <ll_length_req_send>
    8a4e:	e564      	b.n	851a <hci_cmd_handle+0x1c6>
	rp = cmd_complete(evt, sizeof(*rp));
    8a50:	2105      	movs	r1, #5
    8a52:	a807      	add	r0, sp, #28
    8a54:	f7ff fabe 	bl	7fd4 <cmd_complete>
    8a58:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    8a5a:	1cc1      	adds	r1, r0, #3
    8a5c:	3001      	adds	r0, #1
    8a5e:	f007 fd1b 	bl	10498 <ll_length_default_get>
	rp->status = 0x00;
    8a62:	2300      	movs	r3, #0
    8a64:	7023      	strb	r3, [r4, #0]
    8a66:	e4e6      	b.n	8436 <hci_cmd_handle+0xe2>
    8a68:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    8a6a:	8859      	ldrh	r1, [r3, #2]
    8a6c:	8818      	ldrh	r0, [r3, #0]
    8a6e:	f007 fd1d 	bl	104ac <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8a72:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8a74:	2101      	movs	r1, #1
    8a76:	a807      	add	r0, sp, #28
    8a78:	f7ff faac 	bl	7fd4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8a7c:	2c00      	cmp	r4, #0
    8a7e:	bf18      	it	ne
    8a80:	231e      	movne	r3, #30
    8a82:	e73b      	b.n	88fc <hci_cmd_handle+0x5a8>
	rp = cmd_complete(evt, sizeof(*rp));
    8a84:	2109      	movs	r1, #9
    8a86:	a807      	add	r0, sp, #28
    8a88:	f7ff faa4 	bl	7fd4 <cmd_complete>
    8a8c:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8a8e:	1dc3      	adds	r3, r0, #7
    8a90:	1d42      	adds	r2, r0, #5
    8a92:	1cc1      	adds	r1, r0, #3
    8a94:	3001      	adds	r0, #1
    8a96:	f007 fd13 	bl	104c0 <ll_length_max_get>
    8a9a:	e7e2      	b.n	8a62 <hci_cmd_handle+0x70e>
    8a9c:	20003d30 	.word	0x20003d30
    8aa0:	130f3370 	.word	0x130f3370
    8aa4:	20000830 	.word	0x20000830
    8aa8:	20000834 	.word	0x20000834
    8aac:	20003d28 	.word	0x20003d28
	handle = sys_le16_to_cpu(cmd->handle);
    8ab0:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8ab2:	2105      	movs	r1, #5
    8ab4:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8ab6:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8ab8:	f7ff fa8c 	bl	7fd4 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8abc:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8abe:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8ac0:	1d02      	adds	r2, r0, #4
    8ac2:	1cc1      	adds	r1, r0, #3
    8ac4:	4630      	mov	r0, r6
    8ac6:	f007 fd04 	bl	104d2 <ll_phy_get>
	return __builtin_ffs(op);
    8aca:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    8acc:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8ad0:	2800      	cmp	r0, #0
    8ad2:	bf14      	ite	ne
    8ad4:	230c      	movne	r3, #12
    8ad6:	2300      	moveq	r3, #0
    8ad8:	7023      	strb	r3, [r4, #0]
    8ada:	2a00      	cmp	r2, #0
    8adc:	fa92 f3a2 	rbit	r3, r2
    8ae0:	fab3 f383 	clz	r3, r3
    8ae4:	7922      	ldrb	r2, [r4, #4]
    8ae6:	bf08      	it	eq
    8ae8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8aec:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8aee:	70e3      	strb	r3, [r4, #3]
    8af0:	2a00      	cmp	r2, #0
    8af2:	fa92 f3a2 	rbit	r3, r2
    8af6:	fab3 f383 	clz	r3, r3
    8afa:	bf08      	it	eq
    8afc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8b00:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8b02:	7123      	strb	r3, [r4, #4]
    8b04:	e497      	b.n	8436 <hci_cmd_handle+0xe2>
    8b06:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b08:	781a      	ldrb	r2, [r3, #0]
    8b0a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    8b0c:	bf44      	itt	mi
    8b0e:	2107      	movmi	r1, #7
    8b10:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8b12:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8b14:	bf44      	itt	mi
    8b16:	2207      	movmi	r2, #7
    8b18:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8b1a:	7899      	ldrb	r1, [r3, #2]
    8b1c:	7858      	ldrb	r0, [r3, #1]
    8b1e:	f007 fced 	bl	104fc <ll_phy_default_set>
    8b22:	e7a6      	b.n	8a72 <hci_cmd_handle+0x71e>
    8b24:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b26:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    8b28:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8b2a:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b2e:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    8b30:	bf44      	itt	mi
    8b32:	2103      	movmi	r1, #3
    8b34:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    8b36:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8b38:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    8b3a:	bf44      	itt	mi
    8b3c:	2203      	movmi	r2, #3
    8b3e:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8b40:	074d      	lsls	r5, r1, #29
    8b42:	d002      	beq.n	8b4a <hci_cmd_handle+0x7f6>
	    !(cmd->rx_phys & 0x07)) {
    8b44:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8b46:	075a      	lsls	r2, r3, #29
    8b48:	d105      	bne.n	8b56 <hci_cmd_handle+0x802>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8b4a:	2101      	movs	r1, #1
    8b4c:	a807      	add	r0, sp, #28
    8b4e:	f7ff fa41 	bl	7fd4 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    8b52:	2312      	movs	r3, #18
    8b54:	e6d4      	b.n	8900 <hci_cmd_handle+0x5ac>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    8b56:	ea41 0203 	orr.w	r2, r1, r3
    8b5a:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    8b5e:	d005      	beq.n	8b6c <hci_cmd_handle+0x818>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8b60:	2101      	movs	r1, #1
    8b62:	a807      	add	r0, sp, #28
    8b64:	f7ff fa36 	bl	7fd4 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    8b68:	2311      	movs	r3, #17
    8b6a:	e6c9      	b.n	8900 <hci_cmd_handle+0x5ac>
	if (phy_opts & 0x03) {
    8b6c:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    8b70:	bf1c      	itt	ne
    8b72:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    8b76:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8b7a:	f007 fcc9 	bl	10510 <ll_phy_req_send>
    8b7e:	e453      	b.n	8428 <hci_cmd_handle+0xd4>
    8b80:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8b82:	f100 0217 	add.w	r2, r0, #23
    8b86:	1dc1      	adds	r1, r0, #7
    8b88:	f008 fe4c 	bl	11824 <ll_rl_add>
    8b8c:	e655      	b.n	883a <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8b8e:	68a0      	ldr	r0, [r4, #8]
    8b90:	f008 feea 	bl	11968 <ll_rl_remove>
    8b94:	e651      	b.n	883a <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8b96:	2101      	movs	r1, #1
    8b98:	a807      	add	r0, sp, #28
    8b9a:	f7ff fa1b 	bl	7fd4 <cmd_complete>
    8b9e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    8ba0:	f008 fe26 	bl	117f0 <ll_rl_clear>
    8ba4:	e65d      	b.n	8862 <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    8ba6:	2102      	movs	r1, #2
    8ba8:	a807      	add	r0, sp, #28
    8baa:	f7ff fa13 	bl	7fd4 <cmd_complete>
    8bae:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8bb0:	f008 fe1c 	bl	117ec <ll_rl_size_get>
    8bb4:	7060      	strb	r0, [r4, #1]
    8bb6:	e754      	b.n	8a62 <hci_cmd_handle+0x70e>
    8bb8:	2207      	movs	r2, #7
    8bba:	68a1      	ldr	r1, [r4, #8]
    8bbc:	a808      	add	r0, sp, #32
    8bbe:	f7f9 f81d 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8bc2:	2107      	movs	r1, #7
    8bc4:	a807      	add	r0, sp, #28
    8bc6:	f7ff fa05 	bl	7fd4 <cmd_complete>
    8bca:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    8bcc:	1c41      	adds	r1, r0, #1
    8bce:	a808      	add	r0, sp, #32
    8bd0:	f008 ff58 	bl	11a84 <ll_rl_crpa_get>
    8bd4:	e645      	b.n	8862 <hci_cmd_handle+0x50e>
    8bd6:	2207      	movs	r2, #7
    8bd8:	68a1      	ldr	r1, [r4, #8]
    8bda:	a808      	add	r0, sp, #32
    8bdc:	f7f9 f80e 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8be0:	2107      	movs	r1, #7
    8be2:	a807      	add	r0, sp, #28
    8be4:	f7ff f9f6 	bl	7fd4 <cmd_complete>
    8be8:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    8bea:	1c41      	adds	r1, r0, #1
    8bec:	a808      	add	r0, sp, #32
    8bee:	f008 ff69 	bl	11ac4 <ll_rl_lrpa_get>
    8bf2:	e636      	b.n	8862 <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    8bf4:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8bf6:	2101      	movs	r1, #1
    8bf8:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    8bfa:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8bfc:	f7ff f9ea 	bl	7fd4 <cmd_complete>
    8c00:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    8c02:	4628      	mov	r0, r5
    8c04:	f008 ff76 	bl	11af4 <ll_rl_enable>
    8c08:	e62b      	b.n	8862 <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    8c0a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    8c0c:	8818      	ldrh	r0, [r3, #0]
    8c0e:	f008 ff83 	bl	11b18 <ll_rl_timeout_set>
    8c12:	e430      	b.n	8476 <hci_cmd_handle+0x122>
    8c14:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8c16:	79c1      	ldrb	r1, [r0, #7]
    8c18:	f008 ff86 	bl	11b28 <ll_priv_mode_set>
    8c1c:	e60d      	b.n	883a <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    8c1e:	2103      	movs	r1, #3
    8c20:	a807      	add	r0, sp, #28
    8c22:	f7ff f9d7 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8c26:	4601      	mov	r1, r0
    8c28:	2300      	movs	r3, #0
    8c2a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    8c2e:	3001      	adds	r0, #1
    8c30:	f7ff f832 	bl	7c98 <ll_tx_pwr_get>
    8c34:	f7ff bbff 	b.w	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8c38:	210d      	movs	r1, #13
    8c3a:	a807      	add	r0, sp, #28
    8c3c:	f7ff f9ca 	bl	7fd4 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8c40:	2202      	movs	r2, #2
    8c42:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8c44:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    8c46:	2201      	movs	r2, #1
    8c48:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8c4a:	220c      	movs	r2, #12
	rp->status = 0x00;
    8c4c:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8c4e:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8c50:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    8c52:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8c54:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8c56:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    8c58:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8c5a:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8c5c:	7242      	strb	r2, [r0, #9]
    8c5e:	7283      	strb	r3, [r0, #10]
    8c60:	72c3      	strb	r3, [r0, #11]
    8c62:	7303      	strb	r3, [r0, #12]
    8c64:	f7ff bbe7 	b.w	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8c68:	2141      	movs	r1, #65	; 0x41
    8c6a:	a807      	add	r0, sp, #28
    8c6c:	f7ff f9b2 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8c70:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8c72:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8c74:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8c76:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8c7a:	f7f8 ffeb 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    8c7e:	7863      	ldrb	r3, [r4, #1]
    8c80:	f063 0358 	orn	r3, r3, #88	; 0x58
    8c84:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    8c86:	78a3      	ldrb	r3, [r4, #2]
    8c88:	f043 0303 	orr.w	r3, r3, #3
    8c8c:	70a3      	strb	r3, [r4, #2]
    8c8e:	f7ff bbd2 	b.w	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8c92:	2109      	movs	r1, #9
    8c94:	a807      	add	r0, sp, #28
    8c96:	f7ff f99d 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8c9a:	2100      	movs	r1, #0
    8c9c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8ca0:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    8ca2:	f7f8 ffd7 	bl	1c54 <memset>
    8ca6:	f7ff bbc6 	b.w	8436 <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    8caa:	4b5c      	ldr	r3, [pc, #368]	; (8e1c <hci_cmd_handle+0xac8>)
    8cac:	aa08      	add	r2, sp, #32
    8cae:	f103 0628 	add.w	r6, r3, #40	; 0x28
    8cb2:	4615      	mov	r5, r2
    8cb4:	6818      	ldr	r0, [r3, #0]
    8cb6:	6859      	ldr	r1, [r3, #4]
    8cb8:	4614      	mov	r4, r2
    8cba:	c403      	stmia	r4!, {r0, r1}
    8cbc:	3308      	adds	r3, #8
    8cbe:	42b3      	cmp	r3, r6
    8cc0:	4622      	mov	r2, r4
    8cc2:	d1f7      	bne.n	8cb4 <hci_cmd_handle+0x960>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    8cc4:	2129      	movs	r1, #41	; 0x29
    8cc6:	a807      	add	r0, sp, #28
    8cc8:	f7ff f984 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8ccc:	2300      	movs	r3, #0
    8cce:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    8cd2:	2228      	movs	r2, #40	; 0x28
    8cd4:	4629      	mov	r1, r5
    8cd6:	e5de      	b.n	8896 <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    8cd8:	68a1      	ldr	r1, [r4, #8]
    8cda:	2000      	movs	r0, #0
    8cdc:	f7fe ffc0 	bl	7c60 <ll_addr_set>
    8ce0:	f7ff bbc9 	b.w	8476 <hci_cmd_handle+0x122>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8ce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8ce8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    8cec:	3201      	adds	r2, #1
    8cee:	d106      	bne.n	8cfe <hci_cmd_handle+0x9aa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8cf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8cf8:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8cfa:	4293      	cmp	r3, r2
    8cfc:	d020      	beq.n	8d40 <hci_cmd_handle+0x9ec>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    8cfe:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8d02:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8d06:	07db      	lsls	r3, r3, #31
    8d08:	d51a      	bpl.n	8d40 <hci_cmd_handle+0x9ec>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    8d0a:	2118      	movs	r1, #24
    8d0c:	a807      	add	r0, sp, #28
    8d0e:	f7ff f961 	bl	7fd4 <cmd_complete>
		rp->status = 0x00;
    8d12:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    8d14:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    8d16:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    8d18:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    8d1a:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    8d1c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    8d20:	1ca1      	adds	r1, r4, #2
    8d22:	f7ff f913 	bl	7f4c <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    8d26:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    8d2a:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    8d2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    8d30:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8d34:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    8d36:	2210      	movs	r2, #16
    8d38:	4631      	mov	r1, r6
    8d3a:	f104 0008 	add.w	r0, r4, #8
    8d3e:	e7b0      	b.n	8ca2 <hci_cmd_handle+0x94e>
	rp = cmd_complete(evt, sizeof(*rp));
    8d40:	2102      	movs	r1, #2
    8d42:	a807      	add	r0, sp, #28
    8d44:	f7ff f946 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8d48:	2300      	movs	r3, #0
    8d4a:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    8d4c:	7043      	strb	r3, [r0, #1]
    8d4e:	f7ff bb72 	b.w	8436 <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8d52:	2121      	movs	r1, #33	; 0x21
    8d54:	a807      	add	r0, sp, #28
    8d56:	f7ff f93d 	bl	7fd4 <cmd_complete>
	rp->status = 0x00;
    8d5a:	4603      	mov	r3, r0
    8d5c:	2200      	movs	r2, #0
    8d5e:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    8d66:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8d68:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    8d6c:	3101      	adds	r1, #1
    8d6e:	d04b      	beq.n	8e08 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8d70:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8d74:	3101      	adds	r1, #1
    8d76:	d047      	beq.n	8e08 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8d78:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8d7c:	3101      	adds	r1, #1
    8d7e:	d043      	beq.n	8e08 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    8d80:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8d84:	3101      	adds	r1, #1
    8d86:	d03f      	beq.n	8e08 <hci_cmd_handle+0xab4>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    8d88:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    8d8c:	4619      	mov	r1, r3
    8d8e:	f7ff f8dd 	bl	7f4c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    8d92:	1d61      	adds	r1, r4, #5
    8d94:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    8d98:	f7ff f8d8 	bl	7f4c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    8d9c:	f104 0109 	add.w	r1, r4, #9
    8da0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    8da4:	f7ff f8d2 	bl	7f4c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    8da8:	f104 010d 	add.w	r1, r4, #13
    8dac:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    8db0:	f7ff f8cc 	bl	7f4c <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8db8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8dbc:	3301      	adds	r3, #1
    8dbe:	f104 0311 	add.w	r3, r4, #17
    8dc2:	d027      	beq.n	8e14 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8dc4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8dc8:	3101      	adds	r1, #1
    8dca:	d023      	beq.n	8e14 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8dcc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8dd0:	3101      	adds	r1, #1
    8dd2:	d01f      	beq.n	8e14 <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    8dd4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8dd8:	3101      	adds	r1, #1
    8dda:	d01b      	beq.n	8e14 <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    8ddc:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    8de0:	4619      	mov	r1, r3
    8de2:	f7ff f8b3 	bl	7f4c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    8de6:	f104 0115 	add.w	r1, r4, #21
    8dea:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    8dee:	f7ff f8ad 	bl	7f4c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    8df2:	f104 0119 	add.w	r1, r4, #25
    8df6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    8dfa:	f7ff f8a7 	bl	7f4c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8dfe:	f104 011d 	add.w	r1, r4, #29
    8e02:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    8e06:	e563      	b.n	88d0 <hci_cmd_handle+0x57c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    8e08:	2210      	movs	r2, #16
    8e0a:	2100      	movs	r1, #0
    8e0c:	4618      	mov	r0, r3
    8e0e:	f7f8 ff21 	bl	1c54 <memset>
    8e12:	e7cf      	b.n	8db4 <hci_cmd_handle+0xa60>
		memset(rp->er, 0x00, sizeof(rp->er));
    8e14:	2210      	movs	r2, #16
    8e16:	2100      	movs	r1, #0
    8e18:	4618      	mov	r0, r3
    8e1a:	e742      	b.n	8ca2 <hci_cmd_handle+0x94e>
    8e1c:	00016617 	.word	0x00016617

00008e20 <hci_acl_handle>:
{
    8e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    8e24:	2300      	movs	r3, #0
    8e26:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    8e28:	8983      	ldrh	r3, [r0, #12]
    8e2a:	2b03      	cmp	r3, #3
{
    8e2c:	4606      	mov	r6, r0
    8e2e:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    8e30:	d80d      	bhi.n	8e4e <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    8e32:	4b3a      	ldr	r3, [pc, #232]	; (8f1c <hci_acl_handle+0xfc>)
    8e34:	9301      	str	r3, [sp, #4]
    8e36:	9300      	str	r3, [sp, #0]
    8e38:	4a39      	ldr	r2, [pc, #228]	; (8f20 <hci_acl_handle+0x100>)
    8e3a:	4b3a      	ldr	r3, [pc, #232]	; (8f24 <hci_acl_handle+0x104>)
    8e3c:	493a      	ldr	r1, [pc, #232]	; (8f28 <hci_acl_handle+0x108>)
    8e3e:	483b      	ldr	r0, [pc, #236]	; (8f2c <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    8e40:	f7f8 f8a4 	bl	f8c <printk>
		return -EINVAL;
    8e44:	f06f 0015 	mvn.w	r0, #21
}
    8e48:	b003      	add	sp, #12
    8e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    8e4e:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    8e52:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    8e54:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    8e56:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    8e58:	f009 fddb 	bl	12a12 <net_buf_simple_pull>
	if (buf->len < len) {
    8e5c:	89b3      	ldrh	r3, [r6, #12]
    8e5e:	42bb      	cmp	r3, r7
    8e60:	d207      	bcs.n	8e72 <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    8e62:	4b2e      	ldr	r3, [pc, #184]	; (8f1c <hci_acl_handle+0xfc>)
    8e64:	9301      	str	r3, [sp, #4]
    8e66:	9300      	str	r3, [sp, #0]
    8e68:	4a2d      	ldr	r2, [pc, #180]	; (8f20 <hci_acl_handle+0x100>)
    8e6a:	4b2e      	ldr	r3, [pc, #184]	; (8f24 <hci_acl_handle+0x104>)
    8e6c:	492e      	ldr	r1, [pc, #184]	; (8f28 <hci_acl_handle+0x108>)
    8e6e:	4830      	ldr	r0, [pc, #192]	; (8f30 <hci_acl_handle+0x110>)
    8e70:	e7e6      	b.n	8e40 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    8e72:	f007 fc57 	bl	10724 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    8e76:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    8e7a:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    8e7c:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    8e80:	bb30      	cbnz	r0, 8ed0 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    8e82:	4b26      	ldr	r3, [pc, #152]	; (8f1c <hci_acl_handle+0xfc>)
    8e84:	9301      	str	r3, [sp, #4]
    8e86:	9300      	str	r3, [sp, #0]
    8e88:	4a25      	ldr	r2, [pc, #148]	; (8f20 <hci_acl_handle+0x100>)
    8e8a:	4b26      	ldr	r3, [pc, #152]	; (8f24 <hci_acl_handle+0x104>)
    8e8c:	4926      	ldr	r1, [pc, #152]	; (8f28 <hci_acl_handle+0x108>)
    8e8e:	4829      	ldr	r0, [pc, #164]	; (8f34 <hci_acl_handle+0x114>)
    8e90:	f7f8 f87c 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    8e94:	4b28      	ldr	r3, [pc, #160]	; (8f38 <hci_acl_handle+0x118>)
    8e96:	e9d3 2300 	ldrd	r2, r3, [r3]
    8e9a:	2300      	movs	r3, #0
    8e9c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    8ea0:	4313      	orrs	r3, r2
    8ea2:	d012      	beq.n	8eca <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8ea8:	2001      	movs	r0, #1
    8eaa:	f7fa fe31 	bl	3b10 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    8eae:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8eb0:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    8eb4:	211a      	movs	r1, #26
    8eb6:	f7ff f852 	bl	7f5e <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    8eba:	f8d8 0000 	ldr.w	r0, [r8]
    8ebe:	2101      	movs	r1, #1
    8ec0:	3008      	adds	r0, #8
    8ec2:	f009 fd87 	bl	129d4 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    8ec6:	2301      	movs	r3, #1
    8ec8:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    8eca:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8ece:	e7bb      	b.n	8e48 <hci_acl_handle+0x28>
    8ed0:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    8ed2:	f1b9 0f00 	cmp.w	r9, #0
    8ed6:	d002      	beq.n	8ede <hci_acl_handle+0xbe>
    8ed8:	f1b9 0f02 	cmp.w	r9, #2
    8edc:	d11c      	bne.n	8f18 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    8ede:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8ee0:	f362 0301 	bfi	r3, r2, #0, #2
    8ee4:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    8ee6:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    8ee8:	68b1      	ldr	r1, [r6, #8]
    8eea:	463a      	mov	r2, r7
    8eec:	1de0      	adds	r0, r4, #7
    8eee:	f7f8 fe85 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    8ef2:	4621      	mov	r1, r4
    8ef4:	4628      	mov	r0, r5
    8ef6:	f007 fc21 	bl	1073c <ll_tx_mem_enqueue>
    8efa:	2800      	cmp	r0, #0
    8efc:	d0a4      	beq.n	8e48 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    8efe:	4b07      	ldr	r3, [pc, #28]	; (8f1c <hci_acl_handle+0xfc>)
    8f00:	9301      	str	r3, [sp, #4]
    8f02:	9300      	str	r3, [sp, #0]
    8f04:	4a06      	ldr	r2, [pc, #24]	; (8f20 <hci_acl_handle+0x100>)
    8f06:	4b07      	ldr	r3, [pc, #28]	; (8f24 <hci_acl_handle+0x104>)
    8f08:	4907      	ldr	r1, [pc, #28]	; (8f28 <hci_acl_handle+0x108>)
    8f0a:	480c      	ldr	r0, [pc, #48]	; (8f3c <hci_acl_handle+0x11c>)
    8f0c:	f7f8 f83e 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    8f10:	4620      	mov	r0, r4
    8f12:	f007 fc0d 	bl	10730 <ll_tx_mem_release>
    8f16:	e795      	b.n	8e44 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8f18:	2201      	movs	r2, #1
    8f1a:	e7e1      	b.n	8ee0 <hci_acl_handle+0xc0>
    8f1c:	000145f1 	.word	0x000145f1
    8f20:	00015373 	.word	0x00015373
    8f24:	0001648f 	.word	0x0001648f
    8f28:	000153c2 	.word	0x000153c2
    8f2c:	0001652d 	.word	0x0001652d
    8f30:	0001654f 	.word	0x0001654f
    8f34:	0001657d 	.word	0x0001657d
    8f38:	20003d28 	.word	0x20003d28
    8f3c:	000165a0 	.word	0x000165a0

00008f40 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    8f40:	7a03      	ldrb	r3, [r0, #8]
    8f42:	f003 0303 	and.w	r3, r3, #3
    8f46:	3b01      	subs	r3, #1
    8f48:	2b01      	cmp	r3, #1
{
    8f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8f4c:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    8f4e:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    8f50:	d81c      	bhi.n	8f8c <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    8f52:	f101 0608 	add.w	r6, r1, #8
    8f56:	4630      	mov	r0, r6
    8f58:	2104      	movs	r1, #4
    8f5a:	f009 fd3b 	bl	129d4 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8f5e:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    8f60:	7a61      	ldrb	r1, [r4, #9]
    8f62:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8f64:	f003 0303 	and.w	r3, r3, #3
    8f68:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    8f6a:	bf0c      	ite	eq
    8f6c:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    8f70:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    8f74:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    8f76:	4630      	mov	r0, r6
    8f78:	f009 fd2c 	bl	129d4 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    8f7c:	7a62      	ldrb	r2, [r4, #9]
    8f7e:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    8f82:	b002      	add	sp, #8
    8f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    8f88:	f7f8 be38 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    8f8c:	4b07      	ldr	r3, [pc, #28]	; (8fac <hci_acl_encode+0x6c>)
    8f8e:	9301      	str	r3, [sp, #4]
    8f90:	9300      	str	r3, [sp, #0]
    8f92:	4a07      	ldr	r2, [pc, #28]	; (8fb0 <hci_acl_encode+0x70>)
    8f94:	4b07      	ldr	r3, [pc, #28]	; (8fb4 <hci_acl_encode+0x74>)
    8f96:	4908      	ldr	r1, [pc, #32]	; (8fb8 <hci_acl_encode+0x78>)
    8f98:	4808      	ldr	r0, [pc, #32]	; (8fbc <hci_acl_encode+0x7c>)
    8f9a:	f7f7 fff7 	bl	f8c <printk>
    8f9e:	4040      	eors	r0, r0
    8fa0:	f380 8811 	msr	BASEPRI, r0
    8fa4:	f04f 0004 	mov.w	r0, #4
    8fa8:	df02      	svc	2
    8faa:	bf00      	nop
    8fac:	000145f1 	.word	0x000145f1
    8fb0:	00015373 	.word	0x00015373
    8fb4:	0001651e 	.word	0x0001651e
    8fb8:	000153c2 	.word	0x000153c2
    8fbc:	00015312 	.word	0x00015312

00008fc0 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    8fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8fc4:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    8fc6:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8fc8:	2b01      	cmp	r3, #1
{
    8fca:	b093      	sub	sp, #76	; 0x4c
    8fcc:	4604      	mov	r4, r0
    8fce:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    8fd0:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8fd4:	f000 82a6 	beq.w	9524 <hci_evt_encode+0x564>
	switch (node_rx->hdr.type) {
    8fd8:	3b02      	subs	r3, #2
    8fda:	2b0a      	cmp	r3, #10
    8fdc:	f200 829a 	bhi.w	9514 <hci_evt_encode+0x554>
    8fe0:	e8df f013 	tbh	[pc, r3, lsl #1]
    8fe4:	0134000b 	.word	0x0134000b
    8fe8:	013c013a 	.word	0x013c013a
    8fec:	01ba0183 	.word	0x01ba0183
    8ff0:	01fd01d8 	.word	0x01fd01d8
    8ff4:	022a0215 	.word	0x022a0215
    8ff8:	0245      	.short	0x0245
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8ffa:	2301      	movs	r3, #1
    8ffc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9000:	2303      	movs	r3, #3
    9002:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    9006:	23ff      	movs	r3, #255	; 0xff
    9008:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    900c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9010:	2302      	movs	r3, #2
    9012:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9016:	7a43      	ldrb	r3, [r0, #9]
    9018:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    901a:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    901c:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9020:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9022:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    9026:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    9028:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    902a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    902e:	d505      	bpl.n	903c <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9030:	f104 030a 	add.w	r3, r4, #10
    9034:	464a      	mov	r2, r9
    9036:	4608      	mov	r0, r1
    9038:	f008 fd02 	bl	11a40 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    903c:	4bb8      	ldr	r3, [pc, #736]	; (9320 <hci_evt_encode+0x360>)
    903e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9042:	2200      	movs	r2, #0
    9044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9048:	4313      	orrs	r3, r2
    904a:	f000 80b9 	beq.w	91c0 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    904e:	7a63      	ldrb	r3, [r4, #9]
    9050:	4423      	add	r3, r4
    9052:	f893 a00c 	ldrb.w	sl, [r3, #12]
    9056:	4bb3      	ldr	r3, [pc, #716]	; (9324 <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    9058:	e9d3 2300 	ldrd	r2, r3, [r3]
    905c:	f1ba 0f00 	cmp.w	sl, #0
    9060:	d13d      	bne.n	90de <hci_evt_encode+0x11e>
    9062:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9066:	2300      	movs	r3, #0
    9068:	4313      	orrs	r3, r2
    906a:	f000 80a9 	beq.w	91c0 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    906e:	4bae      	ldr	r3, [pc, #696]	; (9328 <hci_evt_encode+0x368>)
    9070:	681a      	ldr	r2, [r3, #0]
    9072:	2a00      	cmp	r2, #0
    9074:	4698      	mov	r8, r3
    9076:	db54      	blt.n	9122 <hci_evt_encode+0x162>
    9078:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 9354 <hci_evt_encode+0x394>
    907c:	2600      	movs	r6, #0
    907e:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    9082:	f8d8 2000 	ldr.w	r2, [r8]
    9086:	4296      	cmp	r6, r2
    9088:	db2c      	blt.n	90e4 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    908a:	4ea8      	ldr	r6, [pc, #672]	; (932c <hci_evt_encode+0x36c>)
    908c:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 9330 <hci_evt_encode+0x370>
    9090:	6830      	ldr	r0, [r6, #0]
    9092:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    9096:	4619      	mov	r1, r3
    9098:	2206      	movs	r2, #6
    909a:	3002      	adds	r0, #2
    909c:	f7f8 fdae 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    90a0:	6832      	ldr	r2, [r6, #0]
    90a2:	7a23      	ldrb	r3, [r4, #8]
    90a4:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    90a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    90ac:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    90ae:	7a23      	ldrb	r3, [r4, #8]
    90b0:	f003 010f 	and.w	r1, r3, #15
    90b4:	2301      	movs	r3, #1
    90b6:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    90b8:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    90bc:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    90c0:	290f      	cmp	r1, #15
			dup_count++;
    90c2:	bfd5      	itete	le
    90c4:	3101      	addle	r1, #1
			dup_curr++;
    90c6:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    90c8:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    90ca:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    90cc:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    90ce:	bfd8      	it	le
    90d0:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    90d4:	2a10      	cmp	r2, #16
    90d6:	d124      	bne.n	9122 <hci_evt_encode+0x162>
			dup_curr = 0;
    90d8:	2200      	movs	r2, #0
    90da:	6032      	str	r2, [r6, #0]
    90dc:	e021      	b.n	9122 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    90de:	f002 020b 	and.w	r2, r2, #11
    90e2:	e7c0      	b.n	9066 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    90e4:	4618      	mov	r0, r3
    90e6:	2206      	movs	r2, #6
    90e8:	4659      	mov	r1, fp
    90ea:	9307      	str	r3, [sp, #28]
    90ec:	f7f8 fd71 	bl	1bd2 <memcmp>
    90f0:	9b07      	ldr	r3, [sp, #28]
    90f2:	bb00      	cbnz	r0, 9136 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    90f4:	7a21      	ldrb	r1, [r4, #8]
    90f6:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    90fa:	460a      	mov	r2, r1
    90fc:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9100:	4281      	cmp	r1, r0
    9102:	d118      	bne.n	9136 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    9104:	488a      	ldr	r0, [pc, #552]	; (9330 <hci_evt_encode+0x370>)
    9106:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    910a:	f002 020f 	and.w	r2, r2, #15
    910e:	fa23 f102 	lsr.w	r1, r3, r2
    9112:	07c9      	lsls	r1, r1, #31
    9114:	d454      	bmi.n	91c0 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    9116:	2101      	movs	r1, #1
    9118:	fa01 f202 	lsl.w	r2, r1, r2
    911c:	4313      	orrs	r3, r2
    911e:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9122:	f894 b008 	ldrb.w	fp, [r4, #8]
    9126:	7a63      	ldrb	r3, [r4, #9]
    9128:	f00b 0b0f 	and.w	fp, fp, #15
    912c:	f1bb 0f01 	cmp.w	fp, #1
    9130:	d105      	bne.n	913e <hci_evt_encode+0x17e>
		data_len = 0;
    9132:	2600      	movs	r6, #0
    9134:	e005      	b.n	9142 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    9136:	3601      	adds	r6, #1
    9138:	f10b 0b08 	add.w	fp, fp, #8
    913c:	e7a1      	b.n	9082 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    913e:	1f9e      	subs	r6, r3, #6
    9140:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9142:	4423      	add	r3, r4
    9144:	f893 800a 	ldrb.w	r8, [r3, #10]
    9148:	f1c8 0800 	rsb	r8, r8, #0
    914c:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    9150:	f1ba 0f00 	cmp.w	sl, #0
    9154:	d041      	beq.n	91da <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    9156:	f1bb 0f01 	cmp.w	fp, #1
    915a:	d00e      	beq.n	917a <hci_evt_encode+0x1ba>
    915c:	4b75      	ldr	r3, [pc, #468]	; (9334 <hci_evt_encode+0x374>)
    915e:	9301      	str	r3, [sp, #4]
    9160:	9300      	str	r3, [sp, #0]
    9162:	4a75      	ldr	r2, [pc, #468]	; (9338 <hci_evt_encode+0x378>)
    9164:	4b75      	ldr	r3, [pc, #468]	; (933c <hci_evt_encode+0x37c>)
    9166:	4976      	ldr	r1, [pc, #472]	; (9340 <hci_evt_encode+0x380>)
    9168:	4876      	ldr	r0, [pc, #472]	; (9344 <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    916a:	f7f7 ff0f 	bl	f8c <printk>
    916e:	4040      	eors	r0, r0
    9170:	f380 8811 	msr	BASEPRI, r0
    9174:	f04f 0004 	mov.w	r0, #4
    9178:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    917a:	2211      	movs	r2, #17
    917c:	210b      	movs	r1, #11
    917e:	4628      	mov	r0, r5
    9180:	f7fe ff12 	bl	7fa8 <meta_evt>
		drp->num_reports = 1;
    9184:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    9188:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    918c:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    918e:	f008 fb2d 	bl	117ec <ll_rl_size_get>
    9192:	4581      	cmp	r9, r0
    9194:	f105 0003 	add.w	r0, r5, #3
    9198:	d215      	bcs.n	91c6 <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    919a:	4602      	mov	r2, r0
    919c:	1ca9      	adds	r1, r5, #2
    919e:	4648      	mov	r0, r9
    91a0:	f008 f9c2 	bl	11528 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    91a4:	78ab      	ldrb	r3, [r5, #2]
    91a6:	3302      	adds	r3, #2
    91a8:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    91aa:	2301      	movs	r3, #1
    91ac:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    91ae:	2206      	movs	r2, #6
    91b0:	f107 0108 	add.w	r1, r7, #8
    91b4:	f105 000a 	add.w	r0, r5, #10
    91b8:	f7f8 fd20 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    91bc:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    91c0:	b013      	add	sp, #76	; 0x4c
    91c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    91c6:	7a23      	ldrb	r3, [r4, #8]
    91c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    91cc:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    91ce:	2206      	movs	r2, #6
    91d0:	f104 010a 	add.w	r1, r4, #10
    91d4:	f7f8 fd12 	bl	1bfc <memcpy>
    91d8:	e7e7      	b.n	91aa <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    91da:	f106 020b 	add.w	r2, r6, #11
    91de:	b2d2      	uxtb	r2, r2
    91e0:	2102      	movs	r1, #2
    91e2:	4628      	mov	r0, r5
    91e4:	f7fe fee0 	bl	7fa8 <meta_evt>
	sep->num_reports = 1;
    91e8:	2301      	movs	r3, #1
    91ea:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    91ec:	7a23      	ldrb	r3, [r4, #8]
    91ee:	aa12      	add	r2, sp, #72	; 0x48
    91f0:	f003 030f 	and.w	r3, r3, #15
    91f4:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    91f6:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    91f8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    91fc:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    91fe:	7a63      	ldrb	r3, [r4, #9]
    9200:	4423      	add	r3, r4
    9202:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    9206:	f008 faf1 	bl	117ec <ll_rl_size_get>
    920a:	4581      	cmp	r9, r0
    920c:	f105 0003 	add.w	r0, r5, #3
    9210:	d212      	bcs.n	9238 <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    9212:	4602      	mov	r2, r0
    9214:	1ca9      	adds	r1, r5, #2
    9216:	4648      	mov	r0, r9
    9218:	f008 f986 	bl	11528 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    921c:	78ab      	ldrb	r3, [r5, #2]
    921e:	3302      	adds	r3, #2
    9220:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    9222:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    9224:	350a      	adds	r5, #10
    9226:	4632      	mov	r2, r6
    9228:	f107 0108 	add.w	r1, r7, #8
    922c:	4628      	mov	r0, r5
    922e:	f7f8 fce5 	bl	1bfc <memcpy>
	*prssi = rssi;
    9232:	f805 8006 	strb.w	r8, [r5, r6]
    9236:	e7c3      	b.n	91c0 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    9238:	7a23      	ldrb	r3, [r4, #8]
    923a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    923e:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    9240:	2206      	movs	r2, #6
    9242:	f104 010a 	add.w	r1, r4, #10
    9246:	f7f8 fcd9 	bl	1bfc <memcpy>
    924a:	e7ea      	b.n	9222 <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    924c:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    924e:	4621      	mov	r1, r4
    9250:	4638      	mov	r0, r7
    9252:	f7ff f801 	bl	8258 <le_adv_ext_report.isra.66>
    9256:	e7b3      	b.n	91c0 <hci_evt_encode+0x200>
    9258:	2204      	movs	r2, #4
    925a:	e7f8      	b.n	924e <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    925c:	4b30      	ldr	r3, [pc, #192]	; (9320 <hci_evt_encode+0x360>)
    925e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9262:	2200      	movs	r2, #0
    9264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9268:	4313      	orrs	r3, r2
    926a:	f100 060a 	add.w	r6, r0, #10
    926e:	d007      	beq.n	9280 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    9270:	4b2c      	ldr	r3, [pc, #176]	; (9324 <hci_evt_encode+0x364>)
    9272:	e9d3 2300 	ldrd	r2, r3, [r3]
    9276:	2300      	movs	r3, #0
    9278:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    927c:	4313      	orrs	r3, r2
    927e:	d123      	bne.n	92c8 <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    9280:	7a23      	ldrb	r3, [r4, #8]
    9282:	ad12      	add	r5, sp, #72	; 0x48
    9284:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9288:	2206      	movs	r2, #6
    928a:	4631      	mov	r1, r6
    928c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    9290:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9294:	f7f8 fcb2 	bl	1bfc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    9298:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    929a:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    929c:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    929e:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    92a0:	4631      	mov	r1, r6
    92a2:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92a4:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    92a6:	f7fe ff9b 	bl	81e0 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92aa:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    92ac:	4b21      	ldr	r3, [pc, #132]	; (9334 <hci_evt_encode+0x374>)
    92ae:	9304      	str	r3, [sp, #16]
    92b0:	2200      	movs	r2, #0
    92b2:	9201      	str	r2, [sp, #4]
    92b4:	9300      	str	r3, [sp, #0]
    92b6:	9403      	str	r4, [sp, #12]
    92b8:	9602      	str	r6, [sp, #8]
    92ba:	4b23      	ldr	r3, [pc, #140]	; (9348 <hci_evt_encode+0x388>)
    92bc:	4a23      	ldr	r2, [pc, #140]	; (934c <hci_evt_encode+0x38c>)
    92be:	4920      	ldr	r1, [pc, #128]	; (9340 <hci_evt_encode+0x380>)
    92c0:	4823      	ldr	r0, [pc, #140]	; (9350 <hci_evt_encode+0x390>)
    92c2:	f7f7 fe63 	bl	f8c <printk>
    92c6:	e77b      	b.n	91c0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    92c8:	2208      	movs	r2, #8
    92ca:	2113      	movs	r1, #19
    92cc:	4628      	mov	r0, r5
    92ce:	f7fe fe6b 	bl	7fa8 <meta_evt>
	sep->handle = 0;
    92d2:	2300      	movs	r3, #0
    92d4:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    92d6:	7a23      	ldrb	r3, [r4, #8]
    92d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    92dc:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    92de:	2206      	movs	r2, #6
    92e0:	4631      	mov	r1, r6
    92e2:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    92e4:	f7f8 fc8a 	bl	1bfc <memcpy>
    92e8:	e76a      	b.n	91c0 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    92ea:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    92ec:	b93f      	cbnz	r7, 92fe <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    92ee:	f100 0314 	add.w	r3, r0, #20
    92f2:	f100 010e 	add.w	r1, r0, #14
    92f6:	22ff      	movs	r2, #255	; 0xff
    92f8:	7b40      	ldrb	r0, [r0, #13]
    92fa:	f008 fba1 	bl	11a40 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    92fe:	4b08      	ldr	r3, [pc, #32]	; (9320 <hci_evt_encode+0x360>)
    9300:	e9d3 2300 	ldrd	r2, r3, [r3]
    9304:	2200      	movs	r2, #0
    9306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    930a:	4313      	orrs	r3, r2
    930c:	f43f af58 	beq.w	91c0 <hci_evt_encode+0x200>
    9310:	462b      	mov	r3, r5
    9312:	4632      	mov	r2, r6
    9314:	f104 010b 	add.w	r1, r4, #11
    9318:	4638      	mov	r0, r7
    931a:	f7fe fecb 	bl	80b4 <le_conn_complete.part.39>
    931e:	e74f      	b.n	91c0 <hci_evt_encode+0x200>
    9320:	20003d28 	.word	0x20003d28
    9324:	20003d30 	.word	0x20003d30
    9328:	20000830 	.word	0x20000830
    932c:	20000834 	.word	0x20000834
    9330:	20000838 	.word	0x20000838
    9334:	000145f1 	.word	0x000145f1
    9338:	00015373 	.word	0x00015373
    933c:	0001649e 	.word	0x0001649e
    9340:	000153c2 	.word	0x000153c2
    9344:	0001663f 	.word	0x0001663f
    9348:	000164c6 	.word	0x000164c6
    934c:	000153bb 	.word	0x000153bb
    9350:	00016685 	.word	0x00016685
    9354:	2000083a 	.word	0x2000083a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9358:	4bb2      	ldr	r3, [pc, #712]	; (9624 <hci_evt_encode+0x664>)
    935a:	e9d3 2300 	ldrd	r2, r3, [r3]
    935e:	2300      	movs	r3, #0
    9360:	f002 0210 	and.w	r2, r2, #16
    9364:	4313      	orrs	r3, r2
    9366:	f43f af2b 	beq.w	91c0 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    936a:	2204      	movs	r2, #4
    936c:	2105      	movs	r1, #5
    936e:	4628      	mov	r0, r5
    9370:	f7fe fdf5 	bl	7f5e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9374:	2104      	movs	r1, #4
    9376:	f105 0008 	add.w	r0, r5, #8
    937a:	f009 fb2b 	bl	129d4 <net_buf_simple_add>
	ep->status = 0x00;
    937e:	2300      	movs	r3, #0
	conn_count--;
    9380:	4aa9      	ldr	r2, [pc, #676]	; (9628 <hci_evt_encode+0x668>)
	ep->status = 0x00;
    9382:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9384:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    9388:	7a23      	ldrb	r3, [r4, #8]
    938a:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    938c:	6813      	ldr	r3, [r2, #0]
    938e:	3b01      	subs	r3, #1
    9390:	6013      	str	r3, [r2, #0]
    9392:	e715      	b.n	91c0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9394:	4ba3      	ldr	r3, [pc, #652]	; (9624 <hci_evt_encode+0x664>)
    9396:	e9d3 2300 	ldrd	r2, r3, [r3]
    939a:	2200      	movs	r2, #0
    939c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    93a0:	4313      	orrs	r3, r2
    93a2:	f43f af0d 	beq.w	91c0 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    93a6:	4ba1      	ldr	r3, [pc, #644]	; (962c <hci_evt_encode+0x66c>)
    93a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    93ac:	2300      	movs	r3, #0
    93ae:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93b2:	4313      	orrs	r3, r2
    93b4:	f43f af04 	beq.w	91c0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    93b8:	2209      	movs	r2, #9
    93ba:	2103      	movs	r1, #3
    93bc:	4628      	mov	r0, r5
    93be:	f7fe fdf3 	bl	7fa8 <meta_evt>
	sep->status = radio_cu->status;
    93c2:	7ae3      	ldrb	r3, [r4, #11]
    93c4:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    93c6:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    93c8:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    93cc:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    93d0:	89e3      	ldrh	r3, [r4, #14]
    93d2:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    93d6:	8a23      	ldrh	r3, [r4, #16]
    93d8:	f8a0 3007 	strh.w	r3, [r0, #7]
    93dc:	e6f0      	b.n	91c0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    93de:	4b91      	ldr	r3, [pc, #580]	; (9624 <hci_evt_encode+0x664>)
    93e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    93e4:	2200      	movs	r2, #0
    93e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    93ea:	4313      	orrs	r3, r2
    93ec:	f43f aee8 	beq.w	91c0 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    93f0:	2203      	movs	r2, #3
    93f2:	2130      	movs	r1, #48	; 0x30
    93f4:	4628      	mov	r0, r5
    93f6:	f7fe fdb2 	bl	7f5e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    93fa:	2103      	movs	r1, #3
    93fc:	f105 0008 	add.w	r0, r5, #8
    9400:	f009 fae8 	bl	129d4 <net_buf_simple_add>
	ep->status = 0x00;
    9404:	2300      	movs	r3, #0
    9406:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9408:	f8a0 6001 	strh.w	r6, [r0, #1]
    940c:	e6d8      	b.n	91c0 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    940e:	4b88      	ldr	r3, [pc, #544]	; (9630 <hci_evt_encode+0x670>)
    9410:	e9d3 2300 	ldrd	r2, r3, [r3]
    9414:	2300      	movs	r3, #0
    9416:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    941a:	4313      	orrs	r3, r2
    941c:	f43f aed0 	beq.w	91c0 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    9420:	2202      	movs	r2, #2
    9422:	2157      	movs	r1, #87	; 0x57
    9424:	4628      	mov	r0, r5
    9426:	f7fe fd9a 	bl	7f5e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    942a:	2102      	movs	r1, #2
    942c:	f105 0008 	add.w	r0, r5, #8
    9430:	f009 fad0 	bl	129d4 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    9434:	8006      	strh	r6, [r0, #0]
    9436:	e6c3      	b.n	91c0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9438:	4b7a      	ldr	r3, [pc, #488]	; (9624 <hci_evt_encode+0x664>)
    943a:	e9d3 2300 	ldrd	r2, r3, [r3]
    943e:	2200      	movs	r2, #0
    9440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9444:	4313      	orrs	r3, r2
    9446:	f43f aebb 	beq.w	91c0 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    944a:	4b78      	ldr	r3, [pc, #480]	; (962c <hci_evt_encode+0x66c>)
    944c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9450:	2300      	movs	r3, #0
    9452:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9456:	4313      	orrs	r3, r2
    9458:	f43f aeb2 	beq.w	91c0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    945c:	2203      	movs	r2, #3
    945e:	2114      	movs	r1, #20
    9460:	4628      	mov	r0, r5
    9462:	f7fe fda1 	bl	7fa8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9466:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    9468:	7ae3      	ldrb	r3, [r4, #11]
    946a:	7083      	strb	r3, [r0, #2]
    946c:	e6a8      	b.n	91c0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    946e:	4b6d      	ldr	r3, [pc, #436]	; (9624 <hci_evt_encode+0x664>)
    9470:	e9d3 2300 	ldrd	r2, r3, [r3]
    9474:	2200      	movs	r2, #0
    9476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    947a:	4313      	orrs	r3, r2
    947c:	d007      	beq.n	948e <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    947e:	4b6b      	ldr	r3, [pc, #428]	; (962c <hci_evt_encode+0x66c>)
    9480:	e9d3 2300 	ldrd	r2, r3, [r3]
    9484:	2300      	movs	r3, #0
    9486:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    948a:	4313      	orrs	r3, r2
    948c:	d122      	bne.n	94d4 <hci_evt_encode+0x514>
    948e:	7b22      	ldrb	r2, [r4, #12]
    9490:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    9492:	4868      	ldr	r0, [pc, #416]	; (9634 <hci_evt_encode+0x674>)
    9494:	2a00      	cmp	r2, #0
    9496:	fa92 f3a2 	rbit	r3, r2
    949a:	fab3 f383 	clz	r3, r3
    949e:	fa91 f2a1 	rbit	r2, r1
    94a2:	bf08      	it	eq
    94a4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    94a8:	2900      	cmp	r1, #0
    94aa:	fab2 f282 	clz	r2, r2
    94ae:	bf08      	it	eq
    94b0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    94b4:	4960      	ldr	r1, [pc, #384]	; (9638 <hci_evt_encode+0x678>)
    94b6:	9105      	str	r1, [sp, #20]
    94b8:	3301      	adds	r3, #1
    94ba:	3201      	adds	r2, #1
    94bc:	9204      	str	r2, [sp, #16]
    94be:	9303      	str	r3, [sp, #12]
    94c0:	7ae3      	ldrb	r3, [r4, #11]
    94c2:	9302      	str	r3, [sp, #8]
    94c4:	e88d 0042 	stmia.w	sp, {r1, r6}
    94c8:	4b5c      	ldr	r3, [pc, #368]	; (963c <hci_evt_encode+0x67c>)
    94ca:	4a5d      	ldr	r2, [pc, #372]	; (9640 <hci_evt_encode+0x680>)
    94cc:	495d      	ldr	r1, [pc, #372]	; (9644 <hci_evt_encode+0x684>)
    94ce:	f7f7 fd5d 	bl	f8c <printk>
    94d2:	e675      	b.n	91c0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    94d4:	2205      	movs	r2, #5
    94d6:	210c      	movs	r1, #12
    94d8:	4628      	mov	r0, r5
    94da:	f7fe fd65 	bl	7fa8 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    94de:	7ae3      	ldrb	r3, [r4, #11]
    94e0:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    94e2:	f8a0 6001 	strh.w	r6, [r0, #1]
    94e6:	7b22      	ldrb	r2, [r4, #12]
    94e8:	2a00      	cmp	r2, #0
    94ea:	fa92 f3a2 	rbit	r3, r2
    94ee:	fab3 f383 	clz	r3, r3
    94f2:	bf08      	it	eq
    94f4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    94f8:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    94fa:	70c3      	strb	r3, [r0, #3]
    94fc:	7b62      	ldrb	r2, [r4, #13]
    94fe:	fa92 f3a2 	rbit	r3, r2
    9502:	2a00      	cmp	r2, #0
    9504:	fab3 f383 	clz	r3, r3
    9508:	bf08      	it	eq
    950a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    950e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9510:	7103      	strb	r3, [r0, #4]
    9512:	e655      	b.n	91c0 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9514:	4b48      	ldr	r3, [pc, #288]	; (9638 <hci_evt_encode+0x678>)
    9516:	9301      	str	r3, [sp, #4]
    9518:	9300      	str	r3, [sp, #0]
    951a:	4b4b      	ldr	r3, [pc, #300]	; (9648 <hci_evt_encode+0x688>)
    951c:	4a4b      	ldr	r2, [pc, #300]	; (964c <hci_evt_encode+0x68c>)
    951e:	4949      	ldr	r1, [pc, #292]	; (9644 <hci_evt_encode+0x684>)
    9520:	484b      	ldr	r0, [pc, #300]	; (9650 <hci_evt_encode+0x690>)
    9522:	e622      	b.n	916a <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    9524:	7ac3      	ldrb	r3, [r0, #11]
    9526:	3b03      	subs	r3, #3
    9528:	2b12      	cmp	r3, #18
    952a:	f200 80d5 	bhi.w	96d8 <hci_evt_encode+0x718>
    952e:	e8df f003 	tbb	[pc, r3]
    9532:	d30a      	.short	0xd30a
    9534:	d3c02fd3 	.word	0xd3c02fd3
    9538:	3cd3d335 	.word	0x3cd3d335
    953c:	d35fd35b 	.word	0xd35fd35b
    9540:	a0d3d3d3 	.word	0xa0d3d3d3
    9544:	a0          	.byte	0xa0
    9545:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9546:	4b37      	ldr	r3, [pc, #220]	; (9624 <hci_evt_encode+0x664>)
    9548:	e9d3 2300 	ldrd	r2, r3, [r3]
    954c:	2200      	movs	r2, #0
    954e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9552:	4313      	orrs	r3, r2
    9554:	f43f ae34 	beq.w	91c0 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9558:	4b34      	ldr	r3, [pc, #208]	; (962c <hci_evt_encode+0x66c>)
    955a:	e9d3 2300 	ldrd	r2, r3, [r3]
    955e:	2300      	movs	r3, #0
    9560:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9564:	4313      	orrs	r3, r2
    9566:	f43f ae2b 	beq.w	91c0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    956a:	220c      	movs	r2, #12
    956c:	2105      	movs	r1, #5
    956e:	4628      	mov	r0, r5
    9570:	f7fe fd1a 	bl	7fa8 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9574:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9576:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9578:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    957c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9580:	f7f8 fb3c 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9584:	2202      	movs	r2, #2
    9586:	f104 0114 	add.w	r1, r4, #20
    958a:	f105 000a 	add.w	r0, r5, #10
    958e:	e6a9      	b.n	92e4 <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    9590:	460a      	mov	r2, r1
    9592:	2000      	movs	r0, #0
    9594:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9596:	f7fe fd3f 	bl	8018 <encrypt_change>
    959a:	e611      	b.n	91c0 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    959c:	460b      	mov	r3, r1
    959e:	4632      	mov	r2, r6
    95a0:	4639      	mov	r1, r7
    95a2:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    95a4:	f7fe fd58 	bl	8058 <le_remote_feat_complete>
    95a8:	e60a      	b.n	91c0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    95aa:	4b1e      	ldr	r3, [pc, #120]	; (9624 <hci_evt_encode+0x664>)
    95ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    95b0:	2300      	movs	r3, #0
    95b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    95b6:	4313      	orrs	r3, r2
    95b8:	f43f ae02 	beq.w	91c0 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    95bc:	2208      	movs	r2, #8
    95be:	210c      	movs	r1, #12
    95c0:	4628      	mov	r0, r5
    95c2:	f7fe fccc 	bl	7f5e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    95c6:	2108      	movs	r1, #8
    95c8:	1868      	adds	r0, r5, r1
    95ca:	f009 fa03 	bl	129d4 <net_buf_simple_add>
	ep->status = 0x00;
    95ce:	2300      	movs	r3, #0
    95d0:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    95d2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    95d6:	7b23      	ldrb	r3, [r4, #12]
    95d8:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    95da:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    95de:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    95e0:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    95e4:	80c3      	strh	r3, [r0, #6]
    95e6:	e5eb      	b.n	91c0 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    95e8:	460a      	mov	r2, r1
    95ea:	7b00      	ldrb	r0, [r0, #12]
    95ec:	4631      	mov	r1, r6
    95ee:	e7d2      	b.n	9596 <hci_evt_encode+0x5d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95f0:	4b0c      	ldr	r3, [pc, #48]	; (9624 <hci_evt_encode+0x664>)
    95f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    95f6:	2200      	movs	r2, #0
    95f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    95fc:	4313      	orrs	r3, r2
    95fe:	d007      	beq.n	9610 <hci_evt_encode+0x650>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9600:	4b0a      	ldr	r3, [pc, #40]	; (962c <hci_evt_encode+0x66c>)
    9602:	e9d3 2300 	ldrd	r2, r3, [r3]
    9606:	2300      	movs	r3, #0
    9608:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    960c:	4313      	orrs	r3, r2
    960e:	d121      	bne.n	9654 <hci_evt_encode+0x694>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9610:	2300      	movs	r3, #0
    9612:	9301      	str	r3, [sp, #4]
    9614:	9300      	str	r3, [sp, #0]
    9616:	221a      	movs	r2, #26
    9618:	2102      	movs	r1, #2
    961a:	4630      	mov	r0, r6
    961c:	f006 fdda 	bl	101d4 <ll_conn_update>
    9620:	e5ce      	b.n	91c0 <hci_evt_encode+0x200>
    9622:	bf00      	nop
    9624:	20003d28 	.word	0x20003d28
    9628:	2000082c 	.word	0x2000082c
    962c:	20003d30 	.word	0x20003d30
    9630:	200008b8 	.word	0x200008b8
    9634:	000166b8 	.word	0x000166b8
    9638:	000145f1 	.word	0x000145f1
    963c:	000164db 	.word	0x000164db
    9640:	000153bb 	.word	0x000153bb
    9644:	000153c2 	.word	0x000153c2
    9648:	000164ef 	.word	0x000164ef
    964c:	00015373 	.word	0x00015373
    9650:	00015312 	.word	0x00015312
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    9654:	220a      	movs	r2, #10
    9656:	2106      	movs	r1, #6
    9658:	4628      	mov	r0, r5
    965a:	f7fe fca5 	bl	7fa8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    965e:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9660:	89a3      	ldrh	r3, [r4, #12]
    9662:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    9664:	89e3      	ldrh	r3, [r4, #14]
    9666:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    9668:	8a23      	ldrh	r3, [r4, #16]
    966a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    966c:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    966e:	8103      	strh	r3, [r0, #8]
    9670:	e5a6      	b.n	91c0 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9672:	4b1c      	ldr	r3, [pc, #112]	; (96e4 <hci_evt_encode+0x724>)
    9674:	e9d3 2300 	ldrd	r2, r3, [r3]
    9678:	2200      	movs	r2, #0
    967a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    967e:	4313      	orrs	r3, r2
    9680:	f43f ad9e 	beq.w	91c0 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    9684:	4b18      	ldr	r3, [pc, #96]	; (96e8 <hci_evt_encode+0x728>)
    9686:	e9d3 2300 	ldrd	r2, r3, [r3]
    968a:	2300      	movs	r3, #0
    968c:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9690:	4313      	orrs	r3, r2
    9692:	f43f ad95 	beq.w	91c0 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    9696:	220a      	movs	r2, #10
    9698:	2107      	movs	r1, #7
    969a:	4628      	mov	r0, r5
    969c:	f7fe fc84 	bl	7fa8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    96a0:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    96a2:	8a23      	ldrh	r3, [r4, #16]
    96a4:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    96a6:	8a63      	ldrh	r3, [r4, #18]
    96a8:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    96aa:	89a3      	ldrh	r3, [r4, #12]
    96ac:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    96ae:	89e3      	ldrh	r3, [r4, #14]
    96b0:	e7dd      	b.n	966e <hci_evt_encode+0x6ae>
    96b2:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    96b4:	2a0e      	cmp	r2, #14
    96b6:	d104      	bne.n	96c2 <hci_evt_encode+0x702>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    96b8:	460b      	mov	r3, r1
    96ba:	4632      	mov	r2, r6
    96bc:	2100      	movs	r1, #0
    96be:	201a      	movs	r0, #26
    96c0:	e770      	b.n	95a4 <hci_evt_encode+0x5e4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    96c2:	4b0a      	ldr	r3, [pc, #40]	; (96ec <hci_evt_encode+0x72c>)
    96c4:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    96c6:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    96c8:	9300      	str	r3, [sp, #0]
    96ca:	4a09      	ldr	r2, [pc, #36]	; (96f0 <hci_evt_encode+0x730>)
    96cc:	4b09      	ldr	r3, [pc, #36]	; (96f4 <hci_evt_encode+0x734>)
    96ce:	490a      	ldr	r1, [pc, #40]	; (96f8 <hci_evt_encode+0x738>)
    96d0:	480a      	ldr	r0, [pc, #40]	; (96fc <hci_evt_encode+0x73c>)
    96d2:	f7f7 fc5b 	bl	f8c <printk>
    96d6:	e573      	b.n	91c0 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    96d8:	4b04      	ldr	r3, [pc, #16]	; (96ec <hci_evt_encode+0x72c>)
    96da:	9301      	str	r3, [sp, #4]
    96dc:	9300      	str	r3, [sp, #0]
    96de:	4b08      	ldr	r3, [pc, #32]	; (9700 <hci_evt_encode+0x740>)
    96e0:	e71c      	b.n	951c <hci_evt_encode+0x55c>
    96e2:	bf00      	nop
    96e4:	20003d28 	.word	0x20003d28
    96e8:	20003d30 	.word	0x20003d30
    96ec:	000145f1 	.word	0x000145f1
    96f0:	000153bb 	.word	0x000153bb
    96f4:	000164fe 	.word	0x000164fe
    96f8:	000153c2 	.word	0x000153c2
    96fc:	000166f4 	.word	0x000166f4
    9700:	0001650d 	.word	0x0001650d

00009704 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9704:	b570      	push	{r4, r5, r6, lr}
    9706:	4606      	mov	r6, r0
    9708:	460d      	mov	r5, r1
    970a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    970c:	2113      	movs	r1, #19
    970e:	2205      	movs	r2, #5
    9710:	f7fe fc25 	bl	7f5e <evt_create>

	ep = net_buf_add(buf, len);
    9714:	2105      	movs	r1, #5
    9716:	f106 0008 	add.w	r0, r6, #8
    971a:	f009 f95b 	bl	129d4 <net_buf_simple_add>
	ep->num_handles = num_handles;
    971e:	2301      	movs	r3, #1
    9720:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9722:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    9726:	f8a0 4003 	strh.w	r4, [r0, #3]
    972a:	bd70      	pop	{r4, r5, r6, pc}

0000972c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    972c:	7903      	ldrb	r3, [r0, #4]
    972e:	2b01      	cmp	r3, #1
    9730:	d006      	beq.n	9740 <hci_get_class+0x14>
    9732:	3b02      	subs	r3, #2
    9734:	b2db      	uxtb	r3, r3
    9736:	2b0a      	cmp	r3, #10
    9738:	d80a      	bhi.n	9750 <hci_get_class+0x24>
    973a:	4a07      	ldr	r2, [pc, #28]	; (9758 <hci_get_class+0x2c>)
    973c:	56d0      	ldrsb	r0, [r2, r3]
    973e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9740:	7a03      	ldrb	r3, [r0, #8]
    9742:	f003 0303 	and.w	r3, r3, #3
    9746:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9748:	bf0c      	ite	eq
    974a:	2002      	moveq	r0, #2
    974c:	2003      	movne	r0, #3
    974e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9754:	4770      	bx	lr
    9756:	bf00      	nop
    9758:	00016475 	.word	0x00016475

0000975c <hci_init>:
	dup_count = -1;
    975c:	4b0a      	ldr	r3, [pc, #40]	; (9788 <hci_init+0x2c>)
    975e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9762:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9764:	4b09      	ldr	r3, [pc, #36]	; (978c <hci_init+0x30>)
    9766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    976a:	f641 71ff 	movw	r1, #8191	; 0x1fff
    976e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9772:	4b07      	ldr	r3, [pc, #28]	; (9790 <hci_init+0x34>)
    9774:	2000      	movs	r0, #0
    9776:	2100      	movs	r1, #0
    9778:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    977c:	4b05      	ldr	r3, [pc, #20]	; (9794 <hci_init+0x38>)
    977e:	201f      	movs	r0, #31
    9780:	2100      	movs	r1, #0
    9782:	e9c3 0100 	strd	r0, r1, [r3]
    9786:	4770      	bx	lr
    9788:	20000830 	.word	0x20000830
    978c:	20003d28 	.word	0x20003d28
    9790:	200008b8 	.word	0x200008b8
    9794:	20003d30 	.word	0x20003d30

00009798 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    9798:	bf20      	wfe
	__SEV();
    979a:	bf40      	sev
	__WFE();
    979c:	bf20      	wfe
    979e:	4770      	bx	lr

000097a0 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    97a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    97a2:	4b0d      	ldr	r3, [pc, #52]	; (97d8 <pdu_len_cmp+0x38>)
{
    97a4:	b089      	sub	sp, #36	; 0x24
    97a6:	4605      	mov	r5, r0
    97a8:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    97aa:	aa01      	add	r2, sp, #4
    97ac:	f103 0718 	add.w	r7, r3, #24
    97b0:	6818      	ldr	r0, [r3, #0]
    97b2:	6859      	ldr	r1, [r3, #4]
    97b4:	4614      	mov	r4, r2
    97b6:	c403      	stmia	r4!, {r0, r1}
    97b8:	3308      	adds	r3, #8
    97ba:	42bb      	cmp	r3, r7
    97bc:	4622      	mov	r2, r4
    97be:	d1f7      	bne.n	97b0 <pdu_len_cmp+0x10>
    97c0:	881b      	ldrh	r3, [r3, #0]
    97c2:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    97c4:	ab08      	add	r3, sp, #32
    97c6:	441d      	add	r5, r3
    97c8:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    97cc:	1b83      	subs	r3, r0, r6
    97ce:	4258      	negs	r0, r3
    97d0:	4158      	adcs	r0, r3
    97d2:	b009      	add	sp, #36	; 0x24
    97d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97d6:	bf00      	nop
    97d8:	00014543 	.word	0x00014543

000097dc <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    97dc:	6008      	str	r0, [r1, #0]
    97de:	4770      	bx	lr

000097e0 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    97e0:	b918      	cbnz	r0, 97ea <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    97e2:	680b      	ldr	r3, [r1, #0]
    97e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    97e8:	600b      	str	r3, [r1, #0]
    97ea:	4770      	bx	lr

000097ec <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    97ec:	b918      	cbnz	r0, 97f6 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    97ee:	680b      	ldr	r3, [r1, #0]
    97f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    97f4:	600b      	str	r3, [r1, #0]
    97f6:	4770      	bx	lr

000097f8 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    97f8:	b570      	push	{r4, r5, r6, lr}
    97fa:	1d03      	adds	r3, r0, #4
    97fc:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    97fe:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9800:	429d      	cmp	r5, r3
    9802:	d101      	bne.n	9808 <chan_sel_remap+0x10>
    9804:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9806:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9808:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    980c:	2200      	movs	r2, #0
    980e:	18a0      	adds	r0, r4, r2
    9810:	2a08      	cmp	r2, #8
    9812:	b2c0      	uxtb	r0, r0
    9814:	d101      	bne.n	981a <chan_sel_remap+0x22>
    9816:	4604      	mov	r4, r0
    9818:	e7f2      	b.n	9800 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    981a:	f016 0f01 	tst.w	r6, #1
    981e:	d003      	beq.n	9828 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    9820:	2900      	cmp	r1, #0
    9822:	d0f0      	beq.n	9806 <chan_sel_remap+0xe>
				chan_index--;
    9824:	3901      	subs	r1, #1
    9826:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    9828:	0876      	lsrs	r6, r6, #1
    982a:	3201      	adds	r2, #1
    982c:	e7ef      	b.n	980e <chan_sel_remap+0x16>
	...

00009830 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9830:	4b09      	ldr	r3, [pc, #36]	; (9858 <packet_rx_acquired_count_get+0x28>)
    9832:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    9836:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    983a:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    983c:	bf3b      	ittet	cc
    983e:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    9842:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    9846:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    984a:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    984c:	bf2c      	ite	cs
    984e:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9850:	1a80      	subcc	r0, r0, r2
    9852:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    9854:	4770      	bx	lr
    9856:	bf00      	nop
    9858:	200008c0 	.word	0x200008c0

0000985c <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    985c:	b508      	push	{r3, lr}
    985e:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9860:	f7ff ffe6 	bl	9830 <packet_rx_acquired_count_get>
    9864:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    9866:	bf21      	itttt	cs
    9868:	4b04      	ldrcs	r3, [pc, #16]	; (987c <packet_rx_reserve_get+0x20>)
    986a:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    986e:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    9872:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    9876:	bf38      	it	cc
    9878:	2000      	movcc	r0, #0
}
    987a:	bd08      	pop	{r3, pc}
    987c:	200008c0 	.word	0x200008c0

00009880 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9880:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9882:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    9886:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    988a:	429c      	cmp	r4, r3
    988c:	d15a      	bne.n	9944 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    988e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9892:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9896:	428b      	cmp	r3, r1
    9898:	d154      	bne.n	9944 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    989a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    989e:	2b00      	cmp	r3, #0
    98a0:	db25      	blt.n	98ee <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    98a2:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    98a4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    98a6:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    98aa:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    98ac:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    98b0:	4351      	muls	r1, r2
					      conn->supervision_reload *
    98b2:	227d      	movs	r2, #125	; 0x7d
    98b4:	434a      	muls	r2, r1
					      125 / 1000;
    98b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    98ba:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    98be:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    98c2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    98c6:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    98c8:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    98cc:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    98ce:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    98d0:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    98d4:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    98d6:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    98da:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    98de:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    98e2:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    98e6:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    98ea:	4618      	mov	r0, r3
    98ec:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    98ee:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    98f2:	06dc      	lsls	r4, r3, #27
    98f4:	d428      	bmi.n	9948 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    98f6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    98fa:	069a      	lsls	r2, r3, #26
    98fc:	d503      	bpl.n	9906 <conn_update_req+0x86>
		    (conn->llcp_features &
    98fe:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    9902:	079b      	lsls	r3, r3, #30
    9904:	d520      	bpl.n	9948 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    9906:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9908:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    990a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    990e:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9910:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9914:	4354      	muls	r4, r2
						conn->supervision_reload *
    9916:	227d      	movs	r2, #125	; 0x7d
    9918:	4362      	muls	r2, r4
						125 / 1000;
    991a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    991e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9922:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    9926:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    992a:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    992c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    9930:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    9934:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    9936:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    993a:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    993e:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    9942:	e7d2      	b.n	98ea <conn_update_req+0x6a>
		return 1;
    9944:	2001      	movs	r0, #1
    9946:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    9948:	2002      	movs	r0, #2
}
    994a:	bd30      	pop	{r4, r5, pc}

0000994c <packet_rx_allocate>:
{
    994c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9950:	4d22      	ldr	r5, [pc, #136]	; (99dc <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    9952:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    9956:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    995a:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    995e:	3401      	adds	r4, #1
    9960:	4581      	cmp	r9, r0
    9962:	b2e4      	uxtb	r4, r4
    9964:	bf28      	it	cs
    9966:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    9968:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    996c:	42a3      	cmp	r3, r4
    996e:	bf08      	it	eq
    9970:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9972:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    9976:	f1b9 0f00 	cmp.w	r9, #0
    997a:	d003      	beq.n	9984 <packet_rx_allocate+0x38>
    997c:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9980:	429c      	cmp	r4, r3
    9982:	d101      	bne.n	9988 <packet_rx_allocate+0x3c>
    9984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    9988:	4638      	mov	r0, r7
    998a:	f7fd f952 	bl	6c32 <mem_acquire>
		if (!link) {
    998e:	4606      	mov	r6, r0
    9990:	2800      	cmp	r0, #0
    9992:	d0f7      	beq.n	9984 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9994:	4640      	mov	r0, r8
    9996:	f7fd f94c 	bl	6c32 <mem_acquire>
		if (!node_rx) {
    999a:	b928      	cbnz	r0, 99a8 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    999c:	4630      	mov	r0, r6
    999e:	4910      	ldr	r1, [pc, #64]	; (99e0 <packet_rx_allocate+0x94>)
}
    99a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    99a4:	f7fd b95f 	b.w	6c66 <mem_release>
		node_rx->hdr.onion.link = link;
    99a8:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    99aa:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    99ae:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    99b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    99b6:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    99ba:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    99be:	3401      	adds	r4, #1
    99c0:	b2e4      	uxtb	r4, r4
			acquire = 0;
    99c2:	42a3      	cmp	r3, r4
    99c4:	bf08      	it	eq
    99c6:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    99c8:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    99cc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    99d0:	3b01      	subs	r3, #1
    99d2:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    99d6:	fa5f f989 	uxtb.w	r9, r9
    99da:	e7cc      	b.n	9976 <packet_rx_allocate+0x2a>
    99dc:	200008c0 	.word	0x200008c0
    99e0:	20000a08 	.word	0x20000a08

000099e4 <common_init>:
{
    99e4:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    99e6:	4c39      	ldr	r4, [pc, #228]	; (9acc <common_init+0xe8>)
    99e8:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    99ec:	2a00      	cmp	r2, #0
    99ee:	d040      	beq.n	9a72 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    99f0:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    99f4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    99f8:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    99fc:	f7fd f8f2 	bl	6be4 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9a00:	4b33      	ldr	r3, [pc, #204]	; (9ad0 <common_init+0xec>)
    9a02:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9a06:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9a0a:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9a0e:	f7fd f8e9 	bl	6be4 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9a12:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    9a16:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    9a1a:	4b2e      	ldr	r3, [pc, #184]	; (9ad4 <common_init+0xf0>)
    9a1c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9a20:	440a      	add	r2, r1
    9a22:	2108      	movs	r1, #8
    9a24:	f7fd f8de 	bl	6be4 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    9a28:	4b2b      	ldr	r3, [pc, #172]	; (9ad8 <common_init+0xf4>)
    9a2a:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    9a2e:	2202      	movs	r2, #2
    9a30:	2124      	movs	r1, #36	; 0x24
    9a32:	f7fd f8d7 	bl	6be4 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    9a36:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    9a3a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9a3e:	4b27      	ldr	r3, [pc, #156]	; (9adc <common_init+0xf8>)
    9a40:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    9a44:	3a01      	subs	r2, #1
    9a46:	b292      	uxth	r2, r2
    9a48:	f7fd f8cc 	bl	6be4 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9a4c:	4821      	ldr	r0, [pc, #132]	; (9ad4 <common_init+0xf0>)
    9a4e:	f7fd f8f0 	bl	6c32 <mem_acquire>
	LL_ASSERT(link);
    9a52:	b988      	cbnz	r0, 9a78 <common_init+0x94>
    9a54:	4b22      	ldr	r3, [pc, #136]	; (9ae0 <common_init+0xfc>)
    9a56:	9301      	str	r3, [sp, #4]
    9a58:	9300      	str	r3, [sp, #0]
    9a5a:	4a22      	ldr	r2, [pc, #136]	; (9ae4 <common_init+0x100>)
    9a5c:	4b22      	ldr	r3, [pc, #136]	; (9ae8 <common_init+0x104>)
    9a5e:	4923      	ldr	r1, [pc, #140]	; (9aec <common_init+0x108>)
    9a60:	4823      	ldr	r0, [pc, #140]	; (9af0 <common_init+0x10c>)
    9a62:	f7f7 fa93 	bl	f8c <printk>
    9a66:	4040      	eors	r0, r0
    9a68:	f380 8811 	msr	BASEPRI, r0
    9a6c:	f04f 0004 	mov.w	r0, #4
    9a70:	df02      	svc	2
		_radio.conn_free = NULL;
    9a72:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    9a76:	e7c3      	b.n	9a00 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9a78:	4a1e      	ldr	r2, [pc, #120]	; (9af4 <common_init+0x110>)
    9a7a:	1f11      	subs	r1, r2, #4
    9a7c:	f7fd f930 	bl	6ce0 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9a80:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9a84:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9a88:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9a8c:	231f      	movs	r3, #31
    9a8e:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9a92:	2325      	movs	r3, #37	; 0x25
    9a94:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9a98:	231b      	movs	r3, #27
    9a9a:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9a9e:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9aa2:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9aa4:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    9aa8:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    9aaa:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9aae:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9ab2:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    9ab6:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    9aba:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9abe:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9ac2:	b002      	add	sp, #8
    9ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    9ac8:	f7ff bf40 	b.w	994c <packet_rx_allocate>
    9acc:	200008c0 	.word	0x200008c0
    9ad0:	200009f0 	.word	0x200009f0
    9ad4:	20000a08 	.word	0x20000a08
    9ad8:	20000a1c 	.word	0x20000a1c
    9adc:	20000a24 	.word	0x20000a24
    9ae0:	000145f1 	.word	0x000145f1
    9ae4:	00015373 	.word	0x00015373
    9ae8:	000167c6 	.word	0x000167c6
    9aec:	000153c2 	.word	0x000153c2
    9af0:	00016c43 	.word	0x00016c43
    9af4:	20000a10 	.word	0x20000a10

00009af8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9afc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    9afe:	4294      	cmp	r4, r2
{
    9b00:	4681      	mov	r9, r0
    9b02:	460f      	mov	r7, r1
    9b04:	4690      	mov	r8, r2
	if (_first == last) {
    9b06:	d03d      	beq.n	9b84 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    9b08:	4e1f      	ldr	r6, [pc, #124]	; (9b88 <tx_cmplt_get+0x90>)
    9b0a:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    9b0e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    9b12:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    9b14:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    9b16:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9b1a:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    9b1e:	b222      	sxth	r2, r4
    9b20:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    9b24:	f8b9 e000 	ldrh.w	lr, [r9]
    9b28:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9b2c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    9b30:	4596      	cmp	lr, r2
    9b32:	d120      	bne.n	9b76 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    9b34:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    9b36:	2801      	cmp	r0, #1
    9b38:	f020 0303 	bic.w	r3, r0, #3
    9b3c:	d90a      	bls.n	9b54 <tx_cmplt_get+0x5c>
    9b3e:	b1f3      	cbz	r3, 9b7e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    9b40:	1d02      	adds	r2, r0, #4
    9b42:	d01c      	beq.n	9b7e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9b44:	7942      	ldrb	r2, [r0, #5]
    9b46:	b1d2      	cbz	r2, 9b7e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    9b48:	7902      	ldrb	r2, [r0, #4]
    9b4a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9b4e:	3a01      	subs	r2, #1
    9b50:	2a01      	cmp	r2, #1
    9b52:	d814      	bhi.n	9b7e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    9b54:	2201      	movs	r2, #1
			cmplt++;
    9b56:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    9b58:	604a      	str	r2, [r1, #4]
			cmplt++;
    9b5a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    9b5c:	b113      	cbz	r3, 9b64 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9b5e:	4651      	mov	r1, sl
    9b60:	f7fd f881 	bl	6c66 <mem_release>
		}

		_first = _first + 1;
    9b64:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    9b66:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    9b6a:	b2e4      	uxtb	r4, r4
			_first = 0;
    9b6c:	42a2      	cmp	r2, r4
    9b6e:	bf08      	it	eq
    9b70:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    9b72:	4544      	cmp	r4, r8
    9b74:	d1d3      	bne.n	9b1e <tx_cmplt_get+0x26>

	*first = _first;
    9b76:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    9b78:	4628      	mov	r0, r5
    9b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    9b7e:	f8c1 b004 	str.w	fp, [r1, #4]
    9b82:	e7eb      	b.n	9b5c <tx_cmplt_get+0x64>
		return 0;
    9b84:	2500      	movs	r5, #0
    9b86:	e7f7      	b.n	9b78 <tx_cmplt_get+0x80>
    9b88:	200008c0 	.word	0x200008c0

00009b8c <connection_get>:
{
    9b8c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    9b8e:	4b09      	ldr	r3, [pc, #36]	; (9bb4 <connection_get+0x28>)
    9b90:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    9b94:	4282      	cmp	r2, r0
{
    9b96:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    9b98:	d90a      	bls.n	9bb0 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    9b9a:	4602      	mov	r2, r0
    9b9c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9ba0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9ba4:	f7fd f87a 	bl	6c9c <mem_get>
		if ((conn) && (conn->handle == handle)) {
    9ba8:	b110      	cbz	r0, 9bb0 <connection_get+0x24>
    9baa:	8c03      	ldrh	r3, [r0, #32]
    9bac:	42a3      	cmp	r3, r4
    9bae:	d000      	beq.n	9bb2 <connection_get+0x26>
	return 0;
    9bb0:	2000      	movs	r0, #0
}
    9bb2:	bd10      	pop	{r4, pc}
    9bb4:	200008c0 	.word	0x200008c0

00009bb8 <role_disable>:
{
    9bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bbc:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9bbe:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    9bc0:	2805      	cmp	r0, #5
{
    9bc2:	4605      	mov	r5, r0
    9bc4:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9bc6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    9bc8:	d00c      	beq.n	9be4 <role_disable+0x2c>
    9bca:	2806      	cmp	r0, #6
    9bcc:	d040      	beq.n	9c50 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9bce:	d945      	bls.n	9c5c <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    9bd0:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    9bd2:	b280      	uxth	r0, r0
    9bd4:	f7ff ffda 	bl	9b8c <connection_get>
			if (!conn) {
    9bd8:	2800      	cmp	r0, #0
    9bda:	f000 8123 	beq.w	9e24 <role_disable+0x26c>
			ticks_active_to_start =
    9bde:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    9be2:	e00f      	b.n	9c04 <role_disable+0x4c>
		ticks_xtal_to_start =
    9be4:	4b90      	ldr	r3, [pc, #576]	; (9e28 <role_disable+0x270>)
    9be6:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    9be8:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9bec:	ab02      	add	r3, sp, #8
    9bee:	9300      	str	r3, [sp, #0]
    9bf0:	460a      	mov	r2, r1
    9bf2:	4b8e      	ldr	r3, [pc, #568]	; (9e2c <role_disable+0x274>)
    9bf4:	2103      	movs	r1, #3
    9bf6:	2000      	movs	r0, #0
    9bf8:	f7fd ff42 	bl	7a80 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9bfc:	2802      	cmp	r0, #2
    9bfe:	d011      	beq.n	9c24 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9c00:	9b02      	ldr	r3, [sp, #8]
    9c02:	b99b      	cbnz	r3, 9c2c <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    9c04:	4c88      	ldr	r4, [pc, #544]	; (9e28 <role_disable+0x270>)
    9c06:	7ca3      	ldrb	r3, [r4, #18]
    9c08:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9c0c:	2b00      	cmp	r3, #0
    9c0e:	d02d      	beq.n	9c6c <role_disable+0xb4>
    9c10:	4b87      	ldr	r3, [pc, #540]	; (9e30 <role_disable+0x278>)
    9c12:	9301      	str	r3, [sp, #4]
    9c14:	9300      	str	r3, [sp, #0]
    9c16:	4a87      	ldr	r2, [pc, #540]	; (9e34 <role_disable+0x27c>)
    9c18:	4b87      	ldr	r3, [pc, #540]	; (9e38 <role_disable+0x280>)
    9c1a:	4988      	ldr	r1, [pc, #544]	; (9e3c <role_disable+0x284>)
    9c1c:	4888      	ldr	r0, [pc, #544]	; (9e40 <role_disable+0x288>)
    9c1e:	e00f      	b.n	9c40 <role_disable+0x88>
				cpu_sleep();
    9c20:	f7ff fdba 	bl	9798 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9c24:	9b02      	ldr	r3, [sp, #8]
    9c26:	2b02      	cmp	r3, #2
    9c28:	d0fa      	beq.n	9c20 <role_disable+0x68>
    9c2a:	e7e9      	b.n	9c00 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9c2c:	9b02      	ldr	r3, [sp, #8]
    9c2e:	2b01      	cmp	r3, #1
    9c30:	d0e8      	beq.n	9c04 <role_disable+0x4c>
    9c32:	4b7f      	ldr	r3, [pc, #508]	; (9e30 <role_disable+0x278>)
    9c34:	9301      	str	r3, [sp, #4]
    9c36:	9300      	str	r3, [sp, #0]
    9c38:	4a7e      	ldr	r2, [pc, #504]	; (9e34 <role_disable+0x27c>)
    9c3a:	4b7f      	ldr	r3, [pc, #508]	; (9e38 <role_disable+0x280>)
    9c3c:	497f      	ldr	r1, [pc, #508]	; (9e3c <role_disable+0x284>)
    9c3e:	4881      	ldr	r0, [pc, #516]	; (9e44 <role_disable+0x28c>)
			LL_ASSERT(0);
    9c40:	f7f7 f9a4 	bl	f8c <printk>
    9c44:	4040      	eors	r0, r0
    9c46:	f380 8811 	msr	BASEPRI, r0
    9c4a:	f04f 0004 	mov.w	r0, #4
    9c4e:	df02      	svc	2
		ticks_xtal_to_start =
    9c50:	4b75      	ldr	r3, [pc, #468]	; (9e28 <role_disable+0x270>)
    9c52:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    9c56:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    9c5a:	e7d3      	b.n	9c04 <role_disable+0x4c>
			LL_ASSERT(0);
    9c5c:	4b74      	ldr	r3, [pc, #464]	; (9e30 <role_disable+0x278>)
    9c5e:	9301      	str	r3, [sp, #4]
    9c60:	9300      	str	r3, [sp, #0]
    9c62:	4b75      	ldr	r3, [pc, #468]	; (9e38 <role_disable+0x280>)
    9c64:	4a73      	ldr	r2, [pc, #460]	; (9e34 <role_disable+0x27c>)
    9c66:	4975      	ldr	r1, [pc, #468]	; (9e3c <role_disable+0x284>)
    9c68:	4877      	ldr	r0, [pc, #476]	; (9e48 <role_disable+0x290>)
    9c6a:	e7e9      	b.n	9c40 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    9c6c:	ab06      	add	r3, sp, #24
    9c6e:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    9c70:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    9c72:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9c76:	2103      	movs	r1, #3
    9c78:	9300      	str	r3, [sp, #0]
    9c7a:	462a      	mov	r2, r5
    9c7c:	4b6b      	ldr	r3, [pc, #428]	; (9e2c <role_disable+0x274>)
    9c7e:	f7fd feff 	bl	7a80 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9c82:	2802      	cmp	r0, #2
    9c84:	d025      	beq.n	9cd2 <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    9c86:	9b02      	ldr	r3, [sp, #8]
    9c88:	2b00      	cmp	r3, #0
    9c8a:	d169      	bne.n	9d60 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    9c8c:	7c23      	ldrb	r3, [r4, #16]
    9c8e:	429d      	cmp	r5, r3
    9c90:	d002      	beq.n	9c98 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    9c92:	7c63      	ldrb	r3, [r4, #17]
    9c94:	429d      	cmp	r5, r3
    9c96:	d15f      	bne.n	9d58 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    9c98:	ab06      	add	r3, sp, #24
    9c9a:	2202      	movs	r2, #2
    9c9c:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ca0:	2200      	movs	r2, #0
    9ca2:	9300      	str	r3, [sp, #0]
    9ca4:	2103      	movs	r1, #3
    9ca6:	4b61      	ldr	r3, [pc, #388]	; (9e2c <role_disable+0x274>)
    9ca8:	4610      	mov	r0, r2
    9caa:	f7fd fee9 	bl	7a80 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9cae:	2802      	cmp	r0, #2
    9cb0:	d11d      	bne.n	9cee <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9cb2:	2201      	movs	r2, #1
    9cb4:	4611      	mov	r1, r2
    9cb6:	2003      	movs	r0, #3
    9cb8:	f7fd f85e 	bl	6d78 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    9cbc:	9b03      	ldr	r3, [sp, #12]
    9cbe:	2b02      	cmp	r3, #2
    9cc0:	d115      	bne.n	9cee <role_disable+0x136>
    9cc2:	4b5b      	ldr	r3, [pc, #364]	; (9e30 <role_disable+0x278>)
    9cc4:	9301      	str	r3, [sp, #4]
    9cc6:	9300      	str	r3, [sp, #0]
    9cc8:	4a5a      	ldr	r2, [pc, #360]	; (9e34 <role_disable+0x27c>)
    9cca:	4b60      	ldr	r3, [pc, #384]	; (9e4c <role_disable+0x294>)
    9ccc:	495b      	ldr	r1, [pc, #364]	; (9e3c <role_disable+0x284>)
    9cce:	4860      	ldr	r0, [pc, #384]	; (9e50 <role_disable+0x298>)
    9cd0:	e7b6      	b.n	9c40 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    9cd2:	7c63      	ldrb	r3, [r4, #17]
    9cd4:	429d      	cmp	r5, r3
    9cd6:	d104      	bne.n	9ce2 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9cd8:	2201      	movs	r2, #1
    9cda:	4611      	mov	r1, r2
    9cdc:	2003      	movs	r0, #3
    9cde:	f7fd f84b 	bl	6d78 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    9ce2:	9b02      	ldr	r3, [sp, #8]
    9ce4:	2b02      	cmp	r3, #2
    9ce6:	d1ce      	bne.n	9c86 <role_disable+0xce>
			cpu_sleep();
    9ce8:	f7ff fd56 	bl	9798 <cpu_sleep>
    9cec:	e7f9      	b.n	9ce2 <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    9cee:	9803      	ldr	r0, [sp, #12]
    9cf0:	2800      	cmp	r0, #0
    9cf2:	d150      	bne.n	9d96 <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    9cf4:	2302      	movs	r3, #2
    9cf6:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    9cf8:	7c23      	ldrb	r3, [r4, #16]
    9cfa:	b93b      	cbnz	r3, 9d0c <role_disable+0x154>
    9cfc:	4b4c      	ldr	r3, [pc, #304]	; (9e30 <role_disable+0x278>)
    9cfe:	9301      	str	r3, [sp, #4]
    9d00:	9300      	str	r3, [sp, #0]
    9d02:	4a4c      	ldr	r2, [pc, #304]	; (9e34 <role_disable+0x27c>)
    9d04:	4b51      	ldr	r3, [pc, #324]	; (9e4c <role_disable+0x294>)
    9d06:	494d      	ldr	r1, [pc, #308]	; (9e3c <role_disable+0x284>)
    9d08:	4852      	ldr	r0, [pc, #328]	; (9e54 <role_disable+0x29c>)
    9d0a:	e799      	b.n	9c40 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d0c:	ab04      	add	r3, sp, #16
    9d0e:	9300      	str	r3, [sp, #0]
    9d10:	2201      	movs	r2, #1
    9d12:	4b46      	ldr	r3, [pc, #280]	; (9e2c <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    9d14:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d16:	2103      	movs	r1, #3
    9d18:	f7fd feb2 	bl	7a80 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9d1c:	2802      	cmp	r0, #2
    9d1e:	d10f      	bne.n	9d40 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9d20:	2201      	movs	r2, #1
    9d22:	4611      	mov	r1, r2
    9d24:	2003      	movs	r0, #3
    9d26:	f7fd f827 	bl	6d78 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    9d2a:	9b04      	ldr	r3, [sp, #16]
    9d2c:	2b02      	cmp	r3, #2
    9d2e:	d107      	bne.n	9d40 <role_disable+0x188>
    9d30:	4b3f      	ldr	r3, [pc, #252]	; (9e30 <role_disable+0x278>)
    9d32:	9301      	str	r3, [sp, #4]
    9d34:	9300      	str	r3, [sp, #0]
    9d36:	4a3f      	ldr	r2, [pc, #252]	; (9e34 <role_disable+0x27c>)
    9d38:	4b44      	ldr	r3, [pc, #272]	; (9e4c <role_disable+0x294>)
    9d3a:	4940      	ldr	r1, [pc, #256]	; (9e3c <role_disable+0x284>)
    9d3c:	4846      	ldr	r0, [pc, #280]	; (9e58 <role_disable+0x2a0>)
    9d3e:	e77f      	b.n	9c40 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    9d40:	9a04      	ldr	r2, [sp, #16]
    9d42:	b99a      	cbnz	r2, 9d6c <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    9d44:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    9d48:	45b0      	cmp	r8, r6
    9d4a:	d922      	bls.n	9d92 <role_disable+0x1da>
				ret = mayfly_enqueue(
    9d4c:	4b43      	ldr	r3, [pc, #268]	; (9e5c <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9d4e:	4611      	mov	r1, r2
    9d50:	2003      	movs	r0, #3
    9d52:	f7fd f839 	bl	6dc8 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9d56:	b9a0      	cbnz	r0, 9d82 <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    9d58:	7ca3      	ldrb	r3, [r4, #18]
    9d5a:	b90b      	cbnz	r3, 9d60 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    9d5c:	2301      	movs	r3, #1
    9d5e:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    9d60:	2300      	movs	r3, #0
    9d62:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    9d64:	9802      	ldr	r0, [sp, #8]
}
    9d66:	b006      	add	sp, #24
    9d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    9d6c:	9b04      	ldr	r3, [sp, #16]
    9d6e:	2b01      	cmp	r3, #1
    9d70:	d153      	bne.n	9e1a <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9d72:	2200      	movs	r2, #0
    9d74:	4611      	mov	r1, r2
    9d76:	4b39      	ldr	r3, [pc, #228]	; (9e5c <role_disable+0x2a4>)
    9d78:	2003      	movs	r0, #3
    9d7a:	f7fd f825 	bl	6dc8 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9d7e:	4602      	mov	r2, r0
    9d80:	b138      	cbz	r0, 9d92 <role_disable+0x1da>
			LL_ASSERT(!ret);
    9d82:	4b2b      	ldr	r3, [pc, #172]	; (9e30 <role_disable+0x278>)
    9d84:	9301      	str	r3, [sp, #4]
    9d86:	9300      	str	r3, [sp, #0]
    9d88:	4a2a      	ldr	r2, [pc, #168]	; (9e34 <role_disable+0x27c>)
    9d8a:	4b30      	ldr	r3, [pc, #192]	; (9e4c <role_disable+0x294>)
    9d8c:	492b      	ldr	r1, [pc, #172]	; (9e3c <role_disable+0x284>)
    9d8e:	4834      	ldr	r0, [pc, #208]	; (9e60 <role_disable+0x2a8>)
    9d90:	e756      	b.n	9c40 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9d92:	4b34      	ldr	r3, [pc, #208]	; (9e64 <role_disable+0x2ac>)
    9d94:	e7db      	b.n	9d4e <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    9d96:	9d03      	ldr	r5, [sp, #12]
    9d98:	2d01      	cmp	r5, #1
    9d9a:	d13e      	bne.n	9e1a <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    9d9c:	2fff      	cmp	r7, #255	; 0xff
    9d9e:	d029      	beq.n	9df4 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    9da0:	ab06      	add	r3, sp, #24
    9da2:	2202      	movs	r2, #2
    9da4:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9da8:	2103      	movs	r1, #3
    9daa:	9300      	str	r3, [sp, #0]
    9dac:	463a      	mov	r2, r7
    9dae:	4b1f      	ldr	r3, [pc, #124]	; (9e2c <role_disable+0x274>)
    9db0:	2000      	movs	r0, #0
    9db2:	f7fd fe65 	bl	7a80 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    9db6:	2802      	cmp	r0, #2
    9db8:	d10f      	bne.n	9dda <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9dba:	462a      	mov	r2, r5
    9dbc:	4629      	mov	r1, r5
    9dbe:	2003      	movs	r0, #3
    9dc0:	f7fc ffda 	bl	6d78 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    9dc4:	9b05      	ldr	r3, [sp, #20]
    9dc6:	2b02      	cmp	r3, #2
    9dc8:	d107      	bne.n	9dda <role_disable+0x222>
    9dca:	4b19      	ldr	r3, [pc, #100]	; (9e30 <role_disable+0x278>)
    9dcc:	9301      	str	r3, [sp, #4]
    9dce:	9300      	str	r3, [sp, #0]
    9dd0:	4a18      	ldr	r2, [pc, #96]	; (9e34 <role_disable+0x27c>)
    9dd2:	4b1e      	ldr	r3, [pc, #120]	; (9e4c <role_disable+0x294>)
    9dd4:	4919      	ldr	r1, [pc, #100]	; (9e3c <role_disable+0x284>)
    9dd6:	4824      	ldr	r0, [pc, #144]	; (9e68 <role_disable+0x2b0>)
    9dd8:	e732      	b.n	9c40 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    9dda:	9b05      	ldr	r3, [sp, #20]
    9ddc:	b153      	cbz	r3, 9df4 <role_disable+0x23c>
    9dde:	9b05      	ldr	r3, [sp, #20]
    9de0:	2b01      	cmp	r3, #1
    9de2:	d007      	beq.n	9df4 <role_disable+0x23c>
    9de4:	4b12      	ldr	r3, [pc, #72]	; (9e30 <role_disable+0x278>)
    9de6:	9301      	str	r3, [sp, #4]
    9de8:	9300      	str	r3, [sp, #0]
    9dea:	4a12      	ldr	r2, [pc, #72]	; (9e34 <role_disable+0x27c>)
    9dec:	4b17      	ldr	r3, [pc, #92]	; (9e4c <role_disable+0x294>)
    9dee:	4913      	ldr	r1, [pc, #76]	; (9e3c <role_disable+0x284>)
    9df0:	481e      	ldr	r0, [pc, #120]	; (9e6c <role_disable+0x2b4>)
    9df2:	e725      	b.n	9c40 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    9df4:	7ce3      	ldrb	r3, [r4, #19]
    9df6:	2b00      	cmp	r3, #0
    9df8:	d0ae      	beq.n	9d58 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    9dfa:	4b1d      	ldr	r3, [pc, #116]	; (9e70 <role_disable+0x2b8>)
    9dfc:	2204      	movs	r2, #4
    9dfe:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9e00:	2200      	movs	r2, #0
    9e02:	4611      	mov	r1, r2
    9e04:	2003      	movs	r0, #3
    9e06:	f7fc ffdf 	bl	6dc8 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9e0a:	2800      	cmp	r0, #0
    9e0c:	d1b9      	bne.n	9d82 <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    9e0e:	7ce3      	ldrb	r3, [r4, #19]
    9e10:	2b00      	cmp	r3, #0
    9e12:	d0a1      	beq.n	9d58 <role_disable+0x1a0>
				cpu_sleep();
    9e14:	f7ff fcc0 	bl	9798 <cpu_sleep>
    9e18:	e7f9      	b.n	9e0e <role_disable+0x256>
		LL_ASSERT(0);
    9e1a:	4b05      	ldr	r3, [pc, #20]	; (9e30 <role_disable+0x278>)
    9e1c:	9301      	str	r3, [sp, #4]
    9e1e:	9300      	str	r3, [sp, #0]
    9e20:	4b0a      	ldr	r3, [pc, #40]	; (9e4c <role_disable+0x294>)
    9e22:	e71f      	b.n	9c64 <role_disable+0xac>
				return 1;
    9e24:	2001      	movs	r0, #1
    9e26:	e79e      	b.n	9d66 <role_disable+0x1ae>
    9e28:	200008c0 	.word	0x200008c0
    9e2c:	000097dd 	.word	0x000097dd
    9e30:	000145f1 	.word	0x000145f1
    9e34:	00015373 	.word	0x00015373
    9e38:	00016be8 	.word	0x00016be8
    9e3c:	000153c2 	.word	0x000153c2
    9e40:	0001755a 	.word	0x0001755a
    9e44:	0001751a 	.word	0x0001751a
    9e48:	00015312 	.word	0x00015312
    9e4c:	00016bd4 	.word	0x00016bd4
    9e50:	00017592 	.word	0x00017592
    9e54:	000175c3 	.word	0x000175c3
    9e58:	000175fd 	.word	0x000175fd
    9e5c:	20003d58 	.word	0x20003d58
    9e60:	0001762d 	.word	0x0001762d
    9e64:	20003df8 	.word	0x20003df8
    9e68:	00017653 	.word	0x00017653
    9e6c:	00017685 	.word	0x00017685
    9e70:	20003d78 	.word	0x20003d78

00009e74 <mayfly_xtal_retain>:
{
    9e74:	b513      	push	{r0, r1, r4, lr}
    9e76:	4b1d      	ldr	r3, [pc, #116]	; (9eec <mayfly_xtal_retain+0x78>)
    9e78:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    9e7a:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    9e7c:	b301      	cbz	r1, 9ec0 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    9e7e:	2a00      	cmp	r2, #0
    9e80:	d132      	bne.n	9ee8 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    9e82:	2801      	cmp	r0, #1
    9e84:	d00e      	beq.n	9ea4 <mayfly_xtal_retain+0x30>
    9e86:	4b1a      	ldr	r3, [pc, #104]	; (9ef0 <mayfly_xtal_retain+0x7c>)
    9e88:	9301      	str	r3, [sp, #4]
    9e8a:	9300      	str	r3, [sp, #0]
    9e8c:	4a19      	ldr	r2, [pc, #100]	; (9ef4 <mayfly_xtal_retain+0x80>)
    9e8e:	4b1a      	ldr	r3, [pc, #104]	; (9ef8 <mayfly_xtal_retain+0x84>)
    9e90:	491a      	ldr	r1, [pc, #104]	; (9efc <mayfly_xtal_retain+0x88>)
    9e92:	481b      	ldr	r0, [pc, #108]	; (9f00 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    9e94:	f7f7 f87a 	bl	f8c <printk>
    9e98:	4040      	eors	r0, r0
    9e9a:	f380 8811 	msr	BASEPRI, r0
    9e9e:	f04f 0004 	mov.w	r0, #4
    9ea2:	df02      	svc	2
			s_xtal_retained = 1;
    9ea4:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    9ea6:	4b17      	ldr	r3, [pc, #92]	; (9f04 <mayfly_xtal_retain+0x90>)
    9ea8:	4611      	mov	r1, r2
    9eaa:	f7fc ff8d 	bl	6dc8 <mayfly_enqueue>
			LL_ASSERT(!retval);
    9eae:	b1d8      	cbz	r0, 9ee8 <mayfly_xtal_retain+0x74>
    9eb0:	4b0f      	ldr	r3, [pc, #60]	; (9ef0 <mayfly_xtal_retain+0x7c>)
    9eb2:	9301      	str	r3, [sp, #4]
    9eb4:	9300      	str	r3, [sp, #0]
    9eb6:	4a0f      	ldr	r2, [pc, #60]	; (9ef4 <mayfly_xtal_retain+0x80>)
    9eb8:	4b0f      	ldr	r3, [pc, #60]	; (9ef8 <mayfly_xtal_retain+0x84>)
    9eba:	4910      	ldr	r1, [pc, #64]	; (9efc <mayfly_xtal_retain+0x88>)
    9ebc:	4812      	ldr	r0, [pc, #72]	; (9f08 <mayfly_xtal_retain+0x94>)
    9ebe:	e7e9      	b.n	9e94 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    9ec0:	b192      	cbz	r2, 9ee8 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    9ec2:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    9ec4:	b170      	cbz	r0, 9ee4 <mayfly_xtal_retain+0x70>
    9ec6:	2801      	cmp	r0, #1
    9ec8:	d104      	bne.n	9ed4 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    9eca:	4b10      	ldr	r3, [pc, #64]	; (9f0c <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    9ecc:	2200      	movs	r2, #0
    9ece:	4611      	mov	r1, r2
    9ed0:	4620      	mov	r0, r4
    9ed2:	e7ea      	b.n	9eaa <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    9ed4:	4b06      	ldr	r3, [pc, #24]	; (9ef0 <mayfly_xtal_retain+0x7c>)
    9ed6:	9301      	str	r3, [sp, #4]
    9ed8:	9300      	str	r3, [sp, #0]
    9eda:	4a06      	ldr	r2, [pc, #24]	; (9ef4 <mayfly_xtal_retain+0x80>)
    9edc:	4b06      	ldr	r3, [pc, #24]	; (9ef8 <mayfly_xtal_retain+0x84>)
    9ede:	4907      	ldr	r1, [pc, #28]	; (9efc <mayfly_xtal_retain+0x88>)
    9ee0:	480b      	ldr	r0, [pc, #44]	; (9f10 <mayfly_xtal_retain+0x9c>)
    9ee2:	e7d7      	b.n	9e94 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    9ee4:	4b0b      	ldr	r3, [pc, #44]	; (9f14 <mayfly_xtal_retain+0xa0>)
    9ee6:	e7f1      	b.n	9ecc <mayfly_xtal_retain+0x58>
}
    9ee8:	b002      	add	sp, #8
    9eea:	bd10      	pop	{r4, pc}
    9eec:	20000ac0 	.word	0x20000ac0
    9ef0:	000145f1 	.word	0x000145f1
    9ef4:	00015373 	.word	0x00015373
    9ef8:	0001698d 	.word	0x0001698d
    9efc:	000153c2 	.word	0x000153c2
    9f00:	00017373 	.word	0x00017373
    9f04:	20003dc8 	.word	0x20003dc8
    9f08:	000173a3 	.word	0x000173a3
    9f0c:	20003de8 	.word	0x20003de8
    9f10:	00015312 	.word	0x00015312
    9f14:	20003dd8 	.word	0x20003dd8

00009f18 <rx_packet_set>:
{
    9f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    9f1a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    9f1e:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    9f20:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    9f22:	f004 0407 	and.w	r4, r4, #7
{
    9f26:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    9f28:	4620      	mov	r0, r4
    9f2a:	2100      	movs	r1, #0
    9f2c:	f007 ffe0 	bl	11ef0 <radio_phy_set>
	if (conn->enc_rx) {
    9f30:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    9f34:	f013 0f10 	tst.w	r3, #16
    9f38:	ea4f 0244 	mov.w	r2, r4, lsl #1
    9f3c:	d010      	beq.n	9f60 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    9f3e:	1d29      	adds	r1, r5, #4
    9f40:	f042 0201 	orr.w	r2, r2, #1
    9f44:	b2c9      	uxtb	r1, r1
    9f46:	2008      	movs	r0, #8
    9f48:	f008 f818 	bl	11f7c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    9f4c:	463a      	mov	r2, r7
    9f4e:	4621      	mov	r1, r4
    9f50:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    9f54:	f008 fa56 	bl	12404 <radio_ccm_rx_pkt_set>
}
    9f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    9f5c:	f008 b83c 	b.w	11fd8 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    9f60:	2008      	movs	r0, #8
    9f62:	f042 0201 	orr.w	r2, r2, #1
    9f66:	b2e9      	uxtb	r1, r5
    9f68:	f008 f808 	bl	11f7c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    9f6c:	4638      	mov	r0, r7
    9f6e:	e7f3      	b.n	9f58 <rx_packet_set+0x40>

00009f70 <tx_packet_set>:
{
    9f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f72:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    9f74:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    9f78:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    9f7a:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    9f7e:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    9f80:	09c9      	lsrs	r1, r1, #7
    9f82:	4620      	mov	r0, r4
    9f84:	f007 ffb4 	bl	11ef0 <radio_phy_set>
	if (conn->enc_tx) {
    9f88:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    9f8c:	f013 0f20 	tst.w	r3, #32
    9f90:	ea4f 0244 	mov.w	r2, r4, lsl #1
    9f94:	d00f      	beq.n	9fb6 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    9f96:	1d29      	adds	r1, r5, #4
    9f98:	b2c9      	uxtb	r1, r1
    9f9a:	2008      	movs	r0, #8
    9f9c:	f042 0201 	orr.w	r2, r2, #1
    9fa0:	f007 ffec 	bl	11f7c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    9fa4:	4639      	mov	r1, r7
    9fa6:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    9faa:	f008 fa67 	bl	1247c <radio_ccm_tx_pkt_set>
}
    9fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    9fb2:	f008 b817 	b.w	11fe4 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    9fb6:	2008      	movs	r0, #8
    9fb8:	f042 0201 	orr.w	r2, r2, #1
    9fbc:	b2e9      	uxtb	r1, r5
    9fbe:	f007 ffdd 	bl	11f7c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    9fc2:	4638      	mov	r0, r7
    9fc4:	e7f3      	b.n	9fae <tx_packet_set+0x3e>
	...

00009fc8 <sched_free_win_offset_calc>:
{
    9fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fcc:	b08f      	sub	sp, #60	; 0x3c
    9fce:	4692      	mov	sl, r2
    9fd0:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9fd2:	6803      	ldr	r3, [r0, #0]
{
    9fd4:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9fd6:	2b00      	cmp	r3, #0
{
    9fd8:	4680      	mov	r8, r0
    9fda:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9fdc:	da3a      	bge.n	a054 <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    9fde:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    9fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    9fe4:	4291      	cmp	r1, r2
    9fe6:	bf2c      	ite	cs
    9fe8:	1a5a      	subcs	r2, r3, r1
    9fea:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    9fec:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    9fee:	f8d8 200c 	ldr.w	r2, [r8, #12]
    9ff2:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    9ff4:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    9ff6:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    9ff8:	18d3      	adds	r3, r2, r3
    9ffa:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    9ffc:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a000:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a004:	940c      	str	r4, [sp, #48]	; 0x30
    a006:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a008:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a00a:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a00c:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a00e:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a010:	2302      	movs	r3, #2
    a012:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a014:	ab0d      	add	r3, sp, #52	; 0x34
    a016:	9302      	str	r3, [sp, #8]
    a018:	4b81      	ldr	r3, [pc, #516]	; (a220 <sched_free_win_offset_calc+0x258>)
    a01a:	9301      	str	r3, [sp, #4]
    a01c:	ab0b      	add	r3, sp, #44	; 0x2c
    a01e:	9300      	str	r3, [sp, #0]
    a020:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a024:	ab0c      	add	r3, sp, #48	; 0x30
    a026:	2101      	movs	r1, #1
    a028:	2000      	movs	r0, #0
    a02a:	f7fd fd65 	bl	7af8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a02e:	2802      	cmp	r0, #2
    a030:	d019      	beq.n	a066 <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a034:	b1db      	cbz	r3, a06e <sched_free_win_offset_calc+0xa6>
    a036:	4b7b      	ldr	r3, [pc, #492]	; (a224 <sched_free_win_offset_calc+0x25c>)
    a038:	9301      	str	r3, [sp, #4]
    a03a:	9300      	str	r3, [sp, #0]
    a03c:	4a7a      	ldr	r2, [pc, #488]	; (a228 <sched_free_win_offset_calc+0x260>)
    a03e:	4b7b      	ldr	r3, [pc, #492]	; (a22c <sched_free_win_offset_calc+0x264>)
    a040:	497b      	ldr	r1, [pc, #492]	; (a230 <sched_free_win_offset_calc+0x268>)
    a042:	487c      	ldr	r0, [pc, #496]	; (a234 <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    a044:	f7f6 ffa2 	bl	f8c <printk>
    a048:	4040      	eors	r0, r0
    a04a:	f380 8811 	msr	BASEPRI, r0
    a04e:	f04f 0004 	mov.w	r0, #4
    a052:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a054:	4293      	cmp	r3, r2
    a056:	bf38      	it	cc
    a058:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a05a:	2200      	movs	r2, #0
    a05c:	e7c6      	b.n	9fec <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a05e:	2101      	movs	r1, #1
    a060:	2000      	movs	r0, #0
    a062:	f7fd fdc7 	bl	7bf4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a068:	2b02      	cmp	r3, #2
    a06a:	d0f8      	beq.n	a05e <sched_free_win_offset_calc+0x96>
    a06c:	e7e1      	b.n	a032 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a06e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a072:	2aff      	cmp	r2, #255	; 0xff
    a074:	d065      	beq.n	a142 <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    a076:	2fff      	cmp	r7, #255	; 0xff
    a078:	d00a      	beq.n	a090 <sched_free_win_offset_calc+0xc8>
    a07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a07c:	4599      	cmp	r9, r3
    a07e:	d007      	beq.n	a090 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    a080:	4b68      	ldr	r3, [pc, #416]	; (a224 <sched_free_win_offset_calc+0x25c>)
    a082:	9301      	str	r3, [sp, #4]
    a084:	9300      	str	r3, [sp, #0]
    a086:	4a68      	ldr	r2, [pc, #416]	; (a228 <sched_free_win_offset_calc+0x260>)
    a088:	4b68      	ldr	r3, [pc, #416]	; (a22c <sched_free_win_offset_calc+0x264>)
    a08a:	4969      	ldr	r1, [pc, #420]	; (a230 <sched_free_win_offset_calc+0x268>)
    a08c:	486a      	ldr	r0, [pc, #424]	; (a238 <sched_free_win_offset_calc+0x270>)
    a08e:	e7d9      	b.n	a044 <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a090:	2a05      	cmp	r2, #5
    a092:	d951      	bls.n	a138 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    a094:	4869      	ldr	r0, [pc, #420]	; (a23c <sched_free_win_offset_calc+0x274>)
    a096:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a09a:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a09c:	429a      	cmp	r2, r3
    a09e:	da4b      	bge.n	a138 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a0a0:	2a06      	cmp	r2, #6
    a0a2:	f000 8092 	beq.w	a1ca <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    a0a6:	9b06      	ldr	r3, [sp, #24]
    a0a8:	2bff      	cmp	r3, #255	; 0xff
    a0aa:	d14a      	bne.n	a142 <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a0ac:	3a07      	subs	r2, #7
    a0ae:	b292      	uxth	r2, r2
    a0b0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a0b4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a0b8:	f7fc fdf0 	bl	6c9c <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a0bc:	4580      	cmp	r8, r0
    a0be:	d03b      	beq.n	a138 <sched_free_win_offset_calc+0x170>
    a0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a0c2:	b91b      	cbnz	r3, a0cc <sched_free_win_offset_calc+0x104>
    a0c4:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	db35      	blt.n	a138 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    a0cc:	9b05      	ldr	r3, [sp, #20]
    a0ce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a0d0:	6841      	ldr	r1, [r0, #4]
    a0d2:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a0d4:	6803      	ldr	r3, [r0, #0]
    a0d6:	2b00      	cmp	r3, #0
    a0d8:	da4e      	bge.n	a178 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    a0da:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a0dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a0e0:	428a      	cmp	r2, r1
    a0e2:	bf2c      	ite	cs
    a0e4:	18b6      	addcs	r6, r6, r2
    a0e6:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a0e8:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a0ea:	68c2      	ldr	r2, [r0, #12]
    a0ec:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a0f0:	444b      	add	r3, r9
    a0f2:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a0f4:	f8da 3000 	ldr.w	r3, [sl]
    a0f8:	429e      	cmp	r6, r3
    a0fa:	d916      	bls.n	a12a <sched_free_win_offset_calc+0x162>
    a0fc:	429d      	cmp	r5, r3
    a0fe:	bf38      	it	cc
    a100:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a102:	9b07      	ldr	r3, [sp, #28]
    a104:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a108:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a10a:	781b      	ldrb	r3, [r3, #0]
    a10c:	42a3      	cmp	r3, r4
    a10e:	d905      	bls.n	a11c <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    a110:	4629      	mov	r1, r5
    a112:	4630      	mov	r0, r6
    a114:	f7fd fd86 	bl	7c24 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a118:	42b8      	cmp	r0, r7
    a11a:	d231      	bcs.n	a180 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    a11c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a120:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a122:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a126:	4293      	cmp	r3, r2
    a128:	d20b      	bcs.n	a142 <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    a12a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a12e:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a132:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a136:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a138:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a13a:	781b      	ldrb	r3, [r3, #0]
    a13c:	42a3      	cmp	r3, r4
    a13e:	f63f af67 	bhi.w	a010 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a142:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a146:	2bff      	cmp	r3, #255	; 0xff
    a148:	d111      	bne.n	a16e <sched_free_win_offset_calc+0x1a6>
    a14a:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a14e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; a240 <sched_free_win_offset_calc+0x278>
    a152:	a731      	add	r7, pc, #196	; (adr r7, a218 <sched_free_win_offset_calc+0x250>)
    a154:	e9d7 6700 	ldrd	r6, r7, [r7]
    a158:	429d      	cmp	r5, r3
    a15a:	bf38      	it	cc
    a15c:	461d      	movcc	r5, r3
    a15e:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a162:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a164:	781b      	ldrb	r3, [r3, #0]
    a166:	42a3      	cmp	r3, r4
    a168:	d831      	bhi.n	a1ce <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a16a:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a16e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a170:	701c      	strb	r4, [r3, #0]
}
    a172:	b00f      	add	sp, #60	; 0x3c
    a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a178:	428b      	cmp	r3, r1
    a17a:	bf38      	it	cc
    a17c:	460b      	movcc	r3, r1
    a17e:	e7b4      	b.n	a0ea <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a180:	4a2f      	ldr	r2, [pc, #188]	; (a240 <sched_free_win_offset_calc+0x278>)
    a182:	eb05 030b 	add.w	r3, r5, fp
    a186:	fba3 0102 	umull	r0, r1, r3, r2
    a18a:	2207      	movs	r2, #7
    a18c:	fb02 1103 	mla	r1, r2, r3, r1
    a190:	a321      	add	r3, pc, #132	; (adr r3, a218 <sched_free_win_offset_calc+0x250>)
    a192:	e9d3 2300 	ldrd	r2, r3, [r3]
    a196:	f7f6 f83d 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a19a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a19e:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a1a2:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a1a4:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a1a6:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a1a8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a1ac:	d20b      	bcs.n	a1c6 <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    a1ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a1b0:	2202      	movs	r2, #2
    a1b2:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a1b6:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a1ba:	3401      	adds	r4, #1
					memcpy(win_offset +
    a1bc:	f7f7 fd1e 	bl	1bfc <memcpy>
					offset_index++;
    a1c0:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a1c2:	3528      	adds	r5, #40	; 0x28
    a1c4:	e7a0      	b.n	a108 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    a1c6:	2500      	movs	r5, #0
    a1c8:	e7a8      	b.n	a11c <sched_free_win_offset_calc+0x154>
    a1ca:	9206      	str	r2, [sp, #24]
    a1cc:	e7b4      	b.n	a138 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a1ce:	eb05 030b 	add.w	r3, r5, fp
    a1d2:	fba3 0108 	umull	r0, r1, r3, r8
    a1d6:	fb09 1103 	mla	r1, r9, r3, r1
    a1da:	4632      	mov	r2, r6
    a1dc:	463b      	mov	r3, r7
    a1de:	f7f6 f819 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a1e2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a1e6:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a1ea:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a1ec:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a1ee:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a1f0:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a1f4:	d90b      	bls.n	a20e <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a1f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a1f8:	2202      	movs	r2, #2
    a1fa:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a1fe:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a202:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a204:	f7f7 fcfa 	bl	1bfc <memcpy>
			offset_index++;
    a208:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a20a:	3528      	adds	r5, #40	; 0x28
    a20c:	e7a9      	b.n	a162 <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    a20e:	2500      	movs	r5, #0
    a210:	e7ab      	b.n	a16a <sched_free_win_offset_calc+0x1a2>
    a212:	bf00      	nop
    a214:	f3af 8000 	nop.w
    a218:	3b9aca00 	.word	0x3b9aca00
    a21c:	00000000 	.word	0x00000000
    a220:	000097dd 	.word	0x000097dd
    a224:	000145f1 	.word	0x000145f1
    a228:	00015373 	.word	0x00015373
    a22c:	00016a09 	.word	0x00016a09
    a230:	000153c2 	.word	0x000153c2
    a234:	00017728 	.word	0x00017728
    a238:	00015312 	.word	0x00015312
    a23c:	200008c0 	.word	0x200008c0
    a240:	1afd498d 	.word	0x1afd498d

0000a244 <mayfly_sched_free_win_offset_calc>:
{
    a244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a246:	2300      	movs	r3, #0
    a248:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a24a:	2306      	movs	r3, #6
    a24c:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a250:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a254:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a258:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a25a:	bfbe      	ittt	lt
    a25c:	4602      	movlt	r2, r0
    a25e:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a260:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a264:	9101      	str	r1, [sp, #4]
    a266:	f10d 010b 	add.w	r1, sp, #11
    a26a:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a26c:	bfa8      	it	ge
    a26e:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a270:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a274:	2100      	movs	r1, #0
    a276:	f7ff fea7 	bl	9fc8 <sched_free_win_offset_calc>
}
    a27a:	b005      	add	sp, #20
    a27c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a280 <mayfly_sched_win_offset_select>:
{
    a280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a284:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a288:	b089      	sub	sp, #36	; 0x24
    a28a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a28c:	4840      	ldr	r0, [pc, #256]	; (a390 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a28e:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a290:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a292:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a296:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a29a:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a29e:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2a0:	fb03 1102 	mla	r1, r3, r2, r1
    a2a4:	a338      	add	r3, pc, #224	; (adr r3, a388 <mayfly_sched_win_offset_select+0x108>)
    a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a2aa:	9505      	str	r5, [sp, #20]
    a2ac:	6075      	str	r5, [r6, #4]
    a2ae:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2b0:	f7f5 ffb0 	bl	214 <__aeabi_uldivmod>
    a2b4:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a2b6:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2ba:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a2be:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a2c2:	9100      	str	r1, [sp, #0]
    a2c4:	9601      	str	r6, [sp, #4]
    a2c6:	2101      	movs	r1, #1
    a2c8:	4620      	mov	r0, r4
    a2ca:	f7ff fe7d 	bl	9fc8 <sched_free_win_offset_calc>
    a2ce:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a2d2:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a2d6:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a2da:	2202      	movs	r2, #2
    a2dc:	4639      	mov	r1, r7
    a2de:	f10d 000e 	add.w	r0, sp, #14
    a2e2:	f7f7 fc8b 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    a2e6:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a2ea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a2ee:	2300      	movs	r3, #0
    a2f0:	b2d9      	uxtb	r1, r3
    a2f2:	4288      	cmp	r0, r1
    a2f4:	d811      	bhi.n	a31a <mayfly_sched_win_offset_select+0x9a>
    a2f6:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a2f8:	4547      	cmp	r7, r8
    a2fa:	d1ee      	bne.n	a2da <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a2fc:	b9b5      	cbnz	r5, a32c <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a2fe:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a302:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a306:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a308:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a30c:	2202      	movs	r2, #2
    a30e:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a310:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a314:	f7f7 fc72 	bl	1bfc <memcpy>
    a318:	e027      	b.n	a36a <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a31a:	454a      	cmp	r2, r9
    a31c:	d004      	beq.n	a328 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a31e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a322:	4291      	cmp	r1, r2
    a324:	d024      	beq.n	a370 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a326:	2501      	movs	r5, #1
    a328:	3301      	adds	r3, #1
    a32a:	e7e1      	b.n	a2f0 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a32c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a330:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a334:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a338:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a33c:	4b15      	ldr	r3, [pc, #84]	; (a394 <mayfly_sched_win_offset_select+0x114>)
    a33e:	2200      	movs	r2, #0
    a340:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a344:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a348:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a34c:	f042 0203 	orr.w	r2, r2, #3
    a350:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a354:	2203      	movs	r2, #3
    a356:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a35a:	2211      	movs	r2, #17
    a35c:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a360:	220f      	movs	r2, #15
    a362:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a366:	2220      	movs	r2, #32
    a368:	701a      	strb	r2, [r3, #0]
}
    a36a:	b009      	add	sp, #36	; 0x24
    a36c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a370:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a374:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a376:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a37a:	2202      	movs	r2, #2
    a37c:	f10d 010e 	add.w	r1, sp, #14
    a380:	e7c6      	b.n	a310 <mayfly_sched_win_offset_select+0x90>
    a382:	bf00      	nop
    a384:	f3af 8000 	nop.w
    a388:	1afd498d 	.word	0x1afd498d
    a38c:	00000007 	.word	0x00000007
    a390:	09ce5400 	.word	0x09ce5400
    a394:	200008c0 	.word	0x200008c0

0000a398 <sched_after_mstr_free_slot_get>:
{
    a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a39c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a39e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a3a0:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a3a2:	f8df 9140 	ldr.w	r9, [pc, #320]	; a4e4 <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    a3a6:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a3aa:	4680      	mov	r8, r0
    a3ac:	4693      	mov	fp, r2
    a3ae:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a3b0:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a3b4:	601c      	str	r4, [r3, #0]
    a3b6:	9408      	str	r4, [sp, #32]
    a3b8:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a3ba:	2302      	movs	r3, #2
    a3bc:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a3be:	ab09      	add	r3, sp, #36	; 0x24
    a3c0:	9302      	str	r3, [sp, #8]
    a3c2:	4b41      	ldr	r3, [pc, #260]	; (a4c8 <sched_after_mstr_free_slot_get+0x130>)
    a3c4:	9301      	str	r3, [sp, #4]
    a3c6:	ab08      	add	r3, sp, #32
    a3c8:	9300      	str	r3, [sp, #0]
    a3ca:	f10d 021f 	add.w	r2, sp, #31
    a3ce:	465b      	mov	r3, fp
    a3d0:	4641      	mov	r1, r8
    a3d2:	2000      	movs	r0, #0
    a3d4:	f7fd fb90 	bl	7af8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a3d8:	2802      	cmp	r0, #2
    a3da:	d014      	beq.n	a406 <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3de:	b1b3      	cbz	r3, a40e <sched_after_mstr_free_slot_get+0x76>
    a3e0:	4b3a      	ldr	r3, [pc, #232]	; (a4cc <sched_after_mstr_free_slot_get+0x134>)
    a3e2:	9301      	str	r3, [sp, #4]
    a3e4:	9300      	str	r3, [sp, #0]
    a3e6:	4a3a      	ldr	r2, [pc, #232]	; (a4d0 <sched_after_mstr_free_slot_get+0x138>)
    a3e8:	4b3a      	ldr	r3, [pc, #232]	; (a4d4 <sched_after_mstr_free_slot_get+0x13c>)
    a3ea:	493b      	ldr	r1, [pc, #236]	; (a4d8 <sched_after_mstr_free_slot_get+0x140>)
    a3ec:	483b      	ldr	r0, [pc, #236]	; (a4dc <sched_after_mstr_free_slot_get+0x144>)
    a3ee:	f7f6 fdcd 	bl	f8c <printk>
    a3f2:	4040      	eors	r0, r0
    a3f4:	f380 8811 	msr	BASEPRI, r0
    a3f8:	f04f 0004 	mov.w	r0, #4
    a3fc:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a3fe:	4641      	mov	r1, r8
    a400:	2000      	movs	r0, #0
    a402:	f7fd fbf7 	bl	7bf4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a408:	2b02      	cmp	r3, #2
    a40a:	d0f8      	beq.n	a3fe <sched_after_mstr_free_slot_get+0x66>
    a40c:	e7e6      	b.n	a3dc <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a40e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a412:	2aff      	cmp	r2, #255	; 0xff
    a414:	d04e      	beq.n	a4b4 <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a416:	2a06      	cmp	r2, #6
    a418:	d9cf      	bls.n	a3ba <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a41a:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a41e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a420:	429a      	cmp	r2, r3
    a422:	daca      	bge.n	a3ba <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a424:	3a07      	subs	r2, #7
    a426:	b292      	uxth	r2, r2
    a428:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a42c:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a430:	f7fc fc34 	bl	6c9c <mem_get>
		if (conn && !conn->role) {
    a434:	2800      	cmp	r0, #0
    a436:	d0c0      	beq.n	a3ba <sched_after_mstr_free_slot_get+0x22>
    a438:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a43c:	2b00      	cmp	r3, #0
    a43e:	dbbc      	blt.n	a3ba <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a440:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a442:	9a08      	ldr	r2, [sp, #32]
    a444:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a448:	2b00      	cmp	r3, #0
    a44a:	da12      	bge.n	a472 <sched_after_mstr_free_slot_get+0xda>
    a44c:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a44e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a452:	4571      	cmp	r1, lr
    a454:	bf2c      	ite	cs
    a456:	1852      	addcs	r2, r2, r1
    a458:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a45a:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a45c:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a45e:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a460:	f101 0104 	add.w	r1, r1, #4
    a464:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a466:	d108      	bne.n	a47a <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    a468:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a46c:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a46e:	4616      	mov	r6, r2
    a470:	e7a3      	b.n	a3ba <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a472:	4573      	cmp	r3, lr
    a474:	bf38      	it	cc
    a476:	4673      	movcc	r3, lr
    a478:	e7f0      	b.n	a45c <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a47a:	4631      	mov	r1, r6
    a47c:	4610      	mov	r0, r2
    a47e:	9305      	str	r3, [sp, #20]
    a480:	9204      	str	r2, [sp, #16]
    a482:	f7fd fbcf 	bl	7c24 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a486:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a48a:	4288      	cmp	r0, r1
    a48c:	9a04      	ldr	r2, [sp, #16]
    a48e:	9b05      	ldr	r3, [sp, #20]
    a490:	d9ea      	bls.n	a468 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a492:	4813      	ldr	r0, [pc, #76]	; (a4e0 <sched_after_mstr_free_slot_get+0x148>)
    a494:	4434      	add	r4, r6
    a496:	fba4 0100 	umull	r0, r1, r4, r0
    a49a:	2307      	movs	r3, #7
    a49c:	fb03 1104 	mla	r1, r3, r4, r1
    a4a0:	a307      	add	r3, pc, #28	; (adr r3, a4c0 <sched_after_mstr_free_slot_get+0x128>)
    a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4a6:	f7f5 feb5 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a4aa:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a4ac:	6038      	str	r0, [r7, #0]
}
    a4ae:	b00b      	add	sp, #44	; 0x2c
    a4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a4b4:	2dff      	cmp	r5, #255	; 0xff
    a4b6:	d1ec      	bne.n	a492 <sched_after_mstr_free_slot_get+0xfa>
    a4b8:	e7f9      	b.n	a4ae <sched_after_mstr_free_slot_get+0x116>
    a4ba:	bf00      	nop
    a4bc:	f3af 8000 	nop.w
    a4c0:	3b9aca00 	.word	0x3b9aca00
    a4c4:	00000000 	.word	0x00000000
    a4c8:	000097dd 	.word	0x000097dd
    a4cc:	000145f1 	.word	0x000145f1
    a4d0:	00015373 	.word	0x00015373
    a4d4:	000169c9 	.word	0x000169c9
    a4d8:	000153c2 	.word	0x000153c2
    a4dc:	00017728 	.word	0x00017728
    a4e0:	1afd498d 	.word	0x1afd498d
    a4e4:	200008c0 	.word	0x200008c0

0000a4e8 <isr_adv_ci_adva_check>:
{
    a4e8:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a4ea:	7804      	ldrb	r4, [r0, #0]
    a4ec:	780a      	ldrb	r2, [r1, #0]
    a4ee:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a4f2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a4f6:	d119      	bne.n	a52c <isr_adv_ci_adva_check+0x44>
    a4f8:	f004 040f 	and.w	r4, r4, #15
    a4fc:	2c01      	cmp	r4, #1
    a4fe:	f101 0608 	add.w	r6, r1, #8
    a502:	f100 0502 	add.w	r5, r0, #2
    a506:	d008      	beq.n	a51a <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a508:	2206      	movs	r2, #6
    a50a:	4631      	mov	r1, r6
    a50c:	4628      	mov	r0, r5
    a50e:	f7f7 fb60 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    a512:	fab0 f080 	clz	r0, r0
    a516:	0940      	lsrs	r0, r0, #5
    a518:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a51a:	2206      	movs	r2, #6
    a51c:	4631      	mov	r1, r6
    a51e:	4628      	mov	r0, r5
    a520:	f7f7 fb57 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a524:	2800      	cmp	r0, #0
    a526:	d1ef      	bne.n	a508 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a528:	4620      	mov	r0, r4
    a52a:	bd70      	pop	{r4, r5, r6, pc}
    a52c:	2000      	movs	r0, #0
}
    a52e:	bd70      	pop	{r4, r5, r6, pc}

0000a530 <packet_rx_enqueue>:
{
    a530:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    a532:	4a1e      	ldr	r2, [pc, #120]	; (a5ac <packet_rx_enqueue+0x7c>)
    a534:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    a538:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    a53c:	4299      	cmp	r1, r3
    a53e:	d10e      	bne.n	a55e <packet_rx_enqueue+0x2e>
    a540:	4b1b      	ldr	r3, [pc, #108]	; (a5b0 <packet_rx_enqueue+0x80>)
    a542:	9301      	str	r3, [sp, #4]
    a544:	9300      	str	r3, [sp, #0]
    a546:	4a1b      	ldr	r2, [pc, #108]	; (a5b4 <packet_rx_enqueue+0x84>)
    a548:	4b1b      	ldr	r3, [pc, #108]	; (a5b8 <packet_rx_enqueue+0x88>)
    a54a:	491c      	ldr	r1, [pc, #112]	; (a5bc <packet_rx_enqueue+0x8c>)
    a54c:	481c      	ldr	r0, [pc, #112]	; (a5c0 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    a54e:	f7f6 fd1d 	bl	f8c <printk>
    a552:	4040      	eors	r0, r0
    a554:	f380 8811 	msr	BASEPRI, r0
    a558:	f04f 0004 	mov.w	r0, #4
    a55c:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    a55e:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    a562:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    a566:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a56a:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    a56e:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a570:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    a572:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    a576:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    a57a:	3301      	adds	r3, #1
    a57c:	b2db      	uxtb	r3, r3
		last = 0;
    a57e:	429c      	cmp	r4, r3
    a580:	bf08      	it	eq
    a582:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    a584:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    a588:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    a58c:	f7fc fbab 	bl	6ce6 <memq_enqueue>
	LL_ASSERT(link);
    a590:	b938      	cbnz	r0, a5a2 <packet_rx_enqueue+0x72>
    a592:	4b07      	ldr	r3, [pc, #28]	; (a5b0 <packet_rx_enqueue+0x80>)
    a594:	9301      	str	r3, [sp, #4]
    a596:	9300      	str	r3, [sp, #0]
    a598:	4a06      	ldr	r2, [pc, #24]	; (a5b4 <packet_rx_enqueue+0x84>)
    a59a:	4b07      	ldr	r3, [pc, #28]	; (a5b8 <packet_rx_enqueue+0x88>)
    a59c:	4907      	ldr	r1, [pc, #28]	; (a5bc <packet_rx_enqueue+0x8c>)
    a59e:	4809      	ldr	r0, [pc, #36]	; (a5c4 <packet_rx_enqueue+0x94>)
    a5a0:	e7d5      	b.n	a54e <packet_rx_enqueue+0x1e>
}
    a5a2:	b002      	add	sp, #8
    a5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    a5a8:	f006 bb9c 	b.w	10ce4 <radio_event_callback>
    a5ac:	200008c0 	.word	0x200008c0
    a5b0:	000145f1 	.word	0x000145f1
    a5b4:	00015373 	.word	0x00015373
    a5b8:	00016b5a 	.word	0x00016b5a
    a5bc:	000153c2 	.word	0x000153c2
    a5c0:	00017420 	.word	0x00017420
    a5c4:	00016c43 	.word	0x00016c43

0000a5c8 <isr_scan_tgta_check>:
{
    a5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5cc:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a5ce:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    a5d0:	f101 0808 	add.w	r8, r1, #8
{
    a5d4:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a5d6:	09c0      	lsrs	r0, r0, #7
    a5d8:	4641      	mov	r1, r8
{
    a5da:	4691      	mov	r9, r2
    a5dc:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a5de:	f007 f81d 	bl	1161c <ctrl_rl_addr_resolve>
    a5e2:	4604      	mov	r4, r0
    a5e4:	b9d8      	cbnz	r0, a61e <isr_scan_tgta_check+0x56>
    a5e6:	4f1c      	ldr	r7, [pc, #112]	; (a658 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a5e8:	f1ba 0f00 	cmp.w	sl, #0
    a5ec:	d10e      	bne.n	a60c <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a5ee:	782b      	ldrb	r3, [r5, #0]
    a5f0:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    a5f4:	09db      	lsrs	r3, r3, #7
    a5f6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a5fa:	d113      	bne.n	a624 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    a5fc:	2206      	movs	r2, #6
    a5fe:	4641      	mov	r1, r8
    a600:	4816      	ldr	r0, [pc, #88]	; (a65c <isr_scan_tgta_check+0x94>)
    a602:	f7f7 fae6 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a606:	b968      	cbnz	r0, a624 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    a608:	2001      	movs	r0, #1
    a60a:	e012      	b.n	a632 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a60c:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    a610:	07db      	lsls	r3, r3, #31
    a612:	d5ec      	bpl.n	a5ee <isr_scan_tgta_check+0x26>
    a614:	4648      	mov	r0, r9
    a616:	f006 fd5d 	bl	110d4 <ctrl_lrpa_get>
    a61a:	2800      	cmp	r0, #0
    a61c:	d0e7      	beq.n	a5ee <isr_scan_tgta_check+0x26>
}
    a61e:	4620      	mov	r0, r4
    a620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a624:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    a628:	f3c0 1001 	ubfx	r0, r0, #4, #2
    a62c:	f010 0002 	ands.w	r0, r0, #2
    a630:	d101      	bne.n	a636 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    a632:	4604      	mov	r4, r0
    a634:	e7f3      	b.n	a61e <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a636:	f995 3000 	ldrsb.w	r3, [r5]
    a63a:	2b00      	cmp	r3, #0
    a63c:	da09      	bge.n	a652 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    a63e:	7b6b      	ldrb	r3, [r5, #13]
    a640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a644:	2b40      	cmp	r3, #64	; 0x40
    a646:	d104      	bne.n	a652 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    a648:	2e00      	cmp	r6, #0
    a64a:	d0dd      	beq.n	a608 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    a64c:	2001      	movs	r0, #1
    a64e:	7030      	strb	r0, [r6, #0]
    a650:	e7ef      	b.n	a632 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    a652:	2000      	movs	r0, #0
    a654:	e7ed      	b.n	a632 <isr_scan_tgta_check+0x6a>
    a656:	bf00      	nop
    a658:	200008c0 	.word	0x200008c0
    a65c:	200009a4 	.word	0x200009a4

0000a660 <isr_rx_scan_report>:
{
    a660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a664:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    a666:	2003      	movs	r0, #3
{
    a668:	460f      	mov	r7, r1
    a66a:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    a66c:	f7ff f8f6 	bl	985c <packet_rx_reserve_get>
	if (node_rx == 0) {
    a670:	4604      	mov	r4, r0
    a672:	2800      	cmp	r0, #0
    a674:	d03e      	beq.n	a6f4 <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    a676:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a67a:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    a67c:	4b1e      	ldr	r3, [pc, #120]	; (a6f8 <isr_rx_scan_report+0x98>)
    a67e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    a682:	075a      	lsls	r2, r3, #29
    a684:	d032      	beq.n	a6ec <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    a686:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a68a:	b2da      	uxtb	r2, r3
    a68c:	2a01      	cmp	r2, #1
    a68e:	d010      	beq.n	a6b2 <isr_rx_scan_report+0x52>
    a690:	2a04      	cmp	r2, #4
    a692:	d00f      	beq.n	a6b4 <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    a694:	4b19      	ldr	r3, [pc, #100]	; (a6fc <isr_rx_scan_report+0x9c>)
    a696:	9301      	str	r3, [sp, #4]
    a698:	9300      	str	r3, [sp, #0]
    a69a:	4a19      	ldr	r2, [pc, #100]	; (a700 <isr_rx_scan_report+0xa0>)
    a69c:	4b19      	ldr	r3, [pc, #100]	; (a704 <isr_rx_scan_report+0xa4>)
    a69e:	491a      	ldr	r1, [pc, #104]	; (a708 <isr_rx_scan_report+0xa8>)
    a6a0:	481a      	ldr	r0, [pc, #104]	; (a70c <isr_rx_scan_report+0xac>)
    a6a2:	f7f6 fc73 	bl	f8c <printk>
    a6a6:	4040      	eors	r0, r0
    a6a8:	f380 8811 	msr	BASEPRI, r0
    a6ac:	f04f 0004 	mov.w	r0, #4
    a6b0:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    a6b2:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    a6b4:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a6b8:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    a6ba:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a6be:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    a6c2:	f1b9 0f00 	cmp.w	r9, #0
    a6c6:	d013      	beq.n	a6f0 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    a6c8:	f007 fd34 	bl	12134 <radio_rssi_get>
			     pdu_adv_rx->len] =
    a6cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    a6d0:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a6d4:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    a6d6:	442b      	add	r3, r5
    a6d8:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a6da:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    a6dc:	441d      	add	r5, r3
    a6de:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    a6e0:	f7ff ff26 	bl	a530 <packet_rx_enqueue>
	return 0;
    a6e4:	2000      	movs	r0, #0
}
    a6e6:	b003      	add	sp, #12
    a6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a6ec:	2302      	movs	r3, #2
    a6ee:	e7e1      	b.n	a6b4 <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    a6f0:	207f      	movs	r0, #127	; 0x7f
    a6f2:	e7ed      	b.n	a6d0 <isr_rx_scan_report+0x70>
		return 1;
    a6f4:	2001      	movs	r0, #1
    a6f6:	e7f6      	b.n	a6e6 <isr_rx_scan_report+0x86>
    a6f8:	200008c0 	.word	0x200008c0
    a6fc:	000145f1 	.word	0x000145f1
    a700:	00015373 	.word	0x00015373
    a704:	000167f0 	.word	0x000167f0
    a708:	000153c2 	.word	0x000153c2
    a70c:	00015312 	.word	0x00015312

0000a710 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    a710:	4a0b      	ldr	r2, [pc, #44]	; (a740 <rx_fc_lock+0x30>)
    a712:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a716:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    a71a:	4299      	cmp	r1, r3
    a71c:	d10e      	bne.n	a73c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    a71e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a722:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a726:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    a72a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a72e:	3301      	adds	r3, #1
    a730:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    a732:	2b03      	cmp	r3, #3
    a734:	bf08      	it	eq
    a736:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    a738:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    a73c:	4770      	bx	lr
    a73e:	bf00      	nop
    a740:	200008c0 	.word	0x200008c0

0000a744 <ticker_success_assert>:
{
    a744:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a746:	b170      	cbz	r0, a766 <ticker_success_assert+0x22>
    a748:	4b08      	ldr	r3, [pc, #32]	; (a76c <ticker_success_assert+0x28>)
    a74a:	9301      	str	r3, [sp, #4]
    a74c:	9300      	str	r3, [sp, #0]
    a74e:	4a08      	ldr	r2, [pc, #32]	; (a770 <ticker_success_assert+0x2c>)
    a750:	4b08      	ldr	r3, [pc, #32]	; (a774 <ticker_success_assert+0x30>)
    a752:	4909      	ldr	r1, [pc, #36]	; (a778 <ticker_success_assert+0x34>)
    a754:	4809      	ldr	r0, [pc, #36]	; (a77c <ticker_success_assert+0x38>)
    a756:	f7f6 fc19 	bl	f8c <printk>
    a75a:	4040      	eors	r0, r0
    a75c:	f380 8811 	msr	BASEPRI, r0
    a760:	f04f 0004 	mov.w	r0, #4
    a764:	df02      	svc	2
}
    a766:	b003      	add	sp, #12
    a768:	f85d fb04 	ldr.w	pc, [sp], #4
    a76c:	000145f1 	.word	0x000145f1
    a770:	00015373 	.word	0x00015373
    a774:	000168d9 	.word	0x000168d9
    a778:	000153c2 	.word	0x000153c2
    a77c:	00017840 	.word	0x00017840

0000a780 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a780:	2801      	cmp	r0, #1
{
    a782:	b507      	push	{r0, r1, r2, lr}
    a784:	4b11      	ldr	r3, [pc, #68]	; (a7cc <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    a786:	d116      	bne.n	a7b6 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    a788:	7c9a      	ldrb	r2, [r3, #18]
    a78a:	2a05      	cmp	r2, #5
    a78c:	d104      	bne.n	a798 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    a78e:	2200      	movs	r2, #0
    a790:	749a      	strb	r2, [r3, #18]
}
    a792:	b003      	add	sp, #12
    a794:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    a798:	4b0d      	ldr	r3, [pc, #52]	; (a7d0 <ticker_stop_adv_assert+0x50>)
    a79a:	9301      	str	r3, [sp, #4]
    a79c:	9300      	str	r3, [sp, #0]
    a79e:	4a0d      	ldr	r2, [pc, #52]	; (a7d4 <ticker_stop_adv_assert+0x54>)
    a7a0:	4b0d      	ldr	r3, [pc, #52]	; (a7d8 <ticker_stop_adv_assert+0x58>)
    a7a2:	490e      	ldr	r1, [pc, #56]	; (a7dc <ticker_stop_adv_assert+0x5c>)
    a7a4:	480e      	ldr	r0, [pc, #56]	; (a7e0 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    a7a6:	f7f6 fbf1 	bl	f8c <printk>
    a7aa:	4040      	eors	r0, r0
    a7ac:	f380 8811 	msr	BASEPRI, r0
    a7b0:	f04f 0004 	mov.w	r0, #4
    a7b4:	df02      	svc	2
    a7b6:	7c1b      	ldrb	r3, [r3, #16]
    a7b8:	2b05      	cmp	r3, #5
    a7ba:	d1ea      	bne.n	a792 <ticker_stop_adv_assert+0x12>
    a7bc:	4b04      	ldr	r3, [pc, #16]	; (a7d0 <ticker_stop_adv_assert+0x50>)
    a7be:	9301      	str	r3, [sp, #4]
    a7c0:	9300      	str	r3, [sp, #0]
    a7c2:	4a04      	ldr	r2, [pc, #16]	; (a7d4 <ticker_stop_adv_assert+0x54>)
    a7c4:	4b04      	ldr	r3, [pc, #16]	; (a7d8 <ticker_stop_adv_assert+0x58>)
    a7c6:	4905      	ldr	r1, [pc, #20]	; (a7dc <ticker_stop_adv_assert+0x5c>)
    a7c8:	4806      	ldr	r0, [pc, #24]	; (a7e4 <ticker_stop_adv_assert+0x64>)
    a7ca:	e7ec      	b.n	a7a6 <ticker_stop_adv_assert+0x26>
    a7cc:	200008c0 	.word	0x200008c0
    a7d0:	000145f1 	.word	0x000145f1
    a7d4:	00015373 	.word	0x00015373
    a7d8:	000168ef 	.word	0x000168ef
    a7dc:	000153c2 	.word	0x000153c2
    a7e0:	00015312 	.word	0x00015312
    a7e4:	000177c2 	.word	0x000177c2

0000a7e8 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a7e8:	2801      	cmp	r0, #1
{
    a7ea:	b507      	push	{r0, r1, r2, lr}
    a7ec:	4b11      	ldr	r3, [pc, #68]	; (a834 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    a7ee:	d116      	bne.n	a81e <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    a7f0:	7c9a      	ldrb	r2, [r3, #18]
    a7f2:	2a06      	cmp	r2, #6
    a7f4:	d104      	bne.n	a800 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    a7f6:	2200      	movs	r2, #0
    a7f8:	749a      	strb	r2, [r3, #18]
}
    a7fa:	b003      	add	sp, #12
    a7fc:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    a800:	4b0d      	ldr	r3, [pc, #52]	; (a838 <ticker_stop_scan_assert+0x50>)
    a802:	9301      	str	r3, [sp, #4]
    a804:	9300      	str	r3, [sp, #0]
    a806:	4a0d      	ldr	r2, [pc, #52]	; (a83c <ticker_stop_scan_assert+0x54>)
    a808:	4b0d      	ldr	r3, [pc, #52]	; (a840 <ticker_stop_scan_assert+0x58>)
    a80a:	490e      	ldr	r1, [pc, #56]	; (a844 <ticker_stop_scan_assert+0x5c>)
    a80c:	480e      	ldr	r0, [pc, #56]	; (a848 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    a80e:	f7f6 fbbd 	bl	f8c <printk>
    a812:	4040      	eors	r0, r0
    a814:	f380 8811 	msr	BASEPRI, r0
    a818:	f04f 0004 	mov.w	r0, #4
    a81c:	df02      	svc	2
    a81e:	7c1b      	ldrb	r3, [r3, #16]
    a820:	2b06      	cmp	r3, #6
    a822:	d1ea      	bne.n	a7fa <ticker_stop_scan_assert+0x12>
    a824:	4b04      	ldr	r3, [pc, #16]	; (a838 <ticker_stop_scan_assert+0x50>)
    a826:	9301      	str	r3, [sp, #4]
    a828:	9300      	str	r3, [sp, #0]
    a82a:	4a04      	ldr	r2, [pc, #16]	; (a83c <ticker_stop_scan_assert+0x54>)
    a82c:	4b04      	ldr	r3, [pc, #16]	; (a840 <ticker_stop_scan_assert+0x58>)
    a82e:	4905      	ldr	r1, [pc, #20]	; (a844 <ticker_stop_scan_assert+0x5c>)
    a830:	4806      	ldr	r0, [pc, #24]	; (a84c <ticker_stop_scan_assert+0x64>)
    a832:	e7ec      	b.n	a80e <ticker_stop_scan_assert+0x26>
    a834:	200008c0 	.word	0x200008c0
    a838:	000145f1 	.word	0x000145f1
    a83c:	00015373 	.word	0x00015373
    a840:	00016906 	.word	0x00016906
    a844:	000153c2 	.word	0x000153c2
    a848:	00015312 	.word	0x00015312
    a84c:	00017801 	.word	0x00017801

0000a850 <ticker_update_adv_assert>:
{
    a850:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    a852:	b190      	cbz	r0, a87a <ticker_update_adv_assert+0x2a>
    a854:	4b0a      	ldr	r3, [pc, #40]	; (a880 <ticker_update_adv_assert+0x30>)
    a856:	7c9b      	ldrb	r3, [r3, #18]
    a858:	2b05      	cmp	r3, #5
    a85a:	d00e      	beq.n	a87a <ticker_update_adv_assert+0x2a>
    a85c:	4b09      	ldr	r3, [pc, #36]	; (a884 <ticker_update_adv_assert+0x34>)
    a85e:	9301      	str	r3, [sp, #4]
    a860:	9300      	str	r3, [sp, #0]
    a862:	4a09      	ldr	r2, [pc, #36]	; (a888 <ticker_update_adv_assert+0x38>)
    a864:	4b09      	ldr	r3, [pc, #36]	; (a88c <ticker_update_adv_assert+0x3c>)
    a866:	490a      	ldr	r1, [pc, #40]	; (a890 <ticker_update_adv_assert+0x40>)
    a868:	480a      	ldr	r0, [pc, #40]	; (a894 <ticker_update_adv_assert+0x44>)
    a86a:	f7f6 fb8f 	bl	f8c <printk>
    a86e:	4040      	eors	r0, r0
    a870:	f380 8811 	msr	BASEPRI, r0
    a874:	f04f 0004 	mov.w	r0, #4
    a878:	df02      	svc	2
}
    a87a:	b003      	add	sp, #12
    a87c:	f85d fb04 	ldr.w	pc, [sp], #4
    a880:	200008c0 	.word	0x200008c0
    a884:	000145f1 	.word	0x000145f1
    a888:	00015373 	.word	0x00015373
    a88c:	0001691e 	.word	0x0001691e
    a890:	000153c2 	.word	0x000153c2
    a894:	0001786d 	.word	0x0001786d

0000a898 <ticker_update_slave_assert>:
{
    a898:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    a89a:	b198      	cbz	r0, a8c4 <ticker_update_slave_assert+0x2c>
    a89c:	4b0b      	ldr	r3, [pc, #44]	; (a8cc <ticker_update_slave_assert+0x34>)
    a89e:	7c9b      	ldrb	r3, [r3, #18]
    a8a0:	b2c9      	uxtb	r1, r1
    a8a2:	4299      	cmp	r1, r3
    a8a4:	d00e      	beq.n	a8c4 <ticker_update_slave_assert+0x2c>
    a8a6:	4b0a      	ldr	r3, [pc, #40]	; (a8d0 <ticker_update_slave_assert+0x38>)
    a8a8:	9301      	str	r3, [sp, #4]
    a8aa:	9300      	str	r3, [sp, #0]
    a8ac:	4a09      	ldr	r2, [pc, #36]	; (a8d4 <ticker_update_slave_assert+0x3c>)
    a8ae:	4b0a      	ldr	r3, [pc, #40]	; (a8d8 <ticker_update_slave_assert+0x40>)
    a8b0:	490a      	ldr	r1, [pc, #40]	; (a8dc <ticker_update_slave_assert+0x44>)
    a8b2:	480b      	ldr	r0, [pc, #44]	; (a8e0 <ticker_update_slave_assert+0x48>)
    a8b4:	f7f6 fb6a 	bl	f8c <printk>
    a8b8:	4040      	eors	r0, r0
    a8ba:	f380 8811 	msr	BASEPRI, r0
    a8be:	f04f 0004 	mov.w	r0, #4
    a8c2:	df02      	svc	2
}
    a8c4:	b003      	add	sp, #12
    a8c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a8ca:	bf00      	nop
    a8cc:	200008c0 	.word	0x200008c0
    a8d0:	000145f1 	.word	0x000145f1
    a8d4:	00015373 	.word	0x00015373
    a8d8:	00016937 	.word	0x00016937
    a8dc:	000153c2 	.word	0x000153c2
    a8e0:	000178bc 	.word	0x000178bc

0000a8e4 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    a8e4:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    a8e6:	b170      	cbz	r0, a906 <ticker_op_latency_cancelled+0x22>
    a8e8:	4b0b      	ldr	r3, [pc, #44]	; (a918 <ticker_op_latency_cancelled+0x34>)
    a8ea:	9301      	str	r3, [sp, #4]
    a8ec:	9300      	str	r3, [sp, #0]
    a8ee:	4a0b      	ldr	r2, [pc, #44]	; (a91c <ticker_op_latency_cancelled+0x38>)
    a8f0:	4b0b      	ldr	r3, [pc, #44]	; (a920 <ticker_op_latency_cancelled+0x3c>)
    a8f2:	490c      	ldr	r1, [pc, #48]	; (a924 <ticker_op_latency_cancelled+0x40>)
    a8f4:	480c      	ldr	r0, [pc, #48]	; (a928 <ticker_op_latency_cancelled+0x44>)
    a8f6:	f7f6 fb49 	bl	f8c <printk>
    a8fa:	4040      	eors	r0, r0
    a8fc:	f380 8811 	msr	BASEPRI, r0
    a900:	f04f 0004 	mov.w	r0, #4
    a904:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    a906:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    a90a:	f360 0341 	bfi	r3, r0, #1, #1
    a90e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    a912:	b003      	add	sp, #12
    a914:	f85d fb04 	ldr.w	pc, [sp], #4
    a918:	000145f1 	.word	0x000145f1
    a91c:	00015373 	.word	0x00015373
    a920:	00016c15 	.word	0x00016c15
    a924:	000153c2 	.word	0x000153c2
    a928:	0001778e 	.word	0x0001778e

0000a92c <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    a92c:	4b04      	ldr	r3, [pc, #16]	; (a940 <ticker_job_disable+0x14>)
    a92e:	7d1b      	ldrb	r3, [r3, #20]
    a930:	b123      	cbz	r3, a93c <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    a932:	2101      	movs	r1, #1
    a934:	2200      	movs	r2, #0
    a936:	4608      	mov	r0, r1
    a938:	f7fc ba1e 	b.w	6d78 <mayfly_enable>
    a93c:	4770      	bx	lr
    a93e:	bf00      	nop
    a940:	200008c0 	.word	0x200008c0

0000a944 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a944:	2806      	cmp	r0, #6
{
    a946:	b510      	push	{r4, lr}
    a948:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a94a:	d90a      	bls.n	a962 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a94c:	4b09      	ldr	r3, [pc, #36]	; (a974 <hdr_conn_get+0x30>)
    a94e:	1fc2      	subs	r2, r0, #7
    a950:	b292      	uxth	r2, r2
    a952:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a956:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    a95a:	f7fc f99f 	bl	6c9c <mem_get>
    a95e:	6020      	str	r0, [r4, #0]
    a960:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    a962:	2805      	cmp	r0, #5
    a964:	d004      	beq.n	a970 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    a966:	2806      	cmp	r0, #6
	return NULL;
    a968:	4803      	ldr	r0, [pc, #12]	; (a978 <hdr_conn_get+0x34>)
    a96a:	bf18      	it	ne
    a96c:	2000      	movne	r0, #0
    a96e:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    a970:	4802      	ldr	r0, [pc, #8]	; (a97c <hdr_conn_get+0x38>)
}
    a972:	bd10      	pop	{r4, pc}
    a974:	200008c0 	.word	0x200008c0
    a978:	20000990 	.word	0x20000990
    a97c:	200008d8 	.word	0x200008d8

0000a980 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    a980:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    a982:	4b07      	ldr	r3, [pc, #28]	; (a9a0 <event_stop.part.10+0x20>)
    a984:	9301      	str	r3, [sp, #4]
    a986:	9300      	str	r3, [sp, #0]
    a988:	4a06      	ldr	r2, [pc, #24]	; (a9a4 <event_stop.part.10+0x24>)
    a98a:	4b07      	ldr	r3, [pc, #28]	; (a9a8 <event_stop.part.10+0x28>)
    a98c:	4907      	ldr	r1, [pc, #28]	; (a9ac <event_stop.part.10+0x2c>)
    a98e:	4808      	ldr	r0, [pc, #32]	; (a9b0 <event_stop.part.10+0x30>)
    a990:	f7f6 fafc 	bl	f8c <printk>
    a994:	4040      	eors	r0, r0
    a996:	f380 8811 	msr	BASEPRI, r0
    a99a:	f04f 0004 	mov.w	r0, #4
    a99e:	df02      	svc	2
    a9a0:	000145f1 	.word	0x000145f1
    a9a4:	00015373 	.word	0x00015373
    a9a8:	00016a36 	.word	0x00016a36
    a9ac:	000153c2 	.word	0x000153c2
    a9b0:	000173a3 	.word	0x000173a3

0000a9b4 <event_stop>:
	s_mfy_radio_stop.param = context;
    a9b4:	4a06      	ldr	r2, [pc, #24]	; (a9d0 <event_stop+0x1c>)
{
    a9b6:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    a9b8:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a9ba:	4613      	mov	r3, r2
    a9bc:	2200      	movs	r2, #0
    a9be:	4611      	mov	r1, r2
    a9c0:	4610      	mov	r0, r2
    a9c2:	f7fc fa01 	bl	6dc8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    a9c6:	b108      	cbz	r0, a9cc <event_stop+0x18>
    a9c8:	f7ff ffda 	bl	a980 <event_stop.part.10>
    a9cc:	bd08      	pop	{r3, pc}
    a9ce:	bf00      	nop
    a9d0:	20003d68 	.word	0x20003d68

0000a9d4 <event_active>:
{
    a9d4:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a9d6:	2200      	movs	r2, #0
    a9d8:	4b0b      	ldr	r3, [pc, #44]	; (aa08 <event_active+0x34>)
    a9da:	4611      	mov	r1, r2
    a9dc:	4610      	mov	r0, r2
    a9de:	f7fc f9f3 	bl	6dc8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    a9e2:	b170      	cbz	r0, aa02 <event_active+0x2e>
    a9e4:	4b09      	ldr	r3, [pc, #36]	; (aa0c <event_active+0x38>)
    a9e6:	9301      	str	r3, [sp, #4]
    a9e8:	9300      	str	r3, [sp, #0]
    a9ea:	4a09      	ldr	r2, [pc, #36]	; (aa10 <event_active+0x3c>)
    a9ec:	4b09      	ldr	r3, [pc, #36]	; (aa14 <event_active+0x40>)
    a9ee:	490a      	ldr	r1, [pc, #40]	; (aa18 <event_active+0x44>)
    a9f0:	480a      	ldr	r0, [pc, #40]	; (aa1c <event_active+0x48>)
    a9f2:	f7f6 facb 	bl	f8c <printk>
    a9f6:	4040      	eors	r0, r0
    a9f8:	f380 8811 	msr	BASEPRI, r0
    a9fc:	f04f 0004 	mov.w	r0, #4
    aa00:	df02      	svc	2
}
    aa02:	b003      	add	sp, #12
    aa04:	f85d fb04 	ldr.w	pc, [sp], #4
    aa08:	20003d38 	.word	0x20003d38
    aa0c:	000145f1 	.word	0x000145f1
    aa10:	00015373 	.word	0x00015373
    aa14:	00016966 	.word	0x00016966
    aa18:	000153c2 	.word	0x000153c2
    aa1c:	000173a3 	.word	0x000173a3

0000aa20 <event_xtal>:
{
    aa20:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    aa22:	2200      	movs	r2, #0
    aa24:	4b0b      	ldr	r3, [pc, #44]	; (aa54 <event_xtal+0x34>)
    aa26:	4611      	mov	r1, r2
    aa28:	4610      	mov	r0, r2
    aa2a:	f7fc f9cd 	bl	6dc8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    aa2e:	b170      	cbz	r0, aa4e <event_xtal+0x2e>
    aa30:	4b09      	ldr	r3, [pc, #36]	; (aa58 <event_xtal+0x38>)
    aa32:	9301      	str	r3, [sp, #4]
    aa34:	9300      	str	r3, [sp, #0]
    aa36:	4a09      	ldr	r2, [pc, #36]	; (aa5c <event_xtal+0x3c>)
    aa38:	4b09      	ldr	r3, [pc, #36]	; (aa60 <event_xtal+0x40>)
    aa3a:	490a      	ldr	r1, [pc, #40]	; (aa64 <event_xtal+0x44>)
    aa3c:	480a      	ldr	r0, [pc, #40]	; (aa68 <event_xtal+0x48>)
    aa3e:	f7f6 faa5 	bl	f8c <printk>
    aa42:	4040      	eors	r0, r0
    aa44:	f380 8811 	msr	BASEPRI, r0
    aa48:	f04f 0004 	mov.w	r0, #4
    aa4c:	df02      	svc	2
}
    aa4e:	b003      	add	sp, #12
    aa50:	f85d fb04 	ldr.w	pc, [sp], #4
    aa54:	20003db8 	.word	0x20003db8
    aa58:	000145f1 	.word	0x000145f1
    aa5c:	00015373 	.word	0x00015373
    aa60:	00016982 	.word	0x00016982
    aa64:	000153c2 	.word	0x000153c2
    aa68:	000173a3 	.word	0x000173a3

0000aa6c <mayfly_radio_active>:
{
    aa6c:	b507      	push	{r0, r1, r2, lr}
    aa6e:	4a12      	ldr	r2, [pc, #72]	; (aab8 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    aa70:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    aa72:	b140      	cbz	r0, aa86 <mayfly_radio_active+0x1a>
		if (s_active++) {
    aa74:	1c59      	adds	r1, r3, #1
    aa76:	7011      	strb	r1, [r2, #0]
    aa78:	b9d3      	cbnz	r3, aab0 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    aa7a:	2001      	movs	r0, #1
}
    aa7c:	b003      	add	sp, #12
    aa7e:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    aa82:	f006 b92d 	b.w	10ce0 <radio_active_callback>
		LL_ASSERT(s_active);
    aa86:	b973      	cbnz	r3, aaa6 <mayfly_radio_active+0x3a>
    aa88:	4b0c      	ldr	r3, [pc, #48]	; (aabc <mayfly_radio_active+0x50>)
    aa8a:	9301      	str	r3, [sp, #4]
    aa8c:	9300      	str	r3, [sp, #0]
    aa8e:	4a0c      	ldr	r2, [pc, #48]	; (aac0 <mayfly_radio_active+0x54>)
    aa90:	4b0c      	ldr	r3, [pc, #48]	; (aac4 <mayfly_radio_active+0x58>)
    aa92:	490d      	ldr	r1, [pc, #52]	; (aac8 <mayfly_radio_active+0x5c>)
    aa94:	480d      	ldr	r0, [pc, #52]	; (aacc <mayfly_radio_active+0x60>)
    aa96:	f7f6 fa79 	bl	f8c <printk>
    aa9a:	4040      	eors	r0, r0
    aa9c:	f380 8811 	msr	BASEPRI, r0
    aaa0:	f04f 0004 	mov.w	r0, #4
    aaa4:	df02      	svc	2
		if (--s_active) {
    aaa6:	3b01      	subs	r3, #1
    aaa8:	b2db      	uxtb	r3, r3
    aaaa:	7013      	strb	r3, [r2, #0]
    aaac:	2b00      	cmp	r3, #0
    aaae:	d0e5      	beq.n	aa7c <mayfly_radio_active+0x10>
}
    aab0:	b003      	add	sp, #12
    aab2:	f85d fb04 	ldr.w	pc, [sp], #4
    aab6:	bf00      	nop
    aab8:	20000a64 	.word	0x20000a64
    aabc:	000145f1 	.word	0x000145f1
    aac0:	00015373 	.word	0x00015373
    aac4:	00016952 	.word	0x00016952
    aac8:	000153c2 	.word	0x000153c2
    aacc:	000172f8 	.word	0x000172f8

0000aad0 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    aad0:	2000      	movs	r0, #0
    aad2:	f7ff bfcb 	b.w	aa6c <mayfly_radio_active>
	...

0000aad8 <mayfly_radio_stop>:
{
    aad8:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    aada:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    aadc:	1f03      	subs	r3, r0, #4
    aade:	2b01      	cmp	r3, #1
    aae0:	d90e      	bls.n	ab00 <mayfly_radio_stop+0x28>
    aae2:	4b11      	ldr	r3, [pc, #68]	; (ab28 <mayfly_radio_stop+0x50>)
    aae4:	9301      	str	r3, [sp, #4]
    aae6:	9300      	str	r3, [sp, #0]
    aae8:	4a10      	ldr	r2, [pc, #64]	; (ab2c <mayfly_radio_stop+0x54>)
    aaea:	4b11      	ldr	r3, [pc, #68]	; (ab30 <mayfly_radio_stop+0x58>)
    aaec:	4911      	ldr	r1, [pc, #68]	; (ab34 <mayfly_radio_stop+0x5c>)
    aaee:	4812      	ldr	r0, [pc, #72]	; (ab38 <mayfly_radio_stop+0x60>)
    aaf0:	f7f6 fa4c 	bl	f8c <printk>
    aaf4:	4040      	eors	r0, r0
    aaf6:	f380 8811 	msr	BASEPRI, r0
    aafa:	f04f 0004 	mov.w	r0, #4
    aafe:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    ab00:	4a0e      	ldr	r2, [pc, #56]	; (ab3c <mayfly_radio_stop+0x64>)
    ab02:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    ab04:	b143      	cbz	r3, ab18 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    ab06:	3b04      	subs	r3, #4
    ab08:	2b01      	cmp	r3, #1
    ab0a:	d905      	bls.n	ab18 <mayfly_radio_stop+0x40>
			_radio.state = state;
    ab0c:	7510      	strb	r0, [r2, #20]
}
    ab0e:	b003      	add	sp, #12
    ab10:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    ab14:	f007 ba86 	b.w	12024 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    ab18:	f007 fab6 	bl	12088 <radio_is_idle>
    ab1c:	2800      	cmp	r0, #0
    ab1e:	d0f6      	beq.n	ab0e <mayfly_radio_stop+0x36>
}
    ab20:	b003      	add	sp, #12
    ab22:	f85d fb04 	ldr.w	pc, [sp], #4
    ab26:	bf00      	nop
    ab28:	000145f1 	.word	0x000145f1
    ab2c:	00015373 	.word	0x00015373
    ab30:	00016a24 	.word	0x00016a24
    ab34:	000153c2 	.word	0x000153c2
    ab38:	00017322 	.word	0x00017322
    ab3c:	200008c0 	.word	0x200008c0

0000ab40 <pdu_node_tx_release>:
{
    ab40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    ab42:	4a17      	ldr	r2, [pc, #92]	; (aba0 <pdu_node_tx_release+0x60>)
    ab44:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    ab48:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    ab4c:	3301      	adds	r3, #1
    ab4e:	b2db      	uxtb	r3, r3
		last = 0;
    ab50:	429c      	cmp	r4, r3
    ab52:	bf08      	it	eq
    ab54:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    ab56:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    ab5a:	429c      	cmp	r4, r3
    ab5c:	d10e      	bne.n	ab7c <pdu_node_tx_release+0x3c>
    ab5e:	4b11      	ldr	r3, [pc, #68]	; (aba4 <pdu_node_tx_release+0x64>)
    ab60:	9301      	str	r3, [sp, #4]
    ab62:	9300      	str	r3, [sp, #0]
    ab64:	4a10      	ldr	r2, [pc, #64]	; (aba8 <pdu_node_tx_release+0x68>)
    ab66:	4b11      	ldr	r3, [pc, #68]	; (abac <pdu_node_tx_release+0x6c>)
    ab68:	4911      	ldr	r1, [pc, #68]	; (abb0 <pdu_node_tx_release+0x70>)
    ab6a:	4812      	ldr	r0, [pc, #72]	; (abb4 <pdu_node_tx_release+0x74>)
    ab6c:	f7f6 fa0e 	bl	f8c <printk>
    ab70:	4040      	eors	r0, r0
    ab72:	f380 8811 	msr	BASEPRI, r0
    ab76:	f04f 0004 	mov.w	r0, #4
    ab7a:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    ab7c:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    ab80:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    ab84:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    ab88:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    ab8c:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    ab90:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    ab92:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    ab96:	b003      	add	sp, #12
    ab98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    ab9c:	f006 b8a2 	b.w	10ce4 <radio_event_callback>
    aba0:	200008c0 	.word	0x200008c0
    aba4:	000145f1 	.word	0x000145f1
    aba8:	00015373 	.word	0x00015373
    abac:	00016b6c 	.word	0x00016b6c
    abb0:	000153c2 	.word	0x000153c2
    abb4:	00017473 	.word	0x00017473

0000abb8 <packet_tx_enqueue>:
{
    abb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    abbc:	4c24      	ldr	r4, [pc, #144]	; (ac50 <packet_tx_enqueue+0x98>)
{
    abbe:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    abc0:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    abc2:	b12e      	cbz	r6, abd0 <packet_tx_enqueue+0x18>
    abc4:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    abc8:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    abcc:	429a      	cmp	r2, r3
    abce:	d101      	bne.n	abd4 <packet_tx_enqueue+0x1c>
    abd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    abd4:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    abd8:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    abdc:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    abe0:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    abe4:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    abe8:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    abec:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    abee:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    abf0:	f7fc f854 	bl	6c9c <mem_get>
    abf4:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    abf6:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    abfa:	8c1a      	ldrh	r2, [r3, #32]
    abfc:	4282      	cmp	r2, r0
    abfe:	d11f      	bne.n	ac40 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    ac00:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    ac04:	b942      	cbnz	r2, ac18 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    ac06:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    ac0a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    ac0e:	b91a      	cbnz	r2, ac18 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    ac10:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    ac14:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    ac18:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    ac1c:	b102      	cbz	r2, ac20 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    ac1e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    ac20:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    ac24:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    ac28:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    ac2c:	3301      	adds	r3, #1
    ac2e:	b2db      	uxtb	r3, r3
			first = 0;
    ac30:	429a      	cmp	r2, r3
    ac32:	bf08      	it	eq
    ac34:	2300      	moveq	r3, #0
    ac36:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    ac38:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    ac3c:	b2f6      	uxtb	r6, r6
    ac3e:	e7c0      	b.n	abc2 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ac40:	792b      	ldrb	r3, [r5, #4]
    ac42:	f367 0301 	bfi	r3, r7, #0, #2
    ac46:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    ac48:	4629      	mov	r1, r5
    ac4a:	f7ff ff79 	bl	ab40 <pdu_node_tx_release>
    ac4e:	e7e9      	b.n	ac24 <packet_tx_enqueue+0x6c>
    ac50:	200008c0 	.word	0x200008c0

0000ac54 <connection_release>:
{
    ac54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ac56:	2201      	movs	r2, #1
{
    ac58:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ac5a:	4611      	mov	r1, r2
    ac5c:	2000      	movs	r0, #0
    ac5e:	f7fc f88b 	bl	6d78 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ac62:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    ac66:	2100      	movs	r1, #0
    ac68:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ac6c:	3207      	adds	r2, #7
	ticker_status =
    ac6e:	9300      	str	r3, [sp, #0]
    ac70:	4608      	mov	r0, r1
    ac72:	4b3e      	ldr	r3, [pc, #248]	; (ad6c <connection_release+0x118>)
    ac74:	b2d2      	uxtb	r2, r2
    ac76:	f7fc ff03 	bl	7a80 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ac7a:	f030 0102 	bics.w	r1, r0, #2
    ac7e:	d00e      	beq.n	ac9e <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ac80:	4b3b      	ldr	r3, [pc, #236]	; (ad70 <connection_release+0x11c>)
    ac82:	9301      	str	r3, [sp, #4]
    ac84:	9300      	str	r3, [sp, #0]
    ac86:	4a3b      	ldr	r2, [pc, #236]	; (ad74 <connection_release+0x120>)
    ac88:	4b3b      	ldr	r3, [pc, #236]	; (ad78 <connection_release+0x124>)
    ac8a:	493c      	ldr	r1, [pc, #240]	; (ad7c <connection_release+0x128>)
    ac8c:	483c      	ldr	r0, [pc, #240]	; (ad80 <connection_release+0x12c>)
    ac8e:	f7f6 f97d 	bl	f8c <printk>
    ac92:	4040      	eors	r0, r0
    ac94:	f380 8811 	msr	BASEPRI, r0
    ac98:	f04f 0004 	mov.w	r0, #4
    ac9c:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    ac9e:	4b39      	ldr	r3, [pc, #228]	; (ad84 <connection_release+0x130>)
    aca0:	7d1a      	ldrb	r2, [r3, #20]
    aca2:	2a05      	cmp	r2, #5
    aca4:	461d      	mov	r5, r3
    aca6:	d11b      	bne.n	ace0 <connection_release+0x8c>
					  conn->handle))) {
    aca8:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    acaa:	7c18      	ldrb	r0, [r3, #16]
    acac:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    acae:	4290      	cmp	r0, r2
    acb0:	d116      	bne.n	ace0 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    acb2:	7419      	strb	r1, [r3, #16]
		ticker_status =
    acb4:	f242 23fb 	movw	r3, #8955	; 0x22fb
    acb8:	9300      	str	r3, [sp, #0]
    acba:	2201      	movs	r2, #1
    acbc:	4b2b      	ldr	r3, [pc, #172]	; (ad6c <connection_release+0x118>)
    acbe:	4608      	mov	r0, r1
    acc0:	f7fc fede 	bl	7a80 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    acc4:	f030 0202 	bics.w	r2, r0, #2
    acc8:	d1da      	bne.n	ac80 <connection_release+0x2c>
		ticker_status =
    acca:	f242 3302 	movw	r3, #8962	; 0x2302
    acce:	9300      	str	r3, [sp, #0]
    acd0:	4611      	mov	r1, r2
    acd2:	4b26      	ldr	r3, [pc, #152]	; (ad6c <connection_release+0x118>)
    acd4:	4610      	mov	r0, r2
    acd6:	f7fc fed3 	bl	7a80 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    acda:	f030 0302 	bics.w	r3, r0, #2
    acde:	d1cf      	bne.n	ac80 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ace0:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ace4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ace8:	4299      	cmp	r1, r3
    acea:	d003      	beq.n	acf4 <connection_release+0xa0>
    acec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    acf0:	4299      	cmp	r1, r3
    acf2:	d101      	bne.n	acf8 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    acf4:	4e24      	ldr	r6, [pc, #144]	; (ad88 <connection_release+0x134>)
    acf6:	e012      	b.n	ad1e <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    acf8:	790b      	ldrb	r3, [r1, #4]
    acfa:	f36f 0301 	bfc	r3, #0, #2
    acfe:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ad00:	680b      	ldr	r3, [r1, #0]
    ad02:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ad06:	8c20      	ldrh	r0, [r4, #32]
    ad08:	f7ff ff1a 	bl	ab40 <pdu_node_tx_release>
    ad0c:	e7e8      	b.n	ace0 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ad0e:	6803      	ldr	r3, [r0, #0]
    ad10:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ad14:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ad18:	4631      	mov	r1, r6
    ad1a:	f7fb ffa4 	bl	6c66 <mem_release>
	while ((conn->pkt_tx_head) &&
    ad1e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    ad22:	b118      	cbz	r0, ad2c <connection_release+0xd8>
    ad24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ad28:	4298      	cmp	r0, r3
    ad2a:	d1f0      	bne.n	ad0e <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    ad2c:	2300      	movs	r3, #0
    ad2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    ad32:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    ad36:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ad3a:	b951      	cbnz	r1, ad52 <connection_release+0xfe>
	conn->handle = 0xffff;
    ad3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ad40:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    ad42:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    ad46:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    ad48:	bf08      	it	eq
    ad4a:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    ad4e:	b002      	add	sp, #8
    ad50:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ad52:	790b      	ldrb	r3, [r1, #4]
    ad54:	f36f 0301 	bfc	r3, #0, #2
    ad58:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ad5a:	680b      	ldr	r3, [r1, #0]
    ad5c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    ad60:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    ad64:	8c20      	ldrh	r0, [r4, #32]
    ad66:	f7ff feeb 	bl	ab40 <pdu_node_tx_release>
    ad6a:	e7e4      	b.n	ad36 <connection_release+0xe2>
    ad6c:	0000a745 	.word	0x0000a745
    ad70:	000145f1 	.word	0x000145f1
    ad74:	00015373 	.word	0x00015373
    ad78:	00016b80 	.word	0x00016b80
    ad7c:	000153c2 	.word	0x000153c2
    ad80:	00016c69 	.word	0x00016c69
    ad84:	200008c0 	.word	0x200008c0
    ad88:	20000a1c 	.word	0x20000a1c

0000ad8c <chan_set>:
	switch (chan) {
    ad8c:	2826      	cmp	r0, #38	; 0x26
{
    ad8e:	b513      	push	{r0, r1, r4, lr}
    ad90:	4604      	mov	r4, r0
	switch (chan) {
    ad92:	d00c      	beq.n	adae <chan_set+0x22>
    ad94:	2827      	cmp	r0, #39	; 0x27
    ad96:	d00c      	beq.n	adb2 <chan_set+0x26>
    ad98:	2825      	cmp	r0, #37	; 0x25
    ad9a:	d10c      	bne.n	adb6 <chan_set+0x2a>
		radio_freq_chan_set(2);
    ad9c:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    ad9e:	f007 f8bd 	bl	11f1c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    ada2:	4620      	mov	r0, r4
}
    ada4:	b002      	add	sp, #8
    ada6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    adaa:	f007 b8bd 	b.w	11f28 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    adae:	201a      	movs	r0, #26
    adb0:	e7f5      	b.n	ad9e <chan_set+0x12>
		radio_freq_chan_set(80);
    adb2:	2050      	movs	r0, #80	; 0x50
    adb4:	e7f3      	b.n	ad9e <chan_set+0x12>
		if (chan < 11) {
    adb6:	280a      	cmp	r0, #10
    adb8:	d802      	bhi.n	adc0 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    adba:	3002      	adds	r0, #2
    adbc:	0040      	lsls	r0, r0, #1
    adbe:	e7ee      	b.n	ad9e <chan_set+0x12>
		} else if (chan < 40) {
    adc0:	2827      	cmp	r0, #39	; 0x27
    adc2:	d801      	bhi.n	adc8 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    adc4:	3003      	adds	r0, #3
    adc6:	e7f9      	b.n	adbc <chan_set+0x30>
			LL_ASSERT(0);
    adc8:	4b07      	ldr	r3, [pc, #28]	; (ade8 <chan_set+0x5c>)
    adca:	9301      	str	r3, [sp, #4]
    adcc:	9300      	str	r3, [sp, #0]
    adce:	4a07      	ldr	r2, [pc, #28]	; (adec <chan_set+0x60>)
    add0:	4b07      	ldr	r3, [pc, #28]	; (adf0 <chan_set+0x64>)
    add2:	4908      	ldr	r1, [pc, #32]	; (adf4 <chan_set+0x68>)
    add4:	4808      	ldr	r0, [pc, #32]	; (adf8 <chan_set+0x6c>)
    add6:	f7f6 f8d9 	bl	f8c <printk>
    adda:	4040      	eors	r0, r0
    addc:	f380 8811 	msr	BASEPRI, r0
    ade0:	f04f 0004 	mov.w	r0, #4
    ade4:	df02      	svc	2
    ade6:	bf00      	nop
    ade8:	000145f1 	.word	0x000145f1
    adec:	00015373 	.word	0x00015373
    adf0:	00016a56 	.word	0x00016a56
    adf4:	000153c2 	.word	0x000153c2
    adf8:	00015312 	.word	0x00015312

0000adfc <adv_setup>:
{
    adfc:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    adfe:	4c31      	ldr	r4, [pc, #196]	; (aec4 <adv_setup+0xc8>)
    ae00:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    ae04:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    ae08:	429a      	cmp	r2, r3
    ae0a:	d051      	beq.n	aeb0 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    ae0c:	3301      	adds	r3, #1
    ae0e:	b2db      	uxtb	r3, r3
			first = 0;
    ae10:	2b02      	cmp	r3, #2
    ae12:	bf08      	it	eq
    ae14:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    ae16:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    ae1a:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    ae1c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ae20:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    ae24:	4299      	cmp	r1, r3
    ae26:	d007      	beq.n	ae38 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    ae28:	3301      	adds	r3, #1
    ae2a:	b2db      	uxtb	r3, r3
			first = 0;
    ae2c:	2b02      	cmp	r3, #2
    ae2e:	bf08      	it	eq
    ae30:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    ae32:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    ae36:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    ae38:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    ae3c:	2327      	movs	r3, #39	; 0x27
    ae3e:	212b      	movs	r1, #43	; 0x2b
    ae40:	fb13 1505 	smlabb	r5, r3, r5, r1
    ae44:	1966      	adds	r6, r4, r5
	if (upd) {
    ae46:	b142      	cbz	r2, ae5a <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    ae48:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    ae4c:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    ae50:	2206      	movs	r2, #6
    ae52:	1cb1      	adds	r1, r6, #2
    ae54:	307d      	adds	r0, #125	; 0x7d
    ae56:	f7f6 fed1 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    ae5a:	4630      	mov	r0, r6
    ae5c:	f007 f8c2 	bl	11fe4 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    ae60:	5d63      	ldrb	r3, [r4, r5]
    ae62:	f003 030f 	and.w	r3, r3, #15
    ae66:	2b02      	cmp	r3, #2
    ae68:	d024      	beq.n	aeb4 <adv_setup+0xb8>
    ae6a:	2b07      	cmp	r3, #7
    ae6c:	d022      	beq.n	aeb4 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    ae6e:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    ae70:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    ae72:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    ae74:	f007 f9cc 	bl	12210 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    ae78:	2000      	movs	r0, #0
    ae7a:	f007 f92d 	bl	120d8 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    ae7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ae82:	f3c3 0202 	ubfx	r2, r3, #0, #3
    ae86:	b2d3      	uxtb	r3, r2
    ae88:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    ae8a:	2000      	movs	r0, #0
    ae8c:	07ce      	lsls	r6, r1, #31
    ae8e:	f100 0501 	add.w	r5, r0, #1
    ae92:	d514      	bpl.n	aebe <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    ae94:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    ae96:	4013      	ands	r3, r2
    ae98:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    ae9c:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    ae9e:	f363 0202 	bfi	r2, r3, #0, #3
    aea2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    aea6:	3025      	adds	r0, #37	; 0x25
}
    aea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    aeac:	f7ff bf6e 	b.w	ad8c <chan_set>
	u8_t upd = 0;
    aeb0:	2200      	movs	r2, #0
    aeb2:	e7b3      	b.n	ae1c <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    aeb4:	2303      	movs	r3, #3
    aeb6:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    aeb8:	f007 f924 	bl	12104 <radio_switch_complete_and_disable>
    aebc:	e7df      	b.n	ae7e <adv_setup+0x82>
		bitmap >>= 1;
    aebe:	0849      	lsrs	r1, r1, #1
    aec0:	4628      	mov	r0, r5
    aec2:	e7e3      	b.n	ae8c <adv_setup+0x90>
    aec4:	200008c0 	.word	0x200008c0

0000aec8 <sched_after_mstr_free_offset_get>:
{
    aec8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    aeca:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    aecc:	aa04      	add	r2, sp, #16
{
    aece:	461c      	mov	r4, r3
    aed0:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    aed2:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    aed6:	3127      	adds	r1, #39	; 0x27
    aed8:	2001      	movs	r0, #1
    aeda:	f7ff fa5d 	bl	a398 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    aede:	6823      	ldr	r3, [r4, #0]
    aee0:	b363      	cbz	r3, af3c <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    aee2:	9803      	ldr	r0, [sp, #12]
    aee4:	1b83      	subs	r3, r0, r6
    aee6:	021b      	lsls	r3, r3, #8
    aee8:	d50e      	bpl.n	af08 <sched_after_mstr_free_offset_get+0x40>
    aeea:	4b19      	ldr	r3, [pc, #100]	; (af50 <sched_after_mstr_free_offset_get+0x88>)
    aeec:	9301      	str	r3, [sp, #4]
    aeee:	9300      	str	r3, [sp, #0]
    aef0:	4a18      	ldr	r2, [pc, #96]	; (af54 <sched_after_mstr_free_offset_get+0x8c>)
    aef2:	4b19      	ldr	r3, [pc, #100]	; (af58 <sched_after_mstr_free_offset_get+0x90>)
    aef4:	4919      	ldr	r1, [pc, #100]	; (af5c <sched_after_mstr_free_offset_get+0x94>)
    aef6:	481a      	ldr	r0, [pc, #104]	; (af60 <sched_after_mstr_free_offset_get+0x98>)
    aef8:	f7f6 f848 	bl	f8c <printk>
    aefc:	4040      	eors	r0, r0
    aefe:	f380 8811 	msr	BASEPRI, r0
    af02:	f04f 0004 	mov.w	r0, #4
    af06:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    af08:	4631      	mov	r1, r6
    af0a:	f7fc fe8b 	bl	7c24 <ticker_ticks_diff_get>
    af0e:	4602      	mov	r2, r0
    af10:	4814      	ldr	r0, [pc, #80]	; (af64 <sched_after_mstr_free_offset_get+0x9c>)
    af12:	2307      	movs	r3, #7
    af14:	fba2 0100 	umull	r0, r1, r2, r0
    af18:	fb03 1102 	mla	r1, r3, r2, r1
    af1c:	a30a      	add	r3, pc, #40	; (adr r3, af48 <sched_after_mstr_free_offset_get+0x80>)
    af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    af22:	f7f5 f977 	bl	214 <__aeabi_uldivmod>
    af26:	6823      	ldr	r3, [r4, #0]
    af28:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    af2a:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    af2c:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    af2e:	db05      	blt.n	af3c <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    af30:	f240 40e2 	movw	r0, #1250	; 0x4e2
    af34:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    af36:	6823      	ldr	r3, [r4, #0]
    af38:	4298      	cmp	r0, r3
    af3a:	d301      	bcc.n	af40 <sched_after_mstr_free_offset_get+0x78>
}
    af3c:	b004      	add	sp, #16
    af3e:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    af40:	1a1b      	subs	r3, r3, r0
    af42:	6023      	str	r3, [r4, #0]
    af44:	e7f7      	b.n	af36 <sched_after_mstr_free_offset_get+0x6e>
    af46:	bf00      	nop
    af48:	3b9aca00 	.word	0x3b9aca00
    af4c:	00000000 	.word	0x00000000
    af50:	000145f1 	.word	0x000145f1
    af54:	00015373 	.word	0x00015373
    af58:	000169e8 	.word	0x000169e8
    af5c:	000153c2 	.word	0x000153c2
    af60:	000176cf 	.word	0x000176cf
    af64:	1afd498d 	.word	0x1afd498d

0000af68 <mayfly_sched_win_offset_use>:
{
    af68:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    af6a:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    af6e:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    af70:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    af74:	68c1      	ldr	r1, [r0, #12]
    af76:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    af78:	f7ff ffa6 	bl	aec8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    af7c:	a902      	add	r1, sp, #8
    af7e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    af82:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    af86:	f240 42e2 	movw	r2, #1250	; 0x4e2
    af8a:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    af8e:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    af90:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    af94:	f7f6 fe32 	bl	1bfc <memcpy>
}
    af98:	b002      	add	sp, #8
    af9a:	bd10      	pop	{r4, pc}

0000af9c <mayfly_sched_after_mstr_free_offset_get>:
{
    af9c:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    af9e:	4c05      	ldr	r4, [pc, #20]	; (afb4 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    afa0:	4602      	mov	r2, r0
    afa2:	f504 7382 	add.w	r3, r4, #260	; 0x104
    afa6:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    afaa:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    afae:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    afb0:	f7ff bf8a 	b.w	aec8 <sched_after_mstr_free_offset_get>
    afb4:	200008c0 	.word	0x200008c0

0000afb8 <terminate_ind_rx_enqueue>:
{
    afb8:	b513      	push	{r0, r1, r4, lr}
    afba:	4603      	mov	r3, r0
    afbc:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    afbe:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    afc2:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    afc6:	b970      	cbnz	r0, afe6 <terminate_ind_rx_enqueue+0x2e>
    afc8:	4b16      	ldr	r3, [pc, #88]	; (b024 <terminate_ind_rx_enqueue+0x6c>)
    afca:	9301      	str	r3, [sp, #4]
    afcc:	9300      	str	r3, [sp, #0]
    afce:	4a16      	ldr	r2, [pc, #88]	; (b028 <terminate_ind_rx_enqueue+0x70>)
    afd0:	4b16      	ldr	r3, [pc, #88]	; (b02c <terminate_ind_rx_enqueue+0x74>)
    afd2:	4917      	ldr	r1, [pc, #92]	; (b030 <terminate_ind_rx_enqueue+0x78>)
    afd4:	4817      	ldr	r0, [pc, #92]	; (b034 <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    afd6:	f7f5 ffd9 	bl	f8c <printk>
    afda:	4040      	eors	r0, r0
    afdc:	f380 8811 	msr	BASEPRI, r0
    afe0:	f04f 0004 	mov.w	r0, #4
    afe4:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    afe6:	8c1c      	ldrh	r4, [r3, #32]
    afe8:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    afec:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    aff0:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    aff2:	4a11      	ldr	r2, [pc, #68]	; (b038 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    aff4:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    aff8:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    affc:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b000:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b004:	f7fb fe6f 	bl	6ce6 <memq_enqueue>
	LL_ASSERT(link);
    b008:	b938      	cbnz	r0, b01a <terminate_ind_rx_enqueue+0x62>
    b00a:	4b06      	ldr	r3, [pc, #24]	; (b024 <terminate_ind_rx_enqueue+0x6c>)
    b00c:	9301      	str	r3, [sp, #4]
    b00e:	9300      	str	r3, [sp, #0]
    b010:	4a05      	ldr	r2, [pc, #20]	; (b028 <terminate_ind_rx_enqueue+0x70>)
    b012:	4b06      	ldr	r3, [pc, #24]	; (b02c <terminate_ind_rx_enqueue+0x74>)
    b014:	4906      	ldr	r1, [pc, #24]	; (b030 <terminate_ind_rx_enqueue+0x78>)
    b016:	4809      	ldr	r0, [pc, #36]	; (b03c <terminate_ind_rx_enqueue+0x84>)
    b018:	e7dd      	b.n	afd6 <terminate_ind_rx_enqueue+0x1e>
}
    b01a:	b002      	add	sp, #8
    b01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b020:	f005 be60 	b.w	10ce4 <radio_event_callback>
    b024:	000145f1 	.word	0x000145f1
    b028:	00015373 	.word	0x00015373
    b02c:	00016b93 	.word	0x00016b93
    b030:	000153c2 	.word	0x000153c2
    b034:	00017755 	.word	0x00017755
    b038:	200008c0 	.word	0x200008c0
    b03c:	00016c43 	.word	0x00016c43

0000b040 <prepare_normal_set>:
{
    b040:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b042:	6804      	ldr	r4, [r0, #0]
    b044:	2c00      	cmp	r4, #0
{
    b046:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b048:	da26      	bge.n	b098 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    b04a:	6843      	ldr	r3, [r0, #4]
    b04c:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b04e:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b050:	429d      	cmp	r5, r3
    b052:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b056:	bf34      	ite	cc
    b058:	1ae4      	subcc	r4, r4, r3
    b05a:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b05c:	4b0f      	ldr	r3, [pc, #60]	; (b09c <prepare_normal_set+0x5c>)
    b05e:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b060:	b2a4      	uxth	r4, r4
		ticker_status =
    b062:	2300      	movs	r3, #0
    b064:	9304      	str	r3, [sp, #16]
    b066:	9303      	str	r3, [sp, #12]
    b068:	9302      	str	r3, [sp, #8]
    b06a:	4618      	mov	r0, r3
    b06c:	9401      	str	r4, [sp, #4]
    b06e:	9400      	str	r4, [sp, #0]
    b070:	f7fc fcb8 	bl	79e4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b074:	f030 0302 	bics.w	r3, r0, #2
    b078:	d00e      	beq.n	b098 <prepare_normal_set+0x58>
    b07a:	4b09      	ldr	r3, [pc, #36]	; (b0a0 <prepare_normal_set+0x60>)
    b07c:	9301      	str	r3, [sp, #4]
    b07e:	9300      	str	r3, [sp, #0]
    b080:	4a08      	ldr	r2, [pc, #32]	; (b0a4 <prepare_normal_set+0x64>)
    b082:	4b09      	ldr	r3, [pc, #36]	; (b0a8 <prepare_normal_set+0x68>)
    b084:	4909      	ldr	r1, [pc, #36]	; (b0ac <prepare_normal_set+0x6c>)
    b086:	480a      	ldr	r0, [pc, #40]	; (b0b0 <prepare_normal_set+0x70>)
    b088:	f7f5 ff80 	bl	f8c <printk>
    b08c:	4040      	eors	r0, r0
    b08e:	f380 8811 	msr	BASEPRI, r0
    b092:	f04f 0004 	mov.w	r0, #4
    b096:	df02      	svc	2
}
    b098:	b009      	add	sp, #36	; 0x24
    b09a:	bd30      	pop	{r4, r5, pc}
    b09c:	000097ed 	.word	0x000097ed
    b0a0:	000145f1 	.word	0x000145f1
    b0a4:	00015373 	.word	0x00015373
    b0a8:	000169a0 	.word	0x000169a0
    b0ac:	000153c2 	.word	0x000153c2
    b0b0:	00016c69 	.word	0x00016c69
    b0b4:	00000000 	.word	0x00000000

0000b0b8 <mayfly_xtal_stop_calc>:
{
    b0b8:	b570      	push	{r4, r5, r6, lr}
    b0ba:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b0bc:	2302      	movs	r3, #2
    b0be:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b0c0:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b0c2:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b0c4:	4e7e      	ldr	r6, [pc, #504]	; (b2c0 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    b0c6:	4d7f      	ldr	r5, [pc, #508]	; (b2c4 <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    b0c8:	930a      	str	r3, [sp, #40]	; 0x28
{
    b0ca:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b0cc:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b0ce:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b0d2:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b0d4:	ab09      	add	r3, sp, #36	; 0x24
    b0d6:	9302      	str	r3, [sp, #8]
    b0d8:	ab0c      	add	r3, sp, #48	; 0x30
    b0da:	9300      	str	r3, [sp, #0]
    b0dc:	9601      	str	r6, [sp, #4]
    b0de:	ab0d      	add	r3, sp, #52	; 0x34
    b0e0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b0e4:	2101      	movs	r1, #1
    b0e6:	2000      	movs	r0, #0
    b0e8:	f7fc fd06 	bl	7af8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b0ec:	2802      	cmp	r0, #2
    b0ee:	d014      	beq.n	b11a <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0f2:	b1b3      	cbz	r3, b122 <mayfly_xtal_stop_calc+0x6a>
    b0f4:	4b74      	ldr	r3, [pc, #464]	; (b2c8 <mayfly_xtal_stop_calc+0x210>)
    b0f6:	9301      	str	r3, [sp, #4]
    b0f8:	9300      	str	r3, [sp, #0]
    b0fa:	4a74      	ldr	r2, [pc, #464]	; (b2cc <mayfly_xtal_stop_calc+0x214>)
    b0fc:	4b74      	ldr	r3, [pc, #464]	; (b2d0 <mayfly_xtal_stop_calc+0x218>)
    b0fe:	4975      	ldr	r1, [pc, #468]	; (b2d4 <mayfly_xtal_stop_calc+0x21c>)
    b100:	4875      	ldr	r0, [pc, #468]	; (b2d8 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    b102:	f7f5 ff43 	bl	f8c <printk>
    b106:	4040      	eors	r0, r0
    b108:	f380 8811 	msr	BASEPRI, r0
    b10c:	f04f 0004 	mov.w	r0, #4
    b110:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b112:	2101      	movs	r1, #1
    b114:	2000      	movs	r0, #0
    b116:	f7fc fd6d 	bl	7bf4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b11c:	2b02      	cmp	r3, #2
    b11e:	d0f8      	beq.n	b112 <mayfly_xtal_stop_calc+0x5a>
    b120:	e7e6      	b.n	b0f0 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b122:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b126:	2bff      	cmp	r3, #255	; 0xff
    b128:	d004      	beq.n	b134 <mayfly_xtal_stop_calc+0x7c>
    b12a:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b12e:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b130:	4293      	cmp	r3, r2
    b132:	dacf      	bge.n	b0d4 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b134:	1f5a      	subs	r2, r3, #5
    b136:	b2d2      	uxtb	r2, r2
    b138:	2af9      	cmp	r2, #249	; 0xf9
    b13a:	d805      	bhi.n	b148 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    b13c:	4a61      	ldr	r2, [pc, #388]	; (b2c4 <mayfly_xtal_stop_calc+0x20c>)
    b13e:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b142:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b144:	4293      	cmp	r3, r2
    b146:	db05      	blt.n	b154 <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b148:	2100      	movs	r1, #0
    b14a:	2001      	movs	r0, #1
    b14c:	f7fe fe92 	bl	9e74 <mayfly_xtal_retain>
}
    b150:	b00e      	add	sp, #56	; 0x38
    b152:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b154:	a90a      	add	r1, sp, #40	; 0x28
    b156:	b2e0      	uxtb	r0, r4
    b158:	f7ff fbf4 	bl	a944 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b15c:	b938      	cbnz	r0, b16e <mayfly_xtal_stop_calc+0xb6>
    b15e:	4b5a      	ldr	r3, [pc, #360]	; (b2c8 <mayfly_xtal_stop_calc+0x210>)
    b160:	9301      	str	r3, [sp, #4]
    b162:	9300      	str	r3, [sp, #0]
    b164:	4a59      	ldr	r2, [pc, #356]	; (b2cc <mayfly_xtal_stop_calc+0x214>)
    b166:	4b5a      	ldr	r3, [pc, #360]	; (b2d0 <mayfly_xtal_stop_calc+0x218>)
    b168:	495a      	ldr	r1, [pc, #360]	; (b2d4 <mayfly_xtal_stop_calc+0x21c>)
    b16a:	485c      	ldr	r0, [pc, #368]	; (b2dc <mayfly_xtal_stop_calc+0x224>)
    b16c:	e7c9      	b.n	b102 <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b16e:	6803      	ldr	r3, [r0, #0]
    b170:	6844      	ldr	r4, [r0, #4]
    b172:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b174:	bfb8      	it	lt
    b176:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b178:	429c      	cmp	r4, r3
    b17a:	bf38      	it	cc
    b17c:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b17e:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b180:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b184:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b186:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b188:	f7ff fbdc 	bl	a944 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b18c:	4605      	mov	r5, r0
    b18e:	b938      	cbnz	r0, b1a0 <mayfly_xtal_stop_calc+0xe8>
    b190:	4b4d      	ldr	r3, [pc, #308]	; (b2c8 <mayfly_xtal_stop_calc+0x210>)
    b192:	9301      	str	r3, [sp, #4]
    b194:	9300      	str	r3, [sp, #0]
    b196:	4a4d      	ldr	r2, [pc, #308]	; (b2cc <mayfly_xtal_stop_calc+0x214>)
    b198:	4b4d      	ldr	r3, [pc, #308]	; (b2d0 <mayfly_xtal_stop_calc+0x218>)
    b19a:	494e      	ldr	r1, [pc, #312]	; (b2d4 <mayfly_xtal_stop_calc+0x21c>)
    b19c:	4850      	ldr	r0, [pc, #320]	; (b2e0 <mayfly_xtal_stop_calc+0x228>)
    b19e:	e7b0      	b.n	b102 <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    b1a0:	6886      	ldr	r6, [r0, #8]
    b1a2:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b1a4:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b1a6:	429e      	cmp	r6, r3
    b1a8:	bf38      	it	cc
    b1aa:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b1ac:	2a00      	cmp	r2, #0
    b1ae:	da05      	bge.n	b1bc <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    b1b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b1b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b1b6:	4433      	add	r3, r6
    b1b8:	1a9b      	subs	r3, r3, r2
    b1ba:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b1bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b1be:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b1c2:	4293      	cmp	r3, r2
    b1c4:	d20a      	bcs.n	b1dc <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b1c6:	2100      	movs	r1, #0
    b1c8:	2001      	movs	r0, #1
    b1ca:	f7fe fe53 	bl	9e74 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b1ce:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b1d2:	2101      	movs	r1, #1
    b1d4:	4628      	mov	r0, r5
    b1d6:	f7ff ff33 	bl	b040 <prepare_normal_set>
    b1da:	e7b9      	b.n	b150 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    b1dc:	2101      	movs	r1, #1
    b1de:	4608      	mov	r0, r1
    b1e0:	f7fe fe48 	bl	9e74 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b1e4:	682b      	ldr	r3, [r5, #0]
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	db1c      	blt.n	b224 <mayfly_xtal_stop_calc+0x16c>
    b1ea:	429e      	cmp	r6, r3
    b1ec:	d21a      	bcs.n	b224 <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b1ee:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b1f0:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b1f2:	b29b      	uxth	r3, r3
			ticker_status =
    b1f4:	493b      	ldr	r1, [pc, #236]	; (b2e4 <mayfly_xtal_stop_calc+0x22c>)
    b1f6:	9105      	str	r1, [sp, #20]
    b1f8:	9302      	str	r3, [sp, #8]
    b1fa:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b1fe:	9506      	str	r5, [sp, #24]
    b200:	9004      	str	r0, [sp, #16]
    b202:	9003      	str	r0, [sp, #12]
    b204:	9001      	str	r0, [sp, #4]
    b206:	9000      	str	r0, [sp, #0]
    b208:	2101      	movs	r1, #1
    b20a:	f7fc fbeb 	bl	79e4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b20e:	f030 0302 	bics.w	r3, r0, #2
    b212:	d007      	beq.n	b224 <mayfly_xtal_stop_calc+0x16c>
    b214:	4b2c      	ldr	r3, [pc, #176]	; (b2c8 <mayfly_xtal_stop_calc+0x210>)
    b216:	9301      	str	r3, [sp, #4]
    b218:	9300      	str	r3, [sp, #0]
    b21a:	4a2c      	ldr	r2, [pc, #176]	; (b2cc <mayfly_xtal_stop_calc+0x214>)
    b21c:	4b2c      	ldr	r3, [pc, #176]	; (b2d0 <mayfly_xtal_stop_calc+0x218>)
    b21e:	492d      	ldr	r1, [pc, #180]	; (b2d4 <mayfly_xtal_stop_calc+0x21c>)
    b220:	4831      	ldr	r0, [pc, #196]	; (b2e8 <mayfly_xtal_stop_calc+0x230>)
    b222:	e76e      	b.n	b102 <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    b224:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b226:	2e00      	cmp	r6, #0
    b228:	d092      	beq.n	b150 <mayfly_xtal_stop_calc+0x98>
    b22a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b22c:	2d00      	cmp	r5, #0
    b22e:	d08f      	beq.n	b150 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b230:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b232:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b234:	429a      	cmp	r2, r3
    b236:	d18b      	bne.n	b150 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b238:	482c      	ldr	r0, [pc, #176]	; (b2ec <mayfly_xtal_stop_calc+0x234>)
    b23a:	b292      	uxth	r2, r2
    b23c:	fba2 0100 	umull	r0, r1, r2, r0
    b240:	f240 1323 	movw	r3, #291	; 0x123
    b244:	fb03 1102 	mla	r1, r3, r2, r1
    b248:	a31b      	add	r3, pc, #108	; (adr r3, b2b8 <mayfly_xtal_stop_calc+0x200>)
    b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b24e:	f7f4 ffe1 	bl	214 <__aeabi_uldivmod>
    b252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b254:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b258:	2200      	movs	r2, #0
    b25a:	4298      	cmp	r0, r3
    b25c:	d318      	bcc.n	b290 <mayfly_xtal_stop_calc+0x1d8>
    b25e:	b102      	cbz	r2, b262 <mayfly_xtal_stop_calc+0x1aa>
    b260:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b262:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b266:	2a00      	cmp	r2, #0
    b268:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b26c:	da13      	bge.n	b296 <mayfly_xtal_stop_calc+0x1de>
    b26e:	2a00      	cmp	r2, #0
    b270:	f6ff af6e 	blt.w	b150 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    b274:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b276:	429c      	cmp	r4, r3
    b278:	f67f af6a 	bls.w	b150 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    b27c:	4630      	mov	r0, r6
    b27e:	f7fe faff 	bl	9880 <conn_update_req>
				if (status == 2) {
    b282:	2802      	cmp	r0, #2
    b284:	f47f af64 	bne.w	b150 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    b288:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b28a:	f7fe faf9 	bl	9880 <conn_update_req>
    b28e:	e75f      	b.n	b150 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    b290:	1a1b      	subs	r3, r3, r0
    b292:	2201      	movs	r2, #1
    b294:	e7e1      	b.n	b25a <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    b296:	2a00      	cmp	r2, #0
    b298:	f6bf af5a 	bge.w	b150 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    b29c:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b29e:	429c      	cmp	r4, r3
    b2a0:	f67f af56 	bls.w	b150 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    b2a4:	4628      	mov	r0, r5
    b2a6:	f7fe faeb 	bl	9880 <conn_update_req>
				if (status == 2) {
    b2aa:	2802      	cmp	r0, #2
    b2ac:	f47f af50 	bne.w	b150 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    b2b0:	980a      	ldr	r0, [sp, #40]	; 0x28
    b2b2:	e7ea      	b.n	b28a <mayfly_xtal_stop_calc+0x1d2>
    b2b4:	f3af 8000 	nop.w
    b2b8:	1afd498d 	.word	0x1afd498d
    b2bc:	00000007 	.word	0x00000007
    b2c0:	000097dd 	.word	0x000097dd
    b2c4:	200008c0 	.word	0x200008c0
    b2c8:	000145f1 	.word	0x000145f1
    b2cc:	00015373 	.word	0x00015373
    b2d0:	000169b3 	.word	0x000169b3
    b2d4:	000153c2 	.word	0x000153c2
    b2d8:	00017728 	.word	0x00017728
    b2dc:	000173cc 	.word	0x000173cc
    b2e0:	000173f6 	.word	0x000173f6
    b2e4:	000097e1 	.word	0x000097e1
    b2e8:	00016c69 	.word	0x00016c69
    b2ec:	09ce5400 	.word	0x09ce5400

0000b2f0 <preempt_calc>:
{
    b2f0:	b570      	push	{r4, r5, r6, lr}
    b2f2:	4614      	mov	r4, r2
    b2f4:	460e      	mov	r6, r1
    b2f6:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b2f8:	f7fc fc92 	bl	7c20 <ticker_ticks_now_get>
	u32_t diff =
    b2fc:	4621      	mov	r1, r4
    b2fe:	f7fc fc91 	bl	7c24 <ticker_ticks_diff_get>
	diff += 3;
    b302:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b304:	2c09      	cmp	r4, #9
    b306:	d90f      	bls.n	b328 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    b308:	2100      	movs	r1, #0
    b30a:	4608      	mov	r0, r1
    b30c:	f7fe fdb2 	bl	9e74 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b310:	4632      	mov	r2, r6
    b312:	2100      	movs	r1, #0
    b314:	4628      	mov	r0, r5
    b316:	f7ff fe93 	bl	b040 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b31a:	68ab      	ldr	r3, [r5, #8]
    b31c:	441c      	add	r4, r3
		if (diff <
    b31e:	2c26      	cmp	r4, #38	; 0x26
    b320:	d800      	bhi.n	b324 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    b322:	60ac      	str	r4, [r5, #8]
		return 1;
    b324:	2001      	movs	r0, #1
}
    b326:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    b328:	2000      	movs	r0, #0
    b32a:	bd70      	pop	{r4, r5, r6, pc}

0000b32c <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b32e:	ad02      	add	r5, sp, #8
    b330:	4b10      	ldr	r3, [pc, #64]	; (b374 <adv_scan_configure.constprop.30+0x48>)
    b332:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b336:	4604      	mov	r4, r0
	radio_reset();
    b338:	f006 fdc0 	bl	11ebc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b33c:	2000      	movs	r0, #0
    b33e:	f006 fde7 	bl	11f10 <radio_tx_power_set>
	radio_isr_set(isr);
    b342:	480d      	ldr	r0, [pc, #52]	; (b378 <adv_scan_configure.constprop.30+0x4c>)
    b344:	f006 fd84 	bl	11e50 <radio_isr_set>
	radio_phy_set(phy, flags);
    b348:	2101      	movs	r1, #1
    b34a:	4620      	mov	r0, r4
    b34c:	f006 fdd0 	bl	11ef0 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b350:	4628      	mov	r0, r5
    b352:	f006 fdfb 	bl	11f4c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b356:	0062      	lsls	r2, r4, #1
    b358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b35c:	2125      	movs	r1, #37	; 0x25
    b35e:	2008      	movs	r0, #8
    b360:	f006 fe0c 	bl	11f7c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b364:	4905      	ldr	r1, [pc, #20]	; (b37c <adv_scan_configure.constprop.30+0x50>)
    b366:	f240 605b 	movw	r0, #1627	; 0x65b
    b36a:	f006 fe97 	bl	1209c <radio_crc_configure>
}
    b36e:	b003      	add	sp, #12
    b370:	bd30      	pop	{r4, r5, pc}
    b372:	bf00      	nop
    b374:	8e89bed6 	.word	0x8e89bed6
    b378:	0000e2d9 	.word	0x0000e2d9
    b37c:	00555555 	.word	0x00555555

0000b380 <event_scan>:
{
    b380:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b382:	4b62      	ldr	r3, [pc, #392]	; (b50c <event_scan+0x18c>)
    b384:	7cda      	ldrb	r2, [r3, #19]
{
    b386:	b08d      	sub	sp, #52	; 0x34
    b388:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b38a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b38e:	461c      	mov	r4, r3
    b390:	b172      	cbz	r2, b3b0 <event_scan+0x30>
    b392:	4b5f      	ldr	r3, [pc, #380]	; (b510 <event_scan+0x190>)
    b394:	9301      	str	r3, [sp, #4]
    b396:	9300      	str	r3, [sp, #0]
    b398:	4a5e      	ldr	r2, [pc, #376]	; (b514 <event_scan+0x194>)
    b39a:	4b5f      	ldr	r3, [pc, #380]	; (b518 <event_scan+0x198>)
    b39c:	495f      	ldr	r1, [pc, #380]	; (b51c <event_scan+0x19c>)
    b39e:	4860      	ldr	r0, [pc, #384]	; (b520 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b3a0:	f7f5 fdf4 	bl	f8c <printk>
    b3a4:	4040      	eors	r0, r0
    b3a6:	f380 8811 	msr	BASEPRI, r0
    b3aa:	f04f 0004 	mov.w	r0, #4
    b3ae:	df02      	svc	2
    b3b0:	7c1b      	ldrb	r3, [r3, #16]
    b3b2:	b2db      	uxtb	r3, r3
    b3b4:	2b06      	cmp	r3, #6
    b3b6:	d007      	beq.n	b3c8 <event_scan+0x48>
    b3b8:	4b55      	ldr	r3, [pc, #340]	; (b510 <event_scan+0x190>)
    b3ba:	9301      	str	r3, [sp, #4]
    b3bc:	9300      	str	r3, [sp, #0]
    b3be:	4a55      	ldr	r2, [pc, #340]	; (b514 <event_scan+0x194>)
    b3c0:	4b55      	ldr	r3, [pc, #340]	; (b518 <event_scan+0x198>)
    b3c2:	4956      	ldr	r1, [pc, #344]	; (b51c <event_scan+0x19c>)
    b3c4:	4857      	ldr	r0, [pc, #348]	; (b524 <event_scan+0x1a4>)
    b3c6:	e7eb      	b.n	b3a0 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    b3c8:	2202      	movs	r2, #2
    b3ca:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b3cc:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b3ce:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b3d0:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b3d4:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b3d6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b3da:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b3dc:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b3e0:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b3e4:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b3e6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b3ea:	f7ff ff9f 	bl	b32c <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    b3ee:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b3f2:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b3f6:	1c42      	adds	r2, r0, #1
    b3f8:	f362 0383 	bfi	r3, r2, #2, #2
    b3fc:	3025      	adds	r0, #37	; 0x25
    b3fe:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b402:	f7ff fcc3 	bl	ad8c <chan_set>
	if (_radio.scanner.chan == 3) {
    b406:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b40a:	f003 020c 	and.w	r2, r3, #12
    b40e:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b410:	bf08      	it	eq
    b412:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b416:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b41a:	bf08      	it	eq
    b41c:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b420:	f006 fef6 	bl	12210 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b424:	2300      	movs	r3, #0
    b426:	4619      	mov	r1, r3
    b428:	461a      	mov	r2, r3
    b42a:	4618      	mov	r0, r3
    b42c:	f006 fe60 	bl	120f0 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b430:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b434:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b438:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b43c:	3008      	adds	r0, #8
    b43e:	f006 fdcb 	bl	11fd8 <radio_pkt_rx_set>
	radio_rssi_measure();
    b442:	f006 fe6d 	bl	12120 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b446:	f006 f909 	bl	1165c <ctrl_rl_enabled>
    b44a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b44e:	b340      	cbz	r0, b4a2 <event_scan+0x122>
		struct ll_filter *filter =
    b450:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b454:	f005 ff22 	bl	1129c <ctrl_filter_get>
    b458:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b45a:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b45e:	f005 fe4d 	bl	110fc <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b462:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b464:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b466:	1cb2      	adds	r2, r6, #2
    b468:	7830      	ldrb	r0, [r6, #0]
    b46a:	f006 fe7b 	bl	12164 <radio_filter_configure>
		radio_ar_configure(count, irks);
    b46e:	4639      	mov	r1, r7
    b470:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b474:	f007 f850 	bl	12518 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b478:	68e2      	ldr	r2, [r4, #12]
    b47a:	f105 0109 	add.w	r1, r5, #9
    b47e:	2000      	movs	r0, #0
    b480:	f006 fed2 	bl	12228 <radio_tmr_start>
	radio_tmr_end_capture();
    b484:	f006 ffa0 	bl	123c8 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b488:	2106      	movs	r1, #6
    b48a:	462a      	mov	r2, r5
    b48c:	4826      	ldr	r0, [pc, #152]	; (b528 <event_scan+0x1a8>)
    b48e:	f7ff ff2f 	bl	b2f0 <preempt_calc>
    b492:	4601      	mov	r1, r0
    b494:	b188      	cbz	r0, b4ba <event_scan+0x13a>
		_radio.state = STATE_STOP;
    b496:	2304      	movs	r3, #4
    b498:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b49a:	f006 fdc3 	bl	12024 <radio_disable>
}
    b49e:	b00d      	add	sp, #52	; 0x34
    b4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b4a2:	f013 0f30 	tst.w	r3, #48	; 0x30
    b4a6:	d0e7      	beq.n	b478 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    b4a8:	2001      	movs	r0, #1
    b4aa:	f005 fef7 	bl	1129c <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b4ae:	1c82      	adds	r2, r0, #2
    b4b0:	7841      	ldrb	r1, [r0, #1]
    b4b2:	7800      	ldrb	r0, [r0, #0]
    b4b4:	f006 fe56 	bl	12164 <radio_filter_configure>
    b4b8:	e7de      	b.n	b478 <event_scan+0xf8>
		ret = ticker_start(
    b4ba:	f641 1336 	movw	r3, #6454	; 0x1936
    b4be:	9308      	str	r3, [sp, #32]
    b4c0:	4b1a      	ldr	r3, [pc, #104]	; (b52c <event_scan+0x1ac>)
    b4c2:	9307      	str	r3, [sp, #28]
    b4c4:	2204      	movs	r2, #4
    b4c6:	4b1a      	ldr	r3, [pc, #104]	; (b530 <event_scan+0x1b0>)
    b4c8:	9206      	str	r2, [sp, #24]
    b4ca:	9305      	str	r3, [sp, #20]
    b4cc:	9004      	str	r0, [sp, #16]
    b4ce:	9003      	str	r0, [sp, #12]
    b4d0:	9002      	str	r0, [sp, #8]
    b4d2:	9001      	str	r0, [sp, #4]
    b4d4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    b4d8:	3309      	adds	r3, #9
    b4da:	9300      	str	r3, [sp, #0]
    b4dc:	462b      	mov	r3, r5
    b4de:	f7fc fa31 	bl	7944 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b4e2:	f030 0302 	bics.w	r3, r0, #2
    b4e6:	d007      	beq.n	b4f8 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b4e8:	4b09      	ldr	r3, [pc, #36]	; (b510 <event_scan+0x190>)
    b4ea:	9301      	str	r3, [sp, #4]
    b4ec:	9300      	str	r3, [sp, #0]
    b4ee:	4a09      	ldr	r2, [pc, #36]	; (b514 <event_scan+0x194>)
    b4f0:	4b09      	ldr	r3, [pc, #36]	; (b518 <event_scan+0x198>)
    b4f2:	490a      	ldr	r1, [pc, #40]	; (b51c <event_scan+0x19c>)
    b4f4:	480f      	ldr	r0, [pc, #60]	; (b534 <event_scan+0x1b4>)
    b4f6:	e753      	b.n	b3a0 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b4f8:	4619      	mov	r1, r3
    b4fa:	4618      	mov	r0, r3
    b4fc:	4a0e      	ldr	r2, [pc, #56]	; (b538 <event_scan+0x1b8>)
    b4fe:	f7fc fb3d 	bl	7b7c <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b502:	f030 0302 	bics.w	r3, r0, #2
    b506:	d1ef      	bne.n	b4e8 <event_scan+0x168>
    b508:	e7c9      	b.n	b49e <event_scan+0x11e>
    b50a:	bf00      	nop
    b50c:	200008c0 	.word	0x200008c0
    b510:	000145f1 	.word	0x000145f1
    b514:	00015373 	.word	0x00015373
    b518:	00016a82 	.word	0x00016a82
    b51c:	000153c2 	.word	0x000153c2
    b520:	00016d85 	.word	0x00016d85
    b524:	00016dbf 	.word	0x00016dbf
    b528:	20000990 	.word	0x20000990
    b52c:	0000a745 	.word	0x0000a745
    b530:	0000a9b5 	.word	0x0000a9b5
    b534:	00016dfe 	.word	0x00016dfe
    b538:	0000a92d 	.word	0x0000a92d

0000b53c <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b53c:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b53e:	4b05      	ldr	r3, [pc, #20]	; (b554 <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b540:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b542:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b544:	4611      	mov	r1, r2
    b546:	4610      	mov	r0, r2
    b548:	f7fb fc3e 	bl	6dc8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b54c:	b108      	cbz	r0, b552 <event_stop.constprop.31+0x16>
    b54e:	f7ff fa17 	bl	a980 <event_stop.part.10>
    b552:	bd08      	pop	{r3, pc}
    b554:	20003d68 	.word	0x20003d68

0000b558 <event_common_prepare>:
{
    b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b55c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b55e:	681d      	ldr	r5, [r3, #0]
{
    b560:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b562:	2c00      	cmp	r4, #0
{
    b564:	4681      	mov	r9, r0
    b566:	910b      	str	r1, [sp, #44]	; 0x2c
    b568:	4690      	mov	r8, r2
    b56a:	469b      	mov	fp, r3
    b56c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b570:	da03      	bge.n	b57a <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    b572:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b574:	42ac      	cmp	r4, r5
    b576:	bf38      	it	cc
    b578:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b57a:	42ac      	cmp	r4, r5
    b57c:	4f56      	ldr	r7, [pc, #344]	; (b6d8 <event_common_prepare+0x180>)
    b57e:	d924      	bls.n	b5ca <event_common_prepare+0x72>
		ticker_status =
    b580:	f241 5374 	movw	r3, #5492	; 0x1574
    b584:	9308      	str	r3, [sp, #32]
    b586:	4b55      	ldr	r3, [pc, #340]	; (b6dc <event_common_prepare+0x184>)
    b588:	9305      	str	r3, [sp, #20]
    b58a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b58c:	1b63      	subs	r3, r4, r5
		ticker_status =
    b58e:	9300      	str	r3, [sp, #0]
    b590:	9707      	str	r7, [sp, #28]
    b592:	464b      	mov	r3, r9
    b594:	9106      	str	r1, [sp, #24]
    b596:	9104      	str	r1, [sp, #16]
    b598:	9103      	str	r1, [sp, #12]
    b59a:	9102      	str	r1, [sp, #8]
    b59c:	9101      	str	r1, [sp, #4]
    b59e:	2201      	movs	r2, #1
    b5a0:	4608      	mov	r0, r1
    b5a2:	f7fc f9cf 	bl	7944 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5a6:	f030 0302 	bics.w	r3, r0, #2
    b5aa:	d034      	beq.n	b616 <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5ac:	4b4c      	ldr	r3, [pc, #304]	; (b6e0 <event_common_prepare+0x188>)
    b5ae:	9301      	str	r3, [sp, #4]
    b5b0:	9300      	str	r3, [sp, #0]
    b5b2:	4a4c      	ldr	r2, [pc, #304]	; (b6e4 <event_common_prepare+0x18c>)
    b5b4:	4b4c      	ldr	r3, [pc, #304]	; (b6e8 <event_common_prepare+0x190>)
    b5b6:	494d      	ldr	r1, [pc, #308]	; (b6ec <event_common_prepare+0x194>)
    b5b8:	484d      	ldr	r0, [pc, #308]	; (b6f0 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    b5ba:	f7f5 fce7 	bl	f8c <printk>
    b5be:	4040      	eors	r0, r0
    b5c0:	f380 8811 	msr	BASEPRI, r0
    b5c4:	f04f 0004 	mov.w	r0, #4
    b5c8:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    b5ca:	d21d      	bcs.n	b608 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    b5cc:	2300      	movs	r3, #0
    b5ce:	461a      	mov	r2, r3
    b5d0:	4619      	mov	r1, r3
    b5d2:	4618      	mov	r0, r3
    b5d4:	f7ff f9fe 	bl	a9d4 <event_active>
		ticker_status =
    b5d8:	f241 5389 	movw	r3, #5513	; 0x1589
    b5dc:	2100      	movs	r1, #0
    b5de:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    b5e0:	1b2c      	subs	r4, r5, r4
		ticker_status =
    b5e2:	4b44      	ldr	r3, [pc, #272]	; (b6f4 <event_common_prepare+0x19c>)
    b5e4:	9305      	str	r3, [sp, #20]
    b5e6:	9707      	str	r7, [sp, #28]
    b5e8:	464b      	mov	r3, r9
    b5ea:	9106      	str	r1, [sp, #24]
    b5ec:	9104      	str	r1, [sp, #16]
    b5ee:	9103      	str	r1, [sp, #12]
    b5f0:	9102      	str	r1, [sp, #8]
    b5f2:	9101      	str	r1, [sp, #4]
    b5f4:	9400      	str	r4, [sp, #0]
    b5f6:	2201      	movs	r2, #1
    b5f8:	4608      	mov	r0, r1
    b5fa:	f7fc f9a3 	bl	7944 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5fe:	f030 0302 	bics.w	r3, r0, #2
    b602:	d1d3      	bne.n	b5ac <event_common_prepare+0x54>
    b604:	462c      	mov	r4, r5
    b606:	e00b      	b.n	b620 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    b608:	2300      	movs	r3, #0
    b60a:	461a      	mov	r2, r3
    b60c:	4619      	mov	r1, r3
    b60e:	4618      	mov	r0, r3
    b610:	f7ff f9e0 	bl	a9d4 <event_active>
		event_xtal(0, 0, 0, NULL);
    b614:	2300      	movs	r3, #0
    b616:	461a      	mov	r2, r3
    b618:	4619      	mov	r1, r3
    b61a:	4618      	mov	r0, r3
    b61c:	f7ff fa00 	bl	aa20 <event_xtal>
	_radio.remainder_anchor = remainder;
    b620:	4e35      	ldr	r6, [pc, #212]	; (b6f8 <event_common_prepare+0x1a0>)
    b622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b624:	60f3      	str	r3, [r6, #12]
	ticker_status =
    b626:	f241 53a1 	movw	r3, #5537	; 0x15a1
    b62a:	9308      	str	r3, [sp, #32]
    b62c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b62e:	9306      	str	r3, [sp, #24]
    b630:	2200      	movs	r2, #0
    b632:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b634:	9305      	str	r3, [sp, #20]
    b636:	9707      	str	r7, [sp, #28]
    b638:	464b      	mov	r3, r9
    b63a:	9204      	str	r2, [sp, #16]
    b63c:	9203      	str	r2, [sp, #12]
    b63e:	9202      	str	r2, [sp, #8]
    b640:	9201      	str	r2, [sp, #4]
    b642:	9400      	str	r4, [sp, #0]
    b644:	4611      	mov	r1, r2
    b646:	4610      	mov	r0, r2
    b648:	f7fc f97c 	bl	7944 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b64c:	f030 0302 	bics.w	r3, r0, #2
    b650:	d1ac      	bne.n	b5ac <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b652:	2005      	movs	r0, #5
    b654:	f7ff ff72 	bl	b53c <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    b658:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    b65c:	429d      	cmp	r5, r3
    b65e:	d023      	beq.n	b6a8 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    b660:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b664:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    b668:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b66a:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    b66c:	bfbc      	itt	lt
    b66e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b672:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    b676:	f8d8 2000 	ldr.w	r2, [r8]
    b67a:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    b67e:	428a      	cmp	r2, r1
    b680:	bf38      	it	cc
    b682:	460a      	movcc	r2, r1
		ticker_status =
    b684:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b688:	b2a3      	uxth	r3, r4
    b68a:	b292      	uxth	r2, r2
		ticker_status =
    b68c:	9106      	str	r1, [sp, #24]
    b68e:	2100      	movs	r1, #0
    b690:	9302      	str	r3, [sp, #8]
    b692:	9201      	str	r2, [sp, #4]
    b694:	9200      	str	r2, [sp, #0]
    b696:	9104      	str	r1, [sp, #16]
    b698:	9103      	str	r1, [sp, #12]
    b69a:	4652      	mov	r2, sl
    b69c:	4608      	mov	r0, r1
    b69e:	f7fc f9a1 	bl	79e4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b6a2:	f030 0302 	bics.w	r3, r0, #2
    b6a6:	d181      	bne.n	b5ac <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    b6a8:	20ff      	movs	r0, #255	; 0xff
    b6aa:	f7ff fa85 	bl	abb8 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b6ae:	4b13      	ldr	r3, [pc, #76]	; (b6fc <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b6b0:	2201      	movs	r2, #1
    b6b2:	4611      	mov	r1, r2
    b6b4:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b6b6:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b6ba:	f7fb fb85 	bl	6dc8 <mayfly_enqueue>
		LL_ASSERT(!retval);
    b6be:	b138      	cbz	r0, b6d0 <event_common_prepare+0x178>
    b6c0:	4b07      	ldr	r3, [pc, #28]	; (b6e0 <event_common_prepare+0x188>)
    b6c2:	9301      	str	r3, [sp, #4]
    b6c4:	9300      	str	r3, [sp, #0]
    b6c6:	4a07      	ldr	r2, [pc, #28]	; (b6e4 <event_common_prepare+0x18c>)
    b6c8:	4b07      	ldr	r3, [pc, #28]	; (b6e8 <event_common_prepare+0x190>)
    b6ca:	4908      	ldr	r1, [pc, #32]	; (b6ec <event_common_prepare+0x194>)
    b6cc:	480c      	ldr	r0, [pc, #48]	; (b700 <event_common_prepare+0x1a8>)
    b6ce:	e774      	b.n	b5ba <event_common_prepare+0x62>
}
    b6d0:	b00d      	add	sp, #52	; 0x34
    b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6d6:	bf00      	nop
    b6d8:	0000a745 	.word	0x0000a745
    b6dc:	0000a9d5 	.word	0x0000a9d5
    b6e0:	000145f1 	.word	0x000145f1
    b6e4:	00015373 	.word	0x00015373
    b6e8:	00016a41 	.word	0x00016a41
    b6ec:	000153c2 	.word	0x000153c2
    b6f0:	00016c69 	.word	0x00016c69
    b6f4:	0000aa21 	.word	0x0000aa21
    b6f8:	200008c0 	.word	0x200008c0
    b6fc:	20003e08 	.word	0x20003e08
    b700:	000173a3 	.word	0x000173a3

0000b704 <event_scan_prepare>:
{
    b704:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b706:	4c25      	ldr	r4, [pc, #148]	; (b79c <event_scan_prepare+0x98>)
    b708:	7c23      	ldrb	r3, [r4, #16]
{
    b70a:	b085      	sub	sp, #20
    b70c:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    b70e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    b712:	b173      	cbz	r3, b732 <event_scan_prepare+0x2e>
    b714:	4b22      	ldr	r3, [pc, #136]	; (b7a0 <event_scan_prepare+0x9c>)
    b716:	9301      	str	r3, [sp, #4]
    b718:	9300      	str	r3, [sp, #0]
    b71a:	4a22      	ldr	r2, [pc, #136]	; (b7a4 <event_scan_prepare+0xa0>)
    b71c:	4b22      	ldr	r3, [pc, #136]	; (b7a8 <event_scan_prepare+0xa4>)
    b71e:	4923      	ldr	r1, [pc, #140]	; (b7ac <event_scan_prepare+0xa8>)
    b720:	4823      	ldr	r0, [pc, #140]	; (b7b0 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    b722:	f7f5 fc33 	bl	f8c <printk>
    b726:	4040      	eors	r0, r0
    b728:	f380 8811 	msr	BASEPRI, r0
    b72c:	f04f 0004 	mov.w	r0, #4
    b730:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    b732:	2306      	movs	r3, #6
    b734:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    b736:	9203      	str	r2, [sp, #12]
    b738:	9301      	str	r3, [sp, #4]
    b73a:	4a1e      	ldr	r2, [pc, #120]	; (b7b4 <event_scan_prepare+0xb0>)
    b73c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    b740:	9202      	str	r2, [sp, #8]
    b742:	9300      	str	r3, [sp, #0]
    b744:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    b748:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    b74c:	f7ff ff04 	bl	b558 <event_common_prepare>
	if (_radio.scanner.conn) {
    b750:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    b754:	b303      	cbz	r3, b798 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    b756:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    b75a:	2b00      	cmp	r3, #0
    b75c:	da0c      	bge.n	b778 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    b75e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    b762:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    b766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    b76a:	4291      	cmp	r1, r2
    b76c:	bf2c      	ite	cs
    b76e:	ebc3 0301 	rsbcs	r3, r3, r1
    b772:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    b776:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    b778:	4b0f      	ldr	r3, [pc, #60]	; (b7b8 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b77a:	2201      	movs	r2, #1
    b77c:	4611      	mov	r1, r2
    b77e:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    b780:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b782:	f7fb fb21 	bl	6dc8 <mayfly_enqueue>
		LL_ASSERT(!retval);
    b786:	b138      	cbz	r0, b798 <event_scan_prepare+0x94>
    b788:	4b05      	ldr	r3, [pc, #20]	; (b7a0 <event_scan_prepare+0x9c>)
    b78a:	9301      	str	r3, [sp, #4]
    b78c:	9300      	str	r3, [sp, #0]
    b78e:	4a05      	ldr	r2, [pc, #20]	; (b7a4 <event_scan_prepare+0xa0>)
    b790:	4b05      	ldr	r3, [pc, #20]	; (b7a8 <event_scan_prepare+0xa4>)
    b792:	4906      	ldr	r1, [pc, #24]	; (b7ac <event_scan_prepare+0xa8>)
    b794:	4809      	ldr	r0, [pc, #36]	; (b7bc <event_scan_prepare+0xb8>)
    b796:	e7c4      	b.n	b722 <event_scan_prepare+0x1e>
}
    b798:	b005      	add	sp, #20
    b79a:	bd30      	pop	{r4, r5, pc}
    b79c:	200008c0 	.word	0x200008c0
    b7a0:	000145f1 	.word	0x000145f1
    b7a4:	00015373 	.word	0x00015373
    b7a8:	00016a6f 	.word	0x00016a6f
    b7ac:	000153c2 	.word	0x000153c2
    b7b0:	000174df 	.word	0x000174df
    b7b4:	0000b381 	.word	0x0000b381
    b7b8:	20003d88 	.word	0x20003d88
    b7bc:	000173a3 	.word	0x000173a3

0000b7c0 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    b7c0:	4b02      	ldr	r3, [pc, #8]	; (b7cc <mayfly_xtal_start+0xc>)
    b7c2:	6818      	ldr	r0, [r3, #0]
    b7c4:	6843      	ldr	r3, [r0, #4]
    b7c6:	2100      	movs	r1, #0
    b7c8:	681b      	ldr	r3, [r3, #0]
    b7ca:	4718      	bx	r3
    b7cc:	200008c0 	.word	0x200008c0

0000b7d0 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    b7d0:	4b02      	ldr	r3, [pc, #8]	; (b7dc <mayfly_xtal_stop+0xc>)
    b7d2:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    b7d4:	6843      	ldr	r3, [r0, #4]
    b7d6:	2100      	movs	r1, #0
    b7d8:	685b      	ldr	r3, [r3, #4]
    b7da:	4718      	bx	r3
    b7dc:	200008c0 	.word	0x200008c0

0000b7e0 <chan_sel_2>:
{
    b7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    b7e2:	4048      	eors	r0, r1
    b7e4:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b7e6:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    b7ea:	2608      	movs	r6, #8
	o = 0;
    b7ec:	2400      	movs	r4, #0
		o |= (i & 1);
    b7ee:	f00e 0501 	and.w	r5, lr, #1
    b7f2:	3e01      	subs	r6, #1
    b7f4:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    b7f8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    b7fc:	b2ec      	uxtb	r4, r5
		i >>= 1;
    b7fe:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b802:	d1f4      	bne.n	b7ee <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b804:	0225      	lsls	r5, r4, #8
    b806:	b22d      	sxth	r5, r5
    b808:	b2c0      	uxtb	r0, r0
    b80a:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    b80e:	4634      	mov	r4, r6
		o |= (i & 1);
    b810:	f000 0601 	and.w	r6, r0, #1
    b814:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    b818:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    b81c:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    b820:	b2e4      	uxtb	r4, r4
		i >>= 1;
    b822:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b826:	d1f3      	bne.n	b810 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b828:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b82a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    b82e:	3f01      	subs	r7, #1
    b830:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    b832:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b836:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    b838:	d1d5      	bne.n	b7e6 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    b83a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    b83c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    b83e:	fbb1 f0f4 	udiv	r0, r1, r4
    b842:	fb04 1010 	mls	r0, r4, r0, r1
    b846:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b848:	08c4      	lsrs	r4, r0, #3
    b84a:	f000 0507 	and.w	r5, r0, #7
    b84e:	5d14      	ldrb	r4, [r2, r4]
    b850:	412c      	asrs	r4, r5
    b852:	07e4      	lsls	r4, r4, #31
    b854:	d407      	bmi.n	b866 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    b856:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    b858:	f3c1 4107 	ubfx	r1, r1, #16, #8
    b85c:	4610      	mov	r0, r2
}
    b85e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    b862:	f7fd bfc9 	b.w	97f8 <chan_sel_remap>
}
    b866:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b868 <ctrl_tx_enqueue>:
{
    b868:	b510      	push	{r4, lr}
	    !conn->empty &&
    b86a:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b86e:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    b872:	f014 0f80 	tst.w	r4, #128	; 0x80
    b876:	d118      	bne.n	b8aa <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b878:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    b87c:	b1ab      	cbz	r3, b8aa <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b87e:	0724      	lsls	r4, r4, #28
    b880:	d413      	bmi.n	b8aa <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    b882:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    b886:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    b888:	bf04      	itt	eq
    b88a:	681c      	ldreq	r4, [r3, #0]
    b88c:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    b890:	b992      	cbnz	r2, b8b8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    b892:	681a      	ldr	r2, [r3, #0]
    b894:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    b896:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    b898:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    b89c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    b8a0:	680b      	ldr	r3, [r1, #0]
    b8a2:	b90b      	cbnz	r3, b8a8 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    b8a4:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    b8a8:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    b8aa:	b92a      	cbnz	r2, b8b8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    b8ac:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    b8b0:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    b8b2:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    b8b6:	e7ef      	b.n	b898 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    b8b8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b8bc:	681a      	ldr	r2, [r3, #0]
    b8be:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    b8c0:	6019      	str	r1, [r3, #0]
    b8c2:	e7eb      	b.n	b89c <ctrl_tx_enqueue+0x34>

0000b8c4 <ctrl_tx_sec_enqueue>:
{
    b8c4:	b410      	push	{r4}
	if (conn->pause_tx) {
    b8c6:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b8ca:	0724      	lsls	r4, r4, #28
{
    b8cc:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    b8ce:	d50f      	bpl.n	b8f0 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    b8d0:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    b8d4:	b931      	cbnz	r1, b8e4 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    b8d6:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    b8da:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    b8dc:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    b8e0:	bc10      	pop	{r4}
    b8e2:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    b8e4:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b8e8:	6819      	ldr	r1, [r3, #0]
    b8ea:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    b8ec:	601a      	str	r2, [r3, #0]
    b8ee:	e7f7      	b.n	b8e0 <ctrl_tx_sec_enqueue+0x1c>
}
    b8f0:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    b8f2:	f7ff bfb9 	b.w	b868 <ctrl_tx_enqueue>
	...

0000b8f8 <feature_rsp_send>:
{
    b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8fa:	4f21      	ldr	r7, [pc, #132]	; (b980 <feature_rsp_send+0x88>)
{
    b8fc:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8fe:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    b902:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b904:	f7fb f995 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    b908:	4604      	mov	r4, r0
    b90a:	b3b0      	cbz	r0, b97a <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b90c:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    b90e:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b910:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b918:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    b91c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    b920:	f043 0310 	orr.w	r3, r3, #16
    b924:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    b928:	79b1      	ldrb	r1, [r6, #6]
    b92a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b92e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    b932:	f3c1 0110 	ubfx	r1, r1, #0, #17
    b936:	400b      	ands	r3, r1
    b938:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    b93c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    b940:	f043 0320 	orr.w	r3, r3, #32
    b944:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b948:	7903      	ldrb	r3, [r0, #4]
    b94a:	f043 0303 	orr.w	r3, r3, #3
    b94e:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b950:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    b952:	2309      	movs	r3, #9
    b954:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    b956:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b958:	2100      	movs	r1, #0
    b95a:	4410      	add	r0, r2
    b95c:	f7f6 f97a 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    b960:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    b964:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    b966:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    b968:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    b96a:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    b96c:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    b96e:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    b970:	4621      	mov	r1, r4
    b972:	f7ff ffa7 	bl	b8c4 <ctrl_tx_sec_enqueue>
	return 0;
    b976:	2000      	movs	r0, #0
    b978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    b97a:	2001      	movs	r0, #1
}
    b97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b97e:	bf00      	nop
    b980:	200008c0 	.word	0x200008c0

0000b984 <start_enc_rsp_send>:
{
    b984:	b510      	push	{r4, lr}
    b986:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    b988:	b9c9      	cbnz	r1, b9be <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b98a:	480f      	ldr	r0, [pc, #60]	; (b9c8 <start_enc_rsp_send+0x44>)
    b98c:	f7fb f951 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    b990:	b1b8      	cbz	r0, b9c2 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    b992:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    b994:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b998:	f043 0320 	orr.w	r3, r3, #32
    b99c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b9a0:	780b      	ldrb	r3, [r1, #0]
    b9a2:	f043 0303 	orr.w	r3, r3, #3
    b9a6:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b9a8:	2301      	movs	r3, #1
    b9aa:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    b9ac:	2306      	movs	r3, #6
    b9ae:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    b9b0:	b140      	cbz	r0, b9c4 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    b9b2:	4601      	mov	r1, r0
    b9b4:	4620      	mov	r0, r4
    b9b6:	f7ff ff57 	bl	b868 <ctrl_tx_enqueue>
	return 0;
    b9ba:	2000      	movs	r0, #0
    b9bc:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    b9be:	2000      	movs	r0, #0
    b9c0:	e7e8      	b.n	b994 <start_enc_rsp_send+0x10>
			return 1;
    b9c2:	2001      	movs	r0, #1
}
    b9c4:	bd10      	pop	{r4, pc}
    b9c6:	bf00      	nop
    b9c8:	20000a1c 	.word	0x20000a1c

0000b9cc <reject_ext_ind_send>:
{
    b9cc:	b570      	push	{r4, r5, r6, lr}
    b9ce:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b9d0:	480b      	ldr	r0, [pc, #44]	; (ba00 <reject_ext_ind_send+0x34>)
{
    b9d2:	460e      	mov	r6, r1
    b9d4:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b9d6:	f7fb f92c 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    b9da:	b178      	cbz	r0, b9fc <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b9dc:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    b9de:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b9e0:	f043 0303 	orr.w	r3, r3, #3
    b9e4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    b9e6:	2303      	movs	r3, #3
    b9e8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    b9ea:	2311      	movs	r3, #17
    b9ec:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    b9ee:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    b9f0:	4601      	mov	r1, r0
    b9f2:	4620      	mov	r0, r4
    b9f4:	f7ff ff38 	bl	b868 <ctrl_tx_enqueue>
	return 0;
    b9f8:	2000      	movs	r0, #0
    b9fa:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    b9fc:	2001      	movs	r0, #1
}
    b9fe:	bd70      	pop	{r4, r5, r6, pc}
    ba00:	20000a1c 	.word	0x20000a1c
    ba04:	00000000 	.word	0x00000000

0000ba08 <event_connection_prepare>:
{
    ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba0c:	4db8      	ldr	r5, [pc, #736]	; (bcf0 <event_connection_prepare+0x2e8>)
{
    ba0e:	b08f      	sub	sp, #60	; 0x3c
    ba10:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba12:	7c2b      	ldrb	r3, [r5, #16]
{
    ba14:	910c      	str	r1, [sp, #48]	; 0x30
    ba16:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba18:	b173      	cbz	r3, ba38 <event_connection_prepare+0x30>
    ba1a:	4bb6      	ldr	r3, [pc, #728]	; (bcf4 <event_connection_prepare+0x2ec>)
    ba1c:	9301      	str	r3, [sp, #4]
    ba1e:	9300      	str	r3, [sp, #0]
    ba20:	4ab5      	ldr	r2, [pc, #724]	; (bcf8 <event_connection_prepare+0x2f0>)
    ba22:	4bb6      	ldr	r3, [pc, #728]	; (bcfc <event_connection_prepare+0x2f4>)
    ba24:	49b6      	ldr	r1, [pc, #728]	; (bd00 <event_connection_prepare+0x2f8>)
    ba26:	48b7      	ldr	r0, [pc, #732]	; (bd04 <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    ba28:	f7f5 fab0 	bl	f8c <printk>
    ba2c:	4040      	eors	r0, r0
    ba2e:	f380 8811 	msr	BASEPRI, r0
    ba32:	f04f 0004 	mov.w	r0, #4
    ba36:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    ba38:	f894 3020 	ldrb.w	r3, [r4, #32]
    ba3c:	3307      	adds	r3, #7
    ba3e:	b2db      	uxtb	r3, r3
    ba40:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    ba42:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ba46:	2b00      	cmp	r3, #0
    ba48:	da09      	bge.n	ba5e <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    ba4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    ba4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    ba4e:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    ba52:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    ba54:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    ba56:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    ba58:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    ba5a:	bf88      	it	hi
    ba5c:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    ba5e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    ba60:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    ba64:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    ba66:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    ba68:	b292      	uxth	r2, r2
    ba6a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    ba6c:	4432      	add	r2, r6
    ba6e:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    ba70:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    ba74:	429a      	cmp	r2, r3
    ba76:	f040 81ba 	bne.w	bdee <event_connection_prepare+0x3e6>
    ba7a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ba7e:	075f      	lsls	r7, r3, #29
    ba80:	f100 84ab 	bmi.w	c3da <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    ba84:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    ba88:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ba8c:	429a      	cmp	r2, r3
    ba8e:	f000 8096 	beq.w	bbbe <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    ba92:	2005      	movs	r0, #5
    ba94:	f7ff fd52 	bl	b53c <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    ba98:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    ba9c:	b113      	cbz	r3, baa4 <event_connection_prepare+0x9c>
    ba9e:	429c      	cmp	r4, r3
    baa0:	f040 808d 	bne.w	bbbe <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    baa4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    baa8:	f003 0307 	and.w	r3, r3, #7
    baac:	2b05      	cmp	r3, #5
    baae:	f200 815d 	bhi.w	bd6c <event_connection_prepare+0x364>
    bab2:	e8df f013 	tbh	[pc, r3, lsl #1]
    bab6:	0006      	.short	0x0006
    bab8:	01310065 	.word	0x01310065
    babc:	00840084 	.word	0x00840084
    bac0:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bac2:	4891      	ldr	r0, [pc, #580]	; (bd08 <event_connection_prepare+0x300>)
    bac4:	f7fb f8b5 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    bac8:	4607      	mov	r7, r0
    baca:	2800      	cmp	r0, #0
    bacc:	d077      	beq.n	bbbe <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    bace:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bad2:	2204      	movs	r2, #4
    bad4:	f362 0302 	bfi	r3, r2, #0, #3
    bad8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    badc:	7903      	ldrb	r3, [r0, #4]
    bade:	f043 0303 	orr.w	r3, r3, #3
    bae2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bae4:	2318      	movs	r3, #24
    bae6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bae8:	230f      	movs	r3, #15
    baea:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    baec:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    baf0:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    baf2:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    baf4:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    baf8:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    bafa:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bafe:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    bb00:	2300      	movs	r3, #0
    bb02:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    bb04:	74c3      	strb	r3, [r0, #19]
    bb06:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    bb08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bb0c:	7543      	strb	r3, [r0, #21]
    bb0e:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    bb10:	75c3      	strb	r3, [r0, #23]
    bb12:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    bb14:	7643      	strb	r3, [r0, #25]
    bb16:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    bb18:	76c3      	strb	r3, [r0, #27]
    bb1a:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    bb1c:	7743      	strb	r3, [r0, #29]
    bb1e:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    bb20:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    bb24:	4601      	mov	r1, r0
    bb26:	4620      	mov	r0, r4
    bb28:	f7ff fe9e 	bl	b868 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bb2c:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    bb2e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    bb32:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bb36:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    bb38:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    bb3c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bb40:	da0b      	bge.n	bb5a <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    bb42:	68a3      	ldr	r3, [r4, #8]
    bb44:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bb46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    bb4a:	428b      	cmp	r3, r1
    bb4c:	bf2c      	ite	cs
    bb4e:	4443      	addcs	r3, r8
    bb50:	eb08 0301 	addcc.w	r3, r8, r1
    bb54:	1a9b      	subs	r3, r3, r2
    bb56:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bb5a:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    bb5c:	4b6b      	ldr	r3, [pc, #428]	; (bd0c <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bb5e:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bb62:	2201      	movs	r2, #1
    bb64:	4611      	mov	r1, r2
    bb66:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    bb68:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bb6a:	f7fb f92d 	bl	6dc8 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bb6e:	b330      	cbz	r0, bbbe <event_connection_prepare+0x1b6>
    bb70:	4b60      	ldr	r3, [pc, #384]	; (bcf4 <event_connection_prepare+0x2ec>)
    bb72:	9301      	str	r3, [sp, #4]
    bb74:	9300      	str	r3, [sp, #0]
    bb76:	4b66      	ldr	r3, [pc, #408]	; (bd10 <event_connection_prepare+0x308>)
    bb78:	4a5f      	ldr	r2, [pc, #380]	; (bcf8 <event_connection_prepare+0x2f0>)
    bb7a:	4961      	ldr	r1, [pc, #388]	; (bd00 <event_connection_prepare+0x2f8>)
    bb7c:	4865      	ldr	r0, [pc, #404]	; (bd14 <event_connection_prepare+0x30c>)
    bb7e:	e753      	b.n	ba28 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    bb80:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    bb84:	b397      	cbz	r7, bbec <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb86:	4860      	ldr	r0, [pc, #384]	; (bd08 <event_connection_prepare+0x300>)
    bb88:	f7fb f853 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    bb8c:	4601      	mov	r1, r0
    bb8e:	b1b0      	cbz	r0, bbbe <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    bb90:	7903      	ldrb	r3, [r0, #4]
    bb92:	f043 0303 	orr.w	r3, r3, #3
    bb96:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bb98:	2311      	movs	r3, #17
    bb9a:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bb9c:	2303      	movs	r3, #3
    bb9e:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bba0:	230f      	movs	r3, #15
    bba2:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    bba4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bba8:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    bbaa:	4620      	mov	r0, r4
    bbac:	f7ff fe5c 	bl	b868 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bbb0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bbb4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    bbb8:	2300      	movs	r3, #0
    bbba:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    bbbe:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    bbc2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    bbc6:	429a      	cmp	r2, r3
    bbc8:	f000 810a 	beq.w	bde0 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bbcc:	2005      	movs	r0, #5
    bbce:	f7ff fcb5 	bl	b53c <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    bbd2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bbd6:	f003 0203 	and.w	r2, r3, #3
    bbda:	2a03      	cmp	r2, #3
    bbdc:	f200 8179 	bhi.w	bed2 <event_connection_prepare+0x4ca>
    bbe0:	e8df f012 	tbh	[pc, r2, lsl #1]
    bbe4:	00fe00cc 	.word	0x00fe00cc
    bbe8:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    bbec:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	db3b      	blt.n	bc6c <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    bbf4:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    bbf8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bbfc:	428b      	cmp	r3, r1
    bbfe:	d1de      	bne.n	bbbe <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bc00:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    bc04:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bc08:	2205      	movs	r2, #5
    bc0a:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    bc0e:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bc12:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    bc16:	2301      	movs	r3, #1
    bc18:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    bc1c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    bc20:	b122      	cbz	r2, bc2c <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    bc22:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    bc26:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    bc28:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    bc2c:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    bc30:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bc34:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    bc38:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bc3c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    bc40:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bc44:	2202      	movs	r2, #2
    bc46:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    bc4a:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    bc4e:	f082 0208 	eor.w	r2, r2, #8
    bc52:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bc56:	f362 0382 	bfi	r3, r2, #2, #1
    bc5a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    bc5e:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    bc60:	2301      	movs	r3, #1
    bc62:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bc66:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    bc6a:	e7a8      	b.n	bbbe <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc6c:	4826      	ldr	r0, [pc, #152]	; (bd08 <event_connection_prepare+0x300>)
    bc6e:	f7fa ffe0 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    bc72:	4601      	mov	r1, r0
    bc74:	2800      	cmp	r0, #0
    bc76:	d0a2      	beq.n	bbbe <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bc78:	7903      	ldrb	r3, [r0, #4]
    bc7a:	f043 0303 	orr.w	r3, r3, #3
    bc7e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    bc80:	2318      	movs	r3, #24
    bc82:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    bc84:	2310      	movs	r3, #16
    bc86:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    bc88:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bc8c:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    bc8e:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    bc90:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bc94:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    bc96:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bc9a:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    bc9c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    bca0:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    bca2:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    bca6:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    bcaa:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    bcae:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    bcb2:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    bcb6:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    bcba:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    bcbe:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    bcc2:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    bcc6:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    bcca:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    bcce:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    bcd2:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    bcd6:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    bcda:	4620      	mov	r0, r4
    bcdc:	f7ff fdc4 	bl	b868 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bce0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bce4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    bce8:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    bcec:	e767      	b.n	bbbe <event_connection_prepare+0x1b6>
    bcee:	bf00      	nop
    bcf0:	200008c0 	.word	0x200008c0
    bcf4:	000145f1 	.word	0x000145f1
    bcf8:	00015373 	.word	0x00015373
    bcfc:	00016b28 	.word	0x00016b28
    bd00:	000153c2 	.word	0x000153c2
    bd04:	000174df 	.word	0x000174df
    bd08:	20000a1c 	.word	0x20000a1c
    bd0c:	20003da8 	.word	0x20003da8
    bd10:	00016ac4 	.word	0x00016ac4
    bd14:	000173a3 	.word	0x000173a3
	if (conn->pause_tx) {
    bd18:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bd1c:	0718      	lsls	r0, r3, #28
    bd1e:	f53f af4e 	bmi.w	bbbe <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    bd22:	2002      	movs	r0, #2
    bd24:	f7fd fd9a 	bl	985c <packet_rx_reserve_get>
	if (!node_rx) {
    bd28:	2800      	cmp	r0, #0
    bd2a:	f43f af48 	beq.w	bbbe <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    bd2e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bd32:	2203      	movs	r2, #3
    bd34:	f362 0302 	bfi	r3, r2, #0, #3
    bd38:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    bd3c:	8c23      	ldrh	r3, [r4, #32]
    bd3e:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bd40:	2301      	movs	r3, #1
    bd42:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bd44:	7a03      	ldrb	r3, [r0, #8]
    bd46:	4313      	orrs	r3, r2
    bd48:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bd4a:	2318      	movs	r3, #24
    bd4c:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bd4e:	230f      	movs	r3, #15
    bd50:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    bd52:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bd56:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    bd58:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    bd5a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bd5e:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    bd60:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bd64:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    bd66:	f7fe fbe3 	bl	a530 <packet_rx_enqueue>
    bd6a:	e728      	b.n	bbbe <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    bd6c:	4bb9      	ldr	r3, [pc, #740]	; (c054 <event_connection_prepare+0x64c>)
    bd6e:	9301      	str	r3, [sp, #4]
    bd70:	9300      	str	r3, [sp, #0]
    bd72:	4bb9      	ldr	r3, [pc, #740]	; (c058 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    bd74:	4ab9      	ldr	r2, [pc, #740]	; (c05c <event_connection_prepare+0x654>)
    bd76:	49ba      	ldr	r1, [pc, #744]	; (c060 <event_connection_prepare+0x658>)
    bd78:	48ba      	ldr	r0, [pc, #744]	; (c064 <event_connection_prepare+0x65c>)
    bd7a:	e655      	b.n	ba28 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd7c:	48ba      	ldr	r0, [pc, #744]	; (c068 <event_connection_prepare+0x660>)
    bd7e:	f7fa ff58 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    bd82:	4601      	mov	r1, r0
    bd84:	b360      	cbz	r0, bde0 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    bd86:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bd8a:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    bd8e:	2201      	movs	r2, #1
    bd90:	f362 0301 	bfi	r3, r2, #0, #2
    bd94:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bd98:	b2db      	uxtb	r3, r3
    bd9a:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bd9e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bda2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bda6:	f363 07c5 	bfi	r7, r3, #3, #3
    bdaa:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    bdae:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bdb2:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    bdb6:	f367 1286 	bfi	r2, r7, #6, #1
    bdba:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdbe:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    bdc0:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdc2:	f042 0203 	orr.w	r2, r2, #3
    bdc6:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    bdc8:	2203      	movs	r2, #3
    bdca:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    bdcc:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    bdce:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    bdd0:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    bdd2:	4620      	mov	r0, r4
    bdd4:	f7ff fd48 	bl	b868 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    bdd8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    bddc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    bde0:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    bde4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    bde8:	429a      	cmp	r2, r3
    bdea:	f000 82f6 	beq.w	c3da <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    bdee:	2005      	movs	r0, #5
    bdf0:	f7ff fba4 	bl	b53c <event_stop.constprop.31>
		switch (conn->llcp_type) {
    bdf4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    bdf8:	3b01      	subs	r3, #1
    bdfa:	2b07      	cmp	r3, #7
    bdfc:	f200 85a7 	bhi.w	c94e <event_connection_prepare+0xf46>
    be00:	e8df f013 	tbh	[pc, r3, lsl #1]
    be04:	02c4006c 	.word	0x02c4006c
    be08:	045e0343 	.word	0x045e0343
    be0c:	05a5048e 	.word	0x05a5048e
    be10:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    be14:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    be18:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    be1c:	f3c3 0282 	ubfx	r2, r3, #2, #3
    be20:	0791      	lsls	r1, r2, #30
    be22:	d544      	bpl.n	beae <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    be24:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    be26:	f362 0384 	bfi	r3, r2, #2, #3
    be2a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    be2e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    be32:	095a      	lsrs	r2, r3, #5
    be34:	0790      	lsls	r0, r2, #30
    be36:	d543      	bpl.n	bec0 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    be38:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    be3a:	f362 1347 	bfi	r3, r2, #5, #3
    be3e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    be42:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    be46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    be4a:	f3c2 0182 	ubfx	r1, r2, #2, #3
    be4e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    be52:	428b      	cmp	r3, r1
    be54:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    be58:	bf14      	ite	ne
    be5a:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    be5e:	f36f 0384 	bfceq	r3, #2, #3
    be62:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    be66:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    be6a:	0952      	lsrs	r2, r2, #5
    be6c:	f003 0307 	and.w	r3, r3, #7
    be70:	4293      	cmp	r3, r2
    be72:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    be76:	bf14      	ite	ne
    be78:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    be7c:	f36f 1347 	bfceq	r3, #5, #3
    be80:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    be84:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    be88:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    be8c:	f043 0301 	orr.w	r3, r3, #1
    be90:	f3c2 0240 	ubfx	r2, r2, #1, #1
    be94:	f362 0341 	bfi	r3, r2, #1, #1
    be98:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    be9c:	2308      	movs	r3, #8
    be9e:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bea2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bea6:	3b01      	subs	r3, #1
    bea8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    beac:	e798      	b.n	bde0 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    beae:	07d7      	lsls	r7, r2, #31
    beb0:	d501      	bpl.n	beb6 <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    beb2:	2201      	movs	r2, #1
    beb4:	e7b7      	b.n	be26 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    beb6:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    beba:	bf18      	it	ne
    bebc:	2204      	movne	r2, #4
    bebe:	e7b2      	b.n	be26 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    bec0:	07d1      	lsls	r1, r2, #31
    bec2:	d501      	bpl.n	bec8 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    bec4:	2201      	movs	r2, #1
    bec6:	e7b8      	b.n	be3a <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    bec8:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    becc:	bf18      	it	ne
    bece:	2204      	movne	r2, #4
    bed0:	e7b3      	b.n	be3a <event_connection_prepare+0x432>
		LL_ASSERT(0);
    bed2:	4b60      	ldr	r3, [pc, #384]	; (c054 <event_connection_prepare+0x64c>)
    bed4:	9301      	str	r3, [sp, #4]
    bed6:	9300      	str	r3, [sp, #0]
    bed8:	4b64      	ldr	r3, [pc, #400]	; (c06c <event_connection_prepare+0x664>)
    beda:	e74b      	b.n	bd74 <event_connection_prepare+0x36c>
	if (!conn_upd) {
    bedc:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    bee0:	b90b      	cbnz	r3, bee6 <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    bee2:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    bee6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    beea:	f013 0303 	ands.w	r3, r3, #3
    beee:	d068      	beq.n	bfc2 <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bef0:	485d      	ldr	r0, [pc, #372]	; (c068 <event_connection_prepare+0x660>)
    bef2:	f7fa fe9e 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    bef6:	4607      	mov	r7, r0
    bef8:	2800      	cmp	r0, #0
    befa:	f000 826e 	beq.w	c3da <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    befe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bf02:	f003 0303 	and.w	r3, r3, #3
    bf06:	2b01      	cmp	r3, #1
    bf08:	d059      	beq.n	bfbe <event_connection_prepare+0x5b6>
    bf0a:	2b02      	cmp	r3, #2
    bf0c:	d152      	bne.n	bfb4 <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    bf0e:	4a58      	ldr	r2, [pc, #352]	; (c070 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    bf10:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bf14:	f36f 0301 	bfc	r3, #0, #2
    bf18:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    bf1c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    bf1e:	3306      	adds	r3, #6
    bf20:	4433      	add	r3, r6
    bf22:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    bf24:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf28:	7939      	ldrb	r1, [r7, #4]
    bf2a:	f041 0103 	orr.w	r1, r1, #3
    bf2e:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    bf30:	210c      	movs	r1, #12
    bf32:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    bf34:	2100      	movs	r1, #0
    bf36:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    bf38:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    bf3c:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bf3e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    bf42:	f240 40e2 	movw	r0, #1250	; 0x4e2
    bf46:	fbb1 f1f0 	udiv	r1, r1, r0
    bf4a:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    bf4e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    bf52:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    bf56:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    bf5a:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    bf5e:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    bf62:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    bf66:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bf6a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    bf6c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bf70:	2900      	cmp	r1, #0
    bf72:	da0b      	bge.n	bf8c <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    bf74:	68a3      	ldr	r3, [r4, #8]
    bf76:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bf78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    bf7c:	4283      	cmp	r3, r0
    bf7e:	bf2c      	ite	cs
    bf80:	4443      	addcs	r3, r8
    bf82:	eb08 0300 	addcc.w	r3, r8, r0
    bf86:	1a5b      	subs	r3, r3, r1
    bf88:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    bf8c:	f107 0309 	add.w	r3, r7, #9
    bf90:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    bf94:	4b37      	ldr	r3, [pc, #220]	; (c074 <event_connection_prepare+0x66c>)
    bf96:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bf98:	2201      	movs	r2, #1
    bf9a:	4611      	mov	r1, r2
    bf9c:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    bf9e:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bfa0:	f7fa ff12 	bl	6dc8 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bfa4:	2800      	cmp	r0, #0
    bfa6:	f000 8214 	beq.w	c3d2 <event_connection_prepare+0x9ca>
    bfaa:	4b2a      	ldr	r3, [pc, #168]	; (c054 <event_connection_prepare+0x64c>)
    bfac:	9301      	str	r3, [sp, #4]
    bfae:	9300      	str	r3, [sp, #0]
    bfb0:	4b31      	ldr	r3, [pc, #196]	; (c078 <event_connection_prepare+0x670>)
    bfb2:	e5e1      	b.n	bb78 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    bfb4:	4b27      	ldr	r3, [pc, #156]	; (c054 <event_connection_prepare+0x64c>)
    bfb6:	9301      	str	r3, [sp, #4]
    bfb8:	9300      	str	r3, [sp, #0]
    bfba:	4b30      	ldr	r3, [pc, #192]	; (c07c <event_connection_prepare+0x674>)
    bfbc:	e6da      	b.n	bd74 <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    bfbe:	4a30      	ldr	r2, [pc, #192]	; (c080 <event_connection_prepare+0x678>)
    bfc0:	e7a6      	b.n	bf10 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    bfc2:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    bfc6:	1bf7      	subs	r7, r6, r7
    bfc8:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    bfca:	043a      	lsls	r2, r7, #16
    bfcc:	f100 8205 	bmi.w	c3da <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    bfd0:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    bfd4:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    bfd8:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    bfdc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bfe0:	428a      	cmp	r2, r1
    bfe2:	d009      	beq.n	bff8 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    bfe4:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    bfe8:	f002 0207 	and.w	r2, r2, #7
    bfec:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bfee:	bf04      	itt	eq
    bff0:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    bff4:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    bff8:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    bffc:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    bffe:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c000:	bf08      	it	eq
    c002:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c006:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c008:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c00a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c00e:	429a      	cmp	r2, r3
    c010:	d114      	bne.n	c03c <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    c012:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c016:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c018:	4299      	cmp	r1, r3
    c01a:	d10f      	bne.n	c03c <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c01c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c020:	435a      	muls	r2, r3
    c022:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c026:	f242 7110 	movw	r1, #10000	; 0x2710
    c02a:	fb01 2303 	mla	r3, r1, r3, r2
    c02e:	3b01      	subs	r3, #1
    c030:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c034:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c036:	b29b      	uxth	r3, r3
    c038:	429a      	cmp	r2, r3
    c03a:	d036      	beq.n	c0aa <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    c03c:	2002      	movs	r0, #2
    c03e:	f7fd fc0d 	bl	985c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c042:	bb08      	cbnz	r0, c088 <event_connection_prepare+0x680>
    c044:	4b03      	ldr	r3, [pc, #12]	; (c054 <event_connection_prepare+0x64c>)
    c046:	9301      	str	r3, [sp, #4]
    c048:	9300      	str	r3, [sp, #0]
    c04a:	4b0c      	ldr	r3, [pc, #48]	; (c07c <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    c04c:	4a03      	ldr	r2, [pc, #12]	; (c05c <event_connection_prepare+0x654>)
    c04e:	4904      	ldr	r1, [pc, #16]	; (c060 <event_connection_prepare+0x658>)
    c050:	480c      	ldr	r0, [pc, #48]	; (c084 <event_connection_prepare+0x67c>)
    c052:	e4e9      	b.n	ba28 <event_connection_prepare+0x20>
    c054:	000145f1 	.word	0x000145f1
    c058:	00016ad9 	.word	0x00016ad9
    c05c:	00015373 	.word	0x00015373
    c060:	000153c2 	.word	0x000153c2
    c064:	00015312 	.word	0x00015312
    c068:	20000a1c 	.word	0x20000a1c
    c06c:	00016afe 	.word	0x00016afe
    c070:	0000a281 	.word	0x0000a281
    c074:	20003d98 	.word	0x20003d98
    c078:	00016a8d 	.word	0x00016a8d
    c07c:	00016aa1 	.word	0x00016aa1
    c080:	0000af69 	.word	0x0000af69
    c084:	000172cf 	.word	0x000172cf
			node_rx->hdr.handle = conn->handle;
    c088:	8c23      	ldrh	r3, [r4, #32]
    c08a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c08c:	2308      	movs	r3, #8
    c08e:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c090:	2300      	movs	r3, #0
    c092:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c094:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c098:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c09a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c09e:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c0a0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c0a4:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c0a6:	f7fe fa43 	bl	a530 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c0aa:	6823      	ldr	r3, [r4, #0]
    c0ac:	6866      	ldr	r6, [r4, #4]
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	da09      	bge.n	c0c6 <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    c0b2:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c0b8:	42b0      	cmp	r0, r6
    c0ba:	bf2c      	ite	cs
    c0bc:	4480      	addcs	r8, r0
    c0be:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c0c0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c0c2:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c0c6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c0c8:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c0cc:	49a0      	ldr	r1, [pc, #640]	; (c350 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c0ce:	fb13 f307 	smulbb	r3, r3, r7
    c0d2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c0d4:	fbb3 f2fa 	udiv	r2, r3, sl
    c0d8:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c0dc:	fb1a f009 	smulbb	r0, sl, r9
    c0e0:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c0e2:	4283      	cmp	r3, r0
    c0e4:	f080 80bf 	bcs.w	c266 <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c0e8:	1ac0      	subs	r0, r0, r3
    c0ea:	f240 1223 	movw	r2, #291	; 0x123
    c0ee:	4342      	muls	r2, r0
    c0f0:	17c3      	asrs	r3, r0, #31
    c0f2:	fb01 2303 	mla	r3, r1, r3, r2
    c0f6:	fba0 0101 	umull	r0, r1, r0, r1
    c0fa:	4419      	add	r1, r3
    c0fc:	a392      	add	r3, pc, #584	; (adr r3, c348 <event_connection_prepare+0x940>)
    c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    c102:	f7f4 f887 	bl	214 <__aeabi_uldivmod>
    c106:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c10a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c10e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c110:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c112:	f8df b274 	ldr.w	fp, [pc, #628]	; c388 <event_connection_prepare+0x980>
    c116:	1bdb      	subs	r3, r3, r7
    c118:	444b      	add	r3, r9
    c11a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c11c:	6823      	ldr	r3, [r4, #0]
    c11e:	42b3      	cmp	r3, r6
    c120:	bf38      	it	cc
    c122:	4633      	movcc	r3, r6
    c124:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c126:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c12a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c12e:	2b00      	cmp	r3, #0
    c130:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c134:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c136:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c13a:	f280 80a5 	bge.w	c288 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    c13e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c140:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c142:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c146:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c14a:	4a82      	ldr	r2, [pc, #520]	; (c354 <event_connection_prepare+0x94c>)
    c14c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c150:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c154:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c15c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c160:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c162:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c164:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c168:	4b7b      	ldr	r3, [pc, #492]	; (c358 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    c16a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c16e:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c172:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c176:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c178:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c17c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c17e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c180:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c182:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c184:	429f      	cmp	r7, r3
    c186:	bf94      	ite	ls
    c188:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c18a:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c18c:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c18e:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c190:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c192:	fba0 010b 	umull	r0, r1, r0, fp
    c196:	a36c      	add	r3, pc, #432	; (adr r3, c348 <event_connection_prepare+0x940>)
    c198:	e9d3 2300 	ldrd	r2, r3, [r3]
    c19c:	f7f4 f83a 	bl	214 <__aeabi_uldivmod>
    c1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c1a2:	1a1b      	subs	r3, r3, r0
    c1a4:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c1a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c1a8:	fbb3 f0f8 	udiv	r0, r3, r8
    c1ac:	fb08 f000 	mul.w	r0, r8, r0
    c1b0:	a365      	add	r3, pc, #404	; (adr r3, c348 <event_connection_prepare+0x940>)
    c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1b6:	fba0 010b 	umull	r0, r1, r0, fp
    c1ba:	f7f4 f82b 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c1be:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c1c0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c1c4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c1c8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c1cc:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c1ce:	f242 7110 	movw	r1, #10000	; 0x2710
    c1d2:	fb01 6303 	mla	r3, r1, r3, r6
    c1d6:	3b01      	subs	r3, #1
    c1d8:	fbb3 f3f6 	udiv	r3, r3, r6
    c1dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c1de:	4b5f      	ldr	r3, [pc, #380]	; (c35c <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c1e0:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c1e4:	4433      	add	r3, r6
    c1e6:	fbb3 f3f6 	udiv	r3, r3, r6
    c1ea:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c1ee:	4b5c      	ldr	r3, [pc, #368]	; (c360 <event_connection_prepare+0x958>)
    c1f0:	4433      	add	r3, r6
    c1f2:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c1f6:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c1f8:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c1fa:	4299      	cmp	r1, r3
    c1fc:	bfc4      	itt	gt
    c1fe:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c202:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c204:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c208:	bfc8      	it	gt
    c20a:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c20c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c210:	bfc8      	it	gt
    c212:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c214:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c218:	bf08      	it	eq
    c21a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c21e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c222:	2000      	movs	r0, #0
    c224:	2101      	movs	r1, #1
    c226:	f006 f9f7 	bl	12618 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c22a:	2200      	movs	r2, #0
    c22c:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c22e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c230:	4610      	mov	r0, r2
    c232:	f7fa fda1 	bl	6d78 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c236:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c23a:	f641 2385 	movw	r3, #6789	; 0x1a85
    c23e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c240:	3207      	adds	r2, #7
		ticker_status =
    c242:	9300      	str	r3, [sp, #0]
    c244:	b2d2      	uxtb	r2, r2
    c246:	4b47      	ldr	r3, [pc, #284]	; (c364 <event_connection_prepare+0x95c>)
    c248:	4608      	mov	r0, r1
    c24a:	f7fb fc19 	bl	7a80 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c24e:	f030 0802 	bics.w	r8, r0, #2
    c252:	d026      	beq.n	c2a2 <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c254:	4b44      	ldr	r3, [pc, #272]	; (c368 <event_connection_prepare+0x960>)
    c256:	9301      	str	r3, [sp, #4]
    c258:	9300      	str	r3, [sp, #0]
    c25a:	4a44      	ldr	r2, [pc, #272]	; (c36c <event_connection_prepare+0x964>)
    c25c:	4b44      	ldr	r3, [pc, #272]	; (c370 <event_connection_prepare+0x968>)
    c25e:	4945      	ldr	r1, [pc, #276]	; (c374 <event_connection_prepare+0x96c>)
    c260:	4845      	ldr	r0, [pc, #276]	; (c378 <event_connection_prepare+0x970>)
    c262:	f7ff bbe1 	b.w	ba28 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c266:	fb0a 3212 	mls	r2, sl, r2, r3
    c26a:	b292      	uxth	r2, r2
    c26c:	fba2 0101 	umull	r0, r1, r2, r1
    c270:	f240 1323 	movw	r3, #291	; 0x123
    c274:	fb03 1102 	mla	r1, r3, r2, r1
    c278:	a333      	add	r3, pc, #204	; (adr r3, c348 <event_connection_prepare+0x940>)
    c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c27e:	f7f3 ffc9 	bl	214 <__aeabi_uldivmod>
    c282:	eba8 0300 	sub.w	r3, r8, r0
    c286:	e742      	b.n	c10e <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c288:	990c      	ldr	r1, [sp, #48]	; 0x30
    c28a:	a32f      	add	r3, pc, #188	; (adr r3, c348 <event_connection_prepare+0x940>)
    c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c290:	fba1 010b 	umull	r0, r1, r1, fp
    c294:	f7f3 ffbe 	bl	214 <__aeabi_uldivmod>
    c298:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c29c:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c29e:	4635      	mov	r5, r6
    c2a0:	e790      	b.n	c1c4 <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c2a2:	fba5 ab0b 	umull	sl, fp, r5, fp
    c2a6:	a328      	add	r3, pc, #160	; (adr r3, c348 <event_connection_prepare+0x940>)
    c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c2ac:	4650      	mov	r0, sl
    c2ae:	4659      	mov	r1, fp
    c2b0:	f7f3 ffb0 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c2b4:	4a31      	ldr	r2, [pc, #196]	; (c37c <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2b6:	f894 6020 	ldrb.w	r6, [r4, #32]
    c2ba:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c2be:	2307      	movs	r3, #7
    c2c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c2c4:	2100      	movs	r1, #0
    c2c6:	4343      	muls	r3, r0
    c2c8:	fb02 3301 	mla	r3, r2, r1, r3
    c2cc:	fba0 0102 	umull	r0, r1, r0, r2
    c2d0:	ebba 0000 	subs.w	r0, sl, r0
    c2d4:	4419      	add	r1, r3
    c2d6:	eb6b 0101 	sbc.w	r1, fp, r1
    c2da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c2de:	2300      	movs	r3, #0
    c2e0:	f7f3 ff98 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2e4:	68e3      	ldr	r3, [r4, #12]
    c2e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c2e8:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    c2ec:	4924      	ldr	r1, [pc, #144]	; (c380 <event_connection_prepare+0x978>)
		ticker_status =
    c2ee:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2f0:	441a      	add	r2, r3
    c2f2:	4613      	mov	r3, r2
    c2f4:	4a23      	ldr	r2, [pc, #140]	; (c384 <event_connection_prepare+0x97c>)
		ticker_status =
    c2f6:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2f8:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    c2fc:	bf38      	it	cc
    c2fe:	460a      	movcc	r2, r1
    c300:	3607      	adds	r6, #7
		ticker_status =
    c302:	f641 2195 	movw	r1, #6805	; 0x1a95
    c306:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c308:	b2f6      	uxtb	r6, r6
		ticker_status =
    c30a:	4916      	ldr	r1, [pc, #88]	; (c364 <event_connection_prepare+0x95c>)
    c30c:	9107      	str	r1, [sp, #28]
    c30e:	9205      	str	r2, [sp, #20]
    c310:	9406      	str	r4, [sp, #24]
    c312:	f8cd 800c 	str.w	r8, [sp, #12]
    c316:	9501      	str	r5, [sp, #4]
    c318:	9700      	str	r7, [sp, #0]
    c31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c31c:	4632      	mov	r2, r6
    c31e:	4641      	mov	r1, r8
    c320:	4640      	mov	r0, r8
    c322:	f7fb fb0f 	bl	7944 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c326:	f030 0002 	bics.w	r0, r0, #2
    c32a:	d193      	bne.n	c254 <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    c32c:	f1b9 0f00 	cmp.w	r9, #0
    c330:	f000 8383 	beq.w	ca3a <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c334:	2201      	movs	r2, #1
    c336:	4611      	mov	r1, r2
}
    c338:	b00f      	add	sp, #60	; 0x3c
    c33a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c33e:	f7fa bd1b 	b.w	6d78 <mayfly_enable>
    c342:	bf00      	nop
    c344:	f3af 8000 	nop.w
    c348:	1afd498d 	.word	0x1afd498d
    c34c:	00000007 	.word	0x00000007
    c350:	09ce5400 	.word	0x09ce5400
    c354:	00016e88 	.word	0x00016e88
    c358:	000f4240 	.word	0x000f4240
    c35c:	026259ff 	.word	0x026259ff
    c360:	01c9c37f 	.word	0x01c9c37f
    c364:	0000a745 	.word	0x0000a745
    c368:	000145f1 	.word	0x000145f1
    c36c:	00015373 	.word	0x00015373
    c370:	00016aa1 	.word	0x00016aa1
    c374:	000153c2 	.word	0x000153c2
    c378:	00016c69 	.word	0x00016c69
    c37c:	1afd498d 	.word	0x1afd498d
    c380:	0000cbe9 	.word	0x0000cbe9
    c384:	0000cbed 	.word	0x0000cbed
    c388:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    c38c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c390:	2b00      	cmp	r3, #0
    c392:	d05e      	beq.n	c452 <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c394:	48c9      	ldr	r0, [pc, #804]	; (c6bc <event_connection_prepare+0xcb4>)
    c396:	f7fa fc4c 	bl	6c32 <mem_acquire>
		if (node_tx) {
    c39a:	4607      	mov	r7, r0
    c39c:	b1e8      	cbz	r0, c3da <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    c39e:	2300      	movs	r3, #0
    c3a0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c3a4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c3a6:	3306      	adds	r3, #6
    c3a8:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c3aa:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c3ae:	7903      	ldrb	r3, [r0, #4]
    c3b0:	f043 0303 	orr.w	r3, r3, #3
    c3b4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c3b6:	2308      	movs	r3, #8
    c3b8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c3ba:	2301      	movs	r3, #1
    c3bc:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c3be:	2205      	movs	r2, #5
    c3c0:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c3c4:	3008      	adds	r0, #8
    c3c6:	f7f5 fc19 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c3ca:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c3ce:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c3d2:	4639      	mov	r1, r7
    c3d4:	4620      	mov	r0, r4
    c3d6:	f7ff fa47 	bl	b868 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c3da:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    c3de:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c3e2:	429a      	cmp	r2, r3
    c3e4:	d01e      	beq.n	c424 <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c3e6:	2005      	movs	r0, #5
    c3e8:	f7ff f8a8 	bl	b53c <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c3ec:	48b3      	ldr	r0, [pc, #716]	; (c6bc <event_connection_prepare+0xcb4>)
    c3ee:	f7fa fc20 	bl	6c32 <mem_acquire>
		if (node_tx) {
    c3f2:	4601      	mov	r1, r0
    c3f4:	b1b0      	cbz	r0, c424 <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c3f6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c3fa:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c3fe:	7903      	ldrb	r3, [r0, #4]
    c400:	f043 0303 	orr.w	r3, r3, #3
    c404:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c406:	2302      	movs	r3, #2
    c408:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c40a:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    c40c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c410:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    c412:	4620      	mov	r0, r4
    c414:	f7ff fa28 	bl	b868 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    c418:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    c41a:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    c41c:	bf98      	it	ls
    c41e:	3301      	addls	r3, #1
    c420:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c424:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c428:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c42c:	429a      	cmp	r2, r3
    c42e:	f000 82eb 	beq.w	ca08 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c432:	2005      	movs	r0, #5
    c434:	f7ff f882 	bl	b53c <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    c438:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c43c:	f003 0303 	and.w	r3, r3, #3
    c440:	2b03      	cmp	r3, #3
    c442:	f200 830c 	bhi.w	ca5e <event_connection_prepare+0x1056>
    c446:	e8df f013 	tbh	[pc, r3, lsl #1]
    c44a:	0288      	.short	0x0288
    c44c:	02df02df 	.word	0x02df02df
    c450:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c452:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c456:	1af3      	subs	r3, r6, r3
    c458:	041f      	lsls	r7, r3, #16
    c45a:	d4be      	bmi.n	c3da <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c45c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c460:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c464:	f104 0717 	add.w	r7, r4, #23
    c468:	2205      	movs	r2, #5
    c46a:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c46e:	4638      	mov	r0, r7
    c470:	f7f5 fbc4 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c474:	2105      	movs	r1, #5
    c476:	4638      	mov	r0, r7
    c478:	f7fa fd86 	bl	6f88 <util_ones_count_get>
		conn->data_chan_count =
    c47c:	7f63      	ldrb	r3, [r4, #29]
    c47e:	f360 0305 	bfi	r3, r0, #0, #6
    c482:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c484:	2301      	movs	r3, #1
    c486:	7723      	strb	r3, [r4, #28]
    c488:	e7a7      	b.n	c3da <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    c48a:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c48e:	f1b9 0f00 	cmp.w	r9, #0
    c492:	d1a2      	bne.n	c3da <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c494:	4889      	ldr	r0, [pc, #548]	; (c6bc <event_connection_prepare+0xcb4>)
    c496:	f7fa fbcc 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    c49a:	4607      	mov	r7, r0
    c49c:	2800      	cmp	r0, #0
    c49e:	d09c      	beq.n	c3da <event_connection_prepare+0x9d2>
	if (!conn->role) {
    c4a0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c4a4:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c4a6:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c4aa:	db4d      	blt.n	c548 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c4ac:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c4b0:	465b      	mov	r3, fp
    c4b2:	464a      	mov	r2, r9
    c4b4:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c4b8:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c4bc:	f005 fc22 	bl	11d04 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c4c0:	2210      	movs	r2, #16
    c4c2:	4659      	mov	r1, fp
    c4c4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c4c8:	f7f5 fb98 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c4cc:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c4d0:	2208      	movs	r2, #8
    c4d2:	f204 1033 	addw	r0, r4, #307	; 0x133
    c4d6:	f7f5 fb91 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    c4da:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c4de:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c4e2:	f369 0300 	bfi	r3, r9, #0, #1
    c4e6:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c4ea:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c4ee:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c4f2:	f043 0301 	orr.w	r3, r3, #1
    c4f6:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c4fa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c4fe:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c502:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c506:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c50a:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c50e:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c512:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c516:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c51a:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c51e:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c522:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c526:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c52a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c52e:	4651      	mov	r1, sl
    c530:	4620      	mov	r0, r4
    c532:	f7ff fa27 	bl	b984 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c536:	4639      	mov	r1, r7
    c538:	4620      	mov	r0, r4
    c53a:	f7ff f995 	bl	b868 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c53e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c542:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c546:	e748      	b.n	c3da <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    c548:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c54c:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c550:	2b08      	cmp	r3, #8
    c552:	f000 80a2 	beq.w	c69a <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    c556:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c55a:	f1b9 0f00 	cmp.w	r9, #0
    c55e:	d020      	beq.n	c5a2 <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c560:	7903      	ldrb	r3, [r0, #4]
    c562:	f043 0303 	orr.w	r3, r3, #3
    c566:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c568:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c56c:	0698      	lsls	r0, r3, #26
    c56e:	d512      	bpl.n	c596 <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c570:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c574:	0759      	lsls	r1, r3, #29
    c576:	d50e      	bpl.n	c596 <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c578:	2311      	movs	r3, #17
    c57a:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c57c:	2303      	movs	r3, #3
    c57e:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c580:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c584:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c586:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c588:	797b      	ldrb	r3, [r7, #5]
    c58a:	3301      	adds	r3, #1
    c58c:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c58e:	2300      	movs	r3, #0
    c590:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c594:	e7cf      	b.n	c536 <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c596:	230d      	movs	r3, #13
    c598:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c59a:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c59e:	2301      	movs	r3, #1
    c5a0:	e7f1      	b.n	c586 <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c5a2:	4846      	ldr	r0, [pc, #280]	; (c6bc <event_connection_prepare+0xcb4>)
    c5a4:	f7fa fb45 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    c5a8:	4682      	mov	sl, r0
    c5aa:	2800      	cmp	r0, #0
    c5ac:	f000 8300 	beq.w	cbb0 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c5b0:	7903      	ldrb	r3, [r0, #4]
    c5b2:	f043 0303 	orr.w	r3, r3, #3
    c5b6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c5b8:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    c5bc:	230d      	movs	r3, #13
    c5be:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c5c0:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    c5c4:	f100 0308 	add.w	r3, r0, #8
    c5c8:	4619      	mov	r1, r3
    c5ca:	2208      	movs	r2, #8
    c5cc:	6868      	ldr	r0, [r5, #4]
    c5ce:	930d      	str	r3, [sp, #52]	; 0x34
    c5d0:	f006 fd54 	bl	1307c <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    c5d4:	f10a 0310 	add.w	r3, sl, #16
    c5d8:	4619      	mov	r1, r3
    c5da:	465a      	mov	r2, fp
    c5dc:	6868      	ldr	r0, [r5, #4]
    c5de:	930b      	str	r3, [sp, #44]	; 0x2c
    c5e0:	f006 fd4c 	bl	1307c <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    c5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c5e6:	2208      	movs	r2, #8
    c5e8:	4619      	mov	r1, r3
    c5ea:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    c5ee:	f7f5 fb05 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    c5f2:	465a      	mov	r2, fp
    c5f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c5f6:	f504 708b 	add.w	r0, r4, #278	; 0x116
    c5fa:	f7f5 faff 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    c5fe:	4651      	mov	r1, sl
    c600:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c602:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    c606:	f7ff f92f 	bl	b868 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c60a:	4653      	mov	r3, sl
    c60c:	464a      	mov	r2, r9
    c60e:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c612:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c616:	f005 fb75 	bl	11d04 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    c61a:	2210      	movs	r2, #16
    c61c:	4651      	mov	r1, sl
    c61e:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c622:	f7f5 faeb 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c626:	2208      	movs	r2, #8
    c628:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c62c:	f204 1033 	addw	r0, r4, #307	; 0x133
    c630:	f7f5 fae4 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    c634:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    c638:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    c63c:	f043 0301 	orr.w	r3, r3, #1
    c640:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    c644:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    c648:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    c64c:	f369 0300 	bfi	r3, r9, #0, #1
    c650:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    c654:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    c658:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    c65c:	f043 0310 	orr.w	r3, r3, #16
    c660:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c664:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    c666:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c66a:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    c66e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c672:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c676:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c67a:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    c67e:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c682:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c686:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c68a:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c68e:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c690:	2301      	movs	r3, #1
    c692:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c694:	2305      	movs	r3, #5
    c696:	71fb      	strb	r3, [r7, #7]
    c698:	e74d      	b.n	c536 <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    c69a:	4651      	mov	r1, sl
    c69c:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    c6a0:	f7ff f970 	bl	b984 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    c6a4:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    c6a8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    c6ac:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    c6b0:	f369 03c3 	bfi	r3, r9, #3, #1
    c6b4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    c6b8:	e73d      	b.n	c536 <event_connection_prepare+0xb2e>
    c6ba:	bf00      	nop
    c6bc:	20000a1c 	.word	0x20000a1c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c6c0:	48b0      	ldr	r0, [pc, #704]	; (c984 <event_connection_prepare+0xf7c>)
    c6c2:	f7fa fab6 	bl	6c32 <mem_acquire>
	if (node_tx) {
    c6c6:	4607      	mov	r7, r0
    c6c8:	2800      	cmp	r0, #0
    c6ca:	f43f ae86 	beq.w	c3da <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c6ce:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c6d2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    c6d6:	4bac      	ldr	r3, [pc, #688]	; (c988 <event_connection_prepare+0xf80>)
    c6d8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c6dc:	7903      	ldrb	r3, [r0, #4]
    c6de:	f043 0303 	orr.w	r3, r3, #3
    c6e2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    c6e4:	2309      	movs	r3, #9
    c6e6:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    c6e8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c6ec:	2b00      	cmp	r3, #0
    c6ee:	bfac      	ite	ge
    c6f0:	2308      	movge	r3, #8
    c6f2:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c6f4:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    c6f6:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c6f8:	2100      	movs	r1, #0
    c6fa:	4410      	add	r0, r2
    c6fc:	f7f5 faaa 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    c700:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c704:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    c706:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    c708:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c70a:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c70c:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    c70e:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    c710:	4620      	mov	r0, r4
    c712:	f7ff f8a9 	bl	b868 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c716:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c71a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    c71e:	e65c      	b.n	c3da <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    c720:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c724:	07da      	lsls	r2, r3, #31
    c726:	d424      	bmi.n	c772 <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c728:	4896      	ldr	r0, [pc, #600]	; (c984 <event_connection_prepare+0xf7c>)
    c72a:	f7fa fa82 	bl	6c32 <mem_acquire>
		if (node_tx) {
    c72e:	4601      	mov	r1, r0
    c730:	2800      	cmp	r0, #0
    c732:	f43f ae52 	beq.w	c3da <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    c736:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c73a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    c73e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c742:	f043 0301 	orr.w	r3, r3, #1
    c746:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c74a:	7903      	ldrb	r3, [r0, #4]
    c74c:	f043 0303 	orr.w	r3, r3, #3
    c750:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    c752:	2306      	movs	r3, #6
    c754:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c756:	230c      	movs	r3, #12
    c758:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    c75a:	2309      	movs	r3, #9
    c75c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    c75e:	f06f 030e 	mvn.w	r3, #14
    c762:	7243      	strb	r3, [r0, #9]
    c764:	2305      	movs	r3, #5
    c766:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    c768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c76c:	72c3      	strb	r3, [r0, #11]
    c76e:	7303      	strb	r3, [r0, #12]
    c770:	e7ce      	b.n	c710 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    c772:	079b      	lsls	r3, r3, #30
    c774:	d526      	bpl.n	c7c4 <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    c776:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c77a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    c77e:	2002      	movs	r0, #2
    c780:	f7fd f86c 	bl	985c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c784:	b920      	cbnz	r0, c790 <event_connection_prepare+0xd88>
    c786:	4b81      	ldr	r3, [pc, #516]	; (c98c <event_connection_prepare+0xf84>)
    c788:	9301      	str	r3, [sp, #4]
    c78a:	9300      	str	r3, [sp, #0]
    c78c:	4b80      	ldr	r3, [pc, #512]	; (c990 <event_connection_prepare+0xf88>)
    c78e:	e45d      	b.n	c04c <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    c790:	8c23      	ldrh	r3, [r4, #32]
    c792:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c794:	2301      	movs	r3, #1
    c796:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c798:	7a03      	ldrb	r3, [r0, #8]
    c79a:	f043 0303 	orr.w	r3, r3, #3
    c79e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    c7a0:	2306      	movs	r3, #6
    c7a2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    c7a4:	230c      	movs	r3, #12
    c7a6:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    c7a8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    c7ac:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    c7ae:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    c7b2:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    c7b6:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    c7ba:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    c7be:	f7fd feb7 	bl	a530 <packet_rx_enqueue>
    c7c2:	e60a      	b.n	c3da <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    c7c4:	4b71      	ldr	r3, [pc, #452]	; (c98c <event_connection_prepare+0xf84>)
    c7c6:	9301      	str	r3, [sp, #4]
    c7c8:	9300      	str	r3, [sp, #0]
    c7ca:	4b71      	ldr	r3, [pc, #452]	; (c990 <event_connection_prepare+0xf88>)
    c7cc:	f7ff bad2 	b.w	bd74 <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c7d0:	486c      	ldr	r0, [pc, #432]	; (c984 <event_connection_prepare+0xf7c>)
    c7d2:	f7fa fa2e 	bl	6c32 <mem_acquire>
	if (node_tx) {
    c7d6:	4601      	mov	r1, r0
    c7d8:	2800      	cmp	r0, #0
    c7da:	f43f adfe 	beq.w	c3da <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c7de:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c7e2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7e6:	7903      	ldrb	r3, [r0, #4]
    c7e8:	f043 0303 	orr.w	r3, r3, #3
    c7ec:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    c7ee:	2301      	movs	r3, #1
    c7f0:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    c7f2:	2312      	movs	r3, #18
    c7f4:	71c3      	strb	r3, [r0, #7]
    c7f6:	e78b      	b.n	c710 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    c7f8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    c7fc:	07d7      	lsls	r7, r2, #31
    c7fe:	d551      	bpl.n	c8a4 <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c800:	4860      	ldr	r0, [pc, #384]	; (c984 <event_connection_prepare+0xf7c>)
    c802:	f7fa fa16 	bl	6c32 <mem_acquire>
		if (node_tx) {
    c806:	4607      	mov	r7, r0
    c808:	2800      	cmp	r0, #0
    c80a:	f43f ade6 	beq.w	c3da <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    c80e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c812:	f36f 0300 	bfc	r3, #0, #1
    c816:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    c81a:	b2db      	uxtb	r3, r3
    c81c:	f3c3 0982 	ubfx	r9, r3, #2, #3
    c820:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    c824:	d138      	bne.n	c898 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    c826:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c82a:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    c82e:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    c830:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    c834:	d51a      	bpl.n	c86c <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    c836:	2002      	movs	r0, #2
    c838:	f7fd f810 	bl	985c <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    c83c:	b920      	cbnz	r0, c848 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    c83e:	4b53      	ldr	r3, [pc, #332]	; (c98c <event_connection_prepare+0xf84>)
    c840:	9301      	str	r3, [sp, #4]
    c842:	9300      	str	r3, [sp, #0]
    c844:	4b53      	ldr	r3, [pc, #332]	; (c994 <event_connection_prepare+0xf8c>)
    c846:	e401      	b.n	c04c <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    c848:	8c23      	ldrh	r3, [r4, #32]
    c84a:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    c84c:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    c850:	230c      	movs	r3, #12
    c852:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    c854:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c858:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c85c:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    c85e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c862:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c866:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    c868:	f7fd fe62 	bl	a530 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c86c:	793b      	ldrb	r3, [r7, #4]
    c86e:	f043 0303 	orr.w	r3, r3, #3
    c872:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    c874:	2305      	movs	r3, #5
    c876:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c878:	2318      	movs	r3, #24
    c87a:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    c87c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c880:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c884:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    c886:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c88a:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c88e:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    c890:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c894:	817b      	strh	r3, [r7, #10]
    c896:	e59c      	b.n	c3d2 <event_connection_prepare+0x9ca>
								 conn->latency +
    c898:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c89a:	3306      	adds	r3, #6
    c89c:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    c89e:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    c8a2:	e7e3      	b.n	c86c <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    c8a4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c8a8:	1af3      	subs	r3, r6, r3
    c8aa:	0419      	lsls	r1, r3, #16
    c8ac:	f53f ad95 	bmi.w	c3da <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c8b0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c8b4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    c8b8:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    c8bc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    c8c0:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c8c4:	bf18      	it	ne
    c8c6:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    c8ca:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c8ce:	bf1c      	itt	ne
    c8d0:	f367 03c5 	bfine	r3, r7, #3, #3
    c8d4:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    c8d8:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    c8dc:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    c8e0:	d008      	beq.n	c8f4 <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    c8e2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c8e6:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    c8ea:	095b      	lsrs	r3, r3, #5
    c8ec:	f363 0702 	bfi	r7, r3, #0, #3
    c8f0:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    c8f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c8f8:	461f      	mov	r7, r3
    c8fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c8fe:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c902:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    c904:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c908:	d40b      	bmi.n	c922 <event_connection_prepare+0xf1a>
    c90a:	b2fb      	uxtb	r3, r7
    c90c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c910:	4283      	cmp	r3, r0
    c912:	d106      	bne.n	c922 <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    c914:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c918:	f003 0307 	and.w	r3, r3, #7
    c91c:	428b      	cmp	r3, r1
    c91e:	f43f ad5c 	beq.w	c3da <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    c922:	2002      	movs	r0, #2
    c924:	f7fc ff9a 	bl	985c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c928:	2800      	cmp	r0, #0
    c92a:	d088      	beq.n	c83e <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    c92c:	8c23      	ldrh	r3, [r4, #32]
    c92e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c930:	230c      	movs	r3, #12
    c932:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    c934:	2300      	movs	r3, #0
    c936:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    c938:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c93c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c940:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    c942:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c946:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c94a:	7343      	strb	r3, [r0, #13]
    c94c:	e737      	b.n	c7be <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    c94e:	4b0f      	ldr	r3, [pc, #60]	; (c98c <event_connection_prepare+0xf84>)
    c950:	9301      	str	r3, [sp, #4]
    c952:	9300      	str	r3, [sp, #0]
    c954:	4b10      	ldr	r3, [pc, #64]	; (c998 <event_connection_prepare+0xf90>)
    c956:	f7ff ba0d 	b.w	bd74 <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    c95a:	f7fc ff69 	bl	9830 <packet_rx_acquired_count_get>
    c95e:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    c960:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    c964:	f7fa f994 	bl	6c90 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    c968:	4438      	add	r0, r7
    c96a:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    c96c:	28ff      	cmp	r0, #255	; 0xff
    c96e:	d91d      	bls.n	c9ac <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    c970:	4b06      	ldr	r3, [pc, #24]	; (c98c <event_connection_prepare+0xf84>)
    c972:	9301      	str	r3, [sp, #4]
    c974:	9300      	str	r3, [sp, #0]
    c976:	4a09      	ldr	r2, [pc, #36]	; (c99c <event_connection_prepare+0xf94>)
    c978:	4b09      	ldr	r3, [pc, #36]	; (c9a0 <event_connection_prepare+0xf98>)
    c97a:	490a      	ldr	r1, [pc, #40]	; (c9a4 <event_connection_prepare+0xf9c>)
    c97c:	480a      	ldr	r0, [pc, #40]	; (c9a8 <event_connection_prepare+0xfa0>)
    c97e:	f7ff b853 	b.w	ba28 <event_connection_prepare+0x20>
    c982:	bf00      	nop
    c984:	20000a1c 	.word	0x20000a1c
    c988:	000141ff 	.word	0x000141ff
    c98c:	000145f1 	.word	0x000145f1
    c990:	00016ab5 	.word	0x00016ab5
    c994:	00016b11 	.word	0x00016b11
    c998:	00016b28 	.word	0x00016b28
    c99c:	00015373 	.word	0x00015373
    c9a0:	00016aef 	.word	0x00016aef
    c9a4:	000153c2 	.word	0x000153c2
    c9a8:	00016cb7 	.word	0x00016cb7
		if (_radio.packet_rx_data_count != free_count_rx) {
    c9ac:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    c9b0:	4283      	cmp	r3, r0
    c9b2:	d129      	bne.n	ca08 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c9b4:	4881      	ldr	r0, [pc, #516]	; (cbbc <event_connection_prepare+0x11b4>)
    c9b6:	f7fa f93c 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    c9ba:	4601      	mov	r1, r0
    c9bc:	b320      	cbz	r0, ca08 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c9be:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    c9c2:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c9c6:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    c9ca:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c9cc:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c9ce:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c9d0:	f365 0301 	bfi	r3, r5, #0, #2
    c9d4:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9d8:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    c9da:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9dc:	f043 0303 	orr.w	r3, r3, #3
    c9e0:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    c9e2:	2309      	movs	r3, #9
    c9e4:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    c9e6:	2314      	movs	r3, #20
    c9e8:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    c9ea:	231b      	movs	r3, #27
    c9ec:	720b      	strb	r3, [r1, #8]
    c9ee:	2300      	movs	r3, #0
    c9f0:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    c9f2:	2348      	movs	r3, #72	; 0x48
    c9f4:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    c9f6:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    c9f8:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    c9fa:	4620      	mov	r0, r4
    c9fc:	f7fe ff34 	bl	b868 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ca00:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ca04:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    ca08:	f894 3020 	ldrb.w	r3, [r4, #32]
    ca0c:	f994 501d 	ldrsb.w	r5, [r4, #29]
    ca10:	486b      	ldr	r0, [pc, #428]	; (cbc0 <event_connection_prepare+0x11b8>)
    ca12:	496c      	ldr	r1, [pc, #432]	; (cbc4 <event_connection_prepare+0x11bc>)
    ca14:	68a2      	ldr	r2, [r4, #8]
    ca16:	9403      	str	r4, [sp, #12]
    ca18:	3307      	adds	r3, #7
    ca1a:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    ca1e:	bf38      	it	cc
    ca20:	4601      	movcc	r1, r0
    ca22:	b2db      	uxtb	r3, r3
    ca24:	e88d 000c 	stmia.w	sp, {r2, r3}
    ca28:	9102      	str	r1, [sp, #8]
    ca2a:	1d23      	adds	r3, r4, #4
    ca2c:	4622      	mov	r2, r4
    ca2e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ca30:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    ca32:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    ca34:	f7fe fd90 	bl	b558 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    ca38:	8466      	strh	r6, [r4, #34]	; 0x22
}
    ca3a:	b00f      	add	sp, #60	; 0x3c
    ca3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    ca40:	f7fc fef6 	bl	9830 <packet_rx_acquired_count_get>
    ca44:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ca46:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ca4a:	f7fa f921 	bl	6c90 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ca4e:	4438      	add	r0, r7
    ca50:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    ca52:	28ff      	cmp	r0, #255	; 0xff
    ca54:	d88c      	bhi.n	c970 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    ca56:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    ca5a:	4283      	cmp	r3, r0
    ca5c:	d005      	beq.n	ca6a <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    ca5e:	4b5a      	ldr	r3, [pc, #360]	; (cbc8 <event_connection_prepare+0x11c0>)
    ca60:	9301      	str	r3, [sp, #4]
    ca62:	9300      	str	r3, [sp, #0]
    ca64:	4b59      	ldr	r3, [pc, #356]	; (cbcc <event_connection_prepare+0x11c4>)
    ca66:	f7ff b985 	b.w	bd74 <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    ca6a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ca6e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    ca72:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    ca76:	2100      	movs	r1, #0
    ca78:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    ca7c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ca80:	f361 02c3 	bfi	r2, r1, #3, #1
    ca84:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    ca88:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    ca8c:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    ca8e:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    ca92:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    ca94:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    ca98:	f7fa f8fa 	bl	6c90 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    ca9c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    caa0:	b10b      	cbz	r3, caa6 <event_connection_prepare+0x109e>
			free_count_conn++;
    caa2:	3001      	adds	r0, #1
    caa4:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    caa6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    caaa:	b10b      	cbz	r3, cab0 <event_connection_prepare+0x10a8>
			free_count_conn++;
    caac:	3001      	adds	r0, #1
    caae:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cab0:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cab2:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cab6:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cab8:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    caba:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cabe:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cac0:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cac2:	d052      	beq.n	cb6a <event_connection_prepare+0x1162>
    cac4:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    cac8:	42bb      	cmp	r3, r7
    caca:	d34e      	bcc.n	cb6a <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    cacc:	2002      	movs	r0, #2
    cace:	f7fc fec5 	bl	985c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cad2:	2800      	cmp	r0, #0
    cad4:	d155      	bne.n	cb82 <event_connection_prepare+0x117a>
    cad6:	4b3c      	ldr	r3, [pc, #240]	; (cbc8 <event_connection_prepare+0x11c0>)
    cad8:	9301      	str	r3, [sp, #4]
    cada:	9300      	str	r3, [sp, #0]
    cadc:	4b3b      	ldr	r3, [pc, #236]	; (cbcc <event_connection_prepare+0x11c4>)
    cade:	f7ff bab5 	b.w	c04c <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    cae2:	b90b      	cbnz	r3, cae8 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    cae4:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    cae8:	3b01      	subs	r3, #1
    caea:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    caee:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    caf2:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    caf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cafa:	4649      	mov	r1, r9
    cafc:	6818      	ldr	r0, [r3, #0]
    cafe:	f7fa f8b2 	bl	6c66 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    cb02:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    cb06:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    cb0a:	3a01      	subs	r2, #1
    cb0c:	4293      	cmp	r3, r2
    cb0e:	db08      	blt.n	cb22 <event_connection_prepare+0x111a>
    cb10:	4b2d      	ldr	r3, [pc, #180]	; (cbc8 <event_connection_prepare+0x11c0>)
    cb12:	9301      	str	r3, [sp, #4]
    cb14:	9300      	str	r3, [sp, #0]
    cb16:	4a2e      	ldr	r2, [pc, #184]	; (cbd0 <event_connection_prepare+0x11c8>)
    cb18:	4b2c      	ldr	r3, [pc, #176]	; (cbcc <event_connection_prepare+0x11c4>)
    cb1a:	492e      	ldr	r1, [pc, #184]	; (cbd4 <event_connection_prepare+0x11cc>)
    cb1c:	482e      	ldr	r0, [pc, #184]	; (cbd8 <event_connection_prepare+0x11d0>)
    cb1e:	f7fe bf83 	b.w	ba28 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    cb22:	3301      	adds	r3, #1
    cb24:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    cb28:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    cb2c:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    cb30:	4293      	cmp	r3, r2
    cb32:	d1d6      	bne.n	cae2 <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cb34:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    cb36:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cb3a:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    cb3c:	bf9a      	itte	ls
    cb3e:	2334      	movls	r3, #52	; 0x34
    cb40:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    cb44:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    cb48:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    cb4c:	fbb2 f2f1 	udiv	r2, r2, r1
    cb50:	b2d2      	uxtb	r2, r2
    cb52:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    cb56:	b95a      	cbnz	r2, cb70 <event_connection_prepare+0x1168>
    cb58:	4b1b      	ldr	r3, [pc, #108]	; (cbc8 <event_connection_prepare+0x11c0>)
    cb5a:	9301      	str	r3, [sp, #4]
    cb5c:	9300      	str	r3, [sp, #0]
    cb5e:	4a1c      	ldr	r2, [pc, #112]	; (cbd0 <event_connection_prepare+0x11c8>)
    cb60:	4b1a      	ldr	r3, [pc, #104]	; (cbcc <event_connection_prepare+0x11c4>)
    cb62:	491c      	ldr	r1, [pc, #112]	; (cbd4 <event_connection_prepare+0x11cc>)
    cb64:	481d      	ldr	r0, [pc, #116]	; (cbdc <event_connection_prepare+0x11d4>)
    cb66:	f7fe bf5f 	b.w	ba28 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    cb6a:	f8df 9078 	ldr.w	r9, [pc, #120]	; cbe4 <event_connection_prepare+0x11dc>
    cb6e:	e7db      	b.n	cb28 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    cb70:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    cb74:	4b1a      	ldr	r3, [pc, #104]	; (cbe0 <event_connection_prepare+0x11d8>)
    cb76:	f7fa f835 	bl	6be4 <mem_init>
			packet_rx_allocate(4);
    cb7a:	2004      	movs	r0, #4
    cb7c:	f7fc fee6 	bl	994c <packet_rx_allocate>
    cb80:	e7a4      	b.n	cacc <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    cb82:	8c23      	ldrh	r3, [r4, #32]
    cb84:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cb86:	2301      	movs	r3, #1
    cb88:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cb8a:	7a03      	ldrb	r3, [r0, #8]
    cb8c:	f043 0303 	orr.w	r3, r3, #3
    cb90:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cb92:	2309      	movs	r3, #9
    cb94:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    cb96:	2315      	movs	r3, #21
    cb98:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    cb9a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cb9c:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    cb9e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    cba0:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    cba2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    cba4:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    cba6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cba8:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    cbaa:	f7fd fcc1 	bl	a530 <packet_rx_enqueue>
    cbae:	e72b      	b.n	ca08 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    cbb0:	4902      	ldr	r1, [pc, #8]	; (cbbc <event_connection_prepare+0x11b4>)
    cbb2:	4638      	mov	r0, r7
    cbb4:	f7fa f857 	bl	6c66 <mem_release>
    cbb8:	e40f      	b.n	c3da <event_connection_prepare+0x9d2>
    cbba:	bf00      	nop
    cbbc:	20000a1c 	.word	0x20000a1c
    cbc0:	0000cf15 	.word	0x0000cf15
    cbc4:	0000cc2d 	.word	0x0000cc2d
    cbc8:	000145f1 	.word	0x000145f1
    cbcc:	00016aef 	.word	0x00016aef
    cbd0:	00015373 	.word	0x00015373
    cbd4:	000153c2 	.word	0x000153c2
    cbd8:	00016cee 	.word	0x00016cee
    cbdc:	00016d48 	.word	0x00016d48
    cbe0:	200009f0 	.word	0x200009f0
    cbe4:	20000a08 	.word	0x20000a08

0000cbe8 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    cbe8:	f7fe bf0e 	b.w	ba08 <event_connection_prepare>

0000cbec <event_slave_prepare>:
    cbec:	f7fe bf0c 	b.w	ba08 <event_connection_prepare>

0000cbf0 <connection_configure>:
{
    cbf0:	b510      	push	{r4, lr}
    cbf2:	4604      	mov	r4, r0
	radio_reset();
    cbf4:	f005 f962 	bl	11ebc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    cbf8:	2000      	movs	r0, #0
    cbfa:	f005 f989 	bl	11f10 <radio_tx_power_set>
	radio_isr_set(isr);
    cbfe:	480a      	ldr	r0, [pc, #40]	; (cc28 <connection_configure+0x38>)
    cc00:	f005 f926 	bl	11e50 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    cc04:	f104 0010 	add.w	r0, r4, #16
    cc08:	f005 f9a0 	bl	11f4c <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    cc0c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    cc0e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    cc10:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    cc12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    cc16:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cc18:	f240 605b 	movw	r0, #1627	; 0x65b
    cc1c:	4319      	orrs	r1, r3
}
    cc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cc22:	f005 ba3b 	b.w	1209c <radio_crc_configure>
    cc26:	bf00      	nop
    cc28:	0000e2d9 	.word	0x0000e2d9

0000cc2c <event_slave>:
{
    cc2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cc30:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cc32:	4b71      	ldr	r3, [pc, #452]	; (cdf8 <event_slave+0x1cc>)
    cc34:	7cda      	ldrb	r2, [r3, #19]
{
    cc36:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cc38:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    cc3c:	461d      	mov	r5, r3
    cc3e:	b172      	cbz	r2, cc5e <event_slave+0x32>
    cc40:	4b6e      	ldr	r3, [pc, #440]	; (cdfc <event_slave+0x1d0>)
    cc42:	9301      	str	r3, [sp, #4]
    cc44:	9300      	str	r3, [sp, #0]
    cc46:	4a6e      	ldr	r2, [pc, #440]	; (ce00 <event_slave+0x1d4>)
    cc48:	4b6e      	ldr	r3, [pc, #440]	; (ce04 <event_slave+0x1d8>)
    cc4a:	496f      	ldr	r1, [pc, #444]	; (ce08 <event_slave+0x1dc>)
    cc4c:	486f      	ldr	r0, [pc, #444]	; (ce0c <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cc4e:	f7f4 f99d 	bl	f8c <printk>
    cc52:	4040      	eors	r0, r0
    cc54:	f380 8811 	msr	BASEPRI, r0
    cc58:	f04f 0004 	mov.w	r0, #4
    cc5c:	df02      	svc	2
    cc5e:	7c1b      	ldrb	r3, [r3, #16]
    cc60:	8c22      	ldrh	r2, [r4, #32]
    cc62:	b2db      	uxtb	r3, r3
    cc64:	3207      	adds	r2, #7
    cc66:	4293      	cmp	r3, r2
    cc68:	d007      	beq.n	cc7a <event_slave+0x4e>
    cc6a:	4b64      	ldr	r3, [pc, #400]	; (cdfc <event_slave+0x1d0>)
    cc6c:	9301      	str	r3, [sp, #4]
    cc6e:	9300      	str	r3, [sp, #0]
    cc70:	4a63      	ldr	r2, [pc, #396]	; (ce00 <event_slave+0x1d4>)
    cc72:	4b64      	ldr	r3, [pc, #400]	; (ce04 <event_slave+0x1d8>)
    cc74:	4964      	ldr	r1, [pc, #400]	; (ce08 <event_slave+0x1dc>)
    cc76:	4866      	ldr	r0, [pc, #408]	; (ce10 <event_slave+0x1e4>)
    cc78:	e7e9      	b.n	cc4e <event_slave+0x22>
	_radio.packet_counter = 0;
    cc7a:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    cc7e:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    cc82:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    cc84:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    cc86:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    cc88:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    cc8a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    cc8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    cc8e:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    cc92:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    cc94:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    cc96:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    cc98:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    cc9a:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    cc9c:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    cc9e:	f7ff ffa7 	bl	cbf0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    cca2:	2096      	movs	r0, #150	; 0x96
    cca4:	f005 fab4 	bl	12210 <radio_tmr_tifs_set>
				     conn->phy_flags);
    cca8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    ccac:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    ccb0:	09d3      	lsrs	r3, r2, #7
    ccb2:	4631      	mov	r1, r6
    ccb4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ccb8:	f000 0007 	and.w	r0, r0, #7
    ccbc:	f005 fa18 	bl	120f0 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ccc0:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    ccc4:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    ccc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    cccc:	4620      	mov	r0, r4
    ccce:	3108      	adds	r1, #8
    ccd0:	f7fd f922 	bl	9f18 <rx_packet_set>
	if (conn->data_chan_sel) {
    ccd4:	7f63      	ldrb	r3, [r4, #29]
    ccd6:	f013 0f40 	tst.w	r3, #64	; 0x40
    ccda:	f104 0217 	add.w	r2, r4, #23
    ccde:	d05a      	beq.n	cd96 <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    cce0:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    cce2:	8be1      	ldrh	r1, [r4, #30]
    cce4:	3801      	subs	r0, #1
    cce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ccea:	b280      	uxth	r0, r0
    ccec:	f7fe fd78 	bl	b7e0 <chan_sel_2>
	chan_set(data_chan_use);
    ccf0:	f7fe f84c 	bl	ad8c <chan_set>
	conn->slave.window_widening_event_us +=
    ccf4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    ccf6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    ccf8:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    ccfa:	2200      	movs	r2, #0
    ccfc:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    ccfe:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    cd00:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    cd02:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    cd04:	bf88      	it	hi
    cd06:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    cd08:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cd0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    cd0c:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    cd0e:	4413      	add	r3, r2
    cd10:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cd12:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    cd14:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cd16:	f107 0109 	add.w	r1, r7, #9
    cd1a:	4630      	mov	r0, r6
    cd1c:	f005 fa84 	bl	12228 <radio_tmr_start>
    cd20:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    cd22:	f005 fb1d 	bl	12360 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    cd26:	4630      	mov	r0, r6
    cd28:	f005 fb3c 	bl	123a4 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cd2c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    cd2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cd30:	f103 0650 	add.w	r6, r3, #80	; 0x50
    cd34:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    cd38:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cd3c:	2101      	movs	r1, #1
    cd3e:	f000 0007 	and.w	r0, r0, #7
    cd42:	f005 f95c 	bl	11ffe <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cd46:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    cd48:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    cd4a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cd4e:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    cd52:	2802      	cmp	r0, #2
    cd54:	d03f      	beq.n	cdd6 <event_slave+0x1aa>
		return 40;
    cd56:	2804      	cmp	r0, #4
    cd58:	bf0c      	ite	eq
    cd5a:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    cd5e:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    cd60:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    cd62:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    cd64:	f005 f94d 	bl	12002 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    cd68:	4430      	add	r0, r6
    cd6a:	f005 fadb 	bl	12324 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    cd6e:	f894 1020 	ldrb.w	r1, [r4, #32]
    cd72:	3107      	adds	r1, #7
    cd74:	463a      	mov	r2, r7
    cd76:	b2c9      	uxtb	r1, r1
    cd78:	4620      	mov	r0, r4
    cd7a:	f7fe fab9 	bl	b2f0 <preempt_calc>
    cd7e:	4603      	mov	r3, r0
    cd80:	b358      	cbz	r0, cdda <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    cd82:	2304      	movs	r3, #4
    cd84:	752b      	strb	r3, [r5, #20]
		radio_disable();
    cd86:	f005 f94d 	bl	12024 <radio_disable>
	packet_tx_enqueue(2);
    cd8a:	2002      	movs	r0, #2
}
    cd8c:	b002      	add	sp, #8
    cd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    cd92:	f7fd bf11 	b.w	abb8 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    cd96:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    cd98:	7fa6      	ldrb	r6, [r4, #30]
    cd9a:	fb01 6606 	mla	r6, r1, r6, r6
    cd9e:	7fe1      	ldrb	r1, [r4, #31]
    cda0:	2025      	movs	r0, #37	; 0x25
    cda2:	440e      	add	r6, r1
    cda4:	fb96 f1f0 	sdiv	r1, r6, r0
    cda8:	fb00 6611 	mls	r6, r0, r1, r6
    cdac:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cdae:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    cdb0:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cdb2:	5c51      	ldrb	r1, [r2, r1]
    cdb4:	f006 0607 	and.w	r6, r6, #7
    cdb8:	fa41 f606 	asr.w	r6, r1, r6
    cdbc:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    cdbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cdc2:	d495      	bmi.n	ccf0 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    cdc4:	fbb0 f1f3 	udiv	r1, r0, r3
    cdc8:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    cdcc:	b2c9      	uxtb	r1, r1
    cdce:	4610      	mov	r0, r2
    cdd0:	f7fc fd12 	bl	97f8 <chan_sel_remap>
    cdd4:	e78c      	b.n	ccf0 <event_slave+0xc4>
		return 24;
    cdd6:	2318      	movs	r3, #24
    cdd8:	e7c2      	b.n	cd60 <event_slave+0x134>
		ticker_status =
    cdda:	4a0e      	ldr	r2, [pc, #56]	; (ce14 <event_slave+0x1e8>)
    cddc:	4601      	mov	r1, r0
    cdde:	f7fa fecd 	bl	7b7c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cde2:	f030 0302 	bics.w	r3, r0, #2
    cde6:	d0d0      	beq.n	cd8a <event_slave+0x15e>
    cde8:	4b04      	ldr	r3, [pc, #16]	; (cdfc <event_slave+0x1d0>)
    cdea:	9301      	str	r3, [sp, #4]
    cdec:	9300      	str	r3, [sp, #0]
    cdee:	4a04      	ldr	r2, [pc, #16]	; (ce00 <event_slave+0x1d4>)
    cdf0:	4b04      	ldr	r3, [pc, #16]	; (ce04 <event_slave+0x1d8>)
    cdf2:	4905      	ldr	r1, [pc, #20]	; (ce08 <event_slave+0x1dc>)
    cdf4:	4808      	ldr	r0, [pc, #32]	; (ce18 <event_slave+0x1ec>)
    cdf6:	e72a      	b.n	cc4e <event_slave+0x22>
    cdf8:	200008c0 	.word	0x200008c0
    cdfc:	000145f1 	.word	0x000145f1
    ce00:	00015373 	.word	0x00015373
    ce04:	00016b41 	.word	0x00016b41
    ce08:	000153c2 	.word	0x000153c2
    ce0c:	00016d85 	.word	0x00016d85
    ce10:	00016e38 	.word	0x00016e38
    ce14:	0000a92d 	.word	0x0000a92d
    ce18:	00016c69 	.word	0x00016c69

0000ce1c <prepare_pdu_data_tx>:
	    conn->empty ||
    ce1c:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    ce20:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce26:	4604      	mov	r4, r0
    ce28:	460e      	mov	r6, r1
	if (/* empty packet */
    ce2a:	d109      	bne.n	ce40 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    ce2c:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    ce30:	b131      	cbz	r1, ce40 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    ce32:	f01c 0f08 	tst.w	ip, #8
    ce36:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    ce3a:	d022      	beq.n	ce82 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    ce3c:	4571      	cmp	r1, lr
    ce3e:	d020      	beq.n	ce82 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    ce40:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ce44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ce48:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    ce4c:	f005 f93c 	bl	120c8 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ce50:	7803      	ldrb	r3, [r0, #0]
    ce52:	2201      	movs	r2, #1
    ce54:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    ce58:	2200      	movs	r2, #0
    ce5a:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    ce5c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ce60:	7003      	strb	r3, [r0, #0]
    ce62:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    ce64:	b152      	cbz	r2, ce7c <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    ce66:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    ce6a:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    ce6c:	7803      	ldrb	r3, [r0, #0]
    ce6e:	f36f 1347 	bfc	r3, #5, #3
    ce72:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    ce74:	2300      	movs	r3, #0
    ce76:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    ce78:	6030      	str	r0, [r6, #0]
    ce7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    ce7c:	f362 1304 	bfi	r3, r2, #4, #1
    ce80:	e7f3      	b.n	ce6a <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    ce82:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    ce86:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    ce8a:	1d0d      	adds	r5, r1, #4
    ce8c:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    ce8e:	b913      	cbnz	r3, ce96 <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    ce90:	7843      	ldrb	r3, [r0, #1]
    ce92:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    ce96:	b122      	cbz	r2, cea2 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ce98:	5cab      	ldrb	r3, [r5, r2]
    ce9a:	2701      	movs	r7, #1
    ce9c:	f367 0301 	bfi	r3, r7, #0, #2
    cea0:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    cea2:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    cea6:	1abf      	subs	r7, r7, r2
    cea8:	b2ff      	uxtb	r7, r7
    ceaa:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    ceac:	5cab      	ldrb	r3, [r5, r2]
    ceae:	f36f 1304 	bfc	r3, #4, #1
    ceb2:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    ceb4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    ceb8:	f003 0307 	and.w	r3, r3, #7
    cebc:	2b02      	cmp	r3, #2
    cebe:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cec0:	bf15      	itete	ne
    cec2:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cec4:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cec6:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cec8:	3b0b      	subeq	r3, #11
    ceca:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    cecc:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    ced0:	bf18      	it	ne
    ced2:	3b04      	subne	r3, #4
    ced4:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    ced8:	bf18      	it	ne
    ceda:	b29b      	uxthne	r3, r3
    cedc:	4563      	cmp	r3, ip
    cede:	bf28      	it	cs
    cee0:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    cee2:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    cee4:	bf81      	itttt	hi
    cee6:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    cee8:	5cab      	ldrbhi	r3, [r5, r2]
    ceea:	f043 0310 	orrhi.w	r3, r3, #16
    ceee:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    cef0:	680b      	ldr	r3, [r1, #0]
    cef2:	b11b      	cbz	r3, cefc <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    cef4:	5cab      	ldrb	r3, [r5, r2]
    cef6:	f043 0310 	orr.w	r3, r3, #16
    cefa:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    cefc:	f1be 0f00 	cmp.w	lr, #0
    cf00:	d1b4      	bne.n	ce6c <prepare_pdu_data_tx+0x50>
    cf02:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    cf06:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    cf08:	bf1c      	itt	ne
    cf0a:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    cf0e:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    cf12:	e7ab      	b.n	ce6c <prepare_pdu_data_tx+0x50>

0000cf14 <event_master>:
{
    cf14:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf16:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cf18:	4b56      	ldr	r3, [pc, #344]	; (d074 <event_master+0x160>)
    cf1a:	7cd9      	ldrb	r1, [r3, #19]
{
    cf1c:	b085      	sub	sp, #20
    cf1e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cf20:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    cf24:	461d      	mov	r5, r3
    cf26:	b171      	cbz	r1, cf46 <event_master+0x32>
    cf28:	4b53      	ldr	r3, [pc, #332]	; (d078 <event_master+0x164>)
    cf2a:	9301      	str	r3, [sp, #4]
    cf2c:	9300      	str	r3, [sp, #0]
    cf2e:	4a53      	ldr	r2, [pc, #332]	; (d07c <event_master+0x168>)
    cf30:	4b53      	ldr	r3, [pc, #332]	; (d080 <event_master+0x16c>)
    cf32:	4954      	ldr	r1, [pc, #336]	; (d084 <event_master+0x170>)
    cf34:	4854      	ldr	r0, [pc, #336]	; (d088 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cf36:	f7f4 f829 	bl	f8c <printk>
    cf3a:	4040      	eors	r0, r0
    cf3c:	f380 8811 	msr	BASEPRI, r0
    cf40:	f04f 0004 	mov.w	r0, #4
    cf44:	df02      	svc	2
    cf46:	7c1b      	ldrb	r3, [r3, #16]
    cf48:	8c21      	ldrh	r1, [r4, #32]
    cf4a:	b2db      	uxtb	r3, r3
    cf4c:	3107      	adds	r1, #7
    cf4e:	428b      	cmp	r3, r1
    cf50:	d007      	beq.n	cf62 <event_master+0x4e>
    cf52:	4b49      	ldr	r3, [pc, #292]	; (d078 <event_master+0x164>)
    cf54:	9301      	str	r3, [sp, #4]
    cf56:	9300      	str	r3, [sp, #0]
    cf58:	4a48      	ldr	r2, [pc, #288]	; (d07c <event_master+0x168>)
    cf5a:	4b49      	ldr	r3, [pc, #292]	; (d080 <event_master+0x16c>)
    cf5c:	4949      	ldr	r1, [pc, #292]	; (d084 <event_master+0x170>)
    cf5e:	484b      	ldr	r0, [pc, #300]	; (d08c <event_master+0x178>)
    cf60:	e7e9      	b.n	cf36 <event_master+0x22>
	_radio.packet_counter = 0;
    cf62:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    cf66:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    cf6a:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    cf6c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    cf6e:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    cf70:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    cf72:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    cf74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    cf76:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    cf7a:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    cf7c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    cf7e:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    cf80:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    cf82:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    cf84:	f7fd fe18 	bl	abb8 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    cf88:	a903      	add	r1, sp, #12
    cf8a:	4620      	mov	r0, r4
    cf8c:	f7ff ff46 	bl	ce1c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    cf90:	9903      	ldr	r1, [sp, #12]
    cf92:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    cf96:	780b      	ldrb	r3, [r1, #0]
    cf98:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    cf9c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    cfa0:	f362 0382 	bfi	r3, r2, #2, #1
    cfa4:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    cfa6:	4620      	mov	r0, r4
    cfa8:	f7ff fe22 	bl	cbf0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    cfac:	2096      	movs	r0, #150	; 0x96
    cfae:	f005 f92f 	bl	12210 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    cfb2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cfb6:	f000 0007 	and.w	r0, r0, #7
    cfba:	f005 f88d 	bl	120d8 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    cfbe:	9903      	ldr	r1, [sp, #12]
    cfc0:	4620      	mov	r0, r4
    cfc2:	f7fc ffd5 	bl	9f70 <tx_packet_set>
	if (conn->data_chan_sel) {
    cfc6:	7f63      	ldrb	r3, [r4, #29]
    cfc8:	f013 0f40 	tst.w	r3, #64	; 0x40
    cfcc:	f104 0217 	add.w	r2, r4, #23
    cfd0:	d021      	beq.n	d016 <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    cfd2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    cfd4:	8be1      	ldrh	r1, [r4, #30]
    cfd6:	3801      	subs	r0, #1
    cfd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cfdc:	b280      	uxth	r0, r0
    cfde:	f7fe fbff 	bl	b7e0 <chan_sel_2>
	chan_set(data_chan_use);
    cfe2:	f7fd fed3 	bl	ad8c <chan_set>
		remainder_us = radio_tmr_start(1,
    cfe6:	68ea      	ldr	r2, [r5, #12]
    cfe8:	f107 0109 	add.w	r1, r7, #9
    cfec:	2001      	movs	r0, #1
    cfee:	f005 f91b 	bl	12228 <radio_tmr_start>
		radio_tmr_end_capture();
    cff2:	f005 f9e9 	bl	123c8 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    cff6:	f894 1020 	ldrb.w	r1, [r4, #32]
    cffa:	3107      	adds	r1, #7
    cffc:	463a      	mov	r2, r7
    cffe:	b2c9      	uxtb	r1, r1
    d000:	4620      	mov	r0, r4
    d002:	f7fe f975 	bl	b2f0 <preempt_calc>
	if (0 !=
    d006:	4603      	mov	r3, r0
    d008:	b328      	cbz	r0, d056 <event_master+0x142>
		_radio.state = STATE_STOP;
    d00a:	2304      	movs	r3, #4
    d00c:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d00e:	f005 f809 	bl	12024 <radio_disable>
}
    d012:	b005      	add	sp, #20
    d014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d016:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d018:	7fa6      	ldrb	r6, [r4, #30]
    d01a:	fb01 6606 	mla	r6, r1, r6, r6
    d01e:	7fe1      	ldrb	r1, [r4, #31]
    d020:	2025      	movs	r0, #37	; 0x25
    d022:	440e      	add	r6, r1
    d024:	fb96 f1f0 	sdiv	r1, r6, r0
    d028:	fb00 6611 	mls	r6, r0, r1, r6
    d02c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d02e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d030:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d032:	5c51      	ldrb	r1, [r2, r1]
    d034:	f006 0607 	and.w	r6, r6, #7
    d038:	fa41 f606 	asr.w	r6, r1, r6
    d03c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d03e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d042:	d4ce      	bmi.n	cfe2 <event_master+0xce>
		chan_index = chan_next % chan_count;
    d044:	fbb0 f1f3 	udiv	r1, r0, r3
    d048:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d04c:	b2c9      	uxtb	r1, r1
    d04e:	4610      	mov	r0, r2
    d050:	f7fc fbd2 	bl	97f8 <chan_sel_remap>
    d054:	e7c5      	b.n	cfe2 <event_master+0xce>
		ticker_status =
    d056:	4a0e      	ldr	r2, [pc, #56]	; (d090 <event_master+0x17c>)
    d058:	4601      	mov	r1, r0
    d05a:	f7fa fd8f 	bl	7b7c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d05e:	f030 0302 	bics.w	r3, r0, #2
    d062:	d0d6      	beq.n	d012 <event_master+0xfe>
    d064:	4b04      	ldr	r3, [pc, #16]	; (d078 <event_master+0x164>)
    d066:	9301      	str	r3, [sp, #4]
    d068:	9300      	str	r3, [sp, #0]
    d06a:	4a04      	ldr	r2, [pc, #16]	; (d07c <event_master+0x168>)
    d06c:	4b04      	ldr	r3, [pc, #16]	; (d080 <event_master+0x16c>)
    d06e:	4905      	ldr	r1, [pc, #20]	; (d084 <event_master+0x170>)
    d070:	4808      	ldr	r0, [pc, #32]	; (d094 <event_master+0x180>)
    d072:	e760      	b.n	cf36 <event_master+0x22>
    d074:	200008c0 	.word	0x200008c0
    d078:	000145f1 	.word	0x000145f1
    d07c:	00015373 	.word	0x00015373
    d080:	00016b4d 	.word	0x00016b4d
    d084:	000153c2 	.word	0x000153c2
    d088:	00016d85 	.word	0x00016d85
    d08c:	00016e38 	.word	0x00016e38
    d090:	0000a92d 	.word	0x0000a92d
    d094:	00016c69 	.word	0x00016c69

0000d098 <isr_rx_conn_pkt_ctrl>:
{
    d098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d09c:	7ac7      	ldrb	r7, [r0, #11]
{
    d09e:	4604      	mov	r4, r0
    d0a0:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d0a2:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d0a6:	2f19      	cmp	r7, #25
    d0a8:	f201 80e0 	bhi.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
    d0ac:	e8df f017 	tbh	[pc, r7, lsl #1]
    d0b0:	0081001a 	.word	0x0081001a
    d0b4:	00cc00bd 	.word	0x00cc00bd
    d0b8:	012200fa 	.word	0x012200fa
    d0bc:	05850154 	.word	0x05850154
    d0c0:	01c40190 	.word	0x01c40190
    d0c4:	021c01f2 	.word	0x021c01f2
    d0c8:	02b6024d 	.word	0x02b6024d
    d0cc:	02ce01a6 	.word	0x02ce01a6
    d0d0:	04a40421 	.word	0x04a40421
    d0d4:	057a0560 	.word	0x057a0560
    d0d8:	06480648 	.word	0x06480648
    d0dc:	07ea071d 	.word	0x07ea071d
    d0e0:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    d0e4:	4ecb      	ldr	r6, [pc, #812]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d0e6:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d0ea:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	f281 80bc 	bge.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d0f4:	7a41      	ldrb	r1, [r0, #9]
    d0f6:	2000      	movs	r0, #0
    d0f8:	f7fc fb52 	bl	97a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d0fc:	2800      	cmp	r0, #0
    d0fe:	f001 80b5 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d102:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d106:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d108:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d10a:	041b      	lsls	r3, r3, #16
    d10c:	f101 80c4 	bmi.w	e298 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d110:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d114:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d118:	429a      	cmp	r2, r3
    d11a:	d007      	beq.n	d12c <isr_rx_conn_pkt_ctrl+0x94>
    d11c:	4bbe      	ldr	r3, [pc, #760]	; (d418 <isr_rx_conn_pkt_ctrl+0x380>)
    d11e:	9301      	str	r3, [sp, #4]
    d120:	9300      	str	r3, [sp, #0]
    d122:	4bbe      	ldr	r3, [pc, #760]	; (d41c <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d124:	4abe      	ldr	r2, [pc, #760]	; (d420 <isr_rx_conn_pkt_ctrl+0x388>)
    d126:	49bf      	ldr	r1, [pc, #764]	; (d424 <isr_rx_conn_pkt_ctrl+0x38c>)
    d128:	48bf      	ldr	r0, [pc, #764]	; (d428 <isr_rx_conn_pkt_ctrl+0x390>)
    d12a:	e0f7      	b.n	d31c <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    d12c:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d130:	b90a      	cbnz	r2, d136 <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    d132:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d136:	7b22      	ldrb	r2, [r4, #12]
    d138:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d13c:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d140:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d144:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d146:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d14a:	7c20      	ldrb	r0, [r4, #16]
    d14c:	7be2      	ldrb	r2, [r4, #15]
    d14e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d152:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d156:	7ca0      	ldrb	r0, [r4, #18]
    d158:	7c62      	ldrb	r2, [r4, #17]
    d15a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d15e:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d162:	7ce2      	ldrb	r2, [r4, #19]
    d164:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d166:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d16a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d16e:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d172:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d176:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d17a:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d17e:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d180:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d184:	2201      	movs	r2, #1
    d186:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d18a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d18e:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d192:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d196:	4293      	cmp	r3, r2
    d198:	d007      	beq.n	d1aa <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d19a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d19e:	f003 0307 	and.w	r3, r3, #7
    d1a2:	2b04      	cmp	r3, #4
    d1a4:	d101      	bne.n	d1aa <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d1a6:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d1aa:	2000      	movs	r0, #0
    d1ac:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d1b0:	e038      	b.n	d224 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d1b2:	4b98      	ldr	r3, [pc, #608]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d1b4:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d1b8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	f281 8055 	bge.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d1c2:	7a41      	ldrb	r1, [r0, #9]
    d1c4:	2001      	movs	r0, #1
    d1c6:	f7fc faeb 	bl	97a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d1ca:	2800      	cmp	r0, #0
    d1cc:	f001 804e 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d1d0:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d1d4:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d1d6:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d1d8:	041f      	lsls	r7, r3, #16
    d1da:	f101 805d 	bmi.w	e298 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d1de:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d1e2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d1e6:	429a      	cmp	r2, r3
    d1e8:	d004      	beq.n	d1f4 <isr_rx_conn_pkt_ctrl+0x15c>
    d1ea:	4b8b      	ldr	r3, [pc, #556]	; (d418 <isr_rx_conn_pkt_ctrl+0x380>)
    d1ec:	9301      	str	r3, [sp, #4]
    d1ee:	9300      	str	r3, [sp, #0]
    d1f0:	4b8e      	ldr	r3, [pc, #568]	; (d42c <isr_rx_conn_pkt_ctrl+0x394>)
    d1f2:	e797      	b.n	d124 <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    d1f4:	2205      	movs	r2, #5
    d1f6:	f104 010c 	add.w	r1, r4, #12
    d1fa:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d1fe:	f7f4 fcfd 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d202:	7c63      	ldrb	r3, [r4, #17]
    d204:	7ca2      	ldrb	r2, [r4, #18]
    d206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d20a:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d20e:	2302      	movs	r3, #2
    d210:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d214:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d218:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d21a:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d21c:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d220:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d224:	b003      	add	sp, #12
    d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d22a:	7a41      	ldrb	r1, [r0, #9]
    d22c:	2002      	movs	r0, #2
    d22e:	f7fc fab7 	bl	97a0 <pdu_len_cmp>
    d232:	2800      	cmp	r0, #0
    d234:	f001 801a 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d238:	4b76      	ldr	r3, [pc, #472]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d23a:	7b22      	ldrb	r2, [r4, #12]
    d23c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d240:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d244:	2000      	movs	r0, #0
	return nack;
    d246:	e7ed      	b.n	d224 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d248:	4e72      	ldr	r6, [pc, #456]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d24a:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d24e:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d252:	2b00      	cmp	r3, #0
    d254:	f281 800a 	bge.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d258:	7a41      	ldrb	r1, [r0, #9]
    d25a:	2003      	movs	r0, #3
    d25c:	f7fc faa0 	bl	97a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d260:	2800      	cmp	r0, #0
    d262:	f001 8003 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d266:	2208      	movs	r2, #8
    d268:	f104 0116 	add.w	r1, r4, #22
    d26c:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d270:	f7f4 fcc4 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d274:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d278:	2204      	movs	r2, #4
    d27a:	f104 011e 	add.w	r1, r4, #30
    d27e:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d282:	f7f4 fcbb 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d286:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    d28a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d28e:	f042 0204 	orr.w	r2, r2, #4
    d292:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d296:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d29a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    d29e:	2301      	movs	r3, #1
    d2a0:	702b      	strb	r3, [r5, #0]
    d2a2:	e7cf      	b.n	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    d2a4:	4d5b      	ldr	r5, [pc, #364]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d2a6:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    d2aa:	f996 301d 	ldrsb.w	r3, [r6, #29]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	f2c0 87dc 	blt.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    d2b4:	7a41      	ldrb	r1, [r0, #9]
    d2b6:	2004      	movs	r0, #4
    d2b8:	f7fc fa72 	bl	97a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d2bc:	2800      	cmp	r0, #0
    d2be:	f000 87d5 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d2c2:	2208      	movs	r2, #8
    d2c4:	f104 010c 	add.w	r1, r4, #12
    d2c8:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    d2cc:	f7f4 fc96 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d2d0:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d2d4:	2204      	movs	r2, #4
    d2d6:	f104 0114 	add.w	r1, r4, #20
    d2da:	f500 708b 	add.w	r0, r0, #278	; 0x116
    d2de:	f7f4 fc8d 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d2e2:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d2e6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d2ea:	f043 0304 	orr.w	r3, r3, #4
    d2ee:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d2f2:	e7a7      	b.n	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    d2f4:	4b47      	ldr	r3, [pc, #284]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d2f6:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d2fa:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    d2fe:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d302:	42b3      	cmp	r3, r6
    d304:	d012      	beq.n	d32c <isr_rx_conn_pkt_ctrl+0x294>
    d306:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    d30a:	2b03      	cmp	r3, #3
    d30c:	d00e      	beq.n	d32c <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d30e:	4b42      	ldr	r3, [pc, #264]	; (d418 <isr_rx_conn_pkt_ctrl+0x380>)
    d310:	9301      	str	r3, [sp, #4]
    d312:	9300      	str	r3, [sp, #0]
    d314:	4a42      	ldr	r2, [pc, #264]	; (d420 <isr_rx_conn_pkt_ctrl+0x388>)
    d316:	4b46      	ldr	r3, [pc, #280]	; (d430 <isr_rx_conn_pkt_ctrl+0x398>)
    d318:	4942      	ldr	r1, [pc, #264]	; (d424 <isr_rx_conn_pkt_ctrl+0x38c>)
    d31a:	4846      	ldr	r0, [pc, #280]	; (d434 <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d31c:	f7f3 fe36 	bl	f8c <printk>
    d320:	4040      	eors	r0, r0
    d322:	f380 8811 	msr	BASEPRI, r0
    d326:	f04f 0004 	mov.w	r0, #4
    d32a:	df02      	svc	2
		if (_radio.conn_curr->role ||
    d32c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d330:	2b00      	cmp	r3, #0
    d332:	f2c0 879b 	blt.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    d336:	7a61      	ldrb	r1, [r4, #9]
    d338:	2005      	movs	r0, #5
    d33a:	f7fc fa31 	bl	97a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d33e:	2800      	cmp	r0, #0
    d340:	f000 8794 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d344:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d346:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    d348:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d34a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d34e:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    d352:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    d356:	e765      	b.n	d224 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d358:	7a41      	ldrb	r1, [r0, #9]
    d35a:	2006      	movs	r0, #6
    d35c:	f7fc fa20 	bl	97a0 <pdu_len_cmp>
    d360:	2800      	cmp	r0, #0
    d362:	f000 8783 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    d366:	4b2b      	ldr	r3, [pc, #172]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d368:	7cda      	ldrb	r2, [r3, #19]
    d36a:	2a03      	cmp	r2, #3
    d36c:	4619      	mov	r1, r3
    d36e:	d124      	bne.n	d3ba <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d370:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d374:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d378:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    d37c:	4290      	cmp	r0, r2
    d37e:	d003      	beq.n	d388 <isr_rx_conn_pkt_ctrl+0x2f0>
    d380:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    d384:	2803      	cmp	r0, #3
    d386:	d1c2      	bne.n	d30e <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d388:	2000      	movs	r0, #0
    d38a:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d38e:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d390:	2003      	movs	r0, #3
    d392:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d396:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d39a:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    d39e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d3a2:	065e      	lsls	r6, r3, #25
    d3a4:	d505      	bpl.n	d3b2 <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    d3a6:	f36f 1386 	bfc	r3, #6, #1
    d3aa:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d3ae:	2309      	movs	r3, #9
    d3b0:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d3b2:	2301      	movs	r3, #1
    d3b4:	702b      	strb	r3, [r5, #0]
				break;
    d3b6:	f000 bcbf 	b.w	dd38 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    d3ba:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d3be:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d3c2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d3c6:	f36f 03c3 	bfc	r3, #3, #1
    d3ca:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d3ce:	e7e4      	b.n	d39a <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    d3d0:	4b10      	ldr	r3, [pc, #64]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d3d2:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d3d6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d3da:	2b00      	cmp	r3, #0
    d3dc:	f280 8746 	bge.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d3e0:	7a41      	ldrb	r1, [r0, #9]
    d3e2:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d3e4:	f7fc f9dc 	bl	97a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d3e8:	2800      	cmp	r0, #0
    d3ea:	f000 873f 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d3ee:	4631      	mov	r1, r6
    d3f0:	4628      	mov	r0, r5
}
    d3f2:	b003      	add	sp, #12
    d3f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d3f8:	f7fe ba7e 	b.w	b8f8 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d3fc:	4b05      	ldr	r3, [pc, #20]	; (d414 <isr_rx_conn_pkt_ctrl+0x37c>)
    d3fe:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d402:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d406:	2b00      	cmp	r3, #0
    d408:	f2c0 8730 	blt.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d40c:	7a41      	ldrb	r1, [r0, #9]
    d40e:	200e      	movs	r0, #14
    d410:	e7e8      	b.n	d3e4 <isr_rx_conn_pkt_ctrl+0x34c>
    d412:	bf00      	nop
    d414:	200008c0 	.word	0x200008c0
    d418:	000145f1 	.word	0x000145f1
    d41c:	00016bac 	.word	0x00016bac
    d420:	00015373 	.word	0x00015373
    d424:	000153c2 	.word	0x000153c2
    d428:	00017034 	.word	0x00017034
    d42c:	00016bb8 	.word	0x00016bb8
    d430:	0001685e 	.word	0x0001685e
    d434:	00017076 	.word	0x00017076
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d438:	7a41      	ldrb	r1, [r0, #9]
    d43a:	2009      	movs	r0, #9
    d43c:	f7fc f9b0 	bl	97a0 <pdu_len_cmp>
    d440:	2800      	cmp	r0, #0
    d442:	f000 8713 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d446:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d448:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d44a:	48b2      	ldr	r0, [pc, #712]	; (d714 <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d44c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d450:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d454:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d458:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d45c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d460:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d464:	7ba1      	ldrb	r1, [r4, #14]
    d466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d46a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d46e:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d472:	400b      	ands	r3, r1
    d474:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d478:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d47c:	f043 0320 	orr.w	r3, r3, #32
    d480:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d484:	2301      	movs	r3, #1
    d486:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d488:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    d48c:	2000      	movs	r0, #0
    d48e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d492:	e6c7      	b.n	d224 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d494:	4e9f      	ldr	r6, [pc, #636]	; (d714 <isr_rx_conn_pkt_ctrl+0x67c>)
    d496:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d49a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d49e:	2b00      	cmp	r3, #0
    d4a0:	f280 86e4 	bge.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d4a4:	7a41      	ldrb	r1, [r0, #9]
    d4a6:	200a      	movs	r0, #10
    d4a8:	f7fc f97a 	bl	97a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d4ac:	2800      	cmp	r0, #0
    d4ae:	f000 86dd 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d4b2:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    d4b6:	f7f9 fbbc 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    d4ba:	4601      	mov	r1, r0
    d4bc:	b908      	cbnz	r0, d4c2 <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d4be:	2001      	movs	r0, #1
    d4c0:	e6b0      	b.n	d224 <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    d4c2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d4c6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d4ca:	f36f 1304 	bfc	r3, #4, #1
    d4ce:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d4d2:	7903      	ldrb	r3, [r0, #4]
    d4d4:	f043 0303 	orr.w	r3, r3, #3
    d4d8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d4da:	2301      	movs	r3, #1
    d4dc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d4de:	230b      	movs	r3, #11
    d4e0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d4e2:	4628      	mov	r0, r5
    d4e4:	f000 bcdc 	b.w	dea0 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d4e8:	7a41      	ldrb	r1, [r0, #9]
    d4ea:	200b      	movs	r0, #11
    d4ec:	f7fc f958 	bl	97a0 <pdu_len_cmp>
    d4f0:	2800      	cmp	r0, #0
    d4f2:	f000 86bb 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d4f6:	4887      	ldr	r0, [pc, #540]	; (d714 <isr_rx_conn_pkt_ctrl+0x67c>)
    d4f8:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    d4fc:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d500:	2b00      	cmp	r3, #0
    d502:	db1b      	blt.n	d53c <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d504:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d508:	f7f9 fb93 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    d50c:	4601      	mov	r1, r0
    d50e:	2800      	cmp	r0, #0
    d510:	d0d5      	beq.n	d4be <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    d512:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d516:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d51a:	f043 0304 	orr.w	r3, r3, #4
    d51e:	f36f 1304 	bfc	r3, #4, #1
    d522:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d526:	7903      	ldrb	r3, [r0, #4]
    d528:	f043 0303 	orr.w	r3, r3, #3
    d52c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d52e:	2301      	movs	r3, #1
    d530:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d532:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d534:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d536:	4620      	mov	r0, r4
    d538:	f000 bcb2 	b.w	dea0 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    d53c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d540:	f36f 1345 	bfc	r3, #5, #1
    d544:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d548:	e67c      	b.n	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d54a:	7a41      	ldrb	r1, [r0, #9]
    d54c:	200c      	movs	r0, #12
    d54e:	f7fc f927 	bl	97a0 <pdu_len_cmp>
    d552:	2800      	cmp	r0, #0
    d554:	f000 868a 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d558:	486e      	ldr	r0, [pc, #440]	; (d714 <isr_rx_conn_pkt_ctrl+0x67c>)
    d55a:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    d55e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d562:	f013 0701 	ands.w	r7, r3, #1
    d566:	d150      	bne.n	d60a <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d568:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d56c:	f7f9 fb61 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    d570:	4601      	mov	r1, r0
    d572:	2800      	cmp	r0, #0
    d574:	d0a3      	beq.n	d4be <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    d576:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d57a:	f043 0301 	orr.w	r3, r3, #1
    d57e:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d582:	7903      	ldrb	r3, [r0, #4]
    d584:	f043 0303 	orr.w	r3, r3, #3
    d588:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d58a:	2306      	movs	r3, #6
    d58c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d58e:	230c      	movs	r3, #12
    d590:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d592:	2309      	movs	r3, #9
    d594:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d596:	f06f 030e 	mvn.w	r3, #14
    d59a:	7243      	strb	r3, [r0, #9]
    d59c:	2305      	movs	r3, #5
    d59e:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d5a4:	72c3      	strb	r3, [r0, #11]
    d5a6:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d5a8:	4630      	mov	r0, r6
    d5aa:	f7fe f98b 	bl	b8c4 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d5ae:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5b6:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d5ba:	f004 fd85 	bl	120c8 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5be:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    d5c0:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5c2:	2201      	movs	r2, #1
    d5c4:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    d5c8:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5cc:	7003      	strb	r3, [r0, #0]
    d5ce:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d5d0:	b1c2      	cbz	r2, d604 <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    d5d2:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d5d6:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    d5d8:	7b23      	ldrb	r3, [r4, #12]
    d5da:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    d5de:	7ba2      	ldrb	r2, [r4, #14]
    d5e0:	7b63      	ldrb	r3, [r4, #13]
    d5e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d5e6:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    d5ea:	7be3      	ldrb	r3, [r4, #15]
    d5ec:	7c22      	ldrb	r2, [r4, #16]
    d5ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d5f2:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    d5f6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d5fa:	f043 0302 	orr.w	r3, r3, #2
    d5fe:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    d602:	e61f      	b.n	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    d604:	f362 1304 	bfi	r3, r2, #4, #1
    d608:	e7e5      	b.n	d5d6 <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    d60a:	f013 0302 	ands.w	r3, r3, #2
    d60e:	f47f ae19 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    d612:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    d616:	2301      	movs	r3, #1
    d618:	702b      	strb	r3, [r5, #0]
    d61a:	e7dd      	b.n	d5d8 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    d61c:	7a41      	ldrb	r1, [r0, #9]
    d61e:	200d      	movs	r0, #13
    d620:	f7fc f8be 	bl	97a0 <pdu_len_cmp>
    d624:	2800      	cmp	r0, #0
    d626:	f000 8621 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    d62a:	4b3a      	ldr	r3, [pc, #232]	; (d714 <isr_rx_conn_pkt_ctrl+0x67c>)
    d62c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d630:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d634:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d638:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    d63c:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    d63e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d642:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    d646:	2301      	movs	r3, #1
    d648:	702b      	strb	r3, [r5, #0]
    d64a:	e5eb      	b.n	d224 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    d64c:	7a41      	ldrb	r1, [r0, #9]
    d64e:	200f      	movs	r0, #15
    d650:	f7fc f8a6 	bl	97a0 <pdu_len_cmp>
    d654:	2800      	cmp	r0, #0
    d656:	f000 8609 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    d65a:	4b2e      	ldr	r3, [pc, #184]	; (d714 <isr_rx_conn_pkt_ctrl+0x67c>)
    d65c:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    d660:	461a      	mov	r2, r3
    d662:	b151      	cbz	r1, d67a <isr_rx_conn_pkt_ctrl+0x5e2>
    d664:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    d668:	4281      	cmp	r1, r0
    d66a:	d006      	beq.n	d67a <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    d66c:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    d66e:	210f      	movs	r1, #15
}
    d670:	b003      	add	sp, #12
    d672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    d676:	f7fe b9a9 	b.w	b9cc <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    d67a:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    d67e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d682:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d686:	2b00      	cmp	r3, #0
    d688:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d68c:	f2c0 80a7 	blt.w	d7de <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    d690:	4299      	cmp	r1, r3
    d692:	d009      	beq.n	d6a8 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    d694:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    d698:	f013 0307 	ands.w	r3, r3, #7
    d69c:	d002      	beq.n	d6a4 <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    d69e:	3b04      	subs	r3, #4
    d6a0:	2b01      	cmp	r3, #1
    d6a2:	d801      	bhi.n	d6a8 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d6a4:	2223      	movs	r2, #35	; 0x23
    d6a6:	e7e2      	b.n	d66e <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    d6a8:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    d6ac:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    d6b0:	4299      	cmp	r1, r3
    d6b2:	d003      	beq.n	d6bc <isr_rx_conn_pkt_ctrl+0x624>
    d6b4:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    d6b8:	2b03      	cmp	r3, #3
    d6ba:	d105      	bne.n	d6c8 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    d6bc:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    d6c0:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    d6c4:	4299      	cmp	r1, r3
    d6c6:	d001      	beq.n	d6cc <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d6c8:	222a      	movs	r2, #42	; 0x2a
    d6ca:	e7d0      	b.n	d66e <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    d6cc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d6d0:	4643      	mov	r3, r8
    d6d2:	2b05      	cmp	r3, #5
    d6d4:	d91b      	bls.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    d6d6:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    d6d8:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d6dc:	d817      	bhi.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    d6de:	45b8      	cmp	r8, r7
    d6e0:	d815      	bhi.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    d6e2:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    d6e6:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d6ea:	d210      	bcs.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    d6ec:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    d6f0:	f1ae 060a 	sub.w	r6, lr, #10
    d6f4:	b2b6      	uxth	r6, r6
    d6f6:	f640 4976 	movw	r9, #3190	; 0xc76
    d6fa:	454e      	cmp	r6, r9
    d6fc:	d807      	bhi.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    d6fe:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    d702:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d706:	da02      	bge.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    d708:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    d70a:	428f      	cmp	r7, r1
    d70c:	d204      	bcs.n	d718 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    d70e:	221e      	movs	r2, #30
    d710:	e7ad      	b.n	d66e <isr_rx_conn_pkt_ctrl+0x5d6>
    d712:	bf00      	nop
    d714:	200008c0 	.word	0x200008c0
				conn->llcp_conn_param.interval = cpr->interval_min;
    d718:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    d71c:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    d720:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    d724:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    d728:	7da6      	ldrb	r6, [r4, #22]
    d72a:	7d61      	ldrb	r1, [r4, #21]
    d72c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    d730:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    d734:	7e26      	ldrb	r6, [r4, #24]
    d736:	7de1      	ldrb	r1, [r4, #23]
    d738:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d73c:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    d740:	7ea6      	ldrb	r6, [r4, #26]
    d742:	7e61      	ldrb	r1, [r4, #25]
    d744:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d748:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    d74c:	7f26      	ldrb	r6, [r4, #28]
    d74e:	7ee1      	ldrb	r1, [r4, #27]
    d750:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d754:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    d758:	7fa6      	ldrb	r6, [r4, #30]
    d75a:	7f61      	ldrb	r1, [r4, #29]
    d75c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d760:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    d764:	7fe1      	ldrb	r1, [r4, #31]
    d766:	f894 6020 	ldrb.w	r6, [r4, #32]
    d76a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d76e:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    d772:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d776:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d77a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d77e:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    d782:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d786:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d788:	428c      	cmp	r4, r1
    d78a:	d10f      	bne.n	d7ac <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d78c:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d78e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d792:	4361      	muls	r1, r4
    d794:	f242 7410 	movw	r4, #10000	; 0x2710
    d798:	fb04 130e 	mla	r3, r4, lr, r1
    d79c:	3b01      	subs	r3, #1
    d79e:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    d7a2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d7a4:	b29b      	uxth	r3, r3
    d7a6:	4299      	cmp	r1, r3
    d7a8:	f000 8092 	beq.w	d8d0 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    d7ac:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    d7b0:	071c      	lsls	r4, r3, #28
    d7b2:	f140 8087 	bpl.w	d8c4 <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    d7b6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d7ba:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    d7bc:	f361 0302 	bfi	r3, r1, #0, #3
    d7c0:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    d7c4:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d7c8:	3b01      	subs	r3, #1
    d7ca:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    d7ce:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	f47f ad36 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    d7d8:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    d7dc:	e532      	b.n	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    d7de:	4299      	cmp	r1, r3
    d7e0:	d003      	beq.n	d7ea <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    d7e2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d7e6:	0799      	lsls	r1, r3, #30
    d7e8:	d17b      	bne.n	d8e2 <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    d7ea:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d7ee:	4643      	mov	r3, r8
    d7f0:	2b05      	cmp	r3, #5
    d7f2:	d98c      	bls.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    d7f4:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d7f6:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d7fa:	d888      	bhi.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    d7fc:	45b8      	cmp	r8, r7
    d7fe:	d886      	bhi.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    d800:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    d804:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d808:	d281      	bcs.n	d70e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d80a:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    d80e:	f1ae 060a 	sub.w	r6, lr, #10
    d812:	b2b6      	uxth	r6, r6
    d814:	f640 4976 	movw	r9, #3190	; 0xc76
    d818:	454e      	cmp	r6, r9
    d81a:	f63f af78 	bhi.w	d70e <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d81e:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d822:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d826:	f6bf af72 	bge.w	d70e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d82a:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    d82c:	428f      	cmp	r7, r1
    d82e:	f4ff af6e 	bcc.w	d70e <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    d832:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d836:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d83a:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d83e:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    d842:	7da6      	ldrb	r6, [r4, #22]
    d844:	7d61      	ldrb	r1, [r4, #21]
    d846:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d84a:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d84e:	7e26      	ldrb	r6, [r4, #24]
    d850:	7de1      	ldrb	r1, [r4, #23]
    d852:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d856:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d85a:	7ea6      	ldrb	r6, [r4, #26]
    d85c:	7e61      	ldrb	r1, [r4, #25]
    d85e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d862:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d866:	7f26      	ldrb	r6, [r4, #28]
    d868:	7ee1      	ldrb	r1, [r4, #27]
    d86a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d86e:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d872:	7fa6      	ldrb	r6, [r4, #30]
    d874:	7f61      	ldrb	r1, [r4, #29]
    d876:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d87a:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d87e:	7fe1      	ldrb	r1, [r4, #31]
    d880:	f894 6020 	ldrb.w	r6, [r4, #32]
    d884:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d888:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d88c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d890:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d894:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d898:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    d89c:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d8a0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d8a2:	428c      	cmp	r4, r1
    d8a4:	d10e      	bne.n	d8c4 <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d8a6:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d8a8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8ac:	4361      	muls	r1, r4
    d8ae:	f242 7410 	movw	r4, #10000	; 0x2710
    d8b2:	fb04 130e 	mla	r3, r4, lr, r1
    d8b6:	3b01      	subs	r3, #1
    d8b8:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    d8bc:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d8be:	b29b      	uxth	r3, r3
    d8c0:	4299      	cmp	r1, r3
    d8c2:	d005      	beq.n	d8d0 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    d8c4:	2301      	movs	r3, #1
    d8c6:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    d8c8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d8cc:	2103      	movs	r1, #3
    d8ce:	e775      	b.n	d7bc <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    d8d0:	2300      	movs	r3, #0
    d8d2:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    d8d6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    d8da:	2101      	movs	r1, #1
    d8dc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d8e0:	e76c      	b.n	d7bc <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    d8e2:	4bc9      	ldr	r3, [pc, #804]	; (dc08 <isr_rx_conn_pkt_ctrl+0xb70>)
    d8e4:	9301      	str	r3, [sp, #4]
    d8e6:	9300      	str	r3, [sp, #0]
    d8e8:	4ac8      	ldr	r2, [pc, #800]	; (dc0c <isr_rx_conn_pkt_ctrl+0xb74>)
    d8ea:	4bc9      	ldr	r3, [pc, #804]	; (dc10 <isr_rx_conn_pkt_ctrl+0xb78>)
    d8ec:	49c9      	ldr	r1, [pc, #804]	; (dc14 <isr_rx_conn_pkt_ctrl+0xb7c>)
    d8ee:	48ca      	ldr	r0, [pc, #808]	; (dc18 <isr_rx_conn_pkt_ctrl+0xb80>)
    d8f0:	e514      	b.n	d31c <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    d8f2:	4bca      	ldr	r3, [pc, #808]	; (dc1c <isr_rx_conn_pkt_ctrl+0xb84>)
    d8f4:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d8f8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	f2c0 84b5 	blt.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    d902:	7a41      	ldrb	r1, [r0, #9]
    d904:	2010      	movs	r0, #16
    d906:	f7fb ff4b 	bl	97a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d90a:	2800      	cmp	r0, #0
    d90c:	f000 84ae 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    d910:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d914:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d918:	429a      	cmp	r2, r3
    d91a:	f43f ac93 	beq.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    d91e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    d922:	f003 0307 	and.w	r3, r3, #7
    d926:	2b04      	cmp	r3, #4
    d928:	f47f ac8c 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    d92c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    d930:	fa1f f28e 	uxth.w	r2, lr
    d934:	2a05      	cmp	r2, #5
    d936:	d91b      	bls.n	d970 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    d938:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d93a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    d93e:	d817      	bhi.n	d970 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    d940:	429a      	cmp	r2, r3
    d942:	d815      	bhi.n	d970 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    d944:	8a27      	ldrh	r7, [r4, #16]
    d946:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    d948:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    d94c:	d210      	bcs.n	d970 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d94e:	8a66      	ldrh	r6, [r4, #18]
    d950:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    d952:	f1a0 010a 	sub.w	r1, r0, #10
    d956:	b289      	uxth	r1, r1
    d958:	f640 4c76 	movw	ip, #3190	; 0xc76
    d95c:	4561      	cmp	r1, ip
    d95e:	d807      	bhi.n	d970 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d960:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d964:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    d968:	da02      	bge.n	d970 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d96a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    d96c:	4293      	cmp	r3, r2
    d96e:	d203      	bcs.n	d978 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    d970:	221e      	movs	r2, #30
    d972:	2110      	movs	r1, #16
    d974:	4628      	mov	r0, r5
    d976:	e67b      	b.n	d670 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    d978:	2000      	movs	r0, #0
    d97a:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    d97e:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d982:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d986:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d98a:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    d98e:	7da2      	ldrb	r2, [r4, #22]
    d990:	7d63      	ldrb	r3, [r4, #21]
    d992:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d996:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d99a:	7e22      	ldrb	r2, [r4, #24]
    d99c:	7de3      	ldrb	r3, [r4, #23]
    d99e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9a2:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d9a6:	7ea2      	ldrb	r2, [r4, #26]
    d9a8:	7e63      	ldrb	r3, [r4, #25]
    d9aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9ae:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d9b2:	7f22      	ldrb	r2, [r4, #28]
    d9b4:	7ee3      	ldrb	r3, [r4, #27]
    d9b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9ba:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d9be:	7fa2      	ldrb	r2, [r4, #30]
    d9c0:	7f63      	ldrb	r3, [r4, #29]
    d9c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9c6:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d9ca:	f894 2020 	ldrb.w	r2, [r4, #32]
    d9ce:	7fe3      	ldrb	r3, [r4, #31]
    d9d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9d4:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d9d8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    d9dc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d9e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9e4:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    d9e8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    d9ec:	2201      	movs	r2, #1
    d9ee:	f362 0302 	bfi	r3, r2, #0, #3
    d9f2:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    d9f6:	e415      	b.n	d224 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    d9f8:	7a41      	ldrb	r1, [r0, #9]
    d9fa:	2011      	movs	r0, #17
    d9fc:	f7fb fed0 	bl	97a0 <pdu_len_cmp>
    da00:	2800      	cmp	r0, #0
    da02:	f000 8433 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    da06:	4a85      	ldr	r2, [pc, #532]	; (dc1c <isr_rx_conn_pkt_ctrl+0xb84>)
    da08:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    da0c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    da10:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    da14:	4281      	cmp	r1, r0
    da16:	7b21      	ldrb	r1, [r4, #12]
    da18:	d027      	beq.n	da6a <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    da1a:	2916      	cmp	r1, #22
    da1c:	f47f ac12 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    da20:	7b61      	ldrb	r1, [r4, #13]
    da22:	2923      	cmp	r1, #35	; 0x23
    da24:	d00e      	beq.n	da44 <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    da26:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    da2a:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    da2e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    da32:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    da36:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    da3a:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    da3c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    da40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    da44:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    da48:	0792      	lsls	r2, r2, #30
    da4a:	f57f abfb 	bpl.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    da4e:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    da50:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    da52:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    da54:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    da58:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    da5c:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    da5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    da62:	f3c3 0302 	ubfx	r3, r3, #0, #3
    da66:	7363      	strb	r3, [r4, #13]
    da68:	e419      	b.n	d29e <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    da6a:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    da6e:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    da72:	42b8      	cmp	r0, r7
    da74:	d048      	beq.n	db08 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    da76:	290f      	cmp	r1, #15
    da78:	f47f abe4 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
    da7c:	f993 001d 	ldrsb.w	r0, [r3, #29]
    da80:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    da82:	2800      	cmp	r0, #0
    da84:	db0e      	blt.n	daa4 <isr_rx_conn_pkt_ctrl+0xa0c>
    da86:	291a      	cmp	r1, #26
    da88:	d10c      	bne.n	daa4 <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    da8a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    da8e:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    da92:	4294      	cmp	r4, r2
    da94:	f000 80c8 	beq.w	dc28 <isr_rx_conn_pkt_ctrl+0xb90>
    da98:	4b5b      	ldr	r3, [pc, #364]	; (dc08 <isr_rx_conn_pkt_ctrl+0xb70>)
    da9a:	9301      	str	r3, [sp, #4]
    da9c:	9300      	str	r3, [sp, #0]
    da9e:	4b60      	ldr	r3, [pc, #384]	; (dc20 <isr_rx_conn_pkt_ctrl+0xb88>)
    daa0:	f7ff bb40 	b.w	d124 <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    daa4:	2923      	cmp	r1, #35	; 0x23
    daa6:	d018      	beq.n	dada <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    daa8:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    daac:	42b3      	cmp	r3, r6
    daae:	d007      	beq.n	dac0 <isr_rx_conn_pkt_ctrl+0xa28>
    dab0:	4b55      	ldr	r3, [pc, #340]	; (dc08 <isr_rx_conn_pkt_ctrl+0xb70>)
    dab2:	9301      	str	r3, [sp, #4]
    dab4:	9300      	str	r3, [sp, #0]
    dab6:	4b5a      	ldr	r3, [pc, #360]	; (dc20 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    dab8:	4a54      	ldr	r2, [pc, #336]	; (dc0c <isr_rx_conn_pkt_ctrl+0xb74>)
    daba:	4956      	ldr	r1, [pc, #344]	; (dc14 <isr_rx_conn_pkt_ctrl+0xb7c>)
    dabc:	4859      	ldr	r0, [pc, #356]	; (dc24 <isr_rx_conn_pkt_ctrl+0xb8c>)
    dabe:	e42d      	b.n	d31c <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    dac0:	2600      	movs	r6, #0
		if (conn->role) {
    dac2:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    dac4:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    dac8:	bfb8      	it	lt
    daca:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    dace:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    dad2:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    dad6:	bfb8      	it	lt
    dad8:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    dada:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    dade:	0717      	lsls	r7, r2, #28
    dae0:	f57f abb0 	bpl.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    dae4:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dae6:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    dae8:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    daea:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    daec:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    daee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    daf0:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    daf2:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    daf4:	237d      	movs	r3, #125	; 0x7d
    daf6:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    daf8:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    dafa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dafe:	fb93 f3f2 	sdiv	r3, r3, r2
    db02:	8223      	strh	r3, [r4, #16]
    db04:	f7ff bbcb 	b.w	d29e <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    db08:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    db0c:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    db10:	4290      	cmp	r0, r2
    db12:	d01a      	beq.n	db4a <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    db14:	2914      	cmp	r1, #20
    db16:	f47f ab95 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    db1a:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    db1e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    db22:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    db24:	f360 02c3 	bfi	r2, r0, #3, #1
    db28:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    db2c:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    db2e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    db32:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    db34:	2215      	movs	r2, #21
    db36:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    db38:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    db3a:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    db3c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    db3e:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    db40:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    db42:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    db44:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    db46:	8263      	strh	r3, [r4, #18]
    db48:	e57d      	b.n	d646 <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    db4a:	2903      	cmp	r1, #3
    db4c:	f47f ab7a 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    db50:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    db54:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    db58:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    db5c:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    db5e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    db62:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    db66:	230d      	movs	r3, #13
    db68:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    db6a:	7b63      	ldrb	r3, [r4, #13]
    db6c:	7323      	strb	r3, [r4, #12]
    db6e:	e56a      	b.n	d646 <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    db70:	7a41      	ldrb	r1, [r0, #9]
    db72:	2012      	movs	r0, #18
    db74:	f7fb fe14 	bl	97a0 <pdu_len_cmp>
    db78:	2800      	cmp	r0, #0
    db7a:	f000 8377 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    db7e:	4827      	ldr	r0, [pc, #156]	; (dc1c <isr_rx_conn_pkt_ctrl+0xb84>)
    db80:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    db84:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    db88:	f7f9 f853 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    db8c:	4601      	mov	r1, r0
    db8e:	2800      	cmp	r0, #0
    db90:	f43f ac95 	beq.w	d4be <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db94:	7903      	ldrb	r3, [r0, #4]
    db96:	f043 0303 	orr.w	r3, r3, #3
    db9a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    db9c:	2301      	movs	r3, #1
    db9e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    dba0:	2313      	movs	r3, #19
    dba2:	e4c7      	b.n	d534 <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    dba4:	7a41      	ldrb	r1, [r0, #9]
    dba6:	2013      	movs	r0, #19
    dba8:	f7fb fdfa 	bl	97a0 <pdu_len_cmp>
    dbac:	2800      	cmp	r0, #0
    dbae:	f000 835d 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    dbb2:	4b1a      	ldr	r3, [pc, #104]	; (dc1c <isr_rx_conn_pkt_ctrl+0xb84>)
    dbb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    dbb8:	e468      	b.n	d48c <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    dbba:	7a41      	ldrb	r1, [r0, #9]
    dbbc:	2007      	movs	r0, #7
    dbbe:	f7fb fdef 	bl	97a0 <pdu_len_cmp>
    dbc2:	2800      	cmp	r0, #0
    dbc4:	f000 8352 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dbc8:	4a14      	ldr	r2, [pc, #80]	; (dc1c <isr_rx_conn_pkt_ctrl+0xb84>)
    dbca:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    dbce:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    dbd2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dbd6:	42b1      	cmp	r1, r6
    dbd8:	4611      	mov	r1, r2
    dbda:	d077      	beq.n	dccc <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    dbdc:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    dbe0:	f040 0010 	orr.w	r0, r0, #16
    dbe4:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    dbe8:	f993 001d 	ldrsb.w	r0, [r3, #29]
    dbec:	2800      	cmp	r0, #0
    dbee:	db47      	blt.n	dc80 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dbf0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    dbf4:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    dbf8:	4294      	cmp	r4, r2
    dbfa:	d015      	beq.n	dc28 <isr_rx_conn_pkt_ctrl+0xb90>
    dbfc:	4b02      	ldr	r3, [pc, #8]	; (dc08 <isr_rx_conn_pkt_ctrl+0xb70>)
    dbfe:	9301      	str	r3, [sp, #4]
    dc00:	9300      	str	r3, [sp, #0]
    dc02:	4b03      	ldr	r3, [pc, #12]	; (dc10 <isr_rx_conn_pkt_ctrl+0xb78>)
    dc04:	f7ff ba8e 	b.w	d124 <isr_rx_conn_pkt_ctrl+0x8c>
    dc08:	000145f1 	.word	0x000145f1
    dc0c:	00015373 	.word	0x00015373
    dc10:	0001685e 	.word	0x0001685e
    dc14:	000153c2 	.word	0x000153c2
    dc18:	00015312 	.word	0x00015312
    dc1c:	200008c0 	.word	0x200008c0
    dc20:	00016823 	.word	0x00016823
    dc24:	00017106 	.word	0x00017106
				conn->llcp_conn_param.state =
    dc28:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    dc2c:	2105      	movs	r1, #5
    dc2e:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    dc32:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    dc36:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    dc3a:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    dc3e:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    dc42:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    dc46:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dc4a:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    dc4e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    dc52:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    dc54:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dc58:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    dc5c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    dc60:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    dc62:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    dc66:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    dc68:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    dc6c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    dc70:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    dc74:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    dc78:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    dc7c:	f7ff bad2 	b.w	d224 <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    dc80:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    dc84:	4293      	cmp	r3, r2
    dc86:	d004      	beq.n	dc92 <isr_rx_conn_pkt_ctrl+0xbfa>
    dc88:	4bc9      	ldr	r3, [pc, #804]	; (dfb0 <isr_rx_conn_pkt_ctrl+0xf18>)
    dc8a:	9301      	str	r3, [sp, #4]
    dc8c:	9300      	str	r3, [sp, #0]
    dc8e:	4bc9      	ldr	r3, [pc, #804]	; (dfb4 <isr_rx_conn_pkt_ctrl+0xf1c>)
    dc90:	e712      	b.n	dab8 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    dc92:	2200      	movs	r2, #0
    dc94:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    dc98:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    dc9c:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    dca0:	0716      	lsls	r6, r2, #28
    dca2:	f57f aacf 	bpl.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dca6:	2208      	movs	r2, #8
    dca8:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    dcaa:	221a      	movs	r2, #26
    dcac:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    dcae:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    dcb0:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    dcb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    dcb4:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    dcb6:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    dcb8:	237d      	movs	r3, #125	; 0x7d
    dcba:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    dcbc:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    dcbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dcc2:	fb93 f3f2 	sdiv	r3, r3, r2
    dcc6:	8223      	strh	r3, [r4, #16]
    dcc8:	f7ff bb73 	b.w	d3b2 <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    dccc:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    dcd0:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    dcd4:	4290      	cmp	r0, r2
    dcd6:	d009      	beq.n	dcec <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    dcd8:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    dcdc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    dce0:	f36f 02c3 	bfc	r2, #3, #1
    dce4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    dce8:	f7ff bb63 	b.w	d3b2 <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    dcec:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    dcf0:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    dcf4:	4290      	cmp	r0, r2
    dcf6:	d01b      	beq.n	dd30 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    dcf8:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    dcfc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    dd00:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    dd04:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    dd08:	f362 0002 	bfi	r0, r2, #0, #3
    dd0c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    dd10:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    dd14:	0780      	lsls	r0, r0, #30
    dd16:	d50f      	bpl.n	dd38 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    dd18:	200c      	movs	r0, #12
    dd1a:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    dd1c:	2000      	movs	r0, #0
    dd1e:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    dd20:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    dd22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    dd26:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dd2a:	7363      	strb	r3, [r4, #13]
    dd2c:	f7ff bb41 	b.w	d3b2 <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    dd30:	7b23      	ldrb	r3, [r4, #12]
    dd32:	2b12      	cmp	r3, #18
    dd34:	f47f ab3d 	bne.w	d3b2 <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    dd38:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    dd3c:	f7ff bba6 	b.w	d48c <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    dd40:	7a41      	ldrb	r1, [r0, #9]
    dd42:	2014      	movs	r0, #20
    dd44:	f7fb fd2c 	bl	97a0 <pdu_len_cmp>
    dd48:	2800      	cmp	r0, #0
    dd4a:	f000 828f 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    dd4e:	2f14      	cmp	r7, #20
    dd50:	d127      	bne.n	dda2 <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dd52:	4899      	ldr	r0, [pc, #612]	; (dfb8 <isr_rx_conn_pkt_ctrl+0xf20>)
    dd54:	f7f8 ff6d 	bl	6c32 <mem_acquire>
		if (!node_tx) {
    dd58:	4606      	mov	r6, r0
    dd5a:	2800      	cmp	r0, #0
    dd5c:	f43f abaf 	beq.w	d4be <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    dd60:	4f96      	ldr	r7, [pc, #600]	; (dfbc <isr_rx_conn_pkt_ctrl+0xf24>)
    dd62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    dd66:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    dd6a:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    dd6e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    dd70:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    dd72:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    dd74:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    dd78:	45e0      	cmp	r8, ip
    dd7a:	46b9      	mov	r9, r7
    dd7c:	f894 800b 	ldrb.w	r8, [r4, #11]
    dd80:	d111      	bne.n	dda6 <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    dd82:	f1b8 0f14 	cmp.w	r8, #20
    dd86:	d01a      	beq.n	ddbe <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    dd88:	f1b8 0f15 	cmp.w	r8, #21
    dd8c:	f000 8292 	beq.w	e2b4 <isr_rx_conn_pkt_ctrl+0x121c>
    dd90:	4b87      	ldr	r3, [pc, #540]	; (dfb0 <isr_rx_conn_pkt_ctrl+0xf18>)
    dd92:	9301      	str	r3, [sp, #4]
    dd94:	9300      	str	r3, [sp, #0]
    dd96:	4a8a      	ldr	r2, [pc, #552]	; (dfc0 <isr_rx_conn_pkt_ctrl+0xf28>)
    dd98:	4b8a      	ldr	r3, [pc, #552]	; (dfc4 <isr_rx_conn_pkt_ctrl+0xf2c>)
    dd9a:	498b      	ldr	r1, [pc, #556]	; (dfc8 <isr_rx_conn_pkt_ctrl+0xf30>)
    dd9c:	488b      	ldr	r0, [pc, #556]	; (dfcc <isr_rx_conn_pkt_ctrl+0xf34>)
    dd9e:	f7ff babd 	b.w	d31c <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    dda2:	2600      	movs	r6, #0
    dda4:	e7dc      	b.n	dd60 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    dda6:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    ddaa:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    ddae:	2f01      	cmp	r7, #1
    ddb0:	d9e7      	bls.n	dd82 <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    ddb2:	2f02      	cmp	r7, #2
    ddb4:	d1e8      	bne.n	dd88 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    ddb6:	f1a8 0714 	sub.w	r7, r8, #20
    ddba:	2f01      	cmp	r7, #1
    ddbc:	d8e4      	bhi.n	dd88 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ddbe:	89a7      	ldrh	r7, [r4, #12]
    ddc0:	2f1a      	cmp	r7, #26
    ddc2:	d934      	bls.n	de2e <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    ddc4:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    ddc8:	4547      	cmp	r7, r8
    ddca:	bf28      	it	cs
    ddcc:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ddce:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    ddd2:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    ddd6:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    ddda:	bf34      	ite	cc
    dddc:	4693      	movcc	fp, r2
    ddde:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    dde2:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    dde6:	d324      	bcc.n	de32 <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    dde8:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    ddec:	45d0      	cmp	r8, sl
    ddee:	bf28      	it	cs
    ddf0:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    ddf2:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    ddf6:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    ddfa:	bf34      	ite	cc
    ddfc:	4682      	movcc	sl, r0
    ddfe:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    de02:	455a      	cmp	r2, fp
    de04:	d050      	beq.n	dea8 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    de06:	f7fb fd13 	bl	9830 <packet_rx_acquired_count_get>
    de0a:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    de0c:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    de10:	f7f8 ff3e 	bl	6c90 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    de14:	4420      	add	r0, r4
    de16:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    de18:	28ff      	cmp	r0, #255	; 0xff
    de1a:	d90c      	bls.n	de36 <isr_rx_conn_pkt_ctrl+0xd9e>
    de1c:	4b64      	ldr	r3, [pc, #400]	; (dfb0 <isr_rx_conn_pkt_ctrl+0xf18>)
    de1e:	9301      	str	r3, [sp, #4]
    de20:	9300      	str	r3, [sp, #0]
    de22:	4a67      	ldr	r2, [pc, #412]	; (dfc0 <isr_rx_conn_pkt_ctrl+0xf28>)
    de24:	4b67      	ldr	r3, [pc, #412]	; (dfc4 <isr_rx_conn_pkt_ctrl+0xf2c>)
    de26:	4968      	ldr	r1, [pc, #416]	; (dfc8 <isr_rx_conn_pkt_ctrl+0xf30>)
    de28:	4869      	ldr	r0, [pc, #420]	; (dfd0 <isr_rx_conn_pkt_ctrl+0xf38>)
    de2a:	f7ff ba77 	b.w	d31c <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    de2e:	460f      	mov	r7, r1
    de30:	e7cd      	b.n	ddce <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    de32:	46f0      	mov	r8, lr
    de34:	e7dd      	b.n	ddf2 <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    de36:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    de3a:	4283      	cmp	r3, r0
    de3c:	f040 8231 	bne.w	e2a2 <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    de40:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    de44:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    de48:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    de4a:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    de4c:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    de50:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    de54:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    de58:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    de5c:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    de60:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    de64:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    de68:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    de6c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    de70:	2303      	movs	r3, #3
    de72:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    de76:	2e00      	cmp	r6, #0
    de78:	f43f a9e4 	beq.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de7c:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    de7e:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    de82:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de86:	f043 0303 	orr.w	r3, r3, #3
    de8a:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    de8c:	2309      	movs	r3, #9
    de8e:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    de90:	2315      	movs	r3, #21
    de92:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    de94:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    de96:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    de9a:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    de9e:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    dea0:	f7fd fce2 	bl	b868 <ctrl_tx_enqueue>
    dea4:	f7ff b9ce 	b.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    dea8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    deac:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    deb0:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    deb4:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    deb8:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    deba:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    debe:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    dec2:	d103      	bne.n	decc <isr_rx_conn_pkt_ctrl+0xe34>
    dec4:	45c6      	cmp	lr, r8
    dec6:	d101      	bne.n	decc <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    dec8:	4550      	cmp	r0, sl
    deca:	d0d4      	beq.n	de76 <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    decc:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    dece:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    ded2:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    ded6:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    ded8:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    dedc:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    dede:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    dee2:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    dee6:	702b      	strb	r3, [r5, #0]
    dee8:	e7c5      	b.n	de76 <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    deea:	7a41      	ldrb	r1, [r0, #9]
    deec:	2016      	movs	r0, #22
    deee:	f7fb fc57 	bl	97a0 <pdu_len_cmp>
    def2:	2800      	cmp	r0, #0
    def4:	f000 81ba 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    def8:	4830      	ldr	r0, [pc, #192]	; (dfbc <isr_rx_conn_pkt_ctrl+0xf24>)
    defa:	7cc3      	ldrb	r3, [r0, #19]
    defc:	2b04      	cmp	r3, #4
    defe:	d169      	bne.n	dfd4 <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    df00:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    df04:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    df08:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    df0c:	428b      	cmp	r3, r1
    df0e:	d00a      	beq.n	df26 <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    df10:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    df14:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    df18:	3a01      	subs	r2, #1
    df1a:	2a02      	cmp	r2, #2
    df1c:	d803      	bhi.n	df26 <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    df1e:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    df20:	2116      	movs	r1, #22
    df22:	f7ff bba5 	b.w	d670 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    df26:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    df2a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    df2e:	4295      	cmp	r5, r2
    df30:	d003      	beq.n	df3a <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    df32:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    df36:	2a03      	cmp	r2, #3
    df38:	d105      	bne.n	df46 <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    df3a:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    df3e:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    df42:	4295      	cmp	r5, r2
    df44:	d001      	beq.n	df4a <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    df46:	222a      	movs	r2, #42	; 0x2a
    df48:	e7ea      	b.n	df20 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    df4a:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    df4e:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    df50:	f042 0203 	orr.w	r2, r2, #3
    df54:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    df58:	d116      	bne.n	df88 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    df5a:	3b01      	subs	r3, #1
    df5c:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    df60:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    df64:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    df68:	f36f 0341 	bfc	r3, #1, #1
    df6c:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    df70:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    df74:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    df78:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    df7c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    df80:	f362 1347 	bfi	r3, r2, #5, #3
    df84:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    df88:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    df8c:	7b62      	ldrb	r2, [r4, #13]
    df8e:	f3c3 0182 	ubfx	r1, r3, #2, #3
    df92:	400a      	ands	r2, r1
    df94:	f362 0384 	bfi	r3, r2, #2, #3
    df98:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    df9c:	7b22      	ldrb	r2, [r4, #12]
    df9e:	b2db      	uxtb	r3, r3
    dfa0:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    dfa4:	f362 1347 	bfi	r3, r2, #5, #3
    dfa8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    dfac:	f7ff b94a 	b.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
    dfb0:	000145f1 	.word	0x000145f1
    dfb4:	0001685e 	.word	0x0001685e
    dfb8:	20000a1c 	.word	0x20000a1c
    dfbc:	200008c0 	.word	0x200008c0
    dfc0:	00015373 	.word	0x00015373
    dfc4:	00016845 	.word	0x00016845
    dfc8:	000153c2 	.word	0x000153c2
    dfcc:	0001713f 	.word	0x0001713f
    dfd0:	00016cb7 	.word	0x00016cb7
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    dfd4:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dfd8:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dfdc:	f7f8 fe29 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    dfe0:	4601      	mov	r1, r0
    dfe2:	2800      	cmp	r0, #0
    dfe4:	f43f aa6b 	beq.w	d4be <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    dfe8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    dfec:	2202      	movs	r2, #2
    dfee:	f362 0301 	bfi	r3, r2, #0, #2
    dff2:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    dff6:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    dffa:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    dffe:	4293      	cmp	r3, r2
    e000:	d11a      	bne.n	e038 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    e002:	3b01      	subs	r3, #1
    e004:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e008:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e00c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e010:	f36f 0341 	bfc	r3, #1, #1
    e014:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e018:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e01c:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e020:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e024:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e028:	f362 1347 	bfi	r3, r2, #5, #3
    e02c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e030:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e034:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e038:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e03c:	7b62      	ldrb	r2, [r4, #13]
    e03e:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e042:	4002      	ands	r2, r0
    e044:	f362 0384 	bfi	r3, r2, #2, #3
    e048:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e04c:	7b22      	ldrb	r2, [r4, #12]
    e04e:	b2db      	uxtb	r3, r3
    e050:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e054:	f362 1347 	bfi	r3, r2, #5, #3
    e058:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e05c:	790b      	ldrb	r3, [r1, #4]
    e05e:	f043 0303 	orr.w	r3, r3, #3
    e062:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e064:	2303      	movs	r3, #3
    e066:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e068:	2317      	movs	r3, #23
    e06a:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e06c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e070:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e074:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e076:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e07a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e07e:	724b      	strb	r3, [r1, #9]
    e080:	f7ff ba2f 	b.w	d4e2 <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    e084:	4e90      	ldr	r6, [pc, #576]	; (e2c8 <isr_rx_conn_pkt_ctrl+0x1230>)
    e086:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e08a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e08e:	2b00      	cmp	r3, #0
    e090:	f2c0 80ec 	blt.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e094:	7a41      	ldrb	r1, [r0, #9]
    e096:	2017      	movs	r0, #23
    e098:	f7fb fb82 	bl	97a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e09c:	2800      	cmp	r0, #0
    e09e:	f000 80e5 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    e0a2:	7cf3      	ldrb	r3, [r6, #19]
    e0a4:	2b04      	cmp	r3, #4
    e0a6:	f47f a8cd 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
    e0aa:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e0ae:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e0b2:	429a      	cmp	r2, r3
    e0b4:	f43f a8c6 	beq.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    e0b8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e0bc:	f003 0203 	and.w	r2, r3, #3
    e0c0:	2a02      	cmp	r2, #2
    e0c2:	f47f a8bf 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e0c6:	f043 0303 	orr.w	r3, r3, #3
    e0ca:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e0ce:	7b62      	ldrb	r2, [r4, #13]
    e0d0:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e0d4:	400a      	ands	r2, r1
    e0d6:	f362 0384 	bfi	r3, r2, #2, #3
    e0da:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e0de:	7b22      	ldrb	r2, [r4, #12]
    e0e0:	b2db      	uxtb	r3, r3
    e0e2:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e0e6:	f362 1347 	bfi	r3, r2, #5, #3
    e0ea:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e0ee:	f7ff b85c 	b.w	d1aa <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    e0f2:	4b75      	ldr	r3, [pc, #468]	; (e2c8 <isr_rx_conn_pkt_ctrl+0x1230>)
    e0f4:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e0f8:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	f280 80b5 	bge.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e102:	7a41      	ldrb	r1, [r0, #9]
    e104:	2018      	movs	r0, #24
    e106:	f7fb fb4b 	bl	97a0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e10a:	2800      	cmp	r0, #0
    e10c:	f000 80ae 	beq.w	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e110:	7b27      	ldrb	r7, [r4, #12]
    e112:	7b62      	ldrb	r2, [r4, #13]
    e114:	ea47 0002 	orr.w	r0, r7, r2
    e118:	f010 0007 	ands.w	r0, r0, #7
    e11c:	d125      	bne.n	e16a <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e11e:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e122:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e126:	4293      	cmp	r3, r2
    e128:	f43f a88c 	beq.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e12c:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e130:	f003 0303 	and.w	r3, r3, #3
    e134:	2b02      	cmp	r3, #2
    e136:	f47f a885 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    e13a:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e13e:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e142:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e144:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e148:	f57f a87c 	bpl.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e14c:	230c      	movs	r3, #12
		upd->status = 0;
    e14e:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e150:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e152:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e156:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e15a:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e15c:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e160:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e164:	7363      	strb	r3, [r4, #13]
    e166:	f7ff ba6e 	b.w	d646 <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e16a:	89e0      	ldrh	r0, [r4, #14]
    e16c:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e16e:	1ac3      	subs	r3, r0, r3
    e170:	041b      	lsls	r3, r3, #16
    e172:	f100 80a4 	bmi.w	e2be <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e176:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e17a:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e17e:	428b      	cmp	r3, r1
    e180:	d005      	beq.n	e18e <isr_rx_conn_pkt_ctrl+0x10f6>
    e182:	4b52      	ldr	r3, [pc, #328]	; (e2cc <isr_rx_conn_pkt_ctrl+0x1234>)
    e184:	9301      	str	r3, [sp, #4]
    e186:	9300      	str	r3, [sp, #0]
    e188:	4b51      	ldr	r3, [pc, #324]	; (e2d0 <isr_rx_conn_pkt_ctrl+0x1238>)
    e18a:	f7fe bfcb 	b.w	d124 <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e18e:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e192:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e196:	42a3      	cmp	r3, r4
    e198:	d014      	beq.n	e1c4 <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e19a:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e19e:	f003 0303 	and.w	r3, r3, #3
    e1a2:	2b02      	cmp	r3, #2
    e1a4:	d10e      	bne.n	e1c4 <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1a6:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e1aa:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1ae:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e1b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e1b6:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e1ba:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1bc:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e1c0:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e1c4:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e1c8:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e1cc:	f002 0207 	and.w	r2, r2, #7
    e1d0:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e1d4:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e1d8:	f36f 0300 	bfc	r3, #0, #1
    e1dc:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e1e0:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e1e2:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e1e4:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e1e8:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e1ec:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	f43f a827 	beq.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e1f6:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e1fa:	f362 0302 	bfi	r3, r2, #0, #3
    e1fe:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e202:	f7ff b81f 	b.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    e206:	4e30      	ldr	r6, [pc, #192]	; (e2c8 <isr_rx_conn_pkt_ctrl+0x1230>)
    e208:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e20c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e210:	2b00      	cmp	r3, #0
    e212:	db2b      	blt.n	e26c <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e214:	7a41      	ldrb	r1, [r0, #9]
    e216:	2019      	movs	r0, #25
    e218:	f7fb fac2 	bl	97a0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e21c:	b330      	cbz	r0, e26c <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e21e:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e222:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e226:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e22a:	7b22      	ldrb	r2, [r4, #12]
    e22c:	f003 0307 	and.w	r3, r3, #7
    e230:	4213      	tst	r3, r2
    e232:	f43f a807 	beq.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    e236:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e23a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e23e:	429a      	cmp	r2, r3
    e240:	f47f a800 	bne.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    e244:	2205      	movs	r2, #5
    e246:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e24a:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e24e:	f7f3 fcd5 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e252:	2301      	movs	r3, #1
    e254:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e258:	2302      	movs	r3, #2
    e25a:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e25e:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e262:	3b01      	subs	r3, #1
    e264:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e268:	f7fe bfec 	b.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    e26c:	4816      	ldr	r0, [pc, #88]	; (e2c8 <isr_rx_conn_pkt_ctrl+0x1230>)
    e26e:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e272:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e276:	f7f8 fcdc 	bl	6c32 <mem_acquire>
	if (!node_tx) {
    e27a:	4601      	mov	r1, r0
    e27c:	2800      	cmp	r0, #0
    e27e:	f43f a91e 	beq.w	d4be <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e282:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    e284:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e286:	f043 0303 	orr.w	r3, r3, #3
    e28a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e28c:	2302      	movs	r3, #2
    e28e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e290:	2307      	movs	r3, #7
    e292:	71c3      	strb	r3, [r0, #7]
    e294:	f7ff b94f 	b.w	d536 <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e298:	2328      	movs	r3, #40	; 0x28
    e29a:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    e29e:	f7fe bfd1 	b.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    e2a2:	2e00      	cmp	r6, #0
    e2a4:	f43f a90b 	beq.w	d4be <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e2a8:	490a      	ldr	r1, [pc, #40]	; (e2d4 <isr_rx_conn_pkt_ctrl+0x123c>)
    e2aa:	4630      	mov	r0, r6
    e2ac:	f7f8 fcdb 	bl	6c66 <mem_release>
    e2b0:	f7ff b905 	b.w	d4be <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e2b4:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e2b6:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e2b8:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e2ba:	4693      	mov	fp, r2
    e2bc:	e5db      	b.n	de76 <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e2be:	2328      	movs	r3, #40	; 0x28
    e2c0:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    e2c4:	f7fe bfbe 	b.w	d244 <isr_rx_conn_pkt_ctrl+0x1ac>
    e2c8:	200008c0 	.word	0x200008c0
    e2cc:	000145f1 	.word	0x000145f1
    e2d0:	00016bc8 	.word	0x00016bc8
    e2d4:	20000a1c 	.word	0x20000a1c

0000e2d8 <isr>:
{
    e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2dc:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    e2de:	f003 fec9 	bl	12074 <radio_is_done>
    e2e2:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    e2e4:	b366      	cbz	r6, e340 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    e2e6:	f003 fee5 	bl	120b4 <radio_crc_is_valid>
    e2ea:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    e2ec:	f003 ff66 	bl	121bc <radio_filter_has_match>
    e2f0:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    e2f4:	f003 ff6c 	bl	121d0 <radio_filter_match_get>
    e2f8:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    e2fc:	f004 f950 	bl	125a0 <radio_ar_has_match>
    e300:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    e304:	f004 f93a 	bl	1257c <radio_ar_match_get>
    e308:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    e30c:	f003 ff20 	bl	12150 <radio_rssi_is_ready>
    e310:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    e312:	4cb4      	ldr	r4, [pc, #720]	; (e5e4 <isr+0x30c>)
	radio_status_reset();
    e314:	f003 fe98 	bl	12048 <radio_status_reset>
	radio_tmr_status_reset();
    e318:	f003 ff6c 	bl	121f4 <radio_tmr_status_reset>
	radio_filter_status_reset();
    e31c:	f003 ff46 	bl	121ac <radio_filter_status_reset>
	radio_ar_status_reset();
    e320:	f004 f932 	bl	12588 <radio_ar_status_reset>
	radio_rssi_status_reset();
    e324:	f003 ff0c 	bl	12140 <radio_rssi_status_reset>
	switch (_radio.state) {
    e328:	7d23      	ldrb	r3, [r4, #20]
    e32a:	2b05      	cmp	r3, #5
    e32c:	f201 846e 	bhi.w	fc0c <isr+0x1934>
    e330:	e8df f013 	tbh	[pc, r3, lsl #1]
    e334:	00cd007c 	.word	0x00cd007c
    e338:	0a1c000e 	.word	0x0a1c000e
    e33c:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    e340:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e344:	4635      	mov	r5, r6
    e346:	46b2      	mov	sl, r6
    e348:	46b1      	mov	r9, r6
    e34a:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e34c:	46d8      	mov	r8, fp
    e34e:	e7e0      	b.n	e312 <isr+0x3a>
	_radio.state = STATE_RX;
    e350:	2301      	movs	r3, #1
    e352:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    e354:	f004 f850 	bl	123f8 <radio_tmr_tifs_base_get>
    e358:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e35a:	2096      	movs	r0, #150	; 0x96
    e35c:	f003 ff58 	bl	12210 <radio_tmr_tifs_set>
	switch (_radio.role) {
    e360:	7ce3      	ldrb	r3, [r4, #19]
    e362:	3b01      	subs	r3, #1
    e364:	2b03      	cmp	r3, #3
    e366:	f200 80aa 	bhi.w	e4be <isr+0x1e6>
    e36a:	e8df f003 	tbb	[pc, r3]
    e36e:	3202      	.short	0x3202
    e370:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e372:	2300      	movs	r3, #0
    e374:	461a      	mov	r2, r3
    e376:	4619      	mov	r1, r3
    e378:	4618      	mov	r0, r3
    e37a:	f003 feb9 	bl	120f0 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e37e:	f003 fea7 	bl	120d0 <radio_pkt_scratch_get>
    e382:	f003 fe29 	bl	11fd8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e386:	f003 fe6b 	bl	12060 <radio_is_ready>
    e38a:	b138      	cbz	r0, e39c <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    e38c:	4b96      	ldr	r3, [pc, #600]	; (e5e8 <isr+0x310>)
    e38e:	9301      	str	r3, [sp, #4]
    e390:	9300      	str	r3, [sp, #0]
    e392:	4b96      	ldr	r3, [pc, #600]	; (e5ec <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    e394:	4a96      	ldr	r2, [pc, #600]	; (e5f0 <isr+0x318>)
    e396:	4997      	ldr	r1, [pc, #604]	; (e5f4 <isr+0x31c>)
    e398:	4897      	ldr	r0, [pc, #604]	; (e5f8 <isr+0x320>)
    e39a:	e34b      	b.n	ea34 <isr+0x75c>
		if (ctrl_rl_enabled()) {
    e39c:	f003 f95e 	bl	1165c <ctrl_rl_enabled>
    e3a0:	b138      	cbz	r0, e3b2 <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    e3a2:	a810      	add	r0, sp, #64	; 0x40
    e3a4:	f002 feaa 	bl	110fc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e3a8:	4601      	mov	r1, r0
    e3aa:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e3ae:	f004 f8b3 	bl	12518 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e3b2:	2100      	movs	r1, #0
    e3b4:	4608      	mov	r0, r1
    e3b6:	f003 fe24 	bl	12002 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e3ba:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e3bc:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e3be:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e3c0:	4608      	mov	r0, r1
    e3c2:	f003 fe1a 	bl	11ffa <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e3c6:	1a28      	subs	r0, r5, r0
    e3c8:	f003 ffac 	bl	12324 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e3cc:	f003 fffc 	bl	123c8 <radio_tmr_end_capture>
    e3d0:	e02c      	b.n	e42c <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e3d2:	2300      	movs	r3, #0
    e3d4:	461a      	mov	r2, r3
    e3d6:	4619      	mov	r1, r3
    e3d8:	4618      	mov	r0, r3
    e3da:	f003 fe89 	bl	120f0 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e3de:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e3e2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    e3e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e3ea:	3008      	adds	r0, #8
    e3ec:	f003 fdf4 	bl	11fd8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e3f0:	f003 fe36 	bl	12060 <radio_is_ready>
    e3f4:	2800      	cmp	r0, #0
    e3f6:	d1c9      	bne.n	e38c <isr+0xb4>
		if (ctrl_rl_enabled()) {
    e3f8:	f003 f930 	bl	1165c <ctrl_rl_enabled>
    e3fc:	b138      	cbz	r0, e40e <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    e3fe:	a810      	add	r0, sp, #64	; 0x40
    e400:	f002 fe7c 	bl	110fc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e404:	4601      	mov	r1, r0
    e406:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e40a:	f004 f885 	bl	12518 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e40e:	2100      	movs	r1, #0
    e410:	4608      	mov	r0, r1
    e412:	f003 fdf6 	bl	12002 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e416:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e418:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e41a:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e41c:	4608      	mov	r0, r1
    e41e:	f003 fdec 	bl	11ffa <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e422:	1a28      	subs	r0, r5, r0
    e424:	f003 ff7e 	bl	12324 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e428:	f003 fe7a 	bl	12120 <radio_rssi_measure>
}
    e42c:	b013      	add	sp, #76	; 0x4c
    e42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e432:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    e436:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e43a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e43e:	2100      	movs	r1, #0
    e440:	09d3      	lsrs	r3, r2, #7
    e442:	f000 0007 	and.w	r0, r0, #7
    e446:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e44a:	f003 fe51 	bl	120f0 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e44e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e452:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    e456:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e45a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e45e:	3108      	adds	r1, #8
    e460:	f7fb fd5a 	bl	9f18 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e464:	f003 fdfc 	bl	12060 <radio_is_ready>
    e468:	2800      	cmp	r0, #0
    e46a:	d18f      	bne.n	e38c <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e46c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e470:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e474:	2101      	movs	r1, #1
    e476:	f000 0007 	and.w	r0, r0, #7
    e47a:	f003 fdc2 	bl	12002 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e47e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    e482:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e486:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    e48a:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    e48c:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e48e:	4405      	add	r5, r0
	switch (phy) {
    e490:	d013      	beq.n	e4ba <isr+0x1e2>
		return 40;
    e492:	2b04      	cmp	r3, #4
    e494:	bf0c      	ite	eq
    e496:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e49a:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e49c:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e49e:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e4a2:	09c1      	lsrs	r1, r0, #7
    e4a4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e4a8:	f003 fda7 	bl	11ffa <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e4ac:	1a28      	subs	r0, r5, r0
    e4ae:	f003 ff39 	bl	12324 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e4b2:	2001      	movs	r0, #1
    e4b4:	f7fc fb80 	bl	abb8 <packet_tx_enqueue>
    e4b8:	e7b8      	b.n	e42c <isr+0x154>
		return 24;
    e4ba:	2018      	movs	r0, #24
    e4bc:	e7ee      	b.n	e49c <isr+0x1c4>
		LL_ASSERT(0);
    e4be:	4b4a      	ldr	r3, [pc, #296]	; (e5e8 <isr+0x310>)
    e4c0:	9301      	str	r3, [sp, #4]
    e4c2:	9300      	str	r3, [sp, #0]
    e4c4:	4b49      	ldr	r3, [pc, #292]	; (e5ec <isr+0x314>)
		LL_ASSERT(0);
    e4c6:	4a4a      	ldr	r2, [pc, #296]	; (e5f0 <isr+0x318>)
    e4c8:	494a      	ldr	r1, [pc, #296]	; (e5f4 <isr+0x31c>)
    e4ca:	484c      	ldr	r0, [pc, #304]	; (e5fc <isr+0x324>)
    e4cc:	e2b2      	b.n	ea34 <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e4ce:	b926      	cbnz	r6, e4da <isr+0x202>
		_radio.state = STATE_CLOSE;
    e4d0:	2303      	movs	r3, #3
    e4d2:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e4d4:	f003 fda6 	bl	12024 <radio_disable>
    e4d8:	e7a8      	b.n	e42c <isr+0x154>
	switch (_radio.role) {
    e4da:	7ce3      	ldrb	r3, [r4, #19]
    e4dc:	3b01      	subs	r3, #1
    e4de:	2b03      	cmp	r3, #3
    e4e0:	f201 813e 	bhi.w	f760 <isr+0x1488>
    e4e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    e4e8:	02ae0004 	.word	0x02ae0004
    e4ec:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    e4f0:	2f00      	cmp	r7, #0
    e4f2:	d0ed      	beq.n	e4d0 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e4f4:	f1ba 0f00 	cmp.w	sl, #0
    e4f8:	d039      	beq.n	e56e <isr+0x296>
    e4fa:	4658      	mov	r0, fp
    e4fc:	f002 fe5c 	bl	111b8 <ctrl_rl_irk_idx>
    e500:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e504:	f003 fde4 	bl	120d0 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e508:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    e50c:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e50e:	232b      	movs	r3, #43	; 0x2b
    e510:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e512:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e514:	fb11 3302 	smlabb	r3, r1, r2, r3
    e518:	930a      	str	r3, [sp, #40]	; 0x28
    e51a:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e51c:	f000 030f 	and.w	r3, r0, #15
    e520:	2b03      	cmp	r3, #3
    e522:	d10a      	bne.n	e53a <isr+0x262>
    e524:	7873      	ldrb	r3, [r6, #1]
    e526:	2b0c      	cmp	r3, #12
    e528:	d107      	bne.n	e53a <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e52a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e52e:	065f      	lsls	r7, r3, #25
    e530:	d51f      	bpl.n	e572 <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e532:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e536:	0658      	lsls	r0, r3, #25
    e538:	d449      	bmi.n	e5ce <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e53a:	7830      	ldrb	r0, [r6, #0]
    e53c:	f000 030f 	and.w	r3, r0, #15
    e540:	2b05      	cmp	r3, #5
    e542:	d1c5      	bne.n	e4d0 <isr+0x1f8>
    e544:	7873      	ldrb	r3, [r6, #1]
    e546:	2b22      	cmp	r3, #34	; 0x22
    e548:	d1c2      	bne.n	e4d0 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e54c:	5ce3      	ldrb	r3, [r4, r3]
    e54e:	f003 030f 	and.w	r3, r3, #15
    e552:	2b01      	cmp	r3, #1
    e554:	f040 814f 	bne.w	e7f6 <isr+0x51e>
					    ci->connect_ind.init_addr,
    e558:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e55a:	aa10      	add	r2, sp, #64	; 0x40
    e55c:	4639      	mov	r1, r7
    e55e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e562:	f003 f81f 	bl	115a4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e566:	2800      	cmp	r0, #0
    e568:	d14c      	bne.n	e604 <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e56a:	2000      	movs	r0, #0
    e56c:	e05a      	b.n	e624 <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e56e:	20ff      	movs	r0, #255	; 0xff
    e570:	e7c6      	b.n	e500 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e572:	aa10      	add	r2, sp, #64	; 0x40
    e574:	1cb1      	adds	r1, r6, #2
    e576:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e57a:	f003 f813 	bl	115a4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e57e:	2800      	cmp	r0, #0
    e580:	d0d7      	beq.n	e532 <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    e582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e584:	7832      	ldrb	r2, [r6, #0]
    e586:	5ce3      	ldrb	r3, [r4, r3]
    e588:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e58c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e590:	d1d3      	bne.n	e53a <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e592:	2206      	movs	r2, #6
    e594:	f106 0108 	add.w	r1, r6, #8
    e598:	1ca8      	adds	r0, r5, #2
    e59a:	f7f3 fb1a 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e59e:	2800      	cmp	r0, #0
    e5a0:	d1cb      	bne.n	e53a <isr+0x262>
		_radio.state = STATE_CLOSE;
    e5a2:	2303      	movs	r3, #3
    e5a4:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    e5a6:	f003 fdad 	bl	12104 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e5aa:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    e5ae:	2327      	movs	r3, #39	; 0x27
    e5b0:	fb03 4000 	mla	r0, r3, r0, r4
    e5b4:	307b      	adds	r0, #123	; 0x7b
    e5b6:	f003 fd15 	bl	11fe4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e5ba:	f003 fd51 	bl	12060 <radio_is_ready>
    e5be:	2800      	cmp	r0, #0
    e5c0:	f43f af34 	beq.w	e42c <isr+0x154>
    e5c4:	4b08      	ldr	r3, [pc, #32]	; (e5e8 <isr+0x310>)
    e5c6:	9301      	str	r3, [sp, #4]
    e5c8:	9300      	str	r3, [sp, #0]
    e5ca:	4b0d      	ldr	r3, [pc, #52]	; (e600 <isr+0x328>)
    e5cc:	e6e2      	b.n	e394 <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e5ce:	f1b9 0f00 	cmp.w	r9, #0
    e5d2:	d1d6      	bne.n	e582 <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e5d4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e5d8:	f002 fe34 	bl	11244 <ctrl_irk_whitelisted>
    e5dc:	2800      	cmp	r0, #0
    e5de:	d1d0      	bne.n	e582 <isr+0x2aa>
    e5e0:	e7ab      	b.n	e53a <isr+0x262>
    e5e2:	bf00      	nop
    e5e4:	200008c0 	.word	0x200008c0
    e5e8:	000145f1 	.word	0x000145f1
    e5ec:	000167d2 	.word	0x000167d2
    e5f0:	00015373 	.word	0x00015373
    e5f4:	000153c2 	.word	0x000153c2
    e5f8:	00016e98 	.word	0x00016e98
    e5fc:	00015312 	.word	0x00015312
    e600:	000167e5 	.word	0x000167e5
		       isr_adv_ci_adva_check(adv, ci) &&
    e604:	4631      	mov	r1, r6
    e606:	4628      	mov	r0, r5
    e608:	f7fb ff6e 	bl	a4e8 <isr_adv_ci_adva_check>
					    rl_idx) &&
    e60c:	2800      	cmp	r0, #0
    e60e:	d0ac      	beq.n	e56a <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    e610:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    e614:	2bff      	cmp	r3, #255	; 0xff
    e616:	f000 80db 	beq.w	e7d0 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    e61a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    e61e:	1ac1      	subs	r1, r0, r3
    e620:	4248      	negs	r0, r1
    e622:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e624:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    e628:	2800      	cmp	r0, #0
    e62a:	f43f af51 	beq.w	e4d0 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    e62e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    e632:	b133      	cbz	r3, e642 <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e634:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    e638:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    e63c:	429a      	cmp	r2, r3
    e63e:	f47f af47 	bne.w	e4d0 <isr+0x1f8>
    e642:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    e646:	2b00      	cmp	r3, #0
    e648:	f43f af42 	beq.w	e4d0 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    e64c:	2004      	movs	r0, #4
    e64e:	f7fb f905 	bl	985c <packet_rx_reserve_get>
		if (!node_rx) {
    e652:	4607      	mov	r7, r0
    e654:	2800      	cmp	r0, #0
    e656:	f43f af3b 	beq.w	e4d0 <isr+0x1f8>
		_radio.state = STATE_STOP;
    e65a:	f04f 0904 	mov.w	r9, #4
    e65e:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    e662:	f003 fcdf 	bl	12024 <radio_disable>
		conn = _radio.advertiser.conn;
    e666:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e66a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    e66e:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e670:	f44f 72aa 	mov.w	r2, #340	; 0x154
    e674:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    e676:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e67a:	f7f8 fb12 	bl	6ca2 <mem_index_get>
		memcpy(&conn->access_addr[0],
    e67e:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e682:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    e684:	2203      	movs	r2, #3
    e686:	f106 0112 	add.w	r1, r6, #18
    e68a:	f105 0014 	add.w	r0, r5, #20
    e68e:	f7f3 fab5 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    e692:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    e696:	464a      	mov	r2, r9
    e698:	f106 010e 	add.w	r1, r6, #14
    e69c:	4650      	mov	r0, sl
    e69e:	f7f3 faad 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    e6a2:	2205      	movs	r2, #5
    e6a4:	f106 011e 	add.w	r1, r6, #30
    e6a8:	4640      	mov	r0, r8
    e6aa:	f7f3 faa7 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    e6ae:	2105      	movs	r1, #5
    e6b0:	4640      	mov	r0, r8
    e6b2:	f7f8 fc69 	bl	6f88 <util_ones_count_get>
		conn->data_chan_count =
    e6b6:	7f6b      	ldrb	r3, [r5, #29]
    e6b8:	f360 0305 	bfi	r3, r0, #0, #6
    e6bc:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    e6be:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e6c2:	f3c3 0304 	ubfx	r3, r3, #0, #5
    e6c6:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    e6c8:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    e6ca:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    e6cc:	f240 48e2 	movw	r8, #1250	; 0x4e2
    e6d0:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    e6d4:	7ef2      	ldrb	r2, [r6, #27]
    e6d6:	7eb3      	ldrb	r3, [r6, #26]
    e6d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e6dc:	4651      	mov	r1, sl
    e6de:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    e6e0:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e6e2:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    e6e6:	f7f3 fa89 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e6ea:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e6ec:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e6ee:	f242 7210 	movw	r2, #10000	; 0x2710
    e6f2:	fb02 8303 	mla	r3, r2, r3, r8
    e6f6:	3b01      	subs	r3, #1
    e6f8:	fbb3 f3f8 	udiv	r3, r3, r8
    e6fc:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    e6fe:	4b54      	ldr	r3, [pc, #336]	; (e850 <isr+0x578>)
    e700:	4443      	add	r3, r8
    e702:	fbb3 f3f8 	udiv	r3, r3, r8
    e706:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e70a:	4b52      	ldr	r3, [pc, #328]	; (e854 <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e70c:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e70e:	4443      	add	r3, r8
    e710:	fbb3 f3f8 	udiv	r3, r3, r8
    e714:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e716:	4282      	cmp	r2, r0
    e718:	4613      	mov	r3, r2
    e71a:	bfc4      	itt	gt
    e71c:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    e720:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e722:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e726:	bfc4      	itt	gt
    e728:	18d2      	addgt	r2, r2, r3
    e72a:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    e72c:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e72e:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e732:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    e734:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    e736:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    e738:	2300      	movs	r3, #0
    e73a:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    e73c:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e73e:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    e742:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e744:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e748:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    e74c:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e74e:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    e752:	464a      	mov	r2, r9
    e754:	f107 001b 	add.w	r0, r7, #27
    e758:	f7f3 fa50 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    e75c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e760:	f107 030e 	add.w	r3, r7, #14
    e764:	28ff      	cmp	r0, #255	; 0xff
    e766:	930b      	str	r3, [sp, #44]	; 0x2c
    e768:	f106 0a02 	add.w	sl, r6, #2
    e76c:	f107 0b14 	add.w	fp, r7, #20
    e770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e772:	d05f      	beq.n	e834 <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
    e774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e776:	f107 010d 	add.w	r1, r7, #13
    e77a:	f002 fed5 	bl	11528 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    e77e:	7b7b      	ldrb	r3, [r7, #13]
    e780:	3302      	adds	r3, #2
    e782:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    e784:	464a      	mov	r2, r9
    e786:	4651      	mov	r1, sl
    e788:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e78a:	f7f3 fa37 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    e78e:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    e790:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    e794:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    e796:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    e79a:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    e79c:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    e7a0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e7a4:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    e7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    e7ac:	8c28      	ldrh	r0, [r5, #32]
    e7ae:	f7fb ffaf 	bl	a710 <rx_fc_lock>
		packet_rx_enqueue();
    e7b2:	f7fb febd 	bl	a530 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    e7b6:	2003      	movs	r0, #3
    e7b8:	f7fb f850 	bl	985c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    e7bc:	2800      	cmp	r0, #0
    e7be:	d155      	bne.n	e86c <isr+0x594>
    e7c0:	4b25      	ldr	r3, [pc, #148]	; (e858 <isr+0x580>)
    e7c2:	9301      	str	r3, [sp, #4]
    e7c4:	9300      	str	r3, [sp, #0]
    e7c6:	4b25      	ldr	r3, [pc, #148]	; (e85c <isr+0x584>)
			LL_ASSERT(node_rx);
    e7c8:	4a25      	ldr	r2, [pc, #148]	; (e860 <isr+0x588>)
    e7ca:	4926      	ldr	r1, [pc, #152]	; (e864 <isr+0x58c>)
    e7cc:	4826      	ldr	r0, [pc, #152]	; (e868 <isr+0x590>)
    e7ce:	e131      	b.n	ea34 <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
    e7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e7d2:	5ce2      	ldrb	r2, [r4, r3]
    e7d4:	7833      	ldrb	r3, [r6, #0]
    e7d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e7da:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e7de:	f47f aec4 	bne.w	e56a <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    e7e2:	2206      	movs	r2, #6
    e7e4:	4639      	mov	r1, r7
    e7e6:	f105 0008 	add.w	r0, r5, #8
    e7ea:	f7f3 f9f2 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    e7ee:	fab0 f080 	clz	r0, r0
    e7f2:	0940      	lsrs	r0, r0, #5
    e7f4:	e716      	b.n	e624 <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e7f6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e7fa:	09db      	lsrs	r3, r3, #7
    e7fc:	d00d      	beq.n	e81a <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e7fe:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e802:	09db      	lsrs	r3, r3, #7
    e804:	f43f aeb1 	beq.w	e56a <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e808:	f1b9 0f00 	cmp.w	r9, #0
    e80c:	d10d      	bne.n	e82a <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e80e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e812:	f002 fd17 	bl	11244 <ctrl_irk_whitelisted>
    e816:	b940      	cbnz	r0, e82a <isr+0x552>
    e818:	e6a7      	b.n	e56a <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    e81a:	aa10      	add	r2, sp, #64	; 0x40
    e81c:	1cb1      	adds	r1, r6, #2
    e81e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e822:	f002 febf 	bl	115a4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e826:	2800      	cmp	r0, #0
    e828:	d0e9      	beq.n	e7fe <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
    e82a:	4631      	mov	r1, r6
    e82c:	4628      	mov	r0, r5
    e82e:	f7fb fe5b 	bl	a4e8 <isr_adv_ci_adva_check>
    e832:	e6f7      	b.n	e624 <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    e834:	4619      	mov	r1, r3
    e836:	464a      	mov	r2, r9
    e838:	4658      	mov	r0, fp
    e83a:	f7f3 fa0b 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e83e:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e840:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e842:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e846:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e848:	464a      	mov	r2, r9
    e84a:	4651      	mov	r1, sl
    e84c:	e79d      	b.n	e78a <isr+0x4b2>
    e84e:	bf00      	nop
    e850:	026259ff 	.word	0x026259ff
    e854:	01c9c37f 	.word	0x01c9c37f
    e858:	000145f1 	.word	0x000145f1
    e85c:	000167e5 	.word	0x000167e5
    e860:	00015373 	.word	0x00015373
    e864:	000153c2 	.word	0x000153c2
    e868:	000172cf 	.word	0x000172cf
			node_rx->hdr.handle = conn->handle;
    e86c:	8c2b      	ldrh	r3, [r5, #32]
    e86e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    e870:	230b      	movs	r3, #11
    e872:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    e874:	7833      	ldrb	r3, [r6, #0]
    e876:	f013 0320 	ands.w	r3, r3, #32
    e87a:	d00e      	beq.n	e89a <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
    e87c:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    e87e:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    e880:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    e882:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    e886:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    e888:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    e88c:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    e88e:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    e890:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    e894:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    e896:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    e898:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    e89a:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    e89c:	f7fb fe48 	bl	a530 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e8a0:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    e8a4:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e8a8:	497d      	ldr	r1, [pc, #500]	; (eaa0 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e8aa:	0952      	lsrs	r2, r2, #5
    e8ac:	f362 0384 	bfi	r3, r2, #2, #3
    e8b0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e8b4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    e8b8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    e8bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e8c0:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    e8c2:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    e8c6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    e8ca:	4a76      	ldr	r2, [pc, #472]	; (eaa4 <isr+0x7cc>)
    e8cc:	f203 233f 	addw	r3, r3, #575	; 0x23f
    e8d0:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    e8d4:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    e8d6:	ea4f 0358 	mov.w	r3, r8, lsr #1
    e8da:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    e8dc:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    e8de:	7d73      	ldrb	r3, [r6, #21]
    e8e0:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    e8e4:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    e8e6:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    e8ea:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e8ec:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    e8ee:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e8f0:	4638      	mov	r0, r7
    e8f2:	f003 fb84 	bl	11ffe <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e8f6:	496c      	ldr	r1, [pc, #432]	; (eaa8 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e8f8:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e8fa:	f200 4052 	addw	r0, r0, #1106	; 0x452
    e8fe:	a366      	add	r3, pc, #408	; (adr r3, ea98 <isr+0x7c0>)
    e900:	e9d3 2300 	ldrd	r2, r3, [r3]
    e904:	fba0 0101 	umull	r0, r1, r0, r1
    e908:	f7f1 fc84 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    e90c:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    e910:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    e912:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    e914:	4293      	cmp	r3, r2
    e916:	bf38      	it	cc
    e918:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e91a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    e91e:	469a      	mov	sl, r3
		conn_interval_us -=
    e920:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    e922:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    e924:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    e926:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    e928:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    e92c:	f003 fd5e 	bl	123ec <radio_tmr_end_get>
    e930:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    e932:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e934:	4639      	mov	r1, r7
		conn_offset_us +=
    e936:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e93a:	4638      	mov	r0, r7
    e93c:	f003 fb5d 	bl	11ffa <radio_tx_chain_delay_get>
    e940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e942:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    e946:	4499      	add	r9, r3
    e948:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    e94c:	eba9 030b 	sub.w	r3, r9, fp
    e950:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e952:	f240 4383 	movw	r3, #1155	; 0x483
    e956:	9300      	str	r3, [sp, #0]
    e958:	2205      	movs	r2, #5
    e95a:	4b54      	ldr	r3, [pc, #336]	; (eaac <isr+0x7d4>)
    e95c:	f8df b148 	ldr.w	fp, [pc, #328]	; eaa8 <isr+0x7d0>
    e960:	4639      	mov	r1, r7
    e962:	4638      	mov	r0, r7
    e964:	f7f9 f88c 	bl	7a80 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    e968:	f240 4184 	movw	r1, #1156	; 0x484
    e96c:	f7fb ff08 	bl	a780 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e972:	5ce3      	ldrb	r3, [r4, r3]
    e974:	f003 030f 	and.w	r3, r3, #15
    e978:	2b01      	cmp	r3, #1
    e97a:	d106      	bne.n	e98a <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e97c:	9700      	str	r7, [sp, #0]
    e97e:	463b      	mov	r3, r7
    e980:	2203      	movs	r2, #3
    e982:	4639      	mov	r1, r7
    e984:	4638      	mov	r0, r7
    e986:	f7f9 f87b 	bl	7a80 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e98a:	fba8 890b 	umull	r8, r9, r8, fp
    e98e:	a342      	add	r3, pc, #264	; (adr r3, ea98 <isr+0x7c0>)
    e990:	e9d3 2300 	ldrd	r2, r3, [r3]
    e994:	4640      	mov	r0, r8
    e996:	4649      	mov	r1, r9
    e998:	f7f1 fc3c 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e99c:	f895 3020 	ldrb.w	r3, [r5, #32]
    e9a0:	68a4      	ldr	r4, [r4, #8]
    e9a2:	9506      	str	r5, [sp, #24]
    e9a4:	3307      	adds	r3, #7
    e9a6:	b2db      	uxtb	r3, r3
    e9a8:	930a      	str	r3, [sp, #40]	; 0x28
    e9aa:	f240 439b 	movw	r3, #1179	; 0x49b
    e9ae:	9308      	str	r3, [sp, #32]
    e9b0:	4b3f      	ldr	r3, [pc, #252]	; (eab0 <isr+0x7d8>)
    e9b2:	9307      	str	r3, [sp, #28]
    e9b4:	4b3f      	ldr	r3, [pc, #252]	; (eab4 <isr+0x7dc>)
    e9b6:	9305      	str	r3, [sp, #20]
    e9b8:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9ba:	4a3f      	ldr	r2, [pc, #252]	; (eab8 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9bc:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e9be:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9c0:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e9c6:	2307      	movs	r3, #7
    e9c8:	2100      	movs	r1, #0
    e9ca:	4343      	muls	r3, r0
    e9cc:	fb02 3301 	mla	r3, r2, r1, r3
    e9d0:	fba0 1202 	umull	r1, r2, r0, r2
    e9d4:	441a      	add	r2, r3
    e9d6:	4608      	mov	r0, r1
    e9d8:	ebb8 0000 	subs.w	r0, r8, r0
    e9dc:	4611      	mov	r1, r2
    e9de:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9e2:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e9e8:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9ea:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9ec:	f7f1 fc12 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e9f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9f2:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e9f4:	a328      	add	r3, pc, #160	; (adr r3, ea98 <isr+0x7c0>)
    e9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9fa:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e9fe:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea02:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ea04:	f7f1 fc06 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea08:	eba4 040a 	sub.w	r4, r4, sl
    ea0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ea10:	9000      	str	r0, [sp, #0]
    ea12:	4623      	mov	r3, r4
    ea14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ea16:	4629      	mov	r1, r5
    ea18:	4628      	mov	r0, r5
    ea1a:	f7f8 ff93 	bl	7944 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ea1e:	f030 0302 	bics.w	r3, r0, #2
    ea22:	f43f ad03 	beq.w	e42c <isr+0x154>
    ea26:	4b25      	ldr	r3, [pc, #148]	; (eabc <isr+0x7e4>)
    ea28:	9301      	str	r3, [sp, #4]
    ea2a:	9300      	str	r3, [sp, #0]
    ea2c:	4b24      	ldr	r3, [pc, #144]	; (eac0 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ea2e:	4a25      	ldr	r2, [pc, #148]	; (eac4 <isr+0x7ec>)
    ea30:	4925      	ldr	r1, [pc, #148]	; (eac8 <isr+0x7f0>)
    ea32:	4826      	ldr	r0, [pc, #152]	; (eacc <isr+0x7f4>)
		LL_ASSERT(0);
    ea34:	f7f2 faaa 	bl	f8c <printk>
    ea38:	4040      	eors	r0, r0
    ea3a:	f380 8811 	msr	BASEPRI, r0
    ea3e:	f04f 0004 	mov.w	r0, #4
    ea42:	df02      	svc	2
		rl_idx = devmatch_ok ?
    ea44:	f1b9 0f00 	cmp.w	r9, #0
    ea48:	d01c      	beq.n	ea84 <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    ea4a:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    ea4e:	4641      	mov	r1, r8
    ea50:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ea54:	f002 fb5c 	bl	11110 <ctrl_rl_idx>
    ea58:	4680      	mov	r8, r0
		if (crc_ok &&
    ea5a:	b147      	cbz	r7, ea6e <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ea5c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ea60:	06da      	lsls	r2, r3, #27
    ea62:	d535      	bpl.n	ead0 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ea64:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ea68:	06db      	lsls	r3, r3, #27
    ea6a:	f100 811d 	bmi.w	eca8 <isr+0x9d0>
			_radio.state = STATE_CLOSE;
    ea6e:	2303      	movs	r3, #3
    ea70:	7523      	strb	r3, [r4, #20]
			radio_disable();
    ea72:	f003 fad7 	bl	12024 <radio_disable>
			_radio.scanner.state = 0;
    ea76:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ea7a:	f36f 0341 	bfc	r3, #1, #1
    ea7e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    ea82:	e4d3      	b.n	e42c <isr+0x154>
		rl_idx = devmatch_ok ?
    ea84:	f1ba 0f00 	cmp.w	sl, #0
    ea88:	d003      	beq.n	ea92 <isr+0x7ba>
    ea8a:	4658      	mov	r0, fp
    ea8c:	f002 fb94 	bl	111b8 <ctrl_rl_irk_idx>
    ea90:	e7e2      	b.n	ea58 <isr+0x780>
    ea92:	f04f 08ff 	mov.w	r8, #255	; 0xff
    ea96:	e7e0      	b.n	ea5a <isr+0x782>
    ea98:	1afd498d 	.word	0x1afd498d
    ea9c:	00000007 	.word	0x00000007
    eaa0:	00016e88 	.word	0x00016e88
    eaa4:	000f4240 	.word	0x000f4240
    eaa8:	3b9aca00 	.word	0x3b9aca00
    eaac:	0000a781 	.word	0x0000a781
    eab0:	0000a745 	.word	0x0000a745
    eab4:	0000cbed 	.word	0x0000cbed
    eab8:	1afd498d 	.word	0x1afd498d
    eabc:	000145f1 	.word	0x000145f1
    eac0:	000167e5 	.word	0x000167e5
    eac4:	00015373 	.word	0x00015373
    eac8:	000153c2 	.word	0x000153c2
    eacc:	00016c69 	.word	0x00016c69
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ead0:	f1b9 0f00 	cmp.w	r9, #0
    ead4:	d005      	beq.n	eae2 <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ead6:	4641      	mov	r1, r8
    ead8:	4650      	mov	r0, sl
    eada:	f002 fcf1 	bl	114c0 <ctrl_rl_idx_allowed>
    eade:	2800      	cmp	r0, #0
    eae0:	d0c0      	beq.n	ea64 <isr+0x78c>
	bool dir_report = false;
    eae2:	2300      	movs	r3, #0
    eae4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    eae8:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    eaec:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    eaf0:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eaf4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    eaf8:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eafc:	2b00      	cmp	r3, #0
    eafe:	f000 80ec 	beq.w	ecda <isr+0xa02>
    eb02:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    eb06:	b133      	cbz	r3, eb16 <isr+0x83e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    eb08:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eb0c:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    eb10:	429a      	cmp	r2, r3
    eb12:	f040 80e2 	bne.w	ecda <isr+0xa02>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    eb16:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    eb1a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    eb1e:	2800      	cmp	r0, #0
    eb20:	f000 80cd 	beq.w	ecbe <isr+0x9e6>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    eb24:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    eb28:	f010 000f 	ands.w	r0, r0, #15
    eb2c:	f040 814c 	bne.w	edc8 <isr+0xaf0>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    eb30:	f003 fc5c 	bl	123ec <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    eb34:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    eb38:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    eb3c:	48b8      	ldr	r0, [pc, #736]	; (ee20 <isr+0xb48>)
    eb3e:	2207      	movs	r2, #7
    eb40:	fba3 0100 	umull	r0, r1, r3, r0
    eb44:	fb02 1103 	mla	r1, r2, r3, r1
    eb48:	a3b3      	add	r3, pc, #716	; (adr r3, ee18 <isr+0xb40>)
    eb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb4e:	f7f1 fb61 	bl	214 <__aeabi_uldivmod>
    eb52:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    eb56:	4287      	cmp	r7, r0
    eb58:	f080 80bf 	bcs.w	ecda <isr+0xa02>
			node_rx = packet_rx_reserve_get(4);
    eb5c:	2004      	movs	r0, #4
    eb5e:	f7fa fe7d 	bl	985c <packet_rx_reserve_get>
		if (node_rx == 0) {
    eb62:	4607      	mov	r7, r0
    eb64:	2800      	cmp	r0, #0
    eb66:	d082      	beq.n	ea6e <isr+0x796>
		_radio.state = STATE_STOP;
    eb68:	2304      	movs	r3, #4
    eb6a:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    eb6c:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    eb6e:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    eb72:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    eb76:	f003 faab 	bl	120d0 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    eb7a:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    eb7c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    eb80:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    eb84:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    eb86:	f899 3008 	ldrb.w	r3, [r9, #8]
    eb8a:	7802      	ldrb	r2, [r0, #0]
    eb8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eb90:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    eb94:	2322      	movs	r3, #34	; 0x22
    eb96:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    eb98:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    eb9a:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    eb9c:	4640      	mov	r0, r8
    eb9e:	f002 fa99 	bl	110d4 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    eba2:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    eba6:	4601      	mov	r1, r0
    eba8:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ebaa:	f013 0f01 	tst.w	r3, #1
    ebae:	f810 3b02 	ldrb.w	r3, [r0], #2
    ebb2:	f000 8114 	beq.w	edde <isr+0xb06>
    ebb6:	2900      	cmp	r1, #0
    ebb8:	f000 8111 	beq.w	edde <isr+0xb06>
			pdu_adv_tx->tx_addr = 1;
    ebbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ebc0:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ebc2:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ebc4:	f7f3 f81a 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    ebc8:	f105 0308 	add.w	r3, r5, #8
    ebcc:	4618      	mov	r0, r3
    ebce:	2206      	movs	r2, #6
    ebd0:	f109 010a 	add.w	r1, r9, #10
    ebd4:	930a      	str	r3, [sp, #40]	; 0x28
    ebd6:	f7f3 f811 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    ebda:	2204      	movs	r2, #4
    ebdc:	f106 0110 	add.w	r1, r6, #16
    ebe0:	f105 000e 	add.w	r0, r5, #14
    ebe4:	f7f3 f80a 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    ebe8:	2203      	movs	r2, #3
    ebea:	f106 0114 	add.w	r1, r6, #20
    ebee:	f105 0012 	add.w	r0, r5, #18
    ebf2:	f7f3 f803 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    ebf6:	2301      	movs	r3, #1
    ebf8:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    ebfa:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    ebfe:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ec02:	4353      	muls	r3, r2
    ec04:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ec06:	f003 fbf1 	bl	123ec <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    ec0a:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    ec0c:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    ec10:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ec12:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    ec16:	bfd8      	it	le
    ec18:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    ec1c:	f1bb 0f00 	cmp.w	fp, #0
    ec20:	f040 80e8 	bne.w	edf4 <isr+0xb1c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    ec24:	f885 b016 	strb.w	fp, [r5, #22]
    ec28:	f885 b017 	strb.w	fp, [r5, #23]
    ec2c:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ec2e:	2100      	movs	r1, #0
    ec30:	4608      	mov	r0, r1
    ec32:	f003 f9dd 	bl	11ff0 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ec36:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ec38:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ec3c:	4608      	mov	r0, r1
    ec3e:	f003 f9dc 	bl	11ffa <radio_tx_chain_delay_get>
    ec42:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    ec46:	f100 031e 	add.w	r3, r0, #30
    ec4a:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    ec4c:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    ec50:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    ec52:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    ec56:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    ec58:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    ec5c:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    ec5e:	f106 0117 	add.w	r1, r6, #23
    ec62:	2205      	movs	r2, #5
    ec64:	f105 001e 	add.w	r0, r5, #30
    ec68:	f7f2 ffc8 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    ec6c:	7fb2      	ldrb	r2, [r6, #30]
    ec6e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ec72:	f362 0304 	bfi	r3, r2, #0, #5
    ec76:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    ec7a:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    ec7e:	f362 1347 	bfi	r3, r2, #5, #3
    ec82:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    ec86:	f003 fa3d 	bl	12104 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    ec8a:	4628      	mov	r0, r5
    ec8c:	f003 f9aa 	bl	11fe4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    ec90:	f003 f9e6 	bl	12060 <radio_is_ready>
    ec94:	4683      	mov	fp, r0
    ec96:	2800      	cmp	r0, #0
    ec98:	f000 80cc 	beq.w	ee34 <isr+0xb5c>
		LL_ASSERT(!radio_is_ready());
    ec9c:	4b61      	ldr	r3, [pc, #388]	; (ee24 <isr+0xb4c>)
    ec9e:	9301      	str	r3, [sp, #4]
    eca0:	9300      	str	r3, [sp, #0]
    eca2:	4b61      	ldr	r3, [pc, #388]	; (ee28 <isr+0xb50>)
    eca4:	f7ff bb76 	b.w	e394 <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    eca8:	f1b9 0f00 	cmp.w	r9, #0
    ecac:	f47f af19 	bne.w	eae2 <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    ecb0:	4640      	mov	r0, r8
    ecb2:	f002 fac7 	bl	11244 <ctrl_irk_whitelisted>
		if (crc_ok &&
    ecb6:	2800      	cmp	r0, #0
    ecb8:	f43f aed9 	beq.w	ea6e <isr+0x796>
    ecbc:	e711      	b.n	eae2 <isr+0x80a>
	if (rl_idx != FILTER_IDX_NONE) {
    ecbe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    ecc2:	d06f      	beq.n	eda4 <isr+0xacc>
		return (rl_idx == _radio.scanner.rl_idx);
    ecc4:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    ecc8:	eba0 0e08 	sub.w	lr, r0, r8
    eccc:	f1de 0000 	rsbs	r0, lr, #0
    ecd0:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ecd4:	2800      	cmp	r0, #0
    ecd6:	f47f af25 	bne.w	eb24 <isr+0x84c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ecda:	f899 0008 	ldrb.w	r0, [r9, #8]
    ecde:	f010 000f 	ands.w	r0, r0, #15
    ece2:	d002      	beq.n	ecea <isr+0xa12>
    ece4:	2806      	cmp	r0, #6
    ece6:	f040 81ac 	bne.w	f042 <isr+0xd6a>
		 (_radio.scanner.type != 0) &&
    ecea:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    ecee:	071f      	lsls	r7, r3, #28
    ecf0:	f140 8191 	bpl.w	f016 <isr+0xd3e>
		 (_radio.scanner.type != 0) &&
    ecf4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    ecf8:	2a00      	cmp	r2, #0
    ecfa:	f040 818c 	bne.w	f016 <isr+0xd3e>
		err = isr_rx_scan_report(rssi_ready,
    ecfe:	f1ba 0f00 	cmp.w	sl, #0
    ed02:	bf14      	ite	ne
    ed04:	4641      	movne	r1, r8
    ed06:	21ff      	moveq	r1, #255	; 0xff
    ed08:	4628      	mov	r0, r5
    ed0a:	f7fb fca9 	bl	a660 <isr_rx_scan_report>
		if (err) {
    ed0e:	2800      	cmp	r0, #0
    ed10:	f47f aead 	bne.w	ea6e <isr+0x796>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ed14:	f003 f9dc 	bl	120d0 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    ed18:	7803      	ldrb	r3, [r0, #0]
    ed1a:	2203      	movs	r2, #3
    ed1c:	f362 0303 	bfi	r3, r2, #0, #4
    ed20:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ed22:	f899 3008 	ldrb.w	r3, [r9, #8]
    ed26:	7802      	ldrb	r2, [r0, #0]
    ed28:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ed2c:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    ed30:	230c      	movs	r3, #12
    ed32:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ed34:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ed36:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    ed38:	4640      	mov	r0, r8
    ed3a:	f002 f9cb 	bl	110d4 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ed3e:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    ed42:	4601      	mov	r1, r0
    ed44:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ed46:	f013 0f01 	tst.w	r3, #1
    ed4a:	f810 3b02 	ldrb.w	r3, [r0], #2
    ed4e:	f000 8159 	beq.w	f004 <isr+0xd2c>
    ed52:	2900      	cmp	r1, #0
    ed54:	f000 8156 	beq.w	f004 <isr+0xd2c>
			pdu_adv_tx->tx_addr = 1;
    ed58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ed5c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ed5e:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ed60:	f7f2 ff4c 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    ed64:	2206      	movs	r2, #6
    ed66:	f109 010a 	add.w	r1, r9, #10
    ed6a:	f105 0008 	add.w	r0, r5, #8
    ed6e:	f7f2 ff45 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
    ed72:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ed76:	f043 0302 	orr.w	r3, r3, #2
    ed7a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    ed7e:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    ed80:	2302      	movs	r3, #2
    ed82:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    ed84:	f003 fa44 	bl	12210 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    ed88:	2000      	movs	r0, #0
    ed8a:	f003 f9a5 	bl	120d8 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    ed8e:	4628      	mov	r0, r5
    ed90:	f003 f928 	bl	11fe4 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    ed94:	f003 fb18 	bl	123c8 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    ed98:	f003 f962 	bl	12060 <radio_is_ready>
    ed9c:	2800      	cmp	r0, #0
    ed9e:	f43f ab45 	beq.w	e42c <isr+0x154>
    eda2:	e77b      	b.n	ec9c <isr+0x9c4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    eda4:	f899 2008 	ldrb.w	r2, [r9, #8]
    eda8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    edac:	f3c2 1280 	ubfx	r2, r2, #6, #1
    edb0:	4293      	cmp	r3, r2
    edb2:	d18f      	bne.n	ecd4 <isr+0x9fc>
		(memcmp(&_radio.scanner.adv_addr[0],
    edb4:	2206      	movs	r2, #6
    edb6:	f109 010a 	add.w	r1, r9, #10
    edba:	481c      	ldr	r0, [pc, #112]	; (ee2c <isr+0xb54>)
    edbc:	f7f2 ff09 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    edc0:	fab0 f080 	clz	r0, r0
    edc4:	0940      	lsrs	r0, r0, #5
    edc6:	e785      	b.n	ecd4 <isr+0x9fc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    edc8:	2801      	cmp	r0, #1
    edca:	d18b      	bne.n	ece4 <isr+0xa0c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    edcc:	2300      	movs	r3, #0
    edce:	4642      	mov	r2, r8
    edd0:	4631      	mov	r1, r6
    edd2:	f7fb fbf9 	bl	a5c8 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    edd6:	2800      	cmp	r0, #0
    edd8:	f43f af7f 	beq.w	ecda <isr+0xa02>
    eddc:	e6a8      	b.n	eb30 <isr+0x858>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    edde:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ede2:	4913      	ldr	r1, [pc, #76]	; (ee30 <isr+0xb58>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ede4:	09d2      	lsrs	r2, r2, #7
    ede6:	f362 1386 	bfi	r3, r2, #6, #1
    edea:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    edec:	2206      	movs	r2, #6
    edee:	e6e9      	b.n	ebc4 <isr+0x8ec>
				conn_space_us += conn_interval_us;
    edf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    edf2:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    edf4:	f1bb 0f00 	cmp.w	fp, #0
    edf8:	dbfa      	blt.n	edf0 <isr+0xb18>
    edfa:	459b      	cmp	fp, r3
    edfc:	d3f8      	bcc.n	edf0 <isr+0xb18>
				(conn_space_us - conn_offset_us) / 1250;
    edfe:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    ee02:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ee06:	fbb3 f3f2 	udiv	r3, r3, r2
    ee0a:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    ee0c:	7d6b      	ldrb	r3, [r5, #21]
    ee0e:	3301      	adds	r3, #1
    ee10:	756b      	strb	r3, [r5, #21]
    ee12:	e70c      	b.n	ec2e <isr+0x956>
    ee14:	f3af 8000 	nop.w
    ee18:	3b9aca00 	.word	0x3b9aca00
    ee1c:	00000000 	.word	0x00000000
    ee20:	1afd498d 	.word	0x1afd498d
    ee24:	000145f1 	.word	0x000145f1
    ee28:	00016803 	.word	0x00016803
    ee2c:	200009aa 	.word	0x200009aa
    ee30:	200009a4 	.word	0x200009a4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee34:	f44f 72aa 	mov.w	r2, #340	; 0x154
    ee38:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    ee3c:	4630      	mov	r0, r6
    ee3e:	f7f7 ff30 	bl	6ca2 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee42:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee44:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ee46:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    ee4a:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    ee4e:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ee52:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee54:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    ee58:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ee5e:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ee60:	2206      	movs	r2, #6
    ee62:	f107 001b 	add.w	r0, r7, #27
    ee66:	f7f2 fec9 	bl	1bfc <memcpy>
    ee6a:	f107 0b0e 	add.w	fp, r7, #14
    ee6e:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    ee72:	f1ba 0f00 	cmp.w	sl, #0
    ee76:	d032      	beq.n	eede <isr+0xc06>
    ee78:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    ee7c:	d02f      	beq.n	eede <isr+0xc06>
			ll_rl_id_addr_get(rl_idx,
    ee7e:	465a      	mov	r2, fp
    ee80:	f107 010d 	add.w	r1, r7, #13
    ee84:	4640      	mov	r0, r8
    ee86:	930d      	str	r3, [sp, #52]	; 0x34
    ee88:	f002 fb4e 	bl	11528 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ee8c:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ee8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee90:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    ee92:	3202      	adds	r2, #2
    ee94:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ee96:	4618      	mov	r0, r3
    ee98:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ee9a:	f7f2 feaf 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    ee9e:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    eea2:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    eea6:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    eeaa:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    eeae:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    eeb2:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    eeb6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    eeba:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    eebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    eec2:	8c30      	ldrh	r0, [r6, #32]
    eec4:	f7fb fc24 	bl	a710 <rx_fc_lock>
		packet_rx_enqueue();
    eec8:	f7fb fb32 	bl	a530 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    eecc:	2003      	movs	r0, #3
    eece:	f7fa fcc5 	bl	985c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    eed2:	b988      	cbnz	r0, eef8 <isr+0xc20>
    eed4:	4bba      	ldr	r3, [pc, #744]	; (f1c0 <isr+0xee8>)
    eed6:	9301      	str	r3, [sp, #4]
    eed8:	9300      	str	r3, [sp, #0]
    eeda:	4bba      	ldr	r3, [pc, #744]	; (f1c4 <isr+0xeec>)
    eedc:	e474      	b.n	e7c8 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    eede:	2206      	movs	r2, #6
    eee0:	2100      	movs	r1, #0
    eee2:	4618      	mov	r0, r3
    eee4:	f7f2 feb6 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
    eee8:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eeea:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    eeec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    eef0:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eef2:	2206      	movs	r2, #6
    eef4:	4658      	mov	r0, fp
    eef6:	e7d0      	b.n	ee9a <isr+0xbc2>
			node_rx->hdr.handle = conn->handle;
    eef8:	8c33      	ldrh	r3, [r6, #32]
    eefa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    eefc:	230b      	movs	r3, #11
    eefe:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    ef00:	f899 3008 	ldrb.w	r3, [r9, #8]
    ef04:	f013 0320 	ands.w	r3, r3, #32
    ef08:	d00e      	beq.n	ef28 <isr+0xc50>
					((u16_t)conn->access_addr[1] << 8) |
    ef0a:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    ef0c:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    ef0e:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    ef10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    ef14:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    ef16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    ef1a:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    ef1c:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    ef1e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    ef22:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    ef24:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ef26:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ef28:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ef2a:	f7fb fb01 	bl	a530 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ef2e:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ef30:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ef34:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    ef36:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    ef3a:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ef3c:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef3e:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ef42:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ef44:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef46:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ef4a:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef4c:	4629      	mov	r1, r5
    ef4e:	9300      	str	r3, [sp, #0]
    ef50:	4628      	mov	r0, r5
    ef52:	4b9d      	ldr	r3, [pc, #628]	; (f1c8 <isr+0xef0>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ef54:	f8df a284 	ldr.w	sl, [pc, #644]	; f1dc <isr+0xf04>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ef58:	bf38      	it	cc
    ef5a:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef5c:	f7f8 fd90 	bl	7a80 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    ef60:	f240 6139 	movw	r1, #1593	; 0x639
    ef64:	f7fb fc40 	bl	a7e8 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef68:	462b      	mov	r3, r5
    ef6a:	2204      	movs	r2, #4
    ef6c:	4629      	mov	r1, r5
    ef6e:	9500      	str	r5, [sp, #0]
    ef70:	4628      	mov	r0, r5
    ef72:	f7f8 fd85 	bl	7a80 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ef76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef78:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef7c:	68a3      	ldr	r3, [r4, #8]
    ef7e:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    ef82:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef84:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    ef88:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    ef8c:	9308      	str	r3, [sp, #32]
    ef8e:	4b8f      	ldr	r3, [pc, #572]	; (f1cc <isr+0xef4>)
    ef90:	9307      	str	r3, [sp, #28]
    ef92:	4b8f      	ldr	r3, [pc, #572]	; (f1d0 <isr+0xef8>)
    ef94:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef96:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    ef98:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef9a:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ef9c:	4640      	mov	r0, r8
    ef9e:	a386      	add	r3, pc, #536	; (adr r3, f1b8 <isr+0xee0>)
    efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
    efa4:	4649      	mov	r1, r9
		ticker_status =
    efa6:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    efa8:	f7f1 f934 	bl	214 <__aeabi_uldivmod>
    efac:	4610      	mov	r0, r2
    efae:	4619      	mov	r1, r3
    efb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    efb4:	2300      	movs	r3, #0
    efb6:	f7f1 f92d 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    efba:	a37f      	add	r3, pc, #508	; (adr r3, f1b8 <isr+0xee0>)
    efbc:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    efc0:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    efc2:	4649      	mov	r1, r9
    efc4:	4640      	mov	r0, r8
    efc6:	f7f1 f925 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    efca:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    efcc:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    efce:	a37a      	add	r3, pc, #488	; (adr r3, f1b8 <isr+0xee0>)
    efd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    efd4:	fba1 010a 	umull	r0, r1, r1, sl
    efd8:	f7f1 f91c 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    efdc:	3407      	adds	r4, #7
    efde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    efe2:	b2e4      	uxtb	r4, r4
    efe4:	9000      	str	r0, [sp, #0]
    efe6:	465b      	mov	r3, fp
    efe8:	4622      	mov	r2, r4
    efea:	4629      	mov	r1, r5
    efec:	4628      	mov	r0, r5
    efee:	f7f8 fca9 	bl	7944 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    eff2:	f030 0302 	bics.w	r3, r0, #2
    eff6:	f43f aa19 	beq.w	e42c <isr+0x154>
    effa:	4b71      	ldr	r3, [pc, #452]	; (f1c0 <isr+0xee8>)
    effc:	9301      	str	r3, [sp, #4]
    effe:	9300      	str	r3, [sp, #0]
    f000:	4b70      	ldr	r3, [pc, #448]	; (f1c4 <isr+0xeec>)
    f002:	e514      	b.n	ea2e <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f004:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f008:	4972      	ldr	r1, [pc, #456]	; (f1d4 <isr+0xefc>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f00a:	09d2      	lsrs	r2, r2, #7
    f00c:	f362 1386 	bfi	r3, r2, #6, #1
    f010:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f012:	2206      	movs	r2, #6
    f014:	e6a4      	b.n	ed60 <isr+0xa88>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f016:	b9a0      	cbnz	r0, f042 <isr+0xd6a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    f018:	f899 3009 	ldrb.w	r3, [r9, #9]
    f01c:	2b00      	cmp	r3, #0
    f01e:	f43f ad26 	beq.w	ea6e <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    f022:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f026:	2b00      	cmp	r3, #0
    f028:	f47f ad21 	bne.w	ea6e <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
    f02c:	f1ba 0f00 	cmp.w	sl, #0
    f030:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f034:	bf14      	ite	ne
    f036:	4641      	movne	r1, r8
    f038:	21ff      	moveq	r1, #255	; 0xff
    f03a:	4628      	mov	r0, r5
    f03c:	f7fb fb10 	bl	a660 <isr_rx_scan_report>
    f040:	e515      	b.n	ea6e <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f042:	2801      	cmp	r0, #1
    f044:	d00e      	beq.n	f064 <isr+0xd8c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f046:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f04a:	f003 020b 	and.w	r2, r3, #11
    f04e:	2a02      	cmp	r2, #2
    f050:	d0e2      	beq.n	f018 <isr+0xd40>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f052:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f056:	2b07      	cmp	r3, #7
    f058:	d10d      	bne.n	f076 <isr+0xd9e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f05a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f05e:	0758      	lsls	r0, r3, #29
    f060:	d1da      	bne.n	f018 <isr+0xd40>
    f062:	e504      	b.n	ea6e <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f064:	ab10      	add	r3, sp, #64	; 0x40
    f066:	4642      	mov	r2, r8
    f068:	4631      	mov	r1, r6
    f06a:	2000      	movs	r0, #0
    f06c:	f7fb faac 	bl	a5c8 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f070:	2800      	cmp	r0, #0
    f072:	d1d1      	bne.n	f018 <isr+0xd40>
    f074:	e7e7      	b.n	f046 <isr+0xd6e>
		   (_radio.scanner.phy)) ||
    f076:	2b04      	cmp	r3, #4
    f078:	f47f acf9 	bne.w	ea6e <isr+0x796>
		   (_radio.scanner.state != 0) &&
    f07c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f080:	0799      	lsls	r1, r3, #30
    f082:	f57f acf4 	bpl.w	ea6e <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f086:	f003 f823 	bl	120d0 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f08a:	f899 3008 	ldrb.w	r3, [r9, #8]
    f08e:	7802      	ldrb	r2, [r0, #0]
    f090:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f094:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f098:	f47f ace9 	bne.w	ea6e <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f09c:	2206      	movs	r2, #6
    f09e:	f109 010a 	add.w	r1, r9, #10
    f0a2:	3008      	adds	r0, #8
    f0a4:	f7f2 fd95 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
    f0a8:	2800      	cmp	r0, #0
    f0aa:	d0b5      	beq.n	f018 <isr+0xd40>
    f0ac:	e4df      	b.n	ea6e <isr+0x796>
	_radio.packet_counter++;
    f0ae:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f0b2:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f0b6:	3301      	adds	r3, #1
    f0b8:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f0bc:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f0be:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f0c2:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f0c6:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f0ca:	2301      	movs	r3, #1
    f0cc:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f0d0:	2f00      	cmp	r7, #0
    f0d2:	f000 82d2 	beq.w	f67a <isr+0x13a2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f0d6:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f0da:	f898 1008 	ldrb.w	r1, [r8, #8]
    f0de:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f0e2:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f0e6:	f003 0201 	and.w	r2, r3, #1
    f0ea:	4291      	cmp	r1, r2
    f0ec:	f000 819e 	beq.w	f42c <isr+0x1154>
		_radio.conn_curr->sn++;
    f0f0:	f082 0201 	eor.w	r2, r2, #1
    f0f4:	f362 0300 	bfi	r3, r2, #0, #1
    f0f8:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f0fc:	7ce3      	ldrb	r3, [r4, #19]
    f0fe:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f100:	bf02      	ittt	eq
    f102:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f106:	f043 0301 	orreq.w	r3, r3, #1
    f10a:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f10e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f112:	061a      	lsls	r2, r3, #24
    f114:	f100 8185 	bmi.w	f422 <isr+0x114a>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f118:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f11c:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f120:	1d30      	adds	r0, r6, #4
    f122:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f126:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f12a:	f1b9 0f00 	cmp.w	r9, #0
    f12e:	f000 80ab 	beq.w	f288 <isr+0xfb0>
				if (_radio.conn_curr->enc_tx) {
    f132:	069b      	lsls	r3, r3, #26
    f134:	d50b      	bpl.n	f14e <isr+0xe76>
					_radio.conn_curr->ccm_tx.counter++;
    f136:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f13a:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f13e:	f11b 0201 	adds.w	r2, fp, #1
    f142:	f14c 0300 	adc.w	r3, ip, #0
    f146:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f14a:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f14e:	5c43      	ldrb	r3, [r0, r1]
    f150:	f003 0303 	and.w	r3, r3, #3
    f154:	2b03      	cmp	r3, #3
    f156:	f040 8097 	bne.w	f288 <isr+0xfb0>
	switch (pdu_data_tx->llctrl.opcode) {
    f15a:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f15e:	3b02      	subs	r3, #2
    f160:	2b16      	cmp	r3, #22
    f162:	f200 8091 	bhi.w	f288 <isr+0xfb0>
    f166:	e8df f013 	tbh	[pc, r3, lsl #1]
    f16a:	0017      	.short	0x0017
    f16c:	00c50073 	.word	0x00c50073
    f170:	008f008f 	.word	0x008f008f
    f174:	008f008f 	.word	0x008f008f
    f178:	0091008f 	.word	0x0091008f
    f17c:	008f009c 	.word	0x008f009c
    f180:	008f00cc 	.word	0x008f00cc
    f184:	008f008f 	.word	0x008f008f
    f188:	008f008f 	.word	0x008f008f
    f18c:	00d6008f 	.word	0x00d6008f
    f190:	00ee008f 	.word	0x00ee008f
    f194:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
    f198:	2303      	movs	r3, #3
    f19a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f19c:	f002 ff42 	bl	12024 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f1a0:	f002 ff5e 	bl	12060 <radio_is_ready>
    f1a4:	b1e0      	cbz	r0, f1e0 <isr+0xf08>
    f1a6:	4b06      	ldr	r3, [pc, #24]	; (f1c0 <isr+0xee8>)
    f1a8:	9301      	str	r3, [sp, #4]
    f1aa:	9300      	str	r3, [sp, #0]
    f1ac:	4b0a      	ldr	r3, [pc, #40]	; (f1d8 <isr+0xf00>)
    f1ae:	f7ff b8f1 	b.w	e394 <isr+0xbc>
    f1b2:	bf00      	nop
    f1b4:	f3af 8000 	nop.w
    f1b8:	1afd498d 	.word	0x1afd498d
    f1bc:	00000007 	.word	0x00000007
    f1c0:	000145f1 	.word	0x000145f1
    f1c4:	00016803 	.word	0x00016803
    f1c8:	0000a7e9 	.word	0x0000a7e9
    f1cc:	0000a745 	.word	0x0000a745
    f1d0:	0000cbe9 	.word	0x0000cbe9
    f1d4:	200009a4 	.word	0x200009a4
    f1d8:	0001680f 	.word	0x0001680f
    f1dc:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f1e0:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f1e4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f1e8:	2913      	cmp	r1, #19
    f1ea:	bf08      	it	eq
    f1ec:	2116      	moveq	r1, #22
    f1ee:	f7fb fee3 	bl	afb8 <terminate_ind_rx_enqueue>
		terminate = 1;
    f1f2:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f1f4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f1f8:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f1fc:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f1fe:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f202:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f206:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f208:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f20c:	d11e      	bne.n	f24c <isr+0xf74>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f20e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f212:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f216:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f218:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f21a:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f21e:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f222:	f040 80c9 	bne.w	f3b8 <isr+0x10e0>
		if (node_tx) {
    f226:	b18e      	cbz	r6, f24c <isr+0xf74>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f228:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f22c:	f8d3 e000 	ldr.w	lr, [r3]
    f230:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f234:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f236:	bf06      	itte	eq
    f238:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f23c:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f240:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f244:	49cd      	ldr	r1, [pc, #820]	; (f57c <isr+0x12a4>)
    f246:	4630      	mov	r0, r6
    f248:	f7f7 fd0d 	bl	6c66 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f24c:	2600      	movs	r6, #0
    f24e:	e0bc      	b.n	f3ca <isr+0x10f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f250:	2208      	movs	r2, #8
    f252:	f10a 010e 	add.w	r1, sl, #14
    f256:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f25a:	f7f2 fccf 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f25e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f262:	2204      	movs	r2, #4
    f264:	f10a 0116 	add.w	r1, sl, #22
    f268:	f500 7089 	add.w	r0, r0, #274	; 0x112
    f26c:	f7f2 fcc6 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
    f270:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f274:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f278:	f042 0208 	orr.w	r2, r2, #8
    f27c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f280:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    f284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    f288:	2500      	movs	r5, #0
    f28a:	e7b3      	b.n	f1f4 <isr+0xf1c>
		_radio.conn_curr->pause_tx = 1;
    f28c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    f290:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    f294:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f298:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    f29c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    f2a0:	e7f2      	b.n	f288 <isr+0xfb0>
		if (_radio.role == ROLE_MASTER) {
    f2a2:	f894 a013 	ldrb.w	sl, [r4, #19]
    f2a6:	fa5f fa8a 	uxtb.w	sl, sl
    f2aa:	f1ba 0f04 	cmp.w	sl, #4
    f2ae:	d121      	bne.n	f2f4 <isr+0x101c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2b0:	7933      	ldrb	r3, [r6, #4]
    f2b2:	f043 0303 	orr.w	r3, r3, #3
    f2b6:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f2b8:	2317      	movs	r3, #23
    f2ba:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f2bc:	2303      	movs	r3, #3
    f2be:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    f2c0:	2208      	movs	r2, #8
    f2c2:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    f2c6:	3004      	adds	r0, #4
    f2c8:	f7f2 fc98 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    f2cc:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f2d0:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    f2d2:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    f2d6:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    f2d8:	f106 0112 	add.w	r1, r6, #18
    f2dc:	2208      	movs	r2, #8
    f2de:	6860      	ldr	r0, [r4, #4]
    f2e0:	f003 fecc 	bl	1307c <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    f2e4:	f106 011a 	add.w	r1, r6, #26
    f2e8:	4652      	mov	r2, sl
    f2ea:	6860      	ldr	r0, [r4, #4]
    f2ec:	f003 fec6 	bl	1307c <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    f2f0:	2600      	movs	r6, #0
    f2f2:	e7c9      	b.n	f288 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    f2f4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f2f8:	f043 0308 	orr.w	r3, r3, #8
    f2fc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f300:	e7c2      	b.n	f288 <isr+0xfb0>
		_radio.conn_curr->pause_rx = 0;
    f302:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    f306:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f30a:	f36f 03c3 	bfc	r3, #3, #1
    f30e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    f312:	2300      	movs	r3, #0
    f314:	e7c2      	b.n	f29c <isr+0xfc4>
		if ((_radio.conn_curr->llcp_length.req !=
    f316:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    f31a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    f31e:	429a      	cmp	r2, r3
    f320:	d0b2      	beq.n	f288 <isr+0xfb0>
		    (_radio.conn_curr->llcp_length.state ==
    f322:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    f326:	f003 0203 	and.w	r2, r3, #3
    f32a:	2a01      	cmp	r2, #1
    f32c:	d1ac      	bne.n	f288 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    f32e:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    f332:	f042 0208 	orr.w	r2, r2, #8
    f336:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    f33a:	2202      	movs	r2, #2
    f33c:	f362 0301 	bfi	r3, r2, #0, #2
    f340:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    f344:	e7a0      	b.n	f288 <isr+0xfb0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f346:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f34a:	2202      	movs	r2, #2
    f34c:	f362 0301 	bfi	r3, r2, #0, #2
    f350:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f354:	7ce3      	ldrb	r3, [r4, #19]
    f356:	2b03      	cmp	r3, #3
    f358:	d196      	bne.n	f288 <isr+0xfb0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f35a:	2301      	movs	r3, #1
    f35c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f360:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f364:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f368:	2202      	movs	r2, #2
    f36a:	2304      	movs	r3, #4
    f36c:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f370:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f374:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f378:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f37c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f380:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f384:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f388:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f38c:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f390:	f003 0307 	and.w	r3, r3, #7
    f394:	aa12      	add	r2, sp, #72	; 0x48
    f396:	4413      	add	r3, r2
    f398:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f39c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f3a0:	f363 0202 	bfi	r2, r3, #0, #3
    f3a4:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f3a8:	e76e      	b.n	f288 <isr+0xfb0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f3aa:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f3ae:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f3b2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f3b6:	e7f3      	b.n	f3a0 <isr+0x10c8>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f3b8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f3bc:	4293      	cmp	r3, r2
    f3be:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f3c0:	bf08      	it	eq
    f3c2:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f3c6:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f3ca:	b37d      	cbz	r5, f42c <isr+0x1154>
		connection_release(_radio.conn_curr);
    f3cc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f3d0:	f7fb fc40 	bl	ac54 <connection_release>
		_radio.conn_curr = NULL;
    f3d4:	2300      	movs	r3, #0
    f3d6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    f3da:	f002 ffe9 	bl	123b0 <radio_tmr_aa_restore>
    f3de:	b918      	cbnz	r0, f3e8 <isr+0x1110>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f3e0:	f002 ffda 	bl	12398 <radio_tmr_aa_get>
    f3e4:	f002 ffde 	bl	123a4 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f3e8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3ec:	2b00      	cmp	r3, #0
    f3ee:	f43f a81d 	beq.w	e42c <isr+0x154>
	if (tx_release) {
    f3f2:	b11e      	cbz	r6, f3fc <isr+0x1124>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f3f4:	4631      	mov	r1, r6
    f3f6:	8c18      	ldrh	r0, [r3, #32]
    f3f8:	f7fb fba2 	bl	ab40 <pdu_node_tx_release>
	if (rx_enqueue) {
    f3fc:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f400:	2b00      	cmp	r3, #0
    f402:	f43f a813 	beq.w	e42c <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
    f406:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f40a:	8c18      	ldrh	r0, [r3, #32]
    f40c:	f7fb f980 	bl	a710 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f410:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f414:	8c1b      	ldrh	r3, [r3, #32]
    f416:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f41a:	f7fb f889 	bl	a530 <packet_rx_enqueue>
    f41e:	f7ff b805 	b.w	e42c <isr+0x154>
			_radio.conn_curr->empty = 0;
    f422:	f36f 13c7 	bfc	r3, #7, #1
    f426:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f42a:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f42c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f430:	f898 2008 	ldrb.w	r2, [r8, #8]
    f434:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f438:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f43c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f440:	429a      	cmp	r2, r3
    f442:	f040 80e9 	bne.w	f618 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f446:	2003      	movs	r0, #3
    f448:	f7fa fa08 	bl	985c <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f44c:	2800      	cmp	r0, #0
    f44e:	f000 80e3 	beq.w	f618 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f452:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f456:	b393      	cbz	r3, f4be <isr+0x11e6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f458:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    f45c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    f460:	4293      	cmp	r3, r2
    f462:	d105      	bne.n	f470 <isr+0x1198>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f464:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f468:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    f46c:	4291      	cmp	r1, r2
    f46e:	d026      	beq.n	f4be <isr+0x11e6>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f470:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    f474:	4293      	cmp	r3, r2
    f476:	f000 80cf 	beq.w	f618 <isr+0x1340>
	      (_radio.fc_req != _radio.fc_ack) &&
    f47a:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f47e:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f482:	429a      	cmp	r2, r3
    f484:	f000 80c8 	beq.w	f618 <isr+0x1340>
		(((_radio.fc_req == 0) &&
    f488:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    f48c:	b933      	cbnz	r3, f49c <isr+0x11c4>
		   _radio.conn_curr->handle)) ||
    f48e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    f492:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    f496:	8c1b      	ldrh	r3, [r3, #32]
    f498:	429a      	cmp	r2, r3
    f49a:	d010      	beq.n	f4be <isr+0x11e6>
		 ((_radio.fc_req != 0) &&
    f49c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	f000 80b9 	beq.w	f618 <isr+0x1340>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f4a6:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    f4aa:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f4ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f4b2:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    f4b6:	8c0b      	ldrh	r3, [r1, #32]
    f4b8:	429a      	cmp	r2, r3
    f4ba:	f040 80ad 	bne.w	f618 <isr+0x1340>
		if (pdu_data_rx->len != 0) {
    f4be:	f898 5009 	ldrb.w	r5, [r8, #9]
    f4c2:	2d00      	cmp	r5, #0
    f4c4:	f000 80b1 	beq.w	f62a <isr+0x1352>
			if (_radio.conn_curr->enc_rx) {
    f4c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f4cc:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f4d0:	f015 0510 	ands.w	r5, r5, #16
    f4d4:	d00c      	beq.n	f4f0 <isr+0x1218>
				done = radio_ccm_is_done();
    f4d6:	f002 fff7 	bl	124c8 <radio_ccm_is_done>
				LL_ASSERT(done);
    f4da:	b940      	cbnz	r0, f4ee <isr+0x1216>
    f4dc:	4b28      	ldr	r3, [pc, #160]	; (f580 <isr+0x12a8>)
    f4de:	9301      	str	r3, [sp, #4]
    f4e0:	9300      	str	r3, [sp, #0]
    f4e2:	4a28      	ldr	r2, [pc, #160]	; (f584 <isr+0x12ac>)
    f4e4:	4b28      	ldr	r3, [pc, #160]	; (f588 <isr+0x12b0>)
    f4e6:	4929      	ldr	r1, [pc, #164]	; (f58c <isr+0x12b4>)
    f4e8:	4829      	ldr	r0, [pc, #164]	; (f590 <isr+0x12b8>)
    f4ea:	f7ff baa3 	b.w	ea34 <isr+0x75c>
				ccm_rx_increment = 1;
    f4ee:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f4f0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f4f4:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f4f8:	06d9      	lsls	r1, r3, #27
    f4fa:	d42c      	bmi.n	f556 <isr+0x127e>
			    (_radio.conn_curr->pause_rx &&
    f4fc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f500:	f898 3008 	ldrb.w	r3, [r8, #8]
    f504:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f508:	f012 0f04 	tst.w	r2, #4
    f50c:	d142      	bne.n	f594 <isr+0x12bc>
			_radio.conn_curr->appto_expire = 0;
    f50e:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f510:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f514:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f518:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f51c:	d004      	beq.n	f528 <isr+0x1250>
    f51e:	2b02      	cmp	r3, #2
    f520:	d873      	bhi.n	f60a <isr+0x1332>
				*rx_enqueue = 1;
    f522:	2301      	movs	r3, #1
    f524:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f528:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f52c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f530:	f082 0202 	eor.w	r2, r2, #2
    f534:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f538:	2d00      	cmp	r5, #0
    f53a:	d06d      	beq.n	f618 <isr+0x1340>
				_radio.conn_curr->ccm_rx.counter++;
    f53c:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f540:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f544:	f119 0001 	adds.w	r0, r9, #1
    f548:	f14a 0100 	adc.w	r1, sl, #0
    f54c:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f550:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f554:	e060      	b.n	f618 <isr+0x1340>
			     !radio_ccm_mic_is_valid()) ||
    f556:	f002 ffd5 	bl	12504 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f55a:	2800      	cmp	r0, #0
    f55c:	d1ce      	bne.n	f4fc <isr+0x1224>
				_radio.state = STATE_CLOSE;
    f55e:	2303      	movs	r3, #3
    f560:	7523      	strb	r3, [r4, #20]
				radio_disable();
    f562:	f002 fd5f 	bl	12024 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f566:	f002 fd7b 	bl	12060 <radio_is_ready>
    f56a:	4605      	mov	r5, r0
    f56c:	2800      	cmp	r0, #0
    f56e:	d040      	beq.n	f5f2 <isr+0x131a>
    f570:	4b03      	ldr	r3, [pc, #12]	; (f580 <isr+0x12a8>)
    f572:	9301      	str	r3, [sp, #4]
    f574:	9300      	str	r3, [sp, #0]
    f576:	4b04      	ldr	r3, [pc, #16]	; (f588 <isr+0x12b0>)
    f578:	f7fe bf0c 	b.w	e394 <isr+0xbc>
    f57c:	20000a1c 	.word	0x20000a1c
    f580:	000145f1 	.word	0x000145f1
    f584:	00015373 	.word	0x00015373
    f588:	00016873 	.word	0x00016873
    f58c:	000153c2 	.word	0x000153c2
    f590:	00016ecb 	.word	0x00016ecb
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f594:	f003 0103 	and.w	r1, r3, #3
    f598:	2903      	cmp	r1, #3
    f59a:	d1e0      	bne.n	f55e <isr+0x1286>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f59c:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f5a0:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f5a4:	f1be 0f00 	cmp.w	lr, #0
    f5a8:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f5ac:	db15      	blt.n	f5da <isr+0x1302>
	       (!conn->role &&
    f5ae:	b922      	cbnz	r2, f5ba <isr+0x12e2>
		((!conn->refresh &&
    f5b0:	2902      	cmp	r1, #2
    f5b2:	d0ac      	beq.n	f50e <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f5b4:	2911      	cmp	r1, #17
    f5b6:	d8d2      	bhi.n	f55e <isr+0x1286>
    f5b8:	e009      	b.n	f5ce <isr+0x12f6>
		 (conn->refresh &&
    f5ba:	1e8a      	subs	r2, r1, #2
    f5bc:	b2d2      	uxtb	r2, r2
    f5be:	2a09      	cmp	r2, #9
    f5c0:	d8f8      	bhi.n	f5b4 <isr+0x12dc>
    f5c2:	f240 2e05 	movw	lr, #517	; 0x205
    f5c6:	fa2e f202 	lsr.w	r2, lr, r2
    f5ca:	07d2      	lsls	r2, r2, #31
    f5cc:	d49f      	bmi.n	f50e <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f5ce:	4aac      	ldr	r2, [pc, #688]	; (f880 <isr+0x15a8>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f5d0:	fa22 f101 	lsr.w	r1, r2, r1
    f5d4:	07ca      	lsls	r2, r1, #31
    f5d6:	d5c2      	bpl.n	f55e <isr+0x1286>
    f5d8:	e799      	b.n	f50e <isr+0x1236>
	       (conn->role &&
    f5da:	b92a      	cbnz	r2, f5e8 <isr+0x1310>
		((!conn->refresh &&
    f5dc:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f5de:	d096      	beq.n	f50e <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f5e0:	2911      	cmp	r1, #17
    f5e2:	d8bc      	bhi.n	f55e <isr+0x1286>
    f5e4:	4aa7      	ldr	r2, [pc, #668]	; (f884 <isr+0x15ac>)
    f5e6:	e7f3      	b.n	f5d0 <isr+0x12f8>
		 (conn->refresh &&
    f5e8:	1e8a      	subs	r2, r1, #2
    f5ea:	2a01      	cmp	r2, #1
    f5ec:	d98f      	bls.n	f50e <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f5ee:	290b      	cmp	r1, #11
    f5f0:	e7f5      	b.n	f5de <isr+0x1306>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    f5f2:	213d      	movs	r1, #61	; 0x3d
    f5f4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f5f8:	f7fb fcde 	bl	afb8 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    f5fc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f600:	f7fb fb28 	bl	ac54 <connection_release>
				_radio.conn_curr = NULL;
    f604:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    f608:	e6e7      	b.n	f3da <isr+0x1102>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    f60a:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    f60e:	4640      	mov	r0, r8
    f610:	f7fd fd42 	bl	d098 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    f614:	2800      	cmp	r0, #0
    f616:	d087      	beq.n	f528 <isr+0x1250>
		_radio.conn_curr->supervision_expire = 0;
    f618:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    f61c:	2300      	movs	r3, #0
    f61e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    f622:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    f624:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    f628:	e03e      	b.n	f6a8 <isr+0x13d0>
		} else if ((_radio.conn_curr->enc_rx) ||
    f62a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f62e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    f632:	f013 0f14 	tst.w	r3, #20
    f636:	f43f af77 	beq.w	f528 <isr+0x1250>
					    (conn->latency + 6)) ?
    f63a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    f63c:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    f640:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    f642:	4299      	cmp	r1, r3
    f644:	bfc4      	itt	gt
    f646:	1f8b      	subgt	r3, r1, #6
    f648:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    f64a:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    f64e:	bfcc      	ite	gt
    f650:	b29b      	uxthgt	r3, r3
    f652:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    f654:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    f656:	bf1e      	ittt	ne
    f658:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    f65c:	2300      	movne	r3, #0
    f65e:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    f662:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f666:	2b00      	cmp	r3, #0
    f668:	f47f af5e 	bne.w	f528 <isr+0x1250>
				conn->appto_expire = conn->appto_reload;
    f66c:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    f670:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    f674:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    f678:	e756      	b.n	f528 <isr+0x1250>
		if (_radio.crc_expire == 0) {
    f67a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    f67e:	b913      	cbnz	r3, f686 <isr+0x13ae>
			_radio.crc_expire = 2;
    f680:	2302      	movs	r3, #2
    f682:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    f686:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f68a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    f68e:	3b01      	subs	r3, #1
    f690:	b2db      	uxtb	r3, r3
    f692:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f696:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    f69a:	fab3 f583 	clz	r5, r3
    f69e:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    f6a0:	bb86      	cbnz	r6, f704 <isr+0x142c>
			_radio.conn_curr->supervision_expire =
    f6a2:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    f6a4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f6a8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f6ac:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f6ae:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f6b2:	f7fd fbb3 	bl	ce1c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f6b6:	7d23      	ldrb	r3, [r4, #20]
    f6b8:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f6ba:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f6be:	d010      	beq.n	f6e2 <isr+0x140a>
    f6c0:	bb15      	cbnz	r5, f708 <isr+0x1430>
    f6c2:	b137      	cbz	r7, f6d2 <isr+0x13fa>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f6c4:	f898 3008 	ldrb.w	r3, [r8, #8]
    f6c8:	06d8      	lsls	r0, r3, #27
    f6ca:	d402      	bmi.n	f6d2 <isr+0x13fa>
			 (pdu_data_tx->len == 0)) ||
    f6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f6ce:	785b      	ldrb	r3, [r3, #1]
    f6d0:	b1d3      	cbz	r3, f708 <isr+0x1430>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    f6d2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    f6d6:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f6da:	2b00      	cmp	r3, #0
    f6dc:	bf0c      	ite	eq
    f6de:	2302      	moveq	r3, #2
    f6e0:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    f6e2:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f6e4:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    f6e6:	d12d      	bne.n	f744 <isr+0x146c>
		if (_radio.role == ROLE_MASTER) {
    f6e8:	7ce3      	ldrb	r3, [r4, #19]
    f6ea:	2b04      	cmp	r3, #4
    f6ec:	d10e      	bne.n	f70c <isr+0x1434>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    f6ee:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f6f2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f6f6:	f369 12c7 	bfi	r2, r9, #7, #1
    f6fa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    f6fe:	f002 fc91 	bl	12024 <radio_disable>
    f702:	e66a      	b.n	f3da <isr+0x1102>
	struct radio_pdu_node_tx *tx_release = NULL;
    f704:	2600      	movs	r6, #0
    f706:	e7cf      	b.n	f6a8 <isr+0x13d0>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f708:	2303      	movs	r3, #3
    f70a:	e7ea      	b.n	f6e2 <isr+0x140a>
			radio_switch_complete_and_disable();
    f70c:	f002 fcfa 	bl	12104 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    f710:	9910      	ldr	r1, [sp, #64]	; 0x40
    f712:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f716:	780b      	ldrb	r3, [r1, #0]
    f718:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    f71c:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    f720:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f724:	f362 0382 	bfi	r3, r2, #2, #1
    f728:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    f72a:	f7fa fc21 	bl	9f70 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    f72e:	f002 fc97 	bl	12060 <radio_is_ready>
    f732:	2800      	cmp	r0, #0
    f734:	f43f ae51 	beq.w	f3da <isr+0x1102>
    f738:	4b53      	ldr	r3, [pc, #332]	; (f888 <isr+0x15b0>)
    f73a:	9301      	str	r3, [sp, #4]
    f73c:	9300      	str	r3, [sp, #0]
    f73e:	4b53      	ldr	r3, [pc, #332]	; (f88c <isr+0x15b4>)
    f740:	f7fe be28 	b.w	e394 <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
    f744:	2096      	movs	r0, #150	; 0x96
    f746:	f002 fd63 	bl	12210 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    f74a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f74e:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f752:	f000 0007 	and.w	r0, r0, #7
    f756:	f002 fcbf 	bl	120d8 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    f75a:	f002 fe35 	bl	123c8 <radio_tmr_end_capture>
    f75e:	e7d7      	b.n	f710 <isr+0x1438>
		LL_ASSERT(0);
    f760:	4b49      	ldr	r3, [pc, #292]	; (f888 <isr+0x15b0>)
    f762:	9301      	str	r3, [sp, #4]
    f764:	9300      	str	r3, [sp, #0]
    f766:	4b4a      	ldr	r3, [pc, #296]	; (f890 <isr+0x15b8>)
    f768:	f7fe bead 	b.w	e4c6 <isr+0x1ee>
	switch (_radio.role) {
    f76c:	7ce2      	ldrb	r2, [r4, #19]
    f76e:	2a04      	cmp	r2, #4
    f770:	f200 823a 	bhi.w	fbe8 <isr+0x1910>
    f774:	e8df f012 	tbh	[pc, r2, lsl #1]
    f778:	00050228 	.word	0x00050228
    f77c:	00bf0058 	.word	0x00bf0058
    f780:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
    f782:	2b03      	cmp	r3, #3
    f784:	d109      	bne.n	f79a <isr+0x14c2>
	    (_radio.advertiser.chan_map_current != 0)) {
    f786:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    f78a:	0759      	lsls	r1, r3, #29
    f78c:	d005      	beq.n	f79a <isr+0x14c2>
		adv_setup();
    f78e:	f7fb fb35 	bl	adfc <adv_setup>
		radio_tx_enable();
    f792:	f002 fc41 	bl	12018 <radio_tx_enable>
    f796:	f7fe be19 	b.w	e3cc <isr+0xf4>
		radio_filter_disable();
    f79a:	f002 fcfd 	bl	12198 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    f79e:	7d23      	ldrb	r3, [r4, #20]
    f7a0:	2b03      	cmp	r3, #3
    f7a2:	f040 808f 	bne.w	f8c4 <isr+0x15ec>
		    (!_radio.advertiser.is_hdcd)) {
    f7a6:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    f7aa:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    f7ae:	f040 8089 	bne.w	f8c4 <isr+0x15ec>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    f7b2:	2201      	movs	r2, #1
    f7b4:	a910      	add	r1, sp, #64	; 0x40
    f7b6:	6860      	ldr	r0, [r4, #4]
    f7b8:	f003 fc60 	bl	1307c <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    f7bc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f7c0:	4834      	ldr	r0, [pc, #208]	; (f894 <isr+0x15bc>)
			random_delay %= 10;
    f7c2:	230a      	movs	r3, #10
    f7c4:	fbb1 f2f3 	udiv	r2, r1, r3
    f7c8:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    f7cc:	3201      	adds	r2, #1
    f7ce:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    f7d0:	b2d6      	uxtb	r6, r2
    f7d2:	fba6 0100 	umull	r0, r1, r6, r0
    f7d6:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    f7d8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f7dc:	fb03 1106 	mla	r1, r3, r6, r1
    f7e0:	a325      	add	r3, pc, #148	; (adr r3, f878 <isr+0x15a0>)
    f7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7e6:	f7f0 fd15 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    f7ea:	f640 734b 	movw	r3, #3915	; 0xf4b
    f7ee:	9306      	str	r3, [sp, #24]
    f7f0:	4b29      	ldr	r3, [pc, #164]	; (f898 <isr+0x15c0>)
    f7f2:	9305      	str	r3, [sp, #20]
    f7f4:	9504      	str	r5, [sp, #16]
    f7f6:	b283      	uxth	r3, r0
    f7f8:	9503      	str	r5, [sp, #12]
    f7fa:	9502      	str	r5, [sp, #8]
    f7fc:	9501      	str	r5, [sp, #4]
    f7fe:	9500      	str	r5, [sp, #0]
    f800:	2205      	movs	r2, #5
    f802:	4629      	mov	r1, r5
    f804:	4628      	mov	r0, r5
    f806:	f7f8 f8ed 	bl	79e4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f80a:	f030 0302 	bics.w	r3, r0, #2
    f80e:	d059      	beq.n	f8c4 <isr+0x15ec>
    f810:	7ca3      	ldrb	r3, [r4, #18]
    f812:	2b05      	cmp	r3, #5
    f814:	d056      	beq.n	f8c4 <isr+0x15ec>
    f816:	4b1c      	ldr	r3, [pc, #112]	; (f888 <isr+0x15b0>)
    f818:	9301      	str	r3, [sp, #4]
    f81a:	9300      	str	r3, [sp, #0]
    f81c:	4a1f      	ldr	r2, [pc, #124]	; (f89c <isr+0x15c4>)
    f81e:	4b20      	ldr	r3, [pc, #128]	; (f8a0 <isr+0x15c8>)
    f820:	4920      	ldr	r1, [pc, #128]	; (f8a4 <isr+0x15cc>)
    f822:	4821      	ldr	r0, [pc, #132]	; (f8a8 <isr+0x15d0>)
    f824:	f7ff b906 	b.w	ea34 <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
    f828:	2b03      	cmp	r3, #3
    f82a:	d13f      	bne.n	f8ac <isr+0x15d4>
		radio_tmr_tifs_set(RADIO_TIFS);
    f82c:	2096      	movs	r0, #150	; 0x96
    f82e:	f002 fcef 	bl	12210 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f832:	2300      	movs	r3, #0
    f834:	4619      	mov	r1, r3
    f836:	461a      	mov	r2, r3
    f838:	4618      	mov	r0, r3
    f83a:	f002 fc59 	bl	120f0 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f83e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f842:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f846:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f84a:	3008      	adds	r0, #8
    f84c:	f002 fbc4 	bl	11fd8 <radio_pkt_rx_set>
		radio_rssi_measure();
    f850:	f002 fc66 	bl	12120 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f854:	f001 ff02 	bl	1165c <ctrl_rl_enabled>
    f858:	b138      	cbz	r0, f86a <isr+0x1592>
			u8_t count, *irks = ctrl_irks_get(&count);
    f85a:	a810      	add	r0, sp, #64	; 0x40
    f85c:	f001 fc4e 	bl	110fc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f860:	4601      	mov	r1, r0
    f862:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f866:	f002 fe57 	bl	12518 <radio_ar_configure>
		_radio.state = STATE_RX;
    f86a:	2301      	movs	r3, #1
    f86c:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    f86e:	f002 fbcd 	bl	1200c <radio_rx_enable>
    f872:	f7fe bdab 	b.w	e3cc <isr+0xf4>
    f876:	bf00      	nop
    f878:	1afd498d 	.word	0x1afd498d
    f87c:	00000007 	.word	0x00000007
    f880:	00022060 	.word	0x00022060
    f884:	00022040 	.word	0x00022040
    f888:	000145f1 	.word	0x000145f1
    f88c:	00016883 	.word	0x00016883
    f890:	0001688f 	.word	0x0001688f
    f894:	d4a51000 	.word	0xd4a51000
    f898:	0000a851 	.word	0x0000a851
    f89c:	00015373 	.word	0x00015373
    f8a0:	000168a2 	.word	0x000168a2
    f8a4:	000153c2 	.word	0x000153c2
    f8a8:	00016ef1 	.word	0x00016ef1
		radio_filter_disable();
    f8ac:	f002 fc74 	bl	12198 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f8b0:	7d23      	ldrb	r3, [r4, #20]
    f8b2:	2b05      	cmp	r3, #5
    f8b4:	d106      	bne.n	f8c4 <isr+0x15ec>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f8b6:	2300      	movs	r3, #0
    f8b8:	9300      	str	r3, [sp, #0]
    f8ba:	2204      	movs	r2, #4
    f8bc:	4619      	mov	r1, r3
    f8be:	4618      	mov	r0, r3
    f8c0:	f7f8 f8de 	bl	7a80 <ticker_stop>
	_radio.role = ROLE_NONE;
    f8c4:	2500      	movs	r5, #0
    f8c6:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    f8c8:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    f8ca:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    f8cc:	f002 fd1e 	bl	1230c <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f8d0:	462a      	mov	r2, r5
    f8d2:	4629      	mov	r1, r5
    f8d4:	4628      	mov	r0, r5
    f8d6:	4bb2      	ldr	r3, [pc, #712]	; (fba0 <isr+0x18c8>)
    f8d8:	f7f7 fa76 	bl	6dc8 <mayfly_enqueue>
	LL_ASSERT(!retval);
    f8dc:	4605      	mov	r5, r0
    f8de:	2800      	cmp	r0, #0
    f8e0:	f000 8188 	beq.w	fbf4 <isr+0x191c>
    f8e4:	4baf      	ldr	r3, [pc, #700]	; (fba4 <isr+0x18cc>)
    f8e6:	9301      	str	r3, [sp, #4]
    f8e8:	9300      	str	r3, [sp, #0]
    f8ea:	4aaf      	ldr	r2, [pc, #700]	; (fba8 <isr+0x18d0>)
    f8ec:	4baf      	ldr	r3, [pc, #700]	; (fbac <isr+0x18d4>)
    f8ee:	49b0      	ldr	r1, [pc, #704]	; (fbb0 <isr+0x18d8>)
    f8f0:	48b0      	ldr	r0, [pc, #704]	; (fbb4 <isr+0x18dc>)
    f8f2:	f7ff b89f 	b.w	ea34 <isr+0x75c>
	if (_radio.conn_curr == 0) {
    f8f6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f8fa:	2800      	cmp	r0, #0
    f8fc:	d0e2      	beq.n	f8c4 <isr+0x15ec>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f8fe:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f902:	b181      	cbz	r1, f926 <isr+0x164e>
    f904:	7ce3      	ldrb	r3, [r4, #19]
    f906:	2b03      	cmp	r3, #3
    f908:	d003      	beq.n	f912 <isr+0x163a>
    f90a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f90e:	07da      	lsls	r2, r3, #31
    f910:	d509      	bpl.n	f926 <isr+0x164e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f912:	f7fb fb51 	bl	afb8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f916:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f91a:	f7fb f99b 	bl	ac54 <connection_release>
			_radio.conn_curr = NULL;
    f91e:	2300      	movs	r3, #0
    f920:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f924:	e7ce      	b.n	f8c4 <isr+0x15ec>
	latency_event = _radio.conn_curr->latency_event;
    f926:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    f92a:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    f92e:	f10b 0601 	add.w	r6, fp, #1
    f932:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    f934:	2f00      	cmp	r7, #0
    f936:	f000 8084 	beq.w	fa42 <isr+0x176a>
		if (_radio.role == ROLE_SLAVE) {
    f93a:	7ce3      	ldrb	r3, [r4, #19]
    f93c:	2b03      	cmp	r3, #3
    f93e:	d173      	bne.n	fa28 <isr+0x1750>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f940:	f002 fd36 	bl	123b0 <radio_tmr_aa_restore>
    f944:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    f946:	f002 fd39 	bl	123bc <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    f94a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    f94e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    f952:	f003 0307 	and.w	r3, r3, #7
    f956:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f958:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    f95c:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    f95e:	d052      	beq.n	fa06 <isr+0x172e>
		return 40;
    f960:	2b04      	cmp	r3, #4
    f962:	bf0c      	ite	eq
    f964:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    f968:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f96c:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f970:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    f972:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f974:	930a      	str	r3, [sp, #40]	; 0x28
    f976:	f8df a24c 	ldr.w	sl, [pc, #588]	; fbc4 <isr+0x18ec>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f97a:	a387      	add	r3, pc, #540	; (adr r3, fb98 <isr+0x18c0>)
    f97c:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    f980:	d844      	bhi.n	fa0c <isr+0x1734>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f982:	fba0 010a 	umull	r0, r1, r0, sl
    f986:	f7f0 fc45 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f98a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f98c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f98e:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f992:	a381      	add	r3, pc, #516	; (adr r3, fb98 <isr+0x18c0>)
    f994:	e9d3 2300 	ldrd	r2, r3, [r3]
    f998:	fba0 010a 	umull	r0, r1, r0, sl
    f99c:	f7f0 fc3a 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f9a0:	2300      	movs	r3, #0
    f9a2:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f9a4:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f9a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f9aa:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    f9ae:	b3ab      	cbz	r3, fa1c <isr+0x1744>
				if (pdu_data_tx->len ||
    f9b0:	795b      	ldrb	r3, [r3, #5]
    f9b2:	b913      	cbnz	r3, f9ba <isr+0x16e2>
    f9b4:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    f9b8:	b10b      	cbz	r3, f9be <isr+0x16e6>
					_radio.conn_curr->latency_event = 0;
    f9ba:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    f9bc:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    f9be:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f9c2:	2200      	movs	r2, #0
    f9c4:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f9c6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f9ca:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    f9ce:	b1c3      	cbz	r3, fa02 <isr+0x172a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    f9d0:	429e      	cmp	r6, r3
    f9d2:	f080 80b0 	bcs.w	fb36 <isr+0x185e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f9d6:	1b9b      	subs	r3, r3, r6
    f9d8:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    f9da:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    f9dc:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f9de:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    f9e2:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    f9e4:	f240 80a9 	bls.w	fb3a <isr+0x1862>
			else if (_radio.role == ROLE_SLAVE) {
    f9e8:	7ce3      	ldrb	r3, [r4, #19]
    f9ea:	2b03      	cmp	r3, #3
    f9ec:	d109      	bne.n	fa02 <isr+0x172a>
				if (latency_event != 0) {
    f9ee:	f1bb 0f00 	cmp.w	fp, #0
    f9f2:	f040 80a2 	bne.w	fb3a <isr+0x1862>
					force = _radio.conn_curr->slave.force & 0x01;
    f9f6:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    f9f8:	087b      	lsrs	r3, r7, #1
					if (force) {
    f9fa:	f017 0701 	ands.w	r7, r7, #1
    f9fe:	d13d      	bne.n	fa7c <isr+0x17a4>
					_radio.conn_curr->slave.force >>= 1;
    fa00:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    fa02:	2700      	movs	r7, #0
    fa04:	e03d      	b.n	fa82 <isr+0x17aa>
		return 24;
    fa06:	f04f 0818 	mov.w	r8, #24
    fa0a:	e7af      	b.n	f96c <isr+0x1694>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fa0c:	fba9 010a 	umull	r0, r1, r9, sl
    fa10:	f7f0 fc00 	bl	214 <__aeabi_uldivmod>
    fa14:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fa16:	f108 0030 	add.w	r0, r8, #48	; 0x30
    fa1a:	e7ba      	b.n	f992 <isr+0x16ba>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    fa1c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    fa20:	07db      	lsls	r3, r3, #31
    fa22:	d5cc      	bpl.n	f9be <isr+0x16e6>
				_radio.conn_curr->latency_event =
    fa24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    fa26:	e7c9      	b.n	f9bc <isr+0x16e4>
		} else if (reason_peer) {
    fa28:	b149      	cbz	r1, fa3e <isr+0x1766>
			_radio.conn_curr->master.terminate_ack = 1;
    fa2a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fa2e:	f043 0301 	orr.w	r3, r3, #1
    fa32:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    fa36:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    fa3a:	4645      	mov	r5, r8
    fa3c:	e7bf      	b.n	f9be <isr+0x16e6>
	ticks_drift_minus = 0;
    fa3e:	4688      	mov	r8, r1
    fa40:	e7fb      	b.n	fa3a <isr+0x1762>
	else if (_radio.conn_curr->connect_expire) {
    fa42:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    fa44:	b185      	cbz	r5, fa68 <isr+0x1790>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    fa46:	42ae      	cmp	r6, r5
    fa48:	d204      	bcs.n	fa54 <isr+0x177c>
			_radio.conn_curr->connect_expire -= elapsed_event;
    fa4a:	1bad      	subs	r5, r5, r6
    fa4c:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    fa4e:	463d      	mov	r5, r7
    fa50:	46a8      	mov	r8, r5
    fa52:	e7b8      	b.n	f9c6 <isr+0x16ee>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    fa54:	213e      	movs	r1, #62	; 0x3e
    fa56:	f7fb faaf 	bl	afb8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fa5a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa5e:	f7fb f8f9 	bl	ac54 <connection_release>
			_radio.conn_curr = NULL;
    fa62:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    fa66:	e72d      	b.n	f8c4 <isr+0x15ec>
		if (!_radio.conn_curr->supervision_expire) {
    fa68:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    fa6c:	f1b8 0f00 	cmp.w	r8, #0
    fa70:	d1ee      	bne.n	fa50 <isr+0x1778>
			_radio.conn_curr->supervision_expire =
    fa72:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    fa74:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    fa78:	4645      	mov	r5, r8
    fa7a:	e7a4      	b.n	f9c6 <isr+0x16ee>
						_radio.conn_curr->slave.force |=
    fa7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fa80:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    fa82:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    fa86:	b123      	cbz	r3, fa92 <isr+0x17ba>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    fa88:	429e      	cmp	r6, r3
    fa8a:	d258      	bcs.n	fb3e <isr+0x1866>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fa8c:	1b9b      	subs	r3, r3, r6
    fa8e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    fa92:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    fa96:	b123      	cbz	r3, faa2 <isr+0x17ca>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    fa98:	429e      	cmp	r6, r3
    fa9a:	d252      	bcs.n	fb42 <isr+0x186a>
			_radio.conn_curr->apto_expire -= elapsed_event;
    fa9c:	1b9b      	subs	r3, r3, r6
    fa9e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    faa2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    faa6:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    faaa:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    faae:	b123      	cbz	r3, faba <isr+0x17e2>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    fab0:	429e      	cmp	r6, r3
    fab2:	d25c      	bcs.n	fb6e <isr+0x1896>
			_radio.conn_curr->appto_expire -= elapsed_event;
    fab4:	1b9e      	subs	r6, r3, r6
    fab6:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    faba:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fabe:	428b      	cmp	r3, r1
    fac0:	d006      	beq.n	fad0 <isr+0x17f8>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    fac2:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fac6:	3b01      	subs	r3, #1
    fac8:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    faca:	bf9c      	itt	ls
    facc:	2300      	movls	r3, #0
    face:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    fad0:	b917      	cbnz	r7, fad8 <isr+0x1800>
    fad2:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fad4:	455b      	cmp	r3, fp
    fad6:	d05c      	beq.n	fb92 <isr+0x18ba>
		lazy = _radio.conn_curr->latency_event + 1;
    fad8:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fada:	3301      	adds	r3, #1
    fadc:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    fade:	b935      	cbnz	r5, faee <isr+0x1816>
    fae0:	f1b8 0f00 	cmp.w	r8, #0
    fae4:	d103      	bne.n	faee <isr+0x1816>
    fae6:	b913      	cbnz	r3, faee <isr+0x1816>
	    (lazy != 0) || (force != 0)) {
    fae8:	2f00      	cmp	r7, #0
    faea:	f43f aeeb 	beq.w	f8c4 <isr+0x15ec>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    faee:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    faf2:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    faf4:	3207      	adds	r2, #7
		ticker_status =
    faf6:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    faf8:	b2d6      	uxtb	r6, r2
		ticker_status =
    fafa:	4a2f      	ldr	r2, [pc, #188]	; (fbb8 <isr+0x18e0>)
    fafc:	9205      	str	r2, [sp, #20]
    fafe:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    fb00:	9606      	str	r6, [sp, #24]
		ticker_status =
    fb02:	9704      	str	r7, [sp, #16]
    fb04:	9102      	str	r1, [sp, #8]
    fb06:	9101      	str	r1, [sp, #4]
    fb08:	f8cd 8000 	str.w	r8, [sp]
    fb0c:	4632      	mov	r2, r6
    fb0e:	4608      	mov	r0, r1
    fb10:	f7f7 ff68 	bl	79e4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fb14:	f030 0302 	bics.w	r3, r0, #2
    fb18:	f43f aed4 	beq.w	f8c4 <isr+0x15ec>
    fb1c:	7ca3      	ldrb	r3, [r4, #18]
    fb1e:	429e      	cmp	r6, r3
    fb20:	f43f aed0 	beq.w	f8c4 <isr+0x15ec>
    fb24:	4b1f      	ldr	r3, [pc, #124]	; (fba4 <isr+0x18cc>)
    fb26:	9301      	str	r3, [sp, #4]
    fb28:	9300      	str	r3, [sp, #0]
    fb2a:	4a1f      	ldr	r2, [pc, #124]	; (fba8 <isr+0x18d0>)
    fb2c:	4b23      	ldr	r3, [pc, #140]	; (fbbc <isr+0x18e4>)
    fb2e:	4920      	ldr	r1, [pc, #128]	; (fbb0 <isr+0x18d8>)
    fb30:	4823      	ldr	r0, [pc, #140]	; (fbc0 <isr+0x18e8>)
    fb32:	f7fe bf7f 	b.w	ea34 <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fb36:	2108      	movs	r1, #8
    fb38:	e6eb      	b.n	f912 <isr+0x163a>
				force = 1;
    fb3a:	2701      	movs	r7, #1
    fb3c:	e7a1      	b.n	fa82 <isr+0x17aa>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    fb3e:	2122      	movs	r1, #34	; 0x22
    fb40:	e6e7      	b.n	f912 <isr+0x163a>
			_radio.conn_curr->apto_expire = 0;
    fb42:	2300      	movs	r3, #0
    fb44:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    fb48:	2002      	movs	r0, #2
    fb4a:	f7f9 fe87 	bl	985c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fb4e:	b928      	cbnz	r0, fb5c <isr+0x1884>
    fb50:	4b14      	ldr	r3, [pc, #80]	; (fba4 <isr+0x18cc>)
    fb52:	9301      	str	r3, [sp, #4]
    fb54:	9300      	str	r3, [sp, #0]
    fb56:	4b19      	ldr	r3, [pc, #100]	; (fbbc <isr+0x18e4>)
    fb58:	f7fe be36 	b.w	e7c8 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    fb5c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fb60:	8c1b      	ldrh	r3, [r3, #32]
    fb62:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    fb64:	230a      	movs	r3, #10
    fb66:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    fb68:	f7fa fce2 	bl	a530 <packet_rx_enqueue>
    fb6c:	e799      	b.n	faa2 <isr+0x17ca>
			_radio.conn_curr->appto_expire = 0;
    fb6e:	2300      	movs	r3, #0
    fb70:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    fb74:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    fb78:	2b00      	cmp	r3, #0
    fb7a:	d19e      	bne.n	faba <isr+0x17e2>
    fb7c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fb80:	428b      	cmp	r3, r1
    fb82:	d19e      	bne.n	fac2 <isr+0x17ea>
				_radio.conn_curr->llcp_type = LLCP_PING;
    fb84:	2307      	movs	r3, #7
    fb86:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    fb8a:	1e4b      	subs	r3, r1, #1
    fb8c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    fb90:	e793      	b.n	faba <isr+0x17e2>
	lazy = 0;
    fb92:	463b      	mov	r3, r7
    fb94:	e7a3      	b.n	fade <isr+0x1806>
    fb96:	bf00      	nop
    fb98:	1afd498d 	.word	0x1afd498d
    fb9c:	00000007 	.word	0x00000007
    fba0:	20003d48 	.word	0x20003d48
    fba4:	000145f1 	.word	0x000145f1
    fba8:	00015373 	.word	0x00015373
    fbac:	00016973 	.word	0x00016973
    fbb0:	000153c2 	.word	0x000153c2
    fbb4:	000173a3 	.word	0x000173a3
    fbb8:	0000a899 	.word	0x0000a899
    fbbc:	000168b0 	.word	0x000168b0
    fbc0:	00016f5f 	.word	0x00016f5f
    fbc4:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fbc8:	3b04      	subs	r3, #4
    fbca:	2b01      	cmp	r3, #1
    fbcc:	d908      	bls.n	fbe0 <isr+0x1908>
    fbce:	4b12      	ldr	r3, [pc, #72]	; (fc18 <isr+0x1940>)
    fbd0:	9301      	str	r3, [sp, #4]
    fbd2:	9300      	str	r3, [sp, #0]
    fbd4:	4a11      	ldr	r2, [pc, #68]	; (fc1c <isr+0x1944>)
    fbd6:	4b12      	ldr	r3, [pc, #72]	; (fc20 <isr+0x1948>)
    fbd8:	4912      	ldr	r1, [pc, #72]	; (fc24 <isr+0x194c>)
    fbda:	4813      	ldr	r0, [pc, #76]	; (fc28 <isr+0x1950>)
    fbdc:	f7fe bf2a 	b.w	ea34 <isr+0x75c>
		_radio.state = STATE_NONE;
    fbe0:	2300      	movs	r3, #0
    fbe2:	7523      	strb	r3, [r4, #20]
    fbe4:	f7fe bc22 	b.w	e42c <isr+0x154>
		LL_ASSERT(0);
    fbe8:	4b0b      	ldr	r3, [pc, #44]	; (fc18 <isr+0x1940>)
    fbea:	9301      	str	r3, [sp, #4]
    fbec:	9300      	str	r3, [sp, #0]
    fbee:	4b0c      	ldr	r3, [pc, #48]	; (fc20 <isr+0x1948>)
    fbf0:	f7fe bc69 	b.w	e4c6 <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
    fbf4:	6820      	ldr	r0, [r4, #0]
    fbf6:	6843      	ldr	r3, [r0, #4]
    fbf8:	4629      	mov	r1, r5
    fbfa:	685b      	ldr	r3, [r3, #4]
    fbfc:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fbfe:	2201      	movs	r2, #1
    fc00:	4611      	mov	r1, r2
    fc02:	4628      	mov	r0, r5
    fc04:	f7f7 f8b8 	bl	6d78 <mayfly_enable>
    fc08:	f7fe bc10 	b.w	e42c <isr+0x154>
		LL_ASSERT(0);
    fc0c:	4b02      	ldr	r3, [pc, #8]	; (fc18 <isr+0x1940>)
    fc0e:	9301      	str	r3, [sp, #4]
    fc10:	9300      	str	r3, [sp, #0]
    fc12:	4b06      	ldr	r3, [pc, #24]	; (fc2c <isr+0x1954>)
    fc14:	f7fe bc57 	b.w	e4c6 <isr+0x1ee>
    fc18:	000145f1 	.word	0x000145f1
    fc1c:	00015373 	.word	0x00015373
    fc20:	000168bf 	.word	0x000168bf
    fc24:	000153c2 	.word	0x000153c2
    fc28:	00016fd5 	.word	0x00016fd5
    fc2c:	000168d5 	.word	0x000168d5

0000fc30 <radio_init>:
{
    fc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    fc34:	4e3d      	ldr	r6, [pc, #244]	; (fd2c <radio_init+0xfc>)
{
    fc36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fc38:	f89d c01c 	ldrb.w	ip, [sp, #28]
    fc3c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    fc40:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    fc44:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    fc48:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    fc4a:	f44f 70aa 	mov.w	r0, #340	; 0x154
    fc4e:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    fc52:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    fc56:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    fc5a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    fc5c:	f10c 0401 	add.w	r4, ip, #1
    fc60:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    fc62:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    fc64:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    fc68:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    fc6c:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    fc6e:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fc70:	bf98      	it	ls
    fc72:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    fc76:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    fc7a:	bf88      	it	hi
    fc7c:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    fc80:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    fc84:	bf8c      	ite	hi
    fc86:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fc8a:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fc8e:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    fc92:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fc96:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    fc9a:	bf8c      	ite	hi
    fc9c:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fca0:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    fca2:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    fca6:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
    fcaa:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
    fcae:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fcb2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    fcb6:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fcba:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
    fcbe:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fcc2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fcc4:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
    fcc6:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fcca:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fccc:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    fcd0:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fcd4:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    fcd8:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fcda:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    fcde:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fce2:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fce6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    fcea:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fcee:	340a      	adds	r4, #10
    fcf0:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    fcf4:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fcf6:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    fcf8:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    fcfc:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    fd00:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    fd02:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    fd06:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fd0a:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    fd0e:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
    fd12:	d003      	beq.n	fd1c <radio_init+0xec>
		return (retcode + mem_size);
    fd14:	442c      	add	r4, r5
}
    fd16:	4620      	mov	r0, r4
    fd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    fd1c:	2301      	movs	r3, #1
    fd1e:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
    fd22:	f7f9 fe5f 	bl	99e4 <common_init>
	radio_setup();
    fd26:	f002 f8a7 	bl	11e78 <radio_setup>
	return retcode;
    fd2a:	e7f4      	b.n	fd16 <radio_init+0xe6>
    fd2c:	200008c0 	.word	0x200008c0

0000fd30 <ll_reset>:
{
    fd30:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    fd32:	2103      	movs	r1, #3
    fd34:	2005      	movs	r0, #5
    fd36:	f7f9 ff3f 	bl	9bb8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    fd3a:	2104      	movs	r1, #4
    fd3c:	2006      	movs	r0, #6
    fd3e:	f7f9 ff3b 	bl	9bb8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    fd42:	4c22      	ldr	r4, [pc, #136]	; (fdcc <ll_reset+0x9c>)
    fd44:	2500      	movs	r5, #0
    fd46:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    fd4a:	b2ab      	uxth	r3, r5
    fd4c:	429a      	cmp	r2, r3
    fd4e:	f105 0501 	add.w	r5, r5, #1
    fd52:	d834      	bhi.n	fdbe <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    fd54:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fd58:	f36f 13c7 	bfc	r3, #7, #1
    fd5c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    fd60:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    fd64:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    fd66:	f360 0300 	bfi	r3, r0, #0, #1
    fd6a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fd6e:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fd70:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    fd74:	fbb3 f3f2 	udiv	r3, r3, r2
    fd78:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fd7c:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
    fd80:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fd84:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    fd86:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
    fd8a:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fd8e:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    fd92:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    fd96:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    fd9a:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fd9e:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
    fda2:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
    fda6:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
    fdaa:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
    fdae:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
    fdb2:	f001 fee1 	bl	11b78 <ll_filter_reset>
}
    fdb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    fdba:	f7f9 be13 	b.w	99e4 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    fdbe:	1da8      	adds	r0, r5, #6
    fdc0:	21ff      	movs	r1, #255	; 0xff
    fdc2:	b2c0      	uxtb	r0, r0
    fdc4:	f7f9 fef8 	bl	9bb8 <role_disable>
    fdc8:	e7bd      	b.n	fd46 <ll_reset+0x16>
    fdca:	bf00      	nop
    fdcc:	200008c0 	.word	0x200008c0

0000fdd0 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    fdd0:	4b02      	ldr	r3, [pc, #8]	; (fddc <ll_adv_is_enabled+0xc>)
    fdd2:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    fdd6:	09c0      	lsrs	r0, r0, #7
    fdd8:	4770      	bx	lr
    fdda:	bf00      	nop
    fddc:	200008c0 	.word	0x200008c0

0000fde0 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    fde0:	4b04      	ldr	r3, [pc, #16]	; (fdf4 <radio_adv_filter_pol_get+0x14>)
    fde2:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    fde6:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    fde8:	bfba      	itte	lt
    fdea:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    fdee:	0980      	lsrlt	r0, r0, #6
    fdf0:	2000      	movge	r0, #0
}
    fdf2:	4770      	bx	lr
    fdf4:	200008c0 	.word	0x200008c0

0000fdf8 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fdf8:	4a09      	ldr	r2, [pc, #36]	; (fe20 <ll_scan_is_enabled+0x28>)
    fdfa:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    fdfe:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    fe02:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fe06:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    fe0a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fe0c:	f003 0301 	and.w	r3, r3, #1
    fe10:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    fe14:	bf14      	ite	ne
    fe16:	2004      	movne	r0, #4
    fe18:	2000      	moveq	r0, #0
}
    fe1a:	4318      	orrs	r0, r3
    fe1c:	4770      	bx	lr
    fe1e:	bf00      	nop
    fe20:	200008c0 	.word	0x200008c0

0000fe24 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    fe24:	4b05      	ldr	r3, [pc, #20]	; (fe3c <radio_scan_filter_pol_get+0x18>)
    fe26:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    fe2a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    fe2e:	bf1c      	itt	ne
    fe30:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    fe34:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    fe38:	4770      	bx	lr
    fe3a:	bf00      	nop
    fe3c:	200008c0 	.word	0x200008c0

0000fe40 <radio_connect_enable>:
{
    fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    fe44:	f8df 8384 	ldr.w	r8, [pc, #900]	; 101cc <__kernel_ram_size+0x1cc>
{
    fe48:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
    fe4a:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
    fe4e:	9303      	str	r3, [sp, #12]
    fe50:	4683      	mov	fp, r0
    fe52:	468a      	mov	sl, r1
    fe54:	4691      	mov	r9, r2
    fe56:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
    fe58:	2e00      	cmp	r6, #0
    fe5a:	f040 819c 	bne.w	10196 <__kernel_ram_size+0x196>
	link = mem_acquire(&_radio.link_rx_free);
    fe5e:	f508 70a4 	add.w	r0, r8, #328	; 0x148
    fe62:	f7f6 fee6 	bl	6c32 <mem_acquire>
	if (!link) {
    fe66:	4607      	mov	r7, r0
    fe68:	b150      	cbz	r0, fe80 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
    fe6a:	f508 7086 	add.w	r0, r8, #268	; 0x10c
    fe6e:	f7f6 fee0 	bl	6c32 <mem_acquire>
	if (!conn) {
    fe72:	4604      	mov	r4, r0
    fe74:	b930      	cbnz	r0, fe84 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
    fe76:	f508 71a4 	add.w	r1, r8, #328	; 0x148
    fe7a:	4638      	mov	r0, r7
    fe7c:	f7f6 fef3 	bl	6c66 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    fe80:	2007      	movs	r0, #7
    fe82:	e15c      	b.n	1013e <__kernel_ram_size+0x13e>
	_radio.scanner.adv_addr_type = adv_addr_type;
    fe84:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
    fe88:	f36b 1386 	bfi	r3, fp, #6, #1
    fe8c:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    fe90:	2206      	movs	r2, #6
    fe92:	4651      	mov	r1, sl
    fe94:	f108 00ea 	add.w	r0, r8, #234	; 0xea
    fe98:	f7f1 feb0 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
    fe9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    fea0:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fea4:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    fea6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
    feaa:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    feae:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    feb0:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    feb4:	f002 f89c 	bl	11ff0 <radio_tx_ready_delay_get>
    feb8:	49bb      	ldr	r1, [pc, #748]	; (101a8 <__kernel_ram_size+0x1a8>)
    feba:	f200 4052 	addw	r0, r0, #1106	; 0x452
    febe:	a3b8      	add	r3, pc, #736	; (adr r3, 101a0 <__kernel_ram_size+0x1a0>)
    fec0:	e9d3 2300 	ldrd	r2, r3, [r3]
    fec4:	fba0 0101 	umull	r0, r1, r0, r1
    fec8:	f7f0 f9a4 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
    fecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fed0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fed4:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
    fed8:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    feda:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 101d0 <__kernel_ram_size+0x1d0>
	conn->llcp_features = RADIO_BLE_FEAT;
    fede:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
    fee2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    fee6:	2603      	movs	r6, #3
	consecutive_cnt = 1;
    fee8:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
    feec:	2104      	movs	r1, #4
    feee:	a805      	add	r0, sp, #20
    fef0:	f7f7 fed6 	bl	7ca0 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    fef4:	f8dd c014 	ldr.w	ip, [sp, #20]
    fef8:	2000      	movs	r0, #0
    fefa:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
    fefe:	231f      	movs	r3, #31
	transitions = 0;
    ff00:	4602      	mov	r2, r0
	consecutive_cnt = 1;
    ff02:	2101      	movs	r1, #1
	while (bit_idx--) {
    ff04:	3b01      	subs	r3, #1
    ff06:	b2db      	uxtb	r3, r3
    ff08:	2bff      	cmp	r3, #255	; 0xff
    ff0a:	d103      	bne.n	ff14 <radio_connect_enable+0xd4>
    ff0c:	b3d0      	cbz	r0, ff84 <radio_connect_enable+0x144>
    ff0e:	f8cd c014 	str.w	ip, [sp, #20]
    ff12:	e037      	b.n	ff84 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
    ff14:	fa2c fe03 	lsr.w	lr, ip, r3
    ff18:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
    ff1c:	45d6      	cmp	lr, sl
    ff1e:	d11a      	bne.n	ff56 <radio_connect_enable+0x116>
			consecutive_cnt++;
    ff20:	3101      	adds	r1, #1
    ff22:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
    ff24:	2906      	cmp	r1, #6
    ff26:	d807      	bhi.n	ff38 <radio_connect_enable+0xf8>
    ff28:	2b1b      	cmp	r3, #27
    ff2a:	d81a      	bhi.n	ff62 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
    ff2c:	b122      	cbz	r2, ff38 <radio_connect_enable+0xf8>
    ff2e:	2b1b      	cmp	r3, #27
    ff30:	d017      	beq.n	ff62 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
    ff32:	2a01      	cmp	r2, #1
    ff34:	d815      	bhi.n	ff62 <radio_connect_enable+0x122>
    ff36:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
    ff38:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
    ff3c:	f1be 0f00 	cmp.w	lr, #0
    ff40:	f000 8100 	beq.w	10144 <__kernel_ram_size+0x144>
				access_addr &= ~BIT(bit_idx);
    ff44:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
    ff48:	f04f 0e00 	mov.w	lr, #0
			transitions++;
    ff4c:	3201      	adds	r2, #1
    ff4e:	2001      	movs	r0, #1
    ff50:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    ff52:	4601      	mov	r1, r0
    ff54:	e005      	b.n	ff62 <radio_connect_enable+0x122>
			transitions++;
    ff56:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
    ff58:	2b1b      	cmp	r3, #27
			transitions++;
    ff5a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    ff5c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
    ff60:	d9e5      	bls.n	ff2e <radio_connect_enable+0xee>
		if (transitions > 24) {
    ff62:	2a18      	cmp	r2, #24
    ff64:	f240 80f6 	bls.w	10154 <__kernel_ram_size+0x154>
    ff68:	b108      	cbz	r0, ff6e <radio_connect_enable+0x12e>
    ff6a:	f8cd c014 	str.w	ip, [sp, #20]
    ff6e:	3301      	adds	r3, #1
    ff70:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    ff72:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
    ff76:	f1be 0f00 	cmp.w	lr, #0
    ff7a:	f000 80e8 	beq.w	1014e <__kernel_ram_size+0x14e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    ff7e:	425b      	negs	r3, r3
    ff80:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
    ff82:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    ff84:	9b05      	ldr	r3, [sp, #20]
    ff86:	a806      	add	r0, sp, #24
    ff88:	ea83 0308 	eor.w	r3, r3, r8
    ff8c:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    ff90:	2104      	movs	r1, #4
    ff92:	f7f6 fff9 	bl	6f88 <util_ones_count_get>
    ff96:	2801      	cmp	r0, #1
    ff98:	f240 80e3 	bls.w	10162 <__kernel_ram_size+0x162>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    ff9c:	9b05      	ldr	r3, [sp, #20]
    ff9e:	b29a      	uxth	r2, r3
    ffa0:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    ffa4:	f000 80d8 	beq.w	10158 <__kernel_ram_size+0x158>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    ffa8:	2204      	movs	r2, #4
    ffaa:	a905      	add	r1, sp, #20
    ffac:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
    ffb0:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    ffb2:	f7f1 fe23 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
    ffb6:	2103      	movs	r1, #3
    ffb8:	f104 0014 	add.w	r0, r4, #20
    ffbc:	f7f7 fe70 	bl	7ca0 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
    ffc0:	2205      	movs	r2, #5
    ffc2:	497a      	ldr	r1, [pc, #488]	; (101ac <__kernel_ram_size+0x1ac>)
    ffc4:	f104 0017 	add.w	r0, r4, #23
    ffc8:	f7f1 fe18 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
    ffcc:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
    ffd0:	7f63      	ldrb	r3, [r4, #29]
    ffd2:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
    ffd6:	f36f 1386 	bfc	r3, #6, #1
    ffda:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
    ffdc:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
    ffde:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
    ffe0:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
    ffe2:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
    ffe4:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
    ffe8:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
    ffec:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
    fff0:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    fff2:	211b      	movs	r1, #27
    fff4:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    fff6:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
    fff8:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
    fffc:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    fffe:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   10002:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10006:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10008:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   1000a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   1000e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10010:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   10014:	2601      	movs	r6, #1
   10016:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   1001a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   1001e:	f363 11c7 	bfi	r1, r3, #7, #1
   10022:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   10026:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   1002a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   1002e:	f366 0102 	bfi	r1, r6, #0, #3
   10032:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   10036:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   1003a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   1003c:	b2c9      	uxtb	r1, r1
   1003e:	f36c 01c5 	bfi	r1, ip, #3, #3
   10042:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   10046:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   1004a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   1004c:	f366 0102 	bfi	r1, r6, #0, #3
   10050:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   10054:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   10056:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   10058:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   1005c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   1005e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   10060:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   10064:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   10068:	f363 0100 	bfi	r1, r3, #0, #1
   1006c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   10070:	f240 42e2 	movw	r2, #1250	; 0x4e2
   10074:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10078:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   1007c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10080:	1e56      	subs	r6, r2, #1
   10082:	f242 7e10 	movw	lr, #10000	; 0x2710
   10086:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   1008a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   1008e:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10092:	4b47      	ldr	r3, [pc, #284]	; (101b0 <__kernel_ram_size+0x1b0>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10094:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10096:	4947      	ldr	r1, [pc, #284]	; (101b4 <__kernel_ram_size+0x1b4>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10098:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1009a:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1009c:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   100a0:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   100a4:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   100a6:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   100aa:	1d81      	adds	r1, r0, #6
   100ac:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   100ae:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   100b2:	dc6a      	bgt.n	1018a <__kernel_ram_size+0x18a>
	conn->llcp_version.tx = 0;
   100b4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   100b8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   100bc:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   100be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   100c2:	f360 0341 	bfi	r3, r0, #1, #1
   100c6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   100ca:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   100ce:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   100d2:	f360 1304 	bfi	r3, r0, #4, #1
   100d6:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   100da:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   100de:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   100e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   100e6:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   100ea:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   100ee:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   100f2:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   100f6:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   100fa:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   100fe:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   10102:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   10106:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   1010a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   1010e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   10112:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   10116:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   1011a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   1011e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   10122:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   10126:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1012a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   1012e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   10132:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   10136:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   1013a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   1013e:	b007      	add	sp, #28
   10140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   10144:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10148:	f04f 0e01 	mov.w	lr, #1
   1014c:	e6fe      	b.n	ff4c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1014e:	3b01      	subs	r3, #1
   10150:	4313      	orrs	r3, r2
   10152:	e716      	b.n	ff82 <radio_connect_enable+0x142>
		if (transitions > 24) {
   10154:	46f2      	mov	sl, lr
   10156:	e6d5      	b.n	ff04 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   10158:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1015a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   1015e:	f47f af23 	bne.w	ffa8 <radio_connect_enable+0x168>
   10162:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   10164:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   10168:	f47f aec0 	bne.w	feec <radio_connect_enable+0xac>
   1016c:	4b12      	ldr	r3, [pc, #72]	; (101b8 <__kernel_ram_size+0x1b8>)
   1016e:	9301      	str	r3, [sp, #4]
   10170:	9300      	str	r3, [sp, #0]
   10172:	4a12      	ldr	r2, [pc, #72]	; (101bc <__kernel_ram_size+0x1bc>)
   10174:	4b12      	ldr	r3, [pc, #72]	; (101c0 <__kernel_ram_size+0x1c0>)
   10176:	4913      	ldr	r1, [pc, #76]	; (101c4 <__kernel_ram_size+0x1c4>)
   10178:	4813      	ldr	r0, [pc, #76]	; (101c8 <__kernel_ram_size+0x1c8>)
   1017a:	f7f0 ff07 	bl	f8c <printk>
   1017e:	4040      	eors	r0, r0
   10180:	f380 8811 	msr	BASEPRI, r0
   10184:	f04f 0004 	mov.w	r0, #4
   10188:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1018a:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   1018e:	33fa      	adds	r3, #250	; 0xfa
   10190:	441a      	add	r2, r3
   10192:	b292      	uxth	r2, r2
   10194:	e78e      	b.n	100b4 <__kernel_ram_size+0xb4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10196:	200c      	movs	r0, #12
   10198:	e7d1      	b.n	1013e <__kernel_ram_size+0x13e>
   1019a:	bf00      	nop
   1019c:	f3af 8000 	nop.w
   101a0:	1afd498d 	.word	0x1afd498d
   101a4:	00000007 	.word	0x00000007
   101a8:	3b9aca00 	.word	0x3b9aca00
   101ac:	200009da 	.word	0x200009da
   101b0:	01c9c37f 	.word	0x01c9c37f
   101b4:	026259ff 	.word	0x026259ff
   101b8:	000145f1 	.word	0x000145f1
   101bc:	00015373 	.word	0x00015373
   101c0:	00016a5f 	.word	0x00016a5f
   101c4:	000153c2 	.word	0x000153c2
   101c8:	000174b8 	.word	0x000174b8
   101cc:	200008c0 	.word	0x200008c0
   101d0:	8e89bed6 	.word	0x8e89bed6

000101d4 <ll_conn_update>:
{
   101d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101d8:	460c      	mov	r4, r1
   101da:	4690      	mov	r8, r2
   101dc:	461d      	mov	r5, r3
   101de:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   101e2:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   101e6:	f7f9 fcd1 	bl	9b8c <connection_get>
	if (!conn) {
   101ea:	b330      	cbz	r0, 1023a <ll_conn_update+0x66>
	if (!cmd) {
   101ec:	2c00      	cmp	r4, #0
   101ee:	d14a      	bne.n	10286 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   101f0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   101f4:	06d9      	lsls	r1, r3, #27
   101f6:	d407      	bmi.n	10208 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   101f8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   101fc:	069a      	lsls	r2, r3, #26
   101fe:	d541      	bpl.n	10284 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   10200:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   10204:	079b      	lsls	r3, r3, #30
   10206:	d43d      	bmi.n	10284 <ll_conn_update+0xb0>
		} else if (conn->role) {
   10208:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1020c:	2b00      	cmp	r3, #0
   1020e:	da17      	bge.n	10240 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10210:	201a      	movs	r0, #26
   10212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   10216:	428b      	cmp	r3, r1
   10218:	d00f      	beq.n	1023a <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   1021a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   1021e:	f003 0207 	and.w	r2, r3, #7
   10222:	2a03      	cmp	r2, #3
   10224:	d109      	bne.n	1023a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10226:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1022a:	b2db      	uxtb	r3, r3
   1022c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10230:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   10234:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10238:	e021      	b.n	1027e <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1023a:	200c      	movs	r0, #12
   1023c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   10240:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10244:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10248:	429a      	cmp	r2, r3
   1024a:	d1f6      	bne.n	1023a <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1024c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   10250:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   10254:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   10256:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10258:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   1025c:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   10260:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   10262:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10266:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   1026a:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   1026e:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   10272:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   10276:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   1027a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   1027e:	2000      	movs	r0, #0
   10280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   10284:	2401      	movs	r4, #1
		cmd--;
   10286:	3c01      	subs	r4, #1
		if (cmd) {
   10288:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1028c:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   10290:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   10294:	d1bf      	bne.n	10216 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   10296:	4299      	cmp	r1, r3
   10298:	d1cf      	bne.n	1023a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1029a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   1029e:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   102a2:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   102a6:	b2db      	uxtb	r3, r3
   102a8:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   102ac:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   102ae:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   102b2:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   102b6:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   102ba:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   102be:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   102c2:	e7dc      	b.n	1027e <ll_conn_update+0xaa>

000102c4 <ll_chm_update>:
{
   102c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   102c8:	4c1e      	ldr	r4, [pc, #120]	; (10344 <ll_chm_update+0x80>)
   102ca:	4601      	mov	r1, r0
   102cc:	2205      	movs	r2, #5
{
   102ce:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   102d0:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   102d4:	f7f1 fc92 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   102d8:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   102dc:	2105      	movs	r1, #5
   102de:	f7f6 fe53 	bl	6f88 <util_ones_count_get>
	_radio.data_chan_count =
   102e2:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   102e6:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   102ea:	3c01      	subs	r4, #1
   102ec:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   102ee:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   102f0:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   102f4:	2cff      	cmp	r4, #255	; 0xff
   102f6:	d102      	bne.n	102fe <ll_chm_update+0x3a>
	return 0;
   102f8:	2000      	movs	r0, #0
   102fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   102fe:	4620      	mov	r0, r4
   10300:	f7f9 fc44 	bl	9b8c <connection_get>
		if (!conn || conn->role) {
   10304:	4606      	mov	r6, r0
   10306:	b1b8      	cbz	r0, 10338 <ll_chm_update+0x74>
   10308:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1030c:	2b00      	cmp	r3, #0
   1030e:	db13      	blt.n	10338 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   10310:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10314:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10318:	429a      	cmp	r2, r3
   1031a:	d110      	bne.n	1033e <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   1031c:	2205      	movs	r2, #5
   1031e:	4629      	mov	r1, r5
   10320:	3079      	adds	r0, #121	; 0x79
   10322:	f7f1 fc6b 	bl	1bfc <memcpy>
		conn->llcp_req++;
   10326:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   1032a:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   1032e:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10330:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   10334:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   10338:	3c01      	subs	r4, #1
   1033a:	b2e4      	uxtb	r4, r4
   1033c:	e7da      	b.n	102f4 <ll_chm_update+0x30>
			return 1;
   1033e:	2001      	movs	r0, #1
}
   10340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10344:	200008c0 	.word	0x200008c0

00010348 <ll_chm_get>:
{
   10348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1034a:	460d      	mov	r5, r1
	conn = connection_get(handle);
   1034c:	f7f9 fc1e 	bl	9b8c <connection_get>
	if (!conn) {
   10350:	4604      	mov	r4, r0
   10352:	b160      	cbz	r0, 1036e <ll_chm_get+0x26>
		conn->chm_update = 0;
   10354:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10356:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   1035a:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1035c:	2205      	movs	r2, #5
   1035e:	4631      	mov	r1, r6
   10360:	4628      	mov	r0, r5
   10362:	f7f1 fc4b 	bl	1bfc <memcpy>
	} while (conn->chm_update);
   10366:	7f20      	ldrb	r0, [r4, #28]
   10368:	2800      	cmp	r0, #0
   1036a:	d1f6      	bne.n	1035a <ll_chm_get+0x12>
   1036c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   1036e:	2001      	movs	r0, #1
}
   10370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010372 <ll_feature_req_send>:
{
   10372:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10374:	f7f9 fc0a 	bl	9b8c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10378:	b168      	cbz	r0, 10396 <ll_feature_req_send+0x24>
   1037a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1037e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10382:	4293      	cmp	r3, r2
   10384:	d107      	bne.n	10396 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   10386:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10388:	2204      	movs	r2, #4
	conn->llcp_req++;
   1038a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1038e:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10392:	2000      	movs	r0, #0
   10394:	bd08      	pop	{r3, pc}
		return 1;
   10396:	2001      	movs	r0, #1
}
   10398:	bd08      	pop	{r3, pc}

0001039a <ll_version_ind_send>:
{
   1039a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1039c:	f7f9 fbf6 	bl	9b8c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   103a0:	b168      	cbz	r0, 103be <ll_version_ind_send+0x24>
   103a2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   103a6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   103aa:	4293      	cmp	r3, r2
   103ac:	d107      	bne.n	103be <ll_version_ind_send+0x24>
	conn->llcp_req++;
   103ae:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   103b0:	2205      	movs	r2, #5
	conn->llcp_req++;
   103b2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   103b6:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   103ba:	2000      	movs	r0, #0
   103bc:	bd08      	pop	{r3, pc}
		return 1;
   103be:	2001      	movs	r0, #1
}
   103c0:	bd08      	pop	{r3, pc}

000103c2 <ll_terminate_ind_send>:
{
   103c2:	b510      	push	{r4, lr}
   103c4:	460c      	mov	r4, r1
	conn = connection_get(handle);
   103c6:	f7f9 fbe1 	bl	9b8c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   103ca:	b160      	cbz	r0, 103e6 <ll_terminate_ind_send+0x24>
   103cc:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   103d0:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   103d4:	4293      	cmp	r3, r2
   103d6:	d106      	bne.n	103e6 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   103d8:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   103da:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   103de:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   103e2:	2000      	movs	r0, #0
   103e4:	bd10      	pop	{r4, pc}
		return 1;
   103e6:	2001      	movs	r0, #1
}
   103e8:	bd10      	pop	{r4, pc}

000103ea <ll_tx_pwr_lvl_get>:
{
   103ea:	b510      	push	{r4, lr}
   103ec:	4614      	mov	r4, r2
	conn = connection_get(handle);
   103ee:	f7f9 fbcd 	bl	9b8c <connection_get>
	if (!conn) {
   103f2:	b110      	cbz	r0, 103fa <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   103f4:	2000      	movs	r0, #0
   103f6:	7020      	strb	r0, [r4, #0]
	return 0;
   103f8:	bd10      	pop	{r4, pc}
		return 1;
   103fa:	2001      	movs	r0, #1
}
   103fc:	bd10      	pop	{r4, pc}

000103fe <ll_apto_get>:
{
   103fe:	b510      	push	{r4, lr}
   10400:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10402:	f7f9 fbc3 	bl	9b8c <connection_get>
	if (!conn) {
   10406:	b160      	cbz	r0, 10422 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10408:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1040a:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   1040e:	435a      	muls	r2, r3
   10410:	237d      	movs	r3, #125	; 0x7d
   10412:	4353      	muls	r3, r2
	return 0;
   10414:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1041a:	fb93 f3f2 	sdiv	r3, r3, r2
   1041e:	8023      	strh	r3, [r4, #0]
	return 0;
   10420:	bd10      	pop	{r4, pc}
		return 1;
   10422:	2001      	movs	r0, #1
}
   10424:	bd10      	pop	{r4, pc}

00010426 <ll_apto_set>:
{
   10426:	b510      	push	{r4, lr}
   10428:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1042a:	f7f9 fbaf 	bl	9b8c <connection_get>
	if (!conn) {
   1042e:	b170      	cbz	r0, 1044e <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   10430:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   10432:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10436:	4353      	muls	r3, r2
   10438:	f242 7110 	movw	r1, #10000	; 0x2710
   1043c:	fb01 3404 	mla	r4, r1, r4, r3
   10440:	3c01      	subs	r4, #1
   10442:	fb94 f4f3 	sdiv	r4, r4, r3
   10446:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   1044a:	2000      	movs	r0, #0
   1044c:	bd10      	pop	{r4, pc}
		return 1;
   1044e:	2001      	movs	r0, #1
}
   10450:	bd10      	pop	{r4, pc}

00010452 <ll_length_req_send>:
{
   10452:	b570      	push	{r4, r5, r6, lr}
   10454:	460e      	mov	r6, r1
   10456:	4615      	mov	r5, r2
	conn = connection_get(handle);
   10458:	f7f9 fb98 	bl	9b8c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1045c:	b1d0      	cbz	r0, 10494 <ll_length_req_send+0x42>
   1045e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10462:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10466:	429a      	cmp	r2, r3
   10468:	d114      	bne.n	10494 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1046a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1046e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   10472:	4293      	cmp	r3, r2
   10474:	d10e      	bne.n	10494 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10476:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   1047a:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   1047e:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10480:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   10484:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10488:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   1048c:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   10490:	2000      	movs	r0, #0
   10492:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   10494:	2001      	movs	r0, #1
}
   10496:	bd70      	pop	{r4, r5, r6, pc}

00010498 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   10498:	4b03      	ldr	r3, [pc, #12]	; (104a8 <ll_length_default_get+0x10>)
   1049a:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   1049e:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   104a0:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   104a4:	800b      	strh	r3, [r1, #0]
   104a6:	4770      	bx	lr
   104a8:	200008c0 	.word	0x200008c0

000104ac <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   104ac:	4b03      	ldr	r3, [pc, #12]	; (104bc <ll_length_default_set+0x10>)
   104ae:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   104b2:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   104b6:	2000      	movs	r0, #0
   104b8:	4770      	bx	lr
   104ba:	bf00      	nop
   104bc:	200008c0 	.word	0x200008c0

000104c0 <ll_length_max_get>:
{
   104c0:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   104c2:	241b      	movs	r4, #27
   104c4:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   104c6:	f44f 70a4 	mov.w	r0, #328	; 0x148
   104ca:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   104cc:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   104ce:	8018      	strh	r0, [r3, #0]
   104d0:	bd10      	pop	{r4, pc}

000104d2 <ll_phy_get>:
{
   104d2:	b538      	push	{r3, r4, r5, lr}
   104d4:	460d      	mov	r5, r1
   104d6:	4614      	mov	r4, r2
	conn = connection_get(handle);
   104d8:	f7f9 fb58 	bl	9b8c <connection_get>
	if (!conn) {
   104dc:	b158      	cbz	r0, 104f6 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   104de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   104e2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   104e6:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   104e8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   104ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
   104f0:	7023      	strb	r3, [r4, #0]
	return 0;
   104f2:	2000      	movs	r0, #0
   104f4:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   104f6:	2001      	movs	r0, #1
}
   104f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000104fc <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   104fc:	4b03      	ldr	r3, [pc, #12]	; (1050c <ll_phy_default_set+0x10>)
   104fe:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   10502:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   10506:	2000      	movs	r0, #0
   10508:	4770      	bx	lr
   1050a:	bf00      	nop
   1050c:	200008c0 	.word	0x200008c0

00010510 <ll_phy_req_send>:
{
   10510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10514:	4689      	mov	r9, r1
   10516:	4690      	mov	r8, r2
   10518:	461f      	mov	r7, r3
	conn = connection_get(handle);
   1051a:	f7f9 fb37 	bl	9b8c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1051e:	b320      	cbz	r0, 1056a <ll_phy_req_send+0x5a>
   10520:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10524:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10528:	429a      	cmp	r2, r3
   1052a:	d11e      	bne.n	1056a <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1052c:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10530:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   10534:	429d      	cmp	r5, r3
   10536:	d118      	bne.n	1056a <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10538:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   1053c:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   10540:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   10544:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   10548:	f046 0102 	orr.w	r1, r6, #2
   1054c:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   10550:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   10552:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   10554:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   10558:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   1055c:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   10560:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   10564:	2000      	movs	r0, #0
   10566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   1056a:	2001      	movs	r0, #1
}
   1056c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010570 <ll_rx_get>:
{
   10570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10574:	4605      	mov	r5, r0
   10576:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   10578:	4918      	ldr	r1, [pc, #96]	; (105dc <ll_rx_get+0x6c>)
   1057a:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   1057e:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   10582:	4293      	cmp	r3, r2
   10584:	460f      	mov	r7, r1
   10586:	d01f      	beq.n	105c8 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   10588:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1058c:	f201 1177 	addw	r1, r1, #375	; 0x177
   10590:	f898 2000 	ldrb.w	r2, [r8]
   10594:	f7f9 fab0 	bl	9af8 <tx_cmplt_get>
		if (!cmplt) {
   10598:	4604      	mov	r4, r0
   1059a:	b9e0      	cbnz	r0, 105d6 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   1059c:	ae02      	add	r6, sp, #8
   1059e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   105a2:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   105a6:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   105aa:	4631      	mov	r1, r6
   105ac:	f10d 0006 	add.w	r0, sp, #6
   105b0:	f7f9 faa2 	bl	9af8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   105b4:	b934      	cbnz	r4, 105c4 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   105b6:	b928      	cbnz	r0, 105c4 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   105b8:	f8c5 8000 	str.w	r8, [r5]
}
   105bc:	4620      	mov	r0, r4
   105be:	b002      	add	sp, #8
   105c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   105c4:	4604      	mov	r4, r0
   105c6:	e7ee      	b.n	105a6 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   105c8:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   105cc:	f201 1177 	addw	r1, r1, #375	; 0x177
   105d0:	f7f9 fa92 	bl	9af8 <tx_cmplt_get>
   105d4:	4604      	mov	r4, r0
		*node_rx = NULL;
   105d6:	2300      	movs	r3, #0
   105d8:	602b      	str	r3, [r5, #0]
   105da:	e7ef      	b.n	105bc <ll_rx_get+0x4c>
   105dc:	200008c0 	.word	0x200008c0

000105e0 <ll_rx_mem_release>:
{
   105e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   105e4:	4c1c      	ldr	r4, [pc, #112]	; (10658 <ll_rx_mem_release+0x78>)
{
   105e6:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   105e8:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   105ea:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   105ee:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   105f2:	b930      	cbnz	r0, 10602 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   105f4:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   105f6:	20ff      	movs	r0, #255	; 0xff
}
   105f8:	b002      	add	sp, #8
   105fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   105fe:	f7f9 b9a5 	b.w	994c <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   10602:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   10604:	f8d0 8000 	ldr.w	r8, [r0]
   10608:	2a0c      	cmp	r2, #12
   1060a:	d807      	bhi.n	1061c <ll_rx_mem_release+0x3c>
   1060c:	2301      	movs	r3, #1
   1060e:	4093      	lsls	r3, r2
   10610:	f641 727e 	movw	r2, #8062	; 0x1f7e
   10614:	4213      	tst	r3, r2
   10616:	d110      	bne.n	1063a <ll_rx_mem_release+0x5a>
   10618:	061b      	lsls	r3, r3, #24
   1061a:	d413      	bmi.n	10644 <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   1061c:	4b0f      	ldr	r3, [pc, #60]	; (1065c <ll_rx_mem_release+0x7c>)
   1061e:	9301      	str	r3, [sp, #4]
   10620:	9300      	str	r3, [sp, #0]
   10622:	4a0f      	ldr	r2, [pc, #60]	; (10660 <ll_rx_mem_release+0x80>)
   10624:	4b0f      	ldr	r3, [pc, #60]	; (10664 <ll_rx_mem_release+0x84>)
   10626:	4910      	ldr	r1, [pc, #64]	; (10668 <ll_rx_mem_release+0x88>)
   10628:	4810      	ldr	r0, [pc, #64]	; (1066c <ll_rx_mem_release+0x8c>)
   1062a:	f7f0 fcaf 	bl	f8c <printk>
   1062e:	4040      	eors	r0, r0
   10630:	f380 8811 	msr	BASEPRI, r0
   10634:	f04f 0004 	mov.w	r0, #4
   10638:	df02      	svc	2
			mem_release(_node_rx_free,
   1063a:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   1063c:	f7f6 fb13 	bl	6c66 <mem_release>
{
   10640:	4640      	mov	r0, r8
   10642:	e7d6      	b.n	105f2 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10644:	88c2      	ldrh	r2, [r0, #6]
   10646:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   1064a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1064e:	f7f6 fb25 	bl	6c9c <mem_get>
			mem_release(conn, &_radio.conn_free);
   10652:	4639      	mov	r1, r7
   10654:	e7f2      	b.n	1063c <ll_rx_mem_release+0x5c>
   10656:	bf00      	nop
   10658:	200009f0 	.word	0x200009f0
   1065c:	000145f1 	.word	0x000145f1
   10660:	00015373 	.word	0x00015373
   10664:	00016c03 	.word	0x00016c03
   10668:	000153c2 	.word	0x000153c2
   1066c:	00015312 	.word	0x00015312

00010670 <do_radio_rx_fc_set>:
	if (req == ack) {
   10670:	4291      	cmp	r1, r2
{
   10672:	b510      	push	{r4, lr}
   10674:	4b14      	ldr	r3, [pc, #80]	; (106c8 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   10676:	d119      	bne.n	106ac <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   10678:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   1067c:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   10680:	4294      	cmp	r4, r2
   10682:	d111      	bne.n	106a8 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   10684:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   10686:	bf14      	ite	ne
   10688:	460a      	movne	r2, r1
   1068a:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   1068c:	3a01      	subs	r2, #1
   1068e:	b2d2      	uxtb	r2, r2
   10690:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   10694:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   10698:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   1069c:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   106a0:	4291      	cmp	r1, r2
   106a2:	d00f      	beq.n	106c4 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   106a4:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   106a8:	2001      	movs	r0, #1
   106aa:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   106ac:	b929      	cbnz	r1, 106ba <do_radio_rx_fc_set+0x4a>
   106ae:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   106b2:	1a18      	subs	r0, r3, r0
   106b4:	bf18      	it	ne
   106b6:	2001      	movne	r0, #1
   106b8:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   106ba:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   106be:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   106c2:	e7f6      	b.n	106b2 <do_radio_rx_fc_set+0x42>
	return 0;
   106c4:	2000      	movs	r0, #0
}
   106c6:	bd10      	pop	{r4, pc}
   106c8:	200008c0 	.word	0x200008c0

000106cc <radio_rx_fc_set>:
{
   106cc:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   106ce:	4b14      	ldr	r3, [pc, #80]	; (10720 <radio_rx_fc_set+0x54>)
   106d0:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   106d4:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   106d6:	b302      	cbz	r2, 1071a <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   106d8:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   106dc:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   106de:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   106e2:	b135      	cbz	r5, 106f2 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   106e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   106e8:	4298      	cmp	r0, r3
   106ea:	d016      	beq.n	1071a <radio_rx_fc_set+0x4e>
}
   106ec:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   106ee:	f7ff bfbf 	b.w	10670 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   106f2:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   106f6:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   106fa:	42a0      	cmp	r0, r4
   106fc:	d10d      	bne.n	1071a <radio_rx_fc_set+0x4e>
   106fe:	4291      	cmp	r1, r2
   10700:	d00b      	beq.n	1071a <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10702:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   10706:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1070a:	42a0      	cmp	r0, r4
   1070c:	d005      	beq.n	1071a <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   1070e:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10712:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   10714:	bf08      	it	eq
   10716:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   1071a:	2000      	movs	r0, #0
   1071c:	bc30      	pop	{r4, r5}
   1071e:	4770      	bx	lr
   10720:	200008c0 	.word	0x200008c0

00010724 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   10724:	4801      	ldr	r0, [pc, #4]	; (1072c <ll_tx_mem_acquire+0x8>)
   10726:	f7f6 ba84 	b.w	6c32 <mem_acquire>
   1072a:	bf00      	nop
   1072c:	20000a24 	.word	0x20000a24

00010730 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10730:	4901      	ldr	r1, [pc, #4]	; (10738 <ll_tx_mem_release+0x8>)
   10732:	f7f6 ba98 	b.w	6c66 <mem_release>
   10736:	bf00      	nop
   10738:	20000a24 	.word	0x20000a24

0001073c <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   1073c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1073e:	4d33      	ldr	r5, [pc, #204]	; (1080c <ll_tx_mem_enqueue+0xd0>)
   10740:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   10744:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10748:	3401      	adds	r4, #1
{
   1074a:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   1074c:	b2e4      	uxtb	r4, r4
{
   1074e:	4607      	mov	r7, r0
   10750:	460e      	mov	r6, r1
		last = 0;
   10752:	42a3      	cmp	r3, r4
   10754:	bf08      	it	eq
   10756:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10758:	f7f9 fa18 	bl	9b8c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   1075c:	2800      	cmp	r0, #0
   1075e:	d052      	beq.n	10806 <ll_tx_mem_enqueue+0xca>
   10760:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   10764:	429c      	cmp	r4, r3
   10766:	d04e      	beq.n	10806 <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10768:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   1076c:	7972      	ldrb	r2, [r6, #5]
   1076e:	3b07      	subs	r3, #7
   10770:	429a      	cmp	r2, r3
   10772:	d90e      	bls.n	10792 <ll_tx_mem_enqueue+0x56>
   10774:	4b26      	ldr	r3, [pc, #152]	; (10810 <ll_tx_mem_enqueue+0xd4>)
   10776:	9301      	str	r3, [sp, #4]
   10778:	9300      	str	r3, [sp, #0]
   1077a:	4a26      	ldr	r2, [pc, #152]	; (10814 <ll_tx_mem_enqueue+0xd8>)
   1077c:	4b26      	ldr	r3, [pc, #152]	; (10818 <ll_tx_mem_enqueue+0xdc>)
   1077e:	4927      	ldr	r1, [pc, #156]	; (1081c <ll_tx_mem_enqueue+0xe0>)
   10780:	4827      	ldr	r0, [pc, #156]	; (10820 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10782:	f7f0 fc03 	bl	f8c <printk>
   10786:	4040      	eors	r0, r0
   10788:	f380 8811 	msr	BASEPRI, r0
   1078c:	f04f 0004 	mov.w	r0, #4
   10790:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   10792:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   10796:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   1079a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   1079e:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   107a2:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   107a4:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   107a8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   107ac:	2b00      	cmp	r3, #0
   107ae:	db02      	blt.n	107b6 <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   107b0:	2000      	movs	r0, #0
}
   107b2:	b009      	add	sp, #36	; 0x24
   107b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   107b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   107b8:	2b00      	cmp	r3, #0
   107ba:	d0f9      	beq.n	107b0 <ll_tx_mem_enqueue+0x74>
   107bc:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   107c0:	f012 0302 	ands.w	r3, r2, #2
   107c4:	d1f4      	bne.n	107b0 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   107c6:	f042 0202 	orr.w	r2, r2, #2
   107ca:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   107ce:	f890 2020 	ldrb.w	r2, [r0, #32]
   107d2:	4914      	ldr	r1, [pc, #80]	; (10824 <ll_tx_mem_enqueue+0xe8>)
   107d4:	9105      	str	r1, [sp, #20]
   107d6:	3207      	adds	r2, #7
   107d8:	2101      	movs	r1, #1
   107da:	9006      	str	r0, [sp, #24]
   107dc:	9304      	str	r3, [sp, #16]
   107de:	9103      	str	r1, [sp, #12]
   107e0:	9302      	str	r3, [sp, #8]
   107e2:	9301      	str	r3, [sp, #4]
   107e4:	9300      	str	r3, [sp, #0]
   107e6:	4618      	mov	r0, r3
   107e8:	b2d2      	uxtb	r2, r2
   107ea:	2103      	movs	r1, #3
   107ec:	f7f7 f8fa 	bl	79e4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   107f0:	f030 0302 	bics.w	r3, r0, #2
   107f4:	d0dc      	beq.n	107b0 <ll_tx_mem_enqueue+0x74>
   107f6:	4b06      	ldr	r3, [pc, #24]	; (10810 <ll_tx_mem_enqueue+0xd4>)
   107f8:	9301      	str	r3, [sp, #4]
   107fa:	9300      	str	r3, [sp, #0]
   107fc:	4a05      	ldr	r2, [pc, #20]	; (10814 <ll_tx_mem_enqueue+0xd8>)
   107fe:	4b06      	ldr	r3, [pc, #24]	; (10818 <ll_tx_mem_enqueue+0xdc>)
   10800:	4906      	ldr	r1, [pc, #24]	; (1081c <ll_tx_mem_enqueue+0xe0>)
   10802:	4809      	ldr	r0, [pc, #36]	; (10828 <ll_tx_mem_enqueue+0xec>)
   10804:	e7bd      	b.n	10782 <ll_tx_mem_enqueue+0x46>
		return 1;
   10806:	2001      	movs	r0, #1
   10808:	e7d3      	b.n	107b2 <ll_tx_mem_enqueue+0x76>
   1080a:	bf00      	nop
   1080c:	200008c0 	.word	0x200008c0
   10810:	000145f1 	.word	0x000145f1
   10814:	00015373 	.word	0x00015373
   10818:	00016c31 	.word	0x00016c31
   1081c:	000153c2 	.word	0x000153c2
   10820:	00017217 	.word	0x00017217
   10824:	0000a8e5 	.word	0x0000a8e5
   10828:	00016c69 	.word	0x00016c69

0001082c <ll_enc_req_send>:
{
   1082c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10830:	4607      	mov	r7, r0
   10832:	4688      	mov	r8, r1
   10834:	4616      	mov	r6, r2
   10836:	4699      	mov	r9, r3
	conn = connection_get(handle);
   10838:	f7f9 f9a8 	bl	9b8c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1083c:	4605      	mov	r5, r0
   1083e:	b910      	cbnz	r0, 10846 <ll_enc_req_send+0x1a>
			return 1;
   10840:	2001      	movs	r0, #1
   10842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10846:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1084a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1084e:	429a      	cmp	r2, r3
   10850:	d1f6      	bne.n	10840 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   10852:	f7ff ff67 	bl	10724 <ll_tx_mem_acquire>
	if (node_tx) {
   10856:	4604      	mov	r4, r0
   10858:	2800      	cmp	r0, #0
   1085a:	d0f1      	beq.n	10840 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1085c:	2210      	movs	r2, #16
   1085e:	4649      	mov	r1, r9
   10860:	f105 0084 	add.w	r0, r5, #132	; 0x84
   10864:	f7f1 f9ca 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   10868:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1086c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   10870:	d124      	bne.n	108bc <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10872:	7923      	ldrb	r3, [r4, #4]
   10874:	f043 0303 	orr.w	r3, r3, #3
   10878:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1087a:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1087c:	2208      	movs	r2, #8
			pdu_data_tx->len =
   1087e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10880:	2303      	movs	r3, #3
   10882:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10884:	4641      	mov	r1, r8
   10886:	18a0      	adds	r0, r4, r2
   10888:	f7f1 f9b8 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
   1088c:	7833      	ldrb	r3, [r6, #0]
   1088e:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   10890:	7873      	ldrb	r3, [r6, #1]
   10892:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   10894:	2108      	movs	r1, #8
   10896:	f104 0012 	add.w	r0, r4, #18
   1089a:	f7f7 fa01 	bl	7ca0 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   1089e:	2104      	movs	r1, #4
   108a0:	f104 001a 	add.w	r0, r4, #26
   108a4:	f7f7 f9fc 	bl	7ca0 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   108a8:	4621      	mov	r1, r4
   108aa:	4638      	mov	r0, r7
   108ac:	f7ff ff46 	bl	1073c <ll_tx_mem_enqueue>
   108b0:	2601      	movs	r6, #1
   108b2:	b1d0      	cbz	r0, 108ea <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   108b4:	4620      	mov	r0, r4
   108b6:	f7ff ff3b 	bl	10730 <ll_tx_mem_release>
   108ba:	e7c1      	b.n	10840 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   108bc:	2b30      	cmp	r3, #48	; 0x30
   108be:	d1f9      	bne.n	108b4 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   108c0:	2208      	movs	r2, #8
   108c2:	4641      	mov	r1, r8
   108c4:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   108c8:	f7f1 f998 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   108cc:	7833      	ldrb	r3, [r6, #0]
   108ce:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   108d2:	7873      	ldrb	r3, [r6, #1]
   108d4:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   108d8:	7923      	ldrb	r3, [r4, #4]
   108da:	f043 0303 	orr.w	r3, r3, #3
   108de:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   108e0:	2301      	movs	r3, #1
   108e2:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   108e4:	230a      	movs	r3, #10
   108e6:	71e3      	strb	r3, [r4, #7]
   108e8:	e7de      	b.n	108a8 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   108ea:	2303      	movs	r3, #3
   108ec:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   108f0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   108f4:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   108f8:	3301      	adds	r3, #1
   108fa:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   108fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10902:	0000      	movs	r0, r0
   10904:	0000      	movs	r0, r0
	...

00010908 <radio_scan_enable>:
{
   10908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   1090c:	4c68      	ldr	r4, [pc, #416]	; (10ab0 <radio_scan_enable+0x1a8>)
   1090e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   10912:	b08e      	sub	sp, #56	; 0x38
   10914:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   10916:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1091a:	f04f 0302 	mov.w	r3, #2
{
   1091e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10920:	930b      	str	r3, [sp, #44]	; 0x2c
{
   10922:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   10924:	d003      	beq.n	1092e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10926:	200c      	movs	r0, #12
}
   10928:	b00e      	add	sp, #56	; 0x38
   1092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   1092e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   10932:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   10936:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1093a:	0840      	lsrs	r0, r0, #1
   1093c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   10940:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10944:	f360 0200 	bfi	r2, r0, #0, #1
   10948:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   1094c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   10950:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   10954:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10958:	2206      	movs	r2, #6
   1095a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   1095e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10962:	4e54      	ldr	r6, [pc, #336]	; (10ab4 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10964:	f7f1 f94a 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10968:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   1096c:	f04f 0991 	mov.w	r9, #145	; 0x91
   10970:	fba2 0106 	umull	r0, r1, r2, r6
   10974:	fb09 1102 	mla	r1, r9, r2, r1
   10978:	a34b      	add	r3, pc, #300	; (adr r3, 10aa8 <radio_scan_enable+0x1a0>)
   1097a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1097e:	f7ef fc49 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   10982:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10986:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   1098a:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1098e:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   10992:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10996:	b2ba      	uxth	r2, r7
   10998:	fba2 6706 	umull	r6, r7, r2, r6
   1099c:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   109a0:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   109a4:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   109a6:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   109aa:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   109ae:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   109b2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   109b6:	a33c      	add	r3, pc, #240	; (adr r3, 10aa8 <radio_scan_enable+0x1a0>)
   109b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   109bc:	4630      	mov	r0, r6
   109be:	4639      	mov	r1, r7
   109c0:	f7ef fc28 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   109c4:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   109c8:	459a      	cmp	sl, r3
   109ca:	bf94      	ite	ls
   109cc:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   109d0:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   109d4:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   109d8:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   109da:	bf38      	it	cc
   109dc:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   109e0:	f7f7 f91e 	bl	7c20 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   109e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   109e8:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   109ea:	2b00      	cmp	r3, #0
   109ec:	d045      	beq.n	10a7a <radio_scan_enable+0x172>
		us_offset = 0;
   109ee:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   109f0:	980c      	ldr	r0, [sp, #48]	; 0x30
   109f2:	4931      	ldr	r1, [pc, #196]	; (10ab8 <radio_scan_enable+0x1b0>)
   109f4:	a32c      	add	r3, pc, #176	; (adr r3, 10aa8 <radio_scan_enable+0x1a0>)
   109f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   109fa:	fba0 0101 	umull	r0, r1, r0, r1
   109fe:	f7ef fc09 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a02:	ab0b      	add	r3, sp, #44	; 0x2c
   10a04:	9308      	str	r3, [sp, #32]
   10a06:	4b2d      	ldr	r3, [pc, #180]	; (10abc <radio_scan_enable+0x1b4>)
   10a08:	9307      	str	r3, [sp, #28]
   10a0a:	4b2d      	ldr	r3, [pc, #180]	; (10ac0 <radio_scan_enable+0x1b8>)
   10a0c:	9305      	str	r3, [sp, #20]
   10a0e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a16:	4443      	add	r3, r8
   10a18:	2500      	movs	r5, #0
   10a1a:	4482      	add	sl, r0
   10a1c:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10a1e:	4630      	mov	r0, r6
   10a20:	a321      	add	r3, pc, #132	; (adr r3, 10aa8 <radio_scan_enable+0x1a0>)
   10a22:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a26:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a28:	9506      	str	r5, [sp, #24]
   10a2a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10a2c:	f7ef fbf2 	bl	214 <__aeabi_uldivmod>
   10a30:	4610      	mov	r0, r2
   10a32:	4619      	mov	r1, r3
   10a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10a38:	2300      	movs	r3, #0
   10a3a:	f7ef fbeb 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a3e:	e88d 0220 	stmia.w	sp, {r5, r9}
   10a42:	9002      	str	r0, [sp, #8]
   10a44:	4653      	mov	r3, sl
   10a46:	2206      	movs	r2, #6
   10a48:	2103      	movs	r1, #3
   10a4a:	4628      	mov	r0, r5
   10a4c:	f7f6 ff7a 	bl	7944 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10a50:	2802      	cmp	r0, #2
   10a52:	d023      	beq.n	10a9c <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   10a54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10a56:	2d00      	cmp	r5, #0
   10a58:	f47f af65 	bne.w	10926 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   10a5c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10a60:	f043 0301 	orr.w	r3, r3, #1
   10a64:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   10a68:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10a6c:	2b00      	cmp	r3, #0
   10a6e:	db02      	blt.n	10a76 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   10a70:	2002      	movs	r0, #2
   10a72:	f000 fea3 	bl	117bc <ll_adv_scan_state_cb>
	return 0;
   10a76:	4628      	mov	r0, r5
   10a78:	e756      	b.n	10928 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10a7a:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   10a7e:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10a80:	aa0d      	add	r2, sp, #52	; 0x34
   10a82:	ab0c      	add	r3, sp, #48	; 0x30
   10a84:	4441      	add	r1, r8
   10a86:	2003      	movs	r0, #3
   10a88:	f7f9 fc86 	bl	a398 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   10a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d0ae      	beq.n	109f0 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   10a92:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   10a96:	e7ab      	b.n	109f0 <radio_scan_enable+0xe8>
			cpu_sleep();
   10a98:	f7f8 fe7e 	bl	9798 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   10a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a9e:	2b02      	cmp	r3, #2
   10aa0:	d0fa      	beq.n	10a98 <radio_scan_enable+0x190>
   10aa2:	e7d7      	b.n	10a54 <radio_scan_enable+0x14c>
   10aa4:	f3af 8000 	nop.w
   10aa8:	1afd498d 	.word	0x1afd498d
   10aac:	00000007 	.word	0x00000007
   10ab0:	200008c0 	.word	0x200008c0
   10ab4:	84e72a00 	.word	0x84e72a00
   10ab8:	3b9aca00 	.word	0x3b9aca00
   10abc:	000097dd 	.word	0x000097dd
   10ac0:	0000b705 	.word	0x0000b705

00010ac4 <radio_scan_disable>:
{
   10ac4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   10ac6:	2104      	movs	r1, #4
   10ac8:	2006      	movs	r0, #6
   10aca:	f7f9 f875 	bl	9bb8 <role_disable>
	if (!status) {
   10ace:	4605      	mov	r5, r0
   10ad0:	b9e8      	cbnz	r0, 10b0e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   10ad2:	4c10      	ldr	r4, [pc, #64]	; (10b14 <radio_scan_disable+0x50>)
   10ad4:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   10ad8:	f360 0200 	bfi	r2, r0, #0, #1
   10adc:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   10ae0:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   10ae4:	2a00      	cmp	r2, #0
   10ae6:	db01      	blt.n	10aec <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   10ae8:	f000 fe68 	bl	117bc <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   10aec:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   10af0:	b15e      	cbz	r6, 10b0a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   10af2:	2300      	movs	r3, #0
   10af4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   10af8:	4907      	ldr	r1, [pc, #28]	; (10b18 <radio_scan_disable+0x54>)
   10afa:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   10afe:	f7f6 f8b2 	bl	6c66 <mem_release>
			mem_release(conn, &_radio.conn_free);
   10b02:	4906      	ldr	r1, [pc, #24]	; (10b1c <radio_scan_disable+0x58>)
   10b04:	4630      	mov	r0, r6
   10b06:	f7f6 f8ae 	bl	6c66 <mem_release>
}
   10b0a:	4628      	mov	r0, r5
   10b0c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   10b0e:	250c      	movs	r5, #12
   10b10:	e7fb      	b.n	10b0a <radio_scan_disable+0x46>
   10b12:	bf00      	nop
   10b14:	200008c0 	.word	0x200008c0
   10b18:	20000a08 	.word	0x20000a08
   10b1c:	200009cc 	.word	0x200009cc

00010b20 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   10b20:	4b03      	ldr	r3, [pc, #12]	; (10b30 <ll_connect_disable+0x10>)
   10b22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10b26:	b10b      	cbz	r3, 10b2c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   10b28:	f7ff bfcc 	b.w	10ac4 <radio_scan_disable>
}
   10b2c:	200c      	movs	r0, #12
   10b2e:	4770      	bx	lr
   10b30:	200008c0 	.word	0x200008c0

00010b34 <ll_rx_dequeue>:
{
   10b34:	b530      	push	{r4, r5, lr}
   10b36:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10b38:	4d47      	ldr	r5, [pc, #284]	; (10c58 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   10b3a:	aa04      	add	r2, sp, #16
   10b3c:	2300      	movs	r3, #0
   10b3e:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10b42:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   10b46:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   10b4a:	f7f6 f8db 	bl	6d04 <memq_dequeue>
   10b4e:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10b50:	b970      	cbnz	r0, 10b70 <ll_rx_dequeue+0x3c>
   10b52:	4b42      	ldr	r3, [pc, #264]	; (10c5c <ll_rx_dequeue+0x128>)
   10b54:	9301      	str	r3, [sp, #4]
   10b56:	9300      	str	r3, [sp, #0]
   10b58:	4a41      	ldr	r2, [pc, #260]	; (10c60 <ll_rx_dequeue+0x12c>)
   10b5a:	4b42      	ldr	r3, [pc, #264]	; (10c64 <ll_rx_dequeue+0x130>)
   10b5c:	4942      	ldr	r1, [pc, #264]	; (10c68 <ll_rx_dequeue+0x134>)
   10b5e:	4843      	ldr	r0, [pc, #268]	; (10c6c <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   10b60:	f7f0 fa14 	bl	f8c <printk>
   10b64:	4040      	eors	r0, r0
   10b66:	f380 8811 	msr	BASEPRI, r0
   10b6a:	f04f 0004 	mov.w	r0, #4
   10b6e:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   10b70:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   10b74:	f7f6 f877 	bl	6c66 <mem_release>
	switch (node_rx->hdr.type) {
   10b78:	9a03      	ldr	r2, [sp, #12]
   10b7a:	7911      	ldrb	r1, [r2, #4]
   10b7c:	290c      	cmp	r1, #12
   10b7e:	d807      	bhi.n	10b90 <ll_rx_dequeue+0x5c>
   10b80:	2301      	movs	r3, #1
   10b82:	408b      	lsls	r3, r1
   10b84:	f641 707e 	movw	r0, #8062	; 0x1f7e
   10b88:	4203      	tst	r3, r0
   10b8a:	d109      	bne.n	10ba0 <ll_rx_dequeue+0x6c>
   10b8c:	0618      	lsls	r0, r3, #24
   10b8e:	d419      	bmi.n	10bc4 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   10b90:	4b32      	ldr	r3, [pc, #200]	; (10c5c <ll_rx_dequeue+0x128>)
   10b92:	9301      	str	r3, [sp, #4]
   10b94:	9300      	str	r3, [sp, #0]
   10b96:	4a32      	ldr	r2, [pc, #200]	; (10c60 <ll_rx_dequeue+0x12c>)
   10b98:	4b32      	ldr	r3, [pc, #200]	; (10c64 <ll_rx_dequeue+0x130>)
   10b9a:	4933      	ldr	r1, [pc, #204]	; (10c68 <ll_rx_dequeue+0x134>)
   10b9c:	4834      	ldr	r0, [pc, #208]	; (10c70 <ll_rx_dequeue+0x13c>)
   10b9e:	e7df      	b.n	10b60 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   10ba0:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   10ba4:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   10ba8:	3801      	subs	r0, #1
   10baa:	4283      	cmp	r3, r0
   10bac:	db07      	blt.n	10bbe <ll_rx_dequeue+0x8a>
   10bae:	4b2b      	ldr	r3, [pc, #172]	; (10c5c <ll_rx_dequeue+0x128>)
   10bb0:	9301      	str	r3, [sp, #4]
   10bb2:	9300      	str	r3, [sp, #0]
   10bb4:	4a2a      	ldr	r2, [pc, #168]	; (10c60 <ll_rx_dequeue+0x12c>)
   10bb6:	4b2b      	ldr	r3, [pc, #172]	; (10c64 <ll_rx_dequeue+0x130>)
   10bb8:	492b      	ldr	r1, [pc, #172]	; (10c68 <ll_rx_dequeue+0x134>)
   10bba:	482e      	ldr	r0, [pc, #184]	; (10c74 <ll_rx_dequeue+0x140>)
   10bbc:	e7d0      	b.n	10b60 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   10bbe:	3301      	adds	r3, #1
   10bc0:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   10bc4:	2906      	cmp	r1, #6
   10bc6:	d136      	bne.n	10c36 <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   10bc8:	7ad3      	ldrb	r3, [r2, #11]
   10bca:	2b3c      	cmp	r3, #60	; 0x3c
   10bcc:	d00d      	beq.n	10bea <ll_rx_dequeue+0xb6>
   10bce:	7b12      	ldrb	r2, [r2, #12]
   10bd0:	b9e2      	cbnz	r2, 10c0c <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   10bd2:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10bd6:	07d9      	lsls	r1, r3, #31
   10bd8:	d42f      	bmi.n	10c3a <ll_rx_dequeue+0x106>
   10bda:	4b20      	ldr	r3, [pc, #128]	; (10c5c <ll_rx_dequeue+0x128>)
   10bdc:	9301      	str	r3, [sp, #4]
   10bde:	9300      	str	r3, [sp, #0]
   10be0:	4a1f      	ldr	r2, [pc, #124]	; (10c60 <ll_rx_dequeue+0x12c>)
   10be2:	4b20      	ldr	r3, [pc, #128]	; (10c64 <ll_rx_dequeue+0x130>)
   10be4:	4920      	ldr	r1, [pc, #128]	; (10c68 <ll_rx_dequeue+0x134>)
   10be6:	4824      	ldr	r0, [pc, #144]	; (10c78 <ll_rx_dequeue+0x144>)
   10be8:	e7ba      	b.n	10b60 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   10bea:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   10bec:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   10bf0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   10bf4:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	db09      	blt.n	10c10 <ll_rx_dequeue+0xdc>
   10bfc:	4b17      	ldr	r3, [pc, #92]	; (10c5c <ll_rx_dequeue+0x128>)
   10bfe:	9301      	str	r3, [sp, #4]
   10c00:	9300      	str	r3, [sp, #0]
   10c02:	4a17      	ldr	r2, [pc, #92]	; (10c60 <ll_rx_dequeue+0x12c>)
   10c04:	4b17      	ldr	r3, [pc, #92]	; (10c64 <ll_rx_dequeue+0x130>)
   10c06:	4918      	ldr	r1, [pc, #96]	; (10c68 <ll_rx_dequeue+0x134>)
   10c08:	481c      	ldr	r0, [pc, #112]	; (10c7c <ll_rx_dequeue+0x148>)
   10c0a:	e7a9      	b.n	10b60 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   10c0c:	2500      	movs	r5, #0
   10c0e:	e7f1      	b.n	10bf4 <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   10c10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10c14:	f36f 13c7 	bfc	r3, #7, #1
   10c18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   10c1c:	b995      	cbnz	r5, 10c44 <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10c1e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   10c22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10c26:	f000 0001 	and.w	r0, r0, #1
   10c2a:	0040      	lsls	r0, r0, #1
		if (!bm) {
   10c2c:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   10c30:	d101      	bne.n	10c36 <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   10c32:	f000 fdc3 	bl	117bc <ll_adv_scan_state_cb>
}
   10c36:	b005      	add	sp, #20
   10c38:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   10c3a:	f362 0300 	bfi	r3, r2, #0, #1
   10c3e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   10c42:	e7ec      	b.n	10c1e <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   10c44:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   10c48:	490d      	ldr	r1, [pc, #52]	; (10c80 <ll_rx_dequeue+0x14c>)
   10c4a:	f7f6 f80c 	bl	6c66 <mem_release>
			mem_release(conn, &_radio.conn_free);
   10c4e:	490d      	ldr	r1, [pc, #52]	; (10c84 <ll_rx_dequeue+0x150>)
   10c50:	4628      	mov	r0, r5
   10c52:	f7f6 f808 	bl	6c66 <mem_release>
   10c56:	e7e2      	b.n	10c1e <ll_rx_dequeue+0xea>
   10c58:	200008c0 	.word	0x200008c0
   10c5c:	000145f1 	.word	0x000145f1
   10c60:	00015373 	.word	0x00015373
   10c64:	00016bf5 	.word	0x00016bf5
   10c68:	000153c2 	.word	0x000153c2
   10c6c:	00016c43 	.word	0x00016c43
   10c70:	00015312 	.word	0x00015312
   10c74:	00016cee 	.word	0x00016cee
   10c78:	000171dc 	.word	0x000171dc
   10c7c:	0001719e 	.word	0x0001719e
   10c80:	20000a08 	.word	0x20000a08
   10c84:	200009cc 	.word	0x200009cc

00010c88 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   10c88:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   10c8a:	4c0b      	ldr	r4, [pc, #44]	; (10cb8 <rtc0_nrf5_isr+0x30>)
   10c8c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   10c90:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   10c94:	b122      	cbz	r2, 10ca0 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   10c96:	2000      	movs	r0, #0
   10c98:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   10c9c:	f7f6 fe40 	bl	7920 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   10ca0:	b12d      	cbz	r5, 10cae <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   10ca2:	2300      	movs	r3, #0
   10ca4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   10ca8:	2001      	movs	r0, #1
   10caa:	f7f6 fe39 	bl	7920 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   10cae:	2000      	movs	r0, #0
}
   10cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   10cb4:	f7f6 b8d6 	b.w	6e64 <mayfly_run>
   10cb8:	4000b000 	.word	0x4000b000

00010cbc <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   10cbc:	2001      	movs	r0, #1
   10cbe:	f7f6 b8d1 	b.w	6e64 <mayfly_run>

00010cc2 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10cc2:	4668      	mov	r0, sp
   10cc4:	f020 0107 	bic.w	r1, r0, #7
   10cc8:	468d      	mov	sp, r1
   10cca:	b501      	push	{r0, lr}
	isr_radio();
   10ccc:	f001 f8b8 	bl	11e40 <isr_radio>
	ISR_DIRECT_PM();
   10cd0:	f7f0 fe0e 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   10cd4:	f7f0 fbf8 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10cd8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   10cdc:	4685      	mov	sp, r0
   10cde:	4770      	bx	lr

00010ce0 <radio_active_callback>:
{
   10ce0:	4770      	bx	lr
	...

00010ce4 <radio_event_callback>:
	k_sem_give(sem_recv);
   10ce4:	4b01      	ldr	r3, [pc, #4]	; (10cec <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10ce6:	6818      	ldr	r0, [r3, #0]
   10ce8:	f002 becb 	b.w	13a82 <_impl_k_sem_give>
   10cec:	200011f0 	.word	0x200011f0

00010cf0 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   10cf0:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   10cf2:	4b41      	ldr	r3, [pc, #260]	; (10df8 <ll_init+0x108>)
{
   10cf4:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   10cf6:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   10cf8:	4840      	ldr	r0, [pc, #256]	; (10dfc <ll_init+0x10c>)
   10cfa:	f002 f9db 	bl	130b4 <device_get_binding>
	if (!clk_k32) {
   10cfe:	b918      	cbnz	r0, 10d08 <ll_init+0x18>
		return -ENODEV;
   10d00:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   10d04:	b006      	add	sp, #24
   10d06:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   10d08:	6843      	ldr	r3, [r0, #4]
   10d0a:	2101      	movs	r1, #1
   10d0c:	681b      	ldr	r3, [r3, #0]
   10d0e:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   10d10:	483b      	ldr	r0, [pc, #236]	; (10e00 <ll_init+0x110>)
   10d12:	f002 f9cf 	bl	130b4 <device_get_binding>
	if (!entropy) {
   10d16:	4604      	mov	r4, r0
   10d18:	2800      	cmp	r0, #0
   10d1a:	d0f1      	beq.n	10d00 <ll_init+0x10>
	cntr_init();
   10d1c:	f000 ff74 	bl	11c08 <cntr_init>
	mayfly_init();
   10d20:	f7f6 f800 	bl	6d24 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10d24:	4b37      	ldr	r3, [pc, #220]	; (10e04 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   10d26:	2203      	movs	r2, #3
   10d28:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10d2a:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d2c:	4a36      	ldr	r2, [pc, #216]	; (10e08 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10d2e:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10d30:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10d32:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10d34:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10d36:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d38:	9205      	str	r2, [sp, #20]
   10d3a:	4a34      	ldr	r2, [pc, #208]	; (10e0c <ll_init+0x11c>)
   10d3c:	9204      	str	r2, [sp, #16]
   10d3e:	4a34      	ldr	r2, [pc, #208]	; (10e10 <ll_init+0x120>)
   10d40:	9203      	str	r2, [sp, #12]
   10d42:	4a34      	ldr	r2, [pc, #208]	; (10e14 <ll_init+0x124>)
   10d44:	9202      	str	r2, [sp, #8]
   10d46:	220d      	movs	r2, #13
   10d48:	9201      	str	r2, [sp, #4]
   10d4a:	9300      	str	r3, [sp, #0]
   10d4c:	4a32      	ldr	r2, [pc, #200]	; (10e18 <ll_init+0x128>)
   10d4e:	2304      	movs	r3, #4
   10d50:	f7f6 fdae 	bl	78b0 <ticker_init>
	LL_ASSERT(!err);
   10d54:	b170      	cbz	r0, 10d74 <ll_init+0x84>
   10d56:	4b31      	ldr	r3, [pc, #196]	; (10e1c <ll_init+0x12c>)
   10d58:	9301      	str	r3, [sp, #4]
   10d5a:	9300      	str	r3, [sp, #0]
   10d5c:	4a30      	ldr	r2, [pc, #192]	; (10e20 <ll_init+0x130>)
   10d5e:	4b31      	ldr	r3, [pc, #196]	; (10e24 <ll_init+0x134>)
   10d60:	4931      	ldr	r1, [pc, #196]	; (10e28 <ll_init+0x138>)
   10d62:	4832      	ldr	r0, [pc, #200]	; (10e2c <ll_init+0x13c>)
   10d64:	f7f0 f912 	bl	f8c <printk>
   10d68:	4040      	eors	r0, r0
   10d6a:	f380 8811 	msr	BASEPRI, r0
   10d6e:	f04f 0004 	mov.w	r0, #4
   10d72:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   10d74:	482e      	ldr	r0, [pc, #184]	; (10e30 <ll_init+0x140>)
   10d76:	f002 f99d 	bl	130b4 <device_get_binding>
	if (!clk_m16) {
   10d7a:	2800      	cmp	r0, #0
   10d7c:	d0c0      	beq.n	10d00 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   10d7e:	4b2d      	ldr	r3, [pc, #180]	; (10e34 <ll_init+0x144>)
   10d80:	9304      	str	r3, [sp, #16]
   10d82:	9501      	str	r5, [sp, #4]
   10d84:	231b      	movs	r3, #27
   10d86:	2501      	movs	r5, #1
   10d88:	f44f 7657 	mov.w	r6, #860	; 0x35c
   10d8c:	9303      	str	r3, [sp, #12]
   10d8e:	9302      	str	r3, [sp, #8]
   10d90:	4622      	mov	r2, r4
   10d92:	9605      	str	r6, [sp, #20]
   10d94:	9500      	str	r5, [sp, #0]
   10d96:	462b      	mov	r3, r5
   10d98:	2107      	movs	r1, #7
   10d9a:	f7fe ff49 	bl	fc30 <radio_init>
	if (err) {
   10d9e:	4604      	mov	r4, r0
   10da0:	b160      	cbz	r0, 10dbc <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   10da2:	4b1e      	ldr	r3, [pc, #120]	; (10e1c <ll_init+0x12c>)
   10da4:	9303      	str	r3, [sp, #12]
   10da6:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   10daa:	4a1d      	ldr	r2, [pc, #116]	; (10e20 <ll_init+0x130>)
   10dac:	4b1d      	ldr	r3, [pc, #116]	; (10e24 <ll_init+0x134>)
   10dae:	491e      	ldr	r1, [pc, #120]	; (10e28 <ll_init+0x138>)
   10db0:	4821      	ldr	r0, [pc, #132]	; (10e38 <ll_init+0x148>)
   10db2:	f7f0 f8eb 	bl	f8c <printk>
		return -ENOMEM;
   10db6:	f06f 000b 	mvn.w	r0, #11
   10dba:	e7a3      	b.n	10d04 <ll_init+0x14>
	ll_filter_reset(true);
   10dbc:	4628      	mov	r0, r5
   10dbe:	f000 fedb 	bl	11b78 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10dc2:	4622      	mov	r2, r4
   10dc4:	4621      	mov	r1, r4
   10dc6:	4628      	mov	r0, r5
   10dc8:	f7f0 fd78 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10dcc:	4622      	mov	r2, r4
   10dce:	4621      	mov	r1, r4
   10dd0:	200b      	movs	r0, #11
   10dd2:	f7f0 fd73 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   10dd6:	4622      	mov	r2, r4
   10dd8:	4621      	mov	r1, r4
   10dda:	2018      	movs	r0, #24
   10ddc:	f7f0 fd6e 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   10de0:	4628      	mov	r0, r5
   10de2:	f7f0 fd39 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   10de6:	200b      	movs	r0, #11
   10de8:	f7f0 fd36 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   10dec:	2018      	movs	r0, #24
   10dee:	f7f0 fd33 	bl	1858 <_arch_irq_enable>
	return 0;
   10df2:	4620      	mov	r0, r4
   10df4:	e786      	b.n	10d04 <ll_init+0x14>
   10df6:	bf00      	nop
   10df8:	200011f0 	.word	0x200011f0
   10dfc:	000146c4 	.word	0x000146c4
   10e00:	00014698 	.word	0x00014698
   10e04:	200011d0 	.word	0x200011d0
   10e08:	000127dd 	.word	0x000127dd
   10e0c:	00012739 	.word	0x00012739
   10e10:	000126dd 	.word	0x000126dd
   10e14:	20000f60 	.word	0x20000f60
   10e18:	20000e20 	.word	0x20000e20
   10e1c:	000145f1 	.word	0x000145f1
   10e20:	00015373 	.word	0x00015373
   10e24:	00017913 	.word	0x00017913
   10e28:	000153c2 	.word	0x000153c2
   10e2c:	0001791b 	.word	0x0001791b
   10e30:	000146cf 	.word	0x000146cf
   10e34:	20000ac4 	.word	0x20000ac4
   10e38:	00017941 	.word	0x00017941

00010e3c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   10e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10e40:	4681      	mov	r9, r0
   10e42:	4688      	mov	r8, r1
   10e44:	4617      	mov	r7, r2
   10e46:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   10e48:	f7fe ffd6 	bl	fdf8 <ll_scan_is_enabled>
   10e4c:	b988      	cbnz	r0, 10e72 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   10e4e:	4d0a      	ldr	r5, [pc, #40]	; (10e78 <ll_scan_params_set+0x3c>)
   10e50:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   10e52:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   10e56:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   10e5a:	4622      	mov	r2, r4
   10e5c:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   10e60:	4613      	mov	r3, r2
   10e62:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   10e66:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   10e68:	f362 1387 	bfi	r3, r2, #6, #2
   10e6c:	712b      	strb	r3, [r5, #4]

	return 0;
   10e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10e72:	200c      	movs	r0, #12
}
   10e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10e78:	200011f4 	.word	0x200011f4

00010e7c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   10e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e7e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   10e80:	b920      	cbnz	r0, 10e8c <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   10e82:	b005      	add	sp, #20
   10e84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   10e88:	f7ff be1c 	b.w	10ac4 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   10e8c:	f7fe ffb4 	bl	fdf8 <ll_scan_is_enabled>
   10e90:	4606      	mov	r6, r0
   10e92:	bb40      	cbnz	r0, 10ee6 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   10e94:	4c15      	ldr	r4, [pc, #84]	; (10eec <ll_scan_enable+0x70>)
   10e96:	7920      	ldrb	r0, [r4, #4]
   10e98:	0980      	lsrs	r0, r0, #6
   10e9a:	f000 fa63 	bl	11364 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   10e9e:	7923      	ldrb	r3, [r4, #4]
   10ea0:	f013 0501 	ands.w	r5, r3, #1
   10ea4:	d006      	beq.n	10eb4 <ll_scan_enable+0x38>
   10ea6:	f013 0520 	ands.w	r5, r3, #32
   10eaa:	d003      	beq.n	10eb4 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   10eac:	4630      	mov	r0, r6
   10eae:	f000 fbdd 	bl	1166c <ll_rl_rpa_update>
		rpa_gen = 1;
   10eb2:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   10eb4:	7926      	ldrb	r6, [r4, #4]
   10eb6:	f006 070f 	and.w	r7, r6, #15
   10eba:	f3c6 1600 	ubfx	r6, r6, #4, #1
   10ebe:	2100      	movs	r1, #0
   10ec0:	4630      	mov	r0, r6
   10ec2:	f7f6 feb3 	bl	7c2c <ll_addr_get>
   10ec6:	22ff      	movs	r2, #255	; 0xff
   10ec8:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   10eca:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   10ecc:	8823      	ldrh	r3, [r4, #0]
   10ece:	9502      	str	r5, [sp, #8]
   10ed0:	0992      	lsrs	r2, r2, #6
   10ed2:	9201      	str	r2, [sp, #4]
   10ed4:	8862      	ldrh	r2, [r4, #2]
   10ed6:	9200      	str	r2, [sp, #0]
   10ed8:	4631      	mov	r1, r6
   10eda:	4602      	mov	r2, r0
   10edc:	4638      	mov	r0, r7
   10ede:	f7ff fd13 	bl	10908 <radio_scan_enable>
}
   10ee2:	b005      	add	sp, #20
   10ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   10ee6:	2000      	movs	r0, #0
   10ee8:	e7fb      	b.n	10ee2 <ll_scan_enable+0x66>
   10eea:	bf00      	nop
   10eec:	200011f4 	.word	0x200011f4

00010ef0 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   10ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ef4:	b085      	sub	sp, #20
   10ef6:	461e      	mov	r6, r3
   10ef8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   10efc:	9303      	str	r3, [sp, #12]
   10efe:	4680      	mov	r8, r0
   10f00:	4689      	mov	r9, r1
   10f02:	4615      	mov	r5, r2
   10f04:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10f06:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   10f0a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   10f0e:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   10f12:	f7fe ff71 	bl	fdf8 <ll_scan_is_enabled>
   10f16:	9b03      	ldr	r3, [sp, #12]
   10f18:	bba0      	cbnz	r0, 10f84 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   10f1a:	9300      	str	r3, [sp, #0]
   10f1c:	4652      	mov	r2, sl
   10f1e:	465b      	mov	r3, fp
   10f20:	4639      	mov	r1, r7
   10f22:	4630      	mov	r0, r6
   10f24:	f7fe ff8c 	bl	fe40 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   10f28:	bb68      	cbnz	r0, 10f86 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   10f2a:	4628      	mov	r0, r5
   10f2c:	f000 fa1a 	bl	11364 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   10f30:	b1dd      	cbz	r5, 10f6a <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   10f32:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10f34:	1ea3      	subs	r3, r4, #2
   10f36:	2b01      	cmp	r3, #1
   10f38:	d822      	bhi.n	10f80 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   10f3a:	2000      	movs	r0, #0
   10f3c:	f000 fb96 	bl	1166c <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   10f40:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   10f44:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   10f46:	2100      	movs	r1, #0
   10f48:	4620      	mov	r0, r4
   10f4a:	f7f6 fe6f 	bl	7c2c <ll_addr_get>
   10f4e:	4643      	mov	r3, r8
   10f50:	4602      	mov	r2, r0
   10f52:	4621      	mov	r1, r4
   10f54:	2000      	movs	r0, #0
   10f56:	9711      	str	r7, [sp, #68]	; 0x44
   10f58:	9610      	str	r6, [sp, #64]	; 0x40
   10f5a:	950f      	str	r5, [sp, #60]	; 0x3c
   10f5c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   10f60:	b005      	add	sp, #20
   10f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   10f66:	f7ff bccf 	b.w	10908 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   10f6a:	f000 fb77 	bl	1165c <ctrl_rl_enabled>
   10f6e:	2800      	cmp	r0, #0
   10f70:	d0df      	beq.n	10f32 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   10f72:	4639      	mov	r1, r7
   10f74:	462a      	mov	r2, r5
   10f76:	4630      	mov	r0, r6
   10f78:	f000 fa16 	bl	113a8 <ll_rl_find>
   10f7c:	4607      	mov	r7, r0
   10f7e:	e7d9      	b.n	10f34 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   10f80:	2600      	movs	r6, #0
   10f82:	e7e0      	b.n	10f46 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10f84:	200c      	movs	r0, #12
}
   10f86:	b005      	add	sp, #20
   10f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010f8c <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   10f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f90:	4688      	mov	r8, r1
	int i;

	if (free) {
   10f92:	4615      	mov	r5, r2
   10f94:	b10a      	cbz	r2, 10f9a <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   10f96:	23ff      	movs	r3, #255	; 0xff
   10f98:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10f9a:	4e14      	ldr	r6, [pc, #80]	; (10fec <wl_find+0x60>)
{
   10f9c:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10f9e:	f000 0701 	and.w	r7, r0, #1
   10fa2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10fa6:	07da      	lsls	r2, r3, #31
   10fa8:	d51d      	bpl.n	10fe6 <wl_find+0x5a>
   10faa:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10fae:	42bb      	cmp	r3, r7
   10fb0:	d113      	bne.n	10fda <wl_find+0x4e>
   10fb2:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   10fb6:	2206      	movs	r2, #6
   10fb8:	4641      	mov	r1, r8
   10fba:	3002      	adds	r0, #2
   10fbc:	f7f0 fe09 	bl	1bd2 <memcmp>
   10fc0:	b910      	cbnz	r0, 10fc8 <wl_find+0x3c>
			return i;
   10fc2:	b2e0      	uxtb	r0, r4
   10fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10fc8:	b13d      	cbz	r5, 10fda <wl_find+0x4e>
   10fca:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10fce:	07db      	lsls	r3, r3, #31
   10fd0:	d403      	bmi.n	10fda <wl_find+0x4e>
   10fd2:	782b      	ldrb	r3, [r5, #0]
   10fd4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   10fd6:	bf08      	it	eq
   10fd8:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   10fda:	3401      	adds	r4, #1
   10fdc:	2c08      	cmp	r4, #8
   10fde:	d1e0      	bne.n	10fa2 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   10fe0:	20ff      	movs	r0, #255	; 0xff
   10fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10fe6:	2d00      	cmp	r5, #0
   10fe8:	d1f3      	bne.n	10fd2 <wl_find+0x46>
   10fea:	e7f6      	b.n	10fda <wl_find+0x4e>
   10fec:	20001427 	.word	0x20001427

00010ff0 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   10ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ff4:	4d1a      	ldr	r5, [pc, #104]	; (11060 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10ff6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1106c <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   10ffa:	1eae      	subs	r6, r5, #2
{
   10ffc:	2400      	movs	r4, #0
   10ffe:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11000:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11004:	07d9      	lsls	r1, r3, #31
   11006:	d524      	bpl.n	11052 <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11008:	f898 3000 	ldrb.w	r3, [r8]
   1100c:	b15b      	cbz	r3, 11026 <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   1100e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11012:	2a07      	cmp	r2, #7
   11014:	d807      	bhi.n	11026 <filter_wl_update+0x36>
   11016:	2328      	movs	r3, #40	; 0x28
   11018:	4353      	muls	r3, r2
   1101a:	4a12      	ldr	r2, [pc, #72]	; (11064 <filter_wl_update+0x74>)
   1101c:	5cd3      	ldrb	r3, [r2, r3]
   1101e:	075a      	lsls	r2, r3, #29
   11020:	d501      	bpl.n	11026 <filter_wl_update+0x36>
   11022:	06db      	lsls	r3, r3, #27
   11024:	d515      	bpl.n	11052 <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   11026:	4810      	ldr	r0, [pc, #64]	; (11068 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11028:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1102c:	2201      	movs	r2, #1
   1102e:	fa02 f104 	lsl.w	r1, r2, r4
   11032:	7802      	ldrb	r2, [r0, #0]
   11034:	430a      	orrs	r2, r1
   11036:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11038:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1103c:	7842      	ldrb	r2, [r0, #1]
   1103e:	40a3      	lsls	r3, r4
   11040:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11042:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11044:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11046:	fb02 0004 	mla	r0, r2, r4, r0
   1104a:	4629      	mov	r1, r5
   1104c:	3002      	adds	r0, #2
   1104e:	f7f0 fdd5 	bl	1bfc <memcpy>
   11052:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   11054:	2c08      	cmp	r4, #8
   11056:	f105 0508 	add.w	r5, r5, #8
   1105a:	d1d1      	bne.n	11000 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   1105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11060:	20001429 	.word	0x20001429
   11064:	200012b4 	.word	0x200012b4
   11068:	20001467 	.word	0x20001467
   1106c:	200013f4 	.word	0x200013f4

00011070 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   11070:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   11072:	f7fe fead 	bl	fdd0 <ll_adv_is_enabled>
   11076:	b928      	cbnz	r0, 11084 <rl_access_check.constprop.1+0x14>
   11078:	f7fe febe 	bl	fdf8 <ll_scan_is_enabled>
   1107c:	fab0 f080 	clz	r0, r0
   11080:	0940      	lsrs	r0, r0, #5
   11082:	bd08      	pop	{r3, pc}
   11084:	2000      	movs	r0, #0
}
   11086:	bd08      	pop	{r3, pc}

00011088 <filter_rl_update>:
{
   11088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   1108a:	4e10      	ldr	r6, [pc, #64]	; (110cc <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   1108c:	4d10      	ldr	r5, [pc, #64]	; (110d0 <filter_rl_update+0x48>)
{
   1108e:	2400      	movs	r4, #0
		if (rl[i].taken) {
   11090:	2728      	movs	r7, #40	; 0x28
   11092:	fb07 f104 	mul.w	r1, r7, r4
   11096:	5c73      	ldrb	r3, [r6, r1]
   11098:	07da      	lsls	r2, r3, #31
   1109a:	d513      	bpl.n	110c4 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   1109c:	2201      	movs	r2, #1
   1109e:	fa02 f004 	lsl.w	r0, r2, r4
   110a2:	782a      	ldrb	r2, [r5, #0]
   110a4:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   110a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   110aa:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   110ac:	786a      	ldrb	r2, [r5, #1]
   110ae:	40a3      	lsls	r3, r4
   110b0:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   110b2:	2206      	movs	r2, #6
   110b4:	3101      	adds	r1, #1
   110b6:	fb02 5004 	mla	r0, r2, r4, r5
   110ba:	4431      	add	r1, r6
   110bc:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   110be:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   110c0:	f7f0 fd9c 	bl	1bfc <memcpy>
   110c4:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   110c6:	2c08      	cmp	r4, #8
   110c8:	d1e3      	bne.n	11092 <filter_rl_update+0xa>
}
   110ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110cc:	200012b4 	.word	0x200012b4
   110d0:	200013f5 	.word	0x200013f5

000110d4 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   110d4:	2807      	cmp	r0, #7
   110d6:	d80c      	bhi.n	110f2 <ctrl_lrpa_get+0x1e>
   110d8:	2328      	movs	r3, #40	; 0x28
   110da:	4358      	muls	r0, r3
   110dc:	4a06      	ldr	r2, [pc, #24]	; (110f8 <ctrl_lrpa_get+0x24>)
   110de:	5c13      	ldrb	r3, [r2, r0]
   110e0:	1811      	adds	r1, r2, r0
   110e2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   110e6:	b128      	cbz	r0, 110f4 <ctrl_lrpa_get+0x20>
   110e8:	f3c3 0040 	ubfx	r0, r3, #1, #1
   110ec:	b110      	cbz	r0, 110f4 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   110ee:	6a48      	ldr	r0, [r1, #36]	; 0x24
   110f0:	4770      	bx	lr
		return NULL;
   110f2:	2000      	movs	r0, #0
}
   110f4:	4770      	bx	lr
   110f6:	bf00      	nop
   110f8:	200012b4 	.word	0x200012b4

000110fc <ctrl_irks_get>:
	*count = peer_irk_count;
   110fc:	4b02      	ldr	r3, [pc, #8]	; (11108 <ctrl_irks_get+0xc>)
   110fe:	781b      	ldrb	r3, [r3, #0]
   11100:	7003      	strb	r3, [r0, #0]
}
   11102:	4802      	ldr	r0, [pc, #8]	; (1110c <ctrl_irks_get+0x10>)
   11104:	4770      	bx	lr
   11106:	bf00      	nop
   11108:	2000122a 	.word	0x2000122a
   1110c:	20001233 	.word	0x20001233

00011110 <ctrl_rl_idx>:
{
   11110:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   11112:	b320      	cbz	r0, 1115e <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   11114:	2907      	cmp	r1, #7
   11116:	d90e      	bls.n	11136 <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   11118:	4b1d      	ldr	r3, [pc, #116]	; (11190 <ctrl_rl_idx+0x80>)
   1111a:	9301      	str	r3, [sp, #4]
   1111c:	9300      	str	r3, [sp, #0]
   1111e:	4a1d      	ldr	r2, [pc, #116]	; (11194 <ctrl_rl_idx+0x84>)
   11120:	4b1d      	ldr	r3, [pc, #116]	; (11198 <ctrl_rl_idx+0x88>)
   11122:	491e      	ldr	r1, [pc, #120]	; (1119c <ctrl_rl_idx+0x8c>)
   11124:	481e      	ldr	r0, [pc, #120]	; (111a0 <ctrl_rl_idx+0x90>)
   11126:	f7ef ff31 	bl	f8c <printk>
   1112a:	4040      	eors	r0, r0
   1112c:	f380 8811 	msr	BASEPRI, r0
   11130:	f04f 0004 	mov.w	r0, #4
   11134:	df02      	svc	2
   11136:	4b1b      	ldr	r3, [pc, #108]	; (111a4 <ctrl_rl_idx+0x94>)
   11138:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   1113c:	07d2      	lsls	r2, r2, #31
   1113e:	d407      	bmi.n	11150 <ctrl_rl_idx+0x40>
   11140:	4b13      	ldr	r3, [pc, #76]	; (11190 <ctrl_rl_idx+0x80>)
   11142:	9301      	str	r3, [sp, #4]
   11144:	9300      	str	r3, [sp, #0]
   11146:	4a13      	ldr	r2, [pc, #76]	; (11194 <ctrl_rl_idx+0x84>)
   11148:	4b13      	ldr	r3, [pc, #76]	; (11198 <ctrl_rl_idx+0x88>)
   1114a:	4914      	ldr	r1, [pc, #80]	; (1119c <ctrl_rl_idx+0x8c>)
   1114c:	4816      	ldr	r0, [pc, #88]	; (111a8 <ctrl_rl_idx+0x98>)
   1114e:	e7ea      	b.n	11126 <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   11150:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11154:	7849      	ldrb	r1, [r1, #1]
}
   11156:	4608      	mov	r0, r1
   11158:	b003      	add	sp, #12
   1115a:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1115e:	2907      	cmp	r1, #7
   11160:	d907      	bls.n	11172 <ctrl_rl_idx+0x62>
   11162:	4b0b      	ldr	r3, [pc, #44]	; (11190 <ctrl_rl_idx+0x80>)
   11164:	9301      	str	r3, [sp, #4]
   11166:	9300      	str	r3, [sp, #0]
   11168:	4a0a      	ldr	r2, [pc, #40]	; (11194 <ctrl_rl_idx+0x84>)
   1116a:	4b0b      	ldr	r3, [pc, #44]	; (11198 <ctrl_rl_idx+0x88>)
   1116c:	490b      	ldr	r1, [pc, #44]	; (1119c <ctrl_rl_idx+0x8c>)
   1116e:	480f      	ldr	r0, [pc, #60]	; (111ac <ctrl_rl_idx+0x9c>)
   11170:	e7d9      	b.n	11126 <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   11172:	2328      	movs	r3, #40	; 0x28
   11174:	434b      	muls	r3, r1
   11176:	4a0e      	ldr	r2, [pc, #56]	; (111b0 <ctrl_rl_idx+0xa0>)
   11178:	5cd3      	ldrb	r3, [r2, r3]
   1117a:	07db      	lsls	r3, r3, #31
   1117c:	d4eb      	bmi.n	11156 <ctrl_rl_idx+0x46>
   1117e:	4b04      	ldr	r3, [pc, #16]	; (11190 <ctrl_rl_idx+0x80>)
   11180:	9301      	str	r3, [sp, #4]
   11182:	9300      	str	r3, [sp, #0]
   11184:	4a03      	ldr	r2, [pc, #12]	; (11194 <ctrl_rl_idx+0x84>)
   11186:	4b04      	ldr	r3, [pc, #16]	; (11198 <ctrl_rl_idx+0x88>)
   11188:	4904      	ldr	r1, [pc, #16]	; (1119c <ctrl_rl_idx+0x8c>)
   1118a:	480a      	ldr	r0, [pc, #40]	; (111b4 <ctrl_rl_idx+0xa4>)
   1118c:	e7cb      	b.n	11126 <ctrl_rl_idx+0x16>
   1118e:	bf00      	nop
   11190:	000145f1 	.word	0x000145f1
   11194:	00015373 	.word	0x00015373
   11198:	00017976 	.word	0x00017976
   1119c:	000153c2 	.word	0x000153c2
   111a0:	00017a10 	.word	0x00017a10
   111a4:	20001427 	.word	0x20001427
   111a8:	00017add 	.word	0x00017add
   111ac:	00017b14 	.word	0x00017b14
   111b0:	200012b4 	.word	0x200012b4
   111b4:	00017be1 	.word	0x00017be1

000111b8 <ctrl_rl_irk_idx>:
{
   111b8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   111ba:	4b18      	ldr	r3, [pc, #96]	; (1121c <ctrl_rl_irk_idx+0x64>)
   111bc:	781b      	ldrb	r3, [r3, #0]
   111be:	4283      	cmp	r3, r0
   111c0:	d80e      	bhi.n	111e0 <ctrl_rl_irk_idx+0x28>
   111c2:	4b17      	ldr	r3, [pc, #92]	; (11220 <ctrl_rl_irk_idx+0x68>)
   111c4:	9301      	str	r3, [sp, #4]
   111c6:	9300      	str	r3, [sp, #0]
   111c8:	4a16      	ldr	r2, [pc, #88]	; (11224 <ctrl_rl_irk_idx+0x6c>)
   111ca:	4b17      	ldr	r3, [pc, #92]	; (11228 <ctrl_rl_irk_idx+0x70>)
   111cc:	4917      	ldr	r1, [pc, #92]	; (1122c <ctrl_rl_irk_idx+0x74>)
   111ce:	4818      	ldr	r0, [pc, #96]	; (11230 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   111d0:	f7ef fedc 	bl	f8c <printk>
   111d4:	4040      	eors	r0, r0
   111d6:	f380 8811 	msr	BASEPRI, r0
   111da:	f04f 0004 	mov.w	r0, #4
   111de:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   111e0:	4b14      	ldr	r3, [pc, #80]	; (11234 <ctrl_rl_irk_idx+0x7c>)
   111e2:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   111e4:	2807      	cmp	r0, #7
   111e6:	d907      	bls.n	111f8 <ctrl_rl_irk_idx+0x40>
   111e8:	4b0d      	ldr	r3, [pc, #52]	; (11220 <ctrl_rl_irk_idx+0x68>)
   111ea:	9301      	str	r3, [sp, #4]
   111ec:	9300      	str	r3, [sp, #0]
   111ee:	4a0d      	ldr	r2, [pc, #52]	; (11224 <ctrl_rl_irk_idx+0x6c>)
   111f0:	4b0d      	ldr	r3, [pc, #52]	; (11228 <ctrl_rl_irk_idx+0x70>)
   111f2:	490e      	ldr	r1, [pc, #56]	; (1122c <ctrl_rl_irk_idx+0x74>)
   111f4:	4810      	ldr	r0, [pc, #64]	; (11238 <ctrl_rl_irk_idx+0x80>)
   111f6:	e7eb      	b.n	111d0 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   111f8:	2328      	movs	r3, #40	; 0x28
   111fa:	4343      	muls	r3, r0
   111fc:	4a0f      	ldr	r2, [pc, #60]	; (1123c <ctrl_rl_irk_idx+0x84>)
   111fe:	5cd3      	ldrb	r3, [r2, r3]
   11200:	07db      	lsls	r3, r3, #31
   11202:	d407      	bmi.n	11214 <ctrl_rl_irk_idx+0x5c>
   11204:	4b06      	ldr	r3, [pc, #24]	; (11220 <ctrl_rl_irk_idx+0x68>)
   11206:	9301      	str	r3, [sp, #4]
   11208:	9300      	str	r3, [sp, #0]
   1120a:	4a06      	ldr	r2, [pc, #24]	; (11224 <ctrl_rl_irk_idx+0x6c>)
   1120c:	4b06      	ldr	r3, [pc, #24]	; (11228 <ctrl_rl_irk_idx+0x70>)
   1120e:	4907      	ldr	r1, [pc, #28]	; (1122c <ctrl_rl_irk_idx+0x74>)
   11210:	480b      	ldr	r0, [pc, #44]	; (11240 <ctrl_rl_irk_idx+0x88>)
   11212:	e7dd      	b.n	111d0 <ctrl_rl_irk_idx+0x18>
}
   11214:	b003      	add	sp, #12
   11216:	f85d fb04 	ldr.w	pc, [sp], #4
   1121a:	bf00      	nop
   1121c:	2000122a 	.word	0x2000122a
   11220:	000145f1 	.word	0x000145f1
   11224:	00015373 	.word	0x00015373
   11228:	00017982 	.word	0x00017982
   1122c:	000153c2 	.word	0x000153c2
   11230:	00017c0e 	.word	0x00017c0e
   11234:	2000122b 	.word	0x2000122b
   11238:	00017c4c 	.word	0x00017c4c
   1123c:	200012b4 	.word	0x200012b4
   11240:	00017be1 	.word	0x00017be1

00011244 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11244:	2807      	cmp	r0, #7
{
   11246:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11248:	d819      	bhi.n	1127e <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   1124a:	2328      	movs	r3, #40	; 0x28
   1124c:	4358      	muls	r0, r3
   1124e:	4b0d      	ldr	r3, [pc, #52]	; (11284 <ctrl_irk_whitelisted+0x40>)
   11250:	5c18      	ldrb	r0, [r3, r0]
   11252:	07c3      	lsls	r3, r0, #31
   11254:	d40e      	bmi.n	11274 <ctrl_irk_whitelisted+0x30>
   11256:	4b0c      	ldr	r3, [pc, #48]	; (11288 <ctrl_irk_whitelisted+0x44>)
   11258:	9301      	str	r3, [sp, #4]
   1125a:	9300      	str	r3, [sp, #0]
   1125c:	4a0b      	ldr	r2, [pc, #44]	; (1128c <ctrl_irk_whitelisted+0x48>)
   1125e:	4b0c      	ldr	r3, [pc, #48]	; (11290 <ctrl_irk_whitelisted+0x4c>)
   11260:	490c      	ldr	r1, [pc, #48]	; (11294 <ctrl_irk_whitelisted+0x50>)
   11262:	480d      	ldr	r0, [pc, #52]	; (11298 <ctrl_irk_whitelisted+0x54>)
   11264:	f7ef fe92 	bl	f8c <printk>
   11268:	4040      	eors	r0, r0
   1126a:	f380 8811 	msr	BASEPRI, r0
   1126e:	f04f 0004 	mov.w	r0, #4
   11272:	df02      	svc	2
	return rl[rl_idx].wl;
   11274:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   11278:	b003      	add	sp, #12
   1127a:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   1127e:	2000      	movs	r0, #0
   11280:	e7fa      	b.n	11278 <ctrl_irk_whitelisted+0x34>
   11282:	bf00      	nop
   11284:	200012b4 	.word	0x200012b4
   11288:	000145f1 	.word	0x000145f1
   1128c:	00015373 	.word	0x00015373
   11290:	00017992 	.word	0x00017992
   11294:	000153c2 	.word	0x000153c2
   11298:	000179de 	.word	0x000179de

0001129c <ctrl_filter_get>:
}
   1129c:	4b03      	ldr	r3, [pc, #12]	; (112ac <ctrl_filter_get+0x10>)
   1129e:	4a04      	ldr	r2, [pc, #16]	; (112b0 <ctrl_filter_get+0x14>)
   112a0:	2800      	cmp	r0, #0
   112a2:	bf14      	ite	ne
   112a4:	4610      	movne	r0, r2
   112a6:	4618      	moveq	r0, r3
   112a8:	4770      	bx	lr
   112aa:	bf00      	nop
   112ac:	200013f5 	.word	0x200013f5
   112b0:	20001467 	.word	0x20001467

000112b4 <ll_wl_size_get>:
   112b4:	2008      	movs	r0, #8
   112b6:	4770      	bx	lr

000112b8 <ll_wl_clear>:
{
   112b8:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   112ba:	f7fe fd91 	bl	fde0 <radio_adv_filter_pol_get>
   112be:	4604      	mov	r4, r0
   112c0:	b110      	cbz	r0, 112c8 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   112c2:	240c      	movs	r4, #12
}
   112c4:	4620      	mov	r0, r4
   112c6:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   112c8:	f7fe fdac 	bl	fe24 <radio_scan_filter_pol_get>
   112cc:	07c3      	lsls	r3, r0, #31
   112ce:	d4f8      	bmi.n	112c2 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   112d0:	4a07      	ldr	r2, [pc, #28]	; (112f0 <ll_wl_clear+0x38>)
   112d2:	4623      	mov	r3, r4
   112d4:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   112d8:	f36f 0100 	bfc	r1, #0, #1
   112dc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   112e0:	3301      	adds	r3, #1
   112e2:	2b08      	cmp	r3, #8
   112e4:	d1f6      	bne.n	112d4 <ll_wl_clear+0x1c>
	wl_anon = 0;
   112e6:	4b03      	ldr	r3, [pc, #12]	; (112f4 <ll_wl_clear+0x3c>)
   112e8:	2200      	movs	r2, #0
   112ea:	701a      	strb	r2, [r3, #0]
	return 0;
   112ec:	e7ea      	b.n	112c4 <ll_wl_clear+0xc>
   112ee:	bf00      	nop
   112f0:	20001427 	.word	0x20001427
   112f4:	20001918 	.word	0x20001918

000112f8 <ll_wl_remove>:
{
   112f8:	b538      	push	{r3, r4, r5, lr}
   112fa:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   112fc:	f7fe fd70 	bl	fde0 <radio_adv_filter_pol_get>
   11300:	4604      	mov	r4, r0
   11302:	b110      	cbz	r0, 1130a <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11304:	240c      	movs	r4, #12
}
   11306:	4620      	mov	r0, r4
   11308:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1130a:	f7fe fd8b 	bl	fe24 <radio_scan_filter_pol_get>
   1130e:	07c3      	lsls	r3, r0, #31
   11310:	d4f8      	bmi.n	11304 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   11312:	7828      	ldrb	r0, [r5, #0]
   11314:	28ff      	cmp	r0, #255	; 0xff
   11316:	d102      	bne.n	1131e <ll_wl_remove+0x26>
		wl_anon = 0;
   11318:	4b0f      	ldr	r3, [pc, #60]	; (11358 <ll_wl_remove+0x60>)
   1131a:	701c      	strb	r4, [r3, #0]
		return 0;
   1131c:	e7f3      	b.n	11306 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1131e:	4622      	mov	r2, r4
   11320:	1c69      	adds	r1, r5, #1
   11322:	f7ff fe33 	bl	10f8c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11326:	2807      	cmp	r0, #7
   11328:	d813      	bhi.n	11352 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1132a:	4b0c      	ldr	r3, [pc, #48]	; (1135c <ll_wl_remove+0x64>)
   1132c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   11330:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   11332:	2d07      	cmp	r5, #7
   11334:	d806      	bhi.n	11344 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   11336:	2228      	movs	r2, #40	; 0x28
   11338:	4909      	ldr	r1, [pc, #36]	; (11360 <ll_wl_remove+0x68>)
   1133a:	436a      	muls	r2, r5
   1133c:	5c8d      	ldrb	r5, [r1, r2]
   1133e:	f364 1545 	bfi	r5, r4, #5, #1
   11342:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   11344:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11348:	f36f 0200 	bfc	r2, #0, #1
   1134c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   11350:	e7d9      	b.n	11306 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11352:	2402      	movs	r4, #2
   11354:	e7d7      	b.n	11306 <ll_wl_remove+0xe>
   11356:	bf00      	nop
   11358:	20001918 	.word	0x20001918
   1135c:	20001427 	.word	0x20001427
   11360:	200012b4 	.word	0x200012b4

00011364 <ll_filters_scan_update>:
{
   11364:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   11366:	4b0d      	ldr	r3, [pc, #52]	; (1139c <ll_filters_scan_update+0x38>)
   11368:	2200      	movs	r2, #0
   1136a:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1136c:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1136e:	07c3      	lsls	r3, r0, #31
   11370:	d504      	bpl.n	1137c <ll_filters_scan_update+0x18>
   11372:	f7fe fd35 	bl	fde0 <radio_adv_filter_pol_get>
   11376:	b908      	cbnz	r0, 1137c <ll_filters_scan_update+0x18>
		filter_wl_update();
   11378:	f7ff fe3a 	bl	10ff0 <filter_wl_update>
	filter->enable_bitmask = 0;
   1137c:	4b08      	ldr	r3, [pc, #32]	; (113a0 <ll_filters_scan_update+0x3c>)
   1137e:	2200      	movs	r2, #0
   11380:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   11382:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   11384:	4b07      	ldr	r3, [pc, #28]	; (113a4 <ll_filters_scan_update+0x40>)
   11386:	781b      	ldrb	r3, [r3, #0]
   11388:	b133      	cbz	r3, 11398 <ll_filters_scan_update+0x34>
   1138a:	f7fe fd21 	bl	fdd0 <ll_adv_is_enabled>
   1138e:	b918      	cbnz	r0, 11398 <ll_filters_scan_update+0x34>
}
   11390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   11394:	f7ff be78 	b.w	11088 <filter_rl_update>
   11398:	bd08      	pop	{r3, pc}
   1139a:	bf00      	nop
   1139c:	20001467 	.word	0x20001467
   113a0:	200013f5 	.word	0x200013f5
   113a4:	200013f4 	.word	0x200013f4

000113a8 <ll_rl_find>:
{
   113a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113ac:	468a      	mov	sl, r1
	if (free) {
   113ae:	4614      	mov	r4, r2
   113b0:	b10a      	cbz	r2, 113b6 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   113b2:	23ff      	movs	r3, #255	; 0xff
   113b4:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   113b6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1140c <ll_rl_find+0x64>
{
   113ba:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   113bc:	f000 0901 	and.w	r9, r0, #1
   113c0:	2628      	movs	r6, #40	; 0x28
   113c2:	436e      	muls	r6, r5
   113c4:	b2ef      	uxtb	r7, r5
   113c6:	f818 3006 	ldrb.w	r3, [r8, r6]
   113ca:	07da      	lsls	r2, r3, #31
   113cc:	d51a      	bpl.n	11404 <ll_rl_find+0x5c>
   113ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
   113d2:	454b      	cmp	r3, r9
   113d4:	d10f      	bne.n	113f6 <ll_rl_find+0x4e>
   113d6:	1c70      	adds	r0, r6, #1
   113d8:	2206      	movs	r2, #6
   113da:	4651      	mov	r1, sl
   113dc:	4440      	add	r0, r8
   113de:	f7f0 fbf8 	bl	1bd2 <memcmp>
   113e2:	b160      	cbz	r0, 113fe <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   113e4:	b13c      	cbz	r4, 113f6 <ll_rl_find+0x4e>
   113e6:	f818 3006 	ldrb.w	r3, [r8, r6]
   113ea:	07db      	lsls	r3, r3, #31
   113ec:	d403      	bmi.n	113f6 <ll_rl_find+0x4e>
   113ee:	7823      	ldrb	r3, [r4, #0]
   113f0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   113f2:	bf08      	it	eq
   113f4:	7027      	strbeq	r7, [r4, #0]
   113f6:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   113f8:	2d08      	cmp	r5, #8
   113fa:	d1e1      	bne.n	113c0 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   113fc:	27ff      	movs	r7, #255	; 0xff
}
   113fe:	4638      	mov	r0, r7
   11400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11404:	2c00      	cmp	r4, #0
   11406:	d1f2      	bne.n	113ee <ll_rl_find+0x46>
   11408:	e7f5      	b.n	113f6 <ll_rl_find+0x4e>
   1140a:	bf00      	nop
   1140c:	200012b4 	.word	0x200012b4

00011410 <ll_wl_add>:
{
   11410:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11414:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11416:	f7fe fce3 	bl	fde0 <radio_adv_filter_pol_get>
   1141a:	4605      	mov	r5, r0
   1141c:	b120      	cbz	r0, 11428 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1141e:	250c      	movs	r5, #12
}
   11420:	4628      	mov	r0, r5
   11422:	b002      	add	sp, #8
   11424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11428:	f7fe fcfc 	bl	fe24 <radio_scan_filter_pol_get>
   1142c:	07c3      	lsls	r3, r0, #31
   1142e:	d4f6      	bmi.n	1141e <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   11430:	7838      	ldrb	r0, [r7, #0]
   11432:	28ff      	cmp	r0, #255	; 0xff
   11434:	d103      	bne.n	1143e <ll_wl_add+0x2e>
		wl_anon = 1;
   11436:	4b1f      	ldr	r3, [pc, #124]	; (114b4 <ll_wl_add+0xa4>)
   11438:	2201      	movs	r2, #1
   1143a:	701a      	strb	r2, [r3, #0]
		return 0;
   1143c:	e7f0      	b.n	11420 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1143e:	f107 0801 	add.w	r8, r7, #1
   11442:	f10d 0207 	add.w	r2, sp, #7
   11446:	4641      	mov	r1, r8
   11448:	f7ff fda0 	bl	10f8c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1144c:	2807      	cmp	r0, #7
   1144e:	d92d      	bls.n	114ac <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   11450:	f89d 6007 	ldrb.w	r6, [sp, #7]
   11454:	2e07      	cmp	r6, #7
   11456:	d82b      	bhi.n	114b0 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11458:	4c17      	ldr	r4, [pc, #92]	; (114b8 <ll_wl_add+0xa8>)
   1145a:	783a      	ldrb	r2, [r7, #0]
   1145c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   11460:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   11464:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   11468:	4641      	mov	r1, r8
   1146a:	2206      	movs	r2, #6
   1146c:	3002      	adds	r0, #2
   1146e:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   11472:	f7f0 fbc3 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11476:	462a      	mov	r2, r5
   11478:	4641      	mov	r1, r8
   1147a:	7838      	ldrb	r0, [r7, #0]
   1147c:	f7ff ff94 	bl	113a8 <ll_rl_find>
   11480:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   11482:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   11484:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   11486:	d80e      	bhi.n	114a6 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   11488:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1148a:	2328      	movs	r3, #40	; 0x28
   1148c:	4a0b      	ldr	r2, [pc, #44]	; (114bc <ll_wl_add+0xac>)
   1148e:	4358      	muls	r0, r3
   11490:	5c13      	ldrb	r3, [r2, r0]
   11492:	f043 0320 	orr.w	r3, r3, #32
   11496:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   11498:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   1149c:	f043 0301 	orr.w	r3, r3, #1
   114a0:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   114a4:	e7bc      	b.n	11420 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   114a6:	22ff      	movs	r2, #255	; 0xff
   114a8:	705a      	strb	r2, [r3, #1]
   114aa:	e7f5      	b.n	11498 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   114ac:	2512      	movs	r5, #18
   114ae:	e7b7      	b.n	11420 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   114b0:	2507      	movs	r5, #7
	return wl_add(addr);
   114b2:	e7b5      	b.n	11420 <ll_wl_add+0x10>
   114b4:	20001918 	.word	0x20001918
   114b8:	20001427 	.word	0x20001427
   114bc:	200012b4 	.word	0x200012b4

000114c0 <ctrl_rl_idx_allowed>:
{
   114c0:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   114c2:	4b12      	ldr	r3, [pc, #72]	; (1150c <ctrl_rl_idx_allowed+0x4c>)
   114c4:	781b      	ldrb	r3, [r3, #0]
   114c6:	b1f3      	cbz	r3, 11506 <ctrl_rl_idx_allowed+0x46>
   114c8:	2907      	cmp	r1, #7
   114ca:	d81c      	bhi.n	11506 <ctrl_rl_idx_allowed+0x46>
   114cc:	b9d8      	cbnz	r0, 11506 <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   114ce:	2328      	movs	r3, #40	; 0x28
   114d0:	4359      	muls	r1, r3
   114d2:	4b0f      	ldr	r3, [pc, #60]	; (11510 <ctrl_rl_idx_allowed+0x50>)
   114d4:	5c58      	ldrb	r0, [r3, r1]
   114d6:	07c2      	lsls	r2, r0, #31
   114d8:	d40e      	bmi.n	114f8 <ctrl_rl_idx_allowed+0x38>
   114da:	4b0e      	ldr	r3, [pc, #56]	; (11514 <ctrl_rl_idx_allowed+0x54>)
   114dc:	9301      	str	r3, [sp, #4]
   114de:	9300      	str	r3, [sp, #0]
   114e0:	4a0d      	ldr	r2, [pc, #52]	; (11518 <ctrl_rl_idx_allowed+0x58>)
   114e2:	4b0e      	ldr	r3, [pc, #56]	; (1151c <ctrl_rl_idx_allowed+0x5c>)
   114e4:	490e      	ldr	r1, [pc, #56]	; (11520 <ctrl_rl_idx_allowed+0x60>)
   114e6:	480f      	ldr	r0, [pc, #60]	; (11524 <ctrl_rl_idx_allowed+0x64>)
   114e8:	f7ef fd50 	bl	f8c <printk>
   114ec:	4040      	eors	r0, r0
   114ee:	f380 8811 	msr	BASEPRI, r0
   114f2:	f04f 0004 	mov.w	r0, #4
   114f6:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   114f8:	0743      	lsls	r3, r0, #29
   114fa:	d504      	bpl.n	11506 <ctrl_rl_idx_allowed+0x46>
   114fc:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   11500:	b003      	add	sp, #12
   11502:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   11506:	2001      	movs	r0, #1
   11508:	e7fa      	b.n	11500 <ctrl_rl_idx_allowed+0x40>
   1150a:	bf00      	nop
   1150c:	200013f4 	.word	0x200013f4
   11510:	200012b4 	.word	0x200012b4
   11514:	000145f1 	.word	0x000145f1
   11518:	00015373 	.word	0x00015373
   1151c:	000179a7 	.word	0x000179a7
   11520:	000153c2 	.word	0x000153c2
   11524:	000179de 	.word	0x000179de

00011528 <ll_rl_id_addr_get>:
{
   11528:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1152a:	2b07      	cmp	r3, #7
{
   1152c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1152e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11530:	d90e      	bls.n	11550 <ll_rl_id_addr_get+0x28>
   11532:	4b15      	ldr	r3, [pc, #84]	; (11588 <ll_rl_id_addr_get+0x60>)
   11534:	9301      	str	r3, [sp, #4]
   11536:	9300      	str	r3, [sp, #0]
   11538:	4a14      	ldr	r2, [pc, #80]	; (1158c <ll_rl_id_addr_get+0x64>)
   1153a:	4b15      	ldr	r3, [pc, #84]	; (11590 <ll_rl_id_addr_get+0x68>)
   1153c:	4915      	ldr	r1, [pc, #84]	; (11594 <ll_rl_id_addr_get+0x6c>)
   1153e:	4816      	ldr	r0, [pc, #88]	; (11598 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   11540:	f7ef fd24 	bl	f8c <printk>
   11544:	4040      	eors	r0, r0
   11546:	f380 8811 	msr	BASEPRI, r0
   1154a:	f04f 0004 	mov.w	r0, #4
   1154e:	df02      	svc	2
   11550:	2528      	movs	r5, #40	; 0x28
   11552:	4c12      	ldr	r4, [pc, #72]	; (1159c <ll_rl_id_addr_get+0x74>)
   11554:	fb05 f203 	mul.w	r2, r5, r3
   11558:	5ca2      	ldrb	r2, [r4, r2]
   1155a:	f012 0f01 	tst.w	r2, #1
   1155e:	d107      	bne.n	11570 <ll_rl_id_addr_get+0x48>
   11560:	4b09      	ldr	r3, [pc, #36]	; (11588 <ll_rl_id_addr_get+0x60>)
   11562:	9301      	str	r3, [sp, #4]
   11564:	9300      	str	r3, [sp, #0]
   11566:	4a09      	ldr	r2, [pc, #36]	; (1158c <ll_rl_id_addr_get+0x64>)
   11568:	4b09      	ldr	r3, [pc, #36]	; (11590 <ll_rl_id_addr_get+0x68>)
   1156a:	490a      	ldr	r1, [pc, #40]	; (11594 <ll_rl_id_addr_get+0x6c>)
   1156c:	480c      	ldr	r0, [pc, #48]	; (115a0 <ll_rl_id_addr_get+0x78>)
   1156e:	e7e7      	b.n	11540 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   11570:	f3c2 1280 	ubfx	r2, r2, #6, #1
   11574:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11576:	fb05 4103 	mla	r1, r5, r3, r4
   1157a:	2206      	movs	r2, #6
   1157c:	3101      	adds	r1, #1
}
   1157e:	b003      	add	sp, #12
   11580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11584:	f7f0 bb3a 	b.w	1bfc <memcpy>
   11588:	000145f1 	.word	0x000145f1
   1158c:	00015373 	.word	0x00015373
   11590:	000179bb 	.word	0x000179bb
   11594:	000153c2 	.word	0x000153c2
   11598:	00017c73 	.word	0x00017c73
   1159c:	200012b4 	.word	0x200012b4
   115a0:	000179de 	.word	0x000179de

000115a4 <ctrl_rl_addr_allowed>:
{
   115a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   115a8:	4b1a      	ldr	r3, [pc, #104]	; (11614 <ctrl_rl_addr_allowed+0x70>)
   115aa:	781b      	ldrb	r3, [r3, #0]
   115ac:	b37b      	cbz	r3, 1160e <ctrl_rl_addr_allowed+0x6a>
   115ae:	7813      	ldrb	r3, [r2, #0]
   115b0:	2bff      	cmp	r3, #255	; 0xff
   115b2:	d12c      	bne.n	1160e <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   115b4:	4e18      	ldr	r6, [pc, #96]	; (11618 <ctrl_rl_addr_allowed+0x74>)
   115b6:	2400      	movs	r4, #0
   115b8:	f04f 0828 	mov.w	r8, #40	; 0x28
   115bc:	46b6      	mov	lr, r6
   115be:	fb08 f304 	mul.w	r3, r8, r4
   115c2:	fa5f fc84 	uxtb.w	ip, r4
   115c6:	5cf7      	ldrb	r7, [r6, r3]
   115c8:	f017 0f01 	tst.w	r7, #1
   115cc:	eb06 0503 	add.w	r5, r6, r3
   115d0:	d01a      	beq.n	11608 <ctrl_rl_addr_allowed+0x64>
   115d2:	f3c7 1780 	ubfx	r7, r7, #6, #1
   115d6:	4287      	cmp	r7, r0
   115d8:	d116      	bne.n	11608 <ctrl_rl_addr_allowed+0x64>
   115da:	3306      	adds	r3, #6
   115dc:	1e4f      	subs	r7, r1, #1
   115de:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   115e0:	f815 af01 	ldrb.w	sl, [r5, #1]!
   115e4:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   115e8:	45ca      	cmp	sl, r9
   115ea:	d10d      	bne.n	11608 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   115ec:	429d      	cmp	r5, r3
   115ee:	d1f7      	bne.n	115e0 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   115f0:	2328      	movs	r3, #40	; 0x28
   115f2:	435c      	muls	r4, r3
				*rl_idx = i;
   115f4:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   115f8:	f81e 0004 	ldrb.w	r0, [lr, r4]
   115fc:	0743      	lsls	r3, r0, #29
   115fe:	d506      	bpl.n	1160e <ctrl_rl_addr_allowed+0x6a>
   11600:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11608:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1160a:	2c08      	cmp	r4, #8
   1160c:	d1d7      	bne.n	115be <ctrl_rl_addr_allowed+0x1a>
   1160e:	2001      	movs	r0, #1
}
   11610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11614:	200013f4 	.word	0x200013f4
   11618:	200012b4 	.word	0x200012b4

0001161c <ctrl_rl_addr_resolve>:
{
   1161c:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1161e:	4c0d      	ldr	r4, [pc, #52]	; (11654 <ctrl_rl_addr_resolve+0x38>)
   11620:	7824      	ldrb	r4, [r4, #0]
   11622:	b1a4      	cbz	r4, 1164e <ctrl_rl_addr_resolve+0x32>
   11624:	2a07      	cmp	r2, #7
   11626:	d812      	bhi.n	1164e <ctrl_rl_addr_resolve+0x32>
   11628:	2528      	movs	r5, #40	; 0x28
   1162a:	4c0b      	ldr	r4, [pc, #44]	; (11658 <ctrl_rl_addr_resolve+0x3c>)
   1162c:	fb05 f602 	mul.w	r6, r5, r2
   11630:	5da6      	ldrb	r6, [r4, r6]
   11632:	0736      	lsls	r6, r6, #28
   11634:	d50b      	bpl.n	1164e <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   11636:	b150      	cbz	r0, 1164e <ctrl_rl_addr_resolve+0x32>
   11638:	794b      	ldrb	r3, [r1, #5]
   1163a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1163e:	2b40      	cmp	r3, #64	; 0x40
   11640:	d105      	bne.n	1164e <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11642:	fb05 4202 	mla	r2, r5, r2, r4
   11646:	1dd0      	adds	r0, r2, #7
}
   11648:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1164a:	f7f0 bbec 	b.w	1e26 <bt_rpa_irk_matches>
}
   1164e:	2000      	movs	r0, #0
   11650:	bc70      	pop	{r4, r5, r6}
   11652:	4770      	bx	lr
   11654:	200013f4 	.word	0x200013f4
   11658:	200012b4 	.word	0x200012b4

0001165c <ctrl_rl_enabled>:
	return rl_enable;
   1165c:	4b02      	ldr	r3, [pc, #8]	; (11668 <ctrl_rl_enabled+0xc>)
   1165e:	7818      	ldrb	r0, [r3, #0]
}
   11660:	3000      	adds	r0, #0
   11662:	bf18      	it	ne
   11664:	2001      	movne	r0, #1
   11666:	4770      	bx	lr
   11668:	200013f4 	.word	0x200013f4

0001166c <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   1166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11670:	b089      	sub	sp, #36	; 0x24
   11672:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   11674:	f002 fa62 	bl	13b3c <_impl_k_uptime_get>
   11678:	4680      	mov	r8, r0
   1167a:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   1167c:	2c00      	cmp	r4, #0
   1167e:	d148      	bne.n	11712 <ll_rl_rpa_update+0xa6>
   11680:	4b3b      	ldr	r3, [pc, #236]	; (11770 <ll_rl_rpa_update+0x104>)
   11682:	e9d3 2300 	ldrd	r2, r3, [r3]
   11686:	1c5c      	adds	r4, r3, #1
   11688:	bf08      	it	eq
   1168a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1168e:	d040      	beq.n	11712 <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11690:	1a82      	subs	r2, r0, r2
   11692:	eb61 0303 	sbc.w	r3, r1, r3
   11696:	4937      	ldr	r1, [pc, #220]	; (11774 <ll_rl_rpa_update+0x108>)
   11698:	6808      	ldr	r0, [r1, #0]
   1169a:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1169c:	4282      	cmp	r2, r0
   1169e:	418b      	sbcs	r3, r1
   116a0:	bfac      	ite	ge
   116a2:	2601      	movge	r6, #1
   116a4:	2600      	movlt	r6, #0
   116a6:	4d34      	ldr	r5, [pc, #208]	; (11778 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   116a8:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   116ac:	2400      	movs	r4, #0
   116ae:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   116b0:	2328      	movs	r3, #40	; 0x28
   116b2:	4363      	muls	r3, r4
   116b4:	f81b 3003 	ldrb.w	r3, [fp, r3]
   116b8:	07d8      	lsls	r0, r3, #31
   116ba:	d54d      	bpl.n	11758 <ll_rl_rpa_update+0xec>
   116bc:	b90e      	cbnz	r6, 116c2 <ll_rl_rpa_update+0x56>
   116be:	0799      	lsls	r1, r3, #30
   116c0:	d44a      	bmi.n	11758 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   116c2:	2328      	movs	r3, #40	; 0x28
   116c4:	4363      	muls	r3, r4
   116c6:	5cfb      	ldrb	r3, [r7, r3]
   116c8:	075a      	lsls	r2, r3, #29
   116ca:	d524      	bpl.n	11716 <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   116cc:	7c2a      	ldrb	r2, [r5, #16]
   116ce:	4b2b      	ldr	r3, [pc, #172]	; (1177c <ll_rl_rpa_update+0x110>)
   116d0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   116d4:	f103 0210 	add.w	r2, r3, #16
   116d8:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   116dc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   116e0:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   116e4:	429a      	cmp	r2, r3
   116e6:	d1f9      	bne.n	116dc <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   116e8:	f105 0117 	add.w	r1, r5, #23
   116ec:	a804      	add	r0, sp, #16
   116ee:	f7f0 fbad 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   116f2:	b180      	cbz	r0, 11716 <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   116f4:	4b22      	ldr	r3, [pc, #136]	; (11780 <ll_rl_rpa_update+0x114>)
   116f6:	9301      	str	r3, [sp, #4]
   116f8:	9300      	str	r3, [sp, #0]
   116fa:	4a22      	ldr	r2, [pc, #136]	; (11784 <ll_rl_rpa_update+0x118>)
   116fc:	4b22      	ldr	r3, [pc, #136]	; (11788 <ll_rl_rpa_update+0x11c>)
   116fe:	4923      	ldr	r1, [pc, #140]	; (1178c <ll_rl_rpa_update+0x120>)
   11700:	4823      	ldr	r0, [pc, #140]	; (11790 <ll_rl_rpa_update+0x124>)
   11702:	f7ef fc43 	bl	f8c <printk>
   11706:	4040      	eors	r0, r0
   11708:	f380 8811 	msr	BASEPRI, r0
   1170c:	f04f 0004 	mov.w	r0, #4
   11710:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   11712:	2601      	movs	r6, #1
   11714:	e7c7      	b.n	116a6 <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   11716:	2328      	movs	r3, #40	; 0x28
   11718:	4363      	muls	r3, r4
   1171a:	5cfb      	ldrb	r3, [r7, r3]
   1171c:	071b      	lsls	r3, r3, #28
   1171e:	d515      	bpl.n	1174c <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11720:	f10d 0a10 	add.w	sl, sp, #16
   11724:	4651      	mov	r1, sl
   11726:	4628      	mov	r0, r5
   11728:	f7f0 fb90 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   1172c:	2800      	cmp	r0, #0
   1172e:	d1e1      	bne.n	116f4 <ll_rl_rpa_update+0x88>
   11730:	4b18      	ldr	r3, [pc, #96]	; (11794 <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   11732:	f8c5 a01d 	str.w	sl, [r5, #29]
   11736:	2206      	movs	r2, #6
   11738:	fb02 3304 	mla	r3, r2, r4, r3
   1173c:	4618      	mov	r0, r3
   1173e:	4651      	mov	r1, sl
   11740:	9303      	str	r3, [sp, #12]
   11742:	f7f0 fa5b 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   11746:	9b03      	ldr	r3, [sp, #12]
   11748:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   1174c:	2328      	movs	r3, #40	; 0x28
   1174e:	4363      	muls	r3, r4
   11750:	5cfa      	ldrb	r2, [r7, r3]
   11752:	f042 0202 	orr.w	r2, r2, #2
   11756:	54fa      	strb	r2, [r7, r3]
   11758:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1175a:	2c08      	cmp	r4, #8
   1175c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11760:	d1a6      	bne.n	116b0 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   11762:	b116      	cbz	r6, 1176a <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   11764:	4b02      	ldr	r3, [pc, #8]	; (11770 <ll_rl_rpa_update+0x104>)
   11766:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   1176a:	b009      	add	sp, #36	; 0x24
   1176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11770:	20001910 	.word	0x20001910
   11774:	20001944 	.word	0x20001944
   11778:	200012bb 	.word	0x200012bb
   1177c:	20001233 	.word	0x20001233
   11780:	000145f1 	.word	0x000145f1
   11784:	00015373 	.word	0x00015373
   11788:	000179cd 	.word	0x000179cd
   1178c:	000153c2 	.word	0x000153c2
   11790:	0001791b 	.word	0x0001791b
   11794:	200011fa 	.word	0x200011fa

00011798 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   11798:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1179a:	2001      	movs	r0, #1
   1179c:	f7ff ff66 	bl	1166c <ll_rl_rpa_update>
   117a0:	4b03      	ldr	r3, [pc, #12]	; (117b0 <rpa_timeout+0x18>)
   117a2:	4904      	ldr	r1, [pc, #16]	; (117b4 <rpa_timeout+0x1c>)
   117a4:	681a      	ldr	r2, [r3, #0]
   117a6:	4804      	ldr	r0, [pc, #16]	; (117b8 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   117a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   117ac:	f002 bcc4 	b.w	14138 <k_delayed_work_submit_to_queue>
   117b0:	20001944 	.word	0x20001944
   117b4:	2000191c 	.word	0x2000191c
   117b8:	20001988 	.word	0x20001988

000117bc <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   117bc:	4b07      	ldr	r3, [pc, #28]	; (117dc <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   117be:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   117c0:	b130      	cbz	r0, 117d0 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   117c2:	b14b      	cbz	r3, 117d8 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   117c4:	4b06      	ldr	r3, [pc, #24]	; (117e0 <ll_adv_scan_state_cb+0x24>)
   117c6:	4907      	ldr	r1, [pc, #28]	; (117e4 <ll_adv_scan_state_cb+0x28>)
   117c8:	681a      	ldr	r2, [r3, #0]
   117ca:	4807      	ldr	r0, [pc, #28]	; (117e8 <ll_adv_scan_state_cb+0x2c>)
   117cc:	f002 bcb4 	b.w	14138 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   117d0:	b113      	cbz	r3, 117d8 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   117d2:	4804      	ldr	r0, [pc, #16]	; (117e4 <ll_adv_scan_state_cb+0x28>)
   117d4:	f002 bc4c 	b.w	14070 <k_delayed_work_cancel>
   117d8:	4770      	bx	lr
   117da:	bf00      	nop
   117dc:	200013f4 	.word	0x200013f4
   117e0:	20001944 	.word	0x20001944
   117e4:	2000191c 	.word	0x2000191c
   117e8:	20001988 	.word	0x20001988

000117ec <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   117ec:	2008      	movs	r0, #8
   117ee:	4770      	bx	lr

000117f0 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   117f0:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   117f2:	f7ff fc3d 	bl	11070 <rl_access_check.constprop.1>
   117f6:	b178      	cbz	r0, 11818 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   117f8:	4908      	ldr	r1, [pc, #32]	; (1181c <ll_rl_clear+0x2c>)
   117fa:	2300      	movs	r3, #0
   117fc:	2428      	movs	r4, #40	; 0x28
   117fe:	fb04 f203 	mul.w	r2, r4, r3
   11802:	3301      	adds	r3, #1
   11804:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11806:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11808:	f36f 0000 	bfc	r0, #0, #1
   1180c:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1180e:	d1f6      	bne.n	117fe <ll_rl_clear+0xe>
	peer_irk_count = 0;
   11810:	4b03      	ldr	r3, [pc, #12]	; (11820 <ll_rl_clear+0x30>)
   11812:	2000      	movs	r0, #0
   11814:	7018      	strb	r0, [r3, #0]
   11816:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11818:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   1181a:	bd10      	pop	{r4, pc}
   1181c:	200012b4 	.word	0x200012b4
   11820:	2000122a 	.word	0x2000122a

00011824 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   11824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11828:	b085      	sub	sp, #20
   1182a:	4607      	mov	r7, r0
   1182c:	4689      	mov	r9, r1
   1182e:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   11830:	f7ff fc1e 	bl	11070 <rl_access_check.constprop.1>
   11834:	2800      	cmp	r0, #0
   11836:	f000 8086 	beq.w	11946 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1183a:	f107 0801 	add.w	r8, r7, #1
   1183e:	f10d 020f 	add.w	r2, sp, #15
   11842:	4641      	mov	r1, r8
   11844:	7838      	ldrb	r0, [r7, #0]
   11846:	f7ff fdaf 	bl	113a8 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   1184a:	2807      	cmp	r0, #7
   1184c:	d97d      	bls.n	1194a <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   1184e:	f89d 500f 	ldrb.w	r5, [sp, #15]
   11852:	2d07      	cmp	r5, #7
   11854:	d87b      	bhi.n	1194e <ll_rl_add+0x12a>
   11856:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1185a:	4c3e      	ldr	r4, [pc, #248]	; (11954 <ll_rl_add+0x130>)
   1185c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   11860:	2628      	movs	r6, #40	; 0x28
   11862:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11864:	f10b 0001 	add.w	r0, fp, #1
   11868:	2206      	movs	r2, #6
   1186a:	4641      	mov	r1, r8
   1186c:	4420      	add	r0, r4
   1186e:	f7f0 f9c5 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   11872:	7839      	ldrb	r1, [r7, #0]
   11874:	5da3      	ldrb	r3, [r4, r6]
   11876:	19a2      	adds	r2, r4, r6
   11878:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1187c:	4648      	mov	r0, r9
   1187e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   11880:	9201      	str	r2, [sp, #4]
   11882:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11884:	f7f5 fa21 	bl	6cca <mem_nz>
   11888:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1188a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1188c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11890:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11892:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11894:	f7f5 fa19 	bl	6cca <mem_nz>
   11898:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   1189a:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1189c:	f000 0001 	and.w	r0, r0, #1
   118a0:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   118a4:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   118a8:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   118aa:	d138      	bne.n	1191e <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   118ac:	b158      	cbz	r0, 118c6 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   118ae:	f10b 0007 	add.w	r0, fp, #7
   118b2:	2210      	movs	r2, #16
   118b4:	4651      	mov	r1, sl
   118b6:	4420      	add	r0, r4
   118b8:	f7f0 f9a0 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
   118bc:	2328      	movs	r3, #40	; 0x28
   118be:	fb03 4305 	mla	r3, r3, r5, r4
   118c2:	2200      	movs	r2, #0
   118c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   118c6:	2628      	movs	r6, #40	; 0x28
   118c8:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   118ca:	f10b 0018 	add.w	r0, fp, #24
   118ce:	2206      	movs	r2, #6
   118d0:	2100      	movs	r1, #0
   118d2:	4420      	add	r0, r4
   118d4:	f7f0 f9be 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
   118d8:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   118da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   118de:	f36f 1304 	bfc	r3, #4, #1
   118e2:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   118e4:	2200      	movs	r2, #0
   118e6:	4641      	mov	r1, r8
   118e8:	7838      	ldrb	r0, [r7, #0]
   118ea:	f7ff fb4f 	bl	10f8c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   118ee:	2807      	cmp	r0, #7
   118f0:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   118f2:	bf9d      	ittte	ls
   118f4:	4a18      	ldrls	r2, [pc, #96]	; (11958 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   118f6:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   118fa:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   118fe:	f36f 1345 	bfchi	r3, #5, #1
   11902:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   11904:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   11908:	bf98      	it	ls
   1190a:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   1190c:	435d      	muls	r5, r3

	return 0;
   1190e:	2000      	movs	r0, #0
	rl[i].taken = 1;
   11910:	5d63      	ldrb	r3, [r4, r5]
   11912:	f043 0301 	orr.w	r3, r3, #1
   11916:	5563      	strb	r3, [r4, r5]
}
   11918:	b005      	add	sp, #20
   1191a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1191e:	4b0f      	ldr	r3, [pc, #60]	; (1195c <ll_rl_add+0x138>)
   11920:	7819      	ldrb	r1, [r3, #0]
   11922:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   11924:	4a0e      	ldr	r2, [pc, #56]	; (11960 <ll_rl_add+0x13c>)
   11926:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   11928:	1c4a      	adds	r2, r1, #1
   1192a:	701a      	strb	r2, [r3, #0]
   1192c:	4b0d      	ldr	r3, [pc, #52]	; (11964 <ll_rl_add+0x140>)
   1192e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   11932:	f109 0210 	add.w	r2, r9, #16
   11936:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   11938:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   1193c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   11940:	454a      	cmp	r2, r9
   11942:	d1f9      	bne.n	11938 <ll_rl_add+0x114>
   11944:	e7b2      	b.n	118ac <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11946:	200c      	movs	r0, #12
   11948:	e7e6      	b.n	11918 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   1194a:	2012      	movs	r0, #18
   1194c:	e7e4      	b.n	11918 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1194e:	2007      	movs	r0, #7
   11950:	e7e2      	b.n	11918 <ll_rl_add+0xf4>
   11952:	bf00      	nop
   11954:	200012b4 	.word	0x200012b4
   11958:	20001427 	.word	0x20001427
   1195c:	2000122a 	.word	0x2000122a
   11960:	2000122b 	.word	0x2000122b
   11964:	20001233 	.word	0x20001233

00011968 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   11968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1196c:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1196e:	f7ff fb7f 	bl	11070 <rl_access_check.constprop.1>
   11972:	2800      	cmp	r0, #0
   11974:	d053      	beq.n	11a1e <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11976:	f109 0a01 	add.w	sl, r9, #1
   1197a:	2200      	movs	r2, #0
   1197c:	4651      	mov	r1, sl
   1197e:	f899 0000 	ldrb.w	r0, [r9]
   11982:	f7ff fd11 	bl	113a8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11986:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11988:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   1198a:	d84b      	bhi.n	11a24 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   1198c:	f04f 0b28 	mov.w	fp, #40	; 0x28
   11990:	4c26      	ldr	r4, [pc, #152]	; (11a2c <ll_rl_remove+0xc4>)
   11992:	fb0b f300 	mul.w	r3, fp, r0
   11996:	18e2      	adds	r2, r4, r3
   11998:	5ce3      	ldrb	r3, [r4, r3]
   1199a:	075b      	lsls	r3, r3, #29
   1199c:	d524      	bpl.n	119e8 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1199e:	4e24      	ldr	r6, [pc, #144]	; (11a30 <ll_rl_remove+0xc8>)
   119a0:	7835      	ldrb	r5, [r6, #0]
   119a2:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   119a4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   119a8:	d01b      	beq.n	119e2 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   119aa:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   119ac:	42af      	cmp	r7, r5
   119ae:	d018      	beq.n	119e2 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   119b0:	4820      	ldr	r0, [pc, #128]	; (11a34 <ll_rl_remove+0xcc>)
   119b2:	2210      	movs	r2, #16
   119b4:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   119b8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   119bc:	f7f0 f91e 	bl	1bfc <memcpy>
   119c0:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   119c2:	fb0b f103 	mul.w	r1, fp, r3
   119c6:	1862      	adds	r2, r4, r1
   119c8:	5c61      	ldrb	r1, [r4, r1]
   119ca:	f011 0f01 	tst.w	r1, #1
   119ce:	b2d8      	uxtb	r0, r3
   119d0:	d021      	beq.n	11a16 <ll_rl_remove+0xae>
   119d2:	0749      	lsls	r1, r1, #29
   119d4:	d51f      	bpl.n	11a16 <ll_rl_remove+0xae>
   119d6:	7dd1      	ldrb	r1, [r2, #23]
   119d8:	42a9      	cmp	r1, r5
   119da:	d11c      	bne.n	11a16 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   119dc:	4b16      	ldr	r3, [pc, #88]	; (11a38 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   119de:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   119e0:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   119e2:	7833      	ldrb	r3, [r6, #0]
   119e4:	3b01      	subs	r3, #1
   119e6:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   119e8:	2200      	movs	r2, #0
   119ea:	4651      	mov	r1, sl
   119ec:	f899 0000 	ldrb.w	r0, [r9]
   119f0:	f7ff facc 	bl	10f8c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   119f4:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   119f6:	bf9f      	itttt	ls
   119f8:	4b10      	ldrls	r3, [pc, #64]	; (11a3c <ll_rl_remove+0xd4>)
   119fa:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   119fe:	23ff      	movls	r3, #255	; 0xff
   11a00:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   11a02:	2028      	movs	r0, #40	; 0x28
   11a04:	fb00 f008 	mul.w	r0, r0, r8
   11a08:	5c23      	ldrb	r3, [r4, r0]
   11a0a:	f36f 0300 	bfc	r3, #0, #1
   11a0e:	5423      	strb	r3, [r4, r0]
		return 0;
   11a10:	2000      	movs	r0, #0
   11a12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a16:	3301      	adds	r3, #1
				for (k = 0;
   11a18:	2b08      	cmp	r3, #8
   11a1a:	d1d2      	bne.n	119c2 <ll_rl_remove+0x5a>
   11a1c:	e7e1      	b.n	119e2 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11a1e:	200c      	movs	r0, #12
   11a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11a24:	2002      	movs	r0, #2
}
   11a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a2a:	bf00      	nop
   11a2c:	200012b4 	.word	0x200012b4
   11a30:	2000122a 	.word	0x2000122a
   11a34:	20001233 	.word	0x20001233
   11a38:	2000122b 	.word	0x2000122b
   11a3c:	20001427 	.word	0x20001427

00011a40 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   11a40:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   11a42:	795c      	ldrb	r4, [r3, #5]
   11a44:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   11a48:	2c40      	cmp	r4, #64	; 0x40
{
   11a4a:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   11a4c:	d117      	bne.n	11a7e <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   11a4e:	b119      	cbz	r1, 11a58 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   11a50:	2200      	movs	r2, #0
   11a52:	f7ff fca9 	bl	113a8 <ll_rl_find>
   11a56:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   11a58:	2a07      	cmp	r2, #7
   11a5a:	d810      	bhi.n	11a7e <ll_rl_crpa_set+0x3e>
   11a5c:	2128      	movs	r1, #40	; 0x28
   11a5e:	4c08      	ldr	r4, [pc, #32]	; (11a80 <ll_rl_crpa_set+0x40>)
   11a60:	fb01 f302 	mul.w	r3, r1, r2
   11a64:	5ce3      	ldrb	r3, [r4, r3]
   11a66:	07db      	lsls	r3, r3, #31
   11a68:	d509      	bpl.n	11a7e <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11a6a:	2018      	movs	r0, #24
   11a6c:	fb11 0002 	smlabb	r0, r1, r2, r0
   11a70:	4420      	add	r0, r4
   11a72:	4629      	mov	r1, r5
   11a74:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   11a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11a7a:	f7f0 b8bf 	b.w	1bfc <memcpy>
   11a7e:	bd70      	pop	{r4, r5, r6, pc}
   11a80:	200012b4 	.word	0x200012b4

00011a84 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   11a84:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11a86:	2200      	movs	r2, #0
{
   11a88:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11a8a:	1c41      	adds	r1, r0, #1
   11a8c:	7800      	ldrb	r0, [r0, #0]
   11a8e:	f7ff fc8b 	bl	113a8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   11a92:	2807      	cmp	r0, #7
   11a94:	d901      	bls.n	11a9a <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11a96:	2002      	movs	r0, #2
   11a98:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11a9a:	2428      	movs	r4, #40	; 0x28
   11a9c:	2318      	movs	r3, #24
   11a9e:	fb14 3000 	smlabb	r0, r4, r0, r3
   11aa2:	4c07      	ldr	r4, [pc, #28]	; (11ac0 <ll_rl_crpa_get+0x3c>)
   11aa4:	4404      	add	r4, r0
   11aa6:	2106      	movs	r1, #6
   11aa8:	4620      	mov	r0, r4
   11aaa:	f7f5 f90e 	bl	6cca <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   11aae:	2800      	cmp	r0, #0
   11ab0:	d0f1      	beq.n	11a96 <ll_rl_crpa_get+0x12>
   11ab2:	2206      	movs	r2, #6
   11ab4:	4621      	mov	r1, r4
   11ab6:	4628      	mov	r0, r5
   11ab8:	f7f0 f8a0 	bl	1bfc <memcpy>
			return 0;
   11abc:	2000      	movs	r0, #0
}
   11abe:	bd38      	pop	{r3, r4, r5, pc}
   11ac0:	200012b4 	.word	0x200012b4

00011ac4 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   11ac4:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11ac6:	2200      	movs	r2, #0
{
   11ac8:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11aca:	1c41      	adds	r1, r0, #1
   11acc:	7800      	ldrb	r0, [r0, #0]
   11ace:	f7ff fc6b 	bl	113a8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11ad2:	2807      	cmp	r0, #7
   11ad4:	d80a      	bhi.n	11aec <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   11ad6:	4b06      	ldr	r3, [pc, #24]	; (11af0 <ll_rl_lrpa_get+0x2c>)
   11ad8:	2228      	movs	r2, #40	; 0x28
   11ada:	fb02 3000 	mla	r0, r2, r0, r3
   11ade:	2206      	movs	r2, #6
   11ae0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11ae2:	4620      	mov	r0, r4
   11ae4:	f7f0 f88a 	bl	1bfc <memcpy>
		return 0;
   11ae8:	2000      	movs	r0, #0
   11aea:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11aec:	2002      	movs	r0, #2
}
   11aee:	bd10      	pop	{r4, pc}
   11af0:	200012b4 	.word	0x200012b4

00011af4 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   11af4:	b510      	push	{r4, lr}
   11af6:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   11af8:	f7ff faba 	bl	11070 <rl_access_check.constprop.1>
   11afc:	b140      	cbz	r0, 11b10 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   11afe:	b11c      	cbz	r4, 11b08 <ll_rl_enable+0x14>
   11b00:	2c01      	cmp	r4, #1
   11b02:	d001      	beq.n	11b08 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   11b04:	2012      	movs	r0, #18
	}

	return 0;
}
   11b06:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   11b08:	4b02      	ldr	r3, [pc, #8]	; (11b14 <ll_rl_enable+0x20>)
   11b0a:	701c      	strb	r4, [r3, #0]
	return 0;
   11b0c:	2000      	movs	r0, #0
		break;
   11b0e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b10:	200c      	movs	r0, #12
   11b12:	bd10      	pop	{r4, pc}
   11b14:	200013f4 	.word	0x200013f4

00011b18 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   11b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11b1c:	4358      	muls	r0, r3
   11b1e:	4b01      	ldr	r3, [pc, #4]	; (11b24 <ll_rl_timeout_set+0xc>)
   11b20:	6018      	str	r0, [r3, #0]
   11b22:	4770      	bx	lr
   11b24:	20001944 	.word	0x20001944

00011b28 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   11b28:	b538      	push	{r3, r4, r5, lr}
   11b2a:	4605      	mov	r5, r0
   11b2c:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   11b2e:	f7ff fa9f 	bl	11070 <rl_access_check.constprop.1>
   11b32:	b1d8      	cbz	r0, 11b6c <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11b34:	2200      	movs	r2, #0
   11b36:	1c69      	adds	r1, r5, #1
   11b38:	7828      	ldrb	r0, [r5, #0]
   11b3a:	f7ff fc35 	bl	113a8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11b3e:	2807      	cmp	r0, #7
   11b40:	d816      	bhi.n	11b70 <ll_priv_mode_set+0x48>
		switch (mode) {
   11b42:	b11c      	cbz	r4, 11b4c <ll_priv_mode_set+0x24>
   11b44:	2c01      	cmp	r4, #1
   11b46:	d00a      	beq.n	11b5e <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   11b48:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   11b4a:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   11b4c:	2328      	movs	r3, #40	; 0x28
   11b4e:	4a09      	ldr	r2, [pc, #36]	; (11b74 <ll_priv_mode_set+0x4c>)
   11b50:	4358      	muls	r0, r3
   11b52:	5c13      	ldrb	r3, [r2, r0]
   11b54:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   11b58:	5413      	strb	r3, [r2, r0]
	return 0;
   11b5a:	2000      	movs	r0, #0
			break;
   11b5c:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   11b5e:	2328      	movs	r3, #40	; 0x28
   11b60:	4a04      	ldr	r2, [pc, #16]	; (11b74 <ll_priv_mode_set+0x4c>)
   11b62:	4358      	muls	r0, r3
   11b64:	5c13      	ldrb	r3, [r2, r0]
   11b66:	f043 0310 	orr.w	r3, r3, #16
   11b6a:	e7f5      	b.n	11b58 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b6c:	200c      	movs	r0, #12
   11b6e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11b70:	2002      	movs	r0, #2
   11b72:	bd38      	pop	{r3, r4, r5, pc}
   11b74:	200012b4 	.word	0x200012b4

00011b78 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   11b78:	4a19      	ldr	r2, [pc, #100]	; (11be0 <ll_filter_reset+0x68>)
   11b7a:	2300      	movs	r3, #0
{
   11b7c:	b430      	push	{r4, r5}
	wl_anon = 0;
   11b7e:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   11b80:	4a18      	ldr	r2, [pc, #96]	; (11be4 <ll_filter_reset+0x6c>)
   11b82:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11b86:	f36f 0100 	bfc	r1, #0, #1
   11b8a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11b8e:	3301      	adds	r3, #1
   11b90:	2b08      	cmp	r3, #8
   11b92:	d1f6      	bne.n	11b82 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   11b94:	4a14      	ldr	r2, [pc, #80]	; (11be8 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11b96:	4915      	ldr	r1, [pc, #84]	; (11bec <ll_filter_reset+0x74>)
	rl_enable = 0;
   11b98:	2300      	movs	r3, #0
   11b9a:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11b9c:	4a14      	ldr	r2, [pc, #80]	; (11bf0 <ll_filter_reset+0x78>)
   11b9e:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   11ba0:	4a14      	ldr	r2, [pc, #80]	; (11bf4 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   11ba2:	4915      	ldr	r1, [pc, #84]	; (11bf8 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   11ba4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11ba8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11bac:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   11bb0:	2528      	movs	r5, #40	; 0x28
   11bb2:	fb05 f203 	mul.w	r2, r5, r3
   11bb6:	3301      	adds	r3, #1
   11bb8:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11bba:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11bbc:	f36f 0400 	bfc	r4, #0, #1
   11bc0:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11bc2:	d1f6      	bne.n	11bb2 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   11bc4:	4b0d      	ldr	r3, [pc, #52]	; (11bfc <ll_filter_reset+0x84>)
   11bc6:	2200      	movs	r2, #0
   11bc8:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   11bca:	b120      	cbz	r0, 11bd6 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11bcc:	490c      	ldr	r1, [pc, #48]	; (11c00 <ll_filter_reset+0x88>)
   11bce:	480d      	ldr	r0, [pc, #52]	; (11c04 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   11bd0:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11bd2:	f002 ba3d 	b.w	14050 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   11bd6:	480b      	ldr	r0, [pc, #44]	; (11c04 <ll_filter_reset+0x8c>)
}
   11bd8:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   11bda:	f002 ba49 	b.w	14070 <k_delayed_work_cancel>
   11bde:	bf00      	nop
   11be0:	20001918 	.word	0x20001918
   11be4:	20001427 	.word	0x20001427
   11be8:	200013f4 	.word	0x200013f4
   11bec:	000dbba0 	.word	0x000dbba0
   11bf0:	20001944 	.word	0x20001944
   11bf4:	20001910 	.word	0x20001910
   11bf8:	200012b4 	.word	0x200012b4
   11bfc:	2000122a 	.word	0x2000122a
   11c00:	00011799 	.word	0x00011799
   11c04:	2000191c 	.word	0x2000191c

00011c08 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   11c08:	4b05      	ldr	r3, [pc, #20]	; (11c20 <cntr_init+0x18>)
   11c0a:	2200      	movs	r2, #0
   11c0c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   11c10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   11c14:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   11c18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   11c1c:	4770      	bx	lr
   11c1e:	bf00      	nop
   11c20:	4000b000 	.word	0x4000b000

00011c24 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   11c24:	4a04      	ldr	r2, [pc, #16]	; (11c38 <cntr_start+0x14>)
   11c26:	7813      	ldrb	r3, [r2, #0]
   11c28:	1c59      	adds	r1, r3, #1
   11c2a:	7011      	strb	r1, [r2, #0]
   11c2c:	2001      	movs	r0, #1
   11c2e:	b913      	cbnz	r3, 11c36 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   11c30:	4a02      	ldr	r2, [pc, #8]	; (11c3c <cntr_start+0x18>)
   11c32:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   11c34:	4618      	mov	r0, r3
}
   11c36:	4770      	bx	lr
   11c38:	20001499 	.word	0x20001499
   11c3c:	4000b000 	.word	0x4000b000

00011c40 <cntr_stop>:

u32_t cntr_stop(void)
{
   11c40:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   11c42:	4b0f      	ldr	r3, [pc, #60]	; (11c80 <cntr_stop+0x40>)
   11c44:	7818      	ldrb	r0, [r3, #0]
   11c46:	b970      	cbnz	r0, 11c66 <cntr_stop+0x26>
   11c48:	4b0e      	ldr	r3, [pc, #56]	; (11c84 <cntr_stop+0x44>)
   11c4a:	9301      	str	r3, [sp, #4]
   11c4c:	9300      	str	r3, [sp, #0]
   11c4e:	4a0e      	ldr	r2, [pc, #56]	; (11c88 <cntr_stop+0x48>)
   11c50:	4b0e      	ldr	r3, [pc, #56]	; (11c8c <cntr_stop+0x4c>)
   11c52:	490f      	ldr	r1, [pc, #60]	; (11c90 <cntr_stop+0x50>)
   11c54:	480f      	ldr	r0, [pc, #60]	; (11c94 <cntr_stop+0x54>)
   11c56:	f7ef f999 	bl	f8c <printk>
   11c5a:	4040      	eors	r0, r0
   11c5c:	f380 8811 	msr	BASEPRI, r0
   11c60:	f04f 0004 	mov.w	r0, #4
   11c64:	df02      	svc	2

	if (--_refcount) {
   11c66:	3801      	subs	r0, #1
   11c68:	b2c0      	uxtb	r0, r0
   11c6a:	7018      	strb	r0, [r3, #0]
   11c6c:	2301      	movs	r3, #1
   11c6e:	b920      	cbnz	r0, 11c7a <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   11c70:	4a09      	ldr	r2, [pc, #36]	; (11c98 <cntr_stop+0x58>)
   11c72:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   11c74:	b003      	add	sp, #12
   11c76:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   11c7a:	4618      	mov	r0, r3
   11c7c:	e7fa      	b.n	11c74 <cntr_stop+0x34>
   11c7e:	bf00      	nop
   11c80:	20001499 	.word	0x20001499
   11c84:	000145f1 	.word	0x000145f1
   11c88:	00015373 	.word	0x00015373
   11c8c:	00017c9f 	.word	0x00017c9f
   11c90:	000153c2 	.word	0x000153c2
   11c94:	00017ca9 	.word	0x00017ca9
   11c98:	4000b000 	.word	0x4000b000

00011c9c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   11c9c:	4b01      	ldr	r3, [pc, #4]	; (11ca4 <cntr_cnt_get+0x8>)
   11c9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   11ca2:	4770      	bx	lr
   11ca4:	4000b000 	.word	0x4000b000

00011ca8 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   11ca8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11cac:	4b01      	ldr	r3, [pc, #4]	; (11cb4 <cntr_cmp_set+0xc>)
   11cae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   11cb2:	4770      	bx	lr
   11cb4:	4000b000 	.word	0x4000b000

00011cb8 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   11cb8:	4b11      	ldr	r3, [pc, #68]	; (11d00 <do_ecb+0x48>)
{
   11cba:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   11cbc:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   11cbe:	2500      	movs	r5, #0
   11cc0:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   11cc2:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   11cc4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   11cc8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   11ccc:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   11cd0:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11cd2:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   11cd6:	b934      	cbnz	r4, 11ce6 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11cd8:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11cdc:	b91c      	cbnz	r4, 11ce6 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   11cde:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11ce2:	2c00      	cmp	r4, #0
   11ce4:	d1f5      	bne.n	11cd2 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   11ce6:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   11ce8:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   11cec:	2c00      	cmp	r4, #0
   11cee:	d1e8      	bne.n	11cc2 <do_ecb+0xa>
   11cf0:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   11cf4:	2e00      	cmp	r6, #0
   11cf6:	d0e4      	beq.n	11cc2 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   11cf8:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   11cfc:	bd70      	pop	{r4, r5, r6, pc}
   11cfe:	bf00      	nop
   11d00:	4000e000 	.word	0x4000e000

00011d04 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   11d04:	b570      	push	{r4, r5, r6, lr}
   11d06:	b08c      	sub	sp, #48	; 0x30
   11d08:	460e      	mov	r6, r1
   11d0a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11d0c:	4601      	mov	r1, r0
   11d0e:	2210      	movs	r2, #16
   11d10:	4668      	mov	r0, sp
{
   11d12:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11d14:	f7f4 ffca 	bl	6cac <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   11d18:	2210      	movs	r2, #16
   11d1a:	eb0d 0002 	add.w	r0, sp, r2
   11d1e:	4631      	mov	r1, r6
   11d20:	f7f4 ffc4 	bl	6cac <mem_rcopy>

	do_ecb(&ecb);
   11d24:	4668      	mov	r0, sp
   11d26:	f7ff ffc7 	bl	11cb8 <do_ecb>

	if (cipher_text_le) {
   11d2a:	b125      	cbz	r5, 11d36 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   11d2c:	2210      	movs	r2, #16
   11d2e:	a908      	add	r1, sp, #32
   11d30:	4628      	mov	r0, r5
   11d32:	f7f4 ffbb 	bl	6cac <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   11d36:	b124      	cbz	r4, 11d42 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   11d38:	2210      	movs	r2, #16
   11d3a:	a908      	add	r1, sp, #32
   11d3c:	4620      	mov	r0, r4
   11d3e:	f7ef ff5d 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   11d42:	b00c      	add	sp, #48	; 0x30
   11d44:	bd70      	pop	{r4, r5, r6, pc}
	...

00011d48 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   11d48:	4b07      	ldr	r3, [pc, #28]	; (11d68 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   11d4a:	4a08      	ldr	r2, [pc, #32]	; (11d6c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   11d4c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   11d50:	4907      	ldr	r1, [pc, #28]	; (11d70 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   11d52:	4a08      	ldr	r2, [pc, #32]	; (11d74 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   11d54:	2800      	cmp	r0, #0
   11d56:	bf14      	ite	ne
   11d58:	4610      	movne	r0, r2
   11d5a:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11d5c:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   11d5e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11d62:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   11d66:	4770      	bx	lr
   11d68:	4001f000 	.word	0x4001f000
   11d6c:	40008140 	.word	0x40008140
   11d70:	40001004 	.word	0x40001004
   11d74:	40001000 	.word	0x40001000

00011d78 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   11d78:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11d7a:	4e2c      	ldr	r6, [pc, #176]	; (11e2c <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11d7c:	4f2c      	ldr	r7, [pc, #176]	; (11e30 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11d7e:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11d80:	4b2c      	ldr	r3, [pc, #176]	; (11e34 <sw_switch.isra.9+0xbc>)
   11d82:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   11d86:	b22b      	sxth	r3, r5
   11d88:	00dc      	lsls	r4, r3, #3
   11d8a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11d8e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   11d92:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11d96:	f105 040b 	add.w	r4, r5, #11
   11d9a:	b2e4      	uxtb	r4, r4
   11d9c:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   11d9e:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   11da2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11da6:	3fc0      	subs	r7, #192	; 0xc0
   11da8:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   11dac:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   11db0:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   11db4:	2800      	cmp	r0, #0
   11db6:	d034      	beq.n	11e22 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   11db8:	f24a 075a 	movw	r7, #41050	; 0xa05a
   11dbc:	f649 4040 	movw	r0, #40000	; 0x9c40
   11dc0:	2a02      	cmp	r2, #2
   11dc2:	bf0c      	ite	eq
   11dc4:	4602      	moveq	r2, r0
   11dc6:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   11dc8:	f242 47b8 	movw	r7, #9400	; 0x24b8
   11dcc:	f241 504a 	movw	r0, #5450	; 0x154a
   11dd0:	2902      	cmp	r1, #2
   11dd2:	bf18      	it	ne
   11dd4:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   11dd6:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   11dda:	4401      	add	r1, r0
   11ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11de0:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11de4:	4a14      	ldr	r2, [pc, #80]	; (11e38 <sw_switch.isra.9+0xc0>)
   11de6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   11dea:	009b      	lsls	r3, r3, #2
   11dec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11df0:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   11df4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   11df8:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11dfa:	bf8b      	itete	hi
   11dfc:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   11e00:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11e02:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   11e04:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11e08:	bf88      	it	hi
   11e0a:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   11e0e:	4b08      	ldr	r3, [pc, #32]	; (11e30 <sw_switch.isra.9+0xb8>)
   11e10:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11e14:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   11e18:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   11e1a:	f003 0301 	and.w	r3, r3, #1
   11e1e:	7033      	strb	r3, [r6, #0]
   11e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11e22:	4a06      	ldr	r2, [pc, #24]	; (11e3c <sw_switch.isra.9+0xc4>)
   11e24:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   11e28:	212d      	movs	r1, #45	; 0x2d
   11e2a:	e7de      	b.n	11dea <sw_switch.isra.9+0x72>
   11e2c:	200016bc 	.word	0x200016bc
   11e30:	4001f000 	.word	0x4001f000
   11e34:	4000110c 	.word	0x4000110c
   11e38:	40001000 	.word	0x40001000
   11e3c:	40001004 	.word	0x40001004

00011e40 <isr_radio>:
	if (sfp_radio_isr) {
   11e40:	4b02      	ldr	r3, [pc, #8]	; (11e4c <isr_radio+0xc>)
   11e42:	681b      	ldr	r3, [r3, #0]
   11e44:	b103      	cbz	r3, 11e48 <isr_radio+0x8>
		sfp_radio_isr();
   11e46:	4718      	bx	r3
   11e48:	4770      	bx	lr
   11e4a:	bf00      	nop
   11e4c:	200016b8 	.word	0x200016b8

00011e50 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   11e50:	4b06      	ldr	r3, [pc, #24]	; (11e6c <radio_isr_set+0x1c>)
   11e52:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   11e54:	4b06      	ldr	r3, [pc, #24]	; (11e70 <radio_isr_set+0x20>)
   11e56:	2210      	movs	r2, #16
   11e58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11e5c:	4b05      	ldr	r3, [pc, #20]	; (11e74 <radio_isr_set+0x24>)
   11e5e:	2202      	movs	r2, #2
   11e60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   11e64:	2001      	movs	r0, #1
   11e66:	f7ef bcf7 	b.w	1858 <_arch_irq_enable>
   11e6a:	bf00      	nop
   11e6c:	200016b8 	.word	0x200016b8
   11e70:	40001000 	.word	0x40001000
   11e74:	e000e100 	.word	0xe000e100

00011e78 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11e80:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11e82:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   11e86:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11e8a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   11e8e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   11e92:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   11e96:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   11e9a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   11e9e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   11ea2:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   11ea6:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   11eaa:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   11eae:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   11eb2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   11eb6:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   11eba:	4770      	bx	lr

00011ebc <radio_reset>:
{
   11ebc:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   11ebe:	2001      	movs	r0, #1
   11ec0:	f7ef fcda 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   11ec4:	4b08      	ldr	r3, [pc, #32]	; (11ee8 <radio_reset+0x2c>)
   11ec6:	2200      	movs	r2, #0
   11ec8:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   11ecc:	2201      	movs	r2, #1
   11ece:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11ed2:	4a06      	ldr	r2, [pc, #24]	; (11eec <radio_reset+0x30>)
   11ed4:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   11ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11eda:	f023 0301 	bic.w	r3, r3, #1
   11ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11ee2:	6013      	str	r3, [r2, #0]
   11ee4:	bd08      	pop	{r3, pc}
   11ee6:	bf00      	nop
   11ee8:	40001000 	.word	0x40001000
   11eec:	40001774 	.word	0x40001774

00011ef0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   11ef0:	4b06      	ldr	r3, [pc, #24]	; (11f0c <radio_phy_set+0x1c>)
	switch (phy) {
   11ef2:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   11ef4:	bf0c      	ite	eq
   11ef6:	2204      	moveq	r2, #4
   11ef8:	2203      	movne	r2, #3
   11efa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   11efe:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   11f02:	f042 0201 	orr.w	r2, r2, #1
   11f06:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   11f0a:	4770      	bx	lr
   11f0c:	40001000 	.word	0x40001000

00011f10 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   11f10:	4b01      	ldr	r3, [pc, #4]	; (11f18 <radio_tx_power_set+0x8>)
   11f12:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   11f16:	4770      	bx	lr
   11f18:	40001000 	.word	0x40001000

00011f1c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   11f1c:	4b01      	ldr	r3, [pc, #4]	; (11f24 <radio_freq_chan_set+0x8>)
   11f1e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   11f22:	4770      	bx	lr
   11f24:	40001000 	.word	0x40001000

00011f28 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   11f28:	4b07      	ldr	r3, [pc, #28]	; (11f48 <radio_whiten_iv_set+0x20>)
   11f2a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   11f2e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11f32:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   11f36:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   11f3a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11f3e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   11f42:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   11f46:	4770      	bx	lr
   11f48:	40001000 	.word	0x40001000

00011f4c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   11f4c:	4a0a      	ldr	r2, [pc, #40]	; (11f78 <radio_aa_set+0x2c>)
   11f4e:	2300      	movs	r3, #0
   11f50:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   11f54:	2301      	movs	r3, #1
   11f56:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   11f5a:	78c3      	ldrb	r3, [r0, #3]
   11f5c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   11f60:	7843      	ldrb	r3, [r0, #1]
   11f62:	7881      	ldrb	r1, [r0, #2]
   11f64:	041b      	lsls	r3, r3, #16
   11f66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   11f6a:	7801      	ldrb	r1, [r0, #0]
   11f6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   11f70:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   11f74:	4770      	bx	lr
   11f76:	bf00      	nop
   11f78:	40001000 	.word	0x40001000

00011f7c <radio_pkt_configure>:
	switch (phy) {
   11f7c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   11f80:	2b02      	cmp	r3, #2
{
   11f82:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   11f84:	bf0c      	ite	eq
   11f86:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   11f8a:	2400      	movne	r4, #0
	if (dc) {
   11f8c:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11f8e:	f1c0 0308 	rsb	r3, r0, #8
   11f92:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   11f96:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   11f9a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11f9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11fa2:	4a0b      	ldr	r2, [pc, #44]	; (11fd0 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   11fa4:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   11fa8:	bf48      	it	mi
   11faa:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   11fae:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11fb0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   11fb4:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   11fb8:	4b06      	ldr	r3, [pc, #24]	; (11fd4 <radio_pkt_configure+0x58>)
   11fba:	4003      	ands	r3, r0
   11fbc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   11fc0:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   11fc4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   11fc8:	4319      	orrs	r1, r3
   11fca:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   11fce:	bd10      	pop	{r4, pc}
   11fd0:	40001000 	.word	0x40001000
   11fd4:	fef80000 	.word	0xfef80000

00011fd8 <radio_pkt_rx_set>:
   11fd8:	4b01      	ldr	r3, [pc, #4]	; (11fe0 <radio_pkt_rx_set+0x8>)
   11fda:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   11fde:	4770      	bx	lr
   11fe0:	40001000 	.word	0x40001000

00011fe4 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   11fe4:	4b01      	ldr	r3, [pc, #4]	; (11fec <radio_pkt_tx_set+0x8>)
   11fe6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   11fea:	4770      	bx	lr
   11fec:	40001000 	.word	0x40001000

00011ff0 <radio_tx_ready_delay_get>:
	switch (phy) {
   11ff0:	2802      	cmp	r0, #2
}
   11ff2:	bf0c      	ite	eq
   11ff4:	2028      	moveq	r0, #40	; 0x28
   11ff6:	2029      	movne	r0, #41	; 0x29
   11ff8:	4770      	bx	lr

00011ffa <radio_tx_chain_delay_get>:
}
   11ffa:	2001      	movs	r0, #1
   11ffc:	4770      	bx	lr

00011ffe <radio_rx_ready_delay_get>:
}
   11ffe:	2029      	movs	r0, #41	; 0x29
   12000:	4770      	bx	lr

00012002 <radio_rx_chain_delay_get>:
	switch (phy) {
   12002:	2802      	cmp	r0, #2
}
   12004:	bf0c      	ite	eq
   12006:	2006      	moveq	r0, #6
   12008:	200a      	movne	r0, #10
   1200a:	4770      	bx	lr

0001200c <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   1200c:	4b01      	ldr	r3, [pc, #4]	; (12014 <radio_rx_enable+0x8>)
   1200e:	2201      	movs	r2, #1
   12010:	605a      	str	r2, [r3, #4]
   12012:	4770      	bx	lr
   12014:	40001000 	.word	0x40001000

00012018 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12018:	4b01      	ldr	r3, [pc, #4]	; (12020 <radio_tx_enable+0x8>)
   1201a:	2201      	movs	r2, #1
   1201c:	601a      	str	r2, [r3, #0]
   1201e:	4770      	bx	lr
   12020:	40001000 	.word	0x40001000

00012024 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12024:	4a07      	ldr	r2, [pc, #28]	; (12044 <radio_disable+0x20>)
   12026:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1202a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   1202e:	2301      	movs	r3, #1
   12030:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   12032:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12034:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12038:	2100      	movs	r1, #0
   1203a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   1203e:	6113      	str	r3, [r2, #16]
   12040:	4770      	bx	lr
   12042:	bf00      	nop
   12044:	4001f000 	.word	0x4001f000

00012048 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12048:	4b04      	ldr	r3, [pc, #16]	; (1205c <radio_status_reset+0x14>)
   1204a:	2200      	movs	r2, #0
   1204c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12050:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   12054:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12058:	4770      	bx	lr
   1205a:	bf00      	nop
   1205c:	40001000 	.word	0x40001000

00012060 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12060:	4b03      	ldr	r3, [pc, #12]	; (12070 <radio_is_ready+0x10>)
   12062:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   12066:	3000      	adds	r0, #0
   12068:	bf18      	it	ne
   1206a:	2001      	movne	r0, #1
   1206c:	4770      	bx	lr
   1206e:	bf00      	nop
   12070:	40001000 	.word	0x40001000

00012074 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   12074:	4b03      	ldr	r3, [pc, #12]	; (12084 <radio_is_done+0x10>)
   12076:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1207a:	3000      	adds	r0, #0
   1207c:	bf18      	it	ne
   1207e:	2001      	movne	r0, #1
   12080:	4770      	bx	lr
   12082:	bf00      	nop
   12084:	40001000 	.word	0x40001000

00012088 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   12088:	4b03      	ldr	r3, [pc, #12]	; (12098 <radio_is_idle+0x10>)
   1208a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1208e:	fab0 f080 	clz	r0, r0
   12092:	0940      	lsrs	r0, r0, #5
   12094:	4770      	bx	lr
   12096:	bf00      	nop
   12098:	40001000 	.word	0x40001000

0001209c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1209c:	4b04      	ldr	r3, [pc, #16]	; (120b0 <radio_crc_configure+0x14>)
   1209e:	f240 1203 	movw	r2, #259	; 0x103
   120a2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   120a6:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   120aa:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   120ae:	4770      	bx	lr
   120b0:	40001000 	.word	0x40001000

000120b4 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   120b4:	4b03      	ldr	r3, [pc, #12]	; (120c4 <radio_crc_is_valid+0x10>)
   120b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   120ba:	3000      	adds	r0, #0
   120bc:	bf18      	it	ne
   120be:	2001      	movne	r0, #1
   120c0:	4770      	bx	lr
   120c2:	bf00      	nop
   120c4:	40001000 	.word	0x40001000

000120c8 <radio_pkt_empty_get>:
}
   120c8:	4800      	ldr	r0, [pc, #0]	; (120cc <radio_pkt_empty_get+0x4>)
   120ca:	4770      	bx	lr
   120cc:	200015ac 	.word	0x200015ac

000120d0 <radio_pkt_scratch_get>:
}
   120d0:	4800      	ldr	r0, [pc, #0]	; (120d4 <radio_pkt_scratch_get+0x4>)
   120d2:	4770      	bx	lr
   120d4:	200015b0 	.word	0x200015b0

000120d8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   120d8:	4b04      	ldr	r3, [pc, #16]	; (120ec <radio_switch_complete_and_rx+0x14>)
   120da:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   120dc:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   120de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   120e2:	4602      	mov	r2, r0
   120e4:	4608      	mov	r0, r1
   120e6:	f7ff be47 	b.w	11d78 <sw_switch.isra.9>
   120ea:	bf00      	nop
   120ec:	40001000 	.word	0x40001000

000120f0 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   120f0:	4b03      	ldr	r3, [pc, #12]	; (12100 <radio_switch_complete_and_tx+0x10>)
   120f2:	2103      	movs	r1, #3
   120f4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   120f8:	4601      	mov	r1, r0
   120fa:	2001      	movs	r0, #1
   120fc:	f7ff be3c 	b.w	11d78 <sw_switch.isra.9>
   12100:	40001000 	.word	0x40001000

00012104 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   12104:	4b05      	ldr	r3, [pc, #20]	; (1211c <radio_switch_complete_and_disable+0x18>)
   12106:	2203      	movs	r2, #3
   12108:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   1210c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   12110:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12114:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12118:	4770      	bx	lr
   1211a:	bf00      	nop
   1211c:	40001000 	.word	0x40001000

00012120 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12120:	4a03      	ldr	r2, [pc, #12]	; (12130 <radio_rssi_measure+0x10>)
   12122:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   12126:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1212a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   1212e:	4770      	bx	lr
   12130:	40001000 	.word	0x40001000

00012134 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   12134:	4b01      	ldr	r3, [pc, #4]	; (1213c <radio_rssi_get+0x8>)
   12136:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1213a:	4770      	bx	lr
   1213c:	40001000 	.word	0x40001000

00012140 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12140:	4b02      	ldr	r3, [pc, #8]	; (1214c <radio_rssi_status_reset+0xc>)
   12142:	2200      	movs	r2, #0
   12144:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   12148:	4770      	bx	lr
   1214a:	bf00      	nop
   1214c:	40001000 	.word	0x40001000

00012150 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12150:	4b03      	ldr	r3, [pc, #12]	; (12160 <radio_rssi_is_ready+0x10>)
   12152:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   12156:	3000      	adds	r0, #0
   12158:	bf18      	it	ne
   1215a:	2001      	movne	r0, #1
   1215c:	4770      	bx	lr
   1215e:	bf00      	nop
   12160:	40001000 	.word	0x40001000

00012164 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   12164:	b530      	push	{r4, r5, lr}
   12166:	2400      	movs	r4, #0
   12168:	00a3      	lsls	r3, r4, #2
   1216a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1216e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   12172:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   12174:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   12178:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   1217a:	8895      	ldrh	r5, [r2, #4]
   1217c:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   12180:	2c08      	cmp	r4, #8
		bdaddr += 6;
   12182:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   12186:	d1ef      	bne.n	12168 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   12188:	4b02      	ldr	r3, [pc, #8]	; (12194 <radio_filter_configure+0x30>)
   1218a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1218e:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   12192:	bd30      	pop	{r4, r5, pc}
   12194:	40001000 	.word	0x40001000

00012198 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   12198:	4a03      	ldr	r2, [pc, #12]	; (121a8 <radio_filter_disable+0x10>)
   1219a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1219e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   121a2:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   121a6:	4770      	bx	lr
   121a8:	40001000 	.word	0x40001000

000121ac <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   121ac:	4b02      	ldr	r3, [pc, #8]	; (121b8 <radio_filter_status_reset+0xc>)
   121ae:	2200      	movs	r2, #0
   121b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   121b4:	4770      	bx	lr
   121b6:	bf00      	nop
   121b8:	40001000 	.word	0x40001000

000121bc <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   121bc:	4b03      	ldr	r3, [pc, #12]	; (121cc <radio_filter_has_match+0x10>)
   121be:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   121c2:	3000      	adds	r0, #0
   121c4:	bf18      	it	ne
   121c6:	2001      	movne	r0, #1
   121c8:	4770      	bx	lr
   121ca:	bf00      	nop
   121cc:	40001000 	.word	0x40001000

000121d0 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   121d0:	4b01      	ldr	r3, [pc, #4]	; (121d8 <radio_filter_match_get+0x8>)
   121d2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   121d6:	4770      	bx	lr
   121d8:	40001000 	.word	0x40001000

000121dc <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   121dc:	4b04      	ldr	r3, [pc, #16]	; (121f0 <radio_bc_configure+0x14>)
   121de:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   121e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   121e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   121ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   121ee:	4770      	bx	lr
   121f0:	40001000 	.word	0x40001000

000121f4 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   121f4:	4b05      	ldr	r3, [pc, #20]	; (1220c <radio_tmr_status_reset+0x18>)
   121f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   121fa:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   121fe:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   12202:	227f      	movs	r2, #127	; 0x7f
   12204:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12208:	4770      	bx	lr
   1220a:	bf00      	nop
   1220c:	4000b000 	.word	0x4000b000

00012210 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12210:	4b03      	ldr	r3, [pc, #12]	; (12220 <radio_tmr_tifs_set+0x10>)
   12212:	4a04      	ldr	r2, [pc, #16]	; (12224 <radio_tmr_tifs_set+0x14>)
   12214:	781b      	ldrb	r3, [r3, #0]
   12216:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1221a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1221e:	4770      	bx	lr
   12220:	200016bc 	.word	0x200016bc
   12224:	40009000 	.word	0x40009000

00012228 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1222c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12230:	4c30      	ldr	r4, [pc, #192]	; (122f4 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   12232:	4d31      	ldr	r5, [pc, #196]	; (122f8 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12234:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12238:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   1223a:	bf88      	it	hi
   1223c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   12240:	4b2e      	ldr	r3, [pc, #184]	; (122fc <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   12242:	4c2f      	ldr	r4, [pc, #188]	; (12300 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   12244:	bf82      	ittt	hi
   12246:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1224a:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   1224e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   12252:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   12254:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   12258:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1225a:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   1225c:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   12260:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   12262:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   12266:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1226a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   1226e:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   12272:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   12276:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1227a:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   1227e:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   12282:	4920      	ldr	r1, [pc, #128]	; (12304 <radio_tmr_start+0xdc>)
   12284:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   12288:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   1228c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   12290:	f7ff fd5a 	bl	11d48 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   12294:	4b1c      	ldr	r3, [pc, #112]	; (12308 <radio_tmr_start+0xe0>)
   12296:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   12298:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1229c:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   122a0:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   122a4:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   122a6:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   122aa:	3b74      	subs	r3, #116	; 0x74
   122ac:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   122b0:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   122b4:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   122b8:	f503 739a 	add.w	r3, r3, #308	; 0x134
   122bc:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   122c0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   122c4:	33c4      	adds	r3, #196	; 0xc4
   122c6:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   122ca:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   122ce:	3bc0      	subs	r3, #192	; 0xc0
   122d0:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   122d4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   122d8:	33c8      	adds	r3, #200	; 0xc8
   122da:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   122de:	f44f 6310 	mov.w	r3, #2304	; 0x900
   122e2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   122e6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   122ea:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   122ee:	4628      	mov	r0, r5
   122f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122f4:	7ff0bdbf 	.word	0x7ff0bdbf
   122f8:	000f4240 	.word	0x000f4240
   122fc:	40008000 	.word	0x40008000
   12300:	4000b000 	.word	0x4000b000
   12304:	4000b148 	.word	0x4000b148
   12308:	40009000 	.word	0x40009000

0001230c <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   1230c:	4a04      	ldr	r2, [pc, #16]	; (12320 <radio_tmr_stop+0x14>)
   1230e:	2301      	movs	r3, #1
   12310:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   12312:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   12314:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   12318:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   1231a:	6113      	str	r3, [r2, #16]
   1231c:	4770      	bx	lr
   1231e:	bf00      	nop
   12320:	40008000 	.word	0x40008000

00012324 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   12324:	4b0c      	ldr	r3, [pc, #48]	; (12358 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12326:	4a0d      	ldr	r2, [pc, #52]	; (1235c <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   12328:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1232c:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   12330:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12334:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12338:	3240      	adds	r2, #64	; 0x40
   1233a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   1233e:	f502 7280 	add.w	r2, r2, #256	; 0x100
   12342:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   12346:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   1234a:	3a34      	subs	r2, #52	; 0x34
   1234c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   12350:	2218      	movs	r2, #24
   12352:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12356:	4770      	bx	lr
   12358:	40008000 	.word	0x40008000
   1235c:	40001104 	.word	0x40001104

00012360 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   12360:	4b0b      	ldr	r3, [pc, #44]	; (12390 <radio_tmr_aa_capture+0x30>)
   12362:	4a0c      	ldr	r2, [pc, #48]	; (12394 <radio_tmr_aa_capture+0x34>)
   12364:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   12368:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1236c:	3240      	adds	r2, #64	; 0x40
   1236e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12372:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   12376:	3a3c      	subs	r2, #60	; 0x3c
   12378:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   1237c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12380:	3240      	adds	r2, #64	; 0x40
   12382:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   12386:	220c      	movs	r2, #12
   12388:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1238c:	4770      	bx	lr
   1238e:	bf00      	nop
   12390:	4001f000 	.word	0x4001f000
   12394:	40001100 	.word	0x40001100

00012398 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12398:	4b01      	ldr	r3, [pc, #4]	; (123a0 <radio_tmr_aa_get+0x8>)
   1239a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1239e:	4770      	bx	lr
   123a0:	40008000 	.word	0x40008000

000123a4 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   123a4:	4b01      	ldr	r3, [pc, #4]	; (123ac <radio_tmr_aa_save+0x8>)
   123a6:	6018      	str	r0, [r3, #0]
   123a8:	4770      	bx	lr
   123aa:	bf00      	nop
   123ac:	200016b4 	.word	0x200016b4

000123b0 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   123b0:	4b01      	ldr	r3, [pc, #4]	; (123b8 <radio_tmr_aa_restore+0x8>)
   123b2:	6818      	ldr	r0, [r3, #0]
   123b4:	4770      	bx	lr
   123b6:	bf00      	nop
   123b8:	200016b4 	.word	0x200016b4

000123bc <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   123bc:	4b01      	ldr	r3, [pc, #4]	; (123c4 <radio_tmr_ready_get+0x8>)
   123be:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   123c2:	4770      	bx	lr
   123c4:	40008000 	.word	0x40008000

000123c8 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   123c8:	4b06      	ldr	r3, [pc, #24]	; (123e4 <radio_tmr_end_capture+0x1c>)
   123ca:	4a07      	ldr	r2, [pc, #28]	; (123e8 <radio_tmr_end_capture+0x20>)
   123cc:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   123d0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   123d4:	323c      	adds	r2, #60	; 0x3c
   123d6:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   123da:	2220      	movs	r2, #32
   123dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   123e0:	4770      	bx	lr
   123e2:	bf00      	nop
   123e4:	4001f000 	.word	0x4001f000
   123e8:	4000110c 	.word	0x4000110c

000123ec <radio_tmr_end_get>:
   123ec:	4b01      	ldr	r3, [pc, #4]	; (123f4 <radio_tmr_end_get+0x8>)
   123ee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   123f2:	4770      	bx	lr
   123f4:	40008000 	.word	0x40008000

000123f8 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   123f8:	4b01      	ldr	r3, [pc, #4]	; (12400 <radio_tmr_tifs_base_get+0x8>)
   123fa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   123fe:	4770      	bx	lr
   12400:	40008000 	.word	0x40008000

00012404 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12404:	4b16      	ldr	r3, [pc, #88]	; (12460 <radio_ccm_rx_pkt_set+0x5c>)
{
   12406:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12408:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1240a:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1240c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12410:	4e14      	ldr	r6, [pc, #80]	; (12464 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12412:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12416:	4d14      	ldr	r5, [pc, #80]	; (12468 <radio_ccm_rx_pkt_set+0x64>)
   12418:	2902      	cmp	r1, #2
   1241a:	bf0c      	ite	eq
   1241c:	4629      	moveq	r1, r5
   1241e:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   12420:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12424:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   12428:	4810      	ldr	r0, [pc, #64]	; (1246c <radio_ccm_rx_pkt_set+0x68>)
   1242a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1242e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12432:	4a0f      	ldr	r2, [pc, #60]	; (12470 <radio_ccm_rx_pkt_set+0x6c>)
   12434:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12438:	490e      	ldr	r1, [pc, #56]	; (12474 <radio_ccm_rx_pkt_set+0x70>)
   1243a:	4a0f      	ldr	r2, [pc, #60]	; (12478 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   1243c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12440:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12444:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12448:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   1244c:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   12450:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   12454:	2140      	movs	r1, #64	; 0x40
   12456:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   1245a:	2201      	movs	r2, #1
   1245c:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1245e:	bd70      	pop	{r4, r5, r6, pc}
   12460:	4000f000 	.word	0x4000f000
   12464:	01000001 	.word	0x01000001
   12468:	01010001 	.word	0x01010001
   1246c:	200015b0 	.word	0x200015b0
   12470:	200014a0 	.word	0x200014a0
   12474:	40001104 	.word	0x40001104
   12478:	4001f000 	.word	0x4001f000

0001247c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1247c:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1247e:	4b0e      	ldr	r3, [pc, #56]	; (124b8 <radio_ccm_tx_pkt_set+0x3c>)
   12480:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12482:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12484:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12488:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1248c:	4c0b      	ldr	r4, [pc, #44]	; (124bc <radio_ccm_tx_pkt_set+0x40>)
   1248e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12492:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   12496:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1249a:	4809      	ldr	r0, [pc, #36]	; (124c0 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1249c:	4909      	ldr	r1, [pc, #36]	; (124c4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1249e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   124a2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   124a6:	2101      	movs	r1, #1
   124a8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   124ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   124b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   124b4:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   124b6:	bd10      	pop	{r4, pc}
   124b8:	4000f000 	.word	0x4000f000
   124bc:	01010000 	.word	0x01010000
   124c0:	200015b0 	.word	0x200015b0
   124c4:	200014a0 	.word	0x200014a0

000124c8 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   124c8:	4b0c      	ldr	r3, [pc, #48]	; (124fc <radio_ccm_is_done+0x34>)
   124ca:	2202      	movs	r2, #2
   124cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   124d0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   124d4:	b16a      	cbz	r2, 124f2 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   124d6:	2202      	movs	r2, #2
   124d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   124dc:	4a08      	ldr	r2, [pc, #32]	; (12500 <radio_ccm_is_done+0x38>)
   124de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   124e2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   124e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   124ea:	fab0 f080 	clz	r0, r0
   124ee:	0940      	lsrs	r0, r0, #5
   124f0:	4770      	bx	lr
		__WFE();
   124f2:	bf20      	wfe
		__SEV();
   124f4:	bf40      	sev
		__WFE();
   124f6:	bf20      	wfe
   124f8:	e7ea      	b.n	124d0 <radio_ccm_is_done+0x8>
   124fa:	bf00      	nop
   124fc:	4000f000 	.word	0x4000f000
   12500:	e000e100 	.word	0xe000e100

00012504 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   12504:	4b03      	ldr	r3, [pc, #12]	; (12514 <radio_ccm_mic_is_valid+0x10>)
   12506:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1250a:	3000      	adds	r0, #0
   1250c:	bf18      	it	ne
   1250e:	2001      	movne	r0, #1
   12510:	4770      	bx	lr
   12512:	bf00      	nop
   12514:	4000f000 	.word	0x4000f000

00012518 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   12518:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1251a:	4c13      	ldr	r4, [pc, #76]	; (12568 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1251c:	4d13      	ldr	r5, [pc, #76]	; (1256c <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1251e:	2303      	movs	r3, #3
   12520:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   12524:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   12528:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   1252c:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   12530:	3b01      	subs	r3, #1
   12532:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   12536:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   12538:	4b0d      	ldr	r3, [pc, #52]	; (12570 <radio_ar_configure+0x58>)
   1253a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1253e:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   12540:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   12544:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12548:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   1254c:	f7ff fe46 	bl	121dc <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12550:	4b08      	ldr	r3, [pc, #32]	; (12574 <radio_ar_configure+0x5c>)
   12552:	4a09      	ldr	r2, [pc, #36]	; (12578 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12554:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12558:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   1255c:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   1255e:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12562:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12566:	bd38      	pop	{r3, r4, r5, pc}
   12568:	4000f000 	.word	0x4000f000
   1256c:	40001000 	.word	0x40001000
   12570:	2000149c 	.word	0x2000149c
   12574:	4001f000 	.word	0x4001f000
   12578:	40001128 	.word	0x40001128

0001257c <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1257c:	4b01      	ldr	r3, [pc, #4]	; (12584 <radio_ar_match_get+0x8>)
   1257e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12582:	4770      	bx	lr
   12584:	4000f000 	.word	0x4000f000

00012588 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12588:	4a04      	ldr	r2, [pc, #16]	; (1259c <radio_ar_status_reset+0x14>)
   1258a:	2300      	movs	r3, #0
   1258c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12590:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   12594:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12598:	4770      	bx	lr
   1259a:	bf00      	nop
   1259c:	40001000 	.word	0x40001000

000125a0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   125a0:	4b08      	ldr	r3, [pc, #32]	; (125c4 <radio_ar_has_match+0x24>)
   125a2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   125a6:	b160      	cbz	r0, 125c2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   125a8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   125ac:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   125b0:	b138      	cbz	r0, 125c2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   125b2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   125b6:	b120      	cbz	r0, 125c2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   125b8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   125bc:	fab0 f080 	clz	r0, r0
   125c0:	0940      	lsrs	r0, r0, #5
}
   125c2:	4770      	bx	lr
   125c4:	40001000 	.word	0x40001000

000125c8 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   125c8:	2901      	cmp	r1, #1
{
   125ca:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   125cc:	d00e      	beq.n	125ec <mayfly_enable_cb+0x24>
   125ce:	4b0d      	ldr	r3, [pc, #52]	; (12604 <mayfly_enable_cb+0x3c>)
   125d0:	9301      	str	r3, [sp, #4]
   125d2:	9300      	str	r3, [sp, #0]
   125d4:	4a0c      	ldr	r2, [pc, #48]	; (12608 <mayfly_enable_cb+0x40>)
   125d6:	4b0d      	ldr	r3, [pc, #52]	; (1260c <mayfly_enable_cb+0x44>)
   125d8:	490d      	ldr	r1, [pc, #52]	; (12610 <mayfly_enable_cb+0x48>)
   125da:	480e      	ldr	r0, [pc, #56]	; (12614 <mayfly_enable_cb+0x4c>)
   125dc:	f7ee fcd6 	bl	f8c <printk>
   125e0:	4040      	eors	r0, r0
   125e2:	f380 8811 	msr	BASEPRI, r0
   125e6:	f04f 0004 	mov.w	r0, #4
   125ea:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   125ec:	2018      	movs	r0, #24
	if (enable) {
   125ee:	b122      	cbz	r2, 125fa <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   125f0:	b003      	add	sp, #12
   125f2:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   125f6:	f7ef b92f 	b.w	1858 <_arch_irq_enable>
}
   125fa:	b003      	add	sp, #12
   125fc:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   12600:	f7ef b93a 	b.w	1878 <_arch_irq_disable>
   12604:	000145f1 	.word	0x000145f1
   12608:	00015373 	.word	0x00015373
   1260c:	00017cd4 	.word	0x00017cd4
   12610:	000153c2 	.word	0x000153c2
   12614:	00017d03 	.word	0x00017d03

00012618 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   12618:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   1261a:	b181      	cbz	r1, 1263e <mayfly_is_enabled+0x26>
   1261c:	2901      	cmp	r1, #1
   1261e:	d014      	beq.n	1264a <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   12620:	4b0b      	ldr	r3, [pc, #44]	; (12650 <mayfly_is_enabled+0x38>)
   12622:	9301      	str	r3, [sp, #4]
   12624:	9300      	str	r3, [sp, #0]
   12626:	4a0b      	ldr	r2, [pc, #44]	; (12654 <mayfly_is_enabled+0x3c>)
   12628:	4b0b      	ldr	r3, [pc, #44]	; (12658 <mayfly_is_enabled+0x40>)
   1262a:	490c      	ldr	r1, [pc, #48]	; (1265c <mayfly_is_enabled+0x44>)
   1262c:	480c      	ldr	r0, [pc, #48]	; (12660 <mayfly_is_enabled+0x48>)
   1262e:	f7ee fcad 	bl	f8c <printk>
   12632:	4040      	eors	r0, r0
   12634:	f380 8811 	msr	BASEPRI, r0
   12638:	f04f 0004 	mov.w	r0, #4
   1263c:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1263e:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   12640:	b003      	add	sp, #12
   12642:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   12646:	f7ef b92b 	b.w	18a0 <_arch_irq_is_enabled>
   1264a:	2018      	movs	r0, #24
   1264c:	e7f8      	b.n	12640 <mayfly_is_enabled+0x28>
   1264e:	bf00      	nop
   12650:	000145f1 	.word	0x000145f1
   12654:	00015373 	.word	0x00015373
   12658:	00017ce5 	.word	0x00017ce5
   1265c:	000153c2 	.word	0x000153c2
   12660:	00015312 	.word	0x00015312

00012664 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12664:	4288      	cmp	r0, r1
   12666:	d00a      	beq.n	1267e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   12668:	b918      	cbnz	r0, 12672 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1266a:	1e4b      	subs	r3, r1, #1
   1266c:	4258      	negs	r0, r3
   1266e:	4158      	adcs	r0, r3
   12670:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12672:	2801      	cmp	r0, #1
   12674:	d105      	bne.n	12682 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   12676:	fab1 f081 	clz	r0, r1
   1267a:	0940      	lsrs	r0, r0, #5
   1267c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1267e:	2001      	movs	r0, #1
   12680:	4770      	bx	lr
   12682:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   12684:	4770      	bx	lr
	...

00012688 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   12688:	b507      	push	{r0, r1, r2, lr}
   1268a:	4b0e      	ldr	r3, [pc, #56]	; (126c4 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   1268c:	b181      	cbz	r1, 126b0 <mayfly_pend+0x28>
   1268e:	2901      	cmp	r1, #1
   12690:	d015      	beq.n	126be <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   12692:	4b0d      	ldr	r3, [pc, #52]	; (126c8 <mayfly_pend+0x40>)
   12694:	9301      	str	r3, [sp, #4]
   12696:	9300      	str	r3, [sp, #0]
   12698:	4a0c      	ldr	r2, [pc, #48]	; (126cc <mayfly_pend+0x44>)
   1269a:	4b0d      	ldr	r3, [pc, #52]	; (126d0 <mayfly_pend+0x48>)
   1269c:	490d      	ldr	r1, [pc, #52]	; (126d4 <mayfly_pend+0x4c>)
   1269e:	480e      	ldr	r0, [pc, #56]	; (126d8 <mayfly_pend+0x50>)
   126a0:	f7ee fc74 	bl	f8c <printk>
   126a4:	4040      	eors	r0, r0
   126a6:	f380 8811 	msr	BASEPRI, r0
   126aa:	f04f 0004 	mov.w	r0, #4
   126ae:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   126b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   126b8:	b003      	add	sp, #12
   126ba:	f85d fb04 	ldr.w	pc, [sp], #4
   126be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   126c2:	e7f7      	b.n	126b4 <mayfly_pend+0x2c>
   126c4:	e000e100 	.word	0xe000e100
   126c8:	000145f1 	.word	0x000145f1
   126cc:	00015373 	.word	0x00015373
   126d0:	00017cf7 	.word	0x00017cf7
   126d4:	000153c2 	.word	0x000153c2
   126d8:	00015312 	.word	0x00015312

000126dc <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   126dc:	2803      	cmp	r0, #3
{
   126de:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   126e0:	d90e      	bls.n	12700 <hal_ticker_instance0_caller_id_get+0x24>
   126e2:	4b0e      	ldr	r3, [pc, #56]	; (1271c <hal_ticker_instance0_caller_id_get+0x40>)
   126e4:	9301      	str	r3, [sp, #4]
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	4a0d      	ldr	r2, [pc, #52]	; (12720 <hal_ticker_instance0_caller_id_get+0x44>)
   126ea:	4b0e      	ldr	r3, [pc, #56]	; (12724 <hal_ticker_instance0_caller_id_get+0x48>)
   126ec:	490e      	ldr	r1, [pc, #56]	; (12728 <hal_ticker_instance0_caller_id_get+0x4c>)
   126ee:	480f      	ldr	r0, [pc, #60]	; (1272c <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   126f0:	f7ee fc4c 	bl	f8c <printk>
   126f4:	4040      	eors	r0, r0
   126f6:	f380 8811 	msr	BASEPRI, r0
   126fa:	f04f 0004 	mov.w	r0, #4
   126fe:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   12700:	4b0b      	ldr	r3, [pc, #44]	; (12730 <hal_ticker_instance0_caller_id_get+0x54>)
   12702:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12704:	b938      	cbnz	r0, 12716 <hal_ticker_instance0_caller_id_get+0x3a>
   12706:	4b05      	ldr	r3, [pc, #20]	; (1271c <hal_ticker_instance0_caller_id_get+0x40>)
   12708:	9301      	str	r3, [sp, #4]
   1270a:	9300      	str	r3, [sp, #0]
   1270c:	4a04      	ldr	r2, [pc, #16]	; (12720 <hal_ticker_instance0_caller_id_get+0x44>)
   1270e:	4b05      	ldr	r3, [pc, #20]	; (12724 <hal_ticker_instance0_caller_id_get+0x48>)
   12710:	4905      	ldr	r1, [pc, #20]	; (12728 <hal_ticker_instance0_caller_id_get+0x4c>)
   12712:	4808      	ldr	r0, [pc, #32]	; (12734 <hal_ticker_instance0_caller_id_get+0x58>)
   12714:	e7ec      	b.n	126f0 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   12716:	b003      	add	sp, #12
   12718:	f85d fb04 	ldr.w	pc, [sp], #4
   1271c:	000145f1 	.word	0x000145f1
   12720:	00015373 	.word	0x00015373
   12724:	00017d33 	.word	0x00017d33
   12728:	000153c2 	.word	0x000153c2
   1272c:	00017d75 	.word	0x00017d75
   12730:	00017d71 	.word	0x00017d71
   12734:	00017db6 	.word	0x00017db6

00012738 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   12738:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1273a:	3802      	subs	r0, #2
{
   1273c:	461c      	mov	r4, r3
	switch (caller_id) {
   1273e:	2803      	cmp	r0, #3
   12740:	d818      	bhi.n	12774 <hal_ticker_instance0_sched+0x3c>
   12742:	e8df f000 	tbb	[pc, r0]
   12746:	0d02      	.short	0x0d02
   12748:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1274a:	2903      	cmp	r1, #3
   1274c:	d112      	bne.n	12774 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1274e:	4b19      	ldr	r3, [pc, #100]	; (127b4 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12750:	2100      	movs	r1, #0
			m.param = instance;
   12752:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12754:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   12756:	b002      	add	sp, #8
   12758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1275c:	f7f4 bb34 	b.w	6dc8 <mayfly_enqueue>
		switch (callee_id) {
   12760:	2904      	cmp	r1, #4
   12762:	d107      	bne.n	12774 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   12764:	4b14      	ldr	r3, [pc, #80]	; (127b8 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12766:	2101      	movs	r1, #1
			m.param = instance;
   12768:	609c      	str	r4, [r3, #8]
   1276a:	e7f3      	b.n	12754 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   1276c:	2903      	cmp	r1, #3
   1276e:	d010      	beq.n	12792 <hal_ticker_instance0_sched+0x5a>
   12770:	2904      	cmp	r1, #4
   12772:	d013      	beq.n	1279c <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   12774:	4b11      	ldr	r3, [pc, #68]	; (127bc <hal_ticker_instance0_sched+0x84>)
   12776:	9301      	str	r3, [sp, #4]
   12778:	9300      	str	r3, [sp, #0]
   1277a:	4a11      	ldr	r2, [pc, #68]	; (127c0 <hal_ticker_instance0_sched+0x88>)
   1277c:	4b11      	ldr	r3, [pc, #68]	; (127c4 <hal_ticker_instance0_sched+0x8c>)
   1277e:	4912      	ldr	r1, [pc, #72]	; (127c8 <hal_ticker_instance0_sched+0x90>)
   12780:	4812      	ldr	r0, [pc, #72]	; (127cc <hal_ticker_instance0_sched+0x94>)
   12782:	f7ee fc03 	bl	f8c <printk>
   12786:	4040      	eors	r0, r0
   12788:	f380 8811 	msr	BASEPRI, r0
   1278c:	f04f 0004 	mov.w	r0, #4
   12790:	df02      	svc	2
			m.param = instance;
   12792:	4b0f      	ldr	r3, [pc, #60]	; (127d0 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12794:	2100      	movs	r1, #0
			m.param = instance;
   12796:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12798:	2001      	movs	r0, #1
   1279a:	e7dc      	b.n	12756 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   1279c:	4b0d      	ldr	r3, [pc, #52]	; (127d4 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1279e:	2101      	movs	r1, #1
			m.param = instance;
   127a0:	609c      	str	r4, [r3, #8]
   127a2:	e7f9      	b.n	12798 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   127a4:	2904      	cmp	r1, #4
   127a6:	d1e5      	bne.n	12774 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   127a8:	4b0b      	ldr	r3, [pc, #44]	; (127d8 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   127aa:	2101      	movs	r1, #1
			m.param = instance;
   127ac:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   127ae:	2003      	movs	r0, #3
   127b0:	e7d1      	b.n	12756 <hal_ticker_instance0_sched+0x1e>
   127b2:	bf00      	nop
   127b4:	20003e18 	.word	0x20003e18
   127b8:	20003e28 	.word	0x20003e28
   127bc:	000145f1 	.word	0x000145f1
   127c0:	00015373 	.word	0x00015373
   127c4:	00017d56 	.word	0x00017d56
   127c8:	000153c2 	.word	0x000153c2
   127cc:	00015312 	.word	0x00015312
   127d0:	20003e38 	.word	0x20003e38
   127d4:	20003e48 	.word	0x20003e48
   127d8:	20003e58 	.word	0x20003e58

000127dc <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   127dc:	4601      	mov	r1, r0
   127de:	2000      	movs	r0, #0
   127e0:	f7ff ba62 	b.w	11ca8 <cntr_cmp_set>

000127e4 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   127e4:	4770      	bx	lr
	...

000127e8 <net_buf_pool_get>:
}
   127e8:	4b01      	ldr	r3, [pc, #4]	; (127f0 <net_buf_pool_get+0x8>)
   127ea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   127ee:	4770      	bx	lr
   127f0:	20003f2c 	.word	0x20003f2c

000127f4 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   127f4:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   127f6:	4b04      	ldr	r3, [pc, #16]	; (12808 <net_buf_id+0x14>)
   127f8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   127fc:	69db      	ldr	r3, [r3, #28]
   127fe:	1ac0      	subs	r0, r0, r3
}
   12800:	4b02      	ldr	r3, [pc, #8]	; (1280c <net_buf_id+0x18>)
	return buf - pool->__bufs;
   12802:	10c0      	asrs	r0, r0, #3
}
   12804:	4358      	muls	r0, r3
   12806:	4770      	bx	lr
   12808:	20003f2c 	.word	0x20003f2c
   1280c:	aaaaaaab 	.word	0xaaaaaaab

00012810 <fixed_data_alloc>:
{
   12810:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12812:	4b09      	ldr	r3, [pc, #36]	; (12838 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12814:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12816:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   1281a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1281c:	699b      	ldr	r3, [r3, #24]
   1281e:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   12820:	6823      	ldr	r3, [r4, #0]
   12822:	429a      	cmp	r2, r3
   12824:	bf94      	ite	ls
   12826:	600a      	strls	r2, [r1, #0]
   12828:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1282a:	f7ff ffe3 	bl	127f4 <net_buf_id>
   1282e:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   12832:	fb02 3000 	mla	r0, r2, r0, r3
   12836:	bd10      	pop	{r4, pc}
   12838:	20003f2c 	.word	0x20003f2c

0001283c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   1283c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12840:	4605      	mov	r5, r0
   12842:	9101      	str	r1, [sp, #4]
   12844:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12846:	f001 f961 	bl	13b0c <_impl_k_uptime_get_32>
   1284a:	4607      	mov	r7, r0
	__asm__ volatile(
   1284c:	f04f 0320 	mov.w	r3, #32
   12850:	f3ef 8811 	mrs	r8, BASEPRI
   12854:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12858:	8a6b      	ldrh	r3, [r5, #18]
   1285a:	2b00      	cmp	r3, #0
   1285c:	d03d      	beq.n	128da <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1285e:	8a2a      	ldrh	r2, [r5, #16]
   12860:	429a      	cmp	r2, r3
   12862:	d92a      	bls.n	128ba <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12864:	2100      	movs	r1, #0
   12866:	4628      	mov	r0, r5
   12868:	f000 fe6a 	bl	13540 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1286c:	b328      	cbz	r0, 128ba <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1286e:	f388 8811 	msr	BASEPRI, r8
   12872:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   12874:	9b01      	ldr	r3, [sp, #4]
   12876:	2b00      	cmp	r3, #0
   12878:	d03c      	beq.n	128f4 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   1287a:	1c73      	adds	r3, r6, #1
   1287c:	2b01      	cmp	r3, #1
   1287e:	d906      	bls.n	1288e <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12880:	f001 f944 	bl	13b0c <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   12884:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   12886:	42b0      	cmp	r0, r6
   12888:	bf94      	ite	ls
   1288a:	1a36      	subls	r6, r6, r0
   1288c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1288e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   12890:	4f1e      	ldr	r7, [pc, #120]	; (1290c <net_buf_alloc_len+0xd0>)
   12892:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   12896:	4632      	mov	r2, r6
   12898:	699b      	ldr	r3, [r3, #24]
   1289a:	681b      	ldr	r3, [r3, #0]
   1289c:	a901      	add	r1, sp, #4
   1289e:	681b      	ldr	r3, [r3, #0]
   128a0:	4620      	mov	r0, r4
   128a2:	4798      	blx	r3
   128a4:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   128a6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   128a8:	bb28      	cbnz	r0, 128f6 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   128aa:	79a0      	ldrb	r0, [r4, #6]
   128ac:	4621      	mov	r1, r4
   128ae:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   128b2:	f000 fe26 	bl	13502 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   128b6:	462c      	mov	r4, r5
   128b8:	e018      	b.n	128ec <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   128ba:	8a68      	ldrh	r0, [r5, #18]
   128bc:	1e43      	subs	r3, r0, #1
   128be:	826b      	strh	r3, [r5, #18]
   128c0:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   128c4:	8a2c      	ldrh	r4, [r5, #16]
   128c6:	1a24      	subs	r4, r4, r0
   128c8:	69e8      	ldr	r0, [r5, #28]
   128ca:	2318      	movs	r3, #24
   128cc:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   128d0:	4b0e      	ldr	r3, [pc, #56]	; (1290c <net_buf_alloc_len+0xd0>)
   128d2:	1aed      	subs	r5, r5, r3
   128d4:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   128d6:	71a5      	strb	r5, [r4, #6]
		goto success;
   128d8:	e7cc      	b.n	12874 <net_buf_alloc_len+0x38>
   128da:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   128de:	4631      	mov	r1, r6
   128e0:	4628      	mov	r0, r5
   128e2:	f000 fe2d 	bl	13540 <_impl_k_queue_get>
		return NULL;
   128e6:	4604      	mov	r4, r0
	if (!buf) {
   128e8:	2800      	cmp	r0, #0
   128ea:	d1c3      	bne.n	12874 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   128ec:	4620      	mov	r0, r4
   128ee:	b002      	add	sp, #8
   128f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   128f4:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   128f6:	2301      	movs	r3, #1
   128f8:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   128fa:	2300      	movs	r3, #0
	buf->frags = NULL;
   128fc:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   128fe:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   12900:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   12902:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   12904:	6923      	ldr	r3, [r4, #16]
   12906:	81e2      	strh	r2, [r4, #14]
   12908:	60a3      	str	r3, [r4, #8]
	return buf;
   1290a:	e7ef      	b.n	128ec <net_buf_alloc_len+0xb0>
   1290c:	20003f2c 	.word	0x20003f2c

00012910 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12910:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   12912:	685b      	ldr	r3, [r3, #4]
   12914:	460a      	mov	r2, r1
   12916:	6819      	ldr	r1, [r3, #0]
   12918:	f7ff bf90 	b.w	1283c <net_buf_alloc_len>

0001291c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1291c:	b570      	push	{r4, r5, r6, lr}
   1291e:	4606      	mov	r6, r0
   12920:	f000 fe0e 	bl	13540 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   12924:	4605      	mov	r5, r0
   12926:	b128      	cbz	r0, 12934 <net_buf_get+0x18>
   12928:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1292a:	7963      	ldrb	r3, [r4, #5]
   1292c:	f013 0301 	ands.w	r3, r3, #1
   12930:	d102      	bne.n	12938 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   12932:	6023      	str	r3, [r4, #0]

	return buf;
}
   12934:	4628      	mov	r0, r5
   12936:	bd70      	pop	{r4, r5, r6, pc}
   12938:	2100      	movs	r1, #0
   1293a:	4630      	mov	r0, r6
   1293c:	f000 fe00 	bl	13540 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   12940:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   12942:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   12944:	f023 0301 	bic.w	r3, r3, #1
   12948:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1294a:	4604      	mov	r4, r0
   1294c:	e7ed      	b.n	1292a <net_buf_get+0xe>

0001294e <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1294e:	6883      	ldr	r3, [r0, #8]
   12950:	4419      	add	r1, r3
   12952:	6001      	str	r1, [r0, #0]
   12954:	4770      	bx	lr

00012956 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   12956:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   12958:	460a      	mov	r2, r1
   1295a:	6814      	ldr	r4, [r2, #0]
   1295c:	b914      	cbnz	r4, 12964 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   1295e:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   12960:	f000 bdd4 	b.w	1350c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   12964:	7953      	ldrb	r3, [r2, #5]
   12966:	f043 0301 	orr.w	r3, r3, #1
   1296a:	7153      	strb	r3, [r2, #5]
   1296c:	4622      	mov	r2, r4
   1296e:	e7f4      	b.n	1295a <net_buf_put+0x4>

00012970 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12972:	4d15      	ldr	r5, [pc, #84]	; (129c8 <net_buf_unref+0x58>)
   12974:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12976:	2600      	movs	r6, #0
	while (buf) {
   12978:	b904      	cbnz	r4, 1297c <net_buf_unref+0xc>
   1297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   1297c:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1297e:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   12980:	3b01      	subs	r3, #1
   12982:	b2db      	uxtb	r3, r3
   12984:	7123      	strb	r3, [r4, #4]
   12986:	2b00      	cmp	r3, #0
   12988:	d1f7      	bne.n	1297a <net_buf_unref+0xa>
		if (buf->__buf) {
   1298a:	6921      	ldr	r1, [r4, #16]
   1298c:	b159      	cbz	r1, 129a6 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1298e:	7963      	ldrb	r3, [r4, #5]
   12990:	079b      	lsls	r3, r3, #30
   12992:	d407      	bmi.n	129a4 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12994:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   12996:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1299a:	4620      	mov	r0, r4
   1299c:	699b      	ldr	r3, [r3, #24]
   1299e:	681b      	ldr	r3, [r3, #0]
   129a0:	689b      	ldr	r3, [r3, #8]
   129a2:	4798      	blx	r3
			buf->__buf = NULL;
   129a4:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   129a6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   129a8:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   129aa:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   129ae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   129b0:	695b      	ldr	r3, [r3, #20]
   129b2:	b11b      	cbz	r3, 129bc <net_buf_unref+0x4c>
			pool->destroy(buf);
   129b4:	4620      	mov	r0, r4
   129b6:	4798      	blx	r3
{
   129b8:	463c      	mov	r4, r7
   129ba:	e7dd      	b.n	12978 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   129bc:	4621      	mov	r1, r4
   129be:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   129c2:	f000 fd9e 	bl	13502 <k_queue_prepend>
   129c6:	e7f7      	b.n	129b8 <net_buf_unref+0x48>
   129c8:	20003f2c 	.word	0x20003f2c

000129cc <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   129cc:	7903      	ldrb	r3, [r0, #4]
   129ce:	3301      	adds	r3, #1
   129d0:	7103      	strb	r3, [r0, #4]
	return buf;
}
   129d2:	4770      	bx	lr

000129d4 <net_buf_simple_add>:
	return buf->data + buf->len;
   129d4:	8883      	ldrh	r3, [r0, #4]
   129d6:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   129d8:	4419      	add	r1, r3
   129da:	8081      	strh	r1, [r0, #4]
	return tail;
}
   129dc:	18d0      	adds	r0, r2, r3
   129de:	4770      	bx	lr

000129e0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   129e0:	b430      	push	{r4, r5}
   129e2:	8883      	ldrh	r3, [r0, #4]
   129e4:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   129e6:	189d      	adds	r5, r3, r2
   129e8:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   129ea:	18e0      	adds	r0, r4, r3
}
   129ec:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   129ee:	f7ef b905 	b.w	1bfc <memcpy>

000129f2 <net_buf_simple_add_u8>:
   129f2:	8883      	ldrh	r3, [r0, #4]
   129f4:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   129f6:	b510      	push	{r4, lr}
	buf->len += len;
   129f8:	1c5c      	adds	r4, r3, #1
   129fa:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   129fc:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   129fe:	18d0      	adds	r0, r2, r3
   12a00:	bd10      	pop	{r4, pc}

00012a02 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   12a02:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   12a04:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   12a06:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   12a08:	4411      	add	r1, r2
	buf->data -= len;
   12a0a:	6003      	str	r3, [r0, #0]
	buf->len += len;
   12a0c:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   12a0e:	4618      	mov	r0, r3
   12a10:	4770      	bx	lr

00012a12 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   12a12:	8883      	ldrh	r3, [r0, #4]
   12a14:	1a5b      	subs	r3, r3, r1
   12a16:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   12a18:	6803      	ldr	r3, [r0, #0]
   12a1a:	4419      	add	r1, r3
   12a1c:	6001      	str	r1, [r0, #0]
}
   12a1e:	4608      	mov	r0, r1
   12a20:	4770      	bx	lr

00012a22 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   12a22:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   12a24:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   12a26:	2101      	movs	r1, #1
	val = buf->data[0];
   12a28:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   12a2a:	f7ff fff2 	bl	12a12 <net_buf_simple_pull>

	return val;
}
   12a2e:	4610      	mov	r0, r2
   12a30:	bd08      	pop	{r3, pc}

00012a32 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   12a32:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   12a34:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12a36:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   12a38:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12a3a:	f7ff ffea 	bl	12a12 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   12a3e:	4610      	mov	r0, r2
   12a40:	bd08      	pop	{r3, pc}

00012a42 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   12a42:	6802      	ldr	r2, [r0, #0]
   12a44:	6880      	ldr	r0, [r0, #8]
}
   12a46:	1a10      	subs	r0, r2, r0
   12a48:	4770      	bx	lr

00012a4a <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   12a4a:	6802      	ldr	r2, [r0, #0]
   12a4c:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12a4e:	88c3      	ldrh	r3, [r0, #6]
   12a50:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   12a52:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12a54:	1a9b      	subs	r3, r3, r2
}
   12a56:	1a18      	subs	r0, r3, r0
   12a58:	4770      	bx	lr

00012a5a <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12a5a:	6800      	ldr	r0, [r0, #0]
   12a5c:	6880      	ldr	r0, [r0, #8]
   12a5e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12a60:	b941      	cbnz	r1, 12a74 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   12a62:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   12a66:	fa21 f202 	lsr.w	r2, r1, r2
   12a6a:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   12a6e:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   12a70:	2000      	movs	r0, #0
   12a72:	4770      	bx	lr
		*value = gpio->IN;
   12a74:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   12a78:	e7f9      	b.n	12a6e <gpio_nrf5_read+0x14>

00012a7a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12a7a:	6800      	ldr	r0, [r0, #0]
   12a7c:	6880      	ldr	r0, [r0, #8]
   12a7e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12a80:	b949      	cbnz	r1, 12a96 <gpio_nrf5_write+0x1c>
   12a82:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   12a84:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   12a86:	b11b      	cbz	r3, 12a90 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   12a88:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   12a8c:	2000      	movs	r0, #0
   12a8e:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   12a90:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   12a94:	e7fa      	b.n	12a8c <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   12a96:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   12a9a:	e7f7      	b.n	12a8c <gpio_nrf5_write+0x12>

00012a9c <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12a9c:	6883      	ldr	r3, [r0, #8]
   12a9e:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   12aa0:	b172      	cbz	r2, 12ac0 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   12aa2:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   12aa4:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12aa6:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   12aa8:	b902      	cbnz	r2, 12aac <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   12aaa:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   12aac:	2000      	movs	r0, #0
   12aae:	4770      	bx	lr
	parent->next = child;
   12ab0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   12ab2:	6858      	ldr	r0, [r3, #4]
   12ab4:	4281      	cmp	r1, r0
	list->tail = node;
   12ab6:	bf08      	it	eq
   12ab8:	605a      	streq	r2, [r3, #4]
   12aba:	e00d      	b.n	12ad8 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   12abc:	4602      	mov	r2, r0
   12abe:	6800      	ldr	r0, [r0, #0]
   12ac0:	2800      	cmp	r0, #0
   12ac2:	d0f3      	beq.n	12aac <gpio_nrf5_manage_callback+0x10>
   12ac4:	4281      	cmp	r1, r0
   12ac6:	d1f9      	bne.n	12abc <gpio_nrf5_manage_callback+0x20>
   12ac8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   12aca:	2a00      	cmp	r2, #0
   12acc:	d1f0      	bne.n	12ab0 <gpio_nrf5_manage_callback+0x14>
   12ace:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12ad0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   12ad2:	4291      	cmp	r1, r2
   12ad4:	d100      	bne.n	12ad8 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   12ad6:	6058      	str	r0, [r3, #4]
	parent->next = child;
   12ad8:	2300      	movs	r3, #0
   12ada:	600b      	str	r3, [r1, #0]
   12adc:	e7e6      	b.n	12aac <gpio_nrf5_manage_callback+0x10>
	...

00012ae0 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   12ae0:	4b0c      	ldr	r3, [pc, #48]	; (12b14 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   12ae2:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12ae4:	4d0c      	ldr	r5, [pc, #48]	; (12b18 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   12ae6:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12ae8:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   12aea:	fa24 f203 	lsr.w	r2, r4, r3
   12aee:	07d2      	lsls	r2, r2, #31
   12af0:	d508      	bpl.n	12b04 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12af2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   12af6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   12afa:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   12afe:	4282      	cmp	r2, r0
   12b00:	d100      	bne.n	12b04 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12b02:	b121      	cbz	r1, 12b0e <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12b04:	3301      	adds	r3, #1
   12b06:	2b08      	cmp	r3, #8
   12b08:	d1ef      	bne.n	12aea <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   12b0a:	f06f 0312 	mvn.w	r3, #18
}
   12b0e:	4618      	mov	r0, r3
   12b10:	bd30      	pop	{r4, r5, pc}
   12b12:	bf00      	nop
   12b14:	200016f4 	.word	0x200016f4
   12b18:	40006000 	.word	0x40006000

00012b1c <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   12b1c:	b570      	push	{r4, r5, r6, lr}
   12b1e:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12b20:	460d      	mov	r5, r1
   12b22:	b9c9      	cbnz	r1, 12b58 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12b24:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12b26:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12b28:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12b2a:	4610      	mov	r0, r2
   12b2c:	7919      	ldrb	r1, [r3, #4]
   12b2e:	f7ff ffd7 	bl	12ae0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12b32:	2800      	cmp	r0, #0
   12b34:	db12      	blt.n	12b5c <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   12b36:	68b2      	ldr	r2, [r6, #8]
   12b38:	2301      	movs	r3, #1
   12b3a:	fa03 f404 	lsl.w	r4, r3, r4
   12b3e:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   12b40:	f100 0140 	add.w	r1, r0, #64	; 0x40
   12b44:	4a06      	ldr	r2, [pc, #24]	; (12b60 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   12b46:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   12b48:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   12b4c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   12b50:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   12b54:	4628      	mov	r0, r5
   12b56:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12b58:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12b5c:	bd70      	pop	{r4, r5, r6, pc}
   12b5e:	bf00      	nop
   12b60:	40006000 	.word	0x40006000

00012b64 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   12b64:	b570      	push	{r4, r5, r6, lr}
   12b66:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12b68:	460d      	mov	r5, r1
   12b6a:	b9b1      	cbnz	r1, 12b9a <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12b6c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12b6e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12b70:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12b72:	4610      	mov	r0, r2
   12b74:	7919      	ldrb	r1, [r3, #4]
   12b76:	f7ff ffb3 	bl	12ae0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12b7a:	2800      	cmp	r0, #0
   12b7c:	db0f      	blt.n	12b9e <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   12b7e:	68b2      	ldr	r2, [r6, #8]
   12b80:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   12b82:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   12b86:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   12b8a:	4b05      	ldr	r3, [pc, #20]	; (12ba0 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   12b8c:	ea22 0404 	bic.w	r4, r2, r4
   12b90:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   12b92:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   12b96:	4628      	mov	r0, r5
   12b98:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12b9a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12b9e:	bd70      	pop	{r4, r5, r6, pc}
   12ba0:	40006000 	.word	0x40006000

00012ba4 <gpio_nrf5_config>:
{
   12ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12ba8:	6806      	ldr	r6, [r0, #0]
{
   12baa:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12bac:	68b2      	ldr	r2, [r6, #8]
   12bae:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12bb0:	b119      	cbz	r1, 12bba <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   12bb2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   12bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12bba:	f403 7240 	and.w	r2, r3, #768	; 0x300
   12bbe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   12bc2:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   12bc6:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   12bca:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12bce:	d058      	beq.n	12c82 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   12bd0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   12bd4:	bf0c      	ite	eq
   12bd6:	2204      	moveq	r2, #4
   12bd8:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   12bda:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   12bde:	bf08      	it	eq
   12be0:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   12be2:	f013 0f01 	tst.w	r3, #1
   12be6:	ea4f 0180 	mov.w	r1, r0, lsl #2
   12bea:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 12cb8 <gpio_nrf5_config+0x114>
   12bee:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   12bf2:	d04f      	beq.n	12c94 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   12bf4:	2a0c      	cmp	r2, #12
   12bf6:	d146      	bne.n	12c86 <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   12bf8:	2701      	movs	r7, #1
   12bfa:	40a7      	lsls	r7, r4
   12bfc:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   12c00:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   12c02:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   12c06:	f041 0103 	orr.w	r1, r1, #3
   12c0a:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   12c0c:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   12c10:	f013 0002 	ands.w	r0, r3, #2
   12c14:	d049      	beq.n	12caa <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   12c16:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   12c18:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   12c1a:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   12c1e:	d5c8      	bpl.n	12bb2 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   12c20:	065a      	lsls	r2, r3, #25
   12c22:	d43d      	bmi.n	12ca0 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   12c24:	f013 0f04 	tst.w	r3, #4
   12c28:	bf14      	ite	ne
   12c2a:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   12c2e:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   12c32:	4e1f      	ldr	r6, [pc, #124]	; (12cb0 <gpio_nrf5_config+0x10c>)
   12c34:	6837      	ldr	r7, [r6, #0]
   12c36:	4638      	mov	r0, r7
   12c38:	f7ed fb04 	bl	244 <__popcountsi2>
   12c3c:	2808      	cmp	r0, #8
   12c3e:	d032      	beq.n	12ca6 <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   12c40:	4641      	mov	r1, r8
   12c42:	4620      	mov	r0, r4
   12c44:	f7ff ff4c 	bl	12ae0 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12c48:	2800      	cmp	r0, #0
   12c4a:	da08      	bge.n	12c5e <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   12c4c:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   12c4e:	fa93 f0a3 	rbit	r0, r3
   12c52:	2b00      	cmp	r3, #0
   12c54:	fab0 f080 	clz	r0, r0
   12c58:	bf08      	it	eq
   12c5a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   12c5e:	2301      	movs	r3, #1
   12c60:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   12c62:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   12c64:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   12c66:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   12c6a:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   12c6c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   12c70:	4b10      	ldr	r3, [pc, #64]	; (12cb4 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   12c72:	f044 0401 	orr.w	r4, r4, #1
   12c76:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   12c78:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   12c7c:	2000      	movs	r0, #0
   12c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   12c82:	220c      	movs	r2, #12
   12c84:	e7a9      	b.n	12bda <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   12c86:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   12c88:	bf02      	ittt	eq
   12c8a:	2701      	moveq	r7, #1
   12c8c:	40a7      	lsleq	r7, r4
   12c8e:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   12c92:	e7b5      	b.n	12c00 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   12c94:	4461      	add	r1, ip
   12c96:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   12c9a:	430a      	orrs	r2, r1
   12c9c:	433a      	orrs	r2, r7
   12c9e:	e7b5      	b.n	12c0c <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   12ca0:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   12ca4:	e7c5      	b.n	12c32 <gpio_nrf5_config+0x8e>
			return -EIO;
   12ca6:	f06f 0004 	mvn.w	r0, #4
}
   12caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cae:	bf00      	nop
   12cb0:	200016f4 	.word	0x200016f4
   12cb4:	40006000 	.word	0x40006000
   12cb8:	00017df4 	.word	0x00017df4

00012cbc <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   12cbc:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   12cbe:	2200      	movs	r2, #0
   12cc0:	2105      	movs	r1, #5
   12cc2:	2006      	movs	r0, #6
   12cc4:	f7ee fdfa 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   12cc8:	2006      	movs	r0, #6
   12cca:	f7ee fdc5 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   12cce:	2000      	movs	r0, #0
   12cd0:	bd08      	pop	{r3, pc}
	...

00012cd4 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12cd4:	2100      	movs	r1, #0
{
   12cd6:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   12cd8:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   12cda:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   12cdc:	2501      	movs	r5, #1
   12cde:	008b      	lsls	r3, r1, #2
   12ce0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12ce4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   12ce8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   12cec:	b140      	cbz	r0, 12d00 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   12cee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   12cf2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   12cf6:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   12cfa:	fa05 f303 	lsl.w	r3, r5, r3
   12cfe:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12d00:	3101      	adds	r1, #1
   12d02:	2908      	cmp	r1, #8
   12d04:	d1eb      	bne.n	12cde <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   12d06:	4e08      	ldr	r6, [pc, #32]	; (12d28 <gpio_nrf5_port_isr+0x54>)
   12d08:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   12d0a:	689d      	ldr	r5, [r3, #8]
   12d0c:	681c      	ldr	r4, [r3, #0]
   12d0e:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   12d10:	b14c      	cbz	r4, 12d26 <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   12d12:	68a3      	ldr	r3, [r4, #8]
   12d14:	421d      	tst	r5, r3
   12d16:	d004      	beq.n	12d22 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   12d18:	6863      	ldr	r3, [r4, #4]
   12d1a:	462a      	mov	r2, r5
   12d1c:	4621      	mov	r1, r4
   12d1e:	4630      	mov	r0, r6
   12d20:	4798      	blx	r3
	return node->next;
   12d22:	6824      	ldr	r4, [r4, #0]
   12d24:	e7f4      	b.n	12d10 <gpio_nrf5_port_isr+0x3c>
   12d26:	bd70      	pop	{r4, r5, r6, pc}
   12d28:	20003ed4 	.word	0x20003ed4

00012d2c <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12d2c:	4b03      	ldr	r3, [pc, #12]	; (12d3c <uart_nrfx_err_check+0x10>)
   12d2e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   12d30:	b118      	cbz	r0, 12d3a <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12d32:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   12d36:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   12d3a:	4770      	bx	lr
   12d3c:	40002124 	.word	0x40002124

00012d40 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d40:	4b07      	ldr	r3, [pc, #28]	; (12d60 <uart_nrfx_poll_out+0x20>)
   12d42:	2200      	movs	r2, #0
   12d44:	601a      	str	r2, [r3, #0]
{
   12d46:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12d48:	681a      	ldr	r2, [r3, #0]
   12d4a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12d4c:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   12d4e:	4a05      	ldr	r2, [pc, #20]	; (12d64 <uart_nrfx_poll_out+0x24>)
   12d50:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12d54:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   12d56:	2a00      	cmp	r2, #0
   12d58:	d0fc      	beq.n	12d54 <uart_nrfx_poll_out+0x14>
}
   12d5a:	4608      	mov	r0, r1
   12d5c:	b002      	add	sp, #8
   12d5e:	4770      	bx	lr
   12d60:	4000211c 	.word	0x4000211c
   12d64:	40002000 	.word	0x40002000

00012d68 <uart_nrfx_poll_in>:
   12d68:	4b08      	ldr	r3, [pc, #32]	; (12d8c <uart_nrfx_poll_in+0x24>)
   12d6a:	681a      	ldr	r2, [r3, #0]
{
   12d6c:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   12d6e:	b152      	cbz	r2, 12d86 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d70:	2000      	movs	r0, #0
   12d72:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12d74:	681b      	ldr	r3, [r3, #0]
   12d76:	9301      	str	r3, [sp, #4]
    (void)dummy;
   12d78:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   12d7a:	4b05      	ldr	r3, [pc, #20]	; (12d90 <uart_nrfx_poll_in+0x28>)
   12d7c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   12d80:	700b      	strb	r3, [r1, #0]
}
   12d82:	b002      	add	sp, #8
   12d84:	4770      	bx	lr
		return -1;
   12d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d8a:	e7fa      	b.n	12d82 <uart_nrfx_poll_in+0x1a>
   12d8c:	40002108 	.word	0x40002108
   12d90:	40002000 	.word	0x40002000

00012d94 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   12d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   12d96:	4819      	ldr	r0, [pc, #100]	; (12dfc <uart_nrfx_init+0x68>)
   12d98:	f000 f98c 	bl	130b4 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   12d9c:	6843      	ldr	r3, [r0, #4]
   12d9e:	4604      	mov	r4, r0
   12da0:	681d      	ldr	r5, [r3, #0]
   12da2:	2206      	movs	r2, #6
   12da4:	f240 1301 	movw	r3, #257	; 0x101
   12da8:	2100      	movs	r1, #0
   12daa:	47a8      	blx	r5
   12dac:	6863      	ldr	r3, [r4, #4]
   12dae:	681d      	ldr	r5, [r3, #0]
   12db0:	2300      	movs	r3, #0
   12db2:	4619      	mov	r1, r3
   12db4:	2208      	movs	r2, #8
   12db6:	4620      	mov	r0, r4
   12db8:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   12dba:	4b11      	ldr	r3, [pc, #68]	; (12e00 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12dbc:	4911      	ldr	r1, [pc, #68]	; (12e04 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   12dbe:	2208      	movs	r2, #8
   12dc0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   12dc4:	2206      	movs	r2, #6
   12dc6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12dca:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12dcc:	4a0e      	ldr	r2, [pc, #56]	; (12e08 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12dce:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   12dd2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   12dd6:	2204      	movs	r2, #4
   12dd8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12ddc:	4a0b      	ldr	r2, [pc, #44]	; (12e0c <uart_nrfx_init+0x78>)
   12dde:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12de0:	6812      	ldr	r2, [r2, #0]
   12de2:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12de4:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12de6:	4a0a      	ldr	r2, [pc, #40]	; (12e10 <uart_nrfx_init+0x7c>)
   12de8:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12dea:	6812      	ldr	r2, [r2, #0]
   12dec:	9200      	str	r2, [sp, #0]
    (void)dummy;
   12dee:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12df0:	2201      	movs	r2, #1
   12df2:	600a      	str	r2, [r1, #0]
   12df4:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   12df6:	b003      	add	sp, #12
   12df8:	bd30      	pop	{r4, r5, pc}
   12dfa:	bf00      	nop
   12dfc:	00017e58 	.word	0x00017e58
   12e00:	40002000 	.word	0x40002000
   12e04:	40002008 	.word	0x40002008
   12e08:	01d7e000 	.word	0x01d7e000
   12e0c:	4000211c 	.word	0x4000211c
   12e10:	40002108 	.word	0x40002108

00012e14 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   12e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   12e18:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   12e1a:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   12e1c:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   12e1e:	42a3      	cmp	r3, r4
	d = &rand[octets];
   12e20:	440a      	add	r2, r1
	s = &rng->rand[first];
   12e22:	4406      	add	r6, r0
	if (first <= last) {
   12e24:	d81f      	bhi.n	12e66 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   12e26:	1ae4      	subs	r4, r4, r3
   12e28:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   12e2a:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   12e2c:	bf3e      	ittt	cc
   12e2e:	1a64      	subcc	r4, r4, r1
   12e30:	b2e7      	uxtbcc	r7, r4
   12e32:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   12e34:	4423      	add	r3, r4
		octets -= avail;
   12e36:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   12e3a:	bf28      	it	cs
   12e3c:	2700      	movcs	r7, #0
		first += avail;
   12e3e:	b2db      	uxtb	r3, r3
		octets -= avail;
   12e40:	b2c9      	uxtb	r1, r1
   12e42:	4434      	add	r4, r6

		while (avail--) {
   12e44:	42a6      	cmp	r6, r4
   12e46:	d109      	bne.n	12e5c <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   12e48:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   12e4a:	7843      	ldrb	r3, [r0, #1]
   12e4c:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   12e4e:	bf82      	ittt	hi
   12e50:	4b20      	ldrhi	r3, [pc, #128]	; (12ed4 <get+0xc0>)
   12e52:	2201      	movhi	r2, #1
   12e54:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   12e56:	4608      	mov	r0, r1
   12e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   12e5c:	f816 5b01 	ldrb.w	r5, [r6], #1
   12e60:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12e64:	e7ee      	b.n	12e44 <get+0x30>
		avail = rng->count - first;
   12e66:	7805      	ldrb	r5, [r0, #0]
   12e68:	1aed      	subs	r5, r5, r3
   12e6a:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   12e6c:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   12e6e:	bf3f      	itttt	cc
   12e70:	1a67      	subcc	r7, r4, r1
   12e72:	19ed      	addcc	r5, r5, r7
   12e74:	b2ef      	uxtbcc	r7, r5
   12e76:	460d      	movcc	r5, r1
			first += avail;
   12e78:	bf38      	it	cc
   12e7a:	185b      	addcc	r3, r3, r1
		octets -= avail;
   12e7c:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   12e80:	bf32      	itee	cc
   12e82:	b2db      	uxtbcc	r3, r3
   12e84:	4627      	movcs	r7, r4
			first = 0;
   12e86:	2300      	movcs	r3, #0
		octets -= avail;
   12e88:	b2c9      	uxtb	r1, r1
   12e8a:	4696      	mov	lr, r2
   12e8c:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   12e90:	4566      	cmp	r6, ip
   12e92:	d119      	bne.n	12ec8 <get+0xb4>
   12e94:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   12e96:	2900      	cmp	r1, #0
   12e98:	d0d6      	beq.n	12e48 <get+0x34>
   12e9a:	2c00      	cmp	r4, #0
   12e9c:	d0d4      	beq.n	12e48 <get+0x34>
			if (octets < last) {
   12e9e:	428c      	cmp	r4, r1
   12ea0:	bf8a      	itet	hi
   12ea2:	460b      	movhi	r3, r1
   12ea4:	4623      	movls	r3, r4
				remaining = last - octets;
   12ea6:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   12ea8:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   12eac:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   12eb0:	bf8c      	ite	hi
   12eb2:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   12eb4:	2700      	movls	r7, #0
			octets -= last;
   12eb6:	b2c9      	uxtb	r1, r1
   12eb8:	18f4      	adds	r4, r6, r3
			while (last--) {
   12eba:	42a6      	cmp	r6, r4
   12ebc:	d0c4      	beq.n	12e48 <get+0x34>
				*(--d) = *s++;
   12ebe:	f816 5b01 	ldrb.w	r5, [r6], #1
   12ec2:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12ec6:	e7f8      	b.n	12eba <get+0xa6>
			*(--d) = *s++;
   12ec8:	f816 8b01 	ldrb.w	r8, [r6], #1
   12ecc:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   12ed0:	e7de      	b.n	12e90 <get+0x7c>
   12ed2:	bf00      	nop
   12ed4:	4000d000 	.word	0x4000d000

00012ed8 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   12ed8:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   12eda:	b1d0      	cbz	r0, 12f12 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   12edc:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   12ede:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   12ee0:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   12ee2:	1c53      	adds	r3, r2, #1
   12ee4:	b2db      	uxtb	r3, r3
		last = 0;
   12ee6:	42ab      	cmp	r3, r5
   12ee8:	bf08      	it	eq
   12eea:	2300      	moveq	r3, #0
	if (last == rng->first) {
   12eec:	42a3      	cmp	r3, r4
   12eee:	d010      	beq.n	12f12 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   12ef0:	b161      	cbz	r1, 12f0c <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   12ef2:	490a      	ldr	r1, [pc, #40]	; (12f1c <isr+0x44>)
   12ef4:	4402      	add	r2, r0
   12ef6:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   12efa:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   12efc:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   12efe:	3301      	adds	r3, #1
   12f00:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   12f02:	429d      	cmp	r5, r3
   12f04:	bf08      	it	eq
   12f06:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   12f08:	42a3      	cmp	r3, r4
   12f0a:	d005      	beq.n	12f18 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   12f0c:	f06f 000f 	mvn.w	r0, #15
   12f10:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   12f12:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12f16:	bd30      	pop	{r4, r5, pc}
		return 0;
   12f18:	2000      	movs	r0, #0
}
   12f1a:	bd30      	pop	{r4, r5, pc}
   12f1c:	4000d000 	.word	0x4000d000

00012f20 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   12f20:	07db      	lsls	r3, r3, #31
{
   12f22:	b570      	push	{r4, r5, r6, lr}
   12f24:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   12f26:	d507      	bpl.n	12f38 <entropy_nrf5_get_entropy_isr+0x18>
   12f28:	4613      	mov	r3, r2
   12f2a:	4a0d      	ldr	r2, [pc, #52]	; (12f60 <entropy_nrf5_get_entropy_isr+0x40>)
   12f2c:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   12f2e:	2500      	movs	r5, #0
	while (len) {
   12f30:	b94b      	cbnz	r3, 12f46 <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   12f32:	6050      	str	r0, [r2, #4]

	return cnt;
   12f34:	4620      	mov	r0, r4
}
   12f36:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   12f38:	6880      	ldr	r0, [r0, #8]
   12f3a:	460a      	mov	r2, r1
   12f3c:	303c      	adds	r0, #60	; 0x3c
   12f3e:	b2e1      	uxtb	r1, r4
   12f40:	f7ff ff68 	bl	12e14 <get>
   12f44:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   12f46:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   12f4a:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   12f4c:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   12f50:	2e00      	cmp	r6, #0
   12f52:	d0fb      	beq.n	12f4c <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   12f54:	3b01      	subs	r3, #1
   12f56:	b29b      	uxth	r3, r3
   12f58:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   12f5c:	54ce      	strb	r6, [r1, r3]
   12f5e:	e7e7      	b.n	12f30 <entropy_nrf5_get_entropy_isr+0x10>
   12f60:	4000d000 	.word	0x4000d000

00012f64 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   12f64:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12f66:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   12f68:	2201      	movs	r2, #1
   12f6a:	4611      	mov	r1, r2
   12f6c:	4620      	mov	r0, r4
   12f6e:	f000 fd7f 	bl	13a70 <_impl_k_sem_init>
   12f72:	f104 0018 	add.w	r0, r4, #24
   12f76:	2201      	movs	r2, #1
   12f78:	2100      	movs	r1, #0
   12f7a:	f000 fd79 	bl	13a70 <_impl_k_sem_init>
	rng->threshold = threshold;
   12f7e:	2304      	movs	r3, #4
   12f80:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   12f84:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   12f86:	2500      	movs	r5, #0
	rng->threshold = threshold;
   12f88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   12f8c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   12f8e:	4b11      	ldr	r3, [pc, #68]	; (12fd4 <entropy_nrf5_init+0x70>)
	rng->count = len;
   12f90:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   12f94:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   12f96:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   12f9a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   12f9e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   12fa2:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   12fa6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   12faa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   12fae:	f042 0201 	orr.w	r2, r2, #1
   12fb2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   12fb6:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   12fb8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   12fbc:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   12fbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   12fc2:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   12fc4:	462a      	mov	r2, r5
   12fc6:	f7ee fc79 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   12fca:	4630      	mov	r0, r6
   12fcc:	f7ee fc44 	bl	1858 <_arch_irq_enable>

	return 0;
}
   12fd0:	4628      	mov	r0, r5
   12fd2:	bd70      	pop	{r4, r5, r6, pc}
   12fd4:	4000d000 	.word	0x4000d000

00012fd8 <isr_rand>:
{
   12fd8:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   12fda:	4b12      	ldr	r3, [pc, #72]	; (13024 <isr_rand+0x4c>)
   12fdc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   12fe0:	b1fb      	cbz	r3, 13022 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12fe2:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   12fe4:	2101      	movs	r1, #1
   12fe6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12fea:	f7ff ff75 	bl	12ed8 <isr>
		if (ret != -EBUSY) {
   12fee:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   12ff2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   12ff4:	d00d      	beq.n	13012 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   12ff6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   12ffa:	bf14      	ite	ne
   12ffc:	2100      	movne	r1, #0
   12ffe:	2101      	moveq	r1, #1
   13000:	f105 0030 	add.w	r0, r5, #48	; 0x30
   13004:	f7ff ff68 	bl	12ed8 <isr>
   13008:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1300a:	f105 0018 	add.w	r0, r5, #24
   1300e:	f000 fd38 	bl	13a82 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   13012:	4b04      	ldr	r3, [pc, #16]	; (13024 <isr_rand+0x4c>)
   13014:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   13016:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   13018:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   1301c:	bf1c      	itt	ne
   1301e:	2201      	movne	r2, #1
   13020:	605a      	strne	r2, [r3, #4]
   13022:	bd38      	pop	{r3, r4, r5, pc}
   13024:	4000d000 	.word	0x4000d000

00013028 <entropy_nrf5_get_entropy>:
{
   13028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1302c:	6885      	ldr	r5, [r0, #8]
{
   1302e:	460f      	mov	r7, r1
   13030:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   13032:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   13036:	b914      	cbnz	r4, 1303e <entropy_nrf5_get_entropy+0x16>
}
   13038:	4620      	mov	r0, r4
   1303a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1303e:	2cff      	cmp	r4, #255	; 0xff
   13040:	4623      	mov	r3, r4
   13042:	bf28      	it	cs
   13044:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   13046:	1ae4      	subs	r4, r4, r3
   13048:	b2de      	uxtb	r6, r3
   1304a:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   1304c:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13054:	4628      	mov	r0, r5
   13056:	f000 fd3c 	bl	13ad2 <_impl_k_sem_take>
   1305a:	4631      	mov	r1, r6
   1305c:	463a      	mov	r2, r7
   1305e:	4648      	mov	r0, r9
   13060:	f7ff fed8 	bl	12e14 <get>
   13064:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13066:	4628      	mov	r0, r5
   13068:	f000 fd0b 	bl	13a82 <_impl_k_sem_give>
			if (len8) {
   1306c:	2e00      	cmp	r6, #0
   1306e:	d0e2      	beq.n	13036 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13074:	4640      	mov	r0, r8
   13076:	f000 fd2c 	bl	13ad2 <_impl_k_sem_take>
   1307a:	e7e9      	b.n	13050 <entropy_nrf5_get_entropy+0x28>

0001307c <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   1307c:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   1307e:	4802      	ldr	r0, [pc, #8]	; (13088 <entropy_nrf_get_entropy_isr+0xc>)
   13080:	460a      	mov	r2, r1
   13082:	4619      	mov	r1, r3
   13084:	f7ff bec6 	b.w	12e14 <get>
   13088:	20001734 	.word	0x20001734

0001308c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   1308c:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   1308e:	4b08      	ldr	r3, [pc, #32]	; (130b0 <_sys_device_do_config_level+0x24>)
   13090:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13094:	3001      	adds	r0, #1
   13096:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1309a:	4620      	mov	r0, r4
   1309c:	42a8      	cmp	r0, r5
   1309e:	f104 040c 	add.w	r4, r4, #12
   130a2:	d300      	bcc.n	130a6 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   130a4:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   130a6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   130aa:	685b      	ldr	r3, [r3, #4]
   130ac:	4798      	blx	r3
   130ae:	e7f4      	b.n	1309a <_sys_device_do_config_level+0xe>
   130b0:	00017e74 	.word	0x00017e74

000130b4 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   130b4:	4b10      	ldr	r3, [pc, #64]	; (130f8 <device_get_binding+0x44>)
{
   130b6:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   130b8:	4c10      	ldr	r4, [pc, #64]	; (130fc <device_get_binding+0x48>)
{
   130ba:	4605      	mov	r5, r0
   130bc:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   130be:	429c      	cmp	r4, r3
   130c0:	d104      	bne.n	130cc <device_get_binding+0x18>
   130c2:	4c0e      	ldr	r4, [pc, #56]	; (130fc <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   130c4:	42b4      	cmp	r4, r6
   130c6:	d109      	bne.n	130dc <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   130c8:	2400      	movs	r4, #0
   130ca:	e012      	b.n	130f2 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   130cc:	6862      	ldr	r2, [r4, #4]
   130ce:	b11a      	cbz	r2, 130d8 <device_get_binding+0x24>
   130d0:	6822      	ldr	r2, [r4, #0]
   130d2:	6812      	ldr	r2, [r2, #0]
   130d4:	42aa      	cmp	r2, r5
   130d6:	d00c      	beq.n	130f2 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   130d8:	340c      	adds	r4, #12
   130da:	e7f0      	b.n	130be <device_get_binding+0xa>
		if (!info->driver_api) {
   130dc:	6863      	ldr	r3, [r4, #4]
   130de:	b90b      	cbnz	r3, 130e4 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   130e0:	340c      	adds	r4, #12
   130e2:	e7ef      	b.n	130c4 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   130e4:	6823      	ldr	r3, [r4, #0]
   130e6:	4628      	mov	r0, r5
   130e8:	6819      	ldr	r1, [r3, #0]
   130ea:	f7ee fd65 	bl	1bb8 <strcmp>
   130ee:	2800      	cmp	r0, #0
   130f0:	d1f6      	bne.n	130e0 <device_get_binding+0x2c>
}
   130f2:	4620      	mov	r0, r4
   130f4:	bd70      	pop	{r4, r5, r6, pc}
   130f6:	bf00      	nop
   130f8:	20003f04 	.word	0x20003f04
   130fc:	20003e74 	.word	0x20003e74

00013100 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   13100:	1c43      	adds	r3, r0, #1
   13102:	d003      	beq.n	1310c <_sys_power_save_idle_exit+0xc>
   13104:	4b03      	ldr	r3, [pc, #12]	; (13114 <_sys_power_save_idle_exit+0x14>)
   13106:	681b      	ldr	r3, [r3, #0]
   13108:	4298      	cmp	r0, r3
   1310a:	db01      	blt.n	13110 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   1310c:	f7ee b96c 	b.w	13e8 <_timer_idle_exit>
   13110:	4770      	bx	lr
   13112:	bf00      	nop
   13114:	20003e68 	.word	0x20003e68

00013118 <idle>:
	return list->head == list;
   13118:	4d0f      	ldr	r5, [pc, #60]	; (13158 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1311a:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   1311c:	4f0f      	ldr	r7, [pc, #60]	; (1315c <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1311e:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   13122:	f04f 0220 	mov.w	r2, #32
   13126:	f3ef 8311 	mrs	r3, BASEPRI
   1312a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   1312e:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13130:	42b3      	cmp	r3, r6
   13132:	d00a      	beq.n	1314a <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   13134:	b14b      	cbz	r3, 1314a <idle+0x32>
   13136:	691c      	ldr	r4, [r3, #16]
   13138:	1c63      	adds	r3, r4, #1
   1313a:	d008      	beq.n	1314e <idle+0x36>
   1313c:	683b      	ldr	r3, [r7, #0]
   1313e:	42a3      	cmp	r3, r4
   13140:	dd05      	ble.n	1314e <idle+0x36>
	_kernel.idle = ticks;
   13142:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   13144:	f7ee fc10 	bl	1968 <k_cpu_idle>
   13148:	e7eb      	b.n	13122 <idle+0xa>
   1314a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   1314e:	4620      	mov	r0, r4
   13150:	f7ee f92c 	bl	13ac <_timer_idle_enter>
   13154:	e7f5      	b.n	13142 <idle+0x2a>
   13156:	bf00      	nop
   13158:	20001948 	.word	0x20001948
   1315c:	20003e68 	.word	0x20003e68

00013160 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   13160:	4802      	ldr	r0, [pc, #8]	; (1316c <_bss_zero+0xc>)
   13162:	4a03      	ldr	r2, [pc, #12]	; (13170 <_bss_zero+0x10>)
   13164:	2100      	movs	r1, #0
   13166:	1a12      	subs	r2, r2, r0
   13168:	f7ee bd74 	b.w	1c54 <memset>
   1316c:	20000000 	.word	0x20000000
   13170:	20001a08 	.word	0x20001a08

00013174 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   13174:	4802      	ldr	r0, [pc, #8]	; (13180 <_data_copy+0xc>)
   13176:	4a03      	ldr	r2, [pc, #12]	; (13184 <_data_copy+0x10>)
   13178:	4903      	ldr	r1, [pc, #12]	; (13188 <_data_copy+0x14>)
   1317a:	1a12      	subs	r2, r2, r0
   1317c:	f7ee bd3e 	b.w	1bfc <memcpy>
   13180:	20003a20 	.word	0x20003a20
   13184:	20003fac 	.word	0x20003fac
   13188:	00017ec4 	.word	0x00017ec4

0001318c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1318c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1318e:	2002      	movs	r0, #2
   13190:	f7ff ff7c 	bl	1308c <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   13194:	4807      	ldr	r0, [pc, #28]	; (131b4 <bg_thread_main+0x28>)
   13196:	f7ed fef9 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1319a:	2003      	movs	r0, #3
   1319c:	f7ff ff76 	bl	1308c <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   131a0:	f000 feaa 	bl	13ef8 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   131a4:	f7ed fa8c 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   131a8:	4a03      	ldr	r2, [pc, #12]	; (131b8 <bg_thread_main+0x2c>)
   131aa:	7a13      	ldrb	r3, [r2, #8]
   131ac:	f023 0301 	bic.w	r3, r3, #1
   131b0:	7213      	strb	r3, [r2, #8]
   131b2:	bd08      	pop	{r3, pc}
   131b4:	00017e90 	.word	0x00017e90
   131b8:	200017b8 	.word	0x200017b8

000131bc <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   131bc:	b580      	push	{r7, lr}
   131be:	b086      	sub	sp, #24
   131c0:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   131c2:	f7ee f995 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   131c6:	4b30      	ldr	r3, [pc, #192]	; (13288 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   131c8:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   131cc:	4b2f      	ldr	r3, [pc, #188]	; (1328c <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   131ce:	4d30      	ldr	r5, [pc, #192]	; (13290 <_Cstart+0xd4>)
   131d0:	4e30      	ldr	r6, [pc, #192]	; (13294 <_Cstart+0xd8>)
   131d2:	2400      	movs	r4, #0
   131d4:	22e0      	movs	r2, #224	; 0xe0
   131d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   131da:	77dc      	strb	r4, [r3, #31]
   131dc:	761c      	strb	r4, [r3, #24]
   131de:	765c      	strb	r4, [r3, #25]
   131e0:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   131e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   131e4:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   131e8:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   131ea:	f7ee fb2d 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   131ee:	f7ee fbb5 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   131f2:	4620      	mov	r0, r4
   131f4:	f7ff ff4a 	bl	1308c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   131f8:	2001      	movs	r0, #1
   131fa:	f7ff ff47 	bl	1308c <_sys_device_do_config_level>
	_sched_init();
   131fe:	f000 fbf9 	bl	139f4 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   13202:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   13204:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   13206:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1320a:	9304      	str	r3, [sp, #16]
   1320c:	9403      	str	r4, [sp, #12]
   1320e:	9402      	str	r4, [sp, #8]
   13210:	9401      	str	r4, [sp, #4]
   13212:	9400      	str	r4, [sp, #0]
   13214:	4b20      	ldr	r3, [pc, #128]	; (13298 <_Cstart+0xdc>)
   13216:	4921      	ldr	r1, [pc, #132]	; (1329c <_Cstart+0xe0>)
   13218:	4628      	mov	r0, r5
   1321a:	f000 fe15 	bl	13e48 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1321e:	7a6b      	ldrb	r3, [r5, #9]
   13220:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13224:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13228:	726a      	strb	r2, [r5, #9]
   1322a:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   1322c:	d102      	bne.n	13234 <_Cstart+0x78>
   1322e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13230:	3301      	adds	r3, #1
   13232:	d024      	beq.n	1327e <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   13234:	2301      	movs	r3, #1
   13236:	4e1a      	ldr	r6, [pc, #104]	; (132a0 <_Cstart+0xe4>)
   13238:	9304      	str	r3, [sp, #16]
   1323a:	230f      	movs	r3, #15
   1323c:	9303      	str	r3, [sp, #12]
   1323e:	2300      	movs	r3, #0
   13240:	9302      	str	r3, [sp, #8]
   13242:	9301      	str	r3, [sp, #4]
   13244:	9300      	str	r3, [sp, #0]
   13246:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1324a:	4b16      	ldr	r3, [pc, #88]	; (132a4 <_Cstart+0xe8>)
   1324c:	4916      	ldr	r1, [pc, #88]	; (132a8 <_Cstart+0xec>)
   1324e:	4630      	mov	r0, r6
   13250:	f000 fdfa 	bl	13e48 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13254:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   13256:	60e6      	str	r6, [r4, #12]
   13258:	f023 0304 	bic.w	r3, r3, #4
   1325c:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   1325e:	4b13      	ldr	r3, [pc, #76]	; (132ac <_Cstart+0xf0>)
   13260:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13262:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13264:	4b12      	ldr	r3, [pc, #72]	; (132b0 <_Cstart+0xf4>)

	_current = main_thread;
   13266:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13268:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   1326c:	4c11      	ldr	r4, [pc, #68]	; (132b4 <_Cstart+0xf8>)
   1326e:	4a0a      	ldr	r2, [pc, #40]	; (13298 <_Cstart+0xdc>)
   13270:	f383 8809 	msr	PSP, r3
   13274:	2100      	movs	r1, #0
   13276:	f381 8811 	msr	BASEPRI, r1
   1327a:	4610      	mov	r0, r2
   1327c:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   1327e:	4628      	mov	r0, r5
   13280:	f000 fab4 	bl	137ec <_add_thread_to_ready_q>
   13284:	e7d6      	b.n	13234 <_Cstart+0x78>
   13286:	bf00      	nop
   13288:	20003620 	.word	0x20003620
   1328c:	e000ed00 	.word	0xe000ed00
   13290:	200017b8 	.word	0x200017b8
   13294:	20001948 	.word	0x20001948
   13298:	0001318d 	.word	0x0001318d
   1329c:	200028e0 	.word	0x200028e0
   132a0:	20001748 	.word	0x20001748
   132a4:	00013119 	.word	0x00013119
   132a8:	20002ce0 	.word	0x20002ce0
   132ac:	2000195c 	.word	0x2000195c
   132b0:	20002ce0 	.word	0x20002ce0
   132b4:	00000899 	.word	0x00000899

000132b8 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   132b8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   132ba:	4c07      	ldr	r4, [pc, #28]	; (132d8 <init_static_pools+0x20>)
   132bc:	4d07      	ldr	r5, [pc, #28]	; (132dc <init_static_pools+0x24>)
   132be:	42ac      	cmp	r4, r5
   132c0:	d301      	bcc.n	132c6 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   132c2:	2000      	movs	r0, #0
   132c4:	bd38      	pop	{r3, r4, r5, pc}
   132c6:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   132ca:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   132cc:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   132ce:	4620      	mov	r0, r4
   132d0:	f7ed fb1d 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   132d4:	341c      	adds	r4, #28
   132d6:	e7f2      	b.n	132be <init_static_pools+0x6>
   132d8:	20003f04 	.word	0x20003f04
   132dc:	20003f04 	.word	0x20003f04

000132e0 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   132e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   132e4:	1e1d      	subs	r5, r3, #0
{
   132e6:	b085      	sub	sp, #20
   132e8:	4607      	mov	r7, r0
   132ea:	460c      	mov	r4, r1
   132ec:	4692      	mov	sl, r2
	if (timeout > 0) {
   132ee:	dd4c      	ble.n	1338a <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   132f0:	f000 fc16 	bl	13b20 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   132f4:	f105 0309 	add.w	r3, r5, #9
   132f8:	220a      	movs	r2, #10
   132fa:	fbb3 f3f2 	udiv	r3, r3, r2
   132fe:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   13302:	4b23      	ldr	r3, [pc, #140]	; (13390 <k_mem_pool_alloc+0xb0>)
   13304:	4e23      	ldr	r6, [pc, #140]	; (13394 <k_mem_pool_alloc+0xb4>)
   13306:	1afb      	subs	r3, r7, r3
   13308:	109b      	asrs	r3, r3, #2
   1330a:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   1330c:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1330e:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   13312:	9400      	str	r4, [sp, #0]
   13314:	ab03      	add	r3, sp, #12
   13316:	aa02      	add	r2, sp, #8
   13318:	4651      	mov	r1, sl
   1331a:	4638      	mov	r0, r7
   1331c:	f7ed fb42 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   13320:	f110 0f0b 	cmn.w	r0, #11
   13324:	d10b      	bne.n	1333e <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   13326:	9400      	str	r4, [sp, #0]
   13328:	ab03      	add	r3, sp, #12
   1332a:	aa02      	add	r2, sp, #8
   1332c:	4651      	mov	r1, sl
   1332e:	4638      	mov	r0, r7
   13330:	f7ed fb38 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   13334:	f110 0f0b 	cmn.w	r0, #11
   13338:	bf08      	it	eq
   1333a:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   1333e:	7963      	ldrb	r3, [r4, #5]
   13340:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   13342:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   13344:	f362 0303 	bfi	r3, r2, #0, #4
   13348:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   1334a:	6863      	ldr	r3, [r4, #4]
   1334c:	9a03      	ldr	r2, [sp, #12]
   1334e:	f362 331f 	bfi	r3, r2, #12, #20
   13352:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   13354:	b1b0      	cbz	r0, 13384 <k_mem_pool_alloc+0xa4>
   13356:	b1ad      	cbz	r5, 13384 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   13358:	f110 0f0c 	cmn.w	r0, #12
   1335c:	d112      	bne.n	13384 <k_mem_pool_alloc+0xa4>
   1335e:	f04f 0320 	mov.w	r3, #32
   13362:	f3ef 8011 	mrs	r0, BASEPRI
   13366:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1336a:	462a      	mov	r2, r5
   1336c:	4659      	mov	r1, fp
   1336e:	f000 faeb 	bl	13948 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   13372:	1c6b      	adds	r3, r5, #1
   13374:	d0cd      	beq.n	13312 <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   13376:	f000 fbd3 	bl	13b20 <_tick_get>

			if (timeout < 0) {
   1337a:	ebb8 0500 	subs.w	r5, r8, r0
   1337e:	d5c8      	bpl.n	13312 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   13380:	f06f 000a 	mvn.w	r0, #10
}
   13384:	b005      	add	sp, #20
   13386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   1338a:	f04f 0800 	mov.w	r8, #0
   1338e:	e7b8      	b.n	13302 <k_mem_pool_alloc+0x22>
   13390:	20003f04 	.word	0x20003f04
   13394:	b6db6db7 	.word	0xb6db6db7

00013398 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   13398:	b570      	push	{r4, r5, r6, lr}
   1339a:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1339c:	6802      	ldr	r2, [r0, #0]
   1339e:	7841      	ldrb	r1, [r0, #1]
   133a0:	4e13      	ldr	r6, [pc, #76]	; (133f0 <k_mem_pool_free_id+0x58>)
   133a2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   133a6:	00a4      	lsls	r4, r4, #2
   133a8:	0b12      	lsrs	r2, r2, #12
   133aa:	f001 010f 	and.w	r1, r1, #15
   133ae:	1930      	adds	r0, r6, r4
   133b0:	f7ed fbaa 	bl	b08 <_sys_mem_pool_block_free>
   133b4:	f04f 0320 	mov.w	r3, #32
   133b8:	f3ef 8511 	mrs	r5, BASEPRI
   133bc:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   133c0:	f104 0014 	add.w	r0, r4, #20
   133c4:	4430      	add	r0, r6
   133c6:	f000 fb05 	bl	139d4 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   133ca:	b140      	cbz	r0, 133de <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   133cc:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   133d0:	2b0d      	cmp	r3, #13
   133d2:	d804      	bhi.n	133de <k_mem_pool_free_id+0x46>
   133d4:	b133      	cbz	r3, 133e4 <k_mem_pool_free_id+0x4c>
   133d6:	4b07      	ldr	r3, [pc, #28]	; (133f4 <k_mem_pool_free_id+0x5c>)
   133d8:	685b      	ldr	r3, [r3, #4]
   133da:	051b      	lsls	r3, r3, #20
   133dc:	d402      	bmi.n	133e4 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   133de:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   133e2:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   133e4:	4628      	mov	r0, r5
}
   133e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   133ea:	f000 b9a7 	b.w	1373c <_reschedule>
   133ee:	bf00      	nop
   133f0:	20003f04 	.word	0x20003f04
   133f4:	e000ed00 	.word	0xe000ed00

000133f8 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   133f8:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   133fa:	1d0a      	adds	r2, r1, #4
   133fc:	d204      	bcs.n	13408 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   133fe:	2300      	movs	r3, #0
   13400:	4669      	mov	r1, sp
   13402:	f7ff ff6d 	bl	132e0 <k_mem_pool_alloc>
   13406:	b118      	cbz	r0, 13410 <k_mem_pool_malloc+0x18>
		return NULL;
   13408:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   1340a:	b003      	add	sp, #12
   1340c:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   13410:	2204      	movs	r2, #4
   13412:	eb0d 0102 	add.w	r1, sp, r2
   13416:	9800      	ldr	r0, [sp, #0]
   13418:	f7ee fbf0 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   1341c:	9800      	ldr	r0, [sp, #0]
   1341e:	3004      	adds	r0, #4
   13420:	e7f3      	b.n	1340a <k_mem_pool_malloc+0x12>

00013422 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   13422:	b110      	cbz	r0, 1342a <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   13424:	3804      	subs	r0, #4
   13426:	f7ff bfb7 	b.w	13398 <k_mem_pool_free_id>
   1342a:	4770      	bx	lr

0001342c <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   1342c:	4b03      	ldr	r3, [pc, #12]	; (1343c <z_thread_malloc+0x10>)
   1342e:	689b      	ldr	r3, [r3, #8]
{
   13430:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   13432:	6e58      	ldr	r0, [r3, #100]	; 0x64
   13434:	b108      	cbz	r0, 1343a <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   13436:	f7ff bfdf 	b.w	133f8 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1343a:	4770      	bx	lr
   1343c:	20001948 	.word	0x20001948

00013440 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   13440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13442:	4605      	mov	r5, r0
   13444:	460f      	mov	r7, r1
   13446:	4614      	mov	r4, r2
	__asm__ volatile(
   13448:	f04f 0220 	mov.w	r2, #32
   1344c:	f3ef 8611 	mrs	r6, BASEPRI
   13450:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   13454:	b1a3      	cbz	r3, 13480 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   13456:	2008      	movs	r0, #8
   13458:	f7ff ffe8 	bl	1342c <z_thread_malloc>
		if (!anode) {
   1345c:	2800      	cmp	r0, #0
   1345e:	d034      	beq.n	134ca <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   13460:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   13462:	6044      	str	r4, [r0, #4]
   13464:	6003      	str	r3, [r0, #0]
   13466:	4604      	mov	r4, r0
   13468:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   1346a:	b95f      	cbnz	r7, 13484 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1346c:	682a      	ldr	r2, [r5, #0]
   1346e:	f003 0303 	and.w	r3, r3, #3
   13472:	4313      	orrs	r3, r2
   13474:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   13476:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   13478:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1347a:	b973      	cbnz	r3, 1349a <queue_insert+0x5a>
	list->tail = node;
   1347c:	606c      	str	r4, [r5, #4]
   1347e:	e00c      	b.n	1349a <queue_insert+0x5a>
	node->next_and_flags = flags;
   13480:	6023      	str	r3, [r4, #0]
   13482:	e7f1      	b.n	13468 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13484:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   13486:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1348a:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   1348e:	d114      	bne.n	134ba <queue_insert+0x7a>
   13490:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13492:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   13494:	b95a      	cbnz	r2, 134ae <queue_insert+0x6e>
	list->tail = node;
   13496:	606c      	str	r4, [r5, #4]
	list->head = node;
   13498:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   1349a:	2104      	movs	r1, #4
   1349c:	f105 0008 	add.w	r0, r5, #8
   134a0:	f000 ffb4 	bl	1440c <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   134a4:	4630      	mov	r0, r6
   134a6:	f000 f949 	bl	1373c <_reschedule>
	return 0;
   134aa:	2000      	movs	r0, #0
   134ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   134ae:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   134b0:	f003 0303 	and.w	r3, r3, #3
   134b4:	4323      	orrs	r3, r4
   134b6:	6013      	str	r3, [r2, #0]
   134b8:	e7e0      	b.n	1347c <queue_insert+0x3c>
   134ba:	4313      	orrs	r3, r2
   134bc:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   134be:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   134c0:	f002 0203 	and.w	r2, r2, #3
   134c4:	4314      	orrs	r4, r2
   134c6:	603c      	str	r4, [r7, #0]
   134c8:	e7e7      	b.n	1349a <queue_insert+0x5a>
			return -ENOMEM;
   134ca:	f06f 000b 	mvn.w	r0, #11
}
   134ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000134d0 <z_queue_node_peek>:
{
   134d0:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   134d2:	4604      	mov	r4, r0
   134d4:	b130      	cbz	r0, 134e4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   134d6:	6802      	ldr	r2, [r0, #0]
   134d8:	0793      	lsls	r3, r2, #30
   134da:	d003      	beq.n	134e4 <z_queue_node_peek+0x14>
		ret = anode->data;
   134dc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   134de:	b109      	cbz	r1, 134e4 <z_queue_node_peek+0x14>
			k_free(anode);
   134e0:	f7ff ff9f 	bl	13422 <k_free>
}
   134e4:	4620      	mov	r0, r4
   134e6:	bd10      	pop	{r4, pc}

000134e8 <_impl_k_queue_init>:
	list->head = NULL;
   134e8:	2300      	movs	r3, #0
   134ea:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   134ec:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   134ee:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   134f2:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   134f4:	60c3      	str	r3, [r0, #12]
   134f6:	4770      	bx	lr

000134f8 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   134f8:	460a      	mov	r2, r1
   134fa:	2300      	movs	r3, #0
   134fc:	6841      	ldr	r1, [r0, #4]
   134fe:	f7ff bf9f 	b.w	13440 <queue_insert>

00013502 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   13502:	2300      	movs	r3, #0
   13504:	460a      	mov	r2, r1
   13506:	4619      	mov	r1, r3
   13508:	f7ff bf9a 	b.w	13440 <queue_insert>

0001350c <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1350c:	b538      	push	{r3, r4, r5, lr}
   1350e:	f04f 0320 	mov.w	r3, #32
   13512:	f3ef 8511 	mrs	r5, BASEPRI
   13516:	f383 8811 	msr	BASEPRI, r3
   1351a:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   1351c:	b953      	cbnz	r3, 13534 <k_queue_append_list+0x28>
	list->head = node;
   1351e:	6001      	str	r1, [r0, #0]
	list->tail = node;
   13520:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   13522:	2104      	movs	r1, #4
   13524:	3008      	adds	r0, #8
   13526:	f000 ff71 	bl	1440c <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   1352a:	4628      	mov	r0, r5
}
   1352c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   13530:	f000 b904 	b.w	1373c <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13534:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13536:	f004 0403 	and.w	r4, r4, #3
   1353a:	4321      	orrs	r1, r4
   1353c:	6019      	str	r1, [r3, #0]
   1353e:	e7ef      	b.n	13520 <k_queue_append_list+0x14>

00013540 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   13540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13544:	4604      	mov	r4, r0
   13546:	b086      	sub	sp, #24
   13548:	460d      	mov	r5, r1
   1354a:	f04f 0320 	mov.w	r3, #32
   1354e:	f3ef 8711 	mrs	r7, BASEPRI
   13552:	f383 8811 	msr	BASEPRI, r3
   13556:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   13558:	b182      	cbz	r2, 1357c <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1355a:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1355c:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1355e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13562:	428a      	cmp	r2, r1
	list->head = node;
   13564:	6003      	str	r3, [r0, #0]
	list->tail = node;
   13566:	bf08      	it	eq
   13568:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1356a:	2101      	movs	r1, #1
   1356c:	4610      	mov	r0, r2
   1356e:	f7ff ffaf 	bl	134d0 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13572:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   13576:	b006      	add	sp, #24
   13578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1357c:	b919      	cbnz	r1, 13586 <_impl_k_queue_get+0x46>
   1357e:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   13582:	2000      	movs	r0, #0
   13584:	e7f7      	b.n	13576 <_impl_k_queue_get+0x36>
   13586:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1358a:	2104      	movs	r1, #4
   1358c:	4603      	mov	r3, r0
   1358e:	eb0d 0001 	add.w	r0, sp, r1
   13592:	f000 fea4 	bl	142de <k_poll_event_init>
	if (timeout != K_FOREVER) {
   13596:	1c6a      	adds	r2, r5, #1
   13598:	d002      	beq.n	135a0 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1359a:	f000 fab7 	bl	13b0c <_impl_k_uptime_get_32>
   1359e:	4606      	mov	r6, r0
{
   135a0:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   135a2:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   135a6:	1bea      	subs	r2, r5, r7
   135a8:	f36f 1307 	bfc	r3, #4, #4
   135ac:	2101      	movs	r1, #1
   135ae:	a801      	add	r0, sp, #4
   135b0:	f88d 3011 	strb.w	r3, [sp, #17]
   135b4:	f000 fea6 	bl	14304 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   135b8:	b108      	cbz	r0, 135be <_impl_k_queue_get+0x7e>
   135ba:	300b      	adds	r0, #11
   135bc:	d1e1      	bne.n	13582 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   135be:	f04f 0320 	mov.w	r3, #32
   135c2:	f3ef 8811 	mrs	r8, BASEPRI
   135c6:	f383 8811 	msr	BASEPRI, r3
   135ca:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   135cc:	b138      	cbz	r0, 135de <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   135ce:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   135d0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   135d2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   135d6:	4290      	cmp	r0, r2
	list->head = node;
   135d8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   135da:	bf08      	it	eq
   135dc:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   135de:	2101      	movs	r1, #1
   135e0:	f7ff ff76 	bl	134d0 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   135e4:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   135e8:	2800      	cmp	r0, #0
   135ea:	d1c4      	bne.n	13576 <_impl_k_queue_get+0x36>
   135ec:	1c6b      	adds	r3, r5, #1
   135ee:	d0d8      	beq.n	135a2 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   135f0:	f000 fa8c 	bl	13b0c <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   135f4:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   135f6:	42bd      	cmp	r5, r7
   135f8:	dad3      	bge.n	135a2 <_impl_k_queue_get+0x62>
   135fa:	e7c2      	b.n	13582 <_impl_k_queue_get+0x42>

000135fc <sys_dlist_remove>:
	node->prev->next = node->next;
   135fc:	e890 000c 	ldmia.w	r0, {r2, r3}
   13600:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13602:	6802      	ldr	r2, [r0, #0]
   13604:	6053      	str	r3, [r2, #4]
   13606:	4770      	bx	lr

00013608 <_abort_timeout>:
{
   13608:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1360a:	6900      	ldr	r0, [r0, #16]
{
   1360c:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1360e:	1c43      	adds	r3, r0, #1
   13610:	d00e      	beq.n	13630 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13612:	4b08      	ldr	r3, [pc, #32]	; (13634 <_abort_timeout+0x2c>)
   13614:	699b      	ldr	r3, [r3, #24]
   13616:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   13618:	bf1f      	itttt	ne
   1361a:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1361c:	6913      	ldrne	r3, [r2, #16]
   1361e:	18c0      	addne	r0, r0, r3
   13620:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   13622:	4608      	mov	r0, r1
   13624:	f7ff ffea 	bl	135fc <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   13628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1362c:	610b      	str	r3, [r1, #16]
	return 0;
   1362e:	2000      	movs	r0, #0
}
   13630:	bd08      	pop	{r3, pc}
   13632:	bf00      	nop
   13634:	20001948 	.word	0x20001948

00013638 <k_spin_lock.isra.11>:
	__asm__ volatile(
   13638:	f04f 0320 	mov.w	r3, #32
   1363c:	f3ef 8011 	mrs	r0, BASEPRI
   13640:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   13644:	4770      	bx	lr
	...

00013648 <update_cache>:
	return list->head == list;
   13648:	4b0d      	ldr	r3, [pc, #52]	; (13680 <update_cache+0x38>)
   1364a:	4619      	mov	r1, r3
   1364c:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13650:	428a      	cmp	r2, r1
   13652:	d000      	beq.n	13656 <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   13654:	b902      	cbnz	r2, 13658 <update_cache+0x10>
   13656:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   13658:	b970      	cbnz	r0, 13678 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   1365a:	6899      	ldr	r1, [r3, #8]
   1365c:	b161      	cbz	r1, 13678 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   1365e:	7a48      	ldrb	r0, [r1, #9]
   13660:	06c0      	lsls	r0, r0, #27
   13662:	d109      	bne.n	13678 <update_cache+0x30>
   13664:	6a48      	ldr	r0, [r1, #36]	; 0x24
   13666:	3001      	adds	r0, #1
   13668:	d106      	bne.n	13678 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   1366a:	8948      	ldrh	r0, [r1, #10]
   1366c:	287f      	cmp	r0, #127	; 0x7f
   1366e:	d903      	bls.n	13678 <update_cache+0x30>
	return thread == _idle_thread;
   13670:	4804      	ldr	r0, [pc, #16]	; (13684 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   13672:	6800      	ldr	r0, [r0, #0]
   13674:	4281      	cmp	r1, r0
   13676:	d101      	bne.n	1367c <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   13678:	621a      	str	r2, [r3, #32]
   1367a:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   1367c:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1367e:	4770      	bx	lr
   13680:	20001948 	.word	0x20001948
   13684:	00017e8c 	.word	0x00017e8c

00013688 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   13688:	f990 000a 	ldrsb.w	r0, [r0, #10]
   1368c:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   13690:	4298      	cmp	r0, r3
   13692:	bfac      	ite	ge
   13694:	2000      	movge	r0, #0
   13696:	2001      	movlt	r0, #1
   13698:	4770      	bx	lr
	...

0001369c <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   1369c:	b510      	push	{r4, lr}
   1369e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   136a0:	f7ff ffca 	bl	13638 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   136a4:	7a4b      	ldrb	r3, [r1, #9]
   136a6:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   136a8:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   136aa:	d50d      	bpl.n	136c8 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   136ac:	4608      	mov	r0, r1
   136ae:	f7ff ffa5 	bl	135fc <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   136b2:	7a4b      	ldrb	r3, [r1, #9]
   136b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   136b8:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   136ba:	4b05      	ldr	r3, [pc, #20]	; (136d0 <_remove_thread_from_ready_q+0x34>)
   136bc:	6898      	ldr	r0, [r3, #8]
   136be:	1a43      	subs	r3, r0, r1
   136c0:	4258      	negs	r0, r3
   136c2:	4158      	adcs	r0, r3
   136c4:	f7ff ffc0 	bl	13648 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   136c8:	f384 8811 	msr	BASEPRI, r4
   136cc:	bd10      	pop	{r4, pc}
   136ce:	bf00      	nop
   136d0:	20001948 	.word	0x20001948

000136d4 <_find_first_thread_to_unpend>:
{
   136d4:	b508      	push	{r3, lr}
   136d6:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   136d8:	f7ff ffae 	bl	13638 <k_spin_lock.isra.11>
	return list->head == list;
   136dc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   136de:	429a      	cmp	r2, r3
   136e0:	bf08      	it	eq
   136e2:	2300      	moveq	r3, #0
   136e4:	f380 8811 	msr	BASEPRI, r0
}
   136e8:	4618      	mov	r0, r3
   136ea:	bd08      	pop	{r3, pc}

000136ec <_unpend_thread_no_timeout>:
{
   136ec:	b510      	push	{r4, lr}
   136ee:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   136f0:	f7ff ffa2 	bl	13638 <k_spin_lock.isra.11>
   136f4:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   136f6:	4608      	mov	r0, r1
   136f8:	f7ff ff80 	bl	135fc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   136fc:	7a4b      	ldrb	r3, [r1, #9]
   136fe:	f023 0302 	bic.w	r3, r3, #2
   13702:	724b      	strb	r3, [r1, #9]
   13704:	f384 8811 	msr	BASEPRI, r4
   13708:	bd10      	pop	{r4, pc}

0001370a <_unpend_first_thread>:
{
   1370a:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   1370c:	2100      	movs	r1, #0
   1370e:	f7ff ffe1 	bl	136d4 <_find_first_thread_to_unpend>

	if (thread) {
   13712:	4604      	mov	r4, r0
   13714:	b128      	cbz	r0, 13722 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   13716:	f7ff ffe9 	bl	136ec <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   1371a:	f104 0014 	add.w	r0, r4, #20
   1371e:	f7ff ff73 	bl	13608 <_abort_timeout>
}
   13722:	4620      	mov	r0, r4
   13724:	bd10      	pop	{r4, pc}

00013726 <_unpend_thread>:
{
   13726:	b510      	push	{r4, lr}
   13728:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   1372a:	f7ff ffdf 	bl	136ec <_unpend_thread_no_timeout>
   1372e:	f104 0014 	add.w	r0, r4, #20
}
   13732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13736:	f7ff bf67 	b.w	13608 <_abort_timeout>
	...

0001373c <_reschedule>:
   1373c:	f3ef 8305 	mrs	r3, IPSR
   13740:	2b0d      	cmp	r3, #13
   13742:	d809      	bhi.n	13758 <_reschedule+0x1c>
   13744:	b11b      	cbz	r3, 1374e <_reschedule+0x12>
   13746:	4b09      	ldr	r3, [pc, #36]	; (1376c <_reschedule+0x30>)
   13748:	685b      	ldr	r3, [r3, #4]
   1374a:	051b      	lsls	r3, r3, #20
   1374c:	d504      	bpl.n	13758 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   1374e:	4b08      	ldr	r3, [pc, #32]	; (13770 <_reschedule+0x34>)
   13750:	689a      	ldr	r2, [r3, #8]
   13752:	6a1b      	ldr	r3, [r3, #32]
   13754:	429a      	cmp	r2, r3
   13756:	d103      	bne.n	13760 <_reschedule+0x24>
   13758:	f380 8811 	msr	BASEPRI, r0
}
   1375c:	2000      	movs	r0, #0
   1375e:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13760:	4b04      	ldr	r3, [pc, #16]	; (13774 <_reschedule+0x38>)
   13762:	2200      	movs	r2, #0
   13764:	601a      	str	r2, [r3, #0]
   13766:	f7ed becf 	b.w	1508 <__swap>
   1376a:	bf00      	nop
   1376c:	e000ed00 	.word	0xe000ed00
   13770:	20001948 	.word	0x20001948
   13774:	2000197c 	.word	0x2000197c

00013778 <k_sched_unlock>:
{
   13778:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   1377a:	f7ff ff5d 	bl	13638 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   1377e:	4b0a      	ldr	r3, [pc, #40]	; (137a8 <k_sched_unlock+0x30>)
   13780:	689a      	ldr	r2, [r3, #8]
   13782:	7ad3      	ldrb	r3, [r2, #11]
   13784:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   13786:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   13788:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   1378a:	2001      	movs	r0, #1
   1378c:	f7ff ff5c 	bl	13648 <update_cache>
   13790:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   13794:	f04f 0320 	mov.w	r3, #32
   13798:	f3ef 8011 	mrs	r0, BASEPRI
   1379c:	f383 8811 	msr	BASEPRI, r3
}
   137a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   137a4:	f7ff bfca 	b.w	1373c <_reschedule>
   137a8:	20001948 	.word	0x20001948

000137ac <_priq_dumb_add>:
{
   137ac:	b510      	push	{r4, lr}
	return list->head == list;
   137ae:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   137b0:	4298      	cmp	r0, r3
   137b2:	bf08      	it	eq
   137b4:	2300      	moveq	r3, #0
   137b6:	b193      	cbz	r3, 137de <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   137b8:	f991 400a 	ldrsb.w	r4, [r1, #10]
   137bc:	f993 200a 	ldrsb.w	r2, [r3, #10]
   137c0:	4294      	cmp	r4, r2
   137c2:	da06      	bge.n	137d2 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   137c4:	685a      	ldr	r2, [r3, #4]
   137c6:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   137c8:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   137ca:	685a      	ldr	r2, [r3, #4]
   137cc:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   137ce:	6059      	str	r1, [r3, #4]
   137d0:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   137d2:	6842      	ldr	r2, [r0, #4]
   137d4:	4293      	cmp	r3, r2
   137d6:	d002      	beq.n	137de <_priq_dumb_add+0x32>
   137d8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   137da:	2b00      	cmp	r3, #0
   137dc:	d1eb      	bne.n	137b6 <_priq_dumb_add+0xa>
	node->next = list;
   137de:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   137e0:	6843      	ldr	r3, [r0, #4]
   137e2:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   137e4:	6843      	ldr	r3, [r0, #4]
   137e6:	6019      	str	r1, [r3, #0]
	list->tail = node;
   137e8:	6041      	str	r1, [r0, #4]
   137ea:	bd10      	pop	{r4, pc}

000137ec <_add_thread_to_ready_q>:
{
   137ec:	b538      	push	{r3, r4, r5, lr}
   137ee:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   137f0:	f7ff ff22 	bl	13638 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   137f4:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   137f6:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   137f8:	4806      	ldr	r0, [pc, #24]	; (13814 <_add_thread_to_ready_q+0x28>)
   137fa:	f7ff ffd7 	bl	137ac <_priq_dumb_add>
	thread->base.thread_state |= states;
   137fe:	7a63      	ldrb	r3, [r4, #9]
   13800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13804:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13806:	2000      	movs	r0, #0
   13808:	f7ff ff1e 	bl	13648 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1380c:	f385 8811 	msr	BASEPRI, r5
   13810:	bd38      	pop	{r3, r4, r5, pc}
   13812:	bf00      	nop
   13814:	2000196c 	.word	0x2000196c

00013818 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13818:	7a42      	ldrb	r2, [r0, #9]
   1381a:	06d2      	lsls	r2, r2, #27
   1381c:	d104      	bne.n	13828 <_ready_thread+0x10>
   1381e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13820:	3301      	adds	r3, #1
   13822:	d101      	bne.n	13828 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13824:	f7ff bfe2 	b.w	137ec <_add_thread_to_ready_q>
   13828:	4770      	bx	lr
	...

0001382c <_add_timeout>:
{
   1382c:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1382e:	610b      	str	r3, [r1, #16]
{
   13830:	4604      	mov	r4, r0
   13832:	461d      	mov	r5, r3
	timeout->thread = thread;
   13834:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13836:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   13838:	bb03      	cbnz	r3, 1387c <_add_timeout+0x50>
	__asm__ volatile(
   1383a:	f04f 0320 	mov.w	r3, #32
   1383e:	f3ef 8611 	mrs	r6, BASEPRI
   13842:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   13846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1384a:	610b      	str	r3, [r1, #16]
	if (thread) {
   1384c:	b170      	cbz	r0, 1386c <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   1384e:	68cb      	ldr	r3, [r1, #12]
   13850:	b113      	cbz	r3, 13858 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   13852:	f7ff ff4b 	bl	136ec <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   13856:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13858:	7a63      	ldrb	r3, [r4, #9]
   1385a:	f023 0304 	bic.w	r3, r3, #4
   1385e:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   13860:	4620      	mov	r0, r4
   13862:	f7ff ffd9 	bl	13818 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13866:	f386 8811 	msr	BASEPRI, r6
   1386a:	bd70      	pop	{r4, r5, r6, pc}
   1386c:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   13870:	694b      	ldr	r3, [r1, #20]
   13872:	b32b      	cbz	r3, 138c0 <_add_timeout+0x94>
			timeout->func(timeout);
   13874:	4608      	mov	r0, r1
}
   13876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   1387a:	4718      	bx	r3
	return list->head == list;
   1387c:	4a11      	ldr	r2, [pc, #68]	; (138c4 <_add_timeout+0x98>)
   1387e:	4610      	mov	r0, r2
   13880:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13884:	4283      	cmp	r3, r0
   13886:	d10c      	bne.n	138a2 <_add_timeout+0x76>
	node->next = list;
   13888:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   1388a:	6993      	ldr	r3, [r2, #24]
   1388c:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1388e:	6993      	ldr	r3, [r2, #24]
   13890:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13892:	6191      	str	r1, [r2, #24]
   13894:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   13896:	1b64      	subs	r4, r4, r5
   13898:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   1389a:	6994      	ldr	r4, [r2, #24]
   1389c:	42a3      	cmp	r3, r4
   1389e:	d0f3      	beq.n	13888 <_add_timeout+0x5c>
   138a0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   138a2:	2b00      	cmp	r3, #0
   138a4:	d0f0      	beq.n	13888 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   138a6:	690c      	ldr	r4, [r1, #16]
   138a8:	691d      	ldr	r5, [r3, #16]
   138aa:	42ac      	cmp	r4, r5
   138ac:	dcf3      	bgt.n	13896 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   138ae:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   138b0:	1b2c      	subs	r4, r5, r4
   138b2:	611c      	str	r4, [r3, #16]
   138b4:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   138b6:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   138b8:	685a      	ldr	r2, [r3, #4]
   138ba:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   138bc:	6059      	str	r1, [r3, #4]
   138be:	bd70      	pop	{r4, r5, r6, pc}
   138c0:	bd70      	pop	{r4, r5, r6, pc}
   138c2:	bf00      	nop
   138c4:	20001948 	.word	0x20001948

000138c8 <_move_thread_to_end_of_prio_q>:
{
   138c8:	b538      	push	{r3, r4, r5, lr}
   138ca:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   138cc:	f7ff feb4 	bl	13638 <k_spin_lock.isra.11>
   138d0:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   138d2:	4620      	mov	r0, r4
   138d4:	f7ff fe92 	bl	135fc <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   138d8:	4621      	mov	r1, r4
   138da:	4806      	ldr	r0, [pc, #24]	; (138f4 <_move_thread_to_end_of_prio_q+0x2c>)
   138dc:	f7ff ff66 	bl	137ac <_priq_dumb_add>
	thread->base.thread_state |= states;
   138e0:	7a63      	ldrb	r3, [r4, #9]
   138e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   138e6:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   138e8:	2000      	movs	r0, #0
   138ea:	f7ff fead 	bl	13648 <update_cache>
   138ee:	f385 8811 	msr	BASEPRI, r5
   138f2:	bd38      	pop	{r3, r4, r5, pc}
   138f4:	2000196c 	.word	0x2000196c

000138f8 <pend>:
{
   138f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138fa:	4605      	mov	r5, r0
   138fc:	4614      	mov	r4, r2
   138fe:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   13900:	f7ff fecc 	bl	1369c <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   13904:	7a6b      	ldrb	r3, [r5, #9]
   13906:	f043 0302 	orr.w	r3, r3, #2
   1390a:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   1390c:	1c63      	adds	r3, r4, #1
   1390e:	d012      	beq.n	13936 <pend+0x3e>
	__asm__ volatile(
   13910:	f04f 0320 	mov.w	r3, #32
   13914:	f3ef 8711 	mrs	r7, BASEPRI
   13918:	f383 8811 	msr	BASEPRI, r3
   1391c:	230a      	movs	r3, #10
   1391e:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13920:	4632      	mov	r2, r6
   13922:	fbb4 f3f3 	udiv	r3, r4, r3
   13926:	f105 0114 	add.w	r1, r5, #20
   1392a:	3301      	adds	r3, #1
   1392c:	4628      	mov	r0, r5
   1392e:	f7ff ff7d 	bl	1382c <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13932:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   13936:	b12e      	cbz	r6, 13944 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   13938:	4629      	mov	r1, r5
   1393a:	4630      	mov	r0, r6
}
   1393c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   13940:	f7ff bf34 	b.w	137ac <_priq_dumb_add>
   13944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00013948 <_pend_current_thread>:
{
   13948:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   1394a:	4b06      	ldr	r3, [pc, #24]	; (13964 <_pend_current_thread+0x1c>)
{
   1394c:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   1394e:	6898      	ldr	r0, [r3, #8]
   13950:	f7ff ffd2 	bl	138f8 <pend>
	_time_slice_elapsed = 0;
   13954:	4b04      	ldr	r3, [pc, #16]	; (13968 <_pend_current_thread+0x20>)
   13956:	2200      	movs	r2, #0
   13958:	4620      	mov	r0, r4
}
   1395a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   1395e:	601a      	str	r2, [r3, #0]
   13960:	f7ed bdd2 	b.w	1508 <__swap>
   13964:	20001948 	.word	0x20001948
   13968:	2000197c 	.word	0x2000197c

0001396c <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   1396c:	4b13      	ldr	r3, [pc, #76]	; (139bc <_is_thread_time_slicing+0x50>)
   1396e:	681b      	ldr	r3, [r3, #0]
   13970:	2b00      	cmp	r3, #0
{
   13972:	b510      	push	{r4, lr}
   13974:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13976:	dd1f      	ble.n	139b8 <_is_thread_time_slicing+0x4c>
   13978:	8943      	ldrh	r3, [r0, #10]
   1397a:	2b7f      	cmp	r3, #127	; 0x7f
   1397c:	d81c      	bhi.n	139b8 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   1397e:	4b10      	ldr	r3, [pc, #64]	; (139c0 <_is_thread_time_slicing+0x54>)
   13980:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13984:	681b      	ldr	r3, [r3, #0]
   13986:	4299      	cmp	r1, r3
   13988:	db16      	blt.n	139b8 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   1398a:	f7ff fe55 	bl	13638 <k_spin_lock.isra.11>
	return list->head == list;
   1398e:	490d      	ldr	r1, [pc, #52]	; (139c4 <_is_thread_time_slicing+0x58>)
   13990:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13994:	428b      	cmp	r3, r1
   13996:	4604      	mov	r4, r0
   13998:	d00a      	beq.n	139b0 <_is_thread_time_slicing+0x44>
		if (next) {
   1399a:	b15b      	cbz	r3, 139b4 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   1399c:	f992 000a 	ldrsb.w	r0, [r2, #10]
   139a0:	f993 300a 	ldrsb.w	r3, [r3, #10]
   139a4:	1ac3      	subs	r3, r0, r3
   139a6:	4258      	negs	r0, r3
   139a8:	4158      	adcs	r0, r3
   139aa:	f384 8811 	msr	BASEPRI, r4
	return ret;
   139ae:	bd10      	pop	{r4, pc}
   139b0:	2000      	movs	r0, #0
   139b2:	e7fa      	b.n	139aa <_is_thread_time_slicing+0x3e>
   139b4:	4618      	mov	r0, r3
   139b6:	e7f8      	b.n	139aa <_is_thread_time_slicing+0x3e>
		return 0;
   139b8:	2000      	movs	r0, #0
}
   139ba:	bd10      	pop	{r4, pc}
   139bc:	20001828 	.word	0x20001828
   139c0:	2000182c 	.word	0x2000182c
   139c4:	20001948 	.word	0x20001948

000139c8 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   139c8:	4b01      	ldr	r3, [pc, #4]	; (139d0 <_update_time_slice_before_swap+0x8>)
   139ca:	2200      	movs	r2, #0
   139cc:	601a      	str	r2, [r3, #0]
   139ce:	4770      	bx	lr
   139d0:	2000197c 	.word	0x2000197c

000139d4 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   139d4:	b538      	push	{r3, r4, r5, lr}
   139d6:	4605      	mov	r5, r0
	int need_sched = 0;
   139d8:	2000      	movs	r0, #0
	return list->head == list;
   139da:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   139dc:	42a5      	cmp	r5, r4
   139de:	d000      	beq.n	139e2 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   139e0:	b904      	cbnz	r4, 139e4 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   139e2:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   139e4:	4620      	mov	r0, r4
   139e6:	f7ff fe9e 	bl	13726 <_unpend_thread>
		_ready_thread(th);
   139ea:	4620      	mov	r0, r4
   139ec:	f7ff ff14 	bl	13818 <_ready_thread>
		need_sched = 1;
   139f0:	2001      	movs	r0, #1
   139f2:	e7f2      	b.n	139da <_unpend_all+0x6>

000139f4 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   139f4:	4b02      	ldr	r3, [pc, #8]	; (13a00 <_sched_init+0xc>)
   139f6:	f103 0224 	add.w	r2, r3, #36	; 0x24
   139fa:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   139fc:	629a      	str	r2, [r3, #40]	; 0x28
   139fe:	4770      	bx	lr
   13a00:	20001948 	.word	0x20001948

00013a04 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   13a04:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   13a06:	4c14      	ldr	r4, [pc, #80]	; (13a58 <_impl_k_yield+0x54>)
   13a08:	4b14      	ldr	r3, [pc, #80]	; (13a5c <_impl_k_yield+0x58>)
   13a0a:	68a2      	ldr	r2, [r4, #8]
   13a0c:	681b      	ldr	r3, [r3, #0]
   13a0e:	429a      	cmp	r2, r3
   13a10:	d00f      	beq.n	13a32 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   13a12:	f7ff fe11 	bl	13638 <k_spin_lock.isra.11>
   13a16:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13a18:	68a0      	ldr	r0, [r4, #8]
   13a1a:	f7ff fdef 	bl	135fc <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13a1e:	68a1      	ldr	r1, [r4, #8]
   13a20:	f104 0024 	add.w	r0, r4, #36	; 0x24
   13a24:	f7ff fec2 	bl	137ac <_priq_dumb_add>
			update_cache(1);
   13a28:	2001      	movs	r0, #1
   13a2a:	f7ff fe0d 	bl	13648 <update_cache>
   13a2e:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   13a32:	6a22      	ldr	r2, [r4, #32]
   13a34:	68a3      	ldr	r3, [r4, #8]
   13a36:	429a      	cmp	r2, r3
   13a38:	d00c      	beq.n	13a54 <_impl_k_yield+0x50>
	__asm__ volatile(
   13a3a:	f04f 0320 	mov.w	r3, #32
   13a3e:	f3ef 8011 	mrs	r0, BASEPRI
   13a42:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   13a46:	4b06      	ldr	r3, [pc, #24]	; (13a60 <_impl_k_yield+0x5c>)
   13a48:	2200      	movs	r2, #0
   13a4a:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   13a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13a50:	f7ed bd5a 	b.w	1508 <__swap>
   13a54:	bd38      	pop	{r3, r4, r5, pc}
   13a56:	bf00      	nop
   13a58:	20001948 	.word	0x20001948
   13a5c:	00017e8c 	.word	0x00017e8c
   13a60:	2000197c 	.word	0x2000197c

00013a64 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   13a64:	4b01      	ldr	r3, [pc, #4]	; (13a6c <_impl_k_current_get+0x8>)
   13a66:	6898      	ldr	r0, [r3, #8]
   13a68:	4770      	bx	lr
   13a6a:	bf00      	nop
   13a6c:	20001948 	.word	0x20001948

00013a70 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   13a70:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   13a74:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   13a76:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   13a78:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13a7a:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   13a7c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   13a7e:	6143      	str	r3, [r0, #20]
   13a80:	4770      	bx	lr

00013a82 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   13a82:	b570      	push	{r4, r5, r6, lr}
   13a84:	4604      	mov	r4, r0
   13a86:	f04f 0320 	mov.w	r3, #32
   13a8a:	f3ef 8611 	mrs	r6, BASEPRI
   13a8e:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   13a92:	f7ff fe3a 	bl	1370a <_unpend_first_thread>
	if (thread) {
   13a96:	4605      	mov	r5, r0
   13a98:	b160      	cbz	r0, 13ab4 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   13a9a:	7a43      	ldrb	r3, [r0, #9]
   13a9c:	06db      	lsls	r3, r3, #27
   13a9e:	d102      	bne.n	13aa6 <_impl_k_sem_give+0x24>
   13aa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13aa2:	3301      	adds	r3, #1
   13aa4:	d012      	beq.n	13acc <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13aa6:	2300      	movs	r3, #0
   13aa8:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   13aaa:	4630      	mov	r0, r6
}
   13aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   13ab0:	f7ff be44 	b.w	1373c <_reschedule>
	sem->count += (sem->count != sem->limit);
   13ab4:	68a3      	ldr	r3, [r4, #8]
   13ab6:	68e2      	ldr	r2, [r4, #12]
   13ab8:	429a      	cmp	r2, r3
   13aba:	bf18      	it	ne
   13abc:	3301      	addne	r3, #1
   13abe:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   13ac0:	2102      	movs	r1, #2
   13ac2:	f104 0010 	add.w	r0, r4, #16
   13ac6:	f000 fca1 	bl	1440c <_handle_obj_poll_events>
   13aca:	e7ee      	b.n	13aaa <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   13acc:	f7ff fe8e 	bl	137ec <_add_thread_to_ready_q>
   13ad0:	e7e9      	b.n	13aa6 <_impl_k_sem_give+0x24>

00013ad2 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   13ad2:	b410      	push	{r4}
   13ad4:	460a      	mov	r2, r1
   13ad6:	4604      	mov	r4, r0
   13ad8:	f04f 0320 	mov.w	r3, #32
   13adc:	f3ef 8011 	mrs	r0, BASEPRI
   13ae0:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   13ae4:	68a3      	ldr	r3, [r4, #8]
   13ae6:	b133      	cbz	r3, 13af6 <_impl_k_sem_take+0x24>
		sem->count--;
   13ae8:	3b01      	subs	r3, #1
   13aea:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13aec:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   13af0:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   13af2:	bc10      	pop	{r4}
   13af4:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   13af6:	b921      	cbnz	r1, 13b02 <_impl_k_sem_take+0x30>
   13af8:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   13afc:	f06f 000f 	mvn.w	r0, #15
   13b00:	e7f7      	b.n	13af2 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13b02:	4621      	mov	r1, r4
}
   13b04:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13b06:	f7ff bf1f 	b.w	13948 <_pend_current_thread>
	...

00013b0c <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   13b0c:	4b03      	ldr	r3, [pc, #12]	; (13b1c <_impl_k_uptime_get_32+0x10>)
   13b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   13b12:	230a      	movs	r3, #10
   13b14:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   13b18:	4770      	bx	lr
   13b1a:	bf00      	nop
   13b1c:	20001980 	.word	0x20001980

00013b20 <_tick_get>:
	__asm__ volatile(
   13b20:	f04f 0220 	mov.w	r2, #32
   13b24:	f3ef 8311 	mrs	r3, BASEPRI
   13b28:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   13b2c:	4a02      	ldr	r2, [pc, #8]	; (13b38 <_tick_get+0x18>)
   13b2e:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b32:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   13b36:	4770      	bx	lr
   13b38:	20001980 	.word	0x20001980

00013b3c <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   13b3c:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   13b3e:	f7ff ffef 	bl	13b20 <_tick_get>
   13b42:	240a      	movs	r4, #10
   13b44:	fba0 2304 	umull	r2, r3, r0, r4
   13b48:	fb04 3301 	mla	r3, r4, r1, r3
}
   13b4c:	4610      	mov	r0, r2
   13b4e:	4619      	mov	r1, r3
   13b50:	bd10      	pop	{r4, pc}
	...

00013b54 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   13b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b58:	4607      	mov	r7, r0
   13b5a:	b085      	sub	sp, #20
	__asm__ volatile(
   13b5c:	f04f 0320 	mov.w	r3, #32
   13b60:	f3ef 8011 	mrs	r0, BASEPRI
   13b64:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   13b68:	4961      	ldr	r1, [pc, #388]	; (13cf0 <_nano_sys_clock_tick_announce+0x19c>)
   13b6a:	e9d1 4500 	ldrd	r4, r5, [r1]
   13b6e:	19e2      	adds	r2, r4, r7
   13b70:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   13b74:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b78:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   13b7c:	ae02      	add	r6, sp, #8
   13b7e:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   13b80:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   13b82:	f04f 0320 	mov.w	r3, #32
   13b86:	f3ef 8011 	mrs	r0, BASEPRI
   13b8a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13b8e:	4c59      	ldr	r4, [pc, #356]	; (13cf4 <_nano_sys_clock_tick_announce+0x1a0>)
   13b90:	4621      	mov	r1, r4
   13b92:	4602      	mov	r2, r0
   13b94:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b98:	428b      	cmp	r3, r1
   13b9a:	d000      	beq.n	13b9e <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   13b9c:	b9fb      	cbnz	r3, 13bde <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b9e:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   13ba2:	68a0      	ldr	r0, [r4, #8]
   13ba4:	f7ff fee2 	bl	1396c <_is_thread_time_slicing>
   13ba8:	b1b0      	cbz	r0, 13bd8 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13baa:	4a53      	ldr	r2, [pc, #332]	; (13cf8 <_nano_sys_clock_tick_announce+0x1a4>)
   13bac:	6811      	ldr	r1, [r2, #0]
   13bae:	230a      	movs	r3, #10
   13bb0:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   13bb4:	4b51      	ldr	r3, [pc, #324]	; (13cfc <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13bb6:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   13bb8:	681b      	ldr	r3, [r3, #0]
   13bba:	429f      	cmp	r7, r3
   13bbc:	db0c      	blt.n	13bd8 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   13bbe:	2300      	movs	r3, #0
   13bc0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13bc2:	f04f 0320 	mov.w	r3, #32
   13bc6:	f3ef 8511 	mrs	r5, BASEPRI
   13bca:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   13bce:	68a0      	ldr	r0, [r4, #8]
   13bd0:	f7ff fe7a 	bl	138c8 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13bd4:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   13bd8:	b005      	add	sp, #20
   13bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   13bde:	4d48      	ldr	r5, [pc, #288]	; (13d00 <_nano_sys_clock_tick_announce+0x1ac>)
   13be0:	9501      	str	r5, [sp, #4]
   13be2:	2101      	movs	r1, #1
   13be4:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   13be6:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   13bea:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   13bec:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   13bf0:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   13bf2:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   13bf4:	bfaa      	itet	ge
   13bf6:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   13bfa:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   13bfe:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   13c02:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   13c04:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   13c06:	691d      	ldr	r5, [r3, #16]
   13c08:	4298      	cmp	r0, r3
   13c0a:	bf14      	ite	ne
   13c0c:	6818      	ldrne	r0, [r3, #0]
   13c0e:	2000      	moveq	r0, #0
   13c10:	b9d5      	cbnz	r5, 13c48 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   13c12:	e893 0220 	ldmia.w	r3, {r5, r9}
   13c16:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   13c1a:	681d      	ldr	r5, [r3, #0]
   13c1c:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   13c20:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   13c22:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   13c26:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   13c28:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   13c2a:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   13c2c:	f8c3 c010 	str.w	ip, [r3, #16]
   13c30:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   13c34:	f04f 0320 	mov.w	r3, #32
   13c38:	f3ef 8211 	mrs	r2, BASEPRI
   13c3c:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   13c40:	4603      	mov	r3, r0
   13c42:	2800      	cmp	r0, #0
   13c44:	d1d4      	bne.n	13bf0 <_nano_sys_clock_tick_announce+0x9c>
   13c46:	e001      	b.n	13c4c <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   13c48:	2900      	cmp	r1, #0
   13c4a:	dcf1      	bgt.n	13c30 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13c4c:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13c50:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c52:	42b0      	cmp	r0, r6
   13c54:	d103      	bne.n	13c5e <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   13c56:	9a01      	ldr	r2, [sp, #4]
   13c58:	2300      	movs	r3, #0
   13c5a:	6013      	str	r3, [r2, #0]
   13c5c:	e7a1      	b.n	13ba2 <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13c5e:	2800      	cmp	r0, #0
   13c60:	d0f9      	beq.n	13c56 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   13c62:	9b03      	ldr	r3, [sp, #12]
   13c64:	4298      	cmp	r0, r3
   13c66:	d102      	bne.n	13c6e <_nano_sys_clock_tick_announce+0x11a>
   13c68:	f04f 0b00 	mov.w	fp, #0
   13c6c:	e001      	b.n	13c72 <_nano_sys_clock_tick_announce+0x11e>
   13c6e:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13c72:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   13c76:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   13c7a:	e890 000c 	ldmia.w	r0, {r2, r3}
   13c7e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13c80:	6802      	ldr	r2, [r0, #0]
   13c82:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   13c84:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   13c86:	f04f 0320 	mov.w	r3, #32
   13c8a:	f3ef 8811 	mrs	r8, BASEPRI
   13c8e:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   13c92:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   13c96:	b1d6      	cbz	r6, 13cce <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   13c98:	68c3      	ldr	r3, [r0, #12]
   13c9a:	b123      	cbz	r3, 13ca6 <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   13c9c:	4630      	mov	r0, r6
   13c9e:	f7ff fd25 	bl	136ec <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   13ca2:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13ca6:	7a73      	ldrb	r3, [r6, #9]
   13ca8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13cac:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13cb0:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13cb2:	d102      	bne.n	13cba <_nano_sys_clock_tick_announce+0x166>
   13cb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
   13cb6:	3301      	adds	r3, #1
   13cb8:	d015      	beq.n	13ce6 <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13cba:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13cbe:	f1bb 0f00 	cmp.w	fp, #0
   13cc2:	d0c8      	beq.n	13c56 <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   13cc4:	9b03      	ldr	r3, [sp, #12]
   13cc6:	455b      	cmp	r3, fp
   13cc8:	d108      	bne.n	13cdc <_nano_sys_clock_tick_announce+0x188>
   13cca:	2300      	movs	r3, #0
   13ccc:	e008      	b.n	13ce0 <_nano_sys_clock_tick_announce+0x18c>
   13cce:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   13cd2:	6943      	ldr	r3, [r0, #20]
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d0f2      	beq.n	13cbe <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   13cd8:	4798      	blx	r3
   13cda:	e7f0      	b.n	13cbe <_nano_sys_clock_tick_announce+0x16a>
   13cdc:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13ce0:	4658      	mov	r0, fp
   13ce2:	469b      	mov	fp, r3
   13ce4:	e7c9      	b.n	13c7a <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   13ce6:	4630      	mov	r0, r6
   13ce8:	f7ff fd80 	bl	137ec <_add_thread_to_ready_q>
   13cec:	e7e5      	b.n	13cba <_nano_sys_clock_tick_announce+0x166>
   13cee:	bf00      	nop
   13cf0:	20001980 	.word	0x20001980
   13cf4:	20001948 	.word	0x20001948
   13cf8:	2000197c 	.word	0x2000197c
   13cfc:	20001828 	.word	0x20001828
   13d00:	20001978 	.word	0x20001978

00013d04 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   13d04:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   13d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d0e:	4903      	ldr	r1, [pc, #12]	; (13d1c <k_sys_work_q_init+0x18>)
   13d10:	4803      	ldr	r0, [pc, #12]	; (13d20 <k_sys_work_q_init+0x1c>)
   13d12:	f000 f983 	bl	1401c <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   13d16:	2000      	movs	r0, #0
   13d18:	bd08      	pop	{r3, pc}
   13d1a:	bf00      	nop
   13d1c:	20003620 	.word	0x20003620
   13d20:	20001988 	.word	0x20001988

00013d24 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13d24:	6903      	ldr	r3, [r0, #16]
   13d26:	1c5a      	adds	r2, r3, #1
   13d28:	d011      	beq.n	13d4e <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13d2a:	4a0a      	ldr	r2, [pc, #40]	; (13d54 <_abort_timeout+0x30>)
   13d2c:	6992      	ldr	r2, [r2, #24]
   13d2e:	4290      	cmp	r0, r2
   13d30:	bf1f      	itttt	ne
   13d32:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13d34:	690a      	ldrne	r2, [r1, #16]
   13d36:	189b      	addne	r3, r3, r2
   13d38:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   13d3a:	e890 000c 	ldmia.w	r0, {r2, r3}
   13d3e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13d40:	6802      	ldr	r2, [r0, #0]
   13d42:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d48:	6103      	str	r3, [r0, #16]
	return 0;
   13d4a:	2000      	movs	r0, #0
   13d4c:	4770      	bx	lr
		return _INACTIVE;
   13d4e:	4618      	mov	r0, r3
}
   13d50:	4770      	bx	lr
   13d52:	bf00      	nop
   13d54:	20001948 	.word	0x20001948

00013d58 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13d58:	7a42      	ldrb	r2, [r0, #9]
   13d5a:	06d2      	lsls	r2, r2, #27
   13d5c:	d104      	bne.n	13d68 <_ready_thread+0x10>
   13d5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13d60:	3301      	adds	r3, #1
   13d62:	d101      	bne.n	13d68 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13d64:	f7ff bd42 	b.w	137ec <_add_thread_to_ready_q>
   13d68:	4770      	bx	lr
	...

00013d6c <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   13d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13d6e:	f04f 0320 	mov.w	r3, #32
   13d72:	f3ef 8611 	mrs	r6, BASEPRI
   13d76:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13d7a:	4a19      	ldr	r2, [pc, #100]	; (13de0 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   13d7c:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13d7e:	230a      	movs	r3, #10
   13d80:	3109      	adds	r1, #9
   13d82:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   13d86:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13d88:	6241      	str	r1, [r0, #36]	; 0x24
   13d8a:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13d8c:	2300      	movs	r3, #0
   13d8e:	6203      	str	r3, [r0, #32]
   13d90:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d94:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13d96:	f100 0514 	add.w	r5, r0, #20
   13d9a:	d108      	bne.n	13dae <schedule_new_thread.part.11+0x42>
	node->next = list;
   13d9c:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   13d9e:	6993      	ldr	r3, [r2, #24]
   13da0:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   13da2:	6993      	ldr	r3, [r2, #24]
   13da4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13da6:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13da8:	f386 8811 	msr	BASEPRI, r6
   13dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13dae:	2b00      	cmp	r3, #0
   13db0:	d0f4      	beq.n	13d9c <schedule_new_thread.part.11+0x30>
   13db2:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13db6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   13db8:	691f      	ldr	r7, [r3, #16]
   13dba:	42bc      	cmp	r4, r7
   13dbc:	dc08      	bgt.n	13dd0 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   13dbe:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13dc0:	1b3c      	subs	r4, r7, r4
   13dc2:	611c      	str	r4, [r3, #16]
   13dc4:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   13dc6:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   13dc8:	685a      	ldr	r2, [r3, #4]
   13dca:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   13dcc:	605d      	str	r5, [r3, #4]
   13dce:	e7eb      	b.n	13da8 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   13dd0:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   13dd2:	4573      	cmp	r3, lr
   13dd4:	6244      	str	r4, [r0, #36]	; 0x24
   13dd6:	d0e1      	beq.n	13d9c <schedule_new_thread.part.11+0x30>
   13dd8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13dda:	2b00      	cmp	r3, #0
   13ddc:	d1eb      	bne.n	13db6 <schedule_new_thread.part.11+0x4a>
   13dde:	e7dd      	b.n	13d9c <schedule_new_thread.part.11+0x30>
   13de0:	20001948 	.word	0x20001948

00013de4 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   13de4:	4770      	bx	lr
	...

00013de8 <k_is_in_isr>:
   13de8:	f3ef 8005 	mrs	r0, IPSR
   13dec:	280d      	cmp	r0, #13
   13dee:	d807      	bhi.n	13e00 <k_is_in_isr+0x18>
   13df0:	b138      	cbz	r0, 13e02 <k_is_in_isr+0x1a>
   13df2:	4b04      	ldr	r3, [pc, #16]	; (13e04 <k_is_in_isr+0x1c>)
   13df4:	6858      	ldr	r0, [r3, #4]
   13df6:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   13dfa:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   13dfe:	4770      	bx	lr
   13e00:	2001      	movs	r0, #1
}
   13e02:	4770      	bx	lr
   13e04:	e000ed00 	.word	0xe000ed00

00013e08 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   13e08:	4b02      	ldr	r3, [pc, #8]	; (13e14 <_is_thread_essential+0xc>)
   13e0a:	689b      	ldr	r3, [r3, #8]
   13e0c:	7a18      	ldrb	r0, [r3, #8]
}
   13e0e:	f000 0001 	and.w	r0, r0, #1
   13e12:	4770      	bx	lr
   13e14:	20001948 	.word	0x20001948

00013e18 <_impl_k_thread_start>:
{
   13e18:	b510      	push	{r4, lr}
	__asm__ volatile(
   13e1a:	f04f 0320 	mov.w	r3, #32
   13e1e:	f3ef 8411 	mrs	r4, BASEPRI
   13e22:	f383 8811 	msr	BASEPRI, r3
   13e26:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   13e28:	0759      	lsls	r1, r3, #29
   13e2a:	d402      	bmi.n	13e32 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e2c:	f384 8811 	msr	BASEPRI, r4
   13e30:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13e32:	f023 0304 	bic.w	r3, r3, #4
   13e36:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   13e38:	f7ff ff8e 	bl	13d58 <_ready_thread>
	_reschedule(key);
   13e3c:	4620      	mov	r0, r4
}
   13e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   13e42:	f7ff bc7b 	b.w	1373c <_reschedule>
	...

00013e48 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   13e48:	b530      	push	{r4, r5, lr}
   13e4a:	b087      	sub	sp, #28
   13e4c:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13e4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   13e50:	9504      	str	r5, [sp, #16]
   13e52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13e54:	9503      	str	r5, [sp, #12]
   13e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13e58:	9502      	str	r5, [sp, #8]
   13e5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13e5c:	9501      	str	r5, [sp, #4]
   13e5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   13e60:	9500      	str	r5, [sp, #0]
   13e62:	f7ed fd53 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   13e66:	4b04      	ldr	r3, [pc, #16]	; (13e78 <_setup_new_thread+0x30>)
   13e68:	689b      	ldr	r3, [r3, #8]
   13e6a:	b913      	cbnz	r3, 13e72 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   13e6c:	6663      	str	r3, [r4, #100]	; 0x64
}
   13e6e:	b007      	add	sp, #28
   13e70:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   13e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13e74:	e7fa      	b.n	13e6c <_setup_new_thread+0x24>
   13e76:	bf00      	nop
   13e78:	20001948 	.word	0x20001948

00013e7c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   13e7c:	b570      	push	{r4, r5, r6, lr}
   13e7e:	b086      	sub	sp, #24
   13e80:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13e82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13e84:	9604      	str	r6, [sp, #16]
   13e86:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   13e88:	9603      	str	r6, [sp, #12]
   13e8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13e8c:	9602      	str	r6, [sp, #8]
   13e8e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   13e90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13e92:	9601      	str	r6, [sp, #4]
   13e94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   13e96:	9600      	str	r6, [sp, #0]
   13e98:	f7ff ffd6 	bl	13e48 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   13e9c:	1c6b      	adds	r3, r5, #1
   13e9e:	d003      	beq.n	13ea8 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   13ea0:	b92d      	cbnz	r5, 13eae <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   13ea2:	4620      	mov	r0, r4
   13ea4:	f7ff ffb8 	bl	13e18 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   13ea8:	4620      	mov	r0, r4
   13eaa:	b006      	add	sp, #24
   13eac:	bd70      	pop	{r4, r5, r6, pc}
   13eae:	4629      	mov	r1, r5
   13eb0:	4620      	mov	r0, r4
   13eb2:	f7ff ff5b 	bl	13d6c <schedule_new_thread.part.11>
   13eb6:	e7f7      	b.n	13ea8 <_impl_k_thread_create+0x2c>

00013eb8 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   13eb8:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   13eba:	b510      	push	{r4, lr}
   13ebc:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   13ebe:	b103      	cbz	r3, 13ec2 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   13ec0:	4798      	blx	r3
   13ec2:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13ec4:	06da      	lsls	r2, r3, #27
   13ec6:	d106      	bne.n	13ed6 <_k_thread_single_abort+0x1e>
   13ec8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13eca:	3201      	adds	r2, #1
   13ecc:	d103      	bne.n	13ed6 <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   13ece:	4620      	mov	r0, r4
   13ed0:	f7ff fbe4 	bl	1369c <_remove_thread_from_ready_q>
   13ed4:	e00b      	b.n	13eee <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   13ed6:	079b      	lsls	r3, r3, #30
   13ed8:	d502      	bpl.n	13ee0 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   13eda:	4620      	mov	r0, r4
   13edc:	f7ff fc06 	bl	136ec <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   13ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13ee2:	3301      	adds	r3, #1
   13ee4:	d003      	beq.n	13eee <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   13ee6:	f104 0014 	add.w	r0, r4, #20
   13eea:	f7ff ff1b 	bl	13d24 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   13eee:	7a63      	ldrb	r3, [r4, #9]
   13ef0:	f043 0308 	orr.w	r3, r3, #8
   13ef4:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   13ef6:	bd10      	pop	{r4, pc}

00013ef8 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   13ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   13efa:	4f21      	ldr	r7, [pc, #132]	; (13f80 <_init_static_threads+0x88>)
   13efc:	4d21      	ldr	r5, [pc, #132]	; (13f84 <_init_static_threads+0x8c>)
{
   13efe:	b087      	sub	sp, #28
   13f00:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   13f02:	42bd      	cmp	r5, r7
   13f04:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   13f08:	d314      	bcc.n	13f34 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   13f0a:	4b1f      	ldr	r3, [pc, #124]	; (13f88 <_init_static_threads+0x90>)
   13f0c:	689a      	ldr	r2, [r3, #8]
   13f0e:	7ad3      	ldrb	r3, [r2, #11]
   13f10:	3b01      	subs	r3, #1
   13f12:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   13f14:	f04f 0320 	mov.w	r3, #32
   13f18:	f3ef 8511 	mrs	r5, BASEPRI
   13f1c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   13f20:	4c18      	ldr	r4, [pc, #96]	; (13f84 <_init_static_threads+0x8c>)
   13f22:	42b4      	cmp	r4, r6
   13f24:	d31f      	bcc.n	13f66 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13f26:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   13f2a:	b007      	add	sp, #28
   13f2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   13f30:	f7ff bc22 	b.w	13778 <k_sched_unlock>
		_setup_new_thread(
   13f34:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13f38:	9304      	str	r3, [sp, #16]
   13f3a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13f3e:	9303      	str	r3, [sp, #12]
   13f40:	f854 3c14 	ldr.w	r3, [r4, #-20]
   13f44:	9302      	str	r3, [sp, #8]
   13f46:	f854 3c18 	ldr.w	r3, [r4, #-24]
   13f4a:	9301      	str	r3, [sp, #4]
   13f4c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   13f50:	9300      	str	r3, [sp, #0]
   13f52:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   13f56:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   13f58:	f7ff ff76 	bl	13e48 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   13f5c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   13f60:	651d      	str	r5, [r3, #80]	; 0x50
   13f62:	4625      	mov	r5, r4
   13f64:	e7cd      	b.n	13f02 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   13f66:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13f68:	1c4b      	adds	r3, r1, #1
   13f6a:	d003      	beq.n	13f74 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   13f6c:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   13f6e:	b919      	cbnz	r1, 13f78 <_init_static_threads+0x80>
   13f70:	f7ff ff52 	bl	13e18 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   13f74:	342c      	adds	r4, #44	; 0x2c
   13f76:	e7d4      	b.n	13f22 <_init_static_threads+0x2a>
   13f78:	f7ff fef8 	bl	13d6c <schedule_new_thread.part.11>
   13f7c:	e7fa      	b.n	13f74 <_init_static_threads+0x7c>
   13f7e:	bf00      	nop
   13f80:	20003f04 	.word	0x20003f04
   13f84:	20003f04 	.word	0x20003f04
   13f88:	20001948 	.word	0x20001948

00013f8c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   13f8c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   13f8e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   13f90:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   13f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   13f96:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   13f98:	72c3      	strb	r3, [r0, #11]
   13f9a:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   13f9c:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   13f9e:	61c3      	str	r3, [r0, #28]
	t->func = func;
   13fa0:	6283      	str	r3, [r0, #40]	; 0x28
   13fa2:	4770      	bx	lr

00013fa4 <k_work_submit_to_queue>:
{
   13fa4:	b500      	push	{lr}
   13fa6:	f101 0308 	add.w	r3, r1, #8
   13faa:	f3bf 8f5b 	dmb	ish
   13fae:	e853 2f00 	ldrex	r2, [r3]
   13fb2:	f042 0e01 	orr.w	lr, r2, #1
   13fb6:	e843 ec00 	strex	ip, lr, [r3]
   13fba:	f1bc 0f00 	cmp.w	ip, #0
   13fbe:	d1f6      	bne.n	13fae <k_work_submit_to_queue+0xa>
   13fc0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13fc4:	07d3      	lsls	r3, r2, #31
   13fc6:	d403      	bmi.n	13fd0 <k_work_submit_to_queue+0x2c>
}
   13fc8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   13fcc:	f7ff ba94 	b.w	134f8 <k_queue_append>
   13fd0:	f85d fb04 	ldr.w	pc, [sp], #4

00013fd4 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   13fd4:	f1a0 010c 	sub.w	r1, r0, #12
   13fd8:	6980      	ldr	r0, [r0, #24]
   13fda:	f7ff bfe3 	b.w	13fa4 <k_work_submit_to_queue>

00013fde <work_q_main>:
{
   13fde:	b510      	push	{r4, lr}
   13fe0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13fe6:	4620      	mov	r0, r4
   13fe8:	f7ff faaa 	bl	13540 <_impl_k_queue_get>
		if (!work) {
   13fec:	4603      	mov	r3, r0
   13fee:	2800      	cmp	r0, #0
   13ff0:	d0f7      	beq.n	13fe2 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13ff2:	3308      	adds	r3, #8
		handler = work->handler;
   13ff4:	6842      	ldr	r2, [r0, #4]
   13ff6:	f3bf 8f5b 	dmb	ish
   13ffa:	e853 1f00 	ldrex	r1, [r3]
   13ffe:	f021 0e01 	bic.w	lr, r1, #1
   14002:	e843 ec00 	strex	ip, lr, [r3]
   14006:	f1bc 0f00 	cmp.w	ip, #0
   1400a:	d1f6      	bne.n	13ffa <work_q_main+0x1c>
   1400c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   14010:	07cb      	lsls	r3, r1, #31
   14012:	d500      	bpl.n	14016 <work_q_main+0x38>
			handler(work);
   14014:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14016:	f7ff fcf5 	bl	13a04 <_impl_k_yield>
   1401a:	e7e2      	b.n	13fe2 <work_q_main+0x4>

0001401c <k_work_q_start>:
{
   1401c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1401e:	b087      	sub	sp, #28
   14020:	4604      	mov	r4, r0
   14022:	461f      	mov	r7, r3
   14024:	460d      	mov	r5, r1
   14026:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   14028:	f7ff fa5e 	bl	134e8 <_impl_k_queue_init>

   1402c:	2000      	movs	r0, #0
   1402e:	9005      	str	r0, [sp, #20]
   14030:	9004      	str	r0, [sp, #16]
   14032:	9002      	str	r0, [sp, #8]
   14034:	9001      	str	r0, [sp, #4]
   14036:	9703      	str	r7, [sp, #12]
   14038:	9400      	str	r4, [sp, #0]
   1403a:	4b04      	ldr	r3, [pc, #16]	; (1404c <k_work_q_start+0x30>)
   1403c:	4632      	mov	r2, r6
   1403e:	4629      	mov	r1, r5
   14040:	f104 0010 	add.w	r0, r4, #16
   14044:	f7ff ff1a 	bl	13e7c <_impl_k_thread_create>
}
   14048:	b007      	add	sp, #28
   1404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1404c:	00013fdf 	.word	0x00013fdf

00014050 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   14050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   14054:	2300      	movs	r3, #0
   14056:	61c2      	str	r2, [r0, #28]
	t->func = func;
   14058:	4a04      	ldr	r2, [pc, #16]	; (1406c <k_delayed_work_init+0x1c>)
   1405a:	6003      	str	r3, [r0, #0]
   1405c:	6041      	str	r1, [r0, #4]
   1405e:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   14060:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   14062:	6143      	str	r3, [r0, #20]
	t->func = func;
   14064:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   14066:	6243      	str	r3, [r0, #36]	; 0x24
   14068:	4770      	bx	lr
   1406a:	bf00      	nop
   1406c:	00013fd5 	.word	0x00013fd5

00014070 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   14070:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14072:	f04f 0320 	mov.w	r3, #32
   14076:	f3ef 8411 	mrs	r4, BASEPRI
   1407a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   1407e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14080:	b923      	cbnz	r3, 1408c <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14082:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   14086:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   1408a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1408c:	f3bf 8f5b 	dmb	ish
   14090:	6883      	ldr	r3, [r0, #8]
   14092:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   14096:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14098:	f100 0508 	add.w	r5, r0, #8
   1409c:	d533      	bpl.n	14106 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1409e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   140a0:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   140a2:	2100      	movs	r1, #0
   140a4:	2b00      	cmp	r3, #0
   140a6:	d0ec      	beq.n	14082 <k_delayed_work_cancel+0x12>
   140a8:	4298      	cmp	r0, r3
   140aa:	d127      	bne.n	140fc <k_delayed_work_cancel+0x8c>
   140ac:	6803      	ldr	r3, [r0, #0]
   140ae:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   140b0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   140b4:	b9c9      	cbnz	r1, 140ea <k_delayed_work_cancel+0x7a>
   140b6:	42b8      	cmp	r0, r7
	list->head = node;
   140b8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   140ba:	d100      	bne.n	140be <k_delayed_work_cancel+0x4e>
	list->tail = node;
   140bc:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   140be:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   140c0:	f003 0303 	and.w	r3, r3, #3
   140c4:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   140c6:	2300      	movs	r3, #0
   140c8:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   140ca:	f3bf 8f5b 	dmb	ish
   140ce:	e855 2f00 	ldrex	r2, [r5]
   140d2:	f022 0201 	bic.w	r2, r2, #1
   140d6:	e845 2100 	strex	r1, r2, [r5]
   140da:	2900      	cmp	r1, #0
   140dc:	d1f7      	bne.n	140ce <k_delayed_work_cancel+0x5e>
   140de:	f3bf 8f5b 	dmb	ish
   140e2:	f384 8811 	msr	BASEPRI, r4
	return 0;
   140e6:	4618      	mov	r0, r3
   140e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   140ea:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   140ec:	f006 0603 	and.w	r6, r6, #3
   140f0:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   140f2:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   140f4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   140f6:	bf08      	it	eq
   140f8:	6051      	streq	r1, [r2, #4]
   140fa:	e7e0      	b.n	140be <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   140fc:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   140fe:	4619      	mov	r1, r3
   14100:	f026 0303 	bic.w	r3, r6, #3
   14104:	e7ce      	b.n	140a4 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14106:	69c1      	ldr	r1, [r0, #28]
   14108:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   1410a:	f100 020c 	add.w	r2, r0, #12
   1410e:	d0da      	beq.n	140c6 <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14110:	4b08      	ldr	r3, [pc, #32]	; (14134 <k_delayed_work_cancel+0xc4>)
   14112:	699b      	ldr	r3, [r3, #24]
   14114:	429a      	cmp	r2, r3
   14116:	bf1f      	itttt	ne
   14118:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1411a:	6913      	ldrne	r3, [r2, #16]
   1411c:	185b      	addne	r3, r3, r1
   1411e:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   14120:	6903      	ldr	r3, [r0, #16]
   14122:	68c2      	ldr	r2, [r0, #12]
   14124:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14126:	68c2      	ldr	r2, [r0, #12]
   14128:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1412a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1412e:	61c3      	str	r3, [r0, #28]
   14130:	e7c9      	b.n	140c6 <k_delayed_work_cancel+0x56>
   14132:	bf00      	nop
   14134:	20001948 	.word	0x20001948

00014138 <k_delayed_work_submit_to_queue>:
{
   14138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1413a:	4607      	mov	r7, r0
   1413c:	460c      	mov	r4, r1
   1413e:	4615      	mov	r5, r2
	__asm__ volatile(
   14140:	f04f 0320 	mov.w	r3, #32
   14144:	f3ef 8611 	mrs	r6, BASEPRI
   14148:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   1414c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1414e:	b123      	cbz	r3, 1415a <k_delayed_work_submit_to_queue+0x22>
   14150:	4283      	cmp	r3, r0
   14152:	d00b      	beq.n	1416c <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   14154:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   14158:	e00d      	b.n	14176 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   1415a:	b138      	cbz	r0, 1416c <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   1415c:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   1415e:	b96d      	cbnz	r5, 1417c <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   14160:	4621      	mov	r1, r4
   14162:	4638      	mov	r0, r7
   14164:	f7ff ff1e 	bl	13fa4 <k_work_submit_to_queue>
	err = 0;
   14168:	2000      	movs	r0, #0
   1416a:	e004      	b.n	14176 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   1416c:	4620      	mov	r0, r4
   1416e:	f7ff ff7f 	bl	14070 <k_delayed_work_cancel>
		if (err < 0) {
   14172:	2800      	cmp	r0, #0
   14174:	daf2      	bge.n	1415c <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14176:	f386 8811 	msr	BASEPRI, r6
}
   1417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1417c:	220a      	movs	r2, #10
   1417e:	3509      	adds	r5, #9
   14180:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   14184:	4a16      	ldr	r2, [pc, #88]	; (141e0 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   14186:	2300      	movs	r3, #0
   14188:	4611      	mov	r1, r2
   1418a:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1418c:	61a3      	str	r3, [r4, #24]
   1418e:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   14192:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14194:	428b      	cmp	r3, r1
   14196:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1419a:	61e5      	str	r5, [r4, #28]
   1419c:	d106      	bne.n	141ac <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   1419e:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   141a0:	6993      	ldr	r3, [r2, #24]
   141a2:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   141a4:	6993      	ldr	r3, [r2, #24]
   141a6:	601f      	str	r7, [r3, #0]
	list->tail = node;
   141a8:	6197      	str	r7, [r2, #24]
   141aa:	e7dd      	b.n	14168 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   141ac:	2b00      	cmp	r3, #0
   141ae:	d0f6      	beq.n	1419e <k_delayed_work_submit_to_queue+0x66>
   141b0:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   141b4:	69e0      	ldr	r0, [r4, #28]
   141b6:	691d      	ldr	r5, [r3, #16]
   141b8:	42a8      	cmp	r0, r5
   141ba:	dc08      	bgt.n	141ce <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   141bc:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   141be:	1a28      	subs	r0, r5, r0
   141c0:	6118      	str	r0, [r3, #16]
   141c2:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   141c4:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   141c6:	685a      	ldr	r2, [r3, #4]
   141c8:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   141ca:	605f      	str	r7, [r3, #4]
   141cc:	e7cc      	b.n	14168 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   141ce:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   141d0:	4573      	cmp	r3, lr
   141d2:	61e0      	str	r0, [r4, #28]
   141d4:	d0e3      	beq.n	1419e <k_delayed_work_submit_to_queue+0x66>
   141d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   141d8:	2b00      	cmp	r3, #0
   141da:	d1eb      	bne.n	141b4 <k_delayed_work_submit_to_queue+0x7c>
   141dc:	e7df      	b.n	1419e <k_delayed_work_submit_to_queue+0x66>
   141de:	bf00      	nop
   141e0:	20001948 	.word	0x20001948

000141e4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   141e4:	2314      	movs	r3, #20
   141e6:	b530      	push	{r4, r5, lr}
   141e8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   141ec:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   141ee:	2900      	cmp	r1, #0
   141f0:	da00      	bge.n	141f4 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   141f2:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   141f4:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   141f6:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   141f8:	f003 030f 	and.w	r3, r3, #15
   141fc:	2b02      	cmp	r3, #2
   141fe:	d003      	beq.n	14208 <clear_event_registrations+0x24>
   14200:	2b04      	cmp	r3, #4
   14202:	d001      	beq.n	14208 <clear_event_registrations+0x24>
   14204:	2b01      	cmp	r3, #1
   14206:	d104      	bne.n	14212 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   14208:	6843      	ldr	r3, [r0, #4]
   1420a:	6805      	ldr	r5, [r0, #0]
   1420c:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   1420e:	6805      	ldr	r5, [r0, #0]
   14210:	606b      	str	r3, [r5, #4]
   14212:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14216:	f04f 0320 	mov.w	r3, #32
   1421a:	f3ef 8211 	mrs	r2, BASEPRI
   1421e:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   14222:	3901      	subs	r1, #1
   14224:	3814      	subs	r0, #20
   14226:	e7e2      	b.n	141ee <clear_event_registrations+0xa>

00014228 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   14228:	6883      	ldr	r3, [r0, #8]
{
   1422a:	b570      	push	{r4, r5, r6, lr}
   1422c:	4605      	mov	r5, r0
   1422e:	460e      	mov	r6, r1
	if (!event->poller) {
   14230:	b1d3      	cbz	r3, 14268 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   14232:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   14234:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   14236:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   14238:	7a63      	ldrb	r3, [r4, #9]
   1423a:	079a      	lsls	r2, r3, #30
   1423c:	d514      	bpl.n	14268 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   1423e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14240:	3302      	adds	r3, #2
   14242:	d01a      	beq.n	1427a <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   14244:	4620      	mov	r0, r4
   14246:	f7ff fa6e 	bl	13726 <_unpend_thread>
	_set_thread_return_value(thread,
   1424a:	2e00      	cmp	r6, #0
   1424c:	bf0c      	ite	eq
   1424e:	f06f 0303 	mvneq.w	r3, #3
   14252:	2300      	movne	r3, #0
   14254:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   14256:	7a63      	ldrb	r3, [r4, #9]
   14258:	06db      	lsls	r3, r3, #27
   1425a:	d105      	bne.n	14268 <signal_poll_event+0x40>
   1425c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1425e:	3301      	adds	r3, #1
   14260:	d102      	bne.n	14268 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   14262:	4620      	mov	r0, r4
   14264:	f7ff fac2 	bl	137ec <_add_thread_to_ready_q>
	event->state |= state;
   14268:	7b6b      	ldrb	r3, [r5, #13]
   1426a:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   1426e:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   14272:	2000      	movs	r0, #0
	event->state |= state;
   14274:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   14276:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   14278:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1427a:	f06f 000a 	mvn.w	r0, #10
}
   1427e:	bd70      	pop	{r4, r5, r6, pc}

00014280 <add_event>:
{
   14280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14282:	6803      	ldr	r3, [r0, #0]
   14284:	4298      	cmp	r0, r3
   14286:	4604      	mov	r4, r0
   14288:	460e      	mov	r6, r1
   1428a:	4617      	mov	r7, r2
   1428c:	d106      	bne.n	1429c <add_event+0x1c>
	node->next = list;
   1428e:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   14290:	6863      	ldr	r3, [r4, #4]
   14292:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   14294:	6863      	ldr	r3, [r4, #4]
   14296:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14298:	6066      	str	r6, [r4, #4]
   1429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1429c:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   1429e:	2b00      	cmp	r3, #0
   142a0:	d0f5      	beq.n	1428e <add_event+0xe>
   142a2:	689b      	ldr	r3, [r3, #8]
   142a4:	6811      	ldr	r1, [r2, #0]
   142a6:	6818      	ldr	r0, [r3, #0]
   142a8:	f7ff f9ee 	bl	13688 <_is_t1_higher_prio_than_t2>
   142ac:	2800      	cmp	r0, #0
   142ae:	d1ee      	bne.n	1428e <add_event+0xe>
	return list->head == list;
   142b0:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   142b2:	42ac      	cmp	r4, r5
   142b4:	d0eb      	beq.n	1428e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   142b6:	2d00      	cmp	r5, #0
   142b8:	d0e9      	beq.n	1428e <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   142ba:	68ab      	ldr	r3, [r5, #8]
   142bc:	6838      	ldr	r0, [r7, #0]
   142be:	6819      	ldr	r1, [r3, #0]
   142c0:	f7ff f9e2 	bl	13688 <_is_t1_higher_prio_than_t2>
   142c4:	b130      	cbz	r0, 142d4 <add_event+0x54>
		node->prev = insert_point->prev;
   142c6:	686b      	ldr	r3, [r5, #4]
   142c8:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   142ca:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   142cc:	686b      	ldr	r3, [r5, #4]
   142ce:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   142d0:	606e      	str	r6, [r5, #4]
   142d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   142d4:	6863      	ldr	r3, [r4, #4]
   142d6:	429d      	cmp	r5, r3
   142d8:	d0d9      	beq.n	1428e <add_event+0xe>
   142da:	682d      	ldr	r5, [r5, #0]
   142dc:	e7eb      	b.n	142b6 <add_event+0x36>

000142de <k_poll_event_init>:
{
   142de:	b530      	push	{r4, r5, lr}
	event->type = type;
   142e0:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   142e2:	6103      	str	r3, [r0, #16]
	event->type = type;
   142e4:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   142e8:	7b81      	ldrb	r1, [r0, #14]
   142ea:	f362 0100 	bfi	r1, r2, #0, #1
   142ee:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   142f0:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   142f2:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   142f4:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   142f8:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   142fc:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   142fe:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   14300:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   14302:	bd30      	pop	{r4, r5, pc}

00014304 <_impl_k_poll>:
{
   14304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14308:	4b3f      	ldr	r3, [pc, #252]	; (14408 <_impl_k_poll+0x104>)
{
   1430a:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1430c:	689b      	ldr	r3, [r3, #8]
   1430e:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   14310:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14312:	2301      	movs	r3, #1
{
   14314:	4607      	mov	r7, r0
   14316:	468a      	mov	sl, r1
   14318:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1431a:	9301      	str	r3, [sp, #4]
   1431c:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1431e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   14322:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   14324:	4556      	cmp	r6, sl
   14326:	db10      	blt.n	1434a <_impl_k_poll+0x46>
   14328:	f04f 0320 	mov.w	r3, #32
   1432c:	f3ef 8611 	mrs	r6, BASEPRI
   14330:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   14334:	9c01      	ldr	r4, [sp, #4]
   14336:	2c00      	cmp	r4, #0
   14338:	d13f      	bne.n	143ba <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   1433a:	4632      	mov	r2, r6
   1433c:	4629      	mov	r1, r5
   1433e:	4638      	mov	r0, r7
   14340:	f7ff ff50 	bl	141e4 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14344:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   14348:	e040      	b.n	143cc <_impl_k_poll+0xc8>
	__asm__ volatile(
   1434a:	f04f 0320 	mov.w	r3, #32
   1434e:	f3ef 8b11 	mrs	fp, BASEPRI
   14352:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   14356:	7b62      	ldrb	r2, [r4, #13]
   14358:	f002 030f 	and.w	r3, r2, #15
   1435c:	2b02      	cmp	r3, #2
   1435e:	d003      	beq.n	14368 <_impl_k_poll+0x64>
   14360:	2b04      	cmp	r3, #4
   14362:	d004      	beq.n	1436e <_impl_k_poll+0x6a>
   14364:	2b01      	cmp	r3, #1
   14366:	d106      	bne.n	14376 <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   14368:	6921      	ldr	r1, [r4, #16]
   1436a:	6889      	ldr	r1, [r1, #8]
   1436c:	e001      	b.n	14372 <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   1436e:	6921      	ldr	r1, [r4, #16]
   14370:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   14372:	2900      	cmp	r1, #0
   14374:	d13d      	bne.n	143f2 <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   14376:	f1b8 0f00 	cmp.w	r8, #0
   1437a:	d014      	beq.n	143a6 <_impl_k_poll+0xa2>
   1437c:	9a01      	ldr	r2, [sp, #4]
   1437e:	b192      	cbz	r2, 143a6 <_impl_k_poll+0xa2>
	switch (event->type) {
   14380:	2b02      	cmp	r3, #2
   14382:	d007      	beq.n	14394 <_impl_k_poll+0x90>
   14384:	2b04      	cmp	r3, #4
   14386:	d013      	beq.n	143b0 <_impl_k_poll+0xac>
   14388:	2b01      	cmp	r3, #1
   1438a:	d109      	bne.n	143a0 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   1438c:	466a      	mov	r2, sp
   1438e:	4621      	mov	r1, r4
   14390:	6920      	ldr	r0, [r4, #16]
   14392:	e003      	b.n	1439c <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   14394:	6920      	ldr	r0, [r4, #16]
   14396:	466a      	mov	r2, sp
   14398:	4621      	mov	r1, r4
   1439a:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1439c:	f7ff ff70 	bl	14280 <add_event>
	event->poller = poller;
   143a0:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   143a4:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   143a6:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   143aa:	3601      	adds	r6, #1
   143ac:	3414      	adds	r4, #20
   143ae:	e7b9      	b.n	14324 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   143b0:	6920      	ldr	r0, [r4, #16]
   143b2:	466a      	mov	r2, sp
   143b4:	4621      	mov	r1, r4
   143b6:	3008      	adds	r0, #8
   143b8:	e7f0      	b.n	1439c <_impl_k_poll+0x98>
	poller.is_polling = 0;
   143ba:	2300      	movs	r3, #0
   143bc:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   143be:	f1b8 0f00 	cmp.w	r8, #0
   143c2:	d107      	bne.n	143d4 <_impl_k_poll+0xd0>
   143c4:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   143c8:	f06f 040a 	mvn.w	r4, #10
}
   143cc:	4620      	mov	r0, r4
   143ce:	b005      	add	sp, #20
   143d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   143d4:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   143d6:	4642      	mov	r2, r8
   143d8:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   143da:	9102      	str	r1, [sp, #8]
   143dc:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   143de:	f7ff fab3 	bl	13948 <_pend_current_thread>
   143e2:	4604      	mov	r4, r0
	__asm__ volatile(
   143e4:	f04f 0320 	mov.w	r3, #32
   143e8:	f3ef 8611 	mrs	r6, BASEPRI
   143ec:	f383 8811 	msr	BASEPRI, r3
   143f0:	e7a3      	b.n	1433a <_impl_k_poll+0x36>
	event->state |= state;
   143f2:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   143f6:	f363 1207 	bfi	r2, r3, #4, #4
   143fa:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   143fc:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   14400:	f8cd 9004 	str.w	r9, [sp, #4]
   14404:	e7cf      	b.n	143a6 <_impl_k_poll+0xa2>
   14406:	bf00      	nop
   14408:	20001948 	.word	0x20001948

0001440c <_handle_obj_poll_events>:
	return list->head == list;
   1440c:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   1440e:	4298      	cmp	r0, r3
   14410:	d007      	beq.n	14422 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   14412:	e893 0005 	ldmia.w	r3, {r0, r2}
   14416:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   14418:	6818      	ldr	r0, [r3, #0]
   1441a:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   1441c:	4618      	mov	r0, r3
   1441e:	f7ff bf03 	b.w	14228 <signal_poll_event>
   14422:	4770      	bx	lr

00014424 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   14424:	b538      	push	{r3, r4, r5, lr}
   14426:	f04f 0320 	mov.w	r3, #32
   1442a:	f3ef 8511 	mrs	r5, BASEPRI
   1442e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14432:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   14434:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   14436:	4298      	cmp	r0, r3
	signal->signaled = 1;
   14438:	f04f 0101 	mov.w	r1, #1
   1443c:	6081      	str	r1, [r0, #8]
   1443e:	d00d      	beq.n	1445c <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   14440:	e893 0005 	ldmia.w	r3, {r0, r2}
   14444:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   14446:	6818      	ldr	r0, [r3, #0]
   14448:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1444a:	4618      	mov	r0, r3
   1444c:	f7ff feec 	bl	14228 <signal_poll_event>
   14450:	4604      	mov	r4, r0

	_reschedule(key);
   14452:	4628      	mov	r0, r5
   14454:	f7ff f972 	bl	1373c <_reschedule>
	return rc;
}
   14458:	4620      	mov	r0, r4
   1445a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1445c:	f385 8811 	msr	BASEPRI, r5
		return 0;
   14460:	2400      	movs	r4, #0
   14462:	e7f9      	b.n	14458 <_impl_k_poll_signal+0x34>

00014464 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   14464:	4770      	bx	lr
