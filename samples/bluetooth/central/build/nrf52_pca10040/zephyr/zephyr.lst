
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	200026f8 	.word	0x200026f8

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 0000ecbf 00001aa1 00001aa1     ................
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 000109f9 00000000 000018ed     ................
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 0000ec85     ................
     13c:	00000000 000018ed 200038c8 00010cfd     .........8. ....
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 0000ecb9 00000000 000018ed     ................
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00012259 	.word	0x00012259
     5b0:	00012282 	.word	0x00012282
     5b4:	00012260 	.word	0x00012260
     5b8:	00012267 	.word	0x00012267
     5bc:	00012271 	.word	0x00012271
     5c0:	0001227b 	.word	0x0001227b

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f003 fa11 	bl	39f2 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f003 faaf 	bl	3b5c <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	000122a5 	.word	0x000122a5
     604:	20000000 	.word	0x20000000
     608:	000122c3 	.word	0x000122c3

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 f9ea 	bl	39f2 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 f9dc 	bl	39ec <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f002 fe0e 	bl	3268 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	000122ee 	.word	0x000122ee
     664:	00012224 	.word	0x00012224
     668:	00000671 	.word	0x00000671
     66c:	0001230c 	.word	0x0001230c

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f002 fe39 	bl	330c <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 f9a5 	bl	39f8 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	000122d2 	.word	0x000122d2
     6bc:	0001222a 	.word	0x0001222a

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f002 fd80 	bl	31c8 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f002 fed0 	bl	3484 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f002 fdb8 	bl	3268 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	0001232f 	.word	0x0001232f
     70c:	0001234f 	.word	0x0001234f
     710:	20003438 	.word	0x20003438
     714:	00012232 	.word	0x00012232
     718:	00000671 	.word	0x00000671
     71c:	0001230c 	.word	0x0001230c
     720:	00012366 	.word	0x00012366

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	2000346c 	.word	0x2000346c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f010 ff70 	bl	11788 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003470 	.word	0x20003470

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003470 	.word	0x20003470

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f00f feef 	bl	10dd8 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	00012394 	.word	0x00012394

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f00f feb4 	bl	10dd8 <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	0001239e 	.word	0x0001239e
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f010 fa7f 	bl	11878 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003888 	.word	0x20003888
    1394:	20000010 	.word	0x20000010
    1398:	20003884 	.word	0x20003884

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003888 	.word	0x20003888
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f00f fcde 	bl	10dd8 <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	000123c0 	.word	0x000123c0
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003888 	.word	0x20003888
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	20001720 	.word	0x20001720
    14c4:	20003888 	.word	0x20003888

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f010 f90a 	bl	116ec <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	200016e8 	.word	0x200016e8
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	200016e8 	.word	0x200016e8
    1530:	00012a54 	.word	0x00012a54
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	200016e8 	.word	0x200016e8
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f010 f8f0 	bl	11788 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	00012519 	.word	0x00012519

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	00012563 	.word	0x00012563
    1630:	e000ed00 	.word	0xe000ed00
    1634:	0001257a 	.word	0x0001257a
    1638:	0001258c 	.word	0x0001258c
    163c:	000125a0 	.word	0x000125a0
    1640:	000125b9 	.word	0x000125b9
    1644:	000125ca 	.word	0x000125ca
    1648:	000125ea 	.word	0x000125ea

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	0001261a 	.word	0x0001261a
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	00012633 	.word	0x00012633
    16c8:	00012647 	.word	0x00012647
    16cc:	00012662 	.word	0x00012662
    16d0:	00012681 	.word	0x00012681
    16d4:	000126a7 	.word	0x000126a7
    16d8:	000126c2 	.word	0x000126c2

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	000123e0 	.word	0x000123e0
    175c:	e000ed00 	.word	0xe000ed00
    1760:	0001257a 	.word	0x0001257a
    1764:	0001258c 	.word	0x0001258c
    1768:	000123f7 	.word	0x000123f7
    176c:	000125b9 	.word	0x000125b9
    1770:	00012411 	.word	0x00012411
    1774:	0001242d 	.word	0x0001242d
    1778:	000125ea 	.word	0x000125ea

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	00012474 	.word	0x00012474
    1824:	0001248c 	.word	0x0001248c
    1828:	000124ae 	.word	0x000124ae
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	000124ce 	.word	0x000124ce
    183c:	00012446 	.word	0x00012446
    1840:	0001245b 	.word	0x0001245b
    1844:	00012505 	.word	0x00012505

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f00f fa91 	bl	10e24 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	200016e8 	.word	0x200016e8

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f010 f9c8 	bl	11cb0 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f00f fee8 	bl	11788 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	000126ee 	.word	0x000126ee
    19e4:	0001276c 	.word	0x0001276c
    19e8:	00012714 	.word	0x00012714
    19ec:	0001272e 	.word	0x0001272e
    19f0:	00012749 	.word	0x00012749

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f010 f883 	bl	11b0c <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f010 f880 	bl	11b0c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f010 f883 	bl	11b2c <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	000127ac 	.word	0x000127ac
    1a44:	000127a8 	.word	0x000127a8
    1a48:	000127bd 	.word	0x000127bd
    1a4c:	200016e8 	.word	0x200016e8
    1a50:	000127dd 	.word	0x000127dd

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f010 f8ba 	bl	11bdc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f00f fe37 	bl	116ec <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f00f bce5 	b.w	11460 <_reschedule>
    1a96:	bf00      	nop
    1a98:	200016e8 	.word	0x200016e8
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f00f f9b8 	blne	10e24 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	200016e8 	.word	0x200016e8
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002838 	.word	0x20002838

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f00f f9b2 	bl	10e84 <_bss_zero>
	_data_copy();
    1b20:	f00f f9ba 	bl	10e98 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f00f f9dc 	bl	10ee0 <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	2000344c 	.word	0x2000344c
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>

00001c9a <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1c9a:	b530      	push	{r4, r5, lr}
    1c9c:	b085      	sub	sp, #20
    1c9e:	4604      	mov	r4, r0
    1ca0:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1ca2:	4668      	mov	r0, sp
    1ca4:	2203      	movs	r2, #3
    1ca6:	f7ff ffa9 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1caa:	220d      	movs	r2, #13
    1cac:	2100      	movs	r1, #0
    1cae:	f10d 0003 	add.w	r0, sp, #3
    1cb2:	f7ff ffcf 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1cb6:	4620      	mov	r0, r4
    1cb8:	466a      	mov	r2, sp
    1cba:	4669      	mov	r1, sp
    1cbc:	f004 ff7c 	bl	6bb8 <bt_encrypt_le>
	if (err) {
    1cc0:	4604      	mov	r4, r0
    1cc2:	b920      	cbnz	r0, 1cce <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1cc4:	2203      	movs	r2, #3
    1cc6:	4669      	mov	r1, sp
    1cc8:	4628      	mov	r0, r5
    1cca:	f7ff ff97 	bl	1bfc <memcpy>

	return 0;
}
    1cce:	4620      	mov	r0, r4
    1cd0:	b005      	add	sp, #20
    1cd2:	bd30      	pop	{r4, r5, pc}

00001cd4 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1cd4:	b513      	push	{r0, r1, r4, lr}
    1cd6:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1cd8:	aa01      	add	r2, sp, #4
    1cda:	3103      	adds	r1, #3
    1cdc:	f7ff ffdd 	bl	1c9a <ah>
	if (err) {
    1ce0:	b948      	cbnz	r0, 1cf6 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1ce2:	2203      	movs	r2, #3
    1ce4:	a901      	add	r1, sp, #4
    1ce6:	4620      	mov	r0, r4
    1ce8:	f7ff ff73 	bl	1bd2 <memcmp>
    1cec:	fab0 f080 	clz	r0, r0
    1cf0:	0940      	lsrs	r0, r0, #5
}
    1cf2:	b002      	add	sp, #8
    1cf4:	bd10      	pop	{r4, pc}
		return false;
    1cf6:	2000      	movs	r0, #0
    1cf8:	e7fb      	b.n	1cf2 <bt_rpa_irk_matches+0x1e>

00001cfa <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1cfa:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1cfc:	1ccd      	adds	r5, r1, #3
{
    1cfe:	4606      	mov	r6, r0
    1d00:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1d02:	4628      	mov	r0, r5
    1d04:	2103      	movs	r1, #3
    1d06:	f004 ff3b 	bl	6b80 <bt_rand>
	if (err) {
    1d0a:	b960      	cbnz	r0, 1d26 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1d0c:	7963      	ldrb	r3, [r4, #5]
    1d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d16:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1d18:	4622      	mov	r2, r4
    1d1a:	4629      	mov	r1, r5
    1d1c:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1d22:	f7ff bfba 	b.w	1c9a <ah>
}
    1d26:	bd70      	pop	{r4, r5, r6, pc}

00001d28 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1d28:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1d2a:	7802      	ldrb	r2, [r0, #0]
    1d2c:	2a01      	cmp	r2, #1
{
    1d2e:	4604      	mov	r4, r0
    1d30:	460b      	mov	r3, r1
	switch (src->type) {
    1d32:	d017      	beq.n	1d64 <uuid_to_uuid128+0x3c>
    1d34:	d303      	bcc.n	1d3e <uuid_to_uuid128+0x16>
    1d36:	2a02      	cmp	r2, #2
    1d38:	d02c      	beq.n	1d94 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1d3a:	bcf0      	pop	{r4, r5, r6, r7}
    1d3c:	4770      	bx	lr
		*dst = uuid128_base;
    1d3e:	4a18      	ldr	r2, [pc, #96]	; (1da0 <uuid_to_uuid128+0x78>)
    1d40:	460d      	mov	r5, r1
    1d42:	f102 0710 	add.w	r7, r2, #16
    1d46:	6810      	ldr	r0, [r2, #0]
    1d48:	6851      	ldr	r1, [r2, #4]
    1d4a:	462e      	mov	r6, r5
    1d4c:	c603      	stmia	r6!, {r0, r1}
    1d4e:	3208      	adds	r2, #8
    1d50:	42ba      	cmp	r2, r7
    1d52:	4635      	mov	r5, r6
    1d54:	d1f7      	bne.n	1d46 <uuid_to_uuid128+0x1e>
    1d56:	7812      	ldrb	r2, [r2, #0]
    1d58:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1d5a:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1d5c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1d5e:	0a12      	lsrs	r2, r2, #8
    1d60:	739a      	strb	r2, [r3, #14]
    1d62:	e7ea      	b.n	1d3a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1d64:	4a0e      	ldr	r2, [pc, #56]	; (1da0 <uuid_to_uuid128+0x78>)
    1d66:	460d      	mov	r5, r1
    1d68:	f102 0710 	add.w	r7, r2, #16
    1d6c:	6810      	ldr	r0, [r2, #0]
    1d6e:	6851      	ldr	r1, [r2, #4]
    1d70:	462e      	mov	r6, r5
    1d72:	c603      	stmia	r6!, {r0, r1}
    1d74:	3208      	adds	r2, #8
    1d76:	42ba      	cmp	r2, r7
    1d78:	4635      	mov	r5, r6
    1d7a:	d1f7      	bne.n	1d6c <uuid_to_uuid128+0x44>
    1d7c:	7812      	ldrb	r2, [r2, #0]
    1d7e:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1d80:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1d82:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1d84:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1d88:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1d8a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1d8c:	0a12      	lsrs	r2, r2, #8
    1d8e:	7399      	strb	r1, [r3, #14]
    1d90:	741a      	strb	r2, [r3, #16]
    1d92:	e7d2      	b.n	1d3a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1d94:	4601      	mov	r1, r0
    1d96:	2211      	movs	r2, #17
    1d98:	4618      	mov	r0, r3
}
    1d9a:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1d9c:	f7ff bf2e 	b.w	1bfc <memcpy>
    1da0:	00012802 	.word	0x00012802

00001da4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1da4:	b510      	push	{r4, lr}
    1da6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1da8:	7801      	ldrb	r1, [r0, #0]
    1daa:	7822      	ldrb	r2, [r4, #0]
    1dac:	428a      	cmp	r2, r1
{
    1dae:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1db0:	d00e      	beq.n	1dd0 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1db2:	4669      	mov	r1, sp
    1db4:	f7ff ffb8 	bl	1d28 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1db8:	a905      	add	r1, sp, #20
    1dba:	4620      	mov	r0, r4
    1dbc:	f7ff ffb4 	bl	1d28 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1dc0:	2210      	movs	r2, #16
    1dc2:	f10d 0115 	add.w	r1, sp, #21
    1dc6:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1dca:	f7ff ff02 	bl	1bd2 <memcmp>
    1dce:	e00a      	b.n	1de6 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1dd0:	2a01      	cmp	r2, #1
    1dd2:	d00a      	beq.n	1dea <bt_uuid_cmp+0x46>
    1dd4:	d304      	bcc.n	1de0 <bt_uuid_cmp+0x3c>
    1dd6:	2a02      	cmp	r2, #2
    1dd8:	d00a      	beq.n	1df0 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1dda:	f06f 0015 	mvn.w	r0, #21
    1dde:	e002      	b.n	1de6 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1de0:	8840      	ldrh	r0, [r0, #2]
    1de2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1de4:	1ac0      	subs	r0, r0, r3
}
    1de6:	b00a      	add	sp, #40	; 0x28
    1de8:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1dea:	6840      	ldr	r0, [r0, #4]
    1dec:	6863      	ldr	r3, [r4, #4]
    1dee:	e7f9      	b.n	1de4 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1df0:	2210      	movs	r2, #16
    1df2:	1c61      	adds	r1, r4, #1
    1df4:	3001      	adds	r0, #1
    1df6:	e7e8      	b.n	1dca <bt_uuid_cmp+0x26>

00001df8 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1df8:	4770      	bx	lr

00001dfa <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1dfa:	2207      	movs	r2, #7
    1dfc:	f7ff befe 	b.w	1bfc <memcpy>

00001e00 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1e00:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1e02:	f3bf 8f5b 	dmb	ish
    1e06:	e850 3f00 	ldrex	r3, [r0]
    1e0a:	ea43 0201 	orr.w	r2, r3, r1
    1e0e:	e840 2e00 	strex	lr, r2, [r0]
    1e12:	f1be 0f00 	cmp.w	lr, #0
    1e16:	d1f6      	bne.n	1e06 <atomic_or+0x6>
    1e18:	f3bf 8f5b 	dmb	ish
    1e1c:	4618      	mov	r0, r3
    1e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00001e22 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1e22:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1e24:	f3bf 8f5b 	dmb	ish
    1e28:	e850 3f00 	ldrex	r3, [r0]
    1e2c:	ea03 0201 	and.w	r2, r3, r1
    1e30:	e840 2e00 	strex	lr, r2, [r0]
    1e34:	f1be 0f00 	cmp.w	lr, #0
    1e38:	d1f6      	bne.n	1e28 <atomic_and+0x6>
    1e3a:	f3bf 8f5b 	dmb	ish
    1e3e:	4618      	mov	r0, r3
    1e40:	f85d fb04 	ldr.w	pc, [sp], #4

00001e44 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    1e44:	78c3      	ldrb	r3, [r0, #3]
    1e46:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1e48:	f241 3288 	movw	r2, #5000	; 0x1388
    1e4c:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1e50:	bf08      	it	eq
    1e52:	2200      	moveq	r2, #0
    1e54:	4801      	ldr	r0, [pc, #4]	; (1e5c <update_conn_param+0x18>)
    1e56:	f010 b801 	b.w	11e5c <k_delayed_work_submit_to_queue>
    1e5a:	bf00      	nop
    1e5c:	20001728 	.word	0x20001728

00001e60 <hci_cmd_done.isra.18>:

	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
	atomic_set(bt_dev.flags, flags);
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1e60:	b570      	push	{r4, r5, r6, lr}
    1e62:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1e64:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1e66:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1e68:	f00e fb50 	bl	1050c <net_buf_pool_get>
    1e6c:	4b0e      	ldr	r3, [pc, #56]	; (1ea8 <hci_cmd_done.isra.18+0x48>)
    1e6e:	4283      	cmp	r3, r0
    1e70:	d119      	bne.n	1ea6 <hci_cmd_done.isra.18+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1e72:	4628      	mov	r0, r5
    1e74:	f00e fb50 	bl	10518 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1e78:	4628      	mov	r0, r5
    1e7a:	f00e fb4d 	bl	10518 <net_buf_id>
    1e7e:	4c0b      	ldr	r4, [pc, #44]	; (1eac <hci_cmd_done.isra.18+0x4c>)
    1e80:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1e84:	6843      	ldr	r3, [r0, #4]
    1e86:	b173      	cbz	r3, 1ea6 <hci_cmd_done.isra.18+0x46>
		cmd(buf)->status = status;
    1e88:	4628      	mov	r0, r5
    1e8a:	f00e fb45 	bl	10518 <net_buf_id>
    1e8e:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1e92:	4628      	mov	r0, r5
    1e94:	f00e fb40 	bl	10518 <net_buf_id>
    1e98:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1ea0:	6840      	ldr	r0, [r0, #4]
    1ea2:	f00f bc80 	b.w	117a6 <_impl_k_sem_give>
    1ea6:	bd70      	pop	{r4, r5, r6, pc}
    1ea8:	20003984 	.word	0x20003984
    1eac:	20000018 	.word	0x20000018

00001eb0 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1eb0:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1eb2:	f3bf 8f5b 	dmb	ish
    1eb6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    1eba:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1ebe:	f001 011f 	and.w	r1, r1, #31
    1ec2:	4108      	asrs	r0, r1
}
    1ec4:	f000 0001 	and.w	r0, r0, #1
    1ec8:	4770      	bx	lr
	...

00001ecc <bt_hci_cmd_create>:
{
    1ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ed0:	4680      	mov	r8, r0
    1ed2:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1ed4:	4813      	ldr	r0, [pc, #76]	; (1f24 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1ed6:	4d14      	ldr	r5, [pc, #80]	; (1f28 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1edc:	f00e fbaa 	bl	10634 <net_buf_alloc_fixed>
    1ee0:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1ee2:	f100 0608 	add.w	r6, r0, #8
    1ee6:	2100      	movs	r1, #0
    1ee8:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1eea:	2700      	movs	r7, #0
    1eec:	f00e fbc1 	bl	10672 <net_buf_simple_reserve>
    1ef0:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1ef2:	4620      	mov	r0, r4
    1ef4:	f00e fb10 	bl	10518 <net_buf_id>
    1ef8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1efc:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1f00:	4620      	mov	r0, r4
    1f02:	f00e fb09 	bl	10518 <net_buf_id>
    1f06:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f0a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1f0c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f0e:	4630      	mov	r0, r6
    1f10:	f00e fbf2 	bl	106f8 <net_buf_simple_add>
	hdr->param_len = param_len;
    1f14:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1f18:	f8a0 8000 	strh.w	r8, [r0]
}
    1f1c:	4620      	mov	r0, r4
    1f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f22:	bf00      	nop
    1f24:	20003984 	.word	0x20003984
    1f28:	20000018 	.word	0x20000018

00001f2c <bt_hci_cmd_send_sync>:
{
    1f2c:	b570      	push	{r4, r5, r6, lr}
    1f2e:	4615      	mov	r5, r2
    1f30:	b086      	sub	sp, #24
	if (!buf) {
    1f32:	460c      	mov	r4, r1
    1f34:	b919      	cbnz	r1, 1f3e <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1f36:	f7ff ffc9 	bl	1ecc <bt_hci_cmd_create>
		if (!buf) {
    1f3a:	4604      	mov	r4, r0
    1f3c:	b368      	cbz	r0, 1f9a <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1f3e:	2201      	movs	r2, #1
    1f40:	2100      	movs	r1, #0
    1f42:	4668      	mov	r0, sp
    1f44:	f00f fc26 	bl	11794 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1f48:	4620      	mov	r0, r4
    1f4a:	f00e fae5 	bl	10518 <net_buf_id>
    1f4e:	4e14      	ldr	r6, [pc, #80]	; (1fa0 <bt_hci_cmd_send_sync+0x74>)
    1f50:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1f54:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1f58:	4620      	mov	r0, r4
    1f5a:	f00e fbc9 	bl	106f0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1f5e:	4621      	mov	r1, r4
    1f60:	4810      	ldr	r0, [pc, #64]	; (1fa4 <bt_hci_cmd_send_sync+0x78>)
    1f62:	f00e fb8a 	bl	1067a <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1f66:	f242 7110 	movw	r1, #10000	; 0x2710
    1f6a:	4668      	mov	r0, sp
    1f6c:	f00f fc43 	bl	117f6 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1f70:	4620      	mov	r0, r4
    1f72:	f00e fad1 	bl	10518 <net_buf_id>
    1f76:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1f7a:	b130      	cbz	r0, 1f8a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1f7c:	4620      	mov	r0, r4
    1f7e:	f00e fb89 	bl	10694 <net_buf_unref>
		err = -EIO;
    1f82:	f06f 0004 	mvn.w	r0, #4
}
    1f86:	b006      	add	sp, #24
    1f88:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    1f8a:	b10d      	cbz	r5, 1f90 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    1f8c:	602c      	str	r4, [r5, #0]
    1f8e:	e7fa      	b.n	1f86 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    1f90:	4620      	mov	r0, r4
    1f92:	f00e fb7f 	bl	10694 <net_buf_unref>
		err = 0;
    1f96:	4628      	mov	r0, r5
    1f98:	e7f5      	b.n	1f86 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    1f9a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1f9e:	e7f2      	b.n	1f86 <bt_hci_cmd_send_sync+0x5a>
    1fa0:	20000018 	.word	0x20000018
    1fa4:	2000353c 	.word	0x2000353c

00001fa8 <set_le_scan_enable>:
{
    1fa8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1faa:	2102      	movs	r1, #2
{
    1fac:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1fae:	f242 000c 	movw	r0, #8204	; 0x200c
    1fb2:	f7ff ff8b 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    1fb6:	4604      	mov	r4, r0
    1fb8:	b330      	cbz	r0, 2008 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    1fba:	2102      	movs	r1, #2
    1fbc:	3008      	adds	r0, #8
    1fbe:	f00e fb9b 	bl	106f8 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fc2:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    1fc4:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fc6:	d116      	bne.n	1ff6 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    1fc8:	210b      	movs	r1, #11
    1fca:	4811      	ldr	r0, [pc, #68]	; (2010 <set_le_scan_enable+0x68>)
    1fcc:	f7ff ff70 	bl	1eb0 <atomic_test_bit>
    1fd0:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    1fd2:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    1fd4:	4621      	mov	r1, r4
    1fd6:	2200      	movs	r2, #0
    1fd8:	f242 000c 	movw	r0, #8204	; 0x200c
    1fdc:	f7ff ffa6 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    1fe0:	4604      	mov	r4, r0
    1fe2:	b930      	cbnz	r0, 1ff2 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fe4:	2d01      	cmp	r5, #1
    1fe6:	d109      	bne.n	1ffc <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
    1fec:	4808      	ldr	r0, [pc, #32]	; (2010 <set_le_scan_enable+0x68>)
    1fee:	f7ff ff07 	bl	1e00 <atomic_or>
}
    1ff2:	4620      	mov	r0, r4
    1ff4:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1ff6:	2300      	movs	r3, #0
    1ff8:	7043      	strb	r3, [r0, #1]
    1ffa:	e7ea      	b.n	1fd2 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ffc:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2000:	4803      	ldr	r0, [pc, #12]	; (2010 <set_le_scan_enable+0x68>)
    2002:	f7ff ff0e 	bl	1e22 <atomic_and>
    2006:	e7f4      	b.n	1ff2 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    2008:	f06f 0436 	mvn.w	r4, #54	; 0x36
    200c:	e7f1      	b.n	1ff2 <set_le_scan_enable+0x4a>
    200e:	bf00      	nop
    2010:	200034e8 	.word	0x200034e8

00002014 <set_random_address>:
{
    2014:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    2016:	4d15      	ldr	r5, [pc, #84]	; (206c <set_random_address+0x58>)
    2018:	2206      	movs	r2, #6
    201a:	f105 0108 	add.w	r1, r5, #8
    201e:	4606      	mov	r6, r0
    2020:	f7ff fdd7 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2024:	4604      	mov	r4, r0
    2026:	b1d8      	cbz	r0, 2060 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2028:	2106      	movs	r1, #6
    202a:	f242 0005 	movw	r0, #8197	; 0x2005
    202e:	f7ff ff4d 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2032:	4604      	mov	r4, r0
    2034:	b1b0      	cbz	r0, 2064 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2036:	2206      	movs	r2, #6
    2038:	4631      	mov	r1, r6
    203a:	3008      	adds	r0, #8
    203c:	f00e fb62 	bl	10704 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2040:	4621      	mov	r1, r4
    2042:	2200      	movs	r2, #0
    2044:	f242 0005 	movw	r0, #8197	; 0x2005
    2048:	f7ff ff70 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    204c:	4604      	mov	r4, r0
    204e:	b938      	cbnz	r0, 2060 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    2050:	2206      	movs	r2, #6
    2052:	4631      	mov	r1, r6
    2054:	f105 0008 	add.w	r0, r5, #8
    2058:	f7ff fdd0 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    205c:	2301      	movs	r3, #1
    205e:	71eb      	strb	r3, [r5, #7]
}
    2060:	4620      	mov	r0, r4
    2062:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2064:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2068:	e7fa      	b.n	2060 <set_random_address+0x4c>
    206a:	bf00      	nop
    206c:	20003478 	.word	0x20003478

00002070 <le_set_private_addr>:
{
    2070:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    2072:	2106      	movs	r1, #6
    2074:	4668      	mov	r0, sp
    2076:	f004 fd83 	bl	6b80 <bt_rand>
	if (err) {
    207a:	b940      	cbnz	r0, 208e <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    207c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2080:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    2082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2086:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    208a:	f7ff ffc3 	bl	2014 <set_random_address>
}
    208e:	b003      	add	sp, #12
    2090:	f85d fb04 	ldr.w	pc, [sp], #4

00002094 <set_advertise_enable>:
{
    2094:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2096:	2101      	movs	r1, #1
{
    2098:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    209a:	f242 000a 	movw	r0, #8202	; 0x200a
    209e:	f7ff ff15 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    20a2:	4604      	mov	r4, r0
    20a4:	b1d8      	cbz	r0, 20de <set_advertise_enable+0x4a>
    20a6:	3008      	adds	r0, #8
	if (enable) {
    20a8:	b18d      	cbz	r5, 20ce <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    20aa:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    20ac:	f00e fb33 	bl	10716 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    20b0:	4621      	mov	r1, r4
    20b2:	2200      	movs	r2, #0
    20b4:	f242 000a 	movw	r0, #8202	; 0x200a
    20b8:	f7ff ff38 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    20bc:	4604      	mov	r4, r0
    20be:	b920      	cbnz	r0, 20ca <set_advertise_enable+0x36>
	if (enable) {
    20c0:	b13d      	cbz	r5, 20d2 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    20c2:	2140      	movs	r1, #64	; 0x40
    20c4:	4807      	ldr	r0, [pc, #28]	; (20e4 <set_advertise_enable+0x50>)
    20c6:	f7ff fe9b 	bl	1e00 <atomic_or>
}
    20ca:	4620      	mov	r0, r4
    20cc:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    20ce:	4629      	mov	r1, r5
    20d0:	e7ec      	b.n	20ac <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    20d2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    20d6:	4803      	ldr	r0, [pc, #12]	; (20e4 <set_advertise_enable+0x50>)
    20d8:	f7ff fea3 	bl	1e22 <atomic_and>
    20dc:	e7f5      	b.n	20ca <set_advertise_enable+0x36>
		return -ENOBUFS;
    20de:	f06f 0436 	mvn.w	r4, #54	; 0x36
    20e2:	e7f2      	b.n	20ca <set_advertise_enable+0x36>
    20e4:	200034e8 	.word	0x200034e8

000020e8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    20e8:	8802      	ldrh	r2, [r0, #0]
    20ea:	8843      	ldrh	r3, [r0, #2]
    20ec:	429a      	cmp	r2, r3
{
    20ee:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    20f0:	d818      	bhi.n	2124 <bt_le_conn_params_valid+0x3c>
    20f2:	2a05      	cmp	r2, #5
    20f4:	d916      	bls.n	2124 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    20f6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    20fa:	d813      	bhi.n	2124 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    20fc:	8884      	ldrh	r4, [r0, #4]
    20fe:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    2102:	d20f      	bcs.n	2124 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2104:	88c1      	ldrh	r1, [r0, #6]
    2106:	f1a1 020a 	sub.w	r2, r1, #10
    210a:	b292      	uxth	r2, r2
    210c:	f640 4076 	movw	r0, #3190	; 0xc76
    2110:	4282      	cmp	r2, r0
    2112:	d807      	bhi.n	2124 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2114:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    2118:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    211c:	bfb4      	ite	lt
    211e:	2001      	movlt	r0, #1
    2120:	2000      	movge	r0, #0
    2122:	bd10      	pop	{r4, pc}
		return false;
    2124:	2000      	movs	r0, #0
}
    2126:	bd10      	pop	{r4, pc}

00002128 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    2128:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    212a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    212c:	2106      	movs	r1, #6
{
    212e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2130:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2134:	f004 fd24 	bl	6b80 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    2138:	b918      	cbnz	r0, 2142 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    213a:	79a3      	ldrb	r3, [r4, #6]
    213c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2140:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    2142:	bd10      	pop	{r4, pc}

00002144 <bt_set_static_addr>:

int bt_set_static_addr(void)
{
    2144:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2146:	4d0c      	ldr	r5, [pc, #48]	; (2178 <bt_set_static_addr+0x34>)
    2148:	782b      	ldrb	r3, [r5, #0]
    214a:	2b01      	cmp	r3, #1
    214c:	d110      	bne.n	2170 <bt_set_static_addr+0x2c>
    214e:	79ab      	ldrb	r3, [r5, #6]
    2150:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2154:	2bc0      	cmp	r3, #192	; 0xc0
    2156:	d10b      	bne.n	2170 <bt_set_static_addr+0x2c>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
    2158:	1c68      	adds	r0, r5, #1
    215a:	f7ff ff5b 	bl	2014 <set_random_address>
	if (err) {
    215e:	4604      	mov	r4, r0
    2160:	b920      	cbnz	r0, 216c <bt_set_static_addr+0x28>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2162:	2104      	movs	r1, #4
    2164:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2168:	f7ff fe4a 	bl	1e00 <atomic_or>
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM);

	return 0;
}
    216c:	4620      	mov	r0, r4
    216e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    2170:	f06f 0415 	mvn.w	r4, #21
    2174:	e7fa      	b.n	216c <bt_set_static_addr+0x28>
    2176:	bf00      	nop
    2178:	20003478 	.word	0x20003478

0000217c <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    217c:	4b02      	ldr	r3, [pc, #8]	; (2188 <bt_send+0xc>)
    217e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2182:	691b      	ldr	r3, [r3, #16]
    2184:	4718      	bx	r3
    2186:	bf00      	nop
    2188:	20003478 	.word	0x20003478

0000218c <bt_hci_cmd_send>:
{
    218c:	b538      	push	{r3, r4, r5, lr}
    218e:	4605      	mov	r5, r0
	if (!buf) {
    2190:	460c      	mov	r4, r1
    2192:	b919      	cbnz	r1, 219c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    2194:	f7ff fe9a 	bl	1ecc <bt_hci_cmd_create>
		if (!buf) {
    2198:	4604      	mov	r4, r0
    219a:	b198      	cbz	r0, 21c4 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    219c:	f640 4335 	movw	r3, #3125	; 0xc35
    21a0:	429d      	cmp	r5, r3
    21a2:	d109      	bne.n	21b8 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    21a4:	4620      	mov	r0, r4
    21a6:	f7ff ffe9 	bl	217c <bt_send>
		if (err) {
    21aa:	4605      	mov	r5, r0
    21ac:	b110      	cbz	r0, 21b4 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    21ae:	4620      	mov	r0, r4
    21b0:	f00e fa70 	bl	10694 <net_buf_unref>
}
    21b4:	4628      	mov	r0, r5
    21b6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    21b8:	4621      	mov	r1, r4
    21ba:	4804      	ldr	r0, [pc, #16]	; (21cc <bt_hci_cmd_send+0x40>)
    21bc:	f00e fa5d 	bl	1067a <net_buf_put>
	return 0;
    21c0:	2500      	movs	r5, #0
    21c2:	e7f7      	b.n	21b4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    21c4:	f06f 0536 	mvn.w	r5, #54	; 0x36
    21c8:	e7f4      	b.n	21b4 <bt_hci_cmd_send+0x28>
    21ca:	bf00      	nop
    21cc:	2000353c 	.word	0x2000353c

000021d0 <start_le_scan>:
{
    21d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    21d2:	4605      	mov	r5, r0
    21d4:	460e      	mov	r6, r1
    21d6:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    21d8:	2100      	movs	r1, #0
    21da:	2207      	movs	r2, #7
    21dc:	4668      	mov	r0, sp
    21de:	f7ff fd39 	bl	1c54 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    21e2:	4821      	ldr	r0, [pc, #132]	; (2268 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    21e4:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    21e8:	2300      	movs	r3, #0
    21ea:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    21ee:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    21f0:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    21f2:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    21f6:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    21fa:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    21fe:	d10a      	bne.n	2216 <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2200:	2106      	movs	r1, #6
    2202:	3070      	adds	r0, #112	; 0x70
    2204:	f7ff fe54 	bl	1eb0 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2208:	b928      	cbnz	r0, 2216 <start_le_scan+0x46>
			err = le_set_private_addr();
    220a:	f7ff ff31 	bl	2070 <le_set_private_addr>
			if (err) {
    220e:	4604      	mov	r4, r0
    2210:	b9f0      	cbnz	r0, 2250 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2212:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2216:	2107      	movs	r1, #7
    2218:	f242 000b 	movw	r0, #8203	; 0x200b
    221c:	f7ff fe56 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2220:	4604      	mov	r4, r0
    2222:	b1f0      	cbz	r0, 2262 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2224:	2207      	movs	r2, #7
    2226:	4669      	mov	r1, sp
    2228:	3008      	adds	r0, #8
    222a:	f00e fa6b 	bl	10704 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    222e:	4621      	mov	r1, r4
    2230:	f242 000b 	movw	r0, #8203	; 0x200b
    2234:	f7ff ffaa 	bl	218c <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2238:	2001      	movs	r0, #1
    223a:	f7ff feb5 	bl	1fa8 <set_le_scan_enable>
	if (err) {
    223e:	4604      	mov	r4, r0
    2240:	b930      	cbnz	r0, 2250 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2242:	2d01      	cmp	r5, #1
    2244:	d107      	bne.n	2256 <start_le_scan+0x86>
    2246:	f44f 6180 	mov.w	r1, #1024	; 0x400
    224a:	4808      	ldr	r0, [pc, #32]	; (226c <start_le_scan+0x9c>)
    224c:	f7ff fdd8 	bl	1e00 <atomic_or>
}
    2250:	4620      	mov	r0, r4
    2252:	b002      	add	sp, #8
    2254:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2256:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    225a:	4804      	ldr	r0, [pc, #16]	; (226c <start_le_scan+0x9c>)
    225c:	f7ff fde1 	bl	1e22 <atomic_and>
    2260:	e7f6      	b.n	2250 <start_le_scan+0x80>
		return -ENOBUFS;
    2262:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2266:	e7f3      	b.n	2250 <start_le_scan+0x80>
    2268:	20003478 	.word	0x20003478
    226c:	200034e8 	.word	0x200034e8

00002270 <bt_le_scan_update>:
{
    2270:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2272:	2109      	movs	r1, #9
{
    2274:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2276:	4816      	ldr	r0, [pc, #88]	; (22d0 <bt_le_scan_update+0x60>)
    2278:	f7ff fe1a 	bl	1eb0 <atomic_test_bit>
    227c:	4602      	mov	r2, r0
    227e:	b108      	cbz	r0, 2284 <bt_le_scan_update+0x14>
		return 0;
    2280:	2000      	movs	r0, #0
    2282:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2284:	2108      	movs	r1, #8
    2286:	4812      	ldr	r0, [pc, #72]	; (22d0 <bt_le_scan_update+0x60>)
    2288:	f7ff fe12 	bl	1eb0 <atomic_test_bit>
    228c:	b9d0      	cbnz	r0, 22c4 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    228e:	2101      	movs	r1, #1
    2290:	2000      	movs	r0, #0
    2292:	f001 fb89 	bl	39a8 <bt_conn_lookup_state_le>
		if (!conn) {
    2296:	4604      	mov	r4, r0
    2298:	2800      	cmp	r0, #0
    229a:	d0f1      	beq.n	2280 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    22a0:	480b      	ldr	r0, [pc, #44]	; (22d0 <bt_le_scan_update+0x60>)
    22a2:	f7ff fdad 	bl	1e00 <atomic_or>
		bt_conn_unref(conn);
    22a6:	4620      	mov	r0, r4
    22a8:	f001 fba0 	bl	39ec <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    22ac:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    22ae:	bf15      	itete	ne
    22b0:	2230      	movne	r2, #48	; 0x30
    22b2:	2212      	moveq	r2, #18
    22b4:	2160      	movne	r1, #96	; 0x60
    22b6:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    22ba:	2000      	movs	r0, #0
}
    22bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    22c0:	f7ff bf86 	b.w	21d0 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    22c4:	4610      	mov	r0, r2
    22c6:	f7ff fe6f 	bl	1fa8 <set_le_scan_enable>
		if (err) {
    22ca:	2800      	cmp	r0, #0
    22cc:	d0df      	beq.n	228e <bt_le_scan_update+0x1e>
    22ce:	bd38      	pop	{r3, r4, r5, pc}
    22d0:	200034e8 	.word	0x200034e8

000022d4 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    22d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    22d8:	4dc1      	ldr	r5, [pc, #772]	; (25e0 <bt_init+0x30c>)
    22da:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    22de:	6899      	ldr	r1, [r3, #8]
    22e0:	f011 0101 	ands.w	r1, r1, #1
{
    22e4:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    22e6:	d124      	bne.n	2332 <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    22e8:	aa04      	add	r2, sp, #16
    22ea:	f640 4003 	movw	r0, #3075	; 0xc03
    22ee:	f7ff fe1d 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    22f2:	4604      	mov	r4, r0
    22f4:	2800      	cmp	r0, #0
    22f6:	f040 81c8 	bne.w	268a <bt_init+0x3b6>
	u8_t status = buf->data[0];
    22fa:	9b04      	ldr	r3, [sp, #16]
    22fc:	689b      	ldr	r3, [r3, #8]
	if (status) {
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	b9a3      	cbnz	r3, 232c <bt_init+0x58>
	scan_dev_found_cb = NULL;
    2302:	4ab8      	ldr	r2, [pc, #736]	; (25e4 <bt_init+0x310>)
    2304:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2306:	462b      	mov	r3, r5
    2308:	f3bf 8f5b 	dmb	ish
    230c:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2310:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2314:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2318:	f3bf 8f5b 	dmb	ish
    231c:	e853 1f00 	ldrex	r1, [r3]
    2320:	e843 2000 	strex	r0, r2, [r3]
    2324:	2800      	cmp	r0, #0
    2326:	d1f9      	bne.n	231c <bt_init+0x48>
    2328:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    232c:	9804      	ldr	r0, [sp, #16]
    232e:	f00e f9b1 	bl	10694 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2332:	aa04      	add	r2, sp, #16
    2334:	2100      	movs	r1, #0
    2336:	f241 0003 	movw	r0, #4099	; 0x1003
    233a:	f7ff fdf7 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    233e:	4604      	mov	r4, r0
    2340:	2800      	cmp	r0, #0
    2342:	f040 81a2 	bne.w	268a <bt_init+0x3b6>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2346:	9b04      	ldr	r3, [sp, #16]
    2348:	48a7      	ldr	r0, [pc, #668]	; (25e8 <bt_init+0x314>)
    234a:	6899      	ldr	r1, [r3, #8]
    234c:	2208      	movs	r2, #8
    234e:	3101      	adds	r1, #1
    2350:	f7ff fc54 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2354:	9804      	ldr	r0, [sp, #16]
    2356:	f00e f99d 	bl	10694 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    235a:	4621      	mov	r1, r4
    235c:	aa04      	add	r2, sp, #16
    235e:	f241 0001 	movw	r0, #4097	; 0x1001
    2362:	f7ff fde3 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2366:	4604      	mov	r4, r0
    2368:	2800      	cmp	r0, #0
    236a:	f040 818e 	bne.w	268a <bt_init+0x3b6>
	read_local_ver_complete(rsp);
    236e:	9804      	ldr	r0, [sp, #16]
    2370:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2372:	785a      	ldrb	r2, [r3, #1]
    2374:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2376:	78d9      	ldrb	r1, [r3, #3]
    2378:	789a      	ldrb	r2, [r3, #2]
    237a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    237e:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2380:	791a      	ldrb	r2, [r3, #4]
    2382:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2384:	7a19      	ldrb	r1, [r3, #8]
    2386:	79da      	ldrb	r2, [r3, #7]
    2388:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    238c:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    238e:	795a      	ldrb	r2, [r3, #5]
    2390:	799b      	ldrb	r3, [r3, #6]
    2392:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2396:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2398:	f00e f97c 	bl	10694 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    239c:	2103      	movs	r1, #3
    239e:	4893      	ldr	r0, [pc, #588]	; (25ec <bt_init+0x318>)
    23a0:	f7ff fd86 	bl	1eb0 <atomic_test_bit>
    23a4:	4601      	mov	r1, r0
    23a6:	b998      	cbnz	r0, 23d0 <bt_init+0xfc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    23a8:	aa04      	add	r2, sp, #16
    23aa:	f241 0009 	movw	r0, #4105	; 0x1009
    23ae:	f7ff fdbd 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    23b2:	4604      	mov	r4, r0
    23b4:	2800      	cmp	r0, #0
    23b6:	f040 8168 	bne.w	268a <bt_init+0x3b6>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    23ba:	9b04      	ldr	r3, [sp, #16]
    23bc:	488c      	ldr	r0, [pc, #560]	; (25f0 <bt_init+0x31c>)
    23be:	6899      	ldr	r1, [r3, #8]
    23c0:	2206      	movs	r2, #6
    23c2:	3101      	adds	r1, #1
    23c4:	f7ff fc1a 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    23c8:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    23ca:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    23cc:	f00e f962 	bl	10694 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    23d0:	aa04      	add	r2, sp, #16
    23d2:	2100      	movs	r1, #0
    23d4:	f241 0002 	movw	r0, #4098	; 0x1002
    23d8:	f7ff fda8 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    23dc:	4604      	mov	r4, r0
    23de:	2800      	cmp	r0, #0
    23e0:	f040 8153 	bne.w	268a <bt_init+0x3b6>
	memcpy(bt_dev.supported_commands, rp->commands,
    23e4:	9b04      	ldr	r3, [sp, #16]
    23e6:	4883      	ldr	r0, [pc, #524]	; (25f4 <bt_init+0x320>)
    23e8:	6899      	ldr	r1, [r3, #8]
    23ea:	2240      	movs	r2, #64	; 0x40
    23ec:	3101      	adds	r1, #1
    23ee:	f7ff fc05 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    23f2:	9804      	ldr	r0, [sp, #16]
    23f4:	f00e f94e 	bl	10694 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    23f8:	7eab      	ldrb	r3, [r5, #26]
    23fa:	065a      	lsls	r2, r3, #25
    23fc:	f140 81b0 	bpl.w	2760 <bt_init+0x48c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2400:	4621      	mov	r1, r4
    2402:	aa04      	add	r2, sp, #16
    2404:	f242 0003 	movw	r0, #8195	; 0x2003
    2408:	f7ff fd90 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    240c:	4604      	mov	r4, r0
    240e:	2800      	cmp	r0, #0
    2410:	f040 813b 	bne.w	268a <bt_init+0x3b6>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2414:	9b04      	ldr	r3, [sp, #16]
    2416:	4878      	ldr	r0, [pc, #480]	; (25f8 <bt_init+0x324>)
    2418:	6899      	ldr	r1, [r3, #8]
    241a:	2208      	movs	r2, #8
    241c:	3101      	adds	r1, #1
    241e:	f7ff fbed 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2422:	9804      	ldr	r0, [sp, #16]
    2424:	f00e f936 	bl	10694 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2428:	4621      	mov	r1, r4
    242a:	aa04      	add	r2, sp, #16
    242c:	f242 0002 	movw	r0, #8194	; 0x2002
    2430:	f7ff fd7c 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2434:	4604      	mov	r4, r0
    2436:	2800      	cmp	r0, #0
    2438:	f040 8127 	bne.w	268a <bt_init+0x3b6>
    243c:	9b04      	ldr	r3, [sp, #16]
    243e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2440:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    2444:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2448:	b13a      	cbz	r2, 245a <bt_init+0x186>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    244a:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    244c:	486b      	ldr	r0, [pc, #428]	; (25fc <bt_init+0x328>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    244e:	2a02      	cmp	r2, #2
    2450:	bf28      	it	cs
    2452:	2202      	movcs	r2, #2
    2454:	4611      	mov	r1, r2
    2456:	f00f f99d 	bl	11794 <_impl_k_sem_init>
	net_buf_unref(rsp);
    245a:	9804      	ldr	r0, [sp, #16]
    245c:	f00e f91a 	bl	10694 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2460:	7eac      	ldrb	r4, [r5, #26]
    2462:	f014 0420 	ands.w	r4, r4, #32
    2466:	f000 80f5 	beq.w	2654 <bt_init+0x380>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    246a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    246e:	071b      	lsls	r3, r3, #28
    2470:	d514      	bpl.n	249c <bt_init+0x1c8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2472:	aa04      	add	r2, sp, #16
    2474:	2100      	movs	r1, #0
    2476:	f242 001c 	movw	r0, #8220	; 0x201c
    247a:	f7ff fd57 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    247e:	4604      	mov	r4, r0
    2480:	2800      	cmp	r0, #0
    2482:	f040 8102 	bne.w	268a <bt_init+0x3b6>
		le_read_supp_states_complete(rsp);
    2486:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2488:	6883      	ldr	r3, [r0, #8]
    248a:	f853 2f01 	ldr.w	r2, [r3, #1]!
    248e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2490:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2494:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2498:	f00e f8fc 	bl	10694 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    249c:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    24a0:	069f      	lsls	r7, r3, #26
    24a2:	f100 80f6 	bmi.w	2692 <bt_init+0x3be>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    24a6:	2108      	movs	r1, #8
    24a8:	f242 0001 	movw	r0, #8193	; 0x2001
    24ac:	f7ff fd0e 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    24b0:	4604      	mov	r4, r0
    24b2:	2800      	cmp	r0, #0
    24b4:	f000 80d5 	beq.w	2662 <bt_init+0x38e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    24b8:	2108      	movs	r1, #8
    24ba:	4408      	add	r0, r1
    24bc:	f00e f91c 	bl	106f8 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    24c0:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    24c4:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    24c6:	bf4c      	ite	mi
    24c8:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    24ca:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    24cc:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    24ce:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    24d2:	bf48      	it	mi
    24d4:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    24d8:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    24dc:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    24e0:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    24e4:	bf18      	it	ne
    24e6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    24ea:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    24ec:	bf08      	it	eq
    24ee:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    24f2:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    24f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    24f8:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    24fa:	2200      	movs	r2, #0
    24fc:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    24fe:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2500:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2502:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2504:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2506:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2508:	4621      	mov	r1, r4
    250a:	f242 0001 	movw	r0, #8193	; 0x2001
    250e:	f7ff fd0d 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2512:	4604      	mov	r4, r0
    2514:	2800      	cmp	r0, #0
    2516:	f040 80b8 	bne.w	268a <bt_init+0x3b6>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    251a:	7eab      	ldrb	r3, [r5, #26]
    251c:	069a      	lsls	r2, r3, #26
    251e:	d421      	bmi.n	2564 <bt_init+0x290>
	if (bt_dev.le.mtu) {
    2520:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    2524:	b9f1      	cbnz	r1, 2564 <bt_init+0x290>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2526:	aa04      	add	r2, sp, #16
    2528:	f241 0005 	movw	r0, #4101	; 0x1005
    252c:	f7ff fcfe 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2530:	4604      	mov	r4, r0
    2532:	2800      	cmp	r0, #0
    2534:	f040 80a9 	bne.w	268a <bt_init+0x3b6>
	if (bt_dev.le.mtu) {
    2538:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    253c:	b97b      	cbnz	r3, 255e <bt_init+0x28a>
    253e:	9b04      	ldr	r3, [sp, #16]
    2540:	482e      	ldr	r0, [pc, #184]	; (25fc <bt_init+0x328>)
    2542:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2544:	7899      	ldrb	r1, [r3, #2]
    2546:	785a      	ldrb	r2, [r3, #1]
    2548:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    254c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2550:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2552:	2a02      	cmp	r2, #2
    2554:	bf28      	it	cs
    2556:	2202      	movcs	r2, #2
    2558:	4611      	mov	r1, r2
    255a:	f00f f91b 	bl	11794 <_impl_k_sem_init>
	net_buf_unref(rsp);
    255e:	9804      	ldr	r0, [sp, #16]
    2560:	f00e f898 	bl	10694 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2564:	2108      	movs	r1, #8
    2566:	f640 4001 	movw	r0, #3073	; 0xc01
    256a:	f7ff fcaf 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    256e:	4604      	mov	r4, r0
    2570:	2800      	cmp	r0, #0
    2572:	d076      	beq.n	2662 <bt_init+0x38e>
	ev = net_buf_add(buf, sizeof(*ev));
    2574:	2108      	movs	r1, #8
    2576:	4408      	add	r0, r1
    2578:	f00e f8be 	bl	106f8 <net_buf_simple_add>
	dst[0] = val;
    257c:	2310      	movs	r3, #16
    257e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2580:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    2582:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2584:	7043      	strb	r3, [r0, #1]
    2586:	2602      	movs	r6, #2
    2588:	2320      	movs	r3, #32
	dst[0] = val;
    258a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    258c:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    258e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2590:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2592:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2594:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2596:	4621      	mov	r1, r4
    2598:	f640 4001 	movw	r0, #3073	; 0xc01
    259c:	f7ff fcc6 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    25a0:	4604      	mov	r4, r0
    25a2:	2800      	cmp	r0, #0
    25a4:	d171      	bne.n	268a <bt_init+0x3b6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    25a6:	4601      	mov	r1, r0
    25a8:	aa04      	add	r2, sp, #16
    25aa:	f64f 4001 	movw	r0, #64513	; 0xfc01
    25ae:	f7ff fcbd 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    25b2:	4604      	mov	r4, r0
    25b4:	2800      	cmp	r0, #0
    25b6:	d138      	bne.n	262a <bt_init+0x356>
	net_buf_unref(rsp);
    25b8:	9804      	ldr	r0, [sp, #16]
    25ba:	f00e f86b 	bl	10694 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    25be:	4621      	mov	r1, r4
    25c0:	aa04      	add	r2, sp, #16
    25c2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    25c6:	f7ff fcb1 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    25ca:	4604      	mov	r4, r0
    25cc:	bb68      	cbnz	r0, 262a <bt_init+0x356>
	rp.cmds = (void *)rsp->data;
    25ce:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    25d0:	480b      	ldr	r0, [pc, #44]	; (2600 <bt_init+0x32c>)
    25d2:	6899      	ldr	r1, [r3, #8]
    25d4:	4632      	mov	r2, r6
    25d6:	3101      	adds	r1, #1
    25d8:	f7ff fb10 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    25dc:	9804      	ldr	r0, [sp, #16]
    25de:	e011      	b.n	2604 <bt_init+0x330>
    25e0:	20003478 	.word	0x20003478
    25e4:	20000074 	.word	0x20000074
    25e8:	2000348e 	.word	0x2000348e
    25ec:	200034e8 	.word	0x200034e8
    25f0:	20003479 	.word	0x20003479
    25f4:	20003496 	.word	0x20003496
    25f8:	200034f0 	.word	0x200034f0
    25fc:	20003504 	.word	0x20003504
    2600:	200034d7 	.word	0x200034d7
    2604:	f00e f846 	bl	10694 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2608:	aa04      	add	r2, sp, #16
    260a:	4621      	mov	r1, r4
    260c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2610:	f7ff fc8c 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    2614:	b948      	cbnz	r0, 262a <bt_init+0x356>
	rp.feat = (void *)rsp->data;
    2616:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2618:	4853      	ldr	r0, [pc, #332]	; (2768 <bt_init+0x494>)
    261a:	6899      	ldr	r1, [r3, #8]
    261c:	2201      	movs	r2, #1
    261e:	4411      	add	r1, r2
    2620:	f7ff faec 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2624:	9804      	ldr	r0, [sp, #16]
    2626:	f00e f835 	bl	10694 <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    262a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    262c:	2207      	movs	r2, #7
    262e:	a904      	add	r1, sp, #16
    2630:	484e      	ldr	r0, [pc, #312]	; (276c <bt_init+0x498>)
    2632:	9304      	str	r3, [sp, #16]
    2634:	f8cd 3013 	str.w	r3, [sp, #19]
    2638:	f7ff facb 	bl	1bd2 <memcmp>
    263c:	2800      	cmp	r0, #0
    263e:	d153      	bne.n	26e8 <bt_init+0x414>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2640:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2644:	07db      	lsls	r3, r3, #31
    2646:	d46c      	bmi.n	2722 <bt_init+0x44e>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2648:	4848      	ldr	r0, [pc, #288]	; (276c <bt_init+0x498>)
    264a:	f7ff fd6d 	bl	2128 <bt_addr_le_create_static>
		if (err) {
    264e:	4604      	mov	r4, r0
    2650:	b9d8      	cbnz	r0, 268a <bt_init+0x3b6>
    2652:	e07c      	b.n	274e <bt_init+0x47a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2654:	2102      	movs	r1, #2
    2656:	f640 406d 	movw	r0, #3181	; 0xc6d
    265a:	f7ff fc37 	bl	1ecc <bt_hci_cmd_create>
		if (!buf) {
    265e:	4606      	mov	r6, r0
    2660:	b910      	cbnz	r0, 2668 <bt_init+0x394>
		return -ENOBUFS;
    2662:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2666:	e010      	b.n	268a <bt_init+0x3b6>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2668:	2102      	movs	r1, #2
    266a:	3008      	adds	r0, #8
    266c:	f00e f844 	bl	106f8 <net_buf_simple_add>
		cp_le->le = 0x01;
    2670:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2672:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2674:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2676:	4622      	mov	r2, r4
    2678:	4631      	mov	r1, r6
    267a:	f640 406d 	movw	r0, #3181	; 0xc6d
    267e:	f7ff fc55 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    2682:	4604      	mov	r4, r0
    2684:	2800      	cmp	r0, #0
    2686:	f43f aef0 	beq.w	246a <bt_init+0x196>
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    268a:	4620      	mov	r0, r4
    268c:	b006      	add	sp, #24
    268e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2692:	aa04      	add	r2, sp, #16
    2694:	2100      	movs	r1, #0
    2696:	f242 002f 	movw	r0, #8239	; 0x202f
    269a:	f7ff fc47 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    269e:	4604      	mov	r4, r0
    26a0:	2800      	cmp	r0, #0
    26a2:	d1f2      	bne.n	268a <bt_init+0x3b6>
		rp = (void *)rsp->data;
    26a4:	9804      	ldr	r0, [sp, #16]
    26a6:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    26a8:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    26ac:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    26b0:	f00d fff0 	bl	10694 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    26b4:	2104      	movs	r1, #4
    26b6:	f242 0024 	movw	r0, #8228	; 0x2024
    26ba:	f7ff fc07 	bl	1ecc <bt_hci_cmd_create>
		if (!buf) {
    26be:	4606      	mov	r6, r0
    26c0:	2800      	cmp	r0, #0
    26c2:	d0ce      	beq.n	2662 <bt_init+0x38e>
		cp = net_buf_add(buf, sizeof(*cp));
    26c4:	2104      	movs	r1, #4
    26c6:	3008      	adds	r0, #8
    26c8:	f00e f816 	bl	106f8 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    26cc:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    26ce:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    26d2:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    26d4:	4631      	mov	r1, r6
    26d6:	f242 0024 	movw	r0, #8228	; 0x2024
    26da:	f7ff fc27 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    26de:	4604      	mov	r4, r0
    26e0:	2800      	cmp	r0, #0
    26e2:	f43f aee0 	beq.w	24a6 <bt_init+0x1d2>
    26e6:	e7d0      	b.n	268a <bt_init+0x3b6>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    26e8:	4b21      	ldr	r3, [pc, #132]	; (2770 <bt_init+0x49c>)
    26ea:	6818      	ldr	r0, [r3, #0]
    26ec:	889a      	ldrh	r2, [r3, #4]
    26ee:	9002      	str	r0, [sp, #8]
    26f0:	799b      	ldrb	r3, [r3, #6]
    26f2:	f8ad 200c 	strh.w	r2, [sp, #12]
    26f6:	a902      	add	r1, sp, #8
    26f8:	2207      	movs	r2, #7
    26fa:	481c      	ldr	r0, [pc, #112]	; (276c <bt_init+0x498>)
    26fc:	f88d 300e 	strb.w	r3, [sp, #14]
    2700:	f7ff fa67 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2704:	2800      	cmp	r0, #0
    2706:	d09b      	beq.n	2640 <bt_init+0x36c>
		err = bt_conn_init();
    2708:	f001 fb9e 	bl	3e48 <bt_conn_init>
		if (err) {
    270c:	4604      	mov	r4, r0
    270e:	2800      	cmp	r0, #0
    2710:	d1bb      	bne.n	268a <bt_init+0x3b6>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2712:	2102      	movs	r1, #2
    2714:	4817      	ldr	r0, [pc, #92]	; (2774 <bt_init+0x4a0>)
    2716:	f7ff fb73 	bl	1e00 <atomic_or>
	bt_le_scan_update(false);
    271a:	4620      	mov	r0, r4
    271c:	f7ff fda8 	bl	2270 <bt_le_scan_update>
    2720:	e7b3      	b.n	268a <bt_init+0x3b6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2722:	aa01      	add	r2, sp, #4
    2724:	2100      	movs	r1, #0
    2726:	f64f 4009 	movw	r0, #64521	; 0xfc09
    272a:	f7ff fbff 	bl	1f2c <bt_hci_cmd_send_sync>
		if (err) {
    272e:	2800      	cmp	r0, #0
    2730:	d18a      	bne.n	2648 <bt_init+0x374>
		rp = (void *)rsp->data;
    2732:	9801      	ldr	r0, [sp, #4]
    2734:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    2736:	784b      	ldrb	r3, [r1, #1]
    2738:	b17b      	cbz	r3, 275a <bt_init+0x486>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    273a:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    273c:	2206      	movs	r2, #6
    273e:	3102      	adds	r1, #2
    2740:	480d      	ldr	r0, [pc, #52]	; (2778 <bt_init+0x4a4>)
    2742:	702b      	strb	r3, [r5, #0]
    2744:	f7ff fa5a 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    2748:	9801      	ldr	r0, [sp, #4]
    274a:	f00d ffa3 	bl	10694 <net_buf_unref>
		return bt_set_static_addr();
    274e:	f7ff fcf9 	bl	2144 <bt_set_static_addr>
    2752:	4604      	mov	r4, r0
		if (err) {
    2754:	2800      	cmp	r0, #0
    2756:	d0d7      	beq.n	2708 <bt_init+0x434>
    2758:	e797      	b.n	268a <bt_init+0x3b6>
		net_buf_unref(rsp);
    275a:	f00d ff9b 	bl	10694 <net_buf_unref>
    275e:	e773      	b.n	2648 <bt_init+0x374>
		return -ENODEV;
    2760:	f06f 0412 	mvn.w	r4, #18
    2764:	e791      	b.n	268a <bt_init+0x3b6>
    2766:	bf00      	nop
    2768:	200034d6 	.word	0x200034d6
    276c:	20003478 	.word	0x20003478
    2770:	00012238 	.word	0x00012238
    2774:	200034e8 	.word	0x200034e8
    2778:	20003479 	.word	0x20003479

0000277c <init_work>:

static void init_work(struct k_work *work)
{
    277c:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    277e:	f7ff fda9 	bl	22d4 <bt_init>
	if (ready_cb) {
    2782:	4b03      	ldr	r3, [pc, #12]	; (2790 <init_work+0x14>)
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	b113      	cbz	r3, 278e <init_work+0x12>
		ready_cb(err);
	}
}
    2788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    278c:	4718      	bx	r3
    278e:	bd10      	pop	{r4, pc}
    2790:	20000070 	.word	0x20000070

00002794 <hci_le_set_phy.isra.29>:
static int hci_le_set_phy(struct bt_conn *conn)
    2794:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2796:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2798:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    279a:	f242 0032 	movw	r0, #8242	; 0x2032
    279e:	f7ff fb95 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    27a2:	4605      	mov	r5, r0
    27a4:	b198      	cbz	r0, 27ce <hci_le_set_phy.isra.29+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    27a6:	2107      	movs	r1, #7
    27a8:	3008      	adds	r0, #8
    27aa:	f00d ffa5 	bl	106f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    27ae:	8823      	ldrh	r3, [r4, #0]
    27b0:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    27b2:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    27b4:	2302      	movs	r3, #2
	cp->all_phys = 0;
    27b6:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    27b8:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    27ba:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    27bc:	7144      	strb	r4, [r0, #5]
    27be:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    27c0:	4629      	mov	r1, r5
    27c2:	f242 0032 	movw	r0, #8242	; 0x2032
    27c6:	f7ff fce1 	bl	218c <bt_hci_cmd_send>
	return 0;
    27ca:	4620      	mov	r0, r4
    27cc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    27ce:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    27d2:	bd38      	pop	{r3, r4, r5, pc}

000027d4 <hci_le_set_data_len.isra.30>:
static int hci_le_set_data_len(struct bt_conn *conn)
    27d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    27d6:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    27d8:	aa01      	add	r2, sp, #4
    27da:	2100      	movs	r1, #0
    27dc:	f242 002f 	movw	r0, #8239	; 0x202f
    27e0:	f7ff fba4 	bl	1f2c <bt_hci_cmd_send_sync>
	if (err) {
    27e4:	b9d8      	cbnz	r0, 281e <hci_le_set_data_len.isra.30+0x4a>
	rp = (void *)rsp->data;
    27e6:	9801      	ldr	r0, [sp, #4]
    27e8:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    27ea:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    27ee:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    27f2:	f00d ff4f 	bl	10694 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    27f6:	2106      	movs	r1, #6
    27f8:	f242 0022 	movw	r0, #8226	; 0x2022
    27fc:	f7ff fb66 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2800:	4604      	mov	r4, r0
    2802:	b170      	cbz	r0, 2822 <hci_le_set_data_len.isra.30+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2804:	2106      	movs	r1, #6
    2806:	3008      	adds	r0, #8
    2808:	f00d ff76 	bl	106f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    280c:	883b      	ldrh	r3, [r7, #0]
    280e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2810:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2812:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2814:	4621      	mov	r1, r4
    2816:	f242 0022 	movw	r0, #8226	; 0x2022
    281a:	f7ff fcb7 	bl	218c <bt_hci_cmd_send>
}
    281e:	b003      	add	sp, #12
    2820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2822:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2826:	e7fa      	b.n	281e <hci_le_set_data_len.isra.30+0x4a>

00002828 <le_enh_conn_complete>:
{
    2828:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    282a:	7803      	ldrb	r3, [r0, #0]
{
    282c:	b085      	sub	sp, #20
    282e:	4605      	mov	r5, r0
	if (evt->status) {
    2830:	b17b      	cbz	r3, 2852 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2832:	2102      	movs	r1, #2
    2834:	2000      	movs	r0, #0
    2836:	f001 f8b7 	bl	39a8 <bt_conn_lookup_state_le>
		if (!conn) {
    283a:	4604      	mov	r4, r0
    283c:	b138      	cbz	r0, 284e <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    283e:	782b      	ldrb	r3, [r5, #0]
    2840:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2842:	2100      	movs	r1, #0
    2844:	f000 ffba 	bl	37bc <bt_conn_set_state>
		bt_conn_unref(conn);
    2848:	4620      	mov	r0, r4
    284a:	f001 f8cf 	bl	39ec <bt_conn_unref>
}
    284e:	b005      	add	sp, #20
    2850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2852:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2854:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2858:	4621      	mov	r1, r4
    285a:	a802      	add	r0, sp, #8
    285c:	f7ff facd 	bl	1dfa <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2860:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2864:	3b02      	subs	r3, #2
    2866:	b2db      	uxtb	r3, r3
    2868:	2b01      	cmp	r3, #1
    286a:	d87d      	bhi.n	2968 <le_enh_conn_complete+0x140>
    286c:	2206      	movs	r2, #6
    286e:	f105 0111 	add.w	r1, r5, #17
    2872:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2876:	f88d 3008 	strb.w	r3, [sp, #8]
    287a:	f7ff f9bf 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    287e:	2301      	movs	r3, #1
    2880:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2884:	2102      	movs	r1, #2
    2886:	a802      	add	r0, sp, #8
    2888:	f001 f88e 	bl	39a8 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    288c:	78eb      	ldrb	r3, [r5, #3]
    288e:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2890:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2892:	d109      	bne.n	28a8 <le_enh_conn_complete+0x80>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2894:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2898:	4844      	ldr	r0, [pc, #272]	; (29ac <le_enh_conn_complete+0x184>)
    289a:	f7ff fac2 	bl	1e22 <atomic_and>
		if (!conn) {
    289e:	b92c      	cbnz	r4, 28ac <le_enh_conn_complete+0x84>
			conn = bt_conn_add_le(&id_addr);
    28a0:	a802      	add	r0, sp, #8
    28a2:	f000 ff57 	bl	3754 <bt_conn_add_le>
    28a6:	4604      	mov	r4, r0
	if (!conn) {
    28a8:	2c00      	cmp	r4, #0
    28aa:	d0d0      	beq.n	284e <le_enh_conn_complete+0x26>
	conn->handle   = handle;
    28ac:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    28ae:	a902      	add	r1, sp, #8
	conn->handle   = handle;
    28b0:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    28b4:	f7ff faa1 	bl	1dfa <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    28b8:	7e2a      	ldrb	r2, [r5, #24]
    28ba:	7deb      	ldrb	r3, [r5, #23]
    28bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28c0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    28c4:	7eaa      	ldrb	r2, [r5, #26]
    28c6:	7e6b      	ldrb	r3, [r5, #25]
    28c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28cc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    28d0:	7eeb      	ldrb	r3, [r5, #27]
    28d2:	7f2a      	ldrb	r2, [r5, #28]
    28d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28d8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    28dc:	78ee      	ldrb	r6, [r5, #3]
    28de:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    28e0:	2e01      	cmp	r6, #1
    28e2:	d11a      	bne.n	291a <le_enh_conn_complete+0xf2>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    28e4:	4f32      	ldr	r7, [pc, #200]	; (29b0 <le_enh_conn_complete+0x188>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    28e6:	4669      	mov	r1, sp
    28e8:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    28ec:	f7ff fa85 	bl	1dfa <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    28f0:	4639      	mov	r1, r7
    28f2:	f104 0052 	add.w	r0, r4, #82	; 0x52
    28f6:	f7ff fa80 	bl	1dfa <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    28fa:	2107      	movs	r1, #7
    28fc:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2900:	f7ff fad6 	bl	1eb0 <atomic_test_bit>
    2904:	b148      	cbz	r0, 291a <le_enh_conn_complete+0xf2>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2906:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    290a:	2200      	movs	r2, #0
    290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2910:	4313      	orrs	r3, r2
    2912:	d002      	beq.n	291a <le_enh_conn_complete+0xf2>
			set_advertise_enable(true);
    2914:	4630      	mov	r0, r6
    2916:	f7ff fbbd 	bl	2094 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    291a:	2103      	movs	r1, #3
    291c:	4620      	mov	r0, r4
    291e:	f000 ff4d 	bl	37bc <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2922:	7a63      	ldrb	r3, [r4, #9]
    2924:	2b03      	cmp	r3, #3
    2926:	d118      	bne.n	295a <le_enh_conn_complete+0x132>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2928:	78eb      	ldrb	r3, [r5, #3]
    292a:	b123      	cbz	r3, 2936 <le_enh_conn_complete+0x10e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    292c:	4b20      	ldr	r3, [pc, #128]	; (29b0 <le_enh_conn_complete+0x188>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    292e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2932:	0719      	lsls	r1, r3, #28
    2934:	d51d      	bpl.n	2972 <le_enh_conn_complete+0x14a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2936:	2102      	movs	r1, #2
    2938:	f242 0016 	movw	r0, #8214	; 0x2016
    293c:	f7ff fac6 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2940:	4605      	mov	r5, r0
    2942:	b1b0      	cbz	r0, 2972 <le_enh_conn_complete+0x14a>
	cp = net_buf_add(buf, sizeof(*cp));
    2944:	2102      	movs	r1, #2
    2946:	3008      	adds	r0, #8
    2948:	f00d fed6 	bl	106f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    294c:	8823      	ldrh	r3, [r4, #0]
    294e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2950:	4629      	mov	r1, r5
    2952:	f242 0016 	movw	r0, #8214	; 0x2016
    2956:	f7ff fc19 	bl	218c <bt_hci_cmd_send>
	bt_conn_unref(conn);
    295a:	4620      	mov	r0, r4
    295c:	f001 f846 	bl	39ec <bt_conn_unref>
	bt_le_scan_update(false);
    2960:	2000      	movs	r0, #0
    2962:	f7ff fc85 	bl	2270 <bt_le_scan_update>
    2966:	e772      	b.n	284e <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2968:	4621      	mov	r1, r4
    296a:	4668      	mov	r0, sp
    296c:	f7ff fa45 	bl	1dfa <bt_addr_le_copy>
    2970:	e788      	b.n	2884 <le_enh_conn_complete+0x5c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2972:	4d0f      	ldr	r5, [pc, #60]	; (29b0 <le_enh_conn_complete+0x188>)
    2974:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2978:	07d2      	lsls	r2, r2, #31
    297a:	d508      	bpl.n	298e <le_enh_conn_complete+0x166>
		err = hci_le_set_phy(conn);
    297c:	4620      	mov	r0, r4
    297e:	f7ff ff09 	bl	2794 <hci_le_set_phy.isra.29>
		if (!err) {
    2982:	b920      	cbnz	r0, 298e <le_enh_conn_complete+0x166>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2984:	2180      	movs	r1, #128	; 0x80
    2986:	1d20      	adds	r0, r4, #4
    2988:	f7ff fa3a 	bl	1e00 <atomic_or>
    298c:	e7e5      	b.n	295a <le_enh_conn_complete+0x132>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    298e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2992:	069b      	lsls	r3, r3, #26
    2994:	d506      	bpl.n	29a4 <le_enh_conn_complete+0x17c>
		err = hci_le_set_data_len(conn);
    2996:	4620      	mov	r0, r4
    2998:	f7ff ff1c 	bl	27d4 <hci_le_set_data_len.isra.30>
		if (!err) {
    299c:	b910      	cbnz	r0, 29a4 <le_enh_conn_complete+0x17c>
    299e:	f44f 7180 	mov.w	r1, #256	; 0x100
    29a2:	e7f0      	b.n	2986 <le_enh_conn_complete+0x15e>
	update_conn_param(conn);
    29a4:	4620      	mov	r0, r4
    29a6:	f7ff fa4d 	bl	1e44 <update_conn_param>
    29aa:	e7d6      	b.n	295a <le_enh_conn_complete+0x132>
    29ac:	200034e8 	.word	0x200034e8
    29b0:	20003478 	.word	0x20003478

000029b4 <le_conn_param_neg_reply>:
{
    29b4:	b570      	push	{r4, r5, r6, lr}
    29b6:	4606      	mov	r6, r0
    29b8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    29ba:	f242 0021 	movw	r0, #8225	; 0x2021
    29be:	2103      	movs	r1, #3
    29c0:	f7ff fa84 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    29c4:	4604      	mov	r4, r0
    29c6:	b160      	cbz	r0, 29e2 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    29c8:	2103      	movs	r1, #3
    29ca:	3008      	adds	r0, #8
    29cc:	f00d fe94 	bl	106f8 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    29d0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    29d2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    29d4:	4621      	mov	r1, r4
    29d6:	f242 0021 	movw	r0, #8225	; 0x2021
}
    29da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    29de:	f7ff bbd5 	b.w	218c <bt_hci_cmd_send>
}
    29e2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    29e6:	bd70      	pop	{r4, r5, r6, pc}

000029e8 <hci_tx_thread>:
{
    29e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    29ec:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2ad0 <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    29f0:	4c35      	ldr	r4, [pc, #212]	; (2ac8 <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    29f2:	f898 300d 	ldrb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    29f6:	4835      	ldr	r0, [pc, #212]	; (2acc <hci_tx_thread+0xe4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    29f8:	f36f 1307 	bfc	r3, #4, #4
    29fc:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2a00:	f000 fe60 	bl	36c4 <bt_conn_prepare_events>
    2a04:	1c47      	adds	r7, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a0a:	4639      	mov	r1, r7
    2a0c:	4830      	ldr	r0, [pc, #192]	; (2ad0 <hci_tx_thread+0xe8>)
    2a0e:	f00f fb0b 	bl	12028 <_impl_k_poll>
		BT_ASSERT(err == 0);
    2a12:	b9b8      	cbnz	r0, 2a44 <hci_tx_thread+0x5c>
    2a14:	4d2e      	ldr	r5, [pc, #184]	; (2ad0 <hci_tx_thread+0xe8>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2a16:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2ad4 <hci_tx_thread+0xec>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2a1a:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
	for (; count; ev++, count--) {
    2a1e:	b917      	cbnz	r7, 2a26 <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2a20:	f00e fe82 	bl	11728 <_impl_k_yield>
    2a24:	e7e5      	b.n	29f2 <hci_tx_thread+0xa>
		switch (ev->state) {
    2a26:	7b6b      	ldrb	r3, [r5, #13]
    2a28:	091b      	lsrs	r3, r3, #4
    2a2a:	2b04      	cmp	r3, #4
    2a2c:	d139      	bne.n	2aa2 <hci_tx_thread+0xba>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2a2e:	f895 a00c 	ldrb.w	sl, [r5, #12]
    2a32:	f1ba 0f00 	cmp.w	sl, #0
    2a36:	d137      	bne.n	2aa8 <hci_tx_thread+0xc0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2a38:	4651      	mov	r1, sl
    2a3a:	4658      	mov	r0, fp
    2a3c:	f00d fe00 	bl	10640 <net_buf_get>
	BT_ASSERT(buf);
    2a40:	4606      	mov	r6, r0
    2a42:	b928      	cbnz	r0, 2a50 <hci_tx_thread+0x68>
    2a44:	4040      	eors	r0, r0
    2a46:	f380 8811 	msr	BASEPRI, r0
    2a4a:	f04f 0004 	mov.w	r0, #4
    2a4e:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2a54:	4648      	mov	r0, r9
    2a56:	f00e fece 	bl	117f6 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2a5a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2a5e:	b118      	cbz	r0, 2a68 <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
    2a60:	f00d fe18 	bl	10694 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2a64:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    2a68:	4630      	mov	r0, r6
    2a6a:	f00d fe41 	bl	106f0 <net_buf_ref>
    2a6e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    2a72:	4630      	mov	r0, r6
    2a74:	f7ff fb82 	bl	217c <bt_send>
	if (err) {
    2a78:	b198      	cbz	r0, 2aa2 <hci_tx_thread+0xba>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2a7a:	4648      	mov	r0, r9
    2a7c:	f00e fe93 	bl	117a6 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2a80:	4630      	mov	r0, r6
    2a82:	f00d fd49 	bl	10518 <net_buf_id>
    2a86:	2100      	movs	r1, #0
    2a88:	201f      	movs	r0, #31
    2a8a:	f7ff f9e9 	bl	1e60 <hci_cmd_done.isra.18>
		net_buf_unref(bt_dev.sent_cmd);
    2a8e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2a92:	f00d fdff 	bl	10694 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2a96:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2a98:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    2a9a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    2a9e:	f00d fdf9 	bl	10694 <net_buf_unref>
	for (; count; ev++, count--) {
    2aa2:	3514      	adds	r5, #20
    2aa4:	3f01      	subs	r7, #1
    2aa6:	e7ba      	b.n	2a1e <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2aa8:	f1ba 0f01 	cmp.w	sl, #1
    2aac:	d104      	bne.n	2ab8 <hci_tx_thread+0xd0>
					conn = CONTAINER_OF(ev->fifo,
    2aae:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    2ab0:	3818      	subs	r0, #24
    2ab2:	f000 fd47 	bl	3544 <bt_conn_notify_tx>
    2ab6:	e7f4      	b.n	2aa2 <hci_tx_thread+0xba>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2ab8:	f1ba 0f02 	cmp.w	sl, #2
    2abc:	d1f1      	bne.n	2aa2 <hci_tx_thread+0xba>
					conn = CONTAINER_OF(ev->fifo,
    2abe:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    2ac0:	3828      	subs	r0, #40	; 0x28
    2ac2:	f001 f95b 	bl	3d7c <bt_conn_process_tx>
    2ac6:	e7ec      	b.n	2aa2 <hci_tx_thread+0xba>
    2ac8:	20003478 	.word	0x20003478
    2acc:	20003564 	.word	0x20003564
    2ad0:	20003550 	.word	0x20003550
    2ad4:	20003520 	.word	0x20003520

00002ad8 <bt_recv>:
{
    2ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    2adc:	7d03      	ldrb	r3, [r0, #20]
    2ade:	2b01      	cmp	r3, #1
{
    2ae0:	b08f      	sub	sp, #60	; 0x3c
    2ae2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2ae4:	d02a      	beq.n	2b3c <bt_recv+0x64>
    2ae6:	2b03      	cmp	r3, #3
    2ae8:	f040 828e 	bne.w	3008 <bt_recv+0x530>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    2aec:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    2aee:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    2af0:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    2af2:	f3c6 030b 	ubfx	r3, r6, #0, #12
    2af6:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    2af8:	23ff      	movs	r3, #255	; 0xff
    2afa:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    2afc:	2104      	movs	r1, #4
    2afe:	3008      	adds	r0, #8
    2b00:	f00d fe19 	bl	10736 <net_buf_simple_pull>
	if (buf->len != len) {
    2b04:	89a3      	ldrh	r3, [r4, #12]
    2b06:	42ab      	cmp	r3, r5
    2b08:	d003      	beq.n	2b12 <bt_recv+0x3a>
	net_buf_unref(buf);
    2b0a:	4620      	mov	r0, r4
    2b0c:	f00d fdc2 	bl	10694 <net_buf_unref>
    2b10:	e010      	b.n	2b34 <bt_recv+0x5c>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    2b12:	8ae0      	ldrh	r0, [r4, #22]
    2b14:	f000 fefc 	bl	3910 <bt_conn_lookup_handle>
	if (!conn) {
    2b18:	4605      	mov	r5, r0
    2b1a:	2800      	cmp	r0, #0
    2b1c:	d0f5      	beq.n	2b0a <bt_recv+0x32>
	acl(buf)->id = bt_conn_get_id(conn);
    2b1e:	f001 f987 	bl	3e30 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    2b22:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    2b24:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    2b26:	4621      	mov	r1, r4
    2b28:	4628      	mov	r0, r5
    2b2a:	f000 fcb3 	bl	3494 <bt_conn_recv>
	bt_conn_unref(conn);
    2b2e:	4628      	mov	r0, r5
    2b30:	f000 ff5c 	bl	39ec <bt_conn_unref>
		return 0;
    2b34:	2000      	movs	r0, #0
}
    2b36:	b00f      	add	sp, #60	; 0x3c
    2b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2b3c:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2b3e:	7832      	ldrb	r2, [r6, #0]
    2b40:	2a13      	cmp	r2, #19
    2b42:	f200 8266 	bhi.w	3012 <bt_recv+0x53a>
    2b46:	4093      	lsls	r3, r2
    2b48:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    2b4c:	f000 8261 	beq.w	3012 <bt_recv+0x53a>
    2b50:	4040      	eors	r0, r0
    2b52:	f380 8811 	msr	BASEPRI, r0
    2b56:	f04f 0004 	mov.w	r0, #4
    2b5a:	df02      	svc	2
    2b5c:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    2b5e:	783e      	ldrb	r6, [r7, #0]
    2b60:	2e00      	cmp	r6, #0
    2b62:	d1d2      	bne.n	2b0a <bt_recv+0x32>
	conn = bt_conn_lookup_handle(handle);
    2b64:	f8b7 0001 	ldrh.w	r0, [r7, #1]
    2b68:	f000 fed2 	bl	3910 <bt_conn_lookup_handle>
	if (!conn) {
    2b6c:	4605      	mov	r5, r0
    2b6e:	b1e8      	cbz	r0, 2bac <bt_recv+0xd4>
	conn->err = evt->reason;
    2b70:	78fb      	ldrb	r3, [r7, #3]
    2b72:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    2b74:	49b8      	ldr	r1, [pc, #736]	; (2e58 <bt_recv+0x380>)
    2b76:	48b9      	ldr	r0, [pc, #740]	; (2e5c <bt_recv+0x384>)
    2b78:	f00e ffc6 	bl	11b08 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2b7c:	4631      	mov	r1, r6
    2b7e:	4628      	mov	r0, r5
    2b80:	f000 fe1c 	bl	37bc <bt_conn_set_state>
	conn->handle = 0;
    2b84:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    2b86:	78ae      	ldrb	r6, [r5, #2]
    2b88:	b10e      	cbz	r6, 2b8e <bt_recv+0xb6>
	bt_conn_unref(conn);
    2b8a:	4628      	mov	r0, r5
    2b8c:	e075      	b.n	2c7a <bt_recv+0x1a2>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    2b8e:	4631      	mov	r1, r6
    2b90:	1d28      	adds	r0, r5, #4
    2b92:	f7ff f98d 	bl	1eb0 <atomic_test_bit>
    2b96:	b130      	cbz	r0, 2ba6 <bt_recv+0xce>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    2b98:	4628      	mov	r0, r5
    2b9a:	2101      	movs	r1, #1
    2b9c:	f000 fe0e 	bl	37bc <bt_conn_set_state>
		bt_le_scan_update(false);
    2ba0:	4630      	mov	r0, r6
    2ba2:	f7ff fb65 	bl	2270 <bt_le_scan_update>
	bt_conn_unref(conn);
    2ba6:	4628      	mov	r0, r5
    2ba8:	f000 ff20 	bl	39ec <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2bac:	2107      	movs	r1, #7
    2bae:	48ac      	ldr	r0, [pc, #688]	; (2e60 <bt_recv+0x388>)
    2bb0:	f7ff f97e 	bl	1eb0 <atomic_test_bit>
    2bb4:	2800      	cmp	r0, #0
    2bb6:	d0a8      	beq.n	2b0a <bt_recv+0x32>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2bb8:	2106      	movs	r1, #6
    2bba:	48a9      	ldr	r0, [pc, #676]	; (2e60 <bt_recv+0x388>)
    2bbc:	f7ff f978 	bl	1eb0 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2bc0:	2800      	cmp	r0, #0
    2bc2:	d1a2      	bne.n	2b0a <bt_recv+0x32>
		set_advertise_enable(true);
    2bc4:	2001      	movs	r0, #1
    2bc6:	f7ff fa65 	bl	2094 <set_advertise_enable>
    2bca:	e79e      	b.n	2b0a <bt_recv+0x32>
    2bcc:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    2bce:	780b      	ldrb	r3, [r1, #0]
    2bd0:	f88d 3018 	strb.w	r3, [sp, #24]
	enh.handle         = evt->handle;
    2bd4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    2bd8:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.role           = evt->role;
    2bdc:	78cb      	ldrb	r3, [r1, #3]
    2bde:	f88d 301b 	strb.w	r3, [sp, #27]
	enh.interval       = evt->interval;
    2be2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    2be6:	f8ad 302f 	strh.w	r3, [sp, #47]	; 0x2f
	enh.latency        = evt->latency;
    2bea:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    2bee:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.supv_timeout   = evt->supv_timeout;
    2bf2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    2bf6:	f8ad 3033 	strh.w	r3, [sp, #51]	; 0x33
	enh.clock_accuracy = evt->clock_accuracy;
    2bfa:	7c4b      	ldrb	r3, [r1, #17]
    2bfc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    2c00:	3104      	adds	r1, #4
    2c02:	a807      	add	r0, sp, #28
    2c04:	f7ff f8f9 	bl	1dfa <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    2c08:	2500      	movs	r5, #0
    2c0a:	2206      	movs	r2, #6
    2c0c:	a902      	add	r1, sp, #8
    2c0e:	f10d 0023 	add.w	r0, sp, #35	; 0x23
    2c12:	9502      	str	r5, [sp, #8]
    2c14:	f8ad 500c 	strh.w	r5, [sp, #12]
    2c18:	f7fe fff0 	bl	1bfc <memcpy>
    2c1c:	2206      	movs	r2, #6
    2c1e:	a904      	add	r1, sp, #16
    2c20:	f10d 0029 	add.w	r0, sp, #41	; 0x29
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    2c24:	9504      	str	r5, [sp, #16]
    2c26:	f8ad 5014 	strh.w	r5, [sp, #20]
    2c2a:	f7fe ffe7 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    2c2e:	a806      	add	r0, sp, #24
		le_enh_conn_complete((void *)buf->data);
    2c30:	f7ff fdfa 	bl	2828 <le_enh_conn_complete>
    2c34:	e769      	b.n	2b0a <bt_recv+0x32>
    2c36:	68a0      	ldr	r0, [r4, #8]
    2c38:	e7fa      	b.n	2c30 <bt_recv+0x158>
    2c3a:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2c3c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    2c40:	f000 fe66 	bl	3910 <bt_conn_lookup_handle>
	if (!conn) {
    2c44:	4606      	mov	r6, r0
    2c46:	2800      	cmp	r0, #0
    2c48:	f43f af5f 	beq.w	2b0a <bt_recv+0x32>
	if (!evt->status) {
    2c4c:	782b      	ldrb	r3, [r5, #0]
    2c4e:	b99b      	cbnz	r3, 2c78 <bt_recv+0x1a0>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    2c50:	792a      	ldrb	r2, [r5, #4]
    2c52:	78eb      	ldrb	r3, [r5, #3]
    2c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2c58:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    2c5c:	79aa      	ldrb	r2, [r5, #6]
    2c5e:	796b      	ldrb	r3, [r5, #5]
    2c60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2c64:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2c68:	79eb      	ldrb	r3, [r5, #7]
    2c6a:	7a2a      	ldrb	r2, [r5, #8]
    2c6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2c70:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    2c74:	f000 fbd2 	bl	341c <notify_le_param_updated>
	bt_conn_unref(conn);
    2c78:	4630      	mov	r0, r6
    2c7a:	f000 feb7 	bl	39ec <bt_conn_unref>
    2c7e:	e744      	b.n	2b0a <bt_recv+0x32>
    2c80:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2c82:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    2c86:	f000 fe43 	bl	3910 <bt_conn_lookup_handle>
	if (!conn) {
    2c8a:	4605      	mov	r5, r0
    2c8c:	2800      	cmp	r0, #0
    2c8e:	f43f af3c 	beq.w	2b0a <bt_recv+0x32>
	if (!evt->status) {
    2c92:	7833      	ldrb	r3, [r6, #0]
    2c94:	b923      	cbnz	r3, 2ca0 <bt_recv+0x1c8>
		memcpy(conn->le.features, evt->features,
    2c96:	2208      	movs	r2, #8
    2c98:	1cf1      	adds	r1, r6, #3
    2c9a:	3064      	adds	r0, #100	; 0x64
    2c9c:	f7fe ffae 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    2ca0:	4e70      	ldr	r6, [pc, #448]	; (2e64 <bt_recv+0x38c>)
    2ca2:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    2ca6:	07d2      	lsls	r2, r2, #31
    2ca8:	d50c      	bpl.n	2cc4 <bt_recv+0x1ec>
    2caa:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    2cae:	07db      	lsls	r3, r3, #31
    2cb0:	d508      	bpl.n	2cc4 <bt_recv+0x1ec>
		err = hci_le_set_phy(conn);
    2cb2:	4628      	mov	r0, r5
    2cb4:	f7ff fd6e 	bl	2794 <hci_le_set_phy.isra.29>
		if (!err) {
    2cb8:	b920      	cbnz	r0, 2cc4 <bt_recv+0x1ec>
    2cba:	2180      	movs	r1, #128	; 0x80
    2cbc:	1d28      	adds	r0, r5, #4
    2cbe:	f7ff f89f 	bl	1e00 <atomic_or>
    2cc2:	e762      	b.n	2b8a <bt_recv+0xb2>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2cc4:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    2cc8:	069f      	lsls	r7, r3, #26
    2cca:	d56e      	bpl.n	2daa <bt_recv+0x2d2>
    2ccc:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2cd0:	069e      	lsls	r6, r3, #26
    2cd2:	d56a      	bpl.n	2daa <bt_recv+0x2d2>
		err = hci_le_set_data_len(conn);
    2cd4:	4628      	mov	r0, r5
    2cd6:	f7ff fd7d 	bl	27d4 <hci_le_set_data_len.isra.30>
		if (!err) {
    2cda:	2800      	cmp	r0, #0
    2cdc:	d165      	bne.n	2daa <bt_recv+0x2d2>
    2cde:	f44f 7180 	mov.w	r1, #256	; 0x100
    2ce2:	e7eb      	b.n	2cbc <bt_recv+0x1e4>
    2ce4:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    2ce6:	78d9      	ldrb	r1, [r3, #3]
    2ce8:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    2cea:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    2cec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2cf0:	f8ad 2018 	strh.w	r2, [sp, #24]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    2cf4:	7959      	ldrb	r1, [r3, #5]
    2cf6:	791a      	ldrb	r2, [r3, #4]
    2cf8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2cfc:	f8ad 201a 	strh.w	r2, [sp, #26]
	param.latency = sys_le16_to_cpu(evt->latency);
    2d00:	799a      	ldrb	r2, [r3, #6]
    2d02:	79d9      	ldrb	r1, [r3, #7]
    2d04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2d08:	f8ad 201c 	strh.w	r2, [sp, #28]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2d0c:	7a1a      	ldrb	r2, [r3, #8]
    2d0e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    2d10:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2d12:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    2d16:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2d18:	f8ad 301e 	strh.w	r3, [sp, #30]
	conn = bt_conn_lookup_handle(handle);
    2d1c:	f000 fdf8 	bl	3910 <bt_conn_lookup_handle>
	if (!conn) {
    2d20:	4680      	mov	r8, r0
    2d22:	b920      	cbnz	r0, 2d2e <bt_recv+0x256>
		return le_conn_param_neg_reply(handle,
    2d24:	2102      	movs	r1, #2
    2d26:	4628      	mov	r0, r5
    2d28:	f7ff fe44 	bl	29b4 <le_conn_param_neg_reply>
    2d2c:	e6ed      	b.n	2b0a <bt_recv+0x32>
	if (!le_param_req(conn, &param)) {
    2d2e:	a906      	add	r1, sp, #24
    2d30:	f000 fb88 	bl	3444 <le_param_req>
    2d34:	b928      	cbnz	r0, 2d42 <bt_recv+0x26a>
		err = le_conn_param_neg_reply(handle,
    2d36:	211e      	movs	r1, #30
    2d38:	4628      	mov	r0, r5
    2d3a:	f7ff fe3b 	bl	29b4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    2d3e:	4640      	mov	r0, r8
    2d40:	e79b      	b.n	2c7a <bt_recv+0x1a2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    2d42:	210e      	movs	r1, #14
    2d44:	f242 0020 	movw	r0, #8224	; 0x2020
    2d48:	f7ff f8c0 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2d4c:	4606      	mov	r6, r0
    2d4e:	2800      	cmp	r0, #0
    2d50:	d0f5      	beq.n	2d3e <bt_recv+0x266>
	cp = net_buf_add(buf, sizeof(*cp));
    2d52:	210e      	movs	r1, #14
    2d54:	3008      	adds	r0, #8
    2d56:	f00d fccf 	bl	106f8 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2d5a:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    2d5c:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    2d5e:	2100      	movs	r1, #0
    2d60:	f7fe ff78 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    2d64:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2d68:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    2d6a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    2d6e:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    2d70:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    2d74:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    2d76:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	cp->handle = sys_cpu_to_le16(handle);
    2d7a:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    2d7c:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    2d7e:	4631      	mov	r1, r6
    2d80:	f242 0020 	movw	r0, #8224	; 0x2020
    2d84:	f7ff fa02 	bl	218c <bt_hci_cmd_send>
    2d88:	e7d9      	b.n	2d3e <bt_recv+0x266>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d8a:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2d8c:	8818      	ldrh	r0, [r3, #0]
    2d8e:	f000 fdbf 	bl	3910 <bt_conn_lookup_handle>
	if (!conn) {
    2d92:	4605      	mov	r5, r0
    2d94:	2800      	cmp	r0, #0
    2d96:	f43f aeb8 	beq.w	2b0a <bt_recv+0x32>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d9a:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2d9e:	3004      	adds	r0, #4
    2da0:	f7ff f83f 	bl	1e22 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    2da4:	05c0      	lsls	r0, r0, #23
    2da6:	f57f aef0 	bpl.w	2b8a <bt_recv+0xb2>
	update_conn_param(conn);
    2daa:	4628      	mov	r0, r5
    2dac:	f7ff f84a 	bl	1e44 <update_conn_param>
    2db0:	e6eb      	b.n	2b8a <bt_recv+0xb2>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2db2:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2db4:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    2db8:	f000 fdaa 	bl	3910 <bt_conn_lookup_handle>
	if (!conn) {
    2dbc:	4605      	mov	r5, r0
    2dbe:	2800      	cmp	r0, #0
    2dc0:	f43f aea3 	beq.w	2b0a <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    2dc4:	1d06      	adds	r6, r0, #4
    2dc6:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2dca:	4630      	mov	r0, r6
    2dcc:	f7ff f829 	bl	1e22 <atomic_and>
    2dd0:	0601      	lsls	r1, r0, #24
    2dd2:	f57f aeda 	bpl.w	2b8a <bt_recv+0xb2>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2dd6:	4b23      	ldr	r3, [pc, #140]	; (2e64 <bt_recv+0x38c>)
    2dd8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2ddc:	069a      	lsls	r2, r3, #26
    2dde:	d5e4      	bpl.n	2daa <bt_recv+0x2d2>
    2de0:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2de4:	069b      	lsls	r3, r3, #26
    2de6:	d5e0      	bpl.n	2daa <bt_recv+0x2d2>
		err = hci_le_set_data_len(conn);
    2de8:	4628      	mov	r0, r5
    2dea:	f7ff fcf3 	bl	27d4 <hci_le_set_data_len.isra.30>
		if (!err) {
    2dee:	2800      	cmp	r0, #0
    2df0:	d1db      	bne.n	2daa <bt_recv+0x2d2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2df2:	f44f 7180 	mov.w	r1, #256	; 0x100
    2df6:	4630      	mov	r0, r6
    2df8:	e761      	b.n	2cbe <bt_recv+0x1e6>
    2dfa:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2dfc:	4818      	ldr	r0, [pc, #96]	; (2e60 <bt_recv+0x388>)
    2dfe:	f06f 0120 	mvn.w	r1, #32
    2e02:	f7ff f80e 	bl	1e22 <atomic_and>
	if (!evt->status) {
    2e06:	7833      	ldrb	r3, [r6, #0]
    2e08:	b943      	cbnz	r3, 2e1c <bt_recv+0x344>
		memcpy(pub_key, evt->key, 64);
    2e0a:	1c71      	adds	r1, r6, #1
    2e0c:	2240      	movs	r2, #64	; 0x40
    2e0e:	4816      	ldr	r0, [pc, #88]	; (2e68 <bt_recv+0x390>)
    2e10:	f7fe fef4 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e14:	2110      	movs	r1, #16
    2e16:	4812      	ldr	r0, [pc, #72]	; (2e60 <bt_recv+0x388>)
    2e18:	f7fe fff2 	bl	1e00 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2e1c:	4b13      	ldr	r3, [pc, #76]	; (2e6c <bt_recv+0x394>)
    2e1e:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    2e20:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2e22:	2d00      	cmp	r5, #0
    2e24:	f43f ae71 	beq.w	2b0a <bt_recv+0x32>
		cb->func(evt->status ? NULL : evt->key);
    2e28:	7832      	ldrb	r2, [r6, #0]
    2e2a:	682b      	ldr	r3, [r5, #0]
    2e2c:	2a00      	cmp	r2, #0
    2e2e:	bf0c      	ite	eq
    2e30:	4638      	moveq	r0, r7
    2e32:	2000      	movne	r0, #0
    2e34:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2e36:	686d      	ldr	r5, [r5, #4]
    2e38:	e7f3      	b.n	2e22 <bt_recv+0x34a>
	if (dh_key_cb) {
    2e3a:	4d0d      	ldr	r5, [pc, #52]	; (2e70 <bt_recv+0x398>)
    2e3c:	68a0      	ldr	r0, [r4, #8]
    2e3e:	682a      	ldr	r2, [r5, #0]
    2e40:	2a00      	cmp	r2, #0
    2e42:	f43f ae62 	beq.w	2b0a <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2e46:	7803      	ldrb	r3, [r0, #0]
    2e48:	b923      	cbnz	r3, 2e54 <bt_recv+0x37c>
    2e4a:	3001      	adds	r0, #1
    2e4c:	4790      	blx	r2
		dh_key_cb = NULL;
    2e4e:	2300      	movs	r3, #0
    2e50:	602b      	str	r3, [r5, #0]
    2e52:	e65a      	b.n	2b0a <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2e54:	2000      	movs	r0, #0
    2e56:	e7f9      	b.n	2e4c <bt_recv+0x374>
    2e58:	00012813 	.word	0x00012813
    2e5c:	00001df9 	.word	0x00001df9
    2e60:	200034e8 	.word	0x200034e8
    2e64:	20003478 	.word	0x20003478
    2e68:	2000002c 	.word	0x2000002c
    2e6c:	2000006c 	.word	0x2000006c
    2e70:	20000028 	.word	0x20000028
	u8_t num_reports = net_buf_pull_u8(buf);
    2e74:	4628      	mov	r0, r5
    2e76:	f00d fc66 	bl	10746 <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2e7a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 3084 <bt_recv+0x5ac>
	u8_t num_reports = net_buf_pull_u8(buf);
    2e7e:	9000      	str	r0, [sp, #0]
	while (num_reports--) {
    2e80:	9b00      	ldr	r3, [sp, #0]
    2e82:	2b00      	cmp	r3, #0
    2e84:	f43f ae41 	beq.w	2b0a <bt_recv+0x32>
		info = (void *)buf->data;
    2e88:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    2e8a:	2109      	movs	r1, #9
    2e8c:	4628      	mov	r0, r5
    2e8e:	f00d fc52 	bl	10736 <net_buf_simple_pull>
		rssi = info->data[info->length];
    2e92:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2e94:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    2e96:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    2e98:	a806      	add	r0, sp, #24
		rssi = info->data[info->length];
    2e9a:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2e9e:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    2ea2:	3b02      	subs	r3, #2
    2ea4:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    2ea6:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2ea8:	f200 8099 	bhi.w	2fde <bt_recv+0x506>
			bt_addr_le_copy(&id_addr, &info->addr);
    2eac:	f7fe ffa5 	bl	1dfa <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2eb0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2eb4:	3b02      	subs	r3, #2
    2eb6:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    2eba:	4b6f      	ldr	r3, [pc, #444]	; (3078 <bt_recv+0x5a0>)
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	b1bb      	cbz	r3, 2ef0 <bt_recv+0x418>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2ec0:	4628      	mov	r0, r5
    2ec2:	f00d fc50 	bl	10766 <net_buf_simple_headroom>
	state->len = buf->len;
    2ec6:	89a3      	ldrh	r3, [r4, #12]
    2ec8:	9301      	str	r3, [sp, #4]
			buf->len = info->length;
    2eca:	7a33      	ldrb	r3, [r6, #8]
    2ecc:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2ece:	4b6a      	ldr	r3, [pc, #424]	; (3078 <bt_recv+0x5a0>)
    2ed0:	7832      	ldrb	r2, [r6, #0]
    2ed2:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    2ed4:	4682      	mov	sl, r0
    2ed6:	461f      	mov	r7, r3
    2ed8:	fa4f f18b 	sxtb.w	r1, fp
    2edc:	462b      	mov	r3, r5
    2ede:	a806      	add	r0, sp, #24
    2ee0:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2ee2:	6923      	ldr	r3, [r4, #16]
    2ee4:	fa13 f38a 	uxtah	r3, r3, sl
    2ee8:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    2eea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2eee:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2ef0:	2109      	movs	r1, #9
    2ef2:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    2ef4:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2ef6:	f7fe ffdb 	bl	1eb0 <atomic_test_bit>
    2efa:	4682      	mov	sl, r0
    2efc:	2800      	cmp	r0, #0
    2efe:	d164      	bne.n	2fca <bt_recv+0x4f2>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    2f00:	2a01      	cmp	r2, #1
    2f02:	d862      	bhi.n	2fca <bt_recv+0x4f2>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    2f04:	2101      	movs	r1, #1
    2f06:	a806      	add	r0, sp, #24
    2f08:	f000 fd4e 	bl	39a8 <bt_conn_lookup_state_le>
	if (!conn) {
    2f0c:	4607      	mov	r7, r0
    2f0e:	2800      	cmp	r0, #0
    2f10:	d05b      	beq.n	2fca <bt_recv+0x4f2>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    2f12:	2108      	movs	r1, #8
    2f14:	4648      	mov	r0, r9
    2f16:	f7fe ffcb 	bl	1eb0 <atomic_test_bit>
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d162      	bne.n	2fe4 <bt_recv+0x50c>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    2f1e:	2102      	movs	r1, #2
    2f20:	4648      	mov	r0, r9
    2f22:	f7fe ffc5 	bl	1eb0 <atomic_test_bit>
    2f26:	b110      	cbz	r0, 2f2e <bt_recv+0x456>
			set_random_address(&bt_dev.id_addr.a);
    2f28:	4854      	ldr	r0, [pc, #336]	; (307c <bt_recv+0x5a4>)
    2f2a:	f7ff f873 	bl	2014 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2f2e:	4954      	ldr	r1, [pc, #336]	; (3080 <bt_recv+0x5a8>)
    2f30:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2f34:	f107 0a52 	add.w	sl, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2f38:	f7fe ff5f 	bl	1dfa <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2f3c:	4641      	mov	r1, r8
    2f3e:	4650      	mov	r0, sl
    2f40:	f7fe ff5b 	bl	1dfa <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    2f44:	2119      	movs	r1, #25
    2f46:	f242 000d 	movw	r0, #8205	; 0x200d
    2f4a:	f7fe ffbf 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    2f4e:	4683      	mov	fp, r0
    2f50:	2800      	cmp	r0, #0
    2f52:	d04c      	beq.n	2fee <bt_recv+0x516>
	cp = net_buf_add(buf, sizeof(*cp));
    2f54:	2119      	movs	r1, #25
    2f56:	3008      	adds	r0, #8
    2f58:	f00d fbce 	bl	106f8 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2f5c:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    2f5e:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    2f60:	2100      	movs	r1, #0
    2f62:	f7fe fe77 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    2f66:	2200      	movs	r2, #0
    2f68:	2360      	movs	r3, #96	; 0x60
    2f6a:	f888 3000 	strb.w	r3, [r8]
    2f6e:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    2f72:	f888 3002 	strb.w	r3, [r8, #2]
    2f76:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2f7a:	4651      	mov	r1, sl
    2f7c:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    2f80:	9201      	str	r2, [sp, #4]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2f82:	f7fe ff3a 	bl	1dfa <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    2f86:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    2f8a:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    2f8e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    2f92:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    2f96:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    2f9a:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    2f9e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    2fa2:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    2fa6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    2faa:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2fae:	9a01      	ldr	r2, [sp, #4]
    2fb0:	4659      	mov	r1, fp
    2fb2:	f242 000d 	movw	r0, #8205	; 0x200d
    2fb6:	f7fe ffb9 	bl	1f2c <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    2fba:	b9c0      	cbnz	r0, 2fee <bt_recv+0x516>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    2fbc:	4638      	mov	r0, r7
    2fbe:	2102      	movs	r1, #2
    2fc0:	f000 fbfc 	bl	37bc <bt_conn_set_state>
	bt_conn_unref(conn);
    2fc4:	4638      	mov	r0, r7
    2fc6:	f000 fd11 	bl	39ec <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    2fca:	7a31      	ldrb	r1, [r6, #8]
    2fcc:	4628      	mov	r0, r5
    2fce:	3101      	adds	r1, #1
    2fd0:	f00d fbb1 	bl	10736 <net_buf_simple_pull>
    2fd4:	9b00      	ldr	r3, [sp, #0]
    2fd6:	3b01      	subs	r3, #1
    2fd8:	b2db      	uxtb	r3, r3
    2fda:	9300      	str	r3, [sp, #0]
    2fdc:	e750      	b.n	2e80 <bt_recv+0x3a8>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    2fde:	f7fe ff0c 	bl	1dfa <bt_addr_le_copy>
    2fe2:	e76a      	b.n	2eba <bt_recv+0x3e2>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    2fe4:	4650      	mov	r0, sl
    2fe6:	f7fe ffdf 	bl	1fa8 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    2fea:	2800      	cmp	r0, #0
    2fec:	d097      	beq.n	2f1e <bt_recv+0x446>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    2fee:	231f      	movs	r3, #31
    2ff0:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2ff2:	2100      	movs	r1, #0
    2ff4:	4638      	mov	r0, r7
    2ff6:	f000 fbe1 	bl	37bc <bt_conn_set_state>
	bt_conn_unref(conn);
    2ffa:	4638      	mov	r0, r7
    2ffc:	f000 fcf6 	bl	39ec <bt_conn_unref>
	bt_le_scan_update(false);
    3000:	2000      	movs	r0, #0
    3002:	f7ff f935 	bl	2270 <bt_le_scan_update>
    3006:	e7e0      	b.n	2fca <bt_recv+0x4f2>
		net_buf_unref(buf);
    3008:	f00d fb44 	bl	10694 <net_buf_unref>
		return -EINVAL;
    300c:	f06f 0015 	mvn.w	r0, #21
    3010:	e591      	b.n	2b36 <bt_recv+0x5e>
	net_buf_pull(buf, sizeof(*hdr));
    3012:	f104 0508 	add.w	r5, r4, #8
    3016:	2102      	movs	r1, #2
    3018:	4628      	mov	r0, r5
    301a:	f00d fb8c 	bl	10736 <net_buf_simple_pull>
	switch (hdr->evt) {
    301e:	7833      	ldrb	r3, [r6, #0]
    3020:	2b05      	cmp	r3, #5
    3022:	f43f ad9b 	beq.w	2b5c <bt_recv+0x84>
    3026:	2b3e      	cmp	r3, #62	; 0x3e
    3028:	f47f ad6f 	bne.w	2b0a <bt_recv+0x32>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    302c:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    302e:	2101      	movs	r1, #1
    3030:	4628      	mov	r0, r5
    3032:	f00d fb80 	bl	10736 <net_buf_simple_pull>
	switch (evt->subevent) {
    3036:	7833      	ldrb	r3, [r6, #0]
    3038:	3b01      	subs	r3, #1
    303a:	2b0b      	cmp	r3, #11
    303c:	f63f ad65 	bhi.w	2b0a <bt_recv+0x32>
    3040:	a201      	add	r2, pc, #4	; (adr r2, 3048 <bt_recv+0x570>)
    3042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3046:	bf00      	nop
    3048:	00002bcd 	.word	0x00002bcd
    304c:	00002e75 	.word	0x00002e75
    3050:	00002c3b 	.word	0x00002c3b
    3054:	00002c81 	.word	0x00002c81
    3058:	00002b0b 	.word	0x00002b0b
    305c:	00002ce5 	.word	0x00002ce5
    3060:	00002d8b 	.word	0x00002d8b
    3064:	00002dfb 	.word	0x00002dfb
    3068:	00002e3b 	.word	0x00002e3b
    306c:	00002c37 	.word	0x00002c37
    3070:	00002b0b 	.word	0x00002b0b
    3074:	00002db3 	.word	0x00002db3
    3078:	20000074 	.word	0x20000074
    307c:	20003479 	.word	0x20003479
    3080:	20003478 	.word	0x20003478
    3084:	200034e8 	.word	0x200034e8

00003088 <bt_recv_prio>:
{
    3088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    308c:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    308e:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3090:	2b01      	cmp	r3, #1
{
    3092:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3094:	d005      	beq.n	30a2 <bt_recv_prio+0x1a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3096:	4040      	eors	r0, r0
    3098:	f380 8811 	msr	BASEPRI, r0
    309c:	f04f 0004 	mov.w	r0, #4
    30a0:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    30a2:	8982      	ldrh	r2, [r0, #12]
    30a4:	2a01      	cmp	r2, #1
    30a6:	d9f6      	bls.n	3096 <bt_recv_prio+0xe>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    30a8:	7832      	ldrb	r2, [r6, #0]
    30aa:	2a13      	cmp	r2, #19
    30ac:	d8f3      	bhi.n	3096 <bt_recv_prio+0xe>
    30ae:	4093      	lsls	r3, r2
    30b0:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    30b4:	d0ef      	beq.n	3096 <bt_recv_prio+0xe>
	net_buf_pull(buf, sizeof(*hdr));
    30b6:	f100 0508 	add.w	r5, r0, #8
    30ba:	2102      	movs	r1, #2
    30bc:	4628      	mov	r0, r5
    30be:	f00d fb3a 	bl	10736 <net_buf_simple_pull>
	switch (hdr->evt) {
    30c2:	7833      	ldrb	r3, [r6, #0]
    30c4:	2b0f      	cmp	r3, #15
    30c6:	d018      	beq.n	30fa <bt_recv_prio+0x72>
    30c8:	2b13      	cmp	r3, #19
    30ca:	d023      	beq.n	3114 <bt_recv_prio+0x8c>
    30cc:	2b0e      	cmp	r3, #14
    30ce:	d161      	bne.n	3194 <bt_recv_prio+0x10c>
	u8_t status, ncmd = evt->ncmd;
    30d0:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    30d2:	2103      	movs	r1, #3
    30d4:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    30d6:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    30d8:	f00d fb2d 	bl	10736 <net_buf_simple_pull>
	status = buf->data[0];
    30dc:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    30de:	4621      	mov	r1, r4
    30e0:	7818      	ldrb	r0, [r3, #0]
    30e2:	f7fe febd 	bl	1e60 <hci_cmd_done.isra.18>
	if (ncmd) {
    30e6:	b116      	cbz	r6, 30ee <bt_recv_prio+0x66>
    30e8:	482c      	ldr	r0, [pc, #176]	; (319c <bt_recv_prio+0x114>)
    30ea:	f00e fb5c 	bl	117a6 <_impl_k_sem_give>
	net_buf_unref(buf);
    30ee:	4620      	mov	r0, r4
    30f0:	f00d fad0 	bl	10694 <net_buf_unref>
}
    30f4:	2000      	movs	r0, #0
    30f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    30fa:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    30fc:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    30fe:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    3100:	4628      	mov	r0, r5
    3102:	f00d fb18 	bl	10736 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3106:	4621      	mov	r1, r4
    3108:	7830      	ldrb	r0, [r6, #0]
    310a:	f7fe fea9 	bl	1e60 <hci_cmd_done.isra.18>
	if (ncmd) {
    310e:	2f00      	cmp	r7, #0
    3110:	d0ed      	beq.n	30ee <bt_recv_prio+0x66>
    3112:	e7e9      	b.n	30e8 <bt_recv_prio+0x60>
    3114:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
    3118:	2700      	movs	r7, #0
    311a:	f898 3000 	ldrb.w	r3, [r8]
    311e:	429f      	cmp	r7, r3
    3120:	dae5      	bge.n	30ee <bt_recv_prio+0x66>
    3122:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3126:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    312a:	f8b3 6003 	ldrh.w	r6, [r3, #3]
    312e:	f04f 0320 	mov.w	r3, #32
    3132:	f3ef 8911 	mrs	r9, BASEPRI
    3136:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    313a:	f000 fbe9 	bl	3910 <bt_conn_lookup_handle>
		if (!conn) {
    313e:	4605      	mov	r5, r0
    3140:	b918      	cbnz	r0, 314a <bt_recv_prio+0xc2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3142:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
    3146:	3701      	adds	r7, #1
    3148:	e7e7      	b.n	311a <bt_recv_prio+0x92>
    314a:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
    314e:	f100 0918 	add.w	r9, r0, #24
		while (count--) {
    3152:	b196      	cbz	r6, 317a <bt_recv_prio+0xf2>
	__asm__ volatile(
    3154:	f04f 0320 	mov.w	r3, #32
    3158:	f3ef 8011 	mrs	r0, BASEPRI
    315c:	f383 8811 	msr	BASEPRI, r3
    3160:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3162:	b129      	cbz	r1, 3170 <bt_recv_prio+0xe8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3164:	696a      	ldr	r2, [r5, #20]
	return node->next;
    3166:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    3168:	612b      	str	r3, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    316a:	4291      	cmp	r1, r2
	list->tail = node;
    316c:	bf08      	it	eq
    316e:	616b      	streq	r3, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3170:	f380 8811 	msr	BASEPRI, r0
    3174:	3e01      	subs	r6, #1
    3176:	b2b6      	uxth	r6, r6
			if (!node) {
    3178:	b919      	cbnz	r1, 3182 <bt_recv_prio+0xfa>
		bt_conn_unref(conn);
    317a:	4628      	mov	r0, r5
    317c:	f000 fc36 	bl	39ec <bt_conn_unref>
    3180:	e7e1      	b.n	3146 <bt_recv_prio+0xbe>
			k_fifo_put(&conn->tx_notify, node);
    3182:	4648      	mov	r0, r9
    3184:	f00e f84a 	bl	1121c <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3188:	4628      	mov	r0, r5
    318a:	f000 f943 	bl	3414 <bt_conn_get_pkts>
    318e:	f00e fb0a 	bl	117a6 <_impl_k_sem_give>
    3192:	e7de      	b.n	3152 <bt_recv_prio+0xca>
		net_buf_unref(buf);
    3194:	4620      	mov	r0, r4
    3196:	f00d fa7d 	bl	10694 <net_buf_unref>
    319a:	e77c      	b.n	3096 <bt_recv_prio+0xe>
    319c:	20003520 	.word	0x20003520

000031a0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    31a0:	4a08      	ldr	r2, [pc, #32]	; (31c4 <bt_hci_driver_register+0x24>)
    31a2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    31a6:	b93b      	cbnz	r3, 31b8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    31a8:	68c1      	ldr	r1, [r0, #12]
    31aa:	b141      	cbz	r1, 31be <bt_hci_driver_register+0x1e>
    31ac:	6901      	ldr	r1, [r0, #16]
    31ae:	b131      	cbz	r1, 31be <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    31b0:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    31b4:	4618      	mov	r0, r3
    31b6:	4770      	bx	lr
		return -EALREADY;
    31b8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    31bc:	4770      	bx	lr
		return -EINVAL;
    31be:	f06f 0015 	mvn.w	r0, #21
}
    31c2:	4770      	bx	lr
    31c4:	20003478 	.word	0x20003478

000031c8 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    31c8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    31ca:	4c20      	ldr	r4, [pc, #128]	; (324c <bt_enable+0x84>)
    31cc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
{
    31d0:	b086      	sub	sp, #24
    31d2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    31d4:	2b00      	cmp	r3, #0
    31d6:	d033      	beq.n	3240 <bt_enable+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    31d8:	2101      	movs	r1, #1
    31da:	f104 0070 	add.w	r0, r4, #112	; 0x70
    31de:	f7fe fe0f 	bl	1e00 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    31e2:	f010 0001 	ands.w	r0, r0, #1
    31e6:	d12e      	bne.n	3246 <bt_enable+0x7e>
		if (err) {
			return err;
		}
	}

	ready_cb = cb;
    31e8:	4b19      	ldr	r3, [pc, #100]	; (3250 <bt_enable+0x88>)

    31ea:	491a      	ldr	r1, [pc, #104]	; (3254 <bt_enable+0x8c>)
    31ec:	601e      	str	r6, [r3, #0]
    31ee:	f06f 0308 	mvn.w	r3, #8
    31f2:	9005      	str	r0, [sp, #20]
    31f4:	9004      	str	r0, [sp, #16]
    31f6:	9303      	str	r3, [sp, #12]
    31f8:	9002      	str	r0, [sp, #8]
    31fa:	9001      	str	r0, [sp, #4]
    31fc:	9000      	str	r0, [sp, #0]
    31fe:	4b16      	ldr	r3, [pc, #88]	; (3258 <bt_enable+0x90>)
    3200:	4816      	ldr	r0, [pc, #88]	; (325c <bt_enable+0x94>)
    3202:	f44f 7220 	mov.w	r2, #640	; 0x280
    3206:	f00e fccb 	bl	11ba0 <_impl_k_thread_create>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    320a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    320e:	68db      	ldr	r3, [r3, #12]
    3210:	4798      	blx	r3
	if (err) {
    3212:	4605      	mov	r5, r0
    3214:	b988      	cbnz	r0, 323a <bt_enable+0x72>
		BT_ERR("HCI driver open failed (%d)", err);
		return err;
	}

	if (!cb) {
    3216:	b926      	cbnz	r6, 3222 <bt_enable+0x5a>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3218:	b006      	add	sp, #24
    321a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    321e:	f7ff b859 	b.w	22d4 <bt_init>
    3222:	2101      	movs	r1, #1
    3224:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3228:	f7fe fdea 	bl	1e00 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    322c:	07c3      	lsls	r3, r0, #31
    322e:	d404      	bmi.n	323a <bt_enable+0x72>
		k_queue_append(&work_q->queue, work);
    3230:	f104 0164 	add.w	r1, r4, #100	; 0x64
    3234:	480a      	ldr	r0, [pc, #40]	; (3260 <bt_enable+0x98>)
    3236:	f00d fff1 	bl	1121c <k_queue_append>
}
    323a:	4628      	mov	r0, r5
    323c:	b006      	add	sp, #24
    323e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    3240:	f06f 0512 	mvn.w	r5, #18
    3244:	e7f9      	b.n	323a <bt_enable+0x72>
		return -EALREADY;
    3246:	f06f 0544 	mvn.w	r5, #68	; 0x44
    324a:	e7f6      	b.n	323a <bt_enable+0x72>
    324c:	20003478 	.word	0x20003478
    3250:	20000070 	.word	0x20000070
    3254:	200017a8 	.word	0x200017a8
    3258:	000029e9 	.word	0x000029e9
    325c:	20000078 	.word	0x20000078
    3260:	20001728 	.word	0x20001728

00003264 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    3264:	2000      	movs	r0, #0
    3266:	4770      	bx	lr

00003268 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    3268:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    326a:	7803      	ldrb	r3, [r0, #0]
    326c:	2b01      	cmp	r3, #1
{
    326e:	4605      	mov	r5, r0
    3270:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3272:	d810      	bhi.n	3296 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    3274:	7843      	ldrb	r3, [r0, #1]
    3276:	2b01      	cmp	r3, #1
    3278:	d80d      	bhi.n	3296 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    327a:	8841      	ldrh	r1, [r0, #2]
    327c:	1f0b      	subs	r3, r1, #4
    327e:	b29b      	uxth	r3, r3
    3280:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    3284:	4283      	cmp	r3, r0
    3286:	d806      	bhi.n	3296 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3288:	88aa      	ldrh	r2, [r5, #4]
    328a:	1f13      	subs	r3, r2, #4
    328c:	b29b      	uxth	r3, r3
    328e:	4283      	cmp	r3, r0
    3290:	d801      	bhi.n	3296 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3292:	4291      	cmp	r1, r2
    3294:	d22b      	bcs.n	32ee <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3296:	f06f 0415 	mvn.w	r4, #21
    329a:	e00e      	b.n	32ba <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    329c:	2108      	movs	r1, #8
    329e:	4819      	ldr	r0, [pc, #100]	; (3304 <bt_le_scan_start+0x9c>)
    32a0:	f7fe fe06 	bl	1eb0 <atomic_test_bit>
    32a4:	b158      	cbz	r0, 32be <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    32a6:	4610      	mov	r0, r2
    32a8:	f7fe fe7e 	bl	1fa8 <set_le_scan_enable>
		if (err) {
    32ac:	4604      	mov	r4, r0
    32ae:	b130      	cbz	r0, 32be <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32b0:	f46f 7100 	mvn.w	r1, #512	; 0x200
    32b4:	4813      	ldr	r0, [pc, #76]	; (3304 <bt_le_scan_start+0x9c>)
    32b6:	f7fe fdb4 	bl	1e22 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    32ba:	4620      	mov	r0, r4
    32bc:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    32be:	786b      	ldrb	r3, [r5, #1]
    32c0:	b17b      	cbz	r3, 32e2 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    32c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    32c6:	480f      	ldr	r0, [pc, #60]	; (3304 <bt_le_scan_start+0x9c>)
    32c8:	f7fe fd9a 	bl	1e00 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    32cc:	88aa      	ldrh	r2, [r5, #4]
    32ce:	8869      	ldrh	r1, [r5, #2]
    32d0:	7828      	ldrb	r0, [r5, #0]
    32d2:	f7fe ff7d 	bl	21d0 <start_le_scan>
	if (err) {
    32d6:	4604      	mov	r4, r0
    32d8:	2800      	cmp	r0, #0
    32da:	d1e9      	bne.n	32b0 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    32dc:	4b0a      	ldr	r3, [pc, #40]	; (3308 <bt_le_scan_start+0xa0>)
    32de:	601e      	str	r6, [r3, #0]
	return 0;
    32e0:	e7eb      	b.n	32ba <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32e2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    32e6:	4807      	ldr	r0, [pc, #28]	; (3304 <bt_le_scan_start+0x9c>)
    32e8:	f7fe fd9b 	bl	1e22 <atomic_and>
    32ec:	e7ee      	b.n	32cc <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    32ee:	f44f 7100 	mov.w	r1, #512	; 0x200
    32f2:	4804      	ldr	r0, [pc, #16]	; (3304 <bt_le_scan_start+0x9c>)
    32f4:	f7fe fd84 	bl	1e00 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    32f8:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    32fc:	d0ce      	beq.n	329c <bt_le_scan_start+0x34>
		return -EALREADY;
    32fe:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3302:	e7da      	b.n	32ba <bt_le_scan_start+0x52>
    3304:	200034e8 	.word	0x200034e8
    3308:	20000074 	.word	0x20000074

0000330c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    330c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    330e:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3312:	4807      	ldr	r0, [pc, #28]	; (3330 <bt_le_scan_stop+0x24>)
    3314:	f7fe fd85 	bl	1e22 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3318:	0583      	lsls	r3, r0, #22
    331a:	d506      	bpl.n	332a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    331c:	4b05      	ldr	r3, [pc, #20]	; (3334 <bt_le_scan_stop+0x28>)
    331e:	2000      	movs	r0, #0
    3320:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3326:	f7fe bfa3 	b.w	2270 <bt_le_scan_update>
}
    332a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    332e:	bd08      	pop	{r3, pc}
    3330:	200034e8 	.word	0x200034e8
    3334:	20000074 	.word	0x20000074

00003338 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3338:	b538      	push	{r3, r4, r5, lr}
    333a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    333c:	4805      	ldr	r0, [pc, #20]	; (3354 <bt_buf_get_rx+0x1c>)
    333e:	f00d f979 	bl	10634 <net_buf_alloc_fixed>
#endif

	if (buf) {
    3342:	4604      	mov	r4, r0
    3344:	b120      	cbz	r0, 3350 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3346:	2100      	movs	r1, #0
    3348:	3008      	adds	r0, #8
    334a:	f00d f992 	bl	10672 <net_buf_simple_reserve>
    334e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3350:	4620      	mov	r0, r4
    3352:	bd38      	pop	{r3, r4, r5, pc}
    3354:	200039a4 	.word	0x200039a4

00003358 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3358:	b510      	push	{r4, lr}
    335a:	4601      	mov	r1, r0
	__asm__ volatile(
    335c:	f04f 0320 	mov.w	r3, #32
    3360:	f3ef 8011 	mrs	r0, BASEPRI
    3364:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3368:	4a0b      	ldr	r2, [pc, #44]	; (3398 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    336a:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    336c:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    3370:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3374:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3378:	b924      	cbnz	r4, 3384 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    337a:	2001      	movs	r0, #1
}
    337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3380:	f7ff bfda 	b.w	3338 <bt_buf_get_rx>
    3384:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3386:	f104 0008 	add.w	r0, r4, #8
    338a:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    338c:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    338e:	4619      	mov	r1, r3
    3390:	f00d f96f 	bl	10672 <net_buf_simple_reserve>
}
    3394:	4620      	mov	r0, r4
    3396:	bd10      	pop	{r4, pc}
    3398:	20003478 	.word	0x20003478

0000339c <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    339c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    339e:	4b06      	ldr	r3, [pc, #24]	; (33b8 <notify_connected+0x1c>)
    33a0:	681c      	ldr	r4, [r3, #0]
{
    33a2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    33a4:	b904      	cbnz	r4, 33a8 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    33a6:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    33a8:	6823      	ldr	r3, [r4, #0]
    33aa:	b113      	cbz	r3, 33b2 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    33ac:	7a29      	ldrb	r1, [r5, #8]
    33ae:	4628      	mov	r0, r5
    33b0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    33b2:	6924      	ldr	r4, [r4, #16]
    33b4:	e7f6      	b.n	33a4 <notify_connected+0x8>
    33b6:	bf00      	nop
    33b8:	200000e8 	.word	0x200000e8

000033bc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    33bc:	f3bf 8f5b 	dmb	ish
    33c0:	6800      	ldr	r0, [r0, #0]
    33c2:	f3bf 8f5b 	dmb	ish
}
    33c6:	4770      	bx	lr

000033c8 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    33c8:	8943      	ldrh	r3, [r0, #10]
{
    33ca:	b510      	push	{r4, lr}
    33cc:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    33ce:	b12b      	cbz	r3, 33dc <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    33d0:	68c0      	ldr	r0, [r0, #12]
    33d2:	f00d f95f 	bl	10694 <net_buf_unref>
	conn->rx = NULL;
    33d6:	2300      	movs	r3, #0
    33d8:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    33da:	8163      	strh	r3, [r4, #10]
    33dc:	bd10      	pop	{r4, pc}

000033de <atomic_dec>:
}
    33de:	f3bf 8f5b 	dmb	ish
    33e2:	e850 3f00 	ldrex	r3, [r0]
    33e6:	1e5a      	subs	r2, r3, #1
    33e8:	e840 2100 	strex	r1, r2, [r0]
    33ec:	2900      	cmp	r1, #0
    33ee:	d1f8      	bne.n	33e2 <atomic_dec+0x4>
    33f0:	f3bf 8f5b 	dmb	ish
    33f4:	4618      	mov	r0, r3
    33f6:	4770      	bx	lr

000033f8 <atomic_inc>:
}
    33f8:	f3bf 8f5b 	dmb	ish
    33fc:	e850 3f00 	ldrex	r3, [r0]
    3400:	1c5a      	adds	r2, r3, #1
    3402:	e840 2100 	strex	r1, r2, [r0]
    3406:	2900      	cmp	r1, #0
    3408:	d1f8      	bne.n	33fc <atomic_inc+0x4>
    340a:	f3bf 8f5b 	dmb	ish
    340e:	4618      	mov	r0, r3
    3410:	4770      	bx	lr
	...

00003414 <bt_conn_get_pkts>:
}
    3414:	4800      	ldr	r0, [pc, #0]	; (3418 <bt_conn_get_pkts+0x4>)
    3416:	4770      	bx	lr
    3418:	20003504 	.word	0x20003504

0000341c <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    341c:	4b08      	ldr	r3, [pc, #32]	; (3440 <notify_le_param_updated+0x24>)
{
    341e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3420:	681c      	ldr	r4, [r3, #0]
{
    3422:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3424:	b904      	cbnz	r4, 3428 <notify_le_param_updated+0xc>
}
    3426:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3428:	68e6      	ldr	r6, [r4, #12]
    342a:	b13e      	cbz	r6, 343c <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    342c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    3430:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    3434:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    3438:	4628      	mov	r0, r5
    343a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    343c:	6924      	ldr	r4, [r4, #16]
    343e:	e7f1      	b.n	3424 <notify_le_param_updated+0x8>
    3440:	200000e8 	.word	0x200000e8

00003444 <le_param_req>:
{
    3444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3446:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3448:	4608      	mov	r0, r1
{
    344a:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    344c:	f7fe fe4c 	bl	20e8 <bt_le_conn_params_valid>
    3450:	4605      	mov	r5, r0
    3452:	b910      	cbnz	r0, 345a <le_param_req+0x16>
		return false;
    3454:	2500      	movs	r5, #0
}
    3456:	4628      	mov	r0, r5
    3458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    345a:	4b09      	ldr	r3, [pc, #36]	; (3480 <le_param_req+0x3c>)
    345c:	681c      	ldr	r4, [r3, #0]
    345e:	2c00      	cmp	r4, #0
    3460:	d0f9      	beq.n	3456 <le_param_req+0x12>
		if (!cb->le_param_req) {
    3462:	68a3      	ldr	r3, [r4, #8]
    3464:	b90b      	cbnz	r3, 346a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3466:	6924      	ldr	r4, [r4, #16]
    3468:	e7f9      	b.n	345e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    346a:	4631      	mov	r1, r6
    346c:	4638      	mov	r0, r7
    346e:	4798      	blx	r3
    3470:	2800      	cmp	r0, #0
    3472:	d0ef      	beq.n	3454 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3474:	4630      	mov	r0, r6
    3476:	f7fe fe37 	bl	20e8 <bt_le_conn_params_valid>
    347a:	2800      	cmp	r0, #0
    347c:	d1f3      	bne.n	3466 <le_param_req+0x22>
    347e:	e7e9      	b.n	3454 <le_param_req+0x10>
    3480:	200000e8 	.word	0x200000e8

00003484 <bt_conn_cb_register>:
	cb->_next = callback_list;
    3484:	4b02      	ldr	r3, [pc, #8]	; (3490 <bt_conn_cb_register+0xc>)
    3486:	681a      	ldr	r2, [r3, #0]
    3488:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    348a:	6018      	str	r0, [r3, #0]
    348c:	4770      	bx	lr
    348e:	bf00      	nop
    3490:	200000e8 	.word	0x200000e8

00003494 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    3494:	2a01      	cmp	r2, #1
{
    3496:	b570      	push	{r4, r5, r6, lr}
    3498:	4605      	mov	r5, r0
    349a:	460c      	mov	r4, r1
	switch (flags) {
    349c:	d00f      	beq.n	34be <bt_conn_recv+0x2a>
    349e:	2a02      	cmp	r2, #2
    34a0:	d110      	bne.n	34c4 <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    34a2:	688b      	ldr	r3, [r1, #8]
    34a4:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    34a6:	8943      	ldrh	r3, [r0, #10]
    34a8:	b10b      	cbz	r3, 34ae <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
    34aa:	f7ff ff8d 	bl	33c8 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    34ae:	89a3      	ldrh	r3, [r4, #12]
    34b0:	1af3      	subs	r3, r6, r3
    34b2:	3304      	adds	r3, #4
    34b4:	b29b      	uxth	r3, r3
    34b6:	816b      	strh	r3, [r5, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    34b8:	b333      	cbz	r3, 3508 <bt_conn_recv+0x74>
			conn->rx = buf;
    34ba:	60ec      	str	r4, [r5, #12]
			return;
    34bc:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    34be:	8943      	ldrh	r3, [r0, #10]
    34c0:	b93b      	cbnz	r3, 34d2 <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
    34c2:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
    34c4:	f7ff ff80 	bl	33c8 <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
    34c8:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    34ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    34ce:	f00d b8e1 	b.w	10694 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    34d2:	898e      	ldrh	r6, [r1, #12]
    34d4:	42b3      	cmp	r3, r6
    34d6:	d3f4      	bcc.n	34c2 <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    34d8:	68c0      	ldr	r0, [r0, #12]
    34da:	3008      	adds	r0, #8
    34dc:	f00d f947 	bl	1076e <net_buf_simple_tailroom>
    34e0:	4286      	cmp	r6, r0
    34e2:	d8ee      	bhi.n	34c2 <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    34e4:	68e8      	ldr	r0, [r5, #12]
    34e6:	89a2      	ldrh	r2, [r4, #12]
    34e8:	68a1      	ldr	r1, [r4, #8]
    34ea:	3008      	adds	r0, #8
    34ec:	f00d f90a 	bl	10704 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    34f0:	896b      	ldrh	r3, [r5, #10]
    34f2:	89a2      	ldrh	r2, [r4, #12]
    34f4:	1a9b      	subs	r3, r3, r2
    34f6:	816b      	strh	r3, [r5, #10]
		net_buf_unref(buf);
    34f8:	4620      	mov	r0, r4
    34fa:	f00d f8cb 	bl	10694 <net_buf_unref>
		if (conn->rx_len) {
    34fe:	896b      	ldrh	r3, [r5, #10]
    3500:	b973      	cbnz	r3, 3520 <bt_conn_recv+0x8c>
		buf = conn->rx;
    3502:	68ec      	ldr	r4, [r5, #12]
		conn->rx_len = 0;
    3504:	816b      	strh	r3, [r5, #10]
		conn->rx = NULL;
    3506:	60eb      	str	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3508:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
    350a:	89a2      	ldrh	r2, [r4, #12]
    350c:	881b      	ldrh	r3, [r3, #0]
    350e:	3304      	adds	r3, #4
    3510:	4293      	cmp	r3, r2
    3512:	d1d9      	bne.n	34c8 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
    3514:	4621      	mov	r1, r4
    3516:	4628      	mov	r0, r5
}
    3518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    351c:	f000 be45 	b.w	41aa <bt_l2cap_recv>
    3520:	bd70      	pop	{r4, r5, r6, pc}

00003522 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    3522:	b510      	push	{r4, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    3524:	7a44      	ldrb	r4, [r0, #9]
    3526:	2c03      	cmp	r4, #3
    3528:	d005      	beq.n	3536 <bt_conn_send_cb+0x14>
		BT_ERR("not connected!");
		net_buf_unref(buf);
    352a:	4608      	mov	r0, r1
    352c:	f00d f8b2 	bl	10694 <net_buf_unref>
		return -ENOTCONN;
    3530:	f06f 0038 	mvn.w	r0, #56	; 0x38
    3534:	bd10      	pop	{r4, pc}
	}

	conn_tx(buf)->cb = cb;
    3536:	614a      	str	r2, [r1, #20]

	net_buf_put(&conn->tx_queue, buf);
    3538:	3028      	adds	r0, #40	; 0x28
    353a:	f00d f89e 	bl	1067a <net_buf_put>
	return 0;
    353e:	2000      	movs	r0, #0
}
    3540:	bd10      	pop	{r4, pc}
	...

00003544 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3548:	4d0d      	ldr	r5, [pc, #52]	; (3580 <bt_conn_notify_tx+0x3c>)
    354a:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    354c:	f100 0718 	add.w	r7, r0, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3550:	f04f 0800 	mov.w	r8, #0
    3554:	2100      	movs	r1, #0
    3556:	4638      	mov	r0, r7
    3558:	f00d fe84 	bl	11264 <_impl_k_queue_get>
    355c:	4604      	mov	r4, r0
    355e:	b908      	cbnz	r0, 3564 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3564:	6863      	ldr	r3, [r4, #4]
    3566:	b10b      	cbz	r3, 356c <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    3568:	4630      	mov	r0, r6
    356a:	4798      	blx	r3
    356c:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    356e:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3570:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3572:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3576:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    3578:	2b00      	cmp	r3, #0
    357a:	d1eb      	bne.n	3554 <bt_conn_notify_tx+0x10>
	list->tail = node;
    357c:	606c      	str	r4, [r5, #4]
    357e:	e7e7      	b.n	3550 <bt_conn_notify_tx+0xc>
    3580:	20000194 	.word	0x20000194

00003584 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3588:	4605      	mov	r5, r0
    358a:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    358c:	483e      	ldr	r0, [pc, #248]	; (3688 <send_frag+0x104>)
    358e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3592:	4698      	mov	r8, r3
    3594:	4614      	mov	r4, r2
    3596:	f00e f92e 	bl	117f6 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    359a:	4b3c      	ldr	r3, [pc, #240]	; (368c <send_frag+0x108>)
    359c:	f103 0040 	add.w	r0, r3, #64	; 0x40
    35a0:	f7ff ff0c 	bl	33bc <atomic_get>
    35a4:	b130      	cbz	r0, 35b4 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    35a6:	7a5a      	ldrb	r2, [r3, #9]
    35a8:	3a03      	subs	r2, #3
    35aa:	2a01      	cmp	r2, #1
    35ac:	d802      	bhi.n	35b4 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    35ae:	4618      	mov	r0, r3
    35b0:	f7ff ffc8 	bl	3544 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    35b4:	7a6b      	ldrb	r3, [r5, #9]
    35b6:	2b03      	cmp	r3, #3
    35b8:	d149      	bne.n	364e <send_frag+0xca>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    35ba:	2104      	movs	r1, #4
    35bc:	f107 0008 	add.w	r0, r7, #8
    35c0:	f00d f8b1 	bl	10726 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    35c4:	882a      	ldrh	r2, [r5, #0]
    35c6:	4e32      	ldr	r6, [pc, #200]	; (3690 <send_frag+0x10c>)
    35c8:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    35cc:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    35ce:	89bb      	ldrh	r3, [r7, #12]
    35d0:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    35d2:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    35d4:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    35d6:	3b04      	subs	r3, #4
    35d8:	8043      	strh	r3, [r0, #2]
    35da:	2302      	movs	r3, #2
    35dc:	753b      	strb	r3, [r7, #20]
	return node->next;
    35de:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    35e0:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    35e2:	428c      	cmp	r4, r1
	list->tail = node;
    35e4:	bf08      	it	eq
    35e6:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    35e8:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    35ea:	f04f 0320 	mov.w	r3, #32
    35ee:	f3ef 8211 	mrs	r2, BASEPRI
    35f2:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    35f6:	2300      	movs	r3, #0
    35f8:	6023      	str	r3, [r4, #0]
    35fa:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    35fc:	2b00      	cmp	r3, #0
    35fe:	d134      	bne.n	366a <send_frag+0xe6>
	list->tail = node;
    3600:	616c      	str	r4, [r5, #20]
	list->head = node;
    3602:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3604:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    3608:	4638      	mov	r0, r7
    360a:	f7fe fdb7 	bl	217c <bt_send>
	if (err) {
    360e:	2800      	cmp	r0, #0
    3610:	d037      	beq.n	3682 <send_frag+0xfe>
	__asm__ volatile(
    3612:	f04f 0320 	mov.w	r3, #32
    3616:	f3ef 8111 	mrs	r1, BASEPRI
    361a:	f383 8811 	msr	BASEPRI, r3
    361e:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    3620:	2200      	movs	r2, #0
    3622:	b153      	cbz	r3, 363a <send_frag+0xb6>
    3624:	429c      	cmp	r4, r3
    3626:	d129      	bne.n	367c <send_frag+0xf8>
    3628:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    362a:	bb0a      	cbnz	r2, 3670 <send_frag+0xec>
    362c:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    362e:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    3630:	4294      	cmp	r4, r2
    3632:	d100      	bne.n	3636 <send_frag+0xb2>
	list->tail = node;
    3634:	616b      	str	r3, [r5, #20]
	parent->next = child;
    3636:	2300      	movs	r3, #0
    3638:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    363a:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    363e:	2300      	movs	r3, #0
    3640:	6063      	str	r3, [r4, #4]
    3642:	6833      	ldr	r3, [r6, #0]
    3644:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3646:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    3648:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    364a:	b903      	cbnz	r3, 364e <send_frag+0xca>
	list->tail = node;
    364c:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    364e:	480e      	ldr	r0, [pc, #56]	; (3688 <send_frag+0x104>)
    3650:	f00e f8a9 	bl	117a6 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    3654:	f1b8 0f00 	cmp.w	r8, #0
    3658:	d004      	beq.n	3664 <send_frag+0xe0>
		net_buf_unref(buf);
    365a:	4638      	mov	r0, r7
    365c:	f00d f81a 	bl	10694 <net_buf_unref>
	}
	return false;
    3660:	f04f 0800 	mov.w	r8, #0
}
    3664:	4640      	mov	r0, r8
    3666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    366a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    366c:	616c      	str	r4, [r5, #20]
    366e:	e7c9      	b.n	3604 <send_frag+0x80>
	parent->next = child;
    3670:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    3672:	696b      	ldr	r3, [r5, #20]
    3674:	429c      	cmp	r4, r3
	list->tail = node;
    3676:	bf08      	it	eq
    3678:	616a      	streq	r2, [r5, #20]
    367a:	e7dc      	b.n	3636 <send_frag+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    367c:	461a      	mov	r2, r3
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	e7cf      	b.n	3622 <send_frag+0x9e>
	return true;
    3682:	f04f 0801 	mov.w	r8, #1
    3686:	e7ed      	b.n	3664 <send_frag+0xe0>
    3688:	20003504 	.word	0x20003504
    368c:	200000fc 	.word	0x200000fc
    3690:	20000194 	.word	0x20000194

00003694 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    3694:	b538      	push	{r3, r4, r5, lr}
    3696:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    3698:	f100 0528 	add.w	r5, r0, #40	; 0x28
    369c:	2100      	movs	r1, #0
    369e:	4628      	mov	r0, r5
    36a0:	f00c ffce 	bl	10640 <net_buf_get>
    36a4:	b958      	cbnz	r0, 36be <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    36a6:	4620      	mov	r0, r4
    36a8:	f7ff ff4c 	bl	3544 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    36ac:	4620      	mov	r0, r4
    36ae:	f7ff fe8b 	bl	33c8 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    36b2:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    36b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    36ba:	f7ff be90 	b.w	33de <atomic_dec>
		net_buf_unref(buf);
    36be:	f00c ffe9 	bl	10694 <net_buf_unref>
    36c2:	e7eb      	b.n	369c <conn_cleanup+0x8>

000036c4 <bt_conn_prepare_events>:
{
    36c4:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    36c6:	4b1f      	ldr	r3, [pc, #124]	; (3744 <bt_conn_prepare_events+0x80>)
    36c8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    36ca:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    36cc:	609a      	str	r2, [r3, #8]
{
    36ce:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    36d0:	f00e fc97 	bl	12002 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    36d4:	4b1c      	ldr	r3, [pc, #112]	; (3748 <bt_conn_prepare_events+0x84>)
    36d6:	f103 0040 	add.w	r0, r3, #64	; 0x40
    36da:	f7ff fe6f 	bl	33bc <atomic_get>
    36de:	4619      	mov	r1, r3
    36e0:	b908      	cbnz	r0, 36e6 <bt_conn_prepare_events+0x22>
			continue;
    36e2:	2001      	movs	r0, #1
    36e4:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    36e6:	7a5a      	ldrb	r2, [r3, #9]
    36e8:	b99a      	cbnz	r2, 3712 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    36ea:	f3bf 8f5b 	dmb	ish
    36ee:	1d1a      	adds	r2, r3, #4
    36f0:	e852 0f00 	ldrex	r0, [r2]
    36f4:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    36f8:	e842 4e00 	strex	lr, r4, [r2]
    36fc:	f1be 0f00 	cmp.w	lr, #0
    3700:	d1f6      	bne.n	36f0 <bt_conn_prepare_events+0x2c>
    3702:	f3bf 8f5b 	dmb	ish
    3706:	0642      	lsls	r2, r0, #25
    3708:	d503      	bpl.n	3712 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    370a:	4618      	mov	r0, r3
    370c:	f7ff ffc2 	bl	3694 <conn_cleanup>
    3710:	e7e7      	b.n	36e2 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    3712:	7a4c      	ldrb	r4, [r1, #9]
    3714:	2c03      	cmp	r4, #3
    3716:	d1e4      	bne.n	36e2 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    3718:	f105 0014 	add.w	r0, r5, #20
    371c:	4b0b      	ldr	r3, [pc, #44]	; (374c <bt_conn_prepare_events+0x88>)
    371e:	2200      	movs	r2, #0
    3720:	2104      	movs	r1, #4
    3722:	f00e fc6e 	bl	12002 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    3726:	2301      	movs	r3, #1
    3728:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    372c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3730:	4b07      	ldr	r3, [pc, #28]	; (3750 <bt_conn_prepare_events+0x8c>)
    3732:	2200      	movs	r2, #0
    3734:	2104      	movs	r1, #4
    3736:	f00e fc64 	bl	12002 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    373a:	2302      	movs	r3, #2
    373c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    3740:	4620      	mov	r0, r4
}
    3742:	bd38      	pop	{r3, r4, r5, pc}
    3744:	200035a0 	.word	0x200035a0
    3748:	200000fc 	.word	0x200000fc
    374c:	20000114 	.word	0x20000114
    3750:	20000124 	.word	0x20000124

00003754 <bt_conn_add_le>:
{
    3754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    3756:	4c17      	ldr	r4, [pc, #92]	; (37b4 <bt_conn_add_le+0x60>)
    3758:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    375c:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    375e:	4630      	mov	r0, r6
    3760:	f7ff fe2c 	bl	33bc <atomic_get>
    3764:	4605      	mov	r5, r0
    3766:	b108      	cbz	r0, 376c <bt_conn_add_le+0x18>
		return NULL;
    3768:	2000      	movs	r0, #0
    376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    376c:	4601      	mov	r1, r0
    376e:	2298      	movs	r2, #152	; 0x98
    3770:	4620      	mov	r0, r4
    3772:	f7fe fa6f 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3776:	f3bf 8f5b 	dmb	ish
    377a:	2301      	movs	r3, #1
    377c:	e856 2f00 	ldrex	r2, [r6]
    3780:	e846 3100 	strex	r1, r3, [r6]
    3784:	2900      	cmp	r1, #0
    3786:	d1f9      	bne.n	377c <bt_conn_add_le+0x28>
    3788:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    378c:	2207      	movs	r2, #7
    378e:	4639      	mov	r1, r7
    3790:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3794:	f7fe fa32 	bl	1bfc <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    3798:	2318      	movs	r3, #24
    379a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    379e:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    37a0:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    37a4:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    37a6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    37aa:	4903      	ldr	r1, [pc, #12]	; (37b8 <bt_conn_add_le+0x64>)
    37ac:	f00e fae2 	bl	11d74 <k_delayed_work_init>
			conn = &conns[i];
    37b0:	4620      	mov	r0, r4
}
    37b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37b4:	200000fc 	.word	0x200000fc
    37b8:	00003ca5 	.word	0x00003ca5

000037bc <bt_conn_set_state>:
{
    37bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
    37be:	7a45      	ldrb	r5, [r0, #9]
    37c0:	428d      	cmp	r5, r1
{
    37c2:	4604      	mov	r4, r0
	if (conn->state == state) {
    37c4:	f000 8099 	beq.w	38fa <bt_conn_set_state+0x13e>
	conn->state = state;
    37c8:	7241      	strb	r1, [r0, #9]
	switch (old_state) {
    37ca:	b19d      	cbz	r5, 37f4 <bt_conn_set_state+0x38>
    37cc:	2d02      	cmp	r5, #2
    37ce:	d015      	beq.n	37fc <bt_conn_set_state+0x40>
	switch (conn->state) {
    37d0:	7a63      	ldrb	r3, [r4, #9]
    37d2:	2b02      	cmp	r3, #2
    37d4:	f000 8086 	beq.w	38e4 <bt_conn_set_state+0x128>
    37d8:	2b03      	cmp	r3, #3
    37da:	d016      	beq.n	380a <bt_conn_set_state+0x4e>
    37dc:	2b00      	cmp	r3, #0
    37de:	f040 808c 	bne.w	38fa <bt_conn_set_state+0x13e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    37e2:	78a3      	ldrb	r3, [r4, #2]
    37e4:	2b02      	cmp	r3, #2
    37e6:	d12a      	bne.n	383e <bt_conn_set_state+0x82>
	atomic_dec(&conn->ref);
    37e8:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    37ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    37f0:	f7ff bdf5 	b.w	33de <atomic_dec>
	atomic_inc(&conn->ref);
    37f4:	3040      	adds	r0, #64	; 0x40
    37f6:	f7ff fdff 	bl	33f8 <atomic_inc>
    37fa:	e7e9      	b.n	37d0 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    37fc:	7883      	ldrb	r3, [r0, #2]
    37fe:	2b00      	cmp	r3, #0
    3800:	d1e6      	bne.n	37d0 <bt_conn_set_state+0x14>
			k_delayed_work_cancel(&conn->le.update_work);
    3802:	3070      	adds	r0, #112	; 0x70
    3804:	f00e fac6 	bl	11d94 <k_delayed_work_cancel>
    3808:	e7e2      	b.n	37d0 <bt_conn_set_state+0x14>
		if (conn->type == BT_CONN_TYPE_SCO) {
    380a:	78a3      	ldrb	r3, [r4, #2]
    380c:	2b02      	cmp	r3, #2
    380e:	d074      	beq.n	38fa <bt_conn_set_state+0x13e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    3810:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3814:	f00d fcfa 	bl	1120c <_impl_k_queue_init>
    3818:	f104 0018 	add.w	r0, r4, #24
    381c:	f00d fcf6 	bl	1120c <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    3820:	2100      	movs	r1, #0
    3822:	4836      	ldr	r0, [pc, #216]	; (38fc <bt_conn_set_state+0x140>)
    3824:	f00e fc90 	bl	12148 <_impl_k_poll_signal>
	list->head = NULL;
    3828:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    382a:	4620      	mov	r0, r4
    382c:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    382e:	63e3      	str	r3, [r4, #60]	; 0x3c
    3830:	f000 fbb2 	bl	3f98 <bt_l2cap_connected>
		notify_connected(conn);
    3834:	4620      	mov	r0, r4
}
    3836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    383a:	f7ff bdaf 	b.w	339c <notify_connected>
		if (old_state == BT_CONN_CONNECTED ||
    383e:	1eeb      	subs	r3, r5, #3
    3840:	2b01      	cmp	r3, #1
    3842:	d843      	bhi.n	38cc <bt_conn_set_state+0x110>
			bt_l2cap_disconnected(conn);
    3844:	4620      	mov	r0, r4
    3846:	f000 fbe1 	bl	400c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    384a:	4b2d      	ldr	r3, [pc, #180]	; (3900 <bt_conn_set_state+0x144>)
    384c:	681d      	ldr	r5, [r3, #0]
    384e:	b9ed      	cbnz	r5, 388c <bt_conn_set_state+0xd0>
    3850:	4e2c      	ldr	r6, [pc, #176]	; (3904 <bt_conn_set_state+0x148>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3852:	4f2d      	ldr	r7, [pc, #180]	; (3908 <bt_conn_set_state+0x14c>)
	__asm__ volatile(
    3854:	f04f 0320 	mov.w	r3, #32
    3858:	f3ef 8111 	mrs	r1, BASEPRI
    385c:	f383 8811 	msr	BASEPRI, r3
    3860:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    3862:	b12b      	cbz	r3, 3870 <bt_conn_set_state+0xb4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3864:	6960      	ldr	r0, [r4, #20]
	return node->next;
    3866:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    3868:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    386a:	4283      	cmp	r3, r0
	list->tail = node;
    386c:	bf08      	it	eq
    386e:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3870:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    3874:	b18b      	cbz	r3, 389a <bt_conn_set_state+0xde>
    3876:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    3878:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    387a:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    387c:	605d      	str	r5, [r3, #4]
	list->head = node;
    387e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    3880:	b902      	cbnz	r2, 3884 <bt_conn_set_state+0xc8>
	list->tail = node;
    3882:	6073      	str	r3, [r6, #4]
    3884:	4638      	mov	r0, r7
    3886:	f00d ff8e 	bl	117a6 <_impl_k_sem_give>
    388a:	e7e3      	b.n	3854 <bt_conn_set_state+0x98>
		if (cb->disconnected) {
    388c:	686b      	ldr	r3, [r5, #4]
    388e:	b113      	cbz	r3, 3896 <bt_conn_set_state+0xda>
			cb->disconnected(conn, conn->err);
    3890:	7a21      	ldrb	r1, [r4, #8]
    3892:	4620      	mov	r0, r4
    3894:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3896:	692d      	ldr	r5, [r5, #16]
    3898:	e7d9      	b.n	384e <bt_conn_set_state+0x92>
			if (conn->type == BT_CONN_TYPE_LE) {
    389a:	78a3      	ldrb	r3, [r4, #2]
    389c:	b91b      	cbnz	r3, 38a6 <bt_conn_set_state+0xea>
				k_delayed_work_cancel(&conn->le.update_work);
    389e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    38a2:	f00e fa77 	bl	11d94 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    38a6:	f3bf 8f5b 	dmb	ish
    38aa:	3404      	adds	r4, #4
    38ac:	e854 3f00 	ldrex	r3, [r4]
    38b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    38b4:	e844 3200 	strex	r2, r3, [r4]
    38b8:	2a00      	cmp	r2, #0
    38ba:	d1f7      	bne.n	38ac <bt_conn_set_state+0xf0>
    38bc:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    38c0:	2100      	movs	r1, #0
    38c2:	480e      	ldr	r0, [pc, #56]	; (38fc <bt_conn_set_state+0x140>)
}
    38c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    38c8:	f00e bc3e 	b.w	12148 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    38cc:	2d02      	cmp	r5, #2
    38ce:	d103      	bne.n	38d8 <bt_conn_set_state+0x11c>
			notify_connected(conn);
    38d0:	4620      	mov	r0, r4
    38d2:	f7ff fd63 	bl	339c <notify_connected>
    38d6:	e787      	b.n	37e8 <bt_conn_set_state+0x2c>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    38d8:	2d01      	cmp	r5, #1
    38da:	d10e      	bne.n	38fa <bt_conn_set_state+0x13e>
			if (conn->err) {
    38dc:	7a23      	ldrb	r3, [r4, #8]
    38de:	2b00      	cmp	r3, #0
    38e0:	d082      	beq.n	37e8 <bt_conn_set_state+0x2c>
    38e2:	e7f5      	b.n	38d0 <bt_conn_set_state+0x114>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    38e4:	78a3      	ldrb	r3, [r4, #2]
    38e6:	b943      	cbnz	r3, 38fa <bt_conn_set_state+0x13e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    38e8:	f104 0170 	add.w	r1, r4, #112	; 0x70
    38ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
    38f0:	4806      	ldr	r0, [pc, #24]	; (390c <bt_conn_set_state+0x150>)
}
    38f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    38f6:	f00e bab1 	b.w	11e5c <k_delayed_work_submit_to_queue>
    38fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38fc:	200035a0 	.word	0x200035a0
    3900:	200000e8 	.word	0x200000e8
    3904:	20000194 	.word	0x20000194
    3908:	20003504 	.word	0x20003504
    390c:	20001728 	.word	0x20001728

00003910 <bt_conn_lookup_handle>:
{
    3910:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    3912:	4c0b      	ldr	r4, [pc, #44]	; (3940 <bt_conn_lookup_handle+0x30>)
{
    3914:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    3916:	f104 0040 	add.w	r0, r4, #64	; 0x40
    391a:	f7ff fd4f 	bl	33bc <atomic_get>
    391e:	b168      	cbz	r0, 393c <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    3920:	7a63      	ldrb	r3, [r4, #9]
    3922:	3b03      	subs	r3, #3
    3924:	2b01      	cmp	r3, #1
    3926:	d808      	bhi.n	393a <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    3928:	8823      	ldrh	r3, [r4, #0]
    392a:	4293      	cmp	r3, r2
    392c:	d105      	bne.n	393a <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    392e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3932:	f7ff fd61 	bl	33f8 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    3936:	4620      	mov	r0, r4
    3938:	bd10      	pop	{r4, pc}
	return NULL;
    393a:	2000      	movs	r0, #0
}
    393c:	bd10      	pop	{r4, pc}
    393e:	bf00      	nop
    3940:	200000fc 	.word	0x200000fc

00003944 <bt_conn_addr_le_cmp>:
{
    3944:	b538      	push	{r3, r4, r5, lr}
    3946:	460d      	mov	r5, r1
    3948:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    394a:	f100 0144 	add.w	r1, r0, #68	; 0x44
    394e:	2207      	movs	r2, #7
    3950:	4628      	mov	r0, r5
    3952:	f7fe f93e 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    3956:	b160      	cbz	r0, 3972 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    3958:	78e3      	ldrb	r3, [r4, #3]
    395a:	2207      	movs	r2, #7
    395c:	b933      	cbnz	r3, 396c <bt_conn_addr_le_cmp+0x28>
    395e:	f104 0152 	add.w	r1, r4, #82	; 0x52
    3962:	4628      	mov	r0, r5
}
    3964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3968:	f7fe b933 	b.w	1bd2 <memcmp>
    396c:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    3970:	e7f7      	b.n	3962 <bt_conn_addr_le_cmp+0x1e>
    3972:	bd38      	pop	{r3, r4, r5, pc}

00003974 <bt_conn_lookup_addr_le>:
{
    3974:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    3976:	4c0b      	ldr	r4, [pc, #44]	; (39a4 <bt_conn_lookup_addr_le+0x30>)
{
    3978:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    397a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    397e:	f7ff fd1d 	bl	33bc <atomic_get>
    3982:	b908      	cbnz	r0, 3988 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    3984:	2000      	movs	r0, #0
    3986:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    3988:	78a3      	ldrb	r3, [r4, #2]
    398a:	2b00      	cmp	r3, #0
    398c:	d1fa      	bne.n	3984 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    398e:	4620      	mov	r0, r4
    3990:	f7ff ffd8 	bl	3944 <bt_conn_addr_le_cmp>
    3994:	2800      	cmp	r0, #0
    3996:	d1f5      	bne.n	3984 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    3998:	f104 0040 	add.w	r0, r4, #64	; 0x40
    399c:	f7ff fd2c 	bl	33f8 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    39a0:	4620      	mov	r0, r4
}
    39a2:	bd10      	pop	{r4, pc}
    39a4:	200000fc 	.word	0x200000fc

000039a8 <bt_conn_lookup_state_le>:
{
    39a8:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    39aa:	4c0e      	ldr	r4, [pc, #56]	; (39e4 <bt_conn_lookup_state_le+0x3c>)
{
    39ac:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    39ae:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    39b2:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    39b4:	f7ff fd02 	bl	33bc <atomic_get>
    39b8:	b908      	cbnz	r0, 39be <bt_conn_lookup_state_le+0x16>
	return NULL;
    39ba:	2000      	movs	r0, #0
    39bc:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    39be:	78a2      	ldrb	r2, [r4, #2]
    39c0:	2a00      	cmp	r2, #0
    39c2:	d1fa      	bne.n	39ba <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    39c4:	b93b      	cbnz	r3, 39d6 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    39c6:	7a63      	ldrb	r3, [r4, #9]
    39c8:	42ab      	cmp	r3, r5
    39ca:	d1f6      	bne.n	39ba <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    39cc:	4806      	ldr	r0, [pc, #24]	; (39e8 <bt_conn_lookup_state_le+0x40>)
    39ce:	f7ff fd13 	bl	33f8 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    39d2:	4804      	ldr	r0, [pc, #16]	; (39e4 <bt_conn_lookup_state_le+0x3c>)
}
    39d4:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    39d6:	4619      	mov	r1, r3
    39d8:	4620      	mov	r0, r4
    39da:	f7ff ffb3 	bl	3944 <bt_conn_addr_le_cmp>
    39de:	2800      	cmp	r0, #0
    39e0:	d1eb      	bne.n	39ba <bt_conn_lookup_state_le+0x12>
    39e2:	e7f0      	b.n	39c6 <bt_conn_lookup_state_le+0x1e>
    39e4:	200000fc 	.word	0x200000fc
    39e8:	2000013c 	.word	0x2000013c

000039ec <bt_conn_unref>:
	atomic_dec(&conn->ref);
    39ec:	3040      	adds	r0, #64	; 0x40
    39ee:	f7ff bcf6 	b.w	33de <atomic_dec>

000039f2 <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    39f2:	3044      	adds	r0, #68	; 0x44
    39f4:	4770      	bx	lr
	...

000039f8 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    39f8:	b570      	push	{r4, r5, r6, lr}
    39fa:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    39fc:	4608      	mov	r0, r1
{
    39fe:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    3a00:	f7fe fb72 	bl	20e8 <bt_le_conn_params_valid>
    3a04:	b908      	cbnz	r0, 3a0a <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    3a06:	2400      	movs	r4, #0
    3a08:	e01d      	b.n	3a46 <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3a0a:	481e      	ldr	r0, [pc, #120]	; (3a84 <bt_conn_create_le+0x8c>)
    3a0c:	f7ff fcd6 	bl	33bc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3a10:	0583      	lsls	r3, r0, #22
    3a12:	d4f8      	bmi.n	3a06 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    3a14:	4630      	mov	r0, r6
    3a16:	f7ff ffad 	bl	3974 <bt_conn_lookup_addr_le>
	if (conn) {
    3a1a:	4604      	mov	r4, r0
    3a1c:	b1a8      	cbz	r0, 3a4a <bt_conn_create_le+0x52>
		switch (conn->state) {
    3a1e:	7a43      	ldrb	r3, [r0, #9]
    3a20:	2b01      	cmp	r3, #1
    3a22:	d007      	beq.n	3a34 <bt_conn_create_le+0x3c>
    3a24:	d301      	bcc.n	3a2a <bt_conn_create_le+0x32>
    3a26:	2b03      	cmp	r3, #3
    3a28:	d90d      	bls.n	3a46 <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    3a2a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3a2e:	f7ff fcd6 	bl	33de <atomic_dec>
    3a32:	e7e8      	b.n	3a06 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    3a34:	886b      	ldrh	r3, [r5, #2]
    3a36:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    3a3a:	88ab      	ldrh	r3, [r5, #4]
    3a3c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3a40:	88eb      	ldrh	r3, [r5, #6]
    3a42:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    3a46:	4620      	mov	r0, r4
    3a48:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    3a4a:	4630      	mov	r0, r6
    3a4c:	f7ff fe82 	bl	3754 <bt_conn_add_le>
	if (!conn) {
    3a50:	4604      	mov	r4, r0
    3a52:	2800      	cmp	r0, #0
    3a54:	d0f7      	beq.n	3a46 <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    3a56:	2207      	movs	r2, #7
    3a58:	4631      	mov	r1, r6
    3a5a:	3052      	adds	r0, #82	; 0x52
    3a5c:	f7fe f8ce 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    3a60:	886b      	ldrh	r3, [r5, #2]
    3a62:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    3a66:	88ab      	ldrh	r3, [r5, #4]
    3a68:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3a6c:	88eb      	ldrh	r3, [r5, #6]
    3a6e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3a72:	4620      	mov	r0, r4
    3a74:	2101      	movs	r1, #1
    3a76:	f7ff fea1 	bl	37bc <bt_conn_set_state>
	bt_le_scan_update(true);
    3a7a:	2001      	movs	r0, #1
    3a7c:	f7fe fbf8 	bl	2270 <bt_le_scan_update>
	return conn;
    3a80:	e7e1      	b.n	3a46 <bt_conn_create_le+0x4e>
    3a82:	bf00      	nop
    3a84:	200034e8 	.word	0x200034e8

00003a88 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    3a88:	b570      	push	{r4, r5, r6, lr}
    3a8a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    3a8c:	460d      	mov	r5, r1
    3a8e:	2900      	cmp	r1, #0
    3a90:	d13d      	bne.n	3b0e <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    3a92:	4630      	mov	r0, r6
    3a94:	f7ff ff6e 	bl	3974 <bt_conn_lookup_addr_le>
	if (!conn) {
    3a98:	4604      	mov	r4, r0
    3a9a:	b928      	cbnz	r0, 3aa8 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    3a9c:	4630      	mov	r0, r6
    3a9e:	f7ff fe59 	bl	3754 <bt_conn_add_le>
		if (!conn) {
    3aa2:	4604      	mov	r4, r0
    3aa4:	2800      	cmp	r0, #0
    3aa6:	d053      	beq.n	3b50 <bt_le_set_auto_conn+0xc8>
    3aa8:	1d23      	adds	r3, r4, #4
    3aaa:	f104 0640 	add.w	r6, r4, #64	; 0x40
			return -ENOMEM;
		}
	}

	if (param) {
    3aae:	2d00      	cmp	r5, #0
    3ab0:	d035      	beq.n	3b1e <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    3ab2:	886a      	ldrh	r2, [r5, #2]
    3ab4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    3ab8:	88aa      	ldrh	r2, [r5, #4]
    3aba:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    3abe:	88ea      	ldrh	r2, [r5, #6]
    3ac0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3ac4:	f3bf 8f5b 	dmb	ish
    3ac8:	e853 2f00 	ldrex	r2, [r3]
    3acc:	f042 0101 	orr.w	r1, r2, #1
    3ad0:	e843 1000 	strex	r0, r1, [r3]
    3ad4:	2800      	cmp	r0, #0
    3ad6:	d1f7      	bne.n	3ac8 <bt_le_set_auto_conn+0x40>
    3ad8:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    3adc:	07d1      	lsls	r1, r2, #31
    3ade:	d402      	bmi.n	3ae6 <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    3ae0:	4630      	mov	r0, r6
    3ae2:	f7ff fc89 	bl	33f8 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    3ae6:	7a63      	ldrb	r3, [r4, #9]
    3ae8:	b963      	cbnz	r3, 3b04 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3aea:	481b      	ldr	r0, [pc, #108]	; (3b58 <bt_le_set_auto_conn+0xd0>)
    3aec:	f7ff fc66 	bl	33bc <atomic_get>
    3af0:	0783      	lsls	r3, r0, #30
    3af2:	d507      	bpl.n	3b04 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    3af4:	b11d      	cbz	r5, 3afe <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3af6:	2101      	movs	r1, #1
    3af8:	4620      	mov	r0, r4
    3afa:	f7ff fe5f 	bl	37bc <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    3afe:	2000      	movs	r0, #0
    3b00:	f7fe fbb6 	bl	2270 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    3b04:	4630      	mov	r0, r6
    3b06:	f7ff fc6a 	bl	33de <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    3b0a:	2000      	movs	r0, #0
    3b0c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    3b0e:	4608      	mov	r0, r1
    3b10:	f7fe faea 	bl	20e8 <bt_le_conn_params_valid>
    3b14:	2800      	cmp	r0, #0
    3b16:	d1bc      	bne.n	3a92 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    3b18:	f06f 0015 	mvn.w	r0, #21
    3b1c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b1e:	f3bf 8f5b 	dmb	ish
    3b22:	e853 2f00 	ldrex	r2, [r3]
    3b26:	f022 0101 	bic.w	r1, r2, #1
    3b2a:	e843 1000 	strex	r0, r1, [r3]
    3b2e:	2800      	cmp	r0, #0
    3b30:	d1f7      	bne.n	3b22 <bt_le_set_auto_conn+0x9a>
    3b32:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    3b36:	07d2      	lsls	r2, r2, #31
    3b38:	d5d5      	bpl.n	3ae6 <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    3b3a:	4630      	mov	r0, r6
    3b3c:	f7ff fc4f 	bl	33de <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    3b40:	7a63      	ldrb	r3, [r4, #9]
    3b42:	2b01      	cmp	r3, #1
    3b44:	d1cf      	bne.n	3ae6 <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3b46:	4629      	mov	r1, r5
    3b48:	4620      	mov	r0, r4
    3b4a:	f7ff fe37 	bl	37bc <bt_conn_set_state>
    3b4e:	e7ca      	b.n	3ae6 <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    3b50:	f06f 000b 	mvn.w	r0, #11
}
    3b54:	bd70      	pop	{r4, r5, r6, pc}
    3b56:	bf00      	nop
    3b58:	200034e8 	.word	0x200034e8

00003b5c <bt_conn_disconnect>:
{
    3b5c:	b570      	push	{r4, r5, r6, lr}
    3b5e:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3b60:	7881      	ldrb	r1, [r0, #2]
{
    3b62:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3b64:	b911      	cbnz	r1, 3b6c <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    3b66:	3044      	adds	r0, #68	; 0x44
    3b68:	f7ff ff8e 	bl	3a88 <bt_le_set_auto_conn>
	switch (conn->state) {
    3b6c:	7a63      	ldrb	r3, [r4, #9]
    3b6e:	3b01      	subs	r3, #1
    3b70:	2b03      	cmp	r3, #3
    3b72:	d803      	bhi.n	3b7c <bt_conn_disconnect+0x20>
    3b74:	e8df f003 	tbb	[pc, r3]
    3b78:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    3b7c:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    3b80:	4628      	mov	r0, r5
    3b82:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3b84:	4620      	mov	r0, r4
		conn->err = reason;
    3b86:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3b88:	2100      	movs	r1, #0
    3b8a:	f7ff fe17 	bl	37bc <bt_conn_set_state>
		bt_le_scan_update(false);
    3b8e:	2000      	movs	r0, #0
    3b90:	f7fe fb6e 	bl	2270 <bt_le_scan_update>
		return 0;
    3b94:	2500      	movs	r5, #0
    3b96:	e7f3      	b.n	3b80 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    3b98:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3b9c:	f00e f8fa 	bl	11d94 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    3ba0:	2100      	movs	r1, #0
    3ba2:	f242 000e 	movw	r0, #8206	; 0x200e
}
    3ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    3baa:	f7fe baef 	b.w	218c <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    3bae:	2103      	movs	r1, #3
    3bb0:	f240 4006 	movw	r0, #1030	; 0x406
    3bb4:	f7fe f98a 	bl	1ecc <bt_hci_cmd_create>
	if (!buf) {
    3bb8:	4605      	mov	r5, r0
    3bba:	b198      	cbz	r0, 3be4 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    3bbc:	2103      	movs	r1, #3
    3bbe:	3008      	adds	r0, #8
    3bc0:	f00c fd9a 	bl	106f8 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    3bc4:	8823      	ldrh	r3, [r4, #0]
    3bc6:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    3bc8:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    3bca:	4629      	mov	r1, r5
    3bcc:	f240 4006 	movw	r0, #1030	; 0x406
    3bd0:	f7fe fadc 	bl	218c <bt_hci_cmd_send>
	if (err) {
    3bd4:	4605      	mov	r5, r0
    3bd6:	2800      	cmp	r0, #0
    3bd8:	d1d2      	bne.n	3b80 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    3bda:	2104      	movs	r1, #4
    3bdc:	4620      	mov	r0, r4
    3bde:	f7ff fded 	bl	37bc <bt_conn_set_state>
    3be2:	e7cd      	b.n	3b80 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    3be4:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3be8:	e7ca      	b.n	3b80 <bt_conn_disconnect+0x24>

00003bea <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    3bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bec:	4607      	mov	r7, r0
    3bee:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    3bf0:	f242 0013 	movw	r0, #8211	; 0x2013
    3bf4:	210e      	movs	r1, #14
    3bf6:	f7fe f969 	bl	1ecc <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    3bfa:	4606      	mov	r6, r0
    3bfc:	b1c8      	cbz	r0, 3c32 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    3bfe:	210e      	movs	r1, #14
    3c00:	3008      	adds	r0, #8
    3c02:	f00c fd79 	bl	106f8 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    3c06:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    3c08:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    3c0a:	220e      	movs	r2, #14
    3c0c:	f7fe f822 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    3c10:	883b      	ldrh	r3, [r7, #0]
    3c12:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    3c14:	882b      	ldrh	r3, [r5, #0]
    3c16:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    3c18:	886b      	ldrh	r3, [r5, #2]
    3c1a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    3c1c:	88ab      	ldrh	r3, [r5, #4]
    3c1e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    3c20:	88eb      	ldrh	r3, [r5, #6]
    3c22:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3c24:	4631      	mov	r1, r6
    3c26:	f242 0013 	movw	r0, #8211	; 0x2013
}
    3c2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3c2e:	f7fe baad 	b.w	218c <bt_hci_cmd_send>
}
    3c32:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003c38 <bt_conn_le_param_update>:
{
    3c38:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    3c3a:	880a      	ldrh	r2, [r1, #0]
    3c3c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    3c40:	429a      	cmp	r2, r3
{
    3c42:	4604      	mov	r4, r0
    3c44:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    3c46:	d80c      	bhi.n	3c62 <bt_conn_le_param_update+0x2a>
    3c48:	884a      	ldrh	r2, [r1, #2]
    3c4a:	429a      	cmp	r2, r3
    3c4c:	d309      	bcc.n	3c62 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    3c4e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    3c52:	888b      	ldrh	r3, [r1, #4]
    3c54:	429a      	cmp	r2, r3
    3c56:	d104      	bne.n	3c62 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    3c58:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    3c5c:	88cb      	ldrh	r3, [r1, #6]
    3c5e:	429a      	cmp	r2, r3
    3c60:	d01a      	beq.n	3c98 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    3c62:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3c66:	f00e f895 	bl	11d94 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    3c6a:	4b0d      	ldr	r3, [pc, #52]	; (3ca0 <bt_conn_le_param_update+0x68>)
    3c6c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3c70:	079a      	lsls	r2, r3, #30
    3c72:	d503      	bpl.n	3c7c <bt_conn_le_param_update+0x44>
    3c74:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    3c78:	079b      	lsls	r3, r3, #30
    3c7a:	d401      	bmi.n	3c80 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    3c7c:	78e3      	ldrb	r3, [r4, #3]
    3c7e:	b92b      	cbnz	r3, 3c8c <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    3c80:	4629      	mov	r1, r5
    3c82:	4620      	mov	r0, r4
}
    3c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    3c88:	f7ff bfaf 	b.w	3bea <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    3c8c:	4629      	mov	r1, r5
    3c8e:	4620      	mov	r0, r4
}
    3c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    3c94:	f000 baa6 	b.w	41e4 <bt_l2cap_update_conn_param>
}
    3c98:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3c9c:	bd38      	pop	{r3, r4, r5, pc}
    3c9e:	bf00      	nop
    3ca0:	20003478 	.word	0x20003478

00003ca4 <le_conn_update>:
{
    3ca4:	4603      	mov	r3, r0
    3ca6:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3ca8:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    3cac:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    3cae:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3cb2:	d105      	bne.n	3cc0 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    3cb4:	2113      	movs	r1, #19
    3cb6:	f7ff ff51 	bl	3b5c <bt_conn_disconnect>
}
    3cba:	b003      	add	sp, #12
    3cbc:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3cc0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    3cc4:	f8ad 2000 	strh.w	r2, [sp]
    3cc8:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    3ccc:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    3cd0:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3cd2:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    3cd6:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    3cda:	f8ad 2004 	strh.w	r2, [sp, #4]
    3cde:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    3ce2:	f7ff ffa9 	bl	3c38 <bt_conn_le_param_update>
    3ce6:	e7e8      	b.n	3cba <le_conn_update+0x16>

00003ce8 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    3ce8:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    3cea:	4b08      	ldr	r3, [pc, #32]	; (3d0c <bt_conn_create_pdu+0x24>)
{
    3cec:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    3cee:	2800      	cmp	r0, #0
    3cf0:	bf08      	it	eq
    3cf2:	4618      	moveq	r0, r3
    3cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3cf8:	f00c fc9c 	bl	10634 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    3cfc:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    3cfe:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    3d00:	3008      	adds	r0, #8
    3d02:	f00c fcb6 	bl	10672 <net_buf_simple_reserve>

	return buf;
}
    3d06:	4620      	mov	r0, r4
    3d08:	bd38      	pop	{r3, r4, r5, pc}
    3d0a:	bf00      	nop
    3d0c:	20003944 	.word	0x20003944

00003d10 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    3d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d14:	4606      	mov	r6, r0
    3d16:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    3d18:	4816      	ldr	r0, [pc, #88]	; (3d74 <create_frag.isra.8+0x64>)
    3d1a:	2100      	movs	r1, #0
    3d1c:	f7ff ffe4 	bl	3ce8 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    3d20:	7833      	ldrb	r3, [r6, #0]
    3d22:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    3d24:	4605      	mov	r5, r0
    3d26:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    3d2a:	d005      	beq.n	3d38 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    3d2c:	f00c fcb2 	bl	10694 <net_buf_unref>
		return NULL;
    3d30:	4635      	mov	r5, r6
}
    3d32:	4628      	mov	r0, r5
    3d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    3d38:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3d3a:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    3d3e:	4e0e      	ldr	r6, [pc, #56]	; (3d78 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3d40:	4638      	mov	r0, r7
    3d42:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    3d46:	f00c fd12 	bl	1076e <net_buf_simple_tailroom>
    3d4a:	4580      	cmp	r8, r0
    3d4c:	d20c      	bcs.n	3d68 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    3d4e:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    3d52:	f854 1f08 	ldr.w	r1, [r4, #8]!
    3d56:	4632      	mov	r2, r6
    3d58:	4638      	mov	r0, r7
    3d5a:	f00c fcd3 	bl	10704 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    3d5e:	4631      	mov	r1, r6
    3d60:	4620      	mov	r0, r4
    3d62:	f00c fce8 	bl	10736 <net_buf_simple_pull>
    3d66:	e7e4      	b.n	3d32 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3d68:	4638      	mov	r0, r7
    3d6a:	f00c fd00 	bl	1076e <net_buf_simple_tailroom>
    3d6e:	b286      	uxth	r6, r0
    3d70:	e7ef      	b.n	3d52 <create_frag.isra.8+0x42>
    3d72:	bf00      	nop
    3d74:	20003964 	.word	0x20003964
    3d78:	20003478 	.word	0x20003478

00003d7c <bt_conn_process_tx>:
{
    3d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    3d7e:	7a43      	ldrb	r3, [r0, #9]
{
    3d80:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    3d82:	b993      	cbnz	r3, 3daa <bt_conn_process_tx+0x2e>
    3d84:	f3bf 8f5b 	dmb	ish
    3d88:	1d03      	adds	r3, r0, #4
    3d8a:	e853 2f00 	ldrex	r2, [r3]
    3d8e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    3d92:	e843 1400 	strex	r4, r1, [r3]
    3d96:	2c00      	cmp	r4, #0
    3d98:	d1f7      	bne.n	3d8a <bt_conn_process_tx+0xe>
    3d9a:	f3bf 8f5b 	dmb	ish
    3d9e:	0653      	lsls	r3, r2, #25
    3da0:	d503      	bpl.n	3daa <bt_conn_process_tx+0x2e>
}
    3da2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    3da6:	f7ff bc75 	b.w	3694 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    3daa:	2100      	movs	r1, #0
    3dac:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3db0:	f00c fc46 	bl	10640 <net_buf_get>
	BT_ASSERT(buf);
    3db4:	4604      	mov	r4, r0
    3db6:	b928      	cbnz	r0, 3dc4 <bt_conn_process_tx+0x48>
    3db8:	4040      	eors	r0, r0
    3dba:	f380 8811 	msr	BASEPRI, r0
    3dbe:	f04f 0004 	mov.w	r0, #4
    3dc2:	df02      	svc	2
	return bt_dev.le.mtu;
    3dc4:	4e19      	ldr	r6, [pc, #100]	; (3e2c <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    3dc6:	8981      	ldrh	r1, [r0, #12]
    3dc8:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    3dcc:	4291      	cmp	r1, r2
    3dce:	d807      	bhi.n	3de0 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    3dd0:	2300      	movs	r3, #0
    3dd2:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    3dd4:	4621      	mov	r1, r4
    3dd6:	4628      	mov	r0, r5
    3dd8:	f7ff fbd4 	bl	3584 <send_frag>
	if (!send_buf(conn, buf)) {
    3ddc:	b140      	cbz	r0, 3df0 <bt_conn_process_tx+0x74>
}
    3dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3de0:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
    3de4:	4601      	mov	r1, r0
    3de6:	4638      	mov	r0, r7
    3de8:	f7ff ff92 	bl	3d10 <create_frag.isra.8>
	if (!frag) {
    3dec:	4601      	mov	r1, r0
    3dee:	b920      	cbnz	r0, 3dfa <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    3df0:	4620      	mov	r0, r4
}
    3df2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    3df6:	f00c bc4d 	b.w	10694 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    3dfa:	2301      	movs	r3, #1
    3dfc:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3dfe:	4628      	mov	r0, r5
    3e00:	f7ff fbc0 	bl	3584 <send_frag>
    3e04:	2800      	cmp	r0, #0
    3e06:	d0f3      	beq.n	3df0 <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    3e08:	89a2      	ldrh	r2, [r4, #12]
    3e0a:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    3e0e:	429a      	cmp	r2, r3
    3e10:	d802      	bhi.n	3e18 <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    3e12:	2300      	movs	r3, #0
    3e14:	2201      	movs	r2, #1
    3e16:	e7dd      	b.n	3dd4 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    3e18:	4621      	mov	r1, r4
    3e1a:	4638      	mov	r0, r7
    3e1c:	f7ff ff78 	bl	3d10 <create_frag.isra.8>
		if (!frag) {
    3e20:	4601      	mov	r1, r0
    3e22:	2800      	cmp	r0, #0
    3e24:	d0e4      	beq.n	3df0 <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3e26:	2301      	movs	r3, #1
    3e28:	461a      	mov	r2, r3
    3e2a:	e7e8      	b.n	3dfe <bt_conn_process_tx+0x82>
    3e2c:	20003478 	.word	0x20003478

00003e30 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    3e30:	4b03      	ldr	r3, [pc, #12]	; (3e40 <bt_conn_get_id+0x10>)
    3e32:	1ac0      	subs	r0, r0, r3
    3e34:	4b03      	ldr	r3, [pc, #12]	; (3e44 <bt_conn_get_id+0x14>)
    3e36:	10c0      	asrs	r0, r0, #3
    3e38:	4358      	muls	r0, r3
}
    3e3a:	b2c0      	uxtb	r0, r0
    3e3c:	4770      	bx	lr
    3e3e:	bf00      	nop
    3e40:	200000fc 	.word	0x200000fc
    3e44:	286bca1b 	.word	0x286bca1b

00003e48 <bt_conn_init>:
	parent->next = child;
    3e48:	4b12      	ldr	r3, [pc, #72]	; (3e94 <bt_conn_init+0x4c>)
    3e4a:	4a13      	ldr	r2, [pc, #76]	; (3e98 <bt_conn_init+0x50>)
    3e4c:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    3e4e:	b510      	push	{r4, lr}
    3e50:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    3e52:	6859      	ldr	r1, [r3, #4]
    3e54:	b901      	cbnz	r1, 3e58 <bt_conn_init+0x10>
	list->tail = node;
    3e56:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    3e58:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    3e5a:	6092      	str	r2, [r2, #8]
	list->head = node;
    3e5c:	4a0f      	ldr	r2, [pc, #60]	; (3e9c <bt_conn_init+0x54>)
    3e5e:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    3e60:	b901      	cbnz	r1, 3e64 <bt_conn_init+0x1c>
	list->tail = node;
    3e62:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    3e64:	f001 f9b6 	bl	51d4 <bt_att_init>

	err = bt_smp_init();
    3e68:	f001 fe38 	bl	5adc <bt_smp_init>
	if (err) {
    3e6c:	4604      	mov	r4, r0
    3e6e:	b970      	cbnz	r0, 3e8e <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    3e70:	f000 f9e0 	bl	4234 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    3e74:	480a      	ldr	r0, [pc, #40]	; (3ea0 <bt_conn_init+0x58>)
    3e76:	f7ff faa1 	bl	33bc <atomic_get>
    3e7a:	b140      	cbz	r0, 3e8e <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3e7c:	4809      	ldr	r0, [pc, #36]	; (3ea4 <bt_conn_init+0x5c>)
    3e7e:	f7ff fa9d 	bl	33bc <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    3e82:	07c3      	lsls	r3, r0, #31
    3e84:	d503      	bpl.n	3e8e <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    3e86:	2101      	movs	r1, #1
    3e88:	4807      	ldr	r0, [pc, #28]	; (3ea8 <bt_conn_init+0x60>)
    3e8a:	f7ff fc97 	bl	37bc <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    3e8e:	4620      	mov	r0, r4
    3e90:	bd10      	pop	{r4, pc}
    3e92:	bf00      	nop
    3e94:	20000194 	.word	0x20000194
    3e98:	200000ec 	.word	0x200000ec
    3e9c:	200000f4 	.word	0x200000f4
    3ea0:	2000013c 	.word	0x2000013c
    3ea4:	20000100 	.word	0x20000100
    3ea8:	200000fc 	.word	0x200000fc

00003eac <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    3eac:	4770      	bx	lr
	...

00003eb0 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    3eb0:	4b04      	ldr	r3, [pc, #16]	; (3ec4 <l2cap_accept+0x14>)
    3eb2:	6818      	ldr	r0, [r3, #0]
    3eb4:	b918      	cbnz	r0, 3ebe <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    3eb6:	4a04      	ldr	r2, [pc, #16]	; (3ec8 <l2cap_accept+0x18>)
    3eb8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    3eba:	600b      	str	r3, [r1, #0]

		return 0;
    3ebc:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    3ebe:	f06f 000b 	mvn.w	r0, #11
}
    3ec2:	4770      	bx	lr
    3ec4:	2000019c 	.word	0x2000019c
    3ec8:	200035bc 	.word	0x200035bc

00003ecc <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    3ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ece:	4607      	mov	r7, r0
    3ed0:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3ed2:	2000      	movs	r0, #0
    3ed4:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    3ed6:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3ed8:	f7ff ff06 	bl	3ce8 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    3edc:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3ede:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    3ee0:	3008      	adds	r0, #8
    3ee2:	f00c fc09 	bl	106f8 <net_buf_simple_add>
	hdr->code = code;
    3ee6:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    3ee8:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    3eea:	8045      	strh	r5, [r0, #2]
}
    3eec:	4620      	mov	r0, r4
    3eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003ef0 <l2cap_connected>:
    3ef0:	4770      	bx	lr
	...

00003ef4 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    3ef4:	2300      	movs	r3, #0
    3ef6:	6083      	str	r3, [r0, #8]
    3ef8:	4b05      	ldr	r3, [pc, #20]	; (3f10 <bt_l2cap_le_fixed_chan_register+0x1c>)
    3efa:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    3efc:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    3f00:	b911      	cbnz	r1, 3f08 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    3f02:	605a      	str	r2, [r3, #4]
	list->head = node;
    3f04:	601a      	str	r2, [r3, #0]
    3f06:	4770      	bx	lr
	parent->next = child;
    3f08:	600a      	str	r2, [r1, #0]
	list->tail = node;
    3f0a:	605a      	str	r2, [r3, #4]
    3f0c:	4770      	bx	lr
    3f0e:	bf00      	nop
    3f10:	20000234 	.word	0x20000234

00003f14 <bt_l2cap_chan_remove>:
{
    3f14:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3f16:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3f18:	b113      	cbz	r3, 3f20 <bt_l2cap_chan_remove+0xc>
    3f1a:	3b08      	subs	r3, #8
    3f1c:	2200      	movs	r2, #0
    3f1e:	b903      	cbnz	r3, 3f22 <bt_l2cap_chan_remove+0xe>
    3f20:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    3f22:	428b      	cmp	r3, r1
    3f24:	f103 0408 	add.w	r4, r3, #8
    3f28:	d10f      	bne.n	3f4a <bt_l2cap_chan_remove+0x36>
    3f2a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    3f2c:	b93a      	cbnz	r2, 3f3e <bt_l2cap_chan_remove+0x2a>
    3f2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    3f30:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    3f32:	4294      	cmp	r4, r2
    3f34:	d100      	bne.n	3f38 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    3f36:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    3f38:	2200      	movs	r2, #0
    3f3a:	609a      	str	r2, [r3, #8]
    3f3c:	bd10      	pop	{r4, pc}
    3f3e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    3f40:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    3f42:	428c      	cmp	r4, r1
	list->tail = node;
    3f44:	bf08      	it	eq
    3f46:	63c2      	streq	r2, [r0, #60]	; 0x3c
    3f48:	e7f6      	b.n	3f38 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    3f4a:	4622      	mov	r2, r4
    3f4c:	2c00      	cmp	r4, #0
    3f4e:	d0e7      	beq.n	3f20 <bt_l2cap_chan_remove+0xc>
	return node->next;
    3f50:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3f52:	2b00      	cmp	r3, #0
    3f54:	d0e4      	beq.n	3f20 <bt_l2cap_chan_remove+0xc>
    3f56:	3b08      	subs	r3, #8
    3f58:	e7e1      	b.n	3f1e <bt_l2cap_chan_remove+0xa>

00003f5a <bt_l2cap_chan_del>:
	if (!chan->conn) {
    3f5a:	6803      	ldr	r3, [r0, #0]
{
    3f5c:	b510      	push	{r4, lr}
    3f5e:	4604      	mov	r4, r0
	if (!chan->conn) {
    3f60:	b12b      	cbz	r3, 3f6e <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    3f62:	6843      	ldr	r3, [r0, #4]
    3f64:	685b      	ldr	r3, [r3, #4]
    3f66:	b103      	cbz	r3, 3f6a <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    3f68:	4798      	blx	r3
	chan->conn = NULL;
    3f6a:	2300      	movs	r3, #0
    3f6c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    3f6e:	68e3      	ldr	r3, [r4, #12]
    3f70:	b11b      	cbz	r3, 3f7a <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    3f72:	4620      	mov	r0, r4
}
    3f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    3f78:	4718      	bx	r3
    3f7a:	bd10      	pop	{r4, pc}

00003f7c <l2cap_rtx_timeout>:
{
    3f7c:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    3f7e:	f1a0 0410 	sub.w	r4, r0, #16
    3f82:	4621      	mov	r1, r4
    3f84:	f850 0c10 	ldr.w	r0, [r0, #-16]
    3f88:	f7ff ffc4 	bl	3f14 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    3f8c:	4620      	mov	r0, r4
}
    3f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
    3f92:	f7ff bfe2 	b.w	3f5a <bt_l2cap_chan_del>
	...

00003f98 <bt_l2cap_connected>:
{
    3f98:	4b1a      	ldr	r3, [pc, #104]	; (4004 <bt_l2cap_connected+0x6c>)
    3f9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3f9e:	681c      	ldr	r4, [r3, #0]
    3fa0:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    3fa2:	b12c      	cbz	r4, 3fb0 <bt_l2cap_connected+0x18>
	parent->next = child;
    3fa4:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    3fa6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4008 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    3faa:	3c08      	subs	r4, #8
    3fac:	46b9      	mov	r9, r7
    3fae:	b914      	cbnz	r4, 3fb6 <bt_l2cap_connected+0x1e>
}
    3fb0:	b003      	add	sp, #12
    3fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    3fb6:	6863      	ldr	r3, [r4, #4]
    3fb8:	a901      	add	r1, sp, #4
    3fba:	4630      	mov	r0, r6
    3fbc:	4798      	blx	r3
    3fbe:	2800      	cmp	r0, #0
    3fc0:	db18      	blt.n	3ff4 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    3fc2:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    3fc4:	8823      	ldrh	r3, [r4, #0]
    3fc6:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    3fc8:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    3fcc:	4641      	mov	r1, r8
    3fce:	f105 0010 	add.w	r0, r5, #16
    3fd2:	f00d fecf 	bl	11d74 <k_delayed_work_init>
    3fd6:	60af      	str	r7, [r5, #8]
    3fd8:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    3fda:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    3fde:	b972      	cbnz	r2, 3ffe <bt_l2cap_connected+0x66>
	list->tail = node;
    3fe0:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    3fe2:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    3fe4:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    3fe6:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    3fe8:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    3fea:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    3fee:	681b      	ldr	r3, [r3, #0]
    3ff0:	b103      	cbz	r3, 3ff4 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    3ff2:	4798      	blx	r3
	return node->next;
    3ff4:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    3ff6:	2c00      	cmp	r4, #0
    3ff8:	d0da      	beq.n	3fb0 <bt_l2cap_connected+0x18>
    3ffa:	3c08      	subs	r4, #8
    3ffc:	e7d7      	b.n	3fae <bt_l2cap_connected+0x16>
	parent->next = child;
    3ffe:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4000:	63f3      	str	r3, [r6, #60]	; 0x3c
    4002:	e7ef      	b.n	3fe4 <bt_l2cap_connected+0x4c>
    4004:	20000234 	.word	0x20000234
    4008:	00003f7d 	.word	0x00003f7d

0000400c <bt_l2cap_disconnected>:
{
    400c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    400e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4010:	b1a3      	cbz	r3, 403c <bt_l2cap_disconnected+0x30>
    4012:	f1b3 0008 	subs.w	r0, r3, #8
    4016:	d10a      	bne.n	402e <bt_l2cap_disconnected+0x22>
    4018:	bd10      	pop	{r4, pc}
    401a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    401c:	f7ff ff9d 	bl	3f5a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4020:	b164      	cbz	r4, 403c <bt_l2cap_disconnected+0x30>
	return node->next;
    4022:	68a3      	ldr	r3, [r4, #8]
    4024:	b103      	cbz	r3, 4028 <bt_l2cap_disconnected+0x1c>
    4026:	3b08      	subs	r3, #8
{
    4028:	4620      	mov	r0, r4
    402a:	461c      	mov	r4, r3
    402c:	e7f6      	b.n	401c <bt_l2cap_disconnected+0x10>
    402e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4030:	2c00      	cmp	r4, #0
    4032:	d1f2      	bne.n	401a <bt_l2cap_disconnected+0xe>
}
    4034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    4038:	f7ff bf8f 	b.w	3f5a <bt_l2cap_chan_del>
    403c:	bd10      	pop	{r4, pc}

0000403e <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    403e:	3104      	adds	r1, #4
    4040:	f7ff be52 	b.w	3ce8 <bt_conn_create_pdu>

00004044 <bt_l2cap_send_cb>:
{
    4044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4046:	4614      	mov	r4, r2
    4048:	4605      	mov	r5, r0
    404a:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    404c:	f102 0008 	add.w	r0, r2, #8
    4050:	2104      	movs	r1, #4
{
    4052:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    4054:	f00c fb67 	bl	10726 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4058:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    405a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    405c:	3904      	subs	r1, #4
    405e:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    4060:	4632      	mov	r2, r6
    4062:	4621      	mov	r1, r4
    4064:	4628      	mov	r0, r5
}
    4066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    406a:	f7ff ba5a 	b.w	3522 <bt_conn_send_cb>

0000406e <l2cap_recv>:
{
    406e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    4070:	898b      	ldrh	r3, [r1, #12]
    4072:	2b03      	cmp	r3, #3
{
    4074:	4606      	mov	r6, r0
    4076:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4078:	d912      	bls.n	40a0 <l2cap_recv+0x32>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    407a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    407c:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    407e:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    4082:	8867      	ldrh	r7, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4084:	f00c fb57 	bl	10736 <net_buf_simple_pull>
	if (buf->len != len) {
    4088:	89aa      	ldrh	r2, [r5, #12]
    408a:	42ba      	cmp	r2, r7
    408c:	d108      	bne.n	40a0 <l2cap_recv+0x32>
	if (!hdr->ident) {
    408e:	7861      	ldrb	r1, [r4, #1]
    4090:	b131      	cbz	r1, 40a0 <l2cap_recv+0x32>
	switch (hdr->code) {
    4092:	7823      	ldrb	r3, [r4, #0]
    4094:	2b12      	cmp	r3, #18
    4096:	d005      	beq.n	40a4 <l2cap_recv+0x36>
    4098:	2b13      	cmp	r3, #19
    409a:	d001      	beq.n	40a0 <l2cap_recv+0x32>
    409c:	2b01      	cmp	r3, #1
    409e:	d154      	bne.n	414a <l2cap_recv+0xdc>
}
    40a0:	b003      	add	sp, #12
    40a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
    40a4:	2a07      	cmp	r2, #7
    40a6:	d9fb      	bls.n	40a0 <l2cap_recv+0x32>
    40a8:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    40aa:	78e6      	ldrb	r6, [r4, #3]
    40ac:	b18e      	cbz	r6, 40d2 <l2cap_recv+0x64>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    40ae:	2202      	movs	r2, #2
    40b0:	2001      	movs	r0, #1
    40b2:	f7ff ff0b 	bl	3ecc <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    40b6:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    40b8:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    40ba:	3008      	adds	r0, #8
    40bc:	f00c fb1c 	bl	106f8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    40c0:	2300      	movs	r3, #0
    40c2:	7003      	strb	r3, [r0, #0]
    40c4:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    40c6:	462a      	mov	r2, r5
    40c8:	2105      	movs	r1, #5
    40ca:	4620      	mov	r0, r4
    40cc:	f7ff ffba 	bl	4044 <bt_l2cap_send_cb>
    40d0:	e7e6      	b.n	40a0 <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    40d2:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    40d4:	7858      	ldrb	r0, [r3, #1]
    40d6:	781a      	ldrb	r2, [r3, #0]
    40d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    40dc:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    40e0:	78d8      	ldrb	r0, [r3, #3]
    40e2:	789a      	ldrb	r2, [r3, #2]
    40e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    40e8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(req->latency);
    40ec:	7958      	ldrb	r0, [r3, #5]
    40ee:	791a      	ldrb	r2, [r3, #4]
    40f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    40f4:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(req->timeout);
    40f8:	799a      	ldrb	r2, [r3, #6]
    40fa:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    40fc:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    40fe:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4102:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4104:	f8ad 3006 	strh.w	r3, [sp, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4108:	f7ff fee0 	bl	3ecc <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    410c:	4669      	mov	r1, sp
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    410e:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    4110:	4620      	mov	r0, r4
    4112:	f7ff f997 	bl	3444 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4116:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4118:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    411a:	f107 0008 	add.w	r0, r7, #8
    411e:	f00c faeb 	bl	106f8 <net_buf_simple_add>
	if (accepted) {
    4122:	b175      	cbz	r5, 4142 <l2cap_recv+0xd4>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    4124:	7006      	strb	r6, [r0, #0]
    4126:	7046      	strb	r6, [r0, #1]
    4128:	2300      	movs	r3, #0
    412a:	463a      	mov	r2, r7
    412c:	2105      	movs	r1, #5
    412e:	4620      	mov	r0, r4
    4130:	f7ff ff88 	bl	4044 <bt_l2cap_send_cb>
	if (accepted) {
    4134:	2d00      	cmp	r5, #0
    4136:	d0b3      	beq.n	40a0 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
    4138:	4669      	mov	r1, sp
    413a:	4620      	mov	r0, r4
    413c:	f7ff fd55 	bl	3bea <bt_conn_le_conn_update>
    4140:	e7ae      	b.n	40a0 <l2cap_recv+0x32>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    4142:	2301      	movs	r3, #1
    4144:	7003      	strb	r3, [r0, #0]
    4146:	7045      	strb	r5, [r0, #1]
    4148:	e7ee      	b.n	4128 <l2cap_recv+0xba>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    414a:	2202      	movs	r2, #2
    414c:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    414e:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4150:	f7ff febc 	bl	3ecc <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4154:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4156:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4158:	3008      	adds	r0, #8
    415a:	f00c facd 	bl	106f8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    415e:	2300      	movs	r3, #0
    4160:	7003      	strb	r3, [r0, #0]
    4162:	7043      	strb	r3, [r0, #1]
    4164:	4622      	mov	r2, r4
    4166:	2105      	movs	r1, #5
    4168:	4628      	mov	r0, r5
    416a:	e7af      	b.n	40cc <l2cap_recv+0x5e>

0000416c <bt_l2cap_le_lookup_tx_cid>:
{
    416c:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    416e:	b100      	cbz	r0, 4172 <bt_l2cap_le_lookup_tx_cid+0x6>
    4170:	3808      	subs	r0, #8
    4172:	b900      	cbnz	r0, 4176 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4174:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4176:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    417a:	428b      	cmp	r3, r1
    417c:	d0fa      	beq.n	4174 <bt_l2cap_le_lookup_tx_cid+0x8>
    417e:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4180:	2000      	movs	r0, #0
    4182:	2b00      	cmp	r3, #0
    4184:	d0f6      	beq.n	4174 <bt_l2cap_le_lookup_tx_cid+0x8>
    4186:	f1a3 0008 	sub.w	r0, r3, #8
    418a:	e7f2      	b.n	4172 <bt_l2cap_le_lookup_tx_cid+0x6>

0000418c <bt_l2cap_le_lookup_rx_cid>:
{
    418c:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    418e:	b100      	cbz	r0, 4192 <bt_l2cap_le_lookup_rx_cid+0x6>
    4190:	3808      	subs	r0, #8
    4192:	b900      	cbnz	r0, 4196 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4194:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4196:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4198:	428b      	cmp	r3, r1
    419a:	d0fb      	beq.n	4194 <bt_l2cap_le_lookup_rx_cid+0x8>
    419c:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    419e:	2000      	movs	r0, #0
    41a0:	2b00      	cmp	r3, #0
    41a2:	d0f7      	beq.n	4194 <bt_l2cap_le_lookup_rx_cid+0x8>
    41a4:	f1a3 0008 	sub.w	r0, r3, #8
    41a8:	e7f3      	b.n	4192 <bt_l2cap_le_lookup_rx_cid+0x6>

000041aa <bt_l2cap_recv>:
{
    41aa:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    41ac:	898b      	ldrh	r3, [r1, #12]
    41ae:	2b03      	cmp	r3, #3
{
    41b0:	4605      	mov	r5, r0
    41b2:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    41b4:	d804      	bhi.n	41c0 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
    41b6:	4620      	mov	r0, r4
}
    41b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    41bc:	f00c ba6a 	b.w	10694 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    41c0:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    41c2:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    41c4:	f850 3f08 	ldr.w	r3, [r0, #8]!
    41c8:	885e      	ldrh	r6, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    41ca:	f00c fab4 	bl	10736 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    41ce:	4631      	mov	r1, r6
    41d0:	4628      	mov	r0, r5
    41d2:	f7ff ffdb 	bl	418c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    41d6:	2800      	cmp	r0, #0
    41d8:	d0ed      	beq.n	41b6 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
    41da:	6843      	ldr	r3, [r0, #4]
    41dc:	4621      	mov	r1, r4
    41de:	691b      	ldr	r3, [r3, #16]
    41e0:	4798      	blx	r3
    41e2:	e7e8      	b.n	41b6 <bt_l2cap_recv+0xc>

000041e4 <bt_l2cap_update_conn_param>:
{
    41e4:	b570      	push	{r4, r5, r6, lr}
	ident++;
    41e6:	4b12      	ldr	r3, [pc, #72]	; (4230 <bt_l2cap_update_conn_param+0x4c>)
    41e8:	781a      	ldrb	r2, [r3, #0]
    41ea:	3201      	adds	r2, #1
	if (!ident) {
    41ec:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    41f0:	bf08      	it	eq
    41f2:	2201      	moveq	r2, #1
    41f4:	701a      	strb	r2, [r3, #0]
{
    41f6:	460c      	mov	r4, r1
    41f8:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    41fa:	7819      	ldrb	r1, [r3, #0]
    41fc:	2208      	movs	r2, #8
    41fe:	2012      	movs	r0, #18
    4200:	f7ff fe64 	bl	3ecc <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    4204:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4206:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    4208:	4408      	add	r0, r1
    420a:	f00c fa75 	bl	106f8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    420e:	8823      	ldrh	r3, [r4, #0]
    4210:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4212:	8863      	ldrh	r3, [r4, #2]
    4214:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4216:	88a3      	ldrh	r3, [r4, #4]
    4218:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    421a:	88e3      	ldrh	r3, [r4, #6]
    421c:	80c3      	strh	r3, [r0, #6]
    421e:	4632      	mov	r2, r6
    4220:	4628      	mov	r0, r5
    4222:	2300      	movs	r3, #0
    4224:	2105      	movs	r1, #5
    4226:	f7ff ff0d 	bl	4044 <bt_l2cap_send_cb>
}
    422a:	2000      	movs	r0, #0
    422c:	bd70      	pop	{r4, r5, r6, pc}
    422e:	bf00      	nop
    4230:	20000230 	.word	0x20000230

00004234 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4234:	4801      	ldr	r0, [pc, #4]	; (423c <bt_l2cap_init+0x8>)
    4236:	f7ff be5d 	b.w	3ef4 <bt_l2cap_le_fixed_chan_register>
    423a:	bf00      	nop
    423c:	200035b0 	.word	0x200035b0

00004240 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    4240:	2006      	movs	r0, #6
    4242:	4770      	bx	lr

00004244 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4244:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    4246:	4a0a      	ldr	r2, [pc, #40]	; (4270 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4248:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    424a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    424e:	4284      	cmp	r4, r0
    4250:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    4254:	d102      	bne.n	425c <att_op_get_type+0x18>
			return handlers[i].type;
    4256:	440a      	add	r2, r1
    4258:	7890      	ldrb	r0, [r2, #2]
    425a:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    425c:	3301      	adds	r3, #1
    425e:	2b1b      	cmp	r3, #27
    4260:	d1f3      	bne.n	424a <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4262:	f010 0f40 	tst.w	r0, #64	; 0x40
    4266:	bf14      	ite	ne
    4268:	2000      	movne	r0, #0
    426a:	2006      	moveq	r0, #6
}
    426c:	bd10      	pop	{r4, pc}
    426e:	bf00      	nop
    4270:	0001286c 	.word	0x0001286c

00004274 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4274:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    4276:	4d0b      	ldr	r5, [pc, #44]	; (42a4 <bt_att_accept+0x30>)
    4278:	682c      	ldr	r4, [r5, #0]
{
    427a:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    427c:	b97c      	cbnz	r4, 429e <bt_att_accept+0x2a>
			continue;
		}

		memset(att, 0, sizeof(*att));
    427e:	4621      	mov	r1, r4
    4280:	22e4      	movs	r2, #228	; 0xe4
    4282:	4628      	mov	r0, r5
    4284:	f7fd fce6 	bl	1c54 <memset>
		att->chan.chan.ops = &ops;
    4288:	4b07      	ldr	r3, [pc, #28]	; (42a8 <bt_att_accept+0x34>)
    428a:	606b      	str	r3, [r5, #4]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    428c:	2202      	movs	r2, #2
    428e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    4292:	4611      	mov	r1, r2
    4294:	f00d fa7e 	bl	11794 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    4298:	6035      	str	r5, [r6, #0]

		return 0;
    429a:	4620      	mov	r0, r4
    429c:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    429e:	f06f 000b 	mvn.w	r0, #11
}
    42a2:	bd70      	pop	{r4, r5, r6, pc}
    42a4:	2000023c 	.word	0x2000023c
    42a8:	200035dc 	.word	0x200035dc

000042ac <att_req_destroy>:
{
    42ac:	b510      	push	{r4, lr}
    42ae:	4604      	mov	r4, r0
	if (req->buf) {
    42b0:	6900      	ldr	r0, [r0, #16]
    42b2:	b108      	cbz	r0, 42b8 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    42b4:	f00c f9ee 	bl	10694 <net_buf_unref>
	if (req->destroy) {
    42b8:	68a3      	ldr	r3, [r4, #8]
    42ba:	b10b      	cbz	r3, 42c0 <att_req_destroy+0x14>
		req->destroy(req);
    42bc:	4620      	mov	r0, r4
    42be:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    42c0:	4620      	mov	r0, r4
    42c2:	2214      	movs	r2, #20
    42c4:	2100      	movs	r1, #0
}
    42c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    42ca:	f7fd bcc3 	b.w	1c54 <memset>

000042ce <att_notify>:
{
    42ce:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    42d0:	f101 0008 	add.w	r0, r1, #8
    42d4:	f00c fa3f 	bl	10756 <net_buf_simple_pull_le16>
}
    42d8:	2000      	movs	r0, #0
    42da:	bd08      	pop	{r3, pc}

000042dc <read_group_cb>:
{
    42dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    42e0:	680d      	ldr	r5, [r1, #0]
{
    42e2:	4606      	mov	r6, r0
    42e4:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    42e6:	f04f 0800 	mov.w	r8, #0
    42ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    42ee:	a902      	add	r1, sp, #8
    42f0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    42f2:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    42f4:	f88d 8008 	strb.w	r8, [sp, #8]
    42f8:	f8ad 300a 	strh.w	r3, [sp, #10]
    42fc:	f7fd fd52 	bl	1da4 <bt_uuid_cmp>
    4300:	b198      	cbz	r0, 432a <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4302:	f642 0301 	movw	r3, #10241	; 0x2801
    4306:	a903      	add	r1, sp, #12
    4308:	6830      	ldr	r0, [r6, #0]
    430a:	f88d 800c 	strb.w	r8, [sp, #12]
    430e:	f8ad 300e 	strh.w	r3, [sp, #14]
    4312:	f7fd fd47 	bl	1da4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4316:	b140      	cbz	r0, 432a <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    4318:	6923      	ldr	r3, [r4, #16]
    431a:	b123      	cbz	r3, 4326 <read_group_cb+0x4a>
    431c:	8a32      	ldrh	r2, [r6, #16]
    431e:	8859      	ldrh	r1, [r3, #2]
    4320:	4291      	cmp	r1, r2
    4322:	d200      	bcs.n	4326 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4324:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    4326:	2001      	movs	r0, #1
    4328:	e012      	b.n	4350 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    432a:	6861      	ldr	r1, [r4, #4]
    432c:	6830      	ldr	r0, [r6, #0]
    432e:	f7fd fd39 	bl	1da4 <bt_uuid_cmp>
    4332:	b110      	cbz	r0, 433a <read_group_cb+0x5e>
		data->group = NULL;
    4334:	2300      	movs	r3, #0
    4336:	6123      	str	r3, [r4, #16]
    4338:	e7f5      	b.n	4326 <read_group_cb+0x4a>
	if (data->rsp->len &&
    433a:	68e3      	ldr	r3, [r4, #12]
    433c:	68a0      	ldr	r0, [r4, #8]
    433e:	781a      	ldrb	r2, [r3, #0]
    4340:	b14a      	cbz	r2, 4356 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    4342:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    4346:	8981      	ldrh	r1, [r0, #12]
    4348:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    434a:	4293      	cmp	r3, r2
    434c:	da03      	bge.n	4356 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    434e:	2000      	movs	r0, #0
}
    4350:	b004      	add	sp, #16
    4352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4356:	2104      	movs	r1, #4
    4358:	3008      	adds	r0, #8
    435a:	f00c f9cd 	bl	106f8 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    435e:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4360:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4362:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4364:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4366:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4368:	898a      	ldrh	r2, [r1, #12]
    436a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    436e:	6889      	ldr	r1, [r1, #8]
    4370:	f8d6 8004 	ldr.w	r8, [r6, #4]
    4374:	1a9b      	subs	r3, r3, r2
    4376:	2500      	movs	r5, #0
    4378:	440a      	add	r2, r1
    437a:	9500      	str	r5, [sp, #0]
    437c:	4631      	mov	r1, r6
    437e:	b29b      	uxth	r3, r3
    4380:	4638      	mov	r0, r7
    4382:	47c0      	blx	r8
	if (read < 0) {
    4384:	1e01      	subs	r1, r0, #0
    4386:	dbe2      	blt.n	434e <read_group_cb+0x72>
	if (!data->rsp->len) {
    4388:	68e0      	ldr	r0, [r4, #12]
    438a:	7802      	ldrb	r2, [r0, #0]
    438c:	1d0b      	adds	r3, r1, #4
    438e:	b92a      	cbnz	r2, 439c <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    4390:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    4392:	68a0      	ldr	r0, [r4, #8]
    4394:	3008      	adds	r0, #8
    4396:	f00c f9af 	bl	106f8 <net_buf_simple_add>
    439a:	e7c4      	b.n	4326 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    439c:	429a      	cmp	r2, r3
    439e:	d0f8      	beq.n	4392 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    43a0:	68a2      	ldr	r2, [r4, #8]
    43a2:	8993      	ldrh	r3, [r2, #12]
    43a4:	3b04      	subs	r3, #4
    43a6:	8193      	strh	r3, [r2, #12]
    43a8:	e7d1      	b.n	434e <read_group_cb+0x72>

000043aa <find_info_cb>:
	if (!data->rsp) {
    43aa:	688b      	ldr	r3, [r1, #8]
{
    43ac:	b570      	push	{r4, r5, r6, lr}
    43ae:	4605      	mov	r5, r0
    43b0:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    43b2:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    43b4:	b963      	cbnz	r3, 43d0 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    43b6:	6848      	ldr	r0, [r1, #4]
    43b8:	2101      	movs	r1, #1
    43ba:	3008      	adds	r0, #8
    43bc:	f00c f99c 	bl	106f8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    43c0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    43c2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	2b00      	cmp	r3, #0
    43c8:	bf0c      	ite	eq
    43ca:	2301      	moveq	r3, #1
    43cc:	2302      	movne	r3, #2
    43ce:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    43d0:	68a3      	ldr	r3, [r4, #8]
    43d2:	781b      	ldrb	r3, [r3, #0]
    43d4:	2b01      	cmp	r3, #1
    43d6:	d003      	beq.n	43e0 <find_info_cb+0x36>
    43d8:	2b02      	cmp	r3, #2
    43da:	d01a      	beq.n	4412 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    43dc:	2000      	movs	r0, #0
}
    43de:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    43e0:	682b      	ldr	r3, [r5, #0]
    43e2:	781b      	ldrb	r3, [r3, #0]
    43e4:	2b00      	cmp	r3, #0
    43e6:	d1f9      	bne.n	43dc <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    43e8:	6860      	ldr	r0, [r4, #4]
    43ea:	2104      	movs	r1, #4
    43ec:	3008      	adds	r0, #8
    43ee:	f00c f983 	bl	106f8 <net_buf_simple_add>
    43f2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    43f4:	8a2b      	ldrh	r3, [r5, #16]
    43f6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    43f8:	682b      	ldr	r3, [r5, #0]
    43fa:	885b      	ldrh	r3, [r3, #2]
    43fc:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    43fe:	6863      	ldr	r3, [r4, #4]
    4400:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4404:	899b      	ldrh	r3, [r3, #12]
    4406:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4408:	2804      	cmp	r0, #4
    440a:	bf94      	ite	ls
    440c:	2000      	movls	r0, #0
    440e:	2001      	movhi	r0, #1
    4410:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    4412:	682b      	ldr	r3, [r5, #0]
    4414:	781b      	ldrb	r3, [r3, #0]
    4416:	2b02      	cmp	r3, #2
    4418:	d1e0      	bne.n	43dc <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    441a:	6860      	ldr	r0, [r4, #4]
    441c:	2112      	movs	r1, #18
    441e:	3008      	adds	r0, #8
    4420:	f00c f96a 	bl	106f8 <net_buf_simple_add>
    4424:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4426:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    4428:	8a2b      	ldrh	r3, [r5, #16]
    442a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    442e:	2210      	movs	r2, #16
    4430:	3101      	adds	r1, #1
    4432:	f7fd fbe3 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    4436:	6863      	ldr	r3, [r4, #4]
    4438:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    443c:	899b      	ldrh	r3, [r3, #12]
    443e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4440:	2812      	cmp	r0, #18
    4442:	e7e2      	b.n	440a <find_info_cb+0x60>

00004444 <find_type_cb>:
{
    4444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    4448:	680e      	ldr	r6, [r1, #0]
{
    444a:	b088      	sub	sp, #32
    444c:	4605      	mov	r5, r0
    444e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4450:	2700      	movs	r7, #0
    4452:	f642 0301 	movw	r3, #10241	; 0x2801
    4456:	a902      	add	r1, sp, #8
    4458:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    445a:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    445e:	f88d 7008 	strb.w	r7, [sp, #8]
    4462:	f8ad 300a 	strh.w	r3, [sp, #10]
    4466:	f7fd fc9d 	bl	1da4 <bt_uuid_cmp>
    446a:	b928      	cbnz	r0, 4478 <find_type_cb+0x34>
		data->group = NULL;
    446c:	2300      	movs	r3, #0
    446e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    4470:	2001      	movs	r0, #1
}
    4472:	b008      	add	sp, #32
    4474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    4478:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    447c:	a903      	add	r1, sp, #12
    447e:	6828      	ldr	r0, [r5, #0]
    4480:	f88d 700c 	strb.w	r7, [sp, #12]
    4484:	f8ad 300e 	strh.w	r3, [sp, #14]
    4488:	f7fd fc8c 	bl	1da4 <bt_uuid_cmp>
    448c:	b140      	cbz	r0, 44a0 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    448e:	68a3      	ldr	r3, [r4, #8]
    4490:	2b00      	cmp	r3, #0
    4492:	d0ed      	beq.n	4470 <find_type_cb+0x2c>
    4494:	8a2a      	ldrh	r2, [r5, #16]
    4496:	8859      	ldrh	r1, [r3, #2]
    4498:	4291      	cmp	r1, r2
    449a:	d2e9      	bcs.n	4470 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    449c:	805a      	strh	r2, [r3, #2]
    449e:	e7e7      	b.n	4470 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    44a0:	6862      	ldr	r2, [r4, #4]
    44a2:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    44a6:	8992      	ldrh	r2, [r2, #12]
    44a8:	1a9b      	subs	r3, r3, r2
    44aa:	2b03      	cmp	r3, #3
    44ac:	d9e1      	bls.n	4472 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    44ae:	2310      	movs	r3, #16
    44b0:	9000      	str	r0, [sp, #0]
    44b2:	eb0d 0203 	add.w	r2, sp, r3
    44b6:	686e      	ldr	r6, [r5, #4]
    44b8:	4629      	mov	r1, r5
    44ba:	4640      	mov	r0, r8
    44bc:	47b0      	blx	r6
	if (read < 0) {
    44be:	1e02      	subs	r2, r0, #0
    44c0:	dbd4      	blt.n	446c <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    44c2:	7c23      	ldrb	r3, [r4, #16]
    44c4:	429a      	cmp	r2, r3
    44c6:	d1d1      	bne.n	446c <find_type_cb+0x28>
    44c8:	a904      	add	r1, sp, #16
    44ca:	68e0      	ldr	r0, [r4, #12]
    44cc:	f7fd fb81 	bl	1bd2 <memcmp>
    44d0:	2800      	cmp	r0, #0
    44d2:	d1cb      	bne.n	446c <find_type_cb+0x28>
	data->err = 0x00;
    44d4:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    44d6:	6860      	ldr	r0, [r4, #4]
    44d8:	2104      	movs	r1, #4
    44da:	3008      	adds	r0, #8
    44dc:	f00c f90c 	bl	106f8 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    44e0:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    44e2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    44e4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    44e6:	8043      	strh	r3, [r0, #2]
    44e8:	e7c2      	b.n	4470 <find_type_cb+0x2c>
	...

000044ec <bt_att_connected>:
{
    44ec:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    44ee:	2317      	movs	r3, #23
{
    44f0:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    44f2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    44f6:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    44f8:	4906      	ldr	r1, [pc, #24]	; (4514 <bt_att_connected+0x28>)
    44fa:	30a4      	adds	r0, #164	; 0xa4
    44fc:	f00d fc3a 	bl	11d74 <k_delayed_work_init>
	list->head = NULL;
    4500:	2300      	movs	r3, #0
    4502:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    4506:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    450a:	6820      	ldr	r0, [r4, #0]
}
    450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    4510:	f001 baa2 	b.w	5a58 <bt_gatt_connected>
    4514:	0000498f 	.word	0x0000498f

00004518 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    4518:	f011 0f01 	tst.w	r1, #1
    451c:	7c83      	ldrb	r3, [r0, #18]
    451e:	d004      	beq.n	452a <check_perm.isra.5+0x12>
    4520:	f013 0f15 	tst.w	r3, #21
    4524:	d012      	beq.n	454c <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    4526:	6842      	ldr	r2, [r0, #4]
    4528:	b182      	cbz	r2, 454c <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    452a:	078a      	lsls	r2, r1, #30
    452c:	d504      	bpl.n	4538 <check_perm.isra.5+0x20>
    452e:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    4532:	d00d      	beq.n	4550 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    4534:	6882      	ldr	r2, [r0, #8]
    4536:	b15a      	cbz	r2, 4550 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    4538:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    453a:	f011 0f30 	tst.w	r1, #48	; 0x30
    453e:	d109      	bne.n	4554 <check_perm.isra.5+0x3c>
	return 0;
    4540:	f011 0f0c 	tst.w	r1, #12
    4544:	bf14      	ite	ne
    4546:	200f      	movne	r0, #15
    4548:	2000      	moveq	r0, #0
    454a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    454c:	2002      	movs	r0, #2
    454e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    4550:	2003      	movs	r0, #3
    4552:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    4554:	2005      	movs	r0, #5
}
    4556:	4770      	bx	lr

00004558 <read_type_cb>:
{
    4558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    455c:	680f      	ldr	r7, [r1, #0]
{
    455e:	4606      	mov	r6, r0
    4560:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4562:	6800      	ldr	r0, [r0, #0]
    4564:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    4566:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    456a:	f7fd fc1b 	bl	1da4 <bt_uuid_cmp>
    456e:	4680      	mov	r8, r0
    4570:	2800      	cmp	r0, #0
    4572:	d14d      	bne.n	4610 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4574:	2115      	movs	r1, #21
    4576:	4630      	mov	r0, r6
    4578:	f7ff ffce 	bl	4518 <check_perm.isra.5>
    457c:	4605      	mov	r5, r0
    457e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4580:	b148      	cbz	r0, 4596 <read_type_cb+0x3e>
		if (data->rsp->len) {
    4582:	68e3      	ldr	r3, [r4, #12]
    4584:	781d      	ldrb	r5, [r3, #0]
    4586:	b115      	cbz	r5, 458e <read_type_cb+0x36>
			data->err = 0x00;
    4588:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    458c:	4645      	mov	r5, r8
}
    458e:	4628      	mov	r0, r5
    4590:	b003      	add	sp, #12
    4592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    4596:	68a0      	ldr	r0, [r4, #8]
    4598:	2102      	movs	r1, #2
    459a:	3008      	adds	r0, #8
    459c:	f00c f8ac 	bl	106f8 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    45a0:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    45a2:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    45a4:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    45a6:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    45a8:	898a      	ldrh	r2, [r1, #12]
    45aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    45ae:	6889      	ldr	r1, [r1, #8]
    45b0:	f8d6 8004 	ldr.w	r8, [r6, #4]
    45b4:	9500      	str	r5, [sp, #0]
    45b6:	1a9b      	subs	r3, r3, r2
    45b8:	b29b      	uxth	r3, r3
    45ba:	440a      	add	r2, r1
    45bc:	4648      	mov	r0, r9
    45be:	4631      	mov	r1, r6
    45c0:	47c0      	blx	r8
	if (read < 0) {
    45c2:	1e01      	subs	r1, r0, #0
    45c4:	da08      	bge.n	45d8 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    45c6:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    45ca:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    45cc:	bf9a      	itte	ls
    45ce:	4249      	negls	r1, r1
    45d0:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    45d2:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    45d4:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    45d6:	e7da      	b.n	458e <read_type_cb+0x36>
	if (!data->rsp->len) {
    45d8:	68e0      	ldr	r0, [r4, #12]
    45da:	7802      	ldrb	r2, [r0, #0]
    45dc:	1c8b      	adds	r3, r1, #2
    45de:	b982      	cbnz	r2, 4602 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    45e0:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    45e2:	68a0      	ldr	r0, [r4, #8]
    45e4:	3008      	adds	r0, #8
    45e6:	f00c f887 	bl	106f8 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    45ea:	68a3      	ldr	r3, [r4, #8]
    45ec:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    45f0:	899b      	ldrh	r3, [r3, #12]
    45f2:	1aed      	subs	r5, r5, r3
    45f4:	68e3      	ldr	r3, [r4, #12]
    45f6:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    45f8:	429d      	cmp	r5, r3
    45fa:	bfd4      	ite	le
    45fc:	2500      	movle	r5, #0
    45fe:	2501      	movgt	r5, #1
    4600:	e7c5      	b.n	458e <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    4602:	429a      	cmp	r2, r3
    4604:	d0ed      	beq.n	45e2 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    4606:	68a2      	ldr	r2, [r4, #8]
    4608:	8993      	ldrh	r3, [r2, #12]
    460a:	3b02      	subs	r3, #2
    460c:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    460e:	e7be      	b.n	458e <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    4610:	2501      	movs	r5, #1
    4612:	e7bc      	b.n	458e <read_type_cb+0x36>

00004614 <uuid_create>:
{
    4614:	b510      	push	{r4, lr}
	switch (buf->len) {
    4616:	898a      	ldrh	r2, [r1, #12]
    4618:	2a02      	cmp	r2, #2
{
    461a:	4604      	mov	r4, r0
	switch (buf->len) {
    461c:	d003      	beq.n	4626 <uuid_create+0x12>
    461e:	2a10      	cmp	r2, #16
    4620:	d00a      	beq.n	4638 <uuid_create+0x24>
	return false;
    4622:	2000      	movs	r0, #0
}
    4624:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    4626:	2300      	movs	r3, #0
    4628:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    462a:	f101 0008 	add.w	r0, r1, #8
    462e:	f00c f892 	bl	10756 <net_buf_simple_pull_le16>
    4632:	8060      	strh	r0, [r4, #2]
		return true;
    4634:	2001      	movs	r0, #1
    4636:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    4638:	2302      	movs	r3, #2
    463a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    463e:	6889      	ldr	r1, [r1, #8]
    4640:	f7fd fadc 	bl	1bfc <memcpy>
    4644:	e7f6      	b.n	4634 <uuid_create+0x20>
	...

00004648 <att_req_sent>:
{
    4648:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    464a:	2104      	movs	r1, #4
    464c:	f7ff fd8e 	bl	416c <bt_l2cap_le_lookup_tx_cid>
    4650:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4652:	30cc      	adds	r0, #204	; 0xcc
    4654:	f00d f8a7 	bl	117a6 <_impl_k_sem_give>
	if (att->req) {
    4658:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    465c:	b143      	cbz	r3, 4670 <att_req_sent+0x28>
    465e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    4662:	f247 5230 	movw	r2, #30000	; 0x7530
    4666:	4803      	ldr	r0, [pc, #12]	; (4674 <att_req_sent+0x2c>)
}
    4668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    466c:	f00d bbf6 	b.w	11e5c <k_delayed_work_submit_to_queue>
    4670:	bd10      	pop	{r4, pc}
    4672:	bf00      	nop
    4674:	20001728 	.word	0x20001728

00004678 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    4678:	6803      	ldr	r3, [r0, #0]
    467a:	7a5b      	ldrb	r3, [r3, #9]
    467c:	2b03      	cmp	r3, #3
    467e:	d10a      	bne.n	4696 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4680:	f3bf 8f5b 	dmb	ish
    4684:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    4688:	f3bf 8f5b 	dmb	ish
    468c:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    4690:	f000 0001 	and.w	r0, r0, #1
    4694:	4770      	bx	lr
    4696:	2001      	movs	r0, #1
}
    4698:	4770      	bx	lr

0000469a <att_prepare_write_req>:
    469a:	2006      	movs	r0, #6
    469c:	4770      	bx	lr

0000469e <att_chan_get>:
{
    469e:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    46a0:	7a43      	ldrb	r3, [r0, #9]
    46a2:	2b03      	cmp	r3, #3
    46a4:	d001      	beq.n	46aa <att_chan_get+0xc>
		return NULL;
    46a6:	2000      	movs	r0, #0
    46a8:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    46aa:	2104      	movs	r1, #4
    46ac:	f7ff fd6e 	bl	418c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    46b0:	2800      	cmp	r0, #0
    46b2:	d0f8      	beq.n	46a6 <att_chan_get+0x8>
    46b4:	f3bf 8f5b 	dmb	ish
    46b8:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    46bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    46c0:	075b      	lsls	r3, r3, #29
    46c2:	d4f0      	bmi.n	46a6 <att_chan_get+0x8>
}
    46c4:	bd08      	pop	{r3, pc}

000046c6 <att_pdu_sent>:
{
    46c6:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    46c8:	2104      	movs	r1, #4
    46ca:	f7ff fd4f 	bl	416c <bt_l2cap_le_lookup_tx_cid>
}
    46ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46d2:	30cc      	adds	r0, #204	; 0xcc
    46d4:	f00d b867 	b.w	117a6 <_impl_k_sem_give>

000046d8 <att_cfm_sent>:
{
    46d8:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    46da:	2104      	movs	r1, #4
    46dc:	f7ff fd46 	bl	416c <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    46e0:	f3bf 8f5b 	dmb	ish
    46e4:	f100 0394 	add.w	r3, r0, #148	; 0x94
    46e8:	e853 2f00 	ldrex	r2, [r3]
    46ec:	f022 0202 	bic.w	r2, r2, #2
    46f0:	e843 2100 	strex	r1, r2, [r3]
    46f4:	2900      	cmp	r1, #0
    46f6:	d1f7      	bne.n	46e8 <att_cfm_sent+0x10>
    46f8:	f3bf 8f5b 	dmb	ish
    46fc:	30cc      	adds	r0, #204	; 0xcc
}
    46fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4702:	f00d b850 	b.w	117a6 <_impl_k_sem_give>

00004706 <att_rsp_sent>:
{
    4706:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4708:	2104      	movs	r1, #4
    470a:	f7ff fd2f 	bl	416c <bt_l2cap_le_lookup_tx_cid>
    470e:	f3bf 8f5b 	dmb	ish
    4712:	f100 0394 	add.w	r3, r0, #148	; 0x94
    4716:	e853 2f00 	ldrex	r2, [r3]
    471a:	f022 0201 	bic.w	r2, r2, #1
    471e:	e843 2100 	strex	r1, r2, [r3]
    4722:	2900      	cmp	r1, #0
    4724:	d1f7      	bne.n	4716 <att_rsp_sent+0x10>
    4726:	f3bf 8f5b 	dmb	ish
    472a:	30cc      	adds	r0, #204	; 0xcc
}
    472c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4730:	f00d b839 	b.w	117a6 <_impl_k_sem_give>

00004734 <write_cb>:
{
    4734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4738:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    473a:	f8d1 8000 	ldr.w	r8, [r1]
    473e:	212a      	movs	r1, #42	; 0x2a
{
    4740:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4742:	f7ff fee9 	bl	4518 <check_perm.isra.5>
    4746:	4605      	mov	r5, r0
    4748:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    474a:	b9e0      	cbnz	r0, 4786 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    474c:	8a62      	ldrh	r2, [r4, #18]
    474e:	9001      	str	r0, [sp, #4]
    4750:	9200      	str	r2, [sp, #0]
    4752:	7c23      	ldrb	r3, [r4, #16]
    4754:	68b7      	ldr	r7, [r6, #8]
    4756:	68e2      	ldr	r2, [r4, #12]
    4758:	4631      	mov	r1, r6
    475a:	4640      	mov	r0, r8
    475c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    475e:	2800      	cmp	r0, #0
    4760:	db02      	blt.n	4768 <write_cb+0x34>
    4762:	7c23      	ldrb	r3, [r4, #16]
    4764:	4298      	cmp	r0, r3
    4766:	d00b      	beq.n	4780 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    4768:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    476c:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    476e:	bf9a      	itte	ls
    4770:	4240      	negls	r0, r0
    4772:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    4774:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    4776:	7520      	strb	r0, [r4, #20]
}
    4778:	4628      	mov	r0, r5
    477a:	b002      	add	sp, #8
    477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    4780:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    4782:	2501      	movs	r5, #1
    4784:	e7f8      	b.n	4778 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    4786:	2500      	movs	r5, #0
    4788:	e7f6      	b.n	4778 <write_cb+0x44>
	...

0000478c <att_send_req>:
{
    478c:	b570      	push	{r4, r5, r6, lr}
    478e:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    4790:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    4794:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    4798:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    479a:	4630      	mov	r0, r6
    479c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    47a0:	f00d f829 	bl	117f6 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    47a4:	4628      	mov	r0, r5
    47a6:	f7ff ff67 	bl	4678 <att_is_connected>
    47aa:	b928      	cbnz	r0, 47b8 <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    47ac:	4630      	mov	r0, r6
    47ae:	f00c fffa 	bl	117a6 <_impl_k_sem_give>
		return -ENOTCONN;
    47b2:	f06f 0038 	mvn.w	r0, #56	; 0x38
    47b6:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    47b8:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    47ba:	f106 0008 	add.w	r0, r6, #8
    47be:	f00b ffd2 	bl	10766 <net_buf_simple_headroom>
	state->len = buf->len;
    47c2:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    47c4:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    47c6:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    47c8:	6920      	ldr	r0, [r4, #16]
    47ca:	682d      	ldr	r5, [r5, #0]
    47cc:	f00b ff90 	bl	106f0 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    47d0:	6923      	ldr	r3, [r4, #16]
    47d2:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    47d4:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    47d6:	7818      	ldrb	r0, [r3, #0]
    47d8:	f7ff fd34 	bl	4244 <att_op_get_type>
    47dc:	3801      	subs	r0, #1
    47de:	b2c0      	uxtb	r0, r0
    47e0:	2804      	cmp	r0, #4
    47e2:	bf96      	itet	ls
    47e4:	4b05      	ldrls	r3, [pc, #20]	; (47fc <att_send_req+0x70>)
    47e6:	4b06      	ldrhi	r3, [pc, #24]	; (4800 <att_send_req+0x74>)
    47e8:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    47ec:	4632      	mov	r2, r6
    47ee:	4628      	mov	r0, r5
    47f0:	2104      	movs	r1, #4
    47f2:	f7ff fc27 	bl	4044 <bt_l2cap_send_cb>
	return 0;
    47f6:	2000      	movs	r0, #0
}
    47f8:	bd70      	pop	{r4, r5, r6, pc}
    47fa:	bf00      	nop
    47fc:	00012858 	.word	0x00012858
    4800:	000046c7 	.word	0x000046c7

00004804 <att_handle_rsp>:
{
    4804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4808:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    480a:	30a4      	adds	r0, #164	; 0xa4
{
    480c:	461e      	mov	r6, r3
    480e:	460f      	mov	r7, r1
    4810:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    4812:	f00d fabf 	bl	11d94 <k_delayed_work_cancel>
	if (!att->req) {
    4816:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    481a:	b1db      	cbz	r3, 4854 <att_handle_rsp+0x50>
	if (att->req->buf) {
    481c:	6918      	ldr	r0, [r3, #16]
    481e:	b128      	cbz	r0, 482c <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
    4820:	f00b ff38 	bl	10694 <net_buf_unref>
		att->req->buf = NULL;
    4824:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4828:	2200      	movs	r2, #0
    482a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    482c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    4830:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    4832:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    4836:	2500      	movs	r5, #0
    4838:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    483a:	463a      	mov	r2, r7
    483c:	9300      	str	r3, [sp, #0]
    483e:	4631      	mov	r1, r6
    4840:	4643      	mov	r3, r8
    4842:	47c8      	blx	r9
	if (!att->req->func) {
    4844:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    4848:	6843      	ldr	r3, [r0, #4]
    484a:	b90b      	cbnz	r3, 4850 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
    484c:	f7ff fd2e 	bl	42ac <att_req_destroy>
	att->req = NULL;
    4850:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    4854:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    4858:	b159      	cbz	r1, 4872 <att_handle_rsp+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    485a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    485e:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    4860:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4864:	4291      	cmp	r1, r2
	list->tail = node;
    4866:	bf08      	it	eq
    4868:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    486c:	4620      	mov	r0, r4
    486e:	f7ff ff8d 	bl	478c <att_send_req>
}
    4872:	2000      	movs	r0, #0
    4874:	b003      	add	sp, #12
    4876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000487a <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    487a:	898a      	ldrh	r2, [r1, #12]
    487c:	6889      	ldr	r1, [r1, #8]
    487e:	2300      	movs	r3, #0
    4880:	f7ff bfc0 	b.w	4804 <att_handle_rsp>

00004884 <att_handle_exec_write_rsp>:
    4884:	f7ff bff9 	b.w	487a <att_confirm>

00004888 <att_handle_prepare_write_rsp>:
    4888:	f7ff bff7 	b.w	487a <att_confirm>

0000488c <att_handle_write_rsp>:
    488c:	f7ff bff5 	b.w	487a <att_confirm>

00004890 <att_handle_read_mult_rsp>:
    4890:	f7ff bff3 	b.w	487a <att_confirm>

00004894 <att_handle_read_blob_rsp>:
    4894:	f7ff bff1 	b.w	487a <att_confirm>

00004898 <att_handle_read_rsp>:
    4898:	f7ff bfef 	b.w	487a <att_confirm>

0000489c <att_handle_read_type_rsp>:
    489c:	f7ff bfed 	b.w	487a <att_confirm>

000048a0 <att_handle_find_type_rsp>:
    48a0:	f7ff bfeb 	b.w	487a <att_confirm>

000048a4 <att_handle_find_info_rsp>:
    48a4:	f7ff bfe9 	b.w	487a <att_confirm>

000048a8 <att_mtu_rsp>:
{
    48a8:	b410      	push	{r4}
    48aa:	460a      	mov	r2, r1
	if (!att) {
    48ac:	4603      	mov	r3, r0
    48ae:	b180      	cbz	r0, 48d2 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    48b0:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    48b2:	880c      	ldrh	r4, [r1, #0]
    48b4:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    48b6:	bf83      	ittte	hi
    48b8:	2417      	movhi	r4, #23
    48ba:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    48bc:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    48c0:	2200      	movls	r2, #0
    48c2:	bf99      	ittee	ls
    48c4:	2304      	movls	r3, #4
    48c6:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    48c8:	2300      	movhi	r3, #0
    48ca:	8992      	ldrhhi	r2, [r2, #12]
}
    48cc:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    48ce:	f7ff bf99 	b.w	4804 <att_handle_rsp>
}
    48d2:	bc10      	pop	{r4}
    48d4:	4770      	bx	lr

000048d6 <att_error_rsp>:
{
    48d6:	b430      	push	{r4, r5}
	if (!att->req) {
    48d8:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    48dc:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    48de:	b16a      	cbz	r2, 48fc <att_error_rsp+0x26>
	if (att->req->buf) {
    48e0:	6913      	ldr	r3, [r2, #16]
    48e2:	b12b      	cbz	r3, 48f0 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    48e4:	8995      	ldrh	r5, [r2, #12]
    48e6:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    48e8:	89d2      	ldrh	r2, [r2, #14]
    48ea:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    48ec:	4429      	add	r1, r5
    48ee:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    48f0:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    48f2:	2200      	movs	r2, #0
    48f4:	4611      	mov	r1, r2
}
    48f6:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    48f8:	f7ff bf84 	b.w	4804 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    48fc:	230e      	movs	r3, #14
    48fe:	e7f8      	b.n	48f2 <att_error_rsp+0x1c>

00004900 <att_reset>:
{
    4900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4902:	f100 0394 	add.w	r3, r0, #148	; 0x94
    4906:	4605      	mov	r5, r0
    4908:	f3bf 8f5b 	dmb	ish
    490c:	e853 2f00 	ldrex	r2, [r3]
    4910:	f042 0204 	orr.w	r2, r2, #4
    4914:	e843 2100 	strex	r1, r2, [r3]
    4918:	2900      	cmp	r1, #0
    491a:	d1f7      	bne.n	490c <att_reset+0xc>
    491c:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    4920:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    4924:	4620      	mov	r0, r4
    4926:	f00c ff3e 	bl	117a6 <_impl_k_sem_give>
    492a:	4620      	mov	r0, r4
    492c:	f00c ff3b 	bl	117a6 <_impl_k_sem_give>
    4930:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4934:	b98c      	cbnz	r4, 495a <att_reset+0x5a>
	if (!att->req) {
    4936:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    493a:	2200      	movs	r2, #0
    493c:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    4940:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    4944:	b90b      	cbnz	r3, 494a <att_reset+0x4a>
}
    4946:	b003      	add	sp, #12
    4948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    494a:	230e      	movs	r3, #14
    494c:	4611      	mov	r1, r2
    494e:	4628      	mov	r0, r5
}
    4950:	b003      	add	sp, #12
    4952:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    4956:	f7ff bf55 	b.w	4804 <att_handle_rsp>
	return node->next;
    495a:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    495c:	6867      	ldr	r7, [r4, #4]
    495e:	b12f      	cbz	r7, 496c <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    4960:	2300      	movs	r3, #0
    4962:	9400      	str	r4, [sp, #0]
    4964:	461a      	mov	r2, r3
    4966:	210e      	movs	r1, #14
    4968:	4618      	mov	r0, r3
    496a:	47b8      	blx	r7
		att_req_destroy(req);
    496c:	4620      	mov	r0, r4
    496e:	f7ff fc9d 	bl	42ac <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4972:	2e00      	cmp	r6, #0
    4974:	d0df      	beq.n	4936 <att_reset+0x36>
    4976:	4634      	mov	r4, r6
    4978:	6836      	ldr	r6, [r6, #0]
    497a:	e7ef      	b.n	495c <att_reset+0x5c>

0000497c <bt_att_disconnected>:
{
    497c:	b510      	push	{r4, lr}
    497e:	4604      	mov	r4, r0
	att_reset(att);
    4980:	f7ff ffbe 	bl	4900 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    4984:	6820      	ldr	r0, [r4, #0]
}
    4986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    498a:	f001 b86f 	b.w	5a6c <bt_gatt_disconnected>

0000498e <att_timeout>:
{
    498e:	b510      	push	{r4, lr}
    4990:	4604      	mov	r4, r0
	att_reset(att);
    4992:	38a4      	subs	r0, #164	; 0xa4
    4994:	f7ff ffb4 	bl	4900 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    4998:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    499c:	f001 f866 	bl	5a6c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    49a0:	2300      	movs	r3, #0
    49a2:	f844 3ca4 	str.w	r3, [r4, #-164]
    49a6:	bd10      	pop	{r4, pc}

000049a8 <read_cb>:
{
    49a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    49ac:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    49ae:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    49b0:	f8d1 9000 	ldr.w	r9, [r1]
{
    49b4:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    49b6:	3008      	adds	r0, #8
    49b8:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    49ba:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    49be:	f00b fe9b 	bl	106f8 <net_buf_simple_add>
	data->err = 0x00;
    49c2:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    49c4:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    49c6:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    49c8:	2115      	movs	r1, #21
    49ca:	4630      	mov	r0, r6
    49cc:	f7ff fda4 	bl	4518 <check_perm.isra.5>
    49d0:	4605      	mov	r5, r0
    49d2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    49d4:	bb08      	cbnz	r0, 4a1a <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    49d6:	68a1      	ldr	r1, [r4, #8]
    49d8:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    49dc:	898a      	ldrh	r2, [r1, #12]
    49de:	6889      	ldr	r1, [r1, #8]
    49e0:	88a0      	ldrh	r0, [r4, #4]
    49e2:	9000      	str	r0, [sp, #0]
    49e4:	1a9b      	subs	r3, r3, r2
    49e6:	6877      	ldr	r7, [r6, #4]
    49e8:	440a      	add	r2, r1
    49ea:	b29b      	uxth	r3, r3
    49ec:	4631      	mov	r1, r6
    49ee:	4640      	mov	r0, r8
    49f0:	47b8      	blx	r7
	if (read < 0) {
    49f2:	1e01      	subs	r1, r0, #0
    49f4:	da0b      	bge.n	4a0e <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    49f6:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    49fa:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    49fc:	bf9a      	itte	ls
    49fe:	4249      	negls	r1, r1
    4a00:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    4a02:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    4a04:	7421      	strb	r1, [r4, #16]
}
    4a06:	4628      	mov	r0, r5
    4a08:	b003      	add	sp, #12
    4a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    4a0e:	68a0      	ldr	r0, [r4, #8]
    4a10:	3008      	adds	r0, #8
    4a12:	f00b fe71 	bl	106f8 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    4a16:	2501      	movs	r5, #1
    4a18:	e7f5      	b.n	4a06 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    4a1a:	463d      	mov	r5, r7
    4a1c:	e7f3      	b.n	4a06 <read_cb+0x5e>

00004a1e <bt_att_create_pdu>:
{
    4a1e:	b538      	push	{r3, r4, r5, lr}
    4a20:	460d      	mov	r5, r1
    4a22:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    4a24:	f7ff fe3b 	bl	469e <att_chan_get>
	if (!att) {
    4a28:	b180      	cbz	r0, 4a4c <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    4a2a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    4a2e:	3401      	adds	r4, #1
    4a30:	429c      	cmp	r4, r3
    4a32:	d80b      	bhi.n	4a4c <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
    4a34:	2100      	movs	r1, #0
    4a36:	4608      	mov	r0, r1
    4a38:	f7ff fb01 	bl	403e <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4a3c:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    4a3e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4a40:	3008      	adds	r0, #8
    4a42:	f00b fe59 	bl	106f8 <net_buf_simple_add>
	hdr->code = op;
    4a46:	7005      	strb	r5, [r0, #0]
}
    4a48:	4620      	mov	r0, r4
    4a4a:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    4a4c:	2400      	movs	r4, #0
    4a4e:	e7fb      	b.n	4a48 <bt_att_create_pdu+0x2a>

00004a50 <att_indicate>:
{
    4a50:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4a52:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    4a54:	f101 0008 	add.w	r0, r1, #8
    4a58:	f00b fe7d 	bl	10756 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    4a5c:	2200      	movs	r2, #0
    4a5e:	211e      	movs	r1, #30
    4a60:	4620      	mov	r0, r4
    4a62:	f7ff ffdc 	bl	4a1e <bt_att_create_pdu>
	if (!buf) {
    4a66:	4602      	mov	r2, r0
    4a68:	b120      	cbz	r0, 4a74 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    4a6a:	4b03      	ldr	r3, [pc, #12]	; (4a78 <att_indicate+0x28>)
    4a6c:	2104      	movs	r1, #4
    4a6e:	4620      	mov	r0, r4
    4a70:	f7ff fae8 	bl	4044 <bt_l2cap_send_cb>
}
    4a74:	2000      	movs	r0, #0
    4a76:	bd10      	pop	{r4, pc}
    4a78:	000046d9 	.word	0x000046d9

00004a7c <att_mtu_req>:
{
    4a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    4a80:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    4a82:	881b      	ldrh	r3, [r3, #0]
    4a84:	2b16      	cmp	r3, #22
{
    4a86:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    4a88:	d91c      	bls.n	4ac4 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    4a8a:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    4a8e:	2202      	movs	r2, #2
    4a90:	2103      	movs	r1, #3
    4a92:	4640      	mov	r0, r8
    4a94:	f7ff ffc3 	bl	4a1e <bt_att_create_pdu>
	if (!pdu) {
    4a98:	4607      	mov	r7, r0
    4a9a:	b1b0      	cbz	r0, 4aca <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    4a9c:	2102      	movs	r1, #2
    4a9e:	3008      	adds	r0, #8
    4aa0:	f00b fe2a 	bl	106f8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    4aa4:	2617      	movs	r6, #23
    4aa6:	2400      	movs	r4, #0
    4aa8:	7006      	strb	r6, [r0, #0]
    4aaa:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    4aac:	4b08      	ldr	r3, [pc, #32]	; (4ad0 <att_mtu_req+0x54>)
    4aae:	4640      	mov	r0, r8
    4ab0:	463a      	mov	r2, r7
    4ab2:	2104      	movs	r1, #4
    4ab4:	f7ff fac6 	bl	4044 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    4ab8:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    4aba:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    4abe:	4620      	mov	r0, r4
    4ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    4ac4:	2004      	movs	r0, #4
    4ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    4aca:	200e      	movs	r0, #14
}
    4acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ad0:	00004707 	.word	0x00004707

00004ad4 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ad8:	4688      	mov	r8, r1
    4ada:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4adc:	2101      	movs	r1, #1
    4ade:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4ae0:	4605      	mov	r5, r0
    4ae2:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4ae4:	f7ff ff9b 	bl	4a1e <bt_att_create_pdu>
	if (!buf) {
    4ae8:	4604      	mov	r4, r0
    4aea:	b180      	cbz	r0, 4b0e <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4aec:	2104      	movs	r1, #4
    4aee:	3008      	adds	r0, #8
    4af0:	f00b fe02 	bl	106f8 <net_buf_simple_add>
	rsp->request = req;
    4af4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    4af8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    4afa:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    4afe:	4622      	mov	r2, r4
    4b00:	4628      	mov	r0, r5
    4b02:	4b04      	ldr	r3, [pc, #16]	; (4b14 <send_err_rsp.part.11+0x40>)
    4b04:	2104      	movs	r1, #4
}
    4b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    4b0a:	f7ff ba9b 	b.w	4044 <bt_l2cap_send_cb>
    4b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b12:	bf00      	nop
    4b14:	00004707 	.word	0x00004707

00004b18 <bt_att_recv>:
{
    4b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    4b1c:	898b      	ldrh	r3, [r1, #12]
{
    4b1e:	4604      	mov	r4, r0
    4b20:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    4b22:	2b00      	cmp	r3, #0
    4b24:	d05e      	beq.n	4be4 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
    4b26:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4b28:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    4b2a:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    4b2e:	f00b fe02 	bl	10736 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    4b32:	4a2d      	ldr	r2, [pc, #180]	; (4be8 <bt_att_recv+0xd0>)
    4b34:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4b36:	2300      	movs	r3, #0
    4b38:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    4b3a:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
    4b3e:	45ae      	cmp	lr, r5
    4b40:	ea4f 00c3 	mov.w	r0, r3, lsl #3
    4b44:	d118      	bne.n	4b78 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    4b46:	4402      	add	r2, r0
    4b48:	7895      	ldrb	r5, [r2, #2]
    4b4a:	2d01      	cmp	r5, #1
    4b4c:	d024      	beq.n	4b98 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    4b4e:	2d05      	cmp	r5, #5
    4b50:	d133      	bne.n	4bba <bt_att_recv+0xa2>
    4b52:	f3bf 8f5b 	dmb	ish
    4b56:	f104 0294 	add.w	r2, r4, #148	; 0x94
    4b5a:	e852 3f00 	ldrex	r3, [r2]
    4b5e:	f043 0e02 	orr.w	lr, r3, #2
    4b62:	e842 ec00 	strex	ip, lr, [r2]
    4b66:	f1bc 0f00 	cmp.w	ip, #0
    4b6a:	d1f6      	bne.n	4b5a <bt_att_recv+0x42>
    4b6c:	f3bf 8f5b 	dmb	ish
    4b70:	079b      	lsls	r3, r3, #30
    4b72:	d522      	bpl.n	4bba <bt_att_recv+0xa2>
    4b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4b78:	3301      	adds	r3, #1
    4b7a:	2b1b      	cmp	r3, #27
    4b7c:	d1dd      	bne.n	4b3a <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    4b7e:	4628      	mov	r0, r5
    4b80:	f7ff fb60 	bl	4244 <att_op_get_type>
    4b84:	b370      	cbz	r0, 4be4 <bt_att_recv+0xcc>
	if (!req) {
    4b86:	b36d      	cbz	r5, 4be4 <bt_att_recv+0xcc>
    4b88:	2306      	movs	r3, #6
    4b8a:	2200      	movs	r2, #0
    4b8c:	4629      	mov	r1, r5
    4b8e:	6820      	ldr	r0, [r4, #0]
}
    4b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4b94:	f7ff bf9e 	b.w	4ad4 <send_err_rsp.part.11>
    4b98:	f104 0294 	add.w	r2, r4, #148	; 0x94
    4b9c:	f3bf 8f5b 	dmb	ish
    4ba0:	e852 3f00 	ldrex	r3, [r2]
    4ba4:	f043 0e01 	orr.w	lr, r3, #1
    4ba8:	e842 ec00 	strex	ip, lr, [r2]
    4bac:	f1bc 0f00 	cmp.w	ip, #0
    4bb0:	d1f6      	bne.n	4ba0 <bt_att_recv+0x88>
    4bb2:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    4bb6:	07da      	lsls	r2, r3, #31
    4bb8:	d414      	bmi.n	4be4 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
    4bba:	180b      	adds	r3, r1, r0
    4bbc:	89b1      	ldrh	r1, [r6, #12]
    4bbe:	785a      	ldrb	r2, [r3, #1]
    4bc0:	4291      	cmp	r1, r2
    4bc2:	d30d      	bcc.n	4be0 <bt_att_recv+0xc8>
		err = handler->func(att, buf);
    4bc4:	685b      	ldr	r3, [r3, #4]
    4bc6:	4631      	mov	r1, r6
    4bc8:	4620      	mov	r0, r4
    4bca:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    4bcc:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    4bce:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    4bd0:	d108      	bne.n	4be4 <bt_att_recv+0xcc>
    4bd2:	b138      	cbz	r0, 4be4 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    4bd4:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    4bd6:	b129      	cbz	r1, 4be4 <bt_att_recv+0xcc>
    4bd8:	2200      	movs	r2, #0
    4bda:	e7d8      	b.n	4b8e <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
    4bdc:	2304      	movs	r3, #4
    4bde:	e7f9      	b.n	4bd4 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
    4be0:	2d01      	cmp	r5, #1
    4be2:	d0fb      	beq.n	4bdc <bt_att_recv+0xc4>
    4be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4be8:	0001286c 	.word	0x0001286c

00004bec <att_read_group_req>:
{
    4bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4bf0:	898b      	ldrh	r3, [r1, #12]
    4bf2:	2b06      	cmp	r3, #6
{
    4bf4:	b08d      	sub	sp, #52	; 0x34
    4bf6:	4680      	mov	r8, r0
    4bf8:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4bfa:	d001      	beq.n	4c00 <att_read_group_req+0x14>
    4bfc:	2b14      	cmp	r3, #20
    4bfe:	d168      	bne.n	4cd2 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    4c00:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    4c02:	2104      	movs	r1, #4
	req = (void *)buf->data;
    4c04:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    4c08:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    4c0c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4c0e:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    4c10:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    4c12:	f00b fd90 	bl	10736 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    4c16:	4621      	mov	r1, r4
    4c18:	4638      	mov	r0, r7
    4c1a:	f7ff fcfb 	bl	4614 <uuid_create>
    4c1e:	2800      	cmp	r0, #0
    4c20:	d059      	beq.n	4cd6 <att_read_group_req+0xea>
	if (!start || !end) {
    4c22:	2d00      	cmp	r5, #0
    4c24:	d05a      	beq.n	4cdc <att_read_group_req+0xf0>
    4c26:	2400      	movs	r4, #0
    4c28:	2e00      	cmp	r6, #0
    4c2a:	d056      	beq.n	4cda <att_read_group_req+0xee>
	if (start > end) {
    4c2c:	42b5      	cmp	r5, r6
    4c2e:	d855      	bhi.n	4cdc <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    4c30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4c34:	4669      	mov	r1, sp
    4c36:	4638      	mov	r0, r7
    4c38:	f88d 4000 	strb.w	r4, [sp]
    4c3c:	f8ad 3002 	strh.w	r3, [sp, #2]
    4c40:	f7fd f8b0 	bl	1da4 <bt_uuid_cmp>
    4c44:	bb38      	cbnz	r0, 4c96 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    4c46:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    4c4a:	2214      	movs	r2, #20
    4c4c:	2100      	movs	r1, #0
    4c4e:	a807      	add	r0, sp, #28
    4c50:	f7fd f800 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    4c54:	2201      	movs	r2, #1
    4c56:	2111      	movs	r1, #17
    4c58:	4648      	mov	r0, r9
    4c5a:	f7ff fee0 	bl	4a1e <bt_att_create_pdu>
    4c5e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    4c60:	2800      	cmp	r0, #0
    4c62:	d038      	beq.n	4cd6 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4c64:	2101      	movs	r1, #1
    4c66:	3008      	adds	r0, #8
	data.uuid = uuid;
    4c68:	9708      	str	r7, [sp, #32]
	data.att = att;
    4c6a:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4c6e:	f00b fd43 	bl	106f8 <net_buf_simple_add>
	data.rsp->len = 0;
    4c72:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4c74:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4c76:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    4c78:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4c7a:	4a1c      	ldr	r2, [pc, #112]	; (4cec <att_read_group_req+0x100>)
	data.group = NULL;
    4c7c:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4c7e:	4631      	mov	r1, r6
    4c80:	4628      	mov	r0, r5
    4c82:	f000 fe1f 	bl	58c4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    4c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4c88:	781c      	ldrb	r4, [r3, #0]
    4c8a:	b9d4      	cbnz	r4, 4cc2 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    4c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    4c8e:	f00b fd01 	bl	10694 <net_buf_unref>
    4c92:	230a      	movs	r3, #10
    4c94:	e00c      	b.n	4cb0 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    4c96:	f642 0301 	movw	r3, #10241	; 0x2801
    4c9a:	a901      	add	r1, sp, #4
    4c9c:	4638      	mov	r0, r7
    4c9e:	f88d 4004 	strb.w	r4, [sp, #4]
    4ca2:	f8ad 3006 	strh.w	r3, [sp, #6]
    4ca6:	f7fd f87d 	bl	1da4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    4caa:	2800      	cmp	r0, #0
    4cac:	d0cb      	beq.n	4c46 <att_read_group_req+0x5a>
    4cae:	2310      	movs	r3, #16
    4cb0:	462a      	mov	r2, r5
    4cb2:	2110      	movs	r1, #16
    4cb4:	4648      	mov	r0, r9
    4cb6:	f7ff ff0d 	bl	4ad4 <send_err_rsp.part.11>
}
    4cba:	4620      	mov	r0, r4
    4cbc:	b00d      	add	sp, #52	; 0x34
    4cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4cc2:	4b0b      	ldr	r3, [pc, #44]	; (4cf0 <att_read_group_req+0x104>)
    4cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4cc6:	2104      	movs	r1, #4
    4cc8:	4648      	mov	r0, r9
    4cca:	f7ff f9bb 	bl	4044 <bt_l2cap_send_cb>
		return 0;
    4cce:	2400      	movs	r4, #0
    4cd0:	e7f3      	b.n	4cba <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    4cd2:	2404      	movs	r4, #4
    4cd4:	e7f1      	b.n	4cba <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    4cd6:	240e      	movs	r4, #14
    4cd8:	e7ef      	b.n	4cba <att_read_group_req+0xce>
			*err = 0;
    4cda:	4635      	mov	r5, r6
    4cdc:	2301      	movs	r3, #1
    4cde:	462a      	mov	r2, r5
    4ce0:	2110      	movs	r1, #16
    4ce2:	4648      	mov	r0, r9
    4ce4:	f7ff fef6 	bl	4ad4 <send_err_rsp.part.11>
    4ce8:	e7f1      	b.n	4cce <att_read_group_req+0xe2>
    4cea:	bf00      	nop
    4cec:	000042dd 	.word	0x000042dd
    4cf0:	00004707 	.word	0x00004707

00004cf4 <att_read_mult_req>:
{
    4cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4cf8:	6804      	ldr	r4, [r0, #0]
{
    4cfa:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    4cfc:	2214      	movs	r2, #20
{
    4cfe:	4606      	mov	r6, r0
    4d00:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    4d02:	a801      	add	r0, sp, #4
    4d04:	2100      	movs	r1, #0
    4d06:	f7fc ffa5 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    4d0a:	2200      	movs	r2, #0
    4d0c:	210f      	movs	r1, #15
    4d0e:	4620      	mov	r0, r4
    4d10:	f7ff fe85 	bl	4a1e <bt_att_create_pdu>
    4d14:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    4d16:	b368      	cbz	r0, 4d74 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d18:	f8df 9060 	ldr.w	r9, [pc, #96]	; 4d7c <att_read_mult_req+0x88>
	data.att = att;
    4d1c:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    4d1e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    4d22:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    4d26:	89ab      	ldrh	r3, [r5, #12]
    4d28:	2b01      	cmp	r3, #1
    4d2a:	d806      	bhi.n	4d3a <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4d2c:	4b12      	ldr	r3, [pc, #72]	; (4d78 <att_read_mult_req+0x84>)
    4d2e:	9a03      	ldr	r2, [sp, #12]
    4d30:	2104      	movs	r1, #4
    4d32:	4620      	mov	r0, r4
    4d34:	f7ff f986 	bl	4044 <bt_l2cap_send_cb>
    4d38:	e018      	b.n	4d6c <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    4d3a:	4638      	mov	r0, r7
    4d3c:	f00b fd0b 	bl	10756 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d40:	ab01      	add	r3, sp, #4
    4d42:	464a      	mov	r2, r9
    4d44:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    4d46:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    4d48:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4d4c:	f000 fdba 	bl	58c4 <bt_gatt_foreach_attr>
		if (data.err) {
    4d50:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4d54:	2b00      	cmp	r3, #0
    4d56:	d0e6      	beq.n	4d26 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    4d58:	9803      	ldr	r0, [sp, #12]
    4d5a:	f00b fc9b 	bl	10694 <net_buf_unref>
    4d5e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4d62:	4632      	mov	r2, r6
    4d64:	210e      	movs	r1, #14
    4d66:	4620      	mov	r0, r4
    4d68:	f7ff feb4 	bl	4ad4 <send_err_rsp.part.11>
	return 0;
    4d6c:	2000      	movs	r0, #0
}
    4d6e:	b007      	add	sp, #28
    4d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    4d74:	200e      	movs	r0, #14
    4d76:	e7fa      	b.n	4d6e <att_read_mult_req+0x7a>
    4d78:	00004707 	.word	0x00004707
    4d7c:	000049a9 	.word	0x000049a9

00004d80 <att_read_rsp>:
{
    4d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d84:	4607      	mov	r7, r0
    4d86:	b086      	sub	sp, #24
    4d88:	460c      	mov	r4, r1
    4d8a:	4690      	mov	r8, r2
	if (!handle) {
    4d8c:	461d      	mov	r5, r3
    4d8e:	b3a3      	cbz	r3, 4dfa <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    4d90:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    4d92:	2214      	movs	r2, #20
    4d94:	2100      	movs	r1, #0
    4d96:	a801      	add	r0, sp, #4
    4d98:	f7fc ff5c 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    4d9c:	2200      	movs	r2, #0
    4d9e:	4641      	mov	r1, r8
    4da0:	4630      	mov	r0, r6
    4da2:	f7ff fe3c 	bl	4a1e <bt_att_create_pdu>
    4da6:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    4da8:	b348      	cbz	r0, 4dfe <att_read_rsp+0x7e>
	data.offset = offset;
    4daa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    4dae:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    4db2:	2301      	movs	r3, #1
    4db4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4db8:	4a12      	ldr	r2, [pc, #72]	; (4e04 <att_read_rsp+0x84>)
	data.att = att;
    4dba:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4dbc:	ab01      	add	r3, sp, #4
    4dbe:	4629      	mov	r1, r5
    4dc0:	4628      	mov	r0, r5
    4dc2:	f000 fd7f 	bl	58c4 <bt_gatt_foreach_attr>
	if (data.err) {
    4dc6:	f89d 7014 	ldrb.w	r7, [sp, #20]
    4dca:	b17f      	cbz	r7, 4dec <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    4dcc:	9803      	ldr	r0, [sp, #12]
    4dce:	f00b fc61 	bl	10694 <net_buf_unref>
	if (!req) {
    4dd2:	b13c      	cbz	r4, 4de4 <att_read_rsp+0x64>
    4dd4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4dd8:	462a      	mov	r2, r5
    4dda:	4621      	mov	r1, r4
    4ddc:	4630      	mov	r0, r6
    4dde:	f7ff fe79 	bl	4ad4 <send_err_rsp.part.11>
		return 0;
    4de2:	2400      	movs	r4, #0
}
    4de4:	4620      	mov	r0, r4
    4de6:	b006      	add	sp, #24
    4de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4dec:	4b06      	ldr	r3, [pc, #24]	; (4e08 <att_read_rsp+0x88>)
    4dee:	9a03      	ldr	r2, [sp, #12]
    4df0:	2104      	movs	r1, #4
    4df2:	4630      	mov	r0, r6
    4df4:	f7ff f926 	bl	4044 <bt_l2cap_send_cb>
    4df8:	e7f3      	b.n	4de2 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    4dfa:	2401      	movs	r4, #1
    4dfc:	e7f2      	b.n	4de4 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    4dfe:	240e      	movs	r4, #14
    4e00:	e7f0      	b.n	4de4 <att_read_rsp+0x64>
    4e02:	bf00      	nop
    4e04:	000049a9 	.word	0x000049a9
    4e08:	00004707 	.word	0x00004707

00004e0c <att_read_blob_req>:
{
    4e0c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    4e0e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    4e10:	8813      	ldrh	r3, [r2, #0]
    4e12:	8852      	ldrh	r2, [r2, #2]
    4e14:	9200      	str	r2, [sp, #0]
    4e16:	210c      	movs	r1, #12
    4e18:	220d      	movs	r2, #13
    4e1a:	f7ff ffb1 	bl	4d80 <att_read_rsp>
}
    4e1e:	b003      	add	sp, #12
    4e20:	f85d fb04 	ldr.w	pc, [sp], #4

00004e24 <att_read_req>:
{
    4e24:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    4e26:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    4e28:	2200      	movs	r2, #0
    4e2a:	881b      	ldrh	r3, [r3, #0]
    4e2c:	9200      	str	r2, [sp, #0]
    4e2e:	210a      	movs	r1, #10
    4e30:	220b      	movs	r2, #11
    4e32:	f7ff ffa5 	bl	4d80 <att_read_rsp>
}
    4e36:	b003      	add	sp, #12
    4e38:	f85d fb04 	ldr.w	pc, [sp], #4

00004e3c <att_read_type_req>:
{
    4e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4e40:	898b      	ldrh	r3, [r1, #12]
    4e42:	2b06      	cmp	r3, #6
{
    4e44:	b08d      	sub	sp, #52	; 0x34
    4e46:	4607      	mov	r7, r0
    4e48:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4e4a:	d001      	beq.n	4e50 <att_read_type_req+0x14>
    4e4c:	2b14      	cmp	r3, #20
    4e4e:	d152      	bne.n	4ef6 <att_read_type_req+0xba>
	req = (void *)buf->data;
    4e50:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    4e52:	2104      	movs	r1, #4
	req = (void *)buf->data;
    4e54:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    4e58:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    4e5c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4e5e:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    4e60:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    4e64:	f00b fc67 	bl	10736 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    4e68:	4631      	mov	r1, r6
    4e6a:	4640      	mov	r0, r8
    4e6c:	f7ff fbd2 	bl	4614 <uuid_create>
    4e70:	b198      	cbz	r0, 4e9a <att_read_type_req+0x5e>
	if (!start || !end) {
    4e72:	2d00      	cmp	r5, #0
    4e74:	d042      	beq.n	4efc <att_read_type_req+0xc0>
    4e76:	2c00      	cmp	r4, #0
    4e78:	d03f      	beq.n	4efa <att_read_type_req+0xbe>
	if (start > end) {
    4e7a:	42a5      	cmp	r5, r4
    4e7c:	d83e      	bhi.n	4efc <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    4e7e:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    4e80:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    4e82:	2100      	movs	r1, #0
    4e84:	eb0d 0002 	add.w	r0, sp, r2
    4e88:	f7fc fee4 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    4e8c:	2201      	movs	r2, #1
    4e8e:	2109      	movs	r1, #9
    4e90:	4630      	mov	r0, r6
    4e92:	f7ff fdc4 	bl	4a1e <bt_att_create_pdu>
    4e96:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    4e98:	b908      	cbnz	r0, 4e9e <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    4e9a:	240e      	movs	r4, #14
    4e9c:	e027      	b.n	4eee <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4e9e:	2101      	movs	r1, #1
    4ea0:	3008      	adds	r0, #8
	data.att = att;
    4ea2:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    4ea4:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4ea8:	f00b fc26 	bl	106f8 <net_buf_simple_add>
	data.rsp->len = 0;
    4eac:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4eae:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4eb0:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4eb2:	4621      	mov	r1, r4
	data.rsp->len = 0;
    4eb4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4eb6:	4a14      	ldr	r2, [pc, #80]	; (4f08 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4eb8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4ebc:	4628      	mov	r0, r5
    4ebe:	ab06      	add	r3, sp, #24
    4ec0:	f000 fd00 	bl	58c4 <bt_gatt_foreach_attr>
	if (data.err) {
    4ec4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    4ec8:	b15c      	cbz	r4, 4ee2 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    4eca:	9808      	ldr	r0, [sp, #32]
    4ecc:	f00b fbe2 	bl	10694 <net_buf_unref>
    4ed0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    4ed4:	462a      	mov	r2, r5
    4ed6:	2108      	movs	r1, #8
    4ed8:	4630      	mov	r0, r6
    4eda:	f7ff fdfb 	bl	4ad4 <send_err_rsp.part.11>
		return 0;
    4ede:	2400      	movs	r4, #0
    4ee0:	e005      	b.n	4eee <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4ee2:	4b0a      	ldr	r3, [pc, #40]	; (4f0c <att_read_type_req+0xd0>)
    4ee4:	9a08      	ldr	r2, [sp, #32]
    4ee6:	2104      	movs	r1, #4
    4ee8:	4630      	mov	r0, r6
    4eea:	f7ff f8ab 	bl	4044 <bt_l2cap_send_cb>
}
    4eee:	4620      	mov	r0, r4
    4ef0:	b00d      	add	sp, #52	; 0x34
    4ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    4ef6:	2404      	movs	r4, #4
    4ef8:	e7f9      	b.n	4eee <att_read_type_req+0xb2>
			*err = 0;
    4efa:	4625      	mov	r5, r4
    4efc:	2301      	movs	r3, #1
    4efe:	462a      	mov	r2, r5
    4f00:	2108      	movs	r1, #8
    4f02:	4648      	mov	r0, r9
    4f04:	e7e9      	b.n	4eda <att_read_type_req+0x9e>
    4f06:	bf00      	nop
    4f08:	00004559 	.word	0x00004559
    4f0c:	00004707 	.word	0x00004707

00004f10 <att_find_type_req>:
{
    4f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4f14:	f8d0 9000 	ldr.w	r9, [r0]
{
    4f18:	4680      	mov	r8, r0
	req = (void *)buf->data;
    4f1a:	4608      	mov	r0, r1
{
    4f1c:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    4f1e:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    4f22:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    4f24:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    4f26:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4f28:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    4f2a:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    4f2c:	f00b fc03 	bl	10736 <net_buf_simple_pull>
    4f30:	4682      	mov	sl, r0
	if (!start || !end) {
    4f32:	2d00      	cmp	r5, #0
    4f34:	d057      	beq.n	4fe6 <att_find_type_req+0xd6>
    4f36:	2400      	movs	r4, #0
    4f38:	2f00      	cmp	r7, #0
    4f3a:	d053      	beq.n	4fe4 <att_find_type_req+0xd4>
	if (start > end) {
    4f3c:	42bd      	cmp	r5, r7
    4f3e:	d852      	bhi.n	4fe6 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    4f40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4f44:	a902      	add	r1, sp, #8
    4f46:	a801      	add	r0, sp, #4
    4f48:	f8ad 6006 	strh.w	r6, [sp, #6]
    4f4c:	f88d 4004 	strb.w	r4, [sp, #4]
    4f50:	f88d 4008 	strb.w	r4, [sp, #8]
    4f54:	f8ad 300a 	strh.w	r3, [sp, #10]
    4f58:	f7fc ff24 	bl	1da4 <bt_uuid_cmp>
    4f5c:	4606      	mov	r6, r0
    4f5e:	b148      	cbz	r0, 4f74 <att_find_type_req+0x64>
    4f60:	230a      	movs	r3, #10
    4f62:	462a      	mov	r2, r5
    4f64:	2106      	movs	r1, #6
    4f66:	4648      	mov	r0, r9
    4f68:	f7ff fdb4 	bl	4ad4 <send_err_rsp.part.11>
}
    4f6c:	4620      	mov	r0, r4
    4f6e:	b009      	add	sp, #36	; 0x24
    4f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    4f74:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    4f78:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    4f7c:	2214      	movs	r2, #20
    4f7e:	4631      	mov	r1, r6
    4f80:	a803      	add	r0, sp, #12
    4f82:	f7fc fe67 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    4f86:	4632      	mov	r2, r6
    4f88:	2107      	movs	r1, #7
    4f8a:	4648      	mov	r0, r9
    4f8c:	f7ff fd47 	bl	4a1e <bt_att_create_pdu>
    4f90:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    4f92:	b328      	cbz	r0, 4fe0 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4f94:	230a      	movs	r3, #10
    4f96:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4f9a:	4a14      	ldr	r2, [pc, #80]	; (4fec <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    4f9c:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4fa0:	ab03      	add	r3, sp, #12
    4fa2:	4639      	mov	r1, r7
    4fa4:	4628      	mov	r0, r5
	data.att = att;
    4fa6:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    4faa:	9605      	str	r6, [sp, #20]
	data.value = value;
    4fac:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4fb0:	f000 fc88 	bl	58c4 <bt_gatt_foreach_attr>
	if (data.err) {
    4fb4:	f89d 401d 	ldrb.w	r4, [sp, #29]
    4fb8:	b15c      	cbz	r4, 4fd2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    4fba:	9804      	ldr	r0, [sp, #16]
    4fbc:	f00b fb6a 	bl	10694 <net_buf_unref>
    4fc0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    4fc4:	462a      	mov	r2, r5
    4fc6:	2106      	movs	r1, #6
    4fc8:	4648      	mov	r0, r9
    4fca:	f7ff fd83 	bl	4ad4 <send_err_rsp.part.11>
		return 0;
    4fce:	2400      	movs	r4, #0
    4fd0:	e7cc      	b.n	4f6c <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4fd2:	4b07      	ldr	r3, [pc, #28]	; (4ff0 <att_find_type_req+0xe0>)
    4fd4:	9a04      	ldr	r2, [sp, #16]
    4fd6:	2104      	movs	r1, #4
    4fd8:	4648      	mov	r0, r9
    4fda:	f7ff f833 	bl	4044 <bt_l2cap_send_cb>
    4fde:	e7c5      	b.n	4f6c <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    4fe0:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    4fe2:	e7c3      	b.n	4f6c <att_find_type_req+0x5c>
			*err = 0;
    4fe4:	463d      	mov	r5, r7
    4fe6:	2301      	movs	r3, #1
    4fe8:	e7ec      	b.n	4fc4 <att_find_type_req+0xb4>
    4fea:	bf00      	nop
    4fec:	00004445 	.word	0x00004445
    4ff0:	00004707 	.word	0x00004707

00004ff4 <att_find_info_req>:
{
    4ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    4ff6:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    4ff8:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    4ffa:	881d      	ldrh	r5, [r3, #0]
{
    4ffc:	b085      	sub	sp, #20
    4ffe:	4607      	mov	r7, r0
	if (!start || !end) {
    5000:	b375      	cbz	r5, 5060 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    5002:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    5004:	b35c      	cbz	r4, 505e <att_find_info_req+0x6a>
	if (start > end) {
    5006:	42a5      	cmp	r5, r4
    5008:	d82a      	bhi.n	5060 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    500a:	2210      	movs	r2, #16
    500c:	2100      	movs	r1, #0
    500e:	4668      	mov	r0, sp
    5010:	f7fc fe20 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    5014:	2200      	movs	r2, #0
    5016:	2105      	movs	r1, #5
    5018:	4630      	mov	r0, r6
    501a:	f7ff fd00 	bl	4a1e <bt_att_create_pdu>
    501e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    5020:	b910      	cbnz	r0, 5028 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    5022:	200e      	movs	r0, #14
}
    5024:	b005      	add	sp, #20
    5026:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5028:	4621      	mov	r1, r4
    502a:	466b      	mov	r3, sp
    502c:	4a0d      	ldr	r2, [pc, #52]	; (5064 <att_find_info_req+0x70>)
	data.att = att;
    502e:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5030:	4628      	mov	r0, r5
    5032:	f000 fc47 	bl	58c4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    5036:	9c02      	ldr	r4, [sp, #8]
    5038:	b94c      	cbnz	r4, 504e <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    503a:	9801      	ldr	r0, [sp, #4]
    503c:	f00b fb2a 	bl	10694 <net_buf_unref>
    5040:	230a      	movs	r3, #10
    5042:	462a      	mov	r2, r5
    5044:	2104      	movs	r1, #4
    5046:	4630      	mov	r0, r6
    5048:	f7ff fd44 	bl	4ad4 <send_err_rsp.part.11>
    504c:	e005      	b.n	505a <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    504e:	4b06      	ldr	r3, [pc, #24]	; (5068 <att_find_info_req+0x74>)
    5050:	9a01      	ldr	r2, [sp, #4]
    5052:	2104      	movs	r1, #4
    5054:	4630      	mov	r0, r6
    5056:	f7fe fff5 	bl	4044 <bt_l2cap_send_cb>
		return 0;
    505a:	2000      	movs	r0, #0
    505c:	e7e2      	b.n	5024 <att_find_info_req+0x30>
			*err = 0;
    505e:	4625      	mov	r5, r4
    5060:	2301      	movs	r3, #1
    5062:	e7ee      	b.n	5042 <att_find_info_req+0x4e>
    5064:	000043ab 	.word	0x000043ab
    5068:	00004707 	.word	0x00004707

0000506c <att_write_rsp.part.12.constprop.16>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5070:	b086      	sub	sp, #24
    5072:	4690      	mov	r8, r2
    5074:	4605      	mov	r5, r0
    5076:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    5078:	2218      	movs	r2, #24
    507a:	2100      	movs	r1, #0
    507c:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    507e:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    5080:	f7fc fde8 	bl	1c54 <memset>
	if (rsp) {
    5084:	f1b8 0f00 	cmp.w	r8, #0
    5088:	d11f      	bne.n	50ca <att_write_rsp.part.12.constprop.16+0x5e>
	data.offset = offset;
    508a:	2300      	movs	r3, #0
    508c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    5090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5092:	9303      	str	r3, [sp, #12]
	data.len = len;
    5094:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    5098:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    509c:	2301      	movs	r3, #1
    509e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    50a2:	4a1b      	ldr	r2, [pc, #108]	; (5110 <att_write_rsp.part.12.constprop.16+0xa4>)
	data.conn = conn;
    50a4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    50a6:	466b      	mov	r3, sp
    50a8:	4639      	mov	r1, r7
    50aa:	4638      	mov	r0, r7
	data.op = op;
    50ac:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    50b0:	f000 fc08 	bl	58c4 <bt_gatt_foreach_attr>
	if (data.err) {
    50b4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    50b8:	b98c      	cbnz	r4, 50de <att_write_rsp.part.12.constprop.16+0x72>
	if (data.buf) {
    50ba:	9a01      	ldr	r2, [sp, #4]
    50bc:	b1b2      	cbz	r2, 50ec <att_write_rsp.part.12.constprop.16+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    50be:	4b15      	ldr	r3, [pc, #84]	; (5114 <att_write_rsp.part.12.constprop.16+0xa8>)
    50c0:	2104      	movs	r1, #4
    50c2:	4628      	mov	r0, r5
    50c4:	f7fe ffbe 	bl	4044 <bt_l2cap_send_cb>
    50c8:	e011      	b.n	50ee <att_write_rsp.part.12.constprop.16+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    50ca:	2200      	movs	r2, #0
    50cc:	4641      	mov	r1, r8
    50ce:	4628      	mov	r0, r5
    50d0:	f7ff fca5 	bl	4a1e <bt_att_create_pdu>
    50d4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    50d6:	2800      	cmp	r0, #0
    50d8:	d1d7      	bne.n	508a <att_write_rsp.part.12.constprop.16+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    50da:	240e      	movs	r4, #14
    50dc:	e007      	b.n	50ee <att_write_rsp.part.12.constprop.16+0x82>
		if (rsp) {
    50de:	f1b8 0f00 	cmp.w	r8, #0
    50e2:	d00f      	beq.n	5104 <att_write_rsp.part.12.constprop.16+0x98>
			net_buf_unref(data.buf);
    50e4:	9801      	ldr	r0, [sp, #4]
    50e6:	f00b fad5 	bl	10694 <net_buf_unref>
	if (!req) {
    50ea:	b926      	cbnz	r6, 50f6 <att_write_rsp.part.12.constprop.16+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    50ec:	2400      	movs	r4, #0
}
    50ee:	4620      	mov	r0, r4
    50f0:	b006      	add	sp, #24
    50f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    50fa:	463a      	mov	r2, r7
    50fc:	4631      	mov	r1, r6
    50fe:	4628      	mov	r0, r5
    5100:	f7ff fce8 	bl	4ad4 <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5104:	2e18      	cmp	r6, #24
    5106:	d1f1      	bne.n	50ec <att_write_rsp.part.12.constprop.16+0x80>
    5108:	f89d 4014 	ldrb.w	r4, [sp, #20]
    510c:	e7ef      	b.n	50ee <att_write_rsp.part.12.constprop.16+0x82>
    510e:	bf00      	nop
    5110:	00004735 	.word	0x00004735
    5114:	00004707 	.word	0x00004707

00005118 <att_signed_write_cmd>:
{
    5118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    511c:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    511e:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    5120:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    5124:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5126:	4620      	mov	r0, r4
    5128:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    512a:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    512e:	f00b fafa 	bl	10726 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    5132:	4629      	mov	r1, r5
    5134:	4630      	mov	r0, r6
    5136:	f000 fcce 	bl	5ad6 <bt_smp_sign_verify>
	if (err) {
    513a:	4607      	mov	r7, r0
    513c:	b9c8      	cbnz	r0, 5172 <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    513e:	2101      	movs	r1, #1
    5140:	4620      	mov	r0, r4
    5142:	f00b faf8 	bl	10736 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    5146:	2102      	movs	r1, #2
    5148:	4620      	mov	r0, r4
    514a:	f00b faf4 	bl	10736 <net_buf_simple_pull>
	if (!handle) {
    514e:	f1b8 0f00 	cmp.w	r8, #0
    5152:	d010      	beq.n	5176 <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    5154:	7b2b      	ldrb	r3, [r5, #12]
    5156:	3b0c      	subs	r3, #12
    5158:	b2db      	uxtb	r3, r3
    515a:	9301      	str	r3, [sp, #4]
    515c:	68ab      	ldr	r3, [r5, #8]
    515e:	9300      	str	r3, [sp, #0]
    5160:	463a      	mov	r2, r7
    5162:	4643      	mov	r3, r8
    5164:	4639      	mov	r1, r7
    5166:	4630      	mov	r0, r6
    5168:	f7ff ff80 	bl	506c <att_write_rsp.part.12.constprop.16>
}
    516c:	b002      	add	sp, #8
    516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    5172:	2000      	movs	r0, #0
    5174:	e7fa      	b.n	516c <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    5176:	2001      	movs	r0, #1
    5178:	e7f8      	b.n	516c <att_signed_write_cmd+0x54>

0000517a <att_write_cmd>:
{
    517a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    517c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    517e:	f101 0008 	add.w	r0, r1, #8
{
    5182:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5184:	f00b fae7 	bl	10756 <net_buf_simple_pull_le16>
	if (!handle) {
    5188:	4603      	mov	r3, r0
    518a:	b150      	cbz	r0, 51a2 <att_write_cmd+0x28>
    518c:	7b22      	ldrb	r2, [r4, #12]
    518e:	9201      	str	r2, [sp, #4]
    5190:	68a2      	ldr	r2, [r4, #8]
    5192:	9200      	str	r2, [sp, #0]
    5194:	2200      	movs	r2, #0
    5196:	4611      	mov	r1, r2
    5198:	4628      	mov	r0, r5
    519a:	f7ff ff67 	bl	506c <att_write_rsp.part.12.constprop.16>
}
    519e:	b003      	add	sp, #12
    51a0:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    51a2:	2001      	movs	r0, #1
    51a4:	e7fb      	b.n	519e <att_write_cmd+0x24>

000051a6 <att_write_req>:
{
    51a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    51a8:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    51aa:	f101 0008 	add.w	r0, r1, #8
{
    51ae:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    51b0:	f00b fad1 	bl	10756 <net_buf_simple_pull_le16>
	if (!handle) {
    51b4:	4603      	mov	r3, r0
    51b6:	b150      	cbz	r0, 51ce <att_write_req+0x28>
    51b8:	7b22      	ldrb	r2, [r4, #12]
    51ba:	9201      	str	r2, [sp, #4]
    51bc:	68a2      	ldr	r2, [r4, #8]
    51be:	9200      	str	r2, [sp, #0]
    51c0:	2112      	movs	r1, #18
    51c2:	2213      	movs	r2, #19
    51c4:	4628      	mov	r0, r5
    51c6:	f7ff ff51 	bl	506c <att_write_rsp.part.12.constprop.16>
}
    51ca:	b003      	add	sp, #12
    51cc:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    51ce:	2001      	movs	r0, #1
    51d0:	e7fb      	b.n	51ca <att_write_req+0x24>
	...

000051d4 <bt_att_init>:

void bt_att_init(void)
{
    51d4:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    51d6:	4803      	ldr	r0, [pc, #12]	; (51e4 <bt_att_init+0x10>)
    51d8:	f7fe fe8c 	bl	3ef4 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    51dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    51e0:	f000 bb5a 	b.w	5898 <bt_gatt_init>
    51e4:	200035d0 	.word	0x200035d0

000051e8 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    51e8:	b510      	push	{r4, lr}
    51ea:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    51ec:	b1d8      	cbz	r0, 5226 <bt_att_req_send+0x3e>
    51ee:	b1d1      	cbz	r1, 5226 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    51f0:	f7ff fa55 	bl	469e <att_chan_get>
	if (!att) {
    51f4:	4603      	mov	r3, r0
    51f6:	b1c8      	cbz	r0, 522c <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    51f8:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    51fc:	b172      	cbz	r2, 521c <bt_att_req_send+0x34>
	parent->next = child;
    51fe:	2000      	movs	r0, #0
    5200:	6020      	str	r0, [r4, #0]
    5202:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    5206:	b92a      	cbnz	r2, 5214 <bt_att_req_send+0x2c>
	list->tail = node;
    5208:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    520c:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    5210:	4610      	mov	r0, r2
    5212:	bd10      	pop	{r4, pc}
	parent->next = child;
    5214:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5216:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    521a:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    521c:	4621      	mov	r1, r4
}
    521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    5222:	f7ff bab3 	b.w	478c <att_send_req>
		return -EINVAL;
    5226:	f06f 0015 	mvn.w	r0, #21
    522a:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    522c:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5230:	bd10      	pop	{r4, pc}

00005232 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    5232:	4770      	bx	lr

00005234 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    5234:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    5236:	2000      	movs	r0, #0
    5238:	4770      	bx	lr

0000523a <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    523a:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    523c:	2300      	movs	r3, #0
    523e:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    5240:	461a      	mov	r2, r3
    5242:	42aa      	cmp	r2, r5
    5244:	d107      	bne.n	5256 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    5246:	890a      	ldrh	r2, [r1, #8]
    5248:	429a      	cmp	r2, r3
    524a:	d00d      	beq.n	5268 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    524c:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    524e:	68ca      	ldr	r2, [r1, #12]
	}
}
    5250:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    5252:	4619      	mov	r1, r3
    5254:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    5256:	680c      	ldr	r4, [r1, #0]
    5258:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    525c:	3201      	adds	r2, #1
    525e:	8924      	ldrh	r4, [r4, #8]
    5260:	42a3      	cmp	r3, r4
    5262:	bf38      	it	cc
    5264:	4623      	movcc	r3, r4
    5266:	e7ec      	b.n	5242 <gatt_ccc_changed+0x8>
}
    5268:	bc30      	pop	{r4, r5}
    526a:	4770      	bx	lr

0000526c <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    526c:	b410      	push	{r4}
    526e:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    5270:	699c      	ldr	r4, [r3, #24]
    5272:	460a      	mov	r2, r1
    5274:	6959      	ldr	r1, [r3, #20]
    5276:	4623      	mov	r3, r4
}
    5278:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    527a:	4718      	bx	r3

0000527c <gatt_notify>:
{
    527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5280:	468a      	mov	sl, r1
    5282:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    5284:	211b      	movs	r1, #27
    5286:	1c9a      	adds	r2, r3, #2
{
    5288:	4680      	mov	r8, r0
    528a:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    528c:	f7ff fbc7 	bl	4a1e <bt_att_create_pdu>
	if (!buf) {
    5290:	4604      	mov	r4, r0
    5292:	b1d0      	cbz	r0, 52ca <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    5294:	f100 0708 	add.w	r7, r0, #8
    5298:	2102      	movs	r1, #2
    529a:	4638      	mov	r0, r7
    529c:	f00b fa2c 	bl	106f8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    52a0:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    52a2:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    52a4:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    52a8:	4638      	mov	r0, r7
    52aa:	f00b fa25 	bl	106f8 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    52ae:	4632      	mov	r2, r6
    52b0:	4649      	mov	r1, r9
    52b2:	4628      	mov	r0, r5
    52b4:	f7fc fca2 	bl	1bfc <memcpy>
    52b8:	4640      	mov	r0, r8
    52ba:	2300      	movs	r3, #0
    52bc:	4622      	mov	r2, r4
    52be:	2104      	movs	r1, #4
    52c0:	f7fe fec0 	bl	4044 <bt_l2cap_send_cb>
	return 0;
    52c4:	2000      	movs	r0, #0
    52c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    52ca:	f06f 000b 	mvn.w	r0, #11
}
    52ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000052d4 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    52d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    52d8:	694b      	ldr	r3, [r1, #20]
{
    52da:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    52dc:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    52de:	6818      	ldr	r0, [r3, #0]
    52e0:	2300      	movs	r3, #0
{
    52e2:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    52e4:	f88d 3004 	strb.w	r3, [sp, #4]
    52e8:	a901      	add	r1, sp, #4
    52ea:	f642 0303 	movw	r3, #10243	; 0x2803
    52ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    52f2:	f7fc fd57 	bl	1da4 <bt_uuid_cmp>
    52f6:	b930      	cbnz	r0, 5306 <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    52f8:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    52fa:	68db      	ldr	r3, [r3, #12]
    52fc:	791b      	ldrb	r3, [r3, #4]
    52fe:	069b      	lsls	r3, r3, #26
    5300:	d52d      	bpl.n	535e <gatt_indicate+0x8a>
			return -EINVAL;
		}

		value_handle += 1;
    5302:	3501      	adds	r5, #1
    5304:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    5306:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    5308:	211d      	movs	r1, #29
    530a:	3202      	adds	r2, #2
    530c:	4648      	mov	r0, r9
    530e:	f7ff fb86 	bl	4a1e <bt_att_create_pdu>
	if (!buf) {
    5312:	4606      	mov	r6, r0
    5314:	b330      	cbz	r0, 5364 <gatt_indicate+0x90>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, value_handle);

	ind = net_buf_add(buf, sizeof(*ind));
    5316:	f100 0708 	add.w	r7, r0, #8
    531a:	2102      	movs	r1, #2
    531c:	4638      	mov	r0, r7
    531e:	f00b f9eb 	bl	106f8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    5322:	4680      	mov	r8, r0

	net_buf_add(buf, params->len);
    5324:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    5326:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    532a:	4638      	mov	r0, r7
    532c:	f00b f9e4 	bl	106f8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    5330:	8c22      	ldrh	r2, [r4, #32]
    5332:	69e1      	ldr	r1, [r4, #28]
    5334:	4640      	mov	r0, r8
    5336:	f7fc fc61 	bl	1bfc <memcpy>
		req->func = func;
    533a:	4b0c      	ldr	r3, [pc, #48]	; (536c <gatt_indicate+0x98>)
    533c:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    533e:	2300      	movs	r3, #0
		req->buf = buf;
    5340:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    5342:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    5344:	4621      	mov	r1, r4
    5346:	4648      	mov	r0, r9
    5348:	f7ff ff4e 	bl	51e8 <bt_att_req_send>
	if (err) {
    534c:	4604      	mov	r4, r0
    534e:	b110      	cbz	r0, 5356 <gatt_indicate+0x82>
		net_buf_unref(buf);
    5350:	4630      	mov	r0, r6
    5352:	f00b f99f 	bl	10694 <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    5356:	4620      	mov	r0, r4
    5358:	b003      	add	sp, #12
    535a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    535e:	f06f 0415 	mvn.w	r4, #21
    5362:	e7f8      	b.n	5356 <gatt_indicate+0x82>
		return -ENOMEM;
    5364:	f06f 040b 	mvn.w	r4, #11
    5368:	e7f5      	b.n	5356 <gatt_indicate+0x82>
    536a:	bf00      	nop
    536c:	0000526d 	.word	0x0000526d

00005370 <gatt_register>:
	if (sys_slist_is_empty(&db)) {
    5370:	4a18      	ldr	r2, [pc, #96]	; (53d4 <gatt_register+0x64>)
    5372:	6813      	ldr	r3, [r2, #0]
{
    5374:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    5376:	e890 0012 	ldmia.w	r0, {r1, r4}
	if (sys_slist_is_empty(&db)) {
    537a:	b143      	cbz	r3, 538e <gatt_register+0x1e>
    537c:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    537e:	b33b      	cbz	r3, 53d0 <gatt_register+0x60>
	handle = last->attrs[last->attr_count - 1].handle;
    5380:	e913 0028 	ldmdb	r3, {r3, r5}
    5384:	2614      	movs	r6, #20
    5386:	fb06 3305 	mla	r3, r6, r5, r3
    538a:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    538e:	b2a4      	uxth	r4, r4
    5390:	2514      	movs	r5, #20
    5392:	fb05 1404 	mla	r4, r5, r4, r1
	for (; attrs && count; attrs++, count--) {
    5396:	b109      	cbz	r1, 539c <gatt_register+0x2c>
    5398:	42a1      	cmp	r1, r4
    539a:	d108      	bne.n	53ae <gatt_register+0x3e>
	parent->next = child;
    539c:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    539e:	f100 0108 	add.w	r1, r0, #8
    53a2:	6083      	str	r3, [r0, #8]
    53a4:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    53a6:	b978      	cbnz	r0, 53c8 <gatt_register+0x58>
	list->tail = node;
    53a8:	6051      	str	r1, [r2, #4]
	list->head = node;
    53aa:	6011      	str	r1, [r2, #0]
    53ac:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    53ae:	8a0d      	ldrh	r5, [r1, #16]
    53b0:	b92d      	cbnz	r5, 53be <gatt_register+0x4e>
			attrs->handle = ++handle;
    53b2:	3301      	adds	r3, #1
    53b4:	b29d      	uxth	r5, r3
    53b6:	820d      	strh	r5, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    53b8:	3114      	adds	r1, #20
    53ba:	462b      	mov	r3, r5
    53bc:	e7eb      	b.n	5396 <gatt_register+0x26>
		} else if (attrs->handle > handle) {
    53be:	42ab      	cmp	r3, r5
    53c0:	d3fa      	bcc.n	53b8 <gatt_register+0x48>
			return -EINVAL;
    53c2:	f06f 0015 	mvn.w	r0, #21
    53c6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    53c8:	6001      	str	r1, [r0, #0]
	list->tail = node;
    53ca:	6051      	str	r1, [r2, #4]
	return 0;
    53cc:	4618      	mov	r0, r3
    53ce:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	deff      	udf	#255	; 0xff
    53d4:	20000320 	.word	0x20000320

000053d8 <sc_indicate.constprop.16>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    53d8:	b510      	push	{r4, lr}
    53da:	4b17      	ldr	r3, [pc, #92]	; (5438 <sc_indicate.constprop.16+0x60>)
    53dc:	f3bf 8f5b 	dmb	ish
    53e0:	f103 0250 	add.w	r2, r3, #80	; 0x50
    53e4:	e852 4f00 	ldrex	r4, [r2]
    53e8:	f044 0e01 	orr.w	lr, r4, #1
    53ec:	e842 ec00 	strex	ip, lr, [r2]
    53f0:	f1bc 0f00 	cmp.w	ip, #0
    53f4:	d1f6      	bne.n	53e4 <sc_indicate.constprop.16+0xc>
    53f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    53fa:	07e2      	lsls	r2, r4, #31
    53fc:	d402      	bmi.n	5404 <sc_indicate.constprop.16+0x2c>
		sc->start = start;
    53fe:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    5400:	84d9      	strh	r1, [r3, #38]	; 0x26
    5402:	e00a      	b.n	541a <sc_indicate.constprop.16+0x42>
	if (new_start >= *start && new_end <= *end) {
    5404:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    5406:	4282      	cmp	r2, r0
    5408:	d803      	bhi.n	5412 <sc_indicate.constprop.16+0x3a>
    540a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    540c:	428a      	cmp	r2, r1
    540e:	d301      	bcc.n	5414 <sc_indicate.constprop.16+0x3c>
    5410:	bd10      	pop	{r4, pc}
		*start = new_start;
    5412:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    5414:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    5416:	428a      	cmp	r2, r1
    5418:	d3f2      	bcc.n	5400 <sc_indicate.constprop.16+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    541a:	f3bf 8f5b 	dmb	ish
    541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    5420:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    5424:	079b      	lsls	r3, r3, #30
    5426:	d406      	bmi.n	5436 <sc_indicate.constprop.16+0x5e>
    5428:	220a      	movs	r2, #10
    542a:	4904      	ldr	r1, [pc, #16]	; (543c <sc_indicate.constprop.16+0x64>)
    542c:	4804      	ldr	r0, [pc, #16]	; (5440 <sc_indicate.constprop.16+0x68>)
}
    542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5432:	f00c bd13 	b.w	11e5c <k_delayed_work_submit_to_queue>
    5436:	bd10      	pop	{r4, pc}
    5438:	20000328 	.word	0x20000328
    543c:	20000350 	.word	0x20000350
    5440:	20001728 	.word	0x20001728

00005444 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5444:	6882      	ldr	r2, [r0, #8]
    5446:	4b19      	ldr	r3, [pc, #100]	; (54ac <connected_cb+0x68>)
    5448:	429a      	cmp	r2, r3
{
    544a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    544e:	4607      	mov	r7, r0
    5450:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    5452:	d125      	bne.n	54a0 <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    5454:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    5456:	2600      	movs	r6, #0
    5458:	686b      	ldr	r3, [r5, #4]
    545a:	429e      	cmp	r6, r3
    545c:	d220      	bcs.n	54a0 <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    545e:	6829      	ldr	r1, [r5, #0]
    5460:	ea4f 1806 	mov.w	r8, r6, lsl #4
    5464:	4441      	add	r1, r8
    5466:	4620      	mov	r0, r4
    5468:	f7fe fa6c 	bl	3944 <bt_conn_addr_le_cmp>
    546c:	b9d8      	cbnz	r0, 54a6 <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    546e:	682b      	ldr	r3, [r5, #0]
    5470:	4443      	add	r3, r8
    5472:	891b      	ldrh	r3, [r3, #8]
    5474:	b1bb      	cbz	r3, 54a6 <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    5476:	4629      	mov	r1, r5
    5478:	4638      	mov	r0, r7
    547a:	f7ff fede 	bl	523a <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    547e:	682c      	ldr	r4, [r5, #0]
    5480:	4b0b      	ldr	r3, [pc, #44]	; (54b0 <connected_cb+0x6c>)
    5482:	429c      	cmp	r4, r3
    5484:	d10c      	bne.n	54a0 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    5486:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    5488:	89a0      	ldrh	r0, [r4, #12]
    548a:	89e1      	ldrh	r1, [r4, #14]
    548c:	b900      	cbnz	r0, 5490 <connected_cb+0x4c>
    548e:	b139      	cbz	r1, 54a0 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    5490:	f7ff ffa2 	bl	53d8 <sc_indicate.constprop.16>
	memset(cfg->data, 0, sizeof(cfg->data));
    5494:	2204      	movs	r2, #4
    5496:	2100      	movs	r1, #0
    5498:	f104 000c 	add.w	r0, r4, #12
    549c:	f7fc fbda 	bl	1c54 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    54a0:	2001      	movs	r0, #1
    54a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    54a6:	3601      	adds	r6, #1
    54a8:	e7d6      	b.n	5458 <connected_cb+0x14>
    54aa:	bf00      	nop
    54ac:	0000567d 	.word	0x0000567d
    54b0:	2000037c 	.word	0x2000037c

000054b4 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    54b4:	490d      	ldr	r1, [pc, #52]	; (54ec <sc_indicate_rsp+0x38>)
    54b6:	f3bf 8f5b 	dmb	ish
    54ba:	f101 0350 	add.w	r3, r1, #80	; 0x50
    54be:	e853 2f00 	ldrex	r2, [r3]
    54c2:	f022 0202 	bic.w	r2, r2, #2
    54c6:	e843 2000 	strex	r0, r2, [r3]
    54ca:	2800      	cmp	r0, #0
    54cc:	d1f7      	bne.n	54be <sc_indicate_rsp+0xa>
    54ce:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    54d2:	f3bf 8f5b 	dmb	ish
    54d6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    54d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    54dc:	07db      	lsls	r3, r3, #31
    54de:	d504      	bpl.n	54ea <sc_indicate_rsp+0x36>
    54e0:	2200      	movs	r2, #0
    54e2:	3128      	adds	r1, #40	; 0x28
    54e4:	4802      	ldr	r0, [pc, #8]	; (54f0 <sc_indicate_rsp+0x3c>)
    54e6:	f00c bcb9 	b.w	11e5c <k_delayed_work_submit_to_queue>
    54ea:	4770      	bx	lr
    54ec:	20000328 	.word	0x20000328
    54f0:	20001728 	.word	0x20001728

000054f4 <read_appearance>:
{
    54f4:	b513      	push	{r0, r1, r4, lr}
    54f6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    54fa:	4610      	mov	r0, r2
	if (offset > value_len) {
    54fc:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    54fe:	f04f 0200 	mov.w	r2, #0
    5502:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    5506:	d80d      	bhi.n	5524 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    5508:	f1c1 0402 	rsb	r4, r1, #2
    550c:	429c      	cmp	r4, r3
    550e:	bfa8      	it	ge
    5510:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    5512:	f10d 0306 	add.w	r3, sp, #6
    5516:	4622      	mov	r2, r4
    5518:	4419      	add	r1, r3
    551a:	f7fc fb6f 	bl	1bfc <memcpy>
}
    551e:	4620      	mov	r0, r4
    5520:	b002      	add	sp, #8
    5522:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5524:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    5528:	e7f9      	b.n	551e <read_appearance+0x2a>
	...

0000552c <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    552c:	6882      	ldr	r2, [r0, #8]
    552e:	4b27      	ldr	r3, [pc, #156]	; (55cc <disconnected_cb+0xa0>)
    5530:	429a      	cmp	r2, r3
{
    5532:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    5536:	4680      	mov	r8, r0
    5538:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    553a:	d127      	bne.n	558c <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    553c:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    553e:	8923      	ldrh	r3, [r4, #8]
    5540:	b323      	cbz	r3, 558c <disconnected_cb+0x60>
    5542:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    5544:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    5548:	6863      	ldr	r3, [r4, #4]
    554a:	429e      	cmp	r6, r3
    554c:	d30b      	bcc.n	5566 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    554e:	2202      	movs	r2, #2
    5550:	2100      	movs	r1, #0
    5552:	f104 0008 	add.w	r0, r4, #8
    5556:	f7fc fb7d 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    555a:	68e3      	ldr	r3, [r4, #12]
    555c:	b1b3      	cbz	r3, 558c <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    555e:	8921      	ldrh	r1, [r4, #8]
    5560:	4640      	mov	r0, r8
    5562:	4798      	blx	r3
    5564:	e012      	b.n	558c <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    5566:	6821      	ldr	r1, [r4, #0]
    5568:	0135      	lsls	r5, r6, #4
    556a:	4429      	add	r1, r5
    556c:	890b      	ldrh	r3, [r1, #8]
    556e:	b19b      	cbz	r3, 5598 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5570:	4648      	mov	r0, r9
    5572:	f7fe f9e7 	bl	3944 <bt_conn_addr_le_cmp>
    5576:	b188      	cbz	r0, 559c <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    5578:	6820      	ldr	r0, [r4, #0]
    557a:	4428      	add	r0, r5
    557c:	f7fe f9fa 	bl	3974 <bt_conn_lookup_addr_le>
			if (tmp) {
    5580:	b150      	cbz	r0, 5598 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    5582:	7a43      	ldrb	r3, [r0, #9]
    5584:	2b03      	cmp	r3, #3
    5586:	d105      	bne.n	5594 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    5588:	f7fe fa30 	bl	39ec <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    558c:	2001      	movs	r0, #1
    558e:	b002      	add	sp, #8
    5590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    5594:	f7fe fa2a 	bl	39ec <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    5598:	3601      	adds	r6, #1
    559a:	e7d5      	b.n	5548 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    559c:	4650      	mov	r0, sl
    559e:	f7fd fe61 	bl	3264 <bt_addr_le_is_bonded>
    55a2:	4607      	mov	r7, r0
    55a4:	6820      	ldr	r0, [r4, #0]
    55a6:	b95f      	cbnz	r7, 55c0 <disconnected_cb+0x94>
    55a8:	4428      	add	r0, r5
    55aa:	2207      	movs	r2, #7
    55ac:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    55ae:	9700      	str	r7, [sp, #0]
    55b0:	f8cd 7003 	str.w	r7, [sp, #3]
    55b4:	f7fc fb22 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    55b8:	6823      	ldr	r3, [r4, #0]
    55ba:	441d      	add	r5, r3
    55bc:	812f      	strh	r7, [r5, #8]
    55be:	e7eb      	b.n	5598 <disconnected_cb+0x6c>
    55c0:	2207      	movs	r2, #7
    55c2:	4651      	mov	r1, sl
    55c4:	4428      	add	r0, r5
    55c6:	f7fc fb19 	bl	1bfc <memcpy>
    55ca:	e7e5      	b.n	5598 <disconnected_cb+0x6c>
    55cc:	0000567d 	.word	0x0000567d

000055d0 <read_name>:
{
    55d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    55d4:	4e0d      	ldr	r6, [pc, #52]	; (560c <read_name+0x3c>)
{
    55d6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    55da:	4630      	mov	r0, r6
{
    55dc:	4698      	mov	r8, r3
    55de:	4617      	mov	r7, r2
				 strlen(gap_name));
    55e0:	f7fc fae2 	bl	1ba8 <strlen>
	if (offset > value_len) {
    55e4:	b283      	uxth	r3, r0
    55e6:	42ab      	cmp	r3, r5
    55e8:	d30d      	bcc.n	5606 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    55ea:	1b5c      	subs	r4, r3, r5
    55ec:	4544      	cmp	r4, r8
    55ee:	4623      	mov	r3, r4
    55f0:	bfa8      	it	ge
    55f2:	4643      	movge	r3, r8
    55f4:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    55f6:	4622      	mov	r2, r4
    55f8:	1971      	adds	r1, r6, r5
    55fa:	4638      	mov	r0, r7
    55fc:	f7fc fafe 	bl	1bfc <memcpy>
}
    5600:	4620      	mov	r0, r4
    5602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5606:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    560a:	e7f9      	b.n	5600 <read_name+0x30>
    560c:	00012944 	.word	0x00012944

00005610 <bt_gatt_attr_read_ccc>:
{
    5610:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    5614:	68ce      	ldr	r6, [r1, #12]
{
    5616:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    561a:	4604      	mov	r4, r0
    561c:	4690      	mov	r8, r2
    561e:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    5620:	2500      	movs	r5, #0
    5622:	6873      	ldr	r3, [r6, #4]
    5624:	429d      	cmp	r5, r3
    5626:	d20e      	bcs.n	5646 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5628:	6831      	ldr	r1, [r6, #0]
    562a:	ea4f 1905 	mov.w	r9, r5, lsl #4
    562e:	4449      	add	r1, r9
    5630:	4620      	mov	r0, r4
    5632:	f7fe f987 	bl	3944 <bt_conn_addr_le_cmp>
    5636:	b108      	cbz	r0, 563c <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    5638:	3501      	adds	r5, #1
    563a:	e7f2      	b.n	5622 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    563c:	6832      	ldr	r2, [r6, #0]
    563e:	444a      	add	r2, r9
    5640:	8913      	ldrh	r3, [r2, #8]
    5642:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    5646:	6873      	ldr	r3, [r6, #4]
    5648:	429d      	cmp	r5, r3
		value = 0x0000;
    564a:	bf04      	itt	eq
    564c:	2300      	moveq	r3, #0
    564e:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    5652:	2f02      	cmp	r7, #2
    5654:	d80f      	bhi.n	5676 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    5656:	f1c7 0402 	rsb	r4, r7, #2
    565a:	4554      	cmp	r4, sl
    565c:	bfa8      	it	ge
    565e:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    5660:	f10d 0306 	add.w	r3, sp, #6
    5664:	4622      	mov	r2, r4
    5666:	19d9      	adds	r1, r3, r7
    5668:	4640      	mov	r0, r8
    566a:	f7fc fac7 	bl	1bfc <memcpy>
}
    566e:	4620      	mov	r0, r4
    5670:	b002      	add	sp, #8
    5672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5676:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    567a:	e7f8      	b.n	566e <bt_gatt_attr_read_ccc+0x5e>

0000567c <bt_gatt_attr_write_ccc>:
{
    567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5680:	b085      	sub	sp, #20
    5682:	4688      	mov	r8, r1
    5684:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
    5688:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    568c:	2902      	cmp	r1, #2
{
    568e:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    5690:	d853      	bhi.n	573a <bt_gatt_attr_write_ccc+0xbe>
	if (offset + len > sizeof(u16_t)) {
    5692:	4419      	add	r1, r3
    5694:	2902      	cmp	r1, #2
    5696:	461f      	mov	r7, r3
    5698:	dc52      	bgt.n	5740 <bt_gatt_attr_write_ccc+0xc4>
	return ((u16_t)src[1] << 8) | src[0];
    569a:	7853      	ldrb	r3, [r2, #1]
    569c:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    569e:	2400      	movs	r4, #0
    56a0:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    56a4:	686b      	ldr	r3, [r5, #4]
    56a6:	429c      	cmp	r4, r3
    56a8:	d206      	bcs.n	56b8 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    56aa:	6829      	ldr	r1, [r5, #0]
    56ac:	4648      	mov	r0, r9
    56ae:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    56b2:	f7fe f947 	bl	3944 <bt_conn_addr_le_cmp>
    56b6:	b9c0      	cbnz	r0, 56ea <bt_gatt_attr_write_ccc+0x6e>
	if (i == ccc->cfg_len) {
    56b8:	686b      	ldr	r3, [r5, #4]
    56ba:	429c      	cmp	r4, r3
    56bc:	d121      	bne.n	5702 <bt_gatt_attr_write_ccc+0x86>
		if (!value) {
    56be:	2e00      	cmp	r6, #0
    56c0:	d037      	beq.n	5732 <bt_gatt_attr_write_ccc+0xb6>
    56c2:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    56c4:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    56c6:	686b      	ldr	r3, [r5, #4]
    56c8:	429c      	cmp	r4, r3
    56ca:	d217      	bcs.n	56fc <bt_gatt_attr_write_ccc+0x80>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    56cc:	6828      	ldr	r0, [r5, #0]
    56ce:	f8cd a000 	str.w	sl, [sp]
    56d2:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    56d6:	2207      	movs	r2, #7
    56d8:	4669      	mov	r1, sp
    56da:	4458      	add	r0, fp
    56dc:	f8cd a003 	str.w	sl, [sp, #3]
    56e0:	f7fc fa77 	bl	1bd2 <memcmp>
    56e4:	b118      	cbz	r0, 56ee <bt_gatt_attr_write_ccc+0x72>
		for (i = 0; i < ccc->cfg_len; i++) {
    56e6:	3401      	adds	r4, #1
    56e8:	e7ed      	b.n	56c6 <bt_gatt_attr_write_ccc+0x4a>
	for (i = 0; i < ccc->cfg_len; i++) {
    56ea:	3401      	adds	r4, #1
    56ec:	e7da      	b.n	56a4 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    56ee:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    56f0:	2207      	movs	r2, #7
    56f2:	f109 0144 	add.w	r1, r9, #68	; 0x44
    56f6:	4458      	add	r0, fp
    56f8:	f7fc fa80 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    56fc:	686b      	ldr	r3, [r5, #4]
    56fe:	429c      	cmp	r4, r3
    5700:	d021      	beq.n	5746 <bt_gatt_attr_write_ccc+0xca>
	ccc->cfg[i].value = value;
    5702:	682b      	ldr	r3, [r5, #0]
    5704:	0124      	lsls	r4, r4, #4
    5706:	4423      	add	r3, r4
    5708:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    570a:	892b      	ldrh	r3, [r5, #8]
    570c:	42b3      	cmp	r3, r6
    570e:	d003      	beq.n	5718 <bt_gatt_attr_write_ccc+0x9c>
		gatt_ccc_changed(attr, ccc);
    5710:	4629      	mov	r1, r5
    5712:	4640      	mov	r0, r8
    5714:	f7ff fd91 	bl	523a <gatt_ccc_changed>
	if (!value) {
    5718:	b95e      	cbnz	r6, 5732 <bt_gatt_attr_write_ccc+0xb6>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    571a:	6828      	ldr	r0, [r5, #0]
    571c:	9602      	str	r6, [sp, #8]
    571e:	4420      	add	r0, r4
    5720:	2207      	movs	r2, #7
    5722:	a902      	add	r1, sp, #8
    5724:	f8cd 600b 	str.w	r6, [sp, #11]
    5728:	f7fc fa68 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    572c:	682b      	ldr	r3, [r5, #0]
    572e:	441c      	add	r4, r3
    5730:	8126      	strh	r6, [r4, #8]
}
    5732:	4638      	mov	r0, r7
    5734:	b005      	add	sp, #20
    5736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    573a:	f06f 0706 	mvn.w	r7, #6
    573e:	e7f8      	b.n	5732 <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    5740:	f06f 070c 	mvn.w	r7, #12
    5744:	e7f5      	b.n	5732 <bt_gatt_attr_write_ccc+0xb6>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    5746:	f06f 0710 	mvn.w	r7, #16
    574a:	e7f2      	b.n	5732 <bt_gatt_attr_write_ccc+0xb6>

0000574c <bt_gatt_attr_read_service>:
{
    574c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    574e:	68c9      	ldr	r1, [r1, #12]
{
    5750:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    5754:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    5756:	780a      	ldrb	r2, [r1, #0]
    5758:	b992      	cbnz	r2, 5780 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    575a:	884a      	ldrh	r2, [r1, #2]
    575c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    5760:	2d02      	cmp	r5, #2
    5762:	d819      	bhi.n	5798 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    5764:	f1c5 0402 	rsb	r4, r5, #2
    5768:	429c      	cmp	r4, r3
    576a:	bfa8      	it	ge
    576c:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    576e:	f10d 0306 	add.w	r3, sp, #6
    5772:	4622      	mov	r2, r4
    5774:	1959      	adds	r1, r3, r5
    5776:	f7fc fa41 	bl	1bfc <memcpy>
}
    577a:	4620      	mov	r0, r4
    577c:	b003      	add	sp, #12
    577e:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    5780:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    5782:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    5786:	d807      	bhi.n	5798 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    5788:	f1c5 0410 	rsb	r4, r5, #16
    578c:	429c      	cmp	r4, r3
    578e:	bfa8      	it	ge
    5790:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    5792:	4622      	mov	r2, r4
    5794:	4429      	add	r1, r5
    5796:	e7ee      	b.n	5776 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5798:	f06f 0406 	mvn.w	r4, #6
    579c:	e7ed      	b.n	577a <bt_gatt_attr_read_service+0x2e>
	...

000057a0 <notify_cb>:
{
    57a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    57a4:	f642 1302 	movw	r3, #10498	; 0x2902
{
    57a8:	4605      	mov	r5, r0
    57aa:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    57ac:	2400      	movs	r4, #0
    57ae:	4669      	mov	r1, sp
    57b0:	6800      	ldr	r0, [r0, #0]
    57b2:	f88d 4000 	strb.w	r4, [sp]
    57b6:	f8ad 3002 	strh.w	r3, [sp, #2]
    57ba:	f7fc faf3 	bl	1da4 <bt_uuid_cmp>
    57be:	b178      	cbz	r0, 57e0 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    57c0:	f642 0303 	movw	r3, #10243	; 0x2803
    57c4:	6828      	ldr	r0, [r5, #0]
    57c6:	f88d 4004 	strb.w	r4, [sp, #4]
    57ca:	a901      	add	r1, sp, #4
    57cc:	f8ad 3006 	strh.w	r3, [sp, #6]
    57d0:	f7fc fae8 	bl	1da4 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    57d4:	1b00      	subs	r0, r0, r4
    57d6:	bf18      	it	ne
    57d8:	2001      	movne	r0, #1
}
    57da:	b003      	add	sp, #12
    57dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    57e0:	68aa      	ldr	r2, [r5, #8]
    57e2:	4b2b      	ldr	r3, [pc, #172]	; (5890 <notify_cb+0xf0>)
    57e4:	429a      	cmp	r2, r3
    57e6:	d001      	beq.n	57ec <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    57e8:	2001      	movs	r0, #1
    57ea:	e7f6      	b.n	57da <notify_cb+0x3a>
	ccc = attr->user_data;
    57ec:	68ef      	ldr	r7, [r5, #12]
    57ee:	4d29      	ldr	r5, [pc, #164]	; (5894 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    57f0:	4604      	mov	r4, r0
    57f2:	46a8      	mov	r8, r5
    57f4:	4681      	mov	r9, r0
    57f6:	687b      	ldr	r3, [r7, #4]
    57f8:	429c      	cmp	r4, r3
    57fa:	d2f5      	bcs.n	57e8 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    57fc:	6838      	ldr	r0, [r7, #0]
    57fe:	88b3      	ldrh	r3, [r6, #4]
    5800:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    5804:	8902      	ldrh	r2, [r0, #8]
    5806:	429a      	cmp	r2, r3
    5808:	d114      	bne.n	5834 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    580a:	f7fe f8b3 	bl	3974 <bt_conn_lookup_addr_le>
		if (!conn) {
    580e:	4683      	mov	fp, r0
    5810:	b9f8      	cbnz	r0, 5852 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    5812:	683b      	ldr	r3, [r7, #0]
    5814:	4543      	cmp	r3, r8
    5816:	d10d      	bne.n	5834 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    5818:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    581a:	a801      	add	r0, sp, #4
    581c:	8c1a      	ldrh	r2, [r3, #32]
    581e:	69d9      	ldr	r1, [r3, #28]
    5820:	f7fc f9ec 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    5824:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    5826:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    582a:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    582c:	b928      	cbnz	r0, 583a <notify_cb+0x9a>
    582e:	b942      	cbnz	r2, 5842 <notify_cb+0xa2>
		*stored = data;
    5830:	9801      	ldr	r0, [sp, #4]
    5832:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    5834:	3401      	adds	r4, #1
    5836:	3510      	adds	r5, #16
    5838:	e7dd      	b.n	57f6 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    583a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    583e:	4281      	cmp	r1, r0
    5840:	d305      	bcc.n	584e <notify_cb+0xae>
    5842:	429a      	cmp	r2, r3
    5844:	d2f6      	bcs.n	5834 <notify_cb+0x94>
	if (*end < new_end) {
    5846:	429a      	cmp	r2, r3
    5848:	d2f4      	bcs.n	5834 <notify_cb+0x94>
		*end = new_end;
    584a:	81eb      	strh	r3, [r5, #14]
    584c:	e7f2      	b.n	5834 <notify_cb+0x94>
		*start = new_start;
    584e:	81a9      	strh	r1, [r5, #12]
    5850:	e7f9      	b.n	5846 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    5852:	7a43      	ldrb	r3, [r0, #9]
    5854:	2b03      	cmp	r3, #3
    5856:	d002      	beq.n	585e <notify_cb+0xbe>
			bt_conn_unref(conn);
    5858:	f7fe f8c8 	bl	39ec <bt_conn_unref>
    585c:	e7ea      	b.n	5834 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    585e:	88b3      	ldrh	r3, [r6, #4]
    5860:	2b02      	cmp	r3, #2
    5862:	d10c      	bne.n	587e <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    5864:	6971      	ldr	r1, [r6, #20]
    5866:	f7ff fd35 	bl	52d4 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    586a:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    586c:	4658      	mov	r0, fp
    586e:	f7fe f8bd 	bl	39ec <bt_conn_unref>
		if (err < 0) {
    5872:	f1ba 0f00 	cmp.w	sl, #0
    5876:	db09      	blt.n	588c <notify_cb+0xec>
		data->err = 0;
    5878:	f8c6 9000 	str.w	r9, [r6]
    587c:	e7da      	b.n	5834 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    587e:	68b1      	ldr	r1, [r6, #8]
    5880:	8a33      	ldrh	r3, [r6, #16]
    5882:	68f2      	ldr	r2, [r6, #12]
    5884:	8a09      	ldrh	r1, [r1, #16]
    5886:	f7ff fcf9 	bl	527c <gatt_notify>
    588a:	e7ee      	b.n	586a <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    588c:	2000      	movs	r0, #0
    588e:	e7a4      	b.n	57da <notify_cb+0x3a>
    5890:	0000567d 	.word	0x0000567d
    5894:	2000037c 	.word	0x2000037c

00005898 <bt_gatt_init>:
{
    5898:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    589a:	4806      	ldr	r0, [pc, #24]	; (58b4 <bt_gatt_init+0x1c>)
    589c:	f7ff fd68 	bl	5370 <gatt_register>
	gatt_register(&gatt_svc);
    58a0:	4805      	ldr	r0, [pc, #20]	; (58b8 <bt_gatt_init+0x20>)
    58a2:	f7ff fd65 	bl	5370 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    58a6:	4905      	ldr	r1, [pc, #20]	; (58bc <bt_gatt_init+0x24>)
    58a8:	4805      	ldr	r0, [pc, #20]	; (58c0 <bt_gatt_init+0x28>)
}
    58aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    58ae:	f00c ba61 	b.w	11d74 <k_delayed_work_init>
    58b2:	bf00      	nop
    58b4:	200036b4 	.word	0x200036b4
    58b8:	20003710 	.word	0x20003710
    58bc:	00005945 	.word	0x00005945
    58c0:	20000350 	.word	0x20000350

000058c4 <bt_gatt_foreach_attr>:
{
    58c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58c8:	4699      	mov	r9, r3
    58ca:	4b12      	ldr	r3, [pc, #72]	; (5914 <bt_gatt_foreach_attr+0x50>)
    58cc:	681c      	ldr	r4, [r3, #0]
    58ce:	4606      	mov	r6, r0
    58d0:	460f      	mov	r7, r1
    58d2:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    58d4:	b1dc      	cbz	r4, 590e <bt_gatt_foreach_attr+0x4a>
    58d6:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    58d8:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    58dc:	b1bc      	cbz	r4, 590e <bt_gatt_foreach_attr+0x4a>
    58de:	2500      	movs	r5, #0
    58e0:	e006      	b.n	58f0 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    58e2:	6820      	ldr	r0, [r4, #0]
    58e4:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    58e8:	8a03      	ldrh	r3, [r0, #16]
    58ea:	42b3      	cmp	r3, r6
    58ec:	d207      	bcs.n	58fe <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    58ee:	3501      	adds	r5, #1
    58f0:	6863      	ldr	r3, [r4, #4]
    58f2:	42ab      	cmp	r3, r5
    58f4:	d8f5      	bhi.n	58e2 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    58f6:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    58f8:	b14c      	cbz	r4, 590e <bt_gatt_foreach_attr+0x4a>
    58fa:	3c08      	subs	r4, #8
    58fc:	e7ee      	b.n	58dc <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    58fe:	42bb      	cmp	r3, r7
    5900:	d8f5      	bhi.n	58ee <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    5902:	4649      	mov	r1, r9
    5904:	47c0      	blx	r8
    5906:	2800      	cmp	r0, #0
    5908:	d1f1      	bne.n	58ee <bt_gatt_foreach_attr+0x2a>
    590a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5912:	bf00      	nop
    5914:	20000320 	.word	0x20000320

00005918 <bt_gatt_indicate.part.9>:
int bt_gatt_indicate(struct bt_conn *conn,
    5918:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    591a:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    591e:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    5920:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    5922:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    5924:	2302      	movs	r3, #2
    5926:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    592a:	4a05      	ldr	r2, [pc, #20]	; (5940 <bt_gatt_indicate.part.9+0x28>)
    592c:	8a00      	ldrh	r0, [r0, #16]
    592e:	466b      	mov	r3, sp
    5930:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5934:	f7ff ffc6 	bl	58c4 <bt_gatt_foreach_attr>
}
    5938:	9800      	ldr	r0, [sp, #0]
    593a:	b007      	add	sp, #28
    593c:	f85d fb04 	ldr.w	pc, [sp], #4
    5940:	000057a1 	.word	0x000057a1

00005944 <sc_process>:
{
    5944:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    5946:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    594a:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    594e:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    5950:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    5954:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    5958:	3828      	subs	r0, #40	; 0x28
    595a:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    595e:	f3bf 8f5b 	dmb	ish
    5962:	e854 2f00 	ldrex	r2, [r4]
    5966:	f022 0201 	bic.w	r2, r2, #1
    596a:	e844 2100 	strex	r1, r2, [r4]
    596e:	2900      	cmp	r1, #0
    5970:	d1f7      	bne.n	5962 <sc_process+0x1e>
    5972:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    5976:	2200      	movs	r2, #0
    5978:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    597c:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    5980:	4a0e      	ldr	r2, [pc, #56]	; (59bc <sc_process+0x78>)
    5982:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    5986:	4a0e      	ldr	r2, [pc, #56]	; (59c0 <sc_process+0x7c>)
    5988:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    598c:	aa01      	add	r2, sp, #4
    598e:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    5992:	2204      	movs	r2, #4
    5994:	f823 2c08 	strh.w	r2, [r3, #-8]
    5998:	f7ff ffbe 	bl	5918 <bt_gatt_indicate.part.9>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    599c:	b958      	cbnz	r0, 59b6 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    599e:	f3bf 8f5b 	dmb	ish
    59a2:	e854 3f00 	ldrex	r3, [r4]
    59a6:	f043 0302 	orr.w	r3, r3, #2
    59aa:	e844 3200 	strex	r2, r3, [r4]
    59ae:	2a00      	cmp	r2, #0
    59b0:	d1f7      	bne.n	59a2 <sc_process+0x5e>
    59b2:	f3bf 8f5b 	dmb	ish
}
    59b6:	b002      	add	sp, #8
    59b8:	bd10      	pop	{r4, pc}
    59ba:	bf00      	nop
    59bc:	200036e8 	.word	0x200036e8
    59c0:	000054b5 	.word	0x000054b5

000059c4 <bt_gatt_attr_next>:
{
    59c4:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    59c6:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    59c8:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    59ca:	3101      	adds	r1, #1
    59cc:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    59ce:	2200      	movs	r2, #0
    59d0:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    59d4:	4608      	mov	r0, r1
    59d6:	4a03      	ldr	r2, [pc, #12]	; (59e4 <bt_gatt_attr_next+0x20>)
    59d8:	f7ff ff74 	bl	58c4 <bt_gatt_foreach_attr>
}
    59dc:	9801      	ldr	r0, [sp, #4]
    59de:	b003      	add	sp, #12
    59e0:	f85d fb04 	ldr.w	pc, [sp], #4
    59e4:	00005235 	.word	0x00005235

000059e8 <bt_gatt_attr_read_chrc>:
{
    59e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    59ea:	68cf      	ldr	r7, [r1, #12]
{
    59ec:	b087      	sub	sp, #28
    59ee:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    59f0:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    59f2:	793b      	ldrb	r3, [r7, #4]
{
    59f4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    59f8:	f88d 3004 	strb.w	r3, [sp, #4]
{
    59fc:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    59fe:	f7ff ffe1 	bl	59c4 <bt_gatt_attr_next>
	if (!next) {
    5a02:	b9d0      	cbnz	r0, 5a3a <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
    5a04:	f88d 0005 	strb.w	r0, [sp, #5]
    5a08:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    5a0c:	6839      	ldr	r1, [r7, #0]
    5a0e:	780b      	ldrb	r3, [r1, #0]
    5a10:	b9bb      	cbnz	r3, 5a42 <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    5a12:	884b      	ldrh	r3, [r1, #2]
    5a14:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    5a18:	2305      	movs	r3, #5
	if (offset > value_len) {
    5a1a:	42ab      	cmp	r3, r5
    5a1c:	d319      	bcc.n	5a52 <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
    5a1e:	1b5b      	subs	r3, r3, r5
    5a20:	42a3      	cmp	r3, r4
    5a22:	bfa8      	it	ge
    5a24:	4623      	movge	r3, r4
    5a26:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    5a28:	ab01      	add	r3, sp, #4
    5a2a:	4622      	mov	r2, r4
    5a2c:	1959      	adds	r1, r3, r5
    5a2e:	4630      	mov	r0, r6
    5a30:	f7fc f8e4 	bl	1bfc <memcpy>
}
    5a34:	4620      	mov	r0, r4
    5a36:	b007      	add	sp, #28
    5a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    5a3a:	8a03      	ldrh	r3, [r0, #16]
    5a3c:	f8ad 3005 	strh.w	r3, [sp, #5]
    5a40:	e7e4      	b.n	5a0c <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    5a42:	2210      	movs	r2, #16
    5a44:	3101      	adds	r1, #1
    5a46:	f10d 0007 	add.w	r0, sp, #7
    5a4a:	f7fc f8d7 	bl	1bfc <memcpy>
		value_len += 16;
    5a4e:	2313      	movs	r3, #19
    5a50:	e7e3      	b.n	5a1a <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5a52:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    5a56:	e7ed      	b.n	5a34 <bt_gatt_attr_read_chrc+0x4c>

00005a58 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    5a58:	4603      	mov	r3, r0
    5a5a:	4a03      	ldr	r2, [pc, #12]	; (5a68 <bt_gatt_connected+0x10>)
    5a5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5a60:	2001      	movs	r0, #1
    5a62:	f7ff bf2f 	b.w	58c4 <bt_gatt_foreach_attr>
    5a66:	bf00      	nop
    5a68:	00005445 	.word	0x00005445

00005a6c <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    5a6c:	4603      	mov	r3, r0
    5a6e:	4a03      	ldr	r2, [pc, #12]	; (5a7c <bt_gatt_disconnected+0x10>)
    5a70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5a74:	2001      	movs	r0, #1
    5a76:	f7ff bf25 	b.w	58c4 <bt_gatt_foreach_attr>
    5a7a:	bf00      	nop
    5a7c:	0000552d 	.word	0x0000552d

00005a80 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    5a80:	4b04      	ldr	r3, [pc, #16]	; (5a94 <bt_smp_accept+0x14>)
    5a82:	6818      	ldr	r0, [r3, #0]
    5a84:	b918      	cbnz	r0, 5a8e <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    5a86:	4a04      	ldr	r2, [pc, #16]	; (5a98 <bt_smp_accept+0x18>)
    5a88:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    5a8a:	600b      	str	r3, [r1, #0]

		return 0;
    5a8c:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    5a8e:	f06f 000b 	mvn.w	r0, #11
}
    5a92:	4770      	bx	lr
    5a94:	2000038c 	.word	0x2000038c
    5a98:	20003728 	.word	0x20003728

00005a9c <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    5a9c:	2100      	movs	r1, #0
{
    5a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    5aa2:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    5aa4:	4608      	mov	r0, r1
    5aa6:	f7fe faca 	bl	403e <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5aaa:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    5aae:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5ab0:	2101      	movs	r1, #1
    5ab2:	4630      	mov	r0, r6
    5ab4:	f00a fe20 	bl	106f8 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    5ab8:	2505      	movs	r5, #5
    5aba:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    5abc:	2101      	movs	r1, #1
    5abe:	4630      	mov	r0, r6
    5ac0:	f00a fe1a 	bl	106f8 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    5ac4:	7005      	strb	r5, [r0, #0]
    5ac6:	4622      	mov	r2, r4
    5ac8:	4638      	mov	r0, r7
    5aca:	2300      	movs	r3, #0
    5acc:	2106      	movs	r1, #6
}
    5ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ad2:	f7fe bab7 	b.w	4044 <bt_l2cap_send_cb>

00005ad6 <bt_smp_sign_verify>:
    5ad6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5ada:	4770      	bx	lr

00005adc <bt_smp_init>:

int bt_smp_init(void)
{
    5adc:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5ade:	4802      	ldr	r0, [pc, #8]	; (5ae8 <bt_smp_init+0xc>)
    5ae0:	f7fe fa08 	bl	3ef4 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    5ae4:	2000      	movs	r0, #0
    5ae6:	bd08      	pop	{r3, pc}
    5ae8:	2000371c 	.word	0x2000371c

00005aec <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    5aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    5aee:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5af0:	1dc3      	adds	r3, r0, #7
{
    5af2:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5af4:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5af8:	1e50      	subs	r0, r2, #1
{
    5afa:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5afc:	b280      	uxth	r0, r0
{
    5afe:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5b00:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5b02:	2100      	movs	r1, #0
    5b04:	2204      	movs	r2, #4
    5b06:	fb06 5000 	mla	r0, r6, r0, r5
    5b0a:	f7fc f8a3 	bl	1c54 <memset>
    5b0e:	3c02      	subs	r4, #2
    5b10:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    5b12:	f64f 77ff 	movw	r7, #65535	; 0xffff
    5b16:	42bc      	cmp	r4, r7
    5b18:	d101      	bne.n	5b1e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    5b1a:	b003      	add	sp, #12
    5b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    5b1e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    5b22:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    5b24:	2204      	movs	r2, #4
    5b26:	1b80      	subs	r0, r0, r6
    5b28:	eb0d 0102 	add.w	r1, sp, r2
    5b2c:	4428      	add	r0, r5
    5b2e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    5b30:	9301      	str	r3, [sp, #4]
    5b32:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    5b34:	f7fc f862 	bl	1bfc <memcpy>
    5b38:	e7ed      	b.n	5b16 <mem_init+0x2a>

00005b3a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    5b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    5b3c:	6805      	ldr	r5, [r0, #0]
{
    5b3e:	4606      	mov	r6, r0
	if (*mem_head) {
    5b40:	b195      	cbz	r5, 5b68 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5b42:	1deb      	adds	r3, r5, #7
    5b44:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    5b48:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5b4a:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    5b4c:	4629      	mov	r1, r5
    5b4e:	eb0d 0002 	add.w	r0, sp, r2
    5b52:	f7fc f853 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    5b56:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    5b58:	3c01      	subs	r4, #1
    5b5a:	b2a4      	uxth	r4, r4
		if (head) {
    5b5c:	b11b      	cbz	r3, 5b66 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    5b5e:	1dda      	adds	r2, r3, #7
    5b60:	f022 0203 	bic.w	r2, r2, #3
    5b64:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    5b66:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    5b68:	4628      	mov	r0, r5
    5b6a:	b002      	add	sp, #8
    5b6c:	bd70      	pop	{r4, r5, r6, pc}

00005b6e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    5b6e:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    5b70:	680c      	ldr	r4, [r1, #0]
{
    5b72:	4606      	mov	r6, r0
    5b74:	460d      	mov	r5, r1
	if (*mem_head) {
    5b76:	b11c      	cbz	r4, 5b80 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    5b78:	1de3      	adds	r3, r4, #7
    5b7a:	f023 0303 	bic.w	r3, r3, #3
    5b7e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    5b80:	2204      	movs	r2, #4
    5b82:	4629      	mov	r1, r5
    5b84:	4630      	mov	r0, r6
    5b86:	f7fc f839 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    5b8a:	1df2      	adds	r2, r6, #7
    5b8c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    5b90:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    5b92:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    5b94:	602e      	str	r6, [r5, #0]
    5b96:	bd70      	pop	{r4, r5, r6, pc}

00005b98 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    5b98:	b118      	cbz	r0, 5ba2 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    5b9a:	3007      	adds	r0, #7
    5b9c:	f020 0003 	bic.w	r0, r0, #3
    5ba0:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    5ba2:	4770      	bx	lr

00005ba4 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    5ba4:	fb02 0001 	mla	r0, r2, r1, r0
    5ba8:	4770      	bx	lr

00005baa <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    5baa:	1a40      	subs	r0, r0, r1
    5bac:	b280      	uxth	r0, r0
}
    5bae:	fbb0 f0f2 	udiv	r0, r0, r2
    5bb2:	4770      	bx	lr

00005bb4 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    5bb4:	b510      	push	{r4, lr}
	src += len;
    5bb6:	4411      	add	r1, r2
    5bb8:	3801      	subs	r0, #1
	while (len--) {
    5bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5bbe:	3a01      	subs	r2, #1
    5bc0:	b292      	uxth	r2, r2
    5bc2:	429a      	cmp	r2, r3
    5bc4:	d100      	bne.n	5bc8 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    5bc6:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    5bc8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    5bcc:	f800 4f01 	strb.w	r4, [r0, #1]!
    5bd0:	e7f5      	b.n	5bbe <mem_rcopy+0xa>

00005bd2 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    5bd2:	4401      	add	r1, r0
	while (len--) {
    5bd4:	4288      	cmp	r0, r1
    5bd6:	d101      	bne.n	5bdc <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    5bd8:	2000      	movs	r0, #0
    5bda:	4770      	bx	lr
		if (*src++) {
    5bdc:	f810 3b01 	ldrb.w	r3, [r0], #1
    5be0:	2b00      	cmp	r3, #0
    5be2:	d0f7      	beq.n	5bd4 <mem_nz+0x2>
			return 1;
    5be4:	2001      	movs	r0, #1
}
    5be6:	4770      	bx	lr

00005be8 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    5be8:	6010      	str	r0, [r2, #0]
    5bea:	6008      	str	r0, [r1, #0]

	return link;
}
    5bec:	4770      	bx	lr

00005bee <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    5bee:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    5bf0:	6814      	ldr	r4, [r2, #0]
    5bf2:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    5bf4:	6814      	ldr	r4, [r2, #0]
    5bf6:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    5bf8:	6010      	str	r0, [r2, #0]

	return link;
}
    5bfa:	bd10      	pop	{r4, pc}

00005bfc <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    5bfc:	4288      	cmp	r0, r1
    5bfe:	d003      	beq.n	5c08 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    5c00:	b11a      	cbz	r2, 5c0a <memq_peek+0xe>
		*mem = head->mem;
    5c02:	6843      	ldr	r3, [r0, #4]
    5c04:	6013      	str	r3, [r2, #0]
    5c06:	4770      	bx	lr
		return NULL;
    5c08:	2000      	movs	r0, #0
	}

	return head;
}
    5c0a:	4770      	bx	lr

00005c0c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    5c0c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    5c0e:	4283      	cmp	r3, r0
    5c10:	d009      	beq.n	5c26 <memq_dequeue+0x1a>
	if (mem) {
    5c12:	b122      	cbz	r2, 5c1e <memq_dequeue+0x12>
		*mem = head->mem;
    5c14:	6858      	ldr	r0, [r3, #4]
    5c16:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    5c18:	681a      	ldr	r2, [r3, #0]
    5c1a:	600a      	str	r2, [r1, #0]

	return link;
    5c1c:	e001      	b.n	5c22 <memq_dequeue+0x16>
	if (!link) {
    5c1e:	2b00      	cmp	r3, #0
    5c20:	d1fa      	bne.n	5c18 <memq_dequeue+0xc>
}
    5c22:	4618      	mov	r0, r3
    5c24:	4770      	bx	lr
		return NULL;
    5c26:	2300      	movs	r3, #0
    5c28:	e7fb      	b.n	5c22 <memq_dequeue+0x16>
	...

00005c2c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    5c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    5c30:	4f11      	ldr	r7, [pc, #68]	; (5c78 <mayfly_init+0x4c>)
    5c32:	f8df 9048 	ldr.w	r9, [pc, #72]	; 5c7c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    5c36:	2604      	movs	r6, #4
	while (callee_id--) {
    5c38:	3e01      	subs	r6, #1
    5c3a:	b2f6      	uxtb	r6, r6
    5c3c:	2eff      	cmp	r6, #255	; 0xff
    5c3e:	d019      	beq.n	5c74 <mayfly_init+0x48>
    5c40:	b233      	sxth	r3, r6
    5c42:	ea4f 0883 	mov.w	r8, r3, lsl #2
    5c46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5c4a:	011d      	lsls	r5, r3, #4
    5c4c:	2404      	movs	r4, #4
    5c4e:	f04f 0a0c 	mov.w	sl, #12
    5c52:	e00a      	b.n	5c6a <mayfly_init+0x3e>
    5c54:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    5c58:	1d0a      	adds	r2, r1, #4
    5c5a:	eb04 0008 	add.w	r0, r4, r8
    5c5e:	443a      	add	r2, r7
    5c60:	4439      	add	r1, r7
    5c62:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    5c66:	f7ff ffbf 	bl	5be8 <memq_init>
		while (caller_id--) {
    5c6a:	3c01      	subs	r4, #1
    5c6c:	b2e4      	uxtb	r4, r4
    5c6e:	2cff      	cmp	r4, #255	; 0xff
    5c70:	d1f0      	bne.n	5c54 <mayfly_init+0x28>
    5c72:	e7e1      	b.n	5c38 <mayfly_init+0xc>
    5c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c78:	200004a0 	.word	0x200004a0
    5c7c:	20000420 	.word	0x20000420

00005c80 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    5c80:	b4f0      	push	{r4, r5, r6, r7}
    5c82:	4b12      	ldr	r3, [pc, #72]	; (5ccc <mayfly_enable+0x4c>)
    5c84:	4605      	mov	r5, r0
    5c86:	460f      	mov	r7, r1
    5c88:	260c      	movs	r6, #12
    5c8a:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    5c8c:	b172      	cbz	r2, 5cac <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    5c8e:	4361      	muls	r1, r4
    5c90:	fb06 1400 	mla	r4, r6, r0, r1
    5c94:	4423      	add	r3, r4
    5c96:	7a59      	ldrb	r1, [r3, #9]
    5c98:	7a18      	ldrb	r0, [r3, #8]
    5c9a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    5c9c:	bf04      	itt	eq
    5c9e:	3101      	addeq	r1, #1
    5ca0:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    5ca2:	4628      	mov	r0, r5
    5ca4:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    5ca6:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    5ca8:	f00a bb9c 	b.w	103e4 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    5cac:	434c      	muls	r4, r1
    5cae:	fb06 4400 	mla	r4, r6, r0, r4
    5cb2:	4423      	add	r3, r4
    5cb4:	7a9c      	ldrb	r4, [r3, #10]
    5cb6:	7ada      	ldrb	r2, [r3, #11]
    5cb8:	42a2      	cmp	r2, r4
    5cba:	d104      	bne.n	5cc6 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    5cbc:	3201      	adds	r2, #1
    5cbe:	729a      	strb	r2, [r3, #10]
}
    5cc0:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    5cc2:	f00a bbbd 	b.w	10440 <mayfly_pend>
}
    5cc6:	bcf0      	pop	{r4, r5, r6, r7}
    5cc8:	4770      	bx	lr
    5cca:	bf00      	nop
    5ccc:	200004a0 	.word	0x200004a0

00005cd0 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    5cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cd2:	4605      	mov	r5, r0
    5cd4:	460e      	mov	r6, r1
    5cd6:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    5cd8:	b18a      	cbz	r2, 5cfe <mayfly_enqueue+0x2e>
    5cda:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    5cdc:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    5cde:	7820      	ldrb	r0, [r4, #0]
    5ce0:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    5ce2:	f010 0703 	ands.w	r7, r0, #3
    5ce6:	d029      	beq.n	5d3c <mayfly_enqueue+0x6c>
		if (chain) {
    5ce8:	b303      	cbz	r3, 5d2c <mayfly_enqueue+0x5c>
			if (state != 1) {
    5cea:	2f01      	cmp	r7, #1
    5cec:	d039      	beq.n	5d62 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    5cee:	3201      	adds	r2, #1
    5cf0:	b2d2      	uxtb	r2, r2
    5cf2:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    5cf4:	4631      	mov	r1, r6
    5cf6:	4628      	mov	r0, r5
    5cf8:	f00a fba2 	bl	10440 <mayfly_pend>
    5cfc:	e01c      	b.n	5d38 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    5cfe:	f00a fb8d 	bl	1041c <mayfly_prio_is_equal>
    5d02:	2800      	cmp	r0, #0
    5d04:	d0e9      	beq.n	5cda <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    5d06:	4631      	mov	r1, r6
    5d08:	4628      	mov	r0, r5
    5d0a:	f00a fb79 	bl	10400 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    5d0e:	2800      	cmp	r0, #0
    5d10:	d0e3      	beq.n	5cda <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    5d12:	2330      	movs	r3, #48	; 0x30
    5d14:	220c      	movs	r2, #12
    5d16:	4373      	muls	r3, r6
    5d18:	fb02 3305 	mla	r3, r2, r5, r3
    5d1c:	4a12      	ldr	r2, [pc, #72]	; (5d68 <mayfly_enqueue+0x98>)
    5d1e:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    5d20:	7a93      	ldrb	r3, [r2, #10]
    5d22:	7ad2      	ldrb	r2, [r2, #11]
    5d24:	1a9b      	subs	r3, r3, r2
    5d26:	bf18      	it	ne
    5d28:	2301      	movne	r3, #1
    5d2a:	e7d7      	b.n	5cdc <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    5d2c:	3202      	adds	r2, #2
    5d2e:	b2d2      	uxtb	r2, r2
    5d30:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    5d32:	68e3      	ldr	r3, [r4, #12]
    5d34:	68a0      	ldr	r0, [r4, #8]
    5d36:	4798      	blx	r3
		return 0;
    5d38:	2000      	movs	r0, #0
    5d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	d0f8      	beq.n	5d32 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    5d40:	3201      	adds	r2, #1
    5d42:	b2d2      	uxtb	r2, r2
    5d44:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    5d46:	2304      	movs	r3, #4
    5d48:	2230      	movs	r2, #48	; 0x30
    5d4a:	fb12 3206 	smlabb	r2, r2, r6, r3
    5d4e:	230c      	movs	r3, #12
    5d50:	fb13 2305 	smlabb	r3, r3, r5, r2
    5d54:	4a04      	ldr	r2, [pc, #16]	; (5d68 <mayfly_enqueue+0x98>)
    5d56:	6860      	ldr	r0, [r4, #4]
    5d58:	441a      	add	r2, r3
    5d5a:	4621      	mov	r1, r4
    5d5c:	f7ff ff47 	bl	5bee <memq_enqueue>
    5d60:	e7c8      	b.n	5cf4 <mayfly_enqueue+0x24>
			return 1;
    5d62:	4638      	mov	r0, r7

	return 0;
}
    5d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d66:	bf00      	nop
    5d68:	200004a0 	.word	0x200004a0

00005d6c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    5d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d70:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    5d74:	b089      	sub	sp, #36	; 0x24
    5d76:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    5d78:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    5d7c:	4e43      	ldr	r6, [pc, #268]	; (5e8c <mayfly_run+0x120>)
    5d7e:	9304      	str	r3, [sp, #16]
{
    5d80:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    5d82:	2404      	movs	r4, #4
	u8_t disable = 0;
    5d84:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    5d88:	3c01      	subs	r4, #1
    5d8a:	b2e4      	uxtb	r4, r4
    5d8c:	2cff      	cmp	r4, #255	; 0xff
    5d8e:	d10b      	bne.n	5da8 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    5d90:	9b01      	ldr	r3, [sp, #4]
    5d92:	2b00      	cmp	r3, #0
    5d94:	d076      	beq.n	5e84 <mayfly_run+0x118>
    5d96:	f1b8 0f00 	cmp.w	r8, #0
    5d9a:	d173      	bne.n	5e84 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    5d9c:	4642      	mov	r2, r8
    5d9e:	4629      	mov	r1, r5
    5da0:	4628      	mov	r0, r5
    5da2:	f00a fb1f 	bl	103e4 <mayfly_enable_cb>
    5da6:	e06d      	b.n	5e84 <mayfly_run+0x118>
		struct mayfly *m = 0;
    5da8:	f10d 0b20 	add.w	fp, sp, #32
    5dac:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    5dae:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    5db0:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    5db4:	f04f 0930 	mov.w	r9, #48	; 0x30
    5db8:	fb07 f304 	mul.w	r3, r7, r4
    5dbc:	fb09 3005 	mla	r0, r9, r5, r3
    5dc0:	1831      	adds	r1, r6, r0
    5dc2:	465a      	mov	r2, fp
    5dc4:	6849      	ldr	r1, [r1, #4]
    5dc6:	5830      	ldr	r0, [r6, r0]
    5dc8:	9302      	str	r3, [sp, #8]
    5dca:	f7ff ff17 	bl	5bfc <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    5dce:	9b04      	ldr	r3, [sp, #16]
    5dd0:	fb17 3704 	smlabb	r7, r7, r4, r3
    5dd4:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    5dd6:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    5dd8:	9303      	str	r3, [sp, #12]
		while (link) {
    5dda:	f1ba 0f00 	cmp.w	sl, #0
    5dde:	d119      	bne.n	5e14 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    5de0:	2230      	movs	r2, #48	; 0x30
    5de2:	230c      	movs	r3, #12
    5de4:	436a      	muls	r2, r5
    5de6:	fb03 2204 	mla	r2, r3, r4, r2
    5dea:	4432      	add	r2, r6
    5dec:	7a91      	ldrb	r1, [r2, #10]
    5dee:	7ad0      	ldrb	r0, [r2, #11]
    5df0:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    5df2:	bf1e      	ittt	ne
    5df4:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    5df6:	2201      	movne	r2, #1
    5df8:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    5dfa:	2230      	movs	r2, #48	; 0x30
    5dfc:	436a      	muls	r2, r5
    5dfe:	fb03 2304 	mla	r3, r3, r4, r2
    5e02:	4433      	add	r3, r6
    5e04:	7a1a      	ldrb	r2, [r3, #8]
    5e06:	7a59      	ldrb	r1, [r3, #9]
    5e08:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    5e0a:	bf1c      	itt	ne
    5e0c:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    5e0e:	f04f 0801 	movne.w	r8, #1
    5e12:	e7b9      	b.n	5d88 <mayfly_run+0x1c>
			req = m->_req;
    5e14:	9b07      	ldr	r3, [sp, #28]
    5e16:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    5e18:	785a      	ldrb	r2, [r3, #1]
    5e1a:	1abf      	subs	r7, r7, r2
    5e1c:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    5e20:	2f01      	cmp	r7, #1
    5e22:	d104      	bne.n	5e2e <mayfly_run+0xc2>
				m->_ack--;
    5e24:	3a01      	subs	r2, #1
    5e26:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    5e28:	6898      	ldr	r0, [r3, #8]
    5e2a:	68da      	ldr	r2, [r3, #12]
    5e2c:	4790      	blx	r2
			req = m->_req;
    5e2e:	9a07      	ldr	r2, [sp, #28]
    5e30:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    5e32:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    5e34:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    5e36:	1a9a      	subs	r2, r3, r2
    5e38:	f002 0203 	and.w	r2, r2, #3
    5e3c:	2a01      	cmp	r2, #1
    5e3e:	9305      	str	r3, [sp, #20]
    5e40:	d00d      	beq.n	5e5e <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    5e42:	9b02      	ldr	r3, [sp, #8]
    5e44:	9903      	ldr	r1, [sp, #12]
    5e46:	fb09 3005 	mla	r0, r9, r5, r3
    5e4a:	4430      	add	r0, r6
    5e4c:	2200      	movs	r2, #0
    5e4e:	6840      	ldr	r0, [r0, #4]
    5e50:	f7ff fedc 	bl	5c0c <memq_dequeue>
				m->_link = link;
    5e54:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    5e56:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    5e58:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    5e5c:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    5e5e:	9b02      	ldr	r3, [sp, #8]
    5e60:	fb09 3305 	mla	r3, r9, r5, r3
    5e64:	18f1      	adds	r1, r6, r3
    5e66:	465a      	mov	r2, fp
    5e68:	6849      	ldr	r1, [r1, #4]
    5e6a:	58f0      	ldr	r0, [r6, r3]
    5e6c:	f7ff fec6 	bl	5bfc <memq_peek>
			if (state == 1) {
    5e70:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    5e72:	4682      	mov	sl, r0
			if (state == 1) {
    5e74:	d1b1      	bne.n	5dda <mayfly_run+0x6e>
				if (caller_id || link) {
    5e76:	b90c      	cbnz	r4, 5e7c <mayfly_run+0x110>
    5e78:	2800      	cmp	r0, #0
    5e7a:	d0b1      	beq.n	5de0 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    5e7c:	4629      	mov	r1, r5
    5e7e:	4628      	mov	r0, r5
    5e80:	f00a fade 	bl	10440 <mayfly_pend>
	}
}
    5e84:	b009      	add	sp, #36	; 0x24
    5e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e8a:	bf00      	nop
    5e8c:	200004a0 	.word	0x200004a0

00005e90 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    5e90:	b510      	push	{r4, lr}
    5e92:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    5e94:	2000      	movs	r0, #0

	while (octets_len--) {
    5e96:	3901      	subs	r1, #1
    5e98:	b2c9      	uxtb	r1, r1
    5e9a:	29ff      	cmp	r1, #255	; 0xff
    5e9c:	d100      	bne.n	5ea0 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    5e9e:	bd10      	pop	{r4, pc}
		bite = *octets;
    5ea0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	d0f6      	beq.n	5e96 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    5ea8:	1e5c      	subs	r4, r3, #1
			one_count++;
    5eaa:	3001      	adds	r0, #1
			bite &= (bite - 1);
    5eac:	4023      	ands	r3, r4
			one_count++;
    5eae:	b2c0      	uxtb	r0, r0
    5eb0:	e7f8      	b.n	5ea4 <util_ones_count_get+0x14>

00005eb2 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    5eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    5eb4:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    5eb6:	6805      	ldr	r5, [r0, #0]
	current = previous;
    5eb8:	461a      	mov	r2, r3
	total = 0;
    5eba:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    5ebc:	2aff      	cmp	r2, #255	; 0xff
    5ebe:	d101      	bne.n	5ec4 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    5ec0:	2000      	movs	r0, #0
    5ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    5ec4:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    5ec8:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    5eca:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    5ece:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    5ed2:	d004      	beq.n	5ede <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    5ed4:	68b3      	ldr	r3, [r6, #8]
    5ed6:	441c      	add	r4, r3
		current = ticker_current->next;
    5ed8:	4613      	mov	r3, r2
    5eda:	463a      	mov	r2, r7
    5edc:	e7ee      	b.n	5ebc <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    5ede:	4293      	cmp	r3, r2
    5ee0:	d100      	bne.n	5ee4 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    5ee2:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    5ee4:	b21b      	sxth	r3, r3
    5ee6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5eea:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    5eec:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    5eee:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    5ef2:	7833      	ldrb	r3, [r6, #0]
    5ef4:	2bff      	cmp	r3, #255	; 0xff
    5ef6:	d006      	beq.n	5f06 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    5ef8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5efc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    5f00:	689a      	ldr	r2, [r3, #8]
    5f02:	4402      	add	r2, r0
    5f04:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    5f06:	4420      	add	r0, r4
    5f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f0a <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    5f0a:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    5f0c:	1a55      	subs	r5, r2, r1
    5f0e:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    5f12:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    5f14:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    5f16:	d109      	bne.n	5f2c <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5f18:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    5f1c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    5f1e:	42a2      	cmp	r2, r4
    5f20:	d90e      	bls.n	5f40 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    5f22:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    5f24:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    5f26:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    5f28:	6144      	str	r4, [r0, #20]
    5f2a:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5f2c:	1a8a      	subs	r2, r1, r2
    5f2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    5f32:	4293      	cmp	r3, r2
    5f34:	d901      	bls.n	5f3a <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    5f36:	1a9a      	subs	r2, r3, r2
    5f38:	e7f1      	b.n	5f1e <ticks_to_expire_prep+0x14>
    5f3a:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    5f3c:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    5f3e:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    5f40:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    5f42:	2200      	movs	r2, #0
    5f44:	e7ef      	b.n	5f26 <ticks_to_expire_prep+0x1c>

00005f46 <ticker_job_op_cb>:
{
    5f46:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    5f48:	2200      	movs	r2, #0
    5f4a:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    5f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    5f4e:	6259      	str	r1, [r3, #36]	; 0x24
{
    5f50:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    5f52:	b10a      	cbz	r2, 5f58 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    5f54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    5f56:	4710      	bx	r2
    5f58:	4770      	bx	lr

00005f5a <ticker_worker>:
{
    5f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    5f5e:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    5f60:	2301      	movs	r3, #1
{
    5f62:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    5f64:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    5f66:	2d00      	cmp	r5, #0
    5f68:	d14c      	bne.n	6004 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    5f6a:	7f43      	ldrb	r3, [r0, #29]
    5f6c:	2bff      	cmp	r3, #255	; 0xff
    5f6e:	d102      	bne.n	5f76 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    5f70:	77c5      	strb	r5, [r0, #31]
		return;
    5f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    5f76:	f009 fd9f 	bl	fab8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5f7a:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    5f7c:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    5f7e:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    5f82:	1bc7      	subs	r7, r0, r7
    5f84:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    5f88:	2eff      	cmp	r6, #255	; 0xff
    5f8a:	d006      	beq.n	5f9a <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    5f8c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    5f90:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    5f94:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    5f96:	429f      	cmp	r7, r3
    5f98:	d218      	bcs.n	5fcc <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    5f9a:	7aa2      	ldrb	r2, [r4, #10]
    5f9c:	7ae3      	ldrb	r3, [r4, #11]
    5f9e:	4293      	cmp	r3, r2
    5fa0:	d105      	bne.n	5fae <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    5fa2:	3301      	adds	r3, #1
    5fa4:	b2db      	uxtb	r3, r3
			last = 0;
    5fa6:	2b02      	cmp	r3, #2
    5fa8:	bf08      	it	eq
    5faa:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    5fac:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    5fae:	7ae3      	ldrb	r3, [r4, #11]
    5fb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    5fb4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    5fb6:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    5fb8:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    5fba:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    5fbc:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    5fbe:	46ac      	mov	ip, r5
    5fc0:	4623      	mov	r3, r4
    5fc2:	2104      	movs	r1, #4
    5fc4:	2003      	movs	r0, #3
}
    5fc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    5fca:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    5fcc:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    5fce:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    5fd0:	788a      	ldrb	r2, [r1, #2]
    5fd2:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    5fd4:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    5fd8:	1a9b      	subs	r3, r3, r2
    5fda:	b2db      	uxtb	r3, r3
    5fdc:	2b01      	cmp	r3, #1
    5fde:	d1d3      	bne.n	5f88 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    5fe0:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    5fe4:	3a01      	subs	r2, #1
    5fe6:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    5fe8:	f1b9 0f00 	cmp.w	r9, #0
    5fec:	d0cc      	beq.n	5f88 <ticker_worker+0x2e>
					   ticks_expired -
    5fee:	6948      	ldr	r0, [r1, #20]
    5ff0:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    5ff2:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    5ff4:	1a28      	subs	r0, r5, r0
    5ff6:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    5ff8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5ffc:	690b      	ldr	r3, [r1, #16]
    5ffe:	6a49      	ldr	r1, [r1, #36]	; 0x24
    6000:	47c8      	blx	r9
    6002:	e7c1      	b.n	5f88 <ticker_worker+0x2e>
    6004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006008 <ticker_job>:
{
    6008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    600c:	7fc2      	ldrb	r2, [r0, #31]
{
    600e:	b093      	sub	sp, #76	; 0x4c
    6010:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    6012:	2a00      	cmp	r2, #0
    6014:	f040 83b5 	bne.w	6782 <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    6018:	6943      	ldr	r3, [r0, #20]
    601a:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    601c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    601e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    6020:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    6022:	7ac0      	ldrb	r0, [r0, #11]
    6024:	4298      	cmp	r0, r3
    6026:	f000 808f 	beq.w	6148 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    602a:	440b      	add	r3, r1
    602c:	b2db      	uxtb	r3, r3
			first = 0;
    602e:	2b02      	cmp	r3, #2
    6030:	bf08      	it	eq
    6032:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    6034:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    6038:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    603c:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    603e:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    6042:	9b05      	ldr	r3, [sp, #20]
    6044:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    6046:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    604a:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    604e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6052:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    6054:	f8db 3000 	ldr.w	r3, [fp]
    6058:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    605a:	f8db 3004 	ldr.w	r3, [fp, #4]
    605e:	930b      	str	r3, [sp, #44]	; 0x2c
    6060:	f89b 3009 	ldrb.w	r3, [fp, #9]
    6064:	3b01      	subs	r3, #1
    6066:	b2db      	uxtb	r3, r3
    6068:	9302      	str	r3, [sp, #8]
	pending = 0;
    606a:	2300      	movs	r3, #0
    606c:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    606e:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    6072:	9b02      	ldr	r3, [sp, #8]
    6074:	2bff      	cmp	r3, #255	; 0xff
    6076:	d16a      	bne.n	614e <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    6078:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    607c:	9a03      	ldr	r2, [sp, #12]
    607e:	1a9b      	subs	r3, r3, r2
    6080:	bf18      	it	ne
    6082:	2301      	movne	r3, #1
    6084:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    6086:	9b01      	ldr	r3, [sp, #4]
    6088:	b1e3      	cbz	r3, 60c4 <ticker_job+0xbc>
	node = &instance->node[0];
    608a:	f8db 3000 	ldr.w	r3, [fp]
    608e:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    6090:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    6094:	f89b 601d 	ldrb.w	r6, [fp, #29]
    6098:	2eff      	cmp	r6, #255	; 0xff
    609a:	d00c      	beq.n	60b6 <ticker_job+0xae>
		ticker = &node[id_expired];
    609c:	b237      	sxth	r7, r6
    609e:	9b04      	ldr	r3, [sp, #16]
    60a0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    60a4:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    60a8:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    60aa:	4545      	cmp	r5, r8
    60ac:	f240 8136 	bls.w	631c <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    60b0:	eba5 0508 	sub.w	r5, r5, r8
    60b4:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    60b6:	9b02      	ldr	r3, [sp, #8]
    60b8:	9a01      	ldr	r2, [sp, #4]
    60ba:	9903      	ldr	r1, [sp, #12]
    60bc:	42b1      	cmp	r1, r6
    60be:	bf18      	it	ne
    60c0:	4613      	movne	r3, r2
    60c2:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    60c4:	f8db 3000 	ldr.w	r3, [fp]
    60c8:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    60ca:	f8db 3004 	ldr.w	r3, [fp, #4]
    60ce:	9310      	str	r3, [sp, #64]	; 0x40
    60d0:	f89b 3009 	ldrb.w	r3, [fp, #9]
    60d4:	3b01      	subs	r3, #1
    60d6:	b2db      	uxtb	r3, r3
    60d8:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    60da:	9b01      	ldr	r3, [sp, #4]
    60dc:	2bff      	cmp	r3, #255	; 0xff
    60de:	f040 8170 	bne.w	63c2 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    60e2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    60e6:	9a03      	ldr	r2, [sp, #12]
    60e8:	4293      	cmp	r3, r2
	if (!pending) {
    60ea:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    60ec:	f040 8340 	bne.w	6770 <ticker_job+0x768>
	if (!pending) {
    60f0:	b95b      	cbnz	r3, 610a <ticker_job+0x102>
    60f2:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    60f6:	f8db 3004 	ldr.w	r3, [fp, #4]
    60fa:	9301      	str	r3, [sp, #4]
    60fc:	3c01      	subs	r4, #1
    60fe:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    6100:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    6104:	2cff      	cmp	r4, #255	; 0xff
    6106:	f040 82a0 	bne.w	664a <ticker_job+0x642>
	instance->job_guard = 0;
    610a:	2300      	movs	r3, #0
    610c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    6110:	9b02      	ldr	r3, [sp, #8]
    6112:	b14b      	cbz	r3, 6128 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    6114:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6118:	2bff      	cmp	r3, #255	; 0xff
    611a:	f040 82e9 	bne.w	66f0 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    611e:	f009 fcb3 	bl	fa88 <cntr_stop>
    6122:	b908      	cbnz	r0, 6128 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    6124:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    6128:	f89b 301f 	ldrb.w	r3, [fp, #31]
    612c:	2b00      	cmp	r3, #0
    612e:	f000 8328 	beq.w	6782 <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    6132:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    6136:	465b      	mov	r3, fp
    6138:	2201      	movs	r2, #1
    613a:	2103      	movs	r1, #3
    613c:	2004      	movs	r0, #4
    613e:	46a4      	mov	ip, r4
}
    6140:	b013      	add	sp, #76	; 0x4c
    6142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    6146:	4760      	bx	ip
		flag_elapsed = 0;
    6148:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    614a:	4690      	mov	r8, r2
    614c:	e77f      	b.n	604e <ticker_job+0x46>
		user = &users[count_user];
    614e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6150:	9a02      	ldr	r2, [sp, #8]
    6152:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    615a:	78f9      	ldrb	r1, [r7, #3]
    615c:	78be      	ldrb	r6, [r7, #2]
    615e:	428e      	cmp	r6, r1
    6160:	f000 80d7 	beq.w	6312 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    6164:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    6166:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    6168:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    616c:	0112      	lsls	r2, r2, #4
    616e:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    6170:	1c73      	adds	r3, r6, #1
    6172:	b2db      	uxtb	r3, r3
				middle = 0;
    6174:	4298      	cmp	r0, r3
    6176:	bf08      	it	eq
    6178:	2300      	moveq	r3, #0
			user->middle = middle;
    617a:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    617c:	9b06      	ldr	r3, [sp, #24]
    617e:	5c9a      	ldrb	r2, [r3, r2]
    6180:	2a03      	cmp	r2, #3
    6182:	d9eb      	bls.n	615c <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    6184:	2a05      	cmp	r2, #5
    6186:	d817      	bhi.n	61b8 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    6188:	7869      	ldrb	r1, [r5, #1]
    618a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    618e:	930a      	str	r3, [sp, #40]	; 0x28
    6190:	980a      	ldr	r0, [sp, #40]	; 0x28
    6192:	9b04      	ldr	r3, [sp, #16]
    6194:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    6198:	7863      	ldrb	r3, [r4, #1]
    619a:	78a0      	ldrb	r0, [r4, #2]
    619c:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    619e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    61a2:	d009      	beq.n	61b8 <ticker_job+0x1b0>
			    (state == 0) ||
    61a4:	2a04      	cmp	r2, #4
    61a6:	d10c      	bne.n	61c2 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    61a8:	686a      	ldr	r2, [r5, #4]
    61aa:	b952      	cbnz	r2, 61c2 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    61ac:	68aa      	ldr	r2, [r5, #8]
    61ae:	b942      	cbnz	r2, 61c2 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    61b0:	68ea      	ldr	r2, [r5, #12]
    61b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    61b6:	d104      	bne.n	61c2 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    61b8:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    61ba:	4628      	mov	r0, r5
    61bc:	f7ff fec3 	bl	5f46 <ticker_job_op_cb>
    61c0:	e7cb      	b.n	615a <ticker_job+0x152>
			if (state == 1) {
    61c2:	2b01      	cmp	r3, #1
    61c4:	f040 809b 	bne.w	62fe <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    61c8:	4658      	mov	r0, fp
    61ca:	f7ff fe72 	bl	5eb2 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    61ce:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    61d0:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    61d2:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    61d4:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    61d6:	f040 8084 	bne.w	62e2 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    61da:	f8db 3014 	ldr.w	r3, [fp, #20]
    61de:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    61e0:	f009 fc6a 	bl	fab8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    61e4:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    61e6:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    61e8:	1ac3      	subs	r3, r0, r3
    61ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    61ee:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    61f0:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    61f2:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    61f4:	bf9e      	ittt	ls
    61f6:	6962      	ldrls	r2, [r4, #20]
    61f8:	1b92      	subls	r2, r2, r6
    61fa:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    61fc:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    61fe:	bf96      	itet	ls
    6200:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    6202:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    6204:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    6206:	b18a      	cbz	r2, 622c <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    6208:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    620a:	b179      	cbz	r1, 622c <ticker_job+0x224>
		user_op->params.update.lazy--;
    620c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    6210:	fa1f fe8e 	uxth.w	lr, lr
    6214:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6218:	429a      	cmp	r2, r3
    621a:	d32b      	bcc.n	6274 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    621c:	f8df 9324 	ldr.w	r9, [pc, #804]	; 6544 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    6220:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    6224:	45e6      	cmp	lr, ip
    6226:	d847      	bhi.n	62b8 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    6228:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    622c:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    622e:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    6230:	4413      	add	r3, r2
    6232:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    6234:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    6236:	6963      	ldr	r3, [r4, #20]
    6238:	4413      	add	r3, r2
    623a:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    623c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    623e:	4620      	mov	r0, r4
    6240:	f7ff fe63 	bl	5f0a <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    6244:	69a2      	ldr	r2, [r4, #24]
    6246:	892b      	ldrh	r3, [r5, #8]
    6248:	4413      	add	r3, r2
    624a:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    624c:	896a      	ldrh	r2, [r5, #10]
    624e:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    6250:	bf8c      	ite	hi
    6252:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    6254:	2300      	movls	r3, #0
    6256:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    6258:	7bab      	ldrb	r3, [r5, #14]
    625a:	b103      	cbz	r3, 625e <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    625c:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    625e:	9b04      	ldr	r3, [sp, #16]
    6260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6262:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    6266:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    6268:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    626c:	3301      	adds	r3, #1
    626e:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    6270:	2100      	movs	r1, #0
    6272:	e7a2      	b.n	61ba <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    6274:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6278:	45e6      	cmp	lr, ip
    627a:	d2cf      	bcs.n	621c <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    627c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    627e:	4eaf      	ldr	r6, [pc, #700]	; (653c <ticker_job+0x534>)
    6280:	48af      	ldr	r0, [pc, #700]	; (6540 <ticker_job+0x538>)
    6282:	198e      	adds	r6, r1, r6
    6284:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    6286:	bf81      	itttt	hi
    6288:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    628c:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    6290:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    6294:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    6296:	6a66      	ldr	r6, [r4, #36]	; 0x24
    6298:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    629a:	bf8c      	ite	hi
    629c:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    62a0:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    62a4:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    62a6:	4491      	add	r9, r2
			ticker->lazy_current--;
    62a8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    62ac:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    62ae:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    62b2:	f8a4 c01e 	strh.w	ip, [r4, #30]
    62b6:	e7af      	b.n	6218 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    62b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    62ba:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    62bc:	48a0      	ldr	r0, [pc, #640]	; (6540 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    62be:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    62c0:	499e      	ldr	r1, [pc, #632]	; (653c <ticker_job+0x534>)
    62c2:	1871      	adds	r1, r6, r1
    62c4:	4281      	cmp	r1, r0
	return 0;
    62c6:	bf8e      	itee	hi
    62c8:	2100      	movhi	r1, #0
		return 1;
    62ca:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    62cc:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    62ce:	4411      	add	r1, r2
			ticker->lazy_current++;
    62d0:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    62d4:	bf8c      	ite	hi
    62d6:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    62d8:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    62da:	440b      	add	r3, r1
			ticker->lazy_current++;
    62dc:	f8a4 c01e 	strh.w	ip, [r4, #30]
    62e0:	e79e      	b.n	6220 <ticker_job+0x218>
		ticker->req = ticker->ack;
    62e2:	78a3      	ldrb	r3, [r4, #2]
    62e4:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    62e6:	786b      	ldrb	r3, [r5, #1]
    62e8:	f89b 201c 	ldrb.w	r2, [fp, #28]
    62ec:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    62ee:	bf01      	itttt	eq
    62f0:	23ff      	moveq	r3, #255	; 0xff
    62f2:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    62f6:	2300      	moveq	r3, #0
    62f8:	f8cb 3018 	streq.w	r3, [fp, #24]
    62fc:	e7b8      	b.n	6270 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    62fe:	2104      	movs	r1, #4
    6300:	465b      	mov	r3, fp
    6302:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    6306:	2201      	movs	r2, #1
    6308:	4608      	mov	r0, r1
    630a:	47a0      	blx	r4
				pending = 1;
    630c:	2301      	movs	r3, #1
				user->middle = prev;
    630e:	70be      	strb	r6, [r7, #2]
				pending = 1;
    6310:	9307      	str	r3, [sp, #28]
    6312:	9b02      	ldr	r3, [sp, #8]
    6314:	3b01      	subs	r3, #1
    6316:	b2db      	uxtb	r3, r3
    6318:	9302      	str	r3, [sp, #8]
    631a:	e6aa      	b.n	6072 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    631c:	f8db 3018 	ldr.w	r3, [fp, #24]
    6320:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    6322:	bf29      	itett	cs
    6324:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    6326:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    6328:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    632c:	2300      	movcs	r3, #0
    632e:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    6332:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    6334:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    6336:	b11b      	cbz	r3, 6340 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    6338:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    633c:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    6340:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    6342:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    6344:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    6346:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    634a:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    634e:	f8d4 e004 	ldr.w	lr, [r4, #4]
    6352:	f1be 0f00 	cmp.w	lr, #0
    6356:	d030      	beq.n	63ba <ticker_job+0x3b2>
    6358:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    635a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 6540 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    635e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6360:	6a21      	ldr	r1, [r4, #32]
    6362:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    6364:	4975      	ldr	r1, [pc, #468]	; (653c <ticker_job+0x534>)
    6366:	1859      	adds	r1, r3, r1
    6368:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    636a:	bf9f      	itttt	ls
    636c:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    6370:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    6374:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    6378:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    637a:	bf92      	itee	ls
    637c:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    637e:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    6380:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    6382:	4473      	add	r3, lr
			while (count--) {
    6384:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    6388:	441a      	add	r2, r3
			while (count--) {
    638a:	d2e8      	bcs.n	635e <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    638c:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    638e:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    6390:	f8db 1014 	ldr.w	r1, [fp, #20]
    6394:	eb03 0209 	add.w	r2, r3, r9
    6398:	4620      	mov	r0, r4
    639a:	f7ff fdb6 	bl	5f0a <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    639e:	8ba3      	ldrh	r3, [r4, #28]
    63a0:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    63a2:	2300      	movs	r3, #0
    63a4:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    63a6:	9b04      	ldr	r3, [sp, #16]
    63a8:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    63ac:	7863      	ldrb	r3, [r4, #1]
    63ae:	3301      	adds	r3, #1
    63b0:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    63b2:	eba8 0805 	sub.w	r8, r8, r5
    63b6:	46b2      	mov	sl, r6
    63b8:	e66c      	b.n	6094 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    63ba:	78a3      	ldrb	r3, [r4, #2]
    63bc:	7063      	strb	r3, [r4, #1]
    63be:	4656      	mov	r6, sl
    63c0:	e7f7      	b.n	63b2 <ticker_job+0x3aa>
		user = &users[count_user];
    63c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    63c4:	9a01      	ldr	r2, [sp, #4]
    63c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    63ca:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    63cc:	685b      	ldr	r3, [r3, #4]
    63ce:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    63d0:	9b04      	ldr	r3, [sp, #16]
    63d2:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    63d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    63da:	f000 808e 	beq.w	64fa <ticker_job+0x4f2>
				ticker = &node[id_insert];
    63de:	fa0f f38a 	sxth.w	r3, sl
    63e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    63e6:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    63e8:	46d0      	mov	r8, sl
    63ea:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    63ee:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    63f2:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    63f4:	f8db 3000 	ldr.w	r3, [fp]
    63f8:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    63fa:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    63fc:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    63fe:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    6400:	8be3      	ldrh	r3, [r4, #30]
    6402:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    6404:	bf86      	itte	hi
    6406:	1a9b      	subhi	r3, r3, r2
    6408:	b29b      	uxthhi	r3, r3
		skip = 0;
    640a:	2300      	movls	r3, #0
    640c:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    640e:	fa0f f388 	sxth.w	r3, r8
    6412:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6416:	00db      	lsls	r3, r3, #3
    6418:	9311      	str	r3, [sp, #68]	; 0x44
    641a:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    641c:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    6420:	f8db 0018 	ldr.w	r0, [fp, #24]
    6424:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    6426:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    642a:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    642c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    6430:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    6434:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    6436:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    6438:	2bff      	cmp	r3, #255	; 0xff
    643a:	d007      	beq.n	644c <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    643c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    6440:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    6444:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    6446:	4281      	cmp	r1, r0
    6448:	f200 80a9 	bhi.w	659e <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    644c:	f8de 0018 	ldr.w	r0, [lr, #24]
    6450:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    6452:	eb01 0c00 	add.w	ip, r1, r0
    6456:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    6458:	2eff      	cmp	r6, #255	; 0xff
    645a:	f040 80ae 	bne.w	65ba <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    645e:	980d      	ldr	r0, [sp, #52]	; 0x34
    6460:	b130      	cbz	r0, 6470 <ticker_job+0x468>
    6462:	9805      	ldr	r0, [sp, #20]
    6464:	4281      	cmp	r1, r0
    6466:	f0c0 80bf 	bcc.w	65e8 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    646a:	2eff      	cmp	r6, #255	; 0xff
    646c:	f040 8185 	bne.w	677a <ticker_job+0x772>
		if (previous == current) {
    6470:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    6472:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    6476:	4283      	cmp	r3, r0
			node[previous].next = id;
    6478:	bf18      	it	ne
    647a:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    647e:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    6482:	bf16      	itet	ne
    6484:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    6488:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    648c:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    6490:	2bff      	cmp	r3, #255	; 0xff
    6492:	d006      	beq.n	64a2 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    6494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    649c:	689a      	ldr	r2, [r3, #8]
    649e:	1a51      	subs	r1, r2, r1
    64a0:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    64a2:	78a3      	ldrb	r3, [r4, #2]
    64a4:	3301      	adds	r3, #1
    64a6:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    64a8:	2100      	movs	r1, #0
			if (user_op) {
    64aa:	2d00      	cmp	r5, #0
    64ac:	d093      	beq.n	63d6 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    64ae:	4628      	mov	r0, r5
    64b0:	f7ff fd49 	bl	5f46 <ticker_job_op_cb>
    64b4:	e78f      	b.n	63d6 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    64b6:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    64ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    64bc:	011b      	lsls	r3, r3, #4
    64be:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    64c0:	f109 0201 	add.w	r2, r9, #1
    64c4:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    64c8:	9a04      	ldr	r2, [sp, #16]
    64ca:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    64cc:	454a      	cmp	r2, r9
    64ce:	bf08      	it	eq
    64d0:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    64d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    64d6:	5cd3      	ldrb	r3, [r2, r3]
    64d8:	2b03      	cmp	r3, #3
    64da:	d10e      	bne.n	64fa <ticker_job+0x4f2>
				id_insert = user_op->id;
    64dc:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    64e0:	9b08      	ldr	r3, [sp, #32]
    64e2:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    64e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    64ea:	7862      	ldrb	r2, [r4, #1]
    64ec:	78a3      	ldrb	r3, [r4, #2]
    64ee:	429a      	cmp	r2, r3
    64f0:	d009      	beq.n	6506 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    64f2:	2101      	movs	r1, #1
    64f4:	4628      	mov	r0, r5
    64f6:	f7ff fd26 	bl	5f46 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    64fa:	9b04      	ldr	r3, [sp, #16]
    64fc:	789b      	ldrb	r3, [r3, #2]
    64fe:	454b      	cmp	r3, r9
    6500:	d1d9      	bne.n	64b6 <ticker_job+0x4ae>
    6502:	9b01      	ldr	r3, [sp, #4]
    6504:	e5e6      	b.n	60d4 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    6506:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    6508:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    650c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    650e:	692b      	ldr	r3, [r5, #16]
    6510:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    6512:	8aab      	ldrh	r3, [r5, #20]
    6514:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    6516:	69ab      	ldr	r3, [r5, #24]
    6518:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    651a:	69eb      	ldr	r3, [r5, #28]
    651c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    651e:	6a2b      	ldr	r3, [r5, #32]
    6520:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    6522:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    6524:	68ab      	ldr	r3, [r5, #8]
    6526:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    6528:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    652a:	686a      	ldr	r2, [r5, #4]
    652c:	4620      	mov	r0, r4
    652e:	f7ff fcec 	bl	5f0a <ticks_to_expire_prep>
	ticker->force = 1;
    6532:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    6534:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    6536:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    6538:	70e3      	strb	r3, [r4, #3]
    653a:	e75b      	b.n	63f4 <ticker_job+0x3ec>
    653c:	ff172b5a 	.word	0xff172b5a
    6540:	7f172b59 	.word	0x7f172b59
    6544:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    6548:	6860      	ldr	r0, [r4, #4]
    654a:	2800      	cmp	r0, #0
    654c:	d07b      	beq.n	6646 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    654e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6550:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    6552:	4b8d      	ldr	r3, [pc, #564]	; (6788 <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    6554:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    6556:	498d      	ldr	r1, [pc, #564]	; (678c <ticker_job+0x784>)
    6558:	18d3      	adds	r3, r2, r3
    655a:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    655c:	bf9c      	itt	ls
    655e:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    6562:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    6566:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    6568:	bf8b      	itete	hi
    656a:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    656c:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    6570:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    6572:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    6574:	4403      	add	r3, r0
		return 1;
    6576:	bf98      	it	ls
    6578:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    657a:	4413      	add	r3, r2
			ticker->lazy_current++;
    657c:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    657e:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    6580:	3201      	adds	r2, #1
    6582:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    6584:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    6586:	4293      	cmp	r3, r2
    6588:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    658c:	bf89      	itett	hi
    658e:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    6590:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    6592:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    6594:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    6596:	bf9c      	itt	ls
    6598:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    659a:	60a1      	strls	r1, [r4, #8]
    659c:	e73d      	b.n	641a <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    659e:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    65a0:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    65a2:	b946      	cbnz	r6, 65b6 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    65a4:	9f05      	ldr	r7, [sp, #20]
    65a6:	42b8      	cmp	r0, r7
    65a8:	d200      	bcs.n	65ac <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    65aa:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    65ac:	9309      	str	r3, [sp, #36]	; 0x24
    65ae:	9605      	str	r6, [sp, #20]
    65b0:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    65b4:	e740      	b.n	6438 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    65b6:	9306      	str	r3, [sp, #24]
    65b8:	e7f8      	b.n	65ac <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    65ba:	b230      	sxth	r0, r6
    65bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    65c0:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    65c4:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    65c6:	68bf      	ldr	r7, [r7, #8]
    65c8:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    65ca:	4567      	cmp	r7, ip
    65cc:	d20a      	bcs.n	65e4 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    65ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    65d0:	69bf      	ldr	r7, [r7, #24]
    65d2:	2f00      	cmp	r7, #0
    65d4:	f47f af43 	bne.w	645e <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    65d8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    65da:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    65de:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    65e2:	e739      	b.n	6458 <ticker_job+0x450>
			return TICKER_NULL;
    65e4:	26ff      	movs	r6, #255	; 0xff
    65e6:	e73a      	b.n	645e <ticker_job+0x456>
	while (id_insert !=
    65e8:	9b06      	ldr	r3, [sp, #24]
    65ea:	4598      	cmp	r8, r3
    65ec:	f43f af59 	beq.w	64a2 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    65f0:	9b06      	ldr	r3, [sp, #24]
    65f2:	2bff      	cmp	r3, #255	; 0xff
    65f4:	d0a8      	beq.n	6548 <ticker_job+0x540>
    65f6:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    65f8:	b233      	sxth	r3, r6
    65fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    65fe:	9305      	str	r3, [sp, #20]
    6600:	9a05      	ldr	r2, [sp, #20]
    6602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6604:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    6608:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    660a:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    660c:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    660e:	bf88      	it	hi
    6610:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    6612:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    6614:	bf8c      	ite	hi
    6616:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    6618:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    661a:	2a00      	cmp	r2, #0
    661c:	d094      	beq.n	6548 <ticker_job+0x540>
    661e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6620:	4293      	cmp	r3, r2
    6622:	d891      	bhi.n	6548 <ticker_job+0x540>
			    skip_collide <= skip &&
    6624:	78fa      	ldrb	r2, [r7, #3]
    6626:	78e3      	ldrb	r3, [r4, #3]
    6628:	429a      	cmp	r2, r3
    662a:	d28d      	bcs.n	6548 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    662c:	4631      	mov	r1, r6
    662e:	4658      	mov	r0, fp
    6630:	f7ff fc3f 	bl	5eb2 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    6634:	78bb      	ldrb	r3, [r7, #2]
    6636:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    6638:	9a05      	ldr	r2, [sp, #20]
    663a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    663c:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    663e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    6642:	46b2      	mov	sl, r6
    6644:	e6e9      	b.n	641a <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    6646:	2101      	movs	r1, #1
    6648:	e72f      	b.n	64aa <ticker_job+0x4a2>
		user = &users[count_user];
    664a:	9b01      	ldr	r3, [sp, #4]
    664c:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    6650:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    6652:	786b      	ldrb	r3, [r5, #1]
    6654:	78ea      	ldrb	r2, [r5, #3]
    6656:	429a      	cmp	r2, r3
    6658:	d102      	bne.n	6660 <ticker_job+0x658>
    665a:	3c01      	subs	r4, #1
    665c:	b2e4      	uxtb	r4, r4
    665e:	e551      	b.n	6104 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    6660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6664:	011b      	lsls	r3, r3, #4
    6666:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    6668:	5cf3      	ldrb	r3, [r6, r3]
    666a:	2b01      	cmp	r3, #1
    666c:	d025      	beq.n	66ba <ticker_job+0x6b2>
    666e:	2b02      	cmp	r3, #2
    6670:	d12a      	bne.n	66c8 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    6672:	f8d2 c004 	ldr.w	ip, [r2, #4]
    6676:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    6678:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    667c:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    6680:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    6684:	28ff      	cmp	r0, #255	; 0xff
    6686:	d004      	beq.n	6692 <ticker_job+0x68a>
    6688:	6819      	ldr	r1, [r3, #0]
    668a:	f8db 7014 	ldr.w	r7, [fp, #20]
    668e:	42b9      	cmp	r1, r7
    6690:	d023      	beq.n	66da <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    6692:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    6696:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    669a:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    669c:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    669e:	29ff      	cmp	r1, #255	; 0xff
    66a0:	d007      	beq.n	66b2 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    66a2:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    66a6:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    66aa:	6987      	ldr	r7, [r0, #24]
    66ac:	6880      	ldr	r0, [r0, #8]
    66ae:	b1df      	cbz	r7, 66e8 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    66b0:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    66b2:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    66b6:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    66ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    66bc:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    66c0:	b113      	cbz	r3, 66c8 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    66c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    66c4:	2000      	movs	r0, #0
    66c6:	4798      	blx	r3
			first = user->first + 1;
    66c8:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    66ca:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    66cc:	3301      	adds	r3, #1
    66ce:	b2db      	uxtb	r3, r3
				first = 0;
    66d0:	429a      	cmp	r2, r3
    66d2:	bf08      	it	eq
    66d4:	2300      	moveq	r3, #0
			user->first = first;
    66d6:	706b      	strb	r3, [r5, #1]
    66d8:	e7bb      	b.n	6652 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    66da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    66de:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    66e2:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    66e6:	e7da      	b.n	669e <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    66e8:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    66ea:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    66ee:	e7d6      	b.n	669e <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    66f0:	9b03      	ldr	r3, [sp, #12]
    66f2:	2bff      	cmp	r3, #255	; 0xff
    66f4:	d107      	bne.n	6706 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    66f6:	f009 f9df 	bl	fab8 <cntr_cnt_get>
    66fa:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    66fc:	f009 f9b6 	bl	fa6c <cntr_start>
    6700:	b908      	cbnz	r0, 6706 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    6702:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    6706:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    670a:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    670e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    6712:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6716:	260a      	movs	r6, #10
    6718:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    671a:	f009 f9cd 	bl	fab8 <cntr_cnt_get>
		cc = instance->ticks_current;
    671e:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6722:	1b03      	subs	r3, r0, r4
    6724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    6728:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    672a:	42ab      	cmp	r3, r5
    672c:	bf2c      	ite	cs
    672e:	18e4      	addcs	r4, r4, r3
    6730:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    6732:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    6736:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    6738:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    673c:	4620      	mov	r0, r4
    673e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    6740:	f009 f9ba 	bl	fab8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6744:	1bc0      	subs	r0, r0, r7
    6746:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    674a:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    674c:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    674e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    6752:	42a0      	cmp	r0, r4
    6754:	f67f ace8 	bls.w	6128 <ticker_job+0x120>
		LL_ASSERT(i);
    6758:	3e01      	subs	r6, #1
    675a:	d1de      	bne.n	671a <ticker_job+0x712>
    675c:	4040      	eors	r0, r0
    675e:	f380 8811 	msr	BASEPRI, r0
    6762:	f04f 0004 	mov.w	r0, #4
    6766:	df02      	svc	2
	instance->job_guard = 0;
    6768:	2300      	movs	r3, #0
    676a:	f88b 301e 	strb.w	r3, [fp, #30]
    676e:	e4d1      	b.n	6114 <ticker_job+0x10c>
	if (!pending) {
    6770:	2b00      	cmp	r3, #0
    6772:	d1f9      	bne.n	6768 <ticker_job+0x760>
		flag_compare_update = 1;
    6774:	2301      	movs	r3, #1
    6776:	9302      	str	r3, [sp, #8]
    6778:	e4bb      	b.n	60f2 <ticker_job+0xea>
	while (id_insert !=
    677a:	45b0      	cmp	r8, r6
    677c:	f47f af3c 	bne.w	65f8 <ticker_job+0x5f0>
    6780:	e68f      	b.n	64a2 <ticker_job+0x49a>
}
    6782:	b013      	add	sp, #76	; 0x4c
    6784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6788:	ff172b5a 	.word	0xff172b5a
    678c:	7f172b59 	.word	0x7f172b59

00006790 <ticker_init>:
{
    6790:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    6792:	4d1a      	ldr	r5, [pc, #104]	; (67fc <ticker_init+0x6c>)
{
    6794:	9f05      	ldr	r7, [sp, #20]
    6796:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    679a:	262c      	movs	r6, #44	; 0x2c
    679c:	4346      	muls	r6, r0
    679e:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    67a2:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    67a4:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    67a8:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    67aa:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    67ae:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    67b2:	3b01      	subs	r3, #1
    67b4:	b2db      	uxtb	r3, r3
    67b6:	2bff      	cmp	r3, #255	; 0xff
    67b8:	d111      	bne.n	67de <ticker_init+0x4e>
	if (count_op) {
    67ba:	b9ec      	cbnz	r4, 67f8 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    67bc:	222c      	movs	r2, #44	; 0x2c
    67be:	fb02 5200 	mla	r2, r2, r0, r5
    67c2:	9908      	ldr	r1, [sp, #32]
    67c4:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    67c6:	9909      	ldr	r1, [sp, #36]	; 0x24
    67c8:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    67ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    67cc:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    67ce:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    67d0:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    67d2:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    67d4:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    67d6:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    67d8:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    67da:	4620      	mov	r0, r4
    67dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    67de:	b21a      	sxth	r2, r3
    67e0:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    67e4:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    67e6:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    67ea:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    67ee:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    67f0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    67f4:	b2e4      	uxtb	r4, r4
    67f6:	e7dc      	b.n	67b2 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    67f8:	2001      	movs	r0, #1
}
    67fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67fc:	20000560 	.word	0x20000560

00006800 <ticker_trigger>:
	instance = &_instance[instance_index];
    6800:	4a07      	ldr	r2, [pc, #28]	; (6820 <ticker_trigger+0x20>)
    6802:	212c      	movs	r1, #44	; 0x2c
    6804:	fb00 2301 	mla	r3, r0, r1, r2
{
    6808:	b410      	push	{r4}
	if (instance->sched_cb) {
    680a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    680c:	b12c      	cbz	r4, 681a <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    680e:	46a4      	mov	ip, r4
    6810:	2201      	movs	r2, #1
    6812:	2103      	movs	r1, #3
    6814:	2002      	movs	r0, #2
}
    6816:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    6818:	4760      	bx	ip
}
    681a:	bc10      	pop	{r4}
    681c:	4770      	bx	lr
    681e:	bf00      	nop
    6820:	20000560 	.word	0x20000560

00006824 <ticker_start>:
{
    6824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6828:	4f25      	ldr	r7, [pc, #148]	; (68c0 <ticker_start+0x9c>)
    682a:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    682e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    6830:	fb08 7000 	mla	r0, r8, r0, r7
    6834:	fa0f fc81 	sxth.w	ip, r1
    6838:	f8d0 e004 	ldr.w	lr, [r0, #4]
    683c:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    6840:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    6844:	78f4      	ldrb	r4, [r6, #3]
    6846:	1c65      	adds	r5, r4, #1
    6848:	b2ed      	uxtb	r5, r5
		last = 0;
    684a:	45ae      	cmp	lr, r5
    684c:	bf98      	it	ls
    684e:	2500      	movls	r5, #0
	if (last == user->first) {
    6850:	f896 e001 	ldrb.w	lr, [r6, #1]
    6854:	45ae      	cmp	lr, r5
    6856:	d02f      	beq.n	68b8 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    6858:	f8d6 c004 	ldr.w	ip, [r6, #4]
    685c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6860:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    6864:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    6868:	f04f 0a03 	mov.w	sl, #3
    686c:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    6870:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    6872:	9b08      	ldr	r3, [sp, #32]
    6874:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    6876:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6878:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    687a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    687c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    687e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6880:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    6882:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    6886:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    6888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    688a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    688c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    688e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    6890:	2302      	movs	r3, #2
    6892:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    6894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6896:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    6898:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    689a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    689c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    689e:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    68a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    68a2:	6a03      	ldr	r3, [r0, #32]
    68a4:	4608      	mov	r0, r1
    68a6:	4798      	blx	r3
    68a8:	fb09 7308 	mla	r3, r9, r8, r7
    68ac:	2200      	movs	r2, #0
    68ae:	2104      	movs	r1, #4
    68b0:	47a8      	blx	r5
	return user_op->status;
    68b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    68b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    68b8:	2001      	movs	r0, #1
}
    68ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    68be:	bf00      	nop
    68c0:	20000560 	.word	0x20000560

000068c4 <ticker_update>:
{
    68c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    68c8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 695c <ticker_update+0x98>
    68cc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    68d0:	fb0a 8e00 	mla	lr, sl, r0, r8
    68d4:	b20f      	sxth	r7, r1
    68d6:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    68da:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    68dc:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    68e0:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    68e4:	78c4      	ldrb	r4, [r0, #3]
    68e6:	1c66      	adds	r6, r4, #1
    68e8:	b2f6      	uxtb	r6, r6
		last = 0;
    68ea:	42b5      	cmp	r5, r6
    68ec:	bf98      	it	ls
    68ee:	2600      	movls	r6, #0
	if (last == user->first) {
    68f0:	7845      	ldrb	r5, [r0, #1]
    68f2:	42b5      	cmp	r5, r6
    68f4:	d02f      	beq.n	6956 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    68f6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    68fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    68fe:	0125      	lsls	r5, r4, #4
    6900:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    6904:	2704      	movs	r7, #4
    6906:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    690a:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    690c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    6910:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    6912:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    6916:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    6918:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    691c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    691e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    6922:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    6924:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    6928:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    692a:	2302      	movs	r3, #2
    692c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    692e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6930:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    6932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    6934:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    6936:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    6938:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    693a:	f8de 3020 	ldr.w	r3, [lr, #32]
    693e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    6942:	4608      	mov	r0, r1
    6944:	4798      	blx	r3
    6946:	fb09 830a 	mla	r3, r9, sl, r8
    694a:	2200      	movs	r2, #0
    694c:	4639      	mov	r1, r7
    694e:	47a8      	blx	r5
	return user_op->status;
    6950:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6956:	2001      	movs	r0, #1
}
    6958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    695c:	20000560 	.word	0x20000560

00006960 <ticker_stop>:
{
    6960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6964:	f8df 906c 	ldr.w	r9, [pc, #108]	; 69d4 <ticker_stop+0x74>
    6968:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    696c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    6970:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    6972:	f8de 0004 	ldr.w	r0, [lr, #4]
    6976:	b20e      	sxth	r6, r1
    6978:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    697c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    6980:	78fc      	ldrb	r4, [r7, #3]
    6982:	1c65      	adds	r5, r4, #1
    6984:	b2ed      	uxtb	r5, r5
		last = 0;
    6986:	42a8      	cmp	r0, r5
    6988:	bf98      	it	ls
    698a:	2500      	movls	r5, #0
	if (last == user->first) {
    698c:	7878      	ldrb	r0, [r7, #1]
    698e:	42a8      	cmp	r0, r5
    6990:	d01d      	beq.n	69ce <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    6992:	6878      	ldr	r0, [r7, #4]
    6994:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6998:	0124      	lsls	r4, r4, #4
    699a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    699c:	f04f 0c05 	mov.w	ip, #5
    69a0:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    69a4:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    69a6:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    69a8:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    69aa:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    69ac:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    69ae:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    69b0:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    69b2:	f8de 3020 	ldr.w	r3, [lr, #32]
    69b6:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    69ba:	4608      	mov	r0, r1
    69bc:	4798      	blx	r3
    69be:	fb08 930a 	mla	r3, r8, sl, r9
    69c2:	2200      	movs	r2, #0
    69c4:	2104      	movs	r1, #4
    69c6:	47a0      	blx	r4
	return user_op->status;
    69c8:	6a70      	ldr	r0, [r6, #36]	; 0x24
    69ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    69ce:	2001      	movs	r0, #1
}
    69d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    69d4:	20000560 	.word	0x20000560

000069d8 <ticker_next_slot_get>:
{
    69d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    69dc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6a58 <ticker_next_slot_get+0x80>
    69e0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    69e4:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    69e6:	fb0a 8000 	mla	r0, sl, r0, r8
    69ea:	fa0f fe81 	sxth.w	lr, r1
    69ee:	6845      	ldr	r5, [r0, #4]
    69f0:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    69f4:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    69f8:	78fc      	ldrb	r4, [r7, #3]
    69fa:	1c66      	adds	r6, r4, #1
    69fc:	b2f6      	uxtb	r6, r6
		last = 0;
    69fe:	42b5      	cmp	r5, r6
    6a00:	bf98      	it	ls
    6a02:	2600      	movls	r6, #0
	if (last == user->first) {
    6a04:	787d      	ldrb	r5, [r7, #1]
    6a06:	42b5      	cmp	r5, r6
    6a08:	d023      	beq.n	6a52 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    6a0a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    6a0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6a12:	0125      	lsls	r5, r4, #4
    6a14:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    6a18:	f04f 0e02 	mov.w	lr, #2
    6a1c:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    6a20:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    6a22:	9b08      	ldr	r3, [sp, #32]
    6a24:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    6a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a28:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    6a2a:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    6a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    6a2e:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    6a30:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    6a32:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    6a36:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    6a38:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6a3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    6a3c:	6a03      	ldr	r3, [r0, #32]
    6a3e:	4608      	mov	r0, r1
    6a40:	4798      	blx	r3
    6a42:	fb09 830a 	mla	r3, r9, sl, r8
    6a46:	2200      	movs	r2, #0
    6a48:	2104      	movs	r1, #4
    6a4a:	47a8      	blx	r5
	return user_op->status;
    6a4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6a52:	2001      	movs	r0, #1
}
    6a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a58:	20000560 	.word	0x20000560

00006a5c <ticker_job_idle_get>:
{
    6a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    6a60:	f8df 906c 	ldr.w	r9, [pc, #108]	; 6ad0 <ticker_job_idle_get+0x74>
    6a64:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    6a68:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    6a6c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    6a6e:	f8de 0004 	ldr.w	r0, [lr, #4]
    6a72:	b20e      	sxth	r6, r1
    6a74:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    6a78:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    6a7c:	78fc      	ldrb	r4, [r7, #3]
    6a7e:	1c65      	adds	r5, r4, #1
    6a80:	b2ed      	uxtb	r5, r5
		last = 0;
    6a82:	42a8      	cmp	r0, r5
    6a84:	bf98      	it	ls
    6a86:	2500      	movls	r5, #0
	if (last == user->first) {
    6a88:	7878      	ldrb	r0, [r7, #1]
    6a8a:	42a8      	cmp	r0, r5
    6a8c:	d01d      	beq.n	6aca <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    6a8e:	6878      	ldr	r0, [r7, #4]
    6a90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6a94:	0124      	lsls	r4, r4, #4
    6a96:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    6a98:	f04f 0c01 	mov.w	ip, #1
    6a9c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    6aa0:	20ff      	movs	r0, #255	; 0xff
    6aa2:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    6aa4:	2002      	movs	r0, #2
    6aa6:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    6aa8:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    6aaa:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    6aac:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6aae:	f8de 3020 	ldr.w	r3, [lr, #32]
    6ab2:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    6ab6:	4608      	mov	r0, r1
    6ab8:	4798      	blx	r3
    6aba:	fb08 930a 	mla	r3, r8, sl, r9
    6abe:	2200      	movs	r2, #0
    6ac0:	2104      	movs	r1, #4
    6ac2:	47a0      	blx	r4
	return user_op->status;
    6ac4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    6ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    6aca:	2001      	movs	r0, #1
}
    6acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ad0:	20000560 	.word	0x20000560

00006ad4 <ticker_job_sched>:
{
    6ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6ad8:	4c08      	ldr	r4, [pc, #32]	; (6afc <ticker_job_sched+0x28>)
    6ada:	252c      	movs	r5, #44	; 0x2c
    6adc:	fb05 4300 	mla	r3, r5, r0, r4
{
    6ae0:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6ae2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    6ae4:	6a1b      	ldr	r3, [r3, #32]
    6ae6:	4608      	mov	r0, r1
    6ae8:	4798      	blx	r3
    6aea:	fb06 4305 	mla	r3, r6, r5, r4
    6aee:	46bc      	mov	ip, r7
    6af0:	2200      	movs	r2, #0
    6af2:	2104      	movs	r1, #4
}
    6af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    6af8:	4760      	bx	ip
    6afa:	bf00      	nop
    6afc:	20000560 	.word	0x20000560

00006b00 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    6b00:	f008 bfda 	b.w	fab8 <cntr_cnt_get>

00006b04 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    6b04:	1a40      	subs	r0, r0, r1
}
    6b06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6b0a:	4770      	bx	lr

00006b0c <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    6b0c:	b508      	push	{r3, lr}
    6b0e:	4603      	mov	r3, r0
	if (addr_type > 1) {
    6b10:	2b01      	cmp	r3, #1
{
    6b12:	4608      	mov	r0, r1
	if (addr_type > 1) {
    6b14:	d80e      	bhi.n	6b34 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    6b16:	b133      	cbz	r3, 6b26 <ll_addr_get+0x1a>
		if (bdaddr) {
    6b18:	b119      	cbz	r1, 6b22 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    6b1a:	2206      	movs	r2, #6
    6b1c:	4906      	ldr	r1, [pc, #24]	; (6b38 <ll_addr_get+0x2c>)
    6b1e:	f7fb f86d 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    6b22:	4805      	ldr	r0, [pc, #20]	; (6b38 <ll_addr_get+0x2c>)
    6b24:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    6b26:	b119      	cbz	r1, 6b30 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    6b28:	2206      	movs	r2, #6
    6b2a:	4904      	ldr	r1, [pc, #16]	; (6b3c <ll_addr_get+0x30>)
    6b2c:	f7fb f866 	bl	1bfc <memcpy>
	}

	return pub_addr;
    6b30:	4802      	ldr	r0, [pc, #8]	; (6b3c <ll_addr_get+0x30>)
}
    6b32:	bd08      	pop	{r3, pc}
		return NULL;
    6b34:	2000      	movs	r0, #0
    6b36:	bd08      	pop	{r3, pc}
    6b38:	200005be 	.word	0x200005be
    6b3c:	200005b8 	.word	0x200005b8

00006b40 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    6b40:	b570      	push	{r4, r5, r6, lr}
    6b42:	4606      	mov	r6, r0
    6b44:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    6b46:	f007 f9c3 	bl	ded0 <ll_adv_is_enabled>
    6b4a:	4604      	mov	r4, r0
    6b4c:	b110      	cbz	r0, 6b54 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    6b4e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    6b50:	4620      	mov	r0, r4
    6b52:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    6b54:	f007 f9d0 	bl	def8 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    6b58:	f010 0f06 	tst.w	r0, #6
    6b5c:	d1f7      	bne.n	6b4e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    6b5e:	2206      	movs	r2, #6
    6b60:	4629      	mov	r1, r5
	if (addr_type) {
    6b62:	b11e      	cbz	r6, 6b6c <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    6b64:	4802      	ldr	r0, [pc, #8]	; (6b70 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    6b66:	f7fb f849 	bl	1bfc <memcpy>
    6b6a:	e7f1      	b.n	6b50 <ll_addr_set+0x10>
    6b6c:	4801      	ldr	r0, [pc, #4]	; (6b74 <ll_addr_set+0x34>)
    6b6e:	e7fa      	b.n	6b66 <ll_addr_set+0x26>
    6b70:	200005be 	.word	0x200005be
    6b74:	200005b8 	.word	0x200005b8

00006b78 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    6b78:	2300      	movs	r3, #0
    6b7a:	7003      	strb	r3, [r0, #0]
	*max = 0;
    6b7c:	700b      	strb	r3, [r1, #0]
    6b7e:	4770      	bx	lr

00006b80 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    6b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b82:	4607      	mov	r7, r0
    6b84:	460e      	mov	r6, r1
	while (len) {
    6b86:	460c      	mov	r4, r1
    6b88:	1b35      	subs	r5, r6, r4
    6b8a:	443d      	add	r5, r7
    6b8c:	b18c      	cbz	r4, 6bb2 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    6b8e:	f7fa fa29 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    6b92:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    6b94:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    6b96:	d907      	bls.n	6ba8 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    6b98:	2204      	movs	r2, #4
    6b9a:	eb0d 0102 	add.w	r1, sp, r2
    6b9e:	4628      	mov	r0, r5
    6ba0:	f7fb f82c 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    6ba4:	3c04      	subs	r4, #4
    6ba6:	e7ef      	b.n	6b88 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    6ba8:	4622      	mov	r2, r4
    6baa:	a901      	add	r1, sp, #4
    6bac:	4628      	mov	r0, r5
    6bae:	f7fb f825 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    6bb2:	2000      	movs	r0, #0
    6bb4:	b003      	add	sp, #12
    6bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006bb8 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    6bb8:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    6bba:	2300      	movs	r3, #0
    6bbc:	f008 ffb0 	bl	fb20 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    6bc0:	2000      	movs	r0, #0
    6bc2:	bd08      	pop	{r3, pc}

00006bc4 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    6bc4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    6bc6:	4802      	ldr	r0, [pc, #8]	; (6bd0 <_hci_driver_init+0xc>)
    6bc8:	f7fc faea 	bl	31a0 <bt_hci_driver_register>

	return 0;
}
    6bcc:	2000      	movs	r0, #0
    6bce:	bd08      	pop	{r3, pc}
    6bd0:	0001294c 	.word	0x0001294c

00006bd4 <hci_driver_send>:
{
    6bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
    6bd6:	8983      	ldrh	r3, [r0, #12]
{
    6bd8:	4605      	mov	r5, r0
	if (!buf->len) {
    6bda:	b323      	cbz	r3, 6c26 <hci_driver_send+0x52>
	switch (type) {
    6bdc:	7d03      	ldrb	r3, [r0, #20]
    6bde:	b18b      	cbz	r3, 6c04 <hci_driver_send+0x30>
    6be0:	2b02      	cmp	r3, #2
    6be2:	d120      	bne.n	6c26 <hci_driver_send+0x52>
	err = hci_acl_handle(buf, &evt);
    6be4:	a901      	add	r1, sp, #4
    6be6:	f000 ffc9 	bl	7b7c <hci_acl_handle>
    6bea:	4604      	mov	r4, r0
	if (evt) {
    6bec:	9801      	ldr	r0, [sp, #4]
    6bee:	b108      	cbz	r0, 6bf4 <hci_driver_send+0x20>
		bt_recv_prio(evt);
    6bf0:	f7fc fa4a 	bl	3088 <bt_recv_prio>
	if (!err) {
    6bf4:	b91c      	cbnz	r4, 6bfe <hci_driver_send+0x2a>
		net_buf_unref(buf);
    6bf6:	4628      	mov	r0, r5
    6bf8:	f009 fd4c 	bl	10694 <net_buf_unref>
    6bfc:	2400      	movs	r4, #0
}
    6bfe:	4620      	mov	r0, r4
    6c00:	b003      	add	sp, #12
    6c02:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf);
    6c04:	f000 fa70 	bl	70e8 <hci_cmd_handle>
	if (evt) {
    6c08:	4602      	mov	r2, r0
    6c0a:	2800      	cmp	r0, #0
    6c0c:	d0f3      	beq.n	6bf6 <hci_driver_send+0x22>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    6c0e:	6883      	ldr	r3, [r0, #8]
    6c10:	7819      	ldrb	r1, [r3, #0]
    6c12:	2913      	cmp	r1, #19
    6c14:	d80a      	bhi.n	6c2c <hci_driver_send+0x58>
    6c16:	2301      	movs	r3, #1
    6c18:	408b      	lsls	r3, r1
    6c1a:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    6c1e:	d005      	beq.n	6c2c <hci_driver_send+0x58>
			bt_recv_prio(evt);
    6c20:	f7fc fa32 	bl	3088 <bt_recv_prio>
    6c24:	e7e7      	b.n	6bf6 <hci_driver_send+0x22>
		return -EINVAL;
    6c26:	f06f 0415 	mvn.w	r4, #21
    6c2a:	e7e8      	b.n	6bfe <hci_driver_send+0x2a>
			bt_recv(evt);
    6c2c:	4610      	mov	r0, r2
    6c2e:	f7fb ff53 	bl	2ad8 <bt_recv>
    6c32:	e7e0      	b.n	6bf6 <hci_driver_send+0x22>

00006c34 <recv_thread>:
{
    6c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    6c36:	4d23      	ldr	r5, [pc, #140]	; (6cc4 <recv_thread+0x90>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    6c38:	2600      	movs	r6, #0
    6c3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6c3e:	4628      	mov	r0, r5
    6c40:	f00a fb10 	bl	11264 <_impl_k_queue_get>
		if (node_rx && !buf) {
    6c44:	4604      	mov	r4, r0
    6c46:	b368      	cbz	r0, 6ca4 <recv_thread+0x70>
	s8_t class = hci_get_class(node_rx);
    6c48:	f001 fb6c 	bl	8324 <hci_get_class>
	switch (class) {
    6c4c:	1e03      	subs	r3, r0, #0
    6c4e:	9401      	str	r4, [sp, #4]
    6c50:	db03      	blt.n	6c5a <recv_thread+0x26>
    6c52:	2b02      	cmp	r3, #2
    6c54:	dd07      	ble.n	6c66 <recv_thread+0x32>
    6c56:	2b03      	cmp	r3, #3
    6c58:	d027      	beq.n	6caa <recv_thread+0x76>
		LL_ASSERT(0);
    6c5a:	4040      	eors	r0, r0
    6c5c:	f380 8811 	msr	BASEPRI, r0
    6c60:	f04f 0004 	mov.w	r0, #4
    6c64:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    6c66:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    6c68:	bf0e      	itee	eq
    6c6a:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6c6c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6c70:	2001      	movne	r0, #1
    6c72:	f7fc fb61 	bl	3338 <bt_buf_get_rx>
    6c76:	4604      	mov	r4, r0
		if (buf) {
    6c78:	b118      	cbz	r0, 6c82 <recv_thread+0x4e>
			hci_evt_encode(node_rx, buf);
    6c7a:	4601      	mov	r1, r0
    6c7c:	9801      	ldr	r0, [sp, #4]
    6c7e:	f001 f807 	bl	7c90 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    6c82:	9b01      	ldr	r3, [sp, #4]
    6c84:	2100      	movs	r1, #0
    6c86:	88d8      	ldrh	r0, [r3, #6]
    6c88:	f007 fd76 	bl	e778 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    6c8c:	a802      	add	r0, sp, #8
    6c8e:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    6c92:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    6c94:	f007 fd0e 	bl	e6b4 <ll_rx_mem_release>
		if (buf) {
    6c98:	b124      	cbz	r4, 6ca4 <recv_thread+0x70>
			if (buf->len) {
    6c9a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    6c9c:	4620      	mov	r0, r4
			if (buf->len) {
    6c9e:	b173      	cbz	r3, 6cbe <recv_thread+0x8a>
				bt_recv(buf);
    6ca0:	f7fb ff1a 	bl	2ad8 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6ca4:	f00a fd40 	bl	11728 <_impl_k_yield>
    6ca8:	e7c7      	b.n	6c3a <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    6caa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6cae:	f7fc fb43 	bl	3338 <bt_buf_get_rx>
    6cb2:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    6cb4:	4601      	mov	r1, r0
    6cb6:	9801      	ldr	r0, [sp, #4]
    6cb8:	f000 ffbe 	bl	7c38 <hci_acl_encode>
    6cbc:	e7e1      	b.n	6c82 <recv_thread+0x4e>
				net_buf_unref(buf);
    6cbe:	f009 fce9 	bl	10694 <net_buf_unref>
    6cc2:	e7ef      	b.n	6ca4 <recv_thread+0x70>
    6cc4:	20003934 	.word	0x20003934

00006cc8 <prio_recv_thread>:
{
    6cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6cca:	4d14      	ldr	r5, [pc, #80]	; (6d1c <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    6ccc:	4e14      	ldr	r6, [pc, #80]	; (6d20 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    6cce:	f10d 0102 	add.w	r1, sp, #2
    6cd2:	a801      	add	r0, sp, #4
    6cd4:	f007 fcb6 	bl	e644 <ll_rx_get>
    6cd8:	4604      	mov	r4, r0
    6cda:	b940      	cbnz	r0, 6cee <prio_recv_thread+0x26>
		if (node_rx) {
    6cdc:	9b01      	ldr	r3, [sp, #4]
    6cde:	b1bb      	cbz	r3, 6d10 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    6ce0:	f007 ff60 	bl	eba4 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    6ce4:	9901      	ldr	r1, [sp, #4]
    6ce6:	4630      	mov	r0, r6
    6ce8:	f00a fa98 	bl	1121c <k_queue_append>
    6cec:	e7ef      	b.n	6cce <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6cee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6cf2:	2001      	movs	r0, #1
    6cf4:	f7fc fb20 	bl	3338 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    6cf8:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6cfa:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    6cfc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6d00:	f001 fafc 	bl	82fc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    6d04:	4638      	mov	r0, r7
    6d06:	f7fc f9bf 	bl	3088 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6d0a:	f00a fd0d 	bl	11728 <_impl_k_yield>
    6d0e:	e7de      	b.n	6cce <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6d14:	4628      	mov	r0, r5
    6d16:	f00a fd6e 	bl	117f6 <_impl_k_sem_take>
    6d1a:	e7d8      	b.n	6cce <prio_recv_thread+0x6>
    6d1c:	2000391c 	.word	0x2000391c
    6d20:	20003934 	.word	0x20003934

00006d24 <hci_driver_open>:
{
    6d24:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    6d26:	4814      	ldr	r0, [pc, #80]	; (6d78 <hci_driver_open+0x54>)
{
    6d28:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    6d2a:	f007 ffdf 	bl	ecec <ll_init>
	if (err) {
    6d2e:	4604      	mov	r4, r0
    6d30:	b9f8      	cbnz	r0, 6d72 <hci_driver_open+0x4e>
	hci_init(NULL);
    6d32:	f001 fb0f 	bl	8354 <hci_init>

    6d36:	f06f 0309 	mvn.w	r3, #9
    6d3a:	9303      	str	r3, [sp, #12]
    6d3c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    6d40:	4b0e      	ldr	r3, [pc, #56]	; (6d7c <hci_driver_open+0x58>)
    6d42:	490f      	ldr	r1, [pc, #60]	; (6d80 <hci_driver_open+0x5c>)
    6d44:	9405      	str	r4, [sp, #20]
    6d46:	9404      	str	r4, [sp, #16]
    6d48:	9402      	str	r4, [sp, #8]
    6d4a:	9401      	str	r4, [sp, #4]
    6d4c:	9400      	str	r4, [sp, #0]
    6d4e:	480d      	ldr	r0, [pc, #52]	; (6d84 <hci_driver_open+0x60>)
    6d50:	f00a ff26 	bl	11ba0 <_impl_k_thread_create>
    6d54:	f06f 0307 	mvn.w	r3, #7
    6d58:	9303      	str	r3, [sp, #12]
    6d5a:	9405      	str	r4, [sp, #20]
    6d5c:	9404      	str	r4, [sp, #16]
    6d5e:	9402      	str	r4, [sp, #8]
    6d60:	9401      	str	r4, [sp, #4]
    6d62:	9400      	str	r4, [sp, #0]
    6d64:	4b08      	ldr	r3, [pc, #32]	; (6d88 <hci_driver_open+0x64>)
    6d66:	4909      	ldr	r1, [pc, #36]	; (6d8c <hci_driver_open+0x68>)
    6d68:	4809      	ldr	r0, [pc, #36]	; (6d90 <hci_driver_open+0x6c>)
    6d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6d6e:	f00a ff17 	bl	11ba0 <_impl_k_thread_create>
}
    6d72:	4620      	mov	r0, r4
    6d74:	b006      	add	sp, #24
    6d76:	bd10      	pop	{r4, pc}
    6d78:	2000391c 	.word	0x2000391c
    6d7c:	00006cc9 	.word	0x00006cc9
    6d80:	20001d38 	.word	0x20001d38
    6d84:	20001640 	.word	0x20001640
    6d88:	00006c35 	.word	0x00006c35
    6d8c:	20001ef8 	.word	0x20001ef8
    6d90:	200015d0 	.word	0x200015d0

00006d94 <sys_put_le32>:
	dst[1] = val >> 8;
    6d94:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    6d98:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    6d9a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    6d9c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    6d9e:	0a00      	lsrs	r0, r0, #8
    6da0:	704b      	strb	r3, [r1, #1]
    6da2:	70c8      	strb	r0, [r1, #3]
    6da4:	4770      	bx	lr

00006da6 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    6da6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    6da8:	3008      	adds	r0, #8
{
    6daa:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    6dac:	2102      	movs	r1, #2
{
    6dae:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    6db0:	f009 fca2 	bl	106f8 <net_buf_simple_add>
	hdr->evt = evt;
    6db4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    6db6:	7044      	strb	r4, [r0, #1]
    6db8:	bd38      	pop	{r3, r4, r5, pc}
	...

00006dbc <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    6dbc:	b538      	push	{r3, r4, r5, lr}
    6dbe:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    6dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6dc4:	f7fc fac8 	bl	3358 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    6dc8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    6dca:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    6dcc:	210f      	movs	r1, #15
    6dce:	f7ff ffea 	bl	6da6 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    6dd2:	2104      	movs	r1, #4
    6dd4:	f104 0008 	add.w	r0, r4, #8
    6dd8:	f009 fc8e 	bl	106f8 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    6ddc:	2301      	movs	r3, #1
    6dde:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    6de0:	4b02      	ldr	r3, [pc, #8]	; (6dec <cmd_status+0x30>)
	cs->status = status;
    6de2:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    6de4:	881b      	ldrh	r3, [r3, #0]
    6de6:	8043      	strh	r3, [r0, #2]

	return buf;
}
    6de8:	4620      	mov	r0, r4
    6dea:	bd38      	pop	{r3, r4, r5, pc}
    6dec:	200005c4 	.word	0x200005c4

00006df0 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    6df0:	b570      	push	{r4, r5, r6, lr}
    6df2:	4604      	mov	r4, r0
    6df4:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    6df6:	3201      	adds	r2, #1
{
    6df8:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    6dfa:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    6dfc:	b2d2      	uxtb	r2, r2
    6dfe:	213e      	movs	r1, #62	; 0x3e
    6e00:	f7ff ffd1 	bl	6da6 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    6e04:	2101      	movs	r1, #1
    6e06:	4620      	mov	r0, r4
    6e08:	f009 fc76 	bl	106f8 <net_buf_simple_add>
	me->subevent = subevt;
    6e0c:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    6e0e:	4629      	mov	r1, r5
    6e10:	4620      	mov	r0, r4
}
    6e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    6e16:	f009 bc6f 	b.w	106f8 <net_buf_simple_add>
	...

00006e1c <cmd_complete>:
{
    6e1c:	b538      	push	{r3, r4, r5, lr}
    6e1e:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    6e24:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6e26:	f7fc fa97 	bl	3358 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    6e2a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6e2c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    6e2e:	b2d2      	uxtb	r2, r2
    6e30:	210e      	movs	r1, #14
    6e32:	f7ff ffb8 	bl	6da6 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    6e36:	6820      	ldr	r0, [r4, #0]
    6e38:	2103      	movs	r1, #3
    6e3a:	3008      	adds	r0, #8
    6e3c:	f009 fc5c 	bl	106f8 <net_buf_simple_add>
	cc->ncmd = 1;
    6e40:	2301      	movs	r3, #1
    6e42:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    6e44:	4b05      	ldr	r3, [pc, #20]	; (6e5c <cmd_complete+0x40>)
    6e46:	881b      	ldrh	r3, [r3, #0]
    6e48:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    6e4c:	6820      	ldr	r0, [r4, #0]
    6e4e:	4629      	mov	r1, r5
    6e50:	3008      	adds	r0, #8
}
    6e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    6e56:	f009 bc4f 	b.w	106f8 <net_buf_simple_add>
    6e5a:	bf00      	nop
    6e5c:	200005c4 	.word	0x200005c4

00006e60 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    6e60:	4b0e      	ldr	r3, [pc, #56]	; (6e9c <encrypt_change+0x3c>)
{
    6e62:	b570      	push	{r4, r5, r6, lr}
    6e64:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    6e66:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e6a:	2300      	movs	r3, #0
    6e6c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    6e70:	4313      	orrs	r3, r2
{
    6e72:	4604      	mov	r4, r0
    6e74:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    6e76:	d010      	beq.n	6e9a <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    6e78:	2204      	movs	r2, #4
    6e7a:	2108      	movs	r1, #8
    6e7c:	4628      	mov	r0, r5
    6e7e:	f7ff ff92 	bl	6da6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    6e82:	2104      	movs	r1, #4
    6e84:	f105 0008 	add.w	r0, r5, #8
    6e88:	f009 fc36 	bl	106f8 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    6e8c:	fab4 f384 	clz	r3, r4
    6e90:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    6e92:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    6e94:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    6e98:	70c3      	strb	r3, [r0, #3]
    6e9a:	bd70      	pop	{r4, r5, r6, pc}
    6e9c:	20003740 	.word	0x20003740

00006ea0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    6ea0:	b570      	push	{r4, r5, r6, lr}
    6ea2:	4604      	mov	r4, r0
    6ea4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6ea6:	4b13      	ldr	r3, [pc, #76]	; (6ef4 <le_remote_feat_complete+0x54>)
{
    6ea8:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    6eae:	2200      	movs	r2, #0
    6eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    6eb4:	4313      	orrs	r3, r2
{
    6eb6:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6eb8:	d01b      	beq.n	6ef2 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    6eba:	4b0f      	ldr	r3, [pc, #60]	; (6ef8 <le_remote_feat_complete+0x58>)
    6ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ec0:	2300      	movs	r3, #0
    6ec2:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6ec6:	4313      	orrs	r3, r2
    6ec8:	d013      	beq.n	6ef2 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    6eca:	220b      	movs	r2, #11
    6ecc:	2104      	movs	r1, #4
    6ece:	f7ff ff8f 	bl	6df0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    6ed2:	2208      	movs	r2, #8
	sep->status = status;
    6ed4:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    6ed6:	f8a0 6001 	strh.w	r6, [r0, #1]
    6eda:	3003      	adds	r0, #3
	if (!status) {
    6edc:	b924      	cbnz	r4, 6ee8 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    6ede:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    6ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    6ee4:	f7fa be8a 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    6ee8:	2100      	movs	r1, #0
}
    6eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    6eee:	f7fa beb1 	b.w	1c54 <memset>
    6ef2:	bd70      	pop	{r4, r5, r6, pc}
    6ef4:	20003740 	.word	0x20003740
    6ef8:	20003748 	.word	0x20003748

00006efc <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    6efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f00:	4605      	mov	r5, r0
    6f02:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6f04:	4b46      	ldr	r3, [pc, #280]	; (7020 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    6f06:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6f08:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f0c:	f240 2801 	movw	r8, #513	; 0x201
    6f10:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    6f14:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6f18:	ea03 0309 	and.w	r3, r3, r9
    6f1c:	ea02 0208 	and.w	r2, r2, r8
    6f20:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    6f22:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    6f24:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    6f28:	d077      	beq.n	701a <le_conn_complete.part.39+0x11e>
	if (!status) {
    6f2a:	2d00      	cmp	r5, #0
    6f2c:	d150      	bne.n	6fd0 <le_conn_complete.part.39+0xd4>
		conn_count++;
    6f2e:	4a3d      	ldr	r2, [pc, #244]	; (7024 <le_conn_complete.part.39+0x128>)
    6f30:	6813      	ldr	r3, [r2, #0]
    6f32:	3301      	adds	r3, #1
    6f34:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    6f36:	ea5a 030b 	orrs.w	r3, sl, fp
    6f3a:	f101 0803 	add.w	r8, r1, #3
    6f3e:	d151      	bne.n	6fe4 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    6f40:	2212      	movs	r2, #18
    6f42:	2101      	movs	r1, #1
    6f44:	f7ff ff54 	bl	6df0 <meta_evt>
	lecc->status = 0x00;
    6f48:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    6f4a:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    6f4e:	7863      	ldrb	r3, [r4, #1]
    6f50:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    6f52:	78a3      	ldrb	r3, [r4, #2]
    6f54:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    6f56:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    6f58:	2206      	movs	r2, #6
    6f5a:	4641      	mov	r1, r8
    6f5c:	3005      	adds	r0, #5
    6f5e:	f7fa fe4d 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    6f62:	8ae3      	ldrh	r3, [r4, #22]
    6f64:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    6f68:	8b23      	ldrh	r3, [r4, #24]
    6f6a:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    6f6e:	8b63      	ldrh	r3, [r4, #26]
    6f70:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    6f74:	7f23      	ldrb	r3, [r4, #28]
    6f76:	747b      	strb	r3, [r7, #17]
    6f78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    6f7c:	221e      	movs	r2, #30
    6f7e:	210a      	movs	r1, #10
    6f80:	f7ff ff36 	bl	6df0 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    6f84:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    6f86:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    6f88:	2100      	movs	r1, #0
    6f8a:	f7fa fe63 	bl	1c54 <memset>
		lecc->status = status;
    6f8e:	7025      	strb	r5, [r4, #0]
    6f90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    6f94:	7d63      	ldrb	r3, [r4, #21]
    6f96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6f9a:	2b40      	cmp	r3, #64	; 0x40
    6f9c:	d138      	bne.n	7010 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    6f9e:	2206      	movs	r2, #6
    6fa0:	f104 0110 	add.w	r1, r4, #16
    6fa4:	f7fa fe2a 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    6fa8:	2206      	movs	r2, #6
    6faa:	f104 0109 	add.w	r1, r4, #9
    6fae:	f107 0011 	add.w	r0, r7, #17
    6fb2:	f7fa fe23 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    6fb6:	8ae3      	ldrh	r3, [r4, #22]
    6fb8:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    6fbc:	8b23      	ldrh	r3, [r4, #24]
    6fbe:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    6fc2:	8b63      	ldrh	r3, [r4, #26]
    6fc4:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    6fc8:	7f23      	ldrb	r3, [r4, #28]
    6fca:	777b      	strb	r3, [r7, #29]
    6fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    6fd0:	ea5a 030b 	orrs.w	r3, sl, fp
    6fd4:	d1d2      	bne.n	6f7c <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    6fd6:	2212      	movs	r2, #18
    6fd8:	2101      	movs	r1, #1
    6fda:	f7ff ff09 	bl	6df0 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    6fde:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    6fe0:	4604      	mov	r4, r0
    6fe2:	e7d1      	b.n	6f88 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    6fe4:	221e      	movs	r2, #30
    6fe6:	210a      	movs	r1, #10
    6fe8:	f7ff ff02 	bl	6df0 <meta_evt>
		leecc->status = 0x00;
    6fec:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    6fee:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    6ff2:	7863      	ldrb	r3, [r4, #1]
    6ff4:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    6ff6:	78a3      	ldrb	r3, [r4, #2]
    6ff8:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    6ffa:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    6ffc:	2206      	movs	r2, #6
    6ffe:	4641      	mov	r1, r8
    7000:	3005      	adds	r0, #5
    7002:	f7fa fdfb 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    7006:	7be3      	ldrb	r3, [r4, #15]
    7008:	f107 000b 	add.w	r0, r7, #11
    700c:	2b00      	cmp	r3, #0
    700e:	d1c1      	bne.n	6f94 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    7010:	2206      	movs	r2, #6
    7012:	2100      	movs	r1, #0
    7014:	f7fa fe1e 	bl	1c54 <memset>
    7018:	e7c6      	b.n	6fa8 <le_conn_complete.part.39+0xac>
    701a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    701e:	bf00      	nop
    7020:	20003748 	.word	0x20003748
    7024:	200005c8 	.word	0x200005c8

00007028 <bt_addr_le_to_str.constprop.71>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    7028:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    702a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    702c:	b08a      	sub	sp, #40	; 0x28
    702e:	4604      	mov	r4, r0
    7030:	460e      	mov	r6, r1
    7032:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    7034:	2b03      	cmp	r3, #3
    7036:	d820      	bhi.n	707a <bt_addr_le_to_str.constprop.71+0x52>
    7038:	e8df f003 	tbb	[pc, r3]
    703c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    7040:	4911      	ldr	r1, [pc, #68]	; (7088 <bt_addr_le_to_str.constprop.71+0x60>)
		strcpy(type, "random");
    7042:	4628      	mov	r0, r5
    7044:	f7fa fda6 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7048:	7862      	ldrb	r2, [r4, #1]
    704a:	9204      	str	r2, [sp, #16]
    704c:	78a2      	ldrb	r2, [r4, #2]
    704e:	9203      	str	r2, [sp, #12]
    7050:	78e2      	ldrb	r2, [r4, #3]
    7052:	9202      	str	r2, [sp, #8]
    7054:	7922      	ldrb	r2, [r4, #4]
    7056:	9201      	str	r2, [sp, #4]
    7058:	7962      	ldrb	r2, [r4, #5]
    705a:	9200      	str	r2, [sp, #0]
    705c:	79a3      	ldrb	r3, [r4, #6]
    705e:	9505      	str	r5, [sp, #20]
    7060:	4a0a      	ldr	r2, [pc, #40]	; (708c <bt_addr_le_to_str.constprop.71+0x64>)
    7062:	211b      	movs	r1, #27
    7064:	4630      	mov	r0, r6
    7066:	f7f9 ff9f 	bl	fa8 <snprintk>
}
    706a:	b00a      	add	sp, #40	; 0x28
    706c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    706e:	4908      	ldr	r1, [pc, #32]	; (7090 <bt_addr_le_to_str.constprop.71+0x68>)
    7070:	e7e7      	b.n	7042 <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "public id");
    7072:	4908      	ldr	r1, [pc, #32]	; (7094 <bt_addr_le_to_str.constprop.71+0x6c>)
    7074:	e7e5      	b.n	7042 <bt_addr_le_to_str.constprop.71+0x1a>
		strcpy(type, "random id");
    7076:	4908      	ldr	r1, [pc, #32]	; (7098 <bt_addr_le_to_str.constprop.71+0x70>)
    7078:	e7e3      	b.n	7042 <bt_addr_le_to_str.constprop.71+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    707a:	4a08      	ldr	r2, [pc, #32]	; (709c <bt_addr_le_to_str.constprop.71+0x74>)
    707c:	210a      	movs	r1, #10
    707e:	4628      	mov	r0, r5
    7080:	f7f9 ff92 	bl	fa8 <snprintk>
    7084:	e7e0      	b.n	7048 <bt_addr_le_to_str.constprop.71+0x20>
    7086:	bf00      	nop
    7088:	00012259 	.word	0x00012259
    708c:	00012282 	.word	0x00012282
    7090:	00012260 	.word	0x00012260
    7094:	00012267 	.word	0x00012267
    7098:	00012271 	.word	0x00012271
    709c:	0001227b 	.word	0x0001227b

000070a0 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    70a0:	b510      	push	{r4, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    70a2:	7803      	ldrb	r3, [r0, #0]
    70a4:	f003 020f 	and.w	r2, r3, #15
    70a8:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    70aa:	b08a      	sub	sp, #40	; 0x28
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    70ac:	d116      	bne.n	70dc <le_adv_ext_report.isra.66+0x3c>
    70ae:	7842      	ldrb	r2, [r0, #1]
    70b0:	b1a2      	cbz	r2, 70dc <le_adv_ext_report.isra.66+0x3c>
		if (!p->ext_hdr_len) {
    70b2:	7882      	ldrb	r2, [r0, #2]
    70b4:	0691      	lsls	r1, r2, #26
    70b6:	d011      	beq.n	70dc <le_adv_ext_report.isra.66+0x3c>
		if (h->adv_addr) {
    70b8:	78c2      	ldrb	r2, [r0, #3]
    70ba:	07d2      	lsls	r2, r2, #31
    70bc:	d50e      	bpl.n	70dc <le_adv_ext_report.isra.66+0x3c>
			addr.type = adv->tx_addr;
    70be:	ac0a      	add	r4, sp, #40	; 0x28
    70c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    70c4:	f804 3d24 	strb.w	r3, [r4, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    70c8:	1d01      	adds	r1, r0, #4
    70ca:	2206      	movs	r2, #6
    70cc:	f10d 0005 	add.w	r0, sp, #5
    70d0:	f7fa fd94 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    70d4:	a903      	add	r1, sp, #12
    70d6:	4620      	mov	r0, r4
    70d8:	f7ff ffa6 	bl	7028 <bt_addr_le_to_str.constprop.71>
}
    70dc:	b00a      	add	sp, #40	; 0x28
    70de:	bd10      	pop	{r4, pc}

000070e0 <sys_get_le64>:
{
    70e0:	4603      	mov	r3, r0
}
    70e2:	6800      	ldr	r0, [r0, #0]
    70e4:	6859      	ldr	r1, [r3, #4]
    70e6:	4770      	bx	lr

000070e8 <hci_cmd_handle>:
{
    70e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    70ea:	8981      	ldrh	r1, [r0, #12]
{
    70ec:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    70ee:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    70f0:	2902      	cmp	r1, #2
{
    70f2:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    70f4:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    70f6:	d802      	bhi.n	70fe <hci_cmd_handle+0x16>
		return NULL;
    70f8:	2000      	movs	r0, #0
}
    70fa:	b013      	add	sp, #76	; 0x4c
    70fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    70fe:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    7100:	4eba      	ldr	r6, [pc, #744]	; (73ec <hci_cmd_handle+0x304>)
    7102:	781a      	ldrb	r2, [r3, #0]
    7104:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    7106:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    7108:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    710c:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    710e:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    7110:	d8f2      	bhi.n	70f8 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    7112:	2103      	movs	r1, #3
    7114:	f104 0008 	add.w	r0, r4, #8
    7118:	f009 fb0d 	bl	10736 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    711c:	8833      	ldrh	r3, [r6, #0]
    711e:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    7122:	0a9b      	lsrs	r3, r3, #10
    7124:	2b04      	cmp	r3, #4
    7126:	f000 80bd 	beq.w	72a4 <hci_cmd_handle+0x1bc>
    712a:	d809      	bhi.n	7140 <hci_cmd_handle+0x58>
    712c:	2b01      	cmp	r3, #1
    712e:	d027      	beq.n	7180 <hci_cmd_handle+0x98>
    7130:	2b03      	cmp	r3, #3
    7132:	d03c      	beq.n	71ae <hci_cmd_handle+0xc6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    7134:	2101      	movs	r1, #1
    7136:	a807      	add	r0, sp, #28
    7138:	f7ff fe70 	bl	6e1c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    713c:	2301      	movs	r3, #1
    713e:	e28d      	b.n	765c <hci_cmd_handle+0x574>
	switch (BT_OGF(_opcode)) {
    7140:	2b08      	cmp	r3, #8
    7142:	f000 815d 	beq.w	7400 <hci_cmd_handle+0x318>
    7146:	2b3f      	cmp	r3, #63	; 0x3f
    7148:	d1f4      	bne.n	7134 <hci_cmd_handle+0x4c>
	switch (ocf) {
    714a:	3a01      	subs	r2, #1
    714c:	2a09      	cmp	r2, #9
    714e:	d8f1      	bhi.n	7134 <hci_cmd_handle+0x4c>
    7150:	a301      	add	r3, pc, #4	; (adr r3, 7158 <hci_cmd_handle+0x70>)
    7152:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    7156:	bf00      	nop
    7158:	00007993 	.word	0x00007993
    715c:	000079c3 	.word	0x000079c3
    7160:	000079ed 	.word	0x000079ed
    7164:	00007135 	.word	0x00007135
    7168:	00007135 	.word	0x00007135
    716c:	00007a33 	.word	0x00007a33
    7170:	00007135 	.word	0x00007135
    7174:	00007a05 	.word	0x00007a05
    7178:	00007a3f 	.word	0x00007a3f
    717c:	00007aad 	.word	0x00007aad
	switch (ocf) {
    7180:	2a06      	cmp	r2, #6
    7182:	d006      	beq.n	7192 <hci_cmd_handle+0xaa>
    7184:	2a1d      	cmp	r2, #29
    7186:	d1d5      	bne.n	7134 <hci_cmd_handle+0x4c>
	handle = sys_le16_to_cpu(cmd->handle);
    7188:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    718a:	8818      	ldrh	r0, [r3, #0]
    718c:	f007 f96f 	bl	e46e <ll_version_ind_send>
    7190:	e004      	b.n	719c <hci_cmd_handle+0xb4>
    7192:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    7194:	7899      	ldrb	r1, [r3, #2]
    7196:	8818      	ldrh	r0, [r3, #0]
    7198:	f007 f97d 	bl	e496 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    719c:	2800      	cmp	r0, #0
    719e:	bf14      	ite	ne
    71a0:	200c      	movne	r0, #12
    71a2:	2000      	moveq	r0, #0
    71a4:	f7ff fe0a 	bl	6dbc <cmd_status>
    71a8:	9007      	str	r0, [sp, #28]
	return evt;
    71aa:	9807      	ldr	r0, [sp, #28]
    71ac:	e7a5      	b.n	70fa <hci_cmd_handle+0x12>
	switch (ocf) {
    71ae:	2a2d      	cmp	r2, #45	; 0x2d
    71b0:	d03a      	beq.n	7228 <hci_cmd_handle+0x140>
    71b2:	d820      	bhi.n	71f6 <hci_cmd_handle+0x10e>
    71b4:	2a01      	cmp	r2, #1
    71b6:	d02b      	beq.n	7210 <hci_cmd_handle+0x128>
    71b8:	2a03      	cmp	r2, #3
    71ba:	d1bb      	bne.n	7134 <hci_cmd_handle+0x4c>
	dup_count = -1;
    71bc:	4b8c      	ldr	r3, [pc, #560]	; (73f0 <hci_cmd_handle+0x308>)
    71be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71c2:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    71c4:	4b8b      	ldr	r3, [pc, #556]	; (73f4 <hci_cmd_handle+0x30c>)
    71c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    71ca:	f641 71ff 	movw	r1, #8191	; 0x1fff
    71ce:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    71d2:	4b89      	ldr	r3, [pc, #548]	; (73f8 <hci_cmd_handle+0x310>)
    71d4:	2000      	movs	r0, #0
    71d6:	2100      	movs	r1, #0
    71d8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    71dc:	4b87      	ldr	r3, [pc, #540]	; (73fc <hci_cmd_handle+0x314>)
    71de:	201f      	movs	r0, #31
    71e0:	2100      	movs	r1, #0
    71e2:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    71e6:	f006 fe23 	bl	de30 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    71ea:	2101      	movs	r1, #1
    71ec:	a807      	add	r0, sp, #28
    71ee:	f7ff fe15 	bl	6e1c <cmd_complete>
	ccst->status = 0x00;
    71f2:	2300      	movs	r3, #0
    71f4:	e232      	b.n	765c <hci_cmd_handle+0x574>
	switch (ocf) {
    71f6:	2a7b      	cmp	r2, #123	; 0x7b
    71f8:	d02c      	beq.n	7254 <hci_cmd_handle+0x16c>
    71fa:	2a7c      	cmp	r2, #124	; 0x7c
    71fc:	d041      	beq.n	7282 <hci_cmd_handle+0x19a>
    71fe:	2a63      	cmp	r2, #99	; 0x63
    7200:	d198      	bne.n	7134 <hci_cmd_handle+0x4c>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    7202:	68a0      	ldr	r0, [r4, #8]
    7204:	f7ff ff6c 	bl	70e0 <sys_get_le64>
    7208:	4b7b      	ldr	r3, [pc, #492]	; (73f8 <hci_cmd_handle+0x310>)
	le_event_mask = sys_get_le64(cmd->events);
    720a:	e9c3 0100 	strd	r0, r1, [r3]
    720e:	e7ec      	b.n	71ea <hci_cmd_handle+0x102>
	event_mask = sys_get_le64(cmd->events);
    7210:	68a0      	ldr	r0, [r4, #8]
    7212:	f7ff ff65 	bl	70e0 <sys_get_le64>
    7216:	4b77      	ldr	r3, [pc, #476]	; (73f4 <hci_cmd_handle+0x30c>)
    7218:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    721c:	4611      	mov	r1, r2
    721e:	a807      	add	r0, sp, #28
    7220:	f7ff fdfc 	bl	6e1c <cmd_complete>
	ccst->status = 0x00;
    7224:	7005      	strb	r5, [r0, #0]
    7226:	e7c0      	b.n	71aa <hci_cmd_handle+0xc2>
    7228:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    722a:	2104      	movs	r1, #4
    722c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    722e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    7230:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    7232:	f7ff fdf3 	bl	6e1c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    7236:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    7238:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    723a:	1cc2      	adds	r2, r0, #3
    723c:	4639      	mov	r1, r7
    723e:	4630      	mov	r0, r6
    7240:	f007 f93d 	bl	e4be <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    7244:	2800      	cmp	r0, #0
    7246:	bf14      	ite	ne
    7248:	2302      	movne	r3, #2
    724a:	2300      	moveq	r3, #0
    724c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    724e:	f8a4 5001 	strh.w	r5, [r4, #1]
    7252:	e7aa      	b.n	71aa <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
    7254:	68a3      	ldr	r3, [r4, #8]
    7256:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    7258:	a908      	add	r1, sp, #32
    725a:	b2a0      	uxth	r0, r4
    725c:	f007 f939 	bl	e4d2 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    7260:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    7262:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    7264:	a807      	add	r0, sp, #28
    7266:	f7ff fdd9 	bl	6e1c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    726a:	2d00      	cmp	r5, #0
    726c:	bf14      	ite	ne
    726e:	230c      	movne	r3, #12
    7270:	2300      	moveq	r3, #0
    7272:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    7274:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    7278:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    727c:	f8a0 3003 	strh.w	r3, [r0, #3]
    7280:	e793      	b.n	71aa <hci_cmd_handle+0xc2>
    7282:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7284:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    7286:	8859      	ldrh	r1, [r3, #2]
    7288:	b2a0      	uxth	r0, r4
    728a:	f007 f936 	bl	e4fa <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    728e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    7290:	2103      	movs	r1, #3
    7292:	a807      	add	r0, sp, #28
    7294:	f7ff fdc2 	bl	6e1c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    7298:	2d00      	cmp	r5, #0
    729a:	bf14      	ite	ne
    729c:	230c      	movne	r3, #12
    729e:	2300      	moveq	r3, #0
    72a0:	7003      	strb	r3, [r0, #0]
    72a2:	e271      	b.n	7788 <hci_cmd_handle+0x6a0>
	switch (ocf) {
    72a4:	3a01      	subs	r2, #1
    72a6:	2a08      	cmp	r2, #8
    72a8:	f63f af44 	bhi.w	7134 <hci_cmd_handle+0x4c>
    72ac:	a301      	add	r3, pc, #4	; (adr r3, 72b4 <hci_cmd_handle+0x1cc>)
    72ae:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    72b2:	bf00      	nop
    72b4:	000072d9 	.word	0x000072d9
    72b8:	00007303 	.word	0x00007303
    72bc:	000073b7 	.word	0x000073b7
    72c0:	00007135 	.word	0x00007135
    72c4:	00007135 	.word	0x00007135
    72c8:	00007135 	.word	0x00007135
    72cc:	00007135 	.word	0x00007135
    72d0:	00007135 	.word	0x00007135
    72d4:	000073d3 	.word	0x000073d3
	rp = cmd_complete(evt, sizeof(*rp));
    72d8:	2109      	movs	r1, #9
    72da:	a807      	add	r0, sp, #28
    72dc:	f7ff fd9e 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    72e0:	2300      	movs	r3, #0
    72e2:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    72e4:	7083      	strb	r3, [r0, #2]
    72e6:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    72e8:	f06f 030e 	mvn.w	r3, #14
    72ec:	7143      	strb	r3, [r0, #5]
    72ee:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    72f0:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    72f2:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    72f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    72f8:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    72fa:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    72fc:	71c3      	strb	r3, [r0, #7]
    72fe:	7203      	strb	r3, [r0, #8]
    7300:	e753      	b.n	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7302:	2141      	movs	r1, #65	; 0x41
    7304:	a807      	add	r0, sp, #28
    7306:	f7ff fd89 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    730a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    730c:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    730e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    7310:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    7314:	f7fa fc9e 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    7318:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    731a:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    731c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7320:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    7322:	79a3      	ldrb	r3, [r4, #6]
    7324:	f063 033f 	orn	r3, r3, #63	; 0x3f
    7328:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    732a:	7ae3      	ldrb	r3, [r4, #11]
    732c:	f043 0304 	orr.w	r3, r3, #4
    7330:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    7332:	7be3      	ldrb	r3, [r4, #15]
    7334:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    7338:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    733a:	7c23      	ldrb	r3, [r4, #16]
    733c:	f043 0302 	orr.w	r3, r3, #2
    7340:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    7342:	7de3      	ldrb	r3, [r4, #23]
    7344:	f043 0304 	orr.w	r3, r3, #4
    7348:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    734a:	7ea3      	ldrb	r3, [r4, #26]
    734c:	f043 0317 	orr.w	r3, r3, #23
    7350:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    7352:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    7354:	f043 0309 	orr.w	r3, r3, #9
    7358:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    735a:	7863      	ldrb	r3, [r4, #1]
    735c:	f043 0320 	orr.w	r3, r3, #32
    7360:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    7362:	23ff      	movs	r3, #255	; 0xff
    7364:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    7366:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    736a:	f063 030f 	orn	r3, r3, #15
    736e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    7372:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    7376:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    737a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    737e:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    7380:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    7384:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    7388:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    738c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    7390:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    7394:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    7398:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    739c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    73a0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    73a4:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    73a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    73ac:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    73b0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    73b4:	e6f9      	b.n	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    73b6:	2109      	movs	r1, #9
    73b8:	a807      	add	r0, sp, #28
    73ba:	f7ff fd2f 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    73be:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    73c0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    73c2:	2208      	movs	r2, #8
	rp->status = 0x00;
    73c4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    73c8:	f7fa fc44 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    73cc:	2360      	movs	r3, #96	; 0x60
    73ce:	7163      	strb	r3, [r4, #5]
    73d0:	e6eb      	b.n	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    73d2:	2107      	movs	r1, #7
    73d4:	a807      	add	r0, sp, #28
    73d6:	f7ff fd21 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    73da:	4601      	mov	r1, r0
    73dc:	2300      	movs	r3, #0
    73de:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    73e2:	4618      	mov	r0, r3
    73e4:	f7ff fb92 	bl	6b0c <ll_addr_get>
    73e8:	e6df      	b.n	71aa <hci_cmd_handle+0xc2>
    73ea:	bf00      	nop
    73ec:	200005c4 	.word	0x200005c4
    73f0:	200005cc 	.word	0x200005cc
    73f4:	20003740 	.word	0x20003740
    73f8:	20000658 	.word	0x20000658
    73fc:	20003748 	.word	0x20003748
	switch (ocf) {
    7400:	3a01      	subs	r2, #1
    7402:	2a4d      	cmp	r2, #77	; 0x4d
    7404:	f63f ae96 	bhi.w	7134 <hci_cmd_handle+0x4c>
    7408:	a301      	add	r3, pc, #4	; (adr r3, 7410 <hci_cmd_handle+0x328>)
    740a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    740e:	bf00      	nop
    7410:	00007549 	.word	0x00007549
    7414:	00007553 	.word	0x00007553
    7418:	0000756b 	.word	0x0000756b
    741c:	00007135 	.word	0x00007135
    7420:	0000758f 	.word	0x0000758f
    7424:	00007135 	.word	0x00007135
    7428:	00007135 	.word	0x00007135
    742c:	00007135 	.word	0x00007135
    7430:	00007135 	.word	0x00007135
    7434:	00007135 	.word	0x00007135
    7438:	00007633 	.word	0x00007633
    743c:	00007661 	.word	0x00007661
    7440:	00007681 	.word	0x00007681
    7444:	000076ab 	.word	0x000076ab
    7448:	0000759b 	.word	0x0000759b
    744c:	000075b1 	.word	0x000075b1
    7450:	000075c3 	.word	0x000075c3
    7454:	000075cb 	.word	0x000075cb
    7458:	0000774b 	.word	0x0000774b
    745c:	0000770b 	.word	0x0000770b
    7460:	00007727 	.word	0x00007727
    7464:	00007741 	.word	0x00007741
    7468:	000075d3 	.word	0x000075d3
    746c:	000075f9 	.word	0x000075f9
    7470:	00007713 	.word	0x00007713
    7474:	00007135 	.word	0x00007135
    7478:	00007135 	.word	0x00007135
    747c:	0000760f 	.word	0x0000760f
    7480:	00007135 	.word	0x00007135
    7484:	00007135 	.word	0x00007135
    7488:	00007135 	.word	0x00007135
    748c:	00007765 	.word	0x00007765
    7490:	0000778f 	.word	0x0000778f
    7494:	0000779d 	.word	0x0000779d
    7498:	000077ad 	.word	0x000077ad
    749c:	000077c5 	.word	0x000077c5
    74a0:	00007135 	.word	0x00007135
    74a4:	00007135 	.word	0x00007135
    74a8:	000078dd 	.word	0x000078dd
    74ac:	000078eb 	.word	0x000078eb
    74b0:	000078f3 	.word	0x000078f3
    74b4:	00007903 	.word	0x00007903
    74b8:	00007915 	.word	0x00007915
    74bc:	00007933 	.word	0x00007933
    74c0:	00007951 	.word	0x00007951
    74c4:	00007967 	.word	0x00007967
    74c8:	000077e1 	.word	0x000077e1
    74cc:	0000780d 	.word	0x0000780d
    74d0:	00007863 	.word	0x00007863
    74d4:	00007881 	.word	0x00007881
    74d8:	00007135 	.word	0x00007135
    74dc:	00007135 	.word	0x00007135
    74e0:	00007135 	.word	0x00007135
    74e4:	00007135 	.word	0x00007135
    74e8:	00007135 	.word	0x00007135
    74ec:	00007135 	.word	0x00007135
    74f0:	00007135 	.word	0x00007135
    74f4:	00007135 	.word	0x00007135
    74f8:	00007135 	.word	0x00007135
    74fc:	00007135 	.word	0x00007135
    7500:	00007135 	.word	0x00007135
    7504:	00007135 	.word	0x00007135
    7508:	00007135 	.word	0x00007135
    750c:	00007135 	.word	0x00007135
    7510:	00007135 	.word	0x00007135
    7514:	00007135 	.word	0x00007135
    7518:	00007135 	.word	0x00007135
    751c:	00007135 	.word	0x00007135
    7520:	00007135 	.word	0x00007135
    7524:	00007135 	.word	0x00007135
    7528:	00007135 	.word	0x00007135
    752c:	00007135 	.word	0x00007135
    7530:	00007135 	.word	0x00007135
    7534:	00007135 	.word	0x00007135
    7538:	0000797b 	.word	0x0000797b
    753c:	00007135 	.word	0x00007135
    7540:	00007135 	.word	0x00007135
    7544:	00007971 	.word	0x00007971
	le_event_mask = sys_get_le64(cmd->events);
    7548:	68a0      	ldr	r0, [r4, #8]
    754a:	f7ff fdc9 	bl	70e0 <sys_get_le64>
    754e:	4baa      	ldr	r3, [pc, #680]	; (77f8 <hci_cmd_handle+0x710>)
    7550:	e65b      	b.n	720a <hci_cmd_handle+0x122>
	rp = cmd_complete(evt, sizeof(*rp));
    7552:	2104      	movs	r1, #4
    7554:	a807      	add	r0, sp, #28
    7556:	f7ff fc61 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    755a:	2300      	movs	r3, #0
    755c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    755e:	221b      	movs	r2, #27
    7560:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    7562:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    7564:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    7566:	70c3      	strb	r3, [r0, #3]
    7568:	e61f      	b.n	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    756a:	2109      	movs	r1, #9
    756c:	a807      	add	r0, sp, #28
    756e:	f7ff fc55 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    7572:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    7574:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    7576:	2208      	movs	r2, #8
	rp->status = 0x00;
    7578:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    757c:	f7fa fb6a 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    7580:	23ff      	movs	r3, #255	; 0xff
    7582:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    7584:	2341      	movs	r3, #65	; 0x41
    7586:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    7588:	2301      	movs	r3, #1
    758a:	70e3      	strb	r3, [r4, #3]
    758c:	e60d      	b.n	71aa <hci_cmd_handle+0xc2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    758e:	68a1      	ldr	r1, [r4, #8]
    7590:	2001      	movs	r0, #1
    7592:	f7ff fad5 	bl	6b40 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    7596:	4604      	mov	r4, r0
    7598:	e0af      	b.n	76fa <hci_cmd_handle+0x612>
	rp = cmd_complete(evt, sizeof(*rp));
    759a:	2102      	movs	r1, #2
    759c:	a807      	add	r0, sp, #28
    759e:	f7ff fc3d 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    75a2:	2300      	movs	r3, #0
    75a4:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    75a6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    75a8:	f007 fdee 	bl	f188 <ll_wl_size_get>
    75ac:	7060      	strb	r0, [r4, #1]
    75ae:	e5fc      	b.n	71aa <hci_cmd_handle+0xc2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    75b0:	2101      	movs	r1, #1
    75b2:	a807      	add	r0, sp, #28
    75b4:	f7ff fc32 	bl	6e1c <cmd_complete>
    75b8:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    75ba:	f007 fde7 	bl	f18c <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    75be:	7020      	strb	r0, [r4, #0]
    75c0:	e5f3      	b.n	71aa <hci_cmd_handle+0xc2>
	status = ll_wl_add(&cmd->addr);
    75c2:	68a0      	ldr	r0, [r4, #8]
    75c4:	f007 fe8e 	bl	f2e4 <ll_wl_add>
    75c8:	e7e5      	b.n	7596 <hci_cmd_handle+0x4ae>
	status = ll_wl_remove(&cmd->addr);
    75ca:	68a0      	ldr	r0, [r4, #8]
    75cc:	f007 fdfe 	bl	f1cc <ll_wl_remove>
    75d0:	e7e1      	b.n	7596 <hci_cmd_handle+0x4ae>
    75d2:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    75d4:	2300      	movs	r3, #0
    75d6:	aa08      	add	r2, sp, #32
    75d8:	f100 0110 	add.w	r1, r0, #16
    75dc:	f008 faa0 	bl	fb20 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    75e0:	2111      	movs	r1, #17
    75e2:	a807      	add	r0, sp, #28
    75e4:	f7ff fc1a 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    75e8:	2300      	movs	r3, #0
    75ea:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    75ee:	2210      	movs	r2, #16
    75f0:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    75f2:	f7fa fb03 	bl	1bfc <memcpy>
    75f6:	e5d8      	b.n	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    75f8:	2109      	movs	r1, #9
    75fa:	a807      	add	r0, sp, #28
    75fc:	f7ff fc0e 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    7600:	2300      	movs	r3, #0
    7602:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    7606:	2108      	movs	r1, #8
    7608:	f7ff faba 	bl	6b80 <bt_rand>
    760c:	e5cd      	b.n	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    760e:	2109      	movs	r1, #9
    7610:	a807      	add	r0, sp, #28
    7612:	f7ff fc03 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    7616:	4601      	mov	r1, r0
    7618:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    761a:	4602      	mov	r2, r0
	rp->status = 0x00;
    761c:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    7620:	4876      	ldr	r0, [pc, #472]	; (77fc <hci_cmd_handle+0x714>)
    7622:	f7ff fbb7 	bl	6d94 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    7626:	f240 203f 	movw	r0, #575	; 0x23f
    762a:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    762c:	f7ff fbb2 	bl	6d94 <sys_put_le32>
    7630:	e5bb      	b.n	71aa <hci_cmd_handle+0xc2>
    7632:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    7634:	7963      	ldrb	r3, [r4, #5]
    7636:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    763a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    763e:	7820      	ldrb	r0, [r4, #0]
    7640:	79a4      	ldrb	r4, [r4, #6]
    7642:	9400      	str	r4, [sp, #0]
    7644:	f007 fbd8 	bl	edf8 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    7648:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    764a:	2101      	movs	r1, #1
    764c:	a807      	add	r0, sp, #28
    764e:	f7ff fbe5 	bl	6e1c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    7652:	2c00      	cmp	r4, #0
    7654:	bf18      	it	ne
    7656:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    7658:	bf08      	it	eq
    765a:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    765c:	7003      	strb	r3, [r0, #0]
    765e:	e5a4      	b.n	71aa <hci_cmd_handle+0xc2>
    7660:	68a2      	ldr	r2, [r4, #8]
    7662:	4b67      	ldr	r3, [pc, #412]	; (7800 <hci_cmd_handle+0x718>)
	if (cmd->enable && cmd->filter_dup) {
    7664:	7810      	ldrb	r0, [r2, #0]
    7666:	b140      	cbz	r0, 767a <hci_cmd_handle+0x592>
    7668:	7852      	ldrb	r2, [r2, #1]
    766a:	b132      	cbz	r2, 767a <hci_cmd_handle+0x592>
		dup_count = 0;
    766c:	2200      	movs	r2, #0
    766e:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    7670:	4b64      	ldr	r3, [pc, #400]	; (7804 <hci_cmd_handle+0x71c>)
		dup_count = -1;
    7672:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    7674:	f007 fbe0 	bl	ee38 <ll_scan_enable>
    7678:	e7e6      	b.n	7648 <hci_cmd_handle+0x560>
		dup_count = -1;
    767a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    767e:	e7f8      	b.n	7672 <hci_cmd_handle+0x58a>
    7680:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    7682:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    7686:	7963      	ldrb	r3, [r4, #5]
    7688:	7922      	ldrb	r2, [r4, #4]
    768a:	8861      	ldrh	r1, [r4, #2]
    768c:	8820      	ldrh	r0, [r4, #0]
    768e:	9504      	str	r5, [sp, #16]
    7690:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    7694:	9503      	str	r5, [sp, #12]
    7696:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    769a:	9502      	str	r5, [sp, #8]
    769c:	7b25      	ldrb	r5, [r4, #12]
    769e:	9501      	str	r5, [sp, #4]
    76a0:	3406      	adds	r4, #6
    76a2:	9400      	str	r4, [sp, #0]
    76a4:	f007 fc02 	bl	eeac <ll_create_connection>
    76a8:	e578      	b.n	719c <hci_cmd_handle+0xb4>
	status = ll_connect_disable();
    76aa:	f007 fa71 	bl	eb90 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    76ae:	4606      	mov	r6, r0
    76b0:	bb48      	cbnz	r0, 7706 <hci_cmd_handle+0x61e>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    76b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    76b6:	2001      	movs	r0, #1
    76b8:	f7fb fe3e 	bl	3338 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    76bc:	4a52      	ldr	r2, [pc, #328]	; (7808 <hci_cmd_handle+0x720>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    76be:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    76c0:	e9d2 4500 	ldrd	r4, r5, [r2]
    76c4:	2400      	movs	r4, #0
    76c6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    76ca:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    76ce:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    76d0:	d004      	beq.n	76dc <hci_cmd_handle+0x5f4>
    76d2:	4632      	mov	r2, r6
    76d4:	4631      	mov	r1, r6
    76d6:	2002      	movs	r0, #2
    76d8:	f7ff fc10 	bl	6efc <le_conn_complete.part.39>
		if ((*evt)->len) {
    76dc:	9807      	ldr	r0, [sp, #28]
    76de:	8984      	ldrh	r4, [r0, #12]
    76e0:	b14c      	cbz	r4, 76f6 <hci_cmd_handle+0x60e>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    76e2:	2101      	movs	r1, #1
    76e4:	a808      	add	r0, sp, #32
    76e6:	f7ff fb99 	bl	6e1c <cmd_complete>
			ccst->status = cmd_status;
    76ea:	2300      	movs	r3, #0
    76ec:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    76ee:	9808      	ldr	r0, [sp, #32]
    76f0:	f7fb fcca 	bl	3088 <bt_recv_prio>
    76f4:	e559      	b.n	71aa <hci_cmd_handle+0xc2>
			net_buf_unref(*evt);
    76f6:	f008 ffcd 	bl	10694 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    76fa:	2101      	movs	r1, #1
    76fc:	a807      	add	r0, sp, #28
    76fe:	f7ff fb8d 	bl	6e1c <cmd_complete>
	ccst->status = status;
    7702:	7004      	strb	r4, [r0, #0]
    7704:	e551      	b.n	71aa <hci_cmd_handle+0xc2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    7706:	240c      	movs	r4, #12
    7708:	e7f7      	b.n	76fa <hci_cmd_handle+0x612>
	status = ll_chm_update(&cmd->ch_map[0]);
    770a:	68a0      	ldr	r0, [r4, #8]
    770c:	f006 fe44 	bl	e398 <ll_chm_update>
    7710:	e79a      	b.n	7648 <hci_cmd_handle+0x560>
    7712:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    7714:	f100 030c 	add.w	r3, r0, #12
    7718:	f100 020a 	add.w	r2, r0, #10
    771c:	1c81      	adds	r1, r0, #2
    771e:	8800      	ldrh	r0, [r0, #0]
    7720:	f007 f8be 	bl	e8a0 <ll_enc_req_send>
    7724:	e53a      	b.n	719c <hci_cmd_handle+0xb4>
	handle = sys_le16_to_cpu(cmd->handle);
    7726:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    7728:	2108      	movs	r1, #8
    772a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    772c:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    772e:	f7ff fb75 	bl	6e1c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    7732:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    7734:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    7736:	1cc1      	adds	r1, r0, #3
    7738:	4630      	mov	r0, r6
    773a:	f006 fe6f 	bl	e41c <ll_chm_get>
    773e:	e581      	b.n	7244 <hci_cmd_handle+0x15c>
	handle = sys_le16_to_cpu(cmd->handle);
    7740:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    7742:	8818      	ldrh	r0, [r3, #0]
    7744:	f006 fe7f 	bl	e446 <ll_feature_req_send>
    7748:	e528      	b.n	719c <hci_cmd_handle+0xb4>
    774a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    774c:	8911      	ldrh	r1, [r2, #8]
    774e:	8893      	ldrh	r3, [r2, #4]
    7750:	8810      	ldrh	r0, [r2, #0]
    7752:	9101      	str	r1, [sp, #4]
    7754:	88d2      	ldrh	r2, [r2, #6]
    7756:	9200      	str	r2, [sp, #0]
    7758:	2200      	movs	r2, #0
    775a:	4611      	mov	r1, r2
    775c:	f006 fda4 	bl	e2a8 <ll_conn_update>
	*evt = cmd_status(status);
    7760:	b2c0      	uxtb	r0, r0
    7762:	e51f      	b.n	71a4 <hci_cmd_handle+0xbc>
    7764:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    7766:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7768:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    776a:	8893      	ldrh	r3, [r2, #4]
    776c:	9101      	str	r1, [sp, #4]
    776e:	88d2      	ldrh	r2, [r2, #6]
    7770:	9200      	str	r2, [sp, #0]
    7772:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    7774:	2102      	movs	r1, #2
    7776:	b2a0      	uxth	r0, r4
    7778:	f006 fd96 	bl	e2a8 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    777c:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    777e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    7780:	a807      	add	r0, sp, #28
    7782:	f7ff fb4b 	bl	6e1c <cmd_complete>
	rp->status = status;
    7786:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    7788:	f8a0 4001 	strh.w	r4, [r0, #1]
    778c:	e50d      	b.n	71aa <hci_cmd_handle+0xc2>
    778e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7790:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    7792:	789a      	ldrb	r2, [r3, #2]
    7794:	2300      	movs	r3, #0
    7796:	9301      	str	r3, [sp, #4]
    7798:	9300      	str	r3, [sp, #0]
    779a:	e7eb      	b.n	7774 <hci_cmd_handle+0x68c>
    779c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    779e:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    77a0:	889a      	ldrh	r2, [r3, #4]
    77a2:	8859      	ldrh	r1, [r3, #2]
    77a4:	b2a0      	uxth	r0, r4
    77a6:	f006 febe 	bl	e526 <ll_length_req_send>
    77aa:	e570      	b.n	728e <hci_cmd_handle+0x1a6>
	rp = cmd_complete(evt, sizeof(*rp));
    77ac:	2105      	movs	r1, #5
    77ae:	a807      	add	r0, sp, #28
    77b0:	f7ff fb34 	bl	6e1c <cmd_complete>
    77b4:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    77b6:	1cc1      	adds	r1, r0, #3
    77b8:	3001      	adds	r0, #1
    77ba:	f006 fed7 	bl	e56c <ll_length_default_get>
	rp->status = 0x00;
    77be:	2300      	movs	r3, #0
    77c0:	7023      	strb	r3, [r4, #0]
    77c2:	e4f2      	b.n	71aa <hci_cmd_handle+0xc2>
    77c4:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    77c6:	8859      	ldrh	r1, [r3, #2]
    77c8:	8818      	ldrh	r0, [r3, #0]
    77ca:	f006 fed9 	bl	e580 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    77ce:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    77d0:	2101      	movs	r1, #1
    77d2:	a807      	add	r0, sp, #28
    77d4:	f7ff fb22 	bl	6e1c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    77d8:	2c00      	cmp	r4, #0
    77da:	bf18      	it	ne
    77dc:	231e      	movne	r3, #30
    77de:	e73b      	b.n	7658 <hci_cmd_handle+0x570>
	rp = cmd_complete(evt, sizeof(*rp));
    77e0:	2109      	movs	r1, #9
    77e2:	a807      	add	r0, sp, #28
    77e4:	f7ff fb1a 	bl	6e1c <cmd_complete>
    77e8:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    77ea:	1dc3      	adds	r3, r0, #7
    77ec:	1d42      	adds	r2, r0, #5
    77ee:	1cc1      	adds	r1, r0, #3
    77f0:	3001      	adds	r0, #1
    77f2:	f006 fecf 	bl	e594 <ll_length_max_get>
    77f6:	e7e2      	b.n	77be <hci_cmd_handle+0x6d6>
    77f8:	20003748 	.word	0x20003748
    77fc:	130f3370 	.word	0x130f3370
    7800:	200005cc 	.word	0x200005cc
    7804:	200005d0 	.word	0x200005d0
    7808:	20003740 	.word	0x20003740
	handle = sys_le16_to_cpu(cmd->handle);
    780c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    780e:	2105      	movs	r1, #5
    7810:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    7812:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    7814:	f7ff fb02 	bl	6e1c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    7818:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    781a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    781c:	1d02      	adds	r2, r0, #4
    781e:	1cc1      	adds	r1, r0, #3
    7820:	4630      	mov	r0, r6
    7822:	f006 fec0 	bl	e5a6 <ll_phy_get>
	return __builtin_ffs(op);
    7826:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    7828:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    782c:	2800      	cmp	r0, #0
    782e:	bf14      	ite	ne
    7830:	230c      	movne	r3, #12
    7832:	2300      	moveq	r3, #0
    7834:	7023      	strb	r3, [r4, #0]
    7836:	2a00      	cmp	r2, #0
    7838:	fa92 f3a2 	rbit	r3, r2
    783c:	fab3 f383 	clz	r3, r3
    7840:	7922      	ldrb	r2, [r4, #4]
    7842:	bf08      	it	eq
    7844:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7848:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    784a:	70e3      	strb	r3, [r4, #3]
    784c:	2a00      	cmp	r2, #0
    784e:	fa92 f3a2 	rbit	r3, r2
    7852:	fab3 f383 	clz	r3, r3
    7856:	bf08      	it	eq
    7858:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    785c:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    785e:	7123      	strb	r3, [r4, #4]
    7860:	e4a3      	b.n	71aa <hci_cmd_handle+0xc2>
    7862:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    7864:	781a      	ldrb	r2, [r3, #0]
    7866:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    7868:	bf44      	itt	mi
    786a:	2107      	movmi	r1, #7
    786c:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    786e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    7870:	bf44      	itt	mi
    7872:	2207      	movmi	r2, #7
    7874:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    7876:	7899      	ldrb	r1, [r3, #2]
    7878:	7858      	ldrb	r0, [r3, #1]
    787a:	f006 fea9 	bl	e5d0 <ll_phy_default_set>
    787e:	e7a6      	b.n	77ce <hci_cmd_handle+0x6e6>
    7880:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    7882:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    7884:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    7886:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    788a:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    788c:	bf44      	itt	mi
    788e:	2103      	movmi	r1, #3
    7890:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    7892:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    7894:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    7896:	bf44      	itt	mi
    7898:	2203      	movmi	r2, #3
    789a:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    789c:	074d      	lsls	r5, r1, #29
    789e:	d002      	beq.n	78a6 <hci_cmd_handle+0x7be>
	    !(cmd->rx_phys & 0x07)) {
    78a0:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    78a2:	075a      	lsls	r2, r3, #29
    78a4:	d105      	bne.n	78b2 <hci_cmd_handle+0x7ca>
		ccst = cmd_complete(evt, sizeof(*ccst));
    78a6:	2101      	movs	r1, #1
    78a8:	a807      	add	r0, sp, #28
    78aa:	f7ff fab7 	bl	6e1c <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    78ae:	2312      	movs	r3, #18
    78b0:	e6d4      	b.n	765c <hci_cmd_handle+0x574>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    78b2:	ea41 0203 	orr.w	r2, r1, r3
    78b6:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    78ba:	d005      	beq.n	78c8 <hci_cmd_handle+0x7e0>
		ccst = cmd_complete(evt, sizeof(*ccst));
    78bc:	2101      	movs	r1, #1
    78be:	a807      	add	r0, sp, #28
    78c0:	f7ff faac 	bl	6e1c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    78c4:	2311      	movs	r3, #17
    78c6:	e6c9      	b.n	765c <hci_cmd_handle+0x574>
	if (phy_opts & 0x03) {
    78c8:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    78cc:	bf1c      	itt	ne
    78ce:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    78d2:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    78d6:	f006 fe85 	bl	e5e4 <ll_phy_req_send>
    78da:	e45f      	b.n	719c <hci_cmd_handle+0xb4>
    78dc:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    78de:	f100 0217 	add.w	r2, r0, #23
    78e2:	1dc1      	adds	r1, r0, #7
    78e4:	f007 fec2 	bl	f66c <ll_rl_add>
    78e8:	e655      	b.n	7596 <hci_cmd_handle+0x4ae>
	status = ll_rl_remove(&cmd->peer_id_addr);
    78ea:	68a0      	ldr	r0, [r4, #8]
    78ec:	f007 ff60 	bl	f7b0 <ll_rl_remove>
    78f0:	e651      	b.n	7596 <hci_cmd_handle+0x4ae>
	ccst = cmd_complete(evt, sizeof(*ccst));
    78f2:	2101      	movs	r1, #1
    78f4:	a807      	add	r0, sp, #28
    78f6:	f7ff fa91 	bl	6e1c <cmd_complete>
    78fa:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    78fc:	f007 fe9c 	bl	f638 <ll_rl_clear>
    7900:	e65d      	b.n	75be <hci_cmd_handle+0x4d6>
	rp = cmd_complete(evt, sizeof(*rp));
    7902:	2102      	movs	r1, #2
    7904:	a807      	add	r0, sp, #28
    7906:	f7ff fa89 	bl	6e1c <cmd_complete>
    790a:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    790c:	f007 fe92 	bl	f634 <ll_rl_size_get>
    7910:	7060      	strb	r0, [r4, #1]
    7912:	e754      	b.n	77be <hci_cmd_handle+0x6d6>
    7914:	2207      	movs	r2, #7
    7916:	68a1      	ldr	r1, [r4, #8]
    7918:	a808      	add	r0, sp, #32
    791a:	f7fa f96f 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    791e:	2107      	movs	r1, #7
    7920:	a807      	add	r0, sp, #28
    7922:	f7ff fa7b 	bl	6e1c <cmd_complete>
    7926:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    7928:	1c41      	adds	r1, r0, #1
    792a:	a808      	add	r0, sp, #32
    792c:	f007 ffce 	bl	f8cc <ll_rl_crpa_get>
    7930:	e645      	b.n	75be <hci_cmd_handle+0x4d6>
    7932:	2207      	movs	r2, #7
    7934:	68a1      	ldr	r1, [r4, #8]
    7936:	a808      	add	r0, sp, #32
    7938:	f7fa f960 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    793c:	2107      	movs	r1, #7
    793e:	a807      	add	r0, sp, #28
    7940:	f7ff fa6c 	bl	6e1c <cmd_complete>
    7944:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    7946:	1c41      	adds	r1, r0, #1
    7948:	a808      	add	r0, sp, #32
    794a:	f007 ffdf 	bl	f90c <ll_rl_lrpa_get>
    794e:	e636      	b.n	75be <hci_cmd_handle+0x4d6>
	u8_t enable = cmd->enable;
    7950:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    7952:	2101      	movs	r1, #1
    7954:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    7956:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    7958:	f7ff fa60 	bl	6e1c <cmd_complete>
    795c:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    795e:	4628      	mov	r0, r5
    7960:	f007 ffec 	bl	f93c <ll_rl_enable>
    7964:	e62b      	b.n	75be <hci_cmd_handle+0x4d6>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    7966:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    7968:	8818      	ldrh	r0, [r3, #0]
    796a:	f007 fff9 	bl	f960 <ll_rl_timeout_set>
    796e:	e43c      	b.n	71ea <hci_cmd_handle+0x102>
    7970:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    7972:	79c1      	ldrb	r1, [r0, #7]
    7974:	f007 fffc 	bl	f970 <ll_priv_mode_set>
    7978:	e60d      	b.n	7596 <hci_cmd_handle+0x4ae>
	rp = cmd_complete(evt, sizeof(*rp));
    797a:	2103      	movs	r1, #3
    797c:	a807      	add	r0, sp, #28
    797e:	f7ff fa4d 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    7982:	4601      	mov	r1, r0
    7984:	2300      	movs	r3, #0
    7986:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    798a:	3001      	adds	r0, #1
    798c:	f7ff f8f4 	bl	6b78 <ll_tx_pwr_get>
    7990:	e40b      	b.n	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7992:	210d      	movs	r1, #13
    7994:	a807      	add	r0, sp, #28
    7996:	f7ff fa41 	bl	6e1c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    799a:	2202      	movs	r2, #2
    799c:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    799e:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    79a0:	2201      	movs	r2, #1
    79a2:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    79a4:	220c      	movs	r2, #12
	rp->status = 0x00;
    79a6:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    79a8:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    79aa:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    79ac:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    79ae:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    79b0:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    79b2:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    79b4:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    79b6:	7242      	strb	r2, [r0, #9]
    79b8:	7283      	strb	r3, [r0, #10]
    79ba:	72c3      	strb	r3, [r0, #11]
    79bc:	7303      	strb	r3, [r0, #12]
    79be:	f7ff bbf4 	b.w	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    79c2:	2141      	movs	r1, #65	; 0x41
    79c4:	a807      	add	r0, sp, #28
    79c6:	f7ff fa29 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    79ca:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    79cc:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    79ce:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    79d0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    79d4:	f7fa f93e 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    79d8:	7863      	ldrb	r3, [r4, #1]
    79da:	f063 0358 	orn	r3, r3, #88	; 0x58
    79de:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    79e0:	78a3      	ldrb	r3, [r4, #2]
    79e2:	f043 0303 	orr.w	r3, r3, #3
    79e6:	70a3      	strb	r3, [r4, #2]
    79e8:	f7ff bbdf 	b.w	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    79ec:	2109      	movs	r1, #9
    79ee:	a807      	add	r0, sp, #28
    79f0:	f7ff fa14 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    79f4:	2100      	movs	r1, #0
    79f6:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    79fa:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    79fc:	f7fa f92a 	bl	1c54 <memset>
    7a00:	f7ff bbd3 	b.w	71aa <hci_cmd_handle+0xc2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    7a04:	4b5c      	ldr	r3, [pc, #368]	; (7b78 <hci_cmd_handle+0xa90>)
    7a06:	aa08      	add	r2, sp, #32
    7a08:	f103 0628 	add.w	r6, r3, #40	; 0x28
    7a0c:	4615      	mov	r5, r2
    7a0e:	6818      	ldr	r0, [r3, #0]
    7a10:	6859      	ldr	r1, [r3, #4]
    7a12:	4614      	mov	r4, r2
    7a14:	c403      	stmia	r4!, {r0, r1}
    7a16:	3308      	adds	r3, #8
    7a18:	42b3      	cmp	r3, r6
    7a1a:	4622      	mov	r2, r4
    7a1c:	d1f7      	bne.n	7a0e <hci_cmd_handle+0x926>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    7a1e:	2129      	movs	r1, #41	; 0x29
    7a20:	a807      	add	r0, sp, #28
    7a22:	f7ff f9fb 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    7a26:	2300      	movs	r3, #0
    7a28:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    7a2c:	2228      	movs	r2, #40	; 0x28
    7a2e:	4629      	mov	r1, r5
    7a30:	e5df      	b.n	75f2 <hci_cmd_handle+0x50a>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    7a32:	68a1      	ldr	r1, [r4, #8]
    7a34:	2000      	movs	r0, #0
    7a36:	f7ff f883 	bl	6b40 <ll_addr_set>
    7a3a:	f7ff bbd6 	b.w	71ea <hci_cmd_handle+0x102>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7a3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7a42:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    7a46:	3201      	adds	r2, #1
    7a48:	d106      	bne.n	7a58 <hci_cmd_handle+0x970>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7a4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7a52:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    7a54:	4293      	cmp	r3, r2
    7a56:	d020      	beq.n	7a9a <hci_cmd_handle+0x9b2>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    7a58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7a5c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    7a60:	07db      	lsls	r3, r3, #31
    7a62:	d51a      	bpl.n	7a9a <hci_cmd_handle+0x9b2>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    7a64:	2118      	movs	r1, #24
    7a66:	a807      	add	r0, sp, #28
    7a68:	f7ff f9d8 	bl	6e1c <cmd_complete>
		rp->status = 0x00;
    7a6c:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    7a6e:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    7a70:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    7a72:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    7a74:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    7a76:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    7a7a:	1ca1      	adds	r1, r4, #2
    7a7c:	f7ff f98a 	bl	6d94 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    7a80:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    7a84:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    7a86:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    7a8a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    7a8e:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    7a90:	2210      	movs	r2, #16
    7a92:	4631      	mov	r1, r6
    7a94:	f104 0008 	add.w	r0, r4, #8
    7a98:	e7b0      	b.n	79fc <hci_cmd_handle+0x914>
	rp = cmd_complete(evt, sizeof(*rp));
    7a9a:	2102      	movs	r1, #2
    7a9c:	a807      	add	r0, sp, #28
    7a9e:	f7ff f9bd 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    7aa2:	2300      	movs	r3, #0
    7aa4:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    7aa6:	7043      	strb	r3, [r0, #1]
    7aa8:	f7ff bb7f 	b.w	71aa <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    7aac:	2121      	movs	r1, #33	; 0x21
    7aae:	a807      	add	r0, sp, #28
    7ab0:	f7ff f9b4 	bl	6e1c <cmd_complete>
	rp->status = 0x00;
    7ab4:	4603      	mov	r3, r0
    7ab6:	2200      	movs	r2, #0
    7ab8:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    7ac0:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7ac2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    7ac6:	3101      	adds	r1, #1
    7ac8:	d04b      	beq.n	7b62 <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    7aca:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    7ace:	3101      	adds	r1, #1
    7ad0:	d047      	beq.n	7b62 <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    7ad2:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    7ad6:	3101      	adds	r1, #1
    7ad8:	d043      	beq.n	7b62 <hci_cmd_handle+0xa7a>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    7ada:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    7ade:	3101      	adds	r1, #1
    7ae0:	d03f      	beq.n	7b62 <hci_cmd_handle+0xa7a>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    7ae2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    7ae6:	4619      	mov	r1, r3
    7ae8:	f7ff f954 	bl	6d94 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    7aec:	1d61      	adds	r1, r4, #5
    7aee:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    7af2:	f7ff f94f 	bl	6d94 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    7af6:	f104 0109 	add.w	r1, r4, #9
    7afa:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    7afe:	f7ff f949 	bl	6d94 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    7b02:	f104 010d 	add.w	r1, r4, #13
    7b06:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    7b0a:	f7ff f943 	bl	6d94 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    7b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7b12:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    7b16:	3301      	adds	r3, #1
    7b18:	f104 0311 	add.w	r3, r4, #17
    7b1c:	d027      	beq.n	7b6e <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    7b1e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    7b22:	3101      	adds	r1, #1
    7b24:	d023      	beq.n	7b6e <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    7b26:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    7b2a:	3101      	adds	r1, #1
    7b2c:	d01f      	beq.n	7b6e <hci_cmd_handle+0xa86>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    7b2e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    7b32:	3101      	adds	r1, #1
    7b34:	d01b      	beq.n	7b6e <hci_cmd_handle+0xa86>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    7b36:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    7b3a:	4619      	mov	r1, r3
    7b3c:	f7ff f92a 	bl	6d94 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    7b40:	f104 0115 	add.w	r1, r4, #21
    7b44:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    7b48:	f7ff f924 	bl	6d94 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    7b4c:	f104 0119 	add.w	r1, r4, #25
    7b50:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    7b54:	f7ff f91e 	bl	6d94 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    7b58:	f104 011d 	add.w	r1, r4, #29
    7b5c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    7b60:	e564      	b.n	762c <hci_cmd_handle+0x544>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    7b62:	2210      	movs	r2, #16
    7b64:	2100      	movs	r1, #0
    7b66:	4618      	mov	r0, r3
    7b68:	f7fa f874 	bl	1c54 <memset>
    7b6c:	e7cf      	b.n	7b0e <hci_cmd_handle+0xa26>
		memset(rp->er, 0x00, sizeof(rp->er));
    7b6e:	2210      	movs	r2, #16
    7b70:	2100      	movs	r1, #0
    7b72:	4618      	mov	r0, r3
    7b74:	e742      	b.n	79fc <hci_cmd_handle+0x914>
    7b76:	bf00      	nop
    7b78:	00012976 	.word	0x00012976

00007b7c <hci_acl_handle>:
{
    7b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    7b80:	2300      	movs	r3, #0
    7b82:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    7b84:	8983      	ldrh	r3, [r0, #12]
    7b86:	2b03      	cmp	r3, #3
{
    7b88:	4606      	mov	r6, r0
    7b8a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    7b8c:	d803      	bhi.n	7b96 <hci_acl_handle+0x1a>
		return -EINVAL;
    7b8e:	f06f 0015 	mvn.w	r0, #21
    7b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    7b96:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    7b9a:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    7b9c:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    7b9e:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    7ba0:	f008 fdc9 	bl	10736 <net_buf_simple_pull>
	if (buf->len < len) {
    7ba4:	89b3      	ldrh	r3, [r6, #12]
    7ba6:	42bb      	cmp	r3, r7
    7ba8:	d3f1      	bcc.n	7b8e <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    7baa:	f006 fe11 	bl	e7d0 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    7bae:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    7bb2:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    7bb4:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    7bb8:	b9f0      	cbnz	r0, 7bf8 <hci_acl_handle+0x7c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    7bba:	4b1e      	ldr	r3, [pc, #120]	; (7c34 <hci_acl_handle+0xb8>)
    7bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7bc0:	2300      	movs	r3, #0
    7bc2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    7bc6:	4313      	orrs	r3, r2
    7bc8:	d012      	beq.n	7bf0 <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7bca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7bce:	2001      	movs	r0, #1
    7bd0:	f7fb fbb2 	bl	3338 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    7bd4:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7bd6:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    7bda:	211a      	movs	r1, #26
    7bdc:	f7ff f8e3 	bl	6da6 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    7be0:	f8d8 0000 	ldr.w	r0, [r8]
    7be4:	2101      	movs	r1, #1
    7be6:	3008      	adds	r0, #8
    7be8:	f008 fd86 	bl	106f8 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    7bec:	2301      	movs	r3, #1
    7bee:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    7bf0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    7bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7bf8:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    7bfa:	f1b9 0f00 	cmp.w	r9, #0
    7bfe:	d002      	beq.n	7c06 <hci_acl_handle+0x8a>
    7c00:	f1b9 0f02 	cmp.w	r9, #2
    7c04:	d113      	bne.n	7c2e <hci_acl_handle+0xb2>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    7c06:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7c08:	f362 0301 	bfi	r3, r2, #0, #2
    7c0c:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    7c0e:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    7c10:	68b1      	ldr	r1, [r6, #8]
    7c12:	463a      	mov	r2, r7
    7c14:	1de0      	adds	r0, r4, #7
    7c16:	f7f9 fff1 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    7c1a:	4621      	mov	r1, r4
    7c1c:	4628      	mov	r0, r5
    7c1e:	f006 fde3 	bl	e7e8 <ll_tx_mem_enqueue>
    7c22:	2800      	cmp	r0, #0
    7c24:	d0e6      	beq.n	7bf4 <hci_acl_handle+0x78>
		ll_tx_mem_release(node_tx);
    7c26:	4620      	mov	r0, r4
    7c28:	f006 fdd8 	bl	e7dc <ll_tx_mem_release>
    7c2c:	e7af      	b.n	7b8e <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7c2e:	2201      	movs	r2, #1
    7c30:	e7ea      	b.n	7c08 <hci_acl_handle+0x8c>
    7c32:	bf00      	nop
    7c34:	20003740 	.word	0x20003740

00007c38 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    7c38:	7a03      	ldrb	r3, [r0, #8]
    7c3a:	f003 0303 	and.w	r3, r3, #3
    7c3e:	3b01      	subs	r3, #1
    7c40:	2b01      	cmp	r3, #1
{
    7c42:	b570      	push	{r4, r5, r6, lr}
    7c44:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    7c46:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    7c48:	d81b      	bhi.n	7c82 <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    7c4a:	f101 0608 	add.w	r6, r1, #8
    7c4e:	4630      	mov	r0, r6
    7c50:	2104      	movs	r1, #4
    7c52:	f008 fd51 	bl	106f8 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    7c56:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    7c58:	7a61      	ldrb	r1, [r4, #9]
    7c5a:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    7c5c:	f003 0303 	and.w	r3, r3, #3
    7c60:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    7c62:	bf0c      	ite	eq
    7c64:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    7c68:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    7c6c:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    7c6e:	4630      	mov	r0, r6
    7c70:	f008 fd42 	bl	106f8 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    7c74:	7a62      	ldrb	r2, [r4, #9]
    7c76:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    7c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    7c7e:	f7f9 bfbd 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    7c82:	4040      	eors	r0, r0
    7c84:	f380 8811 	msr	BASEPRI, r0
    7c88:	f04f 0004 	mov.w	r0, #4
    7c8c:	df02      	svc	2
	...

00007c90 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    7c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7c94:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    7c96:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7c98:	2b01      	cmp	r3, #1
{
    7c9a:	b08f      	sub	sp, #60	; 0x3c
    7c9c:	4604      	mov	r4, r0
    7c9e:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    7ca0:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7ca4:	f000 824f 	beq.w	8146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146>
	switch (node_rx->hdr.type) {
    7ca8:	3b02      	subs	r3, #2
    7caa:	2b0a      	cmp	r3, #10
    7cac:	f200 80be 	bhi.w	7e2c <hci_evt_encode+0x19c>
    7cb0:	e8df f013 	tbh	[pc, r3, lsl #1]
    7cb4:	012b000b 	.word	0x012b000b
    7cb8:	012f012b 	.word	0x012f012b
    7cbc:	017e0163 	.word	0x017e0163
    7cc0:	01cf01aa 	.word	0x01cf01aa
    7cc4:	01fc01e7 	.word	0x01fc01e7
    7cc8:	0217      	.short	0x0217
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7cca:	2301      	movs	r3, #1
    7ccc:	f88d 301d 	strb.w	r3, [sp, #29]
    7cd0:	2303      	movs	r3, #3
    7cd2:	f88d 301e 	strb.w	r3, [sp, #30]
    7cd6:	23ff      	movs	r3, #255	; 0xff
    7cd8:	f88d 301f 	strb.w	r3, [sp, #31]
    7cdc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    7ce0:	2302      	movs	r3, #2
    7ce2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7ce6:	7a43      	ldrb	r3, [r0, #9]
    7ce8:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7cea:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7cec:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    7cf0:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7cf2:	f88d 101c 	strb.w	r1, [sp, #28]
    7cf6:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    7cf8:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7cfa:	f88d 2020 	strb.w	r2, [sp, #32]
	if (adv->tx_addr) {
    7cfe:	d505      	bpl.n	7d0c <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    7d00:	f104 030a 	add.w	r3, r4, #10
    7d04:	464a      	mov	r2, r9
    7d06:	4608      	mov	r0, r1
    7d08:	f007 fdbe 	bl	f888 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    7d0c:	4bb7      	ldr	r3, [pc, #732]	; (7fec <hci_evt_encode+0x35c>)
    7d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d12:	2200      	movs	r2, #0
    7d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    7d18:	4313      	orrs	r3, r2
    7d1a:	f000 80b0 	beq.w	7e7e <hci_evt_encode+0x1ee>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7d1e:	7a63      	ldrb	r3, [r4, #9]
    7d20:	4423      	add	r3, r4
    7d22:	f893 a00c 	ldrb.w	sl, [r3, #12]
    7d26:	4bb2      	ldr	r3, [pc, #712]	; (7ff0 <hci_evt_encode+0x360>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    7d28:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d2c:	f1ba 0f00 	cmp.w	sl, #0
    7d30:	d13d      	bne.n	7dae <hci_evt_encode+0x11e>
    7d32:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    7d36:	2300      	movs	r3, #0
    7d38:	4313      	orrs	r3, r2
    7d3a:	f000 80a0 	beq.w	7e7e <hci_evt_encode+0x1ee>
	if (dup_count >= 0) {
    7d3e:	4bad      	ldr	r3, [pc, #692]	; (7ff4 <hci_evt_encode+0x364>)
    7d40:	681a      	ldr	r2, [r3, #0]
    7d42:	2a00      	cmp	r2, #0
    7d44:	4698      	mov	r8, r3
    7d46:	db54      	blt.n	7df2 <hci_evt_encode+0x162>
    7d48:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    7d4c:	2600      	movs	r6, #0
    7d4e:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    7d52:	f8d8 2000 	ldr.w	r2, [r8]
    7d56:	4296      	cmp	r6, r2
    7d58:	db2c      	blt.n	7db4 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    7d5a:	4ea7      	ldr	r6, [pc, #668]	; (7ff8 <hci_evt_encode+0x368>)
    7d5c:	f8df b29c 	ldr.w	fp, [pc, #668]	; 7ffc <hci_evt_encode+0x36c>
    7d60:	6830      	ldr	r0, [r6, #0]
    7d62:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    7d66:	4619      	mov	r1, r3
    7d68:	2206      	movs	r2, #6
    7d6a:	3002      	adds	r0, #2
    7d6c:	f7f9 ff46 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    7d70:	6832      	ldr	r2, [r6, #0]
    7d72:	7a23      	ldrb	r3, [r4, #8]
    7d74:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    7d78:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7d7c:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    7d7e:	7a23      	ldrb	r3, [r4, #8]
    7d80:	f003 010f 	and.w	r1, r3, #15
    7d84:	2301      	movs	r3, #1
    7d86:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7d88:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    7d8c:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7d90:	290f      	cmp	r1, #15
			dup_count++;
    7d92:	bfd5      	itete	le
    7d94:	3101      	addle	r1, #1
			dup_curr++;
    7d96:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    7d98:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    7d9a:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7d9c:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    7d9e:	bfd8      	it	le
    7da0:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7da4:	2a10      	cmp	r2, #16
    7da6:	d124      	bne.n	7df2 <hci_evt_encode+0x162>
			dup_curr = 0;
    7da8:	2200      	movs	r2, #0
    7daa:	6032      	str	r2, [r6, #0]
    7dac:	e021      	b.n	7df2 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    7dae:	f002 020b 	and.w	r2, r2, #11
    7db2:	e7c0      	b.n	7d36 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    7db4:	4618      	mov	r0, r3
    7db6:	2206      	movs	r2, #6
    7db8:	4659      	mov	r1, fp
    7dba:	9303      	str	r3, [sp, #12]
    7dbc:	f7f9 ff09 	bl	1bd2 <memcmp>
    7dc0:	9b03      	ldr	r3, [sp, #12]
    7dc2:	bb00      	cbnz	r0, 7e06 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    7dc4:	7a21      	ldrb	r1, [r4, #8]
    7dc6:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    7dca:	460a      	mov	r2, r1
    7dcc:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    7dd0:	4281      	cmp	r1, r0
    7dd2:	d118      	bne.n	7e06 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    7dd4:	4889      	ldr	r0, [pc, #548]	; (7ffc <hci_evt_encode+0x36c>)
    7dd6:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    7dda:	f002 020f 	and.w	r2, r2, #15
    7dde:	fa23 f102 	lsr.w	r1, r3, r2
    7de2:	07c9      	lsls	r1, r1, #31
    7de4:	d44b      	bmi.n	7e7e <hci_evt_encode+0x1ee>
				dup_filter[i].mask |= BIT(adv->type);
    7de6:	2101      	movs	r1, #1
    7de8:	fa01 f202 	lsl.w	r2, r1, r2
    7dec:	4313      	orrs	r3, r2
    7dee:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    7df2:	f894 b008 	ldrb.w	fp, [r4, #8]
    7df6:	7a63      	ldrb	r3, [r4, #9]
    7df8:	f00b 0b0f 	and.w	fp, fp, #15
    7dfc:	f1bb 0f01 	cmp.w	fp, #1
    7e00:	d105      	bne.n	7e0e <hci_evt_encode+0x17e>
		data_len = 0;
    7e02:	2600      	movs	r6, #0
    7e04:	e005      	b.n	7e12 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    7e06:	3601      	adds	r6, #1
    7e08:	f10b 0b08 	add.w	fp, fp, #8
    7e0c:	e7a1      	b.n	7d52 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    7e0e:	1f9e      	subs	r6, r3, #6
    7e10:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7e12:	4423      	add	r3, r4
    7e14:	f893 800a 	ldrb.w	r8, [r3, #10]
    7e18:	f1c8 0800 	rsb	r8, r8, #0
    7e1c:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    7e20:	f1ba 0f00 	cmp.w	sl, #0
    7e24:	d038      	beq.n	7e98 <hci_evt_encode+0x208>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    7e26:	f1bb 0f01 	cmp.w	fp, #1
    7e2a:	d005      	beq.n	7e38 <hci_evt_encode+0x1a8>
		LL_ASSERT(0);
    7e2c:	4040      	eors	r0, r0
    7e2e:	f380 8811 	msr	BASEPRI, r0
    7e32:	f04f 0004 	mov.w	r0, #4
    7e36:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    7e38:	2211      	movs	r2, #17
    7e3a:	210b      	movs	r1, #11
    7e3c:	4628      	mov	r0, r5
    7e3e:	f7fe ffd7 	bl	6df0 <meta_evt>
		drp->num_reports = 1;
    7e42:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    7e46:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    7e4a:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    7e4c:	f007 fbf2 	bl	f634 <ll_rl_size_get>
    7e50:	4581      	cmp	r9, r0
    7e52:	f105 0003 	add.w	r0, r5, #3
    7e56:	d215      	bcs.n	7e84 <hci_evt_encode+0x1f4>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    7e58:	4602      	mov	r2, r0
    7e5a:	1ca9      	adds	r1, r5, #2
    7e5c:	4648      	mov	r0, r9
    7e5e:	f007 fab7 	bl	f3d0 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    7e62:	78ab      	ldrb	r3, [r5, #2]
    7e64:	3302      	adds	r3, #2
    7e66:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    7e68:	2301      	movs	r3, #1
    7e6a:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    7e6c:	2206      	movs	r2, #6
    7e6e:	f107 0108 	add.w	r1, r7, #8
    7e72:	f105 000a 	add.w	r0, r5, #10
    7e76:	f7f9 fec1 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    7e7a:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    7e7e:	b00f      	add	sp, #60	; 0x3c
    7e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    7e84:	7a23      	ldrb	r3, [r4, #8]
    7e86:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7e8a:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    7e8c:	2206      	movs	r2, #6
    7e8e:	f104 010a 	add.w	r1, r4, #10
    7e92:	f7f9 feb3 	bl	1bfc <memcpy>
    7e96:	e7e7      	b.n	7e68 <hci_evt_encode+0x1d8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    7e98:	f106 020b 	add.w	r2, r6, #11
    7e9c:	b2d2      	uxtb	r2, r2
    7e9e:	2102      	movs	r1, #2
    7ea0:	4628      	mov	r0, r5
    7ea2:	f7fe ffa5 	bl	6df0 <meta_evt>
	sep->num_reports = 1;
    7ea6:	2301      	movs	r3, #1
    7ea8:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    7eaa:	7a23      	ldrb	r3, [r4, #8]
    7eac:	aa0e      	add	r2, sp, #56	; 0x38
    7eae:	f003 030f 	and.w	r3, r3, #15
    7eb2:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    7eb4:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    7eb6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    7eba:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    7ebc:	7a63      	ldrb	r3, [r4, #9]
    7ebe:	4423      	add	r3, r4
    7ec0:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    7ec4:	f007 fbb6 	bl	f634 <ll_rl_size_get>
    7ec8:	4581      	cmp	r9, r0
    7eca:	f105 0003 	add.w	r0, r5, #3
    7ece:	d212      	bcs.n	7ef6 <hci_evt_encode+0x266>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    7ed0:	4602      	mov	r2, r0
    7ed2:	1ca9      	adds	r1, r5, #2
    7ed4:	4648      	mov	r0, r9
    7ed6:	f007 fa7b 	bl	f3d0 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    7eda:	78ab      	ldrb	r3, [r5, #2]
    7edc:	3302      	adds	r3, #2
    7ede:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    7ee0:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    7ee2:	350a      	adds	r5, #10
    7ee4:	4632      	mov	r2, r6
    7ee6:	f107 0108 	add.w	r1, r7, #8
    7eea:	4628      	mov	r0, r5
    7eec:	f7f9 fe86 	bl	1bfc <memcpy>
	*prssi = rssi;
    7ef0:	f805 8006 	strb.w	r8, [r5, r6]
    7ef4:	e7c3      	b.n	7e7e <hci_evt_encode+0x1ee>
		adv_info->addr.type = adv->tx_addr;
    7ef6:	7a23      	ldrb	r3, [r4, #8]
    7ef8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7efc:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    7efe:	2206      	movs	r2, #6
    7f00:	f104 010a 	add.w	r1, r4, #10
    7f04:	f7f9 fe7a 	bl	1bfc <memcpy>
    7f08:	e7ea      	b.n	7ee0 <hci_evt_encode+0x250>
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    7f0a:	4638      	mov	r0, r7
    7f0c:	f7ff f8c8 	bl	70a0 <le_adv_ext_report.isra.66>
    7f10:	e7b5      	b.n	7e7e <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7f12:	4b36      	ldr	r3, [pc, #216]	; (7fec <hci_evt_encode+0x35c>)
    7f14:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f18:	2200      	movs	r2, #0
    7f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    7f1e:	4313      	orrs	r3, r2
    7f20:	f100 060a 	add.w	r6, r0, #10
    7f24:	d007      	beq.n	7f36 <hci_evt_encode+0x2a6>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    7f26:	4b32      	ldr	r3, [pc, #200]	; (7ff0 <hci_evt_encode+0x360>)
    7f28:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f2c:	2300      	movs	r3, #0
    7f2e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7f32:	4313      	orrs	r3, r2
    7f34:	d110      	bne.n	7f58 <hci_evt_encode+0x2c8>
		addr.type = adv->tx_addr;
    7f36:	7a23      	ldrb	r3, [r4, #8]
    7f38:	ac0e      	add	r4, sp, #56	; 0x38
    7f3a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7f3e:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    7f42:	4631      	mov	r1, r6
    7f44:	2206      	movs	r2, #6
    7f46:	f10d 0015 	add.w	r0, sp, #21
    7f4a:	f7f9 fe57 	bl	1bfc <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    7f4e:	a907      	add	r1, sp, #28
    7f50:	4620      	mov	r0, r4
    7f52:	f7ff f869 	bl	7028 <bt_addr_le_to_str.constprop.71>
    7f56:	e792      	b.n	7e7e <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    7f58:	2208      	movs	r2, #8
    7f5a:	2113      	movs	r1, #19
    7f5c:	4628      	mov	r0, r5
    7f5e:	f7fe ff47 	bl	6df0 <meta_evt>
	sep->handle = 0;
    7f62:	2300      	movs	r3, #0
    7f64:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    7f66:	7a23      	ldrb	r3, [r4, #8]
    7f68:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7f6c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    7f6e:	2206      	movs	r2, #6
    7f70:	4631      	mov	r1, r6
    7f72:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    7f74:	f7f9 fe42 	bl	1bfc <memcpy>
    7f78:	e781      	b.n	7e7e <hci_evt_encode+0x1ee>
			le_conn_complete(cc->status, cc, handle, buf);
    7f7a:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    7f7c:	b93f      	cbnz	r7, 7f8e <hci_evt_encode+0x2fe>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    7f7e:	f100 0314 	add.w	r3, r0, #20
    7f82:	f100 010e 	add.w	r1, r0, #14
    7f86:	22ff      	movs	r2, #255	; 0xff
    7f88:	7b40      	ldrb	r0, [r0, #13]
    7f8a:	f007 fc7d 	bl	f888 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7f8e:	4b17      	ldr	r3, [pc, #92]	; (7fec <hci_evt_encode+0x35c>)
    7f90:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f94:	2200      	movs	r2, #0
    7f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    7f9a:	4313      	orrs	r3, r2
    7f9c:	f43f af6f 	beq.w	7e7e <hci_evt_encode+0x1ee>
    7fa0:	462b      	mov	r3, r5
    7fa2:	4632      	mov	r2, r6
    7fa4:	f104 010b 	add.w	r1, r4, #11
    7fa8:	4638      	mov	r0, r7
    7faa:	f7fe ffa7 	bl	6efc <le_conn_complete.part.39>
    7fae:	e766      	b.n	7e7e <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    7fb0:	4b0e      	ldr	r3, [pc, #56]	; (7fec <hci_evt_encode+0x35c>)
    7fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fb6:	2300      	movs	r3, #0
    7fb8:	f002 0210 	and.w	r2, r2, #16
    7fbc:	4313      	orrs	r3, r2
    7fbe:	f43f af5e 	beq.w	7e7e <hci_evt_encode+0x1ee>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    7fc2:	2204      	movs	r2, #4
    7fc4:	2105      	movs	r1, #5
    7fc6:	4628      	mov	r0, r5
    7fc8:	f7fe feed 	bl	6da6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    7fcc:	2104      	movs	r1, #4
    7fce:	f105 0008 	add.w	r0, r5, #8
    7fd2:	f008 fb91 	bl	106f8 <net_buf_simple_add>
	ep->status = 0x00;
    7fd6:	2300      	movs	r3, #0
	conn_count--;
    7fd8:	4a09      	ldr	r2, [pc, #36]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
	ep->status = 0x00;
    7fda:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    7fdc:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    7fe0:	7a23      	ldrb	r3, [r4, #8]
    7fe2:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    7fe4:	6813      	ldr	r3, [r2, #0]
    7fe6:	3b01      	subs	r3, #1
    7fe8:	6013      	str	r3, [r2, #0]
    7fea:	e748      	b.n	7e7e <hci_evt_encode+0x1ee>
    7fec:	20003740 	.word	0x20003740
    7ff0:	20003748 	.word	0x20003748
    7ff4:	200005cc 	.word	0x200005cc
    7ff8:	200005d0 	.word	0x200005d0
    7ffc:	200005d4 	.word	0x200005d4
    8000:	200005c8 	.word	0x200005c8
    8004:	200005d6 	.word	0x200005d6
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8008:	4bb9      	ldr	r3, [pc, #740]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    800a:	e9d3 2300 	ldrd	r2, r3, [r3]
    800e:	2200      	movs	r2, #0
    8010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8014:	4313      	orrs	r3, r2
    8016:	f43f af32 	beq.w	7e7e <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    801a:	4bb6      	ldr	r3, [pc, #728]	; (82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>)
    801c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8020:	2300      	movs	r3, #0
    8022:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8026:	4313      	orrs	r3, r2
    8028:	f43f af29 	beq.w	7e7e <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    802c:	2209      	movs	r2, #9
    802e:	2103      	movs	r1, #3
    8030:	4628      	mov	r0, r5
    8032:	f7fe fedd 	bl	6df0 <meta_evt>
	sep->status = radio_cu->status;
    8036:	7ae3      	ldrb	r3, [r4, #11]
    8038:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    803a:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    803c:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    8040:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    8044:	89e3      	ldrh	r3, [r4, #14]
    8046:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    804a:	8a23      	ldrh	r3, [r4, #16]
    804c:	f8a0 3007 	strh.w	r3, [r0, #7]
    8050:	e715      	b.n	7e7e <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    8052:	4ba7      	ldr	r3, [pc, #668]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    8054:	e9d3 2300 	ldrd	r2, r3, [r3]
    8058:	2200      	movs	r2, #0
    805a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    805e:	4313      	orrs	r3, r2
    8060:	f43f af0d 	beq.w	7e7e <hci_evt_encode+0x1ee>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    8064:	2203      	movs	r2, #3
    8066:	2130      	movs	r1, #48	; 0x30
    8068:	4628      	mov	r0, r5
    806a:	f7fe fe9c 	bl	6da6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    806e:	2103      	movs	r1, #3
    8070:	f105 0008 	add.w	r0, r5, #8
    8074:	f008 fb40 	bl	106f8 <net_buf_simple_add>
	ep->status = 0x00;
    8078:	2300      	movs	r3, #0
    807a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    807c:	f8a0 6001 	strh.w	r6, [r0, #1]
    8080:	e6fd      	b.n	7e7e <hci_evt_encode+0x1ee>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    8082:	4b9d      	ldr	r3, [pc, #628]	; (82f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f8>)
    8084:	e9d3 2300 	ldrd	r2, r3, [r3]
    8088:	2300      	movs	r3, #0
    808a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    808e:	4313      	orrs	r3, r2
    8090:	f43f aef5 	beq.w	7e7e <hci_evt_encode+0x1ee>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    8094:	2202      	movs	r2, #2
    8096:	2157      	movs	r1, #87	; 0x57
    8098:	4628      	mov	r0, r5
    809a:	f7fe fe84 	bl	6da6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    809e:	2102      	movs	r1, #2
    80a0:	f105 0008 	add.w	r0, r5, #8
    80a4:	f008 fb28 	bl	106f8 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    80a8:	8006      	strh	r6, [r0, #0]
    80aa:	e6e8      	b.n	7e7e <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80ac:	4b90      	ldr	r3, [pc, #576]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    80ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    80b2:	2200      	movs	r2, #0
    80b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    80b8:	4313      	orrs	r3, r2
    80ba:	f43f aee0 	beq.w	7e7e <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    80be:	4b8d      	ldr	r3, [pc, #564]	; (82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>)
    80c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    80c4:	2300      	movs	r3, #0
    80c6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80ca:	4313      	orrs	r3, r2
    80cc:	f43f aed7 	beq.w	7e7e <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    80d0:	2203      	movs	r2, #3
    80d2:	2114      	movs	r1, #20
    80d4:	4628      	mov	r0, r5
    80d6:	f7fe fe8b 	bl	6df0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    80da:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    80dc:	7ae3      	ldrb	r3, [r4, #11]
    80de:	7083      	strb	r3, [r0, #2]
    80e0:	e6cd      	b.n	7e7e <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80e2:	4b83      	ldr	r3, [pc, #524]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    80e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    80e8:	2200      	movs	r2, #0
    80ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    80ee:	4313      	orrs	r3, r2
    80f0:	f43f aec5 	beq.w	7e7e <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    80f4:	4b7f      	ldr	r3, [pc, #508]	; (82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>)
    80f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    80fa:	2300      	movs	r3, #0
    80fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8100:	4313      	orrs	r3, r2
    8102:	f43f aebc 	beq.w	7e7e <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    8106:	2205      	movs	r2, #5
    8108:	210c      	movs	r1, #12
    810a:	4628      	mov	r0, r5
    810c:	f7fe fe70 	bl	6df0 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    8110:	7ae3      	ldrb	r3, [r4, #11]
    8112:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8114:	f8a0 6001 	strh.w	r6, [r0, #1]
    8118:	7b22      	ldrb	r2, [r4, #12]
    811a:	2a00      	cmp	r2, #0
    811c:	fa92 f3a2 	rbit	r3, r2
    8120:	fab3 f383 	clz	r3, r3
    8124:	bf08      	it	eq
    8126:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    812a:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    812c:	70c3      	strb	r3, [r0, #3]
    812e:	7b62      	ldrb	r2, [r4, #13]
    8130:	fa92 f3a2 	rbit	r3, r2
    8134:	2a00      	cmp	r2, #0
    8136:	fab3 f383 	clz	r3, r3
    813a:	bf08      	it	eq
    813c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8140:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    8142:	7103      	strb	r3, [r0, #4]
    8144:	e69b      	b.n	7e7e <hci_evt_encode+0x1ee>
	switch (pdu_data->llctrl.opcode) {
    8146:	7ac3      	ldrb	r3, [r0, #11]
    8148:	3b03      	subs	r3, #3
    814a:	2b12      	cmp	r3, #18
    814c:	f63f ae6e 	bhi.w	7e2c <hci_evt_encode+0x19c>
    8150:	a201      	add	r2, pc, #4	; (adr r2, 8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>)
    8152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8156:	bf00      	nop
    8158:	000081a5 	.word	0x000081a5
    815c:	00007e2d 	.word	0x00007e2d
    8160:	00007e2d 	.word	0x00007e2d
    8164:	000081ef 	.word	0x000081ef
    8168:	000082df 	.word	0x000082df
    816c:	00007e2d 	.word	0x00007e2d
    8170:	000081fb 	.word	0x000081fb
    8174:	00007e2d 	.word	0x00007e2d
    8178:	00007e2d 	.word	0x00007e2d
    817c:	00008209 	.word	0x00008209
    8180:	00008247 	.word	0x00008247
    8184:	00007e2d 	.word	0x00007e2d
    8188:	0000824f 	.word	0x0000824f
    818c:	00007e2d 	.word	0x00007e2d
    8190:	00007e2d 	.word	0x00007e2d
    8194:	00007e2d 	.word	0x00007e2d
    8198:	00007e2d 	.word	0x00007e2d
    819c:	0000829f 	.word	0x0000829f
    81a0:	0000829f 	.word	0x0000829f
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    81a4:	4b52      	ldr	r3, [pc, #328]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    81a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    81aa:	2200      	movs	r2, #0
    81ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    81b0:	4313      	orrs	r3, r2
    81b2:	f43f ae64 	beq.w	7e7e <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    81b6:	4b4f      	ldr	r3, [pc, #316]	; (82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>)
    81b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    81bc:	2300      	movs	r3, #0
    81be:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    81c2:	4313      	orrs	r3, r2
    81c4:	f43f ae5b 	beq.w	7e7e <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    81c8:	220c      	movs	r2, #12
    81ca:	2105      	movs	r1, #5
    81cc:	4628      	mov	r0, r5
    81ce:	f7fe fe0f 	bl	6df0 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    81d2:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    81d4:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    81d6:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    81da:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    81de:	f7f9 fd0d 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    81e2:	2202      	movs	r2, #2
    81e4:	f104 0114 	add.w	r1, r4, #20
    81e8:	f105 000a 	add.w	r0, r5, #10
    81ec:	e6c2      	b.n	7f74 <hci_evt_encode+0x2e4>
		encrypt_change(0x00, handle, buf);
    81ee:	460a      	mov	r2, r1
    81f0:	2000      	movs	r0, #0
    81f2:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    81f4:	f7fe fe34 	bl	6e60 <encrypt_change>
    81f8:	e641      	b.n	7e7e <hci_evt_encode+0x1ee>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    81fa:	460b      	mov	r3, r1
    81fc:	4632      	mov	r2, r6
    81fe:	4639      	mov	r1, r7
    8200:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    8202:	f7fe fe4d 	bl	6ea0 <le_remote_feat_complete>
    8206:	e63a      	b.n	7e7e <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    8208:	4b39      	ldr	r3, [pc, #228]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    820a:	e9d3 2300 	ldrd	r2, r3, [r3]
    820e:	2300      	movs	r3, #0
    8210:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    8214:	4313      	orrs	r3, r2
    8216:	f43f ae32 	beq.w	7e7e <hci_evt_encode+0x1ee>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    821a:	2208      	movs	r2, #8
    821c:	210c      	movs	r1, #12
    821e:	4628      	mov	r0, r5
    8220:	f7fe fdc1 	bl	6da6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8224:	2108      	movs	r1, #8
    8226:	1868      	adds	r0, r5, r1
    8228:	f008 fa66 	bl	106f8 <net_buf_simple_add>
	ep->status = 0x00;
    822c:	2300      	movs	r3, #0
    822e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8230:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    8234:	7b23      	ldrb	r3, [r4, #12]
    8236:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    8238:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    823c:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    823e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    8242:	80c3      	strh	r3, [r0, #6]
    8244:	e61b      	b.n	7e7e <hci_evt_encode+0x1ee>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    8246:	460a      	mov	r2, r1
    8248:	7b00      	ldrb	r0, [r0, #12]
    824a:	4631      	mov	r1, r6
    824c:	e7d2      	b.n	81f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    824e:	4b28      	ldr	r3, [pc, #160]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    8250:	e9d3 2300 	ldrd	r2, r3, [r3]
    8254:	2200      	movs	r2, #0
    8256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    825a:	4313      	orrs	r3, r2
    825c:	d007      	beq.n	826e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    825e:	4b25      	ldr	r3, [pc, #148]	; (82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>)
    8260:	e9d3 2300 	ldrd	r2, r3, [r3]
    8264:	2300      	movs	r3, #0
    8266:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    826a:	4313      	orrs	r3, r2
    826c:	d108      	bne.n	8280 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x280>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    826e:	2300      	movs	r3, #0
    8270:	9301      	str	r3, [sp, #4]
    8272:	9300      	str	r3, [sp, #0]
    8274:	221a      	movs	r2, #26
    8276:	2102      	movs	r1, #2
    8278:	4630      	mov	r0, r6
    827a:	f006 f815 	bl	e2a8 <ll_conn_update>
    827e:	e5fe      	b.n	7e7e <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    8280:	220a      	movs	r2, #10
    8282:	2106      	movs	r1, #6
    8284:	4628      	mov	r0, r5
    8286:	f7fe fdb3 	bl	6df0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    828a:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    828c:	89a3      	ldrh	r3, [r4, #12]
    828e:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    8290:	89e3      	ldrh	r3, [r4, #14]
    8292:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    8294:	8a23      	ldrh	r3, [r4, #16]
    8296:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    8298:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    829a:	8103      	strh	r3, [r0, #8]
    829c:	e5ef      	b.n	7e7e <hci_evt_encode+0x1ee>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    829e:	4b14      	ldr	r3, [pc, #80]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    82a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    82a4:	2200      	movs	r2, #0
    82a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    82aa:	4313      	orrs	r3, r2
    82ac:	f43f ade7 	beq.w	7e7e <hci_evt_encode+0x1ee>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    82b0:	4b10      	ldr	r3, [pc, #64]	; (82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>)
    82b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    82b6:	2300      	movs	r3, #0
    82b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    82bc:	4313      	orrs	r3, r2
    82be:	f43f adde 	beq.w	7e7e <hci_evt_encode+0x1ee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    82c2:	220a      	movs	r2, #10
    82c4:	2107      	movs	r1, #7
    82c6:	4628      	mov	r0, r5
    82c8:	f7fe fd92 	bl	6df0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    82cc:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    82ce:	8a23      	ldrh	r3, [r4, #16]
    82d0:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    82d2:	8a63      	ldrh	r3, [r4, #18]
    82d4:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    82d6:	89a3      	ldrh	r3, [r4, #12]
    82d8:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    82da:	89e3      	ldrh	r3, [r4, #14]
    82dc:	e7dd      	b.n	829a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29a>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    82de:	7b03      	ldrb	r3, [r0, #12]
    82e0:	2b0e      	cmp	r3, #14
    82e2:	f47f adcc 	bne.w	7e7e <hci_evt_encode+0x1ee>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    82e6:	460b      	mov	r3, r1
    82e8:	4632      	mov	r2, r6
    82ea:	2100      	movs	r1, #0
    82ec:	201a      	movs	r0, #26
    82ee:	e788      	b.n	8202 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x202>
    82f0:	20003740 	.word	0x20003740
    82f4:	20003748 	.word	0x20003748
    82f8:	20000658 	.word	0x20000658

000082fc <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    82fc:	b570      	push	{r4, r5, r6, lr}
    82fe:	4606      	mov	r6, r0
    8300:	460d      	mov	r5, r1
    8302:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    8304:	2113      	movs	r1, #19
    8306:	2205      	movs	r2, #5
    8308:	f7fe fd4d 	bl	6da6 <evt_create>

	ep = net_buf_add(buf, len);
    830c:	2105      	movs	r1, #5
    830e:	f106 0008 	add.w	r0, r6, #8
    8312:	f008 f9f1 	bl	106f8 <net_buf_simple_add>
	ep->num_handles = num_handles;
    8316:	2301      	movs	r3, #1
    8318:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    831a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    831e:	f8a0 4003 	strh.w	r4, [r0, #3]
    8322:	bd70      	pop	{r4, r5, r6, pc}

00008324 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8324:	7903      	ldrb	r3, [r0, #4]
    8326:	2b01      	cmp	r3, #1
    8328:	d006      	beq.n	8338 <hci_get_class+0x14>
    832a:	3b02      	subs	r3, #2
    832c:	b2db      	uxtb	r3, r3
    832e:	2b0a      	cmp	r3, #10
    8330:	d80a      	bhi.n	8348 <hci_get_class+0x24>
    8332:	4a07      	ldr	r2, [pc, #28]	; (8350 <hci_get_class+0x2c>)
    8334:	56d0      	ldrsb	r0, [r2, r3]
    8336:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    8338:	7a03      	ldrb	r3, [r0, #8]
    833a:	f003 0303 	and.w	r3, r3, #3
    833e:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    8340:	bf0c      	ite	eq
    8342:	2002      	moveq	r0, #2
    8344:	2003      	movne	r0, #3
    8346:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    834c:	4770      	bx	lr
    834e:	bf00      	nop
    8350:	0001296b 	.word	0x0001296b

00008354 <hci_init>:
	dup_count = -1;
    8354:	4b0a      	ldr	r3, [pc, #40]	; (8380 <hci_init+0x2c>)
    8356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    835a:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    835c:	4b09      	ldr	r3, [pc, #36]	; (8384 <hci_init+0x30>)
    835e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8362:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8366:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    836a:	4b07      	ldr	r3, [pc, #28]	; (8388 <hci_init+0x34>)
    836c:	2000      	movs	r0, #0
    836e:	2100      	movs	r1, #0
    8370:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8374:	4b05      	ldr	r3, [pc, #20]	; (838c <hci_init+0x38>)
    8376:	201f      	movs	r0, #31
    8378:	2100      	movs	r1, #0
    837a:	e9c3 0100 	strd	r0, r1, [r3]
    837e:	4770      	bx	lr
    8380:	200005cc 	.word	0x200005cc
    8384:	20003740 	.word	0x20003740
    8388:	20000658 	.word	0x20000658
    838c:	20003748 	.word	0x20003748

00008390 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    8390:	bf20      	wfe
	__SEV();
    8392:	bf40      	sev
	__WFE();
    8394:	bf20      	wfe
    8396:	4770      	bx	lr

00008398 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    8398:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    839a:	4b0d      	ldr	r3, [pc, #52]	; (83d0 <pdu_len_cmp+0x38>)
{
    839c:	b089      	sub	sp, #36	; 0x24
    839e:	4605      	mov	r5, r0
    83a0:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    83a2:	aa01      	add	r2, sp, #4
    83a4:	f103 0718 	add.w	r7, r3, #24
    83a8:	6818      	ldr	r0, [r3, #0]
    83aa:	6859      	ldr	r1, [r3, #4]
    83ac:	4614      	mov	r4, r2
    83ae:	c403      	stmia	r4!, {r0, r1}
    83b0:	3308      	adds	r3, #8
    83b2:	42bb      	cmp	r3, r7
    83b4:	4622      	mov	r2, r4
    83b6:	d1f7      	bne.n	83a8 <pdu_len_cmp+0x10>
    83b8:	881b      	ldrh	r3, [r3, #0]
    83ba:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    83bc:	ab08      	add	r3, sp, #32
    83be:	441d      	add	r5, r3
    83c0:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    83c4:	1b83      	subs	r3, r0, r6
    83c6:	4258      	negs	r0, r3
    83c8:	4158      	adcs	r0, r3
    83ca:	b009      	add	sp, #36	; 0x24
    83cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83ce:	bf00      	nop
    83d0:	0001223f 	.word	0x0001223f

000083d4 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    83d4:	6008      	str	r0, [r1, #0]
    83d6:	4770      	bx	lr

000083d8 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    83d8:	b918      	cbnz	r0, 83e2 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    83da:	680b      	ldr	r3, [r1, #0]
    83dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    83e0:	600b      	str	r3, [r1, #0]
    83e2:	4770      	bx	lr

000083e4 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    83e4:	b918      	cbnz	r0, 83ee <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    83e6:	680b      	ldr	r3, [r1, #0]
    83e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    83ec:	600b      	str	r3, [r1, #0]
    83ee:	4770      	bx	lr

000083f0 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    83f0:	b570      	push	{r4, r5, r6, lr}
    83f2:	1d03      	adds	r3, r0, #4
    83f4:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    83f6:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    83f8:	429d      	cmp	r5, r3
    83fa:	d101      	bne.n	8400 <chan_sel_remap+0x10>
    83fc:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    83fe:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    8400:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    8404:	2200      	movs	r2, #0
    8406:	18a0      	adds	r0, r4, r2
    8408:	2a08      	cmp	r2, #8
    840a:	b2c0      	uxtb	r0, r0
    840c:	d101      	bne.n	8412 <chan_sel_remap+0x22>
    840e:	4604      	mov	r4, r0
    8410:	e7f2      	b.n	83f8 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    8412:	f016 0f01 	tst.w	r6, #1
    8416:	d003      	beq.n	8420 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    8418:	2900      	cmp	r1, #0
    841a:	d0f0      	beq.n	83fe <chan_sel_remap+0xe>
				chan_index--;
    841c:	3901      	subs	r1, #1
    841e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    8420:	0876      	lsrs	r6, r6, #1
    8422:	3201      	adds	r2, #1
    8424:	e7ef      	b.n	8406 <chan_sel_remap+0x16>
	...

00008428 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    8428:	4b09      	ldr	r3, [pc, #36]	; (8450 <packet_rx_acquired_count_get+0x28>)
    842a:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    842e:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    8432:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    8434:	bf3b      	ittet	cc
    8436:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    843a:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    843e:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    8442:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    8444:	bf2c      	ite	cs
    8446:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    8448:	1a80      	subcc	r0, r0, r2
    844a:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    844c:	4770      	bx	lr
    844e:	bf00      	nop
    8450:	20000660 	.word	0x20000660

00008454 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    8454:	b508      	push	{r3, lr}
    8456:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    8458:	f7ff ffe6 	bl	8428 <packet_rx_acquired_count_get>
    845c:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    845e:	bf21      	itttt	cs
    8460:	4b04      	ldrcs	r3, [pc, #16]	; (8474 <packet_rx_reserve_get+0x20>)
    8462:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    8466:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    846a:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    846e:	bf38      	it	cc
    8470:	2000      	movcc	r0, #0
}
    8472:	bd08      	pop	{r3, pc}
    8474:	20000660 	.word	0x20000660

00008478 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    8478:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    847a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    847e:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    8482:	429c      	cmp	r4, r3
    8484:	d15a      	bne.n	853c <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    8486:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    848a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    848e:	428b      	cmp	r3, r1
    8490:	d154      	bne.n	853c <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    8492:	f990 301d 	ldrsb.w	r3, [r0, #29]
    8496:	2b00      	cmp	r3, #0
    8498:	db25      	blt.n	84e6 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    849a:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    849c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    849e:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    84a2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    84a4:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    84a8:	4351      	muls	r1, r2
					      conn->supervision_reload *
    84aa:	227d      	movs	r2, #125	; 0x7d
    84ac:	434a      	muls	r2, r1
					      125 / 1000;
    84ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    84b2:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    84b6:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    84ba:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    84be:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    84c0:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    84c4:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    84c6:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    84c8:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    84cc:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    84ce:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    84d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    84d6:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    84da:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    84de:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    84e2:	4618      	mov	r0, r3
    84e4:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    84e6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    84ea:	06dc      	lsls	r4, r3, #27
    84ec:	d428      	bmi.n	8540 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    84ee:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    84f2:	069a      	lsls	r2, r3, #26
    84f4:	d503      	bpl.n	84fe <conn_update_req+0x86>
		    (conn->llcp_features &
    84f6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    84fa:	079b      	lsls	r3, r3, #30
    84fc:	d520      	bpl.n	8540 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    84fe:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    8500:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    8502:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    8506:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    8508:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    850c:	4354      	muls	r4, r2
						conn->supervision_reload *
    850e:	227d      	movs	r2, #125	; 0x7d
    8510:	4362      	muls	r2, r4
						125 / 1000;
    8512:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    8516:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    851a:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    851e:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    8522:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    8524:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    8528:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    852c:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    852e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    8532:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    8536:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    853a:	e7d2      	b.n	84e2 <conn_update_req+0x6a>
		return 1;
    853c:	2001      	movs	r0, #1
    853e:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    8540:	2002      	movs	r0, #2
}
    8542:	bd30      	pop	{r4, r5, pc}

00008544 <packet_rx_allocate>:
{
    8544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    8548:	4d22      	ldr	r5, [pc, #136]	; (85d4 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    854a:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    854e:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    8552:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    8556:	3401      	adds	r4, #1
    8558:	4581      	cmp	r9, r0
    855a:	b2e4      	uxtb	r4, r4
    855c:	bf28      	it	cs
    855e:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    8560:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    8564:	42a3      	cmp	r3, r4
    8566:	bf08      	it	eq
    8568:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    856a:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    856e:	f1b9 0f00 	cmp.w	r9, #0
    8572:	d003      	beq.n	857c <packet_rx_allocate+0x38>
    8574:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    8578:	429c      	cmp	r4, r3
    857a:	d101      	bne.n	8580 <packet_rx_allocate+0x3c>
    857c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    8580:	4638      	mov	r0, r7
    8582:	f7fd fada 	bl	5b3a <mem_acquire>
		if (!link) {
    8586:	4606      	mov	r6, r0
    8588:	2800      	cmp	r0, #0
    858a:	d0f7      	beq.n	857c <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    858c:	4640      	mov	r0, r8
    858e:	f7fd fad4 	bl	5b3a <mem_acquire>
		if (!node_rx) {
    8592:	b928      	cbnz	r0, 85a0 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    8594:	4630      	mov	r0, r6
    8596:	4910      	ldr	r1, [pc, #64]	; (85d8 <packet_rx_allocate+0x94>)
}
    8598:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    859c:	f7fd bae7 	b.w	5b6e <mem_release>
		node_rx->hdr.onion.link = link;
    85a0:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    85a2:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    85a6:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    85aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    85ae:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    85b2:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    85b6:	3401      	adds	r4, #1
    85b8:	b2e4      	uxtb	r4, r4
			acquire = 0;
    85ba:	42a3      	cmp	r3, r4
    85bc:	bf08      	it	eq
    85be:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    85c0:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    85c4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    85c8:	3b01      	subs	r3, #1
    85ca:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    85ce:	fa5f f989 	uxtb.w	r9, r9
    85d2:	e7cc      	b.n	856e <packet_rx_allocate+0x2a>
    85d4:	20000660 	.word	0x20000660
    85d8:	200007a8 	.word	0x200007a8

000085dc <common_init>:
{
    85dc:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    85de:	4c34      	ldr	r4, [pc, #208]	; (86b0 <common_init+0xd4>)
    85e0:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    85e4:	2a00      	cmp	r2, #0
    85e6:	d037      	beq.n	8658 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    85e8:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    85ec:	f44f 71aa 	mov.w	r1, #340	; 0x154
    85f0:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    85f4:	f7fd fa7a 	bl	5aec <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    85f8:	4b2e      	ldr	r3, [pc, #184]	; (86b4 <common_init+0xd8>)
    85fa:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    85fe:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    8602:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8606:	f7fd fa71 	bl	5aec <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    860a:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    860e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    8612:	4b29      	ldr	r3, [pc, #164]	; (86b8 <common_init+0xdc>)
    8614:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    8618:	440a      	add	r2, r1
    861a:	2108      	movs	r1, #8
    861c:	f7fd fa66 	bl	5aec <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    8620:	4b26      	ldr	r3, [pc, #152]	; (86bc <common_init+0xe0>)
    8622:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    8626:	2202      	movs	r2, #2
    8628:	2124      	movs	r1, #36	; 0x24
    862a:	f7fd fa5f 	bl	5aec <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    862e:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    8632:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    8636:	4b22      	ldr	r3, [pc, #136]	; (86c0 <common_init+0xe4>)
    8638:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    863c:	3a01      	subs	r2, #1
    863e:	b292      	uxth	r2, r2
    8640:	f7fd fa54 	bl	5aec <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    8644:	481c      	ldr	r0, [pc, #112]	; (86b8 <common_init+0xdc>)
    8646:	f7fd fa78 	bl	5b3a <mem_acquire>
	LL_ASSERT(link);
    864a:	b940      	cbnz	r0, 865e <common_init+0x82>
    864c:	4040      	eors	r0, r0
    864e:	f380 8811 	msr	BASEPRI, r0
    8652:	f04f 0004 	mov.w	r0, #4
    8656:	df02      	svc	2
		_radio.conn_free = NULL;
    8658:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    865c:	e7cc      	b.n	85f8 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    865e:	4a19      	ldr	r2, [pc, #100]	; (86c4 <common_init+0xe8>)
    8660:	1f11      	subs	r1, r2, #4
    8662:	f7fd fac1 	bl	5be8 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    8666:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    866a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    866e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    8672:	231f      	movs	r3, #31
    8674:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    8678:	2325      	movs	r3, #37	; 0x25
    867a:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    867e:	231b      	movs	r3, #27
    8680:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    8684:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    8688:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    868a:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    868e:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    8690:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    8694:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    8698:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    869c:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    86a0:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    86a4:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    86a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    86ac:	f7ff bf4a 	b.w	8544 <packet_rx_allocate>
    86b0:	20000660 	.word	0x20000660
    86b4:	20000790 	.word	0x20000790
    86b8:	200007a8 	.word	0x200007a8
    86bc:	200007bc 	.word	0x200007bc
    86c0:	200007c4 	.word	0x200007c4
    86c4:	200007b0 	.word	0x200007b0

000086c8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    86c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    86cc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    86ce:	4294      	cmp	r4, r2
{
    86d0:	4681      	mov	r9, r0
    86d2:	460f      	mov	r7, r1
    86d4:	4690      	mov	r8, r2
	if (_first == last) {
    86d6:	d03d      	beq.n	8754 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    86d8:	4e1f      	ldr	r6, [pc, #124]	; (8758 <tx_cmplt_get+0x90>)
    86da:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    86de:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    86e2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    86e4:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    86e6:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    86ea:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    86ee:	b222      	sxth	r2, r4
    86f0:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    86f4:	f8b9 e000 	ldrh.w	lr, [r9]
    86f8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    86fc:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    8700:	4596      	cmp	lr, r2
    8702:	d120      	bne.n	8746 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    8704:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    8706:	2801      	cmp	r0, #1
    8708:	f020 0303 	bic.w	r3, r0, #3
    870c:	d90a      	bls.n	8724 <tx_cmplt_get+0x5c>
    870e:	b1f3      	cbz	r3, 874e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    8710:	1d02      	adds	r2, r0, #4
    8712:	d01c      	beq.n	874e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    8714:	7942      	ldrb	r2, [r0, #5]
    8716:	b1d2      	cbz	r2, 874e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    8718:	7902      	ldrb	r2, [r0, #4]
    871a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    871e:	3a01      	subs	r2, #1
    8720:	2a01      	cmp	r2, #1
    8722:	d814      	bhi.n	874e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    8724:	2201      	movs	r2, #1
			cmplt++;
    8726:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    8728:	604a      	str	r2, [r1, #4]
			cmplt++;
    872a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    872c:	b113      	cbz	r3, 8734 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    872e:	4651      	mov	r1, sl
    8730:	f7fd fa1d 	bl	5b6e <mem_release>
		}

		_first = _first + 1;
    8734:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    8736:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    873a:	b2e4      	uxtb	r4, r4
			_first = 0;
    873c:	42a2      	cmp	r2, r4
    873e:	bf08      	it	eq
    8740:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    8742:	4544      	cmp	r4, r8
    8744:	d1d3      	bne.n	86ee <tx_cmplt_get+0x26>

	*first = _first;
    8746:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    8748:	4628      	mov	r0, r5
    874a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    874e:	f8c1 b004 	str.w	fp, [r1, #4]
    8752:	e7eb      	b.n	872c <tx_cmplt_get+0x64>
		return 0;
    8754:	2500      	movs	r5, #0
    8756:	e7f7      	b.n	8748 <tx_cmplt_get+0x80>
    8758:	20000660 	.word	0x20000660

0000875c <connection_get>:
{
    875c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    875e:	4b09      	ldr	r3, [pc, #36]	; (8784 <connection_get+0x28>)
    8760:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    8764:	4282      	cmp	r2, r0
{
    8766:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    8768:	d90a      	bls.n	8780 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    876a:	4602      	mov	r2, r0
    876c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    8770:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    8774:	f7fd fa16 	bl	5ba4 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    8778:	b110      	cbz	r0, 8780 <connection_get+0x24>
    877a:	8c03      	ldrh	r3, [r0, #32]
    877c:	42a3      	cmp	r3, r4
    877e:	d000      	beq.n	8782 <connection_get+0x26>
	return 0;
    8780:	2000      	movs	r0, #0
}
    8782:	bd10      	pop	{r4, pc}
    8784:	20000660 	.word	0x20000660

00008788 <role_disable>:
{
    8788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    878c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    878e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    8790:	2805      	cmp	r0, #5
{
    8792:	4605      	mov	r5, r0
    8794:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8796:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    8798:	d00e      	beq.n	87b8 <role_disable+0x30>
    879a:	2806      	cmp	r0, #6
    879c:	f000 808e 	beq.w	88bc <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    87a0:	f240 8086 	bls.w	88b0 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    87a4:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    87a6:	b280      	uxth	r0, r0
    87a8:	f7ff ffd8 	bl	875c <connection_get>
			if (!conn) {
    87ac:	2800      	cmp	r0, #0
    87ae:	f000 80d9 	beq.w	8964 <role_disable+0x1dc>
			ticks_active_to_start =
    87b2:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    87b6:	e010      	b.n	87da <role_disable+0x52>
		ticks_xtal_to_start =
    87b8:	4b6b      	ldr	r3, [pc, #428]	; (8968 <role_disable+0x1e0>)
    87ba:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    87bc:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    87c0:	ab02      	add	r3, sp, #8
    87c2:	9300      	str	r3, [sp, #0]
    87c4:	460a      	mov	r2, r1
    87c6:	4b69      	ldr	r3, [pc, #420]	; (896c <role_disable+0x1e4>)
    87c8:	2103      	movs	r1, #3
    87ca:	2000      	movs	r0, #0
    87cc:	f7fe f8c8 	bl	6960 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    87d0:	2802      	cmp	r0, #2
    87d2:	d066      	beq.n	88a2 <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    87d4:	9b02      	ldr	r3, [sp, #8]
    87d6:	2b00      	cmp	r3, #0
    87d8:	d167      	bne.n	88aa <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    87da:	4c63      	ldr	r4, [pc, #396]	; (8968 <role_disable+0x1e0>)
    87dc:	7ca3      	ldrb	r3, [r4, #18]
    87de:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    87e2:	2b00      	cmp	r3, #0
    87e4:	d164      	bne.n	88b0 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    87e6:	ab06      	add	r3, sp, #24
    87e8:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    87ea:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    87ec:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    87f0:	2103      	movs	r1, #3
    87f2:	9300      	str	r3, [sp, #0]
    87f4:	462a      	mov	r2, r5
    87f6:	4b5d      	ldr	r3, [pc, #372]	; (896c <role_disable+0x1e4>)
    87f8:	f7fe f8b2 	bl	6960 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    87fc:	2802      	cmp	r0, #2
    87fe:	d063      	beq.n	88c8 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    8800:	9b02      	ldr	r3, [sp, #8]
    8802:	2b00      	cmp	r3, #0
    8804:	d145      	bne.n	8892 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    8806:	7c23      	ldrb	r3, [r4, #16]
    8808:	429d      	cmp	r5, r3
    880a:	d002      	beq.n	8812 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    880c:	7c63      	ldrb	r3, [r4, #17]
    880e:	429d      	cmp	r5, r3
    8810:	d13b      	bne.n	888a <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    8812:	ab06      	add	r3, sp, #24
    8814:	2202      	movs	r2, #2
    8816:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    881a:	2200      	movs	r2, #0
    881c:	9300      	str	r3, [sp, #0]
    881e:	2103      	movs	r1, #3
    8820:	4b52      	ldr	r3, [pc, #328]	; (896c <role_disable+0x1e4>)
    8822:	4610      	mov	r0, r2
    8824:	f7fe f89c 	bl	6960 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    8828:	2802      	cmp	r0, #2
    882a:	d107      	bne.n	883c <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    882c:	2201      	movs	r2, #1
    882e:	4611      	mov	r1, r2
    8830:	2003      	movs	r0, #3
    8832:	f7fd fa25 	bl	5c80 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    8836:	9b03      	ldr	r3, [sp, #12]
    8838:	2b02      	cmp	r3, #2
    883a:	d039      	beq.n	88b0 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    883c:	9803      	ldr	r0, [sp, #12]
    883e:	2800      	cmp	r0, #0
    8840:	d15e      	bne.n	8900 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    8842:	2302      	movs	r3, #2
    8844:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    8846:	7c23      	ldrb	r3, [r4, #16]
    8848:	2b00      	cmp	r3, #0
    884a:	d031      	beq.n	88b0 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    884c:	ab04      	add	r3, sp, #16
    884e:	9300      	str	r3, [sp, #0]
    8850:	2201      	movs	r2, #1
    8852:	4b46      	ldr	r3, [pc, #280]	; (896c <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    8854:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8856:	2103      	movs	r1, #3
    8858:	f7fe f882 	bl	6960 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    885c:	2802      	cmp	r0, #2
    885e:	d107      	bne.n	8870 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8860:	2201      	movs	r2, #1
    8862:	4611      	mov	r1, r2
    8864:	2003      	movs	r0, #3
    8866:	f7fd fa0b 	bl	5c80 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    886a:	9b04      	ldr	r3, [sp, #16]
    886c:	2b02      	cmp	r3, #2
    886e:	d01f      	beq.n	88b0 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    8870:	9a04      	ldr	r2, [sp, #16]
    8872:	2a00      	cmp	r2, #0
    8874:	d136      	bne.n	88e4 <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    8876:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    887a:	45b0      	cmp	r8, r6
    887c:	d93e      	bls.n	88fc <role_disable+0x174>
				ret = mayfly_enqueue(
    887e:	4b3c      	ldr	r3, [pc, #240]	; (8970 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8880:	4611      	mov	r1, r2
    8882:	2003      	movs	r0, #3
    8884:	f7fd fa24 	bl	5cd0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    8888:	b990      	cbnz	r0, 88b0 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    888a:	7ca3      	ldrb	r3, [r4, #18]
    888c:	b90b      	cbnz	r3, 8892 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    888e:	2301      	movs	r3, #1
    8890:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    8892:	2300      	movs	r3, #0
    8894:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    8896:	9802      	ldr	r0, [sp, #8]
}
    8898:	b006      	add	sp, #24
    889a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    889e:	f7ff fd77 	bl	8390 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    88a2:	9b02      	ldr	r3, [sp, #8]
    88a4:	2b02      	cmp	r3, #2
    88a6:	d0fa      	beq.n	889e <role_disable+0x116>
    88a8:	e794      	b.n	87d4 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    88aa:	9b02      	ldr	r3, [sp, #8]
    88ac:	2b01      	cmp	r3, #1
    88ae:	d094      	beq.n	87da <role_disable+0x52>
		LL_ASSERT(0);
    88b0:	4040      	eors	r0, r0
    88b2:	f380 8811 	msr	BASEPRI, r0
    88b6:	f04f 0004 	mov.w	r0, #4
    88ba:	df02      	svc	2
		ticks_xtal_to_start =
    88bc:	4b2a      	ldr	r3, [pc, #168]	; (8968 <role_disable+0x1e0>)
    88be:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    88c2:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    88c6:	e788      	b.n	87da <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    88c8:	7c63      	ldrb	r3, [r4, #17]
    88ca:	429d      	cmp	r5, r3
    88cc:	d104      	bne.n	88d8 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    88ce:	2201      	movs	r2, #1
    88d0:	4611      	mov	r1, r2
    88d2:	2003      	movs	r0, #3
    88d4:	f7fd f9d4 	bl	5c80 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    88d8:	9b02      	ldr	r3, [sp, #8]
    88da:	2b02      	cmp	r3, #2
    88dc:	d190      	bne.n	8800 <role_disable+0x78>
			cpu_sleep();
    88de:	f7ff fd57 	bl	8390 <cpu_sleep>
    88e2:	e7f9      	b.n	88d8 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    88e4:	9b04      	ldr	r3, [sp, #16]
    88e6:	2b01      	cmp	r3, #1
    88e8:	d1e2      	bne.n	88b0 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    88ea:	2200      	movs	r2, #0
    88ec:	4611      	mov	r1, r2
    88ee:	4b20      	ldr	r3, [pc, #128]	; (8970 <role_disable+0x1e8>)
    88f0:	2003      	movs	r0, #3
    88f2:	f7fd f9ed 	bl	5cd0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    88f6:	4602      	mov	r2, r0
    88f8:	2800      	cmp	r0, #0
    88fa:	d1d9      	bne.n	88b0 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    88fc:	4b1d      	ldr	r3, [pc, #116]	; (8974 <role_disable+0x1ec>)
    88fe:	e7bf      	b.n	8880 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    8900:	9d03      	ldr	r5, [sp, #12]
    8902:	2d01      	cmp	r5, #1
    8904:	d1d4      	bne.n	88b0 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    8906:	2fff      	cmp	r7, #255	; 0xff
    8908:	d019      	beq.n	893e <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    890a:	ab06      	add	r3, sp, #24
    890c:	2202      	movs	r2, #2
    890e:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8912:	2103      	movs	r1, #3
    8914:	9300      	str	r3, [sp, #0]
    8916:	463a      	mov	r2, r7
    8918:	4b14      	ldr	r3, [pc, #80]	; (896c <role_disable+0x1e4>)
    891a:	2000      	movs	r0, #0
    891c:	f7fe f820 	bl	6960 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    8920:	2802      	cmp	r0, #2
    8922:	d107      	bne.n	8934 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8924:	462a      	mov	r2, r5
    8926:	4629      	mov	r1, r5
    8928:	2003      	movs	r0, #3
    892a:	f7fd f9a9 	bl	5c80 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    892e:	9b05      	ldr	r3, [sp, #20]
    8930:	2b02      	cmp	r3, #2
    8932:	d0bd      	beq.n	88b0 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    8934:	9b05      	ldr	r3, [sp, #20]
    8936:	b113      	cbz	r3, 893e <role_disable+0x1b6>
    8938:	9b05      	ldr	r3, [sp, #20]
    893a:	2b01      	cmp	r3, #1
    893c:	d1b8      	bne.n	88b0 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    893e:	7ce3      	ldrb	r3, [r4, #19]
    8940:	2b00      	cmp	r3, #0
    8942:	d0a2      	beq.n	888a <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    8944:	4b0c      	ldr	r3, [pc, #48]	; (8978 <role_disable+0x1f0>)
    8946:	2204      	movs	r2, #4
    8948:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    894a:	2200      	movs	r2, #0
    894c:	4611      	mov	r1, r2
    894e:	2003      	movs	r0, #3
    8950:	f7fd f9be 	bl	5cd0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    8954:	2800      	cmp	r0, #0
    8956:	d1ab      	bne.n	88b0 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    8958:	7ce3      	ldrb	r3, [r4, #19]
    895a:	2b00      	cmp	r3, #0
    895c:	d095      	beq.n	888a <role_disable+0x102>
				cpu_sleep();
    895e:	f7ff fd17 	bl	8390 <cpu_sleep>
    8962:	e7f9      	b.n	8958 <role_disable+0x1d0>
				return 1;
    8964:	2001      	movs	r0, #1
    8966:	e797      	b.n	8898 <role_disable+0x110>
    8968:	20000660 	.word	0x20000660
    896c:	000083d5 	.word	0x000083d5
    8970:	20003770 	.word	0x20003770
    8974:	20003810 	.word	0x20003810
    8978:	20003790 	.word	0x20003790

0000897c <rx_packet_set>:
{
    897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    897e:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    8982:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    8984:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    8986:	f004 0407 	and.w	r4, r4, #7
{
    898a:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    898c:	4620      	mov	r0, r4
    898e:	2100      	movs	r1, #0
    8990:	f007 f9bc 	bl	fd0c <radio_phy_set>
	if (conn->enc_rx) {
    8994:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    8998:	f013 0f10 	tst.w	r3, #16
    899c:	ea4f 0244 	mov.w	r2, r4, lsl #1
    89a0:	d010      	beq.n	89c4 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    89a2:	1d29      	adds	r1, r5, #4
    89a4:	f042 0201 	orr.w	r2, r2, #1
    89a8:	b2c9      	uxtb	r1, r1
    89aa:	2008      	movs	r0, #8
    89ac:	f007 f9f4 	bl	fd98 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    89b0:	463a      	mov	r2, r7
    89b2:	4621      	mov	r1, r4
    89b4:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    89b8:	f007 fc32 	bl	10220 <radio_ccm_rx_pkt_set>
}
    89bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    89c0:	f007 ba18 	b.w	fdf4 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    89c4:	2008      	movs	r0, #8
    89c6:	f042 0201 	orr.w	r2, r2, #1
    89ca:	b2e9      	uxtb	r1, r5
    89cc:	f007 f9e4 	bl	fd98 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    89d0:	4638      	mov	r0, r7
    89d2:	e7f3      	b.n	89bc <rx_packet_set+0x40>

000089d4 <tx_packet_set>:
{
    89d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89d6:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    89d8:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    89dc:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    89de:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    89e2:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    89e4:	09c9      	lsrs	r1, r1, #7
    89e6:	4620      	mov	r0, r4
    89e8:	f007 f990 	bl	fd0c <radio_phy_set>
	if (conn->enc_tx) {
    89ec:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    89f0:	f013 0f20 	tst.w	r3, #32
    89f4:	ea4f 0244 	mov.w	r2, r4, lsl #1
    89f8:	d00f      	beq.n	8a1a <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    89fa:	1d29      	adds	r1, r5, #4
    89fc:	b2c9      	uxtb	r1, r1
    89fe:	2008      	movs	r0, #8
    8a00:	f042 0201 	orr.w	r2, r2, #1
    8a04:	f007 f9c8 	bl	fd98 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    8a08:	4639      	mov	r1, r7
    8a0a:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    8a0e:	f007 fc43 	bl	10298 <radio_ccm_tx_pkt_set>
}
    8a12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    8a16:	f007 b9f3 	b.w	fe00 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    8a1a:	2008      	movs	r0, #8
    8a1c:	f042 0201 	orr.w	r2, r2, #1
    8a20:	b2e9      	uxtb	r1, r5
    8a22:	f007 f9b9 	bl	fd98 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    8a26:	4638      	mov	r0, r7
    8a28:	e7f3      	b.n	8a12 <tx_packet_set+0x3e>
    8a2a:	0000      	movs	r0, r0
    8a2c:	0000      	movs	r0, r0
	...

00008a30 <sched_free_win_offset_calc>:
{
    8a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a34:	b08f      	sub	sp, #60	; 0x3c
    8a36:	4692      	mov	sl, r2
    8a38:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8a3a:	6803      	ldr	r3, [r0, #0]
{
    8a3c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8a3e:	2b00      	cmp	r3, #0
{
    8a40:	4680      	mov	r8, r0
    8a42:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8a44:	da31      	bge.n	8aaa <sched_free_win_offset_calc+0x7a>
		u32_t ticks_prepare_to_start =
    8a46:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    8a48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    8a4c:	4291      	cmp	r1, r2
    8a4e:	bf2c      	ite	cs
    8a50:	1a5a      	subcs	r2, r3, r1
    8a52:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    8a54:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    8a56:	f8d8 200c 	ldr.w	r2, [r8, #12]
    8a5a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8a5c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8a5e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    8a60:	18d3      	adds	r3, r2, r3
    8a62:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8a64:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8a68:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    8a6c:	940c      	str	r4, [sp, #48]	; 0x30
    8a6e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    8a70:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    8a72:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    8a74:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    8a76:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8a78:	2302      	movs	r3, #2
    8a7a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8a7c:	ab0d      	add	r3, sp, #52	; 0x34
    8a7e:	9302      	str	r3, [sp, #8]
    8a80:	4b77      	ldr	r3, [pc, #476]	; (8c60 <sched_free_win_offset_calc+0x230>)
    8a82:	9301      	str	r3, [sp, #4]
    8a84:	ab0b      	add	r3, sp, #44	; 0x2c
    8a86:	9300      	str	r3, [sp, #0]
    8a88:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    8a8c:	ab0c      	add	r3, sp, #48	; 0x30
    8a8e:	2101      	movs	r1, #1
    8a90:	2000      	movs	r0, #0
    8a92:	f7fd ffa1 	bl	69d8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    8a96:	2802      	cmp	r0, #2
    8a98:	d010      	beq.n	8abc <sched_free_win_offset_calc+0x8c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a9c:	b193      	cbz	r3, 8ac4 <sched_free_win_offset_calc+0x94>
			LL_ASSERT(0);
    8a9e:	4040      	eors	r0, r0
    8aa0:	f380 8811 	msr	BASEPRI, r0
    8aa4:	f04f 0004 	mov.w	r0, #4
    8aa8:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    8aaa:	4293      	cmp	r3, r2
    8aac:	bf38      	it	cc
    8aae:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    8ab0:	2200      	movs	r2, #0
    8ab2:	e7cf      	b.n	8a54 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    8ab4:	2101      	movs	r1, #1
    8ab6:	2000      	movs	r0, #0
    8ab8:	f7fe f80c 	bl	6ad4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8abe:	2b02      	cmp	r3, #2
    8ac0:	d0f8      	beq.n	8ab4 <sched_free_win_offset_calc+0x84>
    8ac2:	e7ea      	b.n	8a9a <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    8ac4:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    8ac8:	2aff      	cmp	r2, #255	; 0xff
    8aca:	d05d      	beq.n	8b88 <sched_free_win_offset_calc+0x158>
		if ((ticker_id_prev != 0xff) &&
    8acc:	2fff      	cmp	r7, #255	; 0xff
    8ace:	d002      	beq.n	8ad6 <sched_free_win_offset_calc+0xa6>
    8ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8ad2:	4599      	cmp	r9, r3
    8ad4:	d1e3      	bne.n	8a9e <sched_free_win_offset_calc+0x6e>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    8ad6:	2a05      	cmp	r2, #5
    8ad8:	d951      	bls.n	8b7e <sched_free_win_offset_calc+0x14e>
				  _radio.connection_count)) {
    8ada:	4862      	ldr	r0, [pc, #392]	; (8c64 <sched_free_win_offset_calc+0x234>)
    8adc:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8ae0:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    8ae2:	429a      	cmp	r2, r3
    8ae4:	da4b      	bge.n	8b7e <sched_free_win_offset_calc+0x14e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    8ae6:	2a06      	cmp	r2, #6
    8ae8:	f000 8092 	beq.w	8c10 <sched_free_win_offset_calc+0x1e0>
		if (ticker_id_other != 0xFF) {
    8aec:	9b06      	ldr	r3, [sp, #24]
    8aee:	2bff      	cmp	r3, #255	; 0xff
    8af0:	d14a      	bne.n	8b88 <sched_free_win_offset_calc+0x158>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8af2:	3a07      	subs	r2, #7
    8af4:	b292      	uxth	r2, r2
    8af6:	f44f 71aa 	mov.w	r1, #340	; 0x154
    8afa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    8afe:	f7fd f851 	bl	5ba4 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    8b02:	4580      	cmp	r8, r0
    8b04:	d03b      	beq.n	8b7e <sched_free_win_offset_calc+0x14e>
    8b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b08:	b91b      	cbnz	r3, 8b12 <sched_free_win_offset_calc+0xe2>
    8b0a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    8b0e:	2b00      	cmp	r3, #0
    8b10:	db35      	blt.n	8b7e <sched_free_win_offset_calc+0x14e>
			u32_t ticks_to_expire_normal =
    8b12:	9b05      	ldr	r3, [sp, #20]
    8b14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    8b16:	6841      	ldr	r1, [r0, #4]
    8b18:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8b1a:	6803      	ldr	r3, [r0, #0]
    8b1c:	2b00      	cmp	r3, #0
    8b1e:	da4e      	bge.n	8bbe <sched_free_win_offset_calc+0x18e>
				u32_t ticks_prepare_to_start =
    8b20:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    8b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8b26:	428a      	cmp	r2, r1
    8b28:	bf2c      	ite	cs
    8b2a:	18b6      	addcs	r6, r6, r2
    8b2c:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    8b2e:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    8b30:	68c2      	ldr	r2, [r0, #12]
    8b32:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    8b36:	444b      	add	r3, r9
    8b38:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    8b3a:	f8da 3000 	ldr.w	r3, [sl]
    8b3e:	429e      	cmp	r6, r3
    8b40:	d916      	bls.n	8b70 <sched_free_win_offset_calc+0x140>
    8b42:	429d      	cmp	r5, r3
    8b44:	bf38      	it	cc
    8b46:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    8b48:	9b07      	ldr	r3, [sp, #28]
    8b4a:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    8b4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8b50:	781b      	ldrb	r3, [r3, #0]
    8b52:	42a3      	cmp	r3, r4
    8b54:	d905      	bls.n	8b62 <sched_free_win_offset_calc+0x132>
				       (ticker_ticks_diff_get(
    8b56:	4629      	mov	r1, r5
    8b58:	4630      	mov	r0, r6
    8b5a:	f7fd ffd3 	bl	6b04 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    8b5e:	42b8      	cmp	r0, r7
    8b60:	d231      	bcs.n	8bc6 <sched_free_win_offset_calc+0x196>
				if (_win_offset >= conn_interval) {
    8b62:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    8b66:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    8b68:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    8b6c:	4293      	cmp	r3, r2
    8b6e:	d20b      	bcs.n	8b88 <sched_free_win_offset_calc+0x158>
			ticks_anchor_prev = ticks_anchor;
    8b70:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    8b74:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    8b78:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    8b7c:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    8b7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8b80:	781b      	ldrb	r3, [r3, #0]
    8b82:	42a3      	cmp	r3, r4
    8b84:	f63f af78 	bhi.w	8a78 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    8b88:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    8b8c:	2bff      	cmp	r3, #255	; 0xff
    8b8e:	d111      	bne.n	8bb4 <sched_free_win_offset_calc+0x184>
    8b90:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8c68 <sched_free_win_offset_calc+0x238>
    8b98:	a72f      	add	r7, pc, #188	; (adr r7, 8c58 <sched_free_win_offset_calc+0x228>)
    8b9a:	e9d7 6700 	ldrd	r6, r7, [r7]
    8b9e:	429d      	cmp	r5, r3
    8ba0:	bf38      	it	cc
    8ba2:	461d      	movcc	r5, r3
    8ba4:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    8ba8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	42a3      	cmp	r3, r4
    8bae:	d831      	bhi.n	8c14 <sched_free_win_offset_calc+0x1e4>
		*ticks_to_offset_next = ticks_to_expire_prev;
    8bb0:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    8bb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8bb6:	701c      	strb	r4, [r3, #0]
}
    8bb8:	b00f      	add	sp, #60	; 0x3c
    8bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    8bbe:	428b      	cmp	r3, r1
    8bc0:	bf38      	it	cc
    8bc2:	460b      	movcc	r3, r1
    8bc4:	e7b4      	b.n	8b30 <sched_free_win_offset_calc+0x100>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8bc6:	4a28      	ldr	r2, [pc, #160]	; (8c68 <sched_free_win_offset_calc+0x238>)
    8bc8:	eb05 030b 	add.w	r3, r5, fp
    8bcc:	fba3 0102 	umull	r0, r1, r3, r2
    8bd0:	2207      	movs	r2, #7
    8bd2:	fb02 1103 	mla	r1, r2, r3, r1
    8bd6:	a320      	add	r3, pc, #128	; (adr r3, 8c58 <sched_free_win_offset_calc+0x228>)
    8bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    8bdc:	f7f7 fb1a 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    8be0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8be4:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    8be8:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8bea:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    8bec:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    8bee:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    8bf2:	d20b      	bcs.n	8c0c <sched_free_win_offset_calc+0x1dc>
					memcpy(win_offset +
    8bf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8bf6:	2202      	movs	r2, #2
    8bf8:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    8bfc:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    8c00:	3401      	adds	r4, #1
					memcpy(win_offset +
    8c02:	f7f8 fffb 	bl	1bfc <memcpy>
					offset_index++;
    8c06:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    8c08:	3528      	adds	r5, #40	; 0x28
    8c0a:	e7a0      	b.n	8b4e <sched_free_win_offset_calc+0x11e>
						ticks_to_expire_prev = 0;
    8c0c:	2500      	movs	r5, #0
    8c0e:	e7a8      	b.n	8b62 <sched_free_win_offset_calc+0x132>
    8c10:	9206      	str	r2, [sp, #24]
    8c12:	e7b4      	b.n	8b7e <sched_free_win_offset_calc+0x14e>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8c14:	eb05 030b 	add.w	r3, r5, fp
    8c18:	fba3 0108 	umull	r0, r1, r3, r8
    8c1c:	fb09 1103 	mla	r1, r9, r3, r1
    8c20:	4632      	mov	r2, r6
    8c22:	463b      	mov	r3, r7
    8c24:	f7f7 faf6 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    8c28:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8c2c:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    8c30:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8c32:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    8c34:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    8c36:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    8c3a:	d90b      	bls.n	8c54 <sched_free_win_offset_calc+0x224>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    8c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8c3e:	2202      	movs	r2, #2
    8c40:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    8c44:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    8c48:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    8c4a:	f7f8 ffd7 	bl	1bfc <memcpy>
			offset_index++;
    8c4e:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    8c50:	3528      	adds	r5, #40	; 0x28
    8c52:	e7a9      	b.n	8ba8 <sched_free_win_offset_calc+0x178>
				ticks_to_expire_prev = 0;
    8c54:	2500      	movs	r5, #0
    8c56:	e7ab      	b.n	8bb0 <sched_free_win_offset_calc+0x180>
    8c58:	3b9aca00 	.word	0x3b9aca00
    8c5c:	00000000 	.word	0x00000000
    8c60:	000083d5 	.word	0x000083d5
    8c64:	20000660 	.word	0x20000660
    8c68:	1afd498d 	.word	0x1afd498d

00008c6c <mayfly_sched_free_win_offset_calc>:
{
    8c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    8c6e:	2300      	movs	r3, #0
    8c70:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    8c72:	2306      	movs	r3, #6
    8c74:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    8c78:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8c7c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    8c80:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    8c82:	bfbe      	ittt	lt
    8c84:	4602      	movlt	r2, r0
    8c86:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    8c88:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8c8c:	9101      	str	r1, [sp, #4]
    8c8e:	f10d 010b 	add.w	r1, sp, #11
    8c92:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    8c94:	bfa8      	it	ge
    8c96:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    8c98:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    8c9c:	2100      	movs	r1, #0
    8c9e:	f7ff fec7 	bl	8a30 <sched_free_win_offset_calc>
}
    8ca2:	b005      	add	sp, #20
    8ca4:	f85d fb04 	ldr.w	pc, [sp], #4

00008ca8 <mayfly_sched_win_offset_select>:
{
    8ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8cac:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    8cb0:	b089      	sub	sp, #36	; 0x24
    8cb2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8cb4:	4840      	ldr	r0, [pc, #256]	; (8db8 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    8cb6:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    8cb8:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8cba:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    8cbe:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8cc2:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    8cc6:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8cc8:	fb03 1102 	mla	r1, r3, r2, r1
    8ccc:	a338      	add	r3, pc, #224	; (adr r3, 8db0 <mayfly_sched_win_offset_select+0x108>)
    8cce:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    8cd2:	9505      	str	r5, [sp, #20]
    8cd4:	6075      	str	r5, [r6, #4]
    8cd6:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8cd8:	f7f7 fa9c 	bl	214 <__aeabi_uldivmod>
    8cdc:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    8cde:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    8ce2:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    8ce6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    8cea:	9100      	str	r1, [sp, #0]
    8cec:	9601      	str	r6, [sp, #4]
    8cee:	2101      	movs	r1, #1
    8cf0:	4620      	mov	r0, r4
    8cf2:	f7ff fe9d 	bl	8a30 <sched_free_win_offset_calc>
    8cf6:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    8cfa:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    8cfe:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    8d02:	2202      	movs	r2, #2
    8d04:	4639      	mov	r1, r7
    8d06:	f10d 000e 	add.w	r0, sp, #14
    8d0a:	f7f8 ff77 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    8d0e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    8d12:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    8d16:	2300      	movs	r3, #0
    8d18:	b2d9      	uxtb	r1, r3
    8d1a:	4288      	cmp	r0, r1
    8d1c:	d811      	bhi.n	8d42 <mayfly_sched_win_offset_select+0x9a>
    8d1e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    8d20:	4547      	cmp	r7, r8
    8d22:	d1ee      	bne.n	8d02 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    8d24:	b9b5      	cbnz	r5, 8d54 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    8d26:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    8d2a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8d2e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    8d30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    8d34:	2202      	movs	r2, #2
    8d36:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    8d38:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    8d3c:	f7f8 ff5e 	bl	1bfc <memcpy>
    8d40:	e027      	b.n	8d92 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    8d42:	454a      	cmp	r2, r9
    8d44:	d004      	beq.n	8d50 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    8d46:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    8d4a:	4291      	cmp	r1, r2
    8d4c:	d024      	beq.n	8d98 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    8d4e:	2501      	movs	r5, #1
    8d50:	3301      	adds	r3, #1
    8d52:	e7e1      	b.n	8d18 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    8d54:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    8d58:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    8d5c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    8d60:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    8d64:	4b15      	ldr	r3, [pc, #84]	; (8dbc <mayfly_sched_win_offset_select+0x114>)
    8d66:	2200      	movs	r2, #0
    8d68:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    8d6c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8d70:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    8d74:	f042 0203 	orr.w	r2, r2, #3
    8d78:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    8d7c:	2203      	movs	r2, #3
    8d7e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    8d82:	2211      	movs	r2, #17
    8d84:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    8d88:	220f      	movs	r2, #15
    8d8a:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    8d8e:	2220      	movs	r2, #32
    8d90:	701a      	strb	r2, [r3, #0]
}
    8d92:	b009      	add	sp, #36	; 0x24
    8d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    8d98:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8d9c:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    8d9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    8da2:	2202      	movs	r2, #2
    8da4:	f10d 010e 	add.w	r1, sp, #14
    8da8:	e7c6      	b.n	8d38 <mayfly_sched_win_offset_select+0x90>
    8daa:	bf00      	nop
    8dac:	f3af 8000 	nop.w
    8db0:	1afd498d 	.word	0x1afd498d
    8db4:	00000007 	.word	0x00000007
    8db8:	09ce5400 	.word	0x09ce5400
    8dbc:	20000660 	.word	0x20000660

00008dc0 <sched_after_mstr_free_slot_get>:
{
    8dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dc4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    8dc6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    8dc8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    8dca:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8ee0 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    8dce:	f88d 501f 	strb.w	r5, [sp, #31]
{
    8dd2:	4680      	mov	r8, r0
    8dd4:	4693      	mov	fp, r2
    8dd6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    8dd8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    8ddc:	601c      	str	r4, [r3, #0]
    8dde:	9408      	str	r4, [sp, #32]
    8de0:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8de2:	2302      	movs	r3, #2
    8de4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8de6:	ab09      	add	r3, sp, #36	; 0x24
    8de8:	9302      	str	r3, [sp, #8]
    8dea:	4b3b      	ldr	r3, [pc, #236]	; (8ed8 <sched_after_mstr_free_slot_get+0x118>)
    8dec:	9301      	str	r3, [sp, #4]
    8dee:	ab08      	add	r3, sp, #32
    8df0:	9300      	str	r3, [sp, #0]
    8df2:	f10d 021f 	add.w	r2, sp, #31
    8df6:	465b      	mov	r3, fp
    8df8:	4641      	mov	r1, r8
    8dfa:	2000      	movs	r0, #0
    8dfc:	f7fd fdec 	bl	69d8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    8e00:	2802      	cmp	r0, #2
    8e02:	d00b      	beq.n	8e1c <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e06:	b16b      	cbz	r3, 8e24 <sched_after_mstr_free_slot_get+0x64>
    8e08:	4040      	eors	r0, r0
    8e0a:	f380 8811 	msr	BASEPRI, r0
    8e0e:	f04f 0004 	mov.w	r0, #4
    8e12:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    8e14:	4641      	mov	r1, r8
    8e16:	2000      	movs	r0, #0
    8e18:	f7fd fe5c 	bl	6ad4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e1e:	2b02      	cmp	r3, #2
    8e20:	d0f8      	beq.n	8e14 <sched_after_mstr_free_slot_get+0x54>
    8e22:	e7ef      	b.n	8e04 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    8e24:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8e28:	2aff      	cmp	r2, #255	; 0xff
    8e2a:	d04e      	beq.n	8eca <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    8e2c:	2a06      	cmp	r2, #6
    8e2e:	d9d8      	bls.n	8de2 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    8e30:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8e34:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    8e36:	429a      	cmp	r2, r3
    8e38:	dad3      	bge.n	8de2 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8e3a:	3a07      	subs	r2, #7
    8e3c:	b292      	uxth	r2, r2
    8e3e:	f44f 71aa 	mov.w	r1, #340	; 0x154
    8e42:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    8e46:	f7fc fead 	bl	5ba4 <mem_get>
		if (conn && !conn->role) {
    8e4a:	2800      	cmp	r0, #0
    8e4c:	d0c9      	beq.n	8de2 <sched_after_mstr_free_slot_get+0x22>
    8e4e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    8e52:	2b00      	cmp	r3, #0
    8e54:	dbc5      	blt.n	8de2 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8e56:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    8e58:	9a08      	ldr	r2, [sp, #32]
    8e5a:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    8e5e:	2b00      	cmp	r3, #0
    8e60:	da12      	bge.n	8e88 <sched_after_mstr_free_slot_get+0xc8>
    8e62:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    8e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8e68:	4571      	cmp	r1, lr
    8e6a:	bf2c      	ite	cs
    8e6c:	1852      	addcs	r2, r2, r1
    8e6e:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    8e70:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    8e72:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    8e74:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    8e76:	f101 0104 	add.w	r1, r1, #4
    8e7a:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    8e7c:	d108      	bne.n	8e90 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    8e7e:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    8e82:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    8e84:	4616      	mov	r6, r2
    8e86:	e7ac      	b.n	8de2 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    8e88:	4573      	cmp	r3, lr
    8e8a:	bf38      	it	cc
    8e8c:	4673      	movcc	r3, lr
    8e8e:	e7f0      	b.n	8e72 <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    8e90:	4631      	mov	r1, r6
    8e92:	4610      	mov	r0, r2
    8e94:	9305      	str	r3, [sp, #20]
    8e96:	9204      	str	r2, [sp, #16]
    8e98:	f7fd fe34 	bl	6b04 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    8e9c:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    8ea0:	4288      	cmp	r0, r1
    8ea2:	9a04      	ldr	r2, [sp, #16]
    8ea4:	9b05      	ldr	r3, [sp, #20]
    8ea6:	d9ea      	bls.n	8e7e <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    8ea8:	480c      	ldr	r0, [pc, #48]	; (8edc <sched_after_mstr_free_slot_get+0x11c>)
    8eaa:	4434      	add	r4, r6
    8eac:	fba4 0100 	umull	r0, r1, r4, r0
    8eb0:	2307      	movs	r3, #7
    8eb2:	fb03 1104 	mla	r1, r3, r4, r1
    8eb6:	a306      	add	r3, pc, #24	; (adr r3, 8ed0 <sched_after_mstr_free_slot_get+0x110>)
    8eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ebc:	f7f7 f9aa 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    8ec0:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    8ec2:	6038      	str	r0, [r7, #0]
}
    8ec4:	b00b      	add	sp, #44	; 0x2c
    8ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    8eca:	2dff      	cmp	r5, #255	; 0xff
    8ecc:	d1ec      	bne.n	8ea8 <sched_after_mstr_free_slot_get+0xe8>
    8ece:	e7f9      	b.n	8ec4 <sched_after_mstr_free_slot_get+0x104>
    8ed0:	3b9aca00 	.word	0x3b9aca00
    8ed4:	00000000 	.word	0x00000000
    8ed8:	000083d5 	.word	0x000083d5
    8edc:	1afd498d 	.word	0x1afd498d
    8ee0:	20000660 	.word	0x20000660

00008ee4 <isr_adv_ci_adva_check>:
{
    8ee4:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    8ee6:	7804      	ldrb	r4, [r0, #0]
    8ee8:	780a      	ldrb	r2, [r1, #0]
    8eea:	f3c4 1380 	ubfx	r3, r4, #6, #1
    8eee:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8ef2:	d119      	bne.n	8f28 <isr_adv_ci_adva_check+0x44>
    8ef4:	f004 040f 	and.w	r4, r4, #15
    8ef8:	2c01      	cmp	r4, #1
    8efa:	f101 0608 	add.w	r6, r1, #8
    8efe:	f100 0502 	add.w	r5, r0, #2
    8f02:	d008      	beq.n	8f16 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    8f04:	2206      	movs	r2, #6
    8f06:	4631      	mov	r1, r6
    8f08:	4628      	mov	r0, r5
    8f0a:	f7f8 fe62 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    8f0e:	fab0 f080 	clz	r0, r0
    8f12:	0940      	lsrs	r0, r0, #5
    8f14:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    8f16:	2206      	movs	r2, #6
    8f18:	4631      	mov	r1, r6
    8f1a:	4628      	mov	r0, r5
    8f1c:	f7f8 fe59 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    8f20:	2800      	cmp	r0, #0
    8f22:	d1ef      	bne.n	8f04 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    8f24:	4620      	mov	r0, r4
    8f26:	bd70      	pop	{r4, r5, r6, pc}
    8f28:	2000      	movs	r0, #0
}
    8f2a:	bd70      	pop	{r4, r5, r6, pc}

00008f2c <isr_scan_tgta_check>:
{
    8f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f30:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    8f32:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    8f34:	f101 0808 	add.w	r8, r1, #8
{
    8f38:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    8f3a:	09c0      	lsrs	r0, r0, #7
    8f3c:	4641      	mov	r1, r8
{
    8f3e:	4691      	mov	r9, r2
    8f40:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    8f42:	f006 faa1 	bl	f488 <ctrl_rl_addr_resolve>
    8f46:	4604      	mov	r4, r0
    8f48:	b9d8      	cbnz	r0, 8f82 <isr_scan_tgta_check+0x56>
    8f4a:	4f1c      	ldr	r7, [pc, #112]	; (8fbc <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    8f4c:	f1ba 0f00 	cmp.w	sl, #0
    8f50:	d10e      	bne.n	8f70 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    8f52:	782b      	ldrb	r3, [r5, #0]
    8f54:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    8f58:	09db      	lsrs	r3, r3, #7
    8f5a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8f5e:	d113      	bne.n	8f88 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    8f60:	2206      	movs	r2, #6
    8f62:	4641      	mov	r1, r8
    8f64:	4816      	ldr	r0, [pc, #88]	; (8fc0 <isr_scan_tgta_check+0x94>)
    8f66:	f7f8 fe34 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    8f6a:	b968      	cbnz	r0, 8f88 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    8f6c:	2001      	movs	r0, #1
    8f6e:	e012      	b.n	8f96 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    8f70:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    8f74:	07db      	lsls	r3, r3, #31
    8f76:	d5ec      	bpl.n	8f52 <isr_scan_tgta_check+0x26>
    8f78:	4648      	mov	r0, r9
    8f7a:	f006 f889 	bl	f090 <ctrl_lrpa_get>
    8f7e:	2800      	cmp	r0, #0
    8f80:	d0e7      	beq.n	8f52 <isr_scan_tgta_check+0x26>
}
    8f82:	4620      	mov	r0, r4
    8f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    8f88:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    8f8c:	f3c0 1001 	ubfx	r0, r0, #4, #2
    8f90:	f010 0002 	ands.w	r0, r0, #2
    8f94:	d101      	bne.n	8f9a <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    8f96:	4604      	mov	r4, r0
    8f98:	e7f3      	b.n	8f82 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    8f9a:	f995 3000 	ldrsb.w	r3, [r5]
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	da09      	bge.n	8fb6 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    8fa2:	7b6b      	ldrb	r3, [r5, #13]
    8fa4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8fa8:	2b40      	cmp	r3, #64	; 0x40
    8faa:	d104      	bne.n	8fb6 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    8fac:	2e00      	cmp	r6, #0
    8fae:	d0dd      	beq.n	8f6c <isr_scan_tgta_check+0x40>
			*dir_report = true;
    8fb0:	2001      	movs	r0, #1
    8fb2:	7030      	strb	r0, [r6, #0]
    8fb4:	e7ef      	b.n	8f96 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    8fb6:	2000      	movs	r0, #0
    8fb8:	e7ed      	b.n	8f96 <isr_scan_tgta_check+0x6a>
    8fba:	bf00      	nop
    8fbc:	20000660 	.word	0x20000660
    8fc0:	20000744 	.word	0x20000744

00008fc4 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    8fc4:	4a0b      	ldr	r2, [pc, #44]	; (8ff4 <rx_fc_lock+0x30>)
    8fc6:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    8fca:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    8fce:	4299      	cmp	r1, r3
    8fd0:	d10e      	bne.n	8ff0 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    8fd2:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    8fd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    8fda:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    8fde:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    8fe2:	3301      	adds	r3, #1
    8fe4:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    8fe6:	2b03      	cmp	r3, #3
    8fe8:	bf08      	it	eq
    8fea:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    8fec:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    8ff0:	4770      	bx	lr
    8ff2:	bf00      	nop
    8ff4:	20000660 	.word	0x20000660

00008ff8 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    8ff8:	4b04      	ldr	r3, [pc, #16]	; (900c <ticker_job_disable+0x14>)
    8ffa:	7d1b      	ldrb	r3, [r3, #20]
    8ffc:	b123      	cbz	r3, 9008 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    8ffe:	2101      	movs	r1, #1
    9000:	2200      	movs	r2, #0
    9002:	4608      	mov	r0, r1
    9004:	f7fc be3c 	b.w	5c80 <mayfly_enable>
    9008:	4770      	bx	lr
    900a:	bf00      	nop
    900c:	20000660 	.word	0x20000660

00009010 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9010:	2806      	cmp	r0, #6
{
    9012:	b510      	push	{r4, lr}
    9014:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9016:	d90a      	bls.n	902e <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9018:	4b09      	ldr	r3, [pc, #36]	; (9040 <hdr_conn_get+0x30>)
    901a:	1fc2      	subs	r2, r0, #7
    901c:	b292      	uxth	r2, r2
    901e:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9022:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9026:	f7fc fdbd 	bl	5ba4 <mem_get>
    902a:	6020      	str	r0, [r4, #0]
    902c:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    902e:	2805      	cmp	r0, #5
    9030:	d004      	beq.n	903c <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    9032:	2806      	cmp	r0, #6
	return NULL;
    9034:	4803      	ldr	r0, [pc, #12]	; (9044 <hdr_conn_get+0x34>)
    9036:	bf18      	it	ne
    9038:	2000      	movne	r0, #0
    903a:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    903c:	4802      	ldr	r0, [pc, #8]	; (9048 <hdr_conn_get+0x38>)
}
    903e:	bd10      	pop	{r4, pc}
    9040:	20000660 	.word	0x20000660
    9044:	20000730 	.word	0x20000730
    9048:	20000678 	.word	0x20000678

0000904c <mayfly_xtal_retain.part.13>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    904c:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    904e:	4b0a      	ldr	r3, [pc, #40]	; (9078 <mayfly_xtal_retain.part.13+0x2c>)
    9050:	2200      	movs	r2, #0
    9052:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    9054:	b168      	cbz	r0, 9072 <mayfly_xtal_retain.part.13+0x26>
    9056:	2801      	cmp	r0, #1
    9058:	d105      	bne.n	9066 <mayfly_xtal_retain.part.13+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    905a:	4b08      	ldr	r3, [pc, #32]	; (907c <mayfly_xtal_retain.part.13+0x30>)
			retval = mayfly_enqueue(caller_id,
    905c:	2200      	movs	r2, #0
    905e:	4611      	mov	r1, r2
    9060:	f7fc fe36 	bl	5cd0 <mayfly_enqueue>
			LL_ASSERT(!retval);
    9064:	b138      	cbz	r0, 9076 <mayfly_xtal_retain.part.13+0x2a>
    9066:	4040      	eors	r0, r0
    9068:	f380 8811 	msr	BASEPRI, r0
    906c:	f04f 0004 	mov.w	r0, #4
    9070:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    9072:	4b03      	ldr	r3, [pc, #12]	; (9080 <mayfly_xtal_retain.part.13+0x34>)
    9074:	e7f2      	b.n	905c <mayfly_xtal_retain.part.13+0x10>
    9076:	bd08      	pop	{r3, pc}
    9078:	20000860 	.word	0x20000860
    907c:	20003800 	.word	0x20003800
    9080:	200037f0 	.word	0x200037f0

00009084 <chan_set.part.19>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    9084:	4040      	eors	r0, r0
    9086:	f380 8811 	msr	BASEPRI, r0
    908a:	f04f 0004 	mov.w	r0, #4
    908e:	df02      	svc	2

00009090 <prepare_normal_set>:
{
    9090:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    9092:	6804      	ldr	r4, [r0, #0]
    9094:	2c00      	cmp	r4, #0
{
    9096:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    9098:	da19      	bge.n	90ce <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    909a:	6843      	ldr	r3, [r0, #4]
    909c:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    909e:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    90a0:	429d      	cmp	r5, r3
    90a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    90a6:	bf34      	ite	cc
    90a8:	1ae4      	subcc	r4, r4, r3
    90aa:	1b64      	subcs	r4, r4, r5
		ticker_status =
    90ac:	4b09      	ldr	r3, [pc, #36]	; (90d4 <prepare_normal_set+0x44>)
    90ae:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    90b0:	b2a4      	uxth	r4, r4
		ticker_status =
    90b2:	2300      	movs	r3, #0
    90b4:	9304      	str	r3, [sp, #16]
    90b6:	9303      	str	r3, [sp, #12]
    90b8:	9302      	str	r3, [sp, #8]
    90ba:	4618      	mov	r0, r3
    90bc:	9401      	str	r4, [sp, #4]
    90be:	9400      	str	r4, [sp, #0]
    90c0:	f7fd fc00 	bl	68c4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    90c4:	f030 0302 	bics.w	r3, r0, #2
    90c8:	d001      	beq.n	90ce <prepare_normal_set+0x3e>
    90ca:	f7ff ffdb 	bl	9084 <chan_set.part.19>
}
    90ce:	b009      	add	sp, #36	; 0x24
    90d0:	bd30      	pop	{r4, r5, pc}
    90d2:	bf00      	nop
    90d4:	000083e5 	.word	0x000083e5

000090d8 <terminate_ind_rx_enqueue>:
{
    90d8:	b510      	push	{r4, lr}
    90da:	4603      	mov	r3, r0
    90dc:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    90de:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    90e2:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    90e6:	b908      	cbnz	r0, 90ec <terminate_ind_rx_enqueue+0x14>
    90e8:	f7ff ffcc 	bl	9084 <chan_set.part.19>
	node_rx->hdr.handle = conn->handle;
    90ec:	8c1c      	ldrh	r4, [r3, #32]
    90ee:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    90f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    90f6:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    90f8:	4a0a      	ldr	r2, [pc, #40]	; (9124 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    90fa:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    90fe:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    9102:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    9106:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    910a:	f7fc fd70 	bl	5bee <memq_enqueue>
	LL_ASSERT(link);
    910e:	b928      	cbnz	r0, 911c <terminate_ind_rx_enqueue+0x44>
    9110:	4040      	eors	r0, r0
    9112:	f380 8811 	msr	BASEPRI, r0
    9116:	f04f 0004 	mov.w	r0, #4
    911a:	df02      	svc	2
}
    911c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    9120:	f005 bdde 	b.w	ece0 <radio_event_callback>
    9124:	20000660 	.word	0x20000660

00009128 <packet_rx_enqueue>:
{
    9128:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    912a:	4a16      	ldr	r2, [pc, #88]	; (9184 <packet_rx_enqueue+0x5c>)
    912c:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    9130:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    9134:	4299      	cmp	r1, r3
    9136:	d101      	bne.n	913c <packet_rx_enqueue+0x14>
    9138:	f7ff ffa4 	bl	9084 <chan_set.part.19>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    913c:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    9140:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    9144:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    9148:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    914c:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    914e:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    9150:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    9154:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    9158:	3301      	adds	r3, #1
    915a:	b2db      	uxtb	r3, r3
		last = 0;
    915c:	429c      	cmp	r4, r3
    915e:	bf08      	it	eq
    9160:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    9162:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    9166:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    916a:	f7fc fd40 	bl	5bee <memq_enqueue>
	LL_ASSERT(link);
    916e:	b928      	cbnz	r0, 917c <packet_rx_enqueue+0x54>
    9170:	4040      	eors	r0, r0
    9172:	f380 8811 	msr	BASEPRI, r0
    9176:	f04f 0004 	mov.w	r0, #4
    917a:	df02      	svc	2
}
    917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    9180:	f005 bdae 	b.w	ece0 <radio_event_callback>
    9184:	20000660 	.word	0x20000660

00009188 <isr_rx_scan_report>:
{
    9188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    918c:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    918e:	2003      	movs	r0, #3
{
    9190:	460f      	mov	r7, r1
    9192:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    9194:	f7ff f95e 	bl	8454 <packet_rx_reserve_get>
	if (node_rx == 0) {
    9198:	4604      	mov	r4, r0
    919a:	b3a0      	cbz	r0, 9206 <isr_rx_scan_report+0x7e>
	node_rx->hdr.handle = 0xffff;
    919c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    91a0:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    91a2:	4b1a      	ldr	r3, [pc, #104]	; (920c <isr_rx_scan_report+0x84>)
    91a4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    91a8:	075a      	lsls	r2, r3, #29
    91aa:	d028      	beq.n	91fe <isr_rx_scan_report+0x76>
		switch (_radio.scanner.phy) {
    91ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    91b0:	b2da      	uxtb	r2, r3
    91b2:	2a01      	cmp	r2, #1
    91b4:	d007      	beq.n	91c6 <isr_rx_scan_report+0x3e>
    91b6:	2a04      	cmp	r2, #4
    91b8:	d006      	beq.n	91c8 <isr_rx_scan_report+0x40>
			LL_ASSERT(0);
    91ba:	4040      	eors	r0, r0
    91bc:	f380 8811 	msr	BASEPRI, r0
    91c0:	f04f 0004 	mov.w	r0, #4
    91c4:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    91c6:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    91c8:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    91cc:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    91ce:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    91d2:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    91d6:	f1b9 0f00 	cmp.w	r9, #0
    91da:	d012      	beq.n	9202 <isr_rx_scan_report+0x7a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    91dc:	f006 feb8 	bl	ff50 <radio_rssi_get>
			     pdu_adv_rx->len] =
    91e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    91e4:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    91e8:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    91ea:	442b      	add	r3, r5
    91ec:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    91ee:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    91f0:	441d      	add	r5, r3
    91f2:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    91f4:	f7ff ff98 	bl	9128 <packet_rx_enqueue>
	return 0;
    91f8:	2000      	movs	r0, #0
    91fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    91fe:	2302      	movs	r3, #2
    9200:	e7e2      	b.n	91c8 <isr_rx_scan_report+0x40>
			     pdu_adv_rx->len] =
    9202:	207f      	movs	r0, #127	; 0x7f
    9204:	e7ee      	b.n	91e4 <isr_rx_scan_report+0x5c>
		return 1;
    9206:	2001      	movs	r0, #1
}
    9208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    920c:	20000660 	.word	0x20000660

00009210 <sched_after_mstr_free_offset_get>:
{
    9210:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9212:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    9214:	aa02      	add	r2, sp, #8
{
    9216:	461c      	mov	r4, r3
    9218:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    921a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    921e:	3127      	adds	r1, #39	; 0x27
    9220:	2001      	movs	r0, #1
    9222:	f7ff fdcd 	bl	8dc0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    9226:	6823      	ldr	r3, [r4, #0]
    9228:	b1fb      	cbz	r3, 926a <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    922a:	9801      	ldr	r0, [sp, #4]
    922c:	1b83      	subs	r3, r0, r6
    922e:	021b      	lsls	r3, r3, #8
    9230:	d501      	bpl.n	9236 <sched_after_mstr_free_offset_get+0x26>
    9232:	f7ff ff27 	bl	9084 <chan_set.part.19>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    9236:	4631      	mov	r1, r6
    9238:	f7fd fc64 	bl	6b04 <ticker_ticks_diff_get>
    923c:	4602      	mov	r2, r0
    923e:	4810      	ldr	r0, [pc, #64]	; (9280 <sched_after_mstr_free_offset_get+0x70>)
    9240:	2307      	movs	r3, #7
    9242:	fba2 0100 	umull	r0, r1, r2, r0
    9246:	fb03 1102 	mla	r1, r3, r2, r1
    924a:	a30b      	add	r3, pc, #44	; (adr r3, 9278 <sched_after_mstr_free_offset_get+0x68>)
    924c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9250:	f7f6 ffe0 	bl	214 <__aeabi_uldivmod>
    9254:	6823      	ldr	r3, [r4, #0]
    9256:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    9258:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    925a:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    925c:	db05      	blt.n	926a <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    925e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    9262:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    9264:	6823      	ldr	r3, [r4, #0]
    9266:	4298      	cmp	r0, r3
    9268:	d301      	bcc.n	926e <sched_after_mstr_free_offset_get+0x5e>
}
    926a:	b002      	add	sp, #8
    926c:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    926e:	1a1b      	subs	r3, r3, r0
    9270:	6023      	str	r3, [r4, #0]
    9272:	e7f7      	b.n	9264 <sched_after_mstr_free_offset_get+0x54>
    9274:	f3af 8000 	nop.w
    9278:	3b9aca00 	.word	0x3b9aca00
    927c:	00000000 	.word	0x00000000
    9280:	1afd498d 	.word	0x1afd498d

00009284 <mayfly_sched_win_offset_use>:
{
    9284:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    9286:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    928a:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    928c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    9290:	68c1      	ldr	r1, [r0, #12]
    9292:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    9294:	f7ff ffbc 	bl	9210 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    9298:	a902      	add	r1, sp, #8
    929a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    929e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    92a2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    92a6:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    92aa:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    92ac:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    92b0:	f7f8 fca4 	bl	1bfc <memcpy>
}
    92b4:	b002      	add	sp, #8
    92b6:	bd10      	pop	{r4, pc}

000092b8 <mayfly_sched_after_mstr_free_offset_get>:
{
    92b8:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    92ba:	4c05      	ldr	r4, [pc, #20]	; (92d0 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    92bc:	4602      	mov	r2, r0
    92be:	f504 7382 	add.w	r3, r4, #260	; 0x104
    92c2:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    92c6:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    92ca:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    92cc:	f7ff bfa0 	b.w	9210 <sched_after_mstr_free_offset_get>
    92d0:	20000660 	.word	0x20000660

000092d4 <chan_set>:
	switch (chan) {
    92d4:	2826      	cmp	r0, #38	; 0x26
{
    92d6:	b510      	push	{r4, lr}
    92d8:	4604      	mov	r4, r0
	switch (chan) {
    92da:	d00b      	beq.n	92f4 <chan_set+0x20>
    92dc:	2827      	cmp	r0, #39	; 0x27
    92de:	d00b      	beq.n	92f8 <chan_set+0x24>
    92e0:	2825      	cmp	r0, #37	; 0x25
    92e2:	d10b      	bne.n	92fc <chan_set+0x28>
		radio_freq_chan_set(2);
    92e4:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    92e6:	f006 fd27 	bl	fd38 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    92ea:	4620      	mov	r0, r4
}
    92ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    92f0:	f006 bd28 	b.w	fd44 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    92f4:	201a      	movs	r0, #26
    92f6:	e7f6      	b.n	92e6 <chan_set+0x12>
		radio_freq_chan_set(80);
    92f8:	2050      	movs	r0, #80	; 0x50
    92fa:	e7f4      	b.n	92e6 <chan_set+0x12>
		if (chan < 11) {
    92fc:	280a      	cmp	r0, #10
    92fe:	d802      	bhi.n	9306 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
    9300:	3002      	adds	r0, #2
    9302:	0040      	lsls	r0, r0, #1
    9304:	e7ef      	b.n	92e6 <chan_set+0x12>
		} else if (chan < 40) {
    9306:	2827      	cmp	r0, #39	; 0x27
    9308:	d801      	bhi.n	930e <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    930a:	3003      	adds	r0, #3
    930c:	e7f9      	b.n	9302 <chan_set+0x2e>
    930e:	f7ff feb9 	bl	9084 <chan_set.part.19>
	...

00009314 <adv_setup>:
{
    9314:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    9316:	4c31      	ldr	r4, [pc, #196]	; (93dc <adv_setup+0xc8>)
    9318:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    931c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    9320:	429a      	cmp	r2, r3
    9322:	d051      	beq.n	93c8 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    9324:	3301      	adds	r3, #1
    9326:	b2db      	uxtb	r3, r3
			first = 0;
    9328:	2b02      	cmp	r3, #2
    932a:	bf08      	it	eq
    932c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    932e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    9332:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    9334:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    9338:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    933c:	4299      	cmp	r1, r3
    933e:	d007      	beq.n	9350 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    9340:	3301      	adds	r3, #1
    9342:	b2db      	uxtb	r3, r3
			first = 0;
    9344:	2b02      	cmp	r3, #2
    9346:	bf08      	it	eq
    9348:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    934a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    934e:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    9350:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    9354:	2327      	movs	r3, #39	; 0x27
    9356:	212b      	movs	r1, #43	; 0x2b
    9358:	fb13 1505 	smlabb	r5, r3, r5, r1
    935c:	1966      	adds	r6, r4, r5
	if (upd) {
    935e:	b142      	cbz	r2, 9372 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    9360:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    9364:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    9368:	2206      	movs	r2, #6
    936a:	1cb1      	adds	r1, r6, #2
    936c:	307d      	adds	r0, #125	; 0x7d
    936e:	f7f8 fc45 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    9372:	4630      	mov	r0, r6
    9374:	f006 fd44 	bl	fe00 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    9378:	5d63      	ldrb	r3, [r4, r5]
    937a:	f003 030f 	and.w	r3, r3, #15
    937e:	2b02      	cmp	r3, #2
    9380:	d024      	beq.n	93cc <adv_setup+0xb8>
    9382:	2b07      	cmp	r3, #7
    9384:	d022      	beq.n	93cc <adv_setup+0xb8>
		_radio.state = STATE_TX;
    9386:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    9388:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    938a:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    938c:	f006 fe4e 	bl	1002c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    9390:	2000      	movs	r0, #0
    9392:	f006 fdaf 	bl	fef4 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    9396:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    939a:	f3c3 0202 	ubfx	r2, r3, #0, #3
    939e:	b2d3      	uxtb	r3, r2
    93a0:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    93a2:	2000      	movs	r0, #0
    93a4:	07ce      	lsls	r6, r1, #31
    93a6:	f100 0501 	add.w	r5, r0, #1
    93aa:	d514      	bpl.n	93d6 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    93ac:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    93ae:	4013      	ands	r3, r2
    93b0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    93b4:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    93b6:	f363 0202 	bfi	r2, r3, #0, #3
    93ba:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    93be:	3025      	adds	r0, #37	; 0x25
}
    93c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    93c4:	f7ff bf86 	b.w	92d4 <chan_set>
	u8_t upd = 0;
    93c8:	2200      	movs	r2, #0
    93ca:	e7b3      	b.n	9334 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    93cc:	2303      	movs	r3, #3
    93ce:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    93d0:	f006 fda6 	bl	ff20 <radio_switch_complete_and_disable>
    93d4:	e7df      	b.n	9396 <adv_setup+0x82>
		bitmap >>= 1;
    93d6:	0849      	lsrs	r1, r1, #1
    93d8:	4628      	mov	r0, r5
    93da:	e7e3      	b.n	93a4 <adv_setup+0x90>
    93dc:	20000660 	.word	0x20000660

000093e0 <pdu_node_tx_release>:
{
    93e0:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    93e2:	4a10      	ldr	r2, [pc, #64]	; (9424 <pdu_node_tx_release+0x44>)
    93e4:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    93e8:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    93ec:	3301      	adds	r3, #1
    93ee:	b2db      	uxtb	r3, r3
		last = 0;
    93f0:	429c      	cmp	r4, r3
    93f2:	bf08      	it	eq
    93f4:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    93f6:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    93fa:	429c      	cmp	r4, r3
    93fc:	d101      	bne.n	9402 <pdu_node_tx_release+0x22>
    93fe:	f7ff fe41 	bl	9084 <chan_set.part.19>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    9402:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    9406:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    940a:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    940e:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    9412:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    9416:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    9418:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    941c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    9420:	f005 bc5e 	b.w	ece0 <radio_event_callback>
    9424:	20000660 	.word	0x20000660

00009428 <packet_tx_enqueue>:
{
    9428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    942c:	4c24      	ldr	r4, [pc, #144]	; (94c0 <packet_tx_enqueue+0x98>)
{
    942e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    9430:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    9432:	b12e      	cbz	r6, 9440 <packet_tx_enqueue+0x18>
    9434:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    9438:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    943c:	429a      	cmp	r2, r3
    943e:	d101      	bne.n	9444 <packet_tx_enqueue+0x1c>
    9440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    9444:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    9448:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    944c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9450:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    9454:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9458:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    945c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    945e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9460:	f7fc fba0 	bl	5ba4 <mem_get>
    9464:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    9466:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    946a:	8c1a      	ldrh	r2, [r3, #32]
    946c:	4282      	cmp	r2, r0
    946e:	d11f      	bne.n	94b0 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    9470:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    9474:	b942      	cbnz	r2, 9488 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    9476:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    947a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    947e:	b91a      	cbnz	r2, 9488 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    9480:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    9484:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    9488:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    948c:	b102      	cbz	r2, 9490 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    948e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    9490:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    9494:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    9498:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    949c:	3301      	adds	r3, #1
    949e:	b2db      	uxtb	r3, r3
			first = 0;
    94a0:	429a      	cmp	r2, r3
    94a2:	bf08      	it	eq
    94a4:	2300      	moveq	r3, #0
    94a6:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    94a8:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    94ac:	b2f6      	uxtb	r6, r6
    94ae:	e7c0      	b.n	9432 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    94b0:	792b      	ldrb	r3, [r5, #4]
    94b2:	f367 0301 	bfi	r3, r7, #0, #2
    94b6:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    94b8:	4629      	mov	r1, r5
    94ba:	f7ff ff91 	bl	93e0 <pdu_node_tx_release>
    94be:	e7e9      	b.n	9494 <packet_tx_enqueue+0x6c>
    94c0:	20000660 	.word	0x20000660

000094c4 <connection_release>:
{
    94c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    94c6:	2201      	movs	r2, #1
{
    94c8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    94ca:	4611      	mov	r1, r2
    94cc:	2000      	movs	r0, #0
    94ce:	f7fc fbd7 	bl	5c80 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    94d2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    94d6:	2100      	movs	r1, #0
    94d8:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    94dc:	3207      	adds	r2, #7
	ticker_status =
    94de:	9300      	str	r3, [sp, #0]
    94e0:	4608      	mov	r0, r1
    94e2:	4b3a      	ldr	r3, [pc, #232]	; (95cc <connection_release+0x108>)
    94e4:	b2d2      	uxtb	r2, r2
    94e6:	f7fd fa3b 	bl	6960 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    94ea:	f030 0102 	bics.w	r1, r0, #2
    94ee:	d005      	beq.n	94fc <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    94f0:	4040      	eors	r0, r0
    94f2:	f380 8811 	msr	BASEPRI, r0
    94f6:	f04f 0004 	mov.w	r0, #4
    94fa:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    94fc:	4b34      	ldr	r3, [pc, #208]	; (95d0 <connection_release+0x10c>)
    94fe:	7d1a      	ldrb	r2, [r3, #20]
    9500:	2a05      	cmp	r2, #5
    9502:	461d      	mov	r5, r3
    9504:	d11b      	bne.n	953e <connection_release+0x7a>
					  conn->handle))) {
    9506:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    9508:	7c18      	ldrb	r0, [r3, #16]
    950a:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    950c:	4290      	cmp	r0, r2
    950e:	d116      	bne.n	953e <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    9510:	7419      	strb	r1, [r3, #16]
		ticker_status =
    9512:	f242 23fb 	movw	r3, #8955	; 0x22fb
    9516:	9300      	str	r3, [sp, #0]
    9518:	2201      	movs	r2, #1
    951a:	4b2c      	ldr	r3, [pc, #176]	; (95cc <connection_release+0x108>)
    951c:	4608      	mov	r0, r1
    951e:	f7fd fa1f 	bl	6960 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9522:	f030 0202 	bics.w	r2, r0, #2
    9526:	d1e3      	bne.n	94f0 <connection_release+0x2c>
		ticker_status =
    9528:	f242 3302 	movw	r3, #8962	; 0x2302
    952c:	9300      	str	r3, [sp, #0]
    952e:	4611      	mov	r1, r2
    9530:	4b26      	ldr	r3, [pc, #152]	; (95cc <connection_release+0x108>)
    9532:	4610      	mov	r0, r2
    9534:	f7fd fa14 	bl	6960 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9538:	f030 0302 	bics.w	r3, r0, #2
    953c:	d1d8      	bne.n	94f0 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    953e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    9542:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9546:	4299      	cmp	r1, r3
    9548:	d003      	beq.n	9552 <connection_release+0x8e>
    954a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    954e:	4299      	cmp	r1, r3
    9550:	d101      	bne.n	9556 <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    9552:	4e20      	ldr	r6, [pc, #128]	; (95d4 <connection_release+0x110>)
    9554:	e012      	b.n	957c <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    9556:	790b      	ldrb	r3, [r1, #4]
    9558:	f36f 0301 	bfc	r3, #0, #2
    955c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    955e:	680b      	ldr	r3, [r1, #0]
    9560:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    9564:	8c20      	ldrh	r0, [r4, #32]
    9566:	f7ff ff3b 	bl	93e0 <pdu_node_tx_release>
    956a:	e7e8      	b.n	953e <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    956c:	6803      	ldr	r3, [r0, #0]
    956e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    9572:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    9576:	4631      	mov	r1, r6
    9578:	f7fc faf9 	bl	5b6e <mem_release>
	while ((conn->pkt_tx_head) &&
    957c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    9580:	b118      	cbz	r0, 958a <connection_release+0xc6>
    9582:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    9586:	4298      	cmp	r0, r3
    9588:	d1f0      	bne.n	956c <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    958a:	2300      	movs	r3, #0
    958c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    9590:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    9594:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    9598:	b951      	cbnz	r1, 95b0 <connection_release+0xec>
	conn->handle = 0xffff;
    959a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    959e:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    95a0:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    95a4:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    95a6:	bf08      	it	eq
    95a8:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    95ac:	b002      	add	sp, #8
    95ae:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    95b0:	790b      	ldrb	r3, [r1, #4]
    95b2:	f36f 0301 	bfc	r3, #0, #2
    95b6:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    95b8:	680b      	ldr	r3, [r1, #0]
    95ba:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    95be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    95c2:	8c20      	ldrh	r0, [r4, #32]
    95c4:	f7ff ff0c 	bl	93e0 <pdu_node_tx_release>
    95c8:	e7e4      	b.n	9594 <connection_release+0xd0>
    95ca:	bf00      	nop
    95cc:	00009745 	.word	0x00009745
    95d0:	20000660 	.word	0x20000660
    95d4:	200007bc 	.word	0x200007bc

000095d8 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    95d8:	b2c0      	uxtb	r0, r0
{
    95da:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    95dc:	1f03      	subs	r3, r0, #4
    95de:	2b01      	cmp	r3, #1
    95e0:	d901      	bls.n	95e6 <mayfly_radio_stop+0xe>
    95e2:	f7ff fd4f 	bl	9084 <chan_set.part.19>
	radio_used = ((_radio.state != STATE_NONE) &&
    95e6:	4a08      	ldr	r2, [pc, #32]	; (9608 <mayfly_radio_stop+0x30>)
    95e8:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    95ea:	b13b      	cbz	r3, 95fc <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    95ec:	3b04      	subs	r3, #4
    95ee:	2b01      	cmp	r3, #1
    95f0:	d904      	bls.n	95fc <mayfly_radio_stop+0x24>
			_radio.state = state;
    95f2:	7510      	strb	r0, [r2, #20]
}
    95f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    95f8:	f006 bc22 	b.w	fe40 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    95fc:	f006 fc52 	bl	fea4 <radio_is_idle>
    9600:	2800      	cmp	r0, #0
    9602:	d0f7      	beq.n	95f4 <mayfly_radio_stop+0x1c>
}
    9604:	bd08      	pop	{r3, pc}
    9606:	bf00      	nop
    9608:	20000660 	.word	0x20000660

0000960c <mayfly_radio_active>:
{
    960c:	b508      	push	{r3, lr}
    960e:	4a0a      	ldr	r2, [pc, #40]	; (9638 <mayfly_radio_active+0x2c>)
		if (s_active++) {
    9610:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    9612:	b138      	cbz	r0, 9624 <mayfly_radio_active+0x18>
		if (s_active++) {
    9614:	1c59      	adds	r1, r3, #1
    9616:	7011      	strb	r1, [r2, #0]
    9618:	b963      	cbnz	r3, 9634 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    961a:	2001      	movs	r0, #1
}
    961c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    9620:	f005 bb5c 	b.w	ecdc <radio_active_callback>
		LL_ASSERT(s_active);
    9624:	b90b      	cbnz	r3, 962a <mayfly_radio_active+0x1e>
    9626:	f7ff fd2d 	bl	9084 <chan_set.part.19>
		if (--s_active) {
    962a:	3b01      	subs	r3, #1
    962c:	b2db      	uxtb	r3, r3
    962e:	7013      	strb	r3, [r2, #0]
    9630:	2b00      	cmp	r3, #0
    9632:	d0f3      	beq.n	961c <mayfly_radio_active+0x10>
    9634:	bd08      	pop	{r3, pc}
    9636:	bf00      	nop
    9638:	20000804 	.word	0x20000804

0000963c <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    963c:	2000      	movs	r0, #0
    963e:	f7ff bfe5 	b.w	960c <mayfly_radio_active>
	...

00009644 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9644:	2200      	movs	r2, #0
{
    9646:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9648:	4611      	mov	r1, r2
    964a:	4b04      	ldr	r3, [pc, #16]	; (965c <event_xtal+0x18>)
    964c:	4610      	mov	r0, r2
    964e:	f7fc fb3f 	bl	5cd0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    9652:	b108      	cbz	r0, 9658 <event_xtal+0x14>
    9654:	f7ff fd16 	bl	9084 <chan_set.part.19>
    9658:	bd08      	pop	{r3, pc}
    965a:	bf00      	nop
    965c:	200037d0 	.word	0x200037d0

00009660 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9660:	2200      	movs	r2, #0
{
    9662:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9664:	4611      	mov	r1, r2
    9666:	4b04      	ldr	r3, [pc, #16]	; (9678 <event_active+0x18>)
    9668:	4610      	mov	r0, r2
    966a:	f7fc fb31 	bl	5cd0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    966e:	b108      	cbz	r0, 9674 <event_active+0x14>
    9670:	f7ff fd08 	bl	9084 <chan_set.part.19>
    9674:	bd08      	pop	{r3, pc}
    9676:	bf00      	nop
    9678:	20003750 	.word	0x20003750

0000967c <event_stop>:
	s_mfy_radio_stop.param = context;
    967c:	4a06      	ldr	r2, [pc, #24]	; (9698 <event_stop+0x1c>)
{
    967e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    9680:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9682:	4613      	mov	r3, r2
    9684:	2200      	movs	r2, #0
    9686:	4611      	mov	r1, r2
    9688:	4610      	mov	r0, r2
    968a:	f7fc fb21 	bl	5cd0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    968e:	b108      	cbz	r0, 9694 <event_stop+0x18>
    9690:	f7ff fcf8 	bl	9084 <chan_set.part.19>
    9694:	bd08      	pop	{r3, pc}
    9696:	bf00      	nop
    9698:	20003780 	.word	0x20003780

0000969c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    969c:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    969e:	b108      	cbz	r0, 96a4 <ticker_op_latency_cancelled+0x8>
    96a0:	f7ff fcf0 	bl	9084 <chan_set.part.19>

	conn->slave.latency_cancel = 0;
    96a4:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    96a8:	f360 0341 	bfi	r3, r0, #1, #1
    96ac:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    96b0:	bd08      	pop	{r3, pc}
	...

000096b4 <ticker_update_slave_assert>:
{
    96b4:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    96b6:	b130      	cbz	r0, 96c6 <ticker_update_slave_assert+0x12>
    96b8:	4b03      	ldr	r3, [pc, #12]	; (96c8 <ticker_update_slave_assert+0x14>)
    96ba:	7c9b      	ldrb	r3, [r3, #18]
    96bc:	b2c9      	uxtb	r1, r1
    96be:	4299      	cmp	r1, r3
    96c0:	d001      	beq.n	96c6 <ticker_update_slave_assert+0x12>
    96c2:	f7ff fcdf 	bl	9084 <chan_set.part.19>
    96c6:	bd08      	pop	{r3, pc}
    96c8:	20000660 	.word	0x20000660

000096cc <ticker_update_adv_assert>:
{
    96cc:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    96ce:	b128      	cbz	r0, 96dc <ticker_update_adv_assert+0x10>
    96d0:	4b03      	ldr	r3, [pc, #12]	; (96e0 <ticker_update_adv_assert+0x14>)
    96d2:	7c9b      	ldrb	r3, [r3, #18]
    96d4:	2b05      	cmp	r3, #5
    96d6:	d001      	beq.n	96dc <ticker_update_adv_assert+0x10>
    96d8:	f7ff fcd4 	bl	9084 <chan_set.part.19>
    96dc:	bd08      	pop	{r3, pc}
    96de:	bf00      	nop
    96e0:	20000660 	.word	0x20000660

000096e4 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    96e4:	2801      	cmp	r0, #1
{
    96e6:	b508      	push	{r3, lr}
    96e8:	4b09      	ldr	r3, [pc, #36]	; (9710 <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    96ea:	d107      	bne.n	96fc <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    96ec:	7c9a      	ldrb	r2, [r3, #18]
    96ee:	2a06      	cmp	r2, #6
    96f0:	d102      	bne.n	96f8 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    96f2:	2200      	movs	r2, #0
    96f4:	749a      	strb	r2, [r3, #18]
    96f6:	bd08      	pop	{r3, pc}
    96f8:	f7ff fcc4 	bl	9084 <chan_set.part.19>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    96fc:	7c1b      	ldrb	r3, [r3, #16]
    96fe:	2b06      	cmp	r3, #6
    9700:	d105      	bne.n	970e <ticker_stop_scan_assert+0x2a>
    9702:	4040      	eors	r0, r0
    9704:	f380 8811 	msr	BASEPRI, r0
    9708:	f04f 0004 	mov.w	r0, #4
    970c:	df02      	svc	2
    970e:	bd08      	pop	{r3, pc}
    9710:	20000660 	.word	0x20000660

00009714 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    9714:	2801      	cmp	r0, #1
{
    9716:	b508      	push	{r3, lr}
    9718:	4b09      	ldr	r3, [pc, #36]	; (9740 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    971a:	d107      	bne.n	972c <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    971c:	7c9a      	ldrb	r2, [r3, #18]
    971e:	2a05      	cmp	r2, #5
    9720:	d102      	bne.n	9728 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    9722:	2200      	movs	r2, #0
    9724:	749a      	strb	r2, [r3, #18]
    9726:	bd08      	pop	{r3, pc}
    9728:	f7ff fcac 	bl	9084 <chan_set.part.19>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    972c:	7c1b      	ldrb	r3, [r3, #16]
    972e:	2b05      	cmp	r3, #5
    9730:	d105      	bne.n	973e <ticker_stop_adv_assert+0x2a>
    9732:	4040      	eors	r0, r0
    9734:	f380 8811 	msr	BASEPRI, r0
    9738:	f04f 0004 	mov.w	r0, #4
    973c:	df02      	svc	2
    973e:	bd08      	pop	{r3, pc}
    9740:	20000660 	.word	0x20000660

00009744 <ticker_success_assert>:
{
    9744:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    9746:	b108      	cbz	r0, 974c <ticker_success_assert+0x8>
    9748:	f7ff fc9c 	bl	9084 <chan_set.part.19>
    974c:	bd08      	pop	{r3, pc}
	...

00009750 <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    9750:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    9752:	ad02      	add	r5, sp, #8
    9754:	4b10      	ldr	r3, [pc, #64]	; (9798 <adv_scan_configure.constprop.32+0x48>)
    9756:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    975a:	4604      	mov	r4, r0
	radio_reset();
    975c:	f006 fabc 	bl	fcd8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    9760:	2000      	movs	r0, #0
    9762:	f006 fae3 	bl	fd2c <radio_tx_power_set>
	radio_isr_set(isr);
    9766:	480d      	ldr	r0, [pc, #52]	; (979c <adv_scan_configure.constprop.32+0x4c>)
    9768:	f006 fa80 	bl	fc6c <radio_isr_set>
	radio_phy_set(phy, flags);
    976c:	2101      	movs	r1, #1
    976e:	4620      	mov	r0, r4
    9770:	f006 facc 	bl	fd0c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    9774:	4628      	mov	r0, r5
    9776:	f006 faf7 	bl	fd68 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    977a:	0062      	lsls	r2, r4, #1
    977c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    9780:	2125      	movs	r1, #37	; 0x25
    9782:	2008      	movs	r0, #8
    9784:	f006 fb08 	bl	fd98 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    9788:	4905      	ldr	r1, [pc, #20]	; (97a0 <adv_scan_configure.constprop.32+0x50>)
    978a:	f240 605b 	movw	r0, #1627	; 0x65b
    978e:	f006 fb93 	bl	feb8 <radio_crc_configure>
}
    9792:	b003      	add	sp, #12
    9794:	bd30      	pop	{r4, r5, pc}
    9796:	bf00      	nop
    9798:	8e89bed6 	.word	0x8e89bed6
    979c:	0000c5b9 	.word	0x0000c5b9
    97a0:	00555555 	.word	0x00555555

000097a4 <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    97a4:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    97a6:	4b05      	ldr	r3, [pc, #20]	; (97bc <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    97a8:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    97aa:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    97ac:	4611      	mov	r1, r2
    97ae:	4610      	mov	r0, r2
    97b0:	f7fc fa8e 	bl	5cd0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    97b4:	b108      	cbz	r0, 97ba <event_stop.constprop.33+0x16>
    97b6:	f7ff fc65 	bl	9084 <chan_set.part.19>
    97ba:	bd08      	pop	{r3, pc}
    97bc:	20003780 	.word	0x20003780

000097c0 <event_common_prepare>:
{
    97c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    97c4:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    97c6:	681d      	ldr	r5, [r3, #0]
{
    97c8:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    97ca:	2c00      	cmp	r4, #0
{
    97cc:	4681      	mov	r9, r0
    97ce:	910b      	str	r1, [sp, #44]	; 0x2c
    97d0:	4690      	mov	r8, r2
    97d2:	469b      	mov	fp, r3
    97d4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    97d8:	da03      	bge.n	97e2 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    97da:	9c16      	ldr	r4, [sp, #88]	; 0x58
    97dc:	42ac      	cmp	r4, r5
    97de:	bf38      	it	cc
    97e0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    97e2:	42ac      	cmp	r4, r5
    97e4:	4f4e      	ldr	r7, [pc, #312]	; (9920 <event_common_prepare+0x160>)
    97e6:	d91b      	bls.n	9820 <event_common_prepare+0x60>
		ticker_status =
    97e8:	f241 5374 	movw	r3, #5492	; 0x1574
    97ec:	9308      	str	r3, [sp, #32]
    97ee:	4b4d      	ldr	r3, [pc, #308]	; (9924 <event_common_prepare+0x164>)
    97f0:	9305      	str	r3, [sp, #20]
    97f2:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    97f4:	1b63      	subs	r3, r4, r5
		ticker_status =
    97f6:	9300      	str	r3, [sp, #0]
    97f8:	9707      	str	r7, [sp, #28]
    97fa:	464b      	mov	r3, r9
    97fc:	9106      	str	r1, [sp, #24]
    97fe:	9104      	str	r1, [sp, #16]
    9800:	9103      	str	r1, [sp, #12]
    9802:	9102      	str	r1, [sp, #8]
    9804:	9101      	str	r1, [sp, #4]
    9806:	2201      	movs	r2, #1
    9808:	4608      	mov	r0, r1
    980a:	f7fd f80b 	bl	6824 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    980e:	f030 0302 	bics.w	r3, r0, #2
    9812:	d02b      	beq.n	986c <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    9814:	4040      	eors	r0, r0
    9816:	f380 8811 	msr	BASEPRI, r0
    981a:	f04f 0004 	mov.w	r0, #4
    981e:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    9820:	d21d      	bcs.n	985e <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    9822:	2300      	movs	r3, #0
    9824:	461a      	mov	r2, r3
    9826:	4619      	mov	r1, r3
    9828:	4618      	mov	r0, r3
    982a:	f7ff ff19 	bl	9660 <event_active>
		ticker_status =
    982e:	f241 5389 	movw	r3, #5513	; 0x1589
    9832:	2100      	movs	r1, #0
    9834:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    9836:	1b2c      	subs	r4, r5, r4
		ticker_status =
    9838:	4b3b      	ldr	r3, [pc, #236]	; (9928 <event_common_prepare+0x168>)
    983a:	9305      	str	r3, [sp, #20]
    983c:	9707      	str	r7, [sp, #28]
    983e:	464b      	mov	r3, r9
    9840:	9106      	str	r1, [sp, #24]
    9842:	9104      	str	r1, [sp, #16]
    9844:	9103      	str	r1, [sp, #12]
    9846:	9102      	str	r1, [sp, #8]
    9848:	9101      	str	r1, [sp, #4]
    984a:	9400      	str	r4, [sp, #0]
    984c:	2201      	movs	r2, #1
    984e:	4608      	mov	r0, r1
    9850:	f7fc ffe8 	bl	6824 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9854:	f030 0302 	bics.w	r3, r0, #2
    9858:	d1dc      	bne.n	9814 <event_common_prepare+0x54>
    985a:	462c      	mov	r4, r5
    985c:	e00b      	b.n	9876 <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    985e:	2300      	movs	r3, #0
    9860:	461a      	mov	r2, r3
    9862:	4619      	mov	r1, r3
    9864:	4618      	mov	r0, r3
    9866:	f7ff fefb 	bl	9660 <event_active>
		event_xtal(0, 0, 0, NULL);
    986a:	2300      	movs	r3, #0
    986c:	461a      	mov	r2, r3
    986e:	4619      	mov	r1, r3
    9870:	4618      	mov	r0, r3
    9872:	f7ff fee7 	bl	9644 <event_xtal>
	_radio.remainder_anchor = remainder;
    9876:	4e2d      	ldr	r6, [pc, #180]	; (992c <event_common_prepare+0x16c>)
    9878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    987a:	60f3      	str	r3, [r6, #12]
	ticker_status =
    987c:	f241 53a1 	movw	r3, #5537	; 0x15a1
    9880:	9308      	str	r3, [sp, #32]
    9882:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9884:	9306      	str	r3, [sp, #24]
    9886:	2200      	movs	r2, #0
    9888:	9b18      	ldr	r3, [sp, #96]	; 0x60
    988a:	9305      	str	r3, [sp, #20]
    988c:	9707      	str	r7, [sp, #28]
    988e:	464b      	mov	r3, r9
    9890:	9204      	str	r2, [sp, #16]
    9892:	9203      	str	r2, [sp, #12]
    9894:	9202      	str	r2, [sp, #8]
    9896:	9201      	str	r2, [sp, #4]
    9898:	9400      	str	r4, [sp, #0]
    989a:	4611      	mov	r1, r2
    989c:	4610      	mov	r0, r2
    989e:	f7fc ffc1 	bl	6824 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    98a2:	f030 0302 	bics.w	r3, r0, #2
    98a6:	d1b5      	bne.n	9814 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    98a8:	2005      	movs	r0, #5
    98aa:	f7ff ff7b 	bl	97a4 <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    98ae:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    98b2:	429d      	cmp	r5, r3
    98b4:	d023      	beq.n	98fe <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    98b6:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    98ba:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    98be:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    98c0:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    98c2:	bfbc      	itt	lt
    98c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    98c8:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    98cc:	f8d8 2000 	ldr.w	r2, [r8]
    98d0:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    98d4:	428a      	cmp	r2, r1
    98d6:	bf38      	it	cc
    98d8:	460a      	movcc	r2, r1
		ticker_status =
    98da:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    98de:	b2a3      	uxth	r3, r4
    98e0:	b292      	uxth	r2, r2
		ticker_status =
    98e2:	9106      	str	r1, [sp, #24]
    98e4:	2100      	movs	r1, #0
    98e6:	9302      	str	r3, [sp, #8]
    98e8:	9201      	str	r2, [sp, #4]
    98ea:	9200      	str	r2, [sp, #0]
    98ec:	9104      	str	r1, [sp, #16]
    98ee:	9103      	str	r1, [sp, #12]
    98f0:	4652      	mov	r2, sl
    98f2:	4608      	mov	r0, r1
    98f4:	f7fc ffe6 	bl	68c4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    98f8:	f030 0302 	bics.w	r3, r0, #2
    98fc:	d18a      	bne.n	9814 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    98fe:	20ff      	movs	r0, #255	; 0xff
    9900:	f7ff fd92 	bl	9428 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    9904:	4b0a      	ldr	r3, [pc, #40]	; (9930 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9906:	2201      	movs	r2, #1
    9908:	4611      	mov	r1, r2
    990a:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    990c:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9910:	f7fc f9de 	bl	5cd0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    9914:	2800      	cmp	r0, #0
    9916:	f47f af7d 	bne.w	9814 <event_common_prepare+0x54>
}
    991a:	b00d      	add	sp, #52	; 0x34
    991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9920:	00009745 	.word	0x00009745
    9924:	00009661 	.word	0x00009661
    9928:	00009645 	.word	0x00009645
    992c:	20000660 	.word	0x20000660
    9930:	20003820 	.word	0x20003820

00009934 <event_scan_prepare>:
{
    9934:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    9936:	4c1d      	ldr	r4, [pc, #116]	; (99ac <event_scan_prepare+0x78>)
    9938:	7c23      	ldrb	r3, [r4, #16]
{
    993a:	b085      	sub	sp, #20
    993c:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    993e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    9942:	b12b      	cbz	r3, 9950 <event_scan_prepare+0x1c>
		LL_ASSERT(!retval);
    9944:	4040      	eors	r0, r0
    9946:	f380 8811 	msr	BASEPRI, r0
    994a:	f04f 0004 	mov.w	r0, #4
    994e:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    9950:	2306      	movs	r3, #6
    9952:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    9954:	9203      	str	r2, [sp, #12]
    9956:	9301      	str	r3, [sp, #4]
    9958:	4a15      	ldr	r2, [pc, #84]	; (99b0 <event_scan_prepare+0x7c>)
    995a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    995e:	9202      	str	r2, [sp, #8]
    9960:	9300      	str	r3, [sp, #0]
    9962:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    9966:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    996a:	f7ff ff29 	bl	97c0 <event_common_prepare>
	if (_radio.scanner.conn) {
    996e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    9972:	b1cb      	cbz	r3, 99a8 <event_scan_prepare+0x74>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    9974:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    9978:	2b00      	cmp	r3, #0
    997a:	da0c      	bge.n	9996 <event_scan_prepare+0x62>
			u32_t ticks_prepare_to_start =
    997c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    9980:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    9984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    9988:	4291      	cmp	r1, r2
    998a:	bf2c      	ite	cs
    998c:	ebc3 0301 	rsbcs	r3, r3, r1
    9990:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    9994:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    9996:	4b07      	ldr	r3, [pc, #28]	; (99b4 <event_scan_prepare+0x80>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9998:	2201      	movs	r2, #1
    999a:	4611      	mov	r1, r2
    999c:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    999e:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    99a0:	f7fc f996 	bl	5cd0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    99a4:	2800      	cmp	r0, #0
    99a6:	d1cd      	bne.n	9944 <event_scan_prepare+0x10>
}
    99a8:	b005      	add	sp, #20
    99aa:	bd30      	pop	{r4, r5, pc}
    99ac:	20000660 	.word	0x20000660
    99b0:	00009aa5 	.word	0x00009aa5
    99b4:	200037a0 	.word	0x200037a0

000099b8 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    99b8:	4b02      	ldr	r3, [pc, #8]	; (99c4 <mayfly_xtal_start+0xc>)
    99ba:	6818      	ldr	r0, [r3, #0]
    99bc:	6843      	ldr	r3, [r0, #4]
    99be:	2100      	movs	r1, #0
    99c0:	681b      	ldr	r3, [r3, #0]
    99c2:	4718      	bx	r3
    99c4:	20000660 	.word	0x20000660

000099c8 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    99c8:	4b02      	ldr	r3, [pc, #8]	; (99d4 <mayfly_xtal_stop+0xc>)
    99ca:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    99cc:	6843      	ldr	r3, [r0, #4]
    99ce:	2100      	movs	r1, #0
    99d0:	685b      	ldr	r3, [r3, #4]
    99d2:	4718      	bx	r3
    99d4:	20000660 	.word	0x20000660

000099d8 <chan_sel_2>:
{
    99d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    99da:	4048      	eors	r0, r1
    99dc:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    99de:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    99e2:	2608      	movs	r6, #8
	o = 0;
    99e4:	2400      	movs	r4, #0
		o |= (i & 1);
    99e6:	f00e 0501 	and.w	r5, lr, #1
    99ea:	3e01      	subs	r6, #1
    99ec:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    99f0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    99f4:	b2ec      	uxtb	r4, r5
		i >>= 1;
    99f6:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    99fa:	d1f4      	bne.n	99e6 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    99fc:	0225      	lsls	r5, r4, #8
    99fe:	b22d      	sxth	r5, r5
    9a00:	b2c0      	uxtb	r0, r0
    9a02:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    9a06:	4634      	mov	r4, r6
		o |= (i & 1);
    9a08:	f000 0601 	and.w	r6, r0, #1
    9a0c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    9a10:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    9a14:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    9a18:	b2e4      	uxtb	r4, r4
		i >>= 1;
    9a1a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    9a1e:	d1f3      	bne.n	9a08 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    9a20:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    9a22:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    9a26:	3f01      	subs	r7, #1
    9a28:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    9a2a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    9a2e:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    9a30:	d1d5      	bne.n	99de <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    9a32:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    9a34:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    9a36:	fbb1 f0f4 	udiv	r0, r1, r4
    9a3a:	fb04 1010 	mls	r0, r4, r0, r1
    9a3e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9a40:	08c4      	lsrs	r4, r0, #3
    9a42:	f000 0507 	and.w	r5, r0, #7
    9a46:	5d14      	ldrb	r4, [r2, r4]
    9a48:	412c      	asrs	r4, r5
    9a4a:	07e4      	lsls	r4, r4, #31
    9a4c:	d407      	bmi.n	9a5e <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    9a4e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    9a50:	f3c1 4107 	ubfx	r1, r1, #16, #8
    9a54:	4610      	mov	r0, r2
}
    9a56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    9a5a:	f7fe bcc9 	b.w	83f0 <chan_sel_remap>
}
    9a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009a60 <preempt_calc>:
{
    9a60:	b570      	push	{r4, r5, r6, lr}
    9a62:	4614      	mov	r4, r2
    9a64:	460e      	mov	r6, r1
    9a66:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    9a68:	f7fd f84a 	bl	6b00 <ticker_ticks_now_get>
	u32_t diff =
    9a6c:	4621      	mov	r1, r4
    9a6e:	f7fd f849 	bl	6b04 <ticker_ticks_diff_get>
	diff += 3;
    9a72:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    9a74:	2c09      	cmp	r4, #9
    9a76:	d911      	bls.n	9a9c <preempt_calc+0x3c>
		if (s_xtal_retained) {
    9a78:	4b09      	ldr	r3, [pc, #36]	; (9aa0 <preempt_calc+0x40>)
    9a7a:	781b      	ldrb	r3, [r3, #0]
    9a7c:	b113      	cbz	r3, 9a84 <preempt_calc+0x24>
    9a7e:	2000      	movs	r0, #0
    9a80:	f7ff fae4 	bl	904c <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    9a84:	4632      	mov	r2, r6
    9a86:	2100      	movs	r1, #0
    9a88:	4628      	mov	r0, r5
    9a8a:	f7ff fb01 	bl	9090 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    9a8e:	68ab      	ldr	r3, [r5, #8]
    9a90:	441c      	add	r4, r3
		if (diff <
    9a92:	2c26      	cmp	r4, #38	; 0x26
    9a94:	d800      	bhi.n	9a98 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    9a96:	60ac      	str	r4, [r5, #8]
		return 1;
    9a98:	2001      	movs	r0, #1
}
    9a9a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    9a9c:	2000      	movs	r0, #0
    9a9e:	bd70      	pop	{r4, r5, r6, pc}
    9aa0:	20000860 	.word	0x20000860

00009aa4 <event_scan>:
{
    9aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    9aa6:	4b56      	ldr	r3, [pc, #344]	; (9c00 <event_scan+0x15c>)
    9aa8:	7cda      	ldrb	r2, [r3, #19]
{
    9aaa:	b08d      	sub	sp, #52	; 0x34
    9aac:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    9aae:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    9ab2:	461c      	mov	r4, r3
    9ab4:	b12a      	cbz	r2, 9ac2 <event_scan+0x1e>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9ab6:	4040      	eors	r0, r0
    9ab8:	f380 8811 	msr	BASEPRI, r0
    9abc:	f04f 0004 	mov.w	r0, #4
    9ac0:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    9ac2:	7c1b      	ldrb	r3, [r3, #16]
    9ac4:	b2db      	uxtb	r3, r3
    9ac6:	2b06      	cmp	r3, #6
    9ac8:	d1f5      	bne.n	9ab6 <event_scan+0x12>
	_radio.role = ROLE_SCAN;
    9aca:	2202      	movs	r2, #2
    9acc:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    9ace:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    9ad0:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9ad2:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    9ad6:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    9ad8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    9adc:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    9ade:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9ae2:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    9ae6:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    9ae8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    9aec:	f7ff fe30 	bl	9750 <adv_scan_configure.constprop.32>
	chan_set(37 + _radio.scanner.chan++);
    9af0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9af4:	f3c3 0081 	ubfx	r0, r3, #2, #2
    9af8:	1c42      	adds	r2, r0, #1
    9afa:	f362 0383 	bfi	r3, r2, #2, #2
    9afe:	3025      	adds	r0, #37	; 0x25
    9b00:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    9b04:	f7ff fbe6 	bl	92d4 <chan_set>
	if (_radio.scanner.chan == 3) {
    9b08:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9b0c:	f003 020c 	and.w	r2, r3, #12
    9b10:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    9b12:	bf08      	it	eq
    9b14:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    9b18:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    9b1c:	bf08      	it	eq
    9b1e:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    9b22:	f006 fa83 	bl	1002c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    9b26:	2300      	movs	r3, #0
    9b28:	4619      	mov	r1, r3
    9b2a:	461a      	mov	r2, r3
    9b2c:	4618      	mov	r0, r3
    9b2e:	f006 f9ed 	bl	ff0c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    9b32:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    9b36:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    9b3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9b3e:	3008      	adds	r0, #8
    9b40:	f006 f958 	bl	fdf4 <radio_pkt_rx_set>
	radio_rssi_measure();
    9b44:	f006 f9fa 	bl	ff3c <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    9b48:	f005 fcbe 	bl	f4c8 <ctrl_rl_enabled>
    9b4c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9b50:	b340      	cbz	r0, 9ba4 <event_scan+0x100>
		struct ll_filter *filter =
    9b52:	f3c3 1000 	ubfx	r0, r3, #4, #1
    9b56:	f005 fb0b 	bl	f170 <ctrl_filter_get>
    9b5a:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    9b5c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    9b60:	f005 faaa 	bl	f0b8 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    9b64:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    9b66:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    9b68:	1cb2      	adds	r2, r6, #2
    9b6a:	7830      	ldrb	r0, [r6, #0]
    9b6c:	f006 fa08 	bl	ff80 <radio_filter_configure>
		radio_ar_configure(count, irks);
    9b70:	4639      	mov	r1, r7
    9b72:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    9b76:	f006 fbdd 	bl	10334 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    9b7a:	68e2      	ldr	r2, [r4, #12]
    9b7c:	f105 0109 	add.w	r1, r5, #9
    9b80:	2000      	movs	r0, #0
    9b82:	f006 fa5f 	bl	10044 <radio_tmr_start>
	radio_tmr_end_capture();
    9b86:	f006 fb2d 	bl	101e4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    9b8a:	2106      	movs	r1, #6
    9b8c:	462a      	mov	r2, r5
    9b8e:	481d      	ldr	r0, [pc, #116]	; (9c04 <event_scan+0x160>)
    9b90:	f7ff ff66 	bl	9a60 <preempt_calc>
    9b94:	4601      	mov	r1, r0
    9b96:	b188      	cbz	r0, 9bbc <event_scan+0x118>
		_radio.state = STATE_STOP;
    9b98:	2304      	movs	r3, #4
    9b9a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    9b9c:	f006 f950 	bl	fe40 <radio_disable>
}
    9ba0:	b00d      	add	sp, #52	; 0x34
    9ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    9ba4:	f013 0f30 	tst.w	r3, #48	; 0x30
    9ba8:	d0e7      	beq.n	9b7a <event_scan+0xd6>
		struct ll_filter *wl = ctrl_filter_get(true);
    9baa:	2001      	movs	r0, #1
    9bac:	f005 fae0 	bl	f170 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    9bb0:	1c82      	adds	r2, r0, #2
    9bb2:	7841      	ldrb	r1, [r0, #1]
    9bb4:	7800      	ldrb	r0, [r0, #0]
    9bb6:	f006 f9e3 	bl	ff80 <radio_filter_configure>
    9bba:	e7de      	b.n	9b7a <event_scan+0xd6>
		ret = ticker_start(
    9bbc:	f641 1336 	movw	r3, #6454	; 0x1936
    9bc0:	9308      	str	r3, [sp, #32]
    9bc2:	4b11      	ldr	r3, [pc, #68]	; (9c08 <event_scan+0x164>)
    9bc4:	9307      	str	r3, [sp, #28]
    9bc6:	2204      	movs	r2, #4
    9bc8:	4b10      	ldr	r3, [pc, #64]	; (9c0c <event_scan+0x168>)
    9bca:	9206      	str	r2, [sp, #24]
    9bcc:	9305      	str	r3, [sp, #20]
    9bce:	9004      	str	r0, [sp, #16]
    9bd0:	9003      	str	r0, [sp, #12]
    9bd2:	9002      	str	r0, [sp, #8]
    9bd4:	9001      	str	r0, [sp, #4]
    9bd6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    9bda:	3309      	adds	r3, #9
    9bdc:	9300      	str	r3, [sp, #0]
    9bde:	462b      	mov	r3, r5
    9be0:	f7fc fe20 	bl	6824 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9be4:	f030 0302 	bics.w	r3, r0, #2
    9be8:	f47f af65 	bne.w	9ab6 <event_scan+0x12>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    9bec:	4619      	mov	r1, r3
    9bee:	4618      	mov	r0, r3
    9bf0:	4a07      	ldr	r2, [pc, #28]	; (9c10 <event_scan+0x16c>)
    9bf2:	f7fc ff33 	bl	6a5c <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9bf6:	f030 0302 	bics.w	r3, r0, #2
    9bfa:	f47f af5c 	bne.w	9ab6 <event_scan+0x12>
    9bfe:	e7cf      	b.n	9ba0 <event_scan+0xfc>
    9c00:	20000660 	.word	0x20000660
    9c04:	20000730 	.word	0x20000730
    9c08:	00009745 	.word	0x00009745
    9c0c:	0000967d 	.word	0x0000967d
    9c10:	00008ff9 	.word	0x00008ff9

00009c14 <ctrl_tx_enqueue>:
{
    9c14:	b510      	push	{r4, lr}
	    !conn->empty &&
    9c16:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    9c1a:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    9c1e:	f014 0f80 	tst.w	r4, #128	; 0x80
    9c22:	d118      	bne.n	9c56 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    9c24:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    9c28:	b1ab      	cbz	r3, 9c56 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    9c2a:	0724      	lsls	r4, r4, #28
    9c2c:	d413      	bmi.n	9c56 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    9c2e:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    9c32:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    9c34:	bf04      	itt	eq
    9c36:	681c      	ldreq	r4, [r3, #0]
    9c38:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    9c3c:	b992      	cbnz	r2, 9c64 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    9c3e:	681a      	ldr	r2, [r3, #0]
    9c40:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    9c42:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    9c44:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    9c48:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    9c4c:	680b      	ldr	r3, [r1, #0]
    9c4e:	b90b      	cbnz	r3, 9c54 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    9c50:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    9c54:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    9c56:	b92a      	cbnz	r2, 9c64 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    9c58:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    9c5c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    9c5e:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    9c62:	e7ef      	b.n	9c44 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    9c64:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    9c68:	681a      	ldr	r2, [r3, #0]
    9c6a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    9c6c:	6019      	str	r1, [r3, #0]
    9c6e:	e7eb      	b.n	9c48 <ctrl_tx_enqueue+0x34>

00009c70 <ctrl_tx_sec_enqueue>:
{
    9c70:	b410      	push	{r4}
	if (conn->pause_tx) {
    9c72:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    9c76:	0724      	lsls	r4, r4, #28
{
    9c78:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    9c7a:	d50f      	bpl.n	9c9c <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    9c7c:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    9c80:	b931      	cbnz	r1, 9c90 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    9c82:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    9c86:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    9c88:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    9c8c:	bc10      	pop	{r4}
    9c8e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    9c90:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    9c94:	6819      	ldr	r1, [r3, #0]
    9c96:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    9c98:	601a      	str	r2, [r3, #0]
    9c9a:	e7f7      	b.n	9c8c <ctrl_tx_sec_enqueue+0x1c>
}
    9c9c:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    9c9e:	f7ff bfb9 	b.w	9c14 <ctrl_tx_enqueue>
	...

00009ca4 <feature_rsp_send>:
{
    9ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9ca6:	4f21      	ldr	r7, [pc, #132]	; (9d2c <feature_rsp_send+0x88>)
{
    9ca8:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9caa:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    9cae:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9cb0:	f7fb ff43 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    9cb4:	4604      	mov	r4, r0
    9cb6:	b3b0      	cbz	r0, 9d26 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9cb8:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    9cba:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    9cbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    9cc4:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    9cc8:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    9ccc:	f043 0310 	orr.w	r3, r3, #16
    9cd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    9cd4:	79b1      	ldrb	r1, [r6, #6]
    9cd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    9cda:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    9cde:	f3c1 0110 	ubfx	r1, r1, #0, #17
    9ce2:	400b      	ands	r3, r1
    9ce4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    9ce8:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    9cec:	f043 0320 	orr.w	r3, r3, #32
    9cf0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9cf4:	7903      	ldrb	r3, [r0, #4]
    9cf6:	f043 0303 	orr.w	r3, r3, #3
    9cfa:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    9cfc:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    9cfe:	2309      	movs	r3, #9
    9d00:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    9d02:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    9d04:	2100      	movs	r1, #0
    9d06:	4410      	add	r0, r2
    9d08:	f7f7 ffa4 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    9d0c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    9d10:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    9d12:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    9d14:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    9d16:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    9d18:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    9d1a:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    9d1c:	4621      	mov	r1, r4
    9d1e:	f7ff ffa7 	bl	9c70 <ctrl_tx_sec_enqueue>
	return 0;
    9d22:	2000      	movs	r0, #0
    9d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    9d26:	2001      	movs	r0, #1
}
    9d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d2a:	bf00      	nop
    9d2c:	20000660 	.word	0x20000660

00009d30 <start_enc_rsp_send>:
{
    9d30:	b510      	push	{r4, lr}
    9d32:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    9d34:	b9c9      	cbnz	r1, 9d6a <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9d36:	480f      	ldr	r0, [pc, #60]	; (9d74 <start_enc_rsp_send+0x44>)
    9d38:	f7fb feff 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    9d3c:	b1b8      	cbz	r0, 9d6e <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    9d3e:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    9d40:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    9d44:	f043 0320 	orr.w	r3, r3, #32
    9d48:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9d4c:	780b      	ldrb	r3, [r1, #0]
    9d4e:	f043 0303 	orr.w	r3, r3, #3
    9d52:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    9d54:	2301      	movs	r3, #1
    9d56:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    9d58:	2306      	movs	r3, #6
    9d5a:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    9d5c:	b140      	cbz	r0, 9d70 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    9d5e:	4601      	mov	r1, r0
    9d60:	4620      	mov	r0, r4
    9d62:	f7ff ff57 	bl	9c14 <ctrl_tx_enqueue>
	return 0;
    9d66:	2000      	movs	r0, #0
    9d68:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    9d6a:	2000      	movs	r0, #0
    9d6c:	e7e8      	b.n	9d40 <start_enc_rsp_send+0x10>
			return 1;
    9d6e:	2001      	movs	r0, #1
}
    9d70:	bd10      	pop	{r4, pc}
    9d72:	bf00      	nop
    9d74:	200007bc 	.word	0x200007bc

00009d78 <reject_ext_ind_send>:
{
    9d78:	b570      	push	{r4, r5, r6, lr}
    9d7a:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9d7c:	480b      	ldr	r0, [pc, #44]	; (9dac <reject_ext_ind_send+0x34>)
{
    9d7e:	460e      	mov	r6, r1
    9d80:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9d82:	f7fb feda 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    9d86:	b178      	cbz	r0, 9da8 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9d88:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    9d8a:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9d8c:	f043 0303 	orr.w	r3, r3, #3
    9d90:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    9d92:	2303      	movs	r3, #3
    9d94:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    9d96:	2311      	movs	r3, #17
    9d98:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    9d9a:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    9d9c:	4601      	mov	r1, r0
    9d9e:	4620      	mov	r0, r4
    9da0:	f7ff ff38 	bl	9c14 <ctrl_tx_enqueue>
	return 0;
    9da4:	2000      	movs	r0, #0
    9da6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    9da8:	2001      	movs	r0, #1
}
    9daa:	bd70      	pop	{r4, r5, r6, pc}
    9dac:	200007bc 	.word	0x200007bc

00009db0 <event_connection_prepare>:
{
    9db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    9db4:	4dc5      	ldr	r5, [pc, #788]	; (a0cc <event_connection_prepare+0x31c>)
{
    9db6:	b08f      	sub	sp, #60	; 0x3c
    9db8:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    9dba:	7c2b      	ldrb	r3, [r5, #16]
{
    9dbc:	910c      	str	r1, [sp, #48]	; 0x30
    9dbe:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    9dc0:	b12b      	cbz	r3, 9dce <event_connection_prepare+0x1e>
		LL_ASSERT(0);
    9dc2:	4040      	eors	r0, r0
    9dc4:	f380 8811 	msr	BASEPRI, r0
    9dc8:	f04f 0004 	mov.w	r0, #4
    9dcc:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    9dce:	f894 3020 	ldrb.w	r3, [r4, #32]
    9dd2:	3307      	adds	r3, #7
    9dd4:	b2db      	uxtb	r3, r3
    9dd6:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    9dd8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9ddc:	2b00      	cmp	r3, #0
    9dde:	da09      	bge.n	9df4 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    9de0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    9de2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    9de4:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    9de8:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    9dea:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    9dec:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    9dee:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    9df0:	bf88      	it	hi
    9df2:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    9df4:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    9df6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    9dfa:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    9dfc:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    9dfe:	b292      	uxth	r2, r2
    9e00:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    9e02:	4432      	add	r2, r6
    9e04:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    9e06:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    9e0a:	429a      	cmp	r2, r3
    9e0c:	f040 819d 	bne.w	a14a <event_connection_prepare+0x39a>
    9e10:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    9e14:	075f      	lsls	r7, r3, #29
    9e16:	f100 8281 	bmi.w	a31c <event_connection_prepare+0x56c>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    9e1a:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    9e1e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    9e22:	429a      	cmp	r2, r3
    9e24:	d06e      	beq.n	9f04 <event_connection_prepare+0x154>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    9e26:	2005      	movs	r0, #5
    9e28:	f7ff fcbc 	bl	97a4 <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
    9e2c:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    9e30:	b10b      	cbz	r3, 9e36 <event_connection_prepare+0x86>
    9e32:	429c      	cmp	r4, r3
    9e34:	d166      	bne.n	9f04 <event_connection_prepare+0x154>
	switch (conn->llcp_conn_param.state) {
    9e36:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    9e3a:	f003 0307 	and.w	r3, r3, #7
    9e3e:	2b05      	cmp	r3, #5
    9e40:	d8bf      	bhi.n	9dc2 <event_connection_prepare+0x12>
    9e42:	e8df f013 	tbh	[pc, r3, lsl #1]
    9e46:	0006      	.short	0x0006
    9e48:	01180076 	.word	0x01180076
    9e4c:	005f005f 	.word	0x005f005f
    9e50:	005f      	.short	0x005f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9e52:	489f      	ldr	r0, [pc, #636]	; (a0d0 <event_connection_prepare+0x320>)
    9e54:	f7fb fe71 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    9e58:	4607      	mov	r7, r0
    9e5a:	2800      	cmp	r0, #0
    9e5c:	d052      	beq.n	9f04 <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    9e5e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    9e62:	2204      	movs	r2, #4
    9e64:	f362 0302 	bfi	r3, r2, #0, #3
    9e68:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9e6c:	7903      	ldrb	r3, [r0, #4]
    9e6e:	f043 0303 	orr.w	r3, r3, #3
    9e72:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    9e74:	2318      	movs	r3, #24
    9e76:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    9e78:	230f      	movs	r3, #15
    9e7a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    9e7c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    9e80:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    9e82:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    9e84:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    9e88:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    9e8a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    9e8e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    9e90:	2300      	movs	r3, #0
    9e92:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    9e94:	74c3      	strb	r3, [r0, #19]
    9e96:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    9e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e9c:	7543      	strb	r3, [r0, #21]
    9e9e:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    9ea0:	75c3      	strb	r3, [r0, #23]
    9ea2:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    9ea4:	7643      	strb	r3, [r0, #25]
    9ea6:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    9ea8:	76c3      	strb	r3, [r0, #27]
    9eaa:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    9eac:	7743      	strb	r3, [r0, #29]
    9eae:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    9eb0:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    9eb4:	4601      	mov	r1, r0
    9eb6:	4620      	mov	r0, r4
    9eb8:	f7ff feac 	bl	9c14 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9ebc:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    9ebe:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    9ec2:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9ec6:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    9ec8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    9ecc:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    9ed0:	da0b      	bge.n	9eea <event_connection_prepare+0x13a>
			u32_t ticks_prepare_to_start =
    9ed2:	68a3      	ldr	r3, [r4, #8]
    9ed4:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    9ed6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    9eda:	428b      	cmp	r3, r1
    9edc:	bf2c      	ite	cs
    9ede:	4443      	addcs	r3, r8
    9ee0:	eb08 0301 	addcc.w	r3, r8, r1
    9ee4:	1a9b      	subs	r3, r3, r2
    9ee6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    9eea:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    9eec:	4b79      	ldr	r3, [pc, #484]	; (a0d4 <event_connection_prepare+0x324>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    9eee:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9ef2:	2201      	movs	r2, #1
    9ef4:	4611      	mov	r1, r2
    9ef6:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    9ef8:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9efa:	f7fb fee9 	bl	5cd0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    9efe:	2800      	cmp	r0, #0
    9f00:	f47f af5f 	bne.w	9dc2 <event_connection_prepare+0x12>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    9f04:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    9f08:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    9f0c:	429a      	cmp	r2, r3
    9f0e:	f000 8115 	beq.w	a13c <event_connection_prepare+0x38c>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    9f12:	2005      	movs	r0, #5
    9f14:	f7ff fc46 	bl	97a4 <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
    9f18:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    9f1c:	f003 0203 	and.w	r2, r3, #3
    9f20:	2a03      	cmp	r2, #3
    9f22:	f63f af4e 	bhi.w	9dc2 <event_connection_prepare+0x12>
    9f26:	e8df f012 	tbh	[pc, r2, lsl #1]
    9f2a:	00d7      	.short	0x00d7
    9f2c:	01090109 	.word	0x01090109
    9f30:	012d      	.short	0x012d
	if (conn->llcp_conn_param.status) {
    9f32:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    9f36:	b1ef      	cbz	r7, 9f74 <event_connection_prepare+0x1c4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9f38:	4865      	ldr	r0, [pc, #404]	; (a0d0 <event_connection_prepare+0x320>)
    9f3a:	f7fb fdfe 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    9f3e:	4601      	mov	r1, r0
    9f40:	2800      	cmp	r0, #0
    9f42:	d0df      	beq.n	9f04 <event_connection_prepare+0x154>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    9f44:	7903      	ldrb	r3, [r0, #4]
    9f46:	f043 0303 	orr.w	r3, r3, #3
    9f4a:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    9f4c:	2311      	movs	r3, #17
    9f4e:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    9f50:	2303      	movs	r3, #3
    9f52:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    9f54:	230f      	movs	r3, #15
    9f56:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    9f58:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    9f5c:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    9f5e:	4620      	mov	r0, r4
    9f60:	f7ff fe58 	bl	9c14 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    9f64:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    9f68:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    9f6c:	2300      	movs	r3, #0
    9f6e:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
    9f72:	e7c7      	b.n	9f04 <event_connection_prepare+0x154>
	if (!conn->role) {
    9f74:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9f78:	2b00      	cmp	r3, #0
    9f7a:	db3b      	blt.n	9ff4 <event_connection_prepare+0x244>
		if (conn->llcp_req != conn->llcp_ack) {
    9f7c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    9f80:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    9f84:	428b      	cmp	r3, r1
    9f86:	d1bd      	bne.n	9f04 <event_connection_prepare+0x154>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    9f88:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    9f8c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    9f90:	2205      	movs	r2, #5
    9f92:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    9f96:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    9f9a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    9f9e:	2301      	movs	r3, #1
    9fa0:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    9fa4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    9fa8:	b122      	cbz	r2, 9fb4 <event_connection_prepare+0x204>
				((conn->llcp_conn_param.interval /
    9faa:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    9fae:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    9fb0:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    9fb4:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    9fb8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    9fbc:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    9fc0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    9fc4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    9fc8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    9fcc:	2202      	movs	r2, #2
    9fce:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    9fd2:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    9fd6:	f082 0208 	eor.w	r2, r2, #8
    9fda:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    9fde:	f362 0382 	bfi	r3, r2, #2, #1
    9fe2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    9fe6:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    9fe8:	2301      	movs	r3, #1
    9fea:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    9fee:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    9ff2:	e787      	b.n	9f04 <event_connection_prepare+0x154>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9ff4:	4836      	ldr	r0, [pc, #216]	; (a0d0 <event_connection_prepare+0x320>)
    9ff6:	f7fb fda0 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    9ffa:	4601      	mov	r1, r0
    9ffc:	2800      	cmp	r0, #0
    9ffe:	d081      	beq.n	9f04 <event_connection_prepare+0x154>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    a000:	7903      	ldrb	r3, [r0, #4]
    a002:	f043 0303 	orr.w	r3, r3, #3
    a006:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    a008:	2318      	movs	r3, #24
    a00a:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    a00c:	2310      	movs	r3, #16
    a00e:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    a010:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a014:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    a016:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    a018:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a01c:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    a01e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a022:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    a024:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    a028:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    a02a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    a02e:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    a032:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    a036:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    a03a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    a03e:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    a042:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    a046:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    a04a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    a04e:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    a052:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    a056:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    a05a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    a05e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    a062:	4620      	mov	r0, r4
    a064:	f7ff fdd6 	bl	9c14 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a068:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a06c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    a070:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    a074:	e746      	b.n	9f04 <event_connection_prepare+0x154>
	if (conn->pause_tx) {
    a076:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    a07a:	0718      	lsls	r0, r3, #28
    a07c:	f53f af42 	bmi.w	9f04 <event_connection_prepare+0x154>
	node_rx = packet_rx_reserve_get(2);
    a080:	2002      	movs	r0, #2
    a082:	f7fe f9e7 	bl	8454 <packet_rx_reserve_get>
	if (!node_rx) {
    a086:	2800      	cmp	r0, #0
    a088:	f43f af3c 	beq.w	9f04 <event_connection_prepare+0x154>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    a08c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    a090:	2203      	movs	r2, #3
    a092:	f362 0302 	bfi	r3, r2, #0, #3
    a096:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    a09a:	8c23      	ldrh	r3, [r4, #32]
    a09c:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    a09e:	2301      	movs	r3, #1
    a0a0:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    a0a2:	7a03      	ldrb	r3, [r0, #8]
    a0a4:	4313      	orrs	r3, r2
    a0a6:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    a0a8:	2318      	movs	r3, #24
    a0aa:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    a0ac:	230f      	movs	r3, #15
    a0ae:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    a0b0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a0b4:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    a0b6:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    a0b8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    a0bc:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    a0be:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    a0c2:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    a0c4:	f7ff f830 	bl	9128 <packet_rx_enqueue>
    a0c8:	e71c      	b.n	9f04 <event_connection_prepare+0x154>
    a0ca:	bf00      	nop
    a0cc:	20000660 	.word	0x20000660
    a0d0:	200007bc 	.word	0x200007bc
    a0d4:	200037c0 	.word	0x200037c0
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a0d8:	48af      	ldr	r0, [pc, #700]	; (a398 <event_connection_prepare+0x5e8>)
    a0da:	f7fb fd2e 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    a0de:	4601      	mov	r1, r0
    a0e0:	b360      	cbz	r0, a13c <event_connection_prepare+0x38c>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    a0e2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a0e6:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    a0ea:	2201      	movs	r2, #1
    a0ec:	f362 0301 	bfi	r3, r2, #0, #2
    a0f0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a0f4:	b2db      	uxtb	r3, r3
    a0f6:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a0fa:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a0fe:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    a102:	f363 07c5 	bfi	r7, r3, #3, #3
    a106:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    a10a:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    a10e:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    a112:	f367 1286 	bfi	r2, r7, #6, #1
    a116:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a11a:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    a11c:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a11e:	f042 0203 	orr.w	r2, r2, #3
    a122:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    a124:	2203      	movs	r2, #3
    a126:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    a128:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    a12a:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    a12c:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    a12e:	4620      	mov	r0, r4
    a130:	f7ff fd70 	bl	9c14 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    a134:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    a138:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    a13c:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    a140:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a144:	429a      	cmp	r2, r3
    a146:	f000 80e9 	beq.w	a31c <event_connection_prepare+0x56c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a14a:	2005      	movs	r0, #5
    a14c:	f7ff fb2a 	bl	97a4 <event_stop.constprop.33>
		switch (conn->llcp_type) {
    a150:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    a154:	3b01      	subs	r3, #1
    a156:	2b07      	cmp	r3, #7
    a158:	f63f ae33 	bhi.w	9dc2 <event_connection_prepare+0x12>
    a15c:	a201      	add	r2, pc, #4	; (adr r2, a164 <event_connection_prepare+0x3b4>)
    a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a162:	bf00      	nop
    a164:	0000a243 	.word	0x0000a243
    a168:	0000a6d9 	.word	0x0000a6d9
    a16c:	0000a795 	.word	0x0000a795
    a170:	0000a9c9 	.word	0x0000a9c9
    a174:	0000aa29 	.word	0x0000aa29
    a178:	00009dc3 	.word	0x00009dc3
    a17c:	0000aac9 	.word	0x0000aac9
    a180:	0000aaf9 	.word	0x0000aaf9
		conn->llcp_phy.ack = conn->llcp_phy.req;
    a184:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    a188:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    a18c:	f3c3 0282 	ubfx	r2, r3, #2, #3
    a190:	0791      	lsls	r1, r2, #30
    a192:	d544      	bpl.n	a21e <event_connection_prepare+0x46e>
			conn->llcp_phy.tx = BIT(1);
    a194:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    a196:	f362 0384 	bfi	r3, r2, #2, #3
    a19a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    a19e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    a1a2:	095a      	lsrs	r2, r3, #5
    a1a4:	0790      	lsls	r0, r2, #30
    a1a6:	d543      	bpl.n	a230 <event_connection_prepare+0x480>
			conn->llcp_phy.rx = BIT(1);
    a1a8:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    a1aa:	f362 1347 	bfi	r3, r2, #5, #3
    a1ae:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    a1b2:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    a1b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    a1ba:	f3c2 0182 	ubfx	r1, r2, #2, #3
    a1be:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    a1c2:	428b      	cmp	r3, r1
    a1c4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    a1c8:	bf14      	ite	ne
    a1ca:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    a1ce:	f36f 0384 	bfceq	r3, #2, #3
    a1d2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    a1d6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    a1da:	0952      	lsrs	r2, r2, #5
    a1dc:	f003 0307 	and.w	r3, r3, #7
    a1e0:	4293      	cmp	r3, r2
    a1e2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    a1e6:	bf14      	ite	ne
    a1e8:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    a1ec:	f36f 1347 	bfceq	r3, #5, #3
    a1f0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    a1f4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    a1f8:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    a1fc:	f043 0301 	orr.w	r3, r3, #1
    a200:	f3c2 0240 	ubfx	r2, r2, #1, #1
    a204:	f362 0341 	bfi	r3, r2, #1, #1
    a208:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    a20c:	2308      	movs	r3, #8
    a20e:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    a212:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    a216:	3b01      	subs	r3, #1
    a218:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    a21c:	e78e      	b.n	a13c <event_connection_prepare+0x38c>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    a21e:	07d7      	lsls	r7, r2, #31
    a220:	d501      	bpl.n	a226 <event_connection_prepare+0x476>
			conn->llcp_phy.tx = BIT(0);
    a222:	2201      	movs	r2, #1
    a224:	e7b7      	b.n	a196 <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    a226:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    a22a:	bf18      	it	ne
    a22c:	2204      	movne	r2, #4
    a22e:	e7b2      	b.n	a196 <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    a230:	07d1      	lsls	r1, r2, #31
    a232:	d501      	bpl.n	a238 <event_connection_prepare+0x488>
			conn->llcp_phy.rx = BIT(0);
    a234:	2201      	movs	r2, #1
    a236:	e7b8      	b.n	a1aa <event_connection_prepare+0x3fa>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    a238:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    a23c:	bf18      	it	ne
    a23e:	2204      	movne	r2, #4
    a240:	e7b3      	b.n	a1aa <event_connection_prepare+0x3fa>
	if (!conn_upd) {
    a242:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    a246:	b90b      	cbnz	r3, a24c <event_connection_prepare+0x49c>
		_radio.conn_upd = conn;
    a248:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    a24c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a250:	f013 0303 	ands.w	r3, r3, #3
    a254:	f000 80a8 	beq.w	a3a8 <event_connection_prepare+0x5f8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a258:	484f      	ldr	r0, [pc, #316]	; (a398 <event_connection_prepare+0x5e8>)
    a25a:	f7fb fc6e 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    a25e:	4607      	mov	r7, r0
    a260:	2800      	cmp	r0, #0
    a262:	d05b      	beq.n	a31c <event_connection_prepare+0x56c>
		switch (conn->llcp.conn_upd.state) {
    a264:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a268:	f003 0303 	and.w	r3, r3, #3
    a26c:	2b01      	cmp	r3, #1
    a26e:	f000 8091 	beq.w	a394 <event_connection_prepare+0x5e4>
    a272:	2b02      	cmp	r3, #2
    a274:	f47f ada5 	bne.w	9dc2 <event_connection_prepare+0x12>
			fp_mayfly_select_or_use =
    a278:	4a48      	ldr	r2, [pc, #288]	; (a39c <event_connection_prepare+0x5ec>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    a27a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a27e:	f36f 0301 	bfc	r3, #0, #2
    a282:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    a286:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a288:	3306      	adds	r3, #6
    a28a:	4433      	add	r3, r6
    a28c:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    a28e:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a292:	7939      	ldrb	r1, [r7, #4]
    a294:	f041 0103 	orr.w	r1, r1, #3
    a298:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    a29a:	210c      	movs	r1, #12
    a29c:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    a29e:	2100      	movs	r1, #0
    a2a0:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    a2a2:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    a2a6:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    a2a8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    a2ac:	f240 40e2 	movw	r0, #1250	; 0x4e2
    a2b0:	fbb1 f1f0 	udiv	r1, r1, r0
    a2b4:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    a2b8:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    a2bc:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    a2c0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    a2c4:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    a2c8:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    a2cc:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    a2d0:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a2d4:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    a2d6:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a2da:	2900      	cmp	r1, #0
    a2dc:	da0b      	bge.n	a2f6 <event_connection_prepare+0x546>
			u32_t ticks_prepare_to_start =
    a2de:	68a3      	ldr	r3, [r4, #8]
    a2e0:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    a2e2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    a2e6:	4283      	cmp	r3, r0
    a2e8:	bf2c      	ite	cs
    a2ea:	4443      	addcs	r3, r8
    a2ec:	eb08 0300 	addcc.w	r3, r8, r0
    a2f0:	1a5b      	subs	r3, r3, r1
    a2f2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    a2f6:	f107 0309 	add.w	r3, r7, #9
    a2fa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    a2fe:	4b28      	ldr	r3, [pc, #160]	; (a3a0 <event_connection_prepare+0x5f0>)
    a300:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a302:	2201      	movs	r2, #1
    a304:	4611      	mov	r1, r2
    a306:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    a308:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a30a:	f7fb fce1 	bl	5cd0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    a30e:	2800      	cmp	r0, #0
    a310:	f47f ad57 	bne.w	9dc2 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    a314:	4639      	mov	r1, r7
    a316:	4620      	mov	r0, r4
    a318:	f7ff fc7c 	bl	9c14 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    a31c:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    a320:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    a324:	429a      	cmp	r2, r3
    a326:	d01e      	beq.n	a366 <event_connection_prepare+0x5b6>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a328:	2005      	movs	r0, #5
    a32a:	f7ff fa3b 	bl	97a4 <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a32e:	481a      	ldr	r0, [pc, #104]	; (a398 <event_connection_prepare+0x5e8>)
    a330:	f7fb fc03 	bl	5b3a <mem_acquire>
		if (node_tx) {
    a334:	4601      	mov	r1, r0
    a336:	b1b0      	cbz	r0, a366 <event_connection_prepare+0x5b6>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    a338:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    a33c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a340:	7903      	ldrb	r3, [r0, #4]
    a342:	f043 0303 	orr.w	r3, r3, #3
    a346:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    a348:	2302      	movs	r3, #2
    a34a:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    a34c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    a34e:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    a352:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    a354:	4620      	mov	r0, r4
    a356:	f7ff fc5d 	bl	9c14 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    a35a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    a35c:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    a35e:	bf98      	it	ls
    a360:	3301      	addls	r3, #1
    a362:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    a366:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    a36a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    a36e:	429a      	cmp	r2, r3
    a370:	f000 84a6 	beq.w	acc0 <event_connection_prepare+0xf10>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    a374:	2005      	movs	r0, #5
    a376:	f7ff fa15 	bl	97a4 <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
    a37a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    a37e:	f003 0303 	and.w	r3, r3, #3
    a382:	2b03      	cmp	r3, #3
    a384:	f63f ad1d 	bhi.w	9dc2 <event_connection_prepare+0x12>
    a388:	e8df f013 	tbh	[pc, r3, lsl #1]
    a38c:	049a0460 	.word	0x049a0460
    a390:	04b6049a 	.word	0x04b6049a
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    a394:	4a03      	ldr	r2, [pc, #12]	; (a3a4 <event_connection_prepare+0x5f4>)
    a396:	e770      	b.n	a27a <event_connection_prepare+0x4ca>
    a398:	200007bc 	.word	0x200007bc
    a39c:	00008ca9 	.word	0x00008ca9
    a3a0:	200037b0 	.word	0x200037b0
    a3a4:	00009285 	.word	0x00009285
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    a3a8:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    a3ac:	1bf7      	subs	r7, r6, r7
    a3ae:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    a3b0:	043a      	lsls	r2, r7, #16
    a3b2:	d4b3      	bmi.n	a31c <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    a3b4:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    a3b8:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    a3bc:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    a3c0:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    a3c4:	428a      	cmp	r2, r1
    a3c6:	d009      	beq.n	a3dc <event_connection_prepare+0x62c>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    a3c8:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    a3cc:	f002 0207 	and.w	r2, r2, #7
    a3d0:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a3d2:	bf04      	itt	eq
    a3d4:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    a3d8:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    a3dc:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    a3e0:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    a3e2:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    a3e4:	bf08      	it	eq
    a3e6:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    a3ea:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    a3ec:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a3ee:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    a3f2:	429a      	cmp	r2, r3
    a3f4:	d114      	bne.n	a420 <event_connection_prepare+0x670>
		     conn->conn_interval) ||
    a3f6:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    a3fa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a3fc:	4299      	cmp	r1, r3
    a3fe:	d10f      	bne.n	a420 <event_connection_prepare+0x670>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    a400:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a404:	435a      	muls	r2, r3
    a406:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a40a:	f242 7110 	movw	r1, #10000	; 0x2710
    a40e:	fb01 2303 	mla	r3, r1, r3, r2
    a412:	3b01      	subs	r3, #1
    a414:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    a418:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a41a:	b29b      	uxth	r3, r3
    a41c:	429a      	cmp	r2, r3
    a41e:	d016      	beq.n	a44e <event_connection_prepare+0x69e>
			node_rx = packet_rx_reserve_get(2);
    a420:	2002      	movs	r0, #2
    a422:	f7fe f817 	bl	8454 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    a426:	2800      	cmp	r0, #0
    a428:	f43f accb 	beq.w	9dc2 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    a42c:	8c23      	ldrh	r3, [r4, #32]
    a42e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    a430:	2308      	movs	r3, #8
    a432:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    a434:	2300      	movs	r3, #0
    a436:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    a438:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    a43c:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    a43e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    a442:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    a444:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a448:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    a44a:	f7fe fe6d 	bl	9128 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a44e:	6823      	ldr	r3, [r4, #0]
    a450:	6866      	ldr	r6, [r4, #4]
    a452:	2b00      	cmp	r3, #0
    a454:	da09      	bge.n	a46a <event_connection_prepare+0x6ba>
			u32_t ticks_prepare_to_start =
    a456:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    a458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    a45c:	42b0      	cmp	r0, r6
    a45e:	bf2c      	ite	cs
    a460:	4480      	addcs	r8, r0
    a462:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    a464:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    a466:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    a46a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    a46c:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    a470:	49bd      	ldr	r1, [pc, #756]	; (a768 <event_connection_prepare+0x9b8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    a472:	fb13 f307 	smulbb	r3, r3, r7
    a476:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    a478:	fbb3 f2fa 	udiv	r2, r3, sl
    a47c:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    a480:	fb1a f009 	smulbb	r0, sl, r9
    a484:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    a486:	4283      	cmp	r3, r0
    a488:	f080 8108 	bcs.w	a69c <event_connection_prepare+0x8ec>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    a48c:	1ac0      	subs	r0, r0, r3
    a48e:	f240 1223 	movw	r2, #291	; 0x123
    a492:	4342      	muls	r2, r0
    a494:	17c3      	asrs	r3, r0, #31
    a496:	fb01 2303 	mla	r3, r1, r3, r2
    a49a:	fba0 0101 	umull	r0, r1, r0, r1
    a49e:	4419      	add	r1, r3
    a4a0:	a3af      	add	r3, pc, #700	; (adr r3, a760 <event_connection_prepare+0x9b0>)
    a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4a6:	f7f5 feb5 	bl	214 <__aeabi_uldivmod>
    a4aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a4ae:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a4b2:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    a4b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    a4b6:	f8df b2d8 	ldr.w	fp, [pc, #728]	; a790 <event_connection_prepare+0x9e0>
    a4ba:	1bdb      	subs	r3, r3, r7
    a4bc:	444b      	add	r3, r9
    a4be:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    a4c0:	6823      	ldr	r3, [r4, #0]
    a4c2:	42b3      	cmp	r3, r6
    a4c4:	bf38      	it	cc
    a4c6:	4633      	movcc	r3, r6
    a4c8:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    a4ca:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    a4ce:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    a4d8:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    a4da:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    a4de:	f280 80ee 	bge.w	a6be <event_connection_prepare+0x90e>
				conn->slave.window_widening_periodic_us *
    a4e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    a4e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    a4e6:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    a4ea:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    a4ee:	4a9f      	ldr	r2, [pc, #636]	; (a76c <event_connection_prepare+0x9bc>)
    a4f0:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    a4f4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    a4f8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    a4fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    a500:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    a504:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    a506:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    a508:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    a50c:	4b98      	ldr	r3, [pc, #608]	; (a770 <event_connection_prepare+0x9c0>)
				conn->llcp.conn_upd.win_size * 1250;
    a50e:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    a512:	f205 253f 	addw	r5, r5, #575	; 0x23f
    a516:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    a51a:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    a51c:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    a520:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    a522:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    a524:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    a526:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    a528:	429f      	cmp	r7, r3
    a52a:	bf94      	ite	ls
    a52c:	65e7      	strls	r7, [r4, #92]	; 0x5c
    a52e:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    a530:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    a532:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    a534:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a536:	fba0 010b 	umull	r0, r1, r0, fp
    a53a:	a389      	add	r3, pc, #548	; (adr r3, a760 <event_connection_prepare+0x9b0>)
    a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a540:	f7f5 fe68 	bl	214 <__aeabi_uldivmod>
    a544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a546:	1a1b      	subs	r3, r3, r0
    a548:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a54c:	fbb3 f0f8 	udiv	r0, r3, r8
    a550:	fb08 f000 	mul.w	r0, r8, r0
    a554:	a382      	add	r3, pc, #520	; (adr r3, a760 <event_connection_prepare+0x9b0>)
    a556:	e9d3 2300 	ldrd	r2, r3, [r3]
    a55a:	fba0 010b 	umull	r0, r1, r0, fp
    a55e:	f7f5 fe59 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    a562:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a564:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    a568:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    a56c:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    a570:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    a572:	f242 7110 	movw	r1, #10000	; 0x2710
    a576:	fb01 6303 	mla	r3, r1, r3, r6
    a57a:	3b01      	subs	r3, #1
    a57c:	fbb3 f3f6 	udiv	r3, r3, r6
    a580:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    a582:	4b7c      	ldr	r3, [pc, #496]	; (a774 <event_connection_prepare+0x9c4>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    a584:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    a588:	4433      	add	r3, r6
    a58a:	fbb3 f3f6 	udiv	r3, r3, r6
    a58e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a592:	4b79      	ldr	r3, [pc, #484]	; (a778 <event_connection_prepare+0x9c8>)
    a594:	4433      	add	r3, r6
    a596:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a59a:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a59c:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a59e:	4299      	cmp	r1, r3
    a5a0:	bfc4      	itt	gt
    a5a2:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    a5a6:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a5a8:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a5ac:	bfc8      	it	gt
    a5ae:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    a5b0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a5b4:	bfc8      	it	gt
    a5b6:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    a5b8:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    a5bc:	bf08      	it	eq
    a5be:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a5c2:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    a5c6:	2000      	movs	r0, #0
    a5c8:	2101      	movs	r1, #1
    a5ca:	f005 ff19 	bl	10400 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a5ce:	2200      	movs	r2, #0
    a5d0:	2101      	movs	r1, #1
		mayfly_was_enabled =
    a5d2:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a5d4:	4610      	mov	r0, r2
    a5d6:	f7fb fb53 	bl	5c80 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a5da:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    a5de:	f641 2385 	movw	r3, #6789	; 0x1a85
    a5e2:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a5e4:	3207      	adds	r2, #7
		ticker_status =
    a5e6:	9300      	str	r3, [sp, #0]
    a5e8:	b2d2      	uxtb	r2, r2
    a5ea:	4b64      	ldr	r3, [pc, #400]	; (a77c <event_connection_prepare+0x9cc>)
    a5ec:	4608      	mov	r0, r1
    a5ee:	f7fc f9b7 	bl	6960 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a5f2:	f030 0802 	bics.w	r8, r0, #2
    a5f6:	f47f abe4 	bne.w	9dc2 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    a5fa:	fba5 ab0b 	umull	sl, fp, r5, fp
    a5fe:	a358      	add	r3, pc, #352	; (adr r3, a760 <event_connection_prepare+0x9b0>)
    a600:	e9d3 2300 	ldrd	r2, r3, [r3]
    a604:	4650      	mov	r0, sl
    a606:	4659      	mov	r1, fp
    a608:	f7f5 fe04 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    a60c:	4a5c      	ldr	r2, [pc, #368]	; (a780 <event_connection_prepare+0x9d0>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a60e:	f894 6020 	ldrb.w	r6, [r4, #32]
    a612:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    a616:	2307      	movs	r3, #7
    a618:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a61c:	2100      	movs	r1, #0
    a61e:	4343      	muls	r3, r0
    a620:	fb02 3301 	mla	r3, r2, r1, r3
    a624:	fba0 0102 	umull	r0, r1, r0, r2
    a628:	ebba 0000 	subs.w	r0, sl, r0
    a62c:	4419      	add	r1, r3
    a62e:	eb6b 0101 	sbc.w	r1, fp, r1
    a632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a636:	2300      	movs	r3, #0
    a638:	f7f5 fdec 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a63c:	68e3      	ldr	r3, [r4, #12]
    a63e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a640:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    a644:	494f      	ldr	r1, [pc, #316]	; (a784 <event_connection_prepare+0x9d4>)
		ticker_status =
    a646:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a648:	441a      	add	r2, r3
    a64a:	4613      	mov	r3, r2
    a64c:	4a4e      	ldr	r2, [pc, #312]	; (a788 <event_connection_prepare+0x9d8>)
		ticker_status =
    a64e:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a650:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    a654:	bf38      	it	cc
    a656:	460a      	movcc	r2, r1
    a658:	3607      	adds	r6, #7
		ticker_status =
    a65a:	f641 2195 	movw	r1, #6805	; 0x1a95
    a65e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a660:	b2f6      	uxtb	r6, r6
		ticker_status =
    a662:	4946      	ldr	r1, [pc, #280]	; (a77c <event_connection_prepare+0x9cc>)
    a664:	9107      	str	r1, [sp, #28]
    a666:	9205      	str	r2, [sp, #20]
    a668:	9406      	str	r4, [sp, #24]
    a66a:	f8cd 800c 	str.w	r8, [sp, #12]
    a66e:	9501      	str	r5, [sp, #4]
    a670:	9700      	str	r7, [sp, #0]
    a672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a674:	4632      	mov	r2, r6
    a676:	4641      	mov	r1, r8
    a678:	4640      	mov	r0, r8
    a67a:	f7fc f8d3 	bl	6824 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a67e:	f030 0002 	bics.w	r0, r0, #2
    a682:	f47f ab9e 	bne.w	9dc2 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    a686:	f1b9 0f00 	cmp.w	r9, #0
    a68a:	f000 8332 	beq.w	acf2 <event_connection_prepare+0xf42>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a68e:	2201      	movs	r2, #1
    a690:	4611      	mov	r1, r2
}
    a692:	b00f      	add	sp, #60	; 0x3c
    a694:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    a698:	f7fb baf2 	b.w	5c80 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    a69c:	fb0a 3212 	mls	r2, sl, r2, r3
    a6a0:	b292      	uxth	r2, r2
    a6a2:	fba2 0101 	umull	r0, r1, r2, r1
    a6a6:	f240 1323 	movw	r3, #291	; 0x123
    a6aa:	fb03 1102 	mla	r1, r3, r2, r1
    a6ae:	a32c      	add	r3, pc, #176	; (adr r3, a760 <event_connection_prepare+0x9b0>)
    a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6b4:	f7f5 fdae 	bl	214 <__aeabi_uldivmod>
    a6b8:	eba8 0300 	sub.w	r3, r8, r0
    a6bc:	e6f9      	b.n	a4b2 <event_connection_prepare+0x702>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    a6be:	990c      	ldr	r1, [sp, #48]	; 0x30
    a6c0:	a327      	add	r3, pc, #156	; (adr r3, a760 <event_connection_prepare+0x9b0>)
    a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6c6:	fba1 010b 	umull	r0, r1, r1, fp
    a6ca:	f7f5 fda3 	bl	214 <__aeabi_uldivmod>
    a6ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    a6d2:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    a6d4:	4635      	mov	r5, r6
    a6d6:	e747      	b.n	a568 <event_connection_prepare+0x7b8>
	if (conn->llcp.chan_map.initiate) {
    a6d8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    a6dc:	b30b      	cbz	r3, a722 <event_connection_prepare+0x972>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a6de:	482b      	ldr	r0, [pc, #172]	; (a78c <event_connection_prepare+0x9dc>)
    a6e0:	f7fb fa2b 	bl	5b3a <mem_acquire>
		if (node_tx) {
    a6e4:	4607      	mov	r7, r0
    a6e6:	2800      	cmp	r0, #0
    a6e8:	f43f ae18 	beq.w	a31c <event_connection_prepare+0x56c>
			conn->llcp.chan_map.initiate = 0;
    a6ec:	2300      	movs	r3, #0
    a6ee:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    a6f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    a6f4:	3306      	adds	r3, #6
    a6f6:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    a6f8:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a6fc:	7903      	ldrb	r3, [r0, #4]
    a6fe:	f043 0303 	orr.w	r3, r3, #3
    a702:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    a704:	2308      	movs	r3, #8
    a706:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    a708:	2301      	movs	r3, #1
    a70a:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    a70c:	2205      	movs	r2, #5
    a70e:	f104 0179 	add.w	r1, r4, #121	; 0x79
    a712:	3008      	adds	r0, #8
    a714:	f7f7 fa72 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    a718:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a71c:	f8a7 300d 	strh.w	r3, [r7, #13]
    a720:	e5f8      	b.n	a314 <event_connection_prepare+0x564>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    a722:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    a726:	1af3      	subs	r3, r6, r3
    a728:	041f      	lsls	r7, r3, #16
    a72a:	f53f adf7 	bmi.w	a31c <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    a72e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a732:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    a736:	f104 0717 	add.w	r7, r4, #23
    a73a:	2205      	movs	r2, #5
    a73c:	f104 0179 	add.w	r1, r4, #121	; 0x79
    a740:	4638      	mov	r0, r7
    a742:	f7f7 fa5b 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    a746:	2105      	movs	r1, #5
    a748:	4638      	mov	r0, r7
    a74a:	f7fb fba1 	bl	5e90 <util_ones_count_get>
		conn->data_chan_count =
    a74e:	7f63      	ldrb	r3, [r4, #29]
    a750:	f360 0305 	bfi	r3, r0, #0, #6
    a754:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    a756:	2301      	movs	r3, #1
    a758:	7723      	strb	r3, [r4, #28]
    a75a:	e5df      	b.n	a31c <event_connection_prepare+0x56c>
    a75c:	f3af 8000 	nop.w
    a760:	1afd498d 	.word	0x1afd498d
    a764:	00000007 	.word	0x00000007
    a768:	09ce5400 	.word	0x09ce5400
    a76c:	0001299e 	.word	0x0001299e
    a770:	000f4240 	.word	0x000f4240
    a774:	026259ff 	.word	0x026259ff
    a778:	01c9c37f 	.word	0x01c9c37f
    a77c:	00009745 	.word	0x00009745
    a780:	1afd498d 	.word	0x1afd498d
    a784:	0000ae59 	.word	0x0000ae59
    a788:	0000ae5d 	.word	0x0000ae5d
    a78c:	200007bc 	.word	0x200007bc
    a790:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.encryption.initiate) {
    a794:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    a798:	f1b9 0f00 	cmp.w	r9, #0
    a79c:	f47f adbe 	bne.w	a31c <event_connection_prepare+0x56c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a7a0:	48d3      	ldr	r0, [pc, #844]	; (aaf0 <event_connection_prepare+0xd40>)
    a7a2:	f7fb f9ca 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    a7a6:	4607      	mov	r7, r0
    a7a8:	2800      	cmp	r0, #0
    a7aa:	f43f adb7 	beq.w	a31c <event_connection_prepare+0x56c>
	if (!conn->role) {
    a7ae:	f994 301d 	ldrsb.w	r3, [r4, #29]
    a7b2:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    a7b4:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    a7b8:	db4d      	blt.n	a856 <event_connection_prepare+0xaa6>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    a7ba:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    a7be:	465b      	mov	r3, fp
    a7c0:	464a      	mov	r2, r9
    a7c2:	f104 0194 	add.w	r1, r4, #148	; 0x94
    a7c6:	f104 0084 	add.w	r0, r4, #132	; 0x84
    a7ca:	f005 f9a9 	bl	fb20 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    a7ce:	2210      	movs	r2, #16
    a7d0:	4659      	mov	r1, fp
    a7d2:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    a7d6:	f7f7 fa11 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    a7da:	f504 7189 	add.w	r1, r4, #274	; 0x112
    a7de:	2208      	movs	r2, #8
    a7e0:	f204 1033 	addw	r0, r4, #307	; 0x133
    a7e4:	f7f7 fa0a 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    a7e8:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    a7ec:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    a7f0:	f369 0300 	bfi	r3, r9, #0, #1
    a7f4:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    a7f8:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    a7fc:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    a800:	f043 0301 	orr.w	r3, r3, #1
    a804:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    a808:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    a80c:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    a810:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    a814:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    a818:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    a81c:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    a820:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    a824:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    a828:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    a82c:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    a830:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    a834:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    a838:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    a83c:	4651      	mov	r1, sl
    a83e:	4620      	mov	r0, r4
    a840:	f7ff fa76 	bl	9d30 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    a844:	4639      	mov	r1, r7
    a846:	4620      	mov	r0, r4
    a848:	f7ff f9e4 	bl	9c14 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    a84c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a850:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    a854:	e562      	b.n	a31c <event_connection_prepare+0x56c>
	else if (!conn->pause_tx || conn->refresh) {
    a856:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    a85a:	f003 0348 	and.w	r3, r3, #72	; 0x48
    a85e:	2b08      	cmp	r3, #8
    a860:	f000 80a2 	beq.w	a9a8 <event_connection_prepare+0xbf8>
		if (conn->llcp.encryption.error_code) {
    a864:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    a868:	f1b9 0f00 	cmp.w	r9, #0
    a86c:	d020      	beq.n	a8b0 <event_connection_prepare+0xb00>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    a86e:	7903      	ldrb	r3, [r0, #4]
    a870:	f043 0303 	orr.w	r3, r3, #3
    a874:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    a876:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    a87a:	0698      	lsls	r0, r3, #26
    a87c:	d512      	bpl.n	a8a4 <event_connection_prepare+0xaf4>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    a87e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    a882:	0759      	lsls	r1, r3, #29
    a884:	d50e      	bpl.n	a8a4 <event_connection_prepare+0xaf4>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    a886:	2311      	movs	r3, #17
    a888:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    a88a:	2303      	movs	r3, #3
    a88c:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    a88e:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    a892:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    a894:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    a896:	797b      	ldrb	r3, [r7, #5]
    a898:	3301      	adds	r3, #1
    a89a:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    a89c:	2300      	movs	r3, #0
    a89e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    a8a2:	e7cf      	b.n	a844 <event_connection_prepare+0xa94>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    a8a4:	230d      	movs	r3, #13
    a8a6:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    a8a8:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    a8ac:	2301      	movs	r3, #1
    a8ae:	e7f1      	b.n	a894 <event_connection_prepare+0xae4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a8b0:	488f      	ldr	r0, [pc, #572]	; (aaf0 <event_connection_prepare+0xd40>)
    a8b2:	f7fb f942 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    a8b6:	4682      	mov	sl, r0
    a8b8:	2800      	cmp	r0, #0
    a8ba:	f000 82bd 	beq.w	ae38 <event_connection_prepare+0x1088>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a8be:	7903      	ldrb	r3, [r0, #4]
    a8c0:	f043 0303 	orr.w	r3, r3, #3
    a8c4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    a8c6:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    a8ca:	230d      	movs	r3, #13
    a8cc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    a8ce:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    a8d2:	f100 0308 	add.w	r3, r0, #8
    a8d6:	4619      	mov	r1, r3
    a8d8:	2208      	movs	r2, #8
    a8da:	6868      	ldr	r0, [r5, #4]
    a8dc:	930d      	str	r3, [sp, #52]	; 0x34
    a8de:	f006 fa5f 	bl	10da0 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    a8e2:	f10a 0310 	add.w	r3, sl, #16
    a8e6:	4619      	mov	r1, r3
    a8e8:	465a      	mov	r2, fp
    a8ea:	6868      	ldr	r0, [r5, #4]
    a8ec:	930b      	str	r3, [sp, #44]	; 0x2c
    a8ee:	f006 fa57 	bl	10da0 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    a8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a8f4:	2208      	movs	r2, #8
    a8f6:	4619      	mov	r1, r3
    a8f8:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a8fc:	f7f7 f97e 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    a900:	465a      	mov	r2, fp
    a902:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a904:	f504 708b 	add.w	r0, r4, #278	; 0x116
    a908:	f7f7 f978 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    a90c:	4651      	mov	r1, sl
    a90e:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    a910:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    a914:	f7ff f97e 	bl	9c14 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    a918:	4653      	mov	r3, sl
    a91a:	464a      	mov	r2, r9
    a91c:	f104 0194 	add.w	r1, r4, #148	; 0x94
    a920:	f104 0084 	add.w	r0, r4, #132	; 0x84
    a924:	f005 f8fc 	bl	fb20 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    a928:	2210      	movs	r2, #16
    a92a:	4651      	mov	r1, sl
    a92c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    a930:	f7f7 f964 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    a934:	2208      	movs	r2, #8
    a936:	f504 7189 	add.w	r1, r4, #274	; 0x112
    a93a:	f204 1033 	addw	r0, r4, #307	; 0x133
    a93e:	f7f7 f95d 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    a942:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    a946:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    a94a:	f043 0301 	orr.w	r3, r3, #1
    a94e:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    a952:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    a956:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    a95a:	f369 0300 	bfi	r3, r9, #0, #1
    a95e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    a962:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    a966:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    a96a:	f043 0310 	orr.w	r3, r3, #16
    a96e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a972:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    a974:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a978:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    a97c:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    a980:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    a984:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    a988:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    a98c:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    a990:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    a994:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    a998:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a99c:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    a99e:	2301      	movs	r3, #1
    a9a0:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    a9a2:	2305      	movs	r3, #5
    a9a4:	71fb      	strb	r3, [r7, #7]
    a9a6:	e74d      	b.n	a844 <event_connection_prepare+0xa94>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    a9a8:	4651      	mov	r1, sl
    a9aa:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    a9ae:	f7ff f9bf 	bl	9d30 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    a9b2:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    a9b6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    a9ba:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    a9be:	f369 03c3 	bfi	r3, r9, #3, #1
    a9c2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    a9c6:	e73d      	b.n	a844 <event_connection_prepare+0xa94>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    a9c8:	4849      	ldr	r0, [pc, #292]	; (aaf0 <event_connection_prepare+0xd40>)
    a9ca:	f7fb f8b6 	bl	5b3a <mem_acquire>
	if (node_tx) {
    a9ce:	4607      	mov	r7, r0
    a9d0:	2800      	cmp	r0, #0
    a9d2:	f43f aca3 	beq.w	a31c <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    a9d6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a9da:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    a9de:	4b45      	ldr	r3, [pc, #276]	; (aaf4 <event_connection_prepare+0xd44>)
    a9e0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a9e4:	7903      	ldrb	r3, [r0, #4]
    a9e6:	f043 0303 	orr.w	r3, r3, #3
    a9ea:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    a9ec:	2309      	movs	r3, #9
    a9ee:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    a9f0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    a9f4:	2b00      	cmp	r3, #0
    a9f6:	bfac      	ite	ge
    a9f8:	2308      	movge	r3, #8
    a9fa:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    a9fc:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    a9fe:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    aa00:	2100      	movs	r1, #0
    aa02:	4410      	add	r0, r2
    aa04:	f7f7 f926 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    aa08:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    aa0c:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    aa0e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    aa10:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    aa12:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    aa14:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    aa16:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    aa18:	4620      	mov	r0, r4
    aa1a:	f7ff f8fb 	bl	9c14 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    aa1e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    aa22:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    aa26:	e479      	b.n	a31c <event_connection_prepare+0x56c>
	if (conn->llcp_version.tx == 0) {
    aa28:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aa2c:	07da      	lsls	r2, r3, #31
    aa2e:	d424      	bmi.n	aa7a <event_connection_prepare+0xcca>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    aa30:	482f      	ldr	r0, [pc, #188]	; (aaf0 <event_connection_prepare+0xd40>)
    aa32:	f7fb f882 	bl	5b3a <mem_acquire>
		if (node_tx) {
    aa36:	4601      	mov	r1, r0
    aa38:	2800      	cmp	r0, #0
    aa3a:	f43f ac6f 	beq.w	a31c <event_connection_prepare+0x56c>
			conn->llcp_ack = conn->llcp_req;
    aa3e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    aa42:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    aa46:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aa4a:	f043 0301 	orr.w	r3, r3, #1
    aa4e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    aa52:	7903      	ldrb	r3, [r0, #4]
    aa54:	f043 0303 	orr.w	r3, r3, #3
    aa58:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    aa5a:	2306      	movs	r3, #6
    aa5c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    aa5e:	230c      	movs	r3, #12
    aa60:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    aa62:	2309      	movs	r3, #9
    aa64:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    aa66:	f06f 030e 	mvn.w	r3, #14
    aa6a:	7243      	strb	r3, [r0, #9]
    aa6c:	2305      	movs	r3, #5
    aa6e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    aa70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aa74:	72c3      	strb	r3, [r0, #11]
    aa76:	7303      	strb	r3, [r0, #12]
    aa78:	e7ce      	b.n	aa18 <event_connection_prepare+0xc68>
	} else if (conn->llcp_version.rx != 0) {
    aa7a:	079b      	lsls	r3, r3, #30
    aa7c:	f57f a9a1 	bpl.w	9dc2 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    aa80:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    aa84:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    aa88:	2002      	movs	r0, #2
    aa8a:	f7fd fce3 	bl	8454 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    aa8e:	2800      	cmp	r0, #0
    aa90:	f43f a997 	beq.w	9dc2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    aa94:	8c23      	ldrh	r3, [r4, #32]
    aa96:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    aa98:	2301      	movs	r3, #1
    aa9a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    aa9c:	7a03      	ldrb	r3, [r0, #8]
    aa9e:	f043 0303 	orr.w	r3, r3, #3
    aaa2:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    aaa4:	2306      	movs	r3, #6
    aaa6:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    aaa8:	230c      	movs	r3, #12
    aaaa:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    aaac:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    aab0:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    aab2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    aab6:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    aaba:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    aabe:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    aac2:	f7fe fb31 	bl	9128 <packet_rx_enqueue>
    aac6:	e429      	b.n	a31c <event_connection_prepare+0x56c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    aac8:	4809      	ldr	r0, [pc, #36]	; (aaf0 <event_connection_prepare+0xd40>)
    aaca:	f7fb f836 	bl	5b3a <mem_acquire>
	if (node_tx) {
    aace:	4601      	mov	r1, r0
    aad0:	2800      	cmp	r0, #0
    aad2:	f43f ac23 	beq.w	a31c <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    aad6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    aada:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    aade:	7903      	ldrb	r3, [r0, #4]
    aae0:	f043 0303 	orr.w	r3, r3, #3
    aae4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    aae6:	2301      	movs	r3, #1
    aae8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    aaea:	2312      	movs	r3, #18
    aaec:	71c3      	strb	r3, [r0, #7]
    aaee:	e793      	b.n	aa18 <event_connection_prepare+0xc68>
    aaf0:	200007bc 	.word	0x200007bc
    aaf4:	000141ff 	.word	0x000141ff
	if (conn->llcp.phy_upd_ind.initiate) {
    aaf8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    aafc:	07d7      	lsls	r7, r2, #31
    aafe:	d54f      	bpl.n	aba0 <event_connection_prepare+0xdf0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ab00:	48d0      	ldr	r0, [pc, #832]	; (ae44 <event_connection_prepare+0x1094>)
    ab02:	f7fb f81a 	bl	5b3a <mem_acquire>
		if (node_tx) {
    ab06:	4607      	mov	r7, r0
    ab08:	2800      	cmp	r0, #0
    ab0a:	f43f ac07 	beq.w	a31c <event_connection_prepare+0x56c>
			conn->llcp.phy_upd_ind.initiate = 0;
    ab0e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ab12:	f36f 0300 	bfc	r3, #0, #1
    ab16:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    ab1a:	b2db      	uxtb	r3, r3
    ab1c:	f3c3 0982 	ubfx	r9, r3, #2, #3
    ab20:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    ab24:	d136      	bne.n	ab94 <event_connection_prepare+0xde4>
				conn->llcp_ack = conn->llcp_req;
    ab26:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    ab2a:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    ab2e:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    ab30:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    ab34:	d517      	bpl.n	ab66 <event_connection_prepare+0xdb6>
					node_rx = packet_rx_reserve_get(2);
    ab36:	2002      	movs	r0, #2
    ab38:	f7fd fc8c 	bl	8454 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    ab3c:	2800      	cmp	r0, #0
    ab3e:	f43f a940 	beq.w	9dc2 <event_connection_prepare+0x12>
					node_rx->hdr.handle = conn->handle;
    ab42:	8c23      	ldrh	r3, [r4, #32]
    ab44:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    ab46:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    ab4a:	230c      	movs	r3, #12
    ab4c:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    ab4e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ab52:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ab56:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    ab58:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ab5c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ab60:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    ab62:	f7fe fae1 	bl	9128 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ab66:	793b      	ldrb	r3, [r7, #4]
    ab68:	f043 0303 	orr.w	r3, r3, #3
    ab6c:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    ab6e:	2305      	movs	r3, #5
    ab70:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    ab72:	2318      	movs	r3, #24
    ab74:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    ab76:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ab7a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    ab7e:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    ab80:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ab84:	f3c3 1342 	ubfx	r3, r3, #5, #3
    ab88:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    ab8a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    ab8e:	817b      	strh	r3, [r7, #10]
    ab90:	f7ff bbc0 	b.w	a314 <event_connection_prepare+0x564>
								 conn->latency +
    ab94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    ab96:	3306      	adds	r3, #6
    ab98:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    ab9a:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    ab9e:	e7e2      	b.n	ab66 <event_connection_prepare+0xdb6>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    aba0:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    aba4:	1af3      	subs	r3, r6, r3
    aba6:	0419      	lsls	r1, r3, #16
    aba8:	f53f abb8 	bmi.w	a31c <event_connection_prepare+0x56c>
		conn->llcp_ack = conn->llcp_req;
    abac:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    abb0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    abb4:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    abb8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    abbc:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    abc0:	bf18      	it	ne
    abc2:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    abc6:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    abca:	bf1c      	itt	ne
    abcc:	f367 03c5 	bfine	r3, r7, #3, #3
    abd0:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    abd4:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    abd8:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    abdc:	d008      	beq.n	abf0 <event_connection_prepare+0xe40>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    abde:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    abe2:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    abe6:	095b      	lsrs	r3, r3, #5
    abe8:	f363 0702 	bfi	r7, r3, #0, #3
    abec:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    abf0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    abf4:	461f      	mov	r7, r3
    abf6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    abfa:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    abfe:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    ac00:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    ac04:	d40b      	bmi.n	ac1e <event_connection_prepare+0xe6e>
    ac06:	b2fb      	uxtb	r3, r7
    ac08:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ac0c:	4283      	cmp	r3, r0
    ac0e:	d106      	bne.n	ac1e <event_connection_prepare+0xe6e>
		    (conn->phy_rx == old_rx)) {
    ac10:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    ac14:	f003 0307 	and.w	r3, r3, #7
    ac18:	428b      	cmp	r3, r1
    ac1a:	f43f ab7f 	beq.w	a31c <event_connection_prepare+0x56c>
		node_rx = packet_rx_reserve_get(2);
    ac1e:	2002      	movs	r0, #2
    ac20:	f7fd fc18 	bl	8454 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    ac24:	2800      	cmp	r0, #0
    ac26:	f43f a8cc 	beq.w	9dc2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    ac2a:	8c23      	ldrh	r3, [r4, #32]
    ac2c:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ac2e:	230c      	movs	r3, #12
    ac30:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    ac32:	2300      	movs	r3, #0
    ac34:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    ac36:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ac3a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ac3e:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    ac40:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ac44:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ac48:	7343      	strb	r3, [r0, #13]
    ac4a:	e73a      	b.n	aac2 <event_connection_prepare+0xd12>
		free_count_rx = packet_rx_acquired_count_get() +
    ac4c:	f7fd fbec 	bl	8428 <packet_rx_acquired_count_get>
    ac50:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ac52:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ac56:	f7fa ff9f 	bl	5b98 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ac5a:	4438      	add	r0, r7
    ac5c:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    ac5e:	28ff      	cmp	r0, #255	; 0xff
    ac60:	f63f a8af 	bhi.w	9dc2 <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    ac64:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    ac68:	4283      	cmp	r3, r0
    ac6a:	d129      	bne.n	acc0 <event_connection_prepare+0xf10>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ac6c:	4875      	ldr	r0, [pc, #468]	; (ae44 <event_connection_prepare+0x1094>)
    ac6e:	f7fa ff64 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    ac72:	4601      	mov	r1, r0
    ac74:	b320      	cbz	r0, acc0 <event_connection_prepare+0xf10>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ac76:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    ac7a:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ac7e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    ac82:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ac84:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ac86:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ac88:	f365 0301 	bfi	r3, r5, #0, #2
    ac8c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ac90:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    ac92:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ac94:	f043 0303 	orr.w	r3, r3, #3
    ac98:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    ac9a:	2309      	movs	r3, #9
    ac9c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    ac9e:	2314      	movs	r3, #20
    aca0:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    aca2:	231b      	movs	r3, #27
    aca4:	720b      	strb	r3, [r1, #8]
    aca6:	2300      	movs	r3, #0
    aca8:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    acaa:	2348      	movs	r3, #72	; 0x48
    acac:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    acae:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    acb0:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    acb2:	4620      	mov	r0, r4
    acb4:	f7fe ffae 	bl	9c14 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    acb8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    acbc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    acc0:	f894 3020 	ldrb.w	r3, [r4, #32]
    acc4:	f994 501d 	ldrsb.w	r5, [r4, #29]
    acc8:	485f      	ldr	r0, [pc, #380]	; (ae48 <event_connection_prepare+0x1098>)
    acca:	4960      	ldr	r1, [pc, #384]	; (ae4c <event_connection_prepare+0x109c>)
    accc:	68a2      	ldr	r2, [r4, #8]
    acce:	9403      	str	r4, [sp, #12]
    acd0:	3307      	adds	r3, #7
    acd2:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    acd6:	bf38      	it	cc
    acd8:	4601      	movcc	r1, r0
    acda:	b2db      	uxtb	r3, r3
    acdc:	e88d 000c 	stmia.w	sp, {r2, r3}
    ace0:	9102      	str	r1, [sp, #8]
    ace2:	1d23      	adds	r3, r4, #4
    ace4:	4622      	mov	r2, r4
    ace6:	990c      	ldr	r1, [sp, #48]	; 0x30
    ace8:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    acea:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    acec:	f7fe fd68 	bl	97c0 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    acf0:	8466      	strh	r6, [r4, #34]	; 0x22
}
    acf2:	b00f      	add	sp, #60	; 0x3c
    acf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    acf8:	f7fd fb96 	bl	8428 <packet_rx_acquired_count_get>
    acfc:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    acfe:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ad02:	f7fa ff49 	bl	5b98 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ad06:	4438      	add	r0, r7
    ad08:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    ad0a:	28ff      	cmp	r0, #255	; 0xff
    ad0c:	f63f a859 	bhi.w	9dc2 <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    ad10:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    ad14:	4283      	cmp	r3, r0
    ad16:	f47f a854 	bne.w	9dc2 <event_connection_prepare+0x12>
		conn->llcp_length.ack = conn->llcp_length.req;
    ad1a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ad1e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    ad22:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    ad26:	2100      	movs	r1, #0
    ad28:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    ad2c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ad30:	f361 02c3 	bfi	r2, r1, #3, #1
    ad34:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    ad38:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    ad3c:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    ad3e:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    ad42:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    ad44:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    ad48:	f7fa ff26 	bl	5b98 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    ad4c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    ad50:	b10b      	cbz	r3, ad56 <event_connection_prepare+0xfa6>
			free_count_conn++;
    ad52:	3001      	adds	r0, #1
    ad54:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    ad56:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    ad5a:	b10b      	cbz	r3, ad60 <event_connection_prepare+0xfb0>
			free_count_conn++;
    ad5c:	3001      	adds	r0, #1
    ad5e:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ad60:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ad62:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ad66:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ad68:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ad6a:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ad6e:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ad70:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ad72:	d05e      	beq.n	ae32 <event_connection_prepare+0x1082>
    ad74:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    ad78:	42bb      	cmp	r3, r7
    ad7a:	d35a      	bcc.n	ae32 <event_connection_prepare+0x1082>
		node_rx = packet_rx_reserve_get(2);
    ad7c:	2002      	movs	r0, #2
    ad7e:	f7fd fb69 	bl	8454 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    ad82:	2800      	cmp	r0, #0
    ad84:	f43f a81d 	beq.w	9dc2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    ad88:	8c23      	ldrh	r3, [r4, #32]
    ad8a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ad8c:	2301      	movs	r3, #1
    ad8e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    ad90:	7a03      	ldrb	r3, [r0, #8]
    ad92:	f043 0303 	orr.w	r3, r3, #3
    ad96:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    ad98:	2309      	movs	r3, #9
    ad9a:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    ad9c:	2315      	movs	r3, #21
    ad9e:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    ada0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ada2:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    ada4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    ada6:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    ada8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    adaa:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    adac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    adae:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    adb0:	f7fe f9ba 	bl	9128 <packet_rx_enqueue>
    adb4:	e784      	b.n	acc0 <event_connection_prepare+0xf10>
				if (_radio.packet_rx_acquire == 0) {
    adb6:	b90b      	cbnz	r3, adbc <event_connection_prepare+0x100c>
						_radio.packet_rx_count - 1;
    adb8:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    adbc:	3b01      	subs	r3, #1
    adbe:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    adc2:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    adc6:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    adce:	4649      	mov	r1, r9
    add0:	6818      	ldr	r0, [r3, #0]
    add2:	f7fa fecc 	bl	5b6e <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    add6:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    adda:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    adde:	3a01      	subs	r2, #1
    ade0:	4293      	cmp	r3, r2
    ade2:	f6be afee 	bge.w	9dc2 <event_connection_prepare+0x12>
				_radio.link_rx_data_quota++;
    ade6:	3301      	adds	r3, #1
    ade8:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    adec:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    adf0:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    adf4:	4293      	cmp	r3, r2
    adf6:	d1de      	bne.n	adb6 <event_connection_prepare+0x1006>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    adf8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    adfa:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    adfe:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    ae00:	bf9a      	itte	ls
    ae02:	2334      	movls	r3, #52	; 0x34
    ae04:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    ae08:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    ae0c:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    ae10:	fbb2 f2f1 	udiv	r2, r2, r1
    ae14:	b2d2      	uxtb	r2, r2
    ae16:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    ae1a:	2a00      	cmp	r2, #0
    ae1c:	f43e afd1 	beq.w	9dc2 <event_connection_prepare+0x12>
			mem_init(_radio.pkt_rx_data_pool,
    ae20:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    ae24:	4b0a      	ldr	r3, [pc, #40]	; (ae50 <event_connection_prepare+0x10a0>)
    ae26:	f7fa fe61 	bl	5aec <mem_init>
			packet_rx_allocate(4);
    ae2a:	2004      	movs	r0, #4
    ae2c:	f7fd fb8a 	bl	8544 <packet_rx_allocate>
    ae30:	e7a4      	b.n	ad7c <event_connection_prepare+0xfcc>
				mem_release(node_rx->hdr.onion.link,
    ae32:	f8df 9020 	ldr.w	r9, [pc, #32]	; ae54 <event_connection_prepare+0x10a4>
    ae36:	e7d9      	b.n	adec <event_connection_prepare+0x103c>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ae38:	4902      	ldr	r1, [pc, #8]	; (ae44 <event_connection_prepare+0x1094>)
    ae3a:	4638      	mov	r0, r7
    ae3c:	f7fa fe97 	bl	5b6e <mem_release>
    ae40:	f7ff ba6c 	b.w	a31c <event_connection_prepare+0x56c>
    ae44:	200007bc 	.word	0x200007bc
    ae48:	0000b331 	.word	0x0000b331
    ae4c:	0000ae9d 	.word	0x0000ae9d
    ae50:	20000790 	.word	0x20000790
    ae54:	200007a8 	.word	0x200007a8

0000ae58 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    ae58:	f7fe bfaa 	b.w	9db0 <event_connection_prepare>

0000ae5c <event_slave_prepare>:
    ae5c:	f7fe bfa8 	b.w	9db0 <event_connection_prepare>

0000ae60 <connection_configure>:
{
    ae60:	b510      	push	{r4, lr}
    ae62:	4604      	mov	r4, r0
	radio_reset();
    ae64:	f004 ff38 	bl	fcd8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    ae68:	2000      	movs	r0, #0
    ae6a:	f004 ff5f 	bl	fd2c <radio_tx_power_set>
	radio_isr_set(isr);
    ae6e:	480a      	ldr	r0, [pc, #40]	; (ae98 <connection_configure+0x38>)
    ae70:	f004 fefc 	bl	fc6c <radio_isr_set>
	radio_aa_set(conn->access_addr);
    ae74:	f104 0010 	add.w	r0, r4, #16
    ae78:	f004 ff76 	bl	fd68 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    ae7c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    ae7e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    ae80:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    ae82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    ae86:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    ae88:	f240 605b 	movw	r0, #1627	; 0x65b
    ae8c:	4319      	orrs	r1, r3
}
    ae8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    ae92:	f005 b811 	b.w	feb8 <radio_crc_configure>
    ae96:	bf00      	nop
    ae98:	0000c5b9 	.word	0x0000c5b9

0000ae9c <event_slave>:
{
    ae9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aea0:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    aea2:	4b65      	ldr	r3, [pc, #404]	; (b038 <event_slave+0x19c>)
    aea4:	7cda      	ldrb	r2, [r3, #19]
{
    aea6:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    aea8:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    aeac:	461d      	mov	r5, r3
    aeae:	b12a      	cbz	r2, aebc <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    aeb0:	4040      	eors	r0, r0
    aeb2:	f380 8811 	msr	BASEPRI, r0
    aeb6:	f04f 0004 	mov.w	r0, #4
    aeba:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    aebc:	7c1b      	ldrb	r3, [r3, #16]
    aebe:	8c22      	ldrh	r2, [r4, #32]
    aec0:	b2db      	uxtb	r3, r3
    aec2:	3207      	adds	r2, #7
    aec4:	4293      	cmp	r3, r2
    aec6:	d1f3      	bne.n	aeb0 <event_slave+0x14>
	_radio.packet_counter = 0;
    aec8:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    aecc:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    aed0:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    aed2:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    aed4:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    aed6:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    aed8:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    aeda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    aedc:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    aee0:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    aee2:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    aee4:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    aee6:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    aee8:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    aeea:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    aeec:	f7ff ffb8 	bl	ae60 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    aef0:	2096      	movs	r0, #150	; 0x96
    aef2:	f005 f89b 	bl	1002c <radio_tmr_tifs_set>
				     conn->phy_flags);
    aef6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    aefa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    aefe:	09d3      	lsrs	r3, r2, #7
    af00:	4631      	mov	r1, r6
    af02:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    af06:	f000 0007 	and.w	r0, r0, #7
    af0a:	f004 ffff 	bl	ff0c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    af0e:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    af12:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    af16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    af1a:	4620      	mov	r0, r4
    af1c:	3108      	adds	r1, #8
    af1e:	f7fd fd2d 	bl	897c <rx_packet_set>
	if (conn->data_chan_sel) {
    af22:	7f63      	ldrb	r3, [r4, #29]
    af24:	f013 0f40 	tst.w	r3, #64	; 0x40
    af28:	f104 0217 	add.w	r2, r4, #23
    af2c:	d059      	beq.n	afe2 <event_slave+0x146>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    af2e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    af30:	8be1      	ldrh	r1, [r4, #30]
    af32:	3801      	subs	r0, #1
    af34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    af38:	b280      	uxth	r0, r0
    af3a:	f7fe fd4d 	bl	99d8 <chan_sel_2>
	chan_set(data_chan_use);
    af3e:	f7fe f9c9 	bl	92d4 <chan_set>
	conn->slave.window_widening_event_us +=
    af42:	6e23      	ldr	r3, [r4, #96]	; 0x60
    af44:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    af46:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    af48:	2200      	movs	r2, #0
    af4a:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    af4c:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    af4e:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    af50:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    af52:	bf88      	it	hi
    af54:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    af56:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    af58:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    af5a:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    af5c:	4413      	add	r3, r2
    af5e:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    af60:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    af62:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    af64:	f107 0109 	add.w	r1, r7, #9
    af68:	4630      	mov	r0, r6
    af6a:	f005 f86b 	bl	10044 <radio_tmr_start>
    af6e:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    af70:	f005 f904 	bl	1017c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    af74:	4630      	mov	r0, r6
    af76:	f005 f923 	bl	101c0 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    af7a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    af7c:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    af7e:	f103 0650 	add.w	r6, r3, #80	; 0x50
    af82:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    af86:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    af8a:	2101      	movs	r1, #1
    af8c:	f000 0007 	and.w	r0, r0, #7
    af90:	f004 ff43 	bl	fe1a <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    af94:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    af96:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    af98:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    af9c:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    afa0:	2802      	cmp	r0, #2
    afa2:	d03e      	beq.n	b022 <event_slave+0x186>
		return 40;
    afa4:	2804      	cmp	r0, #4
    afa6:	bf0c      	ite	eq
    afa8:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    afac:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    afae:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    afb0:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    afb2:	f004 ff34 	bl	fe1e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    afb6:	4430      	add	r0, r6
    afb8:	f005 f8c2 	bl	10140 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    afbc:	f894 1020 	ldrb.w	r1, [r4, #32]
    afc0:	3107      	adds	r1, #7
    afc2:	463a      	mov	r2, r7
    afc4:	b2c9      	uxtb	r1, r1
    afc6:	4620      	mov	r0, r4
    afc8:	f7fe fd4a 	bl	9a60 <preempt_calc>
    afcc:	4603      	mov	r3, r0
    afce:	b350      	cbz	r0, b026 <event_slave+0x18a>
		_radio.state = STATE_STOP;
    afd0:	2304      	movs	r3, #4
    afd2:	752b      	strb	r3, [r5, #20]
		radio_disable();
    afd4:	f004 ff34 	bl	fe40 <radio_disable>
	packet_tx_enqueue(2);
    afd8:	2002      	movs	r0, #2
}
    afda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    afde:	f7fe ba23 	b.w	9428 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    afe2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    afe4:	7fa6      	ldrb	r6, [r4, #30]
    afe6:	fb01 6606 	mla	r6, r1, r6, r6
    afea:	7fe1      	ldrb	r1, [r4, #31]
    afec:	2025      	movs	r0, #37	; 0x25
    afee:	440e      	add	r6, r1
    aff0:	fb96 f1f0 	sdiv	r1, r6, r0
    aff4:	fb00 6611 	mls	r6, r0, r1, r6
    aff8:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    affa:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    affc:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    affe:	5c51      	ldrb	r1, [r2, r1]
    b000:	f006 0607 	and.w	r6, r6, #7
    b004:	fa41 f606 	asr.w	r6, r1, r6
    b008:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    b00a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b00e:	d496      	bmi.n	af3e <event_slave+0xa2>
		chan_index = chan_next % chan_count;
    b010:	fbb0 f1f3 	udiv	r1, r0, r3
    b014:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    b018:	b2c9      	uxtb	r1, r1
    b01a:	4610      	mov	r0, r2
    b01c:	f7fd f9e8 	bl	83f0 <chan_sel_remap>
    b020:	e78d      	b.n	af3e <event_slave+0xa2>
		return 24;
    b022:	2318      	movs	r3, #24
    b024:	e7c3      	b.n	afae <event_slave+0x112>
		ticker_status =
    b026:	4a05      	ldr	r2, [pc, #20]	; (b03c <event_slave+0x1a0>)
    b028:	4601      	mov	r1, r0
    b02a:	f7fb fd17 	bl	6a5c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b02e:	f030 0302 	bics.w	r3, r0, #2
    b032:	f47f af3d 	bne.w	aeb0 <event_slave+0x14>
    b036:	e7cf      	b.n	afd8 <event_slave+0x13c>
    b038:	20000660 	.word	0x20000660
    b03c:	00008ff9 	.word	0x00008ff9

0000b040 <prepare_pdu_data_tx>:
	    conn->empty ||
    b040:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    b044:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b04a:	4604      	mov	r4, r0
    b04c:	460e      	mov	r6, r1
	if (/* empty packet */
    b04e:	d109      	bne.n	b064 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    b050:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    b054:	b131      	cbz	r1, b064 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    b056:	f01c 0f08 	tst.w	ip, #8
    b05a:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    b05e:	d022      	beq.n	b0a6 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    b060:	4571      	cmp	r1, lr
    b062:	d020      	beq.n	b0a6 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    b064:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b06c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    b070:	f004 ff38 	bl	fee4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b074:	7803      	ldrb	r3, [r0, #0]
    b076:	2201      	movs	r2, #1
    b078:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    b07c:	2200      	movs	r2, #0
    b07e:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    b080:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b084:	7003      	strb	r3, [r0, #0]
    b086:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    b088:	b152      	cbz	r2, b0a0 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    b08a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    b08e:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    b090:	7803      	ldrb	r3, [r0, #0]
    b092:	f36f 1347 	bfc	r3, #5, #3
    b096:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    b098:	2300      	movs	r3, #0
    b09a:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    b09c:	6030      	str	r0, [r6, #0]
    b09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    b0a0:	f362 1304 	bfi	r3, r2, #4, #1
    b0a4:	e7f3      	b.n	b08e <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    b0a6:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    b0aa:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    b0ae:	1d0d      	adds	r5, r1, #4
    b0b0:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    b0b2:	b913      	cbnz	r3, b0ba <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    b0b4:	7843      	ldrb	r3, [r0, #1]
    b0b6:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    b0ba:	b122      	cbz	r2, b0c6 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b0bc:	5cab      	ldrb	r3, [r5, r2]
    b0be:	2701      	movs	r7, #1
    b0c0:	f367 0301 	bfi	r3, r7, #0, #2
    b0c4:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    b0c6:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    b0ca:	1abf      	subs	r7, r7, r2
    b0cc:	b2ff      	uxtb	r7, r7
    b0ce:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    b0d0:	5cab      	ldrb	r3, [r5, r2]
    b0d2:	f36f 1304 	bfc	r3, #4, #1
    b0d6:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    b0d8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    b0dc:	f003 0307 	and.w	r3, r3, #7
    b0e0:	2b02      	cmp	r3, #2
    b0e2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    b0e4:	bf15      	itete	ne
    b0e6:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    b0e8:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    b0ea:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    b0ec:	3b0b      	subeq	r3, #11
    b0ee:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    b0f0:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    b0f4:	bf18      	it	ne
    b0f6:	3b04      	subne	r3, #4
    b0f8:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    b0fc:	bf18      	it	ne
    b0fe:	b29b      	uxthne	r3, r3
    b100:	4563      	cmp	r3, ip
    b102:	bf28      	it	cs
    b104:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    b106:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    b108:	bf81      	itttt	hi
    b10a:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    b10c:	5cab      	ldrbhi	r3, [r5, r2]
    b10e:	f043 0310 	orrhi.w	r3, r3, #16
    b112:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    b114:	680b      	ldr	r3, [r1, #0]
    b116:	b11b      	cbz	r3, b120 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    b118:	5cab      	ldrb	r3, [r5, r2]
    b11a:	f043 0310 	orr.w	r3, r3, #16
    b11e:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    b120:	f1be 0f00 	cmp.w	lr, #0
    b124:	d1b4      	bne.n	b090 <prepare_pdu_data_tx+0x50>
    b126:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b12a:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    b12c:	bf1c      	itt	ne
    b12e:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    b132:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    b136:	e7ab      	b.n	b090 <prepare_pdu_data_tx+0x50>

0000b138 <mayfly_xtal_stop_calc>:
{
    b138:	b5f0      	push	{r4, r5, r6, r7, lr}
    b13a:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b13c:	2302      	movs	r3, #2
    b13e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b140:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b142:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b144:	4e74      	ldr	r6, [pc, #464]	; (b318 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    b146:	4d75      	ldr	r5, [pc, #468]	; (b31c <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
    b148:	930a      	str	r3, [sp, #40]	; 0x28
{
    b14a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b14c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b14e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b152:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b154:	ab09      	add	r3, sp, #36	; 0x24
    b156:	9302      	str	r3, [sp, #8]
    b158:	ab0c      	add	r3, sp, #48	; 0x30
    b15a:	9300      	str	r3, [sp, #0]
    b15c:	9601      	str	r6, [sp, #4]
    b15e:	ab0d      	add	r3, sp, #52	; 0x34
    b160:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b164:	2101      	movs	r1, #1
    b166:	2000      	movs	r0, #0
    b168:	f7fb fc36 	bl	69d8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b16c:	2802      	cmp	r0, #2
    b16e:	d00b      	beq.n	b188 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b170:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b172:	b16b      	cbz	r3, b190 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b174:	4040      	eors	r0, r0
    b176:	f380 8811 	msr	BASEPRI, r0
    b17a:	f04f 0004 	mov.w	r0, #4
    b17e:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b180:	2101      	movs	r1, #1
    b182:	2000      	movs	r0, #0
    b184:	f7fb fca6 	bl	6ad4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b188:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b18a:	2b02      	cmp	r3, #2
    b18c:	d0f8      	beq.n	b180 <mayfly_xtal_stop_calc+0x48>
    b18e:	e7ef      	b.n	b170 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b190:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b194:	2bff      	cmp	r3, #255	; 0xff
    b196:	d004      	beq.n	b1a2 <mayfly_xtal_stop_calc+0x6a>
    b198:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b19c:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b19e:	4293      	cmp	r3, r2
    b1a0:	dad8      	bge.n	b154 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b1a2:	1f5a      	subs	r2, r3, #5
    b1a4:	b2d2      	uxtb	r2, r2
    b1a6:	2af9      	cmp	r2, #249	; 0xf9
    b1a8:	4f5d      	ldr	r7, [pc, #372]	; (b320 <mayfly_xtal_stop_calc+0x1e8>)
    b1aa:	d805      	bhi.n	b1b8 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
    b1ac:	4a5b      	ldr	r2, [pc, #364]	; (b31c <mayfly_xtal_stop_calc+0x1e4>)
    b1ae:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b1b2:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b1b4:	4293      	cmp	r3, r2
    b1b6:	db06      	blt.n	b1c6 <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
    b1b8:	783b      	ldrb	r3, [r7, #0]
    b1ba:	b113      	cbz	r3, b1c2 <mayfly_xtal_stop_calc+0x8a>
    b1bc:	2001      	movs	r0, #1
    b1be:	f7fd ff45 	bl	904c <mayfly_xtal_retain.part.13>
}
    b1c2:	b00f      	add	sp, #60	; 0x3c
    b1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b1c6:	a90a      	add	r1, sp, #40	; 0x28
    b1c8:	b2e0      	uxtb	r0, r4
    b1ca:	f7fd ff21 	bl	9010 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d0d0      	beq.n	b174 <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b1d2:	6803      	ldr	r3, [r0, #0]
    b1d4:	6844      	ldr	r4, [r0, #4]
    b1d6:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b1d8:	bfb8      	it	lt
    b1da:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b1dc:	429c      	cmp	r4, r3
    b1de:	bf38      	it	cc
    b1e0:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b1e2:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b1e4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b1e8:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b1ea:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b1ec:	f7fd ff10 	bl	9010 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b1f0:	4605      	mov	r5, r0
    b1f2:	2800      	cmp	r0, #0
    b1f4:	d0be      	beq.n	b174 <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next =
    b1f6:	6886      	ldr	r6, [r0, #8]
    b1f8:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b1fa:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b1fc:	429e      	cmp	r6, r3
    b1fe:	bf38      	it	cc
    b200:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b202:	2a00      	cmp	r2, #0
    b204:	da05      	bge.n	b212 <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
    b206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b208:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b20c:	4433      	add	r3, r6
    b20e:	1a9b      	subs	r3, r3, r2
    b210:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b214:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b218:	4293      	cmp	r3, r2
    b21a:	d20b      	bcs.n	b234 <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
    b21c:	783b      	ldrb	r3, [r7, #0]
    b21e:	b113      	cbz	r3, b226 <mayfly_xtal_stop_calc+0xee>
    b220:	2001      	movs	r0, #1
    b222:	f7fd ff13 	bl	904c <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b226:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b22a:	2101      	movs	r1, #1
    b22c:	4628      	mov	r0, r5
    b22e:	f7fd ff2f 	bl	9090 <prepare_normal_set>
    b232:	e7c6      	b.n	b1c2 <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
    b234:	783a      	ldrb	r2, [r7, #0]
    b236:	b93a      	cbnz	r2, b248 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
    b238:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    b23a:	4b3a      	ldr	r3, [pc, #232]	; (b324 <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    b23c:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    b23e:	4611      	mov	r1, r2
    b240:	f7fa fd46 	bl	5cd0 <mayfly_enqueue>
			LL_ASSERT(!retval);
    b244:	2800      	cmp	r0, #0
    b246:	d195      	bne.n	b174 <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b248:	682b      	ldr	r3, [r5, #0]
    b24a:	2b00      	cmp	r3, #0
    b24c:	db15      	blt.n	b27a <mayfly_xtal_stop_calc+0x142>
    b24e:	429e      	cmp	r6, r3
    b250:	d213      	bcs.n	b27a <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b252:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b254:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b256:	b29b      	uxth	r3, r3
			ticker_status =
    b258:	4933      	ldr	r1, [pc, #204]	; (b328 <mayfly_xtal_stop_calc+0x1f0>)
    b25a:	9105      	str	r1, [sp, #20]
    b25c:	9302      	str	r3, [sp, #8]
    b25e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b262:	9506      	str	r5, [sp, #24]
    b264:	9004      	str	r0, [sp, #16]
    b266:	9003      	str	r0, [sp, #12]
    b268:	9001      	str	r0, [sp, #4]
    b26a:	9000      	str	r0, [sp, #0]
    b26c:	2101      	movs	r1, #1
    b26e:	f7fb fb29 	bl	68c4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b272:	f030 0302 	bics.w	r3, r0, #2
    b276:	f47f af7d 	bne.w	b174 <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
    b27a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b27c:	2e00      	cmp	r6, #0
    b27e:	d0a0      	beq.n	b1c2 <mayfly_xtal_stop_calc+0x8a>
    b280:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b282:	2d00      	cmp	r5, #0
    b284:	d09d      	beq.n	b1c2 <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b286:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b288:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b28a:	429a      	cmp	r2, r3
    b28c:	d199      	bne.n	b1c2 <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b28e:	4827      	ldr	r0, [pc, #156]	; (b32c <mayfly_xtal_stop_calc+0x1f4>)
    b290:	b292      	uxth	r2, r2
    b292:	fba2 0100 	umull	r0, r1, r2, r0
    b296:	f240 1323 	movw	r3, #291	; 0x123
    b29a:	fb03 1102 	mla	r1, r3, r2, r1
    b29e:	a31c      	add	r3, pc, #112	; (adr r3, b310 <mayfly_xtal_stop_calc+0x1d8>)
    b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2a4:	f7f4 ffb6 	bl	214 <__aeabi_uldivmod>
    b2a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b2aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b2ae:	2200      	movs	r2, #0
    b2b0:	4298      	cmp	r0, r3
    b2b2:	d318      	bcc.n	b2e6 <mayfly_xtal_stop_calc+0x1ae>
    b2b4:	b102      	cbz	r2, b2b8 <mayfly_xtal_stop_calc+0x180>
    b2b6:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b2b8:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b2bc:	2a00      	cmp	r2, #0
    b2be:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b2c2:	da13      	bge.n	b2ec <mayfly_xtal_stop_calc+0x1b4>
    b2c4:	2a00      	cmp	r2, #0
    b2c6:	f6ff af7c 	blt.w	b1c2 <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
    b2ca:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b2cc:	429c      	cmp	r4, r3
    b2ce:	f67f af78 	bls.w	b1c2 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
    b2d2:	4630      	mov	r0, r6
    b2d4:	f7fd f8d0 	bl	8478 <conn_update_req>
				if (status == 2) {
    b2d8:	2802      	cmp	r0, #2
    b2da:	f47f af72 	bne.w	b1c2 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
    b2de:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b2e0:	f7fd f8ca 	bl	8478 <conn_update_req>
    b2e4:	e76d      	b.n	b1c2 <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
    b2e6:	1a1b      	subs	r3, r3, r0
    b2e8:	2201      	movs	r2, #1
    b2ea:	e7e1      	b.n	b2b0 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
    b2ec:	2a00      	cmp	r2, #0
    b2ee:	f6bf af68 	bge.w	b1c2 <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
    b2f2:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b2f4:	429c      	cmp	r4, r3
    b2f6:	f67f af64 	bls.w	b1c2 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
    b2fa:	4628      	mov	r0, r5
    b2fc:	f7fd f8bc 	bl	8478 <conn_update_req>
				if (status == 2) {
    b300:	2802      	cmp	r0, #2
    b302:	f47f af5e 	bne.w	b1c2 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
    b306:	980a      	ldr	r0, [sp, #40]	; 0x28
    b308:	e7ea      	b.n	b2e0 <mayfly_xtal_stop_calc+0x1a8>
    b30a:	bf00      	nop
    b30c:	f3af 8000 	nop.w
    b310:	1afd498d 	.word	0x1afd498d
    b314:	00000007 	.word	0x00000007
    b318:	000083d5 	.word	0x000083d5
    b31c:	20000660 	.word	0x20000660
    b320:	20000860 	.word	0x20000860
    b324:	200037e0 	.word	0x200037e0
    b328:	000083d9 	.word	0x000083d9
    b32c:	09ce5400 	.word	0x09ce5400

0000b330 <event_master>:
{
    b330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b332:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    b334:	4b4a      	ldr	r3, [pc, #296]	; (b460 <event_master+0x130>)
    b336:	7cd9      	ldrb	r1, [r3, #19]
{
    b338:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b33a:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    b33e:	461d      	mov	r5, r3
    b340:	b129      	cbz	r1, b34e <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b342:	4040      	eors	r0, r0
    b344:	f380 8811 	msr	BASEPRI, r0
    b348:	f04f 0004 	mov.w	r0, #4
    b34c:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    b34e:	7c1b      	ldrb	r3, [r3, #16]
    b350:	8c21      	ldrh	r1, [r4, #32]
    b352:	b2db      	uxtb	r3, r3
    b354:	3107      	adds	r1, #7
    b356:	428b      	cmp	r3, r1
    b358:	d1f3      	bne.n	b342 <event_master+0x12>
	_radio.packet_counter = 0;
    b35a:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    b35e:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    b362:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    b364:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    b366:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    b368:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    b36a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    b36c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    b36e:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    b372:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    b374:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    b376:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    b378:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    b37a:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    b37c:	f7fe f854 	bl	9428 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    b380:	a901      	add	r1, sp, #4
    b382:	4620      	mov	r0, r4
    b384:	f7ff fe5c 	bl	b040 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    b388:	9901      	ldr	r1, [sp, #4]
    b38a:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    b38e:	780b      	ldrb	r3, [r1, #0]
    b390:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    b394:	f3c2 0240 	ubfx	r2, r2, #1, #1
    b398:	f362 0382 	bfi	r3, r2, #2, #1
    b39c:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    b39e:	4620      	mov	r0, r4
    b3a0:	f7ff fd5e 	bl	ae60 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    b3a4:	2096      	movs	r0, #150	; 0x96
    b3a6:	f004 fe41 	bl	1002c <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    b3aa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    b3ae:	f000 0007 	and.w	r0, r0, #7
    b3b2:	f004 fd9f 	bl	fef4 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    b3b6:	9901      	ldr	r1, [sp, #4]
    b3b8:	4620      	mov	r0, r4
    b3ba:	f7fd fb0b 	bl	89d4 <tx_packet_set>
	if (conn->data_chan_sel) {
    b3be:	7f63      	ldrb	r3, [r4, #29]
    b3c0:	f013 0f40 	tst.w	r3, #64	; 0x40
    b3c4:	f104 0217 	add.w	r2, r4, #23
    b3c8:	d021      	beq.n	b40e <event_master+0xde>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    b3ca:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    b3cc:	8be1      	ldrh	r1, [r4, #30]
    b3ce:	3801      	subs	r0, #1
    b3d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b3d4:	b280      	uxth	r0, r0
    b3d6:	f7fe faff 	bl	99d8 <chan_sel_2>
	chan_set(data_chan_use);
    b3da:	f7fd ff7b 	bl	92d4 <chan_set>
		remainder_us = radio_tmr_start(1,
    b3de:	68ea      	ldr	r2, [r5, #12]
    b3e0:	f107 0109 	add.w	r1, r7, #9
    b3e4:	2001      	movs	r0, #1
    b3e6:	f004 fe2d 	bl	10044 <radio_tmr_start>
		radio_tmr_end_capture();
    b3ea:	f004 fefb 	bl	101e4 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    b3ee:	f894 1020 	ldrb.w	r1, [r4, #32]
    b3f2:	3107      	adds	r1, #7
    b3f4:	463a      	mov	r2, r7
    b3f6:	b2c9      	uxtb	r1, r1
    b3f8:	4620      	mov	r0, r4
    b3fa:	f7fe fb31 	bl	9a60 <preempt_calc>
	if (0 !=
    b3fe:	4603      	mov	r3, r0
    b400:	b328      	cbz	r0, b44e <event_master+0x11e>
		_radio.state = STATE_STOP;
    b402:	2304      	movs	r3, #4
    b404:	752b      	strb	r3, [r5, #20]
		radio_disable();
    b406:	f004 fd1b 	bl	fe40 <radio_disable>
}
    b40a:	b003      	add	sp, #12
    b40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    b40e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    b410:	7fa6      	ldrb	r6, [r4, #30]
    b412:	fb01 6606 	mla	r6, r1, r6, r6
    b416:	7fe1      	ldrb	r1, [r4, #31]
    b418:	2025      	movs	r0, #37	; 0x25
    b41a:	440e      	add	r6, r1
    b41c:	fb96 f1f0 	sdiv	r1, r6, r0
    b420:	fb00 6611 	mls	r6, r0, r1, r6
    b424:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b426:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    b428:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b42a:	5c51      	ldrb	r1, [r2, r1]
    b42c:	f006 0607 	and.w	r6, r6, #7
    b430:	fa41 f606 	asr.w	r6, r1, r6
    b434:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    b436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b43a:	d4ce      	bmi.n	b3da <event_master+0xaa>
		chan_index = chan_next % chan_count;
    b43c:	fbb0 f1f3 	udiv	r1, r0, r3
    b440:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    b444:	b2c9      	uxtb	r1, r1
    b446:	4610      	mov	r0, r2
    b448:	f7fc ffd2 	bl	83f0 <chan_sel_remap>
    b44c:	e7c5      	b.n	b3da <event_master+0xaa>
		ticker_status =
    b44e:	4a05      	ldr	r2, [pc, #20]	; (b464 <event_master+0x134>)
    b450:	4601      	mov	r1, r0
    b452:	f7fb fb03 	bl	6a5c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b456:	f030 0302 	bics.w	r3, r0, #2
    b45a:	f47f af72 	bne.w	b342 <event_master+0x12>
    b45e:	e7d4      	b.n	b40a <event_master+0xda>
    b460:	20000660 	.word	0x20000660
    b464:	00008ff9 	.word	0x00008ff9

0000b468 <isr_rx_conn_pkt_ctrl>:
{
    b468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    b46c:	7ac7      	ldrb	r7, [r0, #11]
{
    b46e:	4604      	mov	r4, r0
    b470:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    b472:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    b476:	2f19      	cmp	r7, #25
    b478:	f201 8071 	bhi.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
    b47c:	e8df f017 	tbh	[pc, r7, lsl #1]
    b480:	0080001a 	.word	0x0080001a
    b484:	00c600b6 	.word	0x00c600b6
    b488:	011c00f4 	.word	0x011c00f4
    b48c:	05800141 	.word	0x05800141
    b490:	019e017e 	.word	0x019e017e
    b494:	01fb01d0 	.word	0x01fb01d0
    b498:	0295022c 	.word	0x0295022c
    b49c:	02ae0193 	.word	0x02ae0193
    b4a0:	047d03f9 	.word	0x047d03f9
    b4a4:	05720558 	.word	0x05720558
    b4a8:	05f805f8 	.word	0x05f805f8
    b4ac:	078006c1 	.word	0x078006c1
    b4b0:	083c07b7 	.word	0x083c07b7
		if (!_radio.conn_curr->role ||
    b4b4:	4ed9      	ldr	r6, [pc, #868]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b4b6:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    b4ba:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b4be:	2b00      	cmp	r3, #0
    b4c0:	f281 804d 	bge.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    b4c4:	7a41      	ldrb	r1, [r0, #9]
    b4c6:	2000      	movs	r0, #0
    b4c8:	f7fc ff66 	bl	8398 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b4cc:	2800      	cmp	r0, #0
    b4ce:	f001 8046 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    b4d2:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    b4d6:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    b4d8:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    b4da:	041b      	lsls	r3, r3, #16
    b4dc:	f101 8055 	bmi.w	c58a <isr_rx_conn_pkt_ctrl+0x1122>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b4e0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    b4e4:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    b4e8:	429a      	cmp	r2, r3
    b4ea:	d005      	beq.n	b4f8 <isr_rx_conn_pkt_ctrl+0x90>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b4ec:	4040      	eors	r0, r0
    b4ee:	f380 8811 	msr	BASEPRI, r0
    b4f2:	f04f 0004 	mov.w	r0, #4
    b4f6:	df02      	svc	2
	if (_radio.conn_upd == 0) {
    b4f8:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    b4fc:	b90a      	cbnz	r2, b502 <isr_rx_conn_pkt_ctrl+0x9a>
		_radio.conn_upd = conn;
    b4fe:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    b502:	7b22      	ldrb	r2, [r4, #12]
    b504:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    b508:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    b50c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b510:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    b512:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    b516:	7c20      	ldrb	r0, [r4, #16]
    b518:	7be2      	ldrb	r2, [r4, #15]
    b51a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    b51e:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    b522:	7ca0      	ldrb	r0, [r4, #18]
    b524:	7c62      	ldrb	r2, [r4, #17]
    b526:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    b52a:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    b52e:	7ce2      	ldrb	r2, [r4, #19]
    b530:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    b532:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    b536:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    b53a:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    b53e:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    b542:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    b546:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    b54a:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    b54c:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    b550:	2201      	movs	r2, #1
    b552:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    b556:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    b55a:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    b55e:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    b562:	4293      	cmp	r3, r2
    b564:	d007      	beq.n	b576 <isr_rx_conn_pkt_ctrl+0x10e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    b566:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    b56a:	f003 0307 	and.w	r3, r3, #7
    b56e:	2b04      	cmp	r3, #4
    b570:	d101      	bne.n	b576 <isr_rx_conn_pkt_ctrl+0x10e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b572:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    b576:	2000      	movs	r0, #0
    b578:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    b57c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    b580:	4ba6      	ldr	r3, [pc, #664]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b582:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b586:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b58a:	2b00      	cmp	r3, #0
    b58c:	f280 87e7 	bge.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    b590:	7a41      	ldrb	r1, [r0, #9]
    b592:	2001      	movs	r0, #1
    b594:	f7fc ff00 	bl	8398 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b598:	2800      	cmp	r0, #0
    b59a:	f000 87e0 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    b59e:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    b5a2:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    b5a4:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    b5a6:	041f      	lsls	r7, r3, #16
    b5a8:	f100 87ef 	bmi.w	c58a <isr_rx_conn_pkt_ctrl+0x1122>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b5ac:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    b5b0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    b5b4:	429a      	cmp	r2, r3
    b5b6:	d199      	bne.n	b4ec <isr_rx_conn_pkt_ctrl+0x84>
	memcpy(&conn->llcp.chan_map.chm[0],
    b5b8:	2205      	movs	r2, #5
    b5ba:	f104 010c 	add.w	r1, r4, #12
    b5be:	f105 0079 	add.w	r0, r5, #121	; 0x79
    b5c2:	f7f6 fb1b 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    b5c6:	7c63      	ldrb	r3, [r4, #17]
    b5c8:	7ca2      	ldrb	r2, [r4, #18]
    b5ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    b5ce:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    b5d2:	2302      	movs	r3, #2
    b5d4:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    b5d8:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    b5dc:	2000      	movs	r0, #0
	conn->llcp_ack--;
    b5de:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    b5e0:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    b5e4:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    b5e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    b5ec:	7a41      	ldrb	r1, [r0, #9]
    b5ee:	2002      	movs	r0, #2
    b5f0:	f7fc fed2 	bl	8398 <pdu_len_cmp>
    b5f4:	2800      	cmp	r0, #0
    b5f6:	f000 87b2 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->llcp_terminate.reason_peer =
    b5fa:	4b88      	ldr	r3, [pc, #544]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b5fc:	7b22      	ldrb	r2, [r4, #12]
    b5fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    b602:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    b606:	2000      	movs	r0, #0
}
    b608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    b60c:	4e83      	ldr	r6, [pc, #524]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b60e:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    b612:	f998 301d 	ldrsb.w	r3, [r8, #29]
    b616:	2b00      	cmp	r3, #0
    b618:	f280 87a1 	bge.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    b61c:	7a41      	ldrb	r1, [r0, #9]
    b61e:	2003      	movs	r0, #3
    b620:	f7fc feba 	bl	8398 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b624:	2800      	cmp	r0, #0
    b626:	f000 879a 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    b62a:	2208      	movs	r2, #8
    b62c:	f104 0116 	add.w	r1, r4, #22
    b630:	f108 0094 	add.w	r0, r8, #148	; 0x94
    b634:	f7f6 fae2 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    b638:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    b63c:	2204      	movs	r2, #4
    b63e:	f104 011e 	add.w	r1, r4, #30
    b642:	f500 7089 	add.w	r0, r0, #274	; 0x112
    b646:	f7f6 fad9 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    b64a:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    b64e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    b652:	f042 0204 	orr.w	r2, r2, #4
    b656:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    b65a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    b65e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    b662:	2301      	movs	r3, #1
    b664:	702b      	strb	r3, [r5, #0]
    b666:	e7ce      	b.n	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
    b668:	4d6c      	ldr	r5, [pc, #432]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b66a:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    b66e:	f996 301d 	ldrsb.w	r3, [r6, #29]
    b672:	2b00      	cmp	r3, #0
    b674:	f2c0 8773 	blt.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    b678:	7a41      	ldrb	r1, [r0, #9]
    b67a:	2004      	movs	r0, #4
    b67c:	f7fc fe8c 	bl	8398 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    b680:	2800      	cmp	r0, #0
    b682:	f000 876c 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    b686:	2208      	movs	r2, #8
    b688:	f104 010c 	add.w	r1, r4, #12
    b68c:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    b690:	f7f6 fab4 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    b694:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    b698:	2204      	movs	r2, #4
    b69a:	f104 0114 	add.w	r1, r4, #20
    b69e:	f500 708b 	add.w	r0, r0, #278	; 0x116
    b6a2:	f7f6 faab 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    b6a6:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    b6aa:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    b6ae:	f043 0304 	orr.w	r3, r3, #4
    b6b2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    b6b6:	e7a6      	b.n	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    b6b8:	4b58      	ldr	r3, [pc, #352]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b6ba:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b6be:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    b6c2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    b6c6:	42b3      	cmp	r3, r6
    b6c8:	d004      	beq.n	b6d4 <isr_rx_conn_pkt_ctrl+0x26c>
    b6ca:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    b6ce:	2b03      	cmp	r3, #3
    b6d0:	f47f af0c 	bne.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
		if (_radio.conn_curr->role ||
    b6d4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b6d8:	2b00      	cmp	r3, #0
    b6da:	f2c0 8740 	blt.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    b6de:	7a61      	ldrb	r1, [r4, #9]
    b6e0:	2005      	movs	r0, #5
    b6e2:	f7fc fe59 	bl	8398 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    b6e6:	2800      	cmp	r0, #0
    b6e8:	f000 8739 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    b6ec:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_ack--;
    b6ee:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b6f0:	2303      	movs	r3, #3
		_radio.conn_curr->llcp.encryption.initiate = 0;
    b6f2:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_ack--;
    b6f6:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b6fa:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		break;
    b6fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    b702:	7a41      	ldrb	r1, [r0, #9]
    b704:	2006      	movs	r0, #6
    b706:	f7fc fe47 	bl	8398 <pdu_len_cmp>
    b70a:	2800      	cmp	r0, #0
    b70c:	f000 8727 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.role == ROLE_SLAVE) {
    b710:	4b42      	ldr	r3, [pc, #264]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b712:	7cda      	ldrb	r2, [r3, #19]
    b714:	2a03      	cmp	r2, #3
    b716:	4619      	mov	r1, r3
    b718:	d125      	bne.n	b766 <isr_rx_conn_pkt_ctrl+0x2fe>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    b71a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    b71e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    b722:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    b726:	4290      	cmp	r0, r2
    b728:	d004      	beq.n	b734 <isr_rx_conn_pkt_ctrl+0x2cc>
    b72a:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    b72e:	2803      	cmp	r0, #3
    b730:	f47f aedc 	bne.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    b734:	2000      	movs	r0, #0
    b736:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    b73a:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b73c:	2003      	movs	r0, #3
    b73e:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    b742:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    b746:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    b74a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    b74e:	065e      	lsls	r6, r3, #25
    b750:	d505      	bpl.n	b75e <isr_rx_conn_pkt_ctrl+0x2f6>
			_radio.conn_curr->refresh = 0;
    b752:	f36f 1386 	bfc	r3, #6, #1
    b756:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    b75a:	2309      	movs	r3, #9
    b75c:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    b75e:	2301      	movs	r3, #1
    b760:	702b      	strb	r3, [r5, #0]
				break;
    b762:	f000 bc81 	b.w	c068 <isr_rx_conn_pkt_ctrl+0xc00>
			_radio.conn_curr->pause_rx = 0;
    b766:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    b76a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    b76e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    b772:	f36f 03c3 	bfc	r3, #3, #1
    b776:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    b77a:	e7e4      	b.n	b746 <isr_rx_conn_pkt_ctrl+0x2de>
		if (!_radio.conn_curr->role ||
    b77c:	4b27      	ldr	r3, [pc, #156]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b77e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b782:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b786:	2b00      	cmp	r3, #0
    b788:	f280 86e9 	bge.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    b78c:	7a41      	ldrb	r1, [r0, #9]
    b78e:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    b790:	f7fc fe02 	bl	8398 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    b794:	2800      	cmp	r0, #0
    b796:	f000 86e2 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    b79a:	4631      	mov	r1, r6
    b79c:	4628      	mov	r0, r5
}
    b79e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    b7a2:	f7fe ba7f 	b.w	9ca4 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    b7a6:	4b1d      	ldr	r3, [pc, #116]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
    b7a8:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    b7ac:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b7b0:	2b00      	cmp	r3, #0
    b7b2:	f2c0 86d4 	blt.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    b7b6:	7a41      	ldrb	r1, [r0, #9]
    b7b8:	200e      	movs	r0, #14
    b7ba:	e7e9      	b.n	b790 <isr_rx_conn_pkt_ctrl+0x328>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    b7bc:	7a41      	ldrb	r1, [r0, #9]
    b7be:	2009      	movs	r0, #9
    b7c0:	f7fc fdea 	bl	8398 <pdu_len_cmp>
    b7c4:	2800      	cmp	r0, #0
    b7c6:	f000 86ca 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b7ca:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    b7cc:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    b7ce:	4813      	ldr	r0, [pc, #76]	; (b81c <isr_rx_conn_pkt_ctrl+0x3b4>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b7d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b7d4:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    b7d8:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    b7dc:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    b7e0:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b7e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    b7e8:	7ba1      	ldrb	r1, [r4, #14]
    b7ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    b7ee:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    b7f2:	f3c1 0110 	ubfx	r1, r1, #0, #17
    b7f6:	400b      	ands	r3, r1
    b7f8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    b7fc:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    b800:	f043 0320 	orr.w	r3, r3, #32
    b804:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    b808:	2301      	movs	r3, #1
    b80a:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    b80c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    b810:	2000      	movs	r0, #0
    b812:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    b816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b81a:	bf00      	nop
    b81c:	20000660 	.word	0x20000660
		if (!_radio.conn_curr->role ||
    b820:	4ed1      	ldr	r6, [pc, #836]	; (bb68 <isr_rx_conn_pkt_ctrl+0x700>)
    b822:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    b826:	f995 301d 	ldrsb.w	r3, [r5, #29]
    b82a:	2b00      	cmp	r3, #0
    b82c:	f280 8697 	bge.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    b830:	7a41      	ldrb	r1, [r0, #9]
    b832:	200a      	movs	r0, #10
    b834:	f7fc fdb0 	bl	8398 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    b838:	2800      	cmp	r0, #0
    b83a:	f000 8690 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b83e:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    b842:	f7fa f97a 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    b846:	4601      	mov	r1, r0
    b848:	b910      	cbnz	r0, b850 <isr_rx_conn_pkt_ctrl+0x3e8>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    b84a:	2001      	movs	r0, #1
    b84c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->refresh = 1;
    b850:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    b854:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    b858:	f36f 1304 	bfc	r3, #4, #1
    b85c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b860:	7903      	ldrb	r3, [r0, #4]
    b862:	f043 0303 	orr.w	r3, r3, #3
    b866:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b868:	2301      	movs	r3, #1
    b86a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    b86c:	230b      	movs	r3, #11
    b86e:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    b870:	4628      	mov	r0, r5
    b872:	f000 bc9d 	b.w	c1b0 <isr_rx_conn_pkt_ctrl+0xd48>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    b876:	7a41      	ldrb	r1, [r0, #9]
    b878:	200b      	movs	r0, #11
    b87a:	f7fc fd8d 	bl	8398 <pdu_len_cmp>
    b87e:	2800      	cmp	r0, #0
    b880:	f000 866d 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    b884:	48b8      	ldr	r0, [pc, #736]	; (bb68 <isr_rx_conn_pkt_ctrl+0x700>)
    b886:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    b88a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    b88e:	2b00      	cmp	r3, #0
    b890:	db1b      	blt.n	b8ca <isr_rx_conn_pkt_ctrl+0x462>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b892:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    b896:	f7fa f950 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    b89a:	4601      	mov	r1, r0
    b89c:	2800      	cmp	r0, #0
    b89e:	d0d4      	beq.n	b84a <isr_rx_conn_pkt_ctrl+0x3e2>
		conn->enc_tx = 0;
    b8a0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    b8a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    b8a8:	f043 0304 	orr.w	r3, r3, #4
    b8ac:	f36f 1304 	bfc	r3, #4, #1
    b8b0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b8b4:	7903      	ldrb	r3, [r0, #4]
    b8b6:	f043 0303 	orr.w	r3, r3, #3
    b8ba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b8bc:	2301      	movs	r3, #1
    b8be:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    b8c0:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    b8c2:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    b8c4:	4620      	mov	r0, r4
    b8c6:	f000 bc73 	b.w	c1b0 <isr_rx_conn_pkt_ctrl+0xd48>
		conn->enc_tx = 0;
    b8ca:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b8ce:	f36f 1345 	bfc	r3, #5, #1
    b8d2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    b8d6:	e696      	b.n	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    b8d8:	7a41      	ldrb	r1, [r0, #9]
    b8da:	200c      	movs	r0, #12
    b8dc:	f7fc fd5c 	bl	8398 <pdu_len_cmp>
    b8e0:	2800      	cmp	r0, #0
    b8e2:	f000 863c 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    b8e6:	48a0      	ldr	r0, [pc, #640]	; (bb68 <isr_rx_conn_pkt_ctrl+0x700>)
    b8e8:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    b8ec:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    b8f0:	f013 0701 	ands.w	r7, r3, #1
    b8f4:	d150      	bne.n	b998 <isr_rx_conn_pkt_ctrl+0x530>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8f6:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    b8fa:	f7fa f91e 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    b8fe:	4601      	mov	r1, r0
    b900:	2800      	cmp	r0, #0
    b902:	d0a2      	beq.n	b84a <isr_rx_conn_pkt_ctrl+0x3e2>
		conn->llcp_version.tx = 1;
    b904:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    b908:	f043 0301 	orr.w	r3, r3, #1
    b90c:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b910:	7903      	ldrb	r3, [r0, #4]
    b912:	f043 0303 	orr.w	r3, r3, #3
    b916:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    b918:	2306      	movs	r3, #6
    b91a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    b91c:	230c      	movs	r3, #12
    b91e:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    b920:	2309      	movs	r3, #9
    b922:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    b924:	f06f 030e 	mvn.w	r3, #14
    b928:	7243      	strb	r3, [r0, #9]
    b92a:	2305      	movs	r3, #5
    b92c:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    b92e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b932:	72c3      	strb	r3, [r0, #11]
    b934:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    b936:	4630      	mov	r0, r6
    b938:	f7fe f99a 	bl	9c70 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    b93c:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    b940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b944:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    b948:	f004 facc 	bl	fee4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b94c:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    b94e:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b950:	2201      	movs	r2, #1
    b952:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    b956:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b95a:	7003      	strb	r3, [r0, #0]
    b95c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    b95e:	b1c2      	cbz	r2, b992 <isr_rx_conn_pkt_ctrl+0x52a>
		pdu_data_tx->md = 1;
    b960:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    b964:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    b966:	7b23      	ldrb	r3, [r4, #12]
    b968:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    b96c:	7ba2      	ldrb	r2, [r4, #14]
    b96e:	7b63      	ldrb	r3, [r4, #13]
    b970:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b974:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    b978:	7be3      	ldrb	r3, [r4, #15]
    b97a:	7c22      	ldrb	r2, [r4, #16]
    b97c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b980:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    b984:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    b988:	f043 0302 	orr.w	r3, r3, #2
    b98c:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    b990:	e639      	b.n	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		pdu_data_tx->md = 0;
    b992:	f362 1304 	bfi	r3, r2, #4, #1
    b996:	e7e5      	b.n	b964 <isr_rx_conn_pkt_ctrl+0x4fc>
	} else if (!conn->llcp_version.rx) {
    b998:	f013 0302 	ands.w	r3, r3, #2
    b99c:	f47f ae33 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		conn->procedure_expire = 0;
    b9a0:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    b9a4:	2301      	movs	r3, #1
    b9a6:	702b      	strb	r3, [r5, #0]
    b9a8:	e7dd      	b.n	b966 <isr_rx_conn_pkt_ctrl+0x4fe>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    b9aa:	7a41      	ldrb	r1, [r0, #9]
    b9ac:	200d      	movs	r0, #13
    b9ae:	f7fc fcf3 	bl	8398 <pdu_len_cmp>
    b9b2:	2800      	cmp	r0, #0
    b9b4:	f000 85d3 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->pause_rx = 0;
    b9b8:	4b6b      	ldr	r3, [pc, #428]	; (bb68 <isr_rx_conn_pkt_ctrl+0x700>)
    b9ba:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    b9be:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    b9c2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    b9c6:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    b9ca:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    b9cc:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    b9d0:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    b9d4:	2301      	movs	r3, #1
    b9d6:	702b      	strb	r3, [r5, #0]
    b9d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    b9dc:	7a41      	ldrb	r1, [r0, #9]
    b9de:	200f      	movs	r0, #15
    b9e0:	f7fc fcda 	bl	8398 <pdu_len_cmp>
    b9e4:	2800      	cmp	r0, #0
    b9e6:	f000 85ba 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    b9ea:	4b5f      	ldr	r3, [pc, #380]	; (bb68 <isr_rx_conn_pkt_ctrl+0x700>)
    b9ec:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    b9f0:	461a      	mov	r2, r3
    b9f2:	b149      	cbz	r1, ba08 <isr_rx_conn_pkt_ctrl+0x5a0>
    b9f4:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    b9f8:	4281      	cmp	r1, r0
    b9fa:	d005      	beq.n	ba08 <isr_rx_conn_pkt_ctrl+0x5a0>
			nack = reject_ext_ind_send(_radio.conn_curr,
    b9fc:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    b9fe:	210f      	movs	r1, #15
}
    ba00:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    ba04:	f7fe b9b8 	b.w	9d78 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    ba08:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    ba0c:	f990 301d 	ldrsb.w	r3, [r0, #29]
    ba10:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    ba14:	2b00      	cmp	r3, #0
    ba16:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    ba1a:	f2c0 80a7 	blt.w	bb6c <isr_rx_conn_pkt_ctrl+0x704>
			if ((conn->llcp_conn_param.req !=
    ba1e:	4299      	cmp	r1, r3
    ba20:	d009      	beq.n	ba36 <isr_rx_conn_pkt_ctrl+0x5ce>
			    ((conn->llcp_conn_param.state ==
    ba22:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    ba26:	f013 0307 	ands.w	r3, r3, #7
    ba2a:	d002      	beq.n	ba32 <isr_rx_conn_pkt_ctrl+0x5ca>
			      LLCP_CPR_STATE_REQ) ||
    ba2c:	3b04      	subs	r3, #4
    ba2e:	2b01      	cmp	r3, #1
    ba30:	d801      	bhi.n	ba36 <isr_rx_conn_pkt_ctrl+0x5ce>
				nack = reject_ext_ind_send(_radio.conn_curr,
    ba32:	2223      	movs	r2, #35	; 0x23
    ba34:	e7e3      	b.n	b9fe <isr_rx_conn_pkt_ctrl+0x596>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    ba36:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    ba3a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    ba3e:	4299      	cmp	r1, r3
    ba40:	d003      	beq.n	ba4a <isr_rx_conn_pkt_ctrl+0x5e2>
    ba42:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    ba46:	2b03      	cmp	r3, #3
    ba48:	d105      	bne.n	ba56 <isr_rx_conn_pkt_ctrl+0x5ee>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    ba4a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    ba4e:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    ba52:	4299      	cmp	r1, r3
    ba54:	d001      	beq.n	ba5a <isr_rx_conn_pkt_ctrl+0x5f2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    ba56:	222a      	movs	r2, #42	; 0x2a
    ba58:	e7d1      	b.n	b9fe <isr_rx_conn_pkt_ctrl+0x596>
				if ((cpr->interval_min < 6) ||
    ba5a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    ba5e:	4643      	mov	r3, r8
    ba60:	2b05      	cmp	r3, #5
    ba62:	d91b      	bls.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->interval_max > 3200) ||
    ba64:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    ba66:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    ba6a:	d817      	bhi.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->interval_max > 3200) ||
    ba6c:	45b8      	cmp	r8, r7
    ba6e:	d815      	bhi.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->latency > 499) ||
    ba70:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    ba74:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    ba78:	d210      	bcs.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->timeout < 10) ||
    ba7a:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    ba7e:	f1ae 060a 	sub.w	r6, lr, #10
    ba82:	b2b6      	uxth	r6, r6
    ba84:	f640 4976 	movw	r9, #3190	; 0xc76
    ba88:	454e      	cmp	r6, r9
    ba8a:	d807      	bhi.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
				     ((cpr->latency + 1) *
    ba8c:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    ba90:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    ba94:	da02      	bge.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
				    (cpr->preferred_periodicity >
    ba96:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    ba98:	428f      	cmp	r7, r1
    ba9a:	d201      	bcs.n	baa0 <isr_rx_conn_pkt_ctrl+0x638>
				nack = reject_ext_ind_send(conn,
    ba9c:	221e      	movs	r2, #30
    ba9e:	e7ae      	b.n	b9fe <isr_rx_conn_pkt_ctrl+0x596>
				conn->llcp_conn_param.interval = cpr->interval_min;
    baa0:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    baa4:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    baa8:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    baac:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    bab0:	7da6      	ldrb	r6, [r4, #22]
    bab2:	7d61      	ldrb	r1, [r4, #21]
    bab4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    bab8:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    babc:	7e26      	ldrb	r6, [r4, #24]
    babe:	7de1      	ldrb	r1, [r4, #23]
    bac0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bac4:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    bac8:	7ea6      	ldrb	r6, [r4, #26]
    baca:	7e61      	ldrb	r1, [r4, #25]
    bacc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bad0:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    bad4:	7f26      	ldrb	r6, [r4, #28]
    bad6:	7ee1      	ldrb	r1, [r4, #27]
    bad8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    badc:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    bae0:	7fa6      	ldrb	r6, [r4, #30]
    bae2:	7f61      	ldrb	r1, [r4, #29]
    bae4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bae8:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    baec:	7fe1      	ldrb	r1, [r4, #31]
    baee:	f894 6020 	ldrb.w	r6, [r4, #32]
    baf2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    baf6:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    bafa:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    bafe:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    bb02:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    bb06:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    bb0a:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    bb0e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    bb10:	428c      	cmp	r4, r1
    bb12:	d10f      	bne.n	bb34 <isr_rx_conn_pkt_ctrl+0x6cc>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    bb14:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    bb16:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bb1a:	4361      	muls	r1, r4
    bb1c:	f242 7410 	movw	r4, #10000	; 0x2710
    bb20:	fb04 130e 	mla	r3, r4, lr, r1
    bb24:	3b01      	subs	r3, #1
    bb26:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    bb2a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    bb2c:	b29b      	uxth	r3, r3
    bb2e:	4299      	cmp	r1, r3
    bb30:	f000 8096 	beq.w	bc60 <isr_rx_conn_pkt_ctrl+0x7f8>
					if (conn->pause_tx) {
    bb34:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    bb38:	071c      	lsls	r4, r3, #28
    bb3a:	f140 808b 	bpl.w	bc54 <isr_rx_conn_pkt_ctrl+0x7ec>
						conn->llcp_conn_param.state =
    bb3e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    bb42:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    bb44:	f361 0302 	bfi	r3, r1, #0, #3
    bb48:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    bb4c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    bb50:	3b01      	subs	r3, #1
    bb52:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    bb56:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	f47f ad53 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
				_radio.conn_upd = conn;
    bb60:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    bb64:	e54f      	b.n	b606 <isr_rx_conn_pkt_ctrl+0x19e>
    bb66:	bf00      	nop
    bb68:	20000660 	.word	0x20000660
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    bb6c:	4299      	cmp	r1, r3
    bb6e:	d004      	beq.n	bb7a <isr_rx_conn_pkt_ctrl+0x712>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    bb70:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    bb74:	0799      	lsls	r1, r3, #30
    bb76:	f47f acb9 	bne.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
			if ((cpr->interval_min < 6) ||
    bb7a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    bb7e:	4643      	mov	r3, r8
    bb80:	2b05      	cmp	r3, #5
    bb82:	d98b      	bls.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->interval_max > 3200) ||
    bb84:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    bb86:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    bb8a:	d887      	bhi.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->interval_max > 3200) ||
    bb8c:	45b8      	cmp	r8, r7
    bb8e:	d885      	bhi.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->latency > 499) ||
    bb90:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    bb94:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    bb98:	d280      	bcs.n	ba9c <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bb9a:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    bb9e:	f1ae 060a 	sub.w	r6, lr, #10
    bba2:	b2b6      	uxth	r6, r6
    bba4:	f640 4976 	movw	r9, #3190	; 0xc76
    bba8:	454e      	cmp	r6, r9
    bbaa:	f63f af77 	bhi.w	ba9c <isr_rx_conn_pkt_ctrl+0x634>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    bbae:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bbb2:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    bbb6:	f6bf af71 	bge.w	ba9c <isr_rx_conn_pkt_ctrl+0x634>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    bbba:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    bbbc:	428f      	cmp	r7, r1
    bbbe:	f4ff af6d 	bcc.w	ba9c <isr_rx_conn_pkt_ctrl+0x634>
			conn->llcp_conn_param.interval = cpr->interval_min;
    bbc2:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    bbc6:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    bbca:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    bbce:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    bbd2:	7da6      	ldrb	r6, [r4, #22]
    bbd4:	7d61      	ldrb	r1, [r4, #21]
    bbd6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    bbda:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    bbde:	7e26      	ldrb	r6, [r4, #24]
    bbe0:	7de1      	ldrb	r1, [r4, #23]
    bbe2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bbe6:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    bbea:	7ea6      	ldrb	r6, [r4, #26]
    bbec:	7e61      	ldrb	r1, [r4, #25]
    bbee:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bbf2:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    bbf6:	7f26      	ldrb	r6, [r4, #28]
    bbf8:	7ee1      	ldrb	r1, [r4, #27]
    bbfa:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bbfe:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    bc02:	7fa6      	ldrb	r6, [r4, #30]
    bc04:	7f61      	ldrb	r1, [r4, #29]
    bc06:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bc0a:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    bc0e:	7fe1      	ldrb	r1, [r4, #31]
    bc10:	f894 6020 	ldrb.w	r6, [r4, #32]
    bc14:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    bc18:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    bc1c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    bc20:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    bc24:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    bc28:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    bc2c:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    bc30:	6a41      	ldr	r1, [r0, #36]	; 0x24
    bc32:	428c      	cmp	r4, r1
    bc34:	d10e      	bne.n	bc54 <isr_rx_conn_pkt_ctrl+0x7ec>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    bc36:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    bc38:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bc3c:	4361      	muls	r1, r4
    bc3e:	f242 7410 	movw	r4, #10000	; 0x2710
    bc42:	fb04 130e 	mla	r3, r4, lr, r1
    bc46:	3b01      	subs	r3, #1
    bc48:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    bc4c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    bc4e:	b29b      	uxth	r3, r3
    bc50:	4299      	cmp	r1, r3
    bc52:	d005      	beq.n	bc60 <isr_rx_conn_pkt_ctrl+0x7f8>
				*rx_enqueue = 1;
    bc54:	2301      	movs	r3, #1
    bc56:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    bc58:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    bc5c:	2103      	movs	r1, #3
    bc5e:	e771      	b.n	bb44 <isr_rx_conn_pkt_ctrl+0x6dc>
				conn->llcp_conn_param.status = 0;
    bc60:	2300      	movs	r3, #0
    bc62:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    bc66:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    bc6a:	2101      	movs	r1, #1
    bc6c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    bc70:	e768      	b.n	bb44 <isr_rx_conn_pkt_ctrl+0x6dc>
		if (_radio.conn_curr->role ||
    bc72:	4bc2      	ldr	r3, [pc, #776]	; (bf7c <isr_rx_conn_pkt_ctrl+0xb14>)
    bc74:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    bc78:	f995 301d 	ldrsb.w	r3, [r5, #29]
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	f2c0 846e 	blt.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    bc82:	7a41      	ldrb	r1, [r0, #9]
    bc84:	2010      	movs	r0, #16
    bc86:	f7fc fb87 	bl	8398 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    bc8a:	2800      	cmp	r0, #0
    bc8c:	f000 8467 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		if (!_radio.conn_curr->role &&
    bc90:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    bc94:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    bc98:	429a      	cmp	r2, r3
    bc9a:	f43f acb4 	beq.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_conn_param.state ==
    bc9e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    bca2:	f003 0307 	and.w	r3, r3, #7
    bca6:	2b04      	cmp	r3, #4
    bca8:	f47f acad 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
			if ((cpr->interval_min < 6) ||
    bcac:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    bcb0:	fa1f f28e 	uxth.w	r2, lr
    bcb4:	2a05      	cmp	r2, #5
    bcb6:	d91b      	bls.n	bcf0 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->interval_max > 3200) ||
    bcb8:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    bcba:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    bcbe:	d817      	bhi.n	bcf0 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->interval_max > 3200) ||
    bcc0:	429a      	cmp	r2, r3
    bcc2:	d815      	bhi.n	bcf0 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->latency > 499) ||
    bcc4:	8a27      	ldrh	r7, [r4, #16]
    bcc6:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    bcc8:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    bccc:	d210      	bcs.n	bcf0 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bcce:	8a66      	ldrh	r6, [r4, #18]
    bcd0:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    bcd2:	f1a0 010a 	sub.w	r1, r0, #10
    bcd6:	b289      	uxth	r1, r1
    bcd8:	f640 4c76 	movw	ip, #3190	; 0xc76
    bcdc:	4561      	cmp	r1, ip
    bcde:	d807      	bhi.n	bcf0 <isr_rx_conn_pkt_ctrl+0x888>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    bce0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    bce4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    bce8:	da02      	bge.n	bcf0 <isr_rx_conn_pkt_ctrl+0x888>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    bcea:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    bcec:	4293      	cmp	r3, r2
    bcee:	d203      	bcs.n	bcf8 <isr_rx_conn_pkt_ctrl+0x890>
				nack = reject_ext_ind_send(conn,
    bcf0:	221e      	movs	r2, #30
    bcf2:	2110      	movs	r1, #16
    bcf4:	4628      	mov	r0, r5
    bcf6:	e683      	b.n	ba00 <isr_rx_conn_pkt_ctrl+0x598>
			_radio.conn_curr->procedure_expire = 0;
    bcf8:	2000      	movs	r0, #0
    bcfa:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    bcfe:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    bd02:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    bd06:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    bd0a:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    bd0e:	7da2      	ldrb	r2, [r4, #22]
    bd10:	7d63      	ldrb	r3, [r4, #21]
    bd12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    bd16:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    bd1a:	7e22      	ldrb	r2, [r4, #24]
    bd1c:	7de3      	ldrb	r3, [r4, #23]
    bd1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd22:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    bd26:	7ea2      	ldrb	r2, [r4, #26]
    bd28:	7e63      	ldrb	r3, [r4, #25]
    bd2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd2e:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    bd32:	7f22      	ldrb	r2, [r4, #28]
    bd34:	7ee3      	ldrb	r3, [r4, #27]
    bd36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd3a:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    bd3e:	7fa2      	ldrb	r2, [r4, #30]
    bd40:	7f63      	ldrb	r3, [r4, #29]
    bd42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd46:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    bd4a:	f894 2020 	ldrb.w	r2, [r4, #32]
    bd4e:	7fe3      	ldrb	r3, [r4, #31]
    bd50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd54:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    bd58:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    bd5c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    bd60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bd64:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    bd68:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    bd6c:	2201      	movs	r2, #1
    bd6e:	f362 0302 	bfi	r3, r2, #0, #3
    bd72:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    bd76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    bd7a:	7a41      	ldrb	r1, [r0, #9]
    bd7c:	2011      	movs	r0, #17
    bd7e:	f7fc fb0b 	bl	8398 <pdu_len_cmp>
    bd82:	2800      	cmp	r0, #0
    bd84:	f000 83eb 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    bd88:	4a7c      	ldr	r2, [pc, #496]	; (bf7c <isr_rx_conn_pkt_ctrl+0xb14>)
    bd8a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    bd8e:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    bd92:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    bd96:	4281      	cmp	r1, r0
    bd98:	7b21      	ldrb	r1, [r4, #12]
    bd9a:	d027      	beq.n	bdec <isr_rx_conn_pkt_ctrl+0x984>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    bd9c:	2916      	cmp	r1, #22
    bd9e:	f47f ac32 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		if (rej_ext_ind->error_code != 0x23) {
    bda2:	7b61      	ldrb	r1, [r4, #13]
    bda4:	2923      	cmp	r1, #35	; 0x23
    bda6:	d00e      	beq.n	bdc6 <isr_rx_conn_pkt_ctrl+0x95e>
				_radio.conn_curr->phy_tx;
    bda8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    bdac:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    bdb0:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    bdb4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    bdb8:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    bdbc:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    bdbe:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    bdc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    bdc6:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    bdca:	0792      	lsls	r2, r2, #30
    bdcc:	f57f ac1b 	bpl.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    bdd0:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    bdd2:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    bdd4:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    bdd6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    bdda:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    bdde:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    bde0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    bde4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bde8:	7363      	strb	r3, [r4, #13]
    bdea:	e43a      	b.n	b662 <isr_rx_conn_pkt_ctrl+0x1fa>
		   _radio.conn_curr->llcp_conn_param.req) {
    bdec:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    bdf0:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    bdf4:	42b8      	cmp	r0, r7
    bdf6:	d067      	beq.n	bec8 <isr_rx_conn_pkt_ctrl+0xa60>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    bdf8:	290f      	cmp	r1, #15
    bdfa:	f47f ac04 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
    bdfe:	f993 001d 	ldrsb.w	r0, [r3, #29]
    be02:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    be04:	2800      	cmp	r0, #0
    be06:	db34      	blt.n	be72 <isr_rx_conn_pkt_ctrl+0xa0a>
    be08:	291a      	cmp	r1, #26
    be0a:	d132      	bne.n	be72 <isr_rx_conn_pkt_ctrl+0xa0a>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    be0c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    be10:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    be14:	4294      	cmp	r4, r2
    be16:	f47f ab69 	bne.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
				conn->llcp_conn_param.state =
    be1a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    be1e:	2105      	movs	r1, #5
    be20:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    be24:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    be28:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    be2c:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    be30:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    be34:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    be38:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    be3c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    be40:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    be44:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    be46:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    be4a:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    be4e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    be52:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    be54:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    be58:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    be5a:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    be5e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    be62:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_ack--;
    be66:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				conn->llcp_type = LLCP_CONN_UPD;
    be6a:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				break;
    be6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (rej_ext_ind->error_code != 0x23) {
    be72:	2923      	cmp	r1, #35	; 0x23
    be74:	d011      	beq.n	be9a <isr_rx_conn_pkt_ctrl+0xa32>
		LL_ASSERT(_radio.conn_upd == conn);
    be76:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    be7a:	42b3      	cmp	r3, r6
    be7c:	f47f ab36 	bne.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
		_radio.conn_upd = NULL;
    be80:	2600      	movs	r6, #0
		if (conn->role) {
    be82:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    be84:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    be88:	bfb8      	it	lt
    be8a:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    be8e:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    be92:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    be96:	bfb8      	it	lt
    be98:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    be9a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    be9e:	0717      	lsls	r7, r2, #28
    bea0:	f57f abb1 	bpl.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
	cp->status = rej_ext_ind->error_code;
    bea4:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    bea6:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    bea8:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    beaa:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    beac:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    beae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    beb0:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    beb2:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    beb4:	237d      	movs	r3, #125	; 0x7d
    beb6:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    beb8:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    beba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bebe:	fb93 f3f2 	sdiv	r3, r3, r2
    bec2:	8223      	strh	r3, [r4, #16]
    bec4:	f7ff bbcd 	b.w	b662 <isr_rx_conn_pkt_ctrl+0x1fa>
		   _radio.conn_curr->llcp_length.req) {
    bec8:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    becc:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    bed0:	4290      	cmp	r0, r2
    bed2:	d01a      	beq.n	bf0a <isr_rx_conn_pkt_ctrl+0xaa2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    bed4:	2914      	cmp	r1, #20
    bed6:	f47f ab96 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		conn->llcp_length.ack = conn->llcp_length.req;
    beda:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    bede:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    bee2:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    bee4:	f360 02c3 	bfi	r2, r0, #3, #1
    bee8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    beec:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    beee:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    bef2:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bef4:	2215      	movs	r2, #21
    bef6:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    bef8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    befa:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    befc:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    befe:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    bf00:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    bf02:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    bf04:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    bf06:	8263      	strh	r3, [r4, #18]
    bf08:	e564      	b.n	b9d4 <isr_rx_conn_pkt_ctrl+0x56c>
		switch (rej_ext_ind->reject_opcode) {
    bf0a:	2903      	cmp	r1, #3
    bf0c:	f47f ab7b 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->pause_rx = 0;
    bf10:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    bf14:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    bf18:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    bf1c:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    bf1e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    bf22:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    bf26:	230d      	movs	r3, #13
    bf28:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    bf2a:	7b63      	ldrb	r3, [r4, #13]
    bf2c:	7323      	strb	r3, [r4, #12]
    bf2e:	e551      	b.n	b9d4 <isr_rx_conn_pkt_ctrl+0x56c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    bf30:	7a41      	ldrb	r1, [r0, #9]
    bf32:	2012      	movs	r0, #18
    bf34:	f7fc fa30 	bl	8398 <pdu_len_cmp>
    bf38:	2800      	cmp	r0, #0
    bf3a:	f000 8310 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		nack = ping_resp_send(_radio.conn_curr);
    bf3e:	480f      	ldr	r0, [pc, #60]	; (bf7c <isr_rx_conn_pkt_ctrl+0xb14>)
    bf40:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bf44:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    bf48:	f7f9 fdf7 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    bf4c:	4601      	mov	r1, r0
    bf4e:	2800      	cmp	r0, #0
    bf50:	f43f ac7b 	beq.w	b84a <isr_rx_conn_pkt_ctrl+0x3e2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf54:	7903      	ldrb	r3, [r0, #4]
    bf56:	f043 0303 	orr.w	r3, r3, #3
    bf5a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    bf5c:	2301      	movs	r3, #1
    bf5e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    bf60:	2313      	movs	r3, #19
    bf62:	e4ae      	b.n	b8c2 <isr_rx_conn_pkt_ctrl+0x45a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    bf64:	7a41      	ldrb	r1, [r0, #9]
    bf66:	2013      	movs	r0, #19
    bf68:	f7fc fa16 	bl	8398 <pdu_len_cmp>
    bf6c:	2800      	cmp	r0, #0
    bf6e:	f000 82f6 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		_radio.conn_curr->procedure_expire = 0;
    bf72:	4b02      	ldr	r3, [pc, #8]	; (bf7c <isr_rx_conn_pkt_ctrl+0xb14>)
    bf74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    bf78:	e44a      	b.n	b810 <isr_rx_conn_pkt_ctrl+0x3a8>
    bf7a:	bf00      	nop
    bf7c:	20000660 	.word	0x20000660
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    bf80:	7a41      	ldrb	r1, [r0, #9]
    bf82:	2007      	movs	r0, #7
    bf84:	f7fc fa08 	bl	8398 <pdu_len_cmp>
    bf88:	2800      	cmp	r0, #0
    bf8a:	f000 82e8 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    bf8e:	4ace      	ldr	r2, [pc, #824]	; (c2c8 <isr_rx_conn_pkt_ctrl+0xe60>)
    bf90:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    bf94:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    bf98:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    bf9c:	42b1      	cmp	r1, r6
    bf9e:	4611      	mov	r1, r2
    bfa0:	d02c      	beq.n	bffc <isr_rx_conn_pkt_ctrl+0xb94>
			conn->llcp_conn_param.disabled = 1;
    bfa2:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    bfa6:	f040 0010 	orr.w	r0, r0, #16
    bfaa:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    bfae:	f993 001d 	ldrsb.w	r0, [r3, #29]
    bfb2:	2800      	cmp	r0, #0
    bfb4:	f6bf af2a 	bge.w	be0c <isr_rx_conn_pkt_ctrl+0x9a4>
			LL_ASSERT(_radio.conn_upd == conn);
    bfb8:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    bfbc:	4293      	cmp	r3, r2
    bfbe:	f47f aa95 	bne.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_upd = NULL;
    bfc2:	2200      	movs	r2, #0
    bfc4:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    bfc8:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bfcc:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    bfd0:	0716      	lsls	r6, r2, #28
    bfd2:	f57f ab18 	bpl.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    bfd6:	2208      	movs	r2, #8
    bfd8:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    bfda:	221a      	movs	r2, #26
    bfdc:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    bfde:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    bfe0:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    bfe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    bfe4:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    bfe6:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    bfe8:	237d      	movs	r3, #125	; 0x7d
    bfea:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    bfec:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    bfee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bff2:	fb93 f3f2 	sdiv	r3, r3, r2
    bff6:	8223      	strh	r3, [r4, #16]
    bff8:	f7ff bbb1 	b.w	b75e <isr_rx_conn_pkt_ctrl+0x2f6>
		} else if (_radio.conn_curr->llcp_length.req !=
    bffc:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    c000:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    c004:	4290      	cmp	r0, r2
    c006:	d009      	beq.n	c01c <isr_rx_conn_pkt_ctrl+0xbb4>
			_radio.conn_curr->llcp_length.ack =
    c008:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    c00c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    c010:	f36f 02c3 	bfc	r2, #3, #1
    c014:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    c018:	f7ff bba1 	b.w	b75e <isr_rx_conn_pkt_ctrl+0x2f6>
		} else if (_radio.conn_curr->llcp_phy.req !=
    c01c:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    c020:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    c024:	4290      	cmp	r0, r2
    c026:	d01b      	beq.n	c060 <isr_rx_conn_pkt_ctrl+0xbf8>
			_radio.conn_curr->llcp_phy.ack =
    c028:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    c02c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    c030:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    c034:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    c038:	f362 0002 	bfi	r0, r2, #0, #3
    c03c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    c040:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    c044:	0780      	lsls	r0, r0, #30
    c046:	d50f      	bpl.n	c068 <isr_rx_conn_pkt_ctrl+0xc00>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c048:	200c      	movs	r0, #12
    c04a:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    c04c:	2000      	movs	r0, #0
    c04e:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    c050:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    c052:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    c056:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c05a:	7363      	strb	r3, [r4, #13]
    c05c:	f7ff bb7f 	b.w	b75e <isr_rx_conn_pkt_ctrl+0x2f6>
			switch (llctrl->unknown_rsp.type) {
    c060:	7b23      	ldrb	r3, [r4, #12]
    c062:	2b12      	cmp	r3, #18
    c064:	f47f ab7b 	bne.w	b75e <isr_rx_conn_pkt_ctrl+0x2f6>
		_radio.conn_curr->procedure_expire = 0;
    c068:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    c06c:	f7ff bbd0 	b.w	b810 <isr_rx_conn_pkt_ctrl+0x3a8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    c070:	7a41      	ldrb	r1, [r0, #9]
    c072:	2014      	movs	r0, #20
    c074:	f7fc f990 	bl	8398 <pdu_len_cmp>
    c078:	2800      	cmp	r0, #0
    c07a:	f000 8270 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    c07e:	2f14      	cmp	r7, #20
    c080:	d123      	bne.n	c0ca <isr_rx_conn_pkt_ctrl+0xc62>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c082:	4892      	ldr	r0, [pc, #584]	; (c2cc <isr_rx_conn_pkt_ctrl+0xe64>)
    c084:	f7f9 fd59 	bl	5b3a <mem_acquire>
		if (!node_tx) {
    c088:	4606      	mov	r6, r0
    c08a:	2800      	cmp	r0, #0
    c08c:	f43f abdd 	beq.w	b84a <isr_rx_conn_pkt_ctrl+0x3e2>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c090:	4f8d      	ldr	r7, [pc, #564]	; (c2c8 <isr_rx_conn_pkt_ctrl+0xe60>)
    c092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    c096:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    c09a:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c09e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c0a0:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    c0a2:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c0a4:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    c0a8:	45e0      	cmp	r8, ip
    c0aa:	46b9      	mov	r9, r7
    c0ac:	f894 800b 	ldrb.w	r8, [r4, #11]
    c0b0:	d10d      	bne.n	c0ce <isr_rx_conn_pkt_ctrl+0xc66>
	      _radio.conn_curr->llcp_length.ack) &&
    c0b2:	f1b8 0f14 	cmp.w	r8, #20
    c0b6:	d016      	beq.n	c0e6 <isr_rx_conn_pkt_ctrl+0xc7e>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    c0b8:	f1b8 0f15 	cmp.w	r8, #21
    c0bc:	f47f aa16 	bne.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c0c0:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    c0c2:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c0c4:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    c0c6:	4693      	mov	fp, r2
    c0c8:	e05d      	b.n	c186 <isr_rx_conn_pkt_ctrl+0xd1e>
	struct radio_pdu_node_tx *node_tx = NULL;
    c0ca:	2600      	movs	r6, #0
    c0cc:	e7e0      	b.n	c090 <isr_rx_conn_pkt_ctrl+0xc28>
		 LLCP_LENGTH_STATE_REQ) ||
    c0ce:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    c0d2:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    c0d6:	2f01      	cmp	r7, #1
    c0d8:	d9eb      	bls.n	c0b2 <isr_rx_conn_pkt_ctrl+0xc4a>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    c0da:	2f02      	cmp	r7, #2
    c0dc:	d1ec      	bne.n	c0b8 <isr_rx_conn_pkt_ctrl+0xc50>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    c0de:	f1a8 0714 	sub.w	r7, r8, #20
    c0e2:	2f01      	cmp	r7, #1
    c0e4:	d8e8      	bhi.n	c0b8 <isr_rx_conn_pkt_ctrl+0xc50>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    c0e6:	89a7      	ldrh	r7, [r4, #12]
    c0e8:	2f1a      	cmp	r7, #26
    c0ea:	d965      	bls.n	c1b8 <isr_rx_conn_pkt_ctrl+0xd50>
			eff_tx_octets = min(lr->max_rx_octets,
    c0ec:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    c0f0:	4547      	cmp	r7, r8
    c0f2:	bf28      	it	cs
    c0f4:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    c0f6:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    c0fa:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    c0fe:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    c102:	bf34      	ite	cc
    c104:	4693      	movcc	fp, r2
    c106:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    c10a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    c10e:	d355      	bcc.n	c1bc <isr_rx_conn_pkt_ctrl+0xd54>
			eff_tx_time = min(lr->max_rx_time,
    c110:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    c114:	45d0      	cmp	r8, sl
    c116:	bf28      	it	cs
    c118:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    c11a:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    c11e:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    c122:	bf34      	ite	cc
    c124:	4682      	movcc	sl, r0
    c126:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    c12a:	455a      	cmp	r2, fp
    c12c:	d048      	beq.n	c1c0 <isr_rx_conn_pkt_ctrl+0xd58>
			free_count_rx = packet_rx_acquired_count_get() +
    c12e:	f7fc f97b 	bl	8428 <packet_rx_acquired_count_get>
    c132:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    c134:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    c138:	f7f9 fd2e 	bl	5b98 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    c13c:	4420      	add	r0, r4
    c13e:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    c140:	28ff      	cmp	r0, #255	; 0xff
    c142:	f63f a9d3 	bhi.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
			if (_radio.packet_rx_data_count == free_count_rx) {
    c146:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    c14a:	4283      	cmp	r3, r0
    c14c:	f040 8222 	bne.w	c594 <isr_rx_conn_pkt_ctrl+0x112c>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c150:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    c154:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c158:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    c15a:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    c15c:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    c160:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    c164:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    c168:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    c16c:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    c170:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    c174:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    c178:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    c17c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    c180:	2303      	movs	r3, #3
    c182:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    c186:	2e00      	cmp	r6, #0
    c188:	f43f aa3d 	beq.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c18c:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    c18e:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    c192:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c196:	f043 0303 	orr.w	r3, r3, #3
    c19a:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    c19c:	2309      	movs	r3, #9
    c19e:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c1a0:	2315      	movs	r3, #21
    c1a2:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    c1a4:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    c1a6:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    c1aa:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    c1ae:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    c1b0:	f7fd fd30 	bl	9c14 <ctrl_tx_enqueue>
    c1b4:	f7ff ba27 	b.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    c1b8:	460f      	mov	r7, r1
    c1ba:	e79c      	b.n	c0f6 <isr_rx_conn_pkt_ctrl+0xc8e>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    c1bc:	46f0      	mov	r8, lr
    c1be:	e7ac      	b.n	c11a <isr_rx_conn_pkt_ctrl+0xcb2>
			_radio.conn_curr->pause_tx = 0;
    c1c0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    c1c4:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    c1c8:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    c1cc:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    c1d0:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    c1d2:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    c1d6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    c1da:	d103      	bne.n	c1e4 <isr_rx_conn_pkt_ctrl+0xd7c>
    c1dc:	45c6      	cmp	lr, r8
    c1de:	d101      	bne.n	c1e4 <isr_rx_conn_pkt_ctrl+0xd7c>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    c1e0:	4550      	cmp	r0, sl
    c1e2:	d0d0      	beq.n	c186 <isr_rx_conn_pkt_ctrl+0xd1e>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    c1e4:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    c1e6:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    c1ea:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    c1ee:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    c1f0:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    c1f4:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    c1f6:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    c1fa:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    c1fe:	702b      	strb	r3, [r5, #0]
    c200:	e7c1      	b.n	c186 <isr_rx_conn_pkt_ctrl+0xd1e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    c202:	7a41      	ldrb	r1, [r0, #9]
    c204:	2016      	movs	r0, #22
    c206:	f7fc f8c7 	bl	8398 <pdu_len_cmp>
    c20a:	2800      	cmp	r0, #0
    c20c:	f000 81a7 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		if (_radio.role == ROLE_MASTER) {
    c210:	482d      	ldr	r0, [pc, #180]	; (c2c8 <isr_rx_conn_pkt_ctrl+0xe60>)
    c212:	7cc3      	ldrb	r3, [r0, #19]
    c214:	2b04      	cmp	r3, #4
    c216:	d15b      	bne.n	c2d0 <isr_rx_conn_pkt_ctrl+0xe68>
			if ((_radio.conn_curr->llcp_phy.ack !=
    c218:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    c21c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    c220:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    c224:	428b      	cmp	r3, r1
    c226:	d00a      	beq.n	c23e <isr_rx_conn_pkt_ctrl+0xdd6>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    c228:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    c22c:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    c230:	3a01      	subs	r2, #1
    c232:	2a02      	cmp	r2, #2
    c234:	d803      	bhi.n	c23e <isr_rx_conn_pkt_ctrl+0xdd6>
				nack = reject_ext_ind_send(_radio.conn_curr,
    c236:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    c238:	2116      	movs	r1, #22
    c23a:	f7ff bbe1 	b.w	ba00 <isr_rx_conn_pkt_ctrl+0x598>
			} else if (((_radio.conn_curr->llcp_req !=
    c23e:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    c242:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    c246:	4295      	cmp	r5, r2
    c248:	d003      	beq.n	c252 <isr_rx_conn_pkt_ctrl+0xdea>
				     _radio.conn_curr->llcp_ack) &&
    c24a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    c24e:	2a03      	cmp	r2, #3
    c250:	d105      	bne.n	c25e <isr_rx_conn_pkt_ctrl+0xdf6>
				     LLCP_ENCRYPTION)) ||
    c252:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    c256:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    c25a:	4295      	cmp	r5, r2
    c25c:	d001      	beq.n	c262 <isr_rx_conn_pkt_ctrl+0xdfa>
				nack = reject_ext_ind_send(_radio.conn_curr,
    c25e:	222a      	movs	r2, #42	; 0x2a
    c260:	e7ea      	b.n	c238 <isr_rx_conn_pkt_ctrl+0xdd0>
				_radio.conn_curr->llcp_phy.state =
    c262:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    c266:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    c268:	f042 0203 	orr.w	r2, r2, #3
    c26c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    c270:	d116      	bne.n	c2a0 <isr_rx_conn_pkt_ctrl+0xe38>
					_radio.conn_curr->llcp_phy.ack--;
    c272:	3b01      	subs	r3, #1
    c274:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    c278:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    c27c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    c280:	f36f 0341 	bfc	r3, #1, #1
    c284:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    c288:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    c28c:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    c290:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    c294:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c298:	f362 1347 	bfi	r3, r2, #5, #3
    c29c:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    c2a0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    c2a4:	7b62      	ldrb	r2, [r4, #13]
    c2a6:	f3c3 0182 	ubfx	r1, r3, #2, #3
    c2aa:	400a      	ands	r2, r1
    c2ac:	f362 0384 	bfi	r3, r2, #2, #3
    c2b0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    c2b4:	7b22      	ldrb	r2, [r4, #12]
    c2b6:	b2db      	uxtb	r3, r3
    c2b8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c2bc:	f362 1347 	bfi	r3, r2, #5, #3
    c2c0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    c2c4:	f7ff b99f 	b.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
    c2c8:	20000660 	.word	0x20000660
    c2cc:	200007bc 	.word	0x200007bc
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    c2d0:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c2d4:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    c2d8:	f7f9 fc2f 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    c2dc:	4601      	mov	r1, r0
    c2de:	2800      	cmp	r0, #0
    c2e0:	f43f aab3 	beq.w	b84a <isr_rx_conn_pkt_ctrl+0x3e2>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    c2e4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c2e8:	2202      	movs	r2, #2
    c2ea:	f362 0301 	bfi	r3, r2, #0, #2
    c2ee:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    c2f2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    c2f6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    c2fa:	4293      	cmp	r3, r2
    c2fc:	d11a      	bne.n	c334 <isr_rx_conn_pkt_ctrl+0xecc>
		conn->llcp_phy.ack--;
    c2fe:	3b01      	subs	r3, #1
    c300:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    c304:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    c308:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    c30c:	f36f 0341 	bfc	r3, #1, #1
    c310:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    c314:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c318:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    c31c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    c320:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c324:	f362 1347 	bfi	r3, r2, #5, #3
    c328:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    c32c:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    c330:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    c334:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    c338:	7b62      	ldrb	r2, [r4, #13]
    c33a:	f3c3 0082 	ubfx	r0, r3, #2, #3
    c33e:	4002      	ands	r2, r0
    c340:	f362 0384 	bfi	r3, r2, #2, #3
    c344:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    c348:	7b22      	ldrb	r2, [r4, #12]
    c34a:	b2db      	uxtb	r3, r3
    c34c:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c350:	f362 1347 	bfi	r3, r2, #5, #3
    c354:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c358:	790b      	ldrb	r3, [r1, #4]
    c35a:	f043 0303 	orr.w	r3, r3, #3
    c35e:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    c360:	2303      	movs	r3, #3
    c362:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    c364:	2317      	movs	r3, #23
    c366:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    c368:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    c36c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c370:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    c372:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    c376:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c37a:	724b      	strb	r3, [r1, #9]
    c37c:	f7ff ba78 	b.w	b870 <isr_rx_conn_pkt_ctrl+0x408>
		if (_radio.conn_curr->role ||
    c380:	4e8b      	ldr	r6, [pc, #556]	; (c5b0 <isr_rx_conn_pkt_ctrl+0x1148>)
    c382:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    c386:	f995 301d 	ldrsb.w	r3, [r5, #29]
    c38a:	2b00      	cmp	r3, #0
    c38c:	f2c0 80e7 	blt.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    c390:	7a41      	ldrb	r1, [r0, #9]
    c392:	2017      	movs	r0, #23
    c394:	f7fc f800 	bl	8398 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    c398:	2800      	cmp	r0, #0
    c39a:	f000 80e0 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		if ((_radio.role == ROLE_MASTER) &&
    c39e:	7cf3      	ldrb	r3, [r6, #19]
    c3a0:	2b04      	cmp	r3, #4
    c3a2:	f47f a930 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
    c3a6:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    c3aa:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    c3ae:	429a      	cmp	r2, r3
    c3b0:	f43f a929 	beq.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_phy.state ==
    c3b4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    c3b8:	f003 0203 	and.w	r2, r3, #3
    c3bc:	2a02      	cmp	r2, #2
    c3be:	f47f a922 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    c3c2:	f043 0303 	orr.w	r3, r3, #3
    c3c6:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    c3ca:	7b62      	ldrb	r2, [r4, #13]
    c3cc:	f3c3 0182 	ubfx	r1, r3, #2, #3
    c3d0:	400a      	ands	r2, r1
    c3d2:	f362 0384 	bfi	r3, r2, #2, #3
    c3d6:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    c3da:	7b22      	ldrb	r2, [r4, #12]
    c3dc:	b2db      	uxtb	r3, r3
    c3de:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    c3e2:	f362 1347 	bfi	r3, r2, #5, #3
    c3e6:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    c3ea:	f7ff b8c4 	b.w	b576 <isr_rx_conn_pkt_ctrl+0x10e>
		if (!_radio.conn_curr->role ||
    c3ee:	4b70      	ldr	r3, [pc, #448]	; (c5b0 <isr_rx_conn_pkt_ctrl+0x1148>)
    c3f0:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    c3f4:	f996 301d 	ldrsb.w	r3, [r6, #29]
    c3f8:	2b00      	cmp	r3, #0
    c3fa:	f280 80b0 	bge.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    c3fe:	7a41      	ldrb	r1, [r0, #9]
    c400:	2018      	movs	r0, #24
    c402:	f7fb ffc9 	bl	8398 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    c406:	2800      	cmp	r0, #0
    c408:	f000 80a9 	beq.w	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    c40c:	7b27      	ldrb	r7, [r4, #12]
    c40e:	7b62      	ldrb	r2, [r4, #13]
    c410:	ea47 0002 	orr.w	r0, r7, r2
    c414:	f010 0007 	ands.w	r0, r0, #7
    c418:	d125      	bne.n	c466 <isr_rx_conn_pkt_ctrl+0xffe>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    c41a:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    c41e:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    c422:	4293      	cmp	r3, r2
    c424:	f43f a8ef 	beq.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    c428:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    c42c:	f003 0303 	and.w	r3, r3, #3
    c430:	2b02      	cmp	r3, #2
    c432:	f47f a8e8 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		if (!conn->llcp_phy.cmd) {
    c436:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c43a:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    c43e:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    c440:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    c444:	f57f a8df 	bpl.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c448:	230c      	movs	r3, #12
		upd->status = 0;
    c44a:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c44c:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    c44e:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    c452:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c456:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    c458:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    c45c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c460:	7363      	strb	r3, [r4, #13]
    c462:	f7ff bab7 	b.w	b9d4 <isr_rx_conn_pkt_ctrl+0x56c>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    c466:	89e0      	ldrh	r0, [r4, #14]
    c468:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    c46a:	1ac3      	subs	r3, r0, r3
    c46c:	041b      	lsls	r3, r3, #16
    c46e:	f100 809a 	bmi.w	c5a6 <isr_rx_conn_pkt_ctrl+0x113e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    c472:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    c476:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    c47a:	428b      	cmp	r3, r1
    c47c:	f47f a836 	bne.w	b4ec <isr_rx_conn_pkt_ctrl+0x84>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    c480:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    c484:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    c488:	42a3      	cmp	r3, r4
    c48a:	d014      	beq.n	c4b6 <isr_rx_conn_pkt_ctrl+0x104e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    c48c:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    c490:	f003 0303 	and.w	r3, r3, #3
    c494:	2b02      	cmp	r3, #2
    c496:	d10e      	bne.n	c4b6 <isr_rx_conn_pkt_ctrl+0x104e>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c498:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c49c:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c4a0:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    c4a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
    c4a8:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    c4ac:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c4ae:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    c4b2:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    c4b6:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    c4ba:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    c4be:	f002 0207 	and.w	r2, r2, #7
    c4c2:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    c4c6:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    c4ca:	f36f 0300 	bfc	r3, #0, #1
    c4ce:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    c4d2:	2008      	movs	r0, #8
	conn->llcp_ack--;
    c4d4:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    c4d6:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    c4da:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    c4de:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	f43f a88f 	beq.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    c4e8:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    c4ec:	f362 0302 	bfi	r3, r2, #0, #3
    c4f0:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    c4f4:	f7ff b887 	b.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
    c4f8:	4e2d      	ldr	r6, [pc, #180]	; (c5b0 <isr_rx_conn_pkt_ctrl+0x1148>)
    c4fa:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    c4fe:	f995 301d 	ldrsb.w	r3, [r5, #29]
    c502:	2b00      	cmp	r3, #0
    c504:	db2b      	blt.n	c55e <isr_rx_conn_pkt_ctrl+0x10f6>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    c506:	7a41      	ldrb	r1, [r0, #9]
    c508:	2019      	movs	r0, #25
    c50a:	f7fb ff45 	bl	8398 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    c50e:	b330      	cbz	r0, c55e <isr_rx_conn_pkt_ctrl+0x10f6>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    c510:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    c514:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    c518:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    c51c:	7b22      	ldrb	r2, [r4, #12]
    c51e:	f003 0307 	and.w	r3, r3, #7
    c522:	4213      	tst	r3, r2
    c524:	f43f a86f 	beq.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
			if (conn->llcp_req != conn->llcp_ack) {
    c528:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    c52c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    c530:	429a      	cmp	r2, r3
    c532:	f47f a868 	bne.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
			memcpy(&conn->llcp.chan_map.chm[0],
    c536:	2205      	movs	r2, #5
    c538:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    c53c:	f105 0079 	add.w	r0, r5, #121	; 0x79
    c540:	f7f5 fb5c 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    c544:	2301      	movs	r3, #1
    c546:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    c54a:	2302      	movs	r3, #2
    c54c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    c550:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    c554:	3b01      	subs	r3, #1
    c556:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    c55a:	f7ff b854 	b.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
		nack = unknown_rsp_send(_radio.conn_curr,
    c55e:	4814      	ldr	r0, [pc, #80]	; (c5b0 <isr_rx_conn_pkt_ctrl+0x1148>)
    c560:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c564:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    c568:	f7f9 fae7 	bl	5b3a <mem_acquire>
	if (!node_tx) {
    c56c:	4601      	mov	r1, r0
    c56e:	2800      	cmp	r0, #0
    c570:	f43f a96b 	beq.w	b84a <isr_rx_conn_pkt_ctrl+0x3e2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c574:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    c576:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c578:	f043 0303 	orr.w	r3, r3, #3
    c57c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    c57e:	2302      	movs	r3, #2
    c580:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    c582:	2307      	movs	r3, #7
    c584:	71c3      	strb	r3, [r0, #7]
    c586:	f7ff b99d 	b.w	b8c4 <isr_rx_conn_pkt_ctrl+0x45c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    c58a:	2328      	movs	r3, #40	; 0x28
    c58c:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    c590:	f7ff b839 	b.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
	if (node_tx) {
    c594:	2e00      	cmp	r6, #0
    c596:	f43f a958 	beq.w	b84a <isr_rx_conn_pkt_ctrl+0x3e2>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    c59a:	4906      	ldr	r1, [pc, #24]	; (c5b4 <isr_rx_conn_pkt_ctrl+0x114c>)
    c59c:	4630      	mov	r0, r6
    c59e:	f7f9 fae6 	bl	5b6e <mem_release>
    c5a2:	f7ff b952 	b.w	b84a <isr_rx_conn_pkt_ctrl+0x3e2>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    c5a6:	2328      	movs	r3, #40	; 0x28
    c5a8:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    c5ac:	f7ff b82b 	b.w	b606 <isr_rx_conn_pkt_ctrl+0x19e>
    c5b0:	20000660 	.word	0x20000660
    c5b4:	200007bc 	.word	0x200007bc

0000c5b8 <isr>:
{
    c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5bc:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    c5be:	f003 fc67 	bl	fe90 <radio_is_done>
    c5c2:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    c5c4:	b35e      	cbz	r6, c61e <isr+0x66>
		crc_ok = radio_crc_is_valid();
    c5c6:	f003 fc83 	bl	fed0 <radio_crc_is_valid>
    c5ca:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    c5cc:	f003 fd04 	bl	ffd8 <radio_filter_has_match>
    c5d0:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    c5d4:	f003 fd0a 	bl	ffec <radio_filter_match_get>
    c5d8:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    c5dc:	f003 feee 	bl	103bc <radio_ar_has_match>
    c5e0:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    c5e4:	f003 fed8 	bl	10398 <radio_ar_match_get>
    c5e8:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    c5ec:	f003 fcbe 	bl	ff6c <radio_rssi_is_ready>
    c5f0:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    c5f2:	4cac      	ldr	r4, [pc, #688]	; (c8a4 <isr+0x2ec>)
	radio_status_reset();
    c5f4:	f003 fc36 	bl	fe64 <radio_status_reset>
	radio_tmr_status_reset();
    c5f8:	f003 fd0a 	bl	10010 <radio_tmr_status_reset>
	radio_filter_status_reset();
    c5fc:	f003 fce4 	bl	ffc8 <radio_filter_status_reset>
	radio_ar_status_reset();
    c600:	f003 fed0 	bl	103a4 <radio_ar_status_reset>
	radio_rssi_status_reset();
    c604:	f003 fcaa 	bl	ff5c <radio_rssi_status_reset>
	switch (_radio.state) {
    c608:	7d23      	ldrb	r3, [r4, #20]
    c60a:	2b05      	cmp	r3, #5
    c60c:	d82c      	bhi.n	c668 <isr+0xb0>
    c60e:	e8df f013 	tbh	[pc, r3, lsl #1]
    c612:	0079      	.short	0x0079
    c614:	000e00c2 	.word	0x000e00c2
    c618:	09880988 	.word	0x09880988
    c61c:	0988      	.short	0x0988
		devmatch_id = irkmatch_id = 0xFF;
    c61e:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    c622:	4635      	mov	r5, r6
    c624:	46b2      	mov	sl, r6
    c626:	46b1      	mov	r9, r6
    c628:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    c62a:	46d8      	mov	r8, fp
    c62c:	e7e1      	b.n	c5f2 <isr+0x3a>
	_radio.state = STATE_RX;
    c62e:	2301      	movs	r3, #1
    c630:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    c632:	f003 fdef 	bl	10214 <radio_tmr_tifs_base_get>
    c636:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    c638:	2096      	movs	r0, #150	; 0x96
    c63a:	f003 fcf7 	bl	1002c <radio_tmr_tifs_set>
	switch (_radio.role) {
    c63e:	7ce3      	ldrb	r3, [r4, #19]
    c640:	3b01      	subs	r3, #1
    c642:	2b03      	cmp	r3, #3
    c644:	d810      	bhi.n	c668 <isr+0xb0>
    c646:	e8df f003 	tbb	[pc, r3]
    c64a:	3002      	.short	0x3002
    c64c:	6060      	.short	0x6060
		radio_switch_complete_and_tx(0, 0, 0, 0);
    c64e:	2300      	movs	r3, #0
    c650:	461a      	mov	r2, r3
    c652:	4619      	mov	r1, r3
    c654:	4618      	mov	r0, r3
    c656:	f003 fc59 	bl	ff0c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    c65a:	f003 fc47 	bl	feec <radio_pkt_scratch_get>
    c65e:	f003 fbc9 	bl	fdf4 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    c662:	f003 fc0b 	bl	fe7c <radio_is_ready>
    c666:	b128      	cbz	r0, c674 <isr+0xbc>
		LL_ASSERT(0);
    c668:	4040      	eors	r0, r0
    c66a:	f380 8811 	msr	BASEPRI, r0
    c66e:	f04f 0004 	mov.w	r0, #4
    c672:	df02      	svc	2
		if (ctrl_rl_enabled()) {
    c674:	f002 ff28 	bl	f4c8 <ctrl_rl_enabled>
    c678:	b138      	cbz	r0, c68a <isr+0xd2>
			u8_t count, *irks = ctrl_irks_get(&count);
    c67a:	a810      	add	r0, sp, #64	; 0x40
    c67c:	f002 fd1c 	bl	f0b8 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    c680:	4601      	mov	r1, r0
    c682:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c686:	f003 fe55 	bl	10334 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    c68a:	2100      	movs	r1, #0
    c68c:	4608      	mov	r0, r1
    c68e:	f003 fbc6 	bl	fe1e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    c692:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    c694:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    c696:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    c698:	4608      	mov	r0, r1
    c69a:	f003 fbbc 	bl	fe16 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    c69e:	1a28      	subs	r0, r5, r0
    c6a0:	f003 fd4e 	bl	10140 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    c6a4:	f003 fd9e 	bl	101e4 <radio_tmr_end_capture>
    c6a8:	e02c      	b.n	c704 <isr+0x14c>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    c6aa:	2300      	movs	r3, #0
    c6ac:	461a      	mov	r2, r3
    c6ae:	4619      	mov	r1, r3
    c6b0:	4618      	mov	r0, r3
    c6b2:	f003 fc2b 	bl	ff0c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    c6b6:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c6ba:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    c6be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c6c2:	3008      	adds	r0, #8
    c6c4:	f003 fb96 	bl	fdf4 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    c6c8:	f003 fbd8 	bl	fe7c <radio_is_ready>
    c6cc:	2800      	cmp	r0, #0
    c6ce:	d1cb      	bne.n	c668 <isr+0xb0>
		if (ctrl_rl_enabled()) {
    c6d0:	f002 fefa 	bl	f4c8 <ctrl_rl_enabled>
    c6d4:	b138      	cbz	r0, c6e6 <isr+0x12e>
			u8_t count, *irks = ctrl_irks_get(&count);
    c6d6:	a810      	add	r0, sp, #64	; 0x40
    c6d8:	f002 fcee 	bl	f0b8 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    c6dc:	4601      	mov	r1, r0
    c6de:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c6e2:	f003 fe27 	bl	10334 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    c6e6:	2100      	movs	r1, #0
    c6e8:	4608      	mov	r0, r1
    c6ea:	f003 fb98 	bl	fe1e <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    c6ee:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    c6f0:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    c6f2:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    c6f4:	4608      	mov	r0, r1
    c6f6:	f003 fb8e 	bl	fe16 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    c6fa:	1a28      	subs	r0, r5, r0
    c6fc:	f003 fd20 	bl	10140 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    c700:	f003 fc1c 	bl	ff3c <radio_rssi_measure>
}
    c704:	b013      	add	sp, #76	; 0x4c
    c706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    c70a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    c70e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    c712:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    c716:	2100      	movs	r1, #0
    c718:	09d3      	lsrs	r3, r2, #7
    c71a:	f000 0007 	and.w	r0, r0, #7
    c71e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    c722:	f003 fbf3 	bl	ff0c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c726:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    c72a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    c72e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    c732:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    c736:	3108      	adds	r1, #8
    c738:	f7fc f920 	bl	897c <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    c73c:	f003 fb9e 	bl	fe7c <radio_is_ready>
    c740:	2800      	cmp	r0, #0
    c742:	d191      	bne.n	c668 <isr+0xb0>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    c744:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    c748:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    c74c:	2101      	movs	r1, #1
    c74e:	f000 0007 	and.w	r0, r0, #7
    c752:	f003 fb64 	bl	fe1e <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    c756:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    c75a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    c75e:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    c762:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    c764:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    c766:	4405      	add	r5, r0
	switch (phy) {
    c768:	d013      	beq.n	c792 <isr+0x1da>
		return 40;
    c76a:	2b04      	cmp	r3, #4
    c76c:	bf0c      	ite	eq
    c76e:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    c772:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    c774:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    c776:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    c77a:	09c1      	lsrs	r1, r0, #7
    c77c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    c780:	f003 fb49 	bl	fe16 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    c784:	1a28      	subs	r0, r5, r0
    c786:	f003 fcdb 	bl	10140 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    c78a:	2001      	movs	r0, #1
    c78c:	f7fc fe4c 	bl	9428 <packet_tx_enqueue>
    c790:	e7b8      	b.n	c704 <isr+0x14c>
		return 24;
    c792:	2018      	movs	r0, #24
    c794:	e7ee      	b.n	c774 <isr+0x1bc>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    c796:	b926      	cbnz	r6, c7a2 <isr+0x1ea>
		_radio.state = STATE_CLOSE;
    c798:	2303      	movs	r3, #3
    c79a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    c79c:	f003 fb50 	bl	fe40 <radio_disable>
    c7a0:	e7b0      	b.n	c704 <isr+0x14c>
	switch (_radio.role) {
    c7a2:	7ce3      	ldrb	r3, [r4, #19]
    c7a4:	3b01      	subs	r3, #1
    c7a6:	2b03      	cmp	r3, #3
    c7a8:	f63f af5e 	bhi.w	c668 <isr+0xb0>
    c7ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    c7b0:	02920004 	.word	0x02920004
    c7b4:	05940594 	.word	0x05940594
		if (crc_ok) {
    c7b8:	2f00      	cmp	r7, #0
    c7ba:	d0ed      	beq.n	c798 <isr+0x1e0>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    c7bc:	f1ba 0f00 	cmp.w	sl, #0
    c7c0:	d039      	beq.n	c836 <isr+0x27e>
    c7c2:	4658      	mov	r0, fp
    c7c4:	f002 fca2 	bl	f10c <ctrl_rl_irk_idx>
    c7c8:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    c7cc:	f003 fb8e 	bl	feec <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    c7d0:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    c7d4:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    c7d6:	232b      	movs	r3, #43	; 0x2b
    c7d8:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    c7da:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    c7dc:	fb11 3302 	smlabb	r3, r1, r2, r3
    c7e0:	930a      	str	r3, [sp, #40]	; 0x28
    c7e2:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    c7e4:	f000 030f 	and.w	r3, r0, #15
    c7e8:	2b03      	cmp	r3, #3
    c7ea:	d10a      	bne.n	c802 <isr+0x24a>
    c7ec:	7873      	ldrb	r3, [r6, #1]
    c7ee:	2b0c      	cmp	r3, #12
    c7f0:	d107      	bne.n	c802 <isr+0x24a>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    c7f2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    c7f6:	065f      	lsls	r7, r3, #25
    c7f8:	d51f      	bpl.n	c83a <isr+0x282>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    c7fa:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    c7fe:	0658      	lsls	r0, r3, #25
    c800:	d445      	bmi.n	c88e <isr+0x2d6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    c802:	7830      	ldrb	r0, [r6, #0]
    c804:	f000 030f 	and.w	r3, r0, #15
    c808:	2b05      	cmp	r3, #5
    c80a:	d1c5      	bne.n	c798 <isr+0x1e0>
    c80c:	7873      	ldrb	r3, [r6, #1]
    c80e:	2b22      	cmp	r3, #34	; 0x22
    c810:	d1c2      	bne.n	c798 <isr+0x1e0>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    c812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c814:	5ce3      	ldrb	r3, [r4, r3]
    c816:	f003 030f 	and.w	r3, r3, #15
    c81a:	2b01      	cmp	r3, #1
    c81c:	f040 8216 	bne.w	cc4c <isr+0x694>
					    ci->connect_ind.init_addr,
    c820:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    c822:	aa10      	add	r2, sp, #64	; 0x40
    c824:	4639      	mov	r1, r7
    c826:	f3c0 1080 	ubfx	r0, r0, #6, #1
    c82a:	f002 fdf1 	bl	f410 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    c82e:	2800      	cmp	r0, #0
    c830:	d13a      	bne.n	c8a8 <isr+0x2f0>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    c832:	2000      	movs	r0, #0
    c834:	e048      	b.n	c8c8 <isr+0x310>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    c836:	20ff      	movs	r0, #255	; 0xff
    c838:	e7c6      	b.n	c7c8 <isr+0x210>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    c83a:	aa10      	add	r2, sp, #64	; 0x40
    c83c:	1cb1      	adds	r1, r6, #2
    c83e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    c842:	f002 fde5 	bl	f410 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    c846:	2800      	cmp	r0, #0
    c848:	d0d7      	beq.n	c7fa <isr+0x242>
	return (adv->tx_addr == sr->rx_addr) &&
    c84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c84c:	7832      	ldrb	r2, [r6, #0]
    c84e:	5ce3      	ldrb	r3, [r4, r3]
    c850:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c854:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    c858:	d1d3      	bne.n	c802 <isr+0x24a>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    c85a:	2206      	movs	r2, #6
    c85c:	f106 0108 	add.w	r1, r6, #8
    c860:	1ca8      	adds	r0, r5, #2
    c862:	f7f5 f9b6 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    c866:	2800      	cmp	r0, #0
    c868:	d1cb      	bne.n	c802 <isr+0x24a>
		_radio.state = STATE_CLOSE;
    c86a:	2303      	movs	r3, #3
    c86c:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    c86e:	f003 fb57 	bl	ff20 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    c872:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    c876:	2327      	movs	r3, #39	; 0x27
    c878:	fb03 4000 	mla	r0, r3, r0, r4
    c87c:	307b      	adds	r0, #123	; 0x7b
    c87e:	f003 fabf 	bl	fe00 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    c882:	f003 fafb 	bl	fe7c <radio_is_ready>
    c886:	2800      	cmp	r0, #0
    c888:	f43f af3c 	beq.w	c704 <isr+0x14c>
    c88c:	e6ec      	b.n	c668 <isr+0xb0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    c88e:	f1b9 0f00 	cmp.w	r9, #0
    c892:	d1da      	bne.n	c84a <isr+0x292>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    c894:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c898:	f002 fc54 	bl	f144 <ctrl_irk_whitelisted>
    c89c:	2800      	cmp	r0, #0
    c89e:	d1d4      	bne.n	c84a <isr+0x292>
    c8a0:	e7af      	b.n	c802 <isr+0x24a>
    c8a2:	bf00      	nop
    c8a4:	20000660 	.word	0x20000660
		       isr_adv_ci_adva_check(adv, ci) &&
    c8a8:	4631      	mov	r1, r6
    c8aa:	4628      	mov	r0, r5
    c8ac:	f7fc fb1a 	bl	8ee4 <isr_adv_ci_adva_check>
					    rl_idx) &&
    c8b0:	2800      	cmp	r0, #0
    c8b2:	d0be      	beq.n	c832 <isr+0x27a>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    c8b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    c8b8:	2bff      	cmp	r3, #255	; 0xff
    c8ba:	f000 81b4 	beq.w	cc26 <isr+0x66e>
		return rl_idx == _radio.advertiser.rl_idx;
    c8be:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    c8c2:	1ac1      	subs	r1, r0, r3
    c8c4:	4248      	negs	r0, r1
    c8c6:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    c8c8:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    c8cc:	2800      	cmp	r0, #0
    c8ce:	f43f af63 	beq.w	c798 <isr+0x1e0>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    c8d2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    c8d6:	b133      	cbz	r3, c8e6 <isr+0x32e>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    c8d8:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    c8dc:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    c8e0:	429a      	cmp	r2, r3
    c8e2:	f47f af59 	bne.w	c798 <isr+0x1e0>
    c8e6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    c8ea:	2b00      	cmp	r3, #0
    c8ec:	f43f af54 	beq.w	c798 <isr+0x1e0>
			node_rx = packet_rx_reserve_get(4);
    c8f0:	2004      	movs	r0, #4
    c8f2:	f7fb fdaf 	bl	8454 <packet_rx_reserve_get>
		if (!node_rx) {
    c8f6:	4607      	mov	r7, r0
    c8f8:	2800      	cmp	r0, #0
    c8fa:	f43f af4d 	beq.w	c798 <isr+0x1e0>
		_radio.state = STATE_STOP;
    c8fe:	f04f 0904 	mov.w	r9, #4
    c902:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    c906:	f003 fa9b 	bl	fe40 <radio_disable>
		conn = _radio.advertiser.conn;
    c90a:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c90e:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    c912:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c914:	f44f 72aa 	mov.w	r2, #340	; 0x154
    c918:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    c91a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c91e:	f7f9 f944 	bl	5baa <mem_index_get>
		memcpy(&conn->access_addr[0],
    c922:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c926:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    c928:	2203      	movs	r2, #3
    c92a:	f106 0112 	add.w	r1, r6, #18
    c92e:	f105 0014 	add.w	r0, r5, #20
    c932:	f7f5 f963 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    c936:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    c93a:	464a      	mov	r2, r9
    c93c:	f106 010e 	add.w	r1, r6, #14
    c940:	4650      	mov	r0, sl
    c942:	f7f5 f95b 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    c946:	2205      	movs	r2, #5
    c948:	f106 011e 	add.w	r1, r6, #30
    c94c:	4640      	mov	r0, r8
    c94e:	f7f5 f955 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c952:	2105      	movs	r1, #5
    c954:	4640      	mov	r0, r8
    c956:	f7f9 fa9b 	bl	5e90 <util_ones_count_get>
		conn->data_chan_count =
    c95a:	7f6b      	ldrb	r3, [r5, #29]
    c95c:	f360 0305 	bfi	r3, r0, #0, #6
    c960:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    c962:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    c966:	f3c3 0304 	ubfx	r3, r3, #0, #5
    c96a:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    c96c:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    c96e:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    c970:	f240 48e2 	movw	r8, #1250	; 0x4e2
    c974:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    c978:	7ef2      	ldrb	r2, [r6, #27]
    c97a:	7eb3      	ldrb	r3, [r6, #26]
    c97c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    c980:	4651      	mov	r1, sl
    c982:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    c984:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    c986:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    c98a:	f7f5 f937 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    c98e:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c990:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    c992:	f242 7210 	movw	r2, #10000	; 0x2710
    c996:	fb02 8303 	mla	r3, r2, r3, r8
    c99a:	3b01      	subs	r3, #1
    c99c:	fbb3 f3f8 	udiv	r3, r3, r8
    c9a0:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    c9a2:	4bc3      	ldr	r3, [pc, #780]	; (ccb0 <isr+0x6f8>)
    c9a4:	4443      	add	r3, r8
    c9a6:	fbb3 f3f8 	udiv	r3, r3, r8
    c9aa:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c9ae:	4bc1      	ldr	r3, [pc, #772]	; (ccb4 <isr+0x6fc>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c9b0:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c9b2:	4443      	add	r3, r8
    c9b4:	fbb3 f3f8 	udiv	r3, r3, r8
    c9b8:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c9ba:	4282      	cmp	r2, r0
    c9bc:	4613      	mov	r3, r2
    c9be:	bfc4      	itt	gt
    c9c0:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    c9c4:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c9c6:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c9ca:	bfc4      	itt	gt
    c9cc:	18d2      	addgt	r2, r2, r3
    c9ce:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    c9d0:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c9d2:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    c9d6:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    c9d8:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    c9da:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    c9dc:	2300      	movs	r3, #0
    c9de:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    c9e0:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    c9e2:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    c9e6:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    c9e8:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    c9ec:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    c9f0:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    c9f2:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    c9f6:	464a      	mov	r2, r9
    c9f8:	f107 001b 	add.w	r0, r7, #27
    c9fc:	f7f5 f8fe 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    ca00:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ca04:	f107 030e 	add.w	r3, r7, #14
    ca08:	28ff      	cmp	r0, #255	; 0xff
    ca0a:	930b      	str	r3, [sp, #44]	; 0x2c
    ca0c:	f106 0a02 	add.w	sl, r6, #2
    ca10:	f107 0b14 	add.w	fp, r7, #20
    ca14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca16:	f000 8138 	beq.w	cc8a <isr+0x6d2>
			ll_rl_id_addr_get(rl_idx,
    ca1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca1c:	f107 010d 	add.w	r1, r7, #13
    ca20:	f002 fcd6 	bl	f3d0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ca24:	7b7b      	ldrb	r3, [r7, #13]
    ca26:	3302      	adds	r3, #2
    ca28:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ca2a:	464a      	mov	r2, r9
    ca2c:	4651      	mov	r1, sl
    ca2e:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ca30:	f7f5 f8e4 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    ca34:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    ca36:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    ca3a:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    ca3c:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    ca40:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    ca42:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    ca46:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ca4a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ca4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ca52:	8c28      	ldrh	r0, [r5, #32]
    ca54:	f7fc fab6 	bl	8fc4 <rx_fc_lock>
		packet_rx_enqueue();
    ca58:	f7fc fb66 	bl	9128 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ca5c:	2003      	movs	r0, #3
    ca5e:	f7fb fcf9 	bl	8454 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ca62:	2800      	cmp	r0, #0
    ca64:	f43f ae00 	beq.w	c668 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    ca68:	8c2b      	ldrh	r3, [r5, #32]
    ca6a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    ca6c:	230b      	movs	r3, #11
    ca6e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    ca70:	7833      	ldrb	r3, [r6, #0]
    ca72:	f013 0320 	ands.w	r3, r3, #32
    ca76:	d00e      	beq.n	ca96 <isr+0x4de>
					((u16_t)conn->access_addr[1] << 8) |
    ca78:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    ca7a:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    ca7c:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    ca7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    ca82:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    ca84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    ca88:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    ca8a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    ca8c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    ca90:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    ca92:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ca94:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ca96:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ca98:	f7fc fb46 	bl	9128 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    ca9c:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    caa0:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    caa4:	4984      	ldr	r1, [pc, #528]	; (ccb8 <isr+0x700>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    caa6:	0952      	lsrs	r2, r2, #5
    caa8:	f362 0384 	bfi	r3, r2, #2, #3
    caac:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    cab0:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    cab4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    cab8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    cabc:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    cabe:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    cac2:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    cac6:	4a7d      	ldr	r2, [pc, #500]	; (ccbc <isr+0x704>)
    cac8:	f203 233f 	addw	r3, r3, #575	; 0x23f
    cacc:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    cad0:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    cad2:	ea4f 0358 	mov.w	r3, r8, lsr #1
    cad6:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    cad8:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    cada:	7d73      	ldrb	r3, [r6, #21]
    cadc:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    cae0:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    cae2:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    cae6:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    cae8:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    caea:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    caec:	4638      	mov	r0, r7
    caee:	f003 f994 	bl	fe1a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    caf2:	4973      	ldr	r1, [pc, #460]	; (ccc0 <isr+0x708>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    caf4:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    caf6:	f200 4052 	addw	r0, r0, #1106	; 0x452
    cafa:	a36b      	add	r3, pc, #428	; (adr r3, cca8 <isr+0x6f0>)
    cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb00:	fba0 0101 	umull	r0, r1, r0, r1
    cb04:	f7f3 fb86 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    cb08:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    cb0c:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    cb0e:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    cb10:	4293      	cmp	r3, r2
    cb12:	bf38      	it	cc
    cb14:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    cb16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    cb1a:	469a      	mov	sl, r3
		conn_interval_us -=
    cb1c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    cb1e:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    cb20:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    cb22:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    cb24:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    cb28:	f003 fb6e 	bl	10208 <radio_tmr_end_get>
    cb2c:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    cb2e:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cb30:	4639      	mov	r1, r7
		conn_offset_us +=
    cb32:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cb36:	4638      	mov	r0, r7
    cb38:	f003 f96d 	bl	fe16 <radio_tx_chain_delay_get>
    cb3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb3e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    cb42:	4499      	add	r9, r3
    cb44:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    cb48:	eba9 030b 	sub.w	r3, r9, fp
    cb4c:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb4e:	f240 4383 	movw	r3, #1155	; 0x483
    cb52:	9300      	str	r3, [sp, #0]
    cb54:	2205      	movs	r2, #5
    cb56:	4b5b      	ldr	r3, [pc, #364]	; (ccc4 <isr+0x70c>)
    cb58:	f8df b164 	ldr.w	fp, [pc, #356]	; ccc0 <isr+0x708>
    cb5c:	4639      	mov	r1, r7
    cb5e:	4638      	mov	r0, r7
    cb60:	f7f9 fefe 	bl	6960 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    cb64:	f240 4184 	movw	r1, #1156	; 0x484
    cb68:	f7fc fdd4 	bl	9714 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    cb6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb6e:	5ce3      	ldrb	r3, [r4, r3]
    cb70:	f003 030f 	and.w	r3, r3, #15
    cb74:	2b01      	cmp	r3, #1
    cb76:	d106      	bne.n	cb86 <isr+0x5ce>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb78:	9700      	str	r7, [sp, #0]
    cb7a:	463b      	mov	r3, r7
    cb7c:	2203      	movs	r2, #3
    cb7e:	4639      	mov	r1, r7
    cb80:	4638      	mov	r0, r7
    cb82:	f7f9 feed 	bl	6960 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    cb86:	fba8 890b 	umull	r8, r9, r8, fp
    cb8a:	a347      	add	r3, pc, #284	; (adr r3, cca8 <isr+0x6f0>)
    cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb90:	4640      	mov	r0, r8
    cb92:	4649      	mov	r1, r9
    cb94:	f7f3 fb3e 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb98:	f895 3020 	ldrb.w	r3, [r5, #32]
    cb9c:	68a4      	ldr	r4, [r4, #8]
    cb9e:	9506      	str	r5, [sp, #24]
    cba0:	3307      	adds	r3, #7
    cba2:	b2db      	uxtb	r3, r3
    cba4:	930a      	str	r3, [sp, #40]	; 0x28
    cba6:	f240 439b 	movw	r3, #1179	; 0x49b
    cbaa:	9308      	str	r3, [sp, #32]
    cbac:	4b46      	ldr	r3, [pc, #280]	; (ccc8 <isr+0x710>)
    cbae:	9307      	str	r3, [sp, #28]
    cbb0:	4b46      	ldr	r3, [pc, #280]	; (cccc <isr+0x714>)
    cbb2:	9305      	str	r3, [sp, #20]
    cbb4:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    cbb6:	4a46      	ldr	r2, [pc, #280]	; (ccd0 <isr+0x718>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbb8:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    cbba:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbbc:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    cbbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cbc2:	2307      	movs	r3, #7
    cbc4:	2100      	movs	r1, #0
    cbc6:	4343      	muls	r3, r0
    cbc8:	fb02 3301 	mla	r3, r2, r1, r3
    cbcc:	fba0 1202 	umull	r1, r2, r0, r2
    cbd0:	441a      	add	r2, r3
    cbd2:	4608      	mov	r0, r1
    cbd4:	ebb8 0000 	subs.w	r0, r8, r0
    cbd8:	4611      	mov	r1, r2
    cbda:	f04f 0300 	mov.w	r3, #0
    cbde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cbe2:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbe6:	2500      	movs	r5, #0
    cbe8:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    cbea:	f7f3 fb13 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cbee:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbf0:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cbf2:	a32d      	add	r3, pc, #180	; (adr r3, cca8 <isr+0x6f0>)
    cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbf8:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cbfc:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc00:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    cc02:	f7f3 fb07 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cc06:	eba4 040a 	sub.w	r4, r4, sl
    cc0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cc0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc10:	9000      	str	r0, [sp, #0]
    cc12:	4623      	mov	r3, r4
		ticker_status =
    cc14:	4629      	mov	r1, r5
    cc16:	4628      	mov	r0, r5
    cc18:	f7f9 fe04 	bl	6824 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cc1c:	f030 0302 	bics.w	r3, r0, #2
    cc20:	f47f ad22 	bne.w	c668 <isr+0xb0>
    cc24:	e56e      	b.n	c704 <isr+0x14c>
	return (adv->rx_addr == ci->tx_addr) &&
    cc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc28:	5ce2      	ldrb	r2, [r4, r3]
    cc2a:	7833      	ldrb	r3, [r6, #0]
    cc2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cc30:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    cc34:	f47f adfd 	bne.w	c832 <isr+0x27a>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    cc38:	2206      	movs	r2, #6
    cc3a:	4639      	mov	r1, r7
    cc3c:	f105 0008 	add.w	r0, r5, #8
    cc40:	f7f4 ffc7 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    cc44:	fab0 f080 	clz	r0, r0
    cc48:	0940      	lsrs	r0, r0, #5
    cc4a:	e63d      	b.n	c8c8 <isr+0x310>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    cc4c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cc50:	09db      	lsrs	r3, r3, #7
    cc52:	d00d      	beq.n	cc70 <isr+0x6b8>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    cc54:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    cc58:	09db      	lsrs	r3, r3, #7
    cc5a:	f43f adea 	beq.w	c832 <isr+0x27a>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    cc5e:	f1b9 0f00 	cmp.w	r9, #0
    cc62:	d10d      	bne.n	cc80 <isr+0x6c8>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    cc64:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    cc68:	f002 fa6c 	bl	f144 <ctrl_irk_whitelisted>
    cc6c:	b940      	cbnz	r0, cc80 <isr+0x6c8>
    cc6e:	e5e0      	b.n	c832 <isr+0x27a>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    cc70:	aa10      	add	r2, sp, #64	; 0x40
    cc72:	1cb1      	adds	r1, r6, #2
    cc74:	f3c0 1080 	ubfx	r0, r0, #6, #1
    cc78:	f002 fbca 	bl	f410 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    cc7c:	2800      	cmp	r0, #0
    cc7e:	d0e9      	beq.n	cc54 <isr+0x69c>
	       isr_adv_ci_adva_check(adv, ci);
    cc80:	4631      	mov	r1, r6
    cc82:	4628      	mov	r0, r5
    cc84:	f7fc f92e 	bl	8ee4 <isr_adv_ci_adva_check>
    cc88:	e61e      	b.n	c8c8 <isr+0x310>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    cc8a:	4619      	mov	r1, r3
    cc8c:	464a      	mov	r2, r9
    cc8e:	4658      	mov	r0, fp
    cc90:	f7f4 ffe0 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    cc94:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cc96:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    cc98:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cc9c:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cc9e:	464a      	mov	r2, r9
    cca0:	4651      	mov	r1, sl
    cca2:	e6c5      	b.n	ca30 <isr+0x478>
    cca4:	f3af 8000 	nop.w
    cca8:	1afd498d 	.word	0x1afd498d
    ccac:	00000007 	.word	0x00000007
    ccb0:	026259ff 	.word	0x026259ff
    ccb4:	01c9c37f 	.word	0x01c9c37f
    ccb8:	0001299e 	.word	0x0001299e
    ccbc:	000f4240 	.word	0x000f4240
    ccc0:	3b9aca00 	.word	0x3b9aca00
    ccc4:	00009715 	.word	0x00009715
    ccc8:	00009745 	.word	0x00009745
    cccc:	0000ae5d 	.word	0x0000ae5d
    ccd0:	1afd498d 	.word	0x1afd498d
		rl_idx = devmatch_ok ?
    ccd4:	f1b9 0f00 	cmp.w	r9, #0
    ccd8:	d01c      	beq.n	cd14 <isr+0x75c>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    ccda:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    ccde:	4641      	mov	r1, r8
    cce0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    cce4:	f002 f9f2 	bl	f0cc <ctrl_rl_idx>
    cce8:	4680      	mov	r8, r0
		if (crc_ok &&
    ccea:	b147      	cbz	r7, ccfe <isr+0x746>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ccec:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ccf0:	06da      	lsls	r2, r3, #27
    ccf2:	d519      	bpl.n	cd28 <isr+0x770>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ccf4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ccf8:	06db      	lsls	r3, r3, #27
    ccfa:	f100 81c9 	bmi.w	d090 <isr+0xad8>
			_radio.state = STATE_CLOSE;
    ccfe:	2303      	movs	r3, #3
    cd00:	7523      	strb	r3, [r4, #20]
			radio_disable();
    cd02:	f003 f89d 	bl	fe40 <radio_disable>
			_radio.scanner.state = 0;
    cd06:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    cd0a:	f36f 0341 	bfc	r3, #1, #1
    cd0e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    cd12:	e4f7      	b.n	c704 <isr+0x14c>
		rl_idx = devmatch_ok ?
    cd14:	f1ba 0f00 	cmp.w	sl, #0
    cd18:	d003      	beq.n	cd22 <isr+0x76a>
    cd1a:	4658      	mov	r0, fp
    cd1c:	f002 f9f6 	bl	f10c <ctrl_rl_irk_idx>
    cd20:	e7e2      	b.n	cce8 <isr+0x730>
    cd22:	f04f 08ff 	mov.w	r8, #255	; 0xff
    cd26:	e7e0      	b.n	ccea <isr+0x732>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    cd28:	f1b9 0f00 	cmp.w	r9, #0
    cd2c:	d005      	beq.n	cd3a <isr+0x782>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    cd2e:	4641      	mov	r1, r8
    cd30:	4650      	mov	r0, sl
    cd32:	f002 fb2f 	bl	f394 <ctrl_rl_idx_allowed>
    cd36:	2800      	cmp	r0, #0
    cd38:	d0dc      	beq.n	ccf4 <isr+0x73c>
	bool dir_report = false;
    cd3a:	2300      	movs	r3, #0
    cd3c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    cd40:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    cd44:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    cd48:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    cd4c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    cd50:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    cd54:	2b00      	cmp	r3, #0
    cd56:	f000 81c7 	beq.w	d0e8 <isr+0xb30>
    cd5a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    cd5e:	b133      	cbz	r3, cd6e <isr+0x7b6>
				      (_radio.fc_req == _radio.fc_ack)) &&
    cd60:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    cd64:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    cd68:	429a      	cmp	r2, r3
    cd6a:	f040 81bd 	bne.w	d0e8 <isr+0xb30>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    cd6e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    cd72:	f3c3 1000 	ubfx	r0, r3, #4, #1
    cd76:	2800      	cmp	r0, #0
    cd78:	f000 81a8 	beq.w	d0cc <isr+0xb14>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    cd7c:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    cd80:	f010 000f 	ands.w	r0, r0, #15
    cd84:	f040 8221 	bne.w	d1ca <isr+0xc12>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    cd88:	f003 fa3e 	bl	10208 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    cd8c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    cd90:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    cd94:	48c8      	ldr	r0, [pc, #800]	; (d0b8 <isr+0xb00>)
    cd96:	2207      	movs	r2, #7
    cd98:	fba3 0100 	umull	r0, r1, r3, r0
    cd9c:	fb02 1103 	mla	r1, r2, r3, r1
    cda0:	a3c1      	add	r3, pc, #772	; (adr r3, d0a8 <isr+0xaf0>)
    cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
    cda6:	f7f3 fa35 	bl	214 <__aeabi_uldivmod>
    cdaa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    cdae:	4287      	cmp	r7, r0
    cdb0:	f080 819a 	bcs.w	d0e8 <isr+0xb30>
			node_rx = packet_rx_reserve_get(4);
    cdb4:	2004      	movs	r0, #4
    cdb6:	f7fb fb4d 	bl	8454 <packet_rx_reserve_get>
		if (node_rx == 0) {
    cdba:	4607      	mov	r7, r0
    cdbc:	2800      	cmp	r0, #0
    cdbe:	d09e      	beq.n	ccfe <isr+0x746>
		_radio.state = STATE_STOP;
    cdc0:	2304      	movs	r3, #4
    cdc2:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    cdc4:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    cdc6:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    cdca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    cdce:	f003 f88d 	bl	feec <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    cdd2:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    cdd4:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    cdd8:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    cddc:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    cdde:	f899 3008 	ldrb.w	r3, [r9, #8]
    cde2:	7802      	ldrb	r2, [r0, #0]
    cde4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cde8:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    cdec:	2322      	movs	r3, #34	; 0x22
    cdee:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    cdf0:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    cdf2:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    cdf4:	4640      	mov	r0, r8
    cdf6:	f002 f94b 	bl	f090 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    cdfa:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    cdfe:	4601      	mov	r1, r0
    ce00:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ce02:	f013 0f01 	tst.w	r3, #1
    ce06:	f810 3b02 	ldrb.w	r3, [r0], #2
    ce0a:	f000 81e8 	beq.w	d1de <isr+0xc26>
    ce0e:	2900      	cmp	r1, #0
    ce10:	f000 81e5 	beq.w	d1de <isr+0xc26>
			pdu_adv_tx->tx_addr = 1;
    ce14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ce18:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ce1a:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ce1c:	f7f4 feee 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    ce20:	f105 0308 	add.w	r3, r5, #8
    ce24:	4618      	mov	r0, r3
    ce26:	2206      	movs	r2, #6
    ce28:	f109 010a 	add.w	r1, r9, #10
    ce2c:	930a      	str	r3, [sp, #40]	; 0x28
    ce2e:	f7f4 fee5 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    ce32:	2204      	movs	r2, #4
    ce34:	f106 0110 	add.w	r1, r6, #16
    ce38:	f105 000e 	add.w	r0, r5, #14
    ce3c:	f7f4 fede 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    ce40:	2203      	movs	r2, #3
    ce42:	f106 0114 	add.w	r1, r6, #20
    ce46:	f105 0012 	add.w	r0, r5, #18
    ce4a:	f7f4 fed7 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    ce4e:	2301      	movs	r3, #1
    ce50:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    ce52:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    ce56:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ce5a:	4353      	muls	r3, r2
    ce5c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ce5e:	f003 f9d3 	bl	10208 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    ce62:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    ce64:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    ce68:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ce6a:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    ce6e:	bfd8      	it	le
    ce70:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    ce74:	f1bb 0f00 	cmp.w	fp, #0
    ce78:	f040 81bc 	bne.w	d1f4 <isr+0xc3c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    ce7c:	f885 b016 	strb.w	fp, [r5, #22]
    ce80:	f885 b017 	strb.w	fp, [r5, #23]
    ce84:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ce86:	2100      	movs	r1, #0
    ce88:	4608      	mov	r0, r1
    ce8a:	f002 ffbf 	bl	fe0c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ce8e:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ce90:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ce94:	4608      	mov	r0, r1
    ce96:	f002 ffbe 	bl	fe16 <radio_tx_chain_delay_get>
    ce9a:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    ce9e:	f100 031e 	add.w	r3, r0, #30
    cea2:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    cea4:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    cea8:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    ceaa:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    ceae:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    ceb0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    ceb4:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    ceb6:	f106 0117 	add.w	r1, r6, #23
    ceba:	2205      	movs	r2, #5
    cebc:	f105 001e 	add.w	r0, r5, #30
    cec0:	f7f4 fe9c 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    cec4:	7fb2      	ldrb	r2, [r6, #30]
    cec6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ceca:	f362 0304 	bfi	r3, r2, #0, #5
    cece:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    ced2:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    ced6:	f362 1347 	bfi	r3, r2, #5, #3
    ceda:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    cede:	f003 f81f 	bl	ff20 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    cee2:	4628      	mov	r0, r5
    cee4:	f002 ff8c 	bl	fe00 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    cee8:	f002 ffc8 	bl	fe7c <radio_is_ready>
    ceec:	4683      	mov	fp, r0
    ceee:	2800      	cmp	r0, #0
    cef0:	f47f abba 	bne.w	c668 <isr+0xb0>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cef4:	f44f 72aa 	mov.w	r2, #340	; 0x154
    cef8:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    cefc:	4630      	mov	r0, r6
    cefe:	f7f8 fe54 	bl	5baa <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    cf02:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cf04:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cf06:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    cf0a:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    cf0e:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cf12:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    cf14:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    cf18:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    cf1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cf1e:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    cf20:	2206      	movs	r2, #6
    cf22:	f107 001b 	add.w	r0, r7, #27
    cf26:	f7f4 fe69 	bl	1bfc <memcpy>
    cf2a:	f107 0b0e 	add.w	fp, r7, #14
    cf2e:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    cf32:	f1ba 0f00 	cmp.w	sl, #0
    cf36:	f000 816d 	beq.w	d214 <isr+0xc5c>
    cf3a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    cf3e:	f000 8169 	beq.w	d214 <isr+0xc5c>
			ll_rl_id_addr_get(rl_idx,
    cf42:	465a      	mov	r2, fp
    cf44:	f107 010d 	add.w	r1, r7, #13
    cf48:	4640      	mov	r0, r8
    cf4a:	930d      	str	r3, [sp, #52]	; 0x34
    cf4c:	f002 fa40 	bl	f3d0 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    cf50:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    cf52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf54:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    cf56:	3202      	adds	r2, #2
    cf58:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    cf5a:	4618      	mov	r0, r3
    cf5c:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cf5e:	f7f4 fe4d 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    cf62:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    cf66:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    cf6a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    cf6e:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    cf72:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    cf76:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    cf7a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    cf7e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    cf82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    cf86:	8c30      	ldrh	r0, [r6, #32]
    cf88:	f7fc f81c 	bl	8fc4 <rx_fc_lock>
		packet_rx_enqueue();
    cf8c:	f7fc f8cc 	bl	9128 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    cf90:	2003      	movs	r0, #3
    cf92:	f7fb fa5f 	bl	8454 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    cf96:	2800      	cmp	r0, #0
    cf98:	f43f ab66 	beq.w	c668 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    cf9c:	8c33      	ldrh	r3, [r6, #32]
    cf9e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    cfa0:	230b      	movs	r3, #11
    cfa2:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    cfa4:	f899 3008 	ldrb.w	r3, [r9, #8]
    cfa8:	f013 0320 	ands.w	r3, r3, #32
    cfac:	d00e      	beq.n	cfcc <isr+0xa14>
					((u16_t)conn->access_addr[1] << 8) |
    cfae:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    cfb0:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    cfb2:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    cfb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    cfb8:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    cfba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    cfbe:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    cfc0:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    cfc2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    cfc6:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    cfc8:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    cfca:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    cfcc:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    cfce:	f7fc f8ab 	bl	9128 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    cfd2:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    cfd4:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    cfd8:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    cfda:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    cfde:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    cfe0:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cfe2:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    cfe6:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    cfe8:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cfea:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    cfee:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cff0:	4629      	mov	r1, r5
    cff2:	9300      	str	r3, [sp, #0]
    cff4:	4628      	mov	r0, r5
    cff6:	4b31      	ldr	r3, [pc, #196]	; (d0bc <isr+0xb04>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    cff8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; d0c8 <isr+0xb10>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    cffc:	bf38      	it	cc
    cffe:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d000:	f7f9 fcae 	bl	6960 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    d004:	f240 6139 	movw	r1, #1593	; 0x639
    d008:	f7fc fb6c 	bl	96e4 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d00c:	462b      	mov	r3, r5
    d00e:	2204      	movs	r2, #4
    d010:	4629      	mov	r1, r5
    d012:	9500      	str	r5, [sp, #0]
    d014:	4628      	mov	r0, r5
    d016:	f7f9 fca3 	bl	6960 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d01c:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d020:	68a3      	ldr	r3, [r4, #8]
    d022:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    d026:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d028:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    d02c:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    d030:	9308      	str	r3, [sp, #32]
    d032:	4b23      	ldr	r3, [pc, #140]	; (d0c0 <isr+0xb08>)
    d034:	9307      	str	r3, [sp, #28]
    d036:	4b23      	ldr	r3, [pc, #140]	; (d0c4 <isr+0xb0c>)
    d038:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d03a:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    d03c:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d03e:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d040:	4640      	mov	r0, r8
    d042:	a31b      	add	r3, pc, #108	; (adr r3, d0b0 <isr+0xaf8>)
    d044:	e9d3 2300 	ldrd	r2, r3, [r3]
    d048:	4649      	mov	r1, r9
		ticker_status =
    d04a:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    d04c:	f7f3 f8e2 	bl	214 <__aeabi_uldivmod>
    d050:	4610      	mov	r0, r2
    d052:	4619      	mov	r1, r3
    d054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d058:	2300      	movs	r3, #0
    d05a:	f7f3 f8db 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d05e:	a314      	add	r3, pc, #80	; (adr r3, d0b0 <isr+0xaf8>)
    d060:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d064:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d066:	4649      	mov	r1, r9
    d068:	4640      	mov	r0, r8
    d06a:	f7f3 f8d3 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    d06e:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    d070:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    d072:	a30f      	add	r3, pc, #60	; (adr r3, d0b0 <isr+0xaf8>)
    d074:	e9d3 2300 	ldrd	r2, r3, [r3]
    d078:	fba1 010a 	umull	r0, r1, r1, sl
    d07c:	f7f3 f8ca 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d080:	3407      	adds	r4, #7
		ticker_status =
    d082:	b2e4      	uxtb	r4, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d084:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    d088:	9000      	str	r0, [sp, #0]
    d08a:	465b      	mov	r3, fp
    d08c:	4622      	mov	r2, r4
    d08e:	e5c1      	b.n	cc14 <isr+0x65c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    d090:	f1b9 0f00 	cmp.w	r9, #0
    d094:	f47f ae51 	bne.w	cd3a <isr+0x782>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    d098:	4640      	mov	r0, r8
    d09a:	f002 f853 	bl	f144 <ctrl_irk_whitelisted>
		if (crc_ok &&
    d09e:	2800      	cmp	r0, #0
    d0a0:	f43f ae2d 	beq.w	ccfe <isr+0x746>
    d0a4:	e649      	b.n	cd3a <isr+0x782>
    d0a6:	bf00      	nop
    d0a8:	3b9aca00 	.word	0x3b9aca00
    d0ac:	00000000 	.word	0x00000000
    d0b0:	1afd498d 	.word	0x1afd498d
    d0b4:	00000007 	.word	0x00000007
    d0b8:	1afd498d 	.word	0x1afd498d
    d0bc:	000096e5 	.word	0x000096e5
    d0c0:	00009745 	.word	0x00009745
    d0c4:	0000ae59 	.word	0x0000ae59
    d0c8:	3b9aca00 	.word	0x3b9aca00
	if (rl_idx != FILTER_IDX_NONE) {
    d0cc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    d0d0:	d069      	beq.n	d1a6 <isr+0xbee>
		return (rl_idx == _radio.scanner.rl_idx);
    d0d2:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    d0d6:	eba0 0e08 	sub.w	lr, r0, r8
    d0da:	f1de 0000 	rsbs	r0, lr, #0
    d0de:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    d0e2:	2800      	cmp	r0, #0
    d0e4:	f47f ae4a 	bne.w	cd7c <isr+0x7c4>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d0e8:	f899 0008 	ldrb.w	r0, [r9, #8]
    d0ec:	f010 000f 	ands.w	r0, r0, #15
    d0f0:	d002      	beq.n	d0f8 <isr+0xb40>
    d0f2:	2806      	cmp	r0, #6
    d0f4:	f040 80ba 	bne.w	d26c <isr+0xcb4>
		 (_radio.scanner.type != 0) &&
    d0f8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    d0fc:	071f      	lsls	r7, r3, #28
    d0fe:	f140 809f 	bpl.w	d240 <isr+0xc88>
		 (_radio.scanner.type != 0) &&
    d102:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    d106:	2a00      	cmp	r2, #0
    d108:	f040 809a 	bne.w	d240 <isr+0xc88>
		err = isr_rx_scan_report(rssi_ready,
    d10c:	f1ba 0f00 	cmp.w	sl, #0
    d110:	bf14      	ite	ne
    d112:	4641      	movne	r1, r8
    d114:	21ff      	moveq	r1, #255	; 0xff
    d116:	4628      	mov	r0, r5
    d118:	f7fc f836 	bl	9188 <isr_rx_scan_report>
		if (err) {
    d11c:	2800      	cmp	r0, #0
    d11e:	f47f adee 	bne.w	ccfe <isr+0x746>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    d122:	f002 fee3 	bl	feec <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    d126:	7803      	ldrb	r3, [r0, #0]
    d128:	2203      	movs	r2, #3
    d12a:	f362 0303 	bfi	r3, r2, #0, #4
    d12e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d130:	f899 3008 	ldrb.w	r3, [r9, #8]
    d134:	7802      	ldrb	r2, [r0, #0]
    d136:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d13a:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    d13e:	230c      	movs	r3, #12
    d140:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    d142:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    d144:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    d146:	4640      	mov	r0, r8
    d148:	f001 ffa2 	bl	f090 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    d14c:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    d150:	4601      	mov	r1, r0
    d152:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    d154:	f013 0f01 	tst.w	r3, #1
    d158:	f810 3b02 	ldrb.w	r3, [r0], #2
    d15c:	d067      	beq.n	d22e <isr+0xc76>
    d15e:	2900      	cmp	r1, #0
    d160:	d065      	beq.n	d22e <isr+0xc76>
			pdu_adv_tx->tx_addr = 1;
    d162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d166:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d168:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d16a:	f7f4 fd47 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    d16e:	2206      	movs	r2, #6
    d170:	f109 010a 	add.w	r1, r9, #10
    d174:	f105 0008 	add.w	r0, r5, #8
    d178:	f7f4 fd40 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
    d17c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    d180:	f043 0302 	orr.w	r3, r3, #2
    d184:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    d188:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    d18a:	2302      	movs	r3, #2
    d18c:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    d18e:	f002 ff4d 	bl	1002c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    d192:	2000      	movs	r0, #0
    d194:	f002 feae 	bl	fef4 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    d198:	4628      	mov	r0, r5
    d19a:	f002 fe31 	bl	fe00 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    d19e:	f003 f821 	bl	101e4 <radio_tmr_end_capture>
    d1a2:	f7ff bb6e 	b.w	c882 <isr+0x2ca>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    d1a6:	f899 2008 	ldrb.w	r2, [r9, #8]
    d1aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d1ae:	f3c2 1280 	ubfx	r2, r2, #6, #1
    d1b2:	4293      	cmp	r3, r2
    d1b4:	d195      	bne.n	d0e2 <isr+0xb2a>
		(memcmp(&_radio.scanner.adv_addr[0],
    d1b6:	2206      	movs	r2, #6
    d1b8:	f109 010a 	add.w	r1, r9, #10
    d1bc:	48c9      	ldr	r0, [pc, #804]	; (d4e4 <isr+0xf2c>)
    d1be:	f7f4 fd08 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    d1c2:	fab0 f080 	clz	r0, r0
    d1c6:	0940      	lsrs	r0, r0, #5
    d1c8:	e78b      	b.n	d0e2 <isr+0xb2a>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    d1ca:	2801      	cmp	r0, #1
    d1cc:	d191      	bne.n	d0f2 <isr+0xb3a>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    d1ce:	2300      	movs	r3, #0
    d1d0:	4642      	mov	r2, r8
    d1d2:	4631      	mov	r1, r6
    d1d4:	f7fb feaa 	bl	8f2c <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    d1d8:	2800      	cmp	r0, #0
    d1da:	d085      	beq.n	d0e8 <isr+0xb30>
    d1dc:	e5d4      	b.n	cd88 <isr+0x7d0>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d1de:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    d1e2:	49c1      	ldr	r1, [pc, #772]	; (d4e8 <isr+0xf30>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d1e4:	09d2      	lsrs	r2, r2, #7
    d1e6:	f362 1386 	bfi	r3, r2, #6, #1
    d1ea:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    d1ec:	2206      	movs	r2, #6
    d1ee:	e615      	b.n	ce1c <isr+0x864>
				conn_space_us += conn_interval_us;
    d1f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d1f2:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    d1f4:	f1bb 0f00 	cmp.w	fp, #0
    d1f8:	dbfa      	blt.n	d1f0 <isr+0xc38>
    d1fa:	459b      	cmp	fp, r3
    d1fc:	d3f8      	bcc.n	d1f0 <isr+0xc38>
				(conn_space_us - conn_offset_us) / 1250;
    d1fe:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    d202:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d206:	fbb3 f3f2 	udiv	r3, r3, r2
    d20a:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    d20c:	7d6b      	ldrb	r3, [r5, #21]
    d20e:	3301      	adds	r3, #1
    d210:	756b      	strb	r3, [r5, #21]
    d212:	e638      	b.n	ce86 <isr+0x8ce>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    d214:	2206      	movs	r2, #6
    d216:	2100      	movs	r1, #0
    d218:	4618      	mov	r0, r3
    d21a:	f7f4 fd1b 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
    d21e:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d220:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    d222:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    d226:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    d228:	2206      	movs	r2, #6
    d22a:	4658      	mov	r0, fp
    d22c:	e697      	b.n	cf5e <isr+0x9a6>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d22e:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d232:	49ad      	ldr	r1, [pc, #692]	; (d4e8 <isr+0xf30>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    d234:	09d2      	lsrs	r2, r2, #7
    d236:	f362 1386 	bfi	r3, r2, #6, #1
    d23a:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    d23c:	2206      	movs	r2, #6
    d23e:	e794      	b.n	d16a <isr+0xbb2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d240:	b9a0      	cbnz	r0, d26c <isr+0xcb4>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    d242:	f899 3009 	ldrb.w	r3, [r9, #9]
    d246:	2b00      	cmp	r3, #0
    d248:	f43f ad59 	beq.w	ccfe <isr+0x746>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    d24c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    d250:	2b00      	cmp	r3, #0
    d252:	f47f ad54 	bne.w	ccfe <isr+0x746>
		err = isr_rx_scan_report(rssi_ready,
    d256:	f1ba 0f00 	cmp.w	sl, #0
    d25a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    d25e:	bf14      	ite	ne
    d260:	4641      	movne	r1, r8
    d262:	21ff      	moveq	r1, #255	; 0xff
    d264:	4628      	mov	r0, r5
    d266:	f7fb ff8f 	bl	9188 <isr_rx_scan_report>
    d26a:	e548      	b.n	ccfe <isr+0x746>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    d26c:	2801      	cmp	r0, #1
    d26e:	d00e      	beq.n	d28e <isr+0xcd6>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    d270:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    d274:	f003 020b 	and.w	r2, r3, #11
    d278:	2a02      	cmp	r2, #2
    d27a:	d0e2      	beq.n	d242 <isr+0xc8a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    d27c:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    d280:	2b07      	cmp	r3, #7
    d282:	d10d      	bne.n	d2a0 <isr+0xce8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    d284:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    d288:	0758      	lsls	r0, r3, #29
    d28a:	d1da      	bne.n	d242 <isr+0xc8a>
    d28c:	e537      	b.n	ccfe <isr+0x746>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    d28e:	ab10      	add	r3, sp, #64	; 0x40
    d290:	4642      	mov	r2, r8
    d292:	4631      	mov	r1, r6
    d294:	2000      	movs	r0, #0
    d296:	f7fb fe49 	bl	8f2c <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    d29a:	2800      	cmp	r0, #0
    d29c:	d1d1      	bne.n	d242 <isr+0xc8a>
    d29e:	e7e7      	b.n	d270 <isr+0xcb8>
		   (_radio.scanner.phy)) ||
    d2a0:	2b04      	cmp	r3, #4
    d2a2:	f47f ad2c 	bne.w	ccfe <isr+0x746>
		   (_radio.scanner.state != 0) &&
    d2a6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    d2aa:	0799      	lsls	r1, r3, #30
    d2ac:	f57f ad27 	bpl.w	ccfe <isr+0x746>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    d2b0:	f002 fe1c 	bl	feec <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    d2b4:	f899 3008 	ldrb.w	r3, [r9, #8]
    d2b8:	7802      	ldrb	r2, [r0, #0]
    d2ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d2be:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    d2c2:	f47f ad1c 	bne.w	ccfe <isr+0x746>
		(memcmp(&sreq->scan_req.adv_addr[0],
    d2c6:	2206      	movs	r2, #6
    d2c8:	f109 010a 	add.w	r1, r9, #10
    d2cc:	3008      	adds	r0, #8
    d2ce:	f7f4 fc80 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
    d2d2:	2800      	cmp	r0, #0
    d2d4:	d0b5      	beq.n	d242 <isr+0xc8a>
    d2d6:	e512      	b.n	ccfe <isr+0x746>
	_radio.packet_counter++;
    d2d8:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d2dc:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    d2e0:	3301      	adds	r3, #1
    d2e2:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    d2e6:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d2e8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    d2ec:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    d2f0:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d2f4:	2301      	movs	r3, #1
    d2f6:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    d2fa:	2f00      	cmp	r7, #0
    d2fc:	f000 82a2 	beq.w	d844 <isr+0x128c>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    d300:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    d304:	f898 1008 	ldrb.w	r1, [r8, #8]
    d308:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d30c:	f3c1 0180 	ubfx	r1, r1, #2, #1
    d310:	f003 0201 	and.w	r2, r3, #1
    d314:	4291      	cmp	r1, r2
    d316:	f000 8187 	beq.w	d628 <isr+0x1070>
		_radio.conn_curr->sn++;
    d31a:	f082 0201 	eor.w	r2, r2, #1
    d31e:	f362 0300 	bfi	r3, r2, #0, #1
    d322:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    d326:	7ce3      	ldrb	r3, [r4, #19]
    d328:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    d32a:	bf02      	ittt	eq
    d32c:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    d330:	f043 0301 	orreq.w	r3, r3, #1
    d334:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    d338:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d33c:	061a      	lsls	r2, r3, #24
    d33e:	f100 816e 	bmi.w	d61e <isr+0x1066>
			node_tx = _radio.conn_curr->pkt_tx_head;
    d342:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    d346:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    d34a:	1d30      	adds	r0, r6, #4
    d34c:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    d350:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    d354:	f1b9 0f00 	cmp.w	r9, #0
    d358:	f000 808e 	beq.w	d478 <isr+0xec0>
				if (_radio.conn_curr->enc_tx) {
    d35c:	069b      	lsls	r3, r3, #26
    d35e:	d50b      	bpl.n	d378 <isr+0xdc0>
					_radio.conn_curr->ccm_tx.counter++;
    d360:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    d364:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    d368:	f11b 0201 	adds.w	r2, fp, #1
    d36c:	f14c 0300 	adc.w	r3, ip, #0
    d370:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    d374:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    d378:	5c43      	ldrb	r3, [r0, r1]
    d37a:	f003 0303 	and.w	r3, r3, #3
    d37e:	2b03      	cmp	r3, #3
    d380:	d17a      	bne.n	d478 <isr+0xec0>
	switch (pdu_data_tx->llctrl.opcode) {
    d382:	f89a 3003 	ldrb.w	r3, [sl, #3]
    d386:	3b02      	subs	r3, #2
    d388:	2b16      	cmp	r3, #22
    d38a:	d875      	bhi.n	d478 <isr+0xec0>
    d38c:	e8df f013 	tbh	[pc, r3, lsl #1]
    d390:	00580017 	.word	0x00580017
    d394:	007400b0 	.word	0x007400b0
    d398:	00740074 	.word	0x00740074
    d39c:	00740074 	.word	0x00740074
    d3a0:	00810076 	.word	0x00810076
    d3a4:	00b70074 	.word	0x00b70074
    d3a8:	00740074 	.word	0x00740074
    d3ac:	00740074 	.word	0x00740074
    d3b0:	00740074 	.word	0x00740074
    d3b4:	007400c1 	.word	0x007400c1
    d3b8:	00e000d9 	.word	0x00e000d9
    d3bc:	010b      	.short	0x010b
		_radio.state = STATE_CLOSE;
    d3be:	2303      	movs	r3, #3
    d3c0:	7523      	strb	r3, [r4, #20]
		radio_disable();
    d3c2:	f002 fd3d 	bl	fe40 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    d3c6:	f002 fd59 	bl	fe7c <radio_is_ready>
    d3ca:	2800      	cmp	r0, #0
    d3cc:	f47f a94c 	bne.w	c668 <isr+0xb0>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    d3d0:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    d3d4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d3d8:	2913      	cmp	r1, #19
    d3da:	bf08      	it	eq
    d3dc:	2116      	moveq	r1, #22
    d3de:	f7fb fe7b 	bl	90d8 <terminate_ind_rx_enqueue>
		terminate = 1;
    d3e2:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d3e4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d3e8:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    d3ec:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    d3ee:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d3f2:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    d3f6:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    d3f8:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    d3fc:	d11e      	bne.n	d43c <isr+0xe84>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d3fe:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    d402:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    d406:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d408:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    d40a:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    d40e:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    d412:	f040 80cf 	bne.w	d5b4 <isr+0xffc>
		if (node_tx) {
    d416:	b18e      	cbz	r6, d43c <isr+0xe84>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    d418:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    d41c:	f8d3 e000 	ldr.w	lr, [r3]
    d420:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    d424:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    d426:	bf06      	itte	eq
    d428:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    d42c:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    d430:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d434:	492d      	ldr	r1, [pc, #180]	; (d4ec <isr+0xf34>)
    d436:	4630      	mov	r0, r6
    d438:	f7f8 fb99 	bl	5b6e <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    d43c:	2600      	movs	r6, #0
    d43e:	e0c2      	b.n	d5c6 <isr+0x100e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d440:	2208      	movs	r2, #8
    d442:	f10a 010e 	add.w	r1, sl, #14
    d446:	f105 0094 	add.w	r0, r5, #148	; 0x94
    d44a:	f7f4 fbd7 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d44e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d452:	2204      	movs	r2, #4
    d454:	f10a 0116 	add.w	r1, sl, #22
    d458:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d45c:	f7f4 fbce 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
    d460:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d464:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d468:	f042 0208 	orr.w	r2, r2, #8
    d46c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d470:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    d478:	2500      	movs	r5, #0
    d47a:	e7b3      	b.n	d3e4 <isr+0xe2c>
		_radio.conn_curr->pause_tx = 1;
    d47c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    d480:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    d484:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d488:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    d48c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    d490:	e7f2      	b.n	d478 <isr+0xec0>
		if (_radio.role == ROLE_MASTER) {
    d492:	f894 a013 	ldrb.w	sl, [r4, #19]
    d496:	fa5f fa8a 	uxtb.w	sl, sl
    d49a:	f1ba 0f04 	cmp.w	sl, #4
    d49e:	d127      	bne.n	d4f0 <isr+0xf38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d4a0:	7933      	ldrb	r3, [r6, #4]
    d4a2:	f043 0303 	orr.w	r3, r3, #3
    d4a6:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    d4a8:	2317      	movs	r3, #23
    d4aa:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d4ac:	2303      	movs	r3, #3
    d4ae:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    d4b0:	2208      	movs	r2, #8
    d4b2:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    d4b6:	3004      	adds	r0, #4
    d4b8:	f7f4 fba0 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    d4bc:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    d4c0:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    d4c2:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    d4c6:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    d4c8:	f106 0112 	add.w	r1, r6, #18
    d4cc:	2208      	movs	r2, #8
    d4ce:	6860      	ldr	r0, [r4, #4]
    d4d0:	f003 fc66 	bl	10da0 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    d4d4:	f106 011a 	add.w	r1, r6, #26
    d4d8:	4652      	mov	r2, sl
    d4da:	6860      	ldr	r0, [r4, #4]
    d4dc:	f003 fc60 	bl	10da0 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    d4e0:	2600      	movs	r6, #0
    d4e2:	e7c9      	b.n	d478 <isr+0xec0>
    d4e4:	2000074a 	.word	0x2000074a
    d4e8:	20000744 	.word	0x20000744
    d4ec:	200007bc 	.word	0x200007bc
			_radio.conn_curr->pause_tx = 1;
    d4f0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    d4f4:	f043 0308 	orr.w	r3, r3, #8
    d4f8:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    d4fc:	e7bc      	b.n	d478 <isr+0xec0>
		_radio.conn_curr->pause_rx = 0;
    d4fe:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d502:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d506:	f36f 03c3 	bfc	r3, #3, #1
    d50a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d50e:	2300      	movs	r3, #0
    d510:	e7bc      	b.n	d48c <isr+0xed4>
		if ((_radio.conn_curr->llcp_length.req !=
    d512:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    d516:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    d51a:	429a      	cmp	r2, r3
    d51c:	d0ac      	beq.n	d478 <isr+0xec0>
		    (_radio.conn_curr->llcp_length.state ==
    d51e:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    d522:	f003 0203 	and.w	r2, r3, #3
    d526:	2a01      	cmp	r2, #1
    d528:	d1a6      	bne.n	d478 <isr+0xec0>
			_radio.conn_curr->pause_tx = 1;
    d52a:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    d52e:	f042 0208 	orr.w	r2, r2, #8
    d532:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    d536:	2202      	movs	r2, #2
    d538:	f362 0301 	bfi	r3, r2, #0, #2
    d53c:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    d540:	e79a      	b.n	d478 <isr+0xec0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    d542:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    d546:	2202      	movs	r2, #2
    d548:	f362 0301 	bfi	r3, r2, #0, #2
    d54c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    d550:	7ce3      	ldrb	r3, [r4, #19]
    d552:	2b03      	cmp	r3, #3
    d554:	d190      	bne.n	d478 <isr+0xec0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    d556:	2301      	movs	r3, #1
    d558:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    d55c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    d560:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    d564:	2202      	movs	r2, #2
    d566:	2304      	movs	r3, #4
    d568:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    d56c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    d570:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    d574:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    d578:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    d57c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    d580:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    d584:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d588:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    d58c:	f003 0307 	and.w	r3, r3, #7
    d590:	aa12      	add	r2, sp, #72	; 0x48
    d592:	4413      	add	r3, r2
    d594:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    d598:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    d59c:	f363 0202 	bfi	r2, r3, #0, #3
    d5a0:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    d5a4:	e768      	b.n	d478 <isr+0xec0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    d5a6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    d5aa:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    d5ae:	f3c3 0382 	ubfx	r3, r3, #2, #3
    d5b2:	e7f3      	b.n	d59c <isr+0xfe4>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    d5b4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    d5b8:	4293      	cmp	r3, r2
    d5ba:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    d5bc:	bf08      	it	eq
    d5be:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    d5c2:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    d5c6:	b37d      	cbz	r5, d628 <isr+0x1070>
		connection_release(_radio.conn_curr);
    d5c8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d5cc:	f7fb ff7a 	bl	94c4 <connection_release>
		_radio.conn_curr = NULL;
    d5d0:	2300      	movs	r3, #0
    d5d2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    d5d6:	f002 fdf9 	bl	101cc <radio_tmr_aa_restore>
    d5da:	b918      	cbnz	r0, d5e4 <isr+0x102c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    d5dc:	f002 fdea 	bl	101b4 <radio_tmr_aa_get>
    d5e0:	f002 fdee 	bl	101c0 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    d5e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d5e8:	2b00      	cmp	r3, #0
    d5ea:	f43f a88b 	beq.w	c704 <isr+0x14c>
	if (tx_release) {
    d5ee:	b11e      	cbz	r6, d5f8 <isr+0x1040>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    d5f0:	4631      	mov	r1, r6
    d5f2:	8c18      	ldrh	r0, [r3, #32]
    d5f4:	f7fb fef4 	bl	93e0 <pdu_node_tx_release>
	if (rx_enqueue) {
    d5f8:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	f43f a881 	beq.w	c704 <isr+0x14c>
		rx_fc_lock(_radio.conn_curr->handle);
    d602:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d606:	8c18      	ldrh	r0, [r3, #32]
    d608:	f7fb fcdc 	bl	8fc4 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    d60c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d610:	8c1b      	ldrh	r3, [r3, #32]
    d612:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    d616:	f7fb fd87 	bl	9128 <packet_rx_enqueue>
    d61a:	f7ff b873 	b.w	c704 <isr+0x14c>
			_radio.conn_curr->empty = 0;
    d61e:	f36f 13c7 	bfc	r3, #7, #1
    d622:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    d626:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    d628:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d62c:	f898 2008 	ldrb.w	r2, [r8, #8]
    d630:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    d634:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d638:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d63c:	429a      	cmp	r2, r3
    d63e:	f040 80d1 	bne.w	d7e4 <isr+0x122c>
	    (packet_rx_reserve_get(3) != 0) &&
    d642:	2003      	movs	r0, #3
    d644:	f7fa ff06 	bl	8454 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    d648:	2800      	cmp	r0, #0
    d64a:	f000 80cb 	beq.w	d7e4 <isr+0x122c>
	    (packet_rx_reserve_get(3) != 0) &&
    d64e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    d652:	b393      	cbz	r3, d6ba <isr+0x1102>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    d654:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    d658:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    d65c:	4293      	cmp	r3, r2
    d65e:	d105      	bne.n	d66c <isr+0x10b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
    d660:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    d664:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    d668:	4291      	cmp	r1, r2
    d66a:	d026      	beq.n	d6ba <isr+0x1102>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    d66c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    d670:	4293      	cmp	r3, r2
    d672:	f000 80b7 	beq.w	d7e4 <isr+0x122c>
	      (_radio.fc_req != _radio.fc_ack) &&
    d676:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    d67a:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    d67e:	429a      	cmp	r2, r3
    d680:	f000 80b0 	beq.w	d7e4 <isr+0x122c>
		(((_radio.fc_req == 0) &&
    d684:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    d688:	b933      	cbnz	r3, d698 <isr+0x10e0>
		   _radio.conn_curr->handle)) ||
    d68a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    d68e:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    d692:	8c1b      	ldrh	r3, [r3, #32]
    d694:	429a      	cmp	r2, r3
    d696:	d010      	beq.n	d6ba <isr+0x1102>
		 ((_radio.fc_req != 0) &&
    d698:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    d69c:	2b00      	cmp	r3, #0
    d69e:	f000 80a1 	beq.w	d7e4 <isr+0x122c>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d6a2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    d6a6:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d6aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    d6ae:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    d6b2:	8c0b      	ldrh	r3, [r1, #32]
    d6b4:	429a      	cmp	r2, r3
    d6b6:	f040 8095 	bne.w	d7e4 <isr+0x122c>
		if (pdu_data_rx->len != 0) {
    d6ba:	f898 5009 	ldrb.w	r5, [r8, #9]
    d6be:	2d00      	cmp	r5, #0
    d6c0:	f000 8099 	beq.w	d7f6 <isr+0x123e>
			if (_radio.conn_curr->enc_rx) {
    d6c4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d6c8:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    d6cc:	f015 0510 	ands.w	r5, r5, #16
    d6d0:	d005      	beq.n	d6de <isr+0x1126>
				done = radio_ccm_is_done();
    d6d2:	f002 fe07 	bl	102e4 <radio_ccm_is_done>
				LL_ASSERT(done);
    d6d6:	2800      	cmp	r0, #0
    d6d8:	f43e afc6 	beq.w	c668 <isr+0xb0>
				ccm_rx_increment = 1;
    d6dc:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    d6de:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d6e2:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    d6e6:	06d9      	lsls	r1, r3, #27
    d6e8:	d42c      	bmi.n	d744 <isr+0x118c>
			    (_radio.conn_curr->pause_rx &&
    d6ea:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d6ee:	f898 3008 	ldrb.w	r3, [r8, #8]
    d6f2:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    d6f6:	f012 0f04 	tst.w	r2, #4
    d6fa:	d13d      	bne.n	d778 <isr+0x11c0>
			_radio.conn_curr->appto_expire = 0;
    d6fc:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    d6fe:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    d702:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    d706:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    d70a:	d004      	beq.n	d716 <isr+0x115e>
    d70c:	2b02      	cmp	r3, #2
    d70e:	d862      	bhi.n	d7d6 <isr+0x121e>
				*rx_enqueue = 1;
    d710:	2301      	movs	r3, #1
    d712:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    d716:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d71a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d71e:	f082 0202 	eor.w	r2, r2, #2
    d722:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    d726:	2d00      	cmp	r5, #0
    d728:	d05c      	beq.n	d7e4 <isr+0x122c>
				_radio.conn_curr->ccm_rx.counter++;
    d72a:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    d72e:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    d732:	f119 0001 	adds.w	r0, r9, #1
    d736:	f14a 0100 	adc.w	r1, sl, #0
    d73a:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    d73e:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    d742:	e04f      	b.n	d7e4 <isr+0x122c>
			     !radio_ccm_mic_is_valid()) ||
    d744:	f002 fdec 	bl	10320 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    d748:	2800      	cmp	r0, #0
    d74a:	d1ce      	bne.n	d6ea <isr+0x1132>
				_radio.state = STATE_CLOSE;
    d74c:	2303      	movs	r3, #3
    d74e:	7523      	strb	r3, [r4, #20]
				radio_disable();
    d750:	f002 fb76 	bl	fe40 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    d754:	f002 fb92 	bl	fe7c <radio_is_ready>
    d758:	4605      	mov	r5, r0
    d75a:	2800      	cmp	r0, #0
    d75c:	f47e af84 	bne.w	c668 <isr+0xb0>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    d760:	213d      	movs	r1, #61	; 0x3d
    d762:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d766:	f7fb fcb7 	bl	90d8 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    d76a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d76e:	f7fb fea9 	bl	94c4 <connection_release>
				_radio.conn_curr = NULL;
    d772:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    d776:	e72e      	b.n	d5d6 <isr+0x101e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    d778:	f003 0103 	and.w	r1, r3, #3
    d77c:	2903      	cmp	r1, #3
    d77e:	d1e5      	bne.n	d74c <isr+0x1194>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    d780:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    d784:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    d788:	f1be 0f00 	cmp.w	lr, #0
    d78c:	f002 0240 	and.w	r2, r2, #64	; 0x40
    d790:	db15      	blt.n	d7be <isr+0x1206>
	       (!conn->role &&
    d792:	b922      	cbnz	r2, d79e <isr+0x11e6>
		((!conn->refresh &&
    d794:	2902      	cmp	r1, #2
    d796:	d0b1      	beq.n	d6fc <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d798:	2911      	cmp	r1, #17
    d79a:	d8d7      	bhi.n	d74c <isr+0x1194>
    d79c:	e009      	b.n	d7b2 <isr+0x11fa>
		 (conn->refresh &&
    d79e:	1e8a      	subs	r2, r1, #2
    d7a0:	b2d2      	uxtb	r2, r2
    d7a2:	2a09      	cmp	r2, #9
    d7a4:	d8f8      	bhi.n	d798 <isr+0x11e0>
    d7a6:	f240 2e05 	movw	lr, #517	; 0x205
    d7aa:	fa2e f202 	lsr.w	r2, lr, r2
    d7ae:	07d2      	lsls	r2, r2, #31
    d7b0:	d4a4      	bmi.n	d6fc <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d7b2:	4abd      	ldr	r2, [pc, #756]	; (daa8 <isr+0x14f0>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d7b4:	fa22 f101 	lsr.w	r1, r2, r1
    d7b8:	07ca      	lsls	r2, r1, #31
    d7ba:	d5c7      	bpl.n	d74c <isr+0x1194>
    d7bc:	e79e      	b.n	d6fc <isr+0x1144>
	       (conn->role &&
    d7be:	b92a      	cbnz	r2, d7cc <isr+0x1214>
		((!conn->refresh &&
    d7c0:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    d7c2:	d09b      	beq.n	d6fc <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    d7c4:	2911      	cmp	r1, #17
    d7c6:	d8c1      	bhi.n	d74c <isr+0x1194>
    d7c8:	4ab8      	ldr	r2, [pc, #736]	; (daac <isr+0x14f4>)
    d7ca:	e7f3      	b.n	d7b4 <isr+0x11fc>
		 (conn->refresh &&
    d7cc:	1e8a      	subs	r2, r1, #2
    d7ce:	2a01      	cmp	r2, #1
    d7d0:	d994      	bls.n	d6fc <isr+0x1144>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    d7d2:	290b      	cmp	r1, #11
    d7d4:	e7f5      	b.n	d7c2 <isr+0x120a>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    d7d6:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    d7da:	4640      	mov	r0, r8
    d7dc:	f7fd fe44 	bl	b468 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    d7e0:	2800      	cmp	r0, #0
    d7e2:	d098      	beq.n	d716 <isr+0x115e>
		_radio.conn_curr->supervision_expire = 0;
    d7e4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    d7e8:	2300      	movs	r3, #0
    d7ea:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    d7ee:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    d7f0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    d7f4:	e03d      	b.n	d872 <isr+0x12ba>
		} else if ((_radio.conn_curr->enc_rx) ||
    d7f6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    d7fa:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d7fe:	f013 0f14 	tst.w	r3, #20
    d802:	d088      	beq.n	d716 <isr+0x115e>
					    (conn->latency + 6)) ?
    d804:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    d806:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    d80a:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    d80c:	4299      	cmp	r1, r3
    d80e:	bfc4      	itt	gt
    d810:	1f8b      	subgt	r3, r1, #6
    d812:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    d814:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    d818:	bfcc      	ite	gt
    d81a:	b29b      	uxthgt	r3, r3
    d81c:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    d81e:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    d820:	bf1e      	ittt	ne
    d822:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    d826:	2300      	movne	r3, #0
    d828:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    d82c:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    d830:	2b00      	cmp	r3, #0
    d832:	f47f af70 	bne.w	d716 <isr+0x115e>
				conn->appto_expire = conn->appto_reload;
    d836:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    d83a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    d83e:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    d842:	e768      	b.n	d716 <isr+0x115e>
		if (_radio.crc_expire == 0) {
    d844:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    d848:	b913      	cbnz	r3, d850 <isr+0x1298>
			_radio.crc_expire = 2;
    d84a:	2302      	movs	r3, #2
    d84c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    d850:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    d854:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    d858:	3b01      	subs	r3, #1
    d85a:	b2db      	uxtb	r3, r3
    d85c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    d860:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    d864:	fab3 f583 	clz	r5, r3
    d868:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    d86a:	bb86      	cbnz	r6, d8ce <isr+0x1316>
			_radio.conn_curr->supervision_expire =
    d86c:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    d86e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    d872:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    d876:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    d878:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    d87c:	f7fd fbe0 	bl	b040 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d880:	7d23      	ldrb	r3, [r4, #20]
    d882:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    d884:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d888:	d010      	beq.n	d8ac <isr+0x12f4>
    d88a:	bb15      	cbnz	r5, d8d2 <isr+0x131a>
    d88c:	b137      	cbz	r7, d89c <isr+0x12e4>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    d88e:	f898 3008 	ldrb.w	r3, [r8, #8]
    d892:	06d8      	lsls	r0, r3, #27
    d894:	d402      	bmi.n	d89c <isr+0x12e4>
			 (pdu_data_tx->len == 0)) ||
    d896:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    d898:	785b      	ldrb	r3, [r3, #1]
    d89a:	b1d3      	cbz	r3, d8d2 <isr+0x131a>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    d89c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    d8a0:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	bf0c      	ite	eq
    d8a8:	2302      	moveq	r3, #2
    d8aa:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    d8ac:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d8ae:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    d8b0:	d129      	bne.n	d906 <isr+0x134e>
		if (_radio.role == ROLE_MASTER) {
    d8b2:	7ce3      	ldrb	r3, [r4, #19]
    d8b4:	2b04      	cmp	r3, #4
    d8b6:	d10e      	bne.n	d8d6 <isr+0x131e>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    d8b8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d8bc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d8c0:	f369 12c7 	bfi	r2, r9, #7, #1
    d8c4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    d8c8:	f002 faba 	bl	fe40 <radio_disable>
    d8cc:	e683      	b.n	d5d6 <isr+0x101e>
	struct radio_pdu_node_tx *tx_release = NULL;
    d8ce:	2600      	movs	r6, #0
    d8d0:	e7cf      	b.n	d872 <isr+0x12ba>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    d8d2:	2303      	movs	r3, #3
    d8d4:	e7ea      	b.n	d8ac <isr+0x12f4>
			radio_switch_complete_and_disable();
    d8d6:	f002 fb23 	bl	ff20 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    d8da:	9910      	ldr	r1, [sp, #64]	; 0x40
    d8dc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    d8e0:	780b      	ldrb	r3, [r1, #0]
    d8e2:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    d8e6:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    d8ea:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d8ee:	f362 0382 	bfi	r3, r2, #2, #1
    d8f2:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    d8f4:	f7fb f86e 	bl	89d4 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    d8f8:	f002 fac0 	bl	fe7c <radio_is_ready>
    d8fc:	2800      	cmp	r0, #0
    d8fe:	f43f ae6a 	beq.w	d5d6 <isr+0x101e>
    d902:	f7fe beb1 	b.w	c668 <isr+0xb0>
		radio_tmr_tifs_set(RADIO_TIFS);
    d906:	2096      	movs	r0, #150	; 0x96
    d908:	f002 fb90 	bl	1002c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    d90c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    d910:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    d914:	f000 0007 	and.w	r0, r0, #7
    d918:	f002 faec 	bl	fef4 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    d91c:	f002 fc62 	bl	101e4 <radio_tmr_end_capture>
    d920:	e7db      	b.n	d8da <isr+0x1322>
	switch (_radio.role) {
    d922:	7ce2      	ldrb	r2, [r4, #19]
    d924:	2a04      	cmp	r2, #4
    d926:	f63e ae9f 	bhi.w	c668 <isr+0xb0>
    d92a:	e8df f012 	tbh	[pc, r2, lsl #1]
    d92e:	01f1      	.short	0x01f1
    d930:	004f0005 	.word	0x004f0005
    d934:	009e009e 	.word	0x009e009e
	if ((_radio.state == STATE_CLOSE) &&
    d938:	2b03      	cmp	r3, #3
    d93a:	d109      	bne.n	d950 <isr+0x1398>
	    (_radio.advertiser.chan_map_current != 0)) {
    d93c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    d940:	0759      	lsls	r1, r3, #29
    d942:	d005      	beq.n	d950 <isr+0x1398>
		adv_setup();
    d944:	f7fb fce6 	bl	9314 <adv_setup>
		radio_tx_enable();
    d948:	f002 fa74 	bl	fe34 <radio_tx_enable>
    d94c:	f7fe beaa 	b.w	c6a4 <isr+0xec>
		radio_filter_disable();
    d950:	f002 fb30 	bl	ffb4 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    d954:	7d23      	ldrb	r3, [r4, #20]
    d956:	2b03      	cmp	r3, #3
    d958:	d16b      	bne.n	da32 <isr+0x147a>
		    (!_radio.advertiser.is_hdcd)) {
    d95a:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    d95e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    d962:	d166      	bne.n	da32 <isr+0x147a>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    d964:	2201      	movs	r2, #1
    d966:	a910      	add	r1, sp, #64	; 0x40
    d968:	6860      	ldr	r0, [r4, #4]
    d96a:	f003 fa19 	bl	10da0 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    d96e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    d972:	484f      	ldr	r0, [pc, #316]	; (dab0 <isr+0x14f8>)
			random_delay %= 10;
    d974:	230a      	movs	r3, #10
    d976:	fbb1 f2f3 	udiv	r2, r1, r3
    d97a:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    d97e:	3201      	adds	r2, #1
    d980:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    d982:	b2d6      	uxtb	r6, r2
    d984:	fba6 0100 	umull	r0, r1, r6, r0
    d988:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    d98a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    d98e:	fb03 1106 	mla	r1, r3, r6, r1
    d992:	a343      	add	r3, pc, #268	; (adr r3, daa0 <isr+0x14e8>)
    d994:	e9d3 2300 	ldrd	r2, r3, [r3]
    d998:	f7f2 fc3c 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    d99c:	f640 734b 	movw	r3, #3915	; 0xf4b
    d9a0:	9306      	str	r3, [sp, #24]
    d9a2:	4b44      	ldr	r3, [pc, #272]	; (dab4 <isr+0x14fc>)
    d9a4:	9305      	str	r3, [sp, #20]
    d9a6:	9504      	str	r5, [sp, #16]
    d9a8:	b283      	uxth	r3, r0
    d9aa:	9503      	str	r5, [sp, #12]
    d9ac:	9502      	str	r5, [sp, #8]
    d9ae:	9501      	str	r5, [sp, #4]
    d9b0:	9500      	str	r5, [sp, #0]
    d9b2:	2205      	movs	r2, #5
    d9b4:	4629      	mov	r1, r5
    d9b6:	4628      	mov	r0, r5
    d9b8:	f7f8 ff84 	bl	68c4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d9bc:	f030 0302 	bics.w	r3, r0, #2
    d9c0:	d037      	beq.n	da32 <isr+0x147a>
    d9c2:	7ca3      	ldrb	r3, [r4, #18]
    d9c4:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d9c6:	d034      	beq.n	da32 <isr+0x147a>
    d9c8:	f7fe be4e 	b.w	c668 <isr+0xb0>
	if (_radio.state == STATE_CLOSE) {
    d9cc:	2b03      	cmp	r3, #3
    d9ce:	d124      	bne.n	da1a <isr+0x1462>
		radio_tmr_tifs_set(RADIO_TIFS);
    d9d0:	2096      	movs	r0, #150	; 0x96
    d9d2:	f002 fb2b 	bl	1002c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    d9d6:	2300      	movs	r3, #0
    d9d8:	4619      	mov	r1, r3
    d9da:	461a      	mov	r2, r3
    d9dc:	4618      	mov	r0, r3
    d9de:	f002 fa95 	bl	ff0c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    d9e2:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    d9e6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    d9ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    d9ee:	3008      	adds	r0, #8
    d9f0:	f002 fa00 	bl	fdf4 <radio_pkt_rx_set>
		radio_rssi_measure();
    d9f4:	f002 faa2 	bl	ff3c <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    d9f8:	f001 fd66 	bl	f4c8 <ctrl_rl_enabled>
    d9fc:	b138      	cbz	r0, da0e <isr+0x1456>
			u8_t count, *irks = ctrl_irks_get(&count);
    d9fe:	a810      	add	r0, sp, #64	; 0x40
    da00:	f001 fb5a 	bl	f0b8 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    da04:	4601      	mov	r1, r0
    da06:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    da0a:	f002 fc93 	bl	10334 <radio_ar_configure>
		_radio.state = STATE_RX;
    da0e:	2301      	movs	r3, #1
    da10:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    da12:	f002 fa09 	bl	fe28 <radio_rx_enable>
    da16:	f7fe be45 	b.w	c6a4 <isr+0xec>
		radio_filter_disable();
    da1a:	f002 facb 	bl	ffb4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    da1e:	7d23      	ldrb	r3, [r4, #20]
    da20:	2b05      	cmp	r3, #5
    da22:	d106      	bne.n	da32 <isr+0x147a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    da24:	2300      	movs	r3, #0
    da26:	9300      	str	r3, [sp, #0]
    da28:	2204      	movs	r2, #4
    da2a:	4619      	mov	r1, r3
    da2c:	4618      	mov	r0, r3
    da2e:	f7f8 ff97 	bl	6960 <ticker_stop>
	_radio.role = ROLE_NONE;
    da32:	2500      	movs	r5, #0
    da34:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    da36:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    da38:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    da3a:	f002 fb75 	bl	10128 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    da3e:	462a      	mov	r2, r5
    da40:	4629      	mov	r1, r5
    da42:	4628      	mov	r0, r5
    da44:	4b1c      	ldr	r3, [pc, #112]	; (dab8 <isr+0x1500>)
    da46:	f7f8 f943 	bl	5cd0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    da4a:	4605      	mov	r5, r0
    da4c:	2800      	cmp	r0, #0
    da4e:	f47e ae0b 	bne.w	c668 <isr+0xb0>
	clock_control_off(_radio.hf_clock, NULL);
    da52:	6820      	ldr	r0, [r4, #0]
    da54:	6843      	ldr	r3, [r0, #4]
    da56:	4629      	mov	r1, r5
    da58:	685b      	ldr	r3, [r3, #4]
    da5a:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    da5c:	2201      	movs	r2, #1
    da5e:	4611      	mov	r1, r2
    da60:	4628      	mov	r0, r5
    da62:	f7f8 f90d 	bl	5c80 <mayfly_enable>
    da66:	f7fe be4d 	b.w	c704 <isr+0x14c>
	if (_radio.conn_curr == 0) {
    da6a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    da6e:	2800      	cmp	r0, #0
    da70:	d0df      	beq.n	da32 <isr+0x147a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    da72:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    da76:	b309      	cbz	r1, dabc <isr+0x1504>
    da78:	7ce3      	ldrb	r3, [r4, #19]
    da7a:	2b03      	cmp	r3, #3
    da7c:	d003      	beq.n	da86 <isr+0x14ce>
    da7e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    da82:	07da      	lsls	r2, r3, #31
    da84:	d51a      	bpl.n	dabc <isr+0x1504>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    da86:	f7fb fb27 	bl	90d8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    da8a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    da8e:	f7fb fd19 	bl	94c4 <connection_release>
			_radio.conn_curr = NULL;
    da92:	2300      	movs	r3, #0
    da94:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    da98:	e7cb      	b.n	da32 <isr+0x147a>
    da9a:	bf00      	nop
    da9c:	f3af 8000 	nop.w
    daa0:	1afd498d 	.word	0x1afd498d
    daa4:	00000007 	.word	0x00000007
    daa8:	00022060 	.word	0x00022060
    daac:	00022040 	.word	0x00022040
    dab0:	d4a51000 	.word	0xd4a51000
    dab4:	000096cd 	.word	0x000096cd
    dab8:	20003760 	.word	0x20003760
	latency_event = _radio.conn_curr->latency_event;
    dabc:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    dac0:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    dac4:	f10b 0601 	add.w	r6, fp, #1
    dac8:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    daca:	2f00      	cmp	r7, #0
    dacc:	f000 8084 	beq.w	dbd8 <isr+0x1620>
		if (_radio.role == ROLE_SLAVE) {
    dad0:	7ce3      	ldrb	r3, [r4, #19]
    dad2:	2b03      	cmp	r3, #3
    dad4:	d173      	bne.n	dbbe <isr+0x1606>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    dad6:	f002 fb79 	bl	101cc <radio_tmr_aa_restore>
    dada:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    dadc:	f002 fb7c 	bl	101d8 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    dae0:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    dae4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    dae8:	f003 0307 	and.w	r3, r3, #7
    daec:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    daee:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    daf2:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    daf4:	d052      	beq.n	db9c <isr+0x15e4>
		return 40;
    daf6:	2b04      	cmp	r3, #4
    daf8:	bf0c      	ite	eq
    dafa:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    dafe:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    db02:	f100 0330 	add.w	r3, r0, #48	; 0x30
    db06:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    db08:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    db0a:	930a      	str	r3, [sp, #40]	; 0x28
    db0c:	f8df a21c 	ldr.w	sl, [pc, #540]	; dd2c <isr+0x1774>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    db10:	a384      	add	r3, pc, #528	; (adr r3, dd24 <isr+0x176c>)
    db12:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    db16:	d844      	bhi.n	dba2 <isr+0x15ea>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    db18:	fba0 010a 	umull	r0, r1, r0, sl
    db1c:	f7f2 fb7a 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    db20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    db22:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    db24:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    db28:	a37e      	add	r3, pc, #504	; (adr r3, dd24 <isr+0x176c>)
    db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    db2e:	fba0 010a 	umull	r0, r1, r0, sl
    db32:	f7f2 fb6f 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    db36:	2300      	movs	r3, #0
    db38:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    db3a:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    db3c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    db40:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    db44:	b3ab      	cbz	r3, dbb2 <isr+0x15fa>
				if (pdu_data_tx->len ||
    db46:	795b      	ldrb	r3, [r3, #5]
    db48:	b913      	cbnz	r3, db50 <isr+0x1598>
    db4a:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    db4e:	b10b      	cbz	r3, db54 <isr+0x159c>
					_radio.conn_curr->latency_event = 0;
    db50:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    db52:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    db54:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    db58:	2200      	movs	r2, #0
    db5a:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    db5c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    db60:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    db64:	b1c3      	cbz	r3, db98 <isr+0x15e0>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    db66:	429e      	cmp	r6, r3
    db68:	f080 80a6 	bcs.w	dcb8 <isr+0x1700>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    db6c:	1b9b      	subs	r3, r3, r6
    db6e:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    db70:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    db72:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    db74:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    db78:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    db7a:	f240 809f 	bls.w	dcbc <isr+0x1704>
			else if (_radio.role == ROLE_SLAVE) {
    db7e:	7ce3      	ldrb	r3, [r4, #19]
    db80:	2b03      	cmp	r3, #3
    db82:	d109      	bne.n	db98 <isr+0x15e0>
				if (latency_event != 0) {
    db84:	f1bb 0f00 	cmp.w	fp, #0
    db88:	f040 8098 	bne.w	dcbc <isr+0x1704>
					force = _radio.conn_curr->slave.force & 0x01;
    db8c:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    db8e:	087b      	lsrs	r3, r7, #1
					if (force) {
    db90:	f017 0701 	ands.w	r7, r7, #1
    db94:	d13d      	bne.n	dc12 <isr+0x165a>
					_radio.conn_curr->slave.force >>= 1;
    db96:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    db98:	2700      	movs	r7, #0
    db9a:	e03d      	b.n	dc18 <isr+0x1660>
		return 24;
    db9c:	f04f 0818 	mov.w	r8, #24
    dba0:	e7af      	b.n	db02 <isr+0x154a>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    dba2:	fba9 010a 	umull	r0, r1, r9, sl
    dba6:	f7f2 fb35 	bl	214 <__aeabi_uldivmod>
    dbaa:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    dbac:	f108 0030 	add.w	r0, r8, #48	; 0x30
    dbb0:	e7ba      	b.n	db28 <isr+0x1570>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    dbb2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    dbb6:	07db      	lsls	r3, r3, #31
    dbb8:	d5cc      	bpl.n	db54 <isr+0x159c>
				_radio.conn_curr->latency_event =
    dbba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    dbbc:	e7c9      	b.n	db52 <isr+0x159a>
		} else if (reason_peer) {
    dbbe:	b149      	cbz	r1, dbd4 <isr+0x161c>
			_radio.conn_curr->master.terminate_ack = 1;
    dbc0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    dbc4:	f043 0301 	orr.w	r3, r3, #1
    dbc8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    dbcc:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    dbd0:	4645      	mov	r5, r8
    dbd2:	e7bf      	b.n	db54 <isr+0x159c>
	ticks_drift_minus = 0;
    dbd4:	4688      	mov	r8, r1
    dbd6:	e7fb      	b.n	dbd0 <isr+0x1618>
	else if (_radio.conn_curr->connect_expire) {
    dbd8:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    dbda:	b185      	cbz	r5, dbfe <isr+0x1646>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    dbdc:	42ae      	cmp	r6, r5
    dbde:	d204      	bcs.n	dbea <isr+0x1632>
			_radio.conn_curr->connect_expire -= elapsed_event;
    dbe0:	1bad      	subs	r5, r5, r6
    dbe2:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    dbe4:	463d      	mov	r5, r7
    dbe6:	46a8      	mov	r8, r5
    dbe8:	e7b8      	b.n	db5c <isr+0x15a4>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    dbea:	213e      	movs	r1, #62	; 0x3e
    dbec:	f7fb fa74 	bl	90d8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    dbf0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    dbf4:	f7fb fc66 	bl	94c4 <connection_release>
			_radio.conn_curr = NULL;
    dbf8:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    dbfc:	e719      	b.n	da32 <isr+0x147a>
		if (!_radio.conn_curr->supervision_expire) {
    dbfe:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    dc02:	f1b8 0f00 	cmp.w	r8, #0
    dc06:	d1ee      	bne.n	dbe6 <isr+0x162e>
			_radio.conn_curr->supervision_expire =
    dc08:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    dc0a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    dc0e:	4645      	mov	r5, r8
    dc10:	e7a4      	b.n	db5c <isr+0x15a4>
						_radio.conn_curr->slave.force |=
    dc12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dc16:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    dc18:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    dc1c:	b123      	cbz	r3, dc28 <isr+0x1670>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    dc1e:	429e      	cmp	r6, r3
    dc20:	d24e      	bcs.n	dcc0 <isr+0x1708>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    dc22:	1b9b      	subs	r3, r3, r6
    dc24:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    dc28:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    dc2c:	b123      	cbz	r3, dc38 <isr+0x1680>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    dc2e:	429e      	cmp	r6, r3
    dc30:	d248      	bcs.n	dcc4 <isr+0x170c>
			_radio.conn_curr->apto_expire -= elapsed_event;
    dc32:	1b9b      	subs	r3, r3, r6
    dc34:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    dc38:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    dc3c:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    dc40:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    dc44:	b123      	cbz	r3, dc50 <isr+0x1698>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    dc46:	429e      	cmp	r6, r3
    dc48:	d24e      	bcs.n	dce8 <isr+0x1730>
			_radio.conn_curr->appto_expire -= elapsed_event;
    dc4a:	1b9e      	subs	r6, r3, r6
    dc4c:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    dc50:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    dc54:	428b      	cmp	r3, r1
    dc56:	d006      	beq.n	dc66 <isr+0x16ae>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    dc58:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    dc5c:	3b01      	subs	r3, #1
    dc5e:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    dc60:	bf9c      	itt	ls
    dc62:	2300      	movls	r3, #0
    dc64:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    dc66:	b917      	cbnz	r7, dc6e <isr+0x16b6>
    dc68:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    dc6a:	455b      	cmp	r3, fp
    dc6c:	d04e      	beq.n	dd0c <isr+0x1754>
		lazy = _radio.conn_curr->latency_event + 1;
    dc6e:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    dc70:	3301      	adds	r3, #1
    dc72:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    dc74:	b935      	cbnz	r5, dc84 <isr+0x16cc>
    dc76:	f1b8 0f00 	cmp.w	r8, #0
    dc7a:	d103      	bne.n	dc84 <isr+0x16cc>
    dc7c:	b913      	cbnz	r3, dc84 <isr+0x16cc>
	    (lazy != 0) || (force != 0)) {
    dc7e:	2f00      	cmp	r7, #0
    dc80:	f43f aed7 	beq.w	da32 <isr+0x147a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dc84:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    dc88:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dc8a:	3207      	adds	r2, #7
		ticker_status =
    dc8c:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    dc8e:	b2d6      	uxtb	r6, r2
		ticker_status =
    dc90:	4a23      	ldr	r2, [pc, #140]	; (dd20 <isr+0x1768>)
    dc92:	9205      	str	r2, [sp, #20]
    dc94:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    dc96:	9606      	str	r6, [sp, #24]
		ticker_status =
    dc98:	9704      	str	r7, [sp, #16]
    dc9a:	9102      	str	r1, [sp, #8]
    dc9c:	9101      	str	r1, [sp, #4]
    dc9e:	f8cd 8000 	str.w	r8, [sp]
    dca2:	4632      	mov	r2, r6
    dca4:	4608      	mov	r0, r1
    dca6:	f7f8 fe0d 	bl	68c4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    dcaa:	f030 0302 	bics.w	r3, r0, #2
    dcae:	f43f aec0 	beq.w	da32 <isr+0x147a>
    dcb2:	7ca3      	ldrb	r3, [r4, #18]
    dcb4:	429e      	cmp	r6, r3
    dcb6:	e686      	b.n	d9c6 <isr+0x140e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    dcb8:	2108      	movs	r1, #8
    dcba:	e6e4      	b.n	da86 <isr+0x14ce>
				force = 1;
    dcbc:	2701      	movs	r7, #1
    dcbe:	e7ab      	b.n	dc18 <isr+0x1660>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    dcc0:	2122      	movs	r1, #34	; 0x22
    dcc2:	e6e0      	b.n	da86 <isr+0x14ce>
			_radio.conn_curr->apto_expire = 0;
    dcc4:	2300      	movs	r3, #0
    dcc6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    dcca:	2002      	movs	r0, #2
    dccc:	f7fa fbc2 	bl	8454 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    dcd0:	2800      	cmp	r0, #0
    dcd2:	f43e acc9 	beq.w	c668 <isr+0xb0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    dcd6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    dcda:	8c1b      	ldrh	r3, [r3, #32]
    dcdc:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    dcde:	230a      	movs	r3, #10
    dce0:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    dce2:	f7fb fa21 	bl	9128 <packet_rx_enqueue>
    dce6:	e7a7      	b.n	dc38 <isr+0x1680>
			_radio.conn_curr->appto_expire = 0;
    dce8:	2300      	movs	r3, #0
    dcea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    dcee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    dcf2:	2b00      	cmp	r3, #0
    dcf4:	d1ac      	bne.n	dc50 <isr+0x1698>
    dcf6:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    dcfa:	428b      	cmp	r3, r1
    dcfc:	d1ac      	bne.n	dc58 <isr+0x16a0>
				_radio.conn_curr->llcp_type = LLCP_PING;
    dcfe:	2307      	movs	r3, #7
    dd00:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    dd04:	1e4b      	subs	r3, r1, #1
    dd06:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    dd0a:	e7a1      	b.n	dc50 <isr+0x1698>
	lazy = 0;
    dd0c:	463b      	mov	r3, r7
    dd0e:	e7b1      	b.n	dc74 <isr+0x16bc>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    dd10:	3b04      	subs	r3, #4
    dd12:	2b01      	cmp	r3, #1
    dd14:	f63e aca8 	bhi.w	c668 <isr+0xb0>
		_radio.state = STATE_NONE;
    dd18:	2300      	movs	r3, #0
    dd1a:	7523      	strb	r3, [r4, #20]
    dd1c:	f7fe bcf2 	b.w	c704 <isr+0x14c>
    dd20:	000096b5 	.word	0x000096b5
    dd24:	1afd498d 	.word	0x1afd498d
    dd28:	00000007 	.word	0x00000007
    dd2c:	3b9aca00 	.word	0x3b9aca00

0000dd30 <radio_init>:
{
    dd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    dd34:	4e3d      	ldr	r6, [pc, #244]	; (de2c <radio_init+0xfc>)
{
    dd36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    dd38:	f89d c01c 	ldrb.w	ip, [sp, #28]
    dd3c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    dd40:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    dd44:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    dd48:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    dd4a:	f44f 70aa 	mov.w	r0, #340	; 0x154
    dd4e:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    dd52:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    dd56:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    dd5a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    dd5c:	f10c 0401 	add.w	r4, ip, #1
    dd60:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    dd62:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    dd64:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    dd68:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    dd6c:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    dd6e:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    dd70:	bf98      	it	ls
    dd72:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    dd76:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    dd7a:	bf88      	it	hi
    dd7c:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    dd80:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    dd84:	bf8c      	ite	hi
    dd86:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    dd8a:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    dd8e:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    dd92:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    dd96:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    dd9a:	bf8c      	ite	hi
    dd9c:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    dda0:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    dda2:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    dda6:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
    ddaa:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
    ddae:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    ddb2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    ddb6:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    ddba:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
    ddbe:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    ddc2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    ddc4:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
    ddc6:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    ddca:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    ddcc:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    ddd0:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    ddd4:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    ddd8:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    ddda:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    ddde:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    dde2:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    dde6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    ddea:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    ddee:	340a      	adds	r4, #10
    ddf0:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    ddf4:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    ddf6:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    ddf8:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    ddfc:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    de00:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    de02:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    de06:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    de0a:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    de0e:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
    de12:	d003      	beq.n	de1c <radio_init+0xec>
		return (retcode + mem_size);
    de14:	442c      	add	r4, r5
}
    de16:	4620      	mov	r0, r4
    de18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    de1c:	2301      	movs	r3, #1
    de1e:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
    de22:	f7fa fbdb 	bl	85dc <common_init>
	radio_setup();
    de26:	f001 ff35 	bl	fc94 <radio_setup>
	return retcode;
    de2a:	e7f4      	b.n	de16 <radio_init+0xe6>
    de2c:	20000660 	.word	0x20000660

0000de30 <ll_reset>:
{
    de30:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    de32:	2103      	movs	r1, #3
    de34:	2005      	movs	r0, #5
    de36:	f7fa fca7 	bl	8788 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    de3a:	2104      	movs	r1, #4
    de3c:	2006      	movs	r0, #6
    de3e:	f7fa fca3 	bl	8788 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    de42:	4c22      	ldr	r4, [pc, #136]	; (decc <ll_reset+0x9c>)
    de44:	2500      	movs	r5, #0
    de46:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    de4a:	b2ab      	uxth	r3, r5
    de4c:	429a      	cmp	r2, r3
    de4e:	f105 0501 	add.w	r5, r5, #1
    de52:	d834      	bhi.n	debe <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    de54:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    de58:	f36f 13c7 	bfc	r3, #7, #1
    de5c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    de60:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    de64:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    de66:	f360 0300 	bfi	r3, r0, #0, #1
    de6a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    de6e:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    de70:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    de74:	fbb3 f3f2 	udiv	r3, r3, r2
    de78:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    de7c:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
    de80:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    de84:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    de86:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
    de8a:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    de8e:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    de92:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    de96:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    de9a:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    de9e:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
    dea2:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
    dea6:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
    deaa:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
    deae:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
    deb2:	f001 fd85 	bl	f9c0 <ll_filter_reset>
}
    deb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    deba:	f7fa bb8f 	b.w	85dc <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    debe:	1da8      	adds	r0, r5, #6
    dec0:	21ff      	movs	r1, #255	; 0xff
    dec2:	b2c0      	uxtb	r0, r0
    dec4:	f7fa fc60 	bl	8788 <role_disable>
    dec8:	e7bd      	b.n	de46 <ll_reset+0x16>
    deca:	bf00      	nop
    decc:	20000660 	.word	0x20000660

0000ded0 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    ded0:	4b02      	ldr	r3, [pc, #8]	; (dedc <ll_adv_is_enabled+0xc>)
    ded2:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    ded6:	09c0      	lsrs	r0, r0, #7
    ded8:	4770      	bx	lr
    deda:	bf00      	nop
    dedc:	20000660 	.word	0x20000660

0000dee0 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    dee0:	4b04      	ldr	r3, [pc, #16]	; (def4 <radio_adv_filter_pol_get+0x14>)
    dee2:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    dee6:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    dee8:	bfba      	itte	lt
    deea:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    deee:	0980      	lsrlt	r0, r0, #6
    def0:	2000      	movge	r0, #0
}
    def2:	4770      	bx	lr
    def4:	20000660 	.word	0x20000660

0000def8 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    def8:	4a09      	ldr	r2, [pc, #36]	; (df20 <ll_scan_is_enabled+0x28>)
    defa:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    defe:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    df02:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    df06:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    df0a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    df0c:	f003 0301 	and.w	r3, r3, #1
    df10:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    df14:	bf14      	ite	ne
    df16:	2004      	movne	r0, #4
    df18:	2000      	moveq	r0, #0
}
    df1a:	4318      	orrs	r0, r3
    df1c:	4770      	bx	lr
    df1e:	bf00      	nop
    df20:	20000660 	.word	0x20000660

0000df24 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    df24:	4b05      	ldr	r3, [pc, #20]	; (df3c <radio_scan_filter_pol_get+0x18>)
    df26:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    df2a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    df2e:	bf1c      	itt	ne
    df30:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    df34:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    df38:	4770      	bx	lr
    df3a:	bf00      	nop
    df3c:	20000660 	.word	0x20000660

0000df40 <radio_connect_enable>:
{
    df40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    df44:	f8df 8358 	ldr.w	r8, [pc, #856]	; e2a0 <radio_connect_enable+0x360>
{
    df48:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
    df4a:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
    df4e:	9301      	str	r3, [sp, #4]
    df50:	4683      	mov	fp, r0
    df52:	468a      	mov	sl, r1
    df54:	4691      	mov	r9, r2
    df56:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
    df58:	2e00      	cmp	r6, #0
    df5a:	f040 8193 	bne.w	e284 <radio_connect_enable+0x344>
	link = mem_acquire(&_radio.link_rx_free);
    df5e:	f508 70a4 	add.w	r0, r8, #328	; 0x148
    df62:	f7f7 fdea 	bl	5b3a <mem_acquire>
	if (!link) {
    df66:	4607      	mov	r7, r0
    df68:	b150      	cbz	r0, df80 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
    df6a:	f508 7086 	add.w	r0, r8, #268	; 0x10c
    df6e:	f7f7 fde4 	bl	5b3a <mem_acquire>
	if (!conn) {
    df72:	4604      	mov	r4, r0
    df74:	b930      	cbnz	r0, df84 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
    df76:	f508 71a4 	add.w	r1, r8, #328	; 0x148
    df7a:	4638      	mov	r0, r7
    df7c:	f7f7 fdf7 	bl	5b6e <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    df80:	2007      	movs	r0, #7
    df82:	e15c      	b.n	e23e <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
    df84:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
    df88:	f36b 1386 	bfi	r3, fp, #6, #1
    df8c:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    df90:	2206      	movs	r2, #6
    df92:	4651      	mov	r1, sl
    df94:	f108 00ea 	add.w	r0, r8, #234	; 0xea
    df98:	f7f3 fe30 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
    df9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dfa0:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    dfa4:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    dfa6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
    dfaa:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    dfae:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    dfb0:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    dfb4:	f001 ff2a 	bl	fe0c <radio_tx_ready_delay_get>
    dfb8:	49b5      	ldr	r1, [pc, #724]	; (e290 <radio_connect_enable+0x350>)
    dfba:	f200 4052 	addw	r0, r0, #1106	; 0x452
    dfbe:	a3b2      	add	r3, pc, #712	; (adr r3, e288 <radio_connect_enable+0x348>)
    dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    dfc4:	fba0 0101 	umull	r0, r1, r0, r1
    dfc8:	f7f2 f924 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
    dfcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    dfd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dfd4:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
    dfd8:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    dfda:	f8df 82c8 	ldr.w	r8, [pc, #712]	; e2a4 <radio_connect_enable+0x364>
	conn->llcp_features = RADIO_BLE_FEAT;
    dfde:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
    dfe2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    dfe6:	2603      	movs	r6, #3
	consecutive_cnt = 1;
    dfe8:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
    dfec:	2104      	movs	r1, #4
    dfee:	a803      	add	r0, sp, #12
    dff0:	f7f8 fdc6 	bl	6b80 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    dff4:	f8dd c00c 	ldr.w	ip, [sp, #12]
    dff8:	2000      	movs	r0, #0
    dffa:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
    dffe:	231f      	movs	r3, #31
	transitions = 0;
    e000:	4602      	mov	r2, r0
	consecutive_cnt = 1;
    e002:	2101      	movs	r1, #1
	while (bit_idx--) {
    e004:	3b01      	subs	r3, #1
    e006:	b2db      	uxtb	r3, r3
    e008:	2bff      	cmp	r3, #255	; 0xff
    e00a:	d103      	bne.n	e014 <radio_connect_enable+0xd4>
    e00c:	b3d0      	cbz	r0, e084 <radio_connect_enable+0x144>
    e00e:	f8cd c00c 	str.w	ip, [sp, #12]
    e012:	e037      	b.n	e084 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
    e014:	fa2c fe03 	lsr.w	lr, ip, r3
    e018:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
    e01c:	45d6      	cmp	lr, sl
    e01e:	d11a      	bne.n	e056 <radio_connect_enable+0x116>
			consecutive_cnt++;
    e020:	3101      	adds	r1, #1
    e022:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
    e024:	2906      	cmp	r1, #6
    e026:	d807      	bhi.n	e038 <radio_connect_enable+0xf8>
    e028:	2b1b      	cmp	r3, #27
    e02a:	d81a      	bhi.n	e062 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
    e02c:	b122      	cbz	r2, e038 <radio_connect_enable+0xf8>
    e02e:	2b1b      	cmp	r3, #27
    e030:	d017      	beq.n	e062 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
    e032:	2a01      	cmp	r2, #1
    e034:	d815      	bhi.n	e062 <radio_connect_enable+0x122>
    e036:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
    e038:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
    e03c:	f1be 0f00 	cmp.w	lr, #0
    e040:	f000 8100 	beq.w	e244 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
    e044:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
    e048:	f04f 0e00 	mov.w	lr, #0
			transitions++;
    e04c:	3201      	adds	r2, #1
    e04e:	2001      	movs	r0, #1
    e050:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    e052:	4601      	mov	r1, r0
    e054:	e005      	b.n	e062 <radio_connect_enable+0x122>
			transitions++;
    e056:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
    e058:	2b1b      	cmp	r3, #27
			transitions++;
    e05a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    e05c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
    e060:	d9e5      	bls.n	e02e <radio_connect_enable+0xee>
		if (transitions > 24) {
    e062:	2a18      	cmp	r2, #24
    e064:	f240 80f6 	bls.w	e254 <radio_connect_enable+0x314>
    e068:	b108      	cbz	r0, e06e <radio_connect_enable+0x12e>
    e06a:	f8cd c00c 	str.w	ip, [sp, #12]
    e06e:	3301      	adds	r3, #1
    e070:	9a03      	ldr	r2, [sp, #12]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    e072:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
    e076:	f1be 0f00 	cmp.w	lr, #0
    e07a:	f000 80e8 	beq.w	e24e <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    e07e:	425b      	negs	r3, r3
    e080:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
    e082:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    e084:	9b03      	ldr	r3, [sp, #12]
    e086:	a804      	add	r0, sp, #16
    e088:	ea83 0308 	eor.w	r3, r3, r8
    e08c:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    e090:	2104      	movs	r1, #4
    e092:	f7f7 fefd 	bl	5e90 <util_ones_count_get>
    e096:	2801      	cmp	r0, #1
    e098:	f240 80e3 	bls.w	e262 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    e09c:	9b03      	ldr	r3, [sp, #12]
    e09e:	b29a      	uxth	r2, r3
    e0a0:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    e0a4:	f000 80d8 	beq.w	e258 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    e0a8:	2204      	movs	r2, #4
    e0aa:	a903      	add	r1, sp, #12
    e0ac:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
    e0b0:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    e0b2:	f7f3 fda3 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
    e0b6:	2103      	movs	r1, #3
    e0b8:	f104 0014 	add.w	r0, r4, #20
    e0bc:	f7f8 fd60 	bl	6b80 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
    e0c0:	2205      	movs	r2, #5
    e0c2:	4974      	ldr	r1, [pc, #464]	; (e294 <radio_connect_enable+0x354>)
    e0c4:	f104 0017 	add.w	r0, r4, #23
    e0c8:	f7f3 fd98 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
    e0cc:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
    e0d0:	7f63      	ldrb	r3, [r4, #29]
    e0d2:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
    e0d6:	f36f 1386 	bfc	r3, #6, #1
    e0da:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
    e0dc:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
    e0de:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
    e0e0:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
    e0e2:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
    e0e4:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
    e0e8:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
    e0ec:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
    e0f0:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    e0f2:	211b      	movs	r1, #27
    e0f4:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    e0f6:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
    e0f8:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
    e0fc:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e0fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
    e102:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e106:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    e108:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
    e10a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
    e10e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
    e110:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
    e114:	2601      	movs	r6, #1
    e116:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
    e11a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    e11e:	f363 11c7 	bfi	r1, r3, #7, #1
    e122:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
    e126:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
    e12a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
    e12e:	f366 0102 	bfi	r1, r6, #0, #3
    e132:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
    e136:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
    e13a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
    e13c:	b2c9      	uxtb	r1, r1
    e13e:	f36c 01c5 	bfi	r1, ip, #3, #3
    e142:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
    e146:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
    e14a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
    e14c:	f366 0102 	bfi	r1, r6, #0, #3
    e150:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
    e154:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
    e156:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
    e158:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
    e15c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
    e15e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
    e160:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
    e164:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    e168:	f363 0100 	bfi	r1, r3, #0, #1
    e16c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
    e170:	f240 42e2 	movw	r2, #1250	; 0x4e2
    e174:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e178:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
    e17c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e180:	1e56      	subs	r6, r2, #1
    e182:	f242 7e10 	movw	lr, #10000	; 0x2710
    e186:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
    e18a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e18e:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e192:	4b41      	ldr	r3, [pc, #260]	; (e298 <radio_connect_enable+0x358>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    e194:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e196:	4941      	ldr	r1, [pc, #260]	; (e29c <radio_connect_enable+0x35c>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e198:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e19a:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e19c:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e1a0:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e1a4:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    e1a6:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e1aa:	1d81      	adds	r1, r0, #6
    e1ac:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e1ae:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e1b2:	dc61      	bgt.n	e278 <radio_connect_enable+0x338>
	conn->llcp_version.tx = 0;
    e1b4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e1b8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
    e1bc:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
    e1be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    e1c2:	f360 0341 	bfi	r3, r0, #1, #1
    e1c6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
    e1ca:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
    e1ce:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
    e1d2:	f360 1304 	bfi	r3, r0, #4, #1
    e1d6:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
    e1da:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
    e1de:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
    e1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e1e6:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
    e1ea:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
    e1ee:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
    e1f2:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
    e1f6:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
    e1fa:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    e1fe:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
    e202:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
    e206:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
    e20a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
    e20e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
    e212:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
    e216:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
    e21a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
    e21e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
    e222:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    e226:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
    e22a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
    e22e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
    e232:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    e236:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
    e23a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
    e23e:	b005      	add	sp, #20
    e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
    e244:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
    e248:	f04f 0e01 	mov.w	lr, #1
    e24c:	e6fe      	b.n	e04c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
    e24e:	3b01      	subs	r3, #1
    e250:	4313      	orrs	r3, r2
    e252:	e716      	b.n	e082 <radio_connect_enable+0x142>
		if (transitions > 24) {
    e254:	46f2      	mov	sl, lr
    e256:	e6d5      	b.n	e004 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
    e258:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    e25a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
    e25e:	f47f af23 	bne.w	e0a8 <radio_connect_enable+0x168>
    e262:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
    e264:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    e268:	f47f aec0 	bne.w	dfec <radio_connect_enable+0xac>
    e26c:	4040      	eors	r0, r0
    e26e:	f380 8811 	msr	BASEPRI, r0
    e272:	f04f 0004 	mov.w	r0, #4
    e276:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e278:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    e27c:	33fa      	adds	r3, #250	; 0xfa
    e27e:	441a      	add	r2, r3
    e280:	b292      	uxth	r2, r2
    e282:	e797      	b.n	e1b4 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e284:	200c      	movs	r0, #12
    e286:	e7da      	b.n	e23e <radio_connect_enable+0x2fe>
    e288:	1afd498d 	.word	0x1afd498d
    e28c:	00000007 	.word	0x00000007
    e290:	3b9aca00 	.word	0x3b9aca00
    e294:	2000077a 	.word	0x2000077a
    e298:	01c9c37f 	.word	0x01c9c37f
    e29c:	026259ff 	.word	0x026259ff
    e2a0:	20000660 	.word	0x20000660
    e2a4:	8e89bed6 	.word	0x8e89bed6

0000e2a8 <ll_conn_update>:
{
    e2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2ac:	460c      	mov	r4, r1
    e2ae:	4690      	mov	r8, r2
    e2b0:	461d      	mov	r5, r3
    e2b2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e2b6:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
    e2ba:	f7fa fa4f 	bl	875c <connection_get>
	if (!conn) {
    e2be:	b330      	cbz	r0, e30e <ll_conn_update+0x66>
	if (!cmd) {
    e2c0:	2c00      	cmp	r4, #0
    e2c2:	d14a      	bne.n	e35a <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
    e2c4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e2c8:	06d9      	lsls	r1, r3, #27
    e2ca:	d407      	bmi.n	e2dc <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
    e2cc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
    e2d0:	069a      	lsls	r2, r3, #26
    e2d2:	d541      	bpl.n	e358 <ll_conn_update+0xb0>
		     (conn->llcp_features &
    e2d4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
    e2d8:	079b      	lsls	r3, r3, #30
    e2da:	d43d      	bmi.n	e358 <ll_conn_update+0xb0>
		} else if (conn->role) {
    e2dc:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e2e0:	2b00      	cmp	r3, #0
    e2e2:	da17      	bge.n	e314 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e2e4:	201a      	movs	r0, #26
    e2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
    e2ea:	428b      	cmp	r3, r1
    e2ec:	d00f      	beq.n	e30e <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
    e2ee:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
    e2f2:	f003 0207 	and.w	r2, r3, #7
    e2f6:	2a03      	cmp	r2, #3
    e2f8:	d109      	bne.n	e30e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    e2fa:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    e2fe:	b2db      	uxtb	r3, r3
    e300:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
    e304:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
    e308:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    e30c:	e021      	b.n	e352 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e30e:	200c      	movs	r0, #12
    e310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
    e314:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    e318:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e31c:	429a      	cmp	r2, r3
    e31e:	d1f6      	bne.n	e30e <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e320:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
    e324:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
    e328:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
    e32a:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e32c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
    e330:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
    e334:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
    e336:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    e33a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
    e33e:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
    e342:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
    e346:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    e34a:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
    e34e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
    e352:	2000      	movs	r0, #0
    e354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
    e358:	2401      	movs	r4, #1
		cmd--;
    e35a:	3c01      	subs	r4, #1
		if (cmd) {
    e35c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    e360:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    e364:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    e368:	d1bf      	bne.n	e2ea <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
    e36a:	4299      	cmp	r1, r3
    e36c:	d1cf      	bne.n	e30e <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    e36e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
    e372:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
    e376:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    e37a:	b2db      	uxtb	r3, r3
    e37c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
    e380:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
    e382:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
    e386:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
    e38a:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
    e38e:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
    e392:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
    e396:	e7dc      	b.n	e352 <ll_conn_update+0xaa>

0000e398 <ll_chm_update>:
{
    e398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
    e39c:	4c1e      	ldr	r4, [pc, #120]	; (e418 <ll_chm_update+0x80>)
    e39e:	4601      	mov	r1, r0
    e3a0:	2205      	movs	r2, #5
{
    e3a2:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
    e3a4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    e3a8:	f7f3 fc28 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
    e3ac:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    e3b0:	2105      	movs	r1, #5
    e3b2:	f7f7 fd6d 	bl	5e90 <util_ones_count_get>
	_radio.data_chan_count =
    e3b6:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
    e3ba:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
    e3be:	3c01      	subs	r4, #1
    e3c0:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
    e3c2:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    e3c4:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
    e3c8:	2cff      	cmp	r4, #255	; 0xff
    e3ca:	d102      	bne.n	e3d2 <ll_chm_update+0x3a>
	return 0;
    e3cc:	2000      	movs	r0, #0
    e3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
    e3d2:	4620      	mov	r0, r4
    e3d4:	f7fa f9c2 	bl	875c <connection_get>
		if (!conn || conn->role) {
    e3d8:	4606      	mov	r6, r0
    e3da:	b1b8      	cbz	r0, e40c <ll_chm_update+0x74>
    e3dc:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e3e0:	2b00      	cmp	r3, #0
    e3e2:	db13      	blt.n	e40c <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
    e3e4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e3e8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e3ec:	429a      	cmp	r2, r3
    e3ee:	d110      	bne.n	e412 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
    e3f0:	2205      	movs	r2, #5
    e3f2:	4629      	mov	r1, r5
    e3f4:	3079      	adds	r0, #121	; 0x79
    e3f6:	f7f3 fc01 	bl	1bfc <memcpy>
		conn->llcp_req++;
    e3fa:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
    e3fe:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
    e402:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    e404:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
    e408:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
    e40c:	3c01      	subs	r4, #1
    e40e:	b2e4      	uxtb	r4, r4
    e410:	e7da      	b.n	e3c8 <ll_chm_update+0x30>
			return 1;
    e412:	2001      	movs	r0, #1
}
    e414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e418:	20000660 	.word	0x20000660

0000e41c <ll_chm_get>:
{
    e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e41e:	460d      	mov	r5, r1
	conn = connection_get(handle);
    e420:	f7fa f99c 	bl	875c <connection_get>
	if (!conn) {
    e424:	4604      	mov	r4, r0
    e426:	b160      	cbz	r0, e442 <ll_chm_get+0x26>
		conn->chm_update = 0;
    e428:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    e42a:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
    e42e:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    e430:	2205      	movs	r2, #5
    e432:	4631      	mov	r1, r6
    e434:	4628      	mov	r0, r5
    e436:	f7f3 fbe1 	bl	1bfc <memcpy>
	} while (conn->chm_update);
    e43a:	7f20      	ldrb	r0, [r4, #28]
    e43c:	2800      	cmp	r0, #0
    e43e:	d1f6      	bne.n	e42e <ll_chm_get+0x12>
    e440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    e442:	2001      	movs	r0, #1
}
    e444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e446 <ll_feature_req_send>:
{
    e446:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    e448:	f7fa f988 	bl	875c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e44c:	b168      	cbz	r0, e46a <ll_feature_req_send+0x24>
    e44e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e452:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e456:	4293      	cmp	r3, r2
    e458:	d107      	bne.n	e46a <ll_feature_req_send+0x24>
	conn->llcp_req++;
    e45a:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    e45c:	2204      	movs	r2, #4
	conn->llcp_req++;
    e45e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    e462:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    e466:	2000      	movs	r0, #0
    e468:	bd08      	pop	{r3, pc}
		return 1;
    e46a:	2001      	movs	r0, #1
}
    e46c:	bd08      	pop	{r3, pc}

0000e46e <ll_version_ind_send>:
{
    e46e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    e470:	f7fa f974 	bl	875c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e474:	b168      	cbz	r0, e492 <ll_version_ind_send+0x24>
    e476:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e47a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e47e:	4293      	cmp	r3, r2
    e480:	d107      	bne.n	e492 <ll_version_ind_send+0x24>
	conn->llcp_req++;
    e482:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    e484:	2205      	movs	r2, #5
	conn->llcp_req++;
    e486:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    e48a:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    e48e:	2000      	movs	r0, #0
    e490:	bd08      	pop	{r3, pc}
		return 1;
    e492:	2001      	movs	r0, #1
}
    e494:	bd08      	pop	{r3, pc}

0000e496 <ll_terminate_ind_send>:
{
    e496:	b510      	push	{r4, lr}
    e498:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e49a:	f7fa f95f 	bl	875c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    e49e:	b160      	cbz	r0, e4ba <ll_terminate_ind_send+0x24>
    e4a0:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
    e4a4:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
    e4a8:	4293      	cmp	r3, r2
    e4aa:	d106      	bne.n	e4ba <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
    e4ac:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
    e4ae:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
    e4b2:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
    e4b6:	2000      	movs	r0, #0
    e4b8:	bd10      	pop	{r4, pc}
		return 1;
    e4ba:	2001      	movs	r0, #1
}
    e4bc:	bd10      	pop	{r4, pc}

0000e4be <ll_tx_pwr_lvl_get>:
{
    e4be:	b510      	push	{r4, lr}
    e4c0:	4614      	mov	r4, r2
	conn = connection_get(handle);
    e4c2:	f7fa f94b 	bl	875c <connection_get>
	if (!conn) {
    e4c6:	b110      	cbz	r0, e4ce <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    e4c8:	2000      	movs	r0, #0
    e4ca:	7020      	strb	r0, [r4, #0]
	return 0;
    e4cc:	bd10      	pop	{r4, pc}
		return 1;
    e4ce:	2001      	movs	r0, #1
}
    e4d0:	bd10      	pop	{r4, pc}

0000e4d2 <ll_apto_get>:
{
    e4d2:	b510      	push	{r4, lr}
    e4d4:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e4d6:	f7fa f941 	bl	875c <connection_get>
	if (!conn) {
    e4da:	b160      	cbz	r0, e4f6 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    e4dc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    e4de:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    e4e2:	435a      	muls	r2, r3
    e4e4:	237d      	movs	r3, #125	; 0x7d
    e4e6:	4353      	muls	r3, r2
	return 0;
    e4e8:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    e4ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e4ee:	fb93 f3f2 	sdiv	r3, r3, r2
    e4f2:	8023      	strh	r3, [r4, #0]
	return 0;
    e4f4:	bd10      	pop	{r4, pc}
		return 1;
    e4f6:	2001      	movs	r0, #1
}
    e4f8:	bd10      	pop	{r4, pc}

0000e4fa <ll_apto_set>:
{
    e4fa:	b510      	push	{r4, lr}
    e4fc:	460c      	mov	r4, r1
	conn = connection_get(handle);
    e4fe:	f7fa f92d 	bl	875c <connection_get>
	if (!conn) {
    e502:	b170      	cbz	r0, e522 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
    e504:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    e506:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e50a:	4353      	muls	r3, r2
    e50c:	f242 7110 	movw	r1, #10000	; 0x2710
    e510:	fb01 3404 	mla	r4, r1, r4, r3
    e514:	3c01      	subs	r4, #1
    e516:	fb94 f4f3 	sdiv	r4, r4, r3
    e51a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
    e51e:	2000      	movs	r0, #0
    e520:	bd10      	pop	{r4, pc}
		return 1;
    e522:	2001      	movs	r0, #1
}
    e524:	bd10      	pop	{r4, pc}

0000e526 <ll_length_req_send>:
{
    e526:	b570      	push	{r4, r5, r6, lr}
    e528:	460e      	mov	r6, r1
    e52a:	4615      	mov	r5, r2
	conn = connection_get(handle);
    e52c:	f7fa f916 	bl	875c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e530:	b1d0      	cbz	r0, e568 <ll_length_req_send+0x42>
    e532:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e536:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e53a:	429a      	cmp	r2, r3
    e53c:	d114      	bne.n	e568 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
    e53e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e542:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    e546:	4293      	cmp	r3, r2
    e548:	d10e      	bne.n	e568 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e54a:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
    e54e:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
    e552:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e554:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
    e558:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e55c:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
    e560:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
    e564:	2000      	movs	r0, #0
    e566:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    e568:	2001      	movs	r0, #1
}
    e56a:	bd70      	pop	{r4, r5, r6, pc}

0000e56c <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
    e56c:	4b03      	ldr	r3, [pc, #12]	; (e57c <ll_length_default_get+0x10>)
    e56e:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
    e572:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    e574:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
    e578:	800b      	strh	r3, [r1, #0]
    e57a:	4770      	bx	lr
    e57c:	20000660 	.word	0x20000660

0000e580 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
    e580:	4b03      	ldr	r3, [pc, #12]	; (e590 <ll_length_default_set+0x10>)
    e582:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
    e586:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
    e58a:	2000      	movs	r0, #0
    e58c:	4770      	bx	lr
    e58e:	bf00      	nop
    e590:	20000660 	.word	0x20000660

0000e594 <ll_length_max_get>:
{
    e594:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e596:	241b      	movs	r4, #27
    e598:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    e59a:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e59e:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e5a0:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    e5a2:	8018      	strh	r0, [r3, #0]
    e5a4:	bd10      	pop	{r4, pc}

0000e5a6 <ll_phy_get>:
{
    e5a6:	b538      	push	{r3, r4, r5, lr}
    e5a8:	460d      	mov	r5, r1
    e5aa:	4614      	mov	r4, r2
	conn = connection_get(handle);
    e5ac:	f7fa f8d6 	bl	875c <connection_get>
	if (!conn) {
    e5b0:	b158      	cbz	r0, e5ca <ll_phy_get+0x24>
	*tx = conn->phy_tx;
    e5b2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    e5b6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e5ba:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
    e5bc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    e5c0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e5c4:	7023      	strb	r3, [r4, #0]
	return 0;
    e5c6:	2000      	movs	r0, #0
    e5c8:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
    e5ca:	2001      	movs	r0, #1
}
    e5cc:	bd38      	pop	{r3, r4, r5, pc}
	...

0000e5d0 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
    e5d0:	4b03      	ldr	r3, [pc, #12]	; (e5e0 <ll_phy_default_set+0x10>)
    e5d2:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
    e5d6:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
    e5da:	2000      	movs	r0, #0
    e5dc:	4770      	bx	lr
    e5de:	bf00      	nop
    e5e0:	20000660 	.word	0x20000660

0000e5e4 <ll_phy_req_send>:
{
    e5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e5e8:	4689      	mov	r9, r1
    e5ea:	4690      	mov	r8, r2
    e5ec:	461f      	mov	r7, r3
	conn = connection_get(handle);
    e5ee:	f7fa f8b5 	bl	875c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e5f2:	b320      	cbz	r0, e63e <ll_phy_req_send+0x5a>
    e5f4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e5f8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e5fc:	429a      	cmp	r2, r3
    e5fe:	d11e      	bne.n	e63e <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    e600:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e604:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
    e608:	429d      	cmp	r5, r3
    e60a:	d118      	bne.n	e63e <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    e60c:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
    e610:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
    e614:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
    e618:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
    e61c:	f046 0102 	orr.w	r1, r6, #2
    e620:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
    e624:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
    e626:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
    e628:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
    e62c:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
    e630:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
    e634:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
    e638:	2000      	movs	r0, #0
    e63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
    e63e:	2001      	movs	r0, #1
}
    e640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e644 <ll_rx_get>:
{
    e644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e648:	4605      	mov	r5, r0
    e64a:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    e64c:	4918      	ldr	r1, [pc, #96]	; (e6b0 <ll_rx_get+0x6c>)
    e64e:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
    e652:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
    e656:	4293      	cmp	r3, r2
    e658:	460f      	mov	r7, r1
    e65a:	d01f      	beq.n	e69c <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    e65c:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    e660:	f201 1177 	addw	r1, r1, #375	; 0x177
    e664:	f898 2000 	ldrb.w	r2, [r8]
    e668:	f7fa f82e 	bl	86c8 <tx_cmplt_get>
		if (!cmplt) {
    e66c:	4604      	mov	r4, r0
    e66e:	b9e0      	cbnz	r0, e6aa <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    e670:	ae02      	add	r6, sp, #8
    e672:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
    e676:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    e67a:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
    e67e:	4631      	mov	r1, r6
    e680:	f10d 0006 	add.w	r0, sp, #6
    e684:	f7fa f820 	bl	86c8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    e688:	b934      	cbnz	r4, e698 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    e68a:	b928      	cbnz	r0, e698 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    e68c:	f8c5 8000 	str.w	r8, [r5]
}
    e690:	4620      	mov	r0, r4
    e692:	b002      	add	sp, #8
    e694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    e698:	4604      	mov	r4, r0
    e69a:	e7ee      	b.n	e67a <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    e69c:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
    e6a0:	f201 1177 	addw	r1, r1, #375	; 0x177
    e6a4:	f7fa f810 	bl	86c8 <tx_cmplt_get>
    e6a8:	4604      	mov	r4, r0
		*node_rx = NULL;
    e6aa:	2300      	movs	r3, #0
    e6ac:	602b      	str	r3, [r5, #0]
    e6ae:	e7ef      	b.n	e690 <ll_rx_get+0x4c>
    e6b0:	20000660 	.word	0x20000660

0000e6b4 <ll_rx_mem_release>:
{
    e6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    e6b8:	4c17      	ldr	r4, [pc, #92]	; (e718 <ll_rx_mem_release+0x64>)
{
    e6ba:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    e6bc:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e6be:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
    e6c2:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
    e6c6:	b928      	cbnz	r0, e6d4 <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
    e6c8:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
    e6ca:	20ff      	movs	r0, #255	; 0xff
}
    e6cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    e6d0:	f7f9 bf38 	b.w	8544 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
    e6d4:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    e6d6:	f8d0 8000 	ldr.w	r8, [r0]
    e6da:	2a0c      	cmp	r2, #12
    e6dc:	d807      	bhi.n	e6ee <ll_rx_mem_release+0x3a>
    e6de:	2301      	movs	r3, #1
    e6e0:	4093      	lsls	r3, r2
    e6e2:	f641 727e 	movw	r2, #8062	; 0x1f7e
    e6e6:	4213      	tst	r3, r2
    e6e8:	d107      	bne.n	e6fa <ll_rx_mem_release+0x46>
    e6ea:	061b      	lsls	r3, r3, #24
    e6ec:	d40a      	bmi.n	e704 <ll_rx_mem_release+0x50>
			LL_ASSERT(0);
    e6ee:	4040      	eors	r0, r0
    e6f0:	f380 8811 	msr	BASEPRI, r0
    e6f4:	f04f 0004 	mov.w	r0, #4
    e6f8:	df02      	svc	2
			mem_release(_node_rx_free,
    e6fa:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    e6fc:	f7f7 fa37 	bl	5b6e <mem_release>
{
    e700:	4640      	mov	r0, r8
    e702:	e7e0      	b.n	e6c6 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e704:	88c2      	ldrh	r2, [r0, #6]
    e706:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    e70a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e70e:	f7f7 fa49 	bl	5ba4 <mem_get>
			mem_release(conn, &_radio.conn_free);
    e712:	4639      	mov	r1, r7
    e714:	e7f2      	b.n	e6fc <ll_rx_mem_release+0x48>
    e716:	bf00      	nop
    e718:	20000790 	.word	0x20000790

0000e71c <do_radio_rx_fc_set>:
	if (req == ack) {
    e71c:	4291      	cmp	r1, r2
{
    e71e:	b510      	push	{r4, lr}
    e720:	4b14      	ldr	r3, [pc, #80]	; (e774 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    e722:	d119      	bne.n	e758 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    e724:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    e728:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
    e72c:	4294      	cmp	r4, r2
    e72e:	d111      	bne.n	e754 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
    e730:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    e732:	bf14      	ite	ne
    e734:	460a      	movne	r2, r1
    e736:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
    e738:	3a01      	subs	r2, #1
    e73a:	b2d2      	uxtb	r2, r2
    e73c:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    e740:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
    e744:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
    e748:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
    e74c:	4291      	cmp	r1, r2
    e74e:	d00f      	beq.n	e770 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    e750:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
    e754:	2001      	movs	r0, #1
    e756:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
    e758:	b929      	cbnz	r1, e766 <do_radio_rx_fc_set+0x4a>
    e75a:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
    e75e:	1a18      	subs	r0, r3, r0
    e760:	bf18      	it	ne
    e762:	2001      	movne	r0, #1
    e764:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    e766:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    e76a:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
    e76e:	e7f6      	b.n	e75e <do_radio_rx_fc_set+0x42>
	return 0;
    e770:	2000      	movs	r0, #0
}
    e772:	bd10      	pop	{r4, pc}
    e774:	20000660 	.word	0x20000660

0000e778 <radio_rx_fc_set>:
{
    e778:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    e77a:	4b14      	ldr	r3, [pc, #80]	; (e7cc <radio_rx_fc_set+0x54>)
    e77c:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
    e780:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    e782:	b302      	cbz	r2, e7c6 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    e784:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
    e788:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    e78a:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
    e78e:	b135      	cbz	r5, e79e <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    e790:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e794:	4298      	cmp	r0, r3
    e796:	d016      	beq.n	e7c6 <radio_rx_fc_set+0x4e>
}
    e798:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    e79a:	f7ff bfbf 	b.w	e71c <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    e79e:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
    e7a2:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
    e7a6:	42a0      	cmp	r0, r4
    e7a8:	d10d      	bne.n	e7c6 <radio_rx_fc_set+0x4e>
    e7aa:	4291      	cmp	r1, r2
    e7ac:	d00b      	beq.n	e7c6 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e7ae:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
    e7b2:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e7b6:	42a0      	cmp	r0, r4
    e7b8:	d005      	beq.n	e7c6 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    e7ba:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    e7be:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    e7c0:	bf08      	it	eq
    e7c2:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
    e7c6:	2000      	movs	r0, #0
    e7c8:	bc30      	pop	{r4, r5}
    e7ca:	4770      	bx	lr
    e7cc:	20000660 	.word	0x20000660

0000e7d0 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
    e7d0:	4801      	ldr	r0, [pc, #4]	; (e7d8 <ll_tx_mem_acquire+0x8>)
    e7d2:	f7f7 b9b2 	b.w	5b3a <mem_acquire>
    e7d6:	bf00      	nop
    e7d8:	200007c4 	.word	0x200007c4

0000e7dc <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    e7dc:	4901      	ldr	r1, [pc, #4]	; (e7e4 <ll_tx_mem_release+0x8>)
    e7de:	f7f7 b9c6 	b.w	5b6e <mem_release>
    e7e2:	bf00      	nop
    e7e4:	200007c4 	.word	0x200007c4

0000e7e8 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
    e7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    e7ea:	4d2b      	ldr	r5, [pc, #172]	; (e898 <ll_tx_mem_enqueue+0xb0>)
    e7ec:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
    e7f0:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
    e7f4:	3401      	adds	r4, #1
{
    e7f6:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
    e7f8:	b2e4      	uxtb	r4, r4
{
    e7fa:	4607      	mov	r7, r0
    e7fc:	460e      	mov	r6, r1
		last = 0;
    e7fe:	42a3      	cmp	r3, r4
    e800:	bf08      	it	eq
    e802:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
    e804:	f7f9 ffaa 	bl	875c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
    e808:	2800      	cmp	r0, #0
    e80a:	d042      	beq.n	e892 <ll_tx_mem_enqueue+0xaa>
    e80c:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
    e810:	429c      	cmp	r4, r3
    e812:	d03e      	beq.n	e892 <ll_tx_mem_enqueue+0xaa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
    e814:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    e818:	7972      	ldrb	r2, [r6, #5]
    e81a:	3b07      	subs	r3, #7
    e81c:	429a      	cmp	r2, r3
    e81e:	d905      	bls.n	e82c <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e820:	4040      	eors	r0, r0
    e822:	f380 8811 	msr	BASEPRI, r0
    e826:	f04f 0004 	mov.w	r0, #4
    e82a:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
    e82c:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
    e830:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
    e834:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    e838:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
    e83c:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
    e83e:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    e842:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e846:	2b00      	cmp	r3, #0
    e848:	db02      	blt.n	e850 <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
    e84a:	2000      	movs	r0, #0
}
    e84c:	b009      	add	sp, #36	; 0x24
    e84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    e850:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e852:	2b00      	cmp	r3, #0
    e854:	d0f9      	beq.n	e84a <ll_tx_mem_enqueue+0x62>
    e856:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e85a:	f012 0302 	ands.w	r3, r2, #2
    e85e:	d1f4      	bne.n	e84a <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1;
    e860:	f042 0202 	orr.w	r2, r2, #2
    e864:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    e868:	f890 2020 	ldrb.w	r2, [r0, #32]
    e86c:	490b      	ldr	r1, [pc, #44]	; (e89c <ll_tx_mem_enqueue+0xb4>)
    e86e:	9105      	str	r1, [sp, #20]
    e870:	3207      	adds	r2, #7
    e872:	2101      	movs	r1, #1
    e874:	9006      	str	r0, [sp, #24]
    e876:	9304      	str	r3, [sp, #16]
    e878:	9103      	str	r1, [sp, #12]
    e87a:	9302      	str	r3, [sp, #8]
    e87c:	9301      	str	r3, [sp, #4]
    e87e:	9300      	str	r3, [sp, #0]
    e880:	4618      	mov	r0, r3
    e882:	b2d2      	uxtb	r2, r2
    e884:	2103      	movs	r1, #3
    e886:	f7f8 f81d 	bl	68c4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e88a:	f030 0302 	bics.w	r3, r0, #2
    e88e:	d1c7      	bne.n	e820 <ll_tx_mem_enqueue+0x38>
    e890:	e7db      	b.n	e84a <ll_tx_mem_enqueue+0x62>
		return 1;
    e892:	2001      	movs	r0, #1
    e894:	e7da      	b.n	e84c <ll_tx_mem_enqueue+0x64>
    e896:	bf00      	nop
    e898:	20000660 	.word	0x20000660
    e89c:	0000969d 	.word	0x0000969d

0000e8a0 <ll_enc_req_send>:
{
    e8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e8a4:	4607      	mov	r7, r0
    e8a6:	4688      	mov	r8, r1
    e8a8:	4616      	mov	r6, r2
    e8aa:	4699      	mov	r9, r3
	conn = connection_get(handle);
    e8ac:	f7f9 ff56 	bl	875c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e8b0:	4605      	mov	r5, r0
    e8b2:	b910      	cbnz	r0, e8ba <ll_enc_req_send+0x1a>
			return 1;
    e8b4:	2001      	movs	r0, #1
    e8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e8ba:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    e8be:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    e8c2:	429a      	cmp	r2, r3
    e8c4:	d1f6      	bne.n	e8b4 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
    e8c6:	f7ff ff83 	bl	e7d0 <ll_tx_mem_acquire>
	if (node_tx) {
    e8ca:	4604      	mov	r4, r0
    e8cc:	2800      	cmp	r0, #0
    e8ce:	d0f1      	beq.n	e8b4 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    e8d0:	2210      	movs	r2, #16
    e8d2:	4649      	mov	r1, r9
    e8d4:	f105 0084 	add.w	r0, r5, #132	; 0x84
    e8d8:	f7f3 f990 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
    e8dc:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    e8e0:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    e8e4:	d124      	bne.n	e930 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    e8e6:	7923      	ldrb	r3, [r4, #4]
    e8e8:	f043 0303 	orr.w	r3, r3, #3
    e8ec:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
    e8ee:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    e8f0:	2208      	movs	r2, #8
			pdu_data_tx->len =
    e8f2:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
    e8f4:	2303      	movs	r3, #3
    e8f6:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    e8f8:	4641      	mov	r1, r8
    e8fa:	18a0      	adds	r0, r4, r2
    e8fc:	f7f3 f97e 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
    e900:	7833      	ldrb	r3, [r6, #0]
    e902:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
    e904:	7873      	ldrb	r3, [r6, #1]
    e906:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
    e908:	2108      	movs	r1, #8
    e90a:	f104 0012 	add.w	r0, r4, #18
    e90e:	f7f8 f937 	bl	6b80 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
    e912:	2104      	movs	r1, #4
    e914:	f104 001a 	add.w	r0, r4, #26
    e918:	f7f8 f932 	bl	6b80 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
    e91c:	4621      	mov	r1, r4
    e91e:	4638      	mov	r0, r7
    e920:	f7ff ff62 	bl	e7e8 <ll_tx_mem_enqueue>
    e924:	2601      	movs	r6, #1
    e926:	b1d0      	cbz	r0, e95e <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
    e928:	4620      	mov	r0, r4
    e92a:	f7ff ff57 	bl	e7dc <ll_tx_mem_release>
    e92e:	e7c1      	b.n	e8b4 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
    e930:	2b30      	cmp	r3, #48	; 0x30
    e932:	d1f9      	bne.n	e928 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
    e934:	2208      	movs	r2, #8
    e936:	4641      	mov	r1, r8
    e938:	f105 007a 	add.w	r0, r5, #122	; 0x7a
    e93c:	f7f3 f95e 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
    e940:	7833      	ldrb	r3, [r6, #0]
    e942:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
    e946:	7873      	ldrb	r3, [r6, #1]
    e948:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    e94c:	7923      	ldrb	r3, [r4, #4]
    e94e:	f043 0303 	orr.w	r3, r3, #3
    e952:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    e954:	2301      	movs	r3, #1
    e956:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
    e958:	230a      	movs	r3, #10
    e95a:	71e3      	strb	r3, [r4, #7]
    e95c:	e7de      	b.n	e91c <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
    e95e:	2303      	movs	r3, #3
    e960:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
    e964:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
    e968:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
    e96c:	3301      	adds	r3, #1
    e96e:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
    e972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000e978 <radio_scan_enable>:
{
    e978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
    e97c:	4c68      	ldr	r4, [pc, #416]	; (eb20 <radio_scan_enable+0x1a8>)
    e97e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
    e982:	b08e      	sub	sp, #56	; 0x38
    e984:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
    e986:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e98a:	f04f 0302 	mov.w	r3, #2
{
    e98e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e990:	930b      	str	r3, [sp, #44]	; 0x2c
{
    e992:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    e994:	d003      	beq.n	e99e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e996:	200c      	movs	r0, #12
}
    e998:	b00e      	add	sp, #56	; 0x38
    e99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    e99e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
    e9a2:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
    e9a6:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
    e9aa:	0840      	lsrs	r0, r0, #1
    e9ac:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
    e9b0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    e9b4:	f360 0200 	bfi	r2, r0, #0, #1
    e9b8:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
    e9bc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
    e9c0:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
    e9c4:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    e9c8:	2206      	movs	r2, #6
    e9ca:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
    e9ce:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    e9d2:	4e54      	ldr	r6, [pc, #336]	; (eb24 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    e9d4:	f7f3 f912 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    e9d8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    e9dc:	f04f 0991 	mov.w	r9, #145	; 0x91
    e9e0:	fba2 0106 	umull	r0, r1, r2, r6
    e9e4:	fb09 1102 	mla	r1, r9, r2, r1
    e9e8:	a34b      	add	r3, pc, #300	; (adr r3, eb18 <radio_scan_enable+0x1a0>)
    e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9ee:	f7f1 fc11 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    e9f2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    e9f6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
    e9fa:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    e9fe:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
    ea02:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ea06:	b2ba      	uxth	r2, r7
    ea08:	fba2 6706 	umull	r6, r7, r2, r6
    ea0c:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
    ea10:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
    ea14:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
    ea16:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
    ea1a:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
    ea1e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
    ea22:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ea26:	a33c      	add	r3, pc, #240	; (adr r3, eb18 <radio_scan_enable+0x1a0>)
    ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea2c:	4630      	mov	r0, r6
    ea2e:	4639      	mov	r1, r7
    ea30:	f7f1 fbf0 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
    ea34:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
    ea38:	459a      	cmp	sl, r3
    ea3a:	bf94      	ite	ls
    ea3c:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
    ea40:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
    ea44:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    ea48:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
    ea4a:	bf38      	it	cc
    ea4c:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
    ea50:	f7f8 f856 	bl	6b00 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
    ea54:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
    ea58:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	d045      	beq.n	eaea <radio_scan_enable+0x172>
		us_offset = 0;
    ea5e:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    ea60:	980c      	ldr	r0, [sp, #48]	; 0x30
    ea62:	4931      	ldr	r1, [pc, #196]	; (eb28 <radio_scan_enable+0x1b0>)
    ea64:	a32c      	add	r3, pc, #176	; (adr r3, eb18 <radio_scan_enable+0x1a0>)
    ea66:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea6a:	fba0 0101 	umull	r0, r1, r0, r1
    ea6e:	f7f1 fbd1 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea72:	ab0b      	add	r3, sp, #44	; 0x2c
    ea74:	9308      	str	r3, [sp, #32]
    ea76:	4b2d      	ldr	r3, [pc, #180]	; (eb2c <radio_scan_enable+0x1b4>)
    ea78:	9307      	str	r3, [sp, #28]
    ea7a:	4b2d      	ldr	r3, [pc, #180]	; (eb30 <radio_scan_enable+0x1b8>)
    ea7c:	9305      	str	r3, [sp, #20]
    ea7e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    ea82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea86:	4443      	add	r3, r8
    ea88:	2500      	movs	r5, #0
    ea8a:	4482      	add	sl, r0
    ea8c:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    ea8e:	4630      	mov	r0, r6
    ea90:	a321      	add	r3, pc, #132	; (adr r3, eb18 <radio_scan_enable+0x1a0>)
    ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea96:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea98:	9506      	str	r5, [sp, #24]
    ea9a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    ea9c:	f7f1 fbba 	bl	214 <__aeabi_uldivmod>
    eaa0:	4610      	mov	r0, r2
    eaa2:	4619      	mov	r1, r3
    eaa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eaa8:	2300      	movs	r3, #0
    eaaa:	f7f1 fbb3 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaae:	e88d 0220 	stmia.w	sp, {r5, r9}
    eab2:	9002      	str	r0, [sp, #8]
    eab4:	4653      	mov	r3, sl
    eab6:	2206      	movs	r2, #6
    eab8:	2103      	movs	r1, #3
    eaba:	4628      	mov	r0, r5
    eabc:	f7f7 feb2 	bl	6824 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    eac0:	2802      	cmp	r0, #2
    eac2:	d023      	beq.n	eb0c <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    eac4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    eac6:	2d00      	cmp	r5, #0
    eac8:	f47f af65 	bne.w	e996 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
    eacc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ead0:	f043 0301 	orr.w	r3, r3, #1
    ead4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
    ead8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    eadc:	2b00      	cmp	r3, #0
    eade:	db02      	blt.n	eae6 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
    eae0:	2002      	movs	r0, #2
    eae2:	f000 fd8f 	bl	f604 <ll_adv_scan_state_cb>
	return 0;
    eae6:	4628      	mov	r0, r5
    eae8:	e756      	b.n	e998 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    eaea:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
    eaee:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    eaf0:	aa0d      	add	r2, sp, #52	; 0x34
    eaf2:	ab0c      	add	r3, sp, #48	; 0x30
    eaf4:	4441      	add	r1, r8
    eaf6:	2003      	movs	r0, #3
    eaf8:	f7fa f962 	bl	8dc0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
    eafc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eafe:	2b00      	cmp	r3, #0
    eb00:	d0ae      	beq.n	ea60 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
    eb02:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    eb06:	e7ab      	b.n	ea60 <radio_scan_enable+0xe8>
			cpu_sleep();
    eb08:	f7f9 fc42 	bl	8390 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    eb0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eb0e:	2b02      	cmp	r3, #2
    eb10:	d0fa      	beq.n	eb08 <radio_scan_enable+0x190>
    eb12:	e7d7      	b.n	eac4 <radio_scan_enable+0x14c>
    eb14:	f3af 8000 	nop.w
    eb18:	1afd498d 	.word	0x1afd498d
    eb1c:	00000007 	.word	0x00000007
    eb20:	20000660 	.word	0x20000660
    eb24:	84e72a00 	.word	0x84e72a00
    eb28:	3b9aca00 	.word	0x3b9aca00
    eb2c:	000083d5 	.word	0x000083d5
    eb30:	00009935 	.word	0x00009935

0000eb34 <radio_scan_disable>:
{
    eb34:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
    eb36:	2104      	movs	r1, #4
    eb38:	2006      	movs	r0, #6
    eb3a:	f7f9 fe25 	bl	8788 <role_disable>
	if (!status) {
    eb3e:	4605      	mov	r5, r0
    eb40:	b9e8      	cbnz	r0, eb7e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
    eb42:	4c10      	ldr	r4, [pc, #64]	; (eb84 <radio_scan_disable+0x50>)
    eb44:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    eb48:	f360 0200 	bfi	r2, r0, #0, #1
    eb4c:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
    eb50:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
    eb54:	2a00      	cmp	r2, #0
    eb56:	db01      	blt.n	eb5c <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
    eb58:	f000 fd54 	bl	f604 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
    eb5c:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
    eb60:	b15e      	cbz	r6, eb7a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
    eb62:	2300      	movs	r3, #0
    eb64:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
    eb68:	4907      	ldr	r1, [pc, #28]	; (eb88 <radio_scan_disable+0x54>)
    eb6a:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    eb6e:	f7f6 fffe 	bl	5b6e <mem_release>
			mem_release(conn, &_radio.conn_free);
    eb72:	4906      	ldr	r1, [pc, #24]	; (eb8c <radio_scan_disable+0x58>)
    eb74:	4630      	mov	r0, r6
    eb76:	f7f6 fffa 	bl	5b6e <mem_release>
}
    eb7a:	4628      	mov	r0, r5
    eb7c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    eb7e:	250c      	movs	r5, #12
    eb80:	e7fb      	b.n	eb7a <radio_scan_disable+0x46>
    eb82:	bf00      	nop
    eb84:	20000660 	.word	0x20000660
    eb88:	200007a8 	.word	0x200007a8
    eb8c:	2000076c 	.word	0x2000076c

0000eb90 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
    eb90:	4b03      	ldr	r3, [pc, #12]	; (eba0 <ll_connect_disable+0x10>)
    eb92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    eb96:	b10b      	cbz	r3, eb9c <ll_connect_disable+0xc>
	status = radio_scan_disable();
    eb98:	f7ff bfcc 	b.w	eb34 <radio_scan_disable>
}
    eb9c:	200c      	movs	r0, #12
    eb9e:	4770      	bx	lr
    eba0:	20000660 	.word	0x20000660

0000eba4 <ll_rx_dequeue>:
{
    eba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    eba6:	4d34      	ldr	r5, [pc, #208]	; (ec78 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    eba8:	aa02      	add	r2, sp, #8
    ebaa:	2300      	movs	r3, #0
    ebac:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    ebb0:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
    ebb4:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
    ebb8:	f7f7 f828 	bl	5c0c <memq_dequeue>
    ebbc:	462c      	mov	r4, r5
	LL_ASSERT(link);
    ebbe:	b928      	cbnz	r0, ebcc <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    ebc0:	4040      	eors	r0, r0
    ebc2:	f380 8811 	msr	BASEPRI, r0
    ebc6:	f04f 0004 	mov.w	r0, #4
    ebca:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    ebcc:	f505 71a4 	add.w	r1, r5, #328	; 0x148
    ebd0:	f7f6 ffcd 	bl	5b6e <mem_release>
	switch (node_rx->hdr.type) {
    ebd4:	9a01      	ldr	r2, [sp, #4]
    ebd6:	7911      	ldrb	r1, [r2, #4]
    ebd8:	290c      	cmp	r1, #12
    ebda:	d8f1      	bhi.n	ebc0 <ll_rx_dequeue+0x1c>
    ebdc:	2301      	movs	r3, #1
    ebde:	408b      	lsls	r3, r1
    ebe0:	f641 707e 	movw	r0, #8062	; 0x1f7e
    ebe4:	4203      	tst	r3, r0
    ebe6:	d111      	bne.n	ec0c <ll_rx_dequeue+0x68>
    ebe8:	0618      	lsls	r0, r3, #24
    ebea:	d5e9      	bpl.n	ebc0 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    ebec:	2906      	cmp	r1, #6
    ebee:	d134      	bne.n	ec5a <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    ebf0:	7ad3      	ldrb	r3, [r2, #11]
    ebf2:	2b3c      	cmp	r3, #60	; 0x3c
    ebf4:	d015      	beq.n	ec22 <ll_rx_dequeue+0x7e>
    ebf6:	7b12      	ldrb	r2, [r2, #12]
    ebf8:	bb8a      	cbnz	r2, ec5e <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    ebfa:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ebfe:	07d9      	lsls	r1, r3, #31
    ec00:	d5de      	bpl.n	ebc0 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    ec02:	f362 0300 	bfi	r3, r2, #0, #1
    ec06:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    ec0a:	e01a      	b.n	ec42 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    ec0c:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
    ec10:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    ec14:	3801      	subs	r0, #1
    ec16:	4283      	cmp	r3, r0
    ec18:	dad2      	bge.n	ebc0 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    ec1a:	3301      	adds	r3, #1
    ec1c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		break;
    ec20:	e7e4      	b.n	ebec <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    ec22:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    ec24:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
    ec28:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
    ec2c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    ec30:	2b00      	cmp	r3, #0
    ec32:	dac5      	bge.n	ebc0 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    ec34:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ec38:	f36f 13c7 	bfc	r3, #7, #1
    ec3c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    ec40:	b97d      	cbnz	r5, ec62 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    ec42:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
    ec46:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    ec4a:	f000 0001 	and.w	r0, r0, #1
    ec4e:	0040      	lsls	r0, r0, #1
		if (!bm) {
    ec50:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    ec54:	d101      	bne.n	ec5a <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
    ec56:	f000 fcd5 	bl	f604 <ll_adv_scan_state_cb>
}
    ec5a:	b003      	add	sp, #12
    ec5c:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    ec5e:	2500      	movs	r5, #0
    ec60:	e7e4      	b.n	ec2c <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    ec62:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
    ec66:	4905      	ldr	r1, [pc, #20]	; (ec7c <ll_rx_dequeue+0xd8>)
    ec68:	f7f6 ff81 	bl	5b6e <mem_release>
			mem_release(conn, &_radio.conn_free);
    ec6c:	4904      	ldr	r1, [pc, #16]	; (ec80 <ll_rx_dequeue+0xdc>)
    ec6e:	4628      	mov	r0, r5
    ec70:	f7f6 ff7d 	bl	5b6e <mem_release>
    ec74:	e7e5      	b.n	ec42 <ll_rx_dequeue+0x9e>
    ec76:	bf00      	nop
    ec78:	20000660 	.word	0x20000660
    ec7c:	200007a8 	.word	0x200007a8
    ec80:	2000076c 	.word	0x2000076c

0000ec84 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    ec84:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    ec86:	4c0b      	ldr	r4, [pc, #44]	; (ecb4 <rtc0_nrf5_isr+0x30>)
    ec88:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    ec8c:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    ec90:	b122      	cbz	r2, ec9c <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    ec92:	2000      	movs	r0, #0
    ec94:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    ec98:	f7f7 fdb2 	bl	6800 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    ec9c:	b12d      	cbz	r5, ecaa <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    ec9e:	2300      	movs	r3, #0
    eca0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    eca4:	2001      	movs	r0, #1
    eca6:	f7f7 fdab 	bl	6800 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    ecaa:	2000      	movs	r0, #0
}
    ecac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    ecb0:	f7f7 b85c 	b.w	5d6c <mayfly_run>
    ecb4:	4000b000 	.word	0x4000b000

0000ecb8 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    ecb8:	2001      	movs	r0, #1
    ecba:	f7f7 b857 	b.w	5d6c <mayfly_run>

0000ecbe <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    ecbe:	4668      	mov	r0, sp
    ecc0:	f020 0107 	bic.w	r1, r0, #7
    ecc4:	468d      	mov	sp, r1
    ecc6:	b501      	push	{r0, lr}
	isr_radio();
    ecc8:	f000 ffc8 	bl	fc5c <isr_radio>
	ISR_DIRECT_PM();
    eccc:	f7f2 fe10 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    ecd0:	f7f2 fbfa 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    ecd4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    ecd8:	4685      	mov	sp, r0
    ecda:	4770      	bx	lr

0000ecdc <radio_active_callback>:
{
    ecdc:	4770      	bx	lr
	...

0000ece0 <radio_event_callback>:
	k_sem_give(sem_recv);
    ece0:	4b01      	ldr	r3, [pc, #4]	; (ece8 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    ece2:	6818      	ldr	r0, [r3, #0]
    ece4:	f002 bd5f 	b.w	117a6 <_impl_k_sem_give>
    ece8:	20000f90 	.word	0x20000f90

0000ecec <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    ecec:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    ecee:	4b37      	ldr	r3, [pc, #220]	; (edcc <ll_init+0xe0>)
{
    ecf0:	b087      	sub	sp, #28
	sem_recv = sem_rx;
    ecf2:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    ecf4:	4836      	ldr	r0, [pc, #216]	; (edd0 <ll_init+0xe4>)
    ecf6:	f002 f86f 	bl	10dd8 <device_get_binding>
	if (!clk_k32) {
    ecfa:	b918      	cbnz	r0, ed04 <ll_init+0x18>
		return -ENODEV;
    ecfc:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    ed00:	b007      	add	sp, #28
    ed02:	bd30      	pop	{r4, r5, pc}
	return api->on(dev, sys);
    ed04:	6843      	ldr	r3, [r0, #4]
    ed06:	2101      	movs	r1, #1
    ed08:	681b      	ldr	r3, [r3, #0]
    ed0a:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    ed0c:	4831      	ldr	r0, [pc, #196]	; (edd4 <ll_init+0xe8>)
    ed0e:	f002 f863 	bl	10dd8 <device_get_binding>
	if (!entropy) {
    ed12:	4604      	mov	r4, r0
    ed14:	2800      	cmp	r0, #0
    ed16:	d0f1      	beq.n	ecfc <ll_init+0x10>
	cntr_init();
    ed18:	f000 fe9a 	bl	fa50 <cntr_init>
	mayfly_init();
    ed1c:	f7f6 ff86 	bl	5c2c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    ed20:	4b2d      	ldr	r3, [pc, #180]	; (edd8 <ll_init+0xec>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    ed22:	2203      	movs	r2, #3
    ed24:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    ed26:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed28:	4a2c      	ldr	r2, [pc, #176]	; (eddc <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    ed2a:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    ed2c:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    ed2e:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    ed30:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    ed32:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed34:	9205      	str	r2, [sp, #20]
    ed36:	4a2a      	ldr	r2, [pc, #168]	; (ede0 <ll_init+0xf4>)
    ed38:	9204      	str	r2, [sp, #16]
    ed3a:	4a2a      	ldr	r2, [pc, #168]	; (ede4 <ll_init+0xf8>)
    ed3c:	9203      	str	r2, [sp, #12]
    ed3e:	4a2a      	ldr	r2, [pc, #168]	; (ede8 <ll_init+0xfc>)
    ed40:	9202      	str	r2, [sp, #8]
    ed42:	220d      	movs	r2, #13
    ed44:	9201      	str	r2, [sp, #4]
    ed46:	9300      	str	r3, [sp, #0]
    ed48:	4a28      	ldr	r2, [pc, #160]	; (edec <ll_init+0x100>)
    ed4a:	2304      	movs	r3, #4
    ed4c:	f7f7 fd20 	bl	6790 <ticker_init>
	LL_ASSERT(!err);
    ed50:	b128      	cbz	r0, ed5e <ll_init+0x72>
    ed52:	4040      	eors	r0, r0
    ed54:	f380 8811 	msr	BASEPRI, r0
    ed58:	f04f 0004 	mov.w	r0, #4
    ed5c:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    ed5e:	4824      	ldr	r0, [pc, #144]	; (edf0 <ll_init+0x104>)
    ed60:	f002 f83a 	bl	10dd8 <device_get_binding>
	if (!clk_m16) {
    ed64:	2800      	cmp	r0, #0
    ed66:	d0c9      	beq.n	ecfc <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    ed68:	f44f 7357 	mov.w	r3, #860	; 0x35c
    ed6c:	9305      	str	r3, [sp, #20]
    ed6e:	4b21      	ldr	r3, [pc, #132]	; (edf4 <ll_init+0x108>)
    ed70:	9304      	str	r3, [sp, #16]
    ed72:	9501      	str	r5, [sp, #4]
    ed74:	231b      	movs	r3, #27
    ed76:	2501      	movs	r5, #1
    ed78:	9303      	str	r3, [sp, #12]
    ed7a:	9302      	str	r3, [sp, #8]
    ed7c:	4622      	mov	r2, r4
    ed7e:	9500      	str	r5, [sp, #0]
    ed80:	462b      	mov	r3, r5
    ed82:	2107      	movs	r1, #7
    ed84:	f7fe ffd4 	bl	dd30 <radio_init>
	if (err) {
    ed88:	4604      	mov	r4, r0
    ed8a:	b9e0      	cbnz	r0, edc6 <ll_init+0xda>
	ll_filter_reset(true);
    ed8c:	4628      	mov	r0, r5
    ed8e:	f000 fe17 	bl	f9c0 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    ed92:	4622      	mov	r2, r4
    ed94:	4621      	mov	r1, r4
    ed96:	4628      	mov	r0, r5
    ed98:	f7f2 fd90 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    ed9c:	4622      	mov	r2, r4
    ed9e:	4621      	mov	r1, r4
    eda0:	200b      	movs	r0, #11
    eda2:	f7f2 fd8b 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    eda6:	4622      	mov	r2, r4
    eda8:	4621      	mov	r1, r4
    edaa:	2018      	movs	r0, #24
    edac:	f7f2 fd86 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    edb0:	4628      	mov	r0, r5
    edb2:	f7f2 fd51 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    edb6:	200b      	movs	r0, #11
    edb8:	f7f2 fd4e 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    edbc:	2018      	movs	r0, #24
    edbe:	f7f2 fd4b 	bl	1858 <_arch_irq_enable>
	return 0;
    edc2:	4620      	mov	r0, r4
    edc4:	e79c      	b.n	ed00 <ll_init+0x14>
		return -ENOMEM;
    edc6:	f06f 000b 	mvn.w	r0, #11
    edca:	e799      	b.n	ed00 <ll_init+0x14>
    edcc:	20000f90 	.word	0x20000f90
    edd0:	000123c0 	.word	0x000123c0
    edd4:	00012394 	.word	0x00012394
    edd8:	20000f70 	.word	0x20000f70
    eddc:	00010501 	.word	0x00010501
    ede0:	00010489 	.word	0x00010489
    ede4:	00010469 	.word	0x00010469
    ede8:	20000d00 	.word	0x20000d00
    edec:	20000bc0 	.word	0x20000bc0
    edf0:	000123cb 	.word	0x000123cb
    edf4:	20000864 	.word	0x20000864

0000edf8 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
    edf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    edfc:	4681      	mov	r9, r0
    edfe:	4688      	mov	r8, r1
    ee00:	4617      	mov	r7, r2
    ee02:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
    ee04:	f7ff f878 	bl	def8 <ll_scan_is_enabled>
    ee08:	b988      	cbnz	r0, ee2e <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
    ee0a:	4d0a      	ldr	r5, [pc, #40]	; (ee34 <ll_scan_params_set+0x3c>)
    ee0c:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
    ee0e:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
    ee12:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
    ee16:	4622      	mov	r2, r4
    ee18:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
    ee1c:	4613      	mov	r3, r2
    ee1e:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
    ee22:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
    ee24:	f362 1387 	bfi	r3, r2, #6, #2
    ee28:	712b      	strb	r3, [r5, #4]

	return 0;
    ee2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    ee2e:	200c      	movs	r0, #12
}
    ee30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ee34:	20000f94 	.word	0x20000f94

0000ee38 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
    ee38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee3a:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
    ee3c:	b920      	cbnz	r0, ee48 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
    ee3e:	b005      	add	sp, #20
    ee40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
    ee44:	f7ff be76 	b.w	eb34 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
    ee48:	f7ff f856 	bl	def8 <ll_scan_is_enabled>
    ee4c:	4606      	mov	r6, r0
    ee4e:	bb40      	cbnz	r0, eea2 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
    ee50:	4c15      	ldr	r4, [pc, #84]	; (eea8 <ll_scan_enable+0x70>)
    ee52:	7920      	ldrb	r0, [r4, #4]
    ee54:	0980      	lsrs	r0, r0, #6
    ee56:	f000 f9ef 	bl	f238 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
    ee5a:	7923      	ldrb	r3, [r4, #4]
    ee5c:	f013 0501 	ands.w	r5, r3, #1
    ee60:	d006      	beq.n	ee70 <ll_scan_enable+0x38>
    ee62:	f013 0520 	ands.w	r5, r3, #32
    ee66:	d003      	beq.n	ee70 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
    ee68:	4630      	mov	r0, r6
    ee6a:	f000 fb35 	bl	f4d8 <ll_rl_rpa_update>
		rpa_gen = 1;
    ee6e:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    ee70:	7926      	ldrb	r6, [r4, #4]
    ee72:	f006 070f 	and.w	r7, r6, #15
    ee76:	f3c6 1600 	ubfx	r6, r6, #4, #1
    ee7a:	2100      	movs	r1, #0
    ee7c:	4630      	mov	r0, r6
    ee7e:	f7f7 fe45 	bl	6b0c <ll_addr_get>
    ee82:	22ff      	movs	r2, #255	; 0xff
    ee84:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
    ee86:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    ee88:	8823      	ldrh	r3, [r4, #0]
    ee8a:	9502      	str	r5, [sp, #8]
    ee8c:	0992      	lsrs	r2, r2, #6
    ee8e:	9201      	str	r2, [sp, #4]
    ee90:	8862      	ldrh	r2, [r4, #2]
    ee92:	9200      	str	r2, [sp, #0]
    ee94:	4631      	mov	r1, r6
    ee96:	4602      	mov	r2, r0
    ee98:	4638      	mov	r0, r7
    ee9a:	f7ff fd6d 	bl	e978 <radio_scan_enable>
}
    ee9e:	b005      	add	sp, #20
    eea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    eea2:	2000      	movs	r0, #0
    eea4:	e7fb      	b.n	ee9e <ll_scan_enable+0x66>
    eea6:	bf00      	nop
    eea8:	20000f94 	.word	0x20000f94

0000eeac <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
    eeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eeb0:	b085      	sub	sp, #20
    eeb2:	461e      	mov	r6, r3
    eeb4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    eeb8:	9303      	str	r3, [sp, #12]
    eeba:	4680      	mov	r8, r0
    eebc:	4689      	mov	r9, r1
    eebe:	4615      	mov	r5, r2
    eec0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    eec2:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
    eec6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
    eeca:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
    eece:	f7ff f813 	bl	def8 <ll_scan_is_enabled>
    eed2:	9b03      	ldr	r3, [sp, #12]
    eed4:	bba0      	cbnz	r0, ef40 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
    eed6:	9300      	str	r3, [sp, #0]
    eed8:	4652      	mov	r2, sl
    eeda:	465b      	mov	r3, fp
    eedc:	4639      	mov	r1, r7
    eede:	4630      	mov	r0, r6
    eee0:	f7ff f82e 	bl	df40 <radio_connect_enable>
				      latency, timeout);

	if (status) {
    eee4:	bb68      	cbnz	r0, ef42 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
    eee6:	4628      	mov	r0, r5
    eee8:	f000 f9a6 	bl	f238 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
    eeec:	b1dd      	cbz	r5, ef26 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
    eeee:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    eef0:	1ea3      	subs	r3, r4, #2
    eef2:	2b01      	cmp	r3, #1
    eef4:	d822      	bhi.n	ef3c <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
    eef6:	2000      	movs	r0, #0
    eef8:	f000 faee 	bl	f4d8 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
    eefc:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
    ef00:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
    ef02:	2100      	movs	r1, #0
    ef04:	4620      	mov	r0, r4
    ef06:	f7f7 fe01 	bl	6b0c <ll_addr_get>
    ef0a:	4643      	mov	r3, r8
    ef0c:	4602      	mov	r2, r0
    ef0e:	4621      	mov	r1, r4
    ef10:	2000      	movs	r0, #0
    ef12:	9711      	str	r7, [sp, #68]	; 0x44
    ef14:	9610      	str	r6, [sp, #64]	; 0x40
    ef16:	950f      	str	r5, [sp, #60]	; 0x3c
    ef18:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
    ef1c:	b005      	add	sp, #20
    ef1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
    ef22:	f7ff bd29 	b.w	e978 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
    ef26:	f000 facf 	bl	f4c8 <ctrl_rl_enabled>
    ef2a:	2800      	cmp	r0, #0
    ef2c:	d0df      	beq.n	eeee <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
    ef2e:	4639      	mov	r1, r7
    ef30:	462a      	mov	r2, r5
    ef32:	4630      	mov	r0, r6
    ef34:	f000 f9a2 	bl	f27c <ll_rl_find>
    ef38:	4607      	mov	r7, r0
    ef3a:	e7d9      	b.n	eef0 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
    ef3c:	2600      	movs	r6, #0
    ef3e:	e7e0      	b.n	ef02 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ef40:	200c      	movs	r0, #12
}
    ef42:	b005      	add	sp, #20
    ef44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ef48 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
    ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef4c:	4688      	mov	r8, r1
	int i;

	if (free) {
    ef4e:	4615      	mov	r5, r2
    ef50:	b10a      	cbz	r2, ef56 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
    ef52:	23ff      	movs	r3, #255	; 0xff
    ef54:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    ef56:	4e14      	ldr	r6, [pc, #80]	; (efa8 <wl_find+0x60>)
{
    ef58:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    ef5a:	f000 0701 	and.w	r7, r0, #1
    ef5e:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    ef62:	07da      	lsls	r2, r3, #31
    ef64:	d51d      	bpl.n	efa2 <wl_find+0x5a>
    ef66:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ef6a:	42bb      	cmp	r3, r7
    ef6c:	d113      	bne.n	ef96 <wl_find+0x4e>
    ef6e:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
    ef72:	2206      	movs	r2, #6
    ef74:	4641      	mov	r1, r8
    ef76:	3002      	adds	r0, #2
    ef78:	f7f2 fe2b 	bl	1bd2 <memcmp>
    ef7c:	b910      	cbnz	r0, ef84 <wl_find+0x3c>
			return i;
    ef7e:	b2e0      	uxtb	r0, r4
    ef80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    ef84:	b13d      	cbz	r5, ef96 <wl_find+0x4e>
    ef86:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    ef8a:	07db      	lsls	r3, r3, #31
    ef8c:	d403      	bmi.n	ef96 <wl_find+0x4e>
    ef8e:	782b      	ldrb	r3, [r5, #0]
    ef90:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    ef92:	bf08      	it	eq
    ef94:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
    ef96:	3401      	adds	r4, #1
    ef98:	2c08      	cmp	r4, #8
    ef9a:	d1e0      	bne.n	ef5e <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
    ef9c:	20ff      	movs	r0, #255	; 0xff
    ef9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    efa2:	2d00      	cmp	r5, #0
    efa4:	d1f3      	bne.n	ef8e <wl_find+0x46>
    efa6:	e7f6      	b.n	ef96 <wl_find+0x4e>
    efa8:	200011c7 	.word	0x200011c7

0000efac <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
    efac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efb0:	4d1a      	ldr	r5, [pc, #104]	; (f01c <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    efb2:	f8df 8074 	ldr.w	r8, [pc, #116]	; f028 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
    efb6:	1eae      	subs	r6, r5, #2
{
    efb8:	2400      	movs	r4, #0
    efba:	4637      	mov	r7, r6
		if (!wl[i].taken) {
    efbc:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    efc0:	07d9      	lsls	r1, r3, #31
    efc2:	d524      	bpl.n	f00e <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    efc4:	f898 3000 	ldrb.w	r3, [r8]
    efc8:	b15b      	cbz	r3, efe2 <filter_wl_update+0x36>
		j = wl[i].rl_idx;
    efca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    efce:	2a07      	cmp	r2, #7
    efd0:	d807      	bhi.n	efe2 <filter_wl_update+0x36>
    efd2:	2328      	movs	r3, #40	; 0x28
    efd4:	4353      	muls	r3, r2
    efd6:	4a12      	ldr	r2, [pc, #72]	; (f020 <filter_wl_update+0x74>)
    efd8:	5cd3      	ldrb	r3, [r2, r3]
    efda:	075a      	lsls	r2, r3, #29
    efdc:	d501      	bpl.n	efe2 <filter_wl_update+0x36>
    efde:	06db      	lsls	r3, r3, #27
    efe0:	d515      	bpl.n	f00e <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
    efe2:	4810      	ldr	r0, [pc, #64]	; (f024 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    efe4:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
    efe8:	2201      	movs	r2, #1
    efea:	fa02 f104 	lsl.w	r1, r2, r4
    efee:	7802      	ldrb	r2, [r0, #0]
    eff0:	430a      	orrs	r2, r1
    eff2:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    eff4:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    eff8:	7842      	ldrb	r2, [r0, #1]
    effa:	40a3      	lsls	r3, r4
    effc:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    effe:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f000:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f002:	fb02 0004 	mla	r0, r2, r4, r0
    f006:	4629      	mov	r1, r5
    f008:	3002      	adds	r0, #2
    f00a:	f7f2 fdf7 	bl	1bfc <memcpy>
    f00e:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
    f010:	2c08      	cmp	r4, #8
    f012:	f105 0508 	add.w	r5, r5, #8
    f016:	d1d1      	bne.n	efbc <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
    f018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f01c:	200011c9 	.word	0x200011c9
    f020:	20001054 	.word	0x20001054
    f024:	20001207 	.word	0x20001207
    f028:	20001194 	.word	0x20001194

0000f02c <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
    f02c:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
    f02e:	f7fe ff4f 	bl	ded0 <ll_adv_is_enabled>
    f032:	b928      	cbnz	r0, f040 <rl_access_check.constprop.1+0x14>
    f034:	f7fe ff60 	bl	def8 <ll_scan_is_enabled>
    f038:	fab0 f080 	clz	r0, r0
    f03c:	0940      	lsrs	r0, r0, #5
    f03e:	bd08      	pop	{r3, pc}
    f040:	2000      	movs	r0, #0
}
    f042:	bd08      	pop	{r3, pc}

0000f044 <filter_rl_update>:
{
    f044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
    f046:	4e10      	ldr	r6, [pc, #64]	; (f088 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
    f048:	4d10      	ldr	r5, [pc, #64]	; (f08c <filter_rl_update+0x48>)
{
    f04a:	2400      	movs	r4, #0
		if (rl[i].taken) {
    f04c:	2728      	movs	r7, #40	; 0x28
    f04e:	fb07 f104 	mul.w	r1, r7, r4
    f052:	5c73      	ldrb	r3, [r6, r1]
    f054:	07da      	lsls	r2, r3, #31
    f056:	d513      	bpl.n	f080 <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
    f058:	2201      	movs	r2, #1
    f05a:	fa02 f004 	lsl.w	r0, r2, r4
    f05e:	782a      	ldrb	r2, [r5, #0]
    f060:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    f062:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
    f066:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f068:	786a      	ldrb	r2, [r5, #1]
    f06a:	40a3      	lsls	r3, r4
    f06c:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f06e:	2206      	movs	r2, #6
    f070:	3101      	adds	r1, #1
    f072:	fb02 5004 	mla	r0, r2, r4, r5
    f076:	4431      	add	r1, r6
    f078:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f07a:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f07c:	f7f2 fdbe 	bl	1bfc <memcpy>
    f080:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f082:	2c08      	cmp	r4, #8
    f084:	d1e3      	bne.n	f04e <filter_rl_update+0xa>
}
    f086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f088:	20001054 	.word	0x20001054
    f08c:	20001195 	.word	0x20001195

0000f090 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
    f090:	2807      	cmp	r0, #7
    f092:	d80c      	bhi.n	f0ae <ctrl_lrpa_get+0x1e>
    f094:	2328      	movs	r3, #40	; 0x28
    f096:	4358      	muls	r0, r3
    f098:	4a06      	ldr	r2, [pc, #24]	; (f0b4 <ctrl_lrpa_get+0x24>)
    f09a:	5c13      	ldrb	r3, [r2, r0]
    f09c:	1811      	adds	r1, r2, r0
    f09e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    f0a2:	b128      	cbz	r0, f0b0 <ctrl_lrpa_get+0x20>
    f0a4:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f0a8:	b110      	cbz	r0, f0b0 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
    f0aa:	6a48      	ldr	r0, [r1, #36]	; 0x24
    f0ac:	4770      	bx	lr
		return NULL;
    f0ae:	2000      	movs	r0, #0
}
    f0b0:	4770      	bx	lr
    f0b2:	bf00      	nop
    f0b4:	20001054 	.word	0x20001054

0000f0b8 <ctrl_irks_get>:
	*count = peer_irk_count;
    f0b8:	4b02      	ldr	r3, [pc, #8]	; (f0c4 <ctrl_irks_get+0xc>)
    f0ba:	781b      	ldrb	r3, [r3, #0]
    f0bc:	7003      	strb	r3, [r0, #0]
}
    f0be:	4802      	ldr	r0, [pc, #8]	; (f0c8 <ctrl_irks_get+0x10>)
    f0c0:	4770      	bx	lr
    f0c2:	bf00      	nop
    f0c4:	20000fca 	.word	0x20000fca
    f0c8:	20000fd3 	.word	0x20000fd3

0000f0cc <ctrl_rl_idx>:
	if (whitelist) {
    f0cc:	b188      	cbz	r0, f0f2 <ctrl_rl_idx+0x26>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
    f0ce:	2907      	cmp	r1, #7
    f0d0:	d905      	bls.n	f0de <ctrl_rl_idx+0x12>
		LL_ASSERT(rl[i].taken);
    f0d2:	4040      	eors	r0, r0
    f0d4:	f380 8811 	msr	BASEPRI, r0
    f0d8:	f04f 0004 	mov.w	r0, #4
    f0dc:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
    f0de:	4b09      	ldr	r3, [pc, #36]	; (f104 <ctrl_rl_idx+0x38>)
    f0e0:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
    f0e4:	07d2      	lsls	r2, r2, #31
    f0e6:	d5f4      	bpl.n	f0d2 <ctrl_rl_idx+0x6>
		i = wl[devmatch_id].rl_idx;
    f0e8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    f0ec:	7849      	ldrb	r1, [r1, #1]
}
    f0ee:	4608      	mov	r0, r1
    f0f0:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    f0f2:	2907      	cmp	r1, #7
    f0f4:	d8ed      	bhi.n	f0d2 <ctrl_rl_idx+0x6>
		LL_ASSERT(rl[i].taken);
    f0f6:	2328      	movs	r3, #40	; 0x28
    f0f8:	434b      	muls	r3, r1
    f0fa:	4a03      	ldr	r2, [pc, #12]	; (f108 <ctrl_rl_idx+0x3c>)
    f0fc:	5cd3      	ldrb	r3, [r2, r3]
    f0fe:	07db      	lsls	r3, r3, #31
    f100:	d4f5      	bmi.n	f0ee <ctrl_rl_idx+0x22>
    f102:	e7e6      	b.n	f0d2 <ctrl_rl_idx+0x6>
    f104:	200011c7 	.word	0x200011c7
    f108:	20001054 	.word	0x20001054

0000f10c <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
    f10c:	4b0a      	ldr	r3, [pc, #40]	; (f138 <ctrl_rl_irk_idx+0x2c>)
    f10e:	781b      	ldrb	r3, [r3, #0]
    f110:	4283      	cmp	r3, r0
    f112:	d805      	bhi.n	f120 <ctrl_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
    f114:	4040      	eors	r0, r0
    f116:	f380 8811 	msr	BASEPRI, r0
    f11a:	f04f 0004 	mov.w	r0, #4
    f11e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
    f120:	4b06      	ldr	r3, [pc, #24]	; (f13c <ctrl_rl_irk_idx+0x30>)
    f122:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    f124:	2807      	cmp	r0, #7
    f126:	d8f5      	bhi.n	f114 <ctrl_rl_irk_idx+0x8>
	LL_ASSERT(rl[i].taken);
    f128:	2328      	movs	r3, #40	; 0x28
    f12a:	4343      	muls	r3, r0
    f12c:	4a04      	ldr	r2, [pc, #16]	; (f140 <ctrl_rl_irk_idx+0x34>)
    f12e:	5cd3      	ldrb	r3, [r2, r3]
    f130:	07db      	lsls	r3, r3, #31
    f132:	d5ef      	bpl.n	f114 <ctrl_rl_irk_idx+0x8>
}
    f134:	4770      	bx	lr
    f136:	bf00      	nop
    f138:	20000fca 	.word	0x20000fca
    f13c:	20000fcb 	.word	0x20000fcb
    f140:	20001054 	.word	0x20001054

0000f144 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
    f144:	2807      	cmp	r0, #7
    f146:	d80e      	bhi.n	f166 <ctrl_irk_whitelisted+0x22>
	LL_ASSERT(rl[rl_idx].taken);
    f148:	2328      	movs	r3, #40	; 0x28
    f14a:	4358      	muls	r0, r3
    f14c:	4b07      	ldr	r3, [pc, #28]	; (f16c <ctrl_irk_whitelisted+0x28>)
    f14e:	5c18      	ldrb	r0, [r3, r0]
    f150:	07c3      	lsls	r3, r0, #31
    f152:	d405      	bmi.n	f160 <ctrl_irk_whitelisted+0x1c>
    f154:	4040      	eors	r0, r0
    f156:	f380 8811 	msr	BASEPRI, r0
    f15a:	f04f 0004 	mov.w	r0, #4
    f15e:	df02      	svc	2
	return rl[rl_idx].wl;
    f160:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f164:	4770      	bx	lr
		return false;
    f166:	2000      	movs	r0, #0
}
    f168:	4770      	bx	lr
    f16a:	bf00      	nop
    f16c:	20001054 	.word	0x20001054

0000f170 <ctrl_filter_get>:
}
    f170:	4b03      	ldr	r3, [pc, #12]	; (f180 <ctrl_filter_get+0x10>)
    f172:	4a04      	ldr	r2, [pc, #16]	; (f184 <ctrl_filter_get+0x14>)
    f174:	2800      	cmp	r0, #0
    f176:	bf14      	ite	ne
    f178:	4610      	movne	r0, r2
    f17a:	4618      	moveq	r0, r3
    f17c:	4770      	bx	lr
    f17e:	bf00      	nop
    f180:	20001195 	.word	0x20001195
    f184:	20001207 	.word	0x20001207

0000f188 <ll_wl_size_get>:
    f188:	2008      	movs	r0, #8
    f18a:	4770      	bx	lr

0000f18c <ll_wl_clear>:
{
    f18c:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f18e:	f7fe fea7 	bl	dee0 <radio_adv_filter_pol_get>
    f192:	4604      	mov	r4, r0
    f194:	b110      	cbz	r0, f19c <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f196:	240c      	movs	r4, #12
}
    f198:	4620      	mov	r0, r4
    f19a:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f19c:	f7fe fec2 	bl	df24 <radio_scan_filter_pol_get>
    f1a0:	07c3      	lsls	r3, r0, #31
    f1a2:	d4f8      	bmi.n	f196 <ll_wl_clear+0xa>
		wl[i].taken = 0;
    f1a4:	4a07      	ldr	r2, [pc, #28]	; (f1c4 <ll_wl_clear+0x38>)
    f1a6:	4623      	mov	r3, r4
    f1a8:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    f1ac:	f36f 0100 	bfc	r1, #0, #1
    f1b0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    f1b4:	3301      	adds	r3, #1
    f1b6:	2b08      	cmp	r3, #8
    f1b8:	d1f6      	bne.n	f1a8 <ll_wl_clear+0x1c>
	wl_anon = 0;
    f1ba:	4b03      	ldr	r3, [pc, #12]	; (f1c8 <ll_wl_clear+0x3c>)
    f1bc:	2200      	movs	r2, #0
    f1be:	701a      	strb	r2, [r3, #0]
	return 0;
    f1c0:	e7ea      	b.n	f198 <ll_wl_clear+0xc>
    f1c2:	bf00      	nop
    f1c4:	200011c7 	.word	0x200011c7
    f1c8:	200016b8 	.word	0x200016b8

0000f1cc <ll_wl_remove>:
{
    f1cc:	b538      	push	{r3, r4, r5, lr}
    f1ce:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f1d0:	f7fe fe86 	bl	dee0 <radio_adv_filter_pol_get>
    f1d4:	4604      	mov	r4, r0
    f1d6:	b110      	cbz	r0, f1de <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f1d8:	240c      	movs	r4, #12
}
    f1da:	4620      	mov	r0, r4
    f1dc:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f1de:	f7fe fea1 	bl	df24 <radio_scan_filter_pol_get>
    f1e2:	07c3      	lsls	r3, r0, #31
    f1e4:	d4f8      	bmi.n	f1d8 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    f1e6:	7828      	ldrb	r0, [r5, #0]
    f1e8:	28ff      	cmp	r0, #255	; 0xff
    f1ea:	d102      	bne.n	f1f2 <ll_wl_remove+0x26>
		wl_anon = 0;
    f1ec:	4b0f      	ldr	r3, [pc, #60]	; (f22c <ll_wl_remove+0x60>)
    f1ee:	701c      	strb	r4, [r3, #0]
		return 0;
    f1f0:	e7f3      	b.n	f1da <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
    f1f2:	4622      	mov	r2, r4
    f1f4:	1c69      	adds	r1, r5, #1
    f1f6:	f7ff fea7 	bl	ef48 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    f1fa:	2807      	cmp	r0, #7
    f1fc:	d813      	bhi.n	f226 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
    f1fe:	4b0c      	ldr	r3, [pc, #48]	; (f230 <ll_wl_remove+0x64>)
    f200:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    f204:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
    f206:	2d07      	cmp	r5, #7
    f208:	d806      	bhi.n	f218 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
    f20a:	2228      	movs	r2, #40	; 0x28
    f20c:	4909      	ldr	r1, [pc, #36]	; (f234 <ll_wl_remove+0x68>)
    f20e:	436a      	muls	r2, r5
    f210:	5c8d      	ldrb	r5, [r1, r2]
    f212:	f364 1545 	bfi	r5, r4, #5, #1
    f216:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
    f218:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
    f21c:	f36f 0200 	bfc	r2, #0, #1
    f220:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
    f224:	e7d9      	b.n	f1da <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f226:	2402      	movs	r4, #2
    f228:	e7d7      	b.n	f1da <ll_wl_remove+0xe>
    f22a:	bf00      	nop
    f22c:	200016b8 	.word	0x200016b8
    f230:	200011c7 	.word	0x200011c7
    f234:	20001054 	.word	0x20001054

0000f238 <ll_filters_scan_update>:
{
    f238:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
    f23a:	4b0d      	ldr	r3, [pc, #52]	; (f270 <ll_filters_scan_update+0x38>)
    f23c:	2200      	movs	r2, #0
    f23e:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
    f240:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
    f242:	07c3      	lsls	r3, r0, #31
    f244:	d504      	bpl.n	f250 <ll_filters_scan_update+0x18>
    f246:	f7fe fe4b 	bl	dee0 <radio_adv_filter_pol_get>
    f24a:	b908      	cbnz	r0, f250 <ll_filters_scan_update+0x18>
		filter_wl_update();
    f24c:	f7ff feae 	bl	efac <filter_wl_update>
	filter->enable_bitmask = 0;
    f250:	4b08      	ldr	r3, [pc, #32]	; (f274 <ll_filters_scan_update+0x3c>)
    f252:	2200      	movs	r2, #0
    f254:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
    f256:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
    f258:	4b07      	ldr	r3, [pc, #28]	; (f278 <ll_filters_scan_update+0x40>)
    f25a:	781b      	ldrb	r3, [r3, #0]
    f25c:	b133      	cbz	r3, f26c <ll_filters_scan_update+0x34>
    f25e:	f7fe fe37 	bl	ded0 <ll_adv_is_enabled>
    f262:	b918      	cbnz	r0, f26c <ll_filters_scan_update+0x34>
}
    f264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
    f268:	f7ff beec 	b.w	f044 <filter_rl_update>
    f26c:	bd08      	pop	{r3, pc}
    f26e:	bf00      	nop
    f270:	20001207 	.word	0x20001207
    f274:	20001195 	.word	0x20001195
    f278:	20001194 	.word	0x20001194

0000f27c <ll_rl_find>:
{
    f27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f280:	468a      	mov	sl, r1
	if (free) {
    f282:	4614      	mov	r4, r2
    f284:	b10a      	cbz	r2, f28a <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
    f286:	23ff      	movs	r3, #255	; 0xff
    f288:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f28a:	f8df 8054 	ldr.w	r8, [pc, #84]	; f2e0 <ll_rl_find+0x64>
{
    f28e:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f290:	f000 0901 	and.w	r9, r0, #1
    f294:	2628      	movs	r6, #40	; 0x28
    f296:	436e      	muls	r6, r5
    f298:	b2ef      	uxtb	r7, r5
    f29a:	f818 3006 	ldrb.w	r3, [r8, r6]
    f29e:	07da      	lsls	r2, r3, #31
    f2a0:	d51a      	bpl.n	f2d8 <ll_rl_find+0x5c>
    f2a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f2a6:	454b      	cmp	r3, r9
    f2a8:	d10f      	bne.n	f2ca <ll_rl_find+0x4e>
    f2aa:	1c70      	adds	r0, r6, #1
    f2ac:	2206      	movs	r2, #6
    f2ae:	4651      	mov	r1, sl
    f2b0:	4440      	add	r0, r8
    f2b2:	f7f2 fc8e 	bl	1bd2 <memcmp>
    f2b6:	b160      	cbz	r0, f2d2 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    f2b8:	b13c      	cbz	r4, f2ca <ll_rl_find+0x4e>
    f2ba:	f818 3006 	ldrb.w	r3, [r8, r6]
    f2be:	07db      	lsls	r3, r3, #31
    f2c0:	d403      	bmi.n	f2ca <ll_rl_find+0x4e>
    f2c2:	7823      	ldrb	r3, [r4, #0]
    f2c4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    f2c6:	bf08      	it	eq
    f2c8:	7027      	strbeq	r7, [r4, #0]
    f2ca:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f2cc:	2d08      	cmp	r5, #8
    f2ce:	d1e1      	bne.n	f294 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
    f2d0:	27ff      	movs	r7, #255	; 0xff
}
    f2d2:	4638      	mov	r0, r7
    f2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    f2d8:	2c00      	cmp	r4, #0
    f2da:	d1f2      	bne.n	f2c2 <ll_rl_find+0x46>
    f2dc:	e7f5      	b.n	f2ca <ll_rl_find+0x4e>
    f2de:	bf00      	nop
    f2e0:	20001054 	.word	0x20001054

0000f2e4 <ll_wl_add>:
{
    f2e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f2e8:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f2ea:	f7fe fdf9 	bl	dee0 <radio_adv_filter_pol_get>
    f2ee:	4605      	mov	r5, r0
    f2f0:	b120      	cbz	r0, f2fc <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f2f2:	250c      	movs	r5, #12
}
    f2f4:	4628      	mov	r0, r5
    f2f6:	b002      	add	sp, #8
    f2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f2fc:	f7fe fe12 	bl	df24 <radio_scan_filter_pol_get>
    f300:	07c3      	lsls	r3, r0, #31
    f302:	d4f6      	bmi.n	f2f2 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    f304:	7838      	ldrb	r0, [r7, #0]
    f306:	28ff      	cmp	r0, #255	; 0xff
    f308:	d103      	bne.n	f312 <ll_wl_add+0x2e>
		wl_anon = 1;
    f30a:	4b1f      	ldr	r3, [pc, #124]	; (f388 <ll_wl_add+0xa4>)
    f30c:	2201      	movs	r2, #1
    f30e:	701a      	strb	r2, [r3, #0]
		return 0;
    f310:	e7f0      	b.n	f2f4 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
    f312:	f107 0801 	add.w	r8, r7, #1
    f316:	f10d 0207 	add.w	r2, sp, #7
    f31a:	4641      	mov	r1, r8
    f31c:	f7ff fe14 	bl	ef48 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    f320:	2807      	cmp	r0, #7
    f322:	d92d      	bls.n	f380 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
    f324:	f89d 6007 	ldrb.w	r6, [sp, #7]
    f328:	2e07      	cmp	r6, #7
    f32a:	d82b      	bhi.n	f384 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
    f32c:	4c17      	ldr	r4, [pc, #92]	; (f38c <ll_wl_add+0xa8>)
    f32e:	783a      	ldrb	r2, [r7, #0]
    f330:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
    f334:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
    f338:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
    f33c:	4641      	mov	r1, r8
    f33e:	2206      	movs	r2, #6
    f340:	3002      	adds	r0, #2
    f342:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    f346:	f7f2 fc59 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f34a:	462a      	mov	r2, r5
    f34c:	4641      	mov	r1, r8
    f34e:	7838      	ldrb	r0, [r7, #0]
    f350:	f7ff ff94 	bl	f27c <ll_rl_find>
    f354:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
    f356:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
    f358:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
    f35a:	d80e      	bhi.n	f37a <ll_wl_add+0x96>
		wl[i].rl_idx = j;
    f35c:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
    f35e:	2328      	movs	r3, #40	; 0x28
    f360:	4a0b      	ldr	r2, [pc, #44]	; (f390 <ll_wl_add+0xac>)
    f362:	4358      	muls	r0, r3
    f364:	5c13      	ldrb	r3, [r2, r0]
    f366:	f043 0320 	orr.w	r3, r3, #32
    f36a:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
    f36c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
    f370:	f043 0301 	orr.w	r3, r3, #1
    f374:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    f378:	e7bc      	b.n	f2f4 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
    f37a:	22ff      	movs	r2, #255	; 0xff
    f37c:	705a      	strb	r2, [r3, #1]
    f37e:	e7f5      	b.n	f36c <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
    f380:	2512      	movs	r5, #18
    f382:	e7b7      	b.n	f2f4 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    f384:	2507      	movs	r5, #7
	return wl_add(addr);
    f386:	e7b5      	b.n	f2f4 <ll_wl_add+0x10>
    f388:	200016b8 	.word	0x200016b8
    f38c:	200011c7 	.word	0x200011c7
    f390:	20001054 	.word	0x20001054

0000f394 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    f394:	4b0c      	ldr	r3, [pc, #48]	; (f3c8 <ctrl_rl_idx_allowed+0x34>)
    f396:	781b      	ldrb	r3, [r3, #0]
    f398:	b19b      	cbz	r3, f3c2 <ctrl_rl_idx_allowed+0x2e>
    f39a:	2907      	cmp	r1, #7
    f39c:	d811      	bhi.n	f3c2 <ctrl_rl_idx_allowed+0x2e>
    f39e:	b980      	cbnz	r0, f3c2 <ctrl_rl_idx_allowed+0x2e>
	LL_ASSERT(rl[rl_idx].taken);
    f3a0:	2328      	movs	r3, #40	; 0x28
    f3a2:	4359      	muls	r1, r3
    f3a4:	4b09      	ldr	r3, [pc, #36]	; (f3cc <ctrl_rl_idx_allowed+0x38>)
    f3a6:	5c58      	ldrb	r0, [r3, r1]
    f3a8:	07c2      	lsls	r2, r0, #31
    f3aa:	d405      	bmi.n	f3b8 <ctrl_rl_idx_allowed+0x24>
    f3ac:	4040      	eors	r0, r0
    f3ae:	f380 8811 	msr	BASEPRI, r0
    f3b2:	f04f 0004 	mov.w	r0, #4
    f3b6:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    f3b8:	0743      	lsls	r3, r0, #29
    f3ba:	d502      	bpl.n	f3c2 <ctrl_rl_idx_allowed+0x2e>
    f3bc:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f3c0:	4770      	bx	lr
		return true;
    f3c2:	2001      	movs	r0, #1
}
    f3c4:	4770      	bx	lr
    f3c6:	bf00      	nop
    f3c8:	20001194 	.word	0x20001194
    f3cc:	20001054 	.word	0x20001054

0000f3d0 <ll_rl_id_addr_get>:
{
    f3d0:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f3d2:	2b07      	cmp	r3, #7
{
    f3d4:	b430      	push	{r4, r5}
    f3d6:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f3d8:	d905      	bls.n	f3e6 <ll_rl_id_addr_get+0x16>
	LL_ASSERT(rl[rl_idx].taken);
    f3da:	4040      	eors	r0, r0
    f3dc:	f380 8811 	msr	BASEPRI, r0
    f3e0:	f04f 0004 	mov.w	r0, #4
    f3e4:	df02      	svc	2
    f3e6:	2528      	movs	r5, #40	; 0x28
    f3e8:	4c08      	ldr	r4, [pc, #32]	; (f40c <ll_rl_id_addr_get+0x3c>)
    f3ea:	fb05 f203 	mul.w	r2, r5, r3
    f3ee:	5ca2      	ldrb	r2, [r4, r2]
    f3f0:	f012 0f01 	tst.w	r2, #1
    f3f4:	d0f1      	beq.n	f3da <ll_rl_id_addr_get+0xa>
	*id_addr_type = rl[rl_idx].id_addr_type;
    f3f6:	f3c2 1280 	ubfx	r2, r2, #6, #1
    f3fa:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f3fc:	fb05 4103 	mla	r1, r5, r3, r4
    f400:	2206      	movs	r2, #6
    f402:	3101      	adds	r1, #1
}
    f404:	bc30      	pop	{r4, r5}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f406:	f7f2 bbf9 	b.w	1bfc <memcpy>
    f40a:	bf00      	nop
    f40c:	20001054 	.word	0x20001054

0000f410 <ctrl_rl_addr_allowed>:
{
    f410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
    f414:	4b1a      	ldr	r3, [pc, #104]	; (f480 <ctrl_rl_addr_allowed+0x70>)
    f416:	781b      	ldrb	r3, [r3, #0]
    f418:	b37b      	cbz	r3, f47a <ctrl_rl_addr_allowed+0x6a>
    f41a:	7813      	ldrb	r3, [r2, #0]
    f41c:	2bff      	cmp	r3, #255	; 0xff
    f41e:	d12c      	bne.n	f47a <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    f420:	4e18      	ldr	r6, [pc, #96]	; (f484 <ctrl_rl_addr_allowed+0x74>)
    f422:	2400      	movs	r4, #0
    f424:	f04f 0828 	mov.w	r8, #40	; 0x28
    f428:	46b6      	mov	lr, r6
    f42a:	fb08 f304 	mul.w	r3, r8, r4
    f42e:	fa5f fc84 	uxtb.w	ip, r4
    f432:	5cf7      	ldrb	r7, [r6, r3]
    f434:	f017 0f01 	tst.w	r7, #1
    f438:	eb06 0503 	add.w	r5, r6, r3
    f43c:	d01a      	beq.n	f474 <ctrl_rl_addr_allowed+0x64>
    f43e:	f3c7 1780 	ubfx	r7, r7, #6, #1
    f442:	4287      	cmp	r7, r0
    f444:	d116      	bne.n	f474 <ctrl_rl_addr_allowed+0x64>
    f446:	3306      	adds	r3, #6
    f448:	1e4f      	subs	r7, r1, #1
    f44a:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
    f44c:	f815 af01 	ldrb.w	sl, [r5, #1]!
    f450:	f817 9f01 	ldrb.w	r9, [r7, #1]!
    f454:	45ca      	cmp	sl, r9
    f456:	d10d      	bne.n	f474 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
    f458:	429d      	cmp	r5, r3
    f45a:	d1f7      	bne.n	f44c <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
    f45c:	2328      	movs	r3, #40	; 0x28
    f45e:	435c      	muls	r4, r3
				*rl_idx = i;
    f460:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
    f464:	f81e 0004 	ldrb.w	r0, [lr, r4]
    f468:	0743      	lsls	r3, r0, #29
    f46a:	d506      	bpl.n	f47a <ctrl_rl_addr_allowed+0x6a>
    f46c:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f474:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f476:	2c08      	cmp	r4, #8
    f478:	d1d7      	bne.n	f42a <ctrl_rl_addr_allowed+0x1a>
    f47a:	2001      	movs	r0, #1
}
    f47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f480:	20001194 	.word	0x20001194
    f484:	20001054 	.word	0x20001054

0000f488 <ctrl_rl_addr_resolve>:
{
    f488:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
    f48a:	4c0d      	ldr	r4, [pc, #52]	; (f4c0 <ctrl_rl_addr_resolve+0x38>)
    f48c:	7824      	ldrb	r4, [r4, #0]
    f48e:	b1a4      	cbz	r4, f4ba <ctrl_rl_addr_resolve+0x32>
    f490:	2a07      	cmp	r2, #7
    f492:	d812      	bhi.n	f4ba <ctrl_rl_addr_resolve+0x32>
    f494:	2528      	movs	r5, #40	; 0x28
    f496:	4c0b      	ldr	r4, [pc, #44]	; (f4c4 <ctrl_rl_addr_resolve+0x3c>)
    f498:	fb05 f602 	mul.w	r6, r5, r2
    f49c:	5da6      	ldrb	r6, [r4, r6]
    f49e:	0736      	lsls	r6, r6, #28
    f4a0:	d50b      	bpl.n	f4ba <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
    f4a2:	b150      	cbz	r0, f4ba <ctrl_rl_addr_resolve+0x32>
    f4a4:	794b      	ldrb	r3, [r1, #5]
    f4a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f4aa:	2b40      	cmp	r3, #64	; 0x40
    f4ac:	d105      	bne.n	f4ba <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    f4ae:	fb05 4202 	mla	r2, r5, r2, r4
    f4b2:	1dd0      	adds	r0, r2, #7
}
    f4b4:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    f4b6:	f7f2 bc0d 	b.w	1cd4 <bt_rpa_irk_matches>
}
    f4ba:	2000      	movs	r0, #0
    f4bc:	bc70      	pop	{r4, r5, r6}
    f4be:	4770      	bx	lr
    f4c0:	20001194 	.word	0x20001194
    f4c4:	20001054 	.word	0x20001054

0000f4c8 <ctrl_rl_enabled>:
	return rl_enable;
    f4c8:	4b02      	ldr	r3, [pc, #8]	; (f4d4 <ctrl_rl_enabled+0xc>)
    f4ca:	7818      	ldrb	r0, [r3, #0]
}
    f4cc:	3000      	adds	r0, #0
    f4ce:	bf18      	it	ne
    f4d0:	2001      	movne	r0, #1
    f4d2:	4770      	bx	lr
    f4d4:	20001194 	.word	0x20001194

0000f4d8 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
    f4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4dc:	b087      	sub	sp, #28
    f4de:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    f4e0:	f002 f9be 	bl	11860 <_impl_k_uptime_get>
    f4e4:	4680      	mov	r8, r0
    f4e6:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
    f4e8:	2c00      	cmp	r4, #0
    f4ea:	d141      	bne.n	f570 <ll_rl_rpa_update+0x98>
    f4ec:	4b37      	ldr	r3, [pc, #220]	; (f5cc <ll_rl_rpa_update+0xf4>)
    f4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4f2:	1c5c      	adds	r4, r3, #1
    f4f4:	bf08      	it	eq
    f4f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    f4fa:	d039      	beq.n	f570 <ll_rl_rpa_update+0x98>
		   (now - rpa_last_ms >= rpa_timeout_ms);
    f4fc:	1a82      	subs	r2, r0, r2
    f4fe:	eb61 0303 	sbc.w	r3, r1, r3
    f502:	4933      	ldr	r1, [pc, #204]	; (f5d0 <ll_rl_rpa_update+0xf8>)
    f504:	6808      	ldr	r0, [r1, #0]
    f506:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
    f508:	4282      	cmp	r2, r0
    f50a:	418b      	sbcs	r3, r1
    f50c:	bfac      	ite	ge
    f50e:	2601      	movge	r6, #1
    f510:	2600      	movlt	r6, #0
    f512:	4d30      	ldr	r5, [pc, #192]	; (f5d4 <ll_rl_rpa_update+0xfc>)
    f514:	f8df b0c4 	ldr.w	fp, [pc, #196]	; f5dc <ll_rl_rpa_update+0x104>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    f518:	f1a5 0a07 	sub.w	sl, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
    f51c:	2400      	movs	r4, #0
    f51e:	4657      	mov	r7, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    f520:	2328      	movs	r3, #40	; 0x28
    f522:	4363      	muls	r3, r4
    f524:	f81a 3003 	ldrb.w	r3, [sl, r3]
    f528:	07d8      	lsls	r0, r3, #31
    f52a:	d542      	bpl.n	f5b2 <ll_rl_rpa_update+0xda>
    f52c:	b90e      	cbnz	r6, f532 <ll_rl_rpa_update+0x5a>
    f52e:	0799      	lsls	r1, r3, #30
    f530:	d43f      	bmi.n	f5b2 <ll_rl_rpa_update+0xda>

			if (rl[i].pirk) {
    f532:	2328      	movs	r3, #40	; 0x28
    f534:	4363      	muls	r3, r4
    f536:	5cfb      	ldrb	r3, [r7, r3]
    f538:	075a      	lsls	r2, r3, #29
    f53a:	d51b      	bpl.n	f574 <ll_rl_rpa_update+0x9c>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
    f53c:	7c2a      	ldrb	r2, [r5, #16]
    f53e:	4b26      	ldr	r3, [pc, #152]	; (f5d8 <ll_rl_rpa_update+0x100>)
    f540:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    f544:	f103 0210 	add.w	r2, r3, #16
    f548:	f10d 0107 	add.w	r1, sp, #7
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
    f54c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    f550:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
    f554:	429a      	cmp	r2, r3
    f556:	d1f9      	bne.n	f54c <ll_rl_rpa_update+0x74>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
    f558:	f105 0117 	add.w	r1, r5, #23
    f55c:	a802      	add	r0, sp, #8
    f55e:	f7f2 fbcc 	bl	1cfa <bt_rpa_create>
				LL_ASSERT(!err);
    f562:	b138      	cbz	r0, f574 <ll_rl_rpa_update+0x9c>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
    f564:	4040      	eors	r0, r0
    f566:	f380 8811 	msr	BASEPRI, r0
    f56a:	f04f 0004 	mov.w	r0, #4
    f56e:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
    f570:	2601      	movs	r6, #1
    f572:	e7ce      	b.n	f512 <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
    f574:	2328      	movs	r3, #40	; 0x28
    f576:	4363      	muls	r3, r4
    f578:	5cfb      	ldrb	r3, [r7, r3]
    f57a:	071b      	lsls	r3, r3, #28
    f57c:	d513      	bpl.n	f5a6 <ll_rl_rpa_update+0xce>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
    f57e:	a902      	add	r1, sp, #8
    f580:	4628      	mov	r0, r5
    f582:	f7f2 fbba 	bl	1cfa <bt_rpa_create>
				LL_ASSERT(!err);
    f586:	2800      	cmp	r0, #0
    f588:	d1ec      	bne.n	f564 <ll_rl_rpa_update+0x8c>
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
    f58a:	ab02      	add	r3, sp, #8
    f58c:	2206      	movs	r2, #6
    f58e:	f8c5 301d 	str.w	r3, [r5, #29]
    f592:	fb02 b304 	mla	r3, r2, r4, fp
    f596:	4618      	mov	r0, r3
    f598:	a902      	add	r1, sp, #8
    f59a:	9301      	str	r3, [sp, #4]
    f59c:	f7f2 fb2e 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
    f5a0:	9b01      	ldr	r3, [sp, #4]
    f5a2:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
    f5a6:	2328      	movs	r3, #40	; 0x28
    f5a8:	4363      	muls	r3, r4
    f5aa:	5cfa      	ldrb	r2, [r7, r3]
    f5ac:	f042 0202 	orr.w	r2, r2, #2
    f5b0:	54fa      	strb	r2, [r7, r3]
    f5b2:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f5b4:	2c08      	cmp	r4, #8
    f5b6:	f105 0528 	add.w	r5, r5, #40	; 0x28
    f5ba:	d1b1      	bne.n	f520 <ll_rl_rpa_update+0x48>
		}
	}

	if (all) {
    f5bc:	b116      	cbz	r6, f5c4 <ll_rl_rpa_update+0xec>
		rpa_last_ms = now;
    f5be:	4b03      	ldr	r3, [pc, #12]	; (f5cc <ll_rl_rpa_update+0xf4>)
    f5c0:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
    f5c4:	b007      	add	sp, #28
    f5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5ca:	bf00      	nop
    f5cc:	200016b0 	.word	0x200016b0
    f5d0:	200016e4 	.word	0x200016e4
    f5d4:	2000105b 	.word	0x2000105b
    f5d8:	20000fd3 	.word	0x20000fd3
    f5dc:	20000f9a 	.word	0x20000f9a

0000f5e0 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
    f5e0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
    f5e2:	2001      	movs	r0, #1
    f5e4:	f7ff ff78 	bl	f4d8 <ll_rl_rpa_update>
    f5e8:	4b03      	ldr	r3, [pc, #12]	; (f5f8 <rpa_timeout+0x18>)
    f5ea:	4904      	ldr	r1, [pc, #16]	; (f5fc <rpa_timeout+0x1c>)
    f5ec:	681a      	ldr	r2, [r3, #0]
    f5ee:	4804      	ldr	r0, [pc, #16]	; (f600 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
    f5f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f5f4:	f002 bc32 	b.w	11e5c <k_delayed_work_submit_to_queue>
    f5f8:	200016e4 	.word	0x200016e4
    f5fc:	200016bc 	.word	0x200016bc
    f600:	20001728 	.word	0x20001728

0000f604 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
    f604:	4b07      	ldr	r3, [pc, #28]	; (f624 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
    f606:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
    f608:	b130      	cbz	r0, f618 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
    f60a:	b14b      	cbz	r3, f620 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    f60c:	4b06      	ldr	r3, [pc, #24]	; (f628 <ll_adv_scan_state_cb+0x24>)
    f60e:	4907      	ldr	r1, [pc, #28]	; (f62c <ll_adv_scan_state_cb+0x28>)
    f610:	681a      	ldr	r2, [r3, #0]
    f612:	4807      	ldr	r0, [pc, #28]	; (f630 <ll_adv_scan_state_cb+0x2c>)
    f614:	f002 bc22 	b.w	11e5c <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
    f618:	b113      	cbz	r3, f620 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
    f61a:	4804      	ldr	r0, [pc, #16]	; (f62c <ll_adv_scan_state_cb+0x28>)
    f61c:	f002 bbba 	b.w	11d94 <k_delayed_work_cancel>
    f620:	4770      	bx	lr
    f622:	bf00      	nop
    f624:	20001194 	.word	0x20001194
    f628:	200016e4 	.word	0x200016e4
    f62c:	200016bc 	.word	0x200016bc
    f630:	20001728 	.word	0x20001728

0000f634 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
    f634:	2008      	movs	r0, #8
    f636:	4770      	bx	lr

0000f638 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
    f638:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
    f63a:	f7ff fcf7 	bl	f02c <rl_access_check.constprop.1>
    f63e:	b178      	cbz	r0, f660 <ll_rl_clear+0x28>
		rl[i].taken = 0;
    f640:	4908      	ldr	r1, [pc, #32]	; (f664 <ll_rl_clear+0x2c>)
    f642:	2300      	movs	r3, #0
    f644:	2428      	movs	r4, #40	; 0x28
    f646:	fb04 f203 	mul.w	r2, r4, r3
    f64a:	3301      	adds	r3, #1
    f64c:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f64e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
    f650:	f36f 0000 	bfc	r0, #0, #1
    f654:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f656:	d1f6      	bne.n	f646 <ll_rl_clear+0xe>
	peer_irk_count = 0;
    f658:	4b03      	ldr	r3, [pc, #12]	; (f668 <ll_rl_clear+0x30>)
    f65a:	2000      	movs	r0, #0
    f65c:	7018      	strb	r0, [r3, #0]
    f65e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f660:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
    f662:	bd10      	pop	{r4, pc}
    f664:	20001054 	.word	0x20001054
    f668:	20000fca 	.word	0x20000fca

0000f66c <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
    f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f670:	b085      	sub	sp, #20
    f672:	4607      	mov	r7, r0
    f674:	4689      	mov	r9, r1
    f676:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
    f678:	f7ff fcd8 	bl	f02c <rl_access_check.constprop.1>
    f67c:	2800      	cmp	r0, #0
    f67e:	f000 8086 	beq.w	f78e <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
    f682:	f107 0801 	add.w	r8, r7, #1
    f686:	f10d 020f 	add.w	r2, sp, #15
    f68a:	4641      	mov	r1, r8
    f68c:	7838      	ldrb	r0, [r7, #0]
    f68e:	f7ff fdf5 	bl	f27c <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
    f692:	2807      	cmp	r0, #7
    f694:	d97d      	bls.n	f792 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
    f696:	f89d 500f 	ldrb.w	r5, [sp, #15]
    f69a:	2d07      	cmp	r5, #7
    f69c:	d87b      	bhi.n	f796 <ll_rl_add+0x12a>
    f69e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    f6a2:	4c3e      	ldr	r4, [pc, #248]	; (f79c <ll_rl_add+0x130>)
    f6a4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
    f6a8:	2628      	movs	r6, #40	; 0x28
    f6aa:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    f6ac:	f10b 0001 	add.w	r0, fp, #1
    f6b0:	2206      	movs	r2, #6
    f6b2:	4641      	mov	r1, r8
    f6b4:	4420      	add	r0, r4
    f6b6:	f7f2 faa1 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
    f6ba:	7839      	ldrb	r1, [r7, #0]
    f6bc:	5da3      	ldrb	r3, [r4, r6]
    f6be:	19a2      	adds	r2, r4, r6
    f6c0:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f6c4:	4648      	mov	r0, r9
    f6c6:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
    f6c8:	9201      	str	r2, [sp, #4]
    f6ca:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f6cc:	f7f6 fa81 	bl	5bd2 <mem_nz>
    f6d0:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f6d2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f6d4:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f6d8:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    f6da:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f6dc:	f7f6 fa79 	bl	5bd2 <mem_nz>
    f6e0:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
    f6e2:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f6e4:	f000 0001 	and.w	r0, r0, #1
    f6e8:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
    f6ec:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    f6f0:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
    f6f2:	d138      	bne.n	f766 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
    f6f4:	b158      	cbz	r0, f70e <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
    f6f6:	f10b 0007 	add.w	r0, fp, #7
    f6fa:	2210      	movs	r2, #16
    f6fc:	4651      	mov	r1, sl
    f6fe:	4420      	add	r0, r4
    f700:	f7f2 fa7c 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
    f704:	2328      	movs	r3, #40	; 0x28
    f706:	fb03 4305 	mla	r3, r3, r5, r4
    f70a:	2200      	movs	r2, #0
    f70c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
    f70e:	2628      	movs	r6, #40	; 0x28
    f710:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
    f712:	f10b 0018 	add.w	r0, fp, #24
    f716:	2206      	movs	r2, #6
    f718:	2100      	movs	r1, #0
    f71a:	4420      	add	r0, r4
    f71c:	f7f2 fa9a 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
    f720:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
    f722:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    f726:	f36f 1304 	bfc	r3, #4, #1
    f72a:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
    f72c:	2200      	movs	r2, #0
    f72e:	4641      	mov	r1, r8
    f730:	7838      	ldrb	r0, [r7, #0]
    f732:	f7ff fc09 	bl	ef48 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
    f736:	2807      	cmp	r0, #7
    f738:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
    f73a:	bf9d      	ittte	ls
    f73c:	4a18      	ldrls	r2, [pc, #96]	; (f7a0 <ll_rl_add+0x134>)
		rl[i].wl = 1;
    f73e:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
    f742:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
    f746:	f36f 1345 	bfchi	r3, #5, #1
    f74a:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
    f74c:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
    f750:	bf98      	it	ls
    f752:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
    f754:	435d      	muls	r5, r3

	return 0;
    f756:	2000      	movs	r0, #0
	rl[i].taken = 1;
    f758:	5d63      	ldrb	r3, [r4, r5]
    f75a:	f043 0301 	orr.w	r3, r3, #1
    f75e:	5563      	strb	r3, [r4, r5]
}
    f760:	b005      	add	sp, #20
    f762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
    f766:	4b0f      	ldr	r3, [pc, #60]	; (f7a4 <ll_rl_add+0x138>)
    f768:	7819      	ldrb	r1, [r3, #0]
    f76a:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
    f76c:	4a0e      	ldr	r2, [pc, #56]	; (f7a8 <ll_rl_add+0x13c>)
    f76e:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
    f770:	1c4a      	adds	r2, r1, #1
    f772:	701a      	strb	r2, [r3, #0]
    f774:	4b0d      	ldr	r3, [pc, #52]	; (f7ac <ll_rl_add+0x140>)
    f776:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    f77a:	f109 0210 	add.w	r2, r9, #16
    f77e:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
    f780:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    f784:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
    f788:	454a      	cmp	r2, r9
    f78a:	d1f9      	bne.n	f780 <ll_rl_add+0x114>
    f78c:	e7b2      	b.n	f6f4 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f78e:	200c      	movs	r0, #12
    f790:	e7e6      	b.n	f760 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
    f792:	2012      	movs	r0, #18
    f794:	e7e4      	b.n	f760 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    f796:	2007      	movs	r0, #7
    f798:	e7e2      	b.n	f760 <ll_rl_add+0xf4>
    f79a:	bf00      	nop
    f79c:	20001054 	.word	0x20001054
    f7a0:	200011c7 	.word	0x200011c7
    f7a4:	20000fca 	.word	0x20000fca
    f7a8:	20000fcb 	.word	0x20000fcb
    f7ac:	20000fd3 	.word	0x20000fd3

0000f7b0 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
    f7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7b4:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
    f7b6:	f7ff fc39 	bl	f02c <rl_access_check.constprop.1>
    f7ba:	2800      	cmp	r0, #0
    f7bc:	d053      	beq.n	f866 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f7be:	f109 0a01 	add.w	sl, r9, #1
    f7c2:	2200      	movs	r2, #0
    f7c4:	4651      	mov	r1, sl
    f7c6:	f899 0000 	ldrb.w	r0, [r9]
    f7ca:	f7ff fd57 	bl	f27c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f7ce:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f7d0:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
    f7d2:	d84b      	bhi.n	f86c <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
    f7d4:	f04f 0b28 	mov.w	fp, #40	; 0x28
    f7d8:	4c26      	ldr	r4, [pc, #152]	; (f874 <ll_rl_remove+0xc4>)
    f7da:	fb0b f300 	mul.w	r3, fp, r0
    f7de:	18e2      	adds	r2, r4, r3
    f7e0:	5ce3      	ldrb	r3, [r4, r3]
    f7e2:	075b      	lsls	r3, r3, #29
    f7e4:	d524      	bpl.n	f830 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    f7e6:	4e24      	ldr	r6, [pc, #144]	; (f878 <ll_rl_remove+0xc8>)
    f7e8:	7835      	ldrb	r5, [r6, #0]
    f7ea:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
    f7ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    f7f0:	d01b      	beq.n	f82a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    f7f2:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
    f7f4:	42af      	cmp	r7, r5
    f7f6:	d018      	beq.n	f82a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
    f7f8:	4820      	ldr	r0, [pc, #128]	; (f87c <ll_rl_remove+0xcc>)
    f7fa:	2210      	movs	r2, #16
    f7fc:	eb00 1105 	add.w	r1, r0, r5, lsl #4
    f800:	eb00 1007 	add.w	r0, r0, r7, lsl #4
    f804:	f7f2 f9fa 	bl	1bfc <memcpy>
    f808:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    f80a:	fb0b f103 	mul.w	r1, fp, r3
    f80e:	1862      	adds	r2, r4, r1
    f810:	5c61      	ldrb	r1, [r4, r1]
    f812:	f011 0f01 	tst.w	r1, #1
    f816:	b2d8      	uxtb	r0, r3
    f818:	d021      	beq.n	f85e <ll_rl_remove+0xae>
    f81a:	0749      	lsls	r1, r1, #29
    f81c:	d51f      	bpl.n	f85e <ll_rl_remove+0xae>
    f81e:	7dd1      	ldrb	r1, [r2, #23]
    f820:	42a9      	cmp	r1, r5
    f822:	d11c      	bne.n	f85e <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
    f824:	4b16      	ldr	r3, [pc, #88]	; (f880 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
    f826:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
    f828:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
    f82a:	7833      	ldrb	r3, [r6, #0]
    f82c:	3b01      	subs	r3, #1
    f82e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
    f830:	2200      	movs	r2, #0
    f832:	4651      	mov	r1, sl
    f834:	f899 0000 	ldrb.w	r0, [r9]
    f838:	f7ff fb86 	bl	ef48 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
    f83c:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
    f83e:	bf9f      	itttt	ls
    f840:	4b10      	ldrls	r3, [pc, #64]	; (f884 <ll_rl_remove+0xd4>)
    f842:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
    f846:	23ff      	movls	r3, #255	; 0xff
    f848:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
    f84a:	2028      	movs	r0, #40	; 0x28
    f84c:	fb00 f008 	mul.w	r0, r0, r8
    f850:	5c23      	ldrb	r3, [r4, r0]
    f852:	f36f 0300 	bfc	r3, #0, #1
    f856:	5423      	strb	r3, [r4, r0]
		return 0;
    f858:	2000      	movs	r0, #0
    f85a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f85e:	3301      	adds	r3, #1
				for (k = 0;
    f860:	2b08      	cmp	r3, #8
    f862:	d1d2      	bne.n	f80a <ll_rl_remove+0x5a>
    f864:	e7e1      	b.n	f82a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f866:	200c      	movs	r0, #12
    f868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f86c:	2002      	movs	r0, #2
}
    f86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f872:	bf00      	nop
    f874:	20001054 	.word	0x20001054
    f878:	20000fca 	.word	0x20000fca
    f87c:	20000fd3 	.word	0x20000fd3
    f880:	20000fcb 	.word	0x20000fcb
    f884:	200011c7 	.word	0x200011c7

0000f888 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
    f888:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
    f88a:	795c      	ldrb	r4, [r3, #5]
    f88c:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    f890:	2c40      	cmp	r4, #64	; 0x40
{
    f892:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
    f894:	d117      	bne.n	f8c6 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
    f896:	b119      	cbz	r1, f8a0 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
    f898:	2200      	movs	r2, #0
    f89a:	f7ff fcef 	bl	f27c <ll_rl_find>
    f89e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
    f8a0:	2a07      	cmp	r2, #7
    f8a2:	d810      	bhi.n	f8c6 <ll_rl_crpa_set+0x3e>
    f8a4:	2128      	movs	r1, #40	; 0x28
    f8a6:	4c08      	ldr	r4, [pc, #32]	; (f8c8 <ll_rl_crpa_set+0x40>)
    f8a8:	fb01 f302 	mul.w	r3, r1, r2
    f8ac:	5ce3      	ldrb	r3, [r4, r3]
    f8ae:	07db      	lsls	r3, r3, #31
    f8b0:	d509      	bpl.n	f8c6 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    f8b2:	2018      	movs	r0, #24
    f8b4:	fb11 0002 	smlabb	r0, r1, r2, r0
    f8b8:	4420      	add	r0, r4
    f8ba:	4629      	mov	r1, r5
    f8bc:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
    f8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    f8c2:	f7f2 b99b 	b.w	1bfc <memcpy>
    f8c6:	bd70      	pop	{r4, r5, r6, pc}
    f8c8:	20001054 	.word	0x20001054

0000f8cc <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
    f8cc:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f8ce:	2200      	movs	r2, #0
{
    f8d0:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f8d2:	1c41      	adds	r1, r0, #1
    f8d4:	7800      	ldrb	r0, [r0, #0]
    f8d6:	f7ff fcd1 	bl	f27c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
    f8da:	2807      	cmp	r0, #7
    f8dc:	d901      	bls.n	f8e2 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f8de:	2002      	movs	r0, #2
    f8e0:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
    f8e2:	2428      	movs	r4, #40	; 0x28
    f8e4:	2318      	movs	r3, #24
    f8e6:	fb14 3000 	smlabb	r0, r4, r0, r3
    f8ea:	4c07      	ldr	r4, [pc, #28]	; (f908 <ll_rl_crpa_get+0x3c>)
    f8ec:	4404      	add	r4, r0
    f8ee:	2106      	movs	r1, #6
    f8f0:	4620      	mov	r0, r4
    f8f2:	f7f6 f96e 	bl	5bd2 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
    f8f6:	2800      	cmp	r0, #0
    f8f8:	d0f1      	beq.n	f8de <ll_rl_crpa_get+0x12>
    f8fa:	2206      	movs	r2, #6
    f8fc:	4621      	mov	r1, r4
    f8fe:	4628      	mov	r0, r5
    f900:	f7f2 f97c 	bl	1bfc <memcpy>
			return 0;
    f904:	2000      	movs	r0, #0
}
    f906:	bd38      	pop	{r3, r4, r5, pc}
    f908:	20001054 	.word	0x20001054

0000f90c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
    f90c:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f90e:	2200      	movs	r2, #0
{
    f910:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f912:	1c41      	adds	r1, r0, #1
    f914:	7800      	ldrb	r0, [r0, #0]
    f916:	f7ff fcb1 	bl	f27c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f91a:	2807      	cmp	r0, #7
    f91c:	d80a      	bhi.n	f934 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
    f91e:	4b06      	ldr	r3, [pc, #24]	; (f938 <ll_rl_lrpa_get+0x2c>)
    f920:	2228      	movs	r2, #40	; 0x28
    f922:	fb02 3000 	mla	r0, r2, r0, r3
    f926:	2206      	movs	r2, #6
    f928:	6a41      	ldr	r1, [r0, #36]	; 0x24
    f92a:	4620      	mov	r0, r4
    f92c:	f7f2 f966 	bl	1bfc <memcpy>
		return 0;
    f930:	2000      	movs	r0, #0
    f932:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f934:	2002      	movs	r0, #2
}
    f936:	bd10      	pop	{r4, pc}
    f938:	20001054 	.word	0x20001054

0000f93c <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
    f93c:	b510      	push	{r4, lr}
    f93e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
    f940:	f7ff fb74 	bl	f02c <rl_access_check.constprop.1>
    f944:	b140      	cbz	r0, f958 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
    f946:	b11c      	cbz	r4, f950 <ll_rl_enable+0x14>
    f948:	2c01      	cmp	r4, #1
    f94a:	d001      	beq.n	f950 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
    f94c:	2012      	movs	r0, #18
	}

	return 0;
}
    f94e:	bd10      	pop	{r4, pc}
		rl_enable = 1;
    f950:	4b02      	ldr	r3, [pc, #8]	; (f95c <ll_rl_enable+0x20>)
    f952:	701c      	strb	r4, [r3, #0]
	return 0;
    f954:	2000      	movs	r0, #0
		break;
    f956:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f958:	200c      	movs	r0, #12
    f95a:	bd10      	pop	{r4, pc}
    f95c:	20001194 	.word	0x20001194

0000f960 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
    f960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f964:	4358      	muls	r0, r3
    f966:	4b01      	ldr	r3, [pc, #4]	; (f96c <ll_rl_timeout_set+0xc>)
    f968:	6018      	str	r0, [r3, #0]
    f96a:	4770      	bx	lr
    f96c:	200016e4 	.word	0x200016e4

0000f970 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
    f970:	b538      	push	{r3, r4, r5, lr}
    f972:	4605      	mov	r5, r0
    f974:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
    f976:	f7ff fb59 	bl	f02c <rl_access_check.constprop.1>
    f97a:	b1d8      	cbz	r0, f9b4 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    f97c:	2200      	movs	r2, #0
    f97e:	1c69      	adds	r1, r5, #1
    f980:	7828      	ldrb	r0, [r5, #0]
    f982:	f7ff fc7b 	bl	f27c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    f986:	2807      	cmp	r0, #7
    f988:	d816      	bhi.n	f9b8 <ll_priv_mode_set+0x48>
		switch (mode) {
    f98a:	b11c      	cbz	r4, f994 <ll_priv_mode_set+0x24>
    f98c:	2c01      	cmp	r4, #1
    f98e:	d00a      	beq.n	f9a6 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
    f990:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
    f992:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
    f994:	2328      	movs	r3, #40	; 0x28
    f996:	4a09      	ldr	r2, [pc, #36]	; (f9bc <ll_priv_mode_set+0x4c>)
    f998:	4358      	muls	r0, r3
    f99a:	5c13      	ldrb	r3, [r2, r0]
    f99c:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
    f9a0:	5413      	strb	r3, [r2, r0]
	return 0;
    f9a2:	2000      	movs	r0, #0
			break;
    f9a4:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
    f9a6:	2328      	movs	r3, #40	; 0x28
    f9a8:	4a04      	ldr	r2, [pc, #16]	; (f9bc <ll_priv_mode_set+0x4c>)
    f9aa:	4358      	muls	r0, r3
    f9ac:	5c13      	ldrb	r3, [r2, r0]
    f9ae:	f043 0310 	orr.w	r3, r3, #16
    f9b2:	e7f5      	b.n	f9a0 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f9b4:	200c      	movs	r0, #12
    f9b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f9b8:	2002      	movs	r0, #2
    f9ba:	bd38      	pop	{r3, r4, r5, pc}
    f9bc:	20001054 	.word	0x20001054

0000f9c0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    f9c0:	4a19      	ldr	r2, [pc, #100]	; (fa28 <ll_filter_reset+0x68>)
    f9c2:	2300      	movs	r3, #0
{
    f9c4:	b430      	push	{r4, r5}
	wl_anon = 0;
    f9c6:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
    f9c8:	4a18      	ldr	r2, [pc, #96]	; (fa2c <ll_filter_reset+0x6c>)
    f9ca:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    f9ce:	f36f 0100 	bfc	r1, #0, #1
    f9d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    f9d6:	3301      	adds	r3, #1
    f9d8:	2b08      	cmp	r3, #8
    f9da:	d1f6      	bne.n	f9ca <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
    f9dc:	4a14      	ldr	r2, [pc, #80]	; (fa30 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    f9de:	4915      	ldr	r1, [pc, #84]	; (fa34 <ll_filter_reset+0x74>)
	rl_enable = 0;
    f9e0:	2300      	movs	r3, #0
    f9e2:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    f9e4:	4a14      	ldr	r2, [pc, #80]	; (fa38 <ll_filter_reset+0x78>)
    f9e6:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
    f9e8:	4a14      	ldr	r2, [pc, #80]	; (fa3c <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
    f9ea:	4915      	ldr	r1, [pc, #84]	; (fa40 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
    f9ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    f9f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f9f4:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
    f9f8:	2528      	movs	r5, #40	; 0x28
    f9fa:	fb05 f203 	mul.w	r2, r5, r3
    f9fe:	3301      	adds	r3, #1
    fa00:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fa02:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
    fa04:	f36f 0400 	bfc	r4, #0, #1
    fa08:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fa0a:	d1f6      	bne.n	f9fa <ll_filter_reset+0x3a>
	peer_irk_count = 0;
    fa0c:	4b0d      	ldr	r3, [pc, #52]	; (fa44 <ll_filter_reset+0x84>)
    fa0e:	2200      	movs	r2, #0
    fa10:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
    fa12:	b120      	cbz	r0, fa1e <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
    fa14:	490c      	ldr	r1, [pc, #48]	; (fa48 <ll_filter_reset+0x88>)
    fa16:	480d      	ldr	r0, [pc, #52]	; (fa4c <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    fa18:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
    fa1a:	f002 b9ab 	b.w	11d74 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
    fa1e:	480b      	ldr	r0, [pc, #44]	; (fa4c <ll_filter_reset+0x8c>)
}
    fa20:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
    fa22:	f002 b9b7 	b.w	11d94 <k_delayed_work_cancel>
    fa26:	bf00      	nop
    fa28:	200016b8 	.word	0x200016b8
    fa2c:	200011c7 	.word	0x200011c7
    fa30:	20001194 	.word	0x20001194
    fa34:	000dbba0 	.word	0x000dbba0
    fa38:	200016e4 	.word	0x200016e4
    fa3c:	200016b0 	.word	0x200016b0
    fa40:	20001054 	.word	0x20001054
    fa44:	20000fca 	.word	0x20000fca
    fa48:	0000f5e1 	.word	0x0000f5e1
    fa4c:	200016bc 	.word	0x200016bc

0000fa50 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    fa50:	4b05      	ldr	r3, [pc, #20]	; (fa68 <cntr_init+0x18>)
    fa52:	2200      	movs	r2, #0
    fa54:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    fa58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    fa5c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    fa60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fa64:	4770      	bx	lr
    fa66:	bf00      	nop
    fa68:	4000b000 	.word	0x4000b000

0000fa6c <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    fa6c:	4a04      	ldr	r2, [pc, #16]	; (fa80 <cntr_start+0x14>)
    fa6e:	7813      	ldrb	r3, [r2, #0]
    fa70:	1c59      	adds	r1, r3, #1
    fa72:	7011      	strb	r1, [r2, #0]
    fa74:	2001      	movs	r0, #1
    fa76:	b913      	cbnz	r3, fa7e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    fa78:	4a02      	ldr	r2, [pc, #8]	; (fa84 <cntr_start+0x18>)
    fa7a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    fa7c:	4618      	mov	r0, r3
}
    fa7e:	4770      	bx	lr
    fa80:	20001239 	.word	0x20001239
    fa84:	4000b000 	.word	0x4000b000

0000fa88 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    fa88:	4b09      	ldr	r3, [pc, #36]	; (fab0 <cntr_stop+0x28>)
    fa8a:	7818      	ldrb	r0, [r3, #0]
    fa8c:	b928      	cbnz	r0, fa9a <cntr_stop+0x12>
    fa8e:	4040      	eors	r0, r0
    fa90:	f380 8811 	msr	BASEPRI, r0
    fa94:	f04f 0004 	mov.w	r0, #4
    fa98:	df02      	svc	2

	if (--_refcount) {
    fa9a:	3801      	subs	r0, #1
    fa9c:	b2c0      	uxtb	r0, r0
    fa9e:	7018      	strb	r0, [r3, #0]
    faa0:	2301      	movs	r3, #1
    faa2:	b910      	cbnz	r0, faaa <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    faa4:	4a03      	ldr	r2, [pc, #12]	; (fab4 <cntr_stop+0x2c>)
    faa6:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    faa8:	4770      	bx	lr
		return 1;
    faaa:	4618      	mov	r0, r3
}
    faac:	4770      	bx	lr
    faae:	bf00      	nop
    fab0:	20001239 	.word	0x20001239
    fab4:	4000b000 	.word	0x4000b000

0000fab8 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    fab8:	4b01      	ldr	r3, [pc, #4]	; (fac0 <cntr_cnt_get+0x8>)
    faba:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    fabe:	4770      	bx	lr
    fac0:	4000b000 	.word	0x4000b000

0000fac4 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    fac4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    fac8:	4b01      	ldr	r3, [pc, #4]	; (fad0 <cntr_cmp_set+0xc>)
    faca:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    face:	4770      	bx	lr
    fad0:	4000b000 	.word	0x4000b000

0000fad4 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    fad4:	4b11      	ldr	r3, [pc, #68]	; (fb1c <do_ecb+0x48>)
{
    fad6:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    fad8:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    fada:	2500      	movs	r5, #0
    fadc:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    fade:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    fae0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    fae4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    fae8:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    faec:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    faee:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    faf2:	b934      	cbnz	r4, fb02 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    faf4:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    faf8:	b91c      	cbnz	r4, fb02 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    fafa:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fafe:	2c00      	cmp	r4, #0
    fb00:	d1f5      	bne.n	faee <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    fb02:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    fb04:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    fb08:	2c00      	cmp	r4, #0
    fb0a:	d1e8      	bne.n	fade <do_ecb+0xa>
    fb0c:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    fb10:	2e00      	cmp	r6, #0
    fb12:	d0e4      	beq.n	fade <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    fb14:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    fb18:	bd70      	pop	{r4, r5, r6, pc}
    fb1a:	bf00      	nop
    fb1c:	4000e000 	.word	0x4000e000

0000fb20 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    fb20:	b570      	push	{r4, r5, r6, lr}
    fb22:	b08c      	sub	sp, #48	; 0x30
    fb24:	460e      	mov	r6, r1
    fb26:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    fb28:	4601      	mov	r1, r0
    fb2a:	2210      	movs	r2, #16
    fb2c:	4668      	mov	r0, sp
{
    fb2e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    fb30:	f7f6 f840 	bl	5bb4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    fb34:	2210      	movs	r2, #16
    fb36:	eb0d 0002 	add.w	r0, sp, r2
    fb3a:	4631      	mov	r1, r6
    fb3c:	f7f6 f83a 	bl	5bb4 <mem_rcopy>

	do_ecb(&ecb);
    fb40:	4668      	mov	r0, sp
    fb42:	f7ff ffc7 	bl	fad4 <do_ecb>

	if (cipher_text_le) {
    fb46:	b125      	cbz	r5, fb52 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    fb48:	2210      	movs	r2, #16
    fb4a:	a908      	add	r1, sp, #32
    fb4c:	4628      	mov	r0, r5
    fb4e:	f7f6 f831 	bl	5bb4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    fb52:	b124      	cbz	r4, fb5e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    fb54:	2210      	movs	r2, #16
    fb56:	a908      	add	r1, sp, #32
    fb58:	4620      	mov	r0, r4
    fb5a:	f7f2 f84f 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    fb5e:	b00c      	add	sp, #48	; 0x30
    fb60:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fb64 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    fb64:	4b07      	ldr	r3, [pc, #28]	; (fb84 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    fb66:	4a08      	ldr	r2, [pc, #32]	; (fb88 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    fb68:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    fb6c:	4907      	ldr	r1, [pc, #28]	; (fb8c <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    fb6e:	4a08      	ldr	r2, [pc, #32]	; (fb90 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    fb70:	2800      	cmp	r0, #0
    fb72:	bf14      	ite	ne
    fb74:	4610      	movne	r0, r2
    fb76:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    fb78:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    fb7a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    fb7e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fb82:	4770      	bx	lr
    fb84:	4001f000 	.word	0x4001f000
    fb88:	40008140 	.word	0x40008140
    fb8c:	40001004 	.word	0x40001004
    fb90:	40001000 	.word	0x40001000

0000fb94 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    fb94:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fb96:	4e2c      	ldr	r6, [pc, #176]	; (fc48 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    fb98:	4f2c      	ldr	r7, [pc, #176]	; (fc4c <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fb9a:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    fb9c:	4b2c      	ldr	r3, [pc, #176]	; (fc50 <sw_switch.isra.9+0xbc>)
    fb9e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    fba2:	b22b      	sxth	r3, r5
    fba4:	00dc      	lsls	r4, r3, #3
    fba6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    fbaa:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    fbae:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fbb2:	f105 040b 	add.w	r4, r5, #11
    fbb6:	b2e4      	uxtb	r4, r4
    fbb8:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    fbba:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    fbbe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    fbc2:	3fc0      	subs	r7, #192	; 0xc0
    fbc4:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    fbc8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    fbcc:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    fbd0:	2800      	cmp	r0, #0
    fbd2:	d034      	beq.n	fc3e <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
    fbd4:	f24a 075a 	movw	r7, #41050	; 0xa05a
    fbd8:	f649 4040 	movw	r0, #40000	; 0x9c40
    fbdc:	2a02      	cmp	r2, #2
    fbde:	bf0c      	ite	eq
    fbe0:	4602      	moveq	r2, r0
    fbe2:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
    fbe4:	f242 47b8 	movw	r7, #9400	; 0x24b8
    fbe8:	f241 504a 	movw	r0, #5450	; 0x154a
    fbec:	2902      	cmp	r1, #2
    fbee:	bf18      	it	ne
    fbf0:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    fbf2:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    fbf6:	4401      	add	r1, r0
    fbf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fbfc:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    fc00:	4a14      	ldr	r2, [pc, #80]	; (fc54 <sw_switch.isra.9+0xc0>)
    fc02:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    fc06:	009b      	lsls	r3, r3, #2
    fc08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fc0c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    fc10:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    fc14:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    fc16:	bf8b      	itete	hi
    fc18:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    fc1c:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    fc1e:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    fc20:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    fc24:	bf88      	it	hi
    fc26:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    fc2a:	4b08      	ldr	r3, [pc, #32]	; (fc4c <sw_switch.isra.9+0xb8>)
    fc2c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    fc30:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    fc34:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    fc36:	f003 0301 	and.w	r3, r3, #1
    fc3a:	7033      	strb	r3, [r6, #0]
    fc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    fc3e:	4a06      	ldr	r2, [pc, #24]	; (fc58 <sw_switch.isra.9+0xc4>)
    fc40:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    fc44:	212d      	movs	r1, #45	; 0x2d
    fc46:	e7de      	b.n	fc06 <sw_switch.isra.9+0x72>
    fc48:	2000145c 	.word	0x2000145c
    fc4c:	4001f000 	.word	0x4001f000
    fc50:	4000110c 	.word	0x4000110c
    fc54:	40001000 	.word	0x40001000
    fc58:	40001004 	.word	0x40001004

0000fc5c <isr_radio>:
	if (sfp_radio_isr) {
    fc5c:	4b02      	ldr	r3, [pc, #8]	; (fc68 <isr_radio+0xc>)
    fc5e:	681b      	ldr	r3, [r3, #0]
    fc60:	b103      	cbz	r3, fc64 <isr_radio+0x8>
		sfp_radio_isr();
    fc62:	4718      	bx	r3
    fc64:	4770      	bx	lr
    fc66:	bf00      	nop
    fc68:	20001458 	.word	0x20001458

0000fc6c <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    fc6c:	4b06      	ldr	r3, [pc, #24]	; (fc88 <radio_isr_set+0x1c>)
    fc6e:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    fc70:	4b06      	ldr	r3, [pc, #24]	; (fc8c <radio_isr_set+0x20>)
    fc72:	2210      	movs	r2, #16
    fc74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fc78:	4b05      	ldr	r3, [pc, #20]	; (fc90 <radio_isr_set+0x24>)
    fc7a:	2202      	movs	r2, #2
    fc7c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    fc80:	2001      	movs	r0, #1
    fc82:	f7f1 bde9 	b.w	1858 <_arch_irq_enable>
    fc86:	bf00      	nop
    fc88:	20001458 	.word	0x20001458
    fc8c:	40001000 	.word	0x40001000
    fc90:	e000e100 	.word	0xe000e100

0000fc94 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    fc94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fc98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    fc9c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    fc9e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    fca2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    fca6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    fcaa:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    fcae:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    fcb2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    fcb6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    fcba:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    fcbe:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    fcc2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    fcc6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    fcca:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    fcce:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    fcd2:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    fcd6:	4770      	bx	lr

0000fcd8 <radio_reset>:
{
    fcd8:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    fcda:	2001      	movs	r0, #1
    fcdc:	f7f1 fdcc 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
    fce0:	4b08      	ldr	r3, [pc, #32]	; (fd04 <radio_reset+0x2c>)
    fce2:	2200      	movs	r2, #0
    fce4:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    fce8:	2201      	movs	r2, #1
    fcea:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    fcee:	4a06      	ldr	r2, [pc, #24]	; (fd08 <radio_reset+0x30>)
    fcf0:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    fcf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    fcf6:	f023 0301 	bic.w	r3, r3, #1
    fcfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    fcfe:	6013      	str	r3, [r2, #0]
    fd00:	bd08      	pop	{r3, pc}
    fd02:	bf00      	nop
    fd04:	40001000 	.word	0x40001000
    fd08:	40001774 	.word	0x40001774

0000fd0c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    fd0c:	4b06      	ldr	r3, [pc, #24]	; (fd28 <radio_phy_set+0x1c>)
	switch (phy) {
    fd0e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    fd10:	bf0c      	ite	eq
    fd12:	2204      	moveq	r2, #4
    fd14:	2203      	movne	r2, #3
    fd16:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    fd1a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    fd1e:	f042 0201 	orr.w	r2, r2, #1
    fd22:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    fd26:	4770      	bx	lr
    fd28:	40001000 	.word	0x40001000

0000fd2c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    fd2c:	4b01      	ldr	r3, [pc, #4]	; (fd34 <radio_tx_power_set+0x8>)
    fd2e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    fd32:	4770      	bx	lr
    fd34:	40001000 	.word	0x40001000

0000fd38 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    fd38:	4b01      	ldr	r3, [pc, #4]	; (fd40 <radio_freq_chan_set+0x8>)
    fd3a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    fd3e:	4770      	bx	lr
    fd40:	40001000 	.word	0x40001000

0000fd44 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    fd44:	4b07      	ldr	r3, [pc, #28]	; (fd64 <radio_whiten_iv_set+0x20>)
    fd46:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    fd4a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fd4e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    fd52:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    fd56:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fd5a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    fd5e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    fd62:	4770      	bx	lr
    fd64:	40001000 	.word	0x40001000

0000fd68 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    fd68:	4a0a      	ldr	r2, [pc, #40]	; (fd94 <radio_aa_set+0x2c>)
    fd6a:	2300      	movs	r3, #0
    fd6c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    fd70:	2301      	movs	r3, #1
    fd72:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    fd76:	78c3      	ldrb	r3, [r0, #3]
    fd78:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    fd7c:	7843      	ldrb	r3, [r0, #1]
    fd7e:	7881      	ldrb	r1, [r0, #2]
    fd80:	041b      	lsls	r3, r3, #16
    fd82:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    fd86:	7801      	ldrb	r1, [r0, #0]
    fd88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    fd8c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    fd90:	4770      	bx	lr
    fd92:	bf00      	nop
    fd94:	40001000 	.word	0x40001000

0000fd98 <radio_pkt_configure>:
	switch (phy) {
    fd98:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    fd9c:	2b02      	cmp	r3, #2
{
    fd9e:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    fda0:	bf0c      	ite	eq
    fda2:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    fda6:	2400      	movne	r4, #0
	if (dc) {
    fda8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    fdaa:	f1c0 0308 	rsb	r3, r0, #8
    fdae:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    fdb2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    fdb6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    fdba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    fdbe:	4a0b      	ldr	r2, [pc, #44]	; (fdec <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    fdc0:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    fdc4:	bf48      	it	mi
    fdc6:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    fdca:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    fdcc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    fdd0:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    fdd4:	4b06      	ldr	r3, [pc, #24]	; (fdf0 <radio_pkt_configure+0x58>)
    fdd6:	4003      	ands	r3, r0
    fdd8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    fddc:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    fde0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    fde4:	4319      	orrs	r1, r3
    fde6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    fdea:	bd10      	pop	{r4, pc}
    fdec:	40001000 	.word	0x40001000
    fdf0:	fef80000 	.word	0xfef80000

0000fdf4 <radio_pkt_rx_set>:
    fdf4:	4b01      	ldr	r3, [pc, #4]	; (fdfc <radio_pkt_rx_set+0x8>)
    fdf6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    fdfa:	4770      	bx	lr
    fdfc:	40001000 	.word	0x40001000

0000fe00 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    fe00:	4b01      	ldr	r3, [pc, #4]	; (fe08 <radio_pkt_tx_set+0x8>)
    fe02:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    fe06:	4770      	bx	lr
    fe08:	40001000 	.word	0x40001000

0000fe0c <radio_tx_ready_delay_get>:
	switch (phy) {
    fe0c:	2802      	cmp	r0, #2
}
    fe0e:	bf0c      	ite	eq
    fe10:	2028      	moveq	r0, #40	; 0x28
    fe12:	2029      	movne	r0, #41	; 0x29
    fe14:	4770      	bx	lr

0000fe16 <radio_tx_chain_delay_get>:
}
    fe16:	2001      	movs	r0, #1
    fe18:	4770      	bx	lr

0000fe1a <radio_rx_ready_delay_get>:
}
    fe1a:	2029      	movs	r0, #41	; 0x29
    fe1c:	4770      	bx	lr

0000fe1e <radio_rx_chain_delay_get>:
	switch (phy) {
    fe1e:	2802      	cmp	r0, #2
}
    fe20:	bf0c      	ite	eq
    fe22:	2006      	moveq	r0, #6
    fe24:	200a      	movne	r0, #10
    fe26:	4770      	bx	lr

0000fe28 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    fe28:	4b01      	ldr	r3, [pc, #4]	; (fe30 <radio_rx_enable+0x8>)
    fe2a:	2201      	movs	r2, #1
    fe2c:	605a      	str	r2, [r3, #4]
    fe2e:	4770      	bx	lr
    fe30:	40001000 	.word	0x40001000

0000fe34 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    fe34:	4b01      	ldr	r3, [pc, #4]	; (fe3c <radio_tx_enable+0x8>)
    fe36:	2201      	movs	r2, #1
    fe38:	601a      	str	r2, [r3, #0]
    fe3a:	4770      	bx	lr
    fe3c:	40001000 	.word	0x40001000

0000fe40 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    fe40:	4a07      	ldr	r2, [pc, #28]	; (fe60 <radio_disable+0x20>)
    fe42:	f44f 6390 	mov.w	r3, #1152	; 0x480
    fe46:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    fe4a:	2301      	movs	r3, #1
    fe4c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    fe4e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    fe50:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    fe54:	2100      	movs	r1, #0
    fe56:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    fe5a:	6113      	str	r3, [r2, #16]
    fe5c:	4770      	bx	lr
    fe5e:	bf00      	nop
    fe60:	4001f000 	.word	0x4001f000

0000fe64 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    fe64:	4b04      	ldr	r3, [pc, #16]	; (fe78 <radio_status_reset+0x14>)
    fe66:	2200      	movs	r2, #0
    fe68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    fe6c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    fe70:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    fe74:	4770      	bx	lr
    fe76:	bf00      	nop
    fe78:	40001000 	.word	0x40001000

0000fe7c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    fe7c:	4b03      	ldr	r3, [pc, #12]	; (fe8c <radio_is_ready+0x10>)
    fe7e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    fe82:	3000      	adds	r0, #0
    fe84:	bf18      	it	ne
    fe86:	2001      	movne	r0, #1
    fe88:	4770      	bx	lr
    fe8a:	bf00      	nop
    fe8c:	40001000 	.word	0x40001000

0000fe90 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    fe90:	4b03      	ldr	r3, [pc, #12]	; (fea0 <radio_is_done+0x10>)
    fe92:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    fe96:	3000      	adds	r0, #0
    fe98:	bf18      	it	ne
    fe9a:	2001      	movne	r0, #1
    fe9c:	4770      	bx	lr
    fe9e:	bf00      	nop
    fea0:	40001000 	.word	0x40001000

0000fea4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    fea4:	4b03      	ldr	r3, [pc, #12]	; (feb4 <radio_is_idle+0x10>)
    fea6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    feaa:	fab0 f080 	clz	r0, r0
    feae:	0940      	lsrs	r0, r0, #5
    feb0:	4770      	bx	lr
    feb2:	bf00      	nop
    feb4:	40001000 	.word	0x40001000

0000feb8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    feb8:	4b04      	ldr	r3, [pc, #16]	; (fecc <radio_crc_configure+0x14>)
    feba:	f240 1203 	movw	r2, #259	; 0x103
    febe:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    fec2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    fec6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    feca:	4770      	bx	lr
    fecc:	40001000 	.word	0x40001000

0000fed0 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    fed0:	4b03      	ldr	r3, [pc, #12]	; (fee0 <radio_crc_is_valid+0x10>)
    fed2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fed6:	3000      	adds	r0, #0
    fed8:	bf18      	it	ne
    feda:	2001      	movne	r0, #1
    fedc:	4770      	bx	lr
    fede:	bf00      	nop
    fee0:	40001000 	.word	0x40001000

0000fee4 <radio_pkt_empty_get>:
}
    fee4:	4800      	ldr	r0, [pc, #0]	; (fee8 <radio_pkt_empty_get+0x4>)
    fee6:	4770      	bx	lr
    fee8:	2000134c 	.word	0x2000134c

0000feec <radio_pkt_scratch_get>:
}
    feec:	4800      	ldr	r0, [pc, #0]	; (fef0 <radio_pkt_scratch_get+0x4>)
    feee:	4770      	bx	lr
    fef0:	20001350 	.word	0x20001350

0000fef4 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    fef4:	4b04      	ldr	r3, [pc, #16]	; (ff08 <radio_switch_complete_and_rx+0x14>)
    fef6:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    fef8:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    fefa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    fefe:	4602      	mov	r2, r0
    ff00:	4608      	mov	r0, r1
    ff02:	f7ff be47 	b.w	fb94 <sw_switch.isra.9>
    ff06:	bf00      	nop
    ff08:	40001000 	.word	0x40001000

0000ff0c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ff0c:	4b03      	ldr	r3, [pc, #12]	; (ff1c <radio_switch_complete_and_tx+0x10>)
    ff0e:	2103      	movs	r1, #3
    ff10:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    ff14:	4601      	mov	r1, r0
    ff16:	2001      	movs	r0, #1
    ff18:	f7ff be3c 	b.w	fb94 <sw_switch.isra.9>
    ff1c:	40001000 	.word	0x40001000

0000ff20 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    ff20:	4b05      	ldr	r3, [pc, #20]	; (ff38 <radio_switch_complete_and_disable+0x18>)
    ff22:	2203      	movs	r2, #3
    ff24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    ff28:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    ff2c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    ff30:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ff34:	4770      	bx	lr
    ff36:	bf00      	nop
    ff38:	40001000 	.word	0x40001000

0000ff3c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    ff3c:	4a03      	ldr	r2, [pc, #12]	; (ff4c <radio_rssi_measure+0x10>)
    ff3e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ff42:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    ff46:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ff4a:	4770      	bx	lr
    ff4c:	40001000 	.word	0x40001000

0000ff50 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    ff50:	4b01      	ldr	r3, [pc, #4]	; (ff58 <radio_rssi_get+0x8>)
    ff52:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ff56:	4770      	bx	lr
    ff58:	40001000 	.word	0x40001000

0000ff5c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    ff5c:	4b02      	ldr	r3, [pc, #8]	; (ff68 <radio_rssi_status_reset+0xc>)
    ff5e:	2200      	movs	r2, #0
    ff60:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    ff64:	4770      	bx	lr
    ff66:	bf00      	nop
    ff68:	40001000 	.word	0x40001000

0000ff6c <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    ff6c:	4b03      	ldr	r3, [pc, #12]	; (ff7c <radio_rssi_is_ready+0x10>)
    ff6e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    ff72:	3000      	adds	r0, #0
    ff74:	bf18      	it	ne
    ff76:	2001      	movne	r0, #1
    ff78:	4770      	bx	lr
    ff7a:	bf00      	nop
    ff7c:	40001000 	.word	0x40001000

0000ff80 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ff80:	b530      	push	{r4, r5, lr}
    ff82:	2400      	movs	r4, #0
    ff84:	00a3      	lsls	r3, r4, #2
    ff86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ff8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    ff8e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ff90:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    ff94:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ff96:	8895      	ldrh	r5, [r2, #4]
    ff98:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    ff9c:	2c08      	cmp	r4, #8
		bdaddr += 6;
    ff9e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    ffa2:	d1ef      	bne.n	ff84 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    ffa4:	4b02      	ldr	r3, [pc, #8]	; (ffb0 <radio_filter_configure+0x30>)
    ffa6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    ffaa:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    ffae:	bd30      	pop	{r4, r5, pc}
    ffb0:	40001000 	.word	0x40001000

0000ffb4 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    ffb4:	4a03      	ldr	r2, [pc, #12]	; (ffc4 <radio_filter_disable+0x10>)
    ffb6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    ffba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ffbe:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    ffc2:	4770      	bx	lr
    ffc4:	40001000 	.word	0x40001000

0000ffc8 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    ffc8:	4b02      	ldr	r3, [pc, #8]	; (ffd4 <radio_filter_status_reset+0xc>)
    ffca:	2200      	movs	r2, #0
    ffcc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    ffd0:	4770      	bx	lr
    ffd2:	bf00      	nop
    ffd4:	40001000 	.word	0x40001000

0000ffd8 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    ffd8:	4b03      	ldr	r3, [pc, #12]	; (ffe8 <radio_filter_has_match+0x10>)
    ffda:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    ffde:	3000      	adds	r0, #0
    ffe0:	bf18      	it	ne
    ffe2:	2001      	movne	r0, #1
    ffe4:	4770      	bx	lr
    ffe6:	bf00      	nop
    ffe8:	40001000 	.word	0x40001000

0000ffec <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    ffec:	4b01      	ldr	r3, [pc, #4]	; (fff4 <radio_filter_match_get+0x8>)
    ffee:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    fff2:	4770      	bx	lr
    fff4:	40001000 	.word	0x40001000

0000fff8 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    fff8:	4b04      	ldr	r3, [pc, #16]	; (1000c <__kernel_ram_size+0xc>)
    fffa:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    fffe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   10002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10006:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1000a:	4770      	bx	lr
   1000c:	40001000 	.word	0x40001000

00010010 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   10010:	4b05      	ldr	r3, [pc, #20]	; (10028 <radio_tmr_status_reset+0x18>)
   10012:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   10016:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   1001a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1001e:	227f      	movs	r2, #127	; 0x7f
   10020:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   10024:	4770      	bx	lr
   10026:	bf00      	nop
   10028:	4000b000 	.word	0x4000b000

0001002c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   1002c:	4b03      	ldr	r3, [pc, #12]	; (1003c <radio_tmr_tifs_set+0x10>)
   1002e:	4a04      	ldr	r2, [pc, #16]	; (10040 <radio_tmr_tifs_set+0x14>)
   10030:	781b      	ldrb	r3, [r3, #0]
   10032:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   10036:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1003a:	4770      	bx	lr
   1003c:	2000145c 	.word	0x2000145c
   10040:	40009000 	.word	0x40009000

00010044 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   10044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   10048:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1004c:	4c30      	ldr	r4, [pc, #192]	; (10110 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   1004e:	4d31      	ldr	r5, [pc, #196]	; (10114 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   10050:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   10054:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   10056:	bf88      	it	hi
   10058:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   1005c:	4b2e      	ldr	r3, [pc, #184]	; (10118 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   1005e:	4c2f      	ldr	r4, [pc, #188]	; (1011c <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   10060:	bf82      	ittt	hi
   10062:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   10066:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   1006a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   1006e:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   10070:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   10074:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   10076:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   10078:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   1007c:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   1007e:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   10082:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   10086:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   1008a:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   1008e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   10092:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   10096:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   1009a:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   1009e:	4920      	ldr	r1, [pc, #128]	; (10120 <radio_tmr_start+0xdc>)
   100a0:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   100a4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   100a8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   100ac:	f7ff fd5a 	bl	fb64 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   100b0:	4b1c      	ldr	r3, [pc, #112]	; (10124 <radio_tmr_start+0xe0>)
   100b2:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   100b4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   100b8:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   100bc:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   100c0:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   100c2:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   100c6:	3b74      	subs	r3, #116	; 0x74
   100c8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   100cc:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   100d0:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   100d4:	f503 739a 	add.w	r3, r3, #308	; 0x134
   100d8:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   100dc:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   100e0:	33c4      	adds	r3, #196	; 0xc4
   100e2:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   100e6:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   100ea:	3bc0      	subs	r3, #192	; 0xc0
   100ec:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   100f0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   100f4:	33c8      	adds	r3, #200	; 0xc8
   100f6:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   100fa:	f44f 6310 	mov.w	r3, #2304	; 0x900
   100fe:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   10102:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   10106:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   1010a:	4628      	mov	r0, r5
   1010c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10110:	7ff0bdbf 	.word	0x7ff0bdbf
   10114:	000f4240 	.word	0x000f4240
   10118:	40008000 	.word	0x40008000
   1011c:	4000b000 	.word	0x4000b000
   10120:	4000b148 	.word	0x4000b148
   10124:	40009000 	.word	0x40009000

00010128 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   10128:	4a04      	ldr	r2, [pc, #16]	; (1013c <radio_tmr_stop+0x14>)
   1012a:	2301      	movs	r3, #1
   1012c:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   1012e:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   10130:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   10134:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   10136:	6113      	str	r3, [r2, #16]
   10138:	4770      	bx	lr
   1013a:	bf00      	nop
   1013c:	40008000 	.word	0x40008000

00010140 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   10140:	4b0c      	ldr	r3, [pc, #48]	; (10174 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   10142:	4a0d      	ldr	r2, [pc, #52]	; (10178 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   10144:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   10148:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1014c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   10150:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   10154:	3240      	adds	r2, #64	; 0x40
   10156:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   1015a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1015e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   10162:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   10166:	3a34      	subs	r2, #52	; 0x34
   10168:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   1016c:	2218      	movs	r2, #24
   1016e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   10172:	4770      	bx	lr
   10174:	40008000 	.word	0x40008000
   10178:	40001104 	.word	0x40001104

0001017c <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   1017c:	4b0b      	ldr	r3, [pc, #44]	; (101ac <radio_tmr_aa_capture+0x30>)
   1017e:	4a0c      	ldr	r2, [pc, #48]	; (101b0 <radio_tmr_aa_capture+0x34>)
   10180:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   10184:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   10188:	3240      	adds	r2, #64	; 0x40
   1018a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1018e:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   10192:	3a3c      	subs	r2, #60	; 0x3c
   10194:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   10198:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1019c:	3240      	adds	r2, #64	; 0x40
   1019e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   101a2:	220c      	movs	r2, #12
   101a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   101a8:	4770      	bx	lr
   101aa:	bf00      	nop
   101ac:	4001f000 	.word	0x4001f000
   101b0:	40001100 	.word	0x40001100

000101b4 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   101b4:	4b01      	ldr	r3, [pc, #4]	; (101bc <radio_tmr_aa_get+0x8>)
   101b6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   101ba:	4770      	bx	lr
   101bc:	40008000 	.word	0x40008000

000101c0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   101c0:	4b01      	ldr	r3, [pc, #4]	; (101c8 <radio_tmr_aa_save+0x8>)
   101c2:	6018      	str	r0, [r3, #0]
   101c4:	4770      	bx	lr
   101c6:	bf00      	nop
   101c8:	20001454 	.word	0x20001454

000101cc <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   101cc:	4b01      	ldr	r3, [pc, #4]	; (101d4 <radio_tmr_aa_restore+0x8>)
   101ce:	6818      	ldr	r0, [r3, #0]
   101d0:	4770      	bx	lr
   101d2:	bf00      	nop
   101d4:	20001454 	.word	0x20001454

000101d8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   101d8:	4b01      	ldr	r3, [pc, #4]	; (101e0 <radio_tmr_ready_get+0x8>)
   101da:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   101de:	4770      	bx	lr
   101e0:	40008000 	.word	0x40008000

000101e4 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   101e4:	4b06      	ldr	r3, [pc, #24]	; (10200 <radio_tmr_end_capture+0x1c>)
   101e6:	4a07      	ldr	r2, [pc, #28]	; (10204 <radio_tmr_end_capture+0x20>)
   101e8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   101ec:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   101f0:	323c      	adds	r2, #60	; 0x3c
   101f2:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   101f6:	2220      	movs	r2, #32
   101f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   101fc:	4770      	bx	lr
   101fe:	bf00      	nop
   10200:	4001f000 	.word	0x4001f000
   10204:	4000110c 	.word	0x4000110c

00010208 <radio_tmr_end_get>:
   10208:	4b01      	ldr	r3, [pc, #4]	; (10210 <radio_tmr_end_get+0x8>)
   1020a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1020e:	4770      	bx	lr
   10210:	40008000 	.word	0x40008000

00010214 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   10214:	4b01      	ldr	r3, [pc, #4]	; (1021c <radio_tmr_tifs_base_get+0x8>)
   10216:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   1021a:	4770      	bx	lr
   1021c:	40008000 	.word	0x40008000

00010220 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   10220:	4b16      	ldr	r3, [pc, #88]	; (1027c <radio_ccm_rx_pkt_set+0x5c>)
{
   10222:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   10224:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   10226:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   10228:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1022c:	4e14      	ldr	r6, [pc, #80]	; (10280 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1022e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   10232:	4d14      	ldr	r5, [pc, #80]	; (10284 <radio_ccm_rx_pkt_set+0x64>)
   10234:	2902      	cmp	r1, #2
   10236:	bf0c      	ite	eq
   10238:	4629      	moveq	r1, r5
   1023a:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1023c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   10240:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   10244:	4810      	ldr	r0, [pc, #64]	; (10288 <radio_ccm_rx_pkt_set+0x68>)
   10246:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1024a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1024e:	4a0f      	ldr	r2, [pc, #60]	; (1028c <radio_ccm_rx_pkt_set+0x6c>)
   10250:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   10254:	490e      	ldr	r1, [pc, #56]	; (10290 <radio_ccm_rx_pkt_set+0x70>)
   10256:	4a0f      	ldr	r2, [pc, #60]	; (10294 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   10258:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1025c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   10260:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   10264:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   10268:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   1026c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   10270:	2140      	movs	r1, #64	; 0x40
   10272:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   10276:	2201      	movs	r2, #1
   10278:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1027a:	bd70      	pop	{r4, r5, r6, pc}
   1027c:	4000f000 	.word	0x4000f000
   10280:	01000001 	.word	0x01000001
   10284:	01010001 	.word	0x01010001
   10288:	20001350 	.word	0x20001350
   1028c:	20001240 	.word	0x20001240
   10290:	40001104 	.word	0x40001104
   10294:	4001f000 	.word	0x4001f000

00010298 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   10298:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1029a:	4b0e      	ldr	r3, [pc, #56]	; (102d4 <radio_ccm_tx_pkt_set+0x3c>)
   1029c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1029e:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   102a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   102a4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   102a8:	4c0b      	ldr	r4, [pc, #44]	; (102d8 <radio_ccm_tx_pkt_set+0x40>)
   102aa:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   102ae:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   102b2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   102b6:	4809      	ldr	r0, [pc, #36]	; (102dc <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   102b8:	4909      	ldr	r1, [pc, #36]	; (102e0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   102ba:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   102be:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   102c2:	2101      	movs	r1, #1
   102c4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   102c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   102cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   102d0:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   102d2:	bd10      	pop	{r4, pc}
   102d4:	4000f000 	.word	0x4000f000
   102d8:	01010000 	.word	0x01010000
   102dc:	20001350 	.word	0x20001350
   102e0:	20001240 	.word	0x20001240

000102e4 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   102e4:	4b0c      	ldr	r3, [pc, #48]	; (10318 <radio_ccm_is_done+0x34>)
   102e6:	2202      	movs	r2, #2
   102e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   102ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   102f0:	b16a      	cbz	r2, 1030e <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   102f2:	2202      	movs	r2, #2
   102f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   102f8:	4a08      	ldr	r2, [pc, #32]	; (1031c <radio_ccm_is_done+0x38>)
   102fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   102fe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   10302:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   10306:	fab0 f080 	clz	r0, r0
   1030a:	0940      	lsrs	r0, r0, #5
   1030c:	4770      	bx	lr
		__WFE();
   1030e:	bf20      	wfe
		__SEV();
   10310:	bf40      	sev
		__WFE();
   10312:	bf20      	wfe
   10314:	e7ea      	b.n	102ec <radio_ccm_is_done+0x8>
   10316:	bf00      	nop
   10318:	4000f000 	.word	0x4000f000
   1031c:	e000e100 	.word	0xe000e100

00010320 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   10320:	4b03      	ldr	r3, [pc, #12]	; (10330 <radio_ccm_mic_is_valid+0x10>)
   10322:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   10326:	3000      	adds	r0, #0
   10328:	bf18      	it	ne
   1032a:	2001      	movne	r0, #1
   1032c:	4770      	bx	lr
   1032e:	bf00      	nop
   10330:	4000f000 	.word	0x4000f000

00010334 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   10334:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   10336:	4c13      	ldr	r4, [pc, #76]	; (10384 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   10338:	4d13      	ldr	r5, [pc, #76]	; (10388 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1033a:	2303      	movs	r3, #3
   1033c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   10340:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   10344:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   10348:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   1034c:	3b01      	subs	r3, #1
   1034e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   10352:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   10354:	4b0d      	ldr	r3, [pc, #52]	; (1038c <radio_ar_configure+0x58>)
   10356:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   1035a:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   1035c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   10360:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   10364:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   10368:	f7ff fe46 	bl	fff8 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   1036c:	4b08      	ldr	r3, [pc, #32]	; (10390 <radio_ar_configure+0x5c>)
   1036e:	4a09      	ldr	r2, [pc, #36]	; (10394 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   10370:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   10374:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   10378:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   1037a:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   1037e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   10382:	bd38      	pop	{r3, r4, r5, pc}
   10384:	4000f000 	.word	0x4000f000
   10388:	40001000 	.word	0x40001000
   1038c:	2000123c 	.word	0x2000123c
   10390:	4001f000 	.word	0x4001f000
   10394:	40001128 	.word	0x40001128

00010398 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   10398:	4b01      	ldr	r3, [pc, #4]	; (103a0 <radio_ar_match_get+0x8>)
   1039a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1039e:	4770      	bx	lr
   103a0:	4000f000 	.word	0x4000f000

000103a4 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   103a4:	4a04      	ldr	r2, [pc, #16]	; (103b8 <radio_ar_status_reset+0x14>)
   103a6:	2300      	movs	r3, #0
   103a8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   103ac:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   103b0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   103b4:	4770      	bx	lr
   103b6:	bf00      	nop
   103b8:	40001000 	.word	0x40001000

000103bc <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   103bc:	4b08      	ldr	r3, [pc, #32]	; (103e0 <radio_ar_has_match+0x24>)
   103be:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   103c2:	b160      	cbz	r0, 103de <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   103c4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   103c8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   103cc:	b138      	cbz	r0, 103de <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   103ce:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   103d2:	b120      	cbz	r0, 103de <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   103d4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   103d8:	fab0 f080 	clz	r0, r0
   103dc:	0940      	lsrs	r0, r0, #5
}
   103de:	4770      	bx	lr
   103e0:	40001000 	.word	0x40001000

000103e4 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   103e4:	2901      	cmp	r1, #1
   103e6:	d005      	beq.n	103f4 <mayfly_enable_cb+0x10>
   103e8:	4040      	eors	r0, r0
   103ea:	f380 8811 	msr	BASEPRI, r0
   103ee:	f04f 0004 	mov.w	r0, #4
   103f2:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   103f4:	2018      	movs	r0, #24
	if (enable) {
   103f6:	b10a      	cbz	r2, 103fc <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
   103f8:	f7f1 ba2e 	b.w	1858 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
   103fc:	f7f1 ba3c 	b.w	1878 <_arch_irq_disable>

00010400 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   10400:	b139      	cbz	r1, 10412 <mayfly_is_enabled+0x12>
   10402:	2901      	cmp	r1, #1
   10404:	d008      	beq.n	10418 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   10406:	4040      	eors	r0, r0
   10408:	f380 8811 	msr	BASEPRI, r0
   1040c:	f04f 0004 	mov.w	r0, #4
   10410:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   10412:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
   10414:	f7f1 ba44 	b.w	18a0 <_arch_irq_is_enabled>
   10418:	2018      	movs	r0, #24
   1041a:	e7fb      	b.n	10414 <mayfly_is_enabled+0x14>

0001041c <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1041c:	4288      	cmp	r0, r1
   1041e:	d00a      	beq.n	10436 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   10420:	b918      	cbnz	r0, 1042a <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   10422:	1e4b      	subs	r3, r1, #1
   10424:	4258      	negs	r0, r3
   10426:	4158      	adcs	r0, r3
   10428:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1042a:	2801      	cmp	r0, #1
   1042c:	d105      	bne.n	1043a <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1042e:	fab1 f081 	clz	r0, r1
   10432:	0940      	lsrs	r0, r0, #5
   10434:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   10436:	2001      	movs	r0, #1
   10438:	4770      	bx	lr
   1043a:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   1043c:	4770      	bx	lr
	...

00010440 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   10440:	4b08      	ldr	r3, [pc, #32]	; (10464 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
   10442:	b139      	cbz	r1, 10454 <mayfly_pend+0x14>
   10444:	2901      	cmp	r1, #1
   10446:	d00a      	beq.n	1045e <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   10448:	4040      	eors	r0, r0
   1044a:	f380 8811 	msr	BASEPRI, r0
   1044e:	f04f 0004 	mov.w	r0, #4
   10452:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10454:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10458:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1045c:	4770      	bx	lr
   1045e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10462:	e7f9      	b.n	10458 <mayfly_pend+0x18>
   10464:	e000e100 	.word	0xe000e100

00010468 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   10468:	2803      	cmp	r0, #3
   1046a:	d905      	bls.n	10478 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1046c:	4040      	eors	r0, r0
   1046e:	f380 8811 	msr	BASEPRI, r0
   10472:	f04f 0004 	mov.w	r0, #4
   10476:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   10478:	4b02      	ldr	r3, [pc, #8]	; (10484 <hal_ticker_instance0_caller_id_get+0x1c>)
   1047a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1047c:	2800      	cmp	r0, #0
   1047e:	d0f5      	beq.n	1046c <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
   10480:	4770      	bx	lr
   10482:	bf00      	nop
   10484:	000129ae 	.word	0x000129ae

00010488 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   10488:	3802      	subs	r0, #2
{
   1048a:	b410      	push	{r4}
   1048c:	461c      	mov	r4, r3
	switch (caller_id) {
   1048e:	2803      	cmp	r0, #3
   10490:	d816      	bhi.n	104c0 <hal_ticker_instance0_sched+0x38>
   10492:	e8df f000 	tbb	[pc, r0]
   10496:	0b02      	.short	0x0b02
   10498:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1049a:	2903      	cmp	r1, #3
   1049c:	d110      	bne.n	104c0 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1049e:	4b13      	ldr	r3, [pc, #76]	; (104ec <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   104a0:	2100      	movs	r1, #0
			m.param = instance;
   104a2:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   104a4:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   104a6:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   104a8:	f7f5 bc12 	b.w	5cd0 <mayfly_enqueue>
		switch (callee_id) {
   104ac:	2904      	cmp	r1, #4
   104ae:	d107      	bne.n	104c0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   104b0:	4b0f      	ldr	r3, [pc, #60]	; (104f0 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   104b2:	2101      	movs	r1, #1
			m.param = instance;
   104b4:	609c      	str	r4, [r3, #8]
   104b6:	e7f5      	b.n	104a4 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   104b8:	2903      	cmp	r1, #3
   104ba:	d007      	beq.n	104cc <hal_ticker_instance0_sched+0x44>
   104bc:	2904      	cmp	r1, #4
   104be:	d00a      	beq.n	104d6 <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
   104c0:	4040      	eors	r0, r0
   104c2:	f380 8811 	msr	BASEPRI, r0
   104c6:	f04f 0004 	mov.w	r0, #4
   104ca:	df02      	svc	2
			m.param = instance;
   104cc:	4b09      	ldr	r3, [pc, #36]	; (104f4 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   104ce:	2100      	movs	r1, #0
			m.param = instance;
   104d0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   104d2:	2001      	movs	r0, #1
   104d4:	e7e7      	b.n	104a6 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   104d6:	4b08      	ldr	r3, [pc, #32]	; (104f8 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   104d8:	2101      	movs	r1, #1
			m.param = instance;
   104da:	609c      	str	r4, [r3, #8]
   104dc:	e7f9      	b.n	104d2 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   104de:	2904      	cmp	r1, #4
   104e0:	d1ee      	bne.n	104c0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   104e2:	4b06      	ldr	r3, [pc, #24]	; (104fc <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   104e4:	2101      	movs	r1, #1
			m.param = instance;
   104e6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   104e8:	2003      	movs	r0, #3
   104ea:	e7dc      	b.n	104a6 <hal_ticker_instance0_sched+0x1e>
   104ec:	20003830 	.word	0x20003830
   104f0:	20003840 	.word	0x20003840
   104f4:	20003850 	.word	0x20003850
   104f8:	20003860 	.word	0x20003860
   104fc:	20003870 	.word	0x20003870

00010500 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   10500:	4601      	mov	r1, r0
   10502:	2000      	movs	r0, #0
   10504:	f7ff bade 	b.w	fac4 <cntr_cmp_set>

00010508 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   10508:	4770      	bx	lr
	...

0001050c <net_buf_pool_get>:
}
   1050c:	4b01      	ldr	r3, [pc, #4]	; (10514 <net_buf_pool_get+0x8>)
   1050e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   10512:	4770      	bx	lr
   10514:	20003944 	.word	0x20003944

00010518 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10518:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1051a:	4b04      	ldr	r3, [pc, #16]	; (1052c <net_buf_id+0x14>)
   1051c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   10520:	69db      	ldr	r3, [r3, #28]
   10522:	1ac0      	subs	r0, r0, r3
}
   10524:	4b02      	ldr	r3, [pc, #8]	; (10530 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   10526:	10c0      	asrs	r0, r0, #3
}
   10528:	4358      	muls	r0, r3
   1052a:	4770      	bx	lr
   1052c:	20003944 	.word	0x20003944
   10530:	aaaaaaab 	.word	0xaaaaaaab

00010534 <fixed_data_alloc>:
{
   10534:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10536:	4b09      	ldr	r3, [pc, #36]	; (1055c <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   10538:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1053a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   1053e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10540:	699b      	ldr	r3, [r3, #24]
   10542:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   10544:	6823      	ldr	r3, [r4, #0]
   10546:	429a      	cmp	r2, r3
   10548:	bf94      	ite	ls
   1054a:	600a      	strls	r2, [r1, #0]
   1054c:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1054e:	f7ff ffe3 	bl	10518 <net_buf_id>
   10552:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   10556:	fb02 3000 	mla	r0, r2, r0, r3
   1055a:	bd10      	pop	{r4, pc}
   1055c:	20003944 	.word	0x20003944

00010560 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   10560:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10564:	4605      	mov	r5, r0
   10566:	9101      	str	r1, [sp, #4]
   10568:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1056a:	f001 f961 	bl	11830 <_impl_k_uptime_get_32>
   1056e:	4607      	mov	r7, r0
	__asm__ volatile(
   10570:	f04f 0320 	mov.w	r3, #32
   10574:	f3ef 8811 	mrs	r8, BASEPRI
   10578:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1057c:	8a6b      	ldrh	r3, [r5, #18]
   1057e:	2b00      	cmp	r3, #0
   10580:	d03d      	beq.n	105fe <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   10582:	8a2a      	ldrh	r2, [r5, #16]
   10584:	429a      	cmp	r2, r3
   10586:	d92a      	bls.n	105de <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   10588:	2100      	movs	r1, #0
   1058a:	4628      	mov	r0, r5
   1058c:	f000 fe6a 	bl	11264 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   10590:	b328      	cbz	r0, 105de <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   10592:	f388 8811 	msr	BASEPRI, r8
   10596:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   10598:	9b01      	ldr	r3, [sp, #4]
   1059a:	2b00      	cmp	r3, #0
   1059c:	d03c      	beq.n	10618 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   1059e:	1c73      	adds	r3, r6, #1
   105a0:	2b01      	cmp	r3, #1
   105a2:	d906      	bls.n	105b2 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   105a4:	f001 f944 	bl	11830 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   105a8:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   105aa:	42b0      	cmp	r0, r6
   105ac:	bf94      	ite	ls
   105ae:	1a36      	subls	r6, r6, r0
   105b0:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   105b2:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   105b4:	4f1e      	ldr	r7, [pc, #120]	; (10630 <net_buf_alloc_len+0xd0>)
   105b6:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   105ba:	4632      	mov	r2, r6
   105bc:	699b      	ldr	r3, [r3, #24]
   105be:	681b      	ldr	r3, [r3, #0]
   105c0:	a901      	add	r1, sp, #4
   105c2:	681b      	ldr	r3, [r3, #0]
   105c4:	4620      	mov	r0, r4
   105c6:	4798      	blx	r3
   105c8:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   105ca:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   105cc:	bb28      	cbnz	r0, 1061a <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   105ce:	79a0      	ldrb	r0, [r4, #6]
   105d0:	4621      	mov	r1, r4
   105d2:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   105d6:	f000 fe26 	bl	11226 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   105da:	462c      	mov	r4, r5
   105dc:	e018      	b.n	10610 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   105de:	8a68      	ldrh	r0, [r5, #18]
   105e0:	1e43      	subs	r3, r0, #1
   105e2:	826b      	strh	r3, [r5, #18]
   105e4:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   105e8:	8a2c      	ldrh	r4, [r5, #16]
   105ea:	1a24      	subs	r4, r4, r0
   105ec:	69e8      	ldr	r0, [r5, #28]
   105ee:	2318      	movs	r3, #24
   105f0:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   105f4:	4b0e      	ldr	r3, [pc, #56]	; (10630 <net_buf_alloc_len+0xd0>)
   105f6:	1aed      	subs	r5, r5, r3
   105f8:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   105fa:	71a5      	strb	r5, [r4, #6]
		goto success;
   105fc:	e7cc      	b.n	10598 <net_buf_alloc_len+0x38>
   105fe:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   10602:	4631      	mov	r1, r6
   10604:	4628      	mov	r0, r5
   10606:	f000 fe2d 	bl	11264 <_impl_k_queue_get>
		return NULL;
   1060a:	4604      	mov	r4, r0
	if (!buf) {
   1060c:	2800      	cmp	r0, #0
   1060e:	d1c3      	bne.n	10598 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   10610:	4620      	mov	r0, r4
   10612:	b002      	add	sp, #8
   10614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   10618:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   1061a:	2301      	movs	r3, #1
   1061c:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1061e:	2300      	movs	r3, #0
	buf->frags = NULL;
   10620:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   10622:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   10624:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   10626:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   10628:	6923      	ldr	r3, [r4, #16]
   1062a:	81e2      	strh	r2, [r4, #14]
   1062c:	60a3      	str	r3, [r4, #8]
	return buf;
   1062e:	e7ef      	b.n	10610 <net_buf_alloc_len+0xb0>
   10630:	20003944 	.word	0x20003944

00010634 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   10634:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   10636:	685b      	ldr	r3, [r3, #4]
   10638:	460a      	mov	r2, r1
   1063a:	6819      	ldr	r1, [r3, #0]
   1063c:	f7ff bf90 	b.w	10560 <net_buf_alloc_len>

00010640 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   10640:	b570      	push	{r4, r5, r6, lr}
   10642:	4606      	mov	r6, r0
   10644:	f000 fe0e 	bl	11264 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   10648:	4605      	mov	r5, r0
   1064a:	b128      	cbz	r0, 10658 <net_buf_get+0x18>
   1064c:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1064e:	7963      	ldrb	r3, [r4, #5]
   10650:	f013 0301 	ands.w	r3, r3, #1
   10654:	d102      	bne.n	1065c <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   10656:	6023      	str	r3, [r4, #0]

	return buf;
}
   10658:	4628      	mov	r0, r5
   1065a:	bd70      	pop	{r4, r5, r6, pc}
   1065c:	2100      	movs	r1, #0
   1065e:	4630      	mov	r0, r6
   10660:	f000 fe00 	bl	11264 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   10664:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   10666:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   10668:	f023 0301 	bic.w	r3, r3, #1
   1066c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1066e:	4604      	mov	r4, r0
   10670:	e7ed      	b.n	1064e <net_buf_get+0xe>

00010672 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   10672:	6883      	ldr	r3, [r0, #8]
   10674:	4419      	add	r1, r3
   10676:	6001      	str	r1, [r0, #0]
   10678:	4770      	bx	lr

0001067a <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1067a:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1067c:	460a      	mov	r2, r1
   1067e:	6814      	ldr	r4, [r2, #0]
   10680:	b914      	cbnz	r4, 10688 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   10682:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   10684:	f000 bdd4 	b.w	11230 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   10688:	7953      	ldrb	r3, [r2, #5]
   1068a:	f043 0301 	orr.w	r3, r3, #1
   1068e:	7153      	strb	r3, [r2, #5]
   10690:	4622      	mov	r2, r4
   10692:	e7f4      	b.n	1067e <net_buf_put+0x4>

00010694 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   10694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10696:	4d15      	ldr	r5, [pc, #84]	; (106ec <net_buf_unref+0x58>)
   10698:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1069a:	2600      	movs	r6, #0
	while (buf) {
   1069c:	b904      	cbnz	r4, 106a0 <net_buf_unref+0xc>
   1069e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   106a0:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   106a2:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   106a4:	3b01      	subs	r3, #1
   106a6:	b2db      	uxtb	r3, r3
   106a8:	7123      	strb	r3, [r4, #4]
   106aa:	2b00      	cmp	r3, #0
   106ac:	d1f7      	bne.n	1069e <net_buf_unref+0xa>
		if (buf->__buf) {
   106ae:	6921      	ldr	r1, [r4, #16]
   106b0:	b159      	cbz	r1, 106ca <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   106b2:	7963      	ldrb	r3, [r4, #5]
   106b4:	079b      	lsls	r3, r3, #30
   106b6:	d407      	bmi.n	106c8 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   106b8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   106ba:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   106be:	4620      	mov	r0, r4
   106c0:	699b      	ldr	r3, [r3, #24]
   106c2:	681b      	ldr	r3, [r3, #0]
   106c4:	689b      	ldr	r3, [r3, #8]
   106c6:	4798      	blx	r3
			buf->__buf = NULL;
   106c8:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   106ca:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   106cc:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   106ce:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   106d2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   106d4:	695b      	ldr	r3, [r3, #20]
   106d6:	b11b      	cbz	r3, 106e0 <net_buf_unref+0x4c>
			pool->destroy(buf);
   106d8:	4620      	mov	r0, r4
   106da:	4798      	blx	r3
{
   106dc:	463c      	mov	r4, r7
   106de:	e7dd      	b.n	1069c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   106e0:	4621      	mov	r1, r4
   106e2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   106e6:	f000 fd9e 	bl	11226 <k_queue_prepend>
   106ea:	e7f7      	b.n	106dc <net_buf_unref+0x48>
   106ec:	20003944 	.word	0x20003944

000106f0 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   106f0:	7903      	ldrb	r3, [r0, #4]
   106f2:	3301      	adds	r3, #1
   106f4:	7103      	strb	r3, [r0, #4]
	return buf;
}
   106f6:	4770      	bx	lr

000106f8 <net_buf_simple_add>:
	return buf->data + buf->len;
   106f8:	8883      	ldrh	r3, [r0, #4]
   106fa:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   106fc:	4419      	add	r1, r3
   106fe:	8081      	strh	r1, [r0, #4]
	return tail;
}
   10700:	18d0      	adds	r0, r2, r3
   10702:	4770      	bx	lr

00010704 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   10704:	b430      	push	{r4, r5}
   10706:	8883      	ldrh	r3, [r0, #4]
   10708:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1070a:	189d      	adds	r5, r3, r2
   1070c:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1070e:	18e0      	adds	r0, r4, r3
}
   10710:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   10712:	f7f1 ba73 	b.w	1bfc <memcpy>

00010716 <net_buf_simple_add_u8>:
   10716:	8883      	ldrh	r3, [r0, #4]
   10718:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1071a:	b510      	push	{r4, lr}
	buf->len += len;
   1071c:	1c5c      	adds	r4, r3, #1
   1071e:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   10720:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   10722:	18d0      	adds	r0, r2, r3
   10724:	bd10      	pop	{r4, pc}

00010726 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   10726:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   10728:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1072a:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1072c:	4411      	add	r1, r2
	buf->data -= len;
   1072e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   10730:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   10732:	4618      	mov	r0, r3
   10734:	4770      	bx	lr

00010736 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   10736:	8883      	ldrh	r3, [r0, #4]
   10738:	1a5b      	subs	r3, r3, r1
   1073a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1073c:	6803      	ldr	r3, [r0, #0]
   1073e:	4419      	add	r1, r3
   10740:	6001      	str	r1, [r0, #0]
}
   10742:	4608      	mov	r0, r1
   10744:	4770      	bx	lr

00010746 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   10746:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   10748:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1074a:	2101      	movs	r1, #1
	val = buf->data[0];
   1074c:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1074e:	f7ff fff2 	bl	10736 <net_buf_simple_pull>

	return val;
}
   10752:	4610      	mov	r0, r2
   10754:	bd08      	pop	{r3, pc}

00010756 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   10756:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   10758:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1075a:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1075c:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1075e:	f7ff ffea 	bl	10736 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   10762:	4610      	mov	r0, r2
   10764:	bd08      	pop	{r3, pc}

00010766 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   10766:	6802      	ldr	r2, [r0, #0]
   10768:	6880      	ldr	r0, [r0, #8]
}
   1076a:	1a10      	subs	r0, r2, r0
   1076c:	4770      	bx	lr

0001076e <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   1076e:	6802      	ldr	r2, [r0, #0]
   10770:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   10772:	88c3      	ldrh	r3, [r0, #6]
   10774:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   10776:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   10778:	1a9b      	subs	r3, r3, r2
}
   1077a:	1a18      	subs	r0, r3, r0
   1077c:	4770      	bx	lr

0001077e <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   1077e:	6800      	ldr	r0, [r0, #0]
   10780:	6880      	ldr	r0, [r0, #8]
   10782:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   10784:	b941      	cbnz	r1, 10798 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   10786:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   1078a:	fa21 f202 	lsr.w	r2, r1, r2
   1078e:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   10792:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   10794:	2000      	movs	r0, #0
   10796:	4770      	bx	lr
		*value = gpio->IN;
   10798:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   1079c:	e7f9      	b.n	10792 <gpio_nrf5_read+0x14>

0001079e <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   1079e:	6800      	ldr	r0, [r0, #0]
   107a0:	6880      	ldr	r0, [r0, #8]
   107a2:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   107a4:	b949      	cbnz	r1, 107ba <gpio_nrf5_write+0x1c>
   107a6:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   107a8:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   107aa:	b11b      	cbz	r3, 107b4 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   107ac:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   107b0:	2000      	movs	r0, #0
   107b2:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   107b4:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   107b8:	e7fa      	b.n	107b0 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   107ba:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   107be:	e7f7      	b.n	107b0 <gpio_nrf5_write+0x12>

000107c0 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   107c0:	6883      	ldr	r3, [r0, #8]
   107c2:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   107c4:	b172      	cbz	r2, 107e4 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   107c6:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   107c8:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   107ca:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   107cc:	b902      	cbnz	r2, 107d0 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   107ce:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   107d0:	2000      	movs	r0, #0
   107d2:	4770      	bx	lr
	parent->next = child;
   107d4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   107d6:	6858      	ldr	r0, [r3, #4]
   107d8:	4281      	cmp	r1, r0
	list->tail = node;
   107da:	bf08      	it	eq
   107dc:	605a      	streq	r2, [r3, #4]
   107de:	e00d      	b.n	107fc <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   107e0:	4602      	mov	r2, r0
   107e2:	6800      	ldr	r0, [r0, #0]
   107e4:	2800      	cmp	r0, #0
   107e6:	d0f3      	beq.n	107d0 <gpio_nrf5_manage_callback+0x10>
   107e8:	4281      	cmp	r1, r0
   107ea:	d1f9      	bne.n	107e0 <gpio_nrf5_manage_callback+0x20>
   107ec:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   107ee:	2a00      	cmp	r2, #0
   107f0:	d1f0      	bne.n	107d4 <gpio_nrf5_manage_callback+0x14>
   107f2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   107f4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   107f6:	4291      	cmp	r1, r2
   107f8:	d100      	bne.n	107fc <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   107fa:	6058      	str	r0, [r3, #4]
	parent->next = child;
   107fc:	2300      	movs	r3, #0
   107fe:	600b      	str	r3, [r1, #0]
   10800:	e7e6      	b.n	107d0 <gpio_nrf5_manage_callback+0x10>
	...

00010804 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   10804:	4b0c      	ldr	r3, [pc, #48]	; (10838 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   10806:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   10808:	4d0c      	ldr	r5, [pc, #48]	; (1083c <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   1080a:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1080c:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   1080e:	fa24 f203 	lsr.w	r2, r4, r3
   10812:	07d2      	lsls	r2, r2, #31
   10814:	d508      	bpl.n	10828 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   10816:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1081a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1081e:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   10822:	4282      	cmp	r2, r0
   10824:	d100      	bne.n	10828 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   10826:	b121      	cbz	r1, 10832 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10828:	3301      	adds	r3, #1
   1082a:	2b08      	cmp	r3, #8
   1082c:	d1ef      	bne.n	1080e <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   1082e:	f06f 0312 	mvn.w	r3, #18
}
   10832:	4618      	mov	r0, r3
   10834:	bd30      	pop	{r4, r5, pc}
   10836:	bf00      	nop
   10838:	20001494 	.word	0x20001494
   1083c:	40006000 	.word	0x40006000

00010840 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   10840:	b570      	push	{r4, r5, r6, lr}
   10842:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   10844:	460d      	mov	r5, r1
   10846:	b9c9      	cbnz	r1, 1087c <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   10848:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1084a:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   1084c:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   1084e:	4610      	mov	r0, r2
   10850:	7919      	ldrb	r1, [r3, #4]
   10852:	f7ff ffd7 	bl	10804 <gpiote_find_channel.isra.4>
		if (i < 0) {
   10856:	2800      	cmp	r0, #0
   10858:	db12      	blt.n	10880 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   1085a:	68b2      	ldr	r2, [r6, #8]
   1085c:	2301      	movs	r3, #1
   1085e:	fa03 f404 	lsl.w	r4, r3, r4
   10862:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   10864:	f100 0140 	add.w	r1, r0, #64	; 0x40
   10868:	4a06      	ldr	r2, [pc, #24]	; (10884 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   1086a:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   1086c:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   10870:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   10874:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   10878:	4628      	mov	r0, r5
   1087a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1087c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   10880:	bd70      	pop	{r4, r5, r6, pc}
   10882:	bf00      	nop
   10884:	40006000 	.word	0x40006000

00010888 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   10888:	b570      	push	{r4, r5, r6, lr}
   1088a:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   1088c:	460d      	mov	r5, r1
   1088e:	b9b1      	cbnz	r1, 108be <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   10890:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   10892:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   10894:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   10896:	4610      	mov	r0, r2
   10898:	7919      	ldrb	r1, [r3, #4]
   1089a:	f7ff ffb3 	bl	10804 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1089e:	2800      	cmp	r0, #0
   108a0:	db0f      	blt.n	108c2 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   108a2:	68b2      	ldr	r2, [r6, #8]
   108a4:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   108a6:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   108aa:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   108ae:	4b05      	ldr	r3, [pc, #20]	; (108c4 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   108b0:	ea22 0404 	bic.w	r4, r2, r4
   108b4:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   108b6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   108ba:	4628      	mov	r0, r5
   108bc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   108be:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   108c2:	bd70      	pop	{r4, r5, r6, pc}
   108c4:	40006000 	.word	0x40006000

000108c8 <gpio_nrf5_config>:
{
   108c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   108cc:	6806      	ldr	r6, [r0, #0]
{
   108ce:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   108d0:	68b2      	ldr	r2, [r6, #8]
   108d2:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   108d4:	b119      	cbz	r1, 108de <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   108d6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   108da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   108de:	f403 7240 	and.w	r2, r3, #768	; 0x300
   108e2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   108e6:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   108ea:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   108ee:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   108f2:	d058      	beq.n	109a6 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   108f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   108f8:	bf0c      	ite	eq
   108fa:	2204      	moveq	r2, #4
   108fc:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   108fe:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   10902:	bf08      	it	eq
   10904:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   10906:	f013 0f01 	tst.w	r3, #1
   1090a:	ea4f 0180 	mov.w	r1, r0, lsl #2
   1090e:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 109dc <gpio_nrf5_config+0x114>
   10912:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   10916:	d04f      	beq.n	109b8 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   10918:	2a0c      	cmp	r2, #12
   1091a:	d146      	bne.n	109aa <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   1091c:	2701      	movs	r7, #1
   1091e:	40a7      	lsls	r7, r4
   10920:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   10924:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   10926:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   1092a:	f041 0103 	orr.w	r1, r1, #3
   1092e:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   10930:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   10934:	f013 0002 	ands.w	r0, r3, #2
   10938:	d049      	beq.n	109ce <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   1093a:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   1093c:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   1093e:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   10942:	d5c8      	bpl.n	108d6 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   10944:	065a      	lsls	r2, r3, #25
   10946:	d43d      	bmi.n	109c4 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   10948:	f013 0f04 	tst.w	r3, #4
   1094c:	bf14      	ite	ne
   1094e:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   10952:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   10956:	4e1f      	ldr	r6, [pc, #124]	; (109d4 <gpio_nrf5_config+0x10c>)
   10958:	6837      	ldr	r7, [r6, #0]
   1095a:	4638      	mov	r0, r7
   1095c:	f7ef fc72 	bl	244 <__popcountsi2>
   10960:	2808      	cmp	r0, #8
   10962:	d032      	beq.n	109ca <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   10964:	4641      	mov	r1, r8
   10966:	4620      	mov	r0, r4
   10968:	f7ff ff4c 	bl	10804 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1096c:	2800      	cmp	r0, #0
   1096e:	da08      	bge.n	10982 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   10970:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   10972:	fa93 f0a3 	rbit	r0, r3
   10976:	2b00      	cmp	r3, #0
   10978:	fab0 f080 	clz	r0, r0
   1097c:	bf08      	it	eq
   1097e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   10982:	2301      	movs	r3, #1
   10984:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   10986:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   10988:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   1098a:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   1098e:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   10990:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   10994:	4b10      	ldr	r3, [pc, #64]	; (109d8 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   10996:	f044 0401 	orr.w	r4, r4, #1
   1099a:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   1099c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   109a0:	2000      	movs	r0, #0
   109a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   109a6:	220c      	movs	r2, #12
   109a8:	e7a9      	b.n	108fe <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   109aa:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   109ac:	bf02      	ittt	eq
   109ae:	2701      	moveq	r7, #1
   109b0:	40a7      	lsleq	r7, r4
   109b2:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   109b6:	e7b5      	b.n	10924 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   109b8:	4461      	add	r1, ip
   109ba:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   109be:	430a      	orrs	r2, r1
   109c0:	433a      	orrs	r2, r7
   109c2:	e7b5      	b.n	10930 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   109c4:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   109c8:	e7c5      	b.n	10956 <gpio_nrf5_config+0x8e>
			return -EIO;
   109ca:	f06f 0004 	mvn.w	r0, #4
}
   109ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109d2:	bf00      	nop
   109d4:	20001494 	.word	0x20001494
   109d8:	40006000 	.word	0x40006000
   109dc:	000129c0 	.word	0x000129c0

000109e0 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   109e0:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   109e2:	2200      	movs	r2, #0
   109e4:	2105      	movs	r1, #5
   109e6:	2006      	movs	r0, #6
   109e8:	f7f0 ff68 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   109ec:	2006      	movs	r0, #6
   109ee:	f7f0 ff33 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   109f2:	2000      	movs	r0, #0
   109f4:	bd08      	pop	{r3, pc}
	...

000109f8 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   109f8:	2100      	movs	r1, #0
{
   109fa:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   109fc:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   109fe:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   10a00:	2501      	movs	r5, #1
   10a02:	008b      	lsls	r3, r1, #2
   10a04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10a08:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   10a0c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   10a10:	b140      	cbz	r0, 10a24 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   10a12:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   10a16:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   10a1a:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   10a1e:	fa05 f303 	lsl.w	r3, r5, r3
   10a22:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   10a24:	3101      	adds	r1, #1
   10a26:	2908      	cmp	r1, #8
   10a28:	d1eb      	bne.n	10a02 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   10a2a:	4e08      	ldr	r6, [pc, #32]	; (10a4c <gpio_nrf5_port_isr+0x54>)
   10a2c:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   10a2e:	689d      	ldr	r5, [r3, #8]
   10a30:	681c      	ldr	r4, [r3, #0]
   10a32:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   10a34:	b14c      	cbz	r4, 10a4a <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   10a36:	68a3      	ldr	r3, [r4, #8]
   10a38:	421d      	tst	r5, r3
   10a3a:	d004      	beq.n	10a46 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   10a3c:	6863      	ldr	r3, [r4, #4]
   10a3e:	462a      	mov	r2, r5
   10a40:	4621      	mov	r1, r4
   10a42:	4630      	mov	r0, r6
   10a44:	4798      	blx	r3
	return node->next;
   10a46:	6824      	ldr	r4, [r4, #0]
   10a48:	e7f4      	b.n	10a34 <gpio_nrf5_port_isr+0x3c>
   10a4a:	bd70      	pop	{r4, r5, r6, pc}
   10a4c:	200038ec 	.word	0x200038ec

00010a50 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10a50:	4b03      	ldr	r3, [pc, #12]	; (10a60 <uart_nrfx_err_check+0x10>)
   10a52:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   10a54:	b118      	cbz	r0, 10a5e <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   10a56:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   10a5a:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   10a5e:	4770      	bx	lr
   10a60:	40002124 	.word	0x40002124

00010a64 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10a64:	4b07      	ldr	r3, [pc, #28]	; (10a84 <uart_nrfx_poll_out+0x20>)
   10a66:	2200      	movs	r2, #0
   10a68:	601a      	str	r2, [r3, #0]
{
   10a6a:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10a6c:	681a      	ldr	r2, [r3, #0]
   10a6e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   10a70:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   10a72:	4a05      	ldr	r2, [pc, #20]	; (10a88 <uart_nrfx_poll_out+0x24>)
   10a74:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10a78:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   10a7a:	2a00      	cmp	r2, #0
   10a7c:	d0fc      	beq.n	10a78 <uart_nrfx_poll_out+0x14>
}
   10a7e:	4608      	mov	r0, r1
   10a80:	b002      	add	sp, #8
   10a82:	4770      	bx	lr
   10a84:	4000211c 	.word	0x4000211c
   10a88:	40002000 	.word	0x40002000

00010a8c <uart_nrfx_poll_in>:
   10a8c:	4b08      	ldr	r3, [pc, #32]	; (10ab0 <uart_nrfx_poll_in+0x24>)
   10a8e:	681a      	ldr	r2, [r3, #0]
{
   10a90:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   10a92:	b152      	cbz	r2, 10aaa <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10a94:	2000      	movs	r0, #0
   10a96:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10a98:	681b      	ldr	r3, [r3, #0]
   10a9a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   10a9c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   10a9e:	4b05      	ldr	r3, [pc, #20]	; (10ab4 <uart_nrfx_poll_in+0x28>)
   10aa0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   10aa4:	700b      	strb	r3, [r1, #0]
}
   10aa6:	b002      	add	sp, #8
   10aa8:	4770      	bx	lr
		return -1;
   10aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10aae:	e7fa      	b.n	10aa6 <uart_nrfx_poll_in+0x1a>
   10ab0:	40002108 	.word	0x40002108
   10ab4:	40002000 	.word	0x40002000

00010ab8 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   10ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   10aba:	4819      	ldr	r0, [pc, #100]	; (10b20 <uart_nrfx_init+0x68>)
   10abc:	f000 f98c 	bl	10dd8 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   10ac0:	6843      	ldr	r3, [r0, #4]
   10ac2:	4604      	mov	r4, r0
   10ac4:	681d      	ldr	r5, [r3, #0]
   10ac6:	2206      	movs	r2, #6
   10ac8:	f240 1301 	movw	r3, #257	; 0x101
   10acc:	2100      	movs	r1, #0
   10ace:	47a8      	blx	r5
   10ad0:	6863      	ldr	r3, [r4, #4]
   10ad2:	681d      	ldr	r5, [r3, #0]
   10ad4:	2300      	movs	r3, #0
   10ad6:	4619      	mov	r1, r3
   10ad8:	2208      	movs	r2, #8
   10ada:	4620      	mov	r0, r4
   10adc:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   10ade:	4b11      	ldr	r3, [pc, #68]	; (10b24 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10ae0:	4911      	ldr	r1, [pc, #68]	; (10b28 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   10ae2:	2208      	movs	r2, #8
   10ae4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   10ae8:	2206      	movs	r2, #6
   10aea:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10aee:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10af0:	4a0e      	ldr	r2, [pc, #56]	; (10b2c <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   10af2:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   10af6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   10afa:	2204      	movs	r2, #4
   10afc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10b00:	4a0b      	ldr	r2, [pc, #44]	; (10b30 <uart_nrfx_init+0x78>)
   10b02:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10b04:	6812      	ldr	r2, [r2, #0]
   10b06:	9201      	str	r2, [sp, #4]
    (void)dummy;
   10b08:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10b0a:	4a0a      	ldr	r2, [pc, #40]	; (10b34 <uart_nrfx_init+0x7c>)
   10b0c:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   10b0e:	6812      	ldr	r2, [r2, #0]
   10b10:	9200      	str	r2, [sp, #0]
    (void)dummy;
   10b12:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10b14:	2201      	movs	r2, #1
   10b16:	600a      	str	r2, [r1, #0]
   10b18:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   10b1a:	b003      	add	sp, #12
   10b1c:	bd30      	pop	{r4, r5, pc}
   10b1e:	bf00      	nop
   10b20:	00012a24 	.word	0x00012a24
   10b24:	40002000 	.word	0x40002000
   10b28:	40002008 	.word	0x40002008
   10b2c:	01d7e000 	.word	0x01d7e000
   10b30:	4000211c 	.word	0x4000211c
   10b34:	40002108 	.word	0x40002108

00010b38 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   10b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   10b3c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   10b3e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   10b40:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   10b42:	42a3      	cmp	r3, r4
	d = &rand[octets];
   10b44:	440a      	add	r2, r1
	s = &rng->rand[first];
   10b46:	4406      	add	r6, r0
	if (first <= last) {
   10b48:	d81f      	bhi.n	10b8a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   10b4a:	1ae4      	subs	r4, r4, r3
   10b4c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10b4e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   10b50:	bf3e      	ittt	cc
   10b52:	1a64      	subcc	r4, r4, r1
   10b54:	b2e7      	uxtbcc	r7, r4
   10b56:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   10b58:	4423      	add	r3, r4
		octets -= avail;
   10b5a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   10b5e:	bf28      	it	cs
   10b60:	2700      	movcs	r7, #0
		first += avail;
   10b62:	b2db      	uxtb	r3, r3
		octets -= avail;
   10b64:	b2c9      	uxtb	r1, r1
   10b66:	4434      	add	r4, r6

		while (avail--) {
   10b68:	42a6      	cmp	r6, r4
   10b6a:	d109      	bne.n	10b80 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   10b6c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   10b6e:	7843      	ldrb	r3, [r0, #1]
   10b70:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   10b72:	bf82      	ittt	hi
   10b74:	4b20      	ldrhi	r3, [pc, #128]	; (10bf8 <get+0xc0>)
   10b76:	2201      	movhi	r2, #1
   10b78:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   10b7a:	4608      	mov	r0, r1
   10b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   10b80:	f816 5b01 	ldrb.w	r5, [r6], #1
   10b84:	f802 5d01 	strb.w	r5, [r2, #-1]!
   10b88:	e7ee      	b.n	10b68 <get+0x30>
		avail = rng->count - first;
   10b8a:	7805      	ldrb	r5, [r0, #0]
   10b8c:	1aed      	subs	r5, r5, r3
   10b8e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   10b90:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   10b92:	bf3f      	itttt	cc
   10b94:	1a67      	subcc	r7, r4, r1
   10b96:	19ed      	addcc	r5, r5, r7
   10b98:	b2ef      	uxtbcc	r7, r5
   10b9a:	460d      	movcc	r5, r1
			first += avail;
   10b9c:	bf38      	it	cc
   10b9e:	185b      	addcc	r3, r3, r1
		octets -= avail;
   10ba0:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   10ba4:	bf32      	itee	cc
   10ba6:	b2db      	uxtbcc	r3, r3
   10ba8:	4627      	movcs	r7, r4
			first = 0;
   10baa:	2300      	movcs	r3, #0
		octets -= avail;
   10bac:	b2c9      	uxtb	r1, r1
   10bae:	4696      	mov	lr, r2
   10bb0:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   10bb4:	4566      	cmp	r6, ip
   10bb6:	d119      	bne.n	10bec <get+0xb4>
   10bb8:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   10bba:	2900      	cmp	r1, #0
   10bbc:	d0d6      	beq.n	10b6c <get+0x34>
   10bbe:	2c00      	cmp	r4, #0
   10bc0:	d0d4      	beq.n	10b6c <get+0x34>
			if (octets < last) {
   10bc2:	428c      	cmp	r4, r1
   10bc4:	bf8a      	itet	hi
   10bc6:	460b      	movhi	r3, r1
   10bc8:	4623      	movls	r3, r4
				remaining = last - octets;
   10bca:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   10bcc:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   10bd0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   10bd4:	bf8c      	ite	hi
   10bd6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   10bd8:	2700      	movls	r7, #0
			octets -= last;
   10bda:	b2c9      	uxtb	r1, r1
   10bdc:	18f4      	adds	r4, r6, r3
			while (last--) {
   10bde:	42a6      	cmp	r6, r4
   10be0:	d0c4      	beq.n	10b6c <get+0x34>
				*(--d) = *s++;
   10be2:	f816 5b01 	ldrb.w	r5, [r6], #1
   10be6:	f802 5d01 	strb.w	r5, [r2, #-1]!
   10bea:	e7f8      	b.n	10bde <get+0xa6>
			*(--d) = *s++;
   10bec:	f816 8b01 	ldrb.w	r8, [r6], #1
   10bf0:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   10bf4:	e7de      	b.n	10bb4 <get+0x7c>
   10bf6:	bf00      	nop
   10bf8:	4000d000 	.word	0x4000d000

00010bfc <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   10bfc:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   10bfe:	b1d0      	cbz	r0, 10c36 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   10c00:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   10c02:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   10c04:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   10c06:	1c53      	adds	r3, r2, #1
   10c08:	b2db      	uxtb	r3, r3
		last = 0;
   10c0a:	42ab      	cmp	r3, r5
   10c0c:	bf08      	it	eq
   10c0e:	2300      	moveq	r3, #0
	if (last == rng->first) {
   10c10:	42a3      	cmp	r3, r4
   10c12:	d010      	beq.n	10c36 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   10c14:	b161      	cbz	r1, 10c30 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   10c16:	490a      	ldr	r1, [pc, #40]	; (10c40 <isr+0x44>)
   10c18:	4402      	add	r2, r0
   10c1a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   10c1e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   10c20:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   10c22:	3301      	adds	r3, #1
   10c24:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   10c26:	429d      	cmp	r5, r3
   10c28:	bf08      	it	eq
   10c2a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   10c2c:	42a3      	cmp	r3, r4
   10c2e:	d005      	beq.n	10c3c <isr+0x40>
		return 0;
	}

	return -EBUSY;
   10c30:	f06f 000f 	mvn.w	r0, #15
   10c34:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   10c36:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10c3a:	bd30      	pop	{r4, r5, pc}
		return 0;
   10c3c:	2000      	movs	r0, #0
}
   10c3e:	bd30      	pop	{r4, r5, pc}
   10c40:	4000d000 	.word	0x4000d000

00010c44 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   10c44:	07db      	lsls	r3, r3, #31
{
   10c46:	b570      	push	{r4, r5, r6, lr}
   10c48:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   10c4a:	d507      	bpl.n	10c5c <entropy_nrf5_get_entropy_isr+0x18>
   10c4c:	4613      	mov	r3, r2
   10c4e:	4a0d      	ldr	r2, [pc, #52]	; (10c84 <entropy_nrf5_get_entropy_isr+0x40>)
   10c50:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   10c52:	2500      	movs	r5, #0
	while (len) {
   10c54:	b94b      	cbnz	r3, 10c6a <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   10c56:	6050      	str	r0, [r2, #4]

	return cnt;
   10c58:	4620      	mov	r0, r4
}
   10c5a:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   10c5c:	6880      	ldr	r0, [r0, #8]
   10c5e:	460a      	mov	r2, r1
   10c60:	303c      	adds	r0, #60	; 0x3c
   10c62:	b2e1      	uxtb	r1, r4
   10c64:	f7ff ff68 	bl	10b38 <get>
   10c68:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   10c6a:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   10c6e:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   10c70:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   10c74:	2e00      	cmp	r6, #0
   10c76:	d0fb      	beq.n	10c70 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   10c78:	3b01      	subs	r3, #1
   10c7a:	b29b      	uxth	r3, r3
   10c7c:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   10c80:	54ce      	strb	r6, [r1, r3]
   10c82:	e7e7      	b.n	10c54 <entropy_nrf5_get_entropy_isr+0x10>
   10c84:	4000d000 	.word	0x4000d000

00010c88 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   10c88:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   10c8a:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   10c8c:	2201      	movs	r2, #1
   10c8e:	4611      	mov	r1, r2
   10c90:	4620      	mov	r0, r4
   10c92:	f000 fd7f 	bl	11794 <_impl_k_sem_init>
   10c96:	f104 0018 	add.w	r0, r4, #24
   10c9a:	2201      	movs	r2, #1
   10c9c:	2100      	movs	r1, #0
   10c9e:	f000 fd79 	bl	11794 <_impl_k_sem_init>
	rng->threshold = threshold;
   10ca2:	2304      	movs	r3, #4
   10ca4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   10ca8:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   10caa:	2500      	movs	r5, #0
	rng->threshold = threshold;
   10cac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   10cb0:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   10cb2:	4b11      	ldr	r3, [pc, #68]	; (10cf8 <entropy_nrf5_init+0x70>)
	rng->count = len;
   10cb4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   10cb8:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   10cba:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   10cbe:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   10cc2:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   10cc6:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   10cca:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   10cce:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   10cd2:	f042 0201 	orr.w	r2, r2, #1
   10cd6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   10cda:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   10cdc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   10ce0:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   10ce2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   10ce6:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   10ce8:	462a      	mov	r2, r5
   10cea:	f7f0 fde7 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   10cee:	4630      	mov	r0, r6
   10cf0:	f7f0 fdb2 	bl	1858 <_arch_irq_enable>

	return 0;
}
   10cf4:	4628      	mov	r0, r5
   10cf6:	bd70      	pop	{r4, r5, r6, pc}
   10cf8:	4000d000 	.word	0x4000d000

00010cfc <isr_rand>:
{
   10cfc:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   10cfe:	4b12      	ldr	r3, [pc, #72]	; (10d48 <isr_rand+0x4c>)
   10d00:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10d04:	b1fb      	cbz	r3, 10d46 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   10d06:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   10d08:	2101      	movs	r1, #1
   10d0a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   10d0e:	f7ff ff75 	bl	10bfc <isr>
		if (ret != -EBUSY) {
   10d12:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   10d16:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   10d18:	d00d      	beq.n	10d36 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   10d1a:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   10d1e:	bf14      	ite	ne
   10d20:	2100      	movne	r1, #0
   10d22:	2101      	moveq	r1, #1
   10d24:	f105 0030 	add.w	r0, r5, #48	; 0x30
   10d28:	f7ff ff68 	bl	10bfc <isr>
   10d2c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10d2e:	f105 0018 	add.w	r0, r5, #24
   10d32:	f000 fd38 	bl	117a6 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   10d36:	4b04      	ldr	r3, [pc, #16]	; (10d48 <isr_rand+0x4c>)
   10d38:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   10d3a:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   10d3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   10d40:	bf1c      	itt	ne
   10d42:	2201      	movne	r2, #1
   10d44:	605a      	strne	r2, [r3, #4]
   10d46:	bd38      	pop	{r3, r4, r5, pc}
   10d48:	4000d000 	.word	0x4000d000

00010d4c <entropy_nrf5_get_entropy>:
{
   10d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   10d50:	6885      	ldr	r5, [r0, #8]
{
   10d52:	460f      	mov	r7, r1
   10d54:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   10d56:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   10d5a:	b914      	cbnz	r4, 10d62 <entropy_nrf5_get_entropy+0x16>
}
   10d5c:	4620      	mov	r0, r4
   10d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d62:	2cff      	cmp	r4, #255	; 0xff
   10d64:	4623      	mov	r3, r4
   10d66:	bf28      	it	cs
   10d68:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   10d6a:	1ae4      	subs	r4, r4, r3
   10d6c:	b2de      	uxtb	r6, r3
   10d6e:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   10d70:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   10d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10d78:	4628      	mov	r0, r5
   10d7a:	f000 fd3c 	bl	117f6 <_impl_k_sem_take>
   10d7e:	4631      	mov	r1, r6
   10d80:	463a      	mov	r2, r7
   10d82:	4648      	mov	r0, r9
   10d84:	f7ff fed8 	bl	10b38 <get>
   10d88:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10d8a:	4628      	mov	r0, r5
   10d8c:	f000 fd0b 	bl	117a6 <_impl_k_sem_give>
			if (len8) {
   10d90:	2e00      	cmp	r6, #0
   10d92:	d0e2      	beq.n	10d5a <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   10d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10d98:	4640      	mov	r0, r8
   10d9a:	f000 fd2c 	bl	117f6 <_impl_k_sem_take>
   10d9e:	e7e9      	b.n	10d74 <entropy_nrf5_get_entropy+0x28>

00010da0 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   10da0:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   10da2:	4802      	ldr	r0, [pc, #8]	; (10dac <entropy_nrf_get_entropy_isr+0xc>)
   10da4:	460a      	mov	r2, r1
   10da6:	4619      	mov	r1, r3
   10da8:	f7ff bec6 	b.w	10b38 <get>
   10dac:	200014d4 	.word	0x200014d4

00010db0 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   10db0:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   10db2:	4b08      	ldr	r3, [pc, #32]	; (10dd4 <_sys_device_do_config_level+0x24>)
   10db4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   10db8:	3001      	adds	r0, #1
   10dba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   10dbe:	4620      	mov	r0, r4
   10dc0:	42a8      	cmp	r0, r5
   10dc2:	f104 040c 	add.w	r4, r4, #12
   10dc6:	d300      	bcc.n	10dca <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   10dc8:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   10dca:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   10dce:	685b      	ldr	r3, [r3, #4]
   10dd0:	4798      	blx	r3
   10dd2:	e7f4      	b.n	10dbe <_sys_device_do_config_level+0xe>
   10dd4:	00012a40 	.word	0x00012a40

00010dd8 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   10dd8:	4b10      	ldr	r3, [pc, #64]	; (10e1c <device_get_binding+0x44>)
{
   10dda:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   10ddc:	4c10      	ldr	r4, [pc, #64]	; (10e20 <device_get_binding+0x48>)
{
   10dde:	4605      	mov	r5, r0
   10de0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   10de2:	429c      	cmp	r4, r3
   10de4:	d104      	bne.n	10df0 <device_get_binding+0x18>
   10de6:	4c0e      	ldr	r4, [pc, #56]	; (10e20 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   10de8:	42b4      	cmp	r4, r6
   10dea:	d109      	bne.n	10e00 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   10dec:	2400      	movs	r4, #0
   10dee:	e012      	b.n	10e16 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   10df0:	6862      	ldr	r2, [r4, #4]
   10df2:	b11a      	cbz	r2, 10dfc <device_get_binding+0x24>
   10df4:	6822      	ldr	r2, [r4, #0]
   10df6:	6812      	ldr	r2, [r2, #0]
   10df8:	42aa      	cmp	r2, r5
   10dfa:	d00c      	beq.n	10e16 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   10dfc:	340c      	adds	r4, #12
   10dfe:	e7f0      	b.n	10de2 <device_get_binding+0xa>
		if (!info->driver_api) {
   10e00:	6863      	ldr	r3, [r4, #4]
   10e02:	b90b      	cbnz	r3, 10e08 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   10e04:	340c      	adds	r4, #12
   10e06:	e7ef      	b.n	10de8 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   10e08:	6823      	ldr	r3, [r4, #0]
   10e0a:	4628      	mov	r0, r5
   10e0c:	6819      	ldr	r1, [r3, #0]
   10e0e:	f7f0 fed3 	bl	1bb8 <strcmp>
   10e12:	2800      	cmp	r0, #0
   10e14:	d1f6      	bne.n	10e04 <device_get_binding+0x2c>
}
   10e16:	4620      	mov	r0, r4
   10e18:	bd70      	pop	{r4, r5, r6, pc}
   10e1a:	bf00      	nop
   10e1c:	2000391c 	.word	0x2000391c
   10e20:	2000388c 	.word	0x2000388c

00010e24 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   10e24:	1c43      	adds	r3, r0, #1
   10e26:	d003      	beq.n	10e30 <_sys_power_save_idle_exit+0xc>
   10e28:	4b03      	ldr	r3, [pc, #12]	; (10e38 <_sys_power_save_idle_exit+0x14>)
   10e2a:	681b      	ldr	r3, [r3, #0]
   10e2c:	4298      	cmp	r0, r3
   10e2e:	db01      	blt.n	10e34 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   10e30:	f7f0 bada 	b.w	13e8 <_timer_idle_exit>
   10e34:	4770      	bx	lr
   10e36:	bf00      	nop
   10e38:	20003880 	.word	0x20003880

00010e3c <idle>:
	return list->head == list;
   10e3c:	4d0f      	ldr	r5, [pc, #60]	; (10e7c <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   10e3e:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   10e40:	4f0f      	ldr	r7, [pc, #60]	; (10e80 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e42:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   10e46:	f04f 0220 	mov.w	r2, #32
   10e4a:	f3ef 8311 	mrs	r3, BASEPRI
   10e4e:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   10e52:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e54:	42b3      	cmp	r3, r6
   10e56:	d00a      	beq.n	10e6e <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   10e58:	b14b      	cbz	r3, 10e6e <idle+0x32>
   10e5a:	691c      	ldr	r4, [r3, #16]
   10e5c:	1c63      	adds	r3, r4, #1
   10e5e:	d008      	beq.n	10e72 <idle+0x36>
   10e60:	683b      	ldr	r3, [r7, #0]
   10e62:	42a3      	cmp	r3, r4
   10e64:	dd05      	ble.n	10e72 <idle+0x36>
	_kernel.idle = ticks;
   10e66:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   10e68:	f7f0 fd7e 	bl	1968 <k_cpu_idle>
   10e6c:	e7eb      	b.n	10e46 <idle+0xa>
   10e6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   10e72:	4620      	mov	r0, r4
   10e74:	f7f0 fa9a 	bl	13ac <_timer_idle_enter>
   10e78:	e7f5      	b.n	10e66 <idle+0x2a>
   10e7a:	bf00      	nop
   10e7c:	200016e8 	.word	0x200016e8
   10e80:	20003880 	.word	0x20003880

00010e84 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   10e84:	4802      	ldr	r0, [pc, #8]	; (10e90 <_bss_zero+0xc>)
   10e86:	4a03      	ldr	r2, [pc, #12]	; (10e94 <_bss_zero+0x10>)
   10e88:	2100      	movs	r1, #0
   10e8a:	1a12      	subs	r2, r2, r0
   10e8c:	f7f0 bee2 	b.w	1c54 <memset>
   10e90:	20000000 	.word	0x20000000
   10e94:	200017a8 	.word	0x200017a8

00010e98 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   10e98:	4802      	ldr	r0, [pc, #8]	; (10ea4 <_data_copy+0xc>)
   10e9a:	4a03      	ldr	r2, [pc, #12]	; (10ea8 <_data_copy+0x10>)
   10e9c:	4903      	ldr	r1, [pc, #12]	; (10eac <_data_copy+0x14>)
   10e9e:	1a12      	subs	r2, r2, r0
   10ea0:	f7f0 beac 	b.w	1bfc <memcpy>
   10ea4:	20003438 	.word	0x20003438
   10ea8:	200039c4 	.word	0x200039c4
   10eac:	00012a90 	.word	0x00012a90

00010eb0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   10eb0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10eb2:	2002      	movs	r0, #2
   10eb4:	f7ff ff7c 	bl	10db0 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   10eb8:	4807      	ldr	r0, [pc, #28]	; (10ed8 <bg_thread_main+0x28>)
   10eba:	f7f0 f867 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   10ebe:	2003      	movs	r0, #3
   10ec0:	f7ff ff76 	bl	10db0 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   10ec4:	f000 feaa 	bl	11c1c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   10ec8:	f7ef fbfa 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   10ecc:	4a03      	ldr	r2, [pc, #12]	; (10edc <bg_thread_main+0x2c>)
   10ece:	7a13      	ldrb	r3, [r2, #8]
   10ed0:	f023 0301 	bic.w	r3, r3, #1
   10ed4:	7213      	strb	r3, [r2, #8]
   10ed6:	bd08      	pop	{r3, pc}
   10ed8:	00012a5c 	.word	0x00012a5c
   10edc:	20001558 	.word	0x20001558

00010ee0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   10ee0:	b580      	push	{r7, lr}
   10ee2:	b086      	sub	sp, #24
   10ee4:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   10ee6:	f7f0 fb03 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   10eea:	4b30      	ldr	r3, [pc, #192]	; (10fac <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   10eec:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ef0:	4b2f      	ldr	r3, [pc, #188]	; (10fb0 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   10ef2:	4d30      	ldr	r5, [pc, #192]	; (10fb4 <_Cstart+0xd4>)
   10ef4:	4e30      	ldr	r6, [pc, #192]	; (10fb8 <_Cstart+0xd8>)
   10ef6:	2400      	movs	r4, #0
   10ef8:	22e0      	movs	r2, #224	; 0xe0
   10efa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   10efe:	77dc      	strb	r4, [r3, #31]
   10f00:	761c      	strb	r4, [r3, #24]
   10f02:	765c      	strb	r4, [r3, #25]
   10f04:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   10f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10f08:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   10f0c:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   10f0e:	f7f0 fc9b 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   10f12:	f7f0 fd23 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10f16:	4620      	mov	r0, r4
   10f18:	f7ff ff4a 	bl	10db0 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10f1c:	2001      	movs	r0, #1
   10f1e:	f7ff ff47 	bl	10db0 <_sys_device_do_config_level>
	_sched_init();
   10f22:	f000 fbf9 	bl	11718 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   10f26:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   10f28:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   10f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10f2e:	9304      	str	r3, [sp, #16]
   10f30:	9403      	str	r4, [sp, #12]
   10f32:	9402      	str	r4, [sp, #8]
   10f34:	9401      	str	r4, [sp, #4]
   10f36:	9400      	str	r4, [sp, #0]
   10f38:	4b20      	ldr	r3, [pc, #128]	; (10fbc <_Cstart+0xdc>)
   10f3a:	4921      	ldr	r1, [pc, #132]	; (10fc0 <_Cstart+0xe0>)
   10f3c:	4628      	mov	r0, r5
   10f3e:	f000 fe15 	bl	11b6c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10f42:	7a6b      	ldrb	r3, [r5, #9]
   10f44:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   10f48:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10f4c:	726a      	strb	r2, [r5, #9]
   10f4e:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   10f50:	d102      	bne.n	10f58 <_Cstart+0x78>
   10f52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10f54:	3301      	adds	r3, #1
   10f56:	d024      	beq.n	10fa2 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   10f58:	2301      	movs	r3, #1
   10f5a:	4e1a      	ldr	r6, [pc, #104]	; (10fc4 <_Cstart+0xe4>)
   10f5c:	9304      	str	r3, [sp, #16]
   10f5e:	230f      	movs	r3, #15
   10f60:	9303      	str	r3, [sp, #12]
   10f62:	2300      	movs	r3, #0
   10f64:	9302      	str	r3, [sp, #8]
   10f66:	9301      	str	r3, [sp, #4]
   10f68:	9300      	str	r3, [sp, #0]
   10f6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   10f6e:	4b16      	ldr	r3, [pc, #88]	; (10fc8 <_Cstart+0xe8>)
   10f70:	4916      	ldr	r1, [pc, #88]	; (10fcc <_Cstart+0xec>)
   10f72:	4630      	mov	r0, r6
   10f74:	f000 fdfa 	bl	11b6c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10f78:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   10f7a:	60e6      	str	r6, [r4, #12]
   10f7c:	f023 0304 	bic.w	r3, r3, #4
   10f80:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   10f82:	4b13      	ldr	r3, [pc, #76]	; (10fd0 <_Cstart+0xf0>)
   10f84:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   10f86:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   10f88:	4b12      	ldr	r3, [pc, #72]	; (10fd4 <_Cstart+0xf4>)

	_current = main_thread;
   10f8a:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   10f8c:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   10f90:	4c11      	ldr	r4, [pc, #68]	; (10fd8 <_Cstart+0xf8>)
   10f92:	4a0a      	ldr	r2, [pc, #40]	; (10fbc <_Cstart+0xdc>)
   10f94:	f383 8809 	msr	PSP, r3
   10f98:	2100      	movs	r1, #0
   10f9a:	f381 8811 	msr	BASEPRI, r1
   10f9e:	4610      	mov	r0, r2
   10fa0:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   10fa2:	4628      	mov	r0, r5
   10fa4:	f000 fab4 	bl	11510 <_add_thread_to_ready_q>
   10fa8:	e7d6      	b.n	10f58 <_Cstart+0x78>
   10faa:	bf00      	nop
   10fac:	20003038 	.word	0x20003038
   10fb0:	e000ed00 	.word	0xe000ed00
   10fb4:	20001558 	.word	0x20001558
   10fb8:	200016e8 	.word	0x200016e8
   10fbc:	00010eb1 	.word	0x00010eb1
   10fc0:	200022f8 	.word	0x200022f8
   10fc4:	200014e8 	.word	0x200014e8
   10fc8:	00010e3d 	.word	0x00010e3d
   10fcc:	200026f8 	.word	0x200026f8
   10fd0:	200016fc 	.word	0x200016fc
   10fd4:	200026f8 	.word	0x200026f8
   10fd8:	00000899 	.word	0x00000899

00010fdc <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   10fdc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   10fde:	4c07      	ldr	r4, [pc, #28]	; (10ffc <init_static_pools+0x20>)
   10fe0:	4d07      	ldr	r5, [pc, #28]	; (11000 <init_static_pools+0x24>)
   10fe2:	42ac      	cmp	r4, r5
   10fe4:	d301      	bcc.n	10fea <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   10fe6:	2000      	movs	r0, #0
   10fe8:	bd38      	pop	{r3, r4, r5, pc}
   10fea:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   10fee:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   10ff0:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   10ff2:	4620      	mov	r0, r4
   10ff4:	f7ef fc8b 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   10ff8:	341c      	adds	r4, #28
   10ffa:	e7f2      	b.n	10fe2 <init_static_pools+0x6>
   10ffc:	2000391c 	.word	0x2000391c
   11000:	2000391c 	.word	0x2000391c

00011004 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   11004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   11008:	1e1d      	subs	r5, r3, #0
{
   1100a:	b085      	sub	sp, #20
   1100c:	4607      	mov	r7, r0
   1100e:	460c      	mov	r4, r1
   11010:	4692      	mov	sl, r2
	if (timeout > 0) {
   11012:	dd4c      	ble.n	110ae <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   11014:	f000 fc16 	bl	11844 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   11018:	f105 0309 	add.w	r3, r5, #9
   1101c:	220a      	movs	r2, #10
   1101e:	fbb3 f3f2 	udiv	r3, r3, r2
   11022:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   11026:	4b23      	ldr	r3, [pc, #140]	; (110b4 <k_mem_pool_alloc+0xb0>)
   11028:	4e23      	ldr	r6, [pc, #140]	; (110b8 <k_mem_pool_alloc+0xb4>)
   1102a:	1afb      	subs	r3, r7, r3
   1102c:	109b      	asrs	r3, r3, #2
   1102e:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   11030:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   11032:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   11036:	9400      	str	r4, [sp, #0]
   11038:	ab03      	add	r3, sp, #12
   1103a:	aa02      	add	r2, sp, #8
   1103c:	4651      	mov	r1, sl
   1103e:	4638      	mov	r0, r7
   11040:	f7ef fcb0 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   11044:	f110 0f0b 	cmn.w	r0, #11
   11048:	d10b      	bne.n	11062 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1104a:	9400      	str	r4, [sp, #0]
   1104c:	ab03      	add	r3, sp, #12
   1104e:	aa02      	add	r2, sp, #8
   11050:	4651      	mov	r1, sl
   11052:	4638      	mov	r0, r7
   11054:	f7ef fca6 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   11058:	f110 0f0b 	cmn.w	r0, #11
   1105c:	bf08      	it	eq
   1105e:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   11062:	7963      	ldrb	r3, [r4, #5]
   11064:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   11066:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   11068:	f362 0303 	bfi	r3, r2, #0, #4
   1106c:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   1106e:	6863      	ldr	r3, [r4, #4]
   11070:	9a03      	ldr	r2, [sp, #12]
   11072:	f362 331f 	bfi	r3, r2, #12, #20
   11076:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   11078:	b1b0      	cbz	r0, 110a8 <k_mem_pool_alloc+0xa4>
   1107a:	b1ad      	cbz	r5, 110a8 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   1107c:	f110 0f0c 	cmn.w	r0, #12
   11080:	d112      	bne.n	110a8 <k_mem_pool_alloc+0xa4>
   11082:	f04f 0320 	mov.w	r3, #32
   11086:	f3ef 8011 	mrs	r0, BASEPRI
   1108a:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   1108e:	462a      	mov	r2, r5
   11090:	4659      	mov	r1, fp
   11092:	f000 faeb 	bl	1166c <_pend_current_thread>

		if (timeout != K_FOREVER) {
   11096:	1c6b      	adds	r3, r5, #1
   11098:	d0cd      	beq.n	11036 <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   1109a:	f000 fbd3 	bl	11844 <_tick_get>

			if (timeout < 0) {
   1109e:	ebb8 0500 	subs.w	r5, r8, r0
   110a2:	d5c8      	bpl.n	11036 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   110a4:	f06f 000a 	mvn.w	r0, #10
}
   110a8:	b005      	add	sp, #20
   110aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   110ae:	f04f 0800 	mov.w	r8, #0
   110b2:	e7b8      	b.n	11026 <k_mem_pool_alloc+0x22>
   110b4:	2000391c 	.word	0x2000391c
   110b8:	b6db6db7 	.word	0xb6db6db7

000110bc <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   110bc:	b570      	push	{r4, r5, r6, lr}
   110be:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   110c0:	6802      	ldr	r2, [r0, #0]
   110c2:	7841      	ldrb	r1, [r0, #1]
   110c4:	4e13      	ldr	r6, [pc, #76]	; (11114 <k_mem_pool_free_id+0x58>)
   110c6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   110ca:	00a4      	lsls	r4, r4, #2
   110cc:	0b12      	lsrs	r2, r2, #12
   110ce:	f001 010f 	and.w	r1, r1, #15
   110d2:	1930      	adds	r0, r6, r4
   110d4:	f7ef fd18 	bl	b08 <_sys_mem_pool_block_free>
   110d8:	f04f 0320 	mov.w	r3, #32
   110dc:	f3ef 8511 	mrs	r5, BASEPRI
   110e0:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   110e4:	f104 0014 	add.w	r0, r4, #20
   110e8:	4430      	add	r0, r6
   110ea:	f000 fb05 	bl	116f8 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   110ee:	b140      	cbz	r0, 11102 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   110f0:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   110f4:	2b0d      	cmp	r3, #13
   110f6:	d804      	bhi.n	11102 <k_mem_pool_free_id+0x46>
   110f8:	b133      	cbz	r3, 11108 <k_mem_pool_free_id+0x4c>
   110fa:	4b07      	ldr	r3, [pc, #28]	; (11118 <k_mem_pool_free_id+0x5c>)
   110fc:	685b      	ldr	r3, [r3, #4]
   110fe:	051b      	lsls	r3, r3, #20
   11100:	d402      	bmi.n	11108 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11102:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   11106:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   11108:	4628      	mov	r0, r5
}
   1110a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   1110e:	f000 b9a7 	b.w	11460 <_reschedule>
   11112:	bf00      	nop
   11114:	2000391c 	.word	0x2000391c
   11118:	e000ed00 	.word	0xe000ed00

0001111c <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   1111c:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   1111e:	1d0a      	adds	r2, r1, #4
   11120:	d204      	bcs.n	1112c <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   11122:	2300      	movs	r3, #0
   11124:	4669      	mov	r1, sp
   11126:	f7ff ff6d 	bl	11004 <k_mem_pool_alloc>
   1112a:	b118      	cbz	r0, 11134 <k_mem_pool_malloc+0x18>
		return NULL;
   1112c:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   1112e:	b003      	add	sp, #12
   11130:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   11134:	2204      	movs	r2, #4
   11136:	eb0d 0102 	add.w	r1, sp, r2
   1113a:	9800      	ldr	r0, [sp, #0]
   1113c:	f7f0 fd5e 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   11140:	9800      	ldr	r0, [sp, #0]
   11142:	3004      	adds	r0, #4
   11144:	e7f3      	b.n	1112e <k_mem_pool_malloc+0x12>

00011146 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   11146:	b110      	cbz	r0, 1114e <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   11148:	3804      	subs	r0, #4
   1114a:	f7ff bfb7 	b.w	110bc <k_mem_pool_free_id>
   1114e:	4770      	bx	lr

00011150 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   11150:	4b03      	ldr	r3, [pc, #12]	; (11160 <z_thread_malloc+0x10>)
   11152:	689b      	ldr	r3, [r3, #8]
{
   11154:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   11156:	6e58      	ldr	r0, [r3, #100]	; 0x64
   11158:	b108      	cbz	r0, 1115e <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1115a:	f7ff bfdf 	b.w	1111c <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1115e:	4770      	bx	lr
   11160:	200016e8 	.word	0x200016e8

00011164 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   11164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11166:	4605      	mov	r5, r0
   11168:	460f      	mov	r7, r1
   1116a:	4614      	mov	r4, r2
	__asm__ volatile(
   1116c:	f04f 0220 	mov.w	r2, #32
   11170:	f3ef 8611 	mrs	r6, BASEPRI
   11174:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   11178:	b1a3      	cbz	r3, 111a4 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1117a:	2008      	movs	r0, #8
   1117c:	f7ff ffe8 	bl	11150 <z_thread_malloc>
		if (!anode) {
   11180:	2800      	cmp	r0, #0
   11182:	d034      	beq.n	111ee <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   11184:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   11186:	6044      	str	r4, [r0, #4]
   11188:	6003      	str	r3, [r0, #0]
   1118a:	4604      	mov	r4, r0
   1118c:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   1118e:	b95f      	cbnz	r7, 111a8 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   11190:	682a      	ldr	r2, [r5, #0]
   11192:	f003 0303 	and.w	r3, r3, #3
   11196:	4313      	orrs	r3, r2
   11198:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1119a:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   1119c:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   1119e:	b973      	cbnz	r3, 111be <queue_insert+0x5a>
	list->tail = node;
   111a0:	606c      	str	r4, [r5, #4]
   111a2:	e00c      	b.n	111be <queue_insert+0x5a>
	node->next_and_flags = flags;
   111a4:	6023      	str	r3, [r4, #0]
   111a6:	e7f1      	b.n	1118c <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   111a8:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   111aa:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   111ae:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   111b2:	d114      	bne.n	111de <queue_insert+0x7a>
   111b4:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   111b6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   111b8:	b95a      	cbnz	r2, 111d2 <queue_insert+0x6e>
	list->tail = node;
   111ba:	606c      	str	r4, [r5, #4]
	list->head = node;
   111bc:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   111be:	2104      	movs	r1, #4
   111c0:	f105 0008 	add.w	r0, r5, #8
   111c4:	f000 ffb4 	bl	12130 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   111c8:	4630      	mov	r0, r6
   111ca:	f000 f949 	bl	11460 <_reschedule>
	return 0;
   111ce:	2000      	movs	r0, #0
   111d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   111d2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   111d4:	f003 0303 	and.w	r3, r3, #3
   111d8:	4323      	orrs	r3, r4
   111da:	6013      	str	r3, [r2, #0]
   111dc:	e7e0      	b.n	111a0 <queue_insert+0x3c>
   111de:	4313      	orrs	r3, r2
   111e0:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   111e2:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   111e4:	f002 0203 	and.w	r2, r2, #3
   111e8:	4314      	orrs	r4, r2
   111ea:	603c      	str	r4, [r7, #0]
   111ec:	e7e7      	b.n	111be <queue_insert+0x5a>
			return -ENOMEM;
   111ee:	f06f 000b 	mvn.w	r0, #11
}
   111f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000111f4 <z_queue_node_peek>:
{
   111f4:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   111f6:	4604      	mov	r4, r0
   111f8:	b130      	cbz	r0, 11208 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   111fa:	6802      	ldr	r2, [r0, #0]
   111fc:	0793      	lsls	r3, r2, #30
   111fe:	d003      	beq.n	11208 <z_queue_node_peek+0x14>
		ret = anode->data;
   11200:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   11202:	b109      	cbz	r1, 11208 <z_queue_node_peek+0x14>
			k_free(anode);
   11204:	f7ff ff9f 	bl	11146 <k_free>
}
   11208:	4620      	mov	r0, r4
   1120a:	bd10      	pop	{r4, pc}

0001120c <_impl_k_queue_init>:
	list->head = NULL;
   1120c:	2300      	movs	r3, #0
   1120e:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   11210:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   11212:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   11216:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   11218:	60c3      	str	r3, [r0, #12]
   1121a:	4770      	bx	lr

0001121c <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   1121c:	460a      	mov	r2, r1
   1121e:	2300      	movs	r3, #0
   11220:	6841      	ldr	r1, [r0, #4]
   11222:	f7ff bf9f 	b.w	11164 <queue_insert>

00011226 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   11226:	2300      	movs	r3, #0
   11228:	460a      	mov	r2, r1
   1122a:	4619      	mov	r1, r3
   1122c:	f7ff bf9a 	b.w	11164 <queue_insert>

00011230 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   11230:	b538      	push	{r3, r4, r5, lr}
   11232:	f04f 0320 	mov.w	r3, #32
   11236:	f3ef 8511 	mrs	r5, BASEPRI
   1123a:	f383 8811 	msr	BASEPRI, r3
   1123e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   11240:	b953      	cbnz	r3, 11258 <k_queue_append_list+0x28>
	list->head = node;
   11242:	6001      	str	r1, [r0, #0]
	list->tail = node;
   11244:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   11246:	2104      	movs	r1, #4
   11248:	3008      	adds	r0, #8
   1124a:	f000 ff71 	bl	12130 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   1124e:	4628      	mov	r0, r5
}
   11250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   11254:	f000 b904 	b.w	11460 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11258:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1125a:	f004 0403 	and.w	r4, r4, #3
   1125e:	4321      	orrs	r1, r4
   11260:	6019      	str	r1, [r3, #0]
   11262:	e7ef      	b.n	11244 <k_queue_append_list+0x14>

00011264 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   11264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11268:	4604      	mov	r4, r0
   1126a:	b086      	sub	sp, #24
   1126c:	460d      	mov	r5, r1
   1126e:	f04f 0320 	mov.w	r3, #32
   11272:	f3ef 8711 	mrs	r7, BASEPRI
   11276:	f383 8811 	msr	BASEPRI, r3
   1127a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1127c:	b182      	cbz	r2, 112a0 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1127e:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   11280:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   11282:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   11286:	428a      	cmp	r2, r1
	list->head = node;
   11288:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1128a:	bf08      	it	eq
   1128c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1128e:	2101      	movs	r1, #1
   11290:	4610      	mov	r0, r2
   11292:	f7ff ffaf 	bl	111f4 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11296:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1129a:	b006      	add	sp, #24
   1129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   112a0:	b919      	cbnz	r1, 112aa <_impl_k_queue_get+0x46>
   112a2:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   112a6:	2000      	movs	r0, #0
   112a8:	e7f7      	b.n	1129a <_impl_k_queue_get+0x36>
   112aa:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   112ae:	2104      	movs	r1, #4
   112b0:	4603      	mov	r3, r0
   112b2:	eb0d 0001 	add.w	r0, sp, r1
   112b6:	f000 fea4 	bl	12002 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   112ba:	1c6a      	adds	r2, r5, #1
   112bc:	d002      	beq.n	112c4 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   112be:	f000 fab7 	bl	11830 <_impl_k_uptime_get_32>
   112c2:	4606      	mov	r6, r0
{
   112c4:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   112c6:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   112ca:	1bea      	subs	r2, r5, r7
   112cc:	f36f 1307 	bfc	r3, #4, #4
   112d0:	2101      	movs	r1, #1
   112d2:	a801      	add	r0, sp, #4
   112d4:	f88d 3011 	strb.w	r3, [sp, #17]
   112d8:	f000 fea6 	bl	12028 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   112dc:	b108      	cbz	r0, 112e2 <_impl_k_queue_get+0x7e>
   112de:	300b      	adds	r0, #11
   112e0:	d1e1      	bne.n	112a6 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   112e2:	f04f 0320 	mov.w	r3, #32
   112e6:	f3ef 8811 	mrs	r8, BASEPRI
   112ea:	f383 8811 	msr	BASEPRI, r3
   112ee:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   112f0:	b138      	cbz	r0, 11302 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   112f2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   112f4:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   112f6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   112fa:	4290      	cmp	r0, r2
	list->head = node;
   112fc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   112fe:	bf08      	it	eq
   11300:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   11302:	2101      	movs	r1, #1
   11304:	f7ff ff76 	bl	111f4 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11308:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   1130c:	2800      	cmp	r0, #0
   1130e:	d1c4      	bne.n	1129a <_impl_k_queue_get+0x36>
   11310:	1c6b      	adds	r3, r5, #1
   11312:	d0d8      	beq.n	112c6 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   11314:	f000 fa8c 	bl	11830 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   11318:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1131a:	42bd      	cmp	r5, r7
   1131c:	dad3      	bge.n	112c6 <_impl_k_queue_get+0x62>
   1131e:	e7c2      	b.n	112a6 <_impl_k_queue_get+0x42>

00011320 <sys_dlist_remove>:
	node->prev->next = node->next;
   11320:	e890 000c 	ldmia.w	r0, {r2, r3}
   11324:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11326:	6802      	ldr	r2, [r0, #0]
   11328:	6053      	str	r3, [r2, #4]
   1132a:	4770      	bx	lr

0001132c <_abort_timeout>:
{
   1132c:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1132e:	6900      	ldr	r0, [r0, #16]
{
   11330:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11332:	1c43      	adds	r3, r0, #1
   11334:	d00e      	beq.n	11354 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11336:	4b08      	ldr	r3, [pc, #32]	; (11358 <_abort_timeout+0x2c>)
   11338:	699b      	ldr	r3, [r3, #24]
   1133a:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   1133c:	bf1f      	itttt	ne
   1133e:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11340:	6913      	ldrne	r3, [r2, #16]
   11342:	18c0      	addne	r0, r0, r3
   11344:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   11346:	4608      	mov	r0, r1
   11348:	f7ff ffea 	bl	11320 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   1134c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11350:	610b      	str	r3, [r1, #16]
	return 0;
   11352:	2000      	movs	r0, #0
}
   11354:	bd08      	pop	{r3, pc}
   11356:	bf00      	nop
   11358:	200016e8 	.word	0x200016e8

0001135c <k_spin_lock.isra.11>:
	__asm__ volatile(
   1135c:	f04f 0320 	mov.w	r3, #32
   11360:	f3ef 8011 	mrs	r0, BASEPRI
   11364:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   11368:	4770      	bx	lr
	...

0001136c <update_cache>:
	return list->head == list;
   1136c:	4b0d      	ldr	r3, [pc, #52]	; (113a4 <update_cache+0x38>)
   1136e:	4619      	mov	r1, r3
   11370:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11374:	428a      	cmp	r2, r1
   11376:	d000      	beq.n	1137a <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   11378:	b902      	cbnz	r2, 1137c <update_cache+0x10>
   1137a:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   1137c:	b970      	cbnz	r0, 1139c <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   1137e:	6899      	ldr	r1, [r3, #8]
   11380:	b161      	cbz	r1, 1139c <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   11382:	7a48      	ldrb	r0, [r1, #9]
   11384:	06c0      	lsls	r0, r0, #27
   11386:	d109      	bne.n	1139c <update_cache+0x30>
   11388:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1138a:	3001      	adds	r0, #1
   1138c:	d106      	bne.n	1139c <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   1138e:	8948      	ldrh	r0, [r1, #10]
   11390:	287f      	cmp	r0, #127	; 0x7f
   11392:	d903      	bls.n	1139c <update_cache+0x30>
	return thread == _idle_thread;
   11394:	4804      	ldr	r0, [pc, #16]	; (113a8 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   11396:	6800      	ldr	r0, [r0, #0]
   11398:	4281      	cmp	r1, r0
   1139a:	d101      	bne.n	113a0 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   1139c:	621a      	str	r2, [r3, #32]
   1139e:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   113a0:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   113a2:	4770      	bx	lr
   113a4:	200016e8 	.word	0x200016e8
   113a8:	00012a58 	.word	0x00012a58

000113ac <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   113ac:	f990 000a 	ldrsb.w	r0, [r0, #10]
   113b0:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   113b4:	4298      	cmp	r0, r3
   113b6:	bfac      	ite	ge
   113b8:	2000      	movge	r0, #0
   113ba:	2001      	movlt	r0, #1
   113bc:	4770      	bx	lr
	...

000113c0 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   113c0:	b510      	push	{r4, lr}
   113c2:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   113c4:	f7ff ffca 	bl	1135c <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   113c8:	7a4b      	ldrb	r3, [r1, #9]
   113ca:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   113cc:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   113ce:	d50d      	bpl.n	113ec <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   113d0:	4608      	mov	r0, r1
   113d2:	f7ff ffa5 	bl	11320 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   113d6:	7a4b      	ldrb	r3, [r1, #9]
   113d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   113dc:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   113de:	4b05      	ldr	r3, [pc, #20]	; (113f4 <_remove_thread_from_ready_q+0x34>)
   113e0:	6898      	ldr	r0, [r3, #8]
   113e2:	1a43      	subs	r3, r0, r1
   113e4:	4258      	negs	r0, r3
   113e6:	4158      	adcs	r0, r3
   113e8:	f7ff ffc0 	bl	1136c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   113ec:	f384 8811 	msr	BASEPRI, r4
   113f0:	bd10      	pop	{r4, pc}
   113f2:	bf00      	nop
   113f4:	200016e8 	.word	0x200016e8

000113f8 <_find_first_thread_to_unpend>:
{
   113f8:	b508      	push	{r3, lr}
   113fa:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   113fc:	f7ff ffae 	bl	1135c <k_spin_lock.isra.11>
	return list->head == list;
   11400:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11402:	429a      	cmp	r2, r3
   11404:	bf08      	it	eq
   11406:	2300      	moveq	r3, #0
   11408:	f380 8811 	msr	BASEPRI, r0
}
   1140c:	4618      	mov	r0, r3
   1140e:	bd08      	pop	{r3, pc}

00011410 <_unpend_thread_no_timeout>:
{
   11410:	b510      	push	{r4, lr}
   11412:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   11414:	f7ff ffa2 	bl	1135c <k_spin_lock.isra.11>
   11418:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1141a:	4608      	mov	r0, r1
   1141c:	f7ff ff80 	bl	11320 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11420:	7a4b      	ldrb	r3, [r1, #9]
   11422:	f023 0302 	bic.w	r3, r3, #2
   11426:	724b      	strb	r3, [r1, #9]
   11428:	f384 8811 	msr	BASEPRI, r4
   1142c:	bd10      	pop	{r4, pc}

0001142e <_unpend_first_thread>:
{
   1142e:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   11430:	2100      	movs	r1, #0
   11432:	f7ff ffe1 	bl	113f8 <_find_first_thread_to_unpend>

	if (thread) {
   11436:	4604      	mov	r4, r0
   11438:	b128      	cbz	r0, 11446 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   1143a:	f7ff ffe9 	bl	11410 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   1143e:	f104 0014 	add.w	r0, r4, #20
   11442:	f7ff ff73 	bl	1132c <_abort_timeout>
}
   11446:	4620      	mov	r0, r4
   11448:	bd10      	pop	{r4, pc}

0001144a <_unpend_thread>:
{
   1144a:	b510      	push	{r4, lr}
   1144c:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   1144e:	f7ff ffdf 	bl	11410 <_unpend_thread_no_timeout>
   11452:	f104 0014 	add.w	r0, r4, #20
}
   11456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1145a:	f7ff bf67 	b.w	1132c <_abort_timeout>
	...

00011460 <_reschedule>:
   11460:	f3ef 8305 	mrs	r3, IPSR
   11464:	2b0d      	cmp	r3, #13
   11466:	d809      	bhi.n	1147c <_reschedule+0x1c>
   11468:	b11b      	cbz	r3, 11472 <_reschedule+0x12>
   1146a:	4b09      	ldr	r3, [pc, #36]	; (11490 <_reschedule+0x30>)
   1146c:	685b      	ldr	r3, [r3, #4]
   1146e:	051b      	lsls	r3, r3, #20
   11470:	d504      	bpl.n	1147c <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   11472:	4b08      	ldr	r3, [pc, #32]	; (11494 <_reschedule+0x34>)
   11474:	689a      	ldr	r2, [r3, #8]
   11476:	6a1b      	ldr	r3, [r3, #32]
   11478:	429a      	cmp	r2, r3
   1147a:	d103      	bne.n	11484 <_reschedule+0x24>
   1147c:	f380 8811 	msr	BASEPRI, r0
}
   11480:	2000      	movs	r0, #0
   11482:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   11484:	4b04      	ldr	r3, [pc, #16]	; (11498 <_reschedule+0x38>)
   11486:	2200      	movs	r2, #0
   11488:	601a      	str	r2, [r3, #0]
   1148a:	f7f0 b83d 	b.w	1508 <__swap>
   1148e:	bf00      	nop
   11490:	e000ed00 	.word	0xe000ed00
   11494:	200016e8 	.word	0x200016e8
   11498:	2000171c 	.word	0x2000171c

0001149c <k_sched_unlock>:
{
   1149c:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   1149e:	f7ff ff5d 	bl	1135c <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   114a2:	4b0a      	ldr	r3, [pc, #40]	; (114cc <k_sched_unlock+0x30>)
   114a4:	689a      	ldr	r2, [r3, #8]
   114a6:	7ad3      	ldrb	r3, [r2, #11]
   114a8:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   114aa:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   114ac:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   114ae:	2001      	movs	r0, #1
   114b0:	f7ff ff5c 	bl	1136c <update_cache>
   114b4:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   114b8:	f04f 0320 	mov.w	r3, #32
   114bc:	f3ef 8011 	mrs	r0, BASEPRI
   114c0:	f383 8811 	msr	BASEPRI, r3
}
   114c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   114c8:	f7ff bfca 	b.w	11460 <_reschedule>
   114cc:	200016e8 	.word	0x200016e8

000114d0 <_priq_dumb_add>:
{
   114d0:	b510      	push	{r4, lr}
	return list->head == list;
   114d2:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   114d4:	4298      	cmp	r0, r3
   114d6:	bf08      	it	eq
   114d8:	2300      	moveq	r3, #0
   114da:	b193      	cbz	r3, 11502 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   114dc:	f991 400a 	ldrsb.w	r4, [r1, #10]
   114e0:	f993 200a 	ldrsb.w	r2, [r3, #10]
   114e4:	4294      	cmp	r4, r2
   114e6:	da06      	bge.n	114f6 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   114e8:	685a      	ldr	r2, [r3, #4]
   114ea:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   114ec:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   114ee:	685a      	ldr	r2, [r3, #4]
   114f0:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   114f2:	6059      	str	r1, [r3, #4]
   114f4:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   114f6:	6842      	ldr	r2, [r0, #4]
   114f8:	4293      	cmp	r3, r2
   114fa:	d002      	beq.n	11502 <_priq_dumb_add+0x32>
   114fc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   114fe:	2b00      	cmp	r3, #0
   11500:	d1eb      	bne.n	114da <_priq_dumb_add+0xa>
	node->next = list;
   11502:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   11504:	6843      	ldr	r3, [r0, #4]
   11506:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   11508:	6843      	ldr	r3, [r0, #4]
   1150a:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1150c:	6041      	str	r1, [r0, #4]
   1150e:	bd10      	pop	{r4, pc}

00011510 <_add_thread_to_ready_q>:
{
   11510:	b538      	push	{r3, r4, r5, lr}
   11512:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   11514:	f7ff ff22 	bl	1135c <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   11518:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   1151a:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1151c:	4806      	ldr	r0, [pc, #24]	; (11538 <_add_thread_to_ready_q+0x28>)
   1151e:	f7ff ffd7 	bl	114d0 <_priq_dumb_add>
	thread->base.thread_state |= states;
   11522:	7a63      	ldrb	r3, [r4, #9]
   11524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11528:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1152a:	2000      	movs	r0, #0
   1152c:	f7ff ff1e 	bl	1136c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11530:	f385 8811 	msr	BASEPRI, r5
   11534:	bd38      	pop	{r3, r4, r5, pc}
   11536:	bf00      	nop
   11538:	2000170c 	.word	0x2000170c

0001153c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   1153c:	7a42      	ldrb	r2, [r0, #9]
   1153e:	06d2      	lsls	r2, r2, #27
   11540:	d104      	bne.n	1154c <_ready_thread+0x10>
   11542:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11544:	3301      	adds	r3, #1
   11546:	d101      	bne.n	1154c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   11548:	f7ff bfe2 	b.w	11510 <_add_thread_to_ready_q>
   1154c:	4770      	bx	lr
	...

00011550 <_add_timeout>:
{
   11550:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11552:	610b      	str	r3, [r1, #16]
{
   11554:	4604      	mov	r4, r0
   11556:	461d      	mov	r5, r3
	timeout->thread = thread;
   11558:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1155a:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   1155c:	bb03      	cbnz	r3, 115a0 <_add_timeout+0x50>
	__asm__ volatile(
   1155e:	f04f 0320 	mov.w	r3, #32
   11562:	f3ef 8611 	mrs	r6, BASEPRI
   11566:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1156a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1156e:	610b      	str	r3, [r1, #16]
	if (thread) {
   11570:	b170      	cbz	r0, 11590 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   11572:	68cb      	ldr	r3, [r1, #12]
   11574:	b113      	cbz	r3, 1157c <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   11576:	f7ff ff4b 	bl	11410 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1157a:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1157c:	7a63      	ldrb	r3, [r4, #9]
   1157e:	f023 0304 	bic.w	r3, r3, #4
   11582:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   11584:	4620      	mov	r0, r4
   11586:	f7ff ffd9 	bl	1153c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1158a:	f386 8811 	msr	BASEPRI, r6
   1158e:	bd70      	pop	{r4, r5, r6, pc}
   11590:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   11594:	694b      	ldr	r3, [r1, #20]
   11596:	b32b      	cbz	r3, 115e4 <_add_timeout+0x94>
			timeout->func(timeout);
   11598:	4608      	mov	r0, r1
}
   1159a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   1159e:	4718      	bx	r3
	return list->head == list;
   115a0:	4a11      	ldr	r2, [pc, #68]	; (115e8 <_add_timeout+0x98>)
   115a2:	4610      	mov	r0, r2
   115a4:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   115a8:	4283      	cmp	r3, r0
   115aa:	d10c      	bne.n	115c6 <_add_timeout+0x76>
	node->next = list;
   115ac:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   115ae:	6993      	ldr	r3, [r2, #24]
   115b0:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   115b2:	6993      	ldr	r3, [r2, #24]
   115b4:	6019      	str	r1, [r3, #0]
	list->tail = node;
   115b6:	6191      	str	r1, [r2, #24]
   115b8:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   115ba:	1b64      	subs	r4, r4, r5
   115bc:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   115be:	6994      	ldr	r4, [r2, #24]
   115c0:	42a3      	cmp	r3, r4
   115c2:	d0f3      	beq.n	115ac <_add_timeout+0x5c>
   115c4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   115c6:	2b00      	cmp	r3, #0
   115c8:	d0f0      	beq.n	115ac <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   115ca:	690c      	ldr	r4, [r1, #16]
   115cc:	691d      	ldr	r5, [r3, #16]
   115ce:	42ac      	cmp	r4, r5
   115d0:	dcf3      	bgt.n	115ba <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   115d2:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   115d4:	1b2c      	subs	r4, r5, r4
   115d6:	611c      	str	r4, [r3, #16]
   115d8:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   115da:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   115dc:	685a      	ldr	r2, [r3, #4]
   115de:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   115e0:	6059      	str	r1, [r3, #4]
   115e2:	bd70      	pop	{r4, r5, r6, pc}
   115e4:	bd70      	pop	{r4, r5, r6, pc}
   115e6:	bf00      	nop
   115e8:	200016e8 	.word	0x200016e8

000115ec <_move_thread_to_end_of_prio_q>:
{
   115ec:	b538      	push	{r3, r4, r5, lr}
   115ee:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   115f0:	f7ff feb4 	bl	1135c <k_spin_lock.isra.11>
   115f4:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   115f6:	4620      	mov	r0, r4
   115f8:	f7ff fe92 	bl	11320 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   115fc:	4621      	mov	r1, r4
   115fe:	4806      	ldr	r0, [pc, #24]	; (11618 <_move_thread_to_end_of_prio_q+0x2c>)
   11600:	f7ff ff66 	bl	114d0 <_priq_dumb_add>
	thread->base.thread_state |= states;
   11604:	7a63      	ldrb	r3, [r4, #9]
   11606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1160a:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1160c:	2000      	movs	r0, #0
   1160e:	f7ff fead 	bl	1136c <update_cache>
   11612:	f385 8811 	msr	BASEPRI, r5
   11616:	bd38      	pop	{r3, r4, r5, pc}
   11618:	2000170c 	.word	0x2000170c

0001161c <pend>:
{
   1161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1161e:	4605      	mov	r5, r0
   11620:	4614      	mov	r4, r2
   11622:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   11624:	f7ff fecc 	bl	113c0 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   11628:	7a6b      	ldrb	r3, [r5, #9]
   1162a:	f043 0302 	orr.w	r3, r3, #2
   1162e:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   11630:	1c63      	adds	r3, r4, #1
   11632:	d012      	beq.n	1165a <pend+0x3e>
	__asm__ volatile(
   11634:	f04f 0320 	mov.w	r3, #32
   11638:	f3ef 8711 	mrs	r7, BASEPRI
   1163c:	f383 8811 	msr	BASEPRI, r3
   11640:	230a      	movs	r3, #10
   11642:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   11644:	4632      	mov	r2, r6
   11646:	fbb4 f3f3 	udiv	r3, r4, r3
   1164a:	f105 0114 	add.w	r1, r5, #20
   1164e:	3301      	adds	r3, #1
   11650:	4628      	mov	r0, r5
   11652:	f7ff ff7d 	bl	11550 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11656:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   1165a:	b12e      	cbz	r6, 11668 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   1165c:	4629      	mov	r1, r5
   1165e:	4630      	mov	r0, r6
}
   11660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   11664:	f7ff bf34 	b.w	114d0 <_priq_dumb_add>
   11668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001166c <_pend_current_thread>:
{
   1166c:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   1166e:	4b06      	ldr	r3, [pc, #24]	; (11688 <_pend_current_thread+0x1c>)
{
   11670:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   11672:	6898      	ldr	r0, [r3, #8]
   11674:	f7ff ffd2 	bl	1161c <pend>
	_time_slice_elapsed = 0;
   11678:	4b04      	ldr	r3, [pc, #16]	; (1168c <_pend_current_thread+0x20>)
   1167a:	2200      	movs	r2, #0
   1167c:	4620      	mov	r0, r4
}
   1167e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   11682:	601a      	str	r2, [r3, #0]
   11684:	f7ef bf40 	b.w	1508 <__swap>
   11688:	200016e8 	.word	0x200016e8
   1168c:	2000171c 	.word	0x2000171c

00011690 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   11690:	4b13      	ldr	r3, [pc, #76]	; (116e0 <_is_thread_time_slicing+0x50>)
   11692:	681b      	ldr	r3, [r3, #0]
   11694:	2b00      	cmp	r3, #0
{
   11696:	b510      	push	{r4, lr}
   11698:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   1169a:	dd1f      	ble.n	116dc <_is_thread_time_slicing+0x4c>
   1169c:	8943      	ldrh	r3, [r0, #10]
   1169e:	2b7f      	cmp	r3, #127	; 0x7f
   116a0:	d81c      	bhi.n	116dc <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   116a2:	4b10      	ldr	r3, [pc, #64]	; (116e4 <_is_thread_time_slicing+0x54>)
   116a4:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   116a8:	681b      	ldr	r3, [r3, #0]
   116aa:	4299      	cmp	r1, r3
   116ac:	db16      	blt.n	116dc <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   116ae:	f7ff fe55 	bl	1135c <k_spin_lock.isra.11>
	return list->head == list;
   116b2:	490d      	ldr	r1, [pc, #52]	; (116e8 <_is_thread_time_slicing+0x58>)
   116b4:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116b8:	428b      	cmp	r3, r1
   116ba:	4604      	mov	r4, r0
   116bc:	d00a      	beq.n	116d4 <_is_thread_time_slicing+0x44>
		if (next) {
   116be:	b15b      	cbz	r3, 116d8 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   116c0:	f992 000a 	ldrsb.w	r0, [r2, #10]
   116c4:	f993 300a 	ldrsb.w	r3, [r3, #10]
   116c8:	1ac3      	subs	r3, r0, r3
   116ca:	4258      	negs	r0, r3
   116cc:	4158      	adcs	r0, r3
   116ce:	f384 8811 	msr	BASEPRI, r4
	return ret;
   116d2:	bd10      	pop	{r4, pc}
   116d4:	2000      	movs	r0, #0
   116d6:	e7fa      	b.n	116ce <_is_thread_time_slicing+0x3e>
   116d8:	4618      	mov	r0, r3
   116da:	e7f8      	b.n	116ce <_is_thread_time_slicing+0x3e>
		return 0;
   116dc:	2000      	movs	r0, #0
}
   116de:	bd10      	pop	{r4, pc}
   116e0:	200015c8 	.word	0x200015c8
   116e4:	200015cc 	.word	0x200015cc
   116e8:	200016e8 	.word	0x200016e8

000116ec <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   116ec:	4b01      	ldr	r3, [pc, #4]	; (116f4 <_update_time_slice_before_swap+0x8>)
   116ee:	2200      	movs	r2, #0
   116f0:	601a      	str	r2, [r3, #0]
   116f2:	4770      	bx	lr
   116f4:	2000171c 	.word	0x2000171c

000116f8 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   116f8:	b538      	push	{r3, r4, r5, lr}
   116fa:	4605      	mov	r5, r0
	int need_sched = 0;
   116fc:	2000      	movs	r0, #0
	return list->head == list;
   116fe:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11700:	42a5      	cmp	r5, r4
   11702:	d000      	beq.n	11706 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   11704:	b904      	cbnz	r4, 11708 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   11706:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   11708:	4620      	mov	r0, r4
   1170a:	f7ff fe9e 	bl	1144a <_unpend_thread>
		_ready_thread(th);
   1170e:	4620      	mov	r0, r4
   11710:	f7ff ff14 	bl	1153c <_ready_thread>
		need_sched = 1;
   11714:	2001      	movs	r0, #1
   11716:	e7f2      	b.n	116fe <_unpend_all+0x6>

00011718 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   11718:	4b02      	ldr	r3, [pc, #8]	; (11724 <_sched_init+0xc>)
   1171a:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1171e:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   11720:	629a      	str	r2, [r3, #40]	; 0x28
   11722:	4770      	bx	lr
   11724:	200016e8 	.word	0x200016e8

00011728 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   11728:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   1172a:	4c14      	ldr	r4, [pc, #80]	; (1177c <_impl_k_yield+0x54>)
   1172c:	4b14      	ldr	r3, [pc, #80]	; (11780 <_impl_k_yield+0x58>)
   1172e:	68a2      	ldr	r2, [r4, #8]
   11730:	681b      	ldr	r3, [r3, #0]
   11732:	429a      	cmp	r2, r3
   11734:	d00f      	beq.n	11756 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   11736:	f7ff fe11 	bl	1135c <k_spin_lock.isra.11>
   1173a:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1173c:	68a0      	ldr	r0, [r4, #8]
   1173e:	f7ff fdef 	bl	11320 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   11742:	68a1      	ldr	r1, [r4, #8]
   11744:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11748:	f7ff fec2 	bl	114d0 <_priq_dumb_add>
			update_cache(1);
   1174c:	2001      	movs	r0, #1
   1174e:	f7ff fe0d 	bl	1136c <update_cache>
   11752:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   11756:	6a22      	ldr	r2, [r4, #32]
   11758:	68a3      	ldr	r3, [r4, #8]
   1175a:	429a      	cmp	r2, r3
   1175c:	d00c      	beq.n	11778 <_impl_k_yield+0x50>
	__asm__ volatile(
   1175e:	f04f 0320 	mov.w	r3, #32
   11762:	f3ef 8011 	mrs	r0, BASEPRI
   11766:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   1176a:	4b06      	ldr	r3, [pc, #24]	; (11784 <_impl_k_yield+0x5c>)
   1176c:	2200      	movs	r2, #0
   1176e:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   11770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11774:	f7ef bec8 	b.w	1508 <__swap>
   11778:	bd38      	pop	{r3, r4, r5, pc}
   1177a:	bf00      	nop
   1177c:	200016e8 	.word	0x200016e8
   11780:	00012a58 	.word	0x00012a58
   11784:	2000171c 	.word	0x2000171c

00011788 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   11788:	4b01      	ldr	r3, [pc, #4]	; (11790 <_impl_k_current_get+0x8>)
   1178a:	6898      	ldr	r0, [r3, #8]
   1178c:	4770      	bx	lr
   1178e:	bf00      	nop
   11790:	200016e8 	.word	0x200016e8

00011794 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   11794:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   11798:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1179a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1179c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1179e:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   117a0:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   117a2:	6143      	str	r3, [r0, #20]
   117a4:	4770      	bx	lr

000117a6 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   117a6:	b570      	push	{r4, r5, r6, lr}
   117a8:	4604      	mov	r4, r0
   117aa:	f04f 0320 	mov.w	r3, #32
   117ae:	f3ef 8611 	mrs	r6, BASEPRI
   117b2:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   117b6:	f7ff fe3a 	bl	1142e <_unpend_first_thread>
	if (thread) {
   117ba:	4605      	mov	r5, r0
   117bc:	b160      	cbz	r0, 117d8 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   117be:	7a43      	ldrb	r3, [r0, #9]
   117c0:	06db      	lsls	r3, r3, #27
   117c2:	d102      	bne.n	117ca <_impl_k_sem_give+0x24>
   117c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   117c6:	3301      	adds	r3, #1
   117c8:	d012      	beq.n	117f0 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   117ca:	2300      	movs	r3, #0
   117cc:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   117ce:	4630      	mov	r0, r6
}
   117d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   117d4:	f7ff be44 	b.w	11460 <_reschedule>
	sem->count += (sem->count != sem->limit);
   117d8:	68a3      	ldr	r3, [r4, #8]
   117da:	68e2      	ldr	r2, [r4, #12]
   117dc:	429a      	cmp	r2, r3
   117de:	bf18      	it	ne
   117e0:	3301      	addne	r3, #1
   117e2:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   117e4:	2102      	movs	r1, #2
   117e6:	f104 0010 	add.w	r0, r4, #16
   117ea:	f000 fca1 	bl	12130 <_handle_obj_poll_events>
   117ee:	e7ee      	b.n	117ce <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   117f0:	f7ff fe8e 	bl	11510 <_add_thread_to_ready_q>
   117f4:	e7e9      	b.n	117ca <_impl_k_sem_give+0x24>

000117f6 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   117f6:	b410      	push	{r4}
   117f8:	460a      	mov	r2, r1
   117fa:	4604      	mov	r4, r0
   117fc:	f04f 0320 	mov.w	r3, #32
   11800:	f3ef 8011 	mrs	r0, BASEPRI
   11804:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   11808:	68a3      	ldr	r3, [r4, #8]
   1180a:	b133      	cbz	r3, 1181a <_impl_k_sem_take+0x24>
		sem->count--;
   1180c:	3b01      	subs	r3, #1
   1180e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11810:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   11814:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   11816:	bc10      	pop	{r4}
   11818:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1181a:	b921      	cbnz	r1, 11826 <_impl_k_sem_take+0x30>
   1181c:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   11820:	f06f 000f 	mvn.w	r0, #15
   11824:	e7f7      	b.n	11816 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   11826:	4621      	mov	r1, r4
}
   11828:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   1182a:	f7ff bf1f 	b.w	1166c <_pend_current_thread>
	...

00011830 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   11830:	4b03      	ldr	r3, [pc, #12]	; (11840 <_impl_k_uptime_get_32+0x10>)
   11832:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   11836:	230a      	movs	r3, #10
   11838:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   1183c:	4770      	bx	lr
   1183e:	bf00      	nop
   11840:	20001720 	.word	0x20001720

00011844 <_tick_get>:
	__asm__ volatile(
   11844:	f04f 0220 	mov.w	r2, #32
   11848:	f3ef 8311 	mrs	r3, BASEPRI
   1184c:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   11850:	4a02      	ldr	r2, [pc, #8]	; (1185c <_tick_get+0x18>)
   11852:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11856:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   1185a:	4770      	bx	lr
   1185c:	20001720 	.word	0x20001720

00011860 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   11860:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   11862:	f7ff ffef 	bl	11844 <_tick_get>
   11866:	240a      	movs	r4, #10
   11868:	fba0 2304 	umull	r2, r3, r0, r4
   1186c:	fb04 3301 	mla	r3, r4, r1, r3
}
   11870:	4610      	mov	r0, r2
   11872:	4619      	mov	r1, r3
   11874:	bd10      	pop	{r4, pc}
	...

00011878 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   11878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1187c:	4607      	mov	r7, r0
   1187e:	b085      	sub	sp, #20
	__asm__ volatile(
   11880:	f04f 0320 	mov.w	r3, #32
   11884:	f3ef 8011 	mrs	r0, BASEPRI
   11888:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   1188c:	4961      	ldr	r1, [pc, #388]	; (11a14 <_nano_sys_clock_tick_announce+0x19c>)
   1188e:	e9d1 4500 	ldrd	r4, r5, [r1]
   11892:	19e2      	adds	r2, r4, r7
   11894:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   11898:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1189c:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   118a0:	ae02      	add	r6, sp, #8
   118a2:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   118a4:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   118a6:	f04f 0320 	mov.w	r3, #32
   118aa:	f3ef 8011 	mrs	r0, BASEPRI
   118ae:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   118b2:	4c59      	ldr	r4, [pc, #356]	; (11a18 <_nano_sys_clock_tick_announce+0x1a0>)
   118b4:	4621      	mov	r1, r4
   118b6:	4602      	mov	r2, r0
   118b8:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   118bc:	428b      	cmp	r3, r1
   118be:	d000      	beq.n	118c2 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   118c0:	b9fb      	cbnz	r3, 11902 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   118c2:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   118c6:	68a0      	ldr	r0, [r4, #8]
   118c8:	f7ff fee2 	bl	11690 <_is_thread_time_slicing>
   118cc:	b1b0      	cbz	r0, 118fc <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   118ce:	4a53      	ldr	r2, [pc, #332]	; (11a1c <_nano_sys_clock_tick_announce+0x1a4>)
   118d0:	6811      	ldr	r1, [r2, #0]
   118d2:	230a      	movs	r3, #10
   118d4:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   118d8:	4b51      	ldr	r3, [pc, #324]	; (11a20 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   118da:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   118dc:	681b      	ldr	r3, [r3, #0]
   118de:	429f      	cmp	r7, r3
   118e0:	db0c      	blt.n	118fc <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   118e2:	2300      	movs	r3, #0
   118e4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   118e6:	f04f 0320 	mov.w	r3, #32
   118ea:	f3ef 8511 	mrs	r5, BASEPRI
   118ee:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   118f2:	68a0      	ldr	r0, [r4, #8]
   118f4:	f7ff fe7a 	bl	115ec <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   118f8:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   118fc:	b005      	add	sp, #20
   118fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   11902:	4d48      	ldr	r5, [pc, #288]	; (11a24 <_nano_sys_clock_tick_announce+0x1ac>)
   11904:	9501      	str	r5, [sp, #4]
   11906:	2101      	movs	r1, #1
   11908:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   1190a:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   1190e:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   11910:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   11914:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   11916:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   11918:	bfaa      	itet	ge
   1191a:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   1191e:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   11922:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   11926:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   11928:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   1192a:	691d      	ldr	r5, [r3, #16]
   1192c:	4298      	cmp	r0, r3
   1192e:	bf14      	ite	ne
   11930:	6818      	ldrne	r0, [r3, #0]
   11932:	2000      	moveq	r0, #0
   11934:	b9d5      	cbnz	r5, 1196c <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   11936:	e893 0220 	ldmia.w	r3, {r5, r9}
   1193a:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   1193e:	681d      	ldr	r5, [r3, #0]
   11940:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   11944:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   11946:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   1194a:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   1194c:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   1194e:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   11950:	f8c3 c010 	str.w	ip, [r3, #16]
   11954:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   11958:	f04f 0320 	mov.w	r3, #32
   1195c:	f3ef 8211 	mrs	r2, BASEPRI
   11960:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   11964:	4603      	mov	r3, r0
   11966:	2800      	cmp	r0, #0
   11968:	d1d4      	bne.n	11914 <_nano_sys_clock_tick_announce+0x9c>
   1196a:	e001      	b.n	11970 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   1196c:	2900      	cmp	r1, #0
   1196e:	dcf1      	bgt.n	11954 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11970:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   11974:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11976:	42b0      	cmp	r0, r6
   11978:	d103      	bne.n	11982 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   1197a:	9a01      	ldr	r2, [sp, #4]
   1197c:	2300      	movs	r3, #0
   1197e:	6013      	str	r3, [r2, #0]
   11980:	e7a1      	b.n	118c6 <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   11982:	2800      	cmp	r0, #0
   11984:	d0f9      	beq.n	1197a <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   11986:	9b03      	ldr	r3, [sp, #12]
   11988:	4298      	cmp	r0, r3
   1198a:	d102      	bne.n	11992 <_nano_sys_clock_tick_announce+0x11a>
   1198c:	f04f 0b00 	mov.w	fp, #0
   11990:	e001      	b.n	11996 <_nano_sys_clock_tick_announce+0x11e>
   11992:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   11996:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   1199a:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   1199e:	e890 000c 	ldmia.w	r0, {r2, r3}
   119a2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   119a4:	6802      	ldr	r2, [r0, #0]
   119a6:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   119a8:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   119aa:	f04f 0320 	mov.w	r3, #32
   119ae:	f3ef 8811 	mrs	r8, BASEPRI
   119b2:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   119b6:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   119ba:	b1d6      	cbz	r6, 119f2 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   119bc:	68c3      	ldr	r3, [r0, #12]
   119be:	b123      	cbz	r3, 119ca <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   119c0:	4630      	mov	r0, r6
   119c2:	f7ff fd25 	bl	11410 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   119c6:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   119ca:	7a73      	ldrb	r3, [r6, #9]
   119cc:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   119d0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   119d4:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   119d6:	d102      	bne.n	119de <_nano_sys_clock_tick_announce+0x166>
   119d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   119da:	3301      	adds	r3, #1
   119dc:	d015      	beq.n	11a0a <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   119de:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   119e2:	f1bb 0f00 	cmp.w	fp, #0
   119e6:	d0c8      	beq.n	1197a <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   119e8:	9b03      	ldr	r3, [sp, #12]
   119ea:	455b      	cmp	r3, fp
   119ec:	d108      	bne.n	11a00 <_nano_sys_clock_tick_announce+0x188>
   119ee:	2300      	movs	r3, #0
   119f0:	e008      	b.n	11a04 <_nano_sys_clock_tick_announce+0x18c>
   119f2:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   119f6:	6943      	ldr	r3, [r0, #20]
   119f8:	2b00      	cmp	r3, #0
   119fa:	d0f2      	beq.n	119e2 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   119fc:	4798      	blx	r3
   119fe:	e7f0      	b.n	119e2 <_nano_sys_clock_tick_announce+0x16a>
   11a00:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   11a04:	4658      	mov	r0, fp
   11a06:	469b      	mov	fp, r3
   11a08:	e7c9      	b.n	1199e <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   11a0a:	4630      	mov	r0, r6
   11a0c:	f7ff fd80 	bl	11510 <_add_thread_to_ready_q>
   11a10:	e7e5      	b.n	119de <_nano_sys_clock_tick_announce+0x166>
   11a12:	bf00      	nop
   11a14:	20001720 	.word	0x20001720
   11a18:	200016e8 	.word	0x200016e8
   11a1c:	2000171c 	.word	0x2000171c
   11a20:	200015c8 	.word	0x200015c8
   11a24:	20001718 	.word	0x20001718

00011a28 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   11a28:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   11a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a32:	4903      	ldr	r1, [pc, #12]	; (11a40 <k_sys_work_q_init+0x18>)
   11a34:	4803      	ldr	r0, [pc, #12]	; (11a44 <k_sys_work_q_init+0x1c>)
   11a36:	f000 f983 	bl	11d40 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   11a3a:	2000      	movs	r0, #0
   11a3c:	bd08      	pop	{r3, pc}
   11a3e:	bf00      	nop
   11a40:	20003038 	.word	0x20003038
   11a44:	20001728 	.word	0x20001728

00011a48 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11a48:	6903      	ldr	r3, [r0, #16]
   11a4a:	1c5a      	adds	r2, r3, #1
   11a4c:	d011      	beq.n	11a72 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11a4e:	4a0a      	ldr	r2, [pc, #40]	; (11a78 <_abort_timeout+0x30>)
   11a50:	6992      	ldr	r2, [r2, #24]
   11a52:	4290      	cmp	r0, r2
   11a54:	bf1f      	itttt	ne
   11a56:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11a58:	690a      	ldrne	r2, [r1, #16]
   11a5a:	189b      	addne	r3, r3, r2
   11a5c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   11a5e:	e890 000c 	ldmia.w	r0, {r2, r3}
   11a62:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11a64:	6802      	ldr	r2, [r0, #0]
   11a66:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   11a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a6c:	6103      	str	r3, [r0, #16]
	return 0;
   11a6e:	2000      	movs	r0, #0
   11a70:	4770      	bx	lr
		return _INACTIVE;
   11a72:	4618      	mov	r0, r3
}
   11a74:	4770      	bx	lr
   11a76:	bf00      	nop
   11a78:	200016e8 	.word	0x200016e8

00011a7c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   11a7c:	7a42      	ldrb	r2, [r0, #9]
   11a7e:	06d2      	lsls	r2, r2, #27
   11a80:	d104      	bne.n	11a8c <_ready_thread+0x10>
   11a82:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11a84:	3301      	adds	r3, #1
   11a86:	d101      	bne.n	11a8c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   11a88:	f7ff bd42 	b.w	11510 <_add_thread_to_ready_q>
   11a8c:	4770      	bx	lr
	...

00011a90 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   11a90:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   11a92:	f04f 0320 	mov.w	r3, #32
   11a96:	f3ef 8611 	mrs	r6, BASEPRI
   11a9a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   11a9e:	4a19      	ldr	r2, [pc, #100]	; (11b04 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   11aa0:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   11aa2:	230a      	movs	r3, #10
   11aa4:	3109      	adds	r1, #9
   11aa6:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   11aaa:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11aac:	6241      	str	r1, [r0, #36]	; 0x24
   11aae:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   11ab0:	2300      	movs	r3, #0
   11ab2:	6203      	str	r3, [r0, #32]
   11ab4:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11ab8:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   11aba:	f100 0514 	add.w	r5, r0, #20
   11abe:	d108      	bne.n	11ad2 <schedule_new_thread.part.11+0x42>
	node->next = list;
   11ac0:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   11ac2:	6993      	ldr	r3, [r2, #24]
   11ac4:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   11ac6:	6993      	ldr	r3, [r2, #24]
   11ac8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   11aca:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11acc:	f386 8811 	msr	BASEPRI, r6
   11ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11ad2:	2b00      	cmp	r3, #0
   11ad4:	d0f4      	beq.n	11ac0 <schedule_new_thread.part.11+0x30>
   11ad6:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   11ada:	6a44      	ldr	r4, [r0, #36]	; 0x24
   11adc:	691f      	ldr	r7, [r3, #16]
   11ade:	42bc      	cmp	r4, r7
   11ae0:	dc08      	bgt.n	11af4 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   11ae2:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   11ae4:	1b3c      	subs	r4, r7, r4
   11ae6:	611c      	str	r4, [r3, #16]
   11ae8:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   11aea:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   11aec:	685a      	ldr	r2, [r3, #4]
   11aee:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   11af0:	605d      	str	r5, [r3, #4]
   11af2:	e7eb      	b.n	11acc <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   11af4:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   11af6:	4573      	cmp	r3, lr
   11af8:	6244      	str	r4, [r0, #36]	; 0x24
   11afa:	d0e1      	beq.n	11ac0 <schedule_new_thread.part.11+0x30>
   11afc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11afe:	2b00      	cmp	r3, #0
   11b00:	d1eb      	bne.n	11ada <schedule_new_thread.part.11+0x4a>
   11b02:	e7dd      	b.n	11ac0 <schedule_new_thread.part.11+0x30>
   11b04:	200016e8 	.word	0x200016e8

00011b08 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   11b08:	4770      	bx	lr
	...

00011b0c <k_is_in_isr>:
   11b0c:	f3ef 8005 	mrs	r0, IPSR
   11b10:	280d      	cmp	r0, #13
   11b12:	d807      	bhi.n	11b24 <k_is_in_isr+0x18>
   11b14:	b138      	cbz	r0, 11b26 <k_is_in_isr+0x1a>
   11b16:	4b04      	ldr	r3, [pc, #16]	; (11b28 <k_is_in_isr+0x1c>)
   11b18:	6858      	ldr	r0, [r3, #4]
   11b1a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   11b1e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   11b22:	4770      	bx	lr
   11b24:	2001      	movs	r0, #1
}
   11b26:	4770      	bx	lr
   11b28:	e000ed00 	.word	0xe000ed00

00011b2c <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   11b2c:	4b02      	ldr	r3, [pc, #8]	; (11b38 <_is_thread_essential+0xc>)
   11b2e:	689b      	ldr	r3, [r3, #8]
   11b30:	7a18      	ldrb	r0, [r3, #8]
}
   11b32:	f000 0001 	and.w	r0, r0, #1
   11b36:	4770      	bx	lr
   11b38:	200016e8 	.word	0x200016e8

00011b3c <_impl_k_thread_start>:
{
   11b3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   11b3e:	f04f 0320 	mov.w	r3, #32
   11b42:	f3ef 8411 	mrs	r4, BASEPRI
   11b46:	f383 8811 	msr	BASEPRI, r3
   11b4a:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   11b4c:	0759      	lsls	r1, r3, #29
   11b4e:	d402      	bmi.n	11b56 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11b50:	f384 8811 	msr	BASEPRI, r4
   11b54:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11b56:	f023 0304 	bic.w	r3, r3, #4
   11b5a:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   11b5c:	f7ff ff8e 	bl	11a7c <_ready_thread>
	_reschedule(key);
   11b60:	4620      	mov	r0, r4
}
   11b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   11b66:	f7ff bc7b 	b.w	11460 <_reschedule>
	...

00011b6c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   11b6c:	b530      	push	{r4, r5, lr}
   11b6e:	b087      	sub	sp, #28
   11b70:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11b72:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   11b74:	9504      	str	r5, [sp, #16]
   11b76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   11b78:	9503      	str	r5, [sp, #12]
   11b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11b7c:	9502      	str	r5, [sp, #8]
   11b7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11b80:	9501      	str	r5, [sp, #4]
   11b82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11b84:	9500      	str	r5, [sp, #0]
   11b86:	f7ef fec1 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   11b8a:	4b04      	ldr	r3, [pc, #16]	; (11b9c <_setup_new_thread+0x30>)
   11b8c:	689b      	ldr	r3, [r3, #8]
   11b8e:	b913      	cbnz	r3, 11b96 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   11b90:	6663      	str	r3, [r4, #100]	; 0x64
}
   11b92:	b007      	add	sp, #28
   11b94:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   11b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11b98:	e7fa      	b.n	11b90 <_setup_new_thread+0x24>
   11b9a:	bf00      	nop
   11b9c:	200016e8 	.word	0x200016e8

00011ba0 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   11ba0:	b570      	push	{r4, r5, r6, lr}
   11ba2:	b086      	sub	sp, #24
   11ba4:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11ba6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   11ba8:	9604      	str	r6, [sp, #16]
   11baa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11bac:	9603      	str	r6, [sp, #12]
   11bae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11bb0:	9602      	str	r6, [sp, #8]
   11bb2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   11bb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   11bb6:	9601      	str	r6, [sp, #4]
   11bb8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   11bba:	9600      	str	r6, [sp, #0]
   11bbc:	f7ff ffd6 	bl	11b6c <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   11bc0:	1c6b      	adds	r3, r5, #1
   11bc2:	d003      	beq.n	11bcc <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   11bc4:	b92d      	cbnz	r5, 11bd2 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   11bc6:	4620      	mov	r0, r4
   11bc8:	f7ff ffb8 	bl	11b3c <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   11bcc:	4620      	mov	r0, r4
   11bce:	b006      	add	sp, #24
   11bd0:	bd70      	pop	{r4, r5, r6, pc}
   11bd2:	4629      	mov	r1, r5
   11bd4:	4620      	mov	r0, r4
   11bd6:	f7ff ff5b 	bl	11a90 <schedule_new_thread.part.11>
   11bda:	e7f7      	b.n	11bcc <_impl_k_thread_create+0x2c>

00011bdc <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   11bdc:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   11bde:	b510      	push	{r4, lr}
   11be0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   11be2:	b103      	cbz	r3, 11be6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   11be4:	4798      	blx	r3
   11be6:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   11be8:	06da      	lsls	r2, r3, #27
   11bea:	d106      	bne.n	11bfa <_k_thread_single_abort+0x1e>
   11bec:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11bee:	3201      	adds	r2, #1
   11bf0:	d103      	bne.n	11bfa <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   11bf2:	4620      	mov	r0, r4
   11bf4:	f7ff fbe4 	bl	113c0 <_remove_thread_from_ready_q>
   11bf8:	e00b      	b.n	11c12 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   11bfa:	079b      	lsls	r3, r3, #30
   11bfc:	d502      	bpl.n	11c04 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   11bfe:	4620      	mov	r0, r4
   11c00:	f7ff fc06 	bl	11410 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   11c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11c06:	3301      	adds	r3, #1
   11c08:	d003      	beq.n	11c12 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   11c0a:	f104 0014 	add.w	r0, r4, #20
   11c0e:	f7ff ff1b 	bl	11a48 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   11c12:	7a63      	ldrb	r3, [r4, #9]
   11c14:	f043 0308 	orr.w	r3, r3, #8
   11c18:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   11c1a:	bd10      	pop	{r4, pc}

00011c1c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   11c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   11c1e:	4f21      	ldr	r7, [pc, #132]	; (11ca4 <_init_static_threads+0x88>)
   11c20:	4d21      	ldr	r5, [pc, #132]	; (11ca8 <_init_static_threads+0x8c>)
{
   11c22:	b087      	sub	sp, #28
   11c24:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   11c26:	42bd      	cmp	r5, r7
   11c28:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   11c2c:	d314      	bcc.n	11c58 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   11c2e:	4b1f      	ldr	r3, [pc, #124]	; (11cac <_init_static_threads+0x90>)
   11c30:	689a      	ldr	r2, [r3, #8]
   11c32:	7ad3      	ldrb	r3, [r2, #11]
   11c34:	3b01      	subs	r3, #1
   11c36:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   11c38:	f04f 0320 	mov.w	r3, #32
   11c3c:	f3ef 8511 	mrs	r5, BASEPRI
   11c40:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   11c44:	4c18      	ldr	r4, [pc, #96]	; (11ca8 <_init_static_threads+0x8c>)
   11c46:	42b4      	cmp	r4, r6
   11c48:	d31f      	bcc.n	11c8a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11c4a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   11c4e:	b007      	add	sp, #28
   11c50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   11c54:	f7ff bc22 	b.w	1149c <k_sched_unlock>
		_setup_new_thread(
   11c58:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   11c5c:	9304      	str	r3, [sp, #16]
   11c5e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   11c62:	9303      	str	r3, [sp, #12]
   11c64:	f854 3c14 	ldr.w	r3, [r4, #-20]
   11c68:	9302      	str	r3, [sp, #8]
   11c6a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   11c6e:	9301      	str	r3, [sp, #4]
   11c70:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   11c74:	9300      	str	r3, [sp, #0]
   11c76:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   11c7a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   11c7c:	f7ff ff76 	bl	11b6c <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   11c80:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   11c84:	651d      	str	r5, [r3, #80]	; 0x50
   11c86:	4625      	mov	r5, r4
   11c88:	e7cd      	b.n	11c26 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   11c8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11c8c:	1c4b      	adds	r3, r1, #1
   11c8e:	d003      	beq.n	11c98 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   11c90:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   11c92:	b919      	cbnz	r1, 11c9c <_init_static_threads+0x80>
   11c94:	f7ff ff52 	bl	11b3c <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   11c98:	342c      	adds	r4, #44	; 0x2c
   11c9a:	e7d4      	b.n	11c46 <_init_static_threads+0x2a>
   11c9c:	f7ff fef8 	bl	11a90 <schedule_new_thread.part.11>
   11ca0:	e7fa      	b.n	11c98 <_init_static_threads+0x7c>
   11ca2:	bf00      	nop
   11ca4:	2000391c 	.word	0x2000391c
   11ca8:	2000391c 	.word	0x2000391c
   11cac:	200016e8 	.word	0x200016e8

00011cb0 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   11cb0:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   11cb2:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   11cb4:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   11cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   11cba:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   11cbc:	72c3      	strb	r3, [r0, #11]
   11cbe:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   11cc0:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   11cc2:	61c3      	str	r3, [r0, #28]
	t->func = func;
   11cc4:	6283      	str	r3, [r0, #40]	; 0x28
   11cc6:	4770      	bx	lr

00011cc8 <k_work_submit_to_queue>:
{
   11cc8:	b500      	push	{lr}
   11cca:	f101 0308 	add.w	r3, r1, #8
   11cce:	f3bf 8f5b 	dmb	ish
   11cd2:	e853 2f00 	ldrex	r2, [r3]
   11cd6:	f042 0e01 	orr.w	lr, r2, #1
   11cda:	e843 ec00 	strex	ip, lr, [r3]
   11cde:	f1bc 0f00 	cmp.w	ip, #0
   11ce2:	d1f6      	bne.n	11cd2 <k_work_submit_to_queue+0xa>
   11ce4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11ce8:	07d3      	lsls	r3, r2, #31
   11cea:	d403      	bmi.n	11cf4 <k_work_submit_to_queue+0x2c>
}
   11cec:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   11cf0:	f7ff ba94 	b.w	1121c <k_queue_append>
   11cf4:	f85d fb04 	ldr.w	pc, [sp], #4

00011cf8 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   11cf8:	f1a0 010c 	sub.w	r1, r0, #12
   11cfc:	6980      	ldr	r0, [r0, #24]
   11cfe:	f7ff bfe3 	b.w	11cc8 <k_work_submit_to_queue>

00011d02 <work_q_main>:
{
   11d02:	b510      	push	{r4, lr}
   11d04:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   11d06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11d0a:	4620      	mov	r0, r4
   11d0c:	f7ff faaa 	bl	11264 <_impl_k_queue_get>
		if (!work) {
   11d10:	4603      	mov	r3, r0
   11d12:	2800      	cmp	r0, #0
   11d14:	d0f7      	beq.n	11d06 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11d16:	3308      	adds	r3, #8
		handler = work->handler;
   11d18:	6842      	ldr	r2, [r0, #4]
   11d1a:	f3bf 8f5b 	dmb	ish
   11d1e:	e853 1f00 	ldrex	r1, [r3]
   11d22:	f021 0e01 	bic.w	lr, r1, #1
   11d26:	e843 ec00 	strex	ip, lr, [r3]
   11d2a:	f1bc 0f00 	cmp.w	ip, #0
   11d2e:	d1f6      	bne.n	11d1e <work_q_main+0x1c>
   11d30:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   11d34:	07cb      	lsls	r3, r1, #31
   11d36:	d500      	bpl.n	11d3a <work_q_main+0x38>
			handler(work);
   11d38:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   11d3a:	f7ff fcf5 	bl	11728 <_impl_k_yield>
   11d3e:	e7e2      	b.n	11d06 <work_q_main+0x4>

00011d40 <k_work_q_start>:
{
   11d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d42:	b087      	sub	sp, #28
   11d44:	4604      	mov	r4, r0
   11d46:	461f      	mov	r7, r3
   11d48:	460d      	mov	r5, r1
   11d4a:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   11d4c:	f7ff fa5e 	bl	1120c <_impl_k_queue_init>

   11d50:	2000      	movs	r0, #0
   11d52:	9005      	str	r0, [sp, #20]
   11d54:	9004      	str	r0, [sp, #16]
   11d56:	9002      	str	r0, [sp, #8]
   11d58:	9001      	str	r0, [sp, #4]
   11d5a:	9703      	str	r7, [sp, #12]
   11d5c:	9400      	str	r4, [sp, #0]
   11d5e:	4b04      	ldr	r3, [pc, #16]	; (11d70 <k_work_q_start+0x30>)
   11d60:	4632      	mov	r2, r6
   11d62:	4629      	mov	r1, r5
   11d64:	f104 0010 	add.w	r0, r4, #16
   11d68:	f7ff ff1a 	bl	11ba0 <_impl_k_thread_create>
}
   11d6c:	b007      	add	sp, #28
   11d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d70:	00011d03 	.word	0x00011d03

00011d74 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   11d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   11d78:	2300      	movs	r3, #0
   11d7a:	61c2      	str	r2, [r0, #28]
	t->func = func;
   11d7c:	4a04      	ldr	r2, [pc, #16]	; (11d90 <k_delayed_work_init+0x1c>)
   11d7e:	6003      	str	r3, [r0, #0]
   11d80:	6041      	str	r1, [r0, #4]
   11d82:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   11d84:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   11d86:	6143      	str	r3, [r0, #20]
	t->func = func;
   11d88:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   11d8a:	6243      	str	r3, [r0, #36]	; 0x24
   11d8c:	4770      	bx	lr
   11d8e:	bf00      	nop
   11d90:	00011cf9 	.word	0x00011cf9

00011d94 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   11d94:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   11d96:	f04f 0320 	mov.w	r3, #32
   11d9a:	f3ef 8411 	mrs	r4, BASEPRI
   11d9e:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   11da2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11da4:	b923      	cbnz	r3, 11db0 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11da6:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   11daa:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   11dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11db0:	f3bf 8f5b 	dmb	ish
   11db4:	6883      	ldr	r3, [r0, #8]
   11db6:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   11dba:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   11dbc:	f100 0508 	add.w	r5, r0, #8
   11dc0:	d533      	bpl.n	11e2a <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   11dc2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   11dc4:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   11dc6:	2100      	movs	r1, #0
   11dc8:	2b00      	cmp	r3, #0
   11dca:	d0ec      	beq.n	11da6 <k_delayed_work_cancel+0x12>
   11dcc:	4298      	cmp	r0, r3
   11dce:	d127      	bne.n	11e20 <k_delayed_work_cancel+0x8c>
   11dd0:	6803      	ldr	r3, [r0, #0]
   11dd2:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   11dd4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   11dd8:	b9c9      	cbnz	r1, 11e0e <k_delayed_work_cancel+0x7a>
   11dda:	42b8      	cmp	r0, r7
	list->head = node;
   11ddc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   11dde:	d100      	bne.n	11de2 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   11de0:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11de2:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11de4:	f003 0303 	and.w	r3, r3, #3
   11de8:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   11dea:	2300      	movs	r3, #0
   11dec:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11dee:	f3bf 8f5b 	dmb	ish
   11df2:	e855 2f00 	ldrex	r2, [r5]
   11df6:	f022 0201 	bic.w	r2, r2, #1
   11dfa:	e845 2100 	strex	r1, r2, [r5]
   11dfe:	2900      	cmp	r1, #0
   11e00:	d1f7      	bne.n	11df2 <k_delayed_work_cancel+0x5e>
   11e02:	f3bf 8f5b 	dmb	ish
   11e06:	f384 8811 	msr	BASEPRI, r4
	return 0;
   11e0a:	4618      	mov	r0, r3
   11e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   11e0e:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   11e10:	f006 0603 	and.w	r6, r6, #3
   11e14:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   11e16:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   11e18:	600b      	str	r3, [r1, #0]
	list->tail = node;
   11e1a:	bf08      	it	eq
   11e1c:	6051      	streq	r1, [r2, #4]
   11e1e:	e7e0      	b.n	11de2 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   11e20:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   11e22:	4619      	mov	r1, r3
   11e24:	f026 0303 	bic.w	r3, r6, #3
   11e28:	e7ce      	b.n	11dc8 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11e2a:	69c1      	ldr	r1, [r0, #28]
   11e2c:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   11e2e:	f100 020c 	add.w	r2, r0, #12
   11e32:	d0da      	beq.n	11dea <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11e34:	4b08      	ldr	r3, [pc, #32]	; (11e58 <k_delayed_work_cancel+0xc4>)
   11e36:	699b      	ldr	r3, [r3, #24]
   11e38:	429a      	cmp	r2, r3
   11e3a:	bf1f      	itttt	ne
   11e3c:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11e3e:	6913      	ldrne	r3, [r2, #16]
   11e40:	185b      	addne	r3, r3, r1
   11e42:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   11e44:	6903      	ldr	r3, [r0, #16]
   11e46:	68c2      	ldr	r2, [r0, #12]
   11e48:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11e4a:	68c2      	ldr	r2, [r0, #12]
   11e4c:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   11e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e52:	61c3      	str	r3, [r0, #28]
   11e54:	e7c9      	b.n	11dea <k_delayed_work_cancel+0x56>
   11e56:	bf00      	nop
   11e58:	200016e8 	.word	0x200016e8

00011e5c <k_delayed_work_submit_to_queue>:
{
   11e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e5e:	4607      	mov	r7, r0
   11e60:	460c      	mov	r4, r1
   11e62:	4615      	mov	r5, r2
	__asm__ volatile(
   11e64:	f04f 0320 	mov.w	r3, #32
   11e68:	f3ef 8611 	mrs	r6, BASEPRI
   11e6c:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   11e70:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   11e72:	b123      	cbz	r3, 11e7e <k_delayed_work_submit_to_queue+0x22>
   11e74:	4283      	cmp	r3, r0
   11e76:	d00b      	beq.n	11e90 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   11e78:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   11e7c:	e00d      	b.n	11e9a <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   11e7e:	b138      	cbz	r0, 11e90 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   11e80:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   11e82:	b96d      	cbnz	r5, 11ea0 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   11e84:	4621      	mov	r1, r4
   11e86:	4638      	mov	r0, r7
   11e88:	f7ff ff1e 	bl	11cc8 <k_work_submit_to_queue>
	err = 0;
   11e8c:	2000      	movs	r0, #0
   11e8e:	e004      	b.n	11e9a <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   11e90:	4620      	mov	r0, r4
   11e92:	f7ff ff7f 	bl	11d94 <k_delayed_work_cancel>
		if (err < 0) {
   11e96:	2800      	cmp	r0, #0
   11e98:	daf2      	bge.n	11e80 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   11e9a:	f386 8811 	msr	BASEPRI, r6
}
   11e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   11ea0:	220a      	movs	r2, #10
   11ea2:	3509      	adds	r5, #9
   11ea4:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   11ea8:	4a16      	ldr	r2, [pc, #88]	; (11f04 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   11eaa:	2300      	movs	r3, #0
   11eac:	4611      	mov	r1, r2
   11eae:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   11eb0:	61a3      	str	r3, [r4, #24]
   11eb2:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   11eb6:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11eb8:	428b      	cmp	r3, r1
   11eba:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11ebe:	61e5      	str	r5, [r4, #28]
   11ec0:	d106      	bne.n	11ed0 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   11ec2:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   11ec4:	6993      	ldr	r3, [r2, #24]
   11ec6:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   11ec8:	6993      	ldr	r3, [r2, #24]
   11eca:	601f      	str	r7, [r3, #0]
	list->tail = node;
   11ecc:	6197      	str	r7, [r2, #24]
   11ece:	e7dd      	b.n	11e8c <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11ed0:	2b00      	cmp	r3, #0
   11ed2:	d0f6      	beq.n	11ec2 <k_delayed_work_submit_to_queue+0x66>
   11ed4:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   11ed8:	69e0      	ldr	r0, [r4, #28]
   11eda:	691d      	ldr	r5, [r3, #16]
   11edc:	42a8      	cmp	r0, r5
   11ede:	dc08      	bgt.n	11ef2 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   11ee0:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   11ee2:	1a28      	subs	r0, r5, r0
   11ee4:	6118      	str	r0, [r3, #16]
   11ee6:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   11ee8:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   11eea:	685a      	ldr	r2, [r3, #4]
   11eec:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   11eee:	605f      	str	r7, [r3, #4]
   11ef0:	e7cc      	b.n	11e8c <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   11ef2:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   11ef4:	4573      	cmp	r3, lr
   11ef6:	61e0      	str	r0, [r4, #28]
   11ef8:	d0e3      	beq.n	11ec2 <k_delayed_work_submit_to_queue+0x66>
   11efa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11efc:	2b00      	cmp	r3, #0
   11efe:	d1eb      	bne.n	11ed8 <k_delayed_work_submit_to_queue+0x7c>
   11f00:	e7df      	b.n	11ec2 <k_delayed_work_submit_to_queue+0x66>
   11f02:	bf00      	nop
   11f04:	200016e8 	.word	0x200016e8

00011f08 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   11f08:	2314      	movs	r3, #20
   11f0a:	b530      	push	{r4, r5, lr}
   11f0c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   11f10:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   11f12:	2900      	cmp	r1, #0
   11f14:	da00      	bge.n	11f18 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   11f16:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   11f18:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   11f1a:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   11f1c:	f003 030f 	and.w	r3, r3, #15
   11f20:	2b02      	cmp	r3, #2
   11f22:	d003      	beq.n	11f2c <clear_event_registrations+0x24>
   11f24:	2b04      	cmp	r3, #4
   11f26:	d001      	beq.n	11f2c <clear_event_registrations+0x24>
   11f28:	2b01      	cmp	r3, #1
   11f2a:	d104      	bne.n	11f36 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   11f2c:	6843      	ldr	r3, [r0, #4]
   11f2e:	6805      	ldr	r5, [r0, #0]
   11f30:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   11f32:	6805      	ldr	r5, [r0, #0]
   11f34:	606b      	str	r3, [r5, #4]
   11f36:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   11f3a:	f04f 0320 	mov.w	r3, #32
   11f3e:	f3ef 8211 	mrs	r2, BASEPRI
   11f42:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   11f46:	3901      	subs	r1, #1
   11f48:	3814      	subs	r0, #20
   11f4a:	e7e2      	b.n	11f12 <clear_event_registrations+0xa>

00011f4c <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   11f4c:	6883      	ldr	r3, [r0, #8]
{
   11f4e:	b570      	push	{r4, r5, r6, lr}
   11f50:	4605      	mov	r5, r0
   11f52:	460e      	mov	r6, r1
	if (!event->poller) {
   11f54:	b1d3      	cbz	r3, 11f8c <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   11f56:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   11f58:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   11f5a:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   11f5c:	7a63      	ldrb	r3, [r4, #9]
   11f5e:	079a      	lsls	r2, r3, #30
   11f60:	d514      	bpl.n	11f8c <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   11f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11f64:	3302      	adds	r3, #2
   11f66:	d01a      	beq.n	11f9e <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   11f68:	4620      	mov	r0, r4
   11f6a:	f7ff fa6e 	bl	1144a <_unpend_thread>
	_set_thread_return_value(thread,
   11f6e:	2e00      	cmp	r6, #0
   11f70:	bf0c      	ite	eq
   11f72:	f06f 0303 	mvneq.w	r3, #3
   11f76:	2300      	movne	r3, #0
   11f78:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   11f7a:	7a63      	ldrb	r3, [r4, #9]
   11f7c:	06db      	lsls	r3, r3, #27
   11f7e:	d105      	bne.n	11f8c <signal_poll_event+0x40>
   11f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11f82:	3301      	adds	r3, #1
   11f84:	d102      	bne.n	11f8c <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   11f86:	4620      	mov	r0, r4
   11f88:	f7ff fac2 	bl	11510 <_add_thread_to_ready_q>
	event->state |= state;
   11f8c:	7b6b      	ldrb	r3, [r5, #13]
   11f8e:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   11f92:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   11f96:	2000      	movs	r0, #0
	event->state |= state;
   11f98:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   11f9a:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   11f9c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   11f9e:	f06f 000a 	mvn.w	r0, #10
}
   11fa2:	bd70      	pop	{r4, r5, r6, pc}

00011fa4 <add_event>:
{
   11fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   11fa6:	6803      	ldr	r3, [r0, #0]
   11fa8:	4298      	cmp	r0, r3
   11faa:	4604      	mov	r4, r0
   11fac:	460e      	mov	r6, r1
   11fae:	4617      	mov	r7, r2
   11fb0:	d106      	bne.n	11fc0 <add_event+0x1c>
	node->next = list;
   11fb2:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   11fb4:	6863      	ldr	r3, [r4, #4]
   11fb6:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   11fb8:	6863      	ldr	r3, [r4, #4]
   11fba:	601e      	str	r6, [r3, #0]
	list->tail = node;
   11fbc:	6066      	str	r6, [r4, #4]
   11fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   11fc0:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   11fc2:	2b00      	cmp	r3, #0
   11fc4:	d0f5      	beq.n	11fb2 <add_event+0xe>
   11fc6:	689b      	ldr	r3, [r3, #8]
   11fc8:	6811      	ldr	r1, [r2, #0]
   11fca:	6818      	ldr	r0, [r3, #0]
   11fcc:	f7ff f9ee 	bl	113ac <_is_t1_higher_prio_than_t2>
   11fd0:	2800      	cmp	r0, #0
   11fd2:	d1ee      	bne.n	11fb2 <add_event+0xe>
	return list->head == list;
   11fd4:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11fd6:	42ac      	cmp	r4, r5
   11fd8:	d0eb      	beq.n	11fb2 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   11fda:	2d00      	cmp	r5, #0
   11fdc:	d0e9      	beq.n	11fb2 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   11fde:	68ab      	ldr	r3, [r5, #8]
   11fe0:	6838      	ldr	r0, [r7, #0]
   11fe2:	6819      	ldr	r1, [r3, #0]
   11fe4:	f7ff f9e2 	bl	113ac <_is_t1_higher_prio_than_t2>
   11fe8:	b130      	cbz	r0, 11ff8 <add_event+0x54>
		node->prev = insert_point->prev;
   11fea:	686b      	ldr	r3, [r5, #4]
   11fec:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   11fee:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   11ff0:	686b      	ldr	r3, [r5, #4]
   11ff2:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   11ff4:	606e      	str	r6, [r5, #4]
   11ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   11ff8:	6863      	ldr	r3, [r4, #4]
   11ffa:	429d      	cmp	r5, r3
   11ffc:	d0d9      	beq.n	11fb2 <add_event+0xe>
   11ffe:	682d      	ldr	r5, [r5, #0]
   12000:	e7eb      	b.n	11fda <add_event+0x36>

00012002 <k_poll_event_init>:
{
   12002:	b530      	push	{r4, r5, lr}
	event->type = type;
   12004:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   12006:	6103      	str	r3, [r0, #16]
	event->type = type;
   12008:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   1200c:	7b81      	ldrb	r1, [r0, #14]
   1200e:	f362 0100 	bfi	r1, r2, #0, #1
   12012:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   12014:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   12016:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   12018:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   1201c:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   12020:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   12022:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   12024:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   12026:	bd30      	pop	{r4, r5, pc}

00012028 <_impl_k_poll>:
{
   12028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1202c:	4b3f      	ldr	r3, [pc, #252]	; (1212c <_impl_k_poll+0x104>)
{
   1202e:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   12030:	689b      	ldr	r3, [r3, #8]
   12032:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   12034:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   12036:	2301      	movs	r3, #1
{
   12038:	4607      	mov	r7, r0
   1203a:	468a      	mov	sl, r1
   1203c:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1203e:	9301      	str	r3, [sp, #4]
   12040:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   12042:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   12046:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   12048:	4556      	cmp	r6, sl
   1204a:	db10      	blt.n	1206e <_impl_k_poll+0x46>
   1204c:	f04f 0320 	mov.w	r3, #32
   12050:	f3ef 8611 	mrs	r6, BASEPRI
   12054:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   12058:	9c01      	ldr	r4, [sp, #4]
   1205a:	2c00      	cmp	r4, #0
   1205c:	d13f      	bne.n	120de <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   1205e:	4632      	mov	r2, r6
   12060:	4629      	mov	r1, r5
   12062:	4638      	mov	r0, r7
   12064:	f7ff ff50 	bl	11f08 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12068:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   1206c:	e040      	b.n	120f0 <_impl_k_poll+0xc8>
	__asm__ volatile(
   1206e:	f04f 0320 	mov.w	r3, #32
   12072:	f3ef 8b11 	mrs	fp, BASEPRI
   12076:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1207a:	7b62      	ldrb	r2, [r4, #13]
   1207c:	f002 030f 	and.w	r3, r2, #15
   12080:	2b02      	cmp	r3, #2
   12082:	d003      	beq.n	1208c <_impl_k_poll+0x64>
   12084:	2b04      	cmp	r3, #4
   12086:	d004      	beq.n	12092 <_impl_k_poll+0x6a>
   12088:	2b01      	cmp	r3, #1
   1208a:	d106      	bne.n	1209a <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   1208c:	6921      	ldr	r1, [r4, #16]
   1208e:	6889      	ldr	r1, [r1, #8]
   12090:	e001      	b.n	12096 <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   12092:	6921      	ldr	r1, [r4, #16]
   12094:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   12096:	2900      	cmp	r1, #0
   12098:	d13d      	bne.n	12116 <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1209a:	f1b8 0f00 	cmp.w	r8, #0
   1209e:	d014      	beq.n	120ca <_impl_k_poll+0xa2>
   120a0:	9a01      	ldr	r2, [sp, #4]
   120a2:	b192      	cbz	r2, 120ca <_impl_k_poll+0xa2>
	switch (event->type) {
   120a4:	2b02      	cmp	r3, #2
   120a6:	d007      	beq.n	120b8 <_impl_k_poll+0x90>
   120a8:	2b04      	cmp	r3, #4
   120aa:	d013      	beq.n	120d4 <_impl_k_poll+0xac>
   120ac:	2b01      	cmp	r3, #1
   120ae:	d109      	bne.n	120c4 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   120b0:	466a      	mov	r2, sp
   120b2:	4621      	mov	r1, r4
   120b4:	6920      	ldr	r0, [r4, #16]
   120b6:	e003      	b.n	120c0 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   120b8:	6920      	ldr	r0, [r4, #16]
   120ba:	466a      	mov	r2, sp
   120bc:	4621      	mov	r1, r4
   120be:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   120c0:	f7ff ff70 	bl	11fa4 <add_event>
	event->poller = poller;
   120c4:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   120c8:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   120ca:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   120ce:	3601      	adds	r6, #1
   120d0:	3414      	adds	r4, #20
   120d2:	e7b9      	b.n	12048 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   120d4:	6920      	ldr	r0, [r4, #16]
   120d6:	466a      	mov	r2, sp
   120d8:	4621      	mov	r1, r4
   120da:	3008      	adds	r0, #8
   120dc:	e7f0      	b.n	120c0 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   120de:	2300      	movs	r3, #0
   120e0:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   120e2:	f1b8 0f00 	cmp.w	r8, #0
   120e6:	d107      	bne.n	120f8 <_impl_k_poll+0xd0>
   120e8:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   120ec:	f06f 040a 	mvn.w	r4, #10
}
   120f0:	4620      	mov	r0, r4
   120f2:	b005      	add	sp, #20
   120f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   120f8:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   120fa:	4642      	mov	r2, r8
   120fc:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   120fe:	9102      	str	r1, [sp, #8]
   12100:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   12102:	f7ff fab3 	bl	1166c <_pend_current_thread>
   12106:	4604      	mov	r4, r0
	__asm__ volatile(
   12108:	f04f 0320 	mov.w	r3, #32
   1210c:	f3ef 8611 	mrs	r6, BASEPRI
   12110:	f383 8811 	msr	BASEPRI, r3
   12114:	e7a3      	b.n	1205e <_impl_k_poll+0x36>
	event->state |= state;
   12116:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   1211a:	f363 1207 	bfi	r2, r3, #4, #4
   1211e:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   12120:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   12124:	f8cd 9004 	str.w	r9, [sp, #4]
   12128:	e7cf      	b.n	120ca <_impl_k_poll+0xa2>
   1212a:	bf00      	nop
   1212c:	200016e8 	.word	0x200016e8

00012130 <_handle_obj_poll_events>:
	return list->head == list;
   12130:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   12132:	4298      	cmp	r0, r3
   12134:	d007      	beq.n	12146 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   12136:	e893 0005 	ldmia.w	r3, {r0, r2}
   1213a:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1213c:	6818      	ldr	r0, [r3, #0]
   1213e:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   12140:	4618      	mov	r0, r3
   12142:	f7ff bf03 	b.w	11f4c <signal_poll_event>
   12146:	4770      	bx	lr

00012148 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   12148:	b538      	push	{r3, r4, r5, lr}
   1214a:	f04f 0320 	mov.w	r3, #32
   1214e:	f3ef 8511 	mrs	r5, BASEPRI
   12152:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   12156:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   12158:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1215a:	4298      	cmp	r0, r3
	signal->signaled = 1;
   1215c:	f04f 0101 	mov.w	r1, #1
   12160:	6081      	str	r1, [r0, #8]
   12162:	d00d      	beq.n	12180 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   12164:	e893 0005 	ldmia.w	r3, {r0, r2}
   12168:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1216a:	6818      	ldr	r0, [r3, #0]
   1216c:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1216e:	4618      	mov	r0, r3
   12170:	f7ff feec 	bl	11f4c <signal_poll_event>
   12174:	4604      	mov	r4, r0

	_reschedule(key);
   12176:	4628      	mov	r0, r5
   12178:	f7ff f972 	bl	11460 <_reschedule>
	return rc;
}
   1217c:	4620      	mov	r0, r4
   1217e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12180:	f385 8811 	msr	BASEPRI, r5
		return 0;
   12184:	2400      	movs	r4, #0
   12186:	e7f9      	b.n	1217c <_impl_k_poll_signal+0x34>

00012188 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   12188:	4770      	bx	lr
